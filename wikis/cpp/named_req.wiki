{{title|Named Requirements}}
{{cpp/named req/navbar}}

The ''named requirements'' listed on this page are the named requirements used in the normative text of the C++ standard to define the expectations of the standard library.

The burden to ensure that library templates are instantiated with template arguments that satisfy these requirements is on the programmer. Failure to do so may result in very complex compiler diagnostics.

Some of these requirements are formalized in C++20 using the [[cpp/language/constraints|concepts]] language feature.

{{dsc begin}}
{{dsc h1|Basic}}
{{dsc named req|cpp/named req/DefaultConstructible|specifies that an object of the type can be default constructed}}
{{dsc named req|cpp/named req/MoveConstructible|specifies that an object of the type can be constructed from rvalue|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/CopyConstructible|specifies that an object of the type can be constructed from lvalue}}
{{dsc named req|cpp/named req/MoveAssignable|specifies that an object of the type can be assigned from rvalue|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/CopyAssignable|specifies that an object of the type can be assigned from lvalue}}
{{dsc named req|cpp/named req/Destructible|specifies that an object of the type can be destroyed}}

{{dsc h1|Type properties}}
{{dsc|Note: the standard does not define named requirements with names specified in this subcategory. &lt;br&gt;These are type categories defined by the core language. They are included here as named requirements only for consistency.}}
{{dsc named req|cpp/named req/ScalarType|object types that are not array types or class types}}
{{dsc named req|cpp/named req/PODType|POD (Plain Old Data) types, compatible with C {{c/core|struct}}|notes={{mark deprecated c++20}}}}
{{dsc named req|cpp/named req/TriviallyCopyable|objects of these types can maintain their values after copying their underlying bytes|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/TrivialType|objects of these types can be trivially constructed and copied|notes={{mark c++11}}{{mark deprecated c++26}}}}
{{dsc named req|cpp/named req/StandardLayoutType|these types are useful for communicating with code written in other programming languages|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/ImplicitLifetimeType|objects of these types can be implicitly created, and their lifetimes can be implicitly started}}

{{dsc h1|Library-wide}}
{{dsc named req|cpp/named req/BooleanTestable&lt;!-- LWG2114, P2167R3 --&gt;|boolean operations ({{c/core|operator&amp;&amp;}}, {{c/core|operator{{!!}}}}, and {{c/core|operator!}}) have usual semantics}}
{{dsc named req|cpp/named req/EqualityComparable|{{tt|operator{{==}}}} is an equivalence relation}}
{{dsc named req|cpp/named req/LessThanComparable|{{tt|operator&lt;}} is a strict weak ordering relation}}
{{dsc named req|cpp/named req/Swappable|can be swapped with an unqualified non-member function call {{c|swap()}}}}
{{dsc named req|cpp/named req/ValueSwappable|a {{named req|Iterator}} that dereferences to a {{named req|Swappable}} type|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/NullablePointer|a pointer-like type supporting a null value|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/Hash|a {{named req|FunctionObject}} that for inputs with different values has a low probability of giving the same output|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/Allocator|a class type that contains allocation information}}
{{dsc named req|cpp/named req/FunctionObject|an object that can be called with the function call syntax}}
{{dsc named req|cpp/named req/Callable|a type for which the invoke operation is defined}}
{{dsc named req|cpp/named req/Predicate|a {{named req|FunctionObject}} that returns a value convertible to {{c/core|bool}} for one argument without modifying it}}
{{dsc named req|cpp/named req/BinaryPredicate|a {{named req|FunctionObject}} that returns a value convertible to {{c/core|bool}} for two arguments without modifying them}}
{{dsc named req|cpp/named req/Compare|a {{named req|BinaryPredicate}} that establishes an ordering relation}}
{{dsc end}}

{{dsc begin}}
{{dsc h1|Container}}
{{dsc named req|cpp/named req/Container|data structure that allows element access using iterators}}
{{dsc named req|cpp/named req/ReversibleContainer|container using bidirectional iterators}}
{{dsc named req|cpp/named req/AllocatorAwareContainer|container using an allocator|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/SequenceContainer|container with elements stored linearly}}
{{dsc named req|cpp/named req/ContiguousContainer|container with elements stored at adjacent memory addresses|notes={{mark c++17}}}}
{{dsc named req|cpp/named req/AssociativeContainer|container that stores elements by associating them to keys}}
{{dsc named req|cpp/named req/UnorderedAssociativeContainer|container that stores elements stored in buckets by associating them to keys|notes={{mark c++11}}}}
{{dsc h2|Container element}}
{{dsc named req|cpp/named req/DefaultInsertable|element can be default-constructed in uninitialized storage|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/CopyInsertable|element can be copy-constructed in uninitialized storage|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/MoveInsertable|element can be move-constructed in uninitialized storage|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/EmplaceConstructible|element can be constructed in uninitialized storage|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/Erasable|element can be destroyed using an allocator|notes={{mark c++11}}}}

{{dsc h1|Iterator}}
{{dsc named req|cpp/named req/Iterator|title=LegacyIterator|general concept to access data within some data structure}}
{{dsc named req|cpp/named req/InputIterator|title=LegacyInputIterator|iterator that can be used to read data}}
{{dsc named req|cpp/named req/OutputIterator|title=LegacyOutputIterator|iterator that can be used to write data}}
{{dsc named req|cpp/named req/ForwardIterator|title=LegacyForwardIterator|iterator that can be used to read data multiple times}}
{{dsc named req|cpp/named req/BidirectionalIterator|title=LegacyBidirectionalIterator|iterator that can be both incremented and decremented}}
{{dsc named req|cpp/named req/RandomAccessIterator|title=LegacyRandomAccessIterator|iterator that can be advanced in constant time}}
{{dsc named req|cpp/named req/ContiguousIterator|title=LegacyContiguousIterator|iterator to contiguously-allocated elements|notes={{mark c++17}}}}
{{dsc named req|cpp/named req/ConstexprIterator|iterator that can be used during constant expression evaluation|notes={{mark c++20}}}}

{{dsc h1|Stream I/O functions}}
&lt;!--27.7.2.3[istream.unformatted]/1--&gt;
{{dsc named req|cpp/named req/UnformattedInputFunction|a stream input function that does not skip leading whitespace and counts the processed characters}}
&lt;!--27.7.2.2.1[istream.formatted.reqmts]--&gt;
{{dsc named req|cpp/named req/FormattedInputFunction|a stream input function that skips leading whitespace}}
&lt;!--27.7.3.7[ostream.unformatted]/1--&gt;
{{dsc named req|cpp/named req/UnformattedOutputFunction|a basic stream output function}}
&lt;!--27.7.3.6.1[ostream.formatted.reqmts]--&gt;
{{dsc named req|cpp/named req/FormattedOutputFunction|a stream output function that sets failbit on errors and returns a reference to the stream}}

{{dsc h1|Formatters}}
{{dsc named req|cpp/named req/BasicFormatter|abstracts formatting operations for a given formatting argument type and character type|notes={{mark c++20}}}}
{{dsc named req|cpp/named req/Formatter|defines functions used by the [[cpp/utility/format|formatting library]]|notes={{mark c++20}}}}

{{dsc h1|Random Number Generation}}
{{dsc named req|cpp/named req/SeedSequence|consumes a sequence of integers and produces a sequence of 32-bit unsigned values|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/UniformRandomBitGenerator|returns uniformly distributed random unsigned integers|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/RandomNumberEngine|a deterministic {{named req|UniformRandomBitGenerator}}, defined by the seed|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/RandomNumberEngineAdaptor|a {{named req|RandomNumberEngine}} that transforms the output of another {{named req|RandomNumberEngine}}|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/RandomNumberDistribution|returns random numbers distributed according to a given mathematical probability density function|notes={{mark c++11}}}}

{{dsc h1|Concurrency}}
{{dsc named req|cpp/named req/BasicLockable|provides exclusive ownership semantics for execution agents (i.e. threads)|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/Lockable|a {{named req|BasicLockable}} that supports attempted lock acquisition|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/TimedLockable|a {{named req|Lockable}} that supports timed lock acquisition|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/SharedLockable|provides shared ownership semantics for execution agents (i.e. threads)|notes={{mark c++14}}&lt;!--P2160R1--&gt;}}
{{dsc named req|cpp/named req/SharedTimedLockable|a {{named req|SharedLockable}} that supports timed lock acquisition|notes={{mark c++14}}&lt;!--P2160R1--&gt;}}
{{dsc named req|cpp/named req/Mutex|a {{named req|Lockable}} that protects against data races and sequentially consistent synchronization|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/TimedMutex|a {{named req|TimedLockable}} that protects against data races and sequentially consistent synchronization|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/SharedMutex|a {{named req|Mutex}} that supports shared ownership semantics|notes={{mark c++17}}}}
{{dsc named req|cpp/named req/SharedTimedMutex|a {{named req|TimedMutex}} that supports shared ownership semantics|notes={{mark c++14}}}}

{{dsc h1|Ranges}}
{{dsc named req|cpp/named req/RangeAdaptorObject|a {{named req|FunctionObject}} that creates a [[cpp/ranges#Range adaptors|range adaptor]] from a {{lconcept|viewable_range}} and additional arguments|notes={{mark c++20}}}}
{{dsc named req|cpp/named req/RangeAdaptorClosureObject|a {{named req|FunctionObject}} that supports the pipe operator|notes={{mark c++20}}}}

{{dsc h1|Multidimensional View Customization}}
{{dsc named req|cpp/named req/LayoutMapping|controls the mapping of multidimensional index in {{lc|mdspan}}|notes={{mark c++23}}}}
{{dsc named req|cpp/named req/LayoutMappingPolicy|a policy that holds {{named req|LayoutMapping}} requirements|notes={{mark c++23}}}}
{{dsc named req|cpp/named req/AccessorPolicy|a policy that controls access to data handle in {{lc|mdspan}}|notes={{mark c++23}}}}

{{dsc h1|Other}}
{{dsc named req|cpp/named req/UnaryTypeTrait|describes a property of a type|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/BinaryTypeTrait|describes a relationship between two types|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/TransformationTrait|modifies a property of a type|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/Clock|aggregates a duration, a time point, and a function to get the current time point|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/TrivialClock|a {{named req|Clock}} that does not throw exceptions|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/CharTraits|defines types and functions for a character type}}
{{dsc named req|cpp/named req/BitmaskType|bitset, integer, or enumeration}}&lt;!--$17.5.2.1.3[bitmask types]--&gt;
{{dsc named req|cpp/named req/NumericType|a type for which initialization is effectively equal to assignment}}&lt;!--C++98/03 §26.1[lib.numeric.requirements], C++11/14 §26.2[numeric.requirements]--&gt;
{{dsc named req|cpp/named req/RegexTraits|defines types and functions used by the [[cpp/regex|regular expressions library]]|notes={{mark c++11}}}}&lt;!--C++11/14 §28.3[re.req]--&gt;
{{dsc named req|cpp/named req/LiteralType|a type with constexpr constructor|notes={{mark c++11}}}}
{{dsc end}}

{{todo|Any other missing requirement?}}

{{langlinks|ar|de|es|fr|it|ja|pt|ru|zh}}
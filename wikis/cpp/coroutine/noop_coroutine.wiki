{{cpp/title|noop_coroutine}}
{{cpp/coroutine/navbar}}
{{ddcl|header=coroutine|since=c++20|
std::noop_coroutine_handle noop_coroutine() noexcept;
}}

Returns a coroutine handle referring to a no-op coroutine.

If there has been already a coroutine state of no-op coroutine, it is unspecified whether a subsequent call to {{tt|noop_coroutine}} returns a previously obtained coroutine handle, or a coroutine handle referring to a new coroutine state of no-op coroutine.

===Parameters===
(none)

===Return value===
A {{lc|std::noop_coroutine_handle}} referring to a no-op coroutine.

===Notes===
Return values from different calls to {{tt|noop_coroutine}} may and may not compare equal.

{{tt|noop_coroutine}} may only return a {{tt|noop_coroutine_handle}} referring to a coroutine state object without starting a coroutine.

===Example===
{{example
|code=
#include &lt;coroutine&gt;
#include &lt;iostream&gt;
#include &lt;utility&gt;

template&lt;class T&gt;
struct task
{
    struct promise_type
    {
        auto get_return_object()
        {
            return task(std::coroutine_handle&lt;promise_type&gt;::from_promise(*this));
        }
        std::suspend_always initial_suspend() { return {}; }
        struct final_awaiter
        {
            bool await_ready() noexcept { return false; }
            void await_resume() noexcept {}
            std::coroutine_handle&lt;&gt;
                await_suspend(std::coroutine_handle&lt;promise_type&gt; h) noexcept
            {
                // final_awaiter::await_suspend is called when the execution of the
                // current coroutine (referred to by 'h') is about to finish.
                // If the current coroutine was resumed by another coroutine via
                // co_await get_task(), a handle to that coroutine has been stored
                // as h.promise().previous. In that case, return the handle to resume
                // the previous coroutine.
                // Otherwise, return noop_coroutine(), whose resumption does nothing.

                if (auto previous = h.promise().previous; previous)
                    return previous;
                else
                    return std::noop_coroutine();
            }
        };
        final_awaiter final_suspend() noexcept { return {}; }
        void unhandled_exception() { throw; }
        void return_value(T value) { result = std::move(value); }

        T result;
        std::coroutine_handle&lt;&gt; previous;
    };

    task(std::coroutine_handle&lt;promise_type&gt; h) : coro(h) {}
    task(task&amp;&amp; t) = delete;
    ~task() { coro.destroy(); }

    struct awaiter
    {
        bool await_ready() { return false; }
        T await_resume() { return std::move(coro.promise().result); }
        auto await_suspend(std::coroutine_handle&lt;&gt; h)
        {
            coro.promise().previous = h;
            return coro;
        }
        std::coroutine_handle&lt;promise_type&gt; coro;
    };
    awaiter operator co_await() { return awaiter{coro}; }
    T operator()()
    {
        coro.resume();
        return std::move(coro.promise().result);
    }

private:
    std::coroutine_handle&lt;promise_type&gt; coro;
};

task&lt;int&gt; get_random()
{
    std::cout &lt;&lt; "in get_random()\n";
    co_return 4;
}

task&lt;int&gt; test()
{
    task&lt;int&gt; v = get_random();
    task&lt;int&gt; u = get_random();
    std::cout &lt;&lt; "in test()\n";
    int x = (co_await v + co_await u);
    co_return x;
}

int main()
{
    task&lt;int&gt; t = test();
    int result = t();
    std::cout &lt;&lt; result &lt;&lt; '\n';
}
|output=
in test()
in get_random()
in get_random()
8
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/coroutine/dsc noop_coroutine_promise}}
{{dsc inc|cpp/coroutine/dsc noop_coroutine_handle}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
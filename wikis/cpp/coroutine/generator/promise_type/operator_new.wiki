{{cpp/title|{{small|generator&lt;Ref,V,Allocator&gt;::promise_type::}}operator new}}
{{cpp/coroutine/generator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
void* operator new( std::size_t size )
    requires std::same_as&lt;Allocator, void&gt; {{!!}}
             std::default_initializable&lt;Allocator&gt;;
}}
{{dcla|num=2|since=c++23|
template&lt; class Alloc, class... Args &gt;
void* operator new( std::size_t size, std::allocator_arg_t,
                    const Alloc&amp; alloc, const Args&amp;... );
}}
{{dcl|num=3|since=c++23|
template&lt; class This, class Alloc, class... Args &gt;
void* operator new( std::size_t size, const This&amp;, std::allocator_arg_t,
                    const Alloc&amp; alloc, const Args&amp;... );
}}
{{dcl end}}

[[cpp/language/coroutines#Dynamic allocation|Allocates]] {{c|size}} bytes of uninitialized storage using default or user-provided allocator.

Let {{tt|A}} be
* {{tt|Allocator}}, if it is not {{c/core|void}},
* {{tt|Alloc}} for {{v|2,3}}, or
* {{c/core|std::allocator&lt;void&gt;}} otherwise.

Let {{tt|B}} be {{c/core|std::allocator_traits&lt;A&gt;::template rebind_alloc&lt;U&gt;}} where {{tt|U}} is an unspecified type whose size and alignment are both {{ltt|cpp/preprocessor/replace#Predefined macros|__STDCPP_DEFAULT_NEW_ALIGNMENT__}}.

Initializes an allocator {{c|b}} of type {{tt|B}} with:
@1@ {{c|A()}},
@2,3@ {{c|A(alloc)}}.

Uses {{c|b}} to allocate storage for the smallest array of {{tt|U}} sufficient to provide storage for a [[cpp/language/coroutines#Execution|coroutine state]] of size {{c|size}}, and unspecified additional state necessary to ensure that {{rlpt|operator delete}} can later deallocate this memory block with an allocator equal to {{c|b}}.

The program is ill-formed unless {{c/core|std::allocator_traits&lt;B&gt;::pointer}} is a pointer type and for overloads {{vl|2,3}}, {{c|std::same_as&lt;Allocator, void&gt; {{!!}} std::convertible_to&lt;const Alloc&amp;, Allocator&gt;}} is modeled.

===Parameters===
{{par begin}}
{{par|size|the size of the storage to allocate}}
{{par|alloc|a user provided allocator of type {{tt|Alloc}}}}
{{par end}}

===Return value===
A pointer to the allocated storage.

===Exceptions===
@1-3@ May throw.

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3900|std=C++23|before=overloads {{vl|2,3}} were constrained on conversion of {{tt|Alloc}} to {{tt|Allocator}}|after=mandated}}
{{dr list end}}


{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
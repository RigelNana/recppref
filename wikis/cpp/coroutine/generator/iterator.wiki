{{cpp/title|{{small|generator&lt;Ref,V,Allocator&gt;::}}''iterator''}}
{{cpp/coroutine/generator/navbar}}
{{ddcla|expos=yes|
class /*iterator*/;
}}

The return type of {{rlpt|/|generator::begin}}. Models {{lconcept|indirectly_readable}} and {{lconcept|input_iterator}}.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|value_type}}|{{rlpt|/#Member types|std::generator::value}}}}
{{dsc|{{tt|difference_type}}|{{lc|std::ptrdiff_t}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member|Description}}
{{dsc expos mem obj|coroutine_|id=coroutine|spec={{c/core|std::coroutine_handle&lt;std::generator::promise_type&gt;}}|The coroutine handle}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|{{PAGENAME}}#constructor|constructs an iterator}}
{{dsc mem fun|{{PAGENAME}}#assignment|title=operator{{=}}|assigns another iterator}}
{{dsc mem fun|{{PAGENAME}}#dereference|title=operator*|returns an underlying value}}
{{dsc mem fun|{{PAGENAME}}#increment|title=operator++&lt;br&gt;operator++{{dsc small|(int)}}|advances the iterator}}
{{dsc end}}

{{anchor|constructor}}
{{member|{{small|std::generator::''iterator''::}}''iterator''|2=
{{ddcl|since=c++23|
/*iterator*/( /*iterator*/&amp;&amp; other ) noexcept;
}}

Initializes {{lsi|#coroutine_}} with {{c|std::exchange(other.coroutine_, {});}}.
}}

{{anchor|assignment}}
{{member|1={{small|std::generator::''iterator''::}}operator=|2=
{{ddcl|since=c++23|1=
/*iterator*/&amp; operator=( /*iterator*/&amp;&amp; other ) noexcept;
}}
Equivalent to {{c|1=coroutine_ = std::exchange(other.coroutine_, {});}}.

Returns: {{c|*this}}.
}}

{{anchor|dereference}}
{{member|{{small|std::generator::''iterator''::}}operator*|2=
{{ddcl|since=c++23|
reference operator*() const
    noexcept( std::is_nothrow_copy_constructible_v&lt;reference&gt; );
}}

# Let {{rlpi|/#Member types|reference}} be the {{rlpt|/|std::generator}}'s underlying type.
# Let for some generator object {{c|x}} its {{lsi|#coroutine_}} be in the stack {{c|*x.active_}}.
# Let {{c|x.active_-&gt;top()}} refer to a suspended coroutine with promise object {{c|p}}.

Equivalent to {{c|return static_cast&lt;reference&gt;(*p.value_);}}.
}}

{{anchor|increment}}
{{member|{{small|std::generator::''iterator''::}}operator++|2=
{{dcl begin}}
{{dcl|since=c++23|num=1|
constexpr /*iterator*/&amp; operator++();
}}
{{dcl|since=c++23|num=2|
constexpr void operator++( int );
}}
{{dcl end}}

@1@ Let for some generator object {{c|x}} the {{lsi|#coroutine_}} be in the stack {{c|*x.active_}}.

@@ Equivalent to {{c|x.active_-&gt;top().resume()}}.

@@ Returns: {{c|*this}}.

@2@ Equivalent to {{c|++*this;}}.
}}

===Non-member functions===
{{dsc begin}}
{{dsc fun|#compare|title=operator{{==}}|compares the underlying iterator with a sentinel|notes={{mark c++23}}}}
{{dsc end}}

{{anchor|compare}}
{{member|1=operator=={{small|(std::generator::''iterator'')}}|2=
{{ddcl|since=c++23|1=
friend bool operator==( const /*iterator*/&amp; i, std::default_sentinel_t );
}}

Equivalent to {{c|return i.coroutine_.done();}}.

{{cpp/note synthesized eq}}

{{cpp/hidden friend|plural=no|{{tt|std::generator::''iterator''}}}}
}}

===Example===
{{example}}

{{langlinks|de|es|ja|ru|zh}}
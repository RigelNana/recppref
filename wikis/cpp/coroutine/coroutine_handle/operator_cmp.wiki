{{title|1=operator==, operator&lt;=&gt;&lt;small&gt;(std::coroutine_handle)&lt;/small&gt;}}
{{cpp/coroutine/coroutine_handle/navbar}}
{{dcl begin}}
{{dcl header|coroutine}}
{{dcl|num=1|since=c++20|1=
constexpr bool
    operator==( std::coroutine_handle&lt;&gt; x, std::coroutine_handle&lt;&gt; y ) noexcept;
}}
{{dcl|num=2|since=c++20|1=
constexpr std::strong_ordering
    operator&lt;=&gt;( std::coroutine_handle&lt;&gt; x, std::coroutine_handle&lt;&gt; y ) noexcept;
}}
{{dcl end}}

Compares two {{c|std::coroutine_handle&lt;&gt;}} values {{c|x}} and {{c|y}} according to their underlying addresses.

{{cpp/note synthesized compare}}

===Parameters===
{{par begin}}
{{par|x, y|{{c|std::coroutine_handle&lt;&gt;}} values to compare}}
{{par end}}

===Return value===
@1@ {{c|1=x.address() == y.address()}}
@2@ {{c|std::compare_three_way{}(x.address(), y.address())}}

===Notes===
Although these operators are only overloaded for {{c|std::coroutine_handle&lt;&gt;}}, other specializations of {{lc|std::coroutine_handle}} are also equality comparable and three-way comparable, because they are implicitly convertible to {{c|std::coroutine_handle&lt;&gt;}}.

===Example===
{{example}}

{{langlinks|es|ja|ru|zh}}
{{cpp/locale/numpunct/title|grouping|do_grouping}}
{{cpp/locale/numpunct/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
std::string grouping() const;
}}
{{dcl|num=2|1=
protected:
virtual std::string do_grouping() const;
}}
{{dcl end}}

@1@ Public member function, calls the member function {{tt|do_grouping}} of the most derived class.

@2@ Returns an {{lc|std::string}} holding, in each {{c|char}} element, the number of digits in each group of the numeric output formatted by {{ltt|cpp/locale/num_put/put|num_put::put()}} (and, therefore, {{ltt|cpp/io/basic_ostream/operator_ltlt|basic_ostream::operator&lt;&lt;}}).

This function returns a string, {{c|vec}}, which is used as a vector of integer values. (For example, {{c|"\003"}} specifies groups of 3 digits each, while {{c|"3"}} implies groups of 51 digits each.). Each element {{c|vec[i]}} represents the number of digits in the {{tt|i}}th digit group of the integer part of the number, counting from the right: {{c|vec[0]}} holds the number of digits in the rightmost group,  {{c|vec[1]}} - in the second group from the right, etc. The grouping indicated by the last character, {{c|vec[vec.size()-1]}}, is repeatedly reused to group all remaining digits in the (left part of) the number. If {{c|vec[i]}} is non-positive or equals {{c|CHAR_MAX}} the size of the corresponding digit group is unlimited.

===Return value===
The object of type {{lc|std::string}} holding the groups. The standard specializations of {{tt|std::numpunct}} return an empty string, indicating no grouping. Typical groupings (e.g. the {{tt|en_US}} locale) return {{c|"\003"}}.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;locale&gt;

struct space_out : std::numpunct&lt;char&gt;
{
    char do_thousands_sep()   const { return ' ';  } // separate with spaces
    std::string do_grouping() const { return "\1"; } // groups of 1 digit
};

struct g123 : std::numpunct&lt;char&gt;
{
    std::string do_grouping() const { return "\1\2\3"; }
};

int main()
{
    std::cout &lt;&lt; "Default locale: " &lt;&lt; 12345678 &lt;&lt; '\n';
    std::cout.imbue(std::locale(std::cout.getloc(), new space_out));
    std::cout &lt;&lt; "Locale with modified numpunct: " &lt;&lt; 12345678 &lt;&lt; '\n';
    std::cout.imbue(std::locale(std::cout.getloc(), new g123));
    std::cout &lt;&lt; "Locale with \\1\\2\\3 grouping: "
              &lt;&lt; std::numeric_limits&lt;unsigned long long&gt;::max() &lt;&lt; '\n'
              &lt;&lt; "Same, for a floating-point number: "
              &lt;&lt; std::fixed &lt;&lt; 123456789.123456789 &lt;&lt; '\n';
}
|output=
Default locale: 12345678
Locale with modified numpunct: 1 2 3 4 5 6 7 8
Locale with \1\2\3 grouping: 18,446,744,073,709,551,61,5
Same, for a floating-point number: 123,456,78,9.123457

}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/numpunct/dsc do_thousands_sep}}
{{dsc end}}

{{langlinks|ja|zh}}
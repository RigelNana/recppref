{{cpp/title|numpunct}}
{{cpp/locale/numpunct/navbar}}
{{ddcl|header=locale|
template&lt; class CharT &gt;
class numpunct;
}}

The facet {{tt|std::numpunct}} encapsulates numeric punctuation preferences. Stream I/O operations use {{tt|std::numpunct}} through {{lc|std::num_get}} and {{lc|std::num_put}} for parsing numeric input and formatting numeric output. 

The numbers that are supported by {{tt|std::numpunct}} have the format described below. Here {{tt|digit}} represents the radix set specified by the {{tt|fmtflags}} argument value, {{tt|thousands-sep}} and {{tt|decimal-point}} are the results of {{lc|thousands_sep()}} and {{lc|decimal_point()}} functions respectively.

The format of integer values is as follows:
{{source|lang=text|1=
integer     ::= [sign] units
sign        ::= plusminus
plusminus   ::= '+' {{!}} '-'
units       ::= digits [thousands-sep units]
digits      ::= digit [digits]
}}

The number of digits between the {{tt|thousand-sep}}s (maximum size of {{tt|digits}}) is specified by the result of {{lc|grouping()}}.

The format of floating-point values is as follows:
{{source|lang=text|1=
floatval    ::= [sign] units [decimal-point [digits]] [e [sign] digits] {{!}}
                [sign]        decimal-point  digits   [e [sign] digits]
e           ::= 'e' {{!}} 'E'
}}

{{inheritance diagram/std-numpunct}}

===Specializations===
The standard library is guaranteed to provide the following specializations (they are {{rlp|locale|required to be implemented by any locale object}}):
{{dsc begin}}
{{dsc header|locale}}
{{dsc|{{c/core|std::numpunct&lt;char&gt;}}|provides equivalents of the "C" locale preferences}}
{{dsc|{{c/core|std::numpunct&lt;wchar_t&gt;}}|provides wide character equivalents of the "C" locale preferences}}
{{dsc end}}

===Nested types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc|{{tt|string_type}}|{{c/core|std::basic_string&lt;CharT&gt;}}}}
{{dsc end}}

{{cpp/locale/facet data members}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/locale/numpunct/dsc numpunct}}
{{dsc inc|cpp/locale/numpunct/dsc ~numpunct}}
{{dsc inc|cpp/locale/numpunct/dsc decimal_point}}
{{dsc inc|cpp/locale/numpunct/dsc thousands_sep}}
{{dsc inc|cpp/locale/numpunct/dsc grouping}}
{{dsc inc|cpp/locale/numpunct/dsc truefalsename}}
{{dsc end}}

===Protected member functions===
{{dsc begin}}
{{dsc inc|cpp/locale/numpunct/dsc do_decimal_point}}
{{dsc inc|cpp/locale/numpunct/dsc do_thousands_sep}}
{{dsc inc|cpp/locale/numpunct/dsc do_grouping}}
{{dsc inc|cpp/locale/numpunct/dsc do_truefalsename}}
{{dsc end}}

===Example===
{{example
|The following example changes the string representations of {{c|true}} and {{c|false}}:
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;

struct french_bool : std::numpunct&lt;char&gt;
{
    string_type do_truename() const override { return "vrai"; }
    string_type do_falsename() const override { return "faux"; }
};

int main()
{
    std::cout &lt;&lt; "default locale: "
              &lt;&lt; std::boolalpha &lt;&lt; true &lt;&lt; ", " &lt;&lt; false &lt;&lt; '\n';
    std::cout.imbue(std::locale(std::cout.getloc(), new french_bool));
    std::cout &lt;&lt; "locale with modified numpunct: "
              &lt;&lt; std::boolalpha &lt;&lt; true &lt;&lt; ", " &lt;&lt; false &lt;&lt; '\n';
}
|output=
default locale: true, false
locale with modified numpunct: vrai, faux
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=338|std=C++98|before=the {{tt|sign}} token allowed an optional whitespace following {{tt|+}} or {{tt|-}}|after=removed the whitespace}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc tclass|cpp/locale/numpunct_byname|creates a numpunct facet for the named locale}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/locale/collate/title|hash|do_hash}}
{{cpp/locale/collate/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
long hash( const CharT* beg, const CharT* end ) const;
}}
{{dcl|num=2|1=
protected:
virtual long do_hash( const CharT* beg, const CharT* end ) const;
}}
{{dcl end}}

@1@ Public member function, calls the protected virtual member function {{tt|do_hash}} of the most derived class.

@2@ Converts the character sequence {{range|beg|end}} to an integer value that is equal to the hash obtained for all strings that collate equivalent in this locale ({{lc|compare()}} returns {{c|0}}). For two strings that do not collate equivalent, the probability that their hashes are equal should be very small, approaching {{c|1=1.0 / std::numeric_limits&lt;unsigned long&gt;::max()}}.

===Parameters===
{{par begin}}
{{par|beg|pointer to the first character in the sequence to hash}}
{{par|end|one past the end pointer for the sequence to hash}}
{{par end}}

===Return value===
The hash value that respects collation order.

===Note===
The system-supplied locales normally do not collate two strings as equivalent ({{lc|compare()}} does not return {{c|0}}) if {{l2tt|cpp/string/basic_string/operator_cmp|operator{{==}}|basic_string}} returns {{c|false}}, but a user-installed {{lc|std::collate}} facet may provide different collation rules, for example, it may treat strings as equivalent if they have the same Unicode normalized form.

===Example===
{{example
|Demonstrates a locale-aware unordered container.
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;string&gt;
#include &lt;unordered_set&gt;

struct CollateHash
{
    template&lt;typename CharT&gt;
    long operator()(const std::basic_string&lt;CharT&gt;&amp; s) const
    {
        return std::use_facet&lt;std::collate&lt;CharT&gt;&gt;(std::locale()).hash(
                   &amp;s[0], &amp;s[0] + s.size()
               );
    }
};
struct CollateEq
{
    template&lt;typename CharT&gt;
    bool operator()(const std::basic_string&lt;CharT&gt;&amp; s1,
                    const std::basic_string&lt;CharT&gt;&amp; s2) const
    {
        return std::use_facet&lt;std::collate&lt;CharT&gt;&gt;(std::locale()).compare(
                     &amp;s1[0], &amp;s1[0] + s1.size(),
                     &amp;s2[0], &amp;s2[0] + s2.size()
               ) == 0;
    }
};

int main()
{
    std::locale::global(std::locale("en_US.utf8"));
    std::wcout.imbue(std::locale());

    std::unordered_set&lt;std::wstring, CollateHash, CollateEq&gt; s2 = {L"Foo", L"Bar"};
    for (auto&amp; str : s2)
        std::wcout &lt;&lt; str &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|p=true
|output=
Bar Foo
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc hash}}
{{dsc end}}

{{langlinks|ja|zh}}
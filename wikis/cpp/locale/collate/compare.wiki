{{cpp/locale/collate/title|compare|do_compare}}
{{cpp/locale/collate/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
int compare( const CharT* low1, const CharT* high1,
             const CharT* low2, const CharT* high2 ) const;
}}
{{dcl|num=2|1=
protected:
virtual int do_compare( const CharT* low1, const CharT* high1,
                        const CharT* low2, const CharT* high2 ) const;
}}
{{dcl end}}

@1@ Public member function, calls the protected virtual member function {{tt|do_compare}} of the most derived class.

@2@ Compares the character sequence {{range|low1|high1}} to the character sequence {{range|low2|high2}}, using this locale's collation rules, and returns {{c|1}} if the first string follows the second, {{c|-1}} if the first string precedes the second, zero if the two strings are equivalent.

===Parameters===
{{par begin}}
{{par|low1|pointer to the first character of the first string}}
{{par|high1|one past the end pointer for the first string}}
{{par|low2|pointer to the first character of the second string}}
{{par|high2|one past the end pointer for the second string}}
{{par end}}

===Return value===
{{c|1}} if the first string is greater than the second (that is, follows the second in the collation order), {{c|-1}} if the first string is less than the second (precedes the second in the collation order), zero if the two strings are equivalent.

===Notes===
When three-way comparison is not required (such as when providing a {{tt|Compare}} argument to standard algorithms such as {{lc|std::sort}}), {{ltt|cpp/locale/locale/operator()|std::locale::operator()}} may be more appropriate.

{{cpp/locale/collate/collation_note}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;string&gt;

template&lt;typename CharT&gt;
void try_compare(const std::locale&amp; l, const CharT* p1, const CharT* p2)
{
    auto&amp; f = std::use_facet&lt;std::collate&lt;CharT&gt;&gt;(l);

    std::basic_string&lt;CharT&gt; s1(p1), s2(p2);
    if (f.compare(&amp;s1[0], &amp;s1[0] + s1.size(),
                  &amp;s2[0], &amp;s2[0] + s2.size()) &lt; 0)
        std::wcout &lt;&lt; p1 &lt;&lt; " before " &lt;&lt; p2 &lt;&lt; '\n';
    else
        std::wcout &lt;&lt; p2 &lt;&lt; " before " &lt;&lt; p1 &lt;&lt; '\n';
}

int main()
{
    std::locale::global(std::locale("en_US.utf8"));
    std::wcout.imbue(std::locale());

    std::wcout &lt;&lt; "In the American locale: ";
    try_compare(std::locale(), "hrnec", "chrt");
    std::wcout &lt;&lt; "In the Czech locale: ";
    try_compare(std::locale("cs_CZ.utf8"), "hrnec", "chrt");

    std::wcout &lt;&lt; "In the American locale: ";
    try_compare(std::locale(), L"år", L"ängel");
    std::wcout &lt;&lt; "In the Swedish locale: ";
    try_compare(std::locale("sv_SE.utf8"), L"år", L"ängel");
}
|output=
In the American locale: chrt before hrnec
In the Czech locale: hrnec before chrt
In the American locale: ängel before år
In the Swedish locale: år before ängel
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc strcoll}}
{{dsc inc|cpp/string/wide/dsc wcscoll}}
{{dsc inc|cpp/locale/locale/dsc operator()}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
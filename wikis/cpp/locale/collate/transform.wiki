{{cpp/locale/collate/title|transform, do_transform}}
{{cpp/locale/collate/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
string_type transform( const CharT* low, const CharT* high ) const;
}}
{{dcl|num=2|1=
protected:
virtual string_type do_transform( const CharT* low, const CharT* high ) const;
}}
{{dcl end}}

@1@ Public member function, calls the protected virtual member function {{tt|do_transform}} of the most derived class.

@2@ Converts the character sequence {{range|low|high}} to a string that, compared lexicographically (e.g. with {{tt|operator&lt;}} for strings) with the result of calling {{tt|transform()}} on another string, produces the same result as calling {{lc|do_compare()}} on the same two strings.

===Parameters===
{{par begin}}
{{par|low|pointer to the first character in the sequence to transform}}
{{par|high|one past the end pointer for the sequence to transform}}
{{par end}}

===Return value===
The string transformed so that lexicographic comparison of the transformed strings may be used instead of collating of the originals. In the "C" locale, the returned string is the exact copy of {{range|low|high}}. In other locales, the contents of the returned string are implementation-defined, and the size may be considerably longer.

===Notes===
In addition to the use in collation, the implementation-specific format of the transformed string is known to [[cpp/regex/regex_traits/transform_primary|std::regex_traits&lt;&gt;::transform_primary]], which is able to extract the equivalence class information.

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;

int main()
{
    std::locale::global(std::locale("sv_SE.utf8"));
    auto&amp; f = std::use_facet&lt;std::collate&lt;wchar_t&gt;&gt;(std::locale());

    std::wstring in1 = L"\u00e4ngel";
    std::wstring in2 = L"\u00e5r";

    std::wstring out1 = f.transform(&amp;in1[0], &amp;in1[0] + in1.size());
    std::wstring out2 = f.transform(&amp;in2[0], &amp;in2[0] + in2.size());

    std::wcout &lt;&lt; "In the Swedish locale: ";
    if (out1 &lt; out2)
        std::wcout &lt;&lt; in1 &lt;&lt; " before " &lt;&lt; in2 &lt;&lt; '\n';
    else
        std::wcout &lt;&lt; in2 &lt;&lt; " before " &lt;&lt; in1 &lt;&lt; '\n';

    std::wcout &lt;&lt; "In lexicographic comparison: ";
    if (in1 &lt; in2)
        std::wcout &lt;&lt; in1 &lt;&lt; " before " &lt;&lt; in2 &lt;&lt; '\n';
    else
        std::wcout &lt;&lt; in2 &lt;&lt; " before " &lt;&lt; in1 &lt;&lt; '\n';
}
|output=
In the Swedish locale: 책r before 채ngel
In lexicographic comparison: 채ngel before 책r
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc strxfrm}}
{{dsc inc|cpp/string/wide/dsc wcsxfrm}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
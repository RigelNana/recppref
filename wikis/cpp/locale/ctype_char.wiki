{{cpp/title|ctype{{small|&lt;char&gt;}}}}
{{cpp/locale/navbar}}
{{ddcl|header=locale|
template&lt;&gt;
class ctype&lt;char&gt;;
}}

This specialization of {{lc|std::ctype}} encapsulates character classification features for type {{c/core|char}}. Unlike general-purpose {{lc|std::ctype}}, which uses virtual functions, this specialization uses table lookup to classify characters (which is generally faster).

The base class {{tt|std::ctype}}{{c/core|&lt;char&gt;}} implements character classification equivalent to the minimal "C" locale. The classification rules can be extended or modified if constructed with a non-default classification table argument, if constructed as {{c/core|std::ctype_byname&lt;char&gt;}} or as a user-defined derived facet. All {{lc|std::istream}} formatted input functions are required to use {{tt|std::ctype}}{{c/core|&lt;char&gt;}} for character classing during input parsing. 

{{inheritance diagram/std-ctype_char}}

===Nested types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|char_type}}|{{c/core|char}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member|Description}}
{{cpp/locale/dsc id}}
{{dsc|{{dsc small|{{c/core|const std::size_t}}}} {{tt|table_size}} {{cmark static}}|size of the classification table, at least 256}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/locale/ctype_char/dsc constructor}}
{{dsc inc|cpp/locale/ctype_char/dsc destructor}}
{{dsc inc|cpp/locale/ctype_char/dsc table}}
{{dsc inc|cpp/locale/ctype_char/dsc classic_table}}
{{dsc inc|cpp/locale/ctype_char/dsc is}}
{{dsc inc|cpp/locale/ctype_char/dsc scan_is}}
{{dsc inc|cpp/locale/ctype_char/dsc scan_not}}
{{dsc inc|cpp/locale/ctype/dsc toupper}}
{{dsc inc|cpp/locale/ctype/dsc tolower}}
{{dsc inc|cpp/locale/ctype/dsc widen}}
{{dsc inc|cpp/locale/ctype/dsc narrow}}
{{dsc end}}

===Protected member functions===
{{dsc begin}}
{{dsc inc|cpp/locale/ctype/dsc do_toupper}}
{{dsc inc|cpp/locale/ctype/dsc do_tolower}}
{{dsc inc|cpp/locale/ctype/dsc do_widen}}
{{dsc inc|cpp/locale/ctype/dsc do_narrow}}
{{dsc end}}

{{cpp/locale/ctype_base/inherit}}

===Example===
{{example
|The following example demonstrates modification of {{c/core|ctype&lt;char&gt;}} to tokenize comma-separated values:&lt;!-- for a real CSV, it would have to handle quotes and escapes --&gt;
|code=
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;sstream&gt;
#include &lt;vector&gt;

// This ctype facet classifies commas and endlines as whitespace
struct csv_whitespace : std::ctype&lt;char&gt;
{
    static const mask* make_table()
    {
        // make a copy of the "C" locale table
        static std::vector&lt;mask&gt; v(classic_table(), classic_table() + table_size);
        v[','] {{!}}=  space; // comma will be classified as whitespace
        v[' '] &amp;= ~space; // space will not be classified as whitespace
        return &amp;v[0];
    }
    
    csv_whitespace(std::size_t refs = 0) : ctype(make_table(), false, refs) {}
};

int main()
{
    std::string in = "Column 1,Column 2,Column 3\n123,456,789";
    std::string token;
    
    std::cout &lt;&lt; "Default locale:\n";
    std::istringstream s1(in);
    while (s1 &gt;&gt; token)
        std::cout &lt;&lt; "  " &lt;&lt; token &lt;&lt; '\n';
    
    std::cout &lt;&lt; "Locale with modified ctype:\n";
    std::istringstream s2(in);
    s2.imbue(std::locale(s2.getloc(), new csv_whitespace));
    while (s2 &gt;&gt; token)
        std::cout &lt;&lt; "  " &lt;&lt; token &lt;&lt; '\n';
}
|output=
Default locale:
  Column
  1,Column
  2,Column
  3
  123,456,789
Locale with modified ctype:
  Column 1
  Column 2
  Column 3
  123
  456
  789
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=695|std=C++98|before={{tt|table()}} and {{tt|classic_table()}} were protected member functions|after=made them public}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc ctype}}
{{dsc inc|cpp/locale/dsc ctype_base}}
{{dsc inc|cpp/locale/dsc ctype_byname}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
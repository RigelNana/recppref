{{cpp/title|numpunct_byname}}
{{cpp/locale/navbar}}
{{ddcl|header=locale|
template&lt; class CharT &gt;
class numpunct_byname : public std::numpunct&lt;CharT&gt;;
}}

{{tt|std::numpunct_byname}} is a {{lc|std::numpunct}} facet which encapsulates numeric punctuation preferences of a locale specified at its construction.

===Specializations===
The standard library is guaranteed to provide the following specializations:
{{dsc begin}}
{{dsc header|locale}}
{{dsc|{{c/core|std::numpunct_byname&lt;char&gt;}}|locale-specific {{lc|std::numpunct}} facet for narrow character I/O}}
{{dsc|{{c/core|std::numpunct_byname&lt;wchar_t&gt;}}|locale-specific {{lc|std::numpunct}} facet for wide character I/O}}
{{dsc end}}

===Nested types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc|{{tt|string_type}}|{{c/core|std::basic_string&lt;CharT&gt;}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/locale/byname/dsc constructor|numpunct_byname}}
{{dsc inc|cpp/locale/byname/dsc destructor|numpunct_byname}}
{{dsc end}}

{{include|cpp/locale/byname/constructor|numpunct_byname}}
{{include|cpp/locale/byname/destructor|numpunct_byname}}

{{include|cpp/locale/numpunct/inherit}}

===Example===
{{example
|This example demonstrates how to apply numeric punctuation rules of another language without changing the rest of the locale. 
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;

int main()
{
    const double number = 1000.25;
    std::wcout &lt;&lt; L"default locale: " &lt;&lt; number &lt;&lt; L'\n';
    std::wcout.imbue(std::locale(std::wcout.getloc(),
                                 new std::numpunct_byname&lt;wchar_t&gt;("ru_RU.UTF8")));
    std::wcout &lt;&lt; L"default locale with russian numpunct: " &lt;&lt; number &lt;&lt; L'\n';
}
|output=
default locale: 1000.25
default locale with russian numpunct: 1 000,25
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc numpunct}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|locale}}
{{cpp/locale/locale/navbar}}
{{ddcl|header=locale|
class locale;
}}

An object of class {{tt|std::locale}} is an immutable indexed set of immutable facets. Each stream object of the C++ input/output library is associated with an {{tt|std::locale}} object and uses its facets for parsing and formatting of all data. {{rev inl|since=c++11|In addition, a locale object is associated with each {{lc|std::basic_regex}} object.}} Locale objects can also be used as predicates that perform string collation with the standard containers and algorithms and can be accessed directly to obtain or modify the facets they hold.

Each locale constructed in a C++ program holds at least the following standard facets (i.e. {{lc|std::has_facet}} returns {{c|true}} for all these facet types), but a program may define additional specializations or completely new facets and add them to any existing locale object. 

{|class="wikitable"
|-style="text-align:center; font-size:16px; line-height:16px;"
!colspan=2|Supported facets
|-
|{{c/core|std::ctype&lt;char&gt;}}&lt;br&gt;{{c/core|std::ctype&lt;wchar_t&gt;}}
|{{c/core|std::codecvt&lt;char, char, std::mbstate_t&gt;}}&lt;br&gt;{{c/core|std::codecvt&lt;wchar_t, char, std::mbstate_t&gt;}}
|-
|{{c/core|std::num_get&lt;char&gt;}}&lt;br&gt;{{c/core|std::num_get&lt;wchar_t&gt;}}
|rowspan=2|{{c/core|std::numpunct&lt;char&gt;}}&lt;br&gt;{{c/core|std::numpunct&lt;wchar_t&gt;}}
|-
|{{c/core|std::num_put&lt;char&gt;}}&lt;br&gt;{{c/core|std::num_put&lt;wchar_t&gt;}}
|-
|{{c/core|std::money_get&lt;char&gt;}}&lt;br&gt;{{c/core|std::money_get&lt;wchar_t&gt;}}
|rowspan=2|{{c/core|std::moneypunct&lt;char&gt;}}&lt;br&gt;{{c/core|std::moneypunct&lt;char, true&gt;}}&lt;br&gt;{{c/core|std::moneypunct&lt;wchar_t&gt;}}&lt;br&gt;{{c/core|std::moneypunct&lt;wchar_t, true&gt;}}
|-
|{{c/core|std::money_put&lt;char&gt;}}&lt;br&gt;{{c/core|std::money_put&lt;wchar_t&gt;}}
|-
|{{c/core|std::time_get&lt;char&gt;}}&lt;br&gt;{{c/core|std::time_get&lt;wchar_t&gt;}}
|{{c/core|std::collate&lt;char&gt;}}&lt;br&gt;{{c/core|std::collate&lt;wchar_t&gt;}}
|-
|{{c/core|std::time_put&lt;char&gt;}}&lt;br&gt;{{c/core|std::time_put&lt;wchar_t&gt;}}
|{{c/core|std::messages&lt;char&gt;}}&lt;br&gt;{{c/core|std::messages&lt;wchar_t&gt;}}
|-style="text-align:center"
!colspan=2|Deprecated facets
|-
|colspan=2|{{c/core|std::codecvt&lt;char16_t, char, std::mbstate_t&gt;}} {{mark since c++11}}{{mark deprecated c++20}}&lt;br&gt;{{c/core|std::codecvt&lt;char32_t, char, std::mbstate_t&gt;}} {{mark since c++11}}{{mark deprecated c++20}}&lt;br&gt;{{c/core|std::codecvt&lt;char16_t, char8_t, std::mbstate_t&gt;}} {{mark since c++20}}{{mark deprecated}}&lt;br&gt;{{c/core|std::codecvt&lt;char32_t, char8_t, std::mbstate_t&gt;}} {{mark since c++20}}{{mark deprecated}}
|}

Internally, a locale object is implemented as if it is a reference-counted pointer to an array (indexed by {{lc|std::locale::id}}) of reference-counted pointers to facets: copying a locale only copies one pointer and increments several reference counts. To maintain the standard C++ library thread safety guarantees (operations on different objects are always thread-safe), both the locale reference count and each facet reference count are updated in a thread-safe manner, similar to {{lc|std::shared_ptr}}.

===Member types===
{{dsc begin}}
{{dsc hitem|Type|Description}}
{{dsc inc|cpp/locale/locale/dsc id}}
{{dsc inc|cpp/locale/locale/dsc facet}}
{{dsc typedef|nolink=true|category|{{c/core|int}}}}
{{dsc end}}

===Member constants===
{{dsc begin}}
{{dsc hitem|Name|Explanation}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|const category}}}} none|a zero value indicating no facet category}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|const category}}}} collate|a bitmask value indicating the collate facet category}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|const category}}}} ctype|a bitmask value indicating the ctype facet category}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|const category}}}} monetary|a bitmask value indicating the monetary facet category}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|const category}}}} numeric|a bitmask value indicating the numeric facet category}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|const category}}}} time|a bitmask value indicating the time facet category}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|const category}}}} messages|a bitmask value indicating the messages facet category}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|const category}}}} all|{{c|collate {{!}} ctype {{!}} monetary {{!}} numeric {{!}} time {{!}} messages}}}}
{{dsc end}}
{{tt|std::locale}} member functions expecting a {{tt|category}} argument require one of the category values defined above, or the union of two or more such values. The {{rlp|LC categories|{{tt|LC}} constants}} are not accepted.

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/locale/locale/dsc locale}}
{{dsc inc|cpp/locale/locale/dsc ~locale}}
{{dsc inc|cpp/locale/locale/dsc operator{{=}}}}
{{dsc inc|cpp/locale/locale/dsc combine}}
{{dsc inc|cpp/locale/locale/dsc name}}
{{dsc inc|cpp/locale/locale/dsc encoding}}
{{dsc inc|cpp/locale/locale/dsc operator cmp}}
{{dsc inc|cpp/locale/locale/dsc operator()}}
{{dsc inc|cpp/locale/locale/dsc global}}
{{dsc inc|cpp/locale/locale/dsc classic}}
{{dsc end}}

===Example===
{{example
|Demonstrates the typical prologue of a locale-sensitive program (cross-platform).
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;

int main()
{
    std::wcout &lt;&lt; L"User-preferred locale setting is "
               &lt;&lt; std::locale("").name().c_str() &lt;&lt; L'\n';
    // on startup, the global locale is the "C" locale
    std::wcout &lt;&lt; 1000.01 &lt;&lt; L'\n';
    
    // replace the C++ global locale and the "C" locale with the user-preferred locale
    std::locale::global(std::locale(""));
    // use the new global locale for future wide character output
    std::wcout.imbue(std::locale());
    
    // output the same number again
    std::wcout &lt;&lt; 1000.01 &lt;&lt; L'\n';
}
|p=true
|output=
User-preferred locale setting is en_US.UTF8
1000.01
1,000.01
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=340|std=C++98|before=the set of standard facets that all locales need to hold was unclear|after=made clear}}
{{dr list item|wg=lwg|dr=347|std=C++98|before=parameters of type {{tt|category}} could accept {{tt|LC}} constants|after=not accepted anymore}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/text/dsc text_encoding}}
{{dsc inc|cpp/locale/dsc use_facet}}
{{dsc inc|cpp/locale/dsc has_facet}}
{{dsc inc|cpp/io/ios_base/dsc imbue}}
{{dsc inc|cpp/io/ios_base/dsc getloc}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/locale/money_get/title|get, do_get}}
{{cpp/locale/money_get/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
iter_type get( iter_type beg, iter_type end, bool intl, std::ios_base&amp; str,
               std::ios_base::iostate&amp; err, long double&amp; units ) const;}}
{{dcl|num=2|1=
iter_type get( iter_type beg, iter_type end, bool intl, std::ios_base&amp; str,
               std::ios_base::iostate&amp; err, string_type&amp; digits ) const;}}
{{dcl|num=3|1=
protected:
virtual iter_type do_get( iter_type beg, iter_type end, bool intl, std::ios_base&amp; str,
                          std::ios_base::iostate&amp; err, long double&amp; units ) const;}}
{{dcl|num=4|1=
virtual iter_type do_get( iter_type beg, iter_type end, bool intl, std::ios_base&amp; str,
                          std::ios_base::iostate&amp; err, string_type&amp; digits ) const;
}}
{{dcl end}}

Parses monetary value from an input iterator and writes the result to a {{c|long double}} or string.

@1,2@ Public member functions, call the member function {{tt|do_get}} of the most derived class.

@3,4@ Reads characters from the input iterator {{c|beg}}, expecting to find a monetary value formatted according to the rules specified by the {{c|std::ctype}} facet imbued in {{c|str.getloc()}} ({{tt|ct}} for the rest of this page), the {{c|std::moneypunct&lt;CharT, intl&gt;}} facet imbued in {{c|str.getloc()}} ({{tt|mp}} for the rest of this page), and the stream formatting flags obtained from {{c|str.flags()}}.

If the input iterator {{c|beg}} becomes equal to {{c|end}} before the parsing was completed, sets both {{lc|failbit}} and {{lc|eofbit}} in {{c|err}}. If parsing fails for another reason, sets the {{tt|failbit}} in {{c|err}}. Either way, does not modify the output parameter ({{c|units}} or {{c|digits}}) on error.

If the parsing succeeds, does not change {{c|err}}, and stores the result in {{c|units}} or {{c|digits}}.

The formatting {{lc|pattern}} used by this function is always {{c|mp.neg_format()}}.

If {{c|mp.grouping()}} does not permit thousands separators, the first separator encountered is treated as a parsing error, otherwise they are treated as optional.

If {{lc|money_base::space}} or {{lc|money_base::none}} is the last element in the {{lc|pattern}}, the parser does not attempt to consume any whitespace after the other components of the monetary value were parsed. Otherwise, one or more whitespace characters are consumed where {{lc|money_base::space}} appears.

If {{tt|showbase}} flag is set in {{c|str.flags()}}, the currency symbol or currency string is required, if it is not set, the currency symbol is optional.

If the first character of the string returned by {{c|mp.positive_sign()}} or {{c|mp.negative_sign()}} is found in the {{lc|money_base::sign}} position of the formatting pattern, it is consumed, and the rest of the characters in that string are expected and consumed after all other components of the monetary value. If both {{c|mp.positive_sign()}} and {{c|mp.negative_sign()}} are non-empty, the sign is required and must match the first character of one of these strings. If one of theses strings is empty, the sign is optional (and if it is absent, the sign of the result corresponds to the string that was empty). If both strings are empty, or have the same first character, the result is given the positive sign. If the output parameter is a string ({{c|digits}}) and the result is negative, the value {{c|ct.widen('-')}} is stored as the first character of the result.

Digits from the input are extracted in order in which they appear and are placed in {{c|digits}} (after widening by {{c|ct.widen()}} as necessary), or into a temporary buffer {{tt|buf1}}, from which the value of {{c|units}} is constructed as if by 

{{source|1=static const char src[] = "0123456789-";
CharT atoms[sizeof(src)];
ct.widen(src, src + sizeof(src) - 1, atoms);
for (int i = 0; i &lt; n; ++i)
buf2[i] = src[find(atoms, atoms+sizeof(src), buf1[i]) - atoms];
buf2[n] = 0;
sscanf(buf2, "%Lf", &amp;units);
}}
(where {{tt|n}} is the number of characters extracted from the input and stored in {{tt|buf1}} and {{tt|buf2}} is another sufficiently large character buffer).

===Return value===
An iterator pointing immediately after the last character recognized as a valid part of the monetary string input.

===Notes===
The currency units are assumed to be the smallest non-fractional units of the currency: cents in the U.S, yen in Japan. Thus, the input sequence {{c|"$1,056.23"}} in a U.S. locale produces the number {{c|105623.0}} in {{c|units}} or a string {{c|"105623"}} in {{c|digits}}.

Because currency symbol is optional if {{tt|showbase}} is off but the entire multicharacter {{tt|negative_sign()}} is required, given the formatting pattern {{c|{sign, value, space, symbol} }} with {{tt|showbase}} off and negative_sign of {{c|"-"}}, the string {{c|"-1.23 €"}} parses as {{c|-123}} and leaves "€" unconsumed on the input stream, but if negative_sign is {{c|"()"}}, the string {{c|"(1.23 €)"}} is consumed completely.

The I/O manipulator {{lc|std::get_money}} offers a simpler interface to this function.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;sstream&gt;

void demo_money_get(std::locale loc, const std::string&amp; input)
{
    std::istringstream str(input);
    str.imbue(loc);
    long double units;
    
    // The following can be written simpler with std::get_money(units)
    std::ios_base::iostate err = std::ios_base::goodbit;
    std::istreambuf_iterator&lt;char&gt; ret =
        std::use_facet&lt;std::money_get&lt;char&gt;&gt;(loc).get(
            std::istreambuf_iterator&lt;char&gt;(str),
            std::istreambuf_iterator&lt;char&gt;(),
            false, str, err, units);
    str.setstate(err);
    std::istreambuf_iterator&lt;char&gt; last{};
    if (str)
    {
        std::cout &lt;&lt; "Successfully parsed '" &lt;&lt; str.str() &lt;&lt; "' as "
                  &lt;&lt; units / 100 &lt;&lt; " units\n";
        if (ret != last)
        {
            std::cout &lt;&lt; "Remaining content: '";
            std::copy(ret, last, std::ostreambuf_iterator&lt;char&gt;(std::cout));
            std::cout &lt;&lt; "'\n";
        }
        else
            std::cout &lt;&lt; "The input was fully consumed\n";
    }
    else
    {
        std::cout &lt;&lt; "Parse failed. Unparsed string: '";
        std::copy(ret, last, std::ostreambuf_iterator&lt;char&gt;(std::cout));
        std::cout &lt;&lt; "'\n";
    }
}

int main()
{
    demo_money_get(std::locale("en_US.utf8"), "-$5.12 abc");
    demo_money_get(std::locale("ms_MY.utf8"), "(RM5.12) def");
}
|output=
Successfully parsed '-$5.12 abc' as -5.12 units
Remaining content: ' abc'
Successfully parsed '(RM5.12) def' as -5.12 units
Remaining content: ' def'
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc moneypunct}}
{{dsc inc|cpp/locale/dsc money_get}}
{{dsc inc|cpp/io/manip/dsc get_money}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|num_get}}
{{cpp/locale/num_get/navbar}}
{{ddcl|header=locale|1=
template&lt; 
    class CharT,
    class InputIt = std::istreambuf_iterator&lt;CharT&gt;
&gt; class num_get;
}}

Class {{tt|std::num_get}} encapsulates the rules for parsing string representations of numeric values. Specifically, types {{c/core|bool}}, {{c/core|unsigned short}}, {{c/core|unsigned int}}, {{c/core|long}}, {{c/core|unsigned long}}{{rev inl|since=c++11|, {{c/core|long long}}, {{c/core|unsigned long long}}}}, {{c/core|float}}, {{c/core|double}}, {{c/core|long double}}, and {{c/core|void*}} are supported. The standard formatting input operators (such as {{c|cin &gt;&gt; n;}}) use the {{tt|std::num_get}} facet of the I/O stream's locale to parse the text representations of the numbers.

{{inheritance diagram/std-num_get}}

If a {{tt|std::num_get}} specialization is not guaranteed to be provided by the standard library (see below), the behaviors of its {{lc|get()}} and {{lc|do_get()}} are not guaranteed as specified.

===Specializations===
The standard library is guaranteed to provide the following specializations (they are {{rlp|locale|required to be implemented by any locale object}}):
{{dsc begin}}
{{dsc header|locale}}
{{dsc|{{c/core|std::num_get&lt;char&gt;}}|creates narrow string parsing of numbers}}
{{dsc|{{c/core|std::num_get&lt;wchar_t&gt;}}|creates wide string parsing of numbers}}
{{dsc end}}

In addition, the standard library is also guaranteed to provide every specialization that satisfies the following type requirements:
* {{tt|CharT}} is one of
** {{c/core|char}},
** {{c/core|wchar_t}}, and
** any other implementation-defined [[cpp/string|character container type]] that meets the requirements for a character on which any of the [[cpp/io|iostream components]] can be instantiated; and
* {{tt|InputIt}} must meet the requirements of {{named req|InputIterator}}.

===Nested types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc|{{tt|iter_type}}|{{tt|InputIt}}}}
{{dsc end}}

{{cpp/locale/facet data members}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/locale/num_get/num_get|constructs a new {{tt|num_get}} facet}}
{{dsc mem fun|cpp/locale/num_get/get|invokes {{tt|do_get}}}}
{{dsc end}}

===Protected member functions===
{{dsc begin}}
{{dsc prot mem dtor|cpp/locale/num_get/~num_get|destructs a {{tt|num_get}} facet}}
{{dsc prot mem vfun|cpp/locale/num_get/get|title=do_get|parses a number from an input stream}}
{{dsc end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;locale&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;

int main()
{
    std::string de_double = "1.234.567,89";
    std::string us_double = "1,234,567.89";
    
    // parse using streams
    std::istringstream de_in(de_double);
    de_in.imbue(std::locale("de_DE.UTF-8"));
    double f1;
    de_in &gt;&gt; f1;
    
    std::istringstream us_in(de_double);
    us_in.imbue(std::locale("en_US.UTF-8"));
    double f2;
    us_in &gt;&gt; f2;
    
    std::cout &lt;&lt; "Parsing " &lt;&lt; de_double &lt;&lt; " as double gives " &lt;&lt; std::fixed
              &lt;&lt; f1 &lt;&lt; " in de_DE locale and " &lt;&lt; f2 &lt;&lt; " in en_US\n";
    
    // use the facet directly
    std::istringstream s3(us_double);
    s3.imbue(std::locale("en_US.UTF-8"));
    
    auto&amp; f = std::use_facet&lt;std::num_get&lt;char&gt;&gt;(s3.getloc());
    std::istreambuf_iterator&lt;char&gt; beg(s3), end;
    double f3;
    std::ios::iostate err;
    f.get(beg, end, s3, err, f3);
    
    std::cout &lt;&lt; "parsing " &lt;&lt; us_double
              &lt;&lt; " as double using raw en_US facet gives " &lt;&lt; f3 &lt;&lt; '\n';
}
|output=
Parsing 1.234.567,89 as double gives 1234567.890000 in de_DE locale and 1.234000 in en_US
parsing 1,234,567.89 as double using raw en_US facet gives 1234567.890000
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=427|std=C++98|before={{tt|num_get}} was guaranteed to accept any {{tt|CharT}} that&lt;br&gt;meets the requirements for a character on which&lt;br&gt;any of the iostream components can be instantiated|after=only guarantees to accept {{c/core|char}},&lt;br&gt;{{c/core|wchar_t}} and other implementation-&lt;br&gt;defined character types}}
{{dr list item|wg=lwg|dr=2392|std=C++98|before=only character type {{tt|CharT}} could be&lt;br&gt;guaranteed to be accepted by {{tt|num_get}}|after=can guarantee to accept implementation-&lt;br&gt;defined character container types}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc numpunct}}
{{dsc inc|cpp/locale/dsc num_put}}
{{dsc inc|cpp/io/basic_istream/dsc operator_gtgt}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|setlocale}}
{{cpp/locale/navbar}}
{{ddcl|header=clocale|
char* setlocale( int category, const char* locale );
}}

The {{tt|setlocale}} function installs the specified system locale or its portion as the new C locale. The modifications remain in effect and influences the execution of all locale-sensitive C library functions until the next call to {{tt|setlocale}}. If {{tt|locale}} is a null pointer, {{tt|setlocale}} queries the current C locale without modifying it.

===Parameters===
{{par begin}}
{{par|category|locale category identifier, one of the {{rlpt|LC_categories|LC_xxx}} macros. May be {{c|0}}.}}
{{par|locale|system-specific locale identifier. Can be {{c|""}} for the user-preferred locale or {{c|"C"}} for the minimal locale }}
{{par end}}

===Return value===
Pointer to a narrow null-terminated string identifying the C locale after applying the changes, if any, or null pointer on failure.

A copy of the returned string along with the category used in this call to {{tt|std::setlocale}} may be used later in the program to restore the locale back to the state at the end of this call.

===Notes===
During program startup, the equivalent of {{c|std::setlocale(LC_ALL, "C");}} is executed before any user code is run.

Although the return type is {{c|char*}}, modifying the pointed-to characters is undefined behavior.

Because {{tt|setlocale}} modifies global state which affects execution of locale-dependent functions, it is undefined behavior to call it from one thread, while another thread is executing any of the following functions: {{lc|std::fprintf}}, {{lc|std::isprint}}, {{lc|std::iswdigit}}, {{lc|std::localeconv}}, {{lc|std::tolower}}, {{lc|std::fscanf}}, {{lc|std::ispunct}}, {{lc|std::iswgraph}}, {{lc|std::mblen}}, {{lc|std::toupper}}, {{lc|std::isalnum}}, {{lc|std::isspace}}, {{lc|std::iswlower}}, {{lc|std::mbstowcs}}, {{lc|std::towlower}}, {{lc|std::isalpha}}, {{lc|std::isupper}}, {{lc|std::iswprint}}, {{lc|std::mbtowc}}, {{lc|std::towupper}}, {{lc|std::isblank}}, {{lc|std::iswalnum}}, {{lc|std::iswpunct}}, {{tt|std::setlocale}}, {{lc|std::wcscoll}}, {{lc|std::iscntrl}}, {{lc|std::iswalpha}}, {{lc|std::iswspace}}, {{lc|std::strcoll}}, {{lc|std::wcstod}}, {{lc|std::isdigit}}, {{lc|std::iswblank}}, {{lc|std::iswupper}}, {{lc|std::strerror}}, {{lc|std::wcstombs}}, {{lc|std::isgraph}}, {{lc|std::iswcntrl}}, {{lc|std::iswxdigit}}, {{lc|std::strtod}}, {{lc|std::wcsxfrm}}, {{lc|std::islower}}, {{lc|std::iswctype}}, {{lc|std::isxdigit}}.

POSIX also defines a locale named {{c|"POSIX"}}, which is always accessible and is exactly equivalent to the default minimal {{c|"C"}} locale.

POSIX also specifies that the returned pointer, not just the contents of the pointed-to string, may be invalidated by subsequent calls to {{tt|setlocale}}.

===Example===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cstdio&gt;
#include &lt;ctime&gt;
#include &lt;cwchar&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;

int main()
{
    // Make a "deep copy" of current locale name.
    std::string prev_loc = std::setlocale(LC_ALL, nullptr);

    // The C locale will be UTF-8 enabled English,
    // decimal dot will be German,
    // date and time formatting will be Japanese.
    if (const char* loc = std::setlocale(LC_ALL, "en_US.UTF-8"))
        std::wprintf(L"New LC_ALL locale: %s\n", loc);
    if (const char* loc = std::setlocale(LC_NUMERIC, "de_DE.UTF-8"))
        std::wprintf(L"New LC_NUMERIC locale: %s\n", loc);
    if (const char* loc = std::setlocale(LC_TIME, "ja_JP.UTF-8"))
        std::wprintf(L"New LC_TIME locale: %s\n", loc);

    wchar_t buf[100];
    std::time_t t = std::time(nullptr);
    std::wcsftime(buf, std::size(buf), L"%A %c", std::localtime(&amp;t));
    std::wprintf(L"Number: %.2f\nDate: %Ls\n", 3.14, buf);

    // Restore the previous locale.
    if (const char* loc = std::setlocale(LC_ALL, prev_loc.c_str()))
        std::wprintf(L"Restorred LC_ALL locale: %s\n", loc);
}
|p=true
|output=
New LC_ALL locale: en_US.UTF-8
New LC_NUMERIC locale: de_DE.UTF-8
New LC_TIME locale: ja_JP.UTF-8
Number: 3,14
Date: 日曜日 2022年11月06日 20時40分59秒
Restorred LC_ALL locale: C
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc LC_categories}}
{{dsc inc|cpp/locale/dsc locale}}
{{dsc see c|c/locale/setlocale}}
{{dsc end}}

===External links===
{{elink begin}}
{{elink|1=[https://ss64.com/locale.html List of Windows locale names].}}
{{elink|1=[https://lh.2xlibre.net/locales/ List of Linux locale names].}}
{{elink end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{title|&lt;small&gt;LC_ALL, LC_COLLATE, LC_CTYPE, LC_MONETARY, LC_NUMERIC, LC_TIME&lt;/small&gt;}}
{{cpp/locale/navbar}}
{{dcl begin}}
{{dcl header|clocale}}
{{dcl|
#define LC_ALL      /* implementation defined */
}}
{{dcl|
#define LC_COLLATE  /* implementation defined */
}}
{{dcl|
#define LC_CTYPE    /* implementation defined */
}}
{{dcl|
#define LC_MONETARY /* implementation defined */
}}
{{dcl|
#define LC_NUMERIC  /* implementation defined */
}}
{{dcl|
#define LC_TIME     /* implementation defined */
}}
{{dcl end}}

Each of the above macro constants expand to integer constant expressions with distinct values that are suitable for use as the first argument of {{lc|std::setlocale}}.

{{dsc begin}}
{{dsc hitem|Constant|Explanation}}
{{dsc|{{tt|LC_ALL}}|selects the entire C locale}}
{{dsc|{{tt|LC_COLLATE}}|selects the collation category of the C locale}}
{{dsc|{{tt|LC_CTYPE}}|selects the character classification category of the C locale}}
{{dsc|{{tt|LC_MONETARY}}|selects the monetary formatting category of the C locale}}
{{dsc|{{tt|LC_NUMERIC}}|selects the numeric formatting category of the C locale}}
{{dsc|{{tt|LC_TIME}}|selects the time formatting category of the C locale}}
{{dsc end}}

Additional macro constants, with names that begin with {{tt|LC_}} followed by at least one uppercase letter, may be defined in {{header|clocale}}. For example, the POSIX specification requires {{tt|LC_MESSAGES}} (which controls {{lc|std::perror}} and {{lc|std::strerror}}), ISO/IEC 30112:2014 ([https://www.open-std.org/JTC1/SC35/WG5/docs/30112d10.pdf 2014 draft]) additionally defines {{tt|LC_IDENTIFICATION}}, {{tt|LC_XLITERATE}}, {{tt|LC_NAME}}, {{tt|LC_ADDRESS}}, {{tt|LC_TELEPHONE}}, {{tt|LC_PAPER}}, {{tt|LC_MEASUREMENT}}, and {{tt|LC_KEYBOARD}}, which are supported by the GNU C library (except for {{tt|LC_XLITERATE}}).

===Example===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cstdio&gt;
#include &lt;ctime&gt;
#include &lt;cwchar&gt;

int main()
{
    // the C locale will be the UTF-8 enabled English:
    std::setlocale(LC_ALL, "en_US.UTF-8");

    // decimal dot will be German:
    std::setlocale(LC_NUMERIC, "de_DE.UTF-8");

    // date/time formatting will be Japanese:
    std::setlocale(LC_TIME, "ja_JP.UTF-8");

    wchar_t str[100];
    std::time_t t = std::time(nullptr);
    std::wcsftime(str, 100, L"%A %c", std::localtime(&amp;t));
    std::wprintf(L"Number: %.2f\nDate: %Ls\n", 3.14, str);
}
|output=
Number: 3,14
Date: 日曜日 2022年11月06日 17時55分10秒
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc setlocale}}
{{dsc inc|cpp/locale/dsc locale}}
{{dsc see c|c/locale/LC_categories|locale categories|nomono=true}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
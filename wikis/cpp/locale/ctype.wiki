{{cpp/title|ctype}}
{{cpp/locale/ctype/navbar}}
{{ddcl|header=locale|
template&lt; class CharT &gt;
class ctype;
}}

Class {{tt|ctype}} encapsulates character classification features. All stream input operations performed through {{c/core|std::basic_istream&lt;CharT&gt;}} use the {{tt|std::ctype&lt;CharT&gt;}} of the locale imbued in the stream to identify whitespace characters for input tokenization. Stream output operations apply {{tt|std::ctype&lt;CharT&gt;::widen()}} to narrow-character arguments prior to output.

{{inheritance diagram/std-ctype}}

===Specializations===
The standard library is guaranteed to provide the following specializations (they are {{rlp|locale|required to be implemented by any locale object}}):
{{dsc begin}}
{{dsc header|locale}}
{{dsc|{{rlpt|ctype_char|std::ctype&lt;char&gt;}}|provides narrow character equivalents of the minimal "C" locale classification. This specialization uses table lookup for character classification}}
{{dsc|{{c/core|std::ctype&lt;wchar_t&gt;}}|provides wide character classification appropriate to the native character set}}
{{dsc end}}

===Nested types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc end}}

{{cpp/locale/facet data members}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/locale/ctype/ctype|constructs a new {{tt|ctype}} facet}}
{{dsc prot mem dtor|cpp/locale/ctype/~ctype|destructs a {{tt|ctype}} facet}}
{{dsc inc|cpp/locale/ctype/dsc is}}
{{dsc inc|cpp/locale/ctype/dsc scan_is}}
{{dsc inc|cpp/locale/ctype/dsc scan_not}}
{{dsc inc|cpp/locale/ctype/dsc toupper}}
{{dsc inc|cpp/locale/ctype/dsc tolower}}
{{dsc inc|cpp/locale/ctype/dsc widen}}
{{dsc inc|cpp/locale/ctype/dsc narrow}}
{{dsc end}}

===Protected member functions===
{{dsc begin}}
{{dsc inc|cpp/locale/ctype/dsc do_is}}
{{dsc inc|cpp/locale/ctype/dsc do_scan_is}}
{{dsc inc|cpp/locale/ctype/dsc do_scan_not}}
{{dsc inc|cpp/locale/ctype/dsc do_toupper}}
{{dsc inc|cpp/locale/ctype/dsc do_tolower}}
{{dsc inc|cpp/locale/ctype/dsc do_widen}}
{{dsc inc|cpp/locale/ctype/dsc do_narrow}}
{{dsc end}}

{{cpp/locale/ctype_base/inherit}}

===Example===
{{example
|The following example demonstrates modification of a {{tt|ctype}} other than {{tt|ctype&lt;char&gt;}} to tokenize a CSV file:
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;sstream&gt;
 
struct csv_whitespace : std::ctype&lt;wchar_t&gt;
{
    bool do_is(mask m, char_type c) const
    {
        if ((m &amp; space) &amp;&amp; c == L' ')
            return false; // space will NOT be classified as whitespace
        
        if ((m &amp; space) &amp;&amp; c == L',')
            return true; // comma will be classified as whitespace
        
        return ctype::do_is(m, c); // leave the rest to the base class
    }
};
 
int main()
{
    std::wstring in = L"Column 1,Column 2,Column 3\n123,456,789";
    std::wstring token;
    
    std::wcout &lt;&lt; "default locale:\n";
    std::wistringstream s1(in);
    while (s1 &gt;&gt; token)
        std::wcout &lt;&lt; "  " &lt;&lt; token &lt;&lt; '\n';
    
    std::wcout &lt;&lt; "locale with modified ctype:\n";
    std::wistringstream s2(in);
    csv_whitespace* my_ws = new csv_whitespace;
    s2.imbue(std::locale(s2.getloc(), my_ws));
    while (s2 &gt;&gt; token)
        std::wcout &lt;&lt; "  " &lt;&lt; token &lt;&lt; '\n';
}
|output=
default locale:
  Column
  1,Column
  2,Column
  3
  123,456,789
locale with modified ctype:
  Column 1
  Column 2
  Column 3
  123
  456
  789
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc ctype_char}}
{{dsc inc|cpp/locale/dsc ctype_base}}
{{dsc inc|cpp/locale/dsc ctype_byname}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
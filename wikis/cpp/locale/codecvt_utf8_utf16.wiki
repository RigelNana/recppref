{{cpp/title|codecvt_utf8_utf16}}
{{cpp/locale/navbar}}
{{ddcl|header=codecvt|since=c++11|deprecated=c++17|removed=c++26|1=
template&lt;
    class Elem,
    unsigned long Maxcode = 0x10ffff,
    std::codecvt_mode Mode = (std::codecvt_mode)0 &gt;
class codecvt_utf8_utf16
    : public std::codecvt&lt;Elem, char, std::mbstate_t&gt;;
}}

{{tt|std::codecvt_utf8_utf16}} is a {{lc|std::codecvt}} facet which encapsulates conversion between a UTF-8 encoded byte string and UTF-16 encoded character string. If {{tt|Elem}} is a 32-bit type, one UTF-16 code unit will be stored in each 32-bit character of the output sequence.

This is an N:M conversion facet, and cannot be used with {{lc|std::basic_filebuf}} (which only permits 1:N conversions, such as UTF-32/UTF-8, between the internal and the external encodings). This facet can be used with {{lc|std::wstring_convert}}.

===Template Parameters===
{{par begin}}
{{par|Elem|either {{c/core|char16_t}}, {{c/core|char32_t}}, or {{c/core|wchar_t}}}}
{{par|Maxcode|the largest value of {{tt|Elem}} that this facet will read or write without error}}
{{par|Mode|a constant of type {{lc|std::codecvt_mode}}}}
{{par end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/locale/codecvt_utf8_utf16|inlinemem=true|constructs a new {{tt|codecvt_utf8_utf16}} facet}}
{{dsc mem dtor|cpp/locale/codecvt_utf8_utf16|inlinemem=true|destroys a {{tt|codecvt_utf8_utf16}} facet}}
{{dsc end}}

{{member|{{small|std::codecvt_utf8_utf16::}}codecvt_utf8_utf16|
{{dcl begin}}
{{dcl|1=
explicit codecvt_utf8_utf16( std::size_t refs = 0 );
}}
{{dcl end}}

Constructs a new {{tt|std::codecvt_utf8_utf16}} facet, passes the initial reference counter {{c|refs}} to the base class.

===Parameters===
{{par begin}}
{{par|refs|the number of references that link to the facet}}
{{par end}}
}}

{{member|{{small|std::codecvt_utf8_utf16::}}~codecvt_utf8_utf16|
{{dcl begin}}
{{dcl|1=
~codecvt_utf8_utf16();
}}
{{dcl end}}

Destroys the facet. Unlike the locale-managed facets, this facet's destructor is public.
}}

{{cpp/locale/codecvt/inherit}}
{{cpp/locale/codecvt_base/inherit}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;codecvt&gt;
#include &lt;cstdint&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;string&gt;

int main()
{
    std::string u8 = "z\u00df\u6c34\U0001f34c";
    std::u16string u16 = u"z\u00df\u6c34\U0001f34c";
    
    // UTF-8 to UTF-16/char16_t
    std::u16string u16_conv = std::wstring_convert&lt;
        std::codecvt_utf8_utf16&lt;char16_t&gt;, char16_t&gt;{}.from_bytes(u8);
    assert(u16 == u16_conv);
    std::cout &lt;&lt; "UTF-8 to UTF-16 conversion produced " &lt;&lt; u16_conv.size()
              &lt;&lt; " code units:\n" &lt;&lt; std::showbase &lt;&lt; std::hex;
    for (char16_t c : u16_conv)
        std::cout &lt;&lt; static_cast&lt;std::uint16_t&gt;(c) &lt;&lt; ' ';
    
    // UTF-16/char16_t to UTF-8
    std::string u8_conv = std::wstring_convert&lt;
        std::codecvt_utf8_utf16&lt;char16_t&gt;, char16_t&gt;{}.to_bytes(u16);
    assert(u8 == u8_conv);
    std::cout &lt;&lt; "\nUTF-16 to UTF-8 conversion produced "
              &lt;&lt; std::dec &lt;&lt; u8_conv.size() &lt;&lt; " bytes:\n" &lt;&lt; std::hex;
    for (char c : u8_conv)
        std::cout &lt;&lt; +static_cast&lt;unsigned char&gt;(c) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
UTF-8 to UTF-16 conversion produced 5 code units:
0x7a 0xdf 0x6c34 0xd83c 0xdf4c
UTF-16 to UTF-8 conversion produced 10 bytes:
0x7a 0xc3 0x9f 0xe6 0xb0 0xb4 0xf0 0x9f 0x8d 0x8c
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2229|std=C++98|before=the constructor and destructor were not specified|after=specifies them}}
{{dr list end}}

===See also===
{{cpp/locale/unicode string conversions}}
{{dsc begin}}
{{dsc inc|cpp/locale/dsc codecvt}}
{{dsc inc|cpp/locale/dsc codecvt_mode}}
{{dsc inc|cpp/locale/dsc codecvt_utf8}}
{{dsc inc|cpp/locale/dsc codecvt_utf16}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
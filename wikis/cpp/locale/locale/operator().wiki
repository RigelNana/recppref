{{cpp/locale/locale/title|operator()}}
{{cpp/locale/locale/navbar}}
{{ddcl|
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator()( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; s1,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; s2 ) const;
}}

Compares two string arguments {{c|s1}} and {{c|s2}} according to the lexicographic comparison rules defined by this locale's {{c|std::collate&lt;CharT&gt;}} facet. This operator allows any locale object that has a collate facet to be used as a binary predicate in the standard algorithms (such as {{lc|std::sort}}) and ordered containers (such as {{lc|std::set}}).

===Parameters===
{{par begin}}
{{par|s1|the first string to compare}}
{{par|s2|the second string to compare}}
{{par end}}

===Return value===
{{c|true}} if {{c|s1}} is lexicographically less than {{c|s2}}, {{c|false}} otherwise.

===Possible implementation===
{{eq fun
|1=
template&lt;class CharT, class Traits, class Alloc&gt;
bool operator()(const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; s1,
                const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; s2) const
{
    return std::use_facet&lt;std::collate&lt;CharT&gt;&gt;(*this).compare(
               s1.data(), s1.data() + s1.size(),
               s2.data(), s2.data() + s2.size()) &lt; 0;
}
}}

===Example===
{{example
|A {{lc|std::vector|vector}} of {{lc|std::string|string}}s can be sorted according to a non-default locale by using the locale object as comparator:
|code=
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;locale&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;std::wstring&gt; v = {L"жил", L"был", L"пёс"};
    std::sort(v.begin(), v.end(), std::locale("ru_RU.UTF8"));
    assert(v[0] == L"был");
    assert(v[1] == L"жил");
    assert(v[2] == L"пёс");
}
|output=
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc collate}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
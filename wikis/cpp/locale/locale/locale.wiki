{{cpp/locale/locale/title|locale}}
{{cpp/locale/locale/navbar}}

{{dcl begin}}
{{dcl rev multi|num=1|until1=c++11
|dcl1=
locale() throw();
|dcl2=
locale() noexcept;
}}
{{dcl rev multi|num=2|until1=c++11
|dcl1=
locale( const locale&amp; other ) throw();
|dcl2=
locale( const locale&amp; other ) noexcept;
}}
{{dcl|num=3|
explicit locale( const char* std_name );
}}
{{dcl|num=4|since=c++11|
explicit locale( const std::string&amp; std_name );
}}
{{dcl|num=5|
locale( const locale&amp; other, const char* std_name, category cats );
}}
{{dcl|num=6|since=c++11|
locale( const locale&amp; other, const std::string&amp; std_name, category cats );
}}
{{dcla|num=7|
template&lt; class Facet &gt;
locale( const locale&amp; other, Facet* f );
}}
{{dcl|num=8|
locale( const locale&amp; other, const locale&amp; one, category cats );
}}
{{dcl end}}

Constructs a new locale object.

@1@ Default constructor. Constructs a copy of the global C++ locale, which is the locale most recently used as the argument to {{lc|std::locale::global}} or a copy of {{c|std::locale::classic()}} if no call to {{lc|std::locale::global}} has been made.

@2@ Copy constructor. Constructs a copy of {{c|other}}.

@3,4@ Constructs a copy of the system locale with specified {{c|std_name}} (such as {{c|"C"}}, or {{c|"POSIX"}}, or {{c|"en_US.UTF-8"}}, or {{c|"English_US.1251"}}), if such locale is supported by the operating system. The locale constructed in this manner has a name.

@4@ Equivalent to {{c|locale(std_name.c_str())}}.

@5@ Constructs a copy of {{c|other}} except for all the facets identified by the {{c|cats}} argument, which are copied from the system locale identified by its {{c|std_name}}. The locale constructed in this manner has a name if and only if {{c|other}} has a name.

@6@ Equivalent to {{c|locale(other, std_name.c_str(), cats)}}.

@7@ Constructs a copy of {{c|other}} except for the facet of type {{tt|Facet}} (typically deduced from the type of the argument) which is installed from {{c|f}}. If {{c|f}} is a null pointer, the constructed locale is a full copy of {{c|other}}. The program is ill-formed if {{tt|Facet}} is not a {{rlp|facet#Facet class|facet}} or it is a volatile-qualified facet.

@@ If {{c|f}} is null, the constructed locale has the same name as {{c|other}}. Otherwise, the constructed locale has no name.

@8@ Constructs a copy of {{c|other}} except for all the facets identified by the {{c|cats}} argument, which are copied from {{c|one}}.

@@ If {{c|cats}} is equal to {{tt|locale::none}}, the constructed locale has a name if and only if {{c|other}} has a name. Otherwise, the constructed locale has a name if and only if {{c|other}} and {{c|one}} both have names.

===Parameters===
{{par begin}}
{{par|other|another locale to copy}}
{{par|std_name|name of the system locale to use}}
{{par|f|pointer to a facet to merge with {{c|other}}}}
{{par|cats|the facet categories used to identify the facets to merge with {{c|other}}}}
{{par|one|another locale to take facets from}}
{{par end}}

===Exceptions===
@3,5@ {{lc|std::runtime_error}} if the operating system has no locale named {{c|std_name}} or if {{c|std_name}} is a null pointer.

@4,6@ {{lc|std::runtime_error}} if the operating system has no locale named {{c|std_name}}.

===Notes===
Overload {{vl|7}} is typically called with its second argument, {{c|f}}, obtained directly from a new-expression: the locale is responsible for calling the matching {{c/core|delete}} from its own destructor.

===Example===
{{example
|code=
#include &lt;codecvt&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;

std::ostream&amp; operator&lt;&lt; (std::ostream&amp; os, const std::locale&amp; loc)
{
    if (loc.name().length() &lt;= 80)
        os &lt;&lt; loc.name();
    else
        for (const auto c : loc.name())
            os &lt;&lt; c &lt;&lt; (c == ';' ? "\n  " : "");

    return os &lt;&lt; '\n';
}

int main()
{
    std::locale l1;
    std::cout &lt;&lt; "Name of a copy of the classic \"C\" locale: " &lt;&lt; l1;

    std::locale l2("en_US.UTF-8");
    std::cout &lt;&lt; "Name of unicode locale: " &lt;&lt; l2;

    std::locale l3(l1, new std::codecvt_utf8&lt;wchar_t&gt;);
    std::cout &lt;&lt; "Name of \"C\" locale except for codecvt: " &lt;&lt; l3;

    std::locale l4(l1, l2, std::locale::ctype);
    std::cout &lt;&lt; "Name of \"C\" locale except for ctype, which is unicode:\n  " &lt;&lt; l4;
}
|p=true
|output=
Name of a copy of the classic "C" locale: C
Name of unicode locale: en_US.UTF-8
Name of "C" locale except for codecvt: *
Name of "C" locale except for ctype, which is unicode:
  LC_CTYPE=en_US.UTF-8;
  LC_NUMERIC=C;
  LC_TIME=C;
  LC_COLLATE=C;
  LC_MONETARY=C;
  LC_MESSAGES=C;
  LC_PAPER=C;
  LC_NAME=C;
  LC_ADDRESS=C;
  LC_TELEPHONE=C;
  LC_MEASUREMENT=C;
  LC_IDENTIFICATION=C
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=436|std=C++98|before=for overload {{vl|7}}, it was unclear&lt;br&gt;whether {{tt|Facet}} can be cv-qualified|after=it can be const-qualified,&lt;br&gt;but not volatile-qualified}}
{{dr list item|wg=lwg|dr=2295|std=C++98|before=for overload {{vl|7}}, the constructed locale had no name even if {{c|f}} is null|after=it has the name of {{c|other}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/locale/dsc ~locale}}
{{dsc end}}

===External links===
{{elink begin}}
{{elink|1=[https://ss64.com/locale.html List of Windows locale names].}}
{{elink|1=[https://lh.2xlibre.net/locales/ List of Linux locale names].}}
{{elink end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|num_put}}
{{cpp/locale/num_put/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|1=
template&lt; 
    class CharT,
    class OutputIt = std::ostreambuf_iterator&lt;CharT&gt;
&gt; class num_put;
}}
{{dcl end}}

Class {{tt|std::num_put}} encapsulates the rules for formatting numeric values as strings. Specifically, the types {{c/core|bool}}, {{c/core|long}}, {{c/core|unsigned long}}{{rev inl|since=c++11|, {{c/core|long long}}, {{c/core|unsigned long long}}}}, {{c/core|double}}, {{c/core|long double}}, {{c/core|void*}}, and of all types implicitly convertible to these (such as {{c/core|int}} or {{c/core|float}}) are supported. The standard formatting output operators (such as {{c|cout &lt;&lt; n;}}) use the {{tt|std::num_put}} facet of the I/O stream's locale to generate text representation of numbers.

{{inheritance diagram/std-num_put}}

If a {{tt|std::num_put}} specialization is not guaranteed to be provided by the standard library (see below), the behaviors of its {{lc|put()}} and {{lc|do_put()}} are not guaranteed as specified.

===Specializations===
The standard library is guaranteed to provide the following specializations (they are {{rlp|locale|required to be implemented by any locale object}}):
{{dsc begin}}
{{dsc header|locale}}
{{dsc|{{c/core|std::num_put&lt;char&gt;}}|creates narrow string representations of numbers}}
{{dsc|{{c/core|std::num_put&lt;wchar_t&gt;}}|creates wide string representations of numbers}}
{{dsc end}}

In addition, the standard library is also guaranteed to provide every specialization that satisfies the following type requirements:
* {{tt|CharT}} is one of
** {{c/core|char}},
** {{c/core|wchar_t}}, and
** any other implementation-defined [[cpp/string|character container type]] that meets the requirements for a character on which any of the [[cpp/io|iostream components]] can be instantiated; and
* {{tt|OutputIt}} must meet the requirements of {{named req|OutputIterator}}.

===Nested types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc|{{tt|iter_type}}|{{tt|OutputIt}}}}
{{dsc end}}

{{cpp/locale/facet data members}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/locale/num_put/num_put|constructs a new {{tt|num_put}} facet}}
{{dsc mem fun|cpp/locale/num_put/put|invokes {{tt|do_put}}}}
{{dsc end}}

===Protected member functions===
{{dsc begin}}
{{dsc prot mem dtor|cpp/locale/num_put/~num_put|destructs a {{tt|num_put}} facet}}
{{dsc prot mem vfun|cpp/locale/num_put/put|title=do_put|formats a number and writes to output stream}}
{{dsc end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;locale&gt;
#include &lt;string&gt;

int main()
{
    double n = 1234567.89;
    std::cout.imbue(std::locale("de_DE.UTF-8"));
    std::cout &lt;&lt; "Direct conversion to string:\n"
              &lt;&lt; std::to_string(n) &lt;&lt; '\n'
              &lt;&lt; "Output using a german locale:\n"
              &lt;&lt; std::fixed &lt;&lt; n &lt;&lt; '\n'
              &lt;&lt; "Output using an american locale:\n";
    
    // use the facet directly
    std::cout.imbue(std::locale("en_US.UTF-8"));
    auto&amp; f = std::use_facet&lt;std::num_put&lt;char&gt;&gt;(std::cout.getloc());
    f.put(std::ostreambuf_iterator&lt;char&gt;(std::cout), std::cout, ' ', n);
    std::cout &lt;&lt; '\n';
}
|p=true
|output=
Direct conversion to string:
1234567.890000
Output using a german locale:
1.234.567,890000
Output using an american locale:
1,234,567.890000
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=427|std=C++98|before={{tt|num_put}} was guaranteed to accept any {{tt|CharT}} that&lt;br&gt;meets the requirements for a character on which&lt;br&gt;any of the iostream components can be instantiated|after=only guarantees to accept {{c/core|char}},&lt;br&gt;{{c/core|wchar_t}} and other implementation-&lt;br&gt;defined character types}}
{{dr list item|wg=lwg|dr=2392|std=C++98|before=only character type {{tt|CharT}} could be&lt;br&gt;guaranteed to be accepted by {{tt|num_put}}|after=can guarantee to accept implementation-&lt;br&gt;defined character container types}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc numpunct}}
{{dsc inc|cpp/locale/dsc num_get}}
{{dsc inc|cpp/string/basic_string/dsc to_string}}
{{dsc inc|cpp/string/basic_string/dsc to_wstring}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
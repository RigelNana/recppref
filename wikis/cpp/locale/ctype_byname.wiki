{{cpp/title|ctype_byname}}
{{cpp/locale/navbar}}
{{ddcl|header=locale|
template&lt; class CharT &gt;
class ctype_byname : public std::ctype&lt;CharT&gt;;
}}

{{tt|std::ctype_byname}} is a {{lc|std::ctype}} facet which encapsulates character classification rules of the locale specified at its construction.

===Specializations===
The standard library is guaranteed to provide the following specializations:
{{dsc begin}}
{{dsc header|locale}}
{{dsc|{{c/core|std::ctype_byname&lt;char&gt;}}|provides narrow character classification (uses table lookup for character classification)}}
{{dsc|{{c/core|std::ctype_byname&lt;wchar_t&gt;}}|provides wide character classification}}
{{dsc end}}

===Nested types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|mask}}|{{c/core|typename std::ctype&lt;CharT&gt;::mask}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/locale/byname/dsc constructor|ctype_byname}}
{{dsc inc|cpp/locale/byname/dsc destructor|ctype_byname}}
{{dsc end}}

{{include|cpp/locale/byname/constructor|ctype_byname}}
{{include|cpp/locale/byname/destructor|ctype_byname}}

{{cpp/locale/ctype/inherit}}
{{cpp/locale/ctype char/inherit}}
{{cpp/locale/ctype_base/inherit}}

===Notes===
{{c/core|std::ctype_byname&lt;char&gt;}} was incorrectly declared as an explicit specialization in the synopsis of {{header|locale}}, and the declaration was removed by the resolution of {{lwg|1298}}, but it remains a required specialization, just like {{c/core|std::ctype_byname&lt;wchar_t&gt;}}.

===Example===
{{example
| 
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;

int main()
{
    wchar_t c = L'\u00de'; // capital letter thorn
    
    std::locale loc("C");
    
    std::cout &lt;&lt; "isupper('횧', C locale) returned "
              &lt;&lt; std::boolalpha &lt;&lt; std::isupper(c, loc) &lt;&lt; '\n';
    
    loc = std::locale(loc, new std::ctype_byname&lt;wchar_t&gt;("en_US.utf8"));
    
    std::cout &lt;&lt; "isupper('횧', C locale with Unicode ctype) returned "
              &lt;&lt; std::boolalpha &lt;&lt; std::isupper(c, loc) &lt;&lt; '\n';
}
|output=
isupper('횧', C locale) returned false
isupper('횧', C locale with Unicode ctype) returned true
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=16|std=C++98|before=the definition of the explicit specialization {{c/core|std::ctype_byname&lt;char&gt;}}&lt;br&gt;misspecified the name and parameter list of {{tt|do_narrow}}|after=corrected}}
{{dr list item|wg=lwg|dr=616|std=C++98|before=the {{c/core|typename}} disambiguator was missing in the definition of {{tt|mask}}|after=added}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc ctype}}
{{dsc inc|cpp/locale/dsc ctype_char}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
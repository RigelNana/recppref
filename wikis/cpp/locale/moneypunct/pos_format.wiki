{{cpp/locale/moneypunct/title|pos_format, do_pos_format, neg_format, do_neg_format}}
{{cpp/locale/moneypunct/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
pattern pos_format() const;
}}
{{dcl|num=2|1=
public:
pattern neg_format() const;
}}
{{dcl|num=3|1=
protected:
virtual pattern do_pos_format() const;
}}
{{dcl|num=4|1=
protected:
virtual pattern do_neg_format() const;
}}
{{dcl end}}

@1@ Public member function, calls the member function {{tt|do_pos_format}} of the most derived class.
@2@ Public member function, calls the member function {{tt|do_neg_format}} of the most derived class.
@3@ Returns the format structure (of type {{ltt|cpp/locale/money_base|std::money_base::format}}) which describes the formatting of positive monetary values.
@4@ Returns the format structure (of type {{ltt|cpp/locale/money_base|std::money_base::format}}) which describes the formatting of negative monetary values.

The standard specializations of {{c|std::moneypunct}} return the pattern {{c|{symbol, sign, none, value} }}.

===Return value===
The object of type {{ltt|cpp/locale/money_base|std::money_base::format}} describing the formatting used by this locale.

===Notes===
While {{lc|std::money_put}} uses {{tt|pos_format}} for formatting positive values and neg_format for formatting negative values, {{lc|std::money_get}} uses {{tt|neg_format}} for parsing all monetary values: it assumes that {{tt|neg_format}} is compatible with {{tt|pos_format}}.

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;

struct my_punct : std::moneypunct_byname&lt;char, false&gt;
{
    my_punct(const char* name) : moneypunct_byname(name) {}
    pattern do_pos_format() const { return {value, space, symbol, sign}; }
    pattern do_neg_format() const { return {value, space, symbol, sign}; }
};

int main()
{
    std::cout.imbue(std::locale("en_US.utf8"));
    std::cout &lt;&lt; "american locale: " &lt;&lt; std::showbase
              &lt;&lt; std::put_money(12345678.0) &lt;&lt; '\n';

    std::cout.imbue(std::locale(std::cout.getloc(), new my_punct("en_US.utf8")));
    std::cout &lt;&lt; "locale with modified moneypunct:\n"
              &lt;&lt; std::put_money(12345678.0) &lt;&lt; '\n'
              &lt;&lt; std::put_money(-12345678.0) &lt;&lt; '\n';
}
|output=
american locale: $123,456.78
locale with modified moneypunct:
123,456.78 $
123,456.78 $-
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/moneypunct/dsc do_curr_symbol}}
{{dsc inc|cpp/locale/moneypunct/dsc do_positive_sign}}
{{dsc inc|cpp/locale/money_get/dsc do_get}}
{{dsc inc|cpp/locale/money_put/dsc do_put}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/locale/moneypunct/title|positive_sign, do_positive_sign, negative_sign, do_negative_sign}}
{{cpp/locale/moneypunct/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
string_type positive_sign() const;
}}
{{dcl|num=2|1=
public:
string_type negative_sign() const;
}}
{{dcl|num=3|1=
protected:
virtual string_type do_positive_sign() const;
}}
{{dcl|num=4|1=
protected:
virtual string_type do_negative_sign() const;
}}
{{dcl end}}

@1@ Public member function, calls the member function {{tt|do_positive_sign}} of the most derived class.
@2@ Public member function, calls the member function {{tt|do_negative_sign}} of the most derived class.
@3@ Returns the string that is used for formatting of positive monetary values.
@3@ Returns the string that is used for formatting of negative monetary values.

Only the first character of the string returned is the character that appears in the {{lc|pos_format()}}/{{lc|neg_format()}} position indicated by the value {{c|sign}}. The rest of the characters appear ''after'' the rest of the monetary string.

In particular, for negative_sign of {{c|"-"}}, the formatting may appear as {{c|"-1.23 €"}}, while for negative_sign of {{c|"()"}} it would appear as {{c|"(1.23 €)"}}.

===Return value===
The string of type {{tt|string_type}} holding the characters to be used as positive or negative sign.

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;

struct my_punct : std::moneypunct_byname&lt;char, false&gt;
{
    my_punct(const char* name) : moneypunct_byname(name) {}
    string_type do_negative_sign() const { return "()"; }
};

int main()
{
    std::locale loc("de_DE.utf8");
    std::cout.imbue(loc);
    std::cout &lt;&lt; loc.name() &lt;&lt; " negative sign is '"
              &lt;&lt; std::use_facet&lt;std::moneypunct&lt;char&gt;&gt;(loc).negative_sign()
              &lt;&lt; "' for example: " &lt;&lt; std::showbase &lt;&lt; std::put_money(-1234) &lt;&lt; '\n';

    std::locale loc2("ms_MY.utf8");
    std::cout.imbue(loc2);
    std::cout &lt;&lt; loc2.name() &lt;&lt; " negative sign is '"
              &lt;&lt; std::use_facet&lt;std::moneypunct&lt;char&gt;&gt;(loc2).negative_sign()
              &lt;&lt; "' for example: " &lt;&lt; std::put_money(-1234) &lt;&lt; '\n';

    std::cout.imbue(std::locale(std::cout.getloc(), new my_punct("de_DE.utf8")));
    std::cout &lt;&lt; "de_DE.utf8 with negative_sign set to \"()\": "
              &lt;&lt; std::put_money(-1234) &lt;&lt; '\n';
}
|output=
de_DE.utf8 negative sign is '-' for example: -12,34 €
ms_MY.utf8 negative sign is '()' for example: (RM12.34)
de_DE.utf8 with negative_sign set to "()": (12,34 €)
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/moneypunct/dsc do_pos_format}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
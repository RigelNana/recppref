{{cpp/locale/moneypunct/title|decimal_point, do_decimal_point}}
{{cpp/locale/moneypunct/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
CharT decimal_point() const;
}}
{{dcl|num=2|1=
protected:
virtual CharT do_decimal_point() const;
}}
{{dcl end}}

@1@ Public member function, calls the member function {{tt|do_decimal_point}} of the most derived class.

@2@ Returns the character to use as the decimal point separator in monetary I/O if the format uses fractions (that is, if {{lc|do_frac_digits()}} is greater than zero). For typical U.S. locales, it is the character {{c|'.'}} (or {{c|L'.'}}).

===Return value===
The object of type {{tt|CharT}} holding the decimal point character. 

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;

void show_dpt(const char* locname)
{
    std::locale loc(locname);
    std::cout.imbue(loc);
    std::cout &lt;&lt; locname &lt;&lt; " decimal point is '"
              &lt;&lt; std::use_facet&lt;std::moneypunct&lt;char&gt;&gt;(loc).decimal_point()
              &lt;&lt; "' for example: " &lt;&lt; std::showbase &lt;&lt; std::put_money(123);
    if (std::use_facet&lt;std::moneypunct&lt;char&gt;&gt;(loc).frac_digits() == 0)
        std::cout &lt;&lt; " (does not use frac digits)";

    std::cout &lt;&lt; '\n';
}

int main()
{
    show_dpt("en_US.utf8");
    show_dpt("ja_JP.utf8");
    show_dpt("sv_SE.utf8");
    show_dpt("de_DE.utf8");
}
|output=
en_US.utf8 decimal point is '.' for example: $1.23
ja_JP.utf8 decimal point is '.' for example: ￥123 (does not use frac digits)
sv_SE.utf8 decimal point is ',' for example: 1,23 kr
de_DE.utf8 decimal point is ',' for example: 1,23 €
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/moneypunct/dsc do_frac_digits}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
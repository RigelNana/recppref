{{cpp/locale/ctype/title|is|do_is}}
{{cpp/locale/ctype/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
bool is( mask m, CharT c ) const;
}}
{{dcl|num=2|1=
public:
const CharT* is( const CharT* low, const CharT* high, mask* vec ) const;
}}
{{dcl|num=3|1=
protected:
virtual bool do_is( mask m, CharT c ) const;
}}
{{dcl|num=4|1=
protected:
virtual const CharT* do_is( const CharT* low, const CharT* high, mask* vec ) const;
}}
{{dcl end}}

@1,2@ Public member function, calls the protected virtual member function {{tt|do_is}} of the most derived class.
@3@ Checks if the character {{c|c}} is classified by the mask {{c|m}}.
@4@ For every character in the character array {{range|low|high}}, identifies the complete classification mask (e.g. {{c|digit{{!}}xdigit{{!}}alnum{{!}}print{{!}}graph}} for the digit {{c|'0'}} in the default locale), and stores the masks in the corresponding elements of the array pointed to by {{c|vec}}.

===Parameters===
{{par begin}}
{{par|c|character to classify}}
{{par|m|mask to use for classifying a single character}}
{{par|low|pointer to the first character in an array of characters to classify}}
{{par|high|one past the end pointer for the array of characters to classify}}
{{par|vec|pointer to the first element of the array of masks to fill}}
{{par end}}

===Return value===
@1,3@ {{c|true}} if {{c|c}} is classified by {{c|m}}.
@2,4@ {{c|high}}

===Example===
{{example
|code=
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;

// utility wrapper to make locale-bound facets destructible
template&lt;class Facet&gt;
struct deletable_facet : Facet
{
    template&lt;class ...Args&gt;
    deletable_facet(Args&amp;&amp; ...args) : Facet(std::forward&lt;Args&gt;(args)...) {}
    ~deletable_facet() {}
};

int main()
{
    // classify a single character using the default locale
    auto&amp; f = std::use_facet&lt;std::ctype&lt;char&gt;&gt;(std::locale());
    char c = '0';
    if (f.is(std::ctype_base::digit, c)) // or isdigit(c, locale());
        std::cout &lt;&lt; '\'' &lt;&lt; c &lt;&lt; "' is a digit\n";

    // classify every character in a string using a named locale
    deletable_facet&lt;std::ctype_byname&lt;wchar_t&gt;&gt; f2("en_US.utf8");
    std::wstring str = L"z\u00df\u6c34\U0001d10b";
    std::vector&lt;std::ctype_base::mask&gt; vec(str.size());
    f2.is(&amp;str[0], &amp;str[0] + str.size(), &amp;vec[0]);

    for (std::size_t n = 0; n &lt; str.size(); ++n)
    {
        std::cout &lt;&lt; std::hex &lt;&lt; "U+" &lt;&lt; static_cast&lt;wint_t&gt;(str[n]) &lt;&lt; " is: ";
        if (vec[n] &amp; std::ctype_base::alnum) 
            std::cout &lt;&lt; "alnum";
        if (vec[n] &amp; std::ctype_base::punct) 
            std::cout &lt;&lt; "punct";
        std::cout &lt;&lt; '\n';
    }
}
|output=
'0' is a digit
U+7a is: alnum 
U+df is: alnum 
U+6c34 is: alnum 
U+1d10b is: punct 
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/ctype_char/dsc is}}
{{dsc inc|cpp/string/wide/dsc iswctype}}
{{dsc end}}

{{langlinks|ja|zh}}
{{cpp/locale/ctype/title|widen, do_widen}}
{{cpp/locale/ctype/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
CharT widen( char c ) const;
}}
{{dcl|num=2|1=
public:
const char* widen( const char* beg, const char* end, CharT* dst ) const;
}}
{{dcl|num=3|1=
protected:
virtual CharT do_widen( char c ) const;
}}
{{dcl|num=4|1=
protected:
virtual const char* do_widen( const char* beg, const char* end, CharT* dst ) const;
}}
{{dcl end}}

@1,2@ Public member function, calls the corresponding protected virtual member function {{tt|do_widen}} overload of the most derived class. Overload (1) calls {{c|do_widen(c)}}, overload (2) calls {{c|do_widen(beg, end, dst)}}.
@3@ Converts the single-byte character {{c|c}} to the corresponding wide character representation using the simplest reasonable transformation. Typically, this applies only to the characters whose multibyte encoding is a single byte (e.g. U+0000-U+007F in UTF-8).
@4@ For every character in the character array {{range|beg|end}}, writes the corresponding widened character to the successive locations in the character array pointed to by {{c|dst}}.

Widening always returns a wide character, but only the characters from the {{rev inl|until=c++23|[[cpp/language/charset#Basic source character set|basic source character set]]}}{{rev inl|since=c++23|[[cpp/language/charset#Basic character set|basic character set]]}} are guaranteed to have a unique, well-defined, widening transformation, which is also guaranteed to be reversible (by {{lc|narrow()}}). In practice, all characters whose multibyte representation is a single byte are usually widened to their wide character counterparts, and the rest of the possible single-byte values are usually mapped into the same placeholder value, typically {{c|CharT(-1)}}.

Widening, if successful, preserves all character classification categories known to {{lc|is()}}.

===Parameters===
{{par begin}}
{{par|c|character to convert}}
{{par|dflt|default value to produce if the conversion fails}}
{{par|beg|pointer to the first character in an array of characters to convert}}
{{par|end|one past the end pointer for the array of characters to convert}}
{{par|dst|pointer to the first element of the array of characters to fill}}
{{par end}}

===Return value===
@1,3@ Widened character.
@2,4@ {{c|end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;

void try_widen(const std::ctype&lt;wchar_t&gt;&amp; f, char c)
{
    wchar_t w = f.widen(c);
    std::cout &lt;&lt; "The single-byte character " &lt;&lt; +(unsigned char)c
              &lt;&lt; " widens to " &lt;&lt; +w &lt;&lt; '\n';
}
 
int main()
{
    std::locale::global(std::locale("cs_CZ.iso88592"));
    auto&amp; f = std::use_facet&lt;std::ctype&lt;wchar_t&gt;&gt;(std::locale());
    std::cout &lt;&lt; std::hex &lt;&lt; std::showbase &lt;&lt; "In Czech ISO-8859-2 locale:\n";
    try_widen(f, 'a');
    try_widen(f, '\xdf'); // German letter ß (U+00df) in ISO-8859-2
    try_widen(f, '\xec'); // Czech letter ě (U+011b) in ISO-8859-2
    
    std::locale::global(std::locale("cs_CZ.utf8"));
    auto&amp; f2 = std::use_facet&lt;std::ctype&lt;wchar_t&gt;&gt;(std::locale());
    std::cout &lt;&lt; "In Czech UTF-8 locale:\n";
    try_widen(f2, 'a');
    try_widen(f2, '\xdf'); 
    try_widen(f2, '\xec'); 
}
|p=true
|output=
In Czech ISO-8859-2 locale:
The single-byte character 0x61 widens to 0x61
The single-byte character 0xdf widens to 0xdf
The single-byte character 0xec widens to 0x11b
In Czech UTF-8 locale:
The single-byte character 0x61 widens to 0x61
The single-byte character 0xdf widens to 0xffffffff
The single-byte character 0xec widens to 0xffffffff
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=153|std=C++98|before={{tt|widen}} always called overload (4)|after=calls the corresponding overload}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/ctype/dsc narrow}}
{{dsc inc|cpp/io/basic_ios/dsc widen}}
{{dsc inc|cpp/string/multibyte/dsc btowc}}
{{dsc end}}

{{langlinks|ja|zh}}
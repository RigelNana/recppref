{{cpp/locale/ctype/title|scan_not|do_scan_not}}
{{cpp/locale/ctype/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
const CharT* scan_not( mask m, const CharT* beg, const CharT* end ) const;
}}
{{dcl|num=2|1=
protected:
virtual const CharT* do_scan_not( mask m, const CharT* beg, const CharT* end ) const;
}}
{{dcl end}}

@1@ Public member function, calls the protected virtual member function {{tt|do_scan_not}} of the most derived class.
@2@ Locates the first character in the character array {{range|beg|end}} that does not satisfy the classification mask {{c|m}}, that is, the first character {{tt|c}} such that {{c|is(m, c)}} would return {{c|false}}.

===Parameters===
{{par begin}}
{{par|m|mask to search for}}
{{par|beg|pointer to the first character in an array of characters to search}}
{{par|end|one past the end pointer for the array of characters to search}}
{{par end}}

===Return value===
Pointer to the first character in {{range|beg|end}} that doesn't satisfy the mask, or {{c|end}} if no such character was found.

===Example===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;locale&gt;

int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    std::wcout.imbue(std::locale("en_US.utf8"));
    auto&amp; f = std::use_facet&lt;std::ctype&lt;wchar_t&gt;&gt;(std::wcout.getloc());

    // skip leading whitespace
    wchar_t s1[] = L"      \t\t\n  Кошка";
    const wchar_t* p1 = f.scan_not(std::ctype_base::space, std::begin(s1), std::end(s1));
    std::wcout &lt;&lt; '\'' &lt;&lt; p1 &lt;&lt; "'\n";

    // skip leading digits
    wchar_t s2[] = L"123456789ネプネプ";
    const wchar_t* p2 = f.scan_not(std::ctype_base::digit, std::begin(s2), std::end(s2));
    std::wcout &lt;&lt; '\'' &lt;&lt; p2 &lt;&lt; "'\n";
}
|output=
'Кошка'
'ネプネプ'
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/ctype_char/dsc scan_not}}
{{dsc inc|cpp/locale/ctype/dsc do_scan_is}}
{{dsc end}}

{{langlinks|ja|zh}}
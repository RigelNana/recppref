{{cpp/title|codecvt_byname}}
{{cpp/locale/navbar}}
{{ddcl|header=locale|
template&lt; class InternT, class ExternT, class State &gt;
class codecvt_byname : public std::codecvt&lt;InternT, ExternT, State&gt;;
}}

{{tt|std::codecvt_byname}} is a {{lc|std::codecvt}} facet which encapsulates multibyte/wide character conversion rules of a locale specified at its construction.

===Specializations===
The standard library is guaranteed to provide the following specializations:
{{dsc begin}}
{{dsc header|locale}}
{{dsc|{{c/core|std::codecvt_byname&lt;char, char, std::mbstate_t&gt;}}|identity conversion}}
{{dsc|{{c/core|std::codecvt_byname&lt;char16_t, char, std::mbstate_t&gt;}}&lt;br&gt;{{mark life|since=c++11|deprecated=c++20}}|conversion between UTF-16 and UTF-8}}
{{dsc|{{c/core|std::codecvt_byname&lt;char16_t, char8_t, std::mbstate_t&gt;}}&lt;br&gt;{{mark since c++20}}|conversion between UTF-16 and UTF-8}}
{{dsc|{{c/core|std::codecvt_byname&lt;char32_t, char, std::mbstate_t&gt;}}&lt;br&gt;{{mark life|since=c++11|deprecated=c++20}}|conversion between UTF-32 and UTF-8}}
{{dsc|{{c/core|std::codecvt_byname&lt;char32_t, char8_t, std::mbstate_t&gt;}}&lt;br&gt;{{mark since c++20}}|conversion between UTF-32 and UTF-8}}
{{dsc|{{c/core|std::codecvt_byname&lt;wchar_t, char, std::mbstate_t&gt;}}|locale-specific conversion between wide string and narrow character sets}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/locale/byname/dsc constructor|codecvt_byname}}
{{dsc inc|cpp/locale/byname/dsc destructor|codecvt_byname}}
{{dsc end}}

{{include|cpp/locale/byname/constructor|codecvt_byname}}
{{include|cpp/locale/byname/destructor|codecvt_byname}}

{{cpp/locale/codecvt/inherit}}
{{cpp/locale/codecvt_base/inherit}}

===Example===
{{example
|This example demonstrates reading a GB18030-encoded file using the codecvt facet from a GB18030-aware locale.
|code=
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;string&gt;

int main()
{
    // GB18030 narrow multibyte encoding
    std::ofstream("text.txt") &lt;&lt; "\x7a"              // letter 'z', U+007a
                                 "\x81\x30\x89\x38"  // letter '√ü', U+00df
                                 "\xcb\xae"          // CJK ideogram 'Ê∞¥' (water), U+6c34
                                 "\x94\x32\xbc\x35"; // musical sign 'ùÑã' (segno), U+1d10b
    
    std::wifstream fin("text.txt");
    fin.imbue(std::locale(fin.getloc(),
              new std::codecvt_byname&lt;wchar_t, char, std::mbstate_t&gt;("zh_CN.gb18030")));
    
    for (wchar_t c; fin.get(c);)
        std::cout &lt;&lt; std::hex &lt;&lt; std::showbase &lt;&lt; static_cast&lt;unsigned&gt;(c) &lt;&lt; '\n';
}
|p=true
|output=
0x7a
0xdf
0x6c34
0x1d10b
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=21|std=C++98|before=the standard library did not need to provide&lt;br&gt;any {{tt|std::codecvt_byname}} specializations|after=two specializations are required}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc codecvt}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/locale/ctype_char/title|is}}
{{cpp/locale/ctype/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
bool is( mask m, char c ) const;
}}
{{dcl|num=2|1=
const char* is( const char* low, const char* high, mask* vec ) const;
}}
{{dcl end}}

@1@ Checks if the character {{c|c}} is classified by the mask {{c|m}} according to the classification table returned by the member function {{lc|table()}}. Effectively calculates {{c|table()[(unsigned char)c] &amp; m}}.
@2@ For every character in the character array {{range|low|high}}, reads its full classification mask from the classification table returned by the member function {{lc|table()}} (that is, evaluates {{c|table()[(unsigned char)*p]}} and stores it in the corresponding element of the array pointed to by {{c|vec}}.

If {{c|(unsigned char)c &gt;{{=}} std::ctype&lt;char&gt;::table_size}}, then an implementation-defined value is substituted instead of {{c|table()[(unsigned char)c]}}, possibly different for different values of {{c|c}}.

===Parameters===
{{par begin}}
{{par|c|character to classify}}
{{par|m|mask to use for classifying a single character}}
{{par|low|pointer to the first character in an array of characters to classify}}
{{par|high|one past the end pointer for the array of characters to classify}}
{{par|vec|pointer to the first element of the array of masks to fill}}
{{par end}}

===Return value===
@1@ {{c|true}} if {{c|c}} is classified by {{c|m}} in {{c|table()}}, {{c|false}} otherwise.
@2@ {{c|high}}

===Notes===
Unlike the primary template {{c|std::ctype}}, this specialization does not perform a virtual function call when classifying characters. To customize the behavior, a derived class may provide a non-default classification table to the base class constructor.

===Example===
{{example}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=28|std=C++98|before=overload (2) copied the values from {{c|vec}} into {{c|table()}},&lt;br&gt;which is the reverse of the intended behavior|after=corrected}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/ctype/dsc do_is}}
{{dsc end}}

{{langlinks|ja|zh}}
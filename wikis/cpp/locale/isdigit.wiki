{{cpp/title|isdigit{{small|(std::locale)}}}}
{{cpp/locale/navbar}}
{{ddcl|header=locale|
template&lt; class CharT &gt;
bool isdigit( CharT ch, const locale&amp; loc );
}}

Checks if the given character is classified as a digit by the given locale's {{lc|std::ctype}} facet.

===Parameters===
{{par begin}}
{{par|ch|character}}
{{par|loc|locale}}
{{par end}}

===Return value===
Returns {{c|true}} if the character is classified as a digit, {{c|false}} otherwise.

===Possible implementation===
{{eq fun
|1=
template&lt;class CharT&gt;
bool isdigit(CharT ch, const std::locale&amp; loc)
{
    return std::use_facet&lt;std::ctype&lt;CharT&gt;&gt;(loc).is(std::ctype_base::digit, ch);
}
}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;string&gt;
#include &lt;unordered_set&gt;

struct jdigit_ctype : std::ctype&lt;wchar_t&gt;
{
    std::unordered_set&lt;wchar_t&gt; jdigits{
        L'一', L'二', L'三', L'四', L'五', L'六', L'七', L'八', L'九', L'十'
    };

    bool do_is(mask m, char_type c) const override
    {
        return (m &amp; digit) &amp;&amp; jdigits.contains(c)
            ? true // Japanese digits will be classified as digits
            : ctype::do_is(m, c); // leave the rest to the parent class
    }
};

int main()
{
    std::wstring text = L"123一二三１２３";
    std::locale loc(std::locale(""), new jdigit_ctype);

    std::locale::global(std::locale("en_US.utf8"));
    std::wcout.imbue(std::locale());

    for (const wchar_t c : text)
        if (std::isdigit(c, loc))
            std::wcout &lt;&lt; c &lt;&lt; " is a digit\n";
        else
            std::wcout &lt;&lt; c &lt;&lt; " is NOT a digit\n";
}
|p=true
|output=
1 is a digit
2 is a digit
3 is a digit
一 is a digit
二 is a digit
三 is a digit
１ is NOT a digit
２ is NOT a digit
３ is NOT a digit
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc isdigit}}
{{dsc inc|cpp/string/wide/dsc iswdigit}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
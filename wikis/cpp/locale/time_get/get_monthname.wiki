{{cpp/locale/time_get/title|get_monthname|do_get_monthname}}
{{cpp/locale/time_get/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
iter_type get_monthname( iter_type beg, iter_type end, std::ios_base&amp; str,
                         std::ios_base::iostate&amp; err, std::tm* t ) const;
}}
{{dcl|num=2|1=
protected:
virtual iter_type do_get_monthname( iter_type beg, iter_type end, std::ios_base&amp; str,
                                    std::ios_base::iostate&amp; err, std::tm* t ) const;
}}
{{dcl end}}

@1@ Public member function, calls the protected virtual member function {{tt|do_get_monthname}} of the most derived class.
@2@ Reads successive characters from the sequence {{range|beg|end}} and parses out the month name (possibly abbreviated), using the default format for month names expected by this locale, which is the same format as {{c|"%b"}} as used by the functions {{lc|std::get_time}}, {{l2tt|cpp/locale/time_get/get}}, and the POSIX function {{tt|strptime()}}.

If it finds abbreviated name, followed by the characters that are valid for the full name, it continues reading until it consumes all the characters for the full name or finds a character that isn't expected, in which case parsing fails even if the first few characters were a valid abbreviation.

The parsed month is stored in the {{lc|std::tm}} field {{c|t-&gt;tm_mon}}.

If the end iterator is reached before a valid month name is read, the function sets {{lc|std::ios_base::eofbit}} in {{c|err}}. If a parsing error is encountered, the function sets {{lc|std::ios_base::failbit}} in {{c|err}}.

===Parameters===
{{par begin}}
{{par|beg|iterator designating the start of the sequence to parse}}
{{par|end|one past the end iterator for the sequence to parse}}
{{par|str|a stream object that this function uses to obtain locale facets when needed, e.g. {{lc|std::ctype}} to skip whitespace or {{lc|std::collate}} to compare strings}}
{{par|err|stream error flags object that is modified by this function to indicate errors}}
{{par|t|pointer to the {{lc|std::tm}} object that will hold the result of this function call}}
{{par end}}

===Return value===
Iterator pointing one past the last character in {{range|beg|end}} that was recognized as a part of a valid month name.

===Notes===
This function is usually case-insensitive.

If a parsing error is encountered, most implementations of this function leave {{c|*t}} unmodified.

===Example===
{{example
|code=
#include &lt;ctime&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;locale&gt;
#include &lt;sstream&gt;
#include &lt;string_view&gt;

void try_get_mon(std::string_view locale_name, std::string_view source)
{
    try
    {
        std::locale::global(std::locale(locale_name.data()));
    }
    catch (std::runtime_error const&amp; ex)
    {
        std::cout &lt;&lt; "Cannot setup locale: " &lt;&lt; locale_name &lt;&lt; "\n"
                     "Exception: " &lt;&lt; ex.what() &lt;&lt; '\n';
        return;
    }

    std::cout &lt;&lt; "Parsing the month out of '" &lt;&lt; source
              &lt;&lt; "' in the locale " &lt;&lt; std::locale().name() &lt;&lt; '\n';
    std::istringstream str{source.data()};
    std::ios_base::iostate err = std::ios_base::goodbit;

    std::tm t;
    std::time_get&lt;char&gt; const&amp; facet = std::use_facet&lt;std::time_get&lt;char&gt;&gt;(str.getloc());
    std::istreambuf_iterator&lt;char&gt; ret = facet.get_monthname({str}, {}, str, err, &amp;t);
    str.setstate(err);
    std::istreambuf_iterator&lt;char&gt; last{};

    if (str)
    {
        std::cout &lt;&lt; "Successfully parsed, month number is " &lt;&lt; t.tm_mon;

        if (ret != last)
        {
            std::cout &lt;&lt; ". Remaining content: ";
            std::copy(ret, last, std::ostreambuf_iterator&lt;char&gt;(std::cout));
        }
        else
            std::cout &lt;&lt; ". The input was fully consumed";
    }
    else
    {
        std::cout &lt;&lt; "Parse failed. Unparsed string: ";
        std::copy(ret, last, std::ostreambuf_iterator&lt;char&gt;(std::cout));
    }

    std::cout &lt;&lt; '\n';
}

int main()
{
    try_get_mon("ja_JP.utf8", "2月");
    try_get_mon("th_TH.utf8", "กุมภาพันธ์");
    try_get_mon("el_GR.utf8", "Φεβ");
    try_get_mon("el_GR.utf8", "Φεβρουάριος");
    try_get_mon("en_US.utf8", "Febrile");
}
|p=true
|output=
Parsing the month out of '2月' in the locale ja_JP.utf8
Successfully parsed, month number is 1. The input was fully consumed
Parsing the month out of 'กุมภาพันธ์' in the locale th_TH.utf8
Successfully parsed, month number is 1. The input was fully consumed
Parsing the month out of 'Φεβ' in the locale el_GR.utf8
Successfully parsed, month number is 1. The input was fully consumed
Parsing the month out of 'Φεβρουάριος' in the locale el_GR.utf8
Successfully parsed, month number is 1. The input was fully consumed
Parsing the month out of 'Febrile' in the locale en_US.utf8
Parse failed. Unparsed string: ile
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=248|std=C++98|before={{tt|eofbit}} was not set upon reaching the end iterator|after=sets {{tt|eofbit}} if a valid month name has not been read}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/manip/dsc get_time}}
{{dsc end}}

{{langlinks|ja|zh}}
{{cpp/locale/time_get/title|get_year|do_get_year}}
{{cpp/locale/time_get/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
iter_type get_year( iter_type s, iter_type end, std::ios_base&amp; str,
                    std::ios_base::iostate&amp; err, std::tm* t ) const;
}}
{{dcl|num=2|1=
protected:
virtual iter_type do_get_year( iter_type s, iter_type end, std::ios_base&amp; str,
                               std::ios_base::iostate&amp; err, std::tm* t ) const;
}}
{{dcl end}}

@1@ Public member function, calls the protected virtual member function {{tt|do_get_year}} of the most derived class.
@2@ Reads successive characters from the sequence {{range|beg|end}} and parses out the year using some implementation-defined format. Depending on the locale, two-digit years may be accepted, and it is implementation-defined which century they belong to.

The parsed year is stored in the {{lc|std::tm}} structure field {{c|t-&gt;tm_year}}.

If the end iterator is reached before a valid year is read, the function sets {{lc|std::ios_base::eofbit}} in {{c|err}}. If a parsing error is encountered, the function sets {{lc|std::ios_base::failbit}} in {{c|err}}.

===Parameters===
{{par begin}}
{{par|beg|iterator designating the start of the sequence to parse}}
{{par|end|one past the end iterator for the sequence to parse}}
{{par|str|a stream object that this function uses to obtain locale facets when needed, e.g. {{lc|std::ctype}} to skip whitespace or {{lc|std::collate}} to compare strings}}
{{par|err|stream error flags object that is modified by this function to indicate errors}}
{{par|t|pointer to the {{lc|std::tm}} object that will hold the result of this function call}}
{{par end}}

===Return value===
Iterator pointing one past the last character in {{range|beg|end}} that was recognized as a part of a valid year.

===Notes===
For two-digit input values, many implementations use the same parsing rules as the conversion specifier {{c|'%y'}} as used by {{lc|std::get_time}}, {{lc|std::time_get::get()}}, and the POSIX function {{tt|strptime()}}: two-digit integer is expected, the values in the range {{closed range|69|99}} results in values 1969 to 1999, range {{closed range|00|68}} results in 2000 to 2068. Four-digit inputs are typically accepted as-is.

If a parsing error is encountered, most implementations of this function leave {{c|*t}} unmodified.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;locale&gt;
#include &lt;sstream&gt;

void try_get_year(const std::string&amp; s)
{
    std::cout &lt;&lt; "Parsing the year out of '" &lt;&lt; s
              &lt;&lt; "' in the locale " &lt;&lt; std::locale().name() &lt;&lt; '\n';
    std::istringstream str(s);
    std::ios_base::iostate err = std::ios_base::goodbit;

    std::tm t;
    std::time_get&lt;char&gt; const&amp; facet = std::use_facet&lt;std::time_get&lt;char&gt;&gt;(str.getloc());
    std::istreambuf_iterator&lt;char&gt; ret = facet.get_year({str}, {}, str, err, &amp;t);
    str.setstate(err);
    std::istreambuf_iterator&lt;char&gt; last{};
    
    if (str)
    {
        std::cout &lt;&lt; "Successfully parsed, year is " &lt;&lt; 1900 + t.tm_year;
        
        if (ret != last)
        {
            std::cout &lt;&lt; " Remaining content: ";
            std::copy(ret, last, std::ostreambuf_iterator&lt;char&gt;(std::cout));
        }
        else
            std::cout &lt;&lt; " the input was fully consumed";
    }
    else
    {
        std::cout &lt;&lt; "Parse failed. Unparsed string: ";
        std::copy(ret, last, std::ostreambuf_iterator&lt;char&gt;(std::cout));
    }
    
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::locale::global(std::locale("en_US.utf8"));
    try_get_year("13");
    try_get_year("2013");
    
    std::locale::global(std::locale("ja_JP.utf8"));
    try_get_year("2013年");
}
|p=true
|output=&lt;!--produced using LLVM libc++--&gt;
Parsing the year out of '13' in the locale en_US.utf8
Successfully parsed, year is 2013 the input was fully consumed
Parsing the year out of '2013' in the locale en_US.utf8
Successfully parsed, year is 2013 the input was fully consumed
Parsing the year out of '2013年' in the locale ja_JP.utf8
Successfully parsed, year is 2013 Remaining content: 年
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=248|std=C++98|before={{tt|eofbit}} was not set upon reaching the end iterator|after=sets {{tt|eofbit}} if a valid year has not been read}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/manip/dsc get_time}}
{{dsc end}}

{{langlinks|ja|zh}}
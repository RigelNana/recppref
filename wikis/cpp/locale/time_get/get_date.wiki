{{cpp/locale/time_get/title|get_date|do_get_date}}
{{cpp/locale/time_get/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
iter_type get_date( iter_type beg, iter_type end, std::ios_base&amp; str,
                    std::ios_base::iostate&amp; err, std::tm* t ) const;
}}
{{dcl|num=2|1=
protected:
virtual iter_type do_get_date( iter_type beg, iter_type end, std::ios_base&amp; str,
                               std::ios_base::iostate&amp; err, std::tm* t ) const;
}}
{{dcl end}}

@1@ Public member function, calls the protected virtual member function {{tt|do_get_date}} of the most derived class.
@2@ Reads successive characters from the sequence {{range|beg|end}} and parses out the calendar date value using the default format expected by this locale, which is determined as
{|class="wikitable"
|-style="text-align:center;"
!{{lc|date_order()}}
!Format
|-
|{{tt|no_order}}
|{{c|"%m/%d/%y"}}
|-
|{{tt|dmy}}
|{{c|"%d/%m/%y"}}
|-
|{{tt|mdy}}
|{{c|"%m/%d/%y"}}
|-
|{{tt|ymd}}
|{{c|"%y/%m/%d"}}
|-
|{{tt|ydm}}
|{{c|"%y/%d/%m"}}
|}

@@ as used by the functions {{lc|std::get_time()}}, {{lc|get()}}, and the POSIX function {{tt|strptime()}}.

@@ The parsed date is stored in the corresponding fields of the {{lc|std::tm}} structure pointed to by the argument {{c|t}}.

@@ If the end iterator is reached before a valid date is read, the function sets {{lc|std::ios_base::eofbit}} in {{c|err}}. If a parsing error is encountered, the function sets {{lc|std::ios_base::failbit}} in {{c|err}}.

===Parameters===
{{par begin}}
{{par|beg|iterator designating the start of the sequence to parse}}
{{par|end|one past the end iterator for the sequence to parse}}
{{par|str|a stream object that this function uses to obtain locale facets when needed, e.g. {{lc|std::ctype}} to skip whitespace or {{lc|std::collate}} to compare strings}}
{{par|err| stream error flags object that is modified by this function to indicate errors}}
{{par|t|pointer to the {{lc|std::tm}} object that will hold the result of this function call}}
{{par end}}

===Return value===
Iterator pointing one past the last character in {{range|beg|end}} that was recognized as a part of a valid date.

===Notes===
For the alphabetic components of the default date format (if any), this function is usually case-insensitive.

If a parsing error is encountered, most implementations of this function leave {{c|*t}} unmodified.

The implementation may support other date formats besides the ones required by the standard.

===Example===
{{example
|code=
#include &lt;ctime&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;locale&gt;
#include &lt;sstream&gt;

void try_get_date(const std::string&amp; s)
{
    std::cout &lt;&lt; "Parsing the date out of '" &lt;&lt; s
              &lt;&lt; "' in the locale " &lt;&lt; std::locale().name() &lt;&lt; '\n';
    std::istringstream str(s);
    std::ios_base::iostate err = std::ios_base::goodbit;

    std::tm t;
    const std::time_get&lt;char&gt;&amp; facet = std::use_facet&lt;std::time_get&lt;char&gt;&gt;(str.getloc());
    std::istreambuf_iterator&lt;char&gt; ret = facet.get_date({str}, {}, str, err, &amp;t);
    str.setstate(err);
    
    if (str)
    {
        std::cout &lt;&lt; "Day: " &lt;&lt; t.tm_mday &lt;&lt; ' '
                  &lt;&lt; "Month: " &lt;&lt; t.tm_mon + 1 &lt;&lt; ' '
                  &lt;&lt; "Year: " &lt;&lt; t.tm_year + 1900 &lt;&lt; '\n';
    }
    else
    {
        std::cout &lt;&lt; "Parse failed. Unparsed string: ";
        std::copy(ret, {}, std::ostreambuf_iterator&lt;char&gt;(std::cout));
        std::cout &lt;&lt; '\n';
    }
}
int main()
{
    std::locale::global(std::locale("en_US.utf8"));
    try_get_date("02/01/2013");
    try_get_date("02-01-2013");
    
    std::locale::global(std::locale("ja_JP.utf8"));
    try_get_date("2013年02月01日");
}
|output=
Parsing the date out of '02/01/2013' in the locale en_US.utf8
Day: 1 Month: 2 Year: 2013
Parsing the date out of '02-01-2013' in the locale en_US.utf8
Parse failed. Unparsed string: -01-2013
Parsing the date out of '2013年02月01日' in the locale ja_JP.utf8
Day: 1 Month: 2 Year: 2013
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=248|std=C++98|before={{tt|eofbit}} was not set upon reaching the end iterator|after=sets {{tt|eofbit}} if a valid date has not been read}}
{{dr list item|wg=lwg|dr=461|std=C++98|before={{tt|do_get_date}} needed to parse localized date representation|after=parses with the format determined by {{lc|date_order()}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/manip/dsc get_time}}
{{dsc end}}

{{langlinks|ja|zh}}
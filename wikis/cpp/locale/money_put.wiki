{{cpp/title|money_put}}
{{cpp/locale/money_put/navbar}}
{{ddcl|header=locale|1=
template&lt; 
    class CharT,
    class OutputIt = std::ostreambuf_iterator&lt;CharT&gt;
&gt; class money_put;
}}

Class {{tt|std::money_put}} encapsulates the rules for formatting monetary values as strings. The standard I/O manipulator {{lc|std::put_money}} uses the {{tt|std::money_put}} facet of the I/O stream's locale.

{{inheritance diagram/std-money_put}}

If a {{tt|std::money_put}} specialization is not guaranteed to be provided by the standard library (see below), the behaviors of its {{lc|put()}} and {{lc|do_put()}} are not guaranteed as specified.

===Specializations===
The standard library is guaranteed to provide the following specializations (they are {{rlp|locale|required to be implemented by any locale object}}):
{{dsc begin}}
{{dsc header|locale}}
{{dsc|{{c/core|std::money_put&lt;char&gt;}}|creates narrow string representations of monetary values}}
{{dsc|{{c/core|std::money_put&lt;wchar_t&gt;}}|creates wide string representations of monetary values}}
{{dsc end}}

In addition, the standard library is also guaranteed to provide every specialization that satisfies the following type requirements:
* {{tt|CharT}} is one of
** {{c/core|char}},
** {{c/core|wchar_t}}, and
** any other implementation-defined [[cpp/string|character container type]] that meets the requirements for a character on which any of the [[cpp/io|iostream components]] can be instantiated; and
* {{tt|OutputIt}} must meet the requirements of {{named req|OutputIterator}}.

===Nested types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc|{{tt|string_type}}|{{c/core|std::basic_string&lt;CharT&gt;}}}}
{{dsc|{{tt|iter_type}}|{{tt|OutputIt}}}}
{{dsc end}}

{{cpp/locale/facet data members}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/locale/money_put/money_put|constructs a new {{tt|money_put}} facet}}
{{dsc mem fun|cpp/locale/money_put/put|invokes {{tt|do_put}}}}
{{dsc end}}

===Protected member functions===
{{dsc begin}}
{{dsc prot mem dtor|cpp/locale/money_put/~money_put|destructs a {{tt|money_put}} facet}}
{{dsc inc|cpp/locale/money_put/dsc do_put}}
{{dsc end}}

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;locale&gt;

int main()
{
    // using the I/O manipulator
    std::cout.imbue(std::locale("en_US.UTF-8"));
    std::cout &lt;&lt; "American locale: "
              &lt;&lt; std::showbase &lt;&lt; std::put_money(12345678.9) &lt;&lt; '\n';
    
    // using the facet directly
    std::cout.imbue(std::locale("de_DE.UTF-8"));
    std::cout &lt;&lt; "German locale: ";
    auto&amp; f = std::use_facet&lt;std::money_put&lt;char&gt;&gt;(std::cout.getloc());
    f.put({std::cout}, false, std::cout, std::cout.fill(), 12345678.9);
    std::cout &lt;&lt; '\n';
}
|output=
American locale: $123,456.79
German locale: 123.456,79 â‚¬
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=427|std=C++98|before={{tt|money_put}} was guaranteed to accept any {{tt|CharT}} that&lt;br&gt;meets the requirements for a character on which&lt;br&gt;any of the iostream components can be instantiated|after=only guarantees to accept {{c/core|char}},&lt;br&gt;{{c/core|wchar_t}} and other implementation-&lt;br&gt;defined character types}}
{{dr list item|wg=lwg|dr=2392|std=C++98|before=only character type {{tt|CharT}} could be&lt;br&gt;guaranteed to be accepted by {{tt|money_put}}|after=can guarantee to accept implementation-&lt;br&gt;defined character container types}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc moneypunct}}
{{dsc inc|cpp/locale/dsc money_get}}
{{dsc inc|cpp/io/manip/dsc put_money}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
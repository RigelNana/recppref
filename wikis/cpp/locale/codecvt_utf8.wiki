{{cpp/title|codecvt_utf8}}
{{cpp/locale/navbar}}
{{ddcl|header=codecvt|since=c++11|deprecated=c++17|removed=c++26|1=
template&lt;
    class Elem,
    unsigned long Maxcode = 0x10ffff,
    std::codecvt_mode Mode = (std::codecvt_mode)0 &gt;
class codecvt_utf8
    : public std::codecvt&lt;Elem, char, std::mbstate_t&gt;;
}}

{{tt|std::codecvt_utf8}} is a {{lc|std::codecvt}} facet which encapsulates conversion between a UTF-8 encoded byte string and UCS-2 or UTF-32 character string (depending on the type of {{tt|Elem}}). This {{lc|std::codecvt}} facet can be used to read and write UTF-8 files, both text and binary.

UCS-2 is an archaic encoding that is a subset of UTF-16, which encodes scalar values in the range U+0000-U+FFFF (Basic Multilingual Plane) only.

===Template Parameters===
{{par begin}}
{{par|Elem|either {{c/core|char16_t}}, {{c/core|char32_t}}, or {{c/core|wchar_t}}}}
{{par|Maxcode|the largest value of {{tt|Elem}} that this facet will read or write without error }}
{{par|Mode|a constant of type {{lc|std::codecvt_mode}}}}
{{par end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/locale/codecvt_utf8|inlinemem=true|constructs a new {{tt|codecvt_utf8}} facet}}
{{dsc mem dtor|cpp/locale/codecvt_utf8|inlinemem=true|destroys a {{tt|codecvt_utf8}} facet}}
{{dsc end}}

{{member|{{small|std::codecvt_utf8::}}codecvt_utf8|
{{dcl begin}}
{{dcl|1=
explicit codecvt_utf8( std::size_t refs = 0 );
}}
{{dcl end}}

Constructs a new {{tt|std::codecvt_utf8}} facet, passes the initial reference counter {{c|refs}} to the base class.

===Parameters===
{{par begin}}
{{par|refs|the number of references that link to the facet}}
{{par end}}
}}

{{member|{{small|std::codecvt_utf8::}}~codecvt_utf8|
{{dcl begin}}
{{dcl|1=
~codecvt_utf8();
}}
{{dcl end}}

Destroys the facet. Unlike the locale-managed facets, this facet's destructor is public.
}}

{{cpp/locale/codecvt/inherit}}
{{cpp/locale/codecvt_base/inherit}}

===Notes===
Although the standard requires that this facet works with UCS-2 when the size of {{tt|Elem}} is 16 bits, some implementations use UTF-16 instead. The term "UCS-2" was deprecated and removed from ISO 10646.

===Example===
{{example
|The following example demonstrates the difference between UCS-2/UTF-8 and UTF-16/UTF-8 conversions: the third character in the string is not a valid UCS-2 character.
|code=
#include &lt;codecvt&gt;
#include &lt;cstdint&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;string&gt;

int main()
{
    // UTF-8 data. The character U+1d10b, musical sign segno, does not fit in UCS-2
    std::string utf8 = "z\u6c34\U0001d10b";
    
    // the UTF-8 / UTF-16 standard conversion facet
    std::wstring_convert&lt;std::codecvt_utf8_utf16&lt;char16_t&gt;, char16_t&gt; utf16conv;
    std::u16string utf16 = utf16conv.from_bytes(utf8);
    std::cout &lt;&lt; "UTF-16 conversion produced " &lt;&lt; utf16.size() &lt;&lt; " code units:\n"
              &lt;&lt; std::showbase &lt;&lt; std::hex;
    for (char16_t c : utf16)
        std::cout &lt;&lt; static_cast&lt;std::uint16_t&gt;(c) &lt;&lt; ' ';
    
    // the UTF-8 / UCS-2 standard conversion facet
    std::wstring_convert&lt;std::codecvt_utf8&lt;char16_t&gt;, char16_t&gt; ucs2conv;
    try
    {
        std::u16string ucs2 = ucs2conv.from_bytes(utf8);
    }
    catch(const std::range_error&amp; e)
    {
        std::u16string ucs2 = ucs2conv.from_bytes(utf8.substr(0, ucs2conv.converted()));
        std::cout &lt;&lt; "\nUCS-2 failed after producing " &lt;&lt; std::dec &lt;&lt; ucs2.size()
                  &lt;&lt; " characters:\n" &lt;&lt; std::showbase &lt;&lt; std::hex;
        for (char16_t c : ucs2)
            std::cout &lt;&lt; static_cast&lt;std::uint16_t&gt;(c) &lt;&lt; ' ';
        std::cout &lt;&lt; '\n';
    }
}
|output=
UTF-16 conversion produced 4 code units:
0x7a 0x6c34 0xd834 0xdd0b
UCS-2 failed after producing 2 characters:
0x7a 0x6c34
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2229|std=C++98|before=the constructor and destructor were not specified|after=specifies them}}
{{dr list end}}

===See also===
{{cpp/locale/unicode string conversions}}
{{dsc begin}}
{{dsc inc|cpp/locale/dsc codecvt}}
{{dsc inc|cpp/locale/dsc codecvt_mode}}
{{dsc inc|cpp/locale/dsc codecvt_utf16}}
{{dsc inc|cpp/locale/dsc codecvt_utf8_utf16}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
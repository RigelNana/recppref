{{cpp/locale/wstring_convert/title|wstring_convert}}
{{cpp/locale/wstring_convert/navbar}}
{{dcl begin}}
{{dcl|num=1|
wstring_convert() : wstring_convert( new Codecvt ) {}
}}
{{dcl|num=2|
explicit wstring_convert( Codecvt* pcvt );
}}
{{dcla|num=3|
wstring_convert( Codecvt* pcvt, state_type state );
}}
{{dcla|num=4|1=
explicit wstring_convert( const byte_string&amp; byte_err,
                          const wide_string&amp; wide_err = wide_string() );
}}
{{dcl|num=5|since=c++14|1=
wstring_convert( const std::wstring_convert&amp; ) = delete;
}}
{{dcl end}}

{|class="wikitable" style="text-align: center;"
!rowspan=2|{{nbsp}}Overload{{nbsp}}
!colspan=5|{{rlps|/#Data members}}
|-
!style="font-weight: normal;"|{{nbsp}}{{tti|byte_err_string}}{{nbsp}}
!style="font-weight: normal;"|{{nbsp}}{{tti|wide_err_string}}{{nbsp}}
!style="font-weight: normal;"|{{tti|cvtptr}}
!style="font-weight: normal;"|{{tti|cvtstate}}
!style="font-weight: normal;"|{{tti|cvtcount}}
|-
|{{v|1}}
|rowspan=3 colspan=2|[[cpp/language/default initialization|default-initialized]]
|{{nbsp}}{{c|new Codecvt}}{{nbsp}}
|rowspan=2|{{nbsp}}default-initialized{{nbsp}}
|rowspan=4|{{nbsp}}uninitialized{{nbsp}}
|-
|{{v|2}}
|rowspan=2|{{c|pcvt}}
|-
|{{v|3}}
|{{c|state}}
|-
|{{v|4}}
|{{c|byte_err}}
|{{c|wide_err}}
|{{c|new Codecvt}}
|{{c|state_type()}}
|}

@2,3@ If {{c|pcvt}} is a null pointer, the behavior is undefined.

@5@ The copy constructor is deleted, {{tt|wstring_convert}} is not {{named req|CopyConstructible}}.

===Parameters===
{{par begin}}
{{par|pcvt|pointer to the conversion facet}}
{{par|state|initial value of the conversion shift state}}
{{par|byte_err|narrow string to display on errors}}
{{par|wide_err|wide string to display on errors}}
{{par end}}

===Example===
{{example
|code=
#include &lt;codecvt&gt;
#include &lt;locale&gt;
#include &lt;utility&gt;

// utility wrapper to adapt locale-bound facets for wstring/wbuffer convert
template&lt;class Facet&gt;
struct deletable_facet : Facet
{
    using Facet::Facet; // inherit constructors
    ~deletable_facet() {}
};

int main()
{
    // UTF-16le / UCS4 conversion
    std::wstring_convert
        &lt;std::codecvt_utf16&lt;char32_t, 0x10ffff, std::little_endian&gt;&gt; u16to32;
    
    // UTF-8 / wide string conversion with custom messages
    std::wstring_convert&lt;std::codecvt_utf8&lt;wchar_t&gt;&gt; u8towide("Error!", L"Error!");
    
    // GB18030 / wide string conversion facet
    using F = deletable_facet&lt;std::codecvt_byname&lt;wchar_t, char, std::mbstate_t&gt;&gt;;
    std::wstring_convert&lt;F&gt; gbtowide(new F("zh_CN.gb18030"));
}
|output=
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2175|std=C++11|before={{c|pcvt}} could be a null pointer|after=the behavior is undefined in this case}}
{{dr list item|wg=lwg|dr=2176|std=C++11|before=constructors accepting single argument were implicit|after=made explicit}}
{{dr list item|paper=P0935R0|std=C++11|before=the default constructor was explicit|after=made implicit}}
{{dr list end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
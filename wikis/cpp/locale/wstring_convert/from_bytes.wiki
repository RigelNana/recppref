{{cpp/locale/wstring_convert/title|from_bytes}}
{{cpp/locale/wstring_convert/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|
wide_string from_bytes( char byte );
}}
{{dcl|num=2|
wide_string from_bytes( const char* ptr );
}}
{{dcl|num=3|
wide_string from_bytes( const byte_string&amp; str );
}}
{{dcl|num=4|
wide_string from_bytes( const char* first, const char* last );
}}
{{dcl end}}

Converts a byte sequence to a wide string using the facet pointed to by {{rlpsi|/#cvtptr}}{{sep}}.

@1@ The byte sequence only consists of one element {{c|byte}}.

@2@ The byte sequence is the null-terminated sequence beginning at {{c|ptr}}.

@3@ The byte sequence is the sequence contained in {{c|str}}.

@4@ The byte sequence is the range {{range|first|last}}.

Before the conversion begins, if {{c|*this}} was '''not''' constructed with constructor overload {{rlp|wstring_convert#Version 3|(3)}}, {{rlpsi|/#cvtstate}} will be set to its default value (the initial conversion state).

The number of input elements successfully converted will be stored in {{rlpsi|/#cvtcount}}{{sep}}.

===Return value===
If the conversion succeeds, returns the conversion result. Otherwise, if {{c|*this}} is constructed with constructor overload {{rlp|wstring_convert#Version 4|(4)}}, returns {{box|{{rlpsi|/#wide_err_string}}}}.

===Exceptions===
If the conversion fails and {{c|*this}} was '''not''' constructed with constructor overload {{rlp|wstring_convert#Version 4|(4)}}, throws {{lc|std::range_error}}.

===Example===
{{example
|code=
#include &lt;codecvt&gt;
#include &lt;cstdint&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;string&gt;

int main()
{
    std::string utf8 = "z\u00df\u6c34\U0001d10b"; // or u8"z√üÊ∞¥ùÑã"
                 // or "\x7a\xc3\x9f\xe6\xb0\xb4\xf0\x9d\x84\x8b";
    
    // the UTF-8 / UTF-16 standard conversion facet
    std::u16string utf16 = 
        std::wstring_convert&lt;std::codecvt_utf8_utf16&lt;char16_t&gt;,
                             char16_t&gt;{}.from_bytes(utf8.data());
    std::cout &lt;&lt; "UTF-16 conversion produced " &lt;&lt; utf16.size()
              &lt;&lt; " code units: " &lt;&lt; std::showbase;
    for (char16_t c : utf16)
        std::cout &lt;&lt; std::hex &lt;&lt; static_cast&lt;std::uint16_t&gt;(c) &lt;&lt; ' ';
    
    // the UTF-8 / UTF-32 standard conversion facet
    std::u32string utf32 =
        std::wstring_convert&lt;std::codecvt_utf8&lt;char32_t&gt;, char32_t&gt;{}.from_bytes(utf8);
    std::cout &lt;&lt; "\nUTF-32 conversion produced " &lt;&lt; std::dec
              &lt;&lt; utf32.size() &lt;&lt; " code units: ";
    for (char32_t c : utf32)
        std::cout &lt;&lt; std::hex &lt;&lt; static_cast&lt;std::uint32_t&gt;(c) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
UTF-16 conversion produced 5 code units: 0x7a 0xdf 0x6c34 0xd834 0xdd0b
UTF-32 conversion produced 4 code units: 0x7a 0xdf 0x6c34 0x1d10b
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/wstring_convert/dsc to_bytes}}
{{dsc inc|cpp/string/multibyte/dsc mbsrtowcs}}
{{dsc inc|cpp/locale/codecvt/dsc do_in}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
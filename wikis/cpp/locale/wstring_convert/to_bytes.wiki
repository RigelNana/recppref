{{cpp/locale/wstring_convert/title|to_bytes}}
{{cpp/locale/wstring_convert/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|
byte_string to_bytes( Elem wchar );
}}
{{dcl|num=2|
byte_string to_bytes( const Elem* wptr );
}}
{{dcl|num=3|
byte_string to_bytes( const wide_string&amp; wstr );
}}
{{dcl|num=4|
byte_string to_bytes( const Elem* first, const Elem* last );
}}
{{dcl end}}

Converts a wide sequence to a byte string using the facet pointed to by {{rlpsi|/#cvtptr}}{{sep}}.

@1@ The wide sequence only consists of one element {{c|byte}}.

@2@ The wide sequence is the null-terminated sequence beginning at {{c|ptr}}.

@3@ The wide sequence is the sequence contained in {{c|str}}.

@4@ The wide sequence is the range {{range|first|last}}.

Before the conversion begins, if {{c|*this}} was '''not''' constructed with constructor overload {{rlp|wstring_convert|(3)}}, {{rlpsi|/#cvtstate}} will be set to its default value (the initial conversion state).

The number of input elements successfully converted will be stored in {{rlpsi|/#cvtcount}}{{sep}}.

===Return value===
If the conversion succeeds, returns the conversion result. Otherwise, if {{c|*this}} is constructed with constructor overload {{rlp|wstring_convert|(4)}}, returns {{box|{{rlpsi|/#byte_err_string}}}}.

===Exceptions===
If the conversion fails and {{c|*this}} was '''not''' constructed with constructor overload {{rlp|wstring_convert|(4)}}, throws {{lc|std::range_error}}.

===Example===
{{example
|code=
#include &lt;codecvt&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;string&gt;

// utility function for output
void hex_print(const std::string&amp; s)
{
    std::cout &lt;&lt; std::hex &lt;&lt; std::setfill('0');
    for (unsigned char c : s)
        std::cout &lt;&lt; std::setw(2) &lt;&lt; static_cast&lt;int&gt;(c) &lt;&lt; ' ';
    std::cout &lt;&lt; std::dec &lt;&lt; '\n';
}

int main()
{
    // wide character data
    std::wstring wstr = L"z\u00df\u6c34\U0001f34c"; // or L"z√üÊ∞¥üçå"
    
    // wide to UTF-8
    std::wstring_convert&lt;std::codecvt_utf8&lt;wchar_t&gt;&gt; conv1;
    std::string u8str = conv1.to_bytes(wstr);
    std::cout &lt;&lt; "UTF-8 conversion produced " &lt;&lt; u8str.size() &lt;&lt; " bytes:\n";
    hex_print(u8str);
    
    // wide to UTF-16le
    std::wstring_convert&lt;std::codecvt_utf16&lt;wchar_t, 0x10ffff, std::little_endian&gt;&gt; conv2;
    std::string u16str = conv2.to_bytes(wstr);
    std::cout &lt;&lt; "UTF-16le conversion produced " &lt;&lt; u16str.size() &lt;&lt; " bytes:\n";
    hex_print(u16str);
}
|output=
UTF-8 conversion produced 10 bytes:
7a c3 9f e6 b0 b4 f0 9f 8d 8c 
UTF-16le conversion produced 10 bytes:
7a 00 df 00 34 6c 3c d8 4c df
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/wstring_convert/dsc from_bytes}}
{{dsc inc|cpp/string/multibyte/dsc wcsrtombs}}
{{dsc inc|cpp/locale/codecvt/dsc do_out}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
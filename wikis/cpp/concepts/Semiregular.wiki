{{cpp/title|semiregular}}
{{cpp/concepts/navbar}}
{{ddcl|header=concepts|since=c++20|1=
template&lt; class T &gt;
concept semiregular = std::copyable&lt;T&gt; &amp;&amp; std::default_initializable&lt;T&gt;;
}}

The {{tt|semiregular}} concept specifies that a type is both copyable and default constructible. It is satisfied by types that behave similarly to built-in types like {{c/core|int}}, except that they need not support comparison with {{tt|1===}}.

===Example===
{{example
|code=
#include &lt;concepts&gt;
#include &lt;iostream&gt;

template&lt;std::semiregular T&gt;
// Credit Alexander Stepanov
// concepts are requirements on T
// Requirement on T: T is semiregular
// T a(b); or T a = b; =&gt; copy constructor
// T a; =&gt; default constructor
// a = b; =&gt; assignment
struct Single
{
    T value;
    // Aggregation initialization for Single behaves like following constructor:
    // explicit Single(const T&amp; x) : value(x) {}

    // Implicitly declared special member functions behave like following definitions,
    // except that they may have additional properties:
    // Single(const Single&amp; x) : value(x.value) {}
    // Single() {}
    // ~Single() {}
    // Single&amp; operator=(const Single&amp; x) { value = x.value; return *this; }
    // comparison operator is not defined; it is not required by `semiregular` concept
    // bool operator==(Single const&amp; other) const = delete;
};

void print(std::semiregular auto x)
{
    std::cout &lt;&lt; x.value &lt;&lt; '\n';
}

int main()
{
    Single&lt;int&gt; myInt1{4};      // aggregate initialization: myInt1.value = 4
    Single&lt;int&gt; myInt2(myInt1); // copy constructor
    Single&lt;int&gt; myInt3;         // default constructor
    myInt3 = myInt2;            // copy assignment operator
//  myInt1 == myInt2;           // Error: operator== is not defined

    print(myInt1); // ok: Single&lt;int&gt; is a `semiregular` type
    print(myInt2);
    print(myInt3);

}   // Single&lt;int&gt; variables are destroyed here
|output=
4
4
4
}}

===References===
{{ref std c++23}}
{{ref std|section=18.6|title=Object concepts|id=concepts.object}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=18.6|title=Object concepts|id=concepts.object}}
{{ref std end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/concepts/dsc regular}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
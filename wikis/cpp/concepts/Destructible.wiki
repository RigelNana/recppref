{{cpp/title|destructible}}
{{cpp/concepts/navbar}}
{{ddcl|header=concepts|since=c++20|1=
template&lt; class T &gt;
concept destructible = std::is_nothrow_destructible_v&lt;T&gt;; 
}}

The concept {{tt|destructible}} specifies the concept of all types whose instances can safely be destroyed at the end of their lifetime (including reference types).

===Notes===
Unlike the {{named req|Destructible}} named requirement, {{tt|std::destructible}} requires the destructor to be {{c|noexcept(true)}}, not merely non-throwing when invoked, and allows reference types and array types.

===References===
{{ref std c++23}}
{{ref std|section=18.4.10|title=Concept {{tt|destructible}}|id=concept.destructible}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=18.4.10|title=Concept {{tt|destructible}}|id=concept.destructible}}
{{ref std end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_destructible}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
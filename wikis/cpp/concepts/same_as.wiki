{{cpp/title|same_as}}
{{cpp/concepts/navbar}}
{{ddcl|header=concepts|since=c++20|1=
template&lt; class T, class U &gt;
concept same_as = /* see below */;
}}

The concept {{tt|same_as&lt;T, U&gt;}} is satisfied if and only if {{tt|T}} and {{tt|U}} denote the same type.

{{c|std::same_as&lt;T, U&gt;}} [[cpp/language/constraints#Partial ordering of constraints|subsumes]] {{c|std::same_as&lt;U, T&gt;}} and vice versa.

===Possible implementation===
{{eq fun|1=
namespace detail
{
    template&lt; class T, class U &gt;
    concept SameHelper = std::is_same_v&lt;T, U&gt;;
}

template&lt; class T, class U &gt;
concept same_as = detail::SameHelper&lt;T, U&gt; &amp;&amp; detail::SameHelper&lt;U, T&gt;;
}}

===Example===
{{example
|code=
#include &lt;concepts&gt;
#include &lt;iostream&gt;

template&lt;typename T, typename ... U&gt;
concept IsAnyOf = (std::same_as&lt;T, U&gt; {{!!}} ...);

template&lt;typename T&gt;
concept IsPrintable = std::integral&lt;T&gt; {{!!}} std::floating_point&lt;T&gt; {{!!}}
    IsAnyOf&lt;std::remove_cvref_t&lt;std::remove_pointer_t&lt;std::decay_t&lt;T&gt;&gt;&gt;, char, wchar_t&gt;;

void println(IsPrintable auto const ... arguments)
{
    (std::wcout &lt;&lt; ... &lt;&lt; arguments) &lt;&lt; '\n';
}

int main()
{
    println("Example: ", 3.14, " : ", 42, " : [", 'a', L'-', L"Z]");
}
|output=
Example: 3.14 : 42 : [a-Z]
}}

===References===
{{ref std c++23}}
{{ref std|section=18.4.2|title=Concept {{tt|same_as}}|id=concept.same}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=18.4.2|title=Concept {{tt|same_as}}|id=concept.same}}
{{ref std end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_same}}
{{dsc end}}

{{langlinks|es|ja|zh|ru}}
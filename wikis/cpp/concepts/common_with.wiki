{{cpp/title|common_with}}
{{cpp/concepts/navbar}}
{{ddcl|header=concepts|since=c++20|1=
template&lt; class T, class U &gt;
concept common_with =
    std::same_as&lt;std::common_type_t&lt;T, U&gt;, std::common_type_t&lt;U, T&gt;&gt; &amp;&amp;
    requires {
        static_cast&lt;std::common_type_t&lt;T, U&gt;&gt;(std::declval&lt;T&gt;());
        static_cast&lt;std::common_type_t&lt;T, U&gt;&gt;(std::declval&lt;U&gt;());
    } &amp;&amp;
    std::common_reference_with&lt;
        std::add_lvalue_reference_t&lt;const T&gt;,
        std::add_lvalue_reference_t&lt;const U&gt;&gt; &amp;&amp;
    std::common_reference_with&lt;
        std::add_lvalue_reference_t&lt;std::common_type_t&lt;T, U&gt;&gt;,
        std::common_reference_t&lt;
            std::add_lvalue_reference_t&lt;const T&gt;,
            std::add_lvalue_reference_t&lt;const U&gt;&gt;&gt;;
}}
The concept {{tt|common_with&lt;T, U&gt;}} specifies that two types {{tt|T}} and {{tt|U}} share a ''common type'' (as computed by {{lc|std::common_type_t}}) to which both can be converted.

===Semantic requirements===
T and U model {{co|std::common_with&lt;T, U&gt;}} only if, given [[cpp/concepts#Equality preservation|equality-preserving]] expressions {{tt|t1}}, {{tt|t2}}, {{tt|u1}} and {{tt|u2}} such that {{c|decltype((t1))}} and {{c|decltype((t2))}} are both {{tt|T}} and {{c|decltype((u1))}} and {{c|decltype((u2))}} are both {{tt|U}},
* {{c|std::common_type_t&lt;T, U&gt;(t1)}} equals {{c|std::common_type_t&lt;T, U&gt;(t2)}} if and only if {{tt|t1}} equals {{tt|t2}}; and
* {{c|std::common_type_t&lt;T, U&gt;(u1)}} equals {{c|std::common_type_t&lt;T, U&gt;(u2)}} if and only if {{tt|u1}} equals {{tt|u2}}.

In other words, the conversion to the common type must [[cpp/concepts#Equality preservation|preserve equality]].

{{cpp/concepts/equality preservation|skip-requires=yes}}

===References===
{{ref std c++23}}
{{ref std|section=18.4.6|title=Concept {{tt|common_with}}|id=concept.common}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=18.4.6|title=Concept {{tt|common_with}}|id=concept.common}}
{{ref std end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc common_type}}
{{dsc inc|cpp/types/dsc common_reference}}
{{dsc inc|cpp/concepts/dsc common_reference_with}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
{{cpp/title|predicate}}
{{cpp/concepts/navbar}}
{{ddcl|header=concepts|since=c++20|1=
template&lt; class F, class... Args &gt;
concept predicate =
    std::regular_invocable&lt;F, Args...&gt; &amp;&amp;
    boolean-testable&lt;std::invoke_result_t&lt;F, Args...&gt;&gt;;
}}

The concept {{co|std::predicate&lt;F, Args...&gt;}} specifies that {{tt|F}} is a predicate that accepts arguments whose types and value categories are encoded by {{tt|Args...}}, i.e., it can be invoked with these arguments to produce a {{lconcept|boolean-testable}} result.

Note that {{lconcept|regular_invocable}} requires the invocation to not modify either the callable object or the arguments and be [[cpp/concepts#Equality preservation|equality-preserving]].

{{cpp/concepts/equality preservation|skip-requires=yes}}

===References===
{{ref std c++23}}
{{ref std|section=18.7.4|title=Concept {{tt|predicate}}|id=concept.predicate}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=18.7.4|title=Concept {{tt|predicate}}|id=concept.predicate}}
{{ref std end}}

{{langlinks|es|ja|ru|zh}}
{{title|''boolean-testable''}}
{{cpp/concepts/navbar}}
{{dcl begin}}
{{dcla|anchor=no|num=1|since=c++20|expos=yes|1=
template&lt; class B &gt;
concept __boolean_testable_impl = std::convertible_to&lt;B, bool&gt;;
}}
{{dcla|anchor=no|num=2|since=c++20|expos=yes|1=
template&lt; class B &gt;
concept boolean-testable =
    __boolean_testable_impl&lt;B&gt; &amp;&amp;
    requires (B&amp;&amp; b) {
        { !std::forward&lt;B&gt;(b) } -&gt; __boolean_testable_impl;
    };
}}
{{dcl end}}

The exposition-only concept {{tti|boolean-testable}} specifies the requirements for expressions that are convertible to {{c/core|bool}} and for which the logical operators have the usual behavior (including {{enwiki|Short-circuit evaluation|short-circuiting}}), even for two different {{tti|boolean-testable}} types.

Formally, to model the exposition-only concept {{tti|__boolean_testable_impl}}, the type must not define any member {{c/core|operator&amp;&amp;}} and {{c/core|operator{{!!}}}}, and no viable non-member {{c/core|operator&amp;&amp;}} and {{c/core|operator{{!!}}}} may be visible by [[cpp/language/adl|argument-dependent lookup]]. Additionally, given an expression {{tt|e}} such that {{c|decltype((e))}} is {{tt|B}}, {{tti|boolean-testable}} is modeled only if {{c|1=bool(e) == !bool(!e)}}.

{{cpp/concepts/equality preservation}}

===Notes===
Examples of {{tti|boolean-testable}} types include {{c/core|bool}}, {{lc|std::true_type}}, {{c/core|std::bitset&lt;N&gt;::}}{{ltt|cpp/utility/bitset/reference}}, and {{c/core|int*}}.

===References===
{{ref std c++23}}
{{ref std|section=18.5.2|title=Boolean testability|id=concept.booleantestable}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=18.5.2|title=Boolean testability|id=concept.booleantestable}}
{{ref std end}}

{{langlinks|es|ja|zh}}
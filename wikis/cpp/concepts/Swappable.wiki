{{cpp/title|swappable|swappable_with}}
{{cpp/concepts/navbar}}
{{dcl begin}}
{{dcl header|concepts}}
{{dcl|num=1|since=c++20|1=
template&lt; class T &gt;
concept swappable =
    requires(T&amp; a, T&amp; b) {
        ranges::swap(a, b);
    };
}}
{{dcl|num=2|since=c++20|1=
template&lt; class T, class U &gt;
concept swappable_with =
    std::common_reference_with&lt;T, U&gt; &amp;&amp;
    requires(T&amp;&amp; t, U&amp;&amp; u) {
        ranges::swap(std::forward&lt;T&gt;(t), std::forward&lt;T&gt;(t));
        ranges::swap(std::forward&lt;U&gt;(u), std::forward&lt;U&gt;(u));
        ranges::swap(std::forward&lt;T&gt;(t), std::forward&lt;U&gt;(u));
        ranges::swap(std::forward&lt;U&gt;(u), std::forward&lt;T&gt;(t));
    };
}}
{{dcl end}}
The concept {{tt|swappable&lt;T&gt;}} specifies that lvalues of type {{tt|T}} are swappable.

The concept {{tt|swappable_with&lt;T, U&gt;}} specifies that expressions of the type and value category encoded by {{tt|T}} and {{tt|U}} are swappable with each other. {{tt|swappable_with&lt;T, U&gt;}} is satisfied only if a call to {{c|ranges::swap(t, u)}} exchanges the value of {{tt|t}} and {{tt|u}}, that is, given distinct objects {{tt|t2}} equal to {{tt|t}} and {{tt|u2}} equal to {{tt|u}}, after evaluating either {{c|ranges::swap(t, u)}} or {{c|ranges::swap(u, t)}}, {{tt|t2}} is equal to {{tt|u}} and {{tt|u2}} is equal to {{tt|t}}.

{{cpp/concepts/equality preservation}}

===References===
{{ref std c++23}}
{{ref std|section=18.4.9|title=Concept {{tt|swappable}}|id=concept.swappable}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=18.4.9|title=Concept {{tt|swappable}}|id=concept.swappable}}
{{ref std end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/title|move_constructible}}
{{cpp/concepts/navbar}}
{{ddcl|header=concepts|since=c++20|1=
template&lt; class T &gt;
concept move_constructible = std::constructible_from&lt;T, T&gt; &amp;&amp; std::convertible_to&lt;T, T&gt;;
}}

The concept {{tt|move_constructible}} is satisfied if {{tt|T}} is a reference type, or if it is an object type where an object of that type can be constructed from an rvalue of that type in both direct- and copy-initialization contexts, with the usual semantics.

===Semantic requirements===
If {{tt|T}} is an object type, then {{tt|move_constructible&lt;T&gt;}} is modeled only if given
* {{tt|rv}}, an rvalue of type {{tt|T}}, and
* {{tt|u2}}, a distinct object of type {{tt|T}} equal to {{tt|rv}},
the following are true:
* After the definition {{c|T u {{=}} rv;}}, {{tt|u}} is equal to {{tt|u2}};
* {{tt|T(rv)}} is equal to {{tt|u2}}; and
* If {{tt|T}} is not const-qualified, then {{tt|rv}}'s resulting state (after the definition/expression is evaluated in either bullets above) is valid but unspecified; otherwise, it is unchanged.

===References===
{{ref std c++23}}
{{ref std|section=18.4.13|title=Concept {{tt|move_constructible}}|id=concept.moveconstructible}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=18.4.13|title=Concept {{tt|move_constructible}}|id=concept.moveconstructible}}
{{ref std end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_move_constructible}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
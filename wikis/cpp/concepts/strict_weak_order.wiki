{{cpp/title|strict_weak_order}}
{{cpp/concepts/navbar}}
{{dcl begin}}
{{dcl header|concepts}}
{{dcl|since=c++20|1=
template&lt; class R, class T, class U &gt;
concept strict_weak_order = std::relation&lt;R, T, U&gt;;
}}
{{dcl end}}

The concept {{tt|strict_weak_order&lt;R, T, U&gt;}} specifies that the {{lconcept|relation}} {{tt|R}} imposes a strict weak ordering on its arguments.

===Semantic requirements===
A relation {{c|r}} is a strict weak ordering if
* it is irreflexive: for all {{c|x}}, {{c|r(x, x)}} is {{c|false}};
* it is transitive: for all {{c|a}}, {{c|b}} and {{c|c}}, if {{c|r(a, b)}} and {{c|r(b, c)}} are both {{c|true}} then {{c|r(a, c)}} is {{c|true}};
* let {{c|e(a, b)}} be {{c|!r(a, b) &amp;&amp; !r(b, a)}}, then {{c|e}} is transitive: {{c|e(a, b) &amp;&amp; e(b, c)}} implies {{c|e(a, c)}}.

Under these conditions, it can be shown that {{c|e}} is an equivalence relation, and {{c|r}} induces a strict total ordering on the equivalence classes determined by {{c|e}}.

===Notes===
The distinction between {{lconcept|relation}} and {{tt|strict_weak_order}} is purely semantic.

===References===
{{ref std c++23}}
{{ref std|section=18.7.7|title=Concept {{tt|strict_weak_order}}|id=concept.strictweakorder}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=18.7.7|title=Concept {{tt|strict_weak_order}}|id=concept.strictweakorder}}
{{ref std end}}

===See also===
* {{named req|LessThanComparable}}

{{langlinks|es|ja|ru|zh}}
{{cpp/title|regular}}
{{cpp/concepts/navbar}}
{{ddcl|header=concepts|since=c++20|1=
template&lt; class T &gt;
concept regular = std::semiregular&lt;T&gt; &amp;&amp; std::equality_comparable&lt;T&gt;;
}}

The {{tt|regular}} concept specifies that a type is ''regular'', that is, it is copyable, default constructible, and equality comparable. It is satisfied by types that behave similarly to built-in types like {{c/core|int}}, and that are comparable with {{tt|1===}}.

===Example===
{{example
|code=
#include &lt;concepts&gt;
#include &lt;iostream&gt;

template&lt;std::regular T&gt;
struct Single
{
    T value;
    friend bool operator==(const Single&amp;, const Single&amp;) = default;
};

int main()
{
    Single&lt;int&gt; myInt1{4};
    Single&lt;int&gt; myInt2;
    myInt2 = myInt1;

    if (myInt1 == myInt2)
        std::cout &lt;&lt; "Equal\n";

    std::cout &lt;&lt; myInt1.value &lt;&lt; ' ' &lt;&lt; myInt2.value &lt;&lt; '\n';
}
|output=
Equal
4 4
}}

===References===
{{ref std c++23}}
{{ref std|section=18.6|title=Object concepts|id=concepts.object}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=18.6|title=Object concepts|id=concepts.object}}
{{ref std end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/concepts/dsc semiregular}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
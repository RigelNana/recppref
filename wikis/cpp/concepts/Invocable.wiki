{{cpp/title|invocable|regular_invocable}}
{{cpp/concepts/navbar}}
{{dcl begin}}
{{dcl header|concepts}}
{{dcl|since=c++20|1=
template&lt; class F, class... Args &gt;
concept invocable =
    requires(F&amp;&amp; f, Args&amp;&amp;... args) {
        std::invoke(std::forward&lt;F&gt;(f), std::forward&lt;Args&gt;(args)...); 
            /* not required to be equality-preserving */
    };
}}
{{dcl|since=c++20|1=
template&lt; class F, class... Args &gt;
concept regular_invocable = std::invocable&lt;F, Args...&gt;;
}}
{{dcl end}}

The {{tt|invocable}} concept specifies that a callable type {{tt|F}} can be called with a set of arguments {{tt|Args...}} using the function template {{lc|std::invoke}}.

The {{tt|regular_invocable}} concept adds to the {{tt|invocable}} concept by requiring the {{tt|invoke}} expression to be [[cpp/concepts#Equality preservation|equality-preserving]] and not modify either the function object or the arguments.

{{cpp/concepts/equality preservation}}

===Notes===
The distinction between {{tt|invocable}} and {{tt|regular_invocable}} is purely semantic.

A random number generator may satisfy {{tt|invocable}} but cannot satisfy {{tt|regular_invocable}} ([[#External links|comical ones]] excluded). 

===References===
{{ref std c++23}}
{{ref std|section=18.7.2|title=Concept {{tt|invocable}}|id=concept.invocable}}
{{ref std|section=18.7.3|title=Concept {{tt|regular_invocable}}|id=concept.regularinvocable}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=18.7.2|title=Concept {{tt|invocable}}|id=concept.invocable}}
{{ref std|section=18.7.3|title=Concept {{tt|regular_invocable}}|id=concept.regularinvocable}}
{{ref std end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_invocable}}
{{dsc end}}

===External links===
{{eli|A [https://xkcd.com/221/ joke example] of a random number generator that satisfies both {{tt|invocable}} and {{tt|regular_invocable}}.}}

{{langlinks|de|es|ja|ru|zh}}
{{cpp/title|default_initializable}}
{{cpp/concepts/navbar}}
{{ddcl|header=concepts|since=c++20|1=
template&lt; class T &gt;
concept default_initializable = std::constructible_from&lt;T&gt; &amp;&amp; requires { T{}; } &amp;&amp; 
                                /* T t; is well-formed, see below */;
}}

The {{tt|default_initializable}} concept checks whether variables of type {{tt|T}} can be 
* [[cpp/language/value_initialization|value-initialized]] (i.e., whether {{c|T()}} is well-formed);
* [[cpp/language/list_initialization|direct-list-initialized]] from an empty initializer list (i.e., whether {{c|T{} }} is well-formed); and
* [[cpp/language/default_initialization|default-initialized]] (i.e., whether {{c|T t;}} is well-formed).

Access checking is performed as if in a context unrelated to T. Only the validity of the immediate context of the variable initialization is considered.

===Possible implementation===
{{eq fun|1=
template&lt;class T&gt;
concept default_initializable =
    std::constructible_from&lt;T&gt; &amp;&amp;
    requires { T{}; ::new T; };
}}

===References===
{{ref std c++23}}
{{ref std|section=18.4.12|title=Concept {{tt|default_initializable}}|id=concept.default.init}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=18.4.12|title=Concept {{tt|default_initializable}}|id=concept.default.init}}
{{ref std end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/concepts/dsc constructible_from}}
{{dsc inc|cpp/types/dsc is_default_constructible}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
{{cpp/text/text_encoding/title|literal}}
{{cpp/text/text_encoding/navbar}}
{{dcl begin}}
{{dcl|since=c++26|
static consteval text_encoding literal() noexcept;
}}
{{dcl end}}

Constructs a new {{tt|text_encoding}} object representing the [[cpp/language/charset#Code_unit_and_literal_encoding|ordinary character literal encoding]]. It is used to determine the character encoding applied to ordinary character or string literals (e.g. {{c|"This is literal"}}).

This function is deleted unless the {{c|CHAR_BIT}} is {{c|8}}.

===Parameters===
(none)

===Return value===
The object holding the representation of the ordinary literal encoding.

===Notes===
This function can be implemented by constructing {{tt|text_encoding}} with compiler-specific builtin macros such as [https://clang.llvm.org/docs/LanguageExtensions.html#builtin-macros {{tt|__clang_literal_encoding__}}] from Clang, or [https://gcc.gnu.org/onlinedocs/cpp/Common-Predefined-Macros.html {{tt|__GNUC_EXECUTION_CHARSET_NAME}}] from GCC. These macros, which are known at compile-time, expand to a narrow string literal containing the name of the narrow execution character set used (ordinary literal encoding).

The value returned by {{c|literal()}} may depend on compiler options such as {{tt|1=-fexec-charset=''encoding-name''}} in GCC or Clang or {{tt|1=/execution-charset:''encoding-name''}} in MSVC.

===Example===
{{example|This example demonstrates the assertion that the ordinary literal encoding should be UTF-8.|code=
#include &lt;text_encoding&gt;

static_assert(std::text_encoding::literal() == std::text_encoding::UTF8);

int main()
{
    // if the literal encoding is UTF-8, then this unprefixed string literal is
    // encoded as UTF-8
    constexpr char green_heart[] = "\N{GREEN HEART}";
  
    // this prefixed string literal is always encoded as UTF-8 regardless of the
    // literal encoding
    constexpr char8_t green_heart_u8[] = u8"\N{GREEN HEART}";
}
}}

{{langlinks|es|ja|ru|zh}}
{{cpp/text/text_encoding/title|aliases_view}}
{{cpp/text/text_encoding/navbar}}
{{dcl begin}}
{{ddcl|since=c++26|1=
class text_encoding::aliases_view
    : public ranges::view_interface&lt;text_encoding::aliases_view&gt;
}}

The nested class {{tt|text_encoding::aliases_view}} is a {{lconcept|view}} over aliases of the character encoding.

Let {{c|r}} denote an instance of {{tt|aliases_view}}. For a non-empty range {{c|r}}:
* {{c|r.front()}} is the primary name of the registered character encoding,
* {{c|r}} contains the aliases of the registered character encoding such that the order of the aliases is unspecified,
* each element in {{c|r}} is a non-null and non-empty null-terminated byte string encoded in the [[cpp/language/charset#Code unit and literal encoding|literal character encoding]] and comprising only characters from the [[cpp/language/charset#Basic character set|basic character set]], and
* {{c|r}} does not contain duplicate values when compared with {{lc|std::strcmp}}.

These are the following type properties of {{tt|text_encoding::aliases_view}}:
* it models {{lconcept|copyable}}, {{lconcept|random_access_range}}, and {{lconcept|borrowed_range}}.
* it is not required to satisfy {{lconcept|common_range}} and {{lconcept|default_initializable}}.
* both {{c/core|ranges::range_value_t&lt;text_encoding​::​aliases_view&gt;}} and {{c/core|ranges::range_reference_t&lt;text_encoding::aliases_view&gt;}} denote {{c/core|const char*}}.
* {{c/core|ranges::iterator_t&lt;text_encoding::aliases_view&gt;}} is a {{named req|ConstexprIterator}}.

===Member functions===
{{dsc begin}}
{{dsc mem fun|begin|nolink=true|returns an iterator of implementation-defined type to the beginning of the aliases view}}
{{dsc mem fun|end|nolink=true|returns a sentinel of implementation-defined type of the aliases view}}
{{cpp/ranges/view_interface/inherit|embedded=yes|size=invalid|back=invalid|data=invalid}}
{{dsc end}}

{{anchor|begin}}
{{member|{{small|std::text_encoding::aliases_view::}}begin|
{{ddcl|since=c++26|
constexpr /*implementation-defined*/ begin() const;
}}

Returns an iterator of implementation-defined type to the beginning of {{c|r}}.
}}

{{anchor|end}}
{{member|{{small|std::text_encoding::aliases_view::}}end|
{{ddcl|since=c++26|
constexpr /*implementation-defined*/ end() const;
}}

Returns a sentinel of implementation-defined type of {{c|r}}.
}}

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/text/text_encoding/dsc aliases}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
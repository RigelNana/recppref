{{cpp/text/text_encoding/title|''comp-name''}}
{{cpp/text/text_encoding/navbar}}
{{ddcl|since=c++26|notes={{mark expos}}|
static constexpr bool /*comp-name*/( std::string_view a, std::string_view b );
}}

Compares two strings {{c|a}} and {{c|b}} encoded in ordinary literal encoding following the [https://www.unicode.org/reports/tr22/tr22-8.html#Charset_Alias_Matching Unicode Charset Alias Matching] rules.

Two strings are considered equal when comparing from left to right after:
* removing all non-alphanumeric characters,
* converting all letters to the same case, and
* removing any standalone sequences of {{c|'0'}} characters that do not immediately follow a numeric prefix. A numeric prefix consists of a non-zero digit ({{c|'1'}} through {{c|'9'}}) optionally followed by one or more non-alphanumeric characters.

Here are the following examples:
{{source|1=
static_assert(/*comp-name*/("UTF-8", "utf8") == true);
static_assert(/*comp-name*/("u.t.f-008", "utf8") == true);
static_assert(/*comp-name*/("ISO-8859-1", "iso88591") == true);
static_assert(/*comp-name*/("ut8", "utf8") == false);
static_assert(/*comp-name*/("utf-80", "utf8") == false);
}}

===Parameters===
{{par begin}}
{{par|a, b|strings to compare}}
{{par end}}

===Return value===
{{c|true}} if two strings compare equal as described above; {{c|false}} otherwise.

{{langlinks|de|es|ja|ru|zh}}
{{title|Feature testing {{mark since c++20}}}}
{{cpp/feature test/navbar}}

The standard defines a set of [[cpp/preprocessor/replace|preprocessor macros]] corresponding to C++ language and library features introduced in C++11 or later. They are intended as a simple and portable way to detect the presence of said features.

===Attributes===
{{sdsc begin}}
{{sdsc|{{ttb|__has_cpp_attribute(}} {{spar|attribute-token}} {{ttb|)}}}}
{{sdsc end}}

Checks for the support of an [[cpp/language/attributes|attribute]] named by {{spar|attribute-token}} (after macro expansion).

For each standard attribute, it is implementation-defined whether {{tt|__has_cpp_attribute}} expands to the value given in the table below (which is the year and month in which the attribute was added to the working draft) or {{c|0}}. It will expand to given value in the table if and only if the standard attribute causes the implementation to behave as recommended (issuing diagnostic messages, affecting class layout, etc.).

The presence of vendor-specific attributes is determined by a non-zero value.

{{tt|__has_cpp_attribute}} can be expanded in the expression of {{ltt|cpp/preprocessor/conditional|#if}} and {{ltt|cpp/preprocessor/conditional|#elif}}.
It is treated as a defined macro by {{ltt|cpp/preprocessor/conditional|#ifdef}}, {{ltt|cpp/preprocessor/conditional|#ifndef}}{{rev inl|since=c++23|, {{ltt|cpp/preprocessor/conditional|#elifdef}}, {{ltt|cpp/preprocessor/conditional|#elifndef}}}} and {{ltt|cpp/preprocessor/conditional|defined}} but cannot be used anywhere else.

{|class="wikitable sortable"
|-{{#vardefine:counter|0}}
!{{spar|attribute-token}}
!Attribute
!&lt;abbr title="The year/month in which this feature was adopted. The hyperlink under each value opens a compiler support page with an entry for that feature."&gt;Value&lt;/abbr&gt;
!&lt;abbr title="Standard in which the attribute is introduced"&gt;Std&lt;/abbr&gt;
!Paper(s)

{{ftm_row
|assume
|{{attr|assume}}
|202207L|link=23#assume
|23
|P1774R8
}}

{{ftm_row
|carries_dependency
|{{attr|carries_dependency}}
|200809L|link=11#carries_dependency
|11
|N2556 N2643
}}

{{ftm_row
|deprecated
|{{attr|deprecated}}
|201309L|link=14#deprecated
|14
|N3760
}}

{{ftm_row
|fallthrough
|{{attr|fallthrough}}
|201603L|link=17#fallthrough
|17
|P0188R1
}}

{{ftm_row
|indeterminate
|{{attr|indeterminate}}
|202403L|link=26#indeterminate
|26
|P2795R5
}}

{{ftm_row
|likely
|{{attr|likely}}
|201803L|link=20#likely
|20
|P0479R5
}}

{{ftm_row
|maybe_unused
|{{attr|maybe_unused}}
|201603L|link=17#maybe_unused
|17
|P0212R1
}}

{{ftm_row
|no_unique_address
|{{attr|no_unique_address}}
|201803L|link=20#no_unique_address
|20
|P0840R2
}}

{{ftm_row
|nodiscard|ftm_span="2"
|{{attr|nodiscard}}
|201603L|link=17#nodiscard
|17
|P0189R1
}}

{{ftm_row
|
|{{attr|nodiscard}} with reason
|201907L|link=20#nodiscard
|20
|P1301R4
}}

{{ftm_row
|noreturn
|{{attr|noreturn}}
|200809L|link=11#noreturn
|11
|N2761
}}

{{ftm_row
|unlikely
|{{attr|likely|unlikely}}
|201803L|link=20#likely&lt;!--[[likely]] &amp; [[unlikely]] are described in one entry--&gt;
|20
|P0479R5
}}
|-
!colspan="5"|Total number of attributes: {{#var:counter}}
|}

===Language features===
The following macros can be used to detect whether a language feature is implemented by the current implementation. They are [[cpp/preprocessor/replace#Predefined macros|predefined]] in every translation unit.

Each macro expands to an integer literal corresponding to the year and month when the corresponding feature has been included in the working draft. When a feature changes significantly, the macro will be updated accordingly.

{{include editlink|cpp/utility/lang feature macros}}

{{cpp/utility/lang feature macros}}

===Library features===
The following macros can be used to detect whether a standard library feature is implemented by the current implementation. Unlike the language feature test macros, they are not predefined. Instead, they are provided by the header {{header|version}}.

For each library feature test macro, it is also provided by the headers that provide the relevant standard library components. See [[cpp/utility/feature test|library feature test macros]] for a complete list of headers providing these macros.

Each macro expands to an integer literal corresponding to the year and month when the corresponding feature has been included in the working draft. When a feature changes significantly, the macro will be updated accordingly.

{{include editlink|cpp/utility/lib feature macros}}

{{cpp/utility/lib feature macros}}

===Example===
====Normal usage====
{{example|code=
#ifdef __has_include                           // Check if __has_include is present
#  if __has_include(&lt;optional&gt;)                // Check for a standard library
#    include &lt;optional&gt;
#  elif __has_include(&lt;experimental/optional&gt;) // Check for an experimental version
#    include &lt;experimental/optional&gt;
#  elif __has_include(&lt;boost/optional.hpp&gt;)    // Try with an external library
#    include &lt;boost/optional.hpp&gt;
#  else                                        // Not found at all
#     error "Missing &lt;optional&gt;"
#  endif
#endif

#ifdef __has_cpp_attribute                      // Check if __has_cpp_attribute is present
#  if __has_cpp_attribute(deprecated)           // Check for an attribute
#    define DEPRECATED(msg) [[deprecated(msg)]]
#  endif
#endif
#ifndef DEPRECATED
#    define DEPRECATED(msg)
#endif

DEPRECATED("foo() has been deprecated") void foo();

#if __cpp_constexpr &gt;= 201304                // Check for a specific version of a feature
#  define CONSTEXPR constexpr
#else
#  define CONSTEXPR inline
#endif

CONSTEXPR int bar(unsigned i)
{
#if __cpp_binary_literals                    // Check for the presence of a feature
    unsigned mask1 = 0b11000000;
    unsigned mask2 = 0b00000111;
#else
    unsigned mask1 = 0xC0;
    unsigned mask2 = 0x07;
#endif
    if (i &amp; mask1)
        return 1;
    if (i &amp; mask2)
        return 2;
    return 0;
}

int main() {}
}}

====Compiler Features Dump====
{{include editlink|cpp/compiler_support/dump}}

&lt;!--{{cot|Compiler Features Dump Example}}--&gt;
{{cpp/compiler support/dump}}
&lt;!--{{cob}}--&gt;

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P2552R3|std=C++20|before={{tt|__has_cpp_attribute}} must expand to a non-zero value for standard attributes|after=can expand to {{c|0}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc|[[cpp/utility/feature_test|'''Library feature-test macros''']] {{mark c++20}}|defined in the header {{header|version}}}}
{{dsc|'''[[cpp/preprocessor/replace#Predefined macros|Predefined Macro Symbols]]'''}}
{{dsc|'''[[cpp/symbol_index/macro|Macro Symbol Index]]'''}}
{{dsc end}}

===External links===
{{elink begin}}
{{elink|[https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations The official document on Feature-Test Recommendations]}}
{{elink|[https://github.com/makelinux/examples/blob/develop/cpp/features.cpp Source code to dump compiler features]}}
{{elink end}}

{{langlinks|es|ja|ru|zh}}
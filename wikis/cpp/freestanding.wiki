{{title|Freestanding and hosted implementations}}
{{cpp/navbar}}

There are two kinds of implementations defined by the C++ standard: '''''hosted''''' and '''''freestanding''''' implementations. For ''hosted'' implementations, the set of standard library headers required by the C++ standard is much larger than for ''freestanding'' ones. In a ''freestanding'' implementation, execution may happen without an operating system.

The kind of the implementation is implementation-defined. {{rev inl|since=c++11|The macro {{tt|__STDC_HOSTED__}} is predefined to {{tt|1}} for hosted implementations and {{tt|0}} for freestanding implementations.}}

{{rrev|since=c++11|1=
===Requirements on [[cpp/language/memory model|multi-threaded executions and data races]]===
{{(!}} cellpadding=8 {{!}}
! ''freestanding'' !! ''hosted''
{{!}}-
{{!}} Under a ''freestanding'' implementation, it is implementation-defined whether a program can have more than one [[cpp/thread|thread of execution]].
{{!}} Under a ''hosted'' implementation, a C++ program can have more than one {{lt|cpp/thread}} running concurrently.
{{!)}}
}}

===Requirements on the {{ltt|cpp/language/main function|main}} function===

{| cellpadding=8|
|-
! ''freestanding'' !! ''hosted''
|-
| In a ''freestanding'' implementation, it is implementation-defined whether a program is required to define a {{ltt|cpp/language/main function|main}} function. Start-up and termination is implementation-defined; start-up contains the execution of {{lt|cpp/language/constructor}}s for objects of {{lsd|cpp/language/scope#Namespace scope}} with static storage duration; termination contains the execution of {{lt|cpp/language/destructor}}s for objects with static {{lt|cpp/language/storage duration}}.
| In a ''hosted'' implementation, a program must contain a global function called {{ltt|cpp/language/main function|main}}. Executing a program starts a main [[cpp/thread|thread of execution]] in which the {{tt|main}} function is invoked, and in which variables of static {{lt|cpp/language/storage duration}} might be initialized and destroyed.
|}

{{anchor|header requirements}}

===Requirements on [[cpp/header|standard library headers]]===
A ''freestanding'' implementation has an implementation-defined set of headers. This set includes at least the headers in the following table.

For partially freestanding headers, freestanding implementations only needs to provide part of the entities in the corresponding synopsis:
* If an entity is commented {{c/core|// freestanding}}, it is guaranteed to be provided.
{{rrev|since=c++26|
* If an entity (function or function template) is commented {{c/core|// freestanding-deleted}}, it is guaranteed to be either provided or deleted.
}}

{|class="wikitable sortable"
|+style="padding:6px;"|Headers required for a freestanding implementation
|-
!Library
!Component
!Headers
!{{nbsp}}Freestanding{{nbsp}}
|-
|rowspan=13|{{ls|cpp/utility#Language support}}
|Common definitions
|{{header|cstddef}}
|{{yes|All}}
|-
|C standard library
|{{header|cstdlib}}
|{{maybe|Partial}}
|-
|Implementation properties
|{{header|cfloat}}&lt;br&gt;{{header|climits}} {{mark since c++11}}&lt;br&gt;{{header|limits}}&lt;br&gt;{{header|version}} {{mark since c++20}}
|{{yes|All}}
|-
|Integer types
|{{header|cstdint}} {{mark since c++11}}
|{{yes|All}}
|-
|Dynamic memory management
|{{header|new}}
|{{yes|All}}
|-
|Type identification
|{{header|typeinfo}}
|{{yes|All}}
|-
|Source location
|{{header|source_location}} {{mark since c++20}}
|{{yes|All}}
|-
|Exception handling
|{{header|exception}}
|{{yes|All}}
|-
|Initializer lists
|{{header|initializer_list}} {{mark since c++11}}
|{{yes|All}}
|-
|Comparisons
|{{header|compare}} {{mark since c++20}}
|{{yes|All}}
|-
|Coroutines support
|{{header|coroutine}} {{mark since c++20}}
|{{yes|All}}
|-
|Other runtime support
|{{header|cstdarg}}
|{{yes|All}}
|-
|Debugging support
|{{header|debugging}} {{mark since c++26}}
|{{yes|All}}
|-
|colspan=2|[[cpp/concepts|Concepts]]
|{{header|concepts}} {{mark since c++20}}
|{{yes|All}}
|-
|rowspan=2|[[cpp/error|Diagnostics]]
|Error numbers
|{{header|cerrno}} {{mark since c++26}}
|{{maybe|Partial}}
|-
|System error support
|{{header|system_error}} {{mark since c++26}}
|{{maybe|Partial}}
|-
|[[cpp/memory|Memory management]]{{nbsp}}
|Memory
|{{header|memory}} {{mark since c++23}}
|{{maybe|Partial}}
|-
|rowspan=2|[[cpp/meta|Metaprogramming]]
|Type traits
|{{header|type_traits}} {{mark since c++11}}
|{{yes|All}}
|-
|Compile-time rational arithmetic{{nbsp}}
|{{header|ratio}} {{mark since c++23}}
|{{yes|All}}
|-
|rowspan=5|[[cpp/utility#General-purpose utilities|General utilities]]
|Utility components
|{{header|utility}} {{mark since c++23}}
|{{yes|All}}
|-
|Tuples
|{{header|tuple}} {{mark since c++23}}
|{{yes|All}}
|-
|Function objects
|{{header|functional}} {{mark since c++20}}
|{{maybe|Partial}}
|-
|Primitive numeric conversions
|{{header|charconv}} {{mark since c++26}}
|{{maybe|Partial}}
|-
|Bit manipulation
|{{header|bit}} {{mark since c++20}}
|{{yes|All}}
|-
|rowspan=2|[[cpp/string|Strings]]
|String classes
|{{header|string}} {{mark since c++26}}
|{{maybe|Partial}}
|-
|Null-terminated&lt;br&gt;sequence utilities
|{{header|cstring}} {{mark since c++26}}&lt;br&gt;{{header|cwchar}} {{mark since c++26}}
|{{maybe|Partial}}
|-
|colspan=2|[[cpp/iterator|Iterators]]
|{{header|iterator}} {{mark since c++23}}
|{{maybe|Partial}}
|-
|colspan=2|[[cpp/ranges|Ranges]]
|{{header|ranges}} {{mark since c++23}}
|{{maybe|Partial}}
|-
|[[cpp/numeric|Numerics]]
|Mathematical functions&lt;br&gt;for floating-point types
|{{header|cmath}} {{mark since c++26}}
|{{maybe|Partial}}
|-
|[[cpp/thread|Concurrency support]]
|Atomics
|{{header|atomic}} {{mark since c++11}}
|{{yes|{{nbsp|4}}All&lt;ref&gt;{{rev inl|since=c++20|Support for always lock-free integral atomic types and presence of type aliases {{lc|std::atomic_signed_lock_free}} and {{lc|std::atomic_unsigned_lock_free}} are implementation-defined in a freestanding implementation.}}&lt;/ref&gt;}}
|-
|colspan=2|'''Deprecated''' headers
|{{header|ciso646}} {{mark until c++20}}&lt;br&gt;{{header|cstdalign}} {{mark life|since=c++11|until=c++20}}{{nbsp}}&lt;br&gt;{{header|cstdbool}} {{mark life|since=c++11|until=c++20}}
|{{yes|All}}
|}
&lt;references/&gt;

===Notes===
Some compiler vendors may not fully support freestanding implementation. For example, GCC libstdc++ has had implementation and build issues before version 13, while LLVM libcxx and MSVC STL do not support freestanding.

In C++23, many features are made freestanding with partial headers. However, it is still up for discussion in WG21 whether some headers will be made freestanding in the future standards. Regardless, containers like {{lc|std::vector|vector}}, {{lc|std::list|list}}, {{lc|std::deque|deque}}, and {{lc|std::map|map}} will never be freestanding due to their dependencies on exceptions and heap.

GCC 13 provides more headers, such as {{header|optional}}, {{header|span}}, {{header|array}}, and {{header|bitset}}, for freestanding, although these headers may not be portable or provide the same capabilities as a hosted implementation. It is better to avoid using them in a freestanding environment, even if the toolchain provides them.

{{ftm begin|sort=yes}}
{{ftm|__cpp_lib_freestanding_feature_test_macros|value=202306L|std=C++26|freestanding feature test macros}}
{{ftm|__cpp_lib_freestanding_algorithm|value=202311L|std=C++26|freestanding {{header|algorithm}}}}
{{ftm|__cpp_lib_freestanding_array|value=202311L|std=C++26|freestanding {{header|array}}}}
{{ftm|__cpp_lib_freestanding_char_traits|value=202306L|std=C++26|freestanding {{lc|std::char_traits}}}}
{{ftm|__cpp_lib_freestanding_charconv|value=202306L|std=C++26|freestanding {{header|charconv}}}}
{{ftm|__cpp_lib_freestanding_cstdlib|value=202306L|std=C++26|freestanding {{header|cstdlib}}}}
{{ftm|__cpp_lib_freestanding_cstring|value=202311L|std=C++26|freestanding {{header|cstring}}}}
{{ftm|__cpp_lib_freestanding_cwchar|value=202306L|std=C++26|freestanding {{header|cwchar}}}}
{{ftm|__cpp_lib_freestanding_errc|value=202306L|std=C++26|freestanding {{lc|std::errc}}}}
{{ftm|__cpp_lib_freestanding_expected|value=202311L|std=C++26|freestanding {{header|expected}}}}
{{ftm|__cpp_lib_freestanding_functional|value=202306L|std=C++26|freestanding {{header|functional}}}}
{{ftm|__cpp_lib_freestanding_iterator|value=202306L|std=C++26|freestanding {{header|iterator}}}}
{{ftm|__cpp_lib_freestanding_mdspan|value=202311L|std=C++26|freestanding {{header|mdspan}}}}
{{ftm|__cpp_lib_freestanding_memory|value=202306L|std=C++26|freestanding {{header|memory}}}}
{{ftm|__cpp_lib_freestanding_numeric|value=202311L|std=C++26|freestanding {{header|numeric}}}}
{{ftm|__cpp_lib_freestanding_optional|value=202311L|std=C++26|freestanding {{header|optional}}}}
{{ftm|__cpp_lib_freestanding_ranges|value=202306L|std=C++26|freestanding {{header|ranges}}}}
{{ftm|__cpp_lib_freestanding_ratio|value=202306L|std=C++26|freestanding {{header|ratio}}}}
{{ftm|__cpp_lib_freestanding_string_view|value=202311L|std=C++26|freestanding {{header|string_view}}}}
{{ftm|__cpp_lib_freestanding_tuple|value=202306L|std=C++26|freestanding {{header|tuple}}}}
{{ftm|__cpp_lib_freestanding_utility|value=202306L|std=C++26|freestanding {{header|utility}}}}
{{ftm|__cpp_lib_freestanding_variant|value=202311L|std=C++26|freestanding {{header|variant}}}}
{{ftm end}}

===References===
{{ref std c++23}}
{{ref std|section=4.1|title=Implementation compliance|id=intro.compliance|p=10}}
{{ref std|section=6.9.2|title=Multi-threaded executions and data races|id=intro.multithread|p=84}}
{{ref std|section=6.9.3.1|title=main function|id=basic.start.main|p=89}}
{{ref std|section=16.4.2.5|title=Freestanding implementations|id=compliance|p=483}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=4.1|title=Implementation compliance|id=intro.compliance|p=7}}
{{ref std|section=6.9.2|title=Multi-threaded executions and data races|id=intro.multithread|p=77}}
{{ref std|section=6.9.3.1|title=main function|id=basic.start.main|p=82}}
{{ref std|section=16.5.1.3|title=Freestanding implementations|id=compliance|p=470}}
{{ref std end}}
{{ref std c++17}}
{{ref std|section=4.1|title=Implementation compliance|id=intro.compliance|p=5}}
{{ref std|section=4.7|title=Multi-threaded executions and data races|id=intro.multithread|p=15}}
{{ref std|section=6.6.1|title=main function|id=basic.start.main|p=66}}
{{ref std|section=20.5.1.3|title=Freestanding implementations|id=compliance|p=458}}
{{ref std end}}
{{ref std c++14}}
{{ref std|section=1.4|title=Implementation compliance|id=intro.compliance|p=5}}
{{ref std|section=1.10|title=Multi-threaded executions and data races|id=intro.multithread|p=11}}
{{ref std|section=3.6.1|title=Main function|id=basic.start.main|p=62}}
{{ref std|section=17.6.1.3|title=Freestanding implementations|id=compliance|p=441}}
{{ref std end}}
{{ref std c++11}}
{{ref std|section=1.4|title=Implementation compliance|id=intro.compliance|p=5}}
{{ref std|section=1.10|title=Multi-threaded executions and data races|id=intro.multithread|p=11}}
{{ref std|section=3.6.1|title=Main function|id=basic.start.main|p=58}}
{{ref std|section=17.6.1.3|title=Freestanding implementations|id=compliance|p=408}}
{{ref std end}}
{{ref std c++03}}
{{ref std|section=1.4|title=Implementation compliance|id=intro.compliance|p=3}}
{{ref std|section=3.6.1|title=Main function|id=basic.start.main|p=43}}
{{ref std|section=17.4.1.3|title=Freestanding implementations|id=lib.compliance|p=326}}
{{ref std end}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=cwg|dr=1938|std=C++98|before=an implementation did not need&lt;br&gt;to document whether it is hosted|after=made the implementation kind implementation-&lt;br&gt;defined (thus requires a documentation)}}
{{dr list item|wg=lwg|dr=3653|paper=P1642R11|std=C++20|before={{header|coroutine}} is freestanding, but&lt;br&gt;uses {{lc|std::hash}} which was not|after=made {{header|functional}} being&lt;br&gt; partially freestanding}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc see c|c/language/conformance|Conformance|nomono=true}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/named req/title|Formatter|notes={{mark since c++20}}}}
{{cpp/named req/navbar}}

{{named req|Formatter}} is a type that abstracts formatting operations for a given formatting argument type and character type. Specializations of {{lc|std::formatter}} provided by the standard library are required to meet the requirements of {{named req/core|Formatter}} except as noted otherwise.

A {{named req|Formatter}} is able to format both const and non-const arguments, typically by providing a {{tt|format}} member function that takes a const reference.

===Requirements===
A type satisfies {{named req/core|Formatter}} if it satisfies {{named req|BasicFormatter}} and given the following types and values, the expressions shown in the table below are valid and have the indicated semantics:
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|CharT}}|a character type}}
{{dsc|{{tt|Arg}}|a formatting argument type}}
{{dsc|{{tt|Formatter}}|a {{named req/core|Formatter}} type for types {{tt|Arg}} and {{tt|CharT}}}}
{{dsc|{{tt|OutputIt}}|a {{named req|OutputIterator}} type}}
{{dsc|{{tt|ParseCtx}}|{{c/core|std::basic_format_parse_context&lt;CharT&gt;}}}}
{{dsc|{{tt|FmtCtx}}|{{c/core|std::basic_format_context&lt;OutputIt, CharT&gt;}}}}
{{dsc hitem|Value|Definition}}
{{dsc|{{c|f}}|a value of type (possibly const-qualified) {{tt|Formatter}}}}
{{dsc|{{c|arg}}|an lvalue of type {{tt|Arg}}}}
{{dsc|{{c|t}}|a value of type convertible to (possibly const-qualified)&lt;!-- LWG 3636 --&gt; {{tt|Arg}}}}
{{dsc|{{c|parse_ctx}}|an lvalue of type {{tt|ParseCtx}} satisfying all following conditions:
* {{c|parse_ctx.begin()}} points to the beginning of the {{spar|format-spec}} of the replacement field being formatted in the [[cpp/utility/format/basic_format_string#Format specification|format string]].
* If {{spar|format-spec}} is not present or empty, then either {{c|1=parse_ctx.begin() == parse_ctx.end()}} or {{c|1=*parse_ctx.begin() == '}'}}.}}
{{dsc|{{c|fmt_ctx}}|an lvalue of type {{tt|FmtCtx}}}}
{{dsc end}}

{|class=wikitable
!Expression
!Return type
!Semantics
|-
|{{c|f.format(t, fmt_ctx)}}
|{{tt|FmtCtx::iterator}}{{nbsp}}
|
* Formats {{c|t}} according to the specifiers stored in {{c|f}}, writes the output to {{c|fmt_ctx.out()}} and returns an end iterator of the output range.
* The output can only depend on
** {{c|t}},
** {{c|fmt_ctx.locale()}},
** the range {{range|parse_ctx.begin()|parse_ctx.end()}} from the last call to {{c|f.parse(parse_ctx)}}, and
** {{c|fmt_ctx.arg(n)}} for any value {{c|n}} of type {{lc|std::size_t}}&lt;!-- LWG 3462 --&gt;.
|-
|{{c|f.format(arg, fmt_ctx)}}
|{{tt|FmtCtx::iterator}}
|As above, but does not modify {{c|arg}}.
|}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3892|std=C++20|before=the value of {{c|pc.begin()}} was unclear if {{spar|format-spec}} is not present|after=made clear}}
{{dr list end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
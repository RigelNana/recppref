{{cpp/named req/title|UniformRandomBitGenerator|notes={{mark since c++11}}}}
{{cpp/named req/navbar}}

A uniform random bit generator is a function object returning unsigned integer values such that each value in the range of possible results has (ideally) equal probability.

Uniform random bit generators are not intended to be used as random number generators: they are used as the source of random bits (generated in bulk, for efficiency). Any uniform random bit generator may be plugged into any [[cpp/numeric/random|random number distribution]] in order to obtain a random number (formally, a random variate). 

===Requirements===
The type {{tt|G}} satisfies {{named req/core|UniformRandomBitGenerator}} if

{{rrev|until=c++20|
Given {{c|g}}, a value of type {{tt|G}}, all following conditions are satisfied:
* {{tt|G::result_type}} is valid, and denotes an unsigned integer type.
* The following expressions must be valid and have their specified effects:
}}
{|table class=wikitable
|-
!{{nbsp}}Expression{{nbsp}}||Type||Requirements
|-
|{{c|G::min()}}
|{{tt|G::result_type}}{{nbsp}}
|
* Yields the smallest value that {{tt|G}}'s {{c/core|operator()}} may return.{{nbsp}}
* The result value is strictly less than {{c|G::max()}}.
* The expression must be a constant expression.
|-
|{{c|G::max()}}
|{{tt|G::result_type}}
|
* Yields the largest value that {{tt|G}}'s {{c/core|operator()}} may return.
* The result value is strictly greater than {{tt|G::min()}}.
* The expression must be a constant expression.
|-
|{{c|g()}}
|{{tt|G::result_type}}
|
* Returns a value in the closed interval {{closed range|G::min()|G::max()}}.
* Has amortized constant complexity.
|}

{{rrev|since=c++20|
All following conditions are satisfied:
* {{tt|G}} models {{lconcept|uniform_random_bit_generator}}.
* {{c/core|std::invoke_result_t&lt;G&amp;&gt;}} is an unsigned integer type.
* {{tt|G}} provides a nested {{c/core|typedef}} name {{tt|result_type}}, which denotes the same type as {{c/core|std::invoke_result_t&lt;G&amp;&gt;}}.
}}

===Notes===
All {{named req|RandomNumberEngine}}s satisfy this requirement.

===Standard library===
The following standard library facilities expect a {{named req/core|UniformRandomBitGenerator}} type.
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc random_shuffle}}
{{dsc inc|cpp/algorithm/dsc sample}}
{{dsc inc|cpp/numeric/random/dsc generate_canonical}}
{{dsc inc|cpp/numeric/random/dsc uniform_int_distribution}}
{{dsc inc|cpp/numeric/random/dsc uniform_real_distribution}}
{{dsc|all other random number distributions}}
{{dsc end}}
The following standard library facilities satisfy {{named req/core|UniformRandomBitGenerator}} without additionally satisfying {{named req|RandomNumberEngine}}:
{{dsc begin}}
{{dsc inc|cpp/numeric/random/dsc random_device}}
{{dsc end}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2154|paper=P0898R3|std=C++11|before=it was unclear whether {{c|G::min()}} and {{c|G::max()}}&lt;br&gt;are required to be constant expressions&lt;ref&gt;The time complexity requirement for these expressions were “compile-time” before C++20. The wording is ambiguous, as “compile-time time complexity” can be interpreted as both “can be evaluated in compile-time” and “the time complexity can be determined in compile-time”.&lt;/ref&gt;|after=required}}
{{dr list end}}
&lt;references/&gt;

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/dsc uniform_random_bit_generator}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
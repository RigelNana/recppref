{{cpp/named req/title|RandomNumberDistribution|notes={{mark since c++11}}}}
{{cpp/named req/navbar}}

A {{named req|RandomNumberDistribution}} is a function object returning random numbers according to a [[enwiki:Probability density function|probability density function]] {{math|p(x)}} or a [[enwiki:Discrete probability distribution|discrete probability distribution]] {{math|P(x{{su|b=i}})}}.

===Requirements===
The type {{tt|D}} satisfies {{named req/core|RandomNumberDistribution}} if

* {{tt|D}} satisfies {{named req|CopyConstructible}}
* {{tt|D}} satisfies {{named req|CopyAssignable}}

Given
* {{tt|T}}, the type named by {{c|D::result_type}}
* {{tt|P}}, the type named by {{c|D::param_type}}, which 
:* satisfies {{named req|CopyConstructible}}
:* satisfies {{named req|CopyAssignable}}
:* satisfies {{named req|EqualityComparable}}
:* has a constructor taking identical arguments as each of the constructors of {{tt|D}} that take arguments corresponding to the distribution parameters.
:* has a member function with the identical name, type, and semantics, as every member function of {{tt|D}} that returns a parameter of the distribution
:* declares a member typedef {{c|using distribution_type {{=}} D;}}
* {{tt|d}}, a value of type {{tt|D}}
* {{tt|x}} and {{tt|y}}, (possibly const) values of type {{tt|D}}
* {{tt|p}}, a (possibly const) value of type {{tt|P}}
* {{tt|g}}, {{tt|g1}}, {{tt|g2}}, lvalues of a type satisfying {{named req|UniformRandomBitGenerator}}
* {{tt|os}}, lvalue of a specialization of {{lc|std::basic_ostream}}
* {{tt|is}}, lvalue of a specialization of {{lc|std::basic_istream}}

The following expressions must be valid and have their specified effects

{|class=wikitable
!Expression||Type||Notes||Complexity
|-
|{{tt|D::result_type}}||{{tt|T}}||An [[cpp/language/type|arithmetic type]]||Compile-time
|-
|{{tt|D::param_type}}||{{tt|P}}||||Compile-time
|-
|{{tt|D()}}||||Creates a distribution indistinguishable from any other default-constructed {{tt|D}} ||Constant
|-
|{{tt|D(p)}}||||Creates a distribution indistinguishable from {{tt|D}} constructed directly from the values used to construct {{tt|p}}||Same as {{tt|p}}'s construction
|-
|{{tt|d.reset()}}||{{tt|void}}||Resets the internal state of the distribution. The next call to {{tt|operator()}} on {{tt|d}} will not depend on values produced by any engine prior to {{tt|reset()}}||Constant
|-
|{{tt|x.param()}}||{{tt|P}}||Returns {{tt|p}} such that {{c|D(p).param() {{==}} p}}||No worse than {{tt|D(p)}}
|-
|{{tt|d.param(p)}}||{{tt|void}}||Postcondition: {{c|d.param() {{==}} p}}||No worse than {{tt|D(p)}}
|-
|{{tt|d(g)}}||{{tt|T}}||The sequence of numbers returned by successive invocations of this call with the same {{tt|g}} are randomly distributed according to the distribution parametrized by {{tt|d.param()}}||Amortized constant number of invocations of {{tt|g}}
|-
|{{tt|d(g,p)}}||{{tt|T}}||The sequence of numbers returned by successive invocations of this call with the same {{tt|g}} are randomly distributed according to the distribution parametrized by {{tt|p}}||Amortized constant number of invocations of {{tt|g}}
|-
|{{tt|x.min()}}||{{tt|T}}||The greatest lower bound on the values potentially returned by {{tt|x}}’s {{tt|operator()}}, as determined by the current values of {{tt|x}}’s parameters||Constant
|-
|{{tt|x.max()}}||{{tt|T}}||The least upper bound on the values potentially returned by {{tt|x}}’s {{tt|operator()}}, as determined by the current values of {{tt|x}}’s parameters||Constant
|-
|{{tt|x {{==}} y}}||{{tt|bool}}||Establishes an equivalence relation. Returns {{tt|true}} if {{c|x.param() {{==}} y.param()}} and future infinite sequences of values that would be generated by repeated invocations of {{c|x(g1)}} and {{c|y(g2)}} would be equal as long as {{c|g1 {{==}} g2}}||Constant
|-
|{{tt|x !{{=}} y}}||{{tt|bool}}||{{tt|!(x {{==}} y)}}||Constant
|-
|{{tt|os &lt;&lt; x}}||Reference to the type of {{tt|os}}||Writes a textual representation of the distribution parameters and internal state to {{tt|os}}. The formatting flags and fill character of {{tt|os}} are unchanged||
|-
|{{tt|is &gt;&gt; d}}||Reference to the type of {{tt|is}}||Restores the distribution parameters and internal state with data read from {{tt|is}}. The formatting flags of {{tt|is}} are unchanged. The data must have been written using a stream with the same locale, {{tt|CharT}} and {{tt|Traits}} stream template parameters, otherwise the behavior is undefined. If bad input is encountered, {{c|is.setstate(std::ios::failbit)}} is called, which may throw {{lc|std::ios_base::failure}}. {{tt|d}} is unchanged in that case||
|-
|}

===Notes===
The parameters of a distribution object may be changed either permanently, by using {{c|d.param(p)}} or just for the duration of a single operator() call, by using {{c|d(g,p)}}.

Calls to const member functions of the distribution and {{c|os &lt;&lt; d}} do not affect the sequence of numbers produced by repeated {{c|d(g)}}.

===Standard library===
The following standard library components satisfy {{named req/core|RandomNumberDistribution}}

{{dsc begin}}
{{dsc inc|cpp/numeric/random/dsc uniform_int_distribution}}
{{dsc inc|cpp/numeric/random/dsc uniform_real_distribution}}
{{dsc class|cpp/numeric/random/bernoulli_distribution|produces {{c|bool}} values on a [[enwiki:Bernoulli_distribution|Bernoulli distribution]]|notes={{mark c++11}}}}
{{dsc tclass|cpp/numeric/random/binomial_distribution|produces integer values on a [[enwiki:Binomial_distribution|binomial distribution]]|notes={{mark c++11}}}}
{{dsc tclass|cpp/numeric/random/negative_binomial_distribution|produces integer values on a [[enwiki:Negative_binomial_distribution|negative binomial distribution]]|notes={{mark c++11}}}}
{{dsc tclass|cpp/numeric/random/geometric_distribution|produces integer values on a [[enwiki:Geometric_distribution|geometric distribution]]|notes={{mark c++11}}}}
{{dsc tclass|cpp/numeric/random/poisson_distribution|produces integer values on a [[enwiki:Poisson_distribution|poisson distribution]]|notes={{mark c++11}}}}
{{dsc tclass|cpp/numeric/random/exponential_distribution|produces real values on an [[enwiki:Exponential_distribution|exponential distribution]]|notes={{mark c++11}}}}
{{dsc tclass|cpp/numeric/random/gamma_distribution|produces real values on a [[enwiki:Gamma_distribution|gamma distribution]]|notes={{mark c++11}}}}
{{dsc tclass|cpp/numeric/random/weibull_distribution|produces real values on a [[enwiki:Weibull_distribution|Weibull distribution]]|notes={{mark c++11}}}}
{{dsc tclass|cpp/numeric/random/extreme_value_distribution|produces real values on an [[enwiki:Generalized_extreme_value_distribution|extreme value distribution]]|notes={{mark c++11}}}}
{{dsc tclass|cpp/numeric/random/normal_distribution|produces real values on a [[enwiki:Normal_distribution|standard normal (Gaussian) distribution]]|notes={{mark c++11}}}}
{{dsc tclass|cpp/numeric/random/lognormal_distribution|produces real values on a [[enwiki:Lognormal_distribution|lognormal distribution]]|notes={{mark c++11}}}}
{{dsc tclass|cpp/numeric/random/chi_squared_distribution|produces real values on a [[enwiki:Chi-squared_distribution|chi-squared distribution]]|notes={{mark c++11}}}}
{{dsc tclass|cpp/numeric/random/cauchy_distribution|produces real values on a [[enwiki:Cauchy_distribution|Cauchy distribution]]|notes={{mark c++11}}}}
{{dsc tclass|cpp/numeric/random/fisher_f_distribution|produces real values on a [[enwiki:F-distribution|Fisher's F-distribution]]|notes={{mark c++11}}}}
{{dsc tclass|cpp/numeric/random/student_t_distribution|produces real values on a [[enwiki:Student's t-distribution|Student's t-distribution]]|notes={{mark c++11}}}}
{{dsc tclass|cpp/numeric/random/discrete_distribution|produces random integers on a discrete distribution|notes={{mark c++11}}}}
{{dsc tclass|cpp/numeric/random/piecewise_constant_distribution|produces real values distributed on constant subintervals|notes={{mark c++11}}}}
{{dsc tclass|cpp/numeric/random/piecewise_linear_distribution|produces real values distributed on defined subintervals|notes={{mark c++11}}}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/named req/title|SharedLockable|notes={{mark since c++14}}}}
{{cpp/named req/navbar}}

The {{named req|SharedLockable}} requirements describe the minimal characteristics of types that provide shared blocking semantics for execution agents (i.e. threads).

===Requirements===
For type {{ttb|L}} to be {{named req/core|SharedLockable}}, the following conditions have to be satisfied for an object {{ttb|m}} of type {{ttb|L}}:

{|table class=wikitable
|-
!Expression||Preconditions||Effects||Return value
|-
|{{c|m.lock_shared()}}
|
|Blocks until a lock can be obtained for the current execution agent (thread, process, task).  If an exception is thrown, no lock is obtained.
|
|-
|{{c|m.try_lock_shared()}}
|
|Attempts to obtain a lock for the current execution agent (thread, process, task) without blocking. If an exception is thrown, no lock is obtained.
|{{c|true}} if the lock was obtained, {{c|false}} otherwise
|-
|{{c|m.unlock_shared()}}
|The current execution agent holds a shared lock on {{tt|m}}.
|Releases the shared lock held by the execution agent.

Throws no exceptions.
|
|}

====Shared locks====
A lock on an object is said to be ''shared lock'' if it is acquired by a call to {{tt|lock_shared}}, {{tt|try_lock_shared}}, {{tt|try_lock_shared_for}}, or {{tt|try_lock_shared_until}} member function.

===Standard library===
The following standard library types satisfy {{named req/core|SharedLockable}} requirements:
{{dsc begin}}
{{dsc inc|cpp/thread/dsc shared_mutex}}
{{dsc inc|cpp/thread/dsc shared_timed_mutex}}
{{dsc end}}

===See also===
* [[cpp/thread|Thread support library]]
* {{named req|SharedTimedLockable}}
* {{named req|SharedMutex}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
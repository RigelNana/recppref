{{cpp/named req/title|Lockable|notes={{mark since c++11}}}}
{{cpp/named req/navbar}}

The {{named req|Lockable}} requirements extends the {{named req|BasicLockable}} requirements to include attempted locking.

===Requirements===
* {{named req|BasicLockable}}
For type {{ttb|L}} to be {{named req/core|Lockable}}, it must meet the above condition as well as the following:
{|table class=wikitable
|-
!Expression||Effects||Return value
|-
|{{c|m.try_lock()}}
|Attempts to acquire the lock for the current execution agent (thread, process, task) without blocking.  If an exception is thrown, no lock is obtained.
|{{c|true}} if the lock was acquired, {{c|false}} otherwise
|}

===Notes===
The {{tt|try_lock}} member functions obtains a non-shared lock on {{c|m}} on success.

===Standard library===
The following standard library types satisfy {{named req/core|Lockable}} requirements:
{{dsc begin}}
{{dsc inc|cpp/thread/dsc mutex}}
{{dsc inc|cpp/thread/dsc recursive_mutex}}
{{dsc inc|cpp/thread/dsc recursive_timed_mutex}}
{{dsc inc|cpp/thread/dsc shared_mutex}}
{{dsc inc|cpp/thread/dsc shared_timed_mutex}}
{{dsc inc|cpp/thread/dsc timed_mutex}}&lt;!--
{{dsc inc|cpp/thread/dsc rcu_domain}}--&gt;
{{dsc end}}

===See also===
* [[cpp/thread|Thread support library]]
* {{named req|Mutex}}
* {{named req|BasicLockable}}
* {{named req|TimedLockable}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
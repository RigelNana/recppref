{{cpp/named req/title|ContiguousIterator|notes={{mark since c++17}}}}
{{cpp/named req/navbar}}

A {{named req|ContiguousIterator}} is a {{named req|Iterator}} whose logically adjacent elements are also physically adjacent in memory.

A pointer to an element of an array satisfies all requirements of {{named req/core|ContiguousIterator}}.

===Requirements===
The type {{c|It}} satisfies {{named req/core|ContiguousIterator}} if
* The type {{c|It}} satisfies {{named req|Iterator}}

And, for every
* {{c|a}}, a dereferenceable iterator of type {{c|It}}
* {{c|n}}, an integral value

such that 

* {{c|a + n}} is a valid and dereferenceable iterator value

then

* {{c|*(a + n)}} is equivalent to {{c|*(std::addressof(*a) + n)}}.

===Standard library===
The following standard library types are {{named req|ContiguousIterator}}s.

* {{ltt|cpp/container/array|array::iterator}}.
* {{ltt|cpp/string/basic_string_view|basic_string_view::iterator}}.
* {{ltt|cpp/string/basic_string|basic_string::iterator}}.
* {{ltt|cpp/container/vector|vector::iterator}} for {{tt|value_type}} other than {{c|bool}}.
* The return type of {{ltt|cpp/numeric/valarray/begin2|begin{{dsc small|(valarray)}}}} and {{ltt|cpp/numeric/valarray/end2|end{{dsc small|(valarray)}}}}.

===Notes===
[[cpp/named req/Allocator#Fancy pointers|Fancy pointer]] to object types are also required to satisfy {{named req/core|ContiguousIterator}}.

{{rrev|since=c++20|
{{named req/core|ContiguousIterator}} is replaced with the {{lconcept|contiguous_iterator}} concept: iterator types in the standard library that are required to satisfy {{named req/core|ContiguousIterator}} in C++17 are required to model {{tt|contiguous_iterator}} in C++20.
}}

===See also===
{{dsc begin}}
{{dsc inc | cpp/iterator/dsc contiguous_iterator}}
{{see_also_iterator_library}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
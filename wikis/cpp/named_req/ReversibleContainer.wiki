{{cpp/named req/title|ReversibleContainer}}
{{cpp/named req/navbar}}

A {{named req|ReversibleContainer}} is a {{named req|Container}} that has iterators that meet the requirements of either {{named req|BidirectionalIterator}} or {{named req|RandomAccessIterator}}.  Such iterators allow a {{named req/core|ReversibleContainer}} to be iterated over in reverse.

===Requirements===
A type satisfies {{named req/core|ReversibleContainer}} if it satisfies {{named req|Container}}, its iterator type belongs to the bidirectional or random access [[cpp/iterator|iterator categories]] and, given the following types and values, the semantic and complexity requirements in the tables below are satisfied:
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|X}}|an {{named req/core|ReversibleContainer}} type}}
{{dsc|{{tt|T}}|the {{tt|value_type}} of {{tt|X}}}}
{{dsc hitem|Value|Definition}}
{{dsc|{{c|a}}|a value of type {{tt|X}}}}
{{dsc end}}

====Types====
{|class=wikitable
!Name
!Type
!Requirements
|-
|{{c/core|typename X::reverse_iterator}}
|{{c/core|std::reverse_iterator&lt;X::iterator&gt;}}
|an iterator type whose [[cpp/iterator|value type]] is {{tt|T}}
|-
|{{c/core|typename X::const_reverse_iterator}}{{nbsp}}
|{{c/core|std::reverse_iterator&lt;X::const_iterator&gt;}}{{nbsp}}
|a constant iterator type whose [[cpp/iterator|value type]] is {{tt|T}}
|}

====Expressions====
The types {{tt|reverse_iterator}} and {{tt|const_reverse_iterator}} in the following table denote {{c/core|typename X::reverse_iterator}} and {{c/core|typename X::const_reverse_iterator}} respectively.

{|class=wikitable
!Expression
!Type
!Semantics
!{{nbsp}}Complexity{{nbsp}}
|-
|{{c|a.rbegin()}}
|{{tt|reverse_iterator}}&lt;br&gt;{{tt|const_reverse_iterator}} for constant {{c|a}}
|{{c|reverse_iterator(a.end())}}
|Constant
|-
|{{c|a.rend()}}
|{{tt|reverse_iterator}}&lt;br&gt;{{tt|const_reverse_iterator}} for constant {{c|a}}
|{{c|reverse_iterator(a.begin())}}
|Constant
|-
|{{c|a.crbegin()}}
|{{tt|const_reverse_iterator}}
|{{c|const_cast&lt;const X&amp;&gt;(a).rbegin()}}
|Constant
|-
|{{c|a.crend()}}
|{{tt|const_reverse_iterator}}
|{{c|const_cast&lt;const X&amp;&gt;(a).rend()}}
|Constant
|}

===Library types===
The following standard library types satisfy {{named req/core|ReversibleContainer}} requirements:
{{dsc begin}}
{{dsc inc|cpp/container/dsc array}}
{{dsc inc|cpp/container/dsc deque}}
{{dsc inc|cpp/container/dsc list}}
{{dsc inc|cpp/container/dsc vector}}
{{dsc inc|cpp/container/dsc inplace_vector}}
{{dsc inc|cpp/container/dsc map}}
{{dsc inc|cpp/container/dsc multimap}}
{{dsc inc|cpp/container/dsc set}}
{{dsc inc|cpp/container/dsc multiset}}
{{dsc end}}

===Example===
{{example
|The following example iterates over a {{lc|std::vector|vector}} (which has [[cpp/container/vector#Member types|legacy random-access iterators]]) in reverse.
|code=
#include &lt;iostream&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;int&gt; v = {3, 1, 4, 1, 5, 9};
    
    for (std::vector&lt;int&gt;::const_reverse_iterator i{v.crbegin()}; i != v.crend(); ++i)
        std::cout &lt;&lt; *i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
9 5 1 4 1 3
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2105|std=C++98|before={{c/core|typename X::const_reverse_iterator}} was&lt;br&gt;required to be an iterator type of value type {{c/core|const T}}|after=required to be a constant&lt;br&gt;iterator type of value type {{tt|T}}}}
{{dr list end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/named req/title|FormattedOutputFunction}}
{{cpp/named req/navbar}}

===Requirements===
A {{named req/core|FormattedOutputFunction}} is a stream output function that performs the following:

* Constructs an object of type {{l2tt|cpp/io/basic_ostream/sentry}} with automatic storage duration, which performs the following:
:* if {{ltt|cpp/io/ios_base/iostate|eofbit}} or {{ltt|cpp/io/ios_base/iostate|badbit}} are set on the output stream, sets the {{tt|failbit}} as well, and if exceptions on {{tt|failbit}} are enabled in this output stream's [[cpp/io/basic_ios/exceptions|exception mask]] ({{c|1=(exceptions() &amp; failbit) != 0}}), throws {{l2tt|cpp/io/ios_base/failure}}.
:* flushes the tie()'d output stream, if applicable.
* Checks the status of the sentry by calling {{tt|sentry::operator bool()}}, which is equivalent to {{l2tt|cpp/io/basic_ios/good}}.
* If the sentry returned {{c|false}} or sentry's constructor threw an exception, no output takes place.
* If the sentry returned {{c|true}}, attempts to perform the desired output by inserting the characters into the output stream as if by calling {{c|rdbuf()-&gt;sputc()}}. Other public members of {{lc|std::basic_ostream}} may also be used, but virtual members of {{c|rdbuf()}} except {{ltt|cpp/io/basic_streambuf/overflow|overflow()}}, {{ltt|cpp/io/basic_streambuf/sputn|xsputn()}} and {{ltt|cpp/io/basic_streambuf/pubsync|sync()}} will never be called.
:* If the output could not be generated, sets {{tt|failbit}}. If exceptions on {{tt|failbit}} are enabled in this stream's [[cpp/io/basic_ios/exceptions|exception mask]] ({{c|1=(exceptions() &amp; failbit) != 0}}), throws {{l2tt|cpp/io/ios_base/failure}}.
:* if an exception is thrown during output, sets {{tt|badbit}} in the output stream. If exceptions on {{tt|badbit}} are enabled in this stream's [[cpp/io/basic_ios/exceptions|exception mask]] ({{c|1=(exceptions() &amp; badbit) != 0}}), the exception is also rethrown.
:* If no exception was thrown, returns {{c|*this}}.
* In any event, whether terminating by exception or returning, the sentry's destructor is called before leaving this function.

===Padding===
{{rrev multi|until1=c++14
|rev1=
Formatted output functions determine padding according to {{ltt|cpp/locale/num_put/put|std::num_put::do_put()}} stage 3.
|rev2=
If a formatted output function of a stream {{c|os}} determines padding, it does so as follows.

Given a {{tt|CharT}} character sequence {{c|seq}} where {{tt|CharT}} is the [[cpp/string|character container type]] of {{c|os}}, if the length of {{c|seq}} is less than {{c|os.width()}}, then enough copies of {{c|os.fill()}} are added to this sequence as necessary to pad to a width of {{c|os.width()}} characters.

If {{c|1=(os.flags() &amp; std::ios_base::adjustfield) == std::ios_base::left}} is {{c|true}}, the fill characters are placed after the character sequence; otherwise, they are placed before the character sequence.
}}

===Standard library===
The following standard library functions are {{named req|FormattedOutputFunction}}s.

* {{l2tt|cpp/io/basic_ostream/operator ltlt|operator&lt;&lt;{{dsc small|(std::basic_ostream&amp;, int / long / double / void* / bool)}}}}
* {{ltt|cpp/io/basic_ostream/operator ltlt2|operator&lt;&lt;{{dsc small|(std::basic_ostream&amp;, char)}}}}
* {{ltt|cpp/io/basic_ostream/operator ltlt2|operator&lt;&lt;{{dsc small|(std::basic_ostream&amp;, char*)}}}}
* {{ltt|cpp/utility/bitset/operator ltltgtgt2|operator&lt;&lt;{{dsc small|(std::basic_ostream&amp;, const std::bitset&amp;)}}}}
* {{ltt|cpp/string/basic_string/operator ltltgtgt|operator&lt;&lt;{{dsc small|(std::basic_ostream&amp;, const std::basic_string&amp;)}}}}
* {{tt|operator&lt;&lt; }}, when called on the return value of {{lc|std::put_money}}

{{rrev|since=c++17|
* {{ltt|cpp/string/basic_string_view/operator ltlt|operator&lt;&lt;{{dsc small|(std::basic_ostream&amp;, std::basic_string_view)}}}}
}}

{{rrev|since=c++23|
* {{ltt|cpp/io/basic_ostream/print|print{{dsc small|(std::ostream&amp;, std::format_string&lt;Args...&gt;, Args&amp;&amp;...)}}}},
* {{ltt|cpp/io/basic_ostream/println|println{{dsc small|(std::ostream&amp;, std::format_string&lt;Args...&gt;, Args&amp;&amp;...)}}}},
* {{ltt|cpp/io/basic_ostream/vprint_unicode|vprint_unicode{{dsc small|(std::ostream&amp;, std::string_view, std::format_args)}}}},
* {{ltt|cpp/io/basic_ostream/vprint_nonunicode|vprint_nonunicode{{dsc small|(std::ostream&amp;, std::string_view, std::format_args)}}}},
: except that (given {{c|os}} is an output stream object):
:* any exception thrown by the call to {{lc|std::vformat}} is propagated without regard to the value of {{c|os.exceptions()}} and without turning on {{lc|std::ios_base::badbit|ios_base::badbit}} in the error state of {{c|os}};
:* if inserting into {{c|os}} fails, calls {{c|os.setstate(ios_base::badbit)}} (which may throw {{lc|std::ios_base::failure|ios_base::failure}}).
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=160|std=C++98|before=the process of determining whether the exception caught&lt;br&gt;is rethrown mentioned a non-existing function {{tt|exception()}}|after=corrected to {{ltt|cpp/io/basic_ios/exceptions|exceptions()}}}}
{{dr list item|wg=lwg|dr=165|std=C++98|before=the only virtual member allowed to be&lt;br&gt;called on {{c|rdbuf()}} was {{tt|overflow()}}|after=also allowed&lt;br&gt;{{tt|xsputn()}} and {{tt|sync()}}}}
{{dr list end}}

{{langlinks|ja|zh}}
{{cpp/named req/title|DefaultInsertable|notes={{mark since c++11}}}}
{{cpp/named req/navbar}}

Specifies that an object of the type can be default-constructed in-place by a given allocator.

===Requirements===
Given the following types, values and expressions:
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|T}}|an object type}}
{{dsc|{{tt|A}}|an allocator type}}
{{dsc|{{tt|X}}|a container type satisfying all following conditions:
* {{tt|X::value_type}} is the same as {{tt|T}}.
* {{tt|X::allocator_type}} is the same as {{c/core|std::allocator_traits&lt;A&gt;::rebind_alloc&lt;T&gt;}}.
}}
{{dsc hitem|Value|Definition}}
{{dsc|{{c|m}}|an lvalue of type {{tt|A}}}}
{{dsc|{{c|p}}|a pointer of type {{tt|T*}}}}
{{dsc end}}

If the expression {{c|std::allocator_traits&lt;A&gt;::construct(m, p)}} is well-formed, {{tt|T}} is {{named req/core|DefaultInsertable}} into {{tt|X}}.

===Notes===
By default, this will [[cpp/language/value initialization|value-initialize]] the object, as by {{rev inl|until=c++20|{{c|::new((void*)p) T()}}}}{{rev inl|since=c++20|{{c|std::construct_at(p)}}}}.

If value-initialization is undesirable, for example, if the object is of non-class type and zeroing out is not needed, it can be avoided by providing a [https://stackoverflow.com/a/21028912/273767 custom {{tt|Allocator::construct}}].

Although it is required that customized {{tt|construct}} is used when constructing elements of {{lc|std::basic_string}} until C++23, all implementations only used the default mechanism. The requirement is corrected by {{wg21|P1072R10}} to match existing practice.

===Defect reports===
{{dr list begin}}
{{dr list item|paper=N3346|std=C++11|before=the requirements {{named req|CopyInsertable}} and {{named req|MoveInsertable}}&lt;br&gt;are present, but {{named req/core|DefaultInsertable}} was missing|after=added the requirement}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc|{{named req|DefaultConstructible}}}}
{{dsc|{{named req|CopyInsertable}}}}
{{dsc|{{named req|MoveInsertable}}}}
{{dsc|{{named req|EmplaceConstructible}}}}
{{dsc|{{named req|Erasable}}}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
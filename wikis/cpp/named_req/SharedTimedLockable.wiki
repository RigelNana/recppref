{{cpp/named req/title|SharedTimedLockable|notes={{mark since c++14}}}}
{{cpp/named req/navbar}}

The {{named req|SharedTimedLockable}} requirements describe the characteristics of types that provide timed shared blocking semantics for execution agents (threads, processes, tasks).

===Requirements===
* {{named req|SharedLockable}}

For type {{ttb|L}} to be {{named req/core|SharedTimedLockable}}, given
* {{tt|rel_time}}, a value of a specialization of {{lc|std::chrono::duration}}, and
* {{tt|abs_time}}, a value of a specialization of {{lc|std::chrono::time_point}},
the following conditions have to be satisfied for an object {{ttb|m}} of type {{ttb|L}}:

{|table class=wikitable
|-
!Expression!!Requires!!Return value
|-
|{{c|m.try_lock_shared_for(rel_time)}}
|Blocks for the provided duration {{tt|rel_time}} or until a lock on {{ttb|m}} is acquired.
|{{c|true}} if the lock was acquired, {{c|false}} otherwise.
|-
|{{c|m.try_lock_shared_until(abs_time)}}
|Blocks until the provided time point {{tt|abs_time}} is reached or a lock on {{ttb|m}} is acquired.
|{{c|true}} if the lock was acquired, {{c|false}} otherwise.
|}

===Notes===
The {{tt|try_lock_shared_for}} and {{tt|try_lock_shared_until}} member functions obtain a shared lock on {{c|m}} on success.

===Standard library===
The following standard library types satisfy {{named req/core|SharedTimedLockable}} requirements:
{{dsc begin}}
{{dsc inc|cpp/thread/dsc shared_timed_mutex}}
{{dsc end}}

===See also===
* [[cpp/thread|Thread support library]]
* {{named req|SharedTimedMutex}}
* {{named req|SharedLockable}}

{{langlinks|de|es|ja|ru|zh}}
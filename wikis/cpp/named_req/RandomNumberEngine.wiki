{{cpp/named req/title|RandomNumberEngine|notes={{mark since c++11}}}}
{{cpp/named req/navbar}}

A random number engine is a function object returning unsigned integer values such that each value in the range of possible results has (ideally) equal probability.

Any random number engine is also a {{named req|UniformRandomBitGenerator}}, and therefore may be plugged into any [[cpp/numeric/random|random number distribution]] in order to obtain a random number (formally, a random variate).

===Requirements===
A type satisfies {{named req/core|RandomNumberEngine}} if it satisfies {{named req|UniformRandomBitGenerator}} and, given the following types and values, the semantic and complexity requirements in the table below are satisfied:
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|E}}|a {{named req/core|RandomNumberEngine}} type}}
{{dsc|{{tt|T}}|{{tt|E::result_type}}}}
{{dsc hitem|Value|Definition}}
{{dsc|{{c|e}}|a value of type {{tt|E}}}}
{{dsc|{{c|v}}|an lvalue of type {{tt|E}}}}
{{dsc|{{c|x}}, {{c|y}}|values of type (possibly const-qualified) {{tt|E}}}}
{{dsc|{{c|s}}|a value of type {{tt|T}}}}
{{dsc|{{c|q}}|a {{named req|SeedSequence}} lvalue}}
{{dsc|{{c|z}}|a value of type {{c/core|unsigned long long}}}}
{{dsc|{{c|os}}|an lvalue whose type is a specialization of {{lc|std::basic_ostream}}}}
{{dsc|{{c|is}}|an lvalue whose type is a specialization of {{lc|std::basic_istream}}}}
{{dsc|{{c|n}}|the [[cpp/numeric/random#Random number engines|size]] of {{tt|E}}'s state}}
{{dsc|{{c|TA}}|the [[cpp/numeric/random#Random number engines|transition algorithm]] of {{tt|E}}}}
{{dsc|{{c|GA}}|the [[cpp/numeric/random#Random number engines|generation algorithm]] of {{tt|E}}}}
{{dsc end}}

{|class=wikitable
|-
!Expression
!Return type
!Semantics
!Complexity
|-
|{{c|E()}}
|rowspan=4 {{n/a}}
|Creates an engine with the same initial state as all other default-constructed engines of type {{tt|E}}.
|{{mathjax-or|\(\scriptsize O(n)\)|O(n)}}
|-
|{{c|E(x)}}
|Creates an engine that compares equal to {{c|x}}.
|{{mathjax-or|\(\scriptsize O(n)\)|O(n)}}
|-
|{{c|E(s)}}
|Creates an engine whose initial state is determined by {{c|s}}.
|{{mathjax-or|\(\scriptsize O(n)\)|O(n)}}
|-
|{{c|E(q)}}
|Creates an engine whose initial state is determined by a single call to {{tt|q.generate}}.
|same as the complexity of {{tt|q.generate}} called on a sequence whose length is {{c|n}}
|-
|{{c|e.seed()}}
|{{c/core|void}}
|Postcondition: {{c|1=e == E()}}.
|same as {{c|E()}}
|-
|{{c|e.seed(s)}}
|{{c/core|void}}
|Postcondition: {{c|1=e == E(s)}}.
|same as {{c|E(s)}}
|-
|{{c|e.seed(q)}}
|{{c/core|void}}
|Postcondition: {{c|1=e == E(q)}}.
|same as {{c|E(q)}}
|-
|{{c|e()}}
|{{tt|T}}
|Advances {{c|e}}’s state from {{box|{{tt|e{{su|b=i}}}}}} to {{box|{{tt|e{{su|b=i+1}}}}}} (i.e. {{box|{{c/core|TA(e}}{{su|b={{tt|i}}}}{{c/core|)}}}}) and returns {{box|{{c/core|GA(e}}{{su|b={{tt|i}}}}{{c/core|)}}}}.
|amortized constant
|-
|{{c|e.discard(z)}}
|{{c/core|void}}
|Advances {{c|e}}’s state from {{box|{{tt|e{{su|b=i}}}}}} to {{box|{{tt|e{{su|b=i+z}}}}}} by any means equivalent to {{c|z}} consecutive calls of {{c|e()}}.
|no worse than the complexity of {{c|z}} consecutive calls of {{c|e()}}
|-
|{{c|1=x == y}}
|{{c/core|bool}}
|For all positive integer {{c|i}}, if the {{c|i}}th consecutive calls of {{c|x()}} and {{c|y()}} return the same value, returns {{c|true}}. Otherwise returns {{c|false}}.
|{{mathjax-or|\(\scriptsize O(n)\)|O(n)}}
|-
|{{c|1=x != y}}
|{{c/core|bool}}
|{{c|1=!(x == y)}}
|{{mathjax-or|\(\scriptsize O(n)\)|O(n)}}
|-
|{{c|os &lt;&lt; x}}
|{{c/core|decltype(os)&amp;}}{{nbsp}}
|With fmtflags set to {{c|std::ios_base::dec {{!}} std::ios_base::left}} and the fill character set to the space character, writes to {{c|os}} the textual representation of {{c|x}}'s current state.{{p|Postcondition: {{c|os}}'s fmtflags and the fill character are the same as before.}}
|{{mathjax-or|\(\scriptsize O(n)\)|O(n)}}
|-
|{{c|is &gt;&gt; v}}
|{{c/core|decltype(is)&amp;}}
|With fmtflags set to {{c|std::ios_base::dec}}, reads from {{c|is}} the textual representation of {{c|v}}'s current state. If bad input is encountered, ensures that {{c|v}}’s state is unchanged by the operation and calls {{c|is.setstate(std::ios_base::failbit)}} (which may throw {{lc|std::ios_base::failure}}).{{p|Precondition: {{c|is}} provides a textual representation that was previously written using an output stream {{c|pr}} satisfying all following conditions:}}
* {{c|1=is.getloc() == pr.getloc()}} is {{c|true}}.
* {{box|{{c/core|std::is_same&lt;decltype(is)::char_type,}}&lt;br&gt;{{nbspt|13}}{{c/core|decltype(pr)::char_type&gt;::value}}}} is {{c|true}}.
* {{box|{{c/core|std::is_same&lt;decltype(is)::traits_type,}}&lt;br&gt;{{nbspt|13}}{{c/core|decltype(pr)::traits_type&gt;::value}}}} is {{c|true}}.
{{p|Postcondition: {{c|is}}'s fmtflags are the same as before.}}
|{{mathjax-or|\(\scriptsize O(n)\)|O(n)}}
|}

===Standard library===
The following standard library facilities satisfy {{named req/core|RandomNumberEngine}}:
{{dsc begin}}
{{dsc inc|cpp/numeric/random/dsc linear_congruential_engine}}
{{dsc inc|cpp/numeric/random/dsc mersenne_twister_engine}}
{{dsc inc|cpp/numeric/random/dsc subtract_with_carry_engine}}
{{dsc inc|cpp/numeric/random/dsc philox_engine}}
{{dsc inc|cpp/numeric/random/dsc discard_block_engine}}
{{dsc inc|cpp/numeric/random/dsc independent_bits_engine}}
{{dsc inc|cpp/numeric/random/dsc shuffle_order_engine}}
{{dsc end}}

The following standard library facilities satisfy {{named req|UniformRandomBitGenerator}} but not {{named req/core|RandomNumberEngine}}:
{{dsc begin}}
{{dsc inc|cpp/numeric/random/dsc random_device}}
{{dsc end}}

{{langlinks|es|ja|zh}}
{{cpp/named req/title|BasicLockable|notes={{mark since c++11}}}}
{{cpp/named req/navbar}}

The {{named req|BasicLockable}} requirements describe the minimal characteristics of types that provide exclusive blocking semantics for execution agents (i.e. threads).

===Requirements===
For type {{ttb|L}} to be {{named req/core|BasicLockable}}, the following conditions have to be satisfied for an object {{ttb|m}} of type {{ttb|L}}:
{|table class=wikitable
|-
!Expression||Preconditions||Effects
|-
|{{c|m.lock()}}
|
|Blocks until a lock can be acquired for the current execution agent (thread, process, task).  If an exception is thrown, no lock is acquired.
|-
|{{c|m.unlock()}}
|The current execution agent holds a non-shared lock on {{tt|m}}.
|Releases the non-shared lock held by the execution agent.

Throws no exceptions.
|}

====Non-shared locks====
A lock on an object is said to be ''non-shared lock'' if it is acquired by a call to {{tt|lock}}, {{tt|try_lock}}, {{tt|try_lock_for}}, or {{tt|try_lock_until}} member function.

===Standard library===
The following standard library types satisfy {{named req/core|BasicLockable}} requirements:
{{dsc begin}}
{{dsc inc|cpp/thread/dsc mutex}}
{{dsc inc|cpp/thread/dsc recursive_mutex}}
{{dsc inc|cpp/thread/dsc recursive_timed_mutex}}
{{dsc inc|cpp/thread/dsc shared_mutex}}
{{dsc inc|cpp/thread/dsc shared_timed_mutex}}
{{dsc inc|cpp/thread/dsc timed_mutex}}&lt;!--
{{dsc inc|cpp/thread/dsc rcu_domain}}--&gt;
{{dsc end}}

===See also===
* [[cpp/thread|Thread support library]]
* {{named req|Mutex}}
* {{named req|Lockable}}
* {{named req|TimedLockable}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
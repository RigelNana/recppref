{{cpp/named req/title|FunctionObject}}
{{cpp/named req/navbar}}

A {{named req|FunctionObject}} type is the type of an object that can be used on the left of the function call operator.

===Requirements===
The type {{tt|T}} satisfies {{named req/core|FunctionObject}} if

* The type {{tt|T}} satisfies {{lc|std::is_object}}, and

Given
* {{tt|f}}, a value of type {{tt|T}} or {{tt|const T}},
* {{tt|args}}, suitable argument list, which may be empty.

The following expressions must be valid:

{|table class=wikitable
|-
!Expression||Requirements
|-
|{{c|1=f(args)}}
|performs a function call
|}

===Notes===
Functions and references to functions are not function object types, but can be used where function object types are expected due to function-to-pointer [[cpp/language/implicit_cast|implicit conversion]].

===Standard library===
* All [[cpp/language/pointer#Pointers_to_functions|pointers to functions]] satisfy this requirement.
* All function objects defined in {{header|functional}}.
* Some return types of functions of {{header|functional}}.

===Example===
{{example
|Demonstrates different types of function objects.
|code=
#include &lt;functional&gt;
#include &lt;iostream&gt;

void foo(int x) { std::cout &lt;&lt; "foo(" &lt;&lt; x &lt;&lt; ")\n"; }
void bar(int x) { std::cout &lt;&lt; "bar(" &lt;&lt; x &lt;&lt; ")\n"; }

int main()
{
    void(*fp)(int) = foo;
    fp(1); // calls foo using the pointer to function

    std::invoke(fp, 2); // all FunctionObject types are Callable

    auto fn = std::function(foo); // see also the rest of &lt;functional&gt;
    fn(3);
    fn.operator()(3); // the same effect as fn(3)

    struct S
    {
        void operator()(int x) const { std::cout &lt;&lt; "S::operator(" &lt;&lt; x &lt;&lt; ")\n"; }
    } s;
    s(4); // calls s.operator()
    s.operator()(4); // the same as s(4)

    auto lam = [](int x) { std::cout &lt;&lt; "lambda(" &lt;&lt; x &lt;&lt; ")\n"; };
    lam(5); // calls the lambda
    lam.operator()(5); // the same as lam(5)

    struct T
    {
        using FP = void (*)(int);
        operator FP() const { return bar; }
    } t;
    t(6); // t is converted to a function pointer
    static_cast&lt;void (*)(int)&gt;(t)(6); // the same as t(6)
    t.operator T::FP()(6); // the same as t(6) &lt;!-- operator FP() might be allowed by the standard but not all compilers accept it. See: p1787r6 --&gt;
}
|output=
foo(1)
foo(2)
foo(3)
foo(3)
S::operator(4)
S::operator(4)
lambda(5)
lambda(5)
bar(6)
bar(6)
bar(6)
}}

===See also===
{{dsc begin}}
{{dsc named req|cpp/named req/Callable|a type for which the invoke operation is defined}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/named req/title|RangeAdaptorObject|notes={{mark since c++20}}}}
{{cpp/named req/navbar}}

''Range adaptor objects'' are customization point objects that accept {{lconcept|viewable_range}} as their first arguments and return a {{lconcept|view}}. Some range adaptor objects are unary, i.e. they take one {{lconcept|viewable_range}} as their only argument. Other range adaptor objects take a {{lconcept|viewable_range}} and other trailing arguments.

If a range adaptor object takes only one argument, it is also a {{named req|RangeAdaptorClosureObject}}.

If a range adaptor object takes more than one argument, it also supports partial application: let
* {{c|a}} be such a range adaptor object, and
* {{c|args...}} be arguments (generally suitable for trailing arguments),
expression {{c|a(args...)}} has following properties:
* it is valid if and only if for every argument {{c|e}} in {{c|args...}} such that {{tt|E}} is {{c|decltype((e))}}, {{c|std::is_constructible_v&lt;std::decay_t&lt;E&gt;, E&gt;}} is {{c|true}},
* when the call is valid, its result object stores a subobject of type {{c|std::decay_t&lt;E&gt;}} direct-non-list-initialized with {{c|std::forward&lt;E&gt;(e)}}, for every argument {{c|e}} in {{c|args...}} (in other words, range adaptor objects bind arguments by value),
* the result object is a {{named req|RangeAdaptorClosureObject}},
* calling the {{named req|RangeAdaptorClosureObject}} forwards the bound arguments (if any) to the associated range adaptor object. The bound arguments (if any) are considered to have the value category and cv-qualification of the {{named req|RangeAdaptorClosureObject}}. {{rev inl|since=c++23|In other words, {{c|a(args...)(r)}} is equivalent to {{c|std::bind_back(a, args...)(r)}} (but the former also supports the pipe syntax).}}

Like other customization point objects, let
* {{c|a}} be an object of the cv-unqualified version of the type of any range adaptor objects,
* {{c|args...}} be any group of arguments that satisfies the constraints of the {{c|operator()}} of the type of {{c|a}},
calls to
* {{c|a(args...)}},
* {{c|std::as_const(a)(args...)}},
* {{c|std::move(a)(args...)}}, and
* {{c|std::move(std::as_const(a))(args...)}}
are all equivalent.

The result object of each of these expressions is either a {{lconcept|view}} object or a {{named req|RangeAdaptorClosureObject}}.

===Notes===
{{c|operator()}} is unsupported for volatile-qualified or const-volatile-qualified version of range adaptor object types. Arrays and functions are converted to pointers while binding.

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
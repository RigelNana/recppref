{{cpp/named req/title|BinaryPredicate}}
{{cpp/named req/navbar}}

{{named req|BinaryPredicate}} is a set of requirements expected by some of the standard library facilities from the user-provided arguments.

Given a {{named req/core|BinaryPredicate}} {{tt|bin_pred}} and a pair of iterators {{tt|iter1}} and {{tt|iter2}} or an iterator {{tt|iter}} and a (possibly {{tt|const}}) value {{tt|value}}, the type and value category of the expression {{c|bin_pred(*iter1, *iter2)}} or, respectively, {{c|bin_pred(*iter, value)}}, must meet the {{named req|BooleanTestable}} requirements.

In addition, evaluation of that expression is not allowed to call non-const member functions of the dereferenced iterators; syntactically, the predicate must accept {{tt|const}} object arguments, with the same behavior regardless of whether its arguments are {{tt|const}} or non-{{tt|const}}.

===Requirements===
* {{named req|Predicate}}
* {{named req|CopyConstructible}} (unless otherwise specified)

===Standard library===
The following standard library facilities expect a {{named req/core|BinaryPredicate}} which isn't a {{named req|Compare}} type.
{{dsc begin}}
{{dsc inc | cpp/container/dsc unique | forward_list}}
{{dsc inc | cpp/container/dsc unique | list}}
{{dsc inc | cpp/algorithm/dsc find_end}}
{{dsc inc | cpp/algorithm/dsc find_first_of}}
{{dsc inc | cpp/algorithm/dsc adjacent_find}}
{{dsc inc | cpp/algorithm/dsc mismatch}}
{{dsc inc | cpp/algorithm/dsc equal}}
{{dsc inc | cpp/algorithm/dsc is_permutation}}
{{dsc inc | cpp/algorithm/dsc search}}
{{dsc inc | cpp/algorithm/dsc search_n}}
{{dsc inc | cpp/algorithm/dsc unique}}
{{dsc inc | cpp/algorithm/dsc unique_copy}}
{{dsc inc | cpp/utility/functional/dsc not2}}
{{dsc inc | cpp/container/dsc unordered_set}}
{{dsc inc | cpp/container/dsc unordered_map}}
{{dsc inc | cpp/container/dsc unordered_multiset}}
{{dsc inc | cpp/container/dsc unordered_multimap}}
{{dsc end}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2114|paper=P2167R3|std=C++98|before=convertibility of return types to {{c/core|bool}} was too weak&lt;br&gt;to reflect the expectation of implementations|after=requirements strengthened}}
{{dr list item|wg=lwg|dr=3031|std=C++98|before=requirements on {{tt|const}} values were insufficent|after=requirements strengthened}}
{{dr list end}}

{{langlinks|es|ja|zh}}
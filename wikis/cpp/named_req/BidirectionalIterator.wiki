{{cpp/named req/title|BidirectionalIterator}}
{{cpp/named req/navbar}}

A {{named req|BidirectionalIterator}} is a {{named req|ForwardIterator}} that can be moved in both directions (i.e. incremented and decremented). 

If a {{named req|BidirectionalIterator}} {{c|it}} originates from a {{named req|Container}}, then {{c|it}}'s {{tt|value_type}} is the same as the container's, so dereferencing ({{c|*it}}) obtains the container's {{tt|value_type}}.

===Requirements===
The type {{tt|It}} satisfies {{named req/core|BidirectionalIterator}} if
* The type {{tt|It}} satisfies {{named req|ForwardIterator}}

And, given
* {{c|a}} and {{c|b}}, lvalues of type {{tt|It}}
* {{tt|reference}}, the type denoted by {{c/core|std::iterator_traits&lt;It&gt;::reference}}

The following expressions must be valid and have their specified effects:
{|table class="wikitable"
|-
!Expression||Return||Equivalent expression||Notes
|-
|{{c|--a}}||{{tt|It&amp;}}|| ||Preconditions:
* {{c|a}} is decrementable (there exists such {{c|b}} that {{c|1=a == ++b}})
Postconditions:
* {{c|a}} is [[cpp/iterator#Dereferenceability and validity|dereferenceable]]
* {{c|1=--(++a) == a}}
* If {{c|1=--a == --b}} then {{c|1=a == b}}
* {{c|a}} and {{c|--a}} designate the same iterator object
|-
|{{c|a--}}|| convertible to {{c/core|const It&amp;}}||{{c|1=
It temp = a;
--a;
return temp;
}} ||
|-
|{{c|*a--}}||{{tt|reference}}|| ||
|-
|}
A ''mutable'' {{named req/core|BidirectionalIterator}} is a {{named req/core|BidirectionalIterator}} that additionally satisfies the {{named req|OutputIterator}} requirements.

===Notes===
The begin iterator is not decrementable and the behavior is undefined if {{c|--container.begin()}} is evaluated.

A bidirectional iterator does not have to be dereferenceable to be decrementable (in particular, the end iterator is not dereferenceable but is decrementable).

{{rrev|since=c++20|
===Concept===
For the definition of {{lc|std::iterator_traits}}, the following exposition-only concept is defined.

{{dcl begin}}
{{dcl|1=
template&lt;class I&gt;
concept __LegacyBidirectionalIterator&lt;!-- called cpp17-bidirectional-iterator in the standard --&gt; =
    __LegacyForwardIterator&lt;I&gt; &amp;&amp; requires(I i)
    {
        {  --i } -&gt; std::same_as&lt;I&amp;&gt;;
        {  i-- } -&gt; std::convertible_to&lt;const I&amp;&gt;;
        { *i-- } -&gt; std::same_as&lt;std::iter_reference_t&lt;I&gt;&gt;;
    };
}}
{{dcl end}}

where the exposition-only concept {{tt|__LegacyForwardIterator}} is described in {{rlp|ForwardIterator#Concept|LegacyForwardIterator}}.
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=299|paper=N3066|std=C++98|before=the return type of {{c|*a--}} was&lt;br&gt;required to be convertible to {{tt|T}}|after=changed the return&lt;br&gt;type to {{tt|reference}}&lt;ref&gt;This issue was initially resolved by {{stddoc|N2758}} (iterator concepts), which was dropped later from the C++ standard.&lt;/ref&gt;}}
{{dr list item|wg=lwg|dr=383|std=C++98|before={{c|b}} was required to be dereferenceable after {{c|--a}}|after={{c|a}} is required to be dereferenceable instead}}
{{dr list item|wg=lwg|dr=1212|paper=N3066|std=C++98|before=the return type of {{c|*a--}} did not match the return&lt;br&gt;type of {{c|*a++}} required by {{named req|ForwardIterator}}|after=changed the return&lt;br&gt;type to {{tt|reference}}}}
{{dr list end}}
&lt;references/&gt;

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc bidirectional_iterator}}
{{see_also_iterator_library}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
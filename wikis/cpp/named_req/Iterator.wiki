{{cpp/named req/title|Iterator}}
{{cpp/named req/navbar}}

The {{named req|Iterator}} requirements describe types that can be used to identify and traverse the elements of a container.

{{named req/core|Iterator}} is the base set of requirements used by other iterator types: {{named req|InputIterator}}, {{named req|OutputIterator}}, {{named req|ForwardIterator}}, {{named req|BidirectionalIterator}}, and {{named req|RandomAccessIterator}}. Iterators can be thought of as an abstraction of pointers.

All the categories of iterators require only those functions that are realizable for a given category in constant time (amortized). Therefore, requirement tables {{rev inl|since=c++20|and concept definitions}}for the iterators do not specify complexity.

===Requirements===
The type {{tt|It}} satisfies {{named req/core|Iterator}} if
* The type {{tt|It}} satisfies {{named req|CopyConstructible}}, and
* The type {{tt|It}} satisfies {{named req|CopyAssignable}}, and
* The type {{tt|It}} satisfies {{named req|Destructible}}, and
* The type {{tt|It}} satisfies {{named req|Swappable}}, and
* {{c/core|std::iterator_traits&lt;It&gt;}} has member typedefs {{rev inl|until=c++20|{{tt|value_type}}}}, {{tt|difference_type}}, {{tt|reference}}, {{tt|pointer}}, and {{tt|iterator_category}} {{mark unreviewed dr|LWG|2578}}, and
* Given {{c|r}}, an lvalue of type {{tt|It}}, the following expressions must be valid and have their specified effects:

{|table class=wikitable
|-
!Expression||Return Type||Precondition
|-
|{{c|*r}}
|unspecified
|{{c|r}} is [[cpp/iterator#Dereferenceability and validity|dereferenceable]]
|-
|{{c|++r}}
|{{c|It&amp;}}
|{{c|r}} is ''incrementable'' (the behavior of the expression {{c|++r}} is defined)
|}

{{rrev|since=c++20|
===Concept===
For the definition of {{lc|std::iterator_traits}}, the following exposition-only concept is defined.

{{dcl begin}}
{{dcl|1=
template&lt;class I&gt;
concept __LegacyIterator&lt;!-- called cpp17-iterator in the standard --&gt; =
    requires(I i)
    {
        {   *i } -&gt; __Referenceable;&lt;!-- called can-reference in the standard --&gt;
        {  ++i } -&gt; std::same_as&lt;I&amp;&gt;;
        { *i++ } -&gt; __Referenceable;
    } &amp;&amp; std::copyable&lt;I&gt;;
}}
{{dcl end}}

where the exposition-only concept {{c/core|__Referenceable&lt;T&gt;}} is satisfied if and only if {{c/core|T&amp;}} is a valid type (in particular, {{tt|T}} must not be {{c/core|void}}).
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2437|std=C++98|before={{c/core|*r}} is required to be {{tt|reference}}|after=not required for output iterators}}
{{dr list item|wg=lwg|dr=3420|std=C++20|before=the exposition-only concept checks {{tt|copyable}} first|after={{tt|copyable}} is checked only if the requires-expression yields true}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc input_or_output_iterator}}
{{see_also_iterator_library}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
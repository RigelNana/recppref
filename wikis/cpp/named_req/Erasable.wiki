{{cpp/named req/title|Erasable|notes={{mark since c++11}}}}
{{cpp/named req/navbar}}

Specifies that an object of the type can be destroyed by a given {{named req|Allocator}}.

===Requirements===
Given the following types, values and expressions:
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|T}}|an object type}}
{{dsc|{{tt|A}}|an allocator type}}
{{dsc|{{tt|X}}|a container type satisfying all following conditions:
* {{tt|X::value_type}} is the same as {{tt|T}}.
* {{tt|X::allocator_type}} is the same as {{c/core|std::allocator_traits&lt;A&gt;::rebind_alloc&lt;T&gt;}}.
}}
{{dsc hitem|Value|Definition}}
{{dsc|{{c|m}}|an lvalue of type {{tt|A}}}}
{{dsc|{{c|p}}|a pointer of type {{tt|T*}}}}
{{dsc end}}

If the expression {{c|std::allocator_traits&lt;A&gt;::destroy(m, p)}} is well-formed, {{tt|T}} is {{named req/core|Erasable}} from {{tt|X}}.

===Notes===
All [[cpp/container|standard library containers]] require that their value types satisfy {{named req/core|Erasable}}.

{{rrev multi
|until1=c++20|rev1=
With the default allocator, this requirement is equivalent to the validity of {{c|p-&gt;~T()}}, which accepts class types with accessible destructors and all scalar types, but rejects array types, function types, reference types, and {{c/core|void}}.
|rev2=
With the default allocator, this requirement is equivalent to the validity of {{c|std::destroy_at(p)}}, which accepts class types with accessible destructors and all scalar types, as well as arrays thereof.
}}

Although it is required that customized {{tt|destroy}} is used when destroying elements of {{lc|std::basic_string}} until C++23, all implementations only used the default mechanism. The requirement is corrected by {{wg21|P1072R10}} to match existing practice.

===Defect reports===
{{dr list begin}}
{{dr list item|paper=N3346|std=C++11|before=there was no requirement to specify whether a type&lt;br&gt;whose objects can be destroyed using allocators|after=added the requirement}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc|{{named req|CopyInsertable}}}}
{{dsc|{{named req|MoveInsertable}}}}
{{dsc|{{named req|EmplaceConstructible}}}}
{{dsc|{{named req|Destructible}}}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
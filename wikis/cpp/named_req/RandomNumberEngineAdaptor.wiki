{{cpp/named req/title|RandomNumberEngineAdaptor|notes={{mark since c++11}}}}
{{cpp/named req/navbar}}

A {{named req|RandomNumberEngineAdaptor}} is a {{named req|RandomNumberEngine}} that transforms the output of another {{named req|RandomNumberEngine}}, the latter of which is termed a ''base engine''.

===Requirements===
Given
* {{c|B}}, a {{named req|RandomNumberEngine}}
* {{c|b}}, an object of type {{c|B}}
* {{c|A}}, a {{named req|RandomNumberEngineAdaptor}}, adapting {{c|B}} as a base engine
* {{c|a}}, an object of type {{c|A}}

{|class=wikitable
!function||semantics
|-
|{{c|A::A();}} || The base engine is initialized as if by its default constructor.
|-
|{{c|bool operator{{==}}(const A&amp; lhs, const A&amp; rhs);}} || Returns whether {{c|lhs}}'s base engine is equal to {{c|rhs}}'s base engine or not.
|-
|{{c|A::A(result_type s);}} || The base engine is initialized with {{c|s}}.
|-
|{{c|template&lt;class Sseq&gt; A::A(Sseq&amp; q);}} || The base engine is initialized with {{c|q}}.
|-
|{{c|void seed();}} || Invokes {{c|b.seed()}}.
|-
|{{c|void seed(result_type s);}} || Invokes {{c|b.seed(s)}}.
|-
|{{c|template&lt;class Sseq&gt; void seed(Sseq&amp; q);}} || Invokes {{c|b.seed(q)}}.
|}

Furthermore
* The complexity of each function of {{c|A}} does not exceed the complexity of the function of {{c|B}}
* The state of {{c|A}} includes the state of {{c|B}}
* The size of {{c|A}}'s state is no less than the size of {{c|b}}
* Copying {{c|A}}'s state includes copying {{c|B}}'s state
* The textual representation of {{c|A}} includes the textual representation of {{c|B}}

===Standard library===
The following standard library facilities satisfy {{named req|RandomNumberEngineAdaptor}}:
{{dsc begin}}
{{dsc inc | cpp/numeric/random/dsc discard_block_engine}}
{{dsc inc | cpp/numeric/random/dsc independent_bits_engine}}
{{dsc inc | cpp/numeric/random/dsc shuffle_order_engine}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{title|Filesystem library {{mark since c++17}}}}
{{cpp/filesystem/navbar}}
The Filesystem library provides facilities for performing operations on file systems and their components, such as paths, regular files, and directories.

The filesystem library was originally developed as [https://www.boost.org/doc/libs/release/libs/filesystem/doc/index.htm boost.filesystem], was published as [[cpp/experimental/fs|the technical specification ISO/IEC TS 18822:2015]], and finally merged to ISO C++ as of C++17. The boost implementation is currently available on more compilers and platforms than the C++17 library.

The filesystem library facilities may be unavailable if a hierarchical file system is not accessible to the implementation, or if it does not provide the necessary capabilities. Some features may not be available if they are not supported by the underlying file system (e.g. the FAT filesystem lacks symbolic links and forbids multiple hardlinks). In those cases, errors must be reported.

The behavior is [[cpp/language/ub|undefined]] if the calls to functions in this library introduce a ''file system race'', that is, when multiple threads, processes, or computers interleave access and modification to the same object in a file system.

====Library-wide definitions====
* ''file'': a file system object that holds data, can be written to, read from, or both. Files have names, attributes, one of which is file type:
:* ''directory'': a file that acts as a container of directory entries, which identify other files (some of which may be other, nested directories). When discussing a particular file, the directory in which it appears as an entry is its ''parent directory''. The parent directory can be represented by the relative pathname {{c|".."}}.
:* ''regular file'': a directory entry that associates a name with an existing file (i.e. a ''hard link''). If multiple hard links are supported, the file is removed after the last hard link to it is removed.
:* ''symbolic link'': a directory entry that associates a name with a path, which may or may not exist.
:* other special file types: ''block'', ''character'', ''fifo'', ''socket''.
* ''file name'': a string of characters that names a file. Permissible characters, case sensitivity, maximum length, and the disallowed names are implementation-defined. Names {{c|"."}} (dot) and {{c|".."}} (dot-dot) have special meaning at library level.
* ''path'': sequence of elements that identifies a file. It begins with an optional {{spar|root-name}} (e.g. {{c|"C:"}} or {{c|"//server"}} on Windows), followed by an optional {{spar|root-directory}} (e.g. {{c|"/"}} on Unix), followed by a sequence of zero or more file names (all but last of which have to be directories or links to directories). The native format (e.g. which characters are used as separators) and character encoding of the string representation of a path (the ''pathname'') is implementation-defined, this library provides portable representation of paths.
:* ''absolute path'': a path that unambiguously identifies the location of a file.
:* ''canonical path'': an absolute path that includes no symlinks, {{c|"."}} or {{c|".."}} elements.
:* ''relative path'': a path that identifies the location of a file relative to some location on the file system. The special path names {{c|"."}} (dot, "current directory") and {{c|".."}} (dot-dot, "parent directory") are relative paths.

{{dsc begin}}
{{dsc h1|Classes}}
{{dsc header|filesystem}}
{{dsc namespace|std::filesystem}}
{{dsc inc|cpp/filesystem/dsc path}}&lt;!--including swap, hash_value, comparisons, /, &lt;&lt;, &gt;&gt;, and u8path--&gt;
{{dsc inc|cpp/filesystem/dsc filesystem_error}}
{{dsc inc|cpp/filesystem/dsc directory_entry}}
{{dsc inc|cpp/filesystem/dsc directory_iterator}}&lt;!--including begin,end--&gt;
{{dsc inc|cpp/filesystem/dsc recursive_directory_iterator}}&lt;!--including begin,end--&gt;
{{dsc inc|cpp/filesystem/dsc file_status}}
{{dsc inc|cpp/filesystem/dsc space_info}}
{{dsc inc|cpp/filesystem/dsc file_type}}
{{dsc inc|cpp/filesystem/dsc perms}}
{{dsc inc|cpp/filesystem/dsc perm_options}}
{{dsc inc|cpp/filesystem/dsc copy_options}}
{{dsc inc|cpp/filesystem/dsc directory_options}}
{{dsc inc|cpp/filesystem/dsc file_time_type}}
{{dsc h1|Non-member functions}}
{{dsc header|filesystem}}
{{dsc namespace|std::filesystem}}
{{dsc inc|cpp/filesystem/dsc absolute}}&lt;!--including system_complete--&gt;
{{dsc inc|cpp/filesystem/dsc canonical}}&lt;!--including weakly_canonical--&gt;
{{dsc inc|cpp/filesystem/dsc relative}}&lt;!--including proximate--&gt;
{{dsc inc|cpp/filesystem/dsc copy}}
{{dsc inc|cpp/filesystem/dsc copy_file}}
{{dsc inc|cpp/filesystem/dsc copy_symlink}}
{{dsc inc|cpp/filesystem/dsc create_directory}}&lt;!--including create_directories--&gt;
{{dsc inc|cpp/filesystem/dsc create_hard_link}}
{{dsc inc|cpp/filesystem/dsc create_symlink}}&lt;!--including create_directory_symlink--&gt;
{{dsc inc|cpp/filesystem/dsc current_path}}
{{dsc inc|cpp/filesystem/dsc exists}}
{{dsc inc|cpp/filesystem/dsc equivalent}}
{{dsc inc|cpp/filesystem/dsc file_size}}
{{dsc inc|cpp/filesystem/dsc hard_link_count}}
{{dsc inc|cpp/filesystem/dsc last_write_time}}
{{dsc inc|cpp/filesystem/dsc permissions}}
{{dsc inc|cpp/filesystem/dsc read_symlink}}
{{dsc inc|cpp/filesystem/dsc remove}}&lt;!--including remove_all--&gt;
{{dsc inc|cpp/filesystem/dsc rename}}
{{dsc inc|cpp/filesystem/dsc resize_file}}
{{dsc inc|cpp/filesystem/dsc space}}
{{dsc inc|cpp/filesystem/dsc status}}&lt;!--including symlink_status--&gt;
{{dsc inc|cpp/filesystem/dsc temp_directory_path}}
{{dsc h2|File types}}
{{dsc inc|cpp/filesystem/dsc is_block_file}}
{{dsc inc|cpp/filesystem/dsc is_character_file}}
{{dsc inc|cpp/filesystem/dsc is_directory}}
{{dsc inc|cpp/filesystem/dsc is_empty}}
{{dsc inc|cpp/filesystem/dsc is_fifo}}
{{dsc inc|cpp/filesystem/dsc is_other}}
{{dsc inc|cpp/filesystem/dsc is_regular_file}}
{{dsc inc|cpp/filesystem/dsc is_socket}}
{{dsc inc|cpp/filesystem/dsc is_symlink}}
{{dsc inc|cpp/filesystem/dsc status_known}}
{{dsc end}}

===Notes===
Using this library may require additional compiler/linker options. GNU implementation prior to 9.1 requires linking with {{box|{{tt|-lstdc++fs}}}} and LLVM implementation prior to LLVM 9.0 requires linking with {{box|{{tt|-lc++fs}}}}.

{{feature test macro|__cpp_lib_filesystem|std=C++17|value=201703L|Filesystem library|value=201703L|std=C++17}}

===See also===
{{dsc begin}}
{{dsc see cpp|cpp/experimental/fs|File System TS|nomono=true}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
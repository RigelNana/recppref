{{cpp/title|distance}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl|notes={{mark|constexpr since C++17}}|
template&lt; class InputIt &gt;
typename std::iterator_traits&lt;InputIt&gt;::difference_type 
    distance( InputIt first, InputIt last );
}}
{{dcl end}}

Returns the number of hops from {{c|first}} to {{c|last}}.

If {{tt|InputIt}} is not {{named req|RandomAccessIterator}}, the behavior is undefined if {{c|last}} is not [[cpp/iterator#Ranges|reachable]] from {{c|first}}.

If {{tt|InputIt}} is {{named req|RandomAccessIterator}}, the behavior is undefined if {{c|first}} and {{c|last}} are neither reachable from each other.

===Parameters===
{{par begin}}
{{par|first|iterator pointing to the first element}}
{{par|last|iterator pointing to the end of the range}}
{{par hreq}}
{{par req named|InputIt|InputIterator|notes=The operation is more efficient if {{tt|InputIt}} additionally meets the requirements of {{named req|RandomAccessIterator}}.}}
{{par end}}

===Return value===
The number of increments needed to go from {{c|first}} to {{c|last}}.

{{rrev|since=c++11|
The value may be negative if random-access iterators are used and {{c|first}} is reachable from {{c|last}}.
}}

===Complexity===
Linear. 

However, if {{tt|InputIt}} additionally meets the requirements of {{named req|RandomAccessIterator}}, complexity is constant.

===Possible implementation===
See also the implementations in [https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_iterator_base_funcs.h#L135 libstdc++] and [https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/iterator#L611 libc++].
{{eq impl
|title1=C++98 implementation via tag dispatch, with {{c/core|constexpr}} removed|1=
namespace detail
{
    template&lt;class It&gt;
    constexpr // required since C++17
    typename std::iterator_traits&lt;It&gt;::difference_type 
        do_distance(It first, It last, std::input_iterator_tag)
    {
        typename std::iterator_traits&lt;It&gt;::difference_type result = 0;
        while (first != last)
        {
            ++first;
            ++result;
        }
        return result;
    }
    
    template&lt;class It&gt;
    constexpr // required since C++17
    typename std::iterator_traits&lt;It&gt;::difference_type 
        do_distance(It first, It last, std::random_access_iterator_tag)
    {
        return last - first;
    }
} // namespace detail

template&lt;class It&gt;
constexpr // since C++17
typename std::iterator_traits&lt;It&gt;::difference_type 
    distance(It first, It last)
{
    return detail::do_distance(first, last,
                               typename std::iterator_traits&lt;It&gt;::iterator_category());
}
|title2=C++17 implementation via {{c/core|if constexpr}}|2=
template&lt;class It&gt;
constexpr typename std::iterator_traits&lt;It&gt;::difference_type
    distance(It first, It last)
{
    using category = typename std::iterator_traits&lt;It&gt;::iterator_category;
    static_assert(std::is_base_of_v&lt;std::input_iterator_tag, category&gt;);

    if constexpr (std::is_base_of_v&lt;std::random_access_iterator_tag, category&gt;)
        return last - first;
    else
    {
        typename std::iterator_traits&lt;It&gt;::difference_type result = 0;
        while (first != last)
        {
            ++first;
            ++result;
        }
        return result;
    }
}
}}

===Example===
{{example|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main() 
{
    std::vector&lt;int&gt; v{3, 1, 4};
    std::cout &lt;&lt; "distance(first, last) = "
              &lt;&lt; std::distance(v.begin(), v.end()) &lt;&lt; '\n'
              &lt;&lt; "distance(last, first) = "
              &lt;&lt; std::distance(v.end(), v.begin()) &lt;&lt; '\n';
              // the behavior is undefined (until LWG940)
    
    static constexpr auto il = {3, 1, 4};
    // Since C++17 `distance` can be used in constexpr context.
    static_assert(std::distance(il.begin(), il.end()) == 3);
    static_assert(std::distance(il.end(), il.begin()) == -3);
}
|output=
distance(first, last) = 3
distance(last, first) = -3
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=940|std=C++98|before=the wording was unclear for the case where {{c|first}} is reachable from {{c|last}}|after=made clear}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc advance}}
{{dsc inc|cpp/algorithm/dsc count}}
{{dsc inc|cpp/iterator/ranges/dsc distance}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/iterator/counted_iterator/title|1=operator++,+,+=,--,-,-= }}
{{cpp/iterator/counted_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr counted_iterator&amp; operator++();
}}
{{dcl|num=2|since=c++20|1=
constexpr decltype(auto) operator++( int );
}}
{{dcl|num=3|since=c++20|1=
constexpr counted_iterator operator++( int )
    requires std::forward_iterator&lt;I&gt;;
}}
{{dcl|num=4|since=c++20|1=
constexpr counted_iterator&amp; operator--()
    requires std::bidirectional_iterator&lt;I&gt;;
}}
{{dcl|num=5|since=c++20|1=
constexpr counted_iterator operator--( int )
    requires std::bidirectional_iterator&lt;I&gt;;
}}
{{dcl|num=6|since=c++20|1=
constexpr counted_iterator operator+( std::iter_difference_t&lt;I&gt; n ) const
    requires std::random_access_iterator&lt;I&gt;;
}}
{{dcl|num=7|since=c++20|1=
constexpr counted_iterator&amp; operator+=( std::iter_difference_t&lt;I&gt; n )
    requires std::random_access_iterator&lt;I&gt;;
}}
{{dcl|num=8|since=c++20|1=
constexpr counted_iterator operator-( std::iter_difference_t&lt;I&gt; n ) const
    requires std::random_access_iterator&lt;I&gt;;
}}
{{dcl|num=9|since=c++20|1=
constexpr counted_iterator&amp; operator-=( std::iter_difference_t&lt;I&gt; n )
    requires std::random_access_iterator&lt;I&gt;;
}}
{{dcl end}}

Increments or decrements the underlying iterator {{tt|''current''}} and the distance to the end {{tt|''length''}}.

The behavior of these functions is undefined if the {{tt|''length''}} would be set to a minus value.

@1@ Pre-increments by one. Equivalent to {{c|1=++current; --length; return *this; }}.

@2@ Post-increments by one. Equivalent to {{c|1=--length; try { return current++; } catch(...) { ++length; throw; } }}.

@3@ Post-increments by one. Equivalent to {{c|1=counted_iterator temp{*this}; ++*this; return temp; }}.

@4@ Pre-decrements by one. Equivalent to {{c|1=--current; ++length; return *this; }}.

@5@ Post-decrements by one. Equivalent to {{c|1=counted_iterator temp{*this}; --*this; return temp; }}.

@6@ Returns an iterator adaptor which is advanced by {{c|n}}. Equivalent to {{c|1=return counted_iterator(current + n, length - n); }}.

@7@ Advances the iterator adaptor by {{c|n}}. Equivalent to {{c|1=current += n; length -= n; return *this; }}.

@8@ Returns an iterator adaptor which is advanced by {{c|-n}}. Equivalent to {{c|1=return counted_iterator(current - n, length + n); }}.

@9@ Advances the iterator adaptor by {{c|-n}}. Equivalent to {{c|1=current -= n; length += n; return *this; }}.

===Parameters===
{{par begin}}
{{par|n|the number of positions to increment or decrement the iterator adaptor}}
{{par end}}

===Return value===
@1@ {{c|*this}}
@2,3@ A copy of {{c|*this}} that was made before the change.
@4@ {{c|*this}}
@5@ A copy of {{c|*this}} that was made before the change.
@6@ An iterator adaptor which is advanced by {{c|n}}.
@7@ {{c|*this}}
@8@ An iterator adaptor which is advanced by {{c|-n}}.
@9@ {{c|*this}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;initializer_list&gt;
#include &lt;iterator&gt;

int main()
{
    const auto v = {1, 2, 3, 4, 5, 6};
    std::counted_iterator&lt;std::initializer_list&lt;int&gt;::iterator&gt; it1{v.begin(), 5};

    ++it1;              assert(*it1 == 2 &amp;&amp; it1.count() == 4); // (1)
    auto it2 = it1++;   assert(*it2 == 2 &amp;&amp; *it1 == 3);        // (3)
    --it1;              assert(*it1 == 2 &amp;&amp; it1.count() == 4); // (4)
    auto it3 = it1--;   assert(*it3 == 2 &amp;&amp; *it1 == 1);        // (5)
    auto it4 = it1 + 3; assert(*it4 == 4 &amp;&amp; it4.count() == 2); // (6)
    auto it5 = it4 - 3; assert(*it5 == 1 &amp;&amp; it5.count() == 5); // (8)
    it1 += 3;           assert(*it1 == 4 &amp;&amp; it1.count() == 2); // (7)
    it1 -= 3;           assert(*it1 == 1 &amp;&amp; it1.count() == 5); // (9)
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator+|counted_iterator}}
{{dsc inc|cpp/iterator/adaptor/dsc operator-|counted_iterator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
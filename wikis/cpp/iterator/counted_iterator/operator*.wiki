{{cpp/iterator/counted_iterator/title|operator*,-&gt;}}
{{cpp/iterator/counted_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr decltype(auto) operator*();
}}
{{dcl|num=2|since=c++20|1=
constexpr decltype(auto) operator*() const
    requires /*dereferenceable*/&lt;const I&gt;;
}}
{{dcl|num=3|since=c++20|1=
constexpr auto operator-&gt;() const noexcept
    requires std::contiguous_iterator&lt;I&gt;;
}}
{{dcl end}}

@1,2@ Returns a reference to the current element. The behavior is undefined if {{c|1=this-&gt;count() &lt;= 0}}. The function's body is equivalent to {{c|return *current;}}.

@3@ Returns a pointer to the current element. The function's body is equivalent to {{c|return std::to_address(current);}}.

===Parameters===
(none)

===Return value===
Reference or pointer to the current element.

===Example===
{{example
|code=
#include &lt;complex&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
using std::operator""i;

int main()
{
    const auto il = {1.i, 2.i, 3.i, 4.i, 5.i};

    for (std::counted_iterator i{il.begin() + 1, 3}; i != std::default_sentinel; ++i)
        std::cout &lt;&lt; *i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    for (std::counted_iterator i{il.begin() + 1, 3}; i != std::default_sentinel; ++i)
        std::cout &lt;&lt; i-&gt;imag() &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
(0,2) (0,3) (0,4)
2 3 4
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator_at|counted_iterator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{title|1=operator-&lt;small&gt;(std::counted_iterator)&lt;/small&gt;}}
{{cpp/iterator/counted_iterator/navbar}}
{{ddcl|since=c++20|
template&lt; std::common_with&lt;I&gt; I2 &gt;
    friend constexpr std::iter_difference_t&lt;I2&gt; operator-(
        const counted_iterator&amp; x, const counted_iterator&lt;I2&gt;&amp; y );
}}

Computes the distance between two iterator adaptors.

The behavior is undefined if {{c|x}} and {{c|y}} do not point to elements of the same sequence. That is, there must exist some {{c|n}} such that {{c|std::next(x.base(), x.count() + n)}} and {{c|std::next(y.base(), y.count() + n)}} refer to the same element.

{{cpp/hidden friend|std::counted_iterator&amp;lt;I&gt;|tmpl=yes}}

===Parameters===
{{par begin}}
{{par|x, y|iterator adaptors to compute the difference of}}
{{par end}}

===Return value===
{{c|y.count() - x.count()}}

===Notes===
Since the ''length'' counts down, not up, the order of the arguments of {{c|operator-}} in the underlying expression is reversed, i.e. {{c|y}} is ''lhs'' and {{c|x}} is ''rhs''.

===Example===
{{example
|code=
#include &lt;initializer_list&gt;
#include &lt;iterator&gt;

int main()
{
    static constexpr auto v = {1, 2, 3, 4, 5, 6};
    constexpr std::counted_iterator&lt;std::initializer_list&lt;int&gt;::iterator&gt;
        it1{v.begin(), 5},
        it2{it1 + 3},
        it3{v.begin(), 2};
    
    static_assert(it1 - it2 == -3);
    static_assert(it2 - it1 == +3);
//  static_assert(it1 - it3 == -3); // UB: operands of operator- do not refer to
                                    // elements of the same sequence
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator_arith|counted_iterator}}
{{dsc inc|cpp/iterator/adaptor/dsc operator+|counted_iterator}}
{{dsc inc|cpp/iterator/counted_iterator/dsc operator-2}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
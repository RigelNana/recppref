{{cpp/iterator/counted_iterator/title|counted_iterator}}
{{cpp/iterator/counted_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr counted_iterator() requires std::default_initializable&lt;I&gt; = default;&lt;!--P2325R3--&gt;
}}
{{dcl|num=2|since=c++20|1=
constexpr counted_iterator( I x, std::iter_difference_t&lt;I&gt; n );
}}
{{dcl|num=3|since=c++20|1=
template&lt; class I2 &gt;
    requires std::convertible_to&lt;const I2&amp;, I&gt;
        constexpr counted_iterator( const counted_iterator&lt;I2&gt;&amp; other );
}}
{{dcl end}}

Constructs a new iterator adaptor.

@1@ Default constructor. [[cpp/language/value initialization|Value-initializes]] the underlying iterator and initialized the underlying ''length'' with {{c|0}}. Operations on the resulting iterator have defined behavior if and only if the corresponding operations on a value-initialized {{tt|I}} also have defined behavior.

@2@ The underlying iterator is initialized with {{c|std::move(x)}} and the underlying ''length'' is initialized with {{c|n}}. The behavior is undefined if {{c|n}} is negative.

@3@ The underlying iterator and ''length'' are initialized with those of {{c|other}}.

===Parameters===
{{par begin}}
{{par|x|iterator to adapt}}
{{par|n|distance to the end}}
{{par|other|iterator adaptor to convert}}
{{par end}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;initializer_list&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;

int main()
{
    static constexpr auto pi = {3, 1, 4, 1, 5, 9, 2};

    // (1) default constructor:
    constexpr std::counted_iterator&lt;std::initializer_list&lt;int&gt;::iterator&gt; i1{};
    static_assert(i1 == std::default_sentinel);
    static_assert(i1.count() == 0);

    // (2) initializes the iterator and length respectively:
    constexpr std::counted_iterator&lt;std::initializer_list&lt;int&gt;::iterator&gt; i2{
        pi.begin(), pi.size() - 2
    };
    static_assert(i2.count() == 5);
    static_assert(*i2 == 3 &amp;&amp; i2[1] == 1);

    // (3) converting-constructor:
    std::counted_iterator&lt;std::initializer_list&lt;const int&gt;::iterator&gt; i3{i2};

    std::ranges::copy(i3, std::default_sentinel,
        std::ostream_iterator&lt;const int&gt;{std::cout, " "});
}
|output=3 1 4 1 5
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator{{=}}|counted_iterator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
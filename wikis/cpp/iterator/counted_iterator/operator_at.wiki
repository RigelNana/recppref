{{cpp/iterator/counted_iterator/title|operator[]}}
{{cpp/iterator/counted_iterator/navbar}}
{{ddcl|since=c++20|
constexpr decltype(auto) operator[]( std::iter_difference_t&lt;I&gt; n ) const
    requires std::random_access_iterator&lt;I&gt;;
}}

Accesses the element at specified relative location. The behavior is undefined if {{c|n}} is not less than the recorded distance to the end.

===Parameters===
{{par begin}}
{{par|n|position relative to current location}}
{{par end}}

===Return value===
{{c|this-&gt;base()[n]}}

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;list&gt;

int main()
{
    std::array array{'A', 'B', 'C', 'D', 'E'};

    std::counted_iterator it{array.begin() + 1, /*count:*/ 3};

    for (int i{}; i != it.count(); ++i)
        std::cout &lt;&lt; it[i] &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    for (int i{}; i != it.count(); ++i)
        it[i] += ('E' - 'A');

    for (int i{}; i != it.count(); ++i)
        std::cout &lt;&lt; it[i] &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    std::list list{'X', 'Y', 'Z', 'W'};
    std::counted_iterator it2{list.begin(), 3};
//  char x = it2[0]; // Error: requirement `random_access_iterator` was not satisfied.
    std::cout &lt;&lt; *it2 &lt;&lt; '\n'; // OK
}
|output=
B C D
F G H
X
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator*|counted_iterator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
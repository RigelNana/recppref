{{cpp/iterator/istream_iterator/title|istream_iterator}}
{{cpp/iterator/istream_iterator/navbar}}
{{dcl begin}}
{{dcl rev multi|num=1
|until1=c++11|dcl1=
istream_iterator();
|dcl2=
constexpr istream_iterator();
}}
{{dcl|num=2|since=c++20|1=
constexpr istream_iterator( std::default_sentinel_t );
}}
{{dcl|num=3|1=
istream_iterator( istream_type&amp; stream );
}}
{{dcl rev multi|num=4
|until1=c++11|dcl1=
istream_iterator( const istream_iterator&amp; other );
|dcl2=
istream_iterator( const istream_iterator&amp; other ) = default;
}}
{{dcl end}}

@1,2@ Constructs the end-of-stream iterator{{rev inl|since=c++11|, value-initializes the stored value. This constructor is constexpr if the initializer in the definition {{c|1=auto x = T(); }} is a constant initializer}}.
@3@ Initializes the iterator, stores the address of {{c|stream}} in a data member, and performs the first read from the input stream to initialize the cached value data member.
@4@ Constructs a copy of {{c|other}}.{{rev inl|since=c++11| If {{c|std::is_trivially_copy_constructible&lt;T&gt;::value}} is {{c|true}}&lt;!--P0503R0--&gt;, this copy constructor is a trivial copy constructor.}}

===Parameters===
{{par begin}}
{{par|stream|stream to initialize the {{tt|istream_iterator}} with}}
{{par|other|another {{tt|istream_iterator}} of the same type}}
{{par end}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;sstream&gt;

int main()
{
    std::istringstream stream("1 2 3 4 5");
    std::copy(
        std::istream_iterator&lt;int&gt;(stream),
        std::istream_iterator&lt;int&gt;(),
        std::ostream_iterator&lt;int&gt;(std::cout, " ")
    );
}
|output=
1 2 3 4 5
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=1280|std=C++98|before=overload {{v|3}} stored {{c|stream}} directly|after=stores its address instead}}
{{dr list item|paper=P0738R2|std=C++98|before=the first read might be deferred to the first dereference|after=always performed in the constructor}}
{{dr list end}}

{{langlinks|es|ja|ru|zh}}
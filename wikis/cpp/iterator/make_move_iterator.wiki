{{cpp/title|make_move_iterator}}
{{cpp/iterator/navbar}}
{{ddcla|header=iterator|since=c++11|constexpr=c++17|
template&lt; class Iter &gt;
std::move_iterator&lt;Iter&gt; make_move_iterator( Iter i );
}}

{{tt|make_move_iterator}} is a convenience function template that constructs a {{lc|std::move_iterator}} for the given iterator {{c|i}} with the type deduced from the type of the argument.

===Parameters===
{{par begin}}
{{par|i|input iterator to be converted to move iterator}}
{{par end}}

===Return value===
{{c|std::move_iterator&lt;Iter&gt;(std::move(i))}}

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;list&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

auto print = [](const auto rem, const auto&amp; seq)
{
    for (std::cout &lt;&lt; rem; const auto&amp; str : seq)
        std::cout &lt;&lt; std::quoted(str) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
};

int main()
{
    std::list&lt;std::string&gt; s{"one", "two", "three"};
    
    std::vector&lt;std::string&gt; v1(s.begin(), s.end()); // copy
    
    std::vector&lt;std::string&gt; v2(std::make_move_iterator(s.begin()),
                                std::make_move_iterator(s.end())); // move
    
    print("v1 now holds: ", v1);
    print("v2 now holds: ", v2);
    print("original list now holds: ", s);
}
|p=true
|output=
v1 now holds: "one" "two" "three" 
v2 now holds: "one" "two" "three" 
original list now holds: "" "" "" 
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2061|std=C++11|before={{tt|make_move_iterator}} did not convert array arguments to pointers|after=made to convert}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc move_iterator}}
{{dsc inc|cpp/utility/dsc move}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
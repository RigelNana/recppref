{{cpp/iterator/common_iterator/title|operator{{=}}}}
{{cpp/iterator/common_iterator/navbar}}
{{ddcl|since=c++20|1=
template&lt; class I2, class S2 &gt;
requires std::convertible_to&lt;const I2&amp;, I&gt; &amp;&amp;
         std::convertible_to&lt;const S2&amp;, S&gt; &amp;&amp;
         std::assignable_from&lt;I&amp;, const I2&amp;&gt; &amp;&amp;
         std::assignable_from&lt;S&amp;, const S2&amp;&gt;
constexpr common_iterator&amp; operator=( const common_iterator&lt;I2, S2&gt;&amp; x );
}}

Assigns the underlying {{lc|std::variant}} member object {{tt|''var''}} from that of {{c|x}}.

Let {{tt|i}} is {{c|x.var.index()}}. Then, this assignment is equivalent to:
* {{c|1=std::get&lt;i&gt;(var) = std::get&lt;i&gt;(x.var)}}, if {{c|1=var.index() == i}},
* {{c|1=var.emplace&lt;i&gt;(std::get&lt;i&gt;(x.var))}} otherwise.

The behavior is undefined if {{c|x}} is in an invalid state, that is, {{c|x.var.valueless_by_exception()}} is equal to {{c|true}}.

===Parameters===
{{par begin}}
{{par|x|iterator adaptor to assign from}}
{{par end}}

===Return value===
{{c|*this}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;initializer_list&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;

int main()
{
    const auto il = {1, 2, 3, 4, 5, 6};
    using CI = std::common_iterator&lt;
                   std::counted_iterator&lt;std::initializer_list&lt;int&gt;::iterator&gt;,
                   std::default_sentinel_t&gt;;
    CI first{std::counted_iterator{std::next(begin(il), 1), ssize(il) - 1}&lt;!----&gt;};
    const CI first2{std::counted_iterator{std::next(begin(il), 2), ssize(il) - 2}&lt;!----&gt;};
    const CI last{std::default_sentinel};
    std::copy(first, last, std::ostream_iterator&lt;int&gt;{std::cout, " "});
    std::cout &lt;&lt; '\n';
    first = first2;
    std::copy(first, last, std::ostream_iterator&lt;int&gt;{std::cout, " "});
    std::cout &lt;&lt; '\n';
}
|output=
2 3 4 5 6 
3 4 5 6
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3574|std=C++20|before={{tt|variant}} was fully constexpr (P2231R1) but {{tt|common_iterator}} was not|after=also made constexpr}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc constructor|common_iterator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
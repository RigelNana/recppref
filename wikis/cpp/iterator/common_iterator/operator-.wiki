{{title|operator-{{small|(std::common_iterator)}}}}
{{cpp/iterator/common_iterator/navbar}}
{{ddcl|since=c++20|
template&lt; std::sized_sentinel_for&lt;I&gt; I2, std::sized_sentinel_for&lt;I&gt; S2 &gt;
    requires std::sized_sentinel_for&lt;S, I2&gt;
friend constexpr std::iter_difference_t&lt;I2&gt;
    operator-( const common_iterator&amp; x, const std::common_iterator&lt;I2, S2&gt;&amp; y );
}}

Computes the distance between two iterator adaptors. Two sentinels are considered equal.

Let {{tt|''var''}} denote the underlying {{lc|std::variant}} member object in {{lc|std::common_iterator}}, the behavior is undefined if either {{c|x}} or {{c|y}} is invalid, i.e.
{{c|x.var.valueless_by_exception() {{!!}} y.var.valueless_by_exception()}} is {{c|true}}.

{{cpp/hidden friend|std::common_iterator&amp;lt;I&gt;|tmpl=yes}}

===Parameters===
{{par begin}}
{{par|x, y|iterator adaptors to compute the difference of}}
{{par end}}

===Return value===
* {{c|0}} if {{c|x.var}} holds an {{tt|S}} object and {{c|y.var}} holds an {{tt|S2}} object, i.e. both of them hold a sentinel.
* Otherwise, {{c|alt_x - alt_y}}, where {{tt|alt_x}} and {{tt|alt_y}} are the alternatives held by {{c|x.var}} and {{c|y.var}}, respectively (either two iterators or one iterator and one sentinel).

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;

int main()
{
    int a[]{0, 1, 2, 3, 4, 5};

    using CI = std::common_iterator&lt;
                   std::counted_iterator&lt;int*&gt;,
                   std::default_sentinel_t
                   &gt;;

    CI i1{std::counted_iterator{a + 1, 2}&lt;!----&gt;};
    CI i2{std::counted_iterator{a, 3}&lt;!----&gt;};
    CI s1{std::default_sentinel};
    CI s2{std::default_sentinel};

    std::cout &lt;&lt; (s2 - s1) &lt;&lt; ' '
              &lt;&lt; (i2 - i1) &lt;&lt; ' '
              &lt;&lt; (i1 - s1) &lt;&lt; '\n';
}
|output=0 -1 -2
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3574|std=C++20|before={{tt|variant}} was fully constexpr (P2231R1) but {{tt|common_iterator}} was not|after=also made constexpr}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/common_iterator/dsc operator_arith}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/iterator/common_iterator/title|common_iterator}}
{{cpp/iterator/common_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr common_iterator() requires std::default_initializable&lt;I&gt; = default;&lt;!--P2325R3--&gt;
}}
{{dcl|num=2|since=c++20|
constexpr common_iterator( I i );
}}
{{dcl|num=3|since=c++20|
constexpr common_iterator( S s );
}}
{{dcl|num=4|since=c++20|
template&lt; class I2, class S2 &gt;
requires std::convertible_to&lt;const I2&amp;, I&gt; &amp;&amp; 
         std::convertible_to&lt;const S2&amp;, S&gt;
constexpr common_iterator( const common_iterator&lt;I2, S2&gt;&amp; x );
}}
{{dcl end}}

Constructs a new iterator adaptor, effectively initializes the underlying {{c|std::variant&lt;I, S&gt;}} member object {{tt|''var''}} to hold an {{tt|I}} (iterator) or {{tt|S}} (sentinel) object.

@1@ Default constructor. Default-initializes {{tt|''var''}}. After construction, {{tt|''var''}} holds a value-initialized {{tt|I}} object.
Operations on the resulting iterator adaptor have defined behavior if and only if the corresponding operations on a value-initialized {{tt|I}} also have defined behavior.

@2@ After construction, {{tt|''var''}} holds an {{tt|I}} object move-constructed from {{c|i}}.

@3@ After construction, {{tt|''var''}} holds an {{tt|S}} object move-constructed from {{c|s}}.

@4@ After construction, {{tt|''var''}} holds an {{tt|I}} or {{tt|S}} object initialized from the {{tt|I2}} or {{tt|S2}} held by {{c|x.var}}, if {{c|x.var}} holds that alternative, respectively. The behavior is undefined if {{c|x}} is in an invalid state, that is, {{c|x.var.valueless_by_exception()}} is equal to {{c|true}}.

===Parameters===
{{par begin}}
{{par|i|iterator to adapt}}
{{par|s|sentinel to adapt}}
{{par|x|iterator adaptor to copy}}
{{par end}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;numeric&gt;
#include &lt;vector&gt;

int main()
{
    std::vector v{3, 1, 4, 1, 5, 9, 2};

    using CI = std::common_iterator&lt;
                   std::counted_iterator&lt;std::vector&lt;int&gt;::iterator&gt;,
                   std::default_sentinel_t&gt;;
    CI unused; // (1)
    CI start{std::counted_iterator{std::next(begin(v)), ssize(v) - 2}&lt;!----&gt;}; // (2)
    CI finish{std::default_sentinel}; // (3)
    CI first{start}; // (4)
    CI last{finish}; // (4)

    std::copy(first, last, std::ostream_iterator&lt;int&gt;{std::cout, " "});
    std::cout &lt;&lt; '\n';

    std::common_iterator&lt;
        std::counted_iterator&lt;
            std::ostream_iterator&lt;double&gt;&gt;,
            std::default_sentinel_t&gt;
            beg{std::counted_iterator{std::ostream_iterator&lt;double&gt;{std::cout,";  "}, 5}&lt;!----&gt;},
            end{std::default_sentinel};
    std::iota(beg, end, 3.1);
    std::cout &lt;&lt; '\n';
}
|output=
1 4 1 5 9
3.1;  4.1;  5.1;  6.1;  7.1;
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator{{=}}|common_iterator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
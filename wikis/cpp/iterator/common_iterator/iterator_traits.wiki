{{cpp/title|iterator_traits&lt;small&gt;&lt;std::common_iterator&gt;&lt;/small&gt;}}
{{cpp/iterator/common_iterator/navbar}}
{{ddcl|since=c++20|header=iterator|
template&lt; std::input_iterator I, class S &gt;
struct iterator_traits&lt;std::common_iterator&lt;I, S&gt;&gt;;
}}

Provides the uniform interface to the properties of the {{lc|std::common_iterator}} type.

===Member types===
{{dsc begin}}
{{dsc hitem|Type name|Definition}}
{{dsc|{{tt|iterator_concept}}|
* {{lc|std::forward_iterator_tag}}, if {{tt|I}} models {{lc|std::forward_iterator}}.
* {{lc|std::input_iterator_tag}} otherwise.
}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{mark cond present}}|
* Not defined, if {{c/core|std::iter_difference_t&lt;I&gt;}} is not an integral type.
* {{lc|std::forward_iterator_tag}} otherwise, if {{c/core|std::iterator_traits&lt;I&gt;::iterator_category}} is valid and denotes a type that models {{c|std::derived_from&lt;std::forward_iterator_tag&gt;}}.
* {{lc|std::input_iterator_tag}} otherwise.}}
{{dsc|{{tt|value_type}}|{{c/core|std::iter_value_t&lt;I&gt;}}}}
{{dsc|{{tt|difference_type}}|{{c/core|std::iter_difference_t&lt;I&gt;}}}}
{{dsc|{{tt|pointer}}|
* {{c/core|decltype(c.operator-&gt;())}}, if it is well-formed (where {{c|c}} is an lvalue of type {{c/core|const std::common_iterator&lt;I, S&gt;}}).
* {{c/core|void}} otherwise.}}
{{dsc|{{tt|reference}}|{{c/core|std::iter_reference_t&lt;I&gt;}}}}
{{dsc end}}

===Example===
{{example
|code=
#include &lt;iterator&gt;
#include &lt;type_traits&gt;
#include &lt;vector&gt;

int main()
{
    std::vector v{1, 2, 3, 4};
    using CV = std::common_iterator&lt;
                    std::counted_iterator&lt;std::vector&lt;int&gt;::iterator&gt;,
                    std::default_sentinel_t&gt;;
    CV i{std::counted_iterator{v.begin(), 3}&lt;!----&gt;};
    using TRCV = std::iterator_traits&lt;decltype(i)&gt;;
    static_assert(std::is_same&lt;TRCV::iterator_concept, std::forward_iterator_tag&gt;());
    static_assert(std::is_same&lt;TRCV::iterator_category, std::forward_iterator_tag&gt;());
    static_assert(std::is_same&lt;TRCV::value_type, int&gt;());
    static_assert(std::is_same&lt;TRCV::difference_type,
                  std::vector&lt;int&gt;::difference_type&gt;());
    static_assert(std::is_same&lt;TRCV::pointer, decltype(i.operator-&gt;())&gt;());
    static_assert(std::is_same&lt;TRCV::reference, int&amp;&gt;());

    CV s{std::default_sentinel};
    using TRCS = std::iterator_traits&lt;decltype(s)&gt;;
    static_assert(std::is_same&lt;TRCS::iterator_concept, std::forward_iterator_tag&gt;());
    static_assert(std::is_same&lt;TRCS::iterator_category, std::forward_iterator_tag&gt;());
    static_assert(std::is_same&lt;TRCS::value_type, int&gt;());
    static_assert(std::is_same&lt;TRCS::difference_type,
                  std::vector&lt;int&gt;::difference_type&gt;());
    static_assert(std::is_same&lt;TRCS::pointer, decltype(s.operator-&gt;())&gt;());
    static_assert(std::is_same&lt;TRCS::reference, int&amp;&gt;());
}
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3749|std=C++20|before=if {{c/core|std::iter_difference_t&lt;I&gt;}} is not an integer type,&lt;br&gt;{{tt|iterator_category}} was {{lc|std::input_iterator_tag}}|after={{tt|iterator_category}} is&lt;br&gt;undefined in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc iterator_traits}}
{{dsc inc|cpp/iterator/common_iterator/dsc incrementable_traits}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|ko|pt|ru|zh}}
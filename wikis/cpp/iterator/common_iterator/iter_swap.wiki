{{title|iter_swap&lt;small&gt;(std::common_iterator)&lt;/small&gt;}}
{{cpp/iterator/common_iterator/navbar}}
{{ddcl|since=c++20|
template&lt; std::indirectly_swappable&lt;I&gt; I2, class S2 &gt;
friend constexpr void
    iter_swap( const common_iterator&amp; x,
               const std::common_iterator&lt;I2, S2&gt;&amp; y ) noexcept(/*see below*/);
}}

Swaps the objects pointed to by two underlying iterators. The behavior is undefined if {{c|x}} does not hold an {{tt|I}} object or {{c|y}} does not hold an {{tt|I2}} object (i.e. at least one of {{c|x}} and {{c|y}} does not hold an iterator).

The function body is equivalent to {{c|ranges::iter_swap(std::get&lt;I&gt;(x.var), std::get&lt;I2&gt;(y.var))}}.

{{cpp/hidden friend|std::common_iterator&amp;lt;I,S&gt;|tmpl=yes}}

===Parameters===
{{par begin}}
{{par|x, y|the iterators to the elements to swap}}
{{par end}}

===Return value===
(none)

===Complexity===
Constant.

===Exceptions===
{{noexcept|noexcept(ranges::iter_swap(std::declval&lt;const I&amp;&gt;(), std::declval&lt;const I2&amp;&gt;()))}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;std::string&gt; v1{"1", "2", "3", "4", "5"},
                             v2{"α", "β", "γ", "δ", "ε"};

    using CI = std::common_iterator&lt;
                   std::counted_iterator&lt;std::vector&lt;std::string&gt;::iterator&gt;,
                   std::default_sentinel_t
                   &gt;;

    CI first1{std::counted_iterator{v1.begin(), 3}&lt;!----&gt;};
    CI first2{std::counted_iterator{v2.begin(), 4}&lt;!----&gt;};
    CI last{std::default_sentinel};

    auto print = [&amp;](auto rem)
    {
        std::cout &lt;&lt; rem &lt;&lt; "v1 = ";
        std::ranges::copy(v1, std::ostream_iterator&lt;std::string&gt;{std::cout, " "});
        std::cout &lt;&lt; "\nv2 = ";
        std::ranges::copy(v2, std::ostream_iterator&lt;std::string&gt;{std::cout, " "});
        std::cout &lt;&lt; '\n';
    };

    print("Before iter_swap:\n");

    for (; first1 != last &amp;&amp; first2 != last; ++first1, ++first2)
        iter_swap(first1, first2); // ADL

    print("After iter_swap:\n");
}
|output=
Before iter_swap:
v1 = 1 2 3 4 5 
v2 = α β γ δ ε 
After iter_swap:
v1 = α β γ 4 5 
v2 = 1 2 3 δ ε
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3574|std=C++20|before={{tt|variant}} was fully constexpr (P2231R1) but {{tt|common_iterator}} was not|after=also made constexpr}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc swap}}
{{dsc inc|cpp/algorithm/dsc swap_ranges}}
{{dsc inc|cpp/algorithm/dsc iter_swap}}
{{dsc inc|cpp/iterator/ranges/dsc iter_swap}}
{{dsc inc|cpp/iterator/adaptor/dsc iter_swap|counted_iterator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
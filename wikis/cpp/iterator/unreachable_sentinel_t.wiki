{{cpp/title|unreachable_sentinel_t|unreachable_sentinel}}
{{cpp/iterator/navbar}}

{{dcl begin}}
{{dcl header|iterator}}
{{dcl|num=1|since=c++20|
struct unreachable_sentinel_t;
}}
{{dcl|num=2|since=c++20|
inline constexpr unreachable_sentinel_t unreachable_sentinel{};
}}
{{dcl end}}

@1@ {{tt|unreachable_sentinel_t}} is an empty class type that can be used to denote the “upper bound” of an unbounded interval.
@2@ {{tt|unreachable_sentinel}} is a constant of type {{tt|unreachable_sentinel_t}}.

===Non-member functions===
{{dsc begin}}
{{dsc tfun|cpp/iterator/unreachable_sentinel_t|inlinemem=true|title=operator==|compares an {{tt|unreachable_sentinel_t}} with a value of any {{lconcept|weakly_incrementable}} type|notes={{mark c++20}}}}
{{dsc end}}

{{member|operator{{==}}{{small|(std::unreachable_sentinel_t)}}|
{{ddcl|since=c++20|1=
template&lt;std::weakly_incrementable I&gt;
friend constexpr bool operator==( unreachable_sentinel_t, const I&amp; ) noexcept
{ return false; }
}}

{{tt|unreachable_sentinel_t}} can be compared with any {{lconcept|weakly_incrementable}} type and the result is always {{c|false}}.

{{cpp/hidden friend|tmpl=yes|{{tt|std::unreachable_sentinel_t}}}}
}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;

template&lt;class CharT&gt;
constexpr std::size_t strlen(const CharT* s)
{
    return std::ranges::find(s, std::unreachable_sentinel, CharT{}) - s;
}

template&lt;class CharT&gt;
constexpr std::size_t find_first(const CharT* haystack, const CharT* needle)
{
    const char* needle_end = needle + strlen(needle);
    // search(begin, unreachable_sentinel) is usually more efficient than
    // search(begin, end) due to one less comparison per cycle.
    // But "needle" MUST BE PRESENT in the "haystack", otherwise the call
    // is UB (which is a compile-time error in constexpr context).
    auto found = std::ranges::search(haystack, std::unreachable_sentinel,
                                     needle, needle_end);
    return found.begin() - haystack;
}

int main()
{
    static_assert(strlen("The quick brown fox jumps over a lazy dog.") == 42);
    static_assert(find_first("unsigned short int", "short") == 9);
//  static_assert(find_first("long int", "float")); // compile-time error
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc iota_view}}
{{dsc end}}

{{langlinks|ja|zh}}
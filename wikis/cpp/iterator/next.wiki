{{cpp/title|next}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl rev multi
|since1=c++11|dcl1=
template&lt; class InputIt &gt;
InputIt next( InputIt it, typename std::iterator_traits&lt;InputIt&gt;::difference_type n = 1 );
|since2=c++17|dcl2=
template&lt; class InputIt &gt;
constexpr
InputIt next( InputIt it, typename std::iterator_traits&lt;InputIt&gt;::difference_type n = 1 );
}}
{{dcl end}}

Return the {{c|n}}{{sup|th}} successor (or {{c|-n}}{{sup|th}} predecessor if {{c|n}} is negative) of iterator {{c|it}}.

===Parameters===
{{par begin}}
{{par|it|an iterator}}
{{par|n|number of elements to advance}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par end}}

===Return value===
An iterator of type {{tt|InputIt}} that holds the {{c|n}}{{sup|th}} successor (or {{c|-n}}{{sup|th}} predecessor if {{c|n}} is negative) of iterator {{c|it}}.

===Complexity===
Linear.

However, if {{tt|InputIt}} additionally meets the requirements of {{named req|RandomAccessIterator}}, complexity is constant.

===Possible implementation===
{{eq fun|1=
template&lt;class InputIt&gt;
constexpr // since C++17
InputIt next(InputIt it, typename std::iterator_traits&lt;InputIt&gt;::difference_type n = 1)
{
    std::advance(it, n);
    return it;
}
}}

===Notes===
Although the expression {{c|++c.begin()}} often compiles, it is not guaranteed to do so: {{c|c.begin()}} is an rvalue expression, and there is no {{named req|InputIterator}} requirement that specifies that increment of an rvalue is guaranteed to work. In particular, when iterators are implemented as pointers or its {{tt|operator++}} is lvalue-ref-qualified, {{c|++c.begin()}} does not compile, while {{c|std::next(c.begin())}} does.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;int&gt; v{4, 5, 6};

    auto it = v.begin();
    auto nx = std::next(it, 2);
    std::cout &lt;&lt; *it &lt;&lt; ' ' &lt;&lt; *nx &lt;&lt; '\n';

    it = v.end();
    nx = std::next(it, -2);
    std::cout &lt;&lt; ' ' &lt;&lt; *nx &lt;&lt; '\n';
}
|output=
4 6
 5
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2353|std=C++11|before={{tt|next}} required {{named req|ForwardIterator}}|after={{named req|InputIterator}} allowed}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc prev}}
{{dsc inc|cpp/iterator/dsc advance}}
{{dsc inc|cpp/iterator/dsc distance}}
{{dsc inc|cpp/iterator/ranges/dsc next}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|begin|cbegin}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{cpp/iterator/range access headers}}
{{dcla|anchor=no|num=1|since=c++11|constexpr=c++17|
template&lt; class C &gt; 
auto begin( C&amp; c ) -&gt; decltype(c.begin());
}}
{{dcla|anchor=no|num=2|since=c++11|constexpr=c++17|
template&lt; class C &gt; 
auto begin( const C&amp; c ) -&gt; decltype(c.begin());
}}
{{dcla|anchor=no|num=3|since=c++11|constexpr=c++14|noexcept=c++14|
template&lt; class T, std::size_t N &gt; 
T* begin( T (&amp;array)[N] );
}}
{{dcl|num=4|since=c++14|
template&lt; class C &gt; 
constexpr auto cbegin( const C&amp; c ) noexcept(/* see below */)
    -&gt; decltype(std::begin(c));
}}
{{dcl end}}

Returns an iterator to the beginning of the given range.

@1,2@ Returns {{c|c.begin()}}, which is typically an iterator to the beginning of the sequence represented by {{c|c}}.
:@1@ If {{tt|C}} is a standard {{named req|Container}}, returns a {{tt|C::iterator}} object.
:@2@ If {{tt|C}} is a standard {{named req|Container}}, returns a {{tt|C::const_iterator}} object.

@3@ Returns a pointer to the beginning of {{c|array}}.

@4@ Returns {{c|std::begin(c)}}, with {{c|c}} always treated as const-qualified.
@@ If {{tt|C}} is a standard {{named req|Container}}, returns a {{tt|C::const_iterator}} object.

{{image|range-begin-end.svg}}

===Parameters===
{{par begin}}
{{par|c|a container or view with a {{tt|begin}} member function}}
{{par|array|an array of arbitrary type}}
{{par end}}

===Return value===
@1,2@ {{c|c.begin()}}
@3@ {{c|array}}
@4@ {{c|c.begin()}}

===Exceptions===
@4@ {{noexcept|noexcept(std::begin(c))}}

===Overloads===
Custom overloads of {{tt|begin}} may be provided for classes and enumerations that do not expose a suitable {{tt|begin()}} member function, yet can be iterated. The following overloads are already provided by the standard library:

{{dsc begin}}
{{dsc inc|cpp/utility/initializer_list/dsc begin2}}
{{dsc inc|cpp/numeric/valarray/dsc begin2}}
{{dsc inc|cpp/filesystem/directory_iterator/dsc begin}}
{{dsc inc|cpp/filesystem/recursive_directory_iterator/dsc begin}}
{{dsc end}}

Similar to the use of {{tt|swap}} (described in {{named req|Swappable}}), typical use of the {{tt|begin}} function in generic context is an equivalent of {{c|using std::begin; begin(arg);}}, which allows both the [[cpp/language/adl|ADL]]-selected overloads for user-defined types and the standard library function templates to appear in the same overload set.
{{source|1=
template&lt;typename Container, typename Function&gt;
void for_each(Container&amp;&amp; cont, Function f)
{
    using std::begin;
    auto it = begin(cont);
    using std::end;
    auto end_it = end(cont);
    while (it != end_it)
    {
        f(*it);
        ++it;
    }
}
}}

{{rrev|since=c++20|
Overloads of {{tt|begin}} found by [[cpp/language/adl|argument-dependent lookup]] can be used to customize the behavior of {{lc|std::ranges::begin}}, {{lc|std::ranges::cbegin}}, and other customization pointer objects depending on {{lc|std::ranges::begin}}.
}}

===Notes===
The non-array overloads exactly reflect the behavior of {{tt|C::begin}}. Their effects may be surprising if the member function does not have a reasonable implementation.

{{tt|std::cbegin}} is introduced for unification of member and non-member range accesses. See also {{lwg|2128}}.

If {{tt|C}} is a shallow-const view, {{tt|std::cbegin}} may return a mutable iterator. Such behavior is unexpected for some users. See also {{wg21|P2276}} and {{wg21|P2278}}.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main() 
{
    std::vector&lt;int&gt; v = {3, 1, 4};
    auto vi = std::begin(v);
    std::cout &lt;&lt; std::showpos &lt;&lt; *vi &lt;&lt; '\n'; 
    
    int a[] = {-5, 10, 15};
    auto ai = std::begin(a);
    std::cout &lt;&lt; *ai &lt;&lt; '\n';
}
|output=
+3
-5
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc end}}
{{dsc inc|cpp/ranges/dsc begin}}
{{dsc inc|cpp/ranges/dsc cbegin}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
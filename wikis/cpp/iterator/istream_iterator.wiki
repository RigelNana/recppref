{{cpp/title|istream_iterator}}
{{cpp/iterator/istream_iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl rev begin}}
{{dcl|until=c++17|1=
template&lt; class T,
          class CharT = char,
          class Traits = std::char_traits&lt;CharT&gt;,
          class Distance = std::ptrdiff_t &gt;
class istream_iterator
    : public std::iterator&lt;std::input_iterator_tag, T, Distance, const T*, const T&amp;&gt;
}}
{{dcl|since=c++17|1=
template&lt; class T,
          class CharT = char,
          class Traits = std::char_traits&lt;CharT&gt;,
          class Distance = std::ptrdiff_t &gt;
class istream_iterator;
}}
{{dcl rev end}}
{{dcl end}}

{{tt|std::istream_iterator}} is a single-pass input iterator that reads successive objects of type {{tt|T}} from the {{lc|std::basic_istream}} object for which it was constructed, by calling the appropriate {{c/core|operator&gt;&gt;}}. The actual read operation is performed when the iterator is incremented, not when it is dereferenced. The first object is read when the iterator is constructed. Dereferencing only returns a copy of the most recently read object.

The default-constructed {{tt|std::istream_iterator}} is known as the ''end-of-stream'' iterator. When a valid {{tt|std::istream_iterator}} reaches the end of the underlying stream, it becomes equal to the end-of-stream iterator. Dereferencing or incrementing it further invokes undefined behavior. An end-of-stream iterator remains in the end-of-stream state even if the underlying stream changes state. Absent a reassignment, it cannot become a non-end-of-stream iterator anymore.

A typical implementation of {{tt|std::istream_iterator}} holds two data members: a pointer to the associated {{lc|std::basic_istream}} object and the most recently read value of type {{tt|T}}.

{{tt|T}} must meet the {{named req|DefaultConstructible}}, {{named req|CopyConstructible}}, and {{named req|CopyAssignable}} requirements. {{mark unreviewed dr|LWG|2878}}

{{cpp/iterator/iterator/inherit|std::input_iterator_tag|T|Distance|const T*|const T&amp;|ext=
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc|{{tt|traits_type}}|{{tt|Traits}}}}
{{dsc|{{tt|istream_type}}|{{c/core|std::basic_istream&lt;CharT, Traits&gt;}}}}
}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/iterator/istream_iterator/dsc constructor}}
{{dsc inc|cpp/iterator/istream_iterator/dsc destructor}}
{{dsc inc|cpp/iterator/istream_iterator/dsc operator*}}
{{dsc inc|cpp/iterator/istream_iterator/dsc operator arith}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/iterator/istream_iterator/dsc operator cmp}}
{{dsc end}}

===Notes===
When reading characters, {{tt|std::istream_iterator}} skips whitespace by default (unless disabled with {{lc|std::noskipws}} or equivalent), while {{lc|std::istreambuf_iterator}} does not. In addition, {{lc|std::istreambuf_iterator}} is more efficient, since it avoids the overhead of constructing and destructing the sentry object once per character.

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;numeric&gt;
#include &lt;sstream&gt;

int main()
{
    std::istringstream str("0.1 0.2 0.3 0.4");
    std::partial_sum(std::istream_iterator&lt;double&gt;(str),
                     std::istream_iterator&lt;double&gt;(),
                     std::ostream_iterator&lt;double&gt;(std::cout, " "));
    
    std::istringstream str2("1 3 5 7 8 9 10");
    auto it = std::find_if(std::istream_iterator&lt;int&gt;(str2),
                           std::istream_iterator&lt;int&gt;(),
                           [](int i){ return i % 2 == 0; });
    
    if (it != std::istream_iterator&lt;int&gt;())
        std::cout &lt;&lt; "\nThe first even number is " &lt;&lt; *it &lt;&lt; ".\n";
    //" 9 10" left in the stream
}
|output=
0.1 0.3 0.6 1 
The first even number is 8.
}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P0738R2|std=C++98|before=the first read might be deferred to the first dereference|after=always performed in the constructor}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc ostream_iterator}}
{{dsc inc|cpp/iterator/dsc istreambuf_iterator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
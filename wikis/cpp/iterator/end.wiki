{{cpp/title|end|cend}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{cpp/iterator/range access headers}}
{{dcla|anchor=no|num=1|since=c++11|constexpr=c++17|
template&lt; class C &gt;
auto end( C&amp; c ) -&gt; decltype(c.end());
}}
{{dcla|anchor=no|num=2|since=c++11|constexpr=c++17|
template&lt; class C &gt;
auto end( const C&amp; c ) -&gt; decltype(c.end());
}}
{{dcla|anchor=no|num=3|since=c++11|constexpr=c++14|noexcept=c++14|
template&lt; class T, std::size_t N &gt;
T* end( T (&amp;array)[N] );
}}
{{dcl|num=4|since=c++14|
template&lt; class C &gt;
constexpr auto cend( const C&amp; c ) noexcept(/* see below */)
    -&gt; decltype(std::end(c));
}}
{{dcl end}}

Returns an iterator to the end (i.e. the element after the last element) of the given range.

@1,2@ Returns {{c|c.end()}}, which is typically an iterator one past the end of the sequence represented by {{c|c}}.
:@1@ If {{tt|C}} is a standard {{named req|Container}}, returns a {{tt|C::iterator}} object.
:@2@ If {{tt|C}} is a standard {{named req|Container}}, returns a {{tt|C::const_iterator}} object.

@3@ Returns a pointer to the end of {{c|array}}.

@4@ Returns {{c|std::end(c)}}, with {{c|c}} always treated as const-qualified.
@@ If {{tt|C}} is a standard {{named req|Container}}, returns a {{tt|C::const_iterator}} object.

{{image|range-begin-end.svg}}

===Parameters===
{{par begin}}
{{par|c|a container or view with an {{tt|end}} member function}}
{{par|array|an array of arbitrary type}}
{{par end}}

===Return value===
@1,2@ {{c|c.end()}}
@3@ {{c|array + N}}
@4@ {{c|c.end()}}

===Exceptions===
@4@ {{noexcept|noexcept(std::end(c))}}

===Overloads===
Custom overloads of {{tt|end}} may be provided for classes and enumerations that do not expose a suitable {{tt|end()}} member function, yet can be iterated. The following overloads are already provided by the standard library:

{{dsc begin}}
{{dsc inc|cpp/utility/initializer_list/dsc end2}}
{{dsc inc|cpp/numeric/valarray/dsc end2}}
{{dsc inc|cpp/filesystem/directory_iterator/dsc begin}}
{{dsc inc|cpp/filesystem/recursive_directory_iterator/dsc begin}}
{{dsc end}}

Similar to the use of {{tt|swap}} (described in {{named req|Swappable}}), typical use of the {{tt|end}} function in generic context is an equivalent of {{c|using std::end; end(arg);}}, which lets both the [[cpp/language/adl|ADL]]-selected overloads for user-defined types and the standard library function templates to appear in the same overload set.

{{source|1=
template&lt;typename Container, typename Function&gt;
void for_each(Container&amp;&amp; cont, Function f)
{
    using std::begin;
    auto it = begin(cont);
    using std::end;
    auto end_it = end(cont);
    
    for (; it != end_it; ++it)
        f(*it);
}
}}

{{rrev|since=c++20|
Overloads of {{tt|end}} found by [[cpp/language/adl|argument-dependent lookup]] can be used to customize the behavior of {{lc|std::ranges::end}}, {{lc|std::ranges::cend}}, and other customization pointer objects depending on {{lc|std::ranges::end}}.
}}

===Notes===
The non-array overloads exactly reflect the behavior of {{c|C::end()}}. Their effects may be surprising if the member function does not have a reasonable implementation.

{{tt|std::cend}} is introduced for unification of member and non-member range accesses. See also {{lwg|2128}}.

If {{tt|C}} is a shallow-const view, {{tt|std::cend}} may return a mutable iterator. Such behavior is unexpected for some users. See also {{wg21|P2276}} and {{wg21|P2278}}.

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;int&gt; v = {3, 1, 4};
    if (std::find(std::begin(v), std::end(v), 5) != std::end(v))
        std::cout &lt;&lt; "Found a 5 in vector v!\n";
    
    int w[] = {5, 10, 15};
    if (std::find(std::begin(w), std::end(w), 5) != std::end(w))
        std::cout &lt;&lt; "Found a 5 in array w!\n";
}
|output=
Found a 5 in array w!
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc begin}}
{{dsc inc|cpp/ranges/dsc end}}
{{dsc inc|cpp/ranges/dsc cend}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
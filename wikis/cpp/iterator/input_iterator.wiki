{{cpp/title|input_iterator}}
{{cpp/iterator/navbar}}
{{ddcl|header=iterator|since=c++20|1=
template&lt; class I &gt;
    concept input_iterator =
        std::input_or_output_iterator&lt;I&gt; &amp;&amp;
        std::indirectly_readable&lt;I&gt; &amp;&amp;
        requires { typename /*ITER_CONCEPT*/&lt;I&gt;; } &amp;&amp;
        std::derived_from&lt;/*ITER_CONCEPT*/&lt;I&gt;, std::input_iterator_tag&gt;;
}}

The {{tt|input_iterator}} concept is a refinement of {{lconcept|input_or_output_iterator}}, adding the requirement that the referenced values can be read (via {{lconcept|indirectly_readable}}) and the requirement that the iterator concept tag be present.

{{cpp/iterator/iter concept}}

===Notes===
Unlike the {{named req|InputIterator}} requirements, the {{tt|input_iterator}} concept does not require {{lconcept|equality_comparable}}, since input iterators are typically compared with sentinels.

===Example===
A minimum input iterator.

{{source|1=
#include &lt;cstddef&gt;
#include &lt;iterator&gt;

struct SimpleInputIterator
{
    using difference_type = std::ptrdiff_t;
    using value_type = int;

    int operator*() const;

    SimpleInputIterator&amp; operator++();
    void operator++(int) { ++*this; }
};

static_assert(std::input_iterator&lt;SimpleInputIterator&gt;);
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc input_or_output_iterator}}
{{dsc inc|cpp/iterator/dsc forward_iterator}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
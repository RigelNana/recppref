{{cpp/title|sortable}}
{{cpp/iterator/navbar}}
{{ddcl | header=iterator | since=c++20 | 1=
template&lt; class I, class Comp = ranges::less, class Proj = std::identity &gt;
concept sortable =
    std::permutable&lt;I&gt; &amp;&amp;
    std::indirect_strict_weak_order&lt;Comp, std::projected&lt;I, Proj&gt;&gt;;
}}

The {{tt|sortable}} concept specifies the requirements for algorithms that permute a range into an ordered range according to {{tt|Comp}}.

===Semantic requirements===
{{c|std::sortable&lt;I, Comp, Proj&gt;}} is modeled only if all concepts it subsumes are modeled.

===See also===
{{dsc begin}}
{{dsc inc | cpp/algorithm/ranges/dsc sort}}
{{dsc inc | cpp/algorithm/ranges/dsc stable_sort}}
{{dsc inc | cpp/algorithm/ranges/dsc partial_sort}}
{{dsc inc | cpp/algorithm/ranges/dsc nth_element}}
{{dsc inc | cpp/algorithm/ranges/dsc inplace_merge}}
{{dsc inc | cpp/algorithm/ranges/dsc push_heap}}
{{dsc inc | cpp/algorithm/ranges/dsc pop_heap}}
{{dsc inc | cpp/algorithm/ranges/dsc make_heap}}
{{dsc inc | cpp/algorithm/ranges/dsc sort_heap}}
{{dsc inc | cpp/algorithm/ranges/dsc next_permutation}}
{{dsc inc | cpp/algorithm/ranges/dsc prev_permutation}}
{{dsc end}}

{{langlinks|es|ja|zh}}
{{cpp/title|bidirectional_iterator}}
{{cpp/iterator/navbar}}
{{ddcl|header=iterator|since=c++20|1=
template&lt; class I &gt;
    concept bidirectional_iterator =
        std::forward_iterator&lt;I&gt; &amp;&amp;
        std::derived_from&lt;/*ITER_CONCEPT*/&lt;I&gt;, std::bidirectional_iterator_tag&gt; &amp;&amp;
        requires(I i) {
            { --i } -&gt; std::same_as&lt;I&amp;&gt;;
            { i-- } -&gt; std::same_as&lt;I&gt;;
        };
}}

The concept {{tt|bidirectional_iterator}} refines {{lconcept|forward_iterator}} by adding the ability to move an iterator backward.

{{cpp/iterator/iter concept}}

===Semantic requirements===
A bidirectional iterator {{tt|r}} is said to be ''decrementable'' if and only if there exists some {{tt|s}} such that {{c|1=++s == r}}.

{{co|std::bidirectional_iterator&lt;I&gt;}} is modeled only if all the concepts it subsumes are modeled, and given two objects {{tt|a}} and {{tt|b}} of type {{tt|I}}:
* If {{tt|a}} is decrementable, {{tt|a}} is in the domain of the expressions {{c|--a}} and {{c|a--}}.
* Pre-decrement yields an lvalue that refers to the operand: {{c|1=std::addressof(--a) == std::addressof(a)}}.
* Post-decrement yields the previous value of the operand: if {{c|1=bool(a == b)}}, then {{c|1=bool(a-- == b)}}.
* Post-decrement and pre-decrement perform the same modification on its operand: If {{c|1=bool(a == b)}}, then after evaluating both {{c|a--}} and {{c|--b}}, {{c|1=bool(a == b)}} still holds.
* Increment and decrement are inverses of each other:
:* If {{tt|a}} is incrementable and {{c|1=bool(a == b)}}, then {{c|1=bool(--(++a) == b)}}.
:* If {{tt|a}} is decrementable and {{c|1=bool(a == b)}}, then {{c|1=bool(++(--a) == b)}}.

{{cpp/concepts/equality preservation}}

===Notes===
Unlike the {{named req|BidirectionalIterator}} requirements, the {{tt|bidirectional_iterator}} concept does not require dereference to return an lvalue.

===Example===
A minimum bidirectional iterator.

{{source|1=
#include &lt;cstddef&gt;
#include &lt;iterator&gt;

struct SimpleBidiIterator
{
    using difference_type = std::ptrdiff_t;
    using value_type = int;

    int operator*() const;

    SimpleBidiIterator&amp; operator++();

    SimpleBidiIterator operator++(int)
    {
        auto tmp = *this;
        ++*this;
        return tmp;
    }

    SimpleBidiIterator&amp; operator--();

    SimpleBidiIterator operator--(int)
    {
        auto tmp = *this;
        --*this;
        return tmp;
    }

    bool operator==(const SimpleBidiIterator&amp;) const;
};

static_assert(std::bidirectional_iterator&lt;SimpleBidiIterator&gt;);
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc forward_iterator}}
{{dsc inc|cpp/iterator/dsc random_access_iterator}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
{{cpp/iterator/ostream_iterator/title|operator{{=}}}}
{{cpp/iterator/ostream_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|1=
ostream_iterator&amp; operator=( const ostream_iterator&amp; );
}}
{{dcl|num=2|1=
ostream_iterator&amp; operator=( const T&amp; value );
}}
{{dcl end}}

@1@ Copy assignment operator. Assigns the contents of {{c|other}}
@2@ Inserts {{c|value}} into the associated stream, then inserts the delimiter, if one was specified at construction time.

If {{tt|out_stream}} is a pointer to the associated {{lc|std::basic_ostream}} and {{tt|delim}} is the delimiter specified at the construction of this object, then the effect is equivalent to

{{c|1=
*out_stream &lt;&lt; value;
if (delim != 0)
    *out_stream &lt;&lt; delim;
return *this;
}}

===Parameters===
{{par begin}}
{{par|value|the object to insert}}
{{par end}}

===Return value===
{{c|*this}}

===Notes===
{{tt|T}} can be any class with a user-defined {{tt|operator&lt;&lt;}}.

Prior to C++20, the existence of the copy assignment operator relied on the [[cpp/language/copy_assignment#Implicitly-defined_copy_assignment_operator|deprecated implicit generation]].

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;

int main()
{
    std::ostream_iterator&lt;int&gt; i1(std::cout, ", ");
    *i1++ = 1; // usual form, used by standard algorithms
    *++i1 = 2;
    i1 = 3; // neither * nor ++ are necessary
    std::ostream_iterator&lt;double&gt; i2(std::cout);
    i2 = 3.14;
    std::cout &lt;&lt; '\n';
}
|output=
1, 2, 3, 3.14
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
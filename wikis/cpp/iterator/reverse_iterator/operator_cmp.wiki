{{title|1=operator==,!=,&lt;,&lt;=,&gt;,&gt;=,&lt;=&gt;{{petty|(std::reverse_iterator)}}}}
{{cpp/iterator/reverse_iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcla|num=1|constexpr=c++17|1=
template&lt; class Iter1, class Iter2 &gt;
bool operator==( const std::reverse_iterator&lt;Iter1&gt;&amp; lhs,
                 const std::reverse_iterator&lt;Iter2&gt;&amp; rhs );
}}
{{dcla|num=2|constexpr=c++17|1=
template&lt; class Iter1, class Iter2 &gt;
bool operator!=( const std::reverse_iterator&lt;Iter1&gt;&amp; lhs,
                 const std::reverse_iterator&lt;Iter2&gt;&amp; rhs );
}}
{{dcla|num=3|constexpr=c++17|
template&lt; class Iter1, class Iter2 &gt;
bool operator&lt; ( const std::reverse_iterator&lt;Iter1&gt;&amp; lhs,
                 const std::reverse_iterator&lt;Iter2&gt;&amp; rhs );
}}
{{dcla|num=4|constexpr=c++17|1=
template&lt; class Iter1, class Iter2 &gt;
bool operator&lt;=( const std::reverse_iterator&lt;Iter1&gt;&amp; lhs,
                 const std::reverse_iterator&lt;Iter2&gt;&amp; rhs );
}}
{{dcla|num=5|constexpr=c++17|
template&lt; class Iter1, class Iter2 &gt;
bool operator&gt; ( const std::reverse_iterator&lt;Iter1&gt;&amp; lhs,
                 const std::reverse_iterator&lt;Iter2&gt;&amp; rhs );
}}
{{dcla|num=6|constexpr=c++17|1=
template&lt; class Iter1, class Iter2 &gt;
bool operator&gt;=( const std::reverse_iterator&lt;Iter1&gt;&amp; lhs,
                 const std::reverse_iterator&lt;Iter2&gt;&amp; rhs );
}}
{{dcl|num=7|since=c++20|1=
template&lt; class Iter1, std::three_way_comparable_with&lt;Iter1&gt; Iter2 &gt;
constexpr std::compare_three_way_result_t&lt;Iter1, Iter2&gt;
    operator&lt;=&gt;( const std::reverse_iterator&lt;Iter1&gt;&amp; lhs,
                 const std::reverse_iterator&lt;Iter2&gt;&amp; rhs );
}}
{{dcl end}}

Compares the underlying iterators of {{c|lhs}} and {{c|rhs}}.
* The result of equality comparisons are preserved (i.e. equal underlying iterators imply equal reverse iterators).
* The result of relational comparisons are reversed (i.e. a greater underlying iterator implies a lesser reverse iterator).

{{rrev|since=c++20|
@1@ {{cpp/enable if|{{c|1=lhs.base() == rhs.base()}} is well-formed and convertible to {{c/core|bool}}}}.

@2@ {{cpp/enable if|{{c|1=lhs.base() != rhs.base()}} is well-formed and convertible to {{c/core|bool}}}}.

@3@ {{cpp/enable if|{{c|lhs.base() &gt; rhs.base()}} is well-formed and convertible to {{c/core|bool}}}}.

@4@ {{cpp/enable if|{{c|1=lhs.base() &gt;= rhs.base()}} is well-formed and convertible to {{c/core|bool}}}}.

@5@ {{cpp/enable if|{{c|lhs.base() &lt; rhs.base()}} is well-formed and convertible to {{c/core|bool}}}}.

@6@ {{cpp/enable if|{{c|1=lhs.base() &lt;= rhs.base()}} is well-formed and convertible to {{c/core|bool}}}}.
}}


===Parameters===
{{par begin}}
{{par|lhs, rhs|iterator adaptors to compare}}
{{par end}}

===Return value===
@1@ {{c|1=lhs.base() == rhs.base()}}
@2@ {{c|1=lhs.base() != rhs.base()}}
@3@ {{c|lhs.base() &gt; rhs.base()}}
@4@ {{c|1=lhs.base() &gt;= rhs.base()}}
@5@ {{c|lhs.base() &lt; rhs.base()}}
@6@ {{c|1=lhs.base() &lt;= rhs.base()}}
@7@ {{c|1=rhs.base() &lt;=&gt; lhs.base()}}

===Notes===
{{c/core|1=operator&lt;=&gt;}} returns {{c|1=rhs.base() &lt;=&gt; lhs.base()}} rather than {{c|1=lhs.base() &lt;=&gt; rhs.base()}} because this is a reverse iterator.

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iterator&gt;

int main()
{
    int a[]{0, 1, 2, 3};
    //            ↑  └───── x, y
    //            └──────── z
    // “x” and “y” are equal, but “x” is less than “z” (reversely)
    std::reverse_iterator&lt;int*&gt;
        x{std::rend(a) - std::size(a)},
        y{std::rend(a) - std::size(a)},
        z{std::rbegin(a) + 1};

    // two-way comparisons
    assert(  x == y );
    assert(!(x != y));
    assert(!(x &lt;  y));
    assert(  x &lt;= y );
    assert(!(x == z));
    assert(  x != z );
    assert(  x &lt;  z );
    assert(  x &lt;= z );

    // three-way comparisons
    assert(  x &lt;=&gt; y == 0 );
    assert(!(x &lt;=&gt; y &lt;  0));
    assert(!(x &lt;=&gt; y &gt;  0));
    assert(!(x &lt;=&gt; z == 0));
    assert(  x &lt;=&gt; z &lt;  0 );
    assert(!(x &lt;=&gt; z &gt;  0));
}
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=280|std=C++98|before=heterogeneous assignment was not allowed|after=allowed}}
{{dr list end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
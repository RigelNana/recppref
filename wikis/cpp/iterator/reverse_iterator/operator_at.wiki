{{cpp/iterator/reverse_iterator/title|operator[]}}
{{cpp/iterator/reverse_iterator/navbar}}
{{ddcla|constexpr=c++17|
/* unspecified */ operator[]( difference_type n ) const;
}}

Returns a reference to the element at specified relative location.

===Parameters===
{{par begin}}
{{par|n|position relative to current location}}
{{par end}}

===Return value===
{{box|{{rlpst|/#current}}{{c/core|[-n - 1]}}}}

===Notes===
The return type was changed by {{lwg|386}} to be unspecified because the return type of the underlying iterator's {{c/core|operator[]}} was also unspecified at the time.

However, as of {{stddoc|N3066}}, the return type of a {{named req|RandomAccessIterator}}'s {{c/core|operator[]}} is required to be convertible to {{c/core|reference}}. In all common implementations, the return type is declared to be {{c/core|reference}}. See also {{lwg|2595}}.

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;list&gt;
#include &lt;vector&gt;

int main()
{
    int a[]{0, 1, 2, 3};
    std::reverse_iterator&lt;int*&gt; iter1{std::rbegin(a)};
    for (std::size_t i{}; i != std::size(a); ++i)
        std::cout &lt;&lt; iter1[i] &lt;&lt; ' '; // decltype(iter1[i]) is int&amp;
    std::cout &lt;&lt; '\n';
    
    std::vector v{0, 1, 2, 3};
    std::reverse_iterator&lt;std::vector&lt;int&gt;::iterator&gt; iter2{std::rbegin(v)};
    for (std::size_t i{}; i != std::size(v); ++i)
        std::cout &lt;&lt; iter2[i] &lt;&lt; ' '; // decltype(iter2[i]) is int&amp;
    std::cout &lt;&lt; '\n';
    
    // constexpr context
    constexpr static std::array&lt;int, 4&gt; z{0, 1, 2, 3};
    constexpr std::reverse_iterator&lt;decltype(z)::const_iterator&gt; iter3{std::crbegin(z)};
    static_assert(iter3[1] == 2);
    
    std::list li{0, 1, 2, 3};
    std::reverse_iterator&lt;std::list&lt;int&gt;::iterator&gt; iter4{std::rbegin(li)};
    *iter4 = 42;   // OK
//  iter4[0] = 13; // Compilation error: the underlying iterator
                   // does not model the random access iterator
}
|output=
3 2 1 0
3 2 1 0
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=386|std=C++98|before=the return type was {{tt|reference}}|after=made unspecified}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator*|reverse_iterator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/iterator/reverse_iterator/title|operator*,-&gt;}}
{{cpp/iterator/reverse_iterator/navbar}}
{{dcl begin}}
{{dcla|num=1|constexpr=c++17|
reference operator*() const;
}}
{{dcl rev begin|num=2}}
{{dcla|constexpr=c++17|until=c++20|
pointer operator-&gt;() const;
}}
{{dcl|since=c++20|
constexpr pointer operator-&gt;() const
    requires (std::is_pointer_v&lt;Iter&gt; {{!!}}
              requires (const Iter i) { i.operator-&gt;(); });
}}
{{dcl rev end}}
{{dcl end}}

Returns a reference or pointer to the element previous to {{rlpst|/#current}}.

{|class="wikitable" style="text-align: center;"
!{{nbsp}}Member function{{nbsp}}
!Equivalent to
|-
|{{c/core|operator*}}
|{{box|{{c/core|1=Iter tmp =}}{{nbspt}}{{rlpst|/#current}}{{c/core|; return *--tmp;}}}}
|-
|{{c/core|operator-&gt;}}
|{{rev begin}}
{{rev|until=c++11|
{{c|return &amp;(operator*());}}
}}
{{rev|since=c++11|until=c++20|
{{c|return std::addressof(operator*());}}
}}
{{rev|since=c++20|
* {{box|{{c/core|return}}{{nbspt}}{{rlpst|/#current}}{{nbspt}}{{c/core|- 1;}}}} if {{tt|Iter}} is a pointer type
* {{box|{{c/core|return std::prev(}}{{rlpst|/#current}}{{c/core|).operator-&gt;();}}}} otherwise
}}
{{rev end}}
|}

===Return value===
As described above.

===Example===
{{example
|code=
#include &lt;complex&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main()
{
    using RI0 = std::reverse_iterator&lt;int*&gt;;
    int a[]{0, 1, 2, 3};
    RI0 r0{std::rbegin(a)};
    std::cout &lt;&lt; "*r0 = " &lt;&lt; *r0 &lt;&lt; '\n';
    *r0 = 42;
    std::cout &lt;&lt; "a[3] = " &lt;&lt; a[3] &lt;&lt; '\n';
    
    using RI1 = std::reverse_iterator&lt;std::vector&lt;int&gt;::iterator&gt;;
    std::vector&lt;int&gt; vi{0, 1, 2, 3};
    RI1 r1{vi.rend() - 2};
    std::cout &lt;&lt; "*r1 = " &lt;&lt; *r1 &lt;&lt; '\n';
    
    using RI2 = std::reverse_iterator&lt;std::vector&lt;std::complex&lt;double&gt;&gt;::iterator&gt;;
    std::vector&lt;std::complex&lt;double&gt;&gt; vc{&lt;!----&gt;{1, 2}, {3, 4}, {5, 6}, {7, 8}&lt;!----&gt;};
    RI2 r2{vc.rbegin() + 1};
    std::cout &lt;&lt; "vc[2] = (" &lt;&lt; r2-&gt;real() &lt;&lt; ',' &lt;&lt; r2-&gt;imag() &lt;&lt; ")\n";
}
|output=
*r0 = 3
a[3] = 42
*r1 = 1
vc[2] = (5,6)
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2188|std=C++11|before={{c/core|operator-&gt;}} used {{tt|&amp;}} to take address|after=uses {{lc|std::addressof}} instead}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator_at|reverse_iterator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
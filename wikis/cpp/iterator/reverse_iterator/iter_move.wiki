{{cpp/title|1=iter_move{{petty|(std::reverse_iterator)}}}}
{{cpp/iterator/reverse_iterator/navbar}}
{{ddcl|since=c++20|
friend constexpr std::iter_rvalue_reference_t&lt;Iter&gt;
    iter_move( const std::reverse_iterator&amp; i ) noexcept(/* see below */);
}}

Casts the result of dereferencing the adjusted underlying iterator to its associated rvalue reference type.

Equivalent to {{c multi|auto tmp {{=}} i.base();|return std::ranges::iter_move(--tmp);}}.

{{cpp/hidden friend|{{c/core|std::reverse_iterator&lt;Iter&gt;}}|tmpl=yes}}

===Parameters===
{{par begin}}
{{par|i|a source reverse iterator}}
{{par end}}

===Return value===
An rvalue reference or a prvalue temporary.

===Complexity===
Constant.

===Exceptions===
{{noexcept|
    std::is_nothrow_copy_constructible_v&lt;Iter&gt; &amp;&amp;
    noexcept(std::ranges::iter_move(--std::declval&lt;Iter&amp;&gt;()))
}}

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

void print(const auto&amp; rem, const auto&amp; v)
{
    std::cout &lt;&lt; rem &lt;&lt; '[' &lt;&lt; size(v) &lt;&lt; "] {";
    for (char comma[]{0, 0}; const auto&amp; s : v)
        std::cout &lt;&lt; comma &lt;&lt; ' ' &lt;&lt; std::quoted(s), comma[0] = ',';
    std::cout &lt;&lt; " }\n";
}

int main()
{
    std::vector&lt;std::string&gt; p{"Alpha", "Bravo", "Charlie"}, q;
    
    print("p", p), print("q", q);
    
    using RI = std::reverse_iterator&lt;std::vector&lt;std::string&gt;::iterator&gt;;
    
    for (RI iter{p.rbegin()}, rend{p.rend()}; iter != rend; ++iter)
        q.emplace_back(/* ADL */ iter_move(iter));
    
    print("p", p), print("q", q);
}
|p=true
|output=
p[3] { "Alpha", "Bravo", "Charlie" }
q[0] { }
p[3] { "", "", "" }
q[3] { "Charlie", "Bravo", "Alpha" }
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/ranges/dsc iter_move}}
{{dsc inc|cpp/iterator/adaptor/dsc iter_move|move_iterator}}
{{dsc inc|cpp/utility/dsc move}}
{{dsc inc|cpp/utility/dsc move_if_noexcept}}
{{dsc inc|cpp/utility/dsc forward}}
{{dsc inc|cpp/algorithm/ranges/dsc move}}
{{dsc inc|cpp/algorithm/ranges/dsc move_backward}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
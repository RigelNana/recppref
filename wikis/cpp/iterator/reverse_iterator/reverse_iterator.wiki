{{cpp/iterator/reverse_iterator/title|reverse_iterator}}
{{cpp/iterator/reverse_iterator/navbar}}
{{dcl begin}}
{{dcla|num=1|constexpr=c++17|
reverse_iterator();
}}
{{dcla|num=2|constexpr=c++17|
explicit reverse_iterator( iterator_type x );
}}
{{dcla|num=3|constexpr=c++17|
template&lt; class U &gt;
reverse_iterator( const reverse_iterator&lt;U&gt;&amp; other );
}}
{{dcl end}}

Constructs a new {{tt|reverse_iterator}}.

{|class="wikitable" style="text-align: center;"
!{{nbsp}}Overload{{nbsp}}
!style="font-weight: normal;"|{{rlpst|/#current}}
|-
|{{v|1}}
|[[cpp/language/value initialization|value-initialized]]
|-
|{{v|2}}
|initialized with {{c|x}}
|-
|{{v|3}}
|{{nbsp}}initialized with {{box|{{c/core|other.}}{{rlpst|/#current}}}}{{nbsp}}
|}

@3@ The converting constructor.
{{rrev|since=c++20|
{{cpp/enable if|{{c|std::is_same_v&lt;U, Iter&gt;}} is {{c|false}} and {{c|std::convertible_to&lt;const U&amp;, Iter&gt;}} is modeled}}.
}}

===Parameters===
{{par begin}}
{{par|x|iterator to adapt}}
{{par|other|iterator adaptor to copy}}
{{par end}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;concepts&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main()
{
    std::vector v{0, 1, 2, 3, 4};

    using ReverseIt = std::reverse_iterator&lt;std::vector&lt;int&gt;::const_iterator&gt;;

    ReverseIt i1; // overload (1)
    i1 = v.crbegin();
    assert(*i1 == 4);

    ReverseIt i2(i1); // overload (2)
    assert(i2[0] == 4);

    int x[]{1, 2, 3};
    auto i3 = std::reverse_iterator&lt;int*&gt;(x + std::size(x)); // overload (1)
    i3[0] = -3;
    assert(x[2] == -3);
    std::reverse_iterator&lt;int const*&gt; i4(i3); // overload (3): int =&gt; const int
    static_assert(std::convertible_to&lt;decltype(i3)::value_type,
                                      decltype(i4)::value_type&gt;);
    // i4[0] = 5; // Error: assignment of read-only location
}
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=235|std=C++98|before=the effect of overload {{vl|1}} was not specified|after=specified}}
{{dr list item|wg=lwg|dr=1012|std=C++98|before=overload {{vl|1}} default-initialized {{rlpst|/#current}}|after=it is value-initialized}}
{{dr list item|wg=lwg|dr=3435|std=C++20|before=overload {{vl|3}} was not constrained|after=constrained}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator{{=}}|reverse_iterator}}
{{dsc inc|cpp/iterator/dsc make_reverse_iterator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
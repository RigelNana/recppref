{{cpp/iterator/reverse_iterator/title|base}}
{{cpp/iterator/reverse_iterator/navbar}}
{{ddcla|constexpr=c++17|
iterator_type base() const;
}}

Returns the underlying iterator.

===Return value===
{{box|{{rlpst|/#current}}}}

===Notes===
The base iterator refers to the element that is next (from the {{tt|iterator_type}} perspective) to the element the {{tt|reverse_iterator}} is currently pointing to. That is {{c|1=&amp;*(this-&gt;base() - 1) == &amp;*(*this)}}.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;int&gt; v = {0, 1, 2, 3, 4, 5};
    
    using RevIt = std::reverse_iterator&lt;std::vector&lt;int&gt;::iterator&gt;;
    
    const auto it = v.begin() + 3;
    RevIt r_it{it};
    
    std::cout &lt;&lt; "*it == " &lt;&lt; *it &lt;&lt; '\n'
              &lt;&lt; "*r_it == " &lt;&lt; *r_it &lt;&lt; '\n'
              &lt;&lt; "*r_it.base() == " &lt;&lt; *r_it.base() &lt;&lt; '\n'
              &lt;&lt; "*(r_it.base() - 1) == " &lt;&lt; *(r_it.base() - 1) &lt;&lt; '\n';
    
    RevIt r_end{v.begin()};
    RevIt r_begin{v.end()};
    
    for (auto it = r_end.base(); it != r_begin.base(); ++it)
        std::cout &lt;&lt; *it &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    for (auto it = r_begin; it != r_end; ++it)
        std::cout &lt;&lt; *it &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
*it == 3
*r_it == 2
*r_it.base() == 3
*(r_it.base() - 1) == 2
0 1 2 3 4 5
5 4 3 2 1 0
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator*|reverse_iterator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
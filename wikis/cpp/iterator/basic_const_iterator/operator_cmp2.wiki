{{title|1=operator&lt;,&lt;=,&gt;,&gt;={{small|(std::basic_const_iterator&lt;Iter&gt;)}}}}
{{cpp/iterator/basic_const_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
template&lt; /*not-a-const-iterator*/ I &gt;
friend constexpr bool operator&lt;( const I&amp; x, const basic_const_iterator&amp; y )
    requires std::random_access_iterator&lt;Iter&gt; &amp;&amp; std::totally_ordered_with&lt;Iter, I&gt;;
}}
{{dcl|num=2|since=c++23|1=
template&lt; /*not-a-const-iterator*/ I &gt;
friend constexpr bool operator&gt;( const I&amp; x, const basic_const_iterator&amp; y )
    requires std::random_access_iterator&lt;Iter&gt; &amp;&amp; std::totally_ordered_with&lt;Iter, I&gt;;
}}
{{dcl|num=3|since=c++23|1=
template&lt; /*not-a-const-iterator*/ I &gt;
friend constexpr bool operator&lt;=( const I&amp; x, const basic_const_iterator&amp; y )
    requires std::random_access_iterator&lt;Iter&gt; &amp;&amp; std::totally_ordered_with&lt;Iter, I&gt;;
}}
{{dcl|num=4|since=c++23|1=
template&lt; /*not-a-const-iterator*/ I &gt;
friend constexpr bool operator&gt;=( const I&amp; x, const basic_const_iterator&amp; y )
    requires std::random_access_iterator&lt;Iter&gt; &amp;&amp; std::totally_ordered_with&lt;Iter, I&gt;;
}}
{{dcl end}}

Compare a {{tt|basic_const_iterator}} with another value. These function templates are used when the left operand is not a {{tt|basic_const_iterator}}.

{{c|I}} satisfies the exposition-only concept {{c|/*not-a-const-iterator*/}} if and only if it's not a specialization of {{tt|basic_const_iterator}}.

{{cpp/hidden friend|plural=yes|{{c|basic_const_iterator&lt;Iter&gt;}}}}

===Parameters===
{{par begin}}
{{par|x, y|iterators to compare}}
{{par end}}

===Return value===
@1@ {{c|x &lt; y.base()}}
@2@ {{c|x &gt; y.base()}}
@3@ {{c|1=x &lt;= y.base()}}
@4@ {{c|1=x &gt;= y.base()}}

===Notes===
If the left operand is a {{tt|basic_const_iterator}}, the {{rlp|operator cmp|member comparison functions}} are used.

===Example===
{{example
|code=
#include &lt;iterator&gt;

int main()
{
    static int arr[1];
    static constexpr std::basic_const_iterator&lt;int*&gt; it = std::end(arr);
    static_assert(arr &lt; it);
}
}}

===See also===
{{dsc begin}}
{{dsc todo}}
{{dsc end}}
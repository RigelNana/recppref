{{cpp/title|empty}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{cpp/iterator/range access headers}}
{{dcla|num=1|since=c++17|
template&lt; class C &gt;
constexpr auto empty( const C&amp; c ) -&gt; decltype(c.empty());
}}
{{dcla|num=2|since=c++17|
template&lt; class T, std::size_t N &gt;
constexpr bool empty( const T (&amp;array)[N] ) noexcept;
}}
{{dcla|num=3|since=c++17|
template&lt; class E &gt;
constexpr bool empty( std::initializer_list&lt;E&gt; il ) noexcept;
}}
{{dcl end}}

Returns whether the given range is empty.

@1@ Returns {{c|c.empty()}}.
@2@ Returns {{c|false}}.
@3@ Returns {{c|1=il.size() == 0}}.

===Parameters===
{{par begin}}
{{par|c|a container or view with an {{tt|empty}} member function}}
{{par|array|an array of arbitrary type}}
{{par|il|an {{lc|std::initializer_list}}}}
{{par end}}

===Return value===
@1@ {{c|c.empty()}}
@2@ {{c|false}}
@3@ {{c|1=il.size() == 0}}

===Exceptions===
@1@ {{cpp/impldef exception item}}

===Notes===
The overload for {{lc|std::initializer_list}} is necessary because it does not have a member function {{tt|empty}}.

{{feature test macro|__cpp_lib_nonmember_container_access|{{lc|std::size()}}, {{lc|std::data()}}, and {{tt|std::empty()}}|value=201411L|std=C++17}}

===Possible implementation===
{{eq impl
|ver1=1|1=
template&lt;class C&gt;
[[nodiscard]] constexpr auto empty(const C&amp; c) -&gt; decltype(c.empty())
{
    return c.empty();
}
|ver2=2|2=
template&lt;class T, std::size_t N&gt;
[[nodiscard]] constexpr bool empty(const T (&amp;array)[N]) noexcept
{
    return false;
}
|ver3=3|3=
template&lt;class E&gt;
[[nodiscard]] constexpr bool empty(std::initializer_list&lt;E&gt; il) noexcept
{
    return il.size() == 0;
}
}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;vector&gt;

template&lt;class T&gt;
void print(const T&amp; container)
{
    if (std::empty(container))
        std::cout &lt;&lt; "Empty\n";
    else
    {
        std::cout &lt;&lt; "Elements:";
        for (const auto&amp; element : container)
            std::cout &lt;&lt; ' ' &lt;&lt; element;
        std::cout &lt;&lt; '\n';
    }
}

int main()
{
    std::vector&lt;int&gt; c = {1, 2, 3};
    print(c);
    c.clear();
    print(c);
    
    int array[] = {4, 5, 6};
    print(array);
    
    auto il = {7, 8, 9};
    print(il);
}
|output=
Elements: 1 2 3
Empty
Elements: 4 5 6
Elements: 7 8 9
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc empty}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
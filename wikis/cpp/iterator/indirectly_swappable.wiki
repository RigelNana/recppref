{{cpp/title|indirectly_swappable}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl|since=c++20|1=
template&lt; class I1, class I2 = I1 &gt;
concept indirectly_swappable =
    std::indirectly_readable&lt;I1&gt; &amp;&amp;
    std::indirectly_readable&lt;I2&gt; &amp;&amp;
    requires( const I1 i1, const I2 i2 )
    {
        ranges::iter_swap(i1, i1);
        ranges::iter_swap(i1, i2);
        ranges::iter_swap(i2, i1);
        ranges::iter_swap(i2, i2);
    };
}}
{{dcl end}}

The concept {{tt|indirectly_swappable}} specifies a relationship between two types respectively modelling {{lc|std::indirectly_readable}}, where their referenced types can be swapped.

===Semantic requirements===
{{tt|I1}} and {{tt|I2}} model {{tt|indirectly_swappable}} only if all concepts it subsumes are modeled.

{{cpp/concepts/equality preservation}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc indirectly_readable}}
{{dsc inc|cpp/iterator/ranges/dsc iter_swap}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
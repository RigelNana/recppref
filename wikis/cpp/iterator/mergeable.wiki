{{cpp/title|mergeable}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{dcl header | iterator}}
{{dcl | since=c++20 | 1=
template&lt; class I1, class I2, class Out, class Comp = ranges::less,
          class Proj1 = std::identity, class Proj2 = std::identity &gt;
concept mergeable =
    std::input_iterator&lt;I1&gt; &amp;&amp;
    std::input_iterator&lt;I2&gt; &amp;&amp;
    std::weakly_incrementable&lt;Out&gt; &amp;&amp;
    std::indirectly_copyable&lt;I1, Out&gt; &amp;&amp;
    std::indirectly_copyable&lt;I2, Out&gt; &amp;&amp;
    std::indirect_strict_weak_order&lt;Comp,
                                    std::projected&lt;I1, Proj1&gt;,
                                    std::projected&lt;I2, Proj2&gt;&gt;;
}}
{{dcl end}}

The {{tt|mergeable}} concept specifies the requirements for algorithms that merge two input ranges into a single output range according to the strict weak ordering imposed by {{tt|Comp}}.

===Semantic requirements===
{{tt|mergeable}} is modeled only if all concepts it subsumes are modeled.

===See also===
{{dsc begin}}
{{dsc inc | cpp/algorithm/ranges/dsc merge}}
{{dsc inc | cpp/algorithm/ranges/dsc set_union}}
{{dsc inc | cpp/algorithm/ranges/dsc set_intersection}}
{{dsc inc | cpp/algorithm/ranges/dsc set_difference}}
{{dsc inc | cpp/algorithm/ranges/dsc set_symmetric_difference}}
{{dsc end}}

{{langlinks|es|ja|zh}}
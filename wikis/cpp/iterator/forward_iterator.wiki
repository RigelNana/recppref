{{cpp/title|forward_iterator}}
{{cpp/iterator/navbar}}
{{ddcl|header=iterator|since=c++20|1=
template&lt; class I &gt;
    concept forward_iterator =
        std::input_iterator&lt;I&gt; &amp;&amp;
        std::derived_from&lt;/*ITER_CONCEPT*/&lt;I&gt;, std::forward_iterator_tag&gt; &amp;&amp;
        std::incrementable&lt;I&gt; &amp;&amp;
        std::sentinel_for&lt;I, I&gt;;
}}

This concept refines {{lc|std::input_iterator}} by requiring that {{tt|I}} also model {{lc|std::incrementable}} (thereby making it suitable for multi-pass algorithms), and guaranteeing that two iterators to the same range can be compared against each other.

{{cpp/iterator/iter_concept}}

===Semantic requirements===
{{tt|I}} models {{tt|std::forward_iterator}} if, and only if {{tt|I}} models all the concepts it subsumes, and given objects {{c|i}} and {{c|j}} of type {{tt|I}}:

* Comparison between iterators {{c|i}} and {{c|j}} has a defined result if
:* {{c|i}} and {{c|j}} are iterators to the same underlying sequence, or
:* both {{c|i}} and {{c|j}} are value-initialized, in which case they compare equal.
* Pointers and references obtained from a forward iterator into a range remain valid while the range exists.
* If {{c|i}} and {{c|j}} are dereferenceable, they offer the ''multi-pass guarantee'', that is:
:* {{c|1=i == j}} implies {{c|1=++i == ++j}}, and
:* {{c|((void)[](auto x){ ++x; }(i), *i)}} is equivalent to {{c|*i}}.

===Notes===
Unlike the {{named req|ForwardIterator}} requirements, the {{tt|forward_iterator}} concept does not require dereference to return a reference.

===Example===
A minimum forward iterator.

{{source|1=
#include &lt;cstddef&gt;
#include &lt;iterator&gt;

struct SimpleForwardIterator
{
    using difference_type = std::ptrdiff_t;
    using value_type = int;

    int operator*() const;

    SimpleForwardIterator&amp; operator++();

    SimpleForwardIterator operator++(int)
    {
        auto tmp = *this;
        ++*this;
        return tmp;
    }

    bool operator==(const SimpleForwardIterator&amp;) const;
};

static_assert(std::forward_iterator&lt;SimpleForwardIterator&gt;);
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc input_iterator}}
{{dsc inc|cpp/iterator/dsc bidirectional_iterator}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
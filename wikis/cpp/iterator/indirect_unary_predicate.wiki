{{cpp/title|indirect_unary_predicate}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl|since=c++20|1=
template&lt; class F, class I &gt;
concept indirect_unary_predicate =
    std::indirectly_readable&lt;I&gt; &amp;&amp;
    std::copy_constructible&lt;F&gt; &amp;&amp;
    std::predicate&lt;F&amp;, /*indirect-value-t*/&lt;I&gt;&gt; &amp;&amp;
    std::predicate&lt;F&amp;, std::iter_reference_t&lt;I&gt;&gt;;
}}
{{dcl end}}

The concept {{tt|indirect_unary_predicate}} specifies requirements for algorithms that call unary predicates as their arguments. The key difference between this concept and {{lc|std::predicate}} is that it is applied to the type that {{tt|I}} references, rather than {{tt|I}} itself.

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P2609R3|std=C++20|before=one of the requirements was defined in terms of {{c|std::iter_value_t&lt;I&gt;&amp;}}&lt;br&gt;which mishandled projections resulting in incompatibility with predicate {{c|F&amp;}}|after=defined in terms of {{c|/*indirect-value-t*/&lt;I&gt;}}&lt;br&gt;to correctly handle such projections}}
{{dr list item|paper=P2997R1|std=C++20|before={{tt|indirect_unary_predicate}} required {{c|F&amp;}} to satisfy {{lconcept|predicate}} with&lt;br&gt;{{c|std::iter_common_reference_t&lt;I&gt;}}|after=does not require}}
{{dr list end}}

{{langlinks|es|ja|zh}}
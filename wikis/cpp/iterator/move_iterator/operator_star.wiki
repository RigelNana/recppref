{{cpp/iterator/move_iterator/title|operator*,-&gt;}}
{{cpp/iterator/move_iterator/navbar}}
{{dcl begin}}
{{dcla|num=1|since=c++11|constexpr=c++17|
reference operator*() const;
}}
{{dcla|num=2|since=c++11|constexpr=c++17|deprecated=c++20|
pointer operator-&gt;() const;
}}
{{dcl end}}

Returns an rvalue reference or pointer to the current element.

===Return value===
@1@ {{rev inl|until=c++20|{{box|{{c/core|static_cast&lt;reference&gt;(*}}{{rlpsi|/#current}}{{sep}}{{c/core|)}}}}}}{{rev inl|since=c++20|{{box|{{c/core|ranges::iter_move(}}{{rlpsi|/#current}}{{sep}}{{c/core|)}}}}}}

@2@ {{box|{{rlpsi|/#current}}}}

===Notes===
{{c/core|operator-&gt;}} is deprecated because deferencing its result may yield an lvalue. This may lead to unintended behavior.

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

void print(auto rem, const auto&amp; v)
{
    for (std::cout &lt;&lt; rem; const auto&amp; e : v)
        std::cout &lt;&lt; std::quoted(e) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::vector&lt;std::string&gt; p{"alpha", "beta", "gamma", "delta"}, q;
    print("1) p: ", p);
    for (std::move_iterator it{p.begin()}, end{p.end()}; it != end; ++it)
    {
        it-&gt;push_back('!'); // calls -&gt; string::push_back(char)
        q.emplace_back(*it); // *it &lt;- overload (1)
    }
    print("2) p: ", p);
    print("3) q: ", q);
    
    std::vector v{1, 2, 3};
    std::move_iterator it{v.begin()};
    // *it = 13; // error: using rvalue as lvalue
}
|p=true
|output=
1) p: "alpha" "beta" "gamma" "delta"
2) p: "" "" "" ""
3) q: "alpha!" "beta!" "gamma!" "delta!"
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2106|std=C++11|before={{c/core|operator*}} would return a dangling&lt;br&gt;reference if {{box|{{c/core|*}}{{rlpsi|/#current}}}} yields a prvalue|after=returns the object&lt;br&gt;in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator_at|move_iterator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
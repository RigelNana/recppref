{{cpp/iterator/move_iterator/title|1=operator++,+,+=,--,-,-=}}
{{cpp/iterator/move_iterator/navbar}}
{{dcl begin}}
{{dcla|num=1|constexpr=c++17|
move_iterator&amp; operator++();
}}
{{dcla|num=2|constexpr=c++17|
move_iterator&amp; operator--();
}}
{{dcl rev begin|num=3}}
{{dcla|constexpr=c++17|until=c++20|
move_iterator operator++( int );
}}
{{dcl|since=c++20|
constexpr auto operator++( int );
}}
{{dcl rev end}}
{{dcla|num=4|constexpr=c++17|
move_iterator operator--( int );
}}
{{dcla|num=5|constexpr=c++17|
move_iterator operator+( difference_type n ) const;
}}
{{dcla|num=6|constexpr=c++17|
move_iterator operator-( difference_type n ) const;
}}
{{dcla|num=7|constexpr=c++17|1=
move_iterator&amp; operator+=( difference_type n );
}}
{{dcla|num=8|constexpr=c++17|1=
move_iterator&amp; operator-=( difference_type n );
}}
{{dcl end}}

Increments or decrements the underlying iterator.

{|class="wikitable" style="text-align: center;"
!{{nbsp}}Overload{{nbsp}}
!Equivalent to
|-
|{{v|1}}
|{{box|{{c/core|++}}{{rlpsi|/#current}}{{sep}}{{c/core|; return *this;}}}}
|-
|{{v|2}}
|{{box|{{c/core|--}}{{rlpsi|/#current}}{{sep}}{{c/core|; return *this;}}}}
|-
|{{v|3}}
|{{rev begin}}
{{rev|until=c++20|
{{box|{{c/core|1=move_iterator tmp = *this; ++}}{{rlpsi|/#current}}{{sep}}{{c/core|; return tmp;}}}}
}}
{{rev|since=c++20|
* {{box|{{c/core|1=move_iterator tmp = *this; ++}}{{rlpsi|/#current}}{{sep}}{{c/core|; return tmp;}}}}&lt;br&gt;if {{tt|Iter}} models {{lconcept|forward_iterator}}
* {{box|{{c/core|++}}{{rlpsi|/#current}}{{c/core|;}}}} otherwise
}}
{{rev end}}
|-
|{{v|4}}
|{{box|{{c/core|1=move_iterator tmp = *this; --}}{{rlpsi|/#current}}{{sep}}{{c/core|; return tmp;}}}}
|-
|{{v|5}}
|{{box|{{c/core|return move_iterator(}}{{rlpsi|/#current}}{{nbspt}}{{c/core|+ n);}}}}
|-
|{{v|6}}
|{{box|{{c/core|return move_iterator(}}{{rlpsi|/#current}}{{nbspt}}{{c/core|- n);}}}}
|-
|{{v|7}}
|{{box|{{rlpsi|/#current}}{{nbspt}}{{c/core|1=+= n; return *this;}}}}
|-
|{{v|8}}
|{{box|{{rlpsi|/#current}}{{nbspt}}{{c/core|1=-= n; return *this;}}}}
|}

===Parameters===
{{par begin}}
{{par|n|position relative to current location}}
{{par end}}

===Return value===
As described above.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator+|move_iterator}}
{{dsc inc|cpp/iterator/adaptor/dsc operator-|move_iterator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
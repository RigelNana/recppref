{{title|1=iter_swap{{petty|(std::move_iterator)}}}}
{{cpp/iterator/move_iterator/navbar}}
{{ddcl|since=c++20|
template&lt; std::indirectly_swappable&lt;Iter&gt; Iter2 &gt;
friend constexpr void iter_swap( const move_iterator&amp; x,
                                 const std::move_iterator&lt;Iter2&gt;&amp; y )
    noexcept(/* see below */);
}}

Swaps the objects pointed to by two underlying iterators.

Equivalent to {{c|ranges::iter_swap(x.base(), y.base());}}.

{{cpp/hidden friend|{{c/core|std::move_iterator&lt;Iter&gt;}}|tmpl=yes}}

===Parameters===
{{par begin}}
{{par|x, y|move iterators to the elements to swap}}
{{par end}}

===Complexity===
Constant.

===Exceptions===
{{noexcept|noexcept(ranges::iter_swap(x.base(), y.base()))}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;std::string&gt; p{"AA", "EE"},
                             q{"ⱯⱯ", "ƎƎ"};
    
    std::move_iterator&lt;std::vector&lt;std::string&gt;::iterator&gt;
        x = std::make_move_iterator(p.begin()),
        y = std::make_move_iterator(q.begin());
    
    std::cout &lt;&lt; *x &lt;&lt; ' ' &lt;&lt; *y &lt;&lt; '\n';
    
    iter_swap(x, y); // ADL
    
    std::cout &lt;&lt; *x &lt;&lt; ' ' &lt;&lt; *y &lt;&lt; '\n';
}
|output=
AA ⱯⱯ
ⱯⱯ AA
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc swap}}
{{dsc inc|cpp/algorithm/dsc swap_ranges}}
{{dsc inc|cpp/algorithm/dsc iter_swap}}
{{dsc inc|cpp/iterator/ranges/dsc iter_swap}}
{{dsc inc|cpp/iterator/adaptor/dsc iter_swap|reverse_iterator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|sized_sentinel_for|disable_sized_sentinel_for}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl|num=1|since=c++20|1=
template&lt; class S, class I &gt;
    concept sized_sentinel_for =
        std::sentinel_for&lt;S, I&gt; &amp;&amp;
        !std::disable_sized_sentinel_for&lt;std::remove_cv_t&lt;S&gt;,
                                         std::remove_cv_t&lt;I&gt;&gt; &amp;&amp;
        requires(const I&amp; i, const S&amp; s) {
            { s - i } -&gt; std::same_as&lt;std::iter_difference_t&lt;I&gt;&gt;;
            { i - s } -&gt; std::same_as&lt;std::iter_difference_t&lt;I&gt;&gt;;
        };
}}
{{dcl|num=2|since=c++20|1=
template&lt; class S, class I &gt;
    inline constexpr bool disable_sized_sentinel_for = false;
}}
{{dcl end}}

@1@ The {{tt|sized_sentinel_for}} concept specifies that an object of the iterator type {{tt|I}} and an object of the sentinel type {{tt|S}} can be subtracted to compute the distance between them in constant time.

@2@ The {{tt|disable_sized_sentinel_for}} variable template can be used to prevent iterators and sentinels that can be subtracted but do not actually model {{tt|sized_sentinel_for}} from satisfying the concept.
@@ A program may specialize {{tt|disable_sized_sentinel_for}} for cv-unqualified non-array object type {{tt|S}} and {{tt|I}}, as long as at least one of which is a {{lsd|cpp/language/type#Program-defined type}}. Such specializations are usable in {{lt|cpp/language/constant expression}}s and have type {{c/core|const bool}}.

===Semantic requirements===
Let {{c|i}} be an iterator of type {{tt|I}}, and {{c|s}} a sentinel of type {{tt|S}} such that {{range|i|s}} denotes a range. Let {{c|n}} be the smallest number of applications of {{c|++i}} necessary to make {{c|1=bool(i == s)}} be {{c|true}}. {{tt|I}} and {{tt|S}} model {{tt|sized_sentinel_for&amp;lt;S, I&gt;}} only if all following conditions are satisfied:
* If {{c|n}} is representable by {{c/core|std::iter_difference_t&lt;I&gt;}}, then {{c|s - i}} is well-defined and equals {{c|n}}.
* If {{c|-n}} is representable by {{c/core|std::iter_difference_t&lt;I&gt;}}, then {{c|i - s}} is well-defined and equals {{c|-n}}.

{{cpp/concepts/equality preservation}}
{{cpp/concepts/implicit expression variations}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc sized_range}}
{{dsc inc|cpp/ranges/dsc size}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
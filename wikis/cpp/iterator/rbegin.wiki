{{cpp/title|rbegin|crbegin}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{cpp/iterator/range access headers}}
{{dcla|anchor=no|num=1|since=c++14|constexpr=c++17|
template&lt; class C &gt;
auto rbegin( C&amp; c ) -&gt; decltype(c.rbegin());
}}
{{dcla|anchor=no|num=2|since=c++14|constexpr=c++17|
template&lt; class C &gt;
auto rbegin( const C&amp; c ) -&gt; decltype(c.rbegin());
}}
{{dcla|anchor=no|num=3|since=c++14|constexpr=c++17|
template&lt; class T, std::size_t N &gt;
std::reverse_iterator&lt;T*&gt; rbegin( T (&amp;array)[N] );
}}
{{dcla|anchor=no|num=4|since=c++14|constexpr=c++17|
template&lt; class T &gt;
std::reverse_iterator&lt;const T*&gt; rbegin( std::initializer_list&lt;T&gt; il );
}}
{{dcla|anchor=no|num=5|since=c++14|constexpr=c++17|
template&lt; class C &gt;
auto crbegin( const C&amp; c ) -&gt; decltype(std::rbegin(c));
}}
{{dcl end}}

Returns an iterator to the reverse-beginning of the given range.

@1,2@ Returns {{c|c.rbegin()}}, which is typically an iterator to the reverse-beginning of the sequence represented by {{c|c}}.
:@1@ If {{tt|C}} is a standard {{named req|Container}}, returns a {{tt|C::reverse_iterator}} object.
:@2@ If {{tt|C}} is a standard {{named req|Container}}, returns a {{tt|C::const_reverse_iterator}} object.

@3@ Returns a {{c/core|std::reverse_iterator&lt;T*&gt;}} object to the reverse-beginning of {{c|array}}.

@4@ Returns a {{c/core|std::reverse_iterator&lt;const T*&gt;}} object to the reverse-beginning of {{c|il}}.

@5@ Returns {{c|std::rbegin(c)}}, with {{c|c}} always treated as const-qualified.
@@ If {{tt|C}} is a standard {{named req|Container}}, returns a {{tt|C::const_reverse_iterator}} object.

{{image|range-rbegin-rend.svg}}

===Parameters===
{{par begin}}
{{par|c|a container or view with a {{tt|rbegin}} member function}}
{{par|array|an array of arbitrary type}}
{{par|il|an {{c/core|std::initializer_list}}}}
{{par end}}

===Return value===
@1,2@ {{c|c.rbegin()}}
@3@ {{c|std::reverse_iterator&lt;T*&gt;(array + N)}}
@4@ {{c|std::reverse_iterator&lt;const T*&gt;(il.end())}}
@5@ {{c|c.rbegin()}}

{{cpp/impldef exception}}

===Overloads===
Custom overloads of {{tt|rbegin}} may be provided for classes and enumerations that do not expose a suitable {{tt|rbegin()}} member function, yet can be iterated.

{{rrev|since=c++20|
Overloads of {{tt|rbegin}} found by [[cpp/language/adl|argument-dependent lookup]] can be used to customize the behavior of {{c/core|std::ranges::rbegin}} and {{lc|std::ranges::crbegin}}.
}}

===Notes===
The overload for {{lc|std::initializer_list}} is necessary because it does not have a member function {{tt|rbegin}}.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;int&gt; v = {3, 1, 4};
    auto vi = std::rbegin(v); // the type of “vi” is std::vector&lt;int&gt;::reverse_iterator
    std::cout &lt;&lt; "*vi = " &lt;&lt; *vi &lt;&lt; '\n';
    
    *std::rbegin(v) = 42; // OK: after assignment v[2] == 42
//  *std::crbegin(v) = 13; // error: the location is read-only
    
    int a[] = {-5, 10, 15};
    auto ai = std::rbegin(a); // the type of “ai” is std::reverse_iterator&lt;int*&gt;
    std::cout &lt;&lt; "*ai = " &lt;&lt; *ai &lt;&lt; '\n';
    
    auto il = {3, 1, 4};
    // the type of “it” below is std::reverse_iterator&lt;int const*&gt;:
    for (auto it = std::rbegin(il); it != std::rend(il); ++it)
        std::cout &lt;&lt; *it &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
*vi = 4
*ai = 15
4 1 3
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc begin}}
{{dsc inc|cpp/iterator/dsc end}}
{{dsc inc|cpp/iterator/dsc rend}}
{{dsc inc|cpp/ranges/dsc rbegin}}
{{dsc inc|cpp/ranges/dsc crbegin}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
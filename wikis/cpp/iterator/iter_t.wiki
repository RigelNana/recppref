{{cpp/title|iter_value_t|iter_reference_t|iter_const_reference_t|iter_difference_t|iter_rvalue_reference_t|iter_common_reference_t}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl|num=1|since=c++20|1=
template&lt; class T &gt;
using iter_value_t = /* see below */;
}}
{{dcl|num=2|since=c++20|1=
template&lt; /*dereferenceable*/ T &gt;
using iter_reference_t = decltype(*std::declval&lt;T&amp;&gt;());
}}
{{dcl|num=3|since=c++23|1=
template&lt; std::indirectly_readable T &gt;
using iter_const_reference_t =
    std::common_reference_t&lt;const std::iter_value_t&lt;T&gt;&amp;&amp;,
                            std::iter_reference_t&lt;T&gt;&gt;;
}}
{{dcl|num=4|since=c++20|1=
template&lt; class T &gt;
using iter_difference_t = /* see below */;
}}
{{dcl|num=5|since=c++20|1=
template&lt; /*dereferenceable*/ T&gt;
    requires /* see below */
using iter_rvalue_reference_t =
    decltype(ranges::iter_move(std::declval&lt;T&amp;&gt;()));
}}
{{dcl|num=6|since=c++20|1=
template&lt; std::indirectly_readable T &gt;
using iter_common_reference_t =
    std::common_reference_t&lt;std::iter_reference_t&lt;T&gt;,
                            /*indirect-value-t*/&lt;T&gt;&gt;;
}}
{{dcl h|Helper templates}}
{{dcla|num=7|expos=yes|anchor=dereferenceable|1=
template&lt; class T &gt;
concept /*dereferenceable*/ = /* see below */;
}}
{{dcla|num=8|expos=yes|anchor=indirect-value-t|1=
template&lt; std::indirectly_readable T &gt;
using /*indirect-value-t*/ = /* see below */;
}}
{{dcl end}}

Compute the associated types of an iterator.

@1@ Computes the {{rlp|/#Types and writability|value type}} of {{tt|T}}.
* If {{c/core|std::iterator_traits&lt;std::remove_cvref_t&lt;T&gt;&gt;}} is not specialized, then {{c/core|std::iter_value_t&lt;T&gt;}} is {{c/core|std::indirectly_readable_traits&lt;std::remove_cvref_t&lt;T&gt;&gt;::value_type}}.
* Otherwise, it is {{c/core|std::iterator_traits&lt;std::remove_cvref_t&lt;T&gt;&gt;::value_type}}.

@2@ Computes the ''reference type'' of {{tt|T}}.

@3@ Computes the ''const reference type'' of {{tt|T}}.

@4@ Computes the {{rlp|/#Types and writability|difference type}} of {{tt|T}}.
* If {{c/core|std::iterator_traits&lt;std::remove_cvref_t&lt;T&gt;&gt;}} is not specialized, then {{c/core|std::iter_difference_t&lt;T&gt;}} is {{c/core|std::incrementable_traits&lt;std::remove_cvref_t&lt;T&gt;&gt;::difference_type}}.
* Otherwise, it is {{c/core|std::iterator_traits&lt;std::remove_cvref_t&lt;T&gt;&gt;::difference_type}}.

@5@ Computes the ''rvalue reference type'' of {{tt|T}}. The constraint on this alias template is satisfied if and only if the expression {{c|ranges::iter_move(std::declval&lt;T&amp;&gt;())}} is valid and has a referenceable type.

@6@ Computes the ''common reference type'' of {{tt|T}}. This is the common reference type between its reference type and an lvalue reference to its value type.

@7@ The exposition-only concept {{tti|dereferenceable}} is satisfied if and only if the expression {{c|*std::declval&lt;T&amp;&gt;()}} is valid and has a [[cpp/meta#Definitions|referenceable type]].

@8@ The exposition-only alias template {{tti|indirect-value-t}} denotes the following:
* {{c/core|std::invoke_result_t&lt;Proj&amp;, /*indirect-value-t*/&lt;I&gt;&gt;}} if {{tt|T}} is the same as {{c/core|std::projected&lt;I, Proj&gt;}} for some types {{tt|I}} and {{tt|Proj}}.
* Otherwise, {{c/core|std::iter_value_t&lt;T&gt;&amp;}}.

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P2609R3|std=C++20|before={{tt|std::iter_common_reference_t}} was defined in terms&lt;br&gt;of {{c/core|std::iter_value_t&lt;T&gt;&amp;}} which incorrectly handled&lt;br&gt;{{lc|std::projected}} types that project into rvalue reference types|after=defined in terms of&lt;br&gt;{{c/core|/*indirect-value-t*/&lt;T&gt;}}&lt;br&gt;to handle such cases}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc indirectly_readable}}
{{dsc inc|cpp/iterator/dsc weakly_incrementable}}
{{dsc inc|cpp/iterator/dsc indirectly_readable_traits}}
{{dsc inc|cpp/iterator/dsc incrementable_traits}}
{{dsc inc|cpp/iterator/dsc iterator_traits}}
{{dsc inc|cpp/ranges/dsc iterator_t}}
{{dsc inc|cpp/ranges/dsc range_reference_t}}
{{dsc inc|cpp/ranges/dsc range_size_t}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
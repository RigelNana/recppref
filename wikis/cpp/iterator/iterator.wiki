{{cpp/title|iterator}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl|deprecated=c++17|1=
template&lt; 
    class Category,
    class T,
    class Distance = std::ptrdiff_t,
    class Pointer = T*,
    class Reference = T&amp; 
&gt; struct iterator;
}}
{{dcl end}}

{{tt|std::iterator}} is the base class provided to simplify definitions of the required types for iterators.

===Template parameters===
{{par begin}}
{{par|Category|the category of the iterator. Must be one of [[cpp/iterator/iterator_tags|iterator category tags]].}}
{{par|T|the type of the values that can be obtained by dereferencing the iterator. This type should be {{tt|void}} for output iterators.}}
{{par|Distance|a type that can be used to identify distance between iterators}}
{{par|Pointer|defines a pointer to the type iterated over ({{tt|T}})}}
{{par|Reference|defines a reference to the type iterated over ({{tt|T}})}}
{{par end}}

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|iterator_category}}|{{tt|Category}}}}
{{dsc|{{tt|value_type}}|{{tt|T}}}}
{{dsc|{{tt|difference_type}}|{{tt|Distance}}}}
{{dsc|{{tt|pointer}}|{{tt|Pointer}}}}
{{dsc|{{tt|reference}}|{{tt|Reference}}}}
{{dsc end}}

===Example===
{{example
|The following example shows how to implement an [[cpp/named req/InputIterator|input iterator]] by inheriting from std::iterator
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;

template&lt;long FROM, long TO&gt;
class Range
{
public:
    // member typedefs provided through inheriting from std::iterator
    class iterator : public std::iterator&lt;
                                std::input_iterator_tag, // iterator_category
                                long,                    // value_type
                                long,                    // difference_type
                                const long*,             // pointer
                                long                     // reference
                            &gt; {
        long num = FROM;
    public:
        explicit iterator(long _num = 0) : num(_num) {}
        iterator&amp; operator++() { num = TO &gt;= FROM ? num + 1: num - 1; return *this; }
        iterator operator++(int) { iterator retval = *this; ++(*this); return retval; }
        bool operator==(iterator other) const { return num == other.num; }
        bool operator!=(iterator other) const { return !(*this == other); }
        reference operator*() const { return num; }
    };
    iterator begin() { return iterator(FROM); }
    iterator end() { return iterator(TO &gt;= FROM? TO + 1 : TO - 1); }
};

int main()
{
    // std::find requires an input iterator
    auto range = Range&lt;15, 25&gt;();
    auto itr = std::find(range.begin(), range.end(), 18);
    std::cout &lt;&lt; *itr &lt;&lt; '\n'; // 18

    // Range::iterator also satisfies range-based for requirements
    for (long l : Range&lt;3, 5&gt;())
        std::cout &lt;&lt; l &lt;&lt; ' '; // 3 4 5
    std::cout &lt;&lt; '\n';
}
|output=
18
3 4 5 
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc iterator_traits}}
{{dsc inc|cpp/iterator/dsc iterator_tags}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
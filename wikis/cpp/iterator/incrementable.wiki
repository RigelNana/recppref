{{cpp/title|incrementable}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator|since=c++20}}
{{dcl|since=c++20|1=
template&lt; class I &gt;
    concept incrementable =
        std::regular&lt;I&gt; &amp;&amp;
        std::weakly_incrementable&lt;I&gt; &amp;&amp;
        requires(I i) {
            { i++ } -&gt; std::same_as&lt;I&gt;;
        };
}}
{{dcl end}}

This concept specifies requirements on types that can be incremented with the pre- and post-increment operators, whose increment operations are [[cpp/concepts#Equality preservation|equality-preserving]], and the type is {{lc|std::equality_comparable}}.

Unlike with {{lc|std::weakly_incrementable}}, which only support single-pass algorithms, multi-pass one-directional algorithms can be used with types that model {{tt|std::incrementable}}.

===Semantic requirements===
{{tt|I}} models {{tt|std::incrementable}} only if given any two incrementable objects {{tt|a}} and {{tt|b}} of type {{tt|I}}:
* {{c|1=bool(a == b)}} implies {{c|1=bool(a++ == b)}}, and
* {{c|1=bool(a == b)}} implies {{c|1=bool(((void)a++, a) == ++b)}}.

{{cpp/concepts/equality preservation}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc weakly_incrementable}}
{{dsc inc|cpp/concepts/dsc same_as}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
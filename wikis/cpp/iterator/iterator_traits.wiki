{{cpp/title|iterator_traits}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl|
template&lt; class Iter &gt;
struct iterator_traits;
}}
{{dcl|
template&lt; class T &gt;
struct iterator_traits&lt;T*&gt;;
}}
{{dcl|removed=c++20|
template&lt; class T &gt;
struct iterator_traits&lt;const T*&gt;;
}}
{{dcl end}}

{{tt|std::iterator_traits}} is the type trait class that provides uniform interface to the properties of {{named req|Iterator}} types. This makes it possible to implement algorithms only in terms of iterators.

The template can be specialized for user-defined iterators so that the information about the iterator can be retrieved even if the type does not provide the usual typedefs.

{{rrev|since=c++20|
User specializations may define the nested type {{tt|iterator_concept}} to one of [[cpp/iterator/iterator_tags|iterator category tags]], to indicate conformance to the iterator concepts.
}}

===Template parameters===
{{par begin}}
{{par|Iter|the iterator type to retrieve properties for}}
{{par end}}

===Member types===
{{dsc begin}}
{{dsc hitem|Nested type|Definition}}
{{dsc|{{tt|difference_type}}|{{tt|Iter::difference_type}}}}
{{dsc|{{tt|value_type}}|{{tt|Iter::value_type}}}}
{{dsc|{{tt|pointer}}|{{tt|Iter::pointer}}}}
{{dsc|{{tt|reference}}|{{tt|Iter::reference}}}}
{{dsc|{{tt|iterator_category}}|{{tt|Iter::iterator_category}}}}
{{dsc end}}


{{rrev multi
|since1=c++17|rev1=
If {{tt|Iter}} does not have any of the five nested types above, then this template has no members by any of those names ({{tt|std::iterator_traits}} is SFINAE-friendly).
|since2=c++20|rev2=
If {{tt|Iter}} does not have {{tt|pointer}}, but has all four remaining nested types, then these four nested types are declared as follows:

{{dsc begin}}
{{dsc hitem|Nested type|Definition}}
{{dsc|{{tt|difference_type}}|{{tt|Iter::difference_type}}}}
{{dsc|{{tt|value_type}}|{{tt|Iter::value_type}}}}
{{dsc|{{tt|pointer}}|{{c/core|void}}}}
{{dsc|{{tt|reference}}|{{tt|Iter::reference}}}}
{{dsc|{{tt|iterator_category}}|{{tt|Iter::iterator_category}}}}
{{dsc end}}


Otherwise, if {{tt|Iter}} satisfies the exposition-only concept {{ltt|cpp/named_req/InputIterator#Concept|__LegacyInputIterator}}, the nested types are declared as follows:

{{dsc begin}}
{{dsc hitem|Nested type|Definition}}
{{dsc|{{tt|difference_type}}|{{c/core|std::incrementable_traits&lt;Iter&gt;::difference_type}}}}
{{dsc|{{tt|value_type}}|{{c/core|std::indirectly_readable_traits&lt;Iter&gt;::value_type}}}}
{{dsc|{{tt|pointer}}|
* {{tt|Iter::pointer}} if valid.
* Otherwise {{c/core|decltype(std::declval&lt;Iter&amp;&gt;().operator-&gt;())}} if valid.
* Otherwise {{c/core|void}}.}}
{{dsc|{{tt|reference}}|
* {{tt|Iter::reference}} if valid.
* Otherwise {{c/core|std::iter_reference_t&lt;Iter&gt;}}.}}
{{dsc|{{tt|iterator_category}}|
* {{tt|Iter::iterator_category}} if valid.
* Otherwise, {{lc|std::random_access_iterator_tag}} if {{tt|Iter}} satisfies {{ltt|cpp/named_req/RandomAccessIterator#Concept|__LegacyRandomAccessIterator}}.
* Otherwise, {{lc|std::bidirectional_iterator_tag}} if {{tt|Iter}} satisfies {{ltt|cpp/named_req/BidirectionalIterator#Concept|__LegacyBidirectionalIterator}}.
* Otherwise, {{lc|std::forward_iterator_tag}} if {{tt|Iter}} satisfies {{ltt|cpp/named_req/ForwardIterator#Concept|__LegacyForwardIterator}}.
* Otherwise, {{lc|std::input_iterator_tag}}.}}
{{dsc end}}


Otherwise, if {{tt|Iter}} satisfies the exposition-only concept {{ltt|cpp/named_req/Iterator#Concept|__LegacyIterator}}, the nested types are declared as follows:

{{dsc begin}}
{{dsc hitem|Nested type|Definition}}
{{dsc|{{tt|difference_type}}|
* {{c/core|std::incrementable_traits&lt;Iter&gt;::difference_type}} if valid.
* Otherwise {{c/core|void}}.}}
{{dsc|{{tt|value_type}}|{{c/core|void}}}}
{{dsc|{{tt|pointer}}|{{c/core|void}}}}
{{dsc|{{tt|reference}}|{{c/core|void}}}}
{{dsc|{{tt|iterator_category}}|{{lc|std::output_iterator_tag}}}}
{{dsc end}}

Otherwise, this template has no members by any of those names ({{tt|std::iterator_traits}} is SFINAE-friendly).
}}

===Specializations===
This type trait may be specialized for user-provided types that may be used as iterators. The standard library provides partial specializations for pointer types {{tt|T*}}, which makes it possible to use all iterator-based algorithms with raw pointers.

{{rrev|since=c++20|
The standard library also provides partial specializations for some standard iterator adaptors.
}}

{{anchor|T* specialization nested types}}
===={{tt|T*}} specialization nested types====
{{rrev|since=c++20|
Only specialized if {{c|std::is_object_v&lt;T&gt;}} is {{c|true}}.
}}


{{dsc begin}}
{{dsc hitem|Nested type|Definition}}
{{dsc|{{tt|difference_type}}|{{lc|std::ptrdiff_t}}}}
{{dsc|{{tt|value_type}}|{{rev inl|until=c++20|{{tt|T}}}}{{rev inl|since=c++20|{{c/core|std::remove_cv_t&lt;T&gt;}}}}}}
{{dsc|{{tt|pointer}}|{{tt|T*}}}}
{{dsc|{{tt|reference}}|{{tt|T&amp;}}}}
{{dsc|{{tt|iterator_category}}|{{lc|std::random_access_iterator_tag}}}}
{{dsc|{{tt|iterator_concept}} {{mark since c++20}}|{{lc|std::contiguous_iterator_tag}}}}
{{dsc end}}


{{rrev|until=c++20|1=
{{anchor|const T* specialization nested types}}
===={{c/core|const T*}} specialization nested types====
{{dsc begin}}
{{dsc hitem|Nested type|Definition}}
{{dsc|{{tt|difference_type}}|{{lc|std::ptrdiff_t}}}}
{{dsc|{{tt|value_type}}|{{tt|T}}}}
{{dsc|{{tt|pointer}}|{{c/core|const T*}}}}
{{dsc|{{tt|reference}}|{{c/core|const T&amp;}}}}
{{dsc|{{tt|iterator_category}}|{{lc|std::random_access_iterator_tag}}}}
{{dsc end}}
}}

====Specializations for library types====
{{dsc begin}}
{{dsc inc|cpp/iterator/common_iterator/dsc iterator_traits}}
{{dsc inc|cpp/iterator/counted_iterator/dsc iterator_traits}}
{{dsc end}}

===Example===
{{example
|Shows a general-purpose {{c|std::reverse()}} implementation for bidirectional iterators.
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;list&gt;
#include &lt;vector&gt;

template&lt;class BidirIt&gt;
void my_reverse(BidirIt first, BidirIt last)
{
    typename std::iterator_traits&lt;BidirIt&gt;::difference_type n = std::distance(first, last);
    for (--n; n &gt; 0; n -= 2)
    {
        typename std::iterator_traits&lt;BidirIt&gt;::value_type tmp = *first;
        *first++ = *--last;
        *last = tmp;
    }
}

int main()
{
    std::vector&lt;int&gt; v{1, 2, 3, 4, 5};
    my_reverse(v.begin(), v.end());
    for (int n : v)
        std::cout &lt;&lt; n &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    std::list&lt;int&gt; l{1, 2, 3, 4, 5};
    my_reverse(l.begin(), l.end());
    for (int n : l)
        std::cout &lt;&lt; n &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    int a[]{1, 2, 3, 4, 5};
    my_reverse(a, a + std::size(a));
    for (int n : a)
        std::cout &lt;&lt; n &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
//  std::istreambuf_iterator&lt;char&gt; i1(std::cin), i2;
//  my_reverse(i1, i2); // compilation error: i1, i2 are input iterators
}
|output=
5 4 3 2 1
5 4 3 2 1
5 4 3 2 1
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc iterator}}
{{dsc inc|cpp/iterator/dsc iterator_tags}}
{{dsc inc|cpp/iterator/dsc iter_t}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
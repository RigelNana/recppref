{{cpp/title|rend|crend}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{cpp/iterator/range access headers}}
{{dcla|anchor=no|num=1|since=c++14|constexpr=c++17|
template&lt; class C &gt;
auto rend( C&amp; c ) -&gt; decltype(c.rend());
}}
{{dcla|anchor=no|num=2|since=c++14|constexpr=c++17|
template&lt; class C &gt;
auto rend( const C&amp; c ) -&gt; decltype(c.rend());
}}
{{dcla|anchor=no|num=3|since=c++14|constexpr=c++17|
template&lt; class T, std::size_t N &gt;
std::reverse_iterator&lt;T*&gt; rend( T (&amp;array)[N] );
}}
{{dcla|anchor=no|num=4|since=c++14|constexpr=c++17|
template&lt; class T &gt;
std::reverse_iterator&lt;const T*&gt; rend( std::initializer_list&lt;T&gt; il );
}}
{{dcla|anchor=no|num=5|since=c++14|constexpr=c++17|
template&lt; class C &gt;
auto crend( const C&amp; c ) -&gt; decltype(std::rend(c));
}}
{{dcl end}}

Returns an iterator to the reverse-end of the given range.

@1,2@ Returns {{c|c.rend()}}, which is typically an iterator one past the reverse-end of the sequence represented by {{c|c}}.
:@1@ If {{tt|C}} is a standard {{named req|Container}}, returns a {{tt|C::reverse_iterator}} object.
:@2@ If {{tt|C}} is a standard {{named req|Container}}, returns a {{tt|C::const_reverse_iterator}} object.

@3@ Returns an {{c/core|std::reverse_iterator&lt;T*&gt;}} object to the reverse-end of {{c|array}}.

@4@ Returns an {{c/core|std::reverse_iterator&lt;const T*&gt;}} object to the reverse-end of {{c|il}}.

@5@ Returns {{c|std::end(c)}}, with {{c|c}} always treated as const-qualified.
@@ If {{tt|C}} is a standard {{named req|Container}}, returns a {{tt|C::const_reverse_iterator}} object.

{{image|range-rbegin-rend.svg}}

===Parameters===
{{par begin}}
{{par|c|a container or view with a {{tt|rend}} member function}}
{{par|array|an array of arbitrary type}}
{{par|il|an {{c/core|std::initializer_list}}}}
{{par end}}

===Return value===
@1,2@ {{c|c.rend()}}
@3@ {{c|std::reverse_iterator&lt;T*&gt;(array)}}
@4@ {{c|std::reverse_iterator&lt;const T*&gt;(il.begin())}}
@5@ {{c|c.rend()}}

{{cpp/impldef exception}}

===Overloads===
Custom overloads of {{tt|rend}} may be provided for classes and enumerations that do not expose a suitable {{tt|rend()}} member function, yet can be iterated.

{{rrev|since=c++20|
Overloads of {{tt|rend}} found by [[cpp/language/adl|argument-dependent lookup]] can be used to customize the behavior of {{c/core|std::ranges::rend}} and {{lc|std::ranges::crend}}.
}}

===Notes===
The overload for {{lc|std::initializer_list}} is necessary because it does not have a member function {{tt|rend}}.

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main()
{
    int a[]{4, 6, -3, 9, 10};
    std::cout &lt;&lt; "C-style array `a` backwards: ";
    std::copy(std::rbegin(a), std::rend(a), std::ostream_iterator&lt;int&gt;(std::cout, " "));
    
    auto il = {3, 1, 4};
    std::cout &lt;&lt; "\nstd::initializer_list `il` backwards: ";
    std::copy(std::rbegin(il), std::rend(il), std::ostream_iterator&lt;int&gt;(std::cout, " "));
    
    std::vector&lt;int&gt; v{4, 6, -3, 9, 10};
    std::cout &lt;&lt; "\nstd::vector `v` backwards: ";
    std::copy(std::rbegin(v), std::rend(v), std::ostream_iterator&lt;int&gt;(std::cout, " "));
    std::cout &lt;&lt; '\n';
}
|output=
C-style array `a` backwards: 10 9 -3 6 4
std::initializer_list `il` backwards: 4 1 3
std::vector `v` backwards: 10 9 -3 6 4
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc end}}
{{dsc inc|cpp/iterator/dsc rbegin}}
{{dsc inc|cpp/iterator/dsc begin}}
{{dsc inc|cpp/ranges/dsc rend}}
{{dsc inc|cpp/ranges/dsc crend}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
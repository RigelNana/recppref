{{cpp/title|indirect_result_t}}
{{cpp/iterator/navbar}}
{{ddcl|header=iterator|since=c++20|1=
template&lt; class F, class... Is &gt;
    requires (std::indirectly_readable&lt;Is&gt; &amp;&amp; ...) &amp;&amp;
              std::invocable&lt;F, std::iter_reference_t&lt;Is&gt;...&gt;
using indirect_result_t = std::invoke_result_t&lt;F, std::iter_reference_t&lt;Is&gt;...&gt;;
}}

The alias template {{tt|indirect_result_t}} obtains the result type of invoking an {{lconcept|invocable}} type {{tt|F}} on the result of dereferencing {{lconcept|indirectly_readable}} types {{tt|Is...}}.

===Template parameters===
{{par begin}}
{{par|F|an invocable type}}
{{par|Is|indirectly readable types that are dereferenced to arguments}}
{{par end}}

===Example===
{{example
|code=
#include &lt;iterator&gt;
#include &lt;type_traits&gt;

struct Fn
{
    long operator()(const int&amp;);
    int operator()(int&amp;&amp;);
    short operator()(int, int) const;
    auto operator()(const float) -&gt; int&amp;;
    void operator()(int[8]);
};

static_assert(
    std::is_same_v&lt;std::indirect_result_t&lt;Fn, const int*&gt;, long&gt; and
    std::is_same_v&lt;std::indirect_result_t&lt;Fn, std::move_iterator&lt;int*&gt;&gt;, int&gt; and
    std::is_same_v&lt;std::indirect_result_t&lt;const Fn, int*, int*&gt;, short&gt; and
    std::is_same_v&lt;std::indirect_result_t&lt;Fn, float*&gt;, int&amp;&gt; and
    std::is_same_v&lt;std::indirect_result_t&lt;Fn, int**&gt;, void&gt;
);

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc result_of}}
{{dsc inc|cpp/iterator/dsc projected_value_t}}
{{dsc end}}

{{langlinks|es|ja|zh}}
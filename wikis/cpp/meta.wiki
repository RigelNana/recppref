{{title|Metaprogramming library {{mark since c++11}}}}
{{cpp/meta/navbar}}

C++ provides metaprogramming facilities, such as type traits, compile-time rational arithmetic, and compile-time integer sequences.

===Definitions===
The following types are collectively called ''referenceable types'':
* {{lsd|cpp/language/type#Object type}}s
* {{lsd|cpp/language/function#Function type}}s without {{spar|cv}} and {{spar|ref}}
* [[cpp/language/reference|reference types]]

For any referenceable type {{tt|T}}, a reference to it can be created&lt;ref&gt;For reference types, this can be done via {{lsd|cpp/language/reference#Reference collapsing}}.&lt;/ref&gt;.

&lt;references/&gt;

===Type traits===
Type traits define compile-time template-based interfaces to query the properties of types.

Attempting to specialize a template defined in the {{header|type_traits}} header and listed in this page results in undefined behavior, except that {{lc|std::common_type}} {{rev inl|since=c++20|and {{ltt|cpp/types/common_reference|std::basic_common_reference}}}} may be specialized as required in description.

A template defined in the {{header|type_traits}} header may be instantiated with an incomplete type unless otherwise specified, notwithstanding the general prohibition against instantiating standard library templates with incomplete types.

====Base classes====
Most of non-transforming type traits need to be publicly and unambiguously derived from {{lc|std::integral_constant}} in order to satisfy the requirements of {{named req|UnaryTypeTrait}} or {{named req|BinaryTypeTrait}}.

{{dsc begin}}
{{dsc header|type_traits}}
{{dsc inc|cpp/types/dsc integral_constant}}
{{dsc end}}

Two specializations of {{lc|std::integral_constant}} for the type {{c/core|bool}} are provided: 
{{dsc begin}}
{{dsc header|type_traits}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|true_type}}|{{c/core|std::integral_constant&lt;bool, true&gt;}}}}
{{dsc|{{tt|false_type}}|{{c/core|std::integral_constant&lt;bool, false&gt;}}}}
{{dsc end}}

====Unary type traits====
Unary type traits can be used to query the boolean properties of a type at compile time.

All these type traits satisfy {{named req|UnaryTypeTrait}}, the base characteristic of each type trait is either {{lc|std::true_type}} or {{lc|std::false_type}}, depending on whether the corresponding condition is met.

{{dsc begin}}
{{dsc h2|Primary type categories}}
{{dsc header|type_traits}}
{{dsc inc|cpp/types/dsc is_void}}
{{dsc inc|cpp/types/dsc is_null_pointer}}
{{dsc inc|cpp/types/dsc is_integral}}
{{dsc inc|cpp/types/dsc is_floating_point}}
{{dsc inc|cpp/types/dsc is_array}}
{{dsc inc|cpp/types/dsc is_enum}}
{{dsc inc|cpp/types/dsc is_union}}
{{dsc inc|cpp/types/dsc is_class}}
{{dsc inc|cpp/types/dsc is_function}}
{{dsc inc|cpp/types/dsc is_pointer}}
{{dsc inc|cpp/types/dsc is_lvalue_reference}}
{{dsc inc|cpp/types/dsc is_rvalue_reference}}
{{dsc inc|cpp/types/dsc is_member_object_pointer}}
{{dsc inc|cpp/types/dsc is_member_function_pointer}}

{{dsc h2|Composite type categories}}
{{dsc header|type_traits}}
{{dsc inc|cpp/types/dsc is_fundamental}}
{{dsc inc|cpp/types/dsc is_arithmetic}}
{{dsc inc|cpp/types/dsc is_scalar}}
{{dsc inc|cpp/types/dsc is_object}}
{{dsc inc|cpp/types/dsc is_compound}}
{{dsc inc|cpp/types/dsc is_reference}}
{{dsc inc|cpp/types/dsc is_member_pointer}}

{{dsc h2|Type properties}}
{{dsc header|type_traits}}
{{dsc inc|cpp/types/dsc is_const}}
{{dsc inc|cpp/types/dsc is_volatile}}
{{dsc inc|cpp/types/dsc is_trivial}}
{{dsc inc|cpp/types/dsc is_trivially_copyable}}
{{dsc inc|cpp/types/dsc is_standard_layout}}
{{dsc inc|cpp/types/dsc is_pod}}
{{dsc inc|cpp/types/dsc is_literal_type}}
{{dsc inc|cpp/types/dsc has_unique_object_representations}}
{{dsc inc|cpp/types/dsc is_empty}}
{{dsc inc|cpp/types/dsc is_polymorphic}}
{{dsc inc|cpp/types/dsc is_abstract}}
{{dsc inc|cpp/types/dsc is_final}}
{{dsc inc|cpp/types/dsc is_aggregate}}
{{dsc inc|cpp/types/dsc is_implicit_lifetime}}
{{dsc inc|cpp/types/dsc is_signed}}
{{dsc inc|cpp/types/dsc is_unsigned}}
{{dsc inc|cpp/types/dsc is_bounded_array}}
{{dsc inc|cpp/types/dsc is_unbounded_array}}
{{dsc inc|cpp/types/dsc is_scoped_enum}}
{{dsc end}}

{{dsc begin}}
{{dsc h2|Supported operations}}
{{dsc header|type_traits}}
{{dsc inc|cpp/types/dsc is_constructible}}
{{dsc inc|cpp/types/dsc is_default_constructible}}
{{dsc inc|cpp/types/dsc is_copy_constructible}}
{{dsc inc|cpp/types/dsc is_move_constructible}}
{{dsc inc|cpp/types/dsc is_assignable}}
{{dsc inc|cpp/types/dsc is_copy_assignable}}
{{dsc inc|cpp/types/dsc is_move_assignable}}
{{dsc inc|cpp/types/dsc is_destructible}}
{{dsc inc|cpp/types/dsc has_virtual_destructor}}
{{dsc inc|cpp/types/dsc is_swappable}}
{{dsc inc|cpp/types/dsc reference_constructs_from_temporary}}
{{dsc inc|cpp/types/dsc reference_converts_from_temporary}}
{{dsc end}}

====Property queries====
Property query traits can be used to query the integral properties of a type at compile time.

All these type traits satisfy {{named req|UnaryTypeTrait}}, the base characteristic of each type trait is {{c/core|std::integral_constant&lt;std::size_t, Value&gt;}}, where {{tt|Value}} is the query result of the corresponding property.

{{dsc begin}}
{{dsc header|type_traits}}
{{dsc inc|cpp/types/dsc alignment_of}}
{{dsc inc|cpp/types/dsc rank}}
{{dsc inc|cpp/types/dsc extent}}
{{dsc end}}

====Type relationships====
Type relationship traits can be used to query relationships between types at compile time.

All these type traits satisfy {{named req|BinaryTypeTrait}}, the base characteristic of each type trait is either {{lc|std::true_type}} or {{lc|std::false_type}}, depending on whether the corresponding condition is met.

{{dsc begin}}
{{dsc header|type_traits}}
{{dsc inc|cpp/types/dsc is_same}}
{{dsc inc|cpp/types/dsc is_base_of}}
{{dsc inc|cpp/types/dsc is_virtual_base_of}}
{{dsc inc|cpp/types/dsc is_convertible}}
{{dsc inc|cpp/types/dsc is_layout_compatible}}
{{dsc inc|cpp/types/dsc is_pointer_interconvertible_base_of}}
{{dsc inc|cpp/types/dsc is_invocable}}
{{dsc end}}

====Type transformations====
Type transformation traits transform one type to another following some predefined rules.

All these type traits satisfy {{named req|TransformationTrait}}.

{{dsc begin}}
{{dsc h2|Const-volatility specifiers}}
{{dsc header|type_traits}}
{{dsc inc|cpp/types/dsc remove_cv}}
{{dsc inc|cpp/types/dsc add_cv}}

{{dsc h2|References}}
{{dsc header|type_traits}}
{{dsc inc|cpp/types/dsc remove_reference}}
{{dsc inc|cpp/types/dsc add_reference}}

{{dsc h2|Sign modifiers}}
{{dsc header|type_traits}}
{{dsc inc|cpp/types/dsc make_signed}}
{{dsc inc|cpp/types/dsc make_unsigned}}

{{dsc h2|Arrays}}
{{dsc header|type_traits}}
{{dsc inc|cpp/types/dsc remove_extent}}
{{dsc inc|cpp/types/dsc remove_all_extents}}

{{dsc h2|Pointers}}
{{dsc header|type_traits}}
{{dsc inc|cpp/types/dsc remove_pointer}}
{{dsc inc|cpp/types/dsc add_pointer}}

{{dsc h2|Other transformations}}
{{dsc header|type_traits}}
{{dsc inc|cpp/types/dsc aligned_storage}}
{{dsc inc|cpp/types/dsc aligned_union}}
{{dsc inc|cpp/types/dsc decay}}
{{dsc inc|cpp/types/dsc remove_cvref}}
{{dsc inc|cpp/types/dsc enable_if}}
{{dsc inc|cpp/types/dsc conditional}}
{{dsc inc|cpp/types/dsc common_type}}
{{dsc inc|cpp/types/dsc common_reference}}
{{dsc inc|cpp/types/dsc underlying_type}}
{{dsc inc|cpp/types/dsc result_of}}
{{dsc inc|cpp/types/dsc void_t}}
{{dsc inc|cpp/types/dsc type_identity}}
{{dsc end}}

{{anchor|Logical operations}}
====Logical operations {{mark since c++17}}====
Logical operator traits apply logical operators to other type traits.
{{dsc begin}}
{{dsc header|type_traits}}
{{dsc inc|cpp/types/dsc conjunction}}
{{dsc inc|cpp/types/dsc disjunction}}
{{dsc inc|cpp/types/dsc negation}}
{{dsc end}}

{{anchor|Member relationships}}
====Member relationships {{mark since c++20}}====
{{dsc begin}}
{{dsc header|type_traits}}
{{dsc inc|cpp/types/dsc is_pointer_interconvertible_with_class}}
{{dsc inc|cpp/types/dsc is_corresponding_member}}
{{dsc end}}

===[[cpp/numeric/ratio|Compile-time rational arithmetic]]===
The header {{header|ratio}} provides [[cpp/numeric/ratio|types and functions for manipulating and storing compile-time ratios]].

{{anchor|Compile-time integer sequences}}
===Compile-time integer sequences {{mark since c++14}}===
{{dsc begin}}
{{dsc header|utility}}
{{dsc inc|cpp/utility/dsc integer_sequence}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
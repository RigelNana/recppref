{{title|Regular expressions library {{mark since c++11}}}}
{{cpp/regex/navbar}}

The regular expressions library provides a class that represents {{enwiki|Regular expression|regular expressions}}, which are a kind of mini-language used to perform pattern matching within strings. Almost all operations with regexes can be characterized by operating on several of the following objects:

* '''Target sequence'''. The character sequence that is searched for a pattern. This may be a range specified by two iterators, a null-terminated character string or a {{lc|std::string}}.

* '''Pattern'''. This is the regular expression itself. It determines what constitutes a match. It is an object of type {{lc|std::basic_regex}}, constructed from a string with special [[#Regular expression grammars|grammar]].

* '''Matched array'''. The information about matches may be retrieved as an object of type {{lc|std::match_results}}.

* '''Replacement string'''. This is a string that determines how to replace the matches.

===Regular expression grammars===
Patterns and replacement strings support the following regular expression grammars:
* [[cpp/regex/ecmascript|Modified ECMAScript regular expression grammar]]. This is the default grammar.
* [https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html#tag_09_03 Basic POSIX regular expression grammar].
* [https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html#tag_09_04 Extended POSIX regular expression grammar].
* The regular expression grammar used by the {{box|[https://pubs.opengroup.org/onlinepubs/9699919799/utilities/awk.html#tag_20_06_13_04 awk]}} utility in POSIX.
* The regular expression grammar used by the {{box|[https://pubs.opengroup.org/onlinepubs/9699919799/utilities/grep.html grep]}} utility in POSIX. This is effectively the same as the basic POSIX regular expression grammar, with the addition of newline {{c|'\n'}} as an alternation separator.
* The regular expression grammar used by the {{c|grep}} utility, with the {{c|-E}} option, in POSIX. This is effectively the same as the extended POSIX regular expression grammar, with the addition of newline {{c|'\n'}} as an alternation separator in addition to {{c|'{{!}}'}}.

Some grammar variations (such as case-insensitive matching) are also avaliable, see {{rl|basic_regex/constants|this page}} for details.

===Main classes===
These classes encapsulate a regular expression and the results of matching a regular expression within a target sequence of characters.

{{dsc begin}}
{{dsc inc|cpp/regex/dsc basic_regex}}
{{dsc inc|cpp/regex/dsc sub_match}}
{{dsc inc|cpp/regex/dsc match_results}}
{{dsc end}}

===Algorithms===
These functions are used to apply the regular expression encapsulated in a regex to a target sequence of characters.

{{dsc begin}}
{{dsc inc|cpp/regex/dsc regex_match}}
{{dsc inc|cpp/regex/dsc regex_search}}
{{dsc inc|cpp/regex/dsc regex_replace}}
{{dsc end}}

===Iterators===
The regex iterators are used to traverse the entire set of regular expression matches found within a sequence.

{{dsc begin}}
{{dsc inc|cpp/regex/dsc regex_iterator}}
{{dsc inc|cpp/regex/dsc regex_token_iterator}}
{{dsc end}}

===Exceptions===
This class defines the type of objects thrown as exceptions to report errors from the regular expressions library.

{{dsc begin}}
{{dsc inc|cpp/regex/dsc regex_error}}
{{dsc end}}

===Traits===
The regex traits class is used to encapsulate the localizable aspects of a regex.

{{dsc begin}}
{{dsc inc|cpp/regex/dsc regex_traits}}
{{dsc end}}

===Constants===
{{dsc begin}}
{{dsc namespace|std::regex_constants}}
{{dsc inc|cpp/regex/dsc syntax_option_type}}
{{dsc inc|cpp/regex/dsc match_flag_type}}
{{dsc inc|cpp/regex/dsc error_type}}
{{dsc end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;regex&gt;
#include &lt;string&gt;

int main()
{
    std::string s = "Some people, when confronted with a problem, think "
        "\"I know, I'll use regular expressions.\" "
        "Now they have two problems.";
    
    std::regex self_regex("REGULAR EXPRESSIONS",
        std::regex_constants::ECMAScript {{!}} std::regex_constants::icase);
    if (std::regex_search(s, self_regex))
        std::cout &lt;&lt; "Text contains the phrase 'regular expressions'\n";
    
    std::regex word_regex("(\\w+)");
    auto words_begin = 
        std::sregex_iterator(s.begin(), s.end(), word_regex);
    auto words_end = std::sregex_iterator();
    
    std::cout &lt;&lt; "Found "
              &lt;&lt; std::distance(words_begin, words_end)
              &lt;&lt; " words\n";
    
    const int N = 6;
    std::cout &lt;&lt; "Words longer than " &lt;&lt; N &lt;&lt; " characters:\n";
    for (std::sregex_iterator i = words_begin; i != words_end; ++i)
    {
        std::smatch match = *i;
        std::string match_str = match.str();
        if (match_str.size() &gt; N)
            std::cout &lt;&lt; "  " &lt;&lt; match_str &lt;&lt; '\n';
    }
    
    std::regex long_word_regex("(\\w{7,})");
    std::string new_s = std::regex_replace(s, long_word_regex, "[$&amp;]");
    std::cout &lt;&lt; new_s &lt;&lt; '\n';
}
|output=
Text contains the phrase 'regular expressions'
Found 20 words
Words longer than 6 characters:
  confronted
  problem
  regular
  expressions
  problems
Some people, when [confronted] with a [problem], think 
"I know, I'll use [regular] [expressions]." Now they have two [problems].
}}

{{langlinks|ar|de|es|fr|it|ja|ko|pt|ru|zh}}
{{cpp/filesystem/title|hard_link_count}}
{{cpp/filesystem/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|num=1|since=c++17|1=
std::uintmax_t hard_link_count( const std::filesystem::path&amp; p );
}}
{{dcl|num=2|since=c++17|1=
std::uintmax_t hard_link_count( const std::filesystem::path&amp; p,
                                std::error_code&amp; ec ) noexcept;
}}
{{dcl end}}

Returns the number of hard links for the filesystem object identified by path {{c|p}}.

The non-throwing overload returns {{c|static_cast&lt;uintmax_t&gt;(-1)}} on errors.

===Parameters===
{{par begin}}
{{par|p|path to examine}}
{{par|ec|out-parameter for error reporting in the non-throwing overload}}
{{par end}}

===Return value===
The number of hard links for {{c|p}}.

===Exceptions===
{{cpp/filesystem/error_handling|p|throw=1/2}}

===Example===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;iostream&gt;
namespace fs = std::filesystem;

int main()
{
    // On a POSIX-style filesystem, each directory has at least 2 hard links:
    // itself and the special member pathname "."
    fs::path p = fs::current_path();
    std::cout &lt;&lt; "Number of hard links for current path is "
              &lt;&lt; fs::hard_link_count(p) &lt;&lt; '\n';

    // Each ".." is a hard link to the parent directory, so the total number
    // of hard links for any directory is 2 plus number of direct subdirectories
    p = fs::current_path() / ".."; // Each dot-dot is a hard link to parent
    std::cout &lt;&lt; "Number of hard links for .. is "
              &lt;&lt; fs::hard_link_count(p) &lt;&lt; '\n';
}
|p=true
|output=
Number of hard links for current path is 2
Number of hard links for .. is 3
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc create_hard_link}}
{{dsc inc|cpp/filesystem/directory_entry/dsc hard_link_count}}
{{dsc end}}

{{langlinks|es|ja|zh}}
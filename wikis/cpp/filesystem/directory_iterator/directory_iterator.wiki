{{cpp/filesystem/directory_iterator/title|directory_iterator}}
{{cpp/filesystem/directory_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|1=
directory_iterator() noexcept;
}}
{{dcl|num=2|since=c++17|1=
explicit directory_iterator( const std::filesystem::path&amp; p );
}}
{{dcl|num=3|since=c++17|1=
directory_iterator( const std::filesystem::path&amp; p,
                    std::filesystem::directory_options options );
}}
{{dcl|num=4|since=c++17|1=
directory_iterator( const std::filesystem::path&amp; p, std::error_code&amp; ec );
}}
{{dcl|num=5|since=c++17|1=
directory_iterator( const std::filesystem::path&amp; p,
                    std::filesystem::directory_options options,
                    std::error_code&amp; ec );
}}
{{dcl|num=6|since=c++17|1=
directory_iterator( const directory_iterator&amp; other ) = default;
}}
{{dcl|num=7|since=c++17|1=
directory_iterator( directory_iterator&amp;&amp; other ) = default;
}}
{{dcl end}}

Constructs a new directory iterator.

@1@ Constructs the end iterator.

@2@ Constructs a directory iterator that refers to the first directory entry of a directory identified by {{tt|p}}. If {{tt|p}} refers to a non-existing file or not a directory, throws {{lc|std::filesystem::filesystem_error}}.

@3@ Same as {{v|2}}, but if {{lc|std::filesystem::directory_options::skip_permission_denied}} is set in {{tt|options}} and construction encounters a permissions denied error, constructs the end iterator and does not report an error.

@4@ Constructs a directory iterator that refers to the first directory entry of a directory identified by {{tt|p}}. If {{tt|p}} refers to a non-existing file or not a directory, returns the end iterator and sets {{tt|ec}}.

@5@ Same as {{v|4}}, but if {{lc|std::filesystem::directory_options::skip_permission_denied}} is set in {{tt|options}} and construction encounters a permissions denied error, constructs the end iterator and does not report an error.

@6@ Copy constructor.

@7@ Move constructor.

===Parameters===
{{par begin}}
{{par|p|path to the filesystem object to which the directory iterator will refer}}
{{par|ec|out-parameter for error reporting in the non-throwing overloads}}
{{par|options|the set of {{named req|BitmaskType}} options that control the behavior of the directory iterator}}
{{par|other|another directory iterator to use as source to initialize the directory iterator with}}
{{par end}}

===Exceptions===
{{cpp/filesystem/error_handling|p|throw=2,3/4,5}}

===Notes===
To iterate over the current directory, construct the iterator as {{c|directory_iterator(".")}} instead of {{c|directory_iterator("")}}.

===Example===
{{example}}

===Defect reports===
{{dr list begin}}
{{dr list item|dr=3013|wg=lwg|std=C++17|before={{tt|error_code}} overload marked noexcept but can allocate memory|after=noexcept removed}}
{{dr list end}}

{{langlinks|es|ja|ru|zh}}
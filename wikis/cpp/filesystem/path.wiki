{{cpp/filesystem/title|path}}
{{cpp/filesystem/path/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|since=c++17|
class path;
}}
{{dcl end}}

Objects of type {{tt|path}} represent paths on a filesystem. Only syntactic aspects of paths are handled: the pathname may represent a non-existing path or even one that is not allowed to exist on the current file system or OS.

The path name has the following syntax:
# {{spar|root-name}}{{mark optional}}: identifies the root on a filesystem with multiple roots (such as {{c|"C:"}} or {{c|"//myserver"}}). In case of ambiguity, the longest sequence of characters that forms a valid {{spar|root-name}} is treated as the {{spar|root-name}}. The standard library may define additional root-names besides the ones understood by the OS API.
# {{spar|root-directory}}{{mark optional}}: a directory separator that, if present, marks this path as ''absolute''. If it is missing (and the first element other than the root name is a file name), then the path is ''relative'' and requires another path as the starting location to resolve to a file name.
# Zero or more of the following:
:* {{spar|file-name}}: sequence of characters that aren't directory separators or preferred directory separators (additional limitations may be imposed by the OS or file system). This name may identify a file, a hard link, a symbolic link, or a directory. Two special {{spar|file-name}}s are recognized:
::* {{spar|dot}}: the file name consisting of a single dot character {{c|.}} is a directory name that refers to the current directory.
::* {{spar|dot-dot}}: the file name consisting of two dot characters {{c|..}} is a directory name that refers to the parent directory.
:* {{spar|directory-separator}}s: the forward slash character {{c|/}} or the alternative character provided as {{tt|path::preferred_separator}}. If this character is repeated, it is treated as a single directory separator: {{c|/usr///////lib}} is the same as {{c|/usr/lib}}.

A path can be ''normalized'' by following this algorithm:
# If the path is empty, stop (normal form of an empty path is an empty path).
# Replace each {{spar|directory-separator}} (which may consist of multiple slashes) with a single {{tt|path::preferred_separator}}.
# Replace each slash character in the {{spar|root-name}} with {{tt|path::preferred_separator}}.
# Remove each {{spar|dot}} and any immediately following {{spar|directory-separator}}.
# Remove each non-{{spar|dot-dot}} filename immediately followed by a {{spar|directory-separator}} and a {{spar|dot-dot}}, along with any immediately following {{spar|directory-separator}}.
# If there is {{spar|root-directory}}, remove all {{spar|dot-dot}}s and any {{spar|directory-separator}}s immediately following them.
# If the last filename is {{spar|dot-dot}}, remove any trailing {{spar|directory-separator}}.
# If the path is empty, add a {{spar|dot}} (normal form of {{c|./}} is {{c|.}}).

The path can be traversed element-wise via iterators returned by the {{lc|begin()}} and {{lc|end()}} functions, which views the path in generic format and iterates over root name, root directory, and the subsequent file name elements (directory separators are skipped except the one that identifies the root directory). If the very last element in the path is a directory separator, the last iterator will dereference to an empty element.

Calling any non-const member function of a {{tt|path}} invalidates all iterators referring to elements of that object.

If the OS uses a ''native'' syntax that is different from the portable ''generic'' syntax described above, library functions that are defined to accept "detected format" accept path names in both formats: a detected format argument is taken to be in the generic format if and only if it matches the generic format but is not acceptable to the operating system as a native path. On those OS where native format differs between pathnames of directories and pathnames of files, a generic pathname is treated as a directory path if it ends on a directory separator and a regular file otherwise.

In any case, the path class behaves as if it stores a pathname in the native format and automatically converts to generic format as needed (each member function specifies which format it interprets the path as).

On POSIX systems, the generic format is the native format and there is no need to distinguish or convert between them.

Paths are implicitly convertible to and from {{lc|std::basic_string}}s, which makes it possible to use them with other file APIs.

The {{rl|operator_ltltgtgt|stream operators}} use {{lc|std::quoted}} so that spaces do not cause truncation when later read by {{rl|operator_ltltgtgt|stream input operator}}.

[[#Decomposition|Decomposition member functions]] (e.g. {{lc|extension}}) return {{tt|filesystem::path}} objects instead of string objects as other APIs do.

===Member types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|value_type}}|character type used by the native encoding of the filesystem: {{c/core|char}} on POSIX, {{c/core|wchar_t}} on Windows}}
{{dsc|{{tt|string_type}}|{{c/core|std::basic_string&lt;value_type&gt;}}}}
{{dsc|{{tt|const_iterator}}|a constant {{named req|InputIterator}} with a {{tt|value_type}} of {{tt|path}} that meets all requirements of {{named req|BidirectionalIterator}} except that for two equal dereferenceable iterators {{tt|a}} and {{tt|b}} of type {{tt|const_iterator}}, there is no requirement that {{c|*a}} and {{c|*b}} refer to the same object.

It is unspecified whether {{tt|const_iterator}} is actually a {{named req|BidirectionalIterator}}}}
{{dsc|{{tt|iterator}}|{{tt|const_iterator}}}}
{{dsc mem enum|cpp/filesystem/path/format|determines how to interpret string representations of pathnames.

The following enumerators are also defined:
{{dsc begin}}
{{dsc hitem|Name|Explanation}}
{{dsc|{{ltt|cpp/filesystem/path/format|native_format}}|native pathname format}}
{{dsc|{{ltt|cpp/filesystem/path/format|generic_format}}|generic pathname format}}
{{dsc|{{ltt|cpp/filesystem/path/format|auto_format}}|implementation-defined format, auto-detected where possible}}
{{dsc end}}}}
{{dsc end}}

===Member constants===
{{dsc begin}}
{{dsc inc|cpp/filesystem/path/dsc preferred_separator}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/filesystem/path/dsc constructor}}
{{dsc inc|cpp/filesystem/path/dsc destructor}}
{{dsc inc|cpp/filesystem/path/dsc operator{{=}}}}
{{dsc inc|cpp/filesystem/path/dsc assign}}

{{dsc h2|Concatenation}}
{{dsc inc|cpp/filesystem/path/dsc append}}
{{dsc inc|cpp/filesystem/path/dsc concat}}

{{dsc h2|Modifiers}}
{{dsc inc|cpp/filesystem/path/dsc clear}}
{{dsc inc|cpp/filesystem/path/dsc make_preferred}}
{{dsc inc|cpp/filesystem/path/dsc remove_filename}}
{{dsc inc|cpp/filesystem/path/dsc replace_filename}}
{{dsc inc|cpp/filesystem/path/dsc replace_extension}}
{{dsc inc|cpp/filesystem/path/dsc swap}}

{{dsc h2|Format observers}}
{{dsc inc|cpp/filesystem/path/dsc native}}
{{dsc inc|cpp/filesystem/path/dsc string}}
{{dsc inc|cpp/filesystem/path/dsc generic_string}}

{{dsc h2|Compare}}
{{dsc inc|cpp/filesystem/path/dsc compare}}

{{dsc h2|Generation}}
{{dsc inc|cpp/filesystem/path/dsc lexically_normal}}

{{dsc h2|Decomposition}}
{{dsc inc|cpp/filesystem/path/dsc root_name}}
{{dsc inc|cpp/filesystem/path/dsc root_directory}}
{{dsc inc|cpp/filesystem/path/dsc root_path}}
{{dsc inc|cpp/filesystem/path/dsc relative_path}}
{{dsc inc|cpp/filesystem/path/dsc parent_path}}
{{dsc inc|cpp/filesystem/path/dsc filename}}
{{dsc inc|cpp/filesystem/path/dsc stem}}
{{dsc inc|cpp/filesystem/path/dsc extension}}

{{dsc h2|Queries}}
{{dsc inc|cpp/filesystem/path/dsc empty}}
{{dsc inc|cpp/filesystem/path/dsc has_path}}
{{dsc inc|cpp/filesystem/path/dsc is_absrel}}

{{dsc h2|Iterators}}
{{dsc inc|cpp/filesystem/path/dsc begin}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc namespace|std::filesystem}}
{{dsc inc|cpp/filesystem/path/dsc swap2}}
{{dsc inc|cpp/filesystem/path/dsc hash_value}}
{{dsc inc|cpp/filesystem/path/dsc operator_cmp}}
{{dsc inc|cpp/filesystem/path/dsc operator/}}
{{dsc inc|cpp/filesystem/path/dsc operator_ltltgtgt}}
{{dsc inc|cpp/filesystem/path/dsc u8path}}
{{dsc end}}

===Helper classes===
{{dsc begin}}
{{dsc namespace|std}}
{{dsc inc|cpp/filesystem/path/dsc hash}}
{{dsc inc|cpp/filesystem/path/dsc formatter}}
{{dsc end}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3657|std=C++17|before={{rlt|hash}} for {{tt|path}} was disabled|after=enabled}}
{{dr list end}}

{{langlinks|de|es|ja|ru|zh}}
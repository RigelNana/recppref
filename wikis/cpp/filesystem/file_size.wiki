{{cpp/filesystem/title|file_size}}
{{cpp/filesystem/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|num=1|since=c++17|1=
std::uintmax_t file_size( const std::filesystem::path&amp; p );
}}
{{dcl|num=2|since=c++17|1=
std::uintmax_t file_size( const std::filesystem::path&amp; p,
                          std::error_code&amp; ec ) noexcept;
}}
{{dcl end}}

If {{c|p}} does not exist, reports an error.

For a regular file {{c|p}}, returns the size determined as if by reading the {{tt|st_size}} member of the structure obtained by POSIX [https://pubs.opengroup.org/onlinepubs/9699919799/functions/stat.html {{tt|stat}}] (symlinks are followed).

The result of attempting to determine the size of a directory (as well as any other file that is not a regular file or a symlink) is implementation-defined.

The non-throwing overload returns {{c|static_cast&lt;std::uintmax_t&gt;(-1)}} on errors.

===Parameters===
{{par begin}}
{{par|p|path to examine}}
{{par|ec|out-parameter for error reporting in the non-throwing overload}}
{{par end}}

===Return value===
The size of the file, in bytes.

===Exceptions===
{{cpp/filesystem/error_handling|p|throw=1/2}}

===Example===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
namespace fs = std::filesystem;

struct HumanReadable
{
    std::uintmax_t size{};

private:
    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, HumanReadable hr)
    {
        int o{};
        double mantissa = hr.size;
        for (; mantissa &gt;= 1024.; mantissa /= 1024., ++o);
        os &lt;&lt; std::ceil(mantissa * 10.) / 10. &lt;&lt; "BKMGTPE"[o];
        return o ? os &lt;&lt; "B (" &lt;&lt; hr.size &lt;&lt; ')' : os;
    }
};

int main(int, char const* argv[])
{
    fs::path example = "example.bin";
    fs::path p = fs::current_path() / example;
    std::ofstream(p).put('a'); // create file of size 1
    std::cout &lt;&lt; example &lt;&lt; " size = " &lt;&lt; fs::file_size(p) &lt;&lt; '\n';
    fs::remove(p);

    p = argv[0];
    std::cout &lt;&lt; p &lt;&lt; " size = " &lt;&lt; HumanReadable{fs::file_size(p)} &lt;&lt; '\n';

    try
    {
        std::cout &lt;&lt; "Attempt to get size of a directory:\n";
        [[maybe_unused]] auto x_x = fs::file_size("/dev");
    }
    catch (fs::filesystem_error&amp; e)
    {
        std::cout &lt;&lt; e.what() &lt;&lt; '\n';
    }

    for (std::error_code ec; fs::path bin : {"cat", "mouse"})
    {
        bin = "/bin"/bin;
        if (const std::uintmax_t size = fs::file_size(bin, ec); ec)
            std::cout &lt;&lt; bin &lt;&lt; " : " &lt;&lt; ec.message() &lt;&lt; '\n';
        else
            std::cout &lt;&lt; bin &lt;&lt; " size = " &lt;&lt; HumanReadable{size} &lt;&lt; '\n';
    }
}
|p=true
|output=
"example.bin" size = 1
"./a.out" size = 22KB (22512)
Attempt to get size of a directory:
filesystem error: cannot get file size: Is a directory [/dev]
"/bin/cat" size = 50.9KB (52080)
"/bin/mouse" : No such file or directory
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc resize_file}}
{{dsc inc|cpp/filesystem/dsc space}}
{{dsc inc|cpp/filesystem/directory_entry/dsc file_size}}
{{dsc end}}

{{langlinks|es|ja|zh}}
{{cpp/filesystem/directory_entry/title|last_write_time}}
{{cpp/filesystem/directory_entry/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|1=
std::filesystem::file_time_type last_write_time() const;
}}
{{dcl|num=2|since=c++17|1=
std::filesystem::file_time_type last_write_time( std::error_code&amp; ec ) const noexcept;
}}
{{dcl end}}

If the last modification time is cached in this {{rlpt|directory_entry}}, returns the cached value. Otherwise, returns:
@1@ {{c|std::filesystem::last_write_time(path())}}.
@2@ {{c|std::filesystem::last_write_time(path(), ec)}}.

===Parameters===
{{par begin}}
{{par|ec|out-parameter for error reporting in the non-throwing overload}}
{{par end}}

===Return value===
The last modification time for the referred-to filesystem object.

===Exceptions===
{{cpp/filesystem/error_handling|p|throw=1/2}}

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;ctime&gt;
#include &lt;filesystem&gt;
#include &lt;format&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

std::string to_string(const std::filesystem::file_time_type&amp; ftime)
{
#if __cpp_lib_format
    return std::format("{:%c}", ftime);
#else
    std::time_t cftime = std::chrono::system_clock::to_time_t(
        std::chrono::file_clock::to_sys(ftime));
    std::string str = std::asctime(std::localtime(&amp;cftime));
    str.pop_back(); // rm the trailing '\n' put by `asctime`
    return str;
#endif
}

int main()
{
    auto dir = std::filesystem::current_path();
    using Entry = std::filesystem::directory_entry;
    for (Entry const&amp; entry : std::filesystem::directory_iterator(dir))
        std::cout &lt;&lt; to_string(entry.last_write_time()) &lt;&lt; " : "
                  &lt;&lt; entry.path().filename() &lt;&lt; '\n';
}
|p=true
|output=
Wed Sep  6 13:37:13.960314156 2023 : "main.cpp"
Wed Sep  6 13:37:42.690271828 2023 : "a.out"
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc last_write_time}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
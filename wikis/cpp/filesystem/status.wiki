{{cpp/filesystem/title|status|symlink_status}}
{{cpp/filesystem/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|since=c++17|num=1|
std::filesystem::file_status status( const std::filesystem::path&amp; p );
}}
{{dcl|since=c++17|num=2|
std::filesystem::file_status status( const std::filesystem::path&amp; p,
                                     std::error_code&amp; ec ) noexcept;
}}
{{dcl|since=c++17|num=3|
std::filesystem::file_status symlink_status( const std::filesystem::path&amp; p );
}}
{{dcl|since=c++17|num=4|
std::filesystem::file_status symlink_status( const std::filesystem::path&amp; p,
                                             std::error_code&amp; ec ) noexcept;
}}
{{dcl end}}

@1,2@ Determines the type and attributes of the filesystem object identified by {{c|p}} as if by POSIX {{posix|stat}} (symlinks are followed to their targets). In the following description, {{tt|prms}} is the result of {{c|(m &amp; perms::mask)}}, where {{c|m}} is obtained as if by taking {{c|st_mode}} from the POSIX {{c/core|struct stat}} and converting it to the type {{c|std::filesystem::perms}}.
:* If {{c|p}} is a regular file (as if by POSIX {{c|S_ISREG}}), returns {{c|file_status(file_type::regular, prms)}}.
:* If {{c|p}} is a directory (as if by POSIX {{c|S_ISDIR}}), returns {{c|file_status(file_type::directory, prms)}}.
:* If {{c|p}} is a block special file (as if by POSIX {{c|S_ISBLK}}), returns {{c|file_status(file_type::block, prms)}}.
:* If {{c|p}} is a character special file (as if by POSIX {{c|S_ISCHR}}), returns {{c|file_status(file_type::character, prms)}}.
:* If {{c|p}} is a fifo or pipe file (as if by POSIX {{c|S_ISFIFO}}), returns {{c|file_status(file_type::fifo, prms)}}.
:* If {{c|p}} is a socket (as if by POSIX {{c|S_ISSOCK}}), returns {{c|file_status(file_type::socket, prms)}}.
:* If {{c|p}} has an implementation-defined file type, returns {{c|file_status(file_type::A, prms)}} where {{tt|A}} is the implementation-defined {{ltt|cpp/filesystem/file_type|file_type}} constant for that type.
:* If {{c|p}} does not exist, returns {{c|file_status(file_type::not_found)}}.
:* If {{c|p}} exists but file attributes cannot be determined, e.g. due to lack of permissions, returns {{c|file_status(file_type::unknown)}}.
:* If errors prevent even knowing whether {{c|p}} exists, the non-throwing overload sets {{c|ec}} and returns {{c|file_status(file_type::none)}}, and the throwing overload throws {{tt|filesystem_error}}.
:* Otherwise, returns {{c|file_status(file_type::unknown, prms)}}.
@3,4@ Same as {{v|1,2}} except that the behavior is as if the POSIX {{posix|lstat}} is used (symlinks are not followed):
:* If {{c|p}} is a symlink, returns {{c|file_status(file_type::symlink)}}.

===Parameters===
{{par begin}}
{{par|p|path to examine}}
{{par|ec|out-parameter for error reporting in the non-throwing overload}}
{{par end}}

===Return value===
The file status (a {{lc|std::filesystem::file_status|filesystem::file_status}} object).

===Exceptions===
{{cpp/filesystem/error handling|p|throw=1,3/2,4}}

===Notes===
The information provided by this function is usually also provided as a byproduct of directory iteration, and may be obtained by the member functions of {{lc|std::filesystem::directory_entry|filesystem::directory_entry}}. During directory iteration, calling {{tt|status}} again is unnecessary.

===Example===
{{cpp/filesystem/status example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc file_status}}
{{dsc inc|cpp/filesystem/dsc status_known}}
{{dsc inc|cpp/filesystem/dsc is_block_file}}
{{dsc inc|cpp/filesystem/dsc is_character_file}}
{{dsc inc|cpp/filesystem/dsc is_directory}}
{{dsc inc|cpp/filesystem/dsc is_fifo}}
{{dsc inc|cpp/filesystem/dsc is_other}}
{{dsc inc|cpp/filesystem/dsc is_regular_file}}
{{dsc inc|cpp/filesystem/dsc is_socket}}
{{dsc inc|cpp/filesystem/dsc is_symlink}}
{{dsc inc|cpp/filesystem/dsc exists}}
{{dsc inc|cpp/filesystem/directory_entry/dsc status}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/filesystem/title|create_directory|create_directories}}
{{cpp/filesystem/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|num=1|since=c++17|1=
bool create_directory( const std::filesystem::path&amp; p );
}}
{{dcl|num=2|since=c++17|1=
bool create_directory( const std::filesystem::path&amp; p, std::error_code&amp; ec ) noexcept;
}}
{{dcl|num=3|since=c++17|1=
bool create_directory( const std::filesystem::path&amp; p,
                       const std::filesystem::path&amp; existing_p );
}}
{{dcl|num=4|since=c++17|1=
bool create_directory( const std::filesystem::path&amp; p,
                       const std::filesystem::path&amp; existing_p,
                       std::error_code&amp; ec ) noexcept;
}}
{{dcl|num=5|since=c++17|1=
bool create_directories( const std::filesystem::path&amp; p );
}}
{{dcl|num=6|since=c++17|1=
bool create_directories( const std::filesystem::path&amp; p, std::error_code&amp; ec );
}}
{{dcl end}}

@1,2@ Creates the directory {{c|p}} as if by POSIX [https://pubs.opengroup.org/onlinepubs/9699919799/functions/mkdir.html {{tt|mkdir()}}] with a second argument of {{c|static_cast&lt;int&gt;(std::filesystem::perms::all)}} (the parent directory must already exist). If the function fails because {{c|p}} resolves to an existing directory, no error is reported. Otherwise on failure an error is reported.
@3,4@ Same as {{v|1,2}}, except that the attributes of the new directory are copied from {{c|existing_p}} (which must be a directory that exists). It is OS-dependent which attributes are copied: on POSIX systems, the attributes are copied as if by
{{source|1=
stat(existing_p.c_str(), &amp;attributes_stat)
mkdir(p.c_str(), attributes_stat.st_mode)
}}
On Windows OS, no attributes of {{c|existing_p}} are copied.
@5,6@ Executes {{v|1,2}} for every element of {{c|p}} that does not already exist. If {{c|p}} already exists, the function does nothing (this condition is not treated as an error).

===Parameters===
{{par begin}}
{{par|p|the path to the new directory to create}}
{{par|existing_p|the path to a directory to copy the attributes from}}
{{par|ec|out-parameter for error reporting in the non-throwing overload}}
{{par end}}

===Return value===
{{c|true}} if a directory was newly created for the directory {{c|p}} resolves to, {{c|false}} otherwise.

===Exceptions===
{{cpp/filesystem/error_handling|p|throw=1,5/2,6}}
{{cpp/filesystem/error_handling|p|existing_p|throw=3/4|noexcept=no}}

===Notes===
The attribute-preserving overload {{v|3,4}} is implicitly invoked by {{ltf|cpp/filesystem/copy}} when recursively copying directories. Its equivalent in boost.filesystem is [https://www.boost.org/doc/libs/1_57_0/libs/filesystem/doc/reference.html#copy_directory {{tt|copy_directory}}] (with argument order reversed).

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;cstdlib&gt;
#include &lt;filesystem&gt;
 
int main()
{
    std::filesystem::current_path(std::filesystem::temp_directory_path());

    // Basic usage
    std::filesystem::create_directories("sandbox/1/2/a");
    std::filesystem::create_directory("sandbox/1/2/b");
    
    // Directory already exists (false returned, no error)
    assert(!std::filesystem::create_directory("sandbox/1/2/b"));
    
    // Permissions copying usage
    std::filesystem::permissions(
        "sandbox/1/2/b",
        std::filesystem::perms::others_all,
        std::filesystem::perm_options::remove
    );
    std::filesystem::create_directory("sandbox/1/2/c", "sandbox/1/2/b");
    
    std::system("ls -l sandbox/1/2");
    std::system("tree sandbox");
    std::filesystem::remove_all("sandbox");
}
|p=true
|output=
drwxr-xr-x 2 user group 4096 Apr 15 09:33 a
drwxr-x--- 2 user group 4096 Apr 15 09:33 b
drwxr-x--- 2 user group 4096 Apr 15 09:33 c
sandbox
└── 1
    └── 2
        ├── a
        ├── b
        └── c
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2935|std=C++17|before=error if target already exists but is not a directory|after=not error}}
{{dr list item|wg=lwg|dr=3014|std=C++17|before={{tt|error_code}} overload of {{tt|create_directories}} marked noexcept but can allocate memory|after=noexcept removed}}
{{dr list item|paper=P1164R1|std=C++17|before=creation failure caused by an existing non-directory file is not an error|after=made error}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc create_symlink}}
{{dsc inc|cpp/filesystem/dsc copy}}
{{dsc inc|cpp/filesystem/dsc perms}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
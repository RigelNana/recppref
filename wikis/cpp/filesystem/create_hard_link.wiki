{{cpp/filesystem/title|create_hard_link}}
{{cpp/filesystem/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|num=1|since=c++17|1=
void create_hard_link( const std::filesystem::path&amp; target,
                       const std::filesystem::path&amp; link );
}}
{{dcl|num=2|since=c++17|1=
void create_hard_link( const std::filesystem::path&amp; target,
                       const std::filesystem::path&amp; link,
                       std::error_code&amp; ec ) noexcept;
}}
{{dcl end}}

Creates a hard link {{c|link}} with its target set to {{c|target}} as if by POSIX [https://pubs.opengroup.org/onlinepubs/9699919799/functions/link.html {{tt|link()}}]: the pathname {{c|target}} must exist.

Once created, {{c|link}} and {{c|target}} are two logical names that refer to the same file (they are {{ltt|cpp/filesystem/equivalent|equivalent}}). Even if the original name {{c|target}} is deleted, the file continues to exist and is accessible as {{c|link}}.

===Parameters===
{{par begin}}
{{par|target|path of the file or directory to link to}}
{{par|link|path of the new hard link}}
{{par|ec|out-parameter for error reporting in the non-throwing overload}}
{{par end}}

===Return value===
(none)

===Exceptions===
{{cpp/filesystem/error_handling|target|link|throw=1/2}}

===Notes===
Some operating systems do not support hard links at all or support them only for regular files.

Some file systems do not support hard links regardless of the operating system: the FAT file system used on memory cards and flash drives, for example.

Some file systems limit the number of links per file.

Hardlinking to directories is typically restricted to the superuser.

Hard links typically cannot cross filesystem boundaries.

The special pathname dot ({{c|"."}}) is a hard link to its parent directory. The special pathname dot-dot {{c|".."}} is a hard link to the directory that is the parent of its parent.

===Example===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
namespace fs = std::filesystem;

int main()
{
    fs::create_directories("sandbox/subdir");
    std::ofstream("sandbox/a").put('a'); // create regular file
    fs::create_hard_link("sandbox/a", "sandbox/b");
    fs::remove("sandbox/a");
    // read from the original file via surviving hard link
    char c = std::ifstream("sandbox/b").get();
    std::cout &lt;&lt; c &lt;&lt; '\n';
    fs::remove_all("sandbox");
}
|output=
a
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc create_symlink}}
{{dsc inc|cpp/filesystem/dsc hard_link_count}}
{{dsc end}}

{{langlinks|es|ja|zh}}
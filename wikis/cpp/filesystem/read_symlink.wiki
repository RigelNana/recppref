{{cpp/filesystem/title|read_symlink}}
{{cpp/filesystem/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|num=1|since=c++17|1=
std::filesystem::path read_symlink( const std::filesystem::path&amp; p );
}}
{{dcl|num=2|since=c++17|1=
std::filesystem::path read_symlink( const std::filesystem::path&amp; p,
                                    std::error_code&amp; ec );
}}
{{dcl end}}

If the path {{c|p}} refers to a symbolic link, returns a new path object which refers to the target of that symbolic link.

It is an error if {{c|p}} does not refer to a symbolic link.

The non-throwing overload returns an empty path on errors.

===Parameters===
{{par begin}}
{{par|p|path to a symlink}}
{{par|ec|out-parameter for error reporting in the non-throwing overload}}
{{par end}}

===Return value===
The target of the symlink (which may not necessarily exist).

===Exceptions===
{{cpp/filesystem/error_handling|p|throw=1/2}}

===Example===
{{example|code=
#include &lt;filesystem&gt;
#include &lt;iostream&gt;

namespace fs = std::filesystem;

int main()
{
    for (fs::path p : {"/usr/bin/gcc", "/bin/cat", "/bin/mouse"})
    {
        std::cout &lt;&lt; p;
        fs::exists(p) ?
            fs::is_symlink(p) ?
                std::cout &lt;&lt; " -&gt; " &lt;&lt; fs::read_symlink(p) &lt;&lt; '\n' :
                std::cout &lt;&lt; " exists but it is not a symlink\n" :
            std::cout &lt;&lt; " does not exist\n";
    }
}
|p=true
|output=
"/usr/bin/gcc" -&gt; "gcc-5"
"/bin/cat" exists but it is not a symlink
"/bin/mouse" does not exist
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc is_symlink}}
{{dsc inc|cpp/filesystem/dsc create_symlink}}
{{dsc inc|cpp/filesystem/dsc copy_symlink}}
{{dsc inc|cpp/filesystem/dsc status}}
{{dsc end}}

{{langlinks|es|ja|zh}}
{{cpp/filesystem/path/title|compare}}
{{cpp/filesystem/path/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|1=
int compare( const path&amp; p ) const noexcept;
}}
{{dcl|num=2|since=c++17|1=
int compare( const string_type&amp; str ) const;
int compare( std::basic_string_view&lt;value_type&gt; str ) const;
}}
{{dcl|num=3|since=c++17|1=
int compare( const value_type* s ) const;
}}
{{dcl end}}

Compares the lexical representations of the path and another path.

@1@ If {{c|root_name().native().compare(p.root_name().native())}} is nonzero, returns that value. 
@@ Otherwise, if {{c|has_root_directory() !{{=}} p.has_root_directory()}}, returns a value less than zero if {{rlpf|has_path|has_root_directory}} is {{c|false}} and a value greater than zero otherwise.
@@ Otherwise returns a value less than, equal to or greater than {{c|0}} if the relative portion of the path ({{rlpf|relative_path}}) is respectively lexicographically less than, equal to or greater than the relative portion of {{c|p}} ({{c|p.relative_path()}}). Comparison is performed element-wise, as if by iterating both paths from {{rlpf|begin}} to {{rlpf|begin|end}} and comparing the result of {{rlpf|native}} for each element.
@2@ Equivalent to {{c|compare(path(str))}}.
@3@ Equivalent to {{c|compare(path(s))}}.

===Parameters===
{{par begin}}
{{par|p|a path to compare to}}
{{par|str|a string or string view representing path to compare to}}
{{par|s|a null-terminated string representing path to compare to}}
{{par end}}

===Return value===
A value less than {{c|0}} if the path is lexicographically less than the given path.

A value equal to {{c|0}} if the path is lexicographically equal to the given path.

A value greater than {{c|0}} if the path is lexicographically greater than the given path.

===Exceptions===
@2,3@ {{cpp/impldef exception item}}

===Notes===
For two-way comparisons, [[cpp/filesystem/path/operator_cmp|binary operators]] may be more suitable.

===Example===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;
namespace fs = std::filesystem;

void demo(fs::path p1, fs::path p2, std::string_view msg)
{
    std::cout &lt;&lt; p1;
    const int rc = p1.compare(p2); 
    if (rc &lt; 0)
        std::cout &lt;&lt; " &lt; ";
    else if (rc &gt; 0)
        std::cout &lt;&lt; " &gt; ";
    else
        std::cout &lt;&lt; " == ";
    std::cout &lt;&lt; p2 &lt;&lt; " \t: " &lt;&lt; msg &lt;&lt; '\n';
}

int main()
{
    demo("/a/b/", "/a/b/", "simple");
    demo("/a/b/", "/a/b/c", "simple");
    demo("/a/b/../b", "/a/b", "no canonical conversion");
    demo("/a/b", "/a/b/.", "no canonical conversion");
    demo("/a/b/", "a/c", "absolute paths order after relative ones");
}
|output=
"/a/b/" == "/a/b/"      : simple
"/a/b/" &lt; "/a/b/c"	: simple
"/a/b/../b" &gt; "/a/b"	: no canonical conversion
"/a/b" &lt; "/a/b/."	: no canonical conversion
"/a/b/" &gt; "a/c"	        : absolute paths order after relative ones
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2936|std=C++17|before=compared all path elements directly|after=root name and root directory handled separately}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/filesystem/path/dsc operator_cmp}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
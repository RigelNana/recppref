{{cpp/filesystem/title|operator/{{small|(std::filesystem::path)}}}}
{{cpp/filesystem/path/navbar}}
{{ddcl|since=c++17|
friend path operator/( const path&amp; lhs, const path&amp; rhs );
}}

Concatenates two path components using the preferred directory separator if appropriate (see {{ltt|cpp/filesystem/path/append|operator/{{=}}}} for details).

Effectively returns {{c|1=path(lhs) /= rhs}}.

{{cpp/hidden friend|std::filesystem::path}} This prevents undesirable conversions in the presence of a {{c|using namespace std::filesystem;}} ''using-directive''.

===Parameters===
{{par begin}}
{{par|lhs, rhs|paths to concatenate}}
{{par end}}

===Return value===
The result of path concatenation.

===Example===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;iostream&gt;

int main()
{
#   if defined(_WIN32) // see e.g. stackoverflow.com/questions/142508

    std::filesystem::path p = "C:";

    std::cout &lt;&lt; "\"C:\" / \"Users\" / \"batman\" == " &lt;&lt; p / "Users" / "batman" &lt;&lt; '\n';

#   else // __linux__ etc

    std::filesystem::path p = "/home";

    std::cout &lt;&lt; "\"/home\" / \"tux\" / \".fonts\" == " &lt;&lt; p / "tux" / ".fonts" &lt;&lt; '\n';

#   endif
}
|p=true
|output=
Windows specific output:
"C:" / "Users" / "batman" == "C:Users\\batman"

Linux etc specific output:
"/home" / "tux" / ".fonts" == "/home/tux/.fonts"
}}

===Defect reports===
{{dr list begin}}
{{dr list item|dr=3065|wg=lwg|std=C++17|before=allowed concatenating everything convertible to {{tt|path}} in the presence of a ''using-directive''|after=made hidden friend}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/filesystem/path/dsc append}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
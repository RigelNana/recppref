{{cpp/filesystem/path/title|concat|operator+{{=}}}}
{{cpp/filesystem/path/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|1=
path&amp; operator+=( const path&amp; p );
}}
{{dcl|num=2|since=c++17|1=
path&amp; operator+=( const string_type&amp; str );
path&amp; operator+=( std::basic_string_view&lt;value_type&gt; str );
}}
{{dcl|num=3|since=c++17|1=
path&amp; operator+=( const value_type* ptr );
}}
{{dcl|num=4|since=c++17|1=
path&amp; operator+=( value_type x );
}}
{{dcl|num=5|since=c++17|1=
template&lt; class CharT &gt;
path&amp; operator+=( CharT x );
}}
{{dcl|num=6|since=c++17|1=
template&lt; class Source &gt;
path&amp; operator+=( const Source&amp; source );
}}
{{dcl|num=7|since=c++17|1=
template&lt; class Source &gt;
path&amp; concat( const Source&amp; source );
}}
{{dcl|num=8|since=c++17|1=
template&lt; class InputIt &gt;
path&amp; concat( InputIt first, InputIt last );
}}
{{dcl end}}

Concatenates the current path and the argument

@1-3,6,7@ Appends {{c|path(p).native()}} to the pathname stored in {{c|*this}} in the native format. This directly manipulates the value of {{c|native()}} and may not be portable between operating systems.
@4,5@ Same as {{c|1=return *this += std::basic_string_view(&amp;x, 1);}}.
@8@ Same as {{c|1=return *this += path(first, last);}}.

{{cpp/filesystem/path/param source constraints|6|7}}

===Parameters===
{{par begin}}
{{par|p|path to append}}
{{par|str|string or string view to append}}
{{par|ptr|pointer to the beginning of a null-terminated string to append}}
{{par|x|single character to append}}
{{par|source|{{lc|std::basic_string}}, {{lc|std::basic_string_view}}, null-terminated multicharacter string, or an input iterator pointing to a null-terminated multicharacter sequence, which represents a path name (either in portable or in native format)}}
{{par|first, last|pair of {{named req|InputIterator}}s that specify a multicharacter sequence that represents a path name}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par req|The value type of {{tt|InputIt}} must be one of the encoded character types ({{c|char}}, {{c|wchar_t}}, {{c|char16_t}} and {{c|char32_t}}).}}
{{par req|{{tt|CharT}} must be one of the encoded character types ({{c|char}}, {{c|wchar_t}}, {{c|char16_t}} and {{c|char32_t}}).}}
{{par end}}

===Return value===
{{c|*this}}

===Exceptions===
May throw {{c|std::bad_alloc}} if memory allocation fails.

===Notes===
Unlike with {{lc|append()}} or {{lc|operator/{{=}}}}, additional directory separators are never introduced.

===Example===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::filesystem::path p1; // an empty path
    p1 += "var"; // does not insert a separator
    std::cout &lt;&lt; R"("" + "var" --&gt; )" &lt;&lt; p1 &lt;&lt; '\n';
    p1 += "lib"; // does not insert a separator
    std::cout &lt;&lt; R"("var" + "lib" --&gt; )" &lt;&lt; p1 &lt;&lt; '\n';
    auto str = std::string{"1234567"};
    p1.concat(std::begin(str) + 3, std::end(str) - 1);
    std::cout &lt;&lt; "p1.concat --&gt; " &lt;&lt; p1 &lt;&lt; '\n';
}
|output=
"" + "var" --&gt; "var"
"var" + "lib" --&gt; "varlib"
p1.concat --&gt; "varlib456"
}}

===Defect reports===
{{dr list begin}}
{{dr list item|dr=3055|wg=lwg|std=C++17|before=the specification of concatenating a single character was ill-formed|after=made well-formed}}
{{dr list item|dr=3244|wg=lwg|std=C++17|before=constraint that {{tt|Source}} cannot be {{tt|path}} was missing|after=added}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/filesystem/path/dsc append}}
{{dsc inc|cpp/filesystem/path/dsc operator/}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
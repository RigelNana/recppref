{{cpp/title|formatter{{small|&lt;std::filesystem::path&gt;}}}}
{{cpp/filesystem/path/navbar}}

{{ddcl|header=filesystem|since=c++26|
template&lt; class CharT &gt;
struct formatter&lt;std::filesystem::path, CharT&gt;;
}}

The template specialization of {{lc|std::formatter}} for the {{lc|std::filesystem::path}} class allows users to convert a pathname to its textual representation using [[cpp/utility/format|formatting functions]]. This specialization is [[cpp/utility/format/formatter#Basic standard specializations|''debug-enabled'']].

===Format specification===
The syntax of format specifications {{spar|path-format-spec}} is:

{{sdsc begin}}
{{sdsc|{{spar optional|fill-and-align}} {{spar optional|width}} {{ttb|?}}{{mark optional}} {{ttb|g}}{{mark optional}}}}
{{sdsc end}}

{{spar|fill-and-align}} and {{spar|width}} have the same meaning as in [[cpp/utility/format/formatter#Standard format specification|standard format specification]].

The {{ttb|?}} option is used to format the pathname as an [[cpp/utility/format/spec#Formatting escaped characters and strings|escaped string]].

The {{ttb|g}} option is used to specify that the pathname is in {{rlp|format|generic-format representation}}.

===Member functions===
{{dsc begin}}
{{dsc mem fun|set_debug_format|nolink=true|enables to format the pathname as an [[cpp/utility/format/spec#Formatting escaped characters and strings|escaped string]]}}
{{dsc mem fun|parse|nolink=true|parses the format specifier as specified by {{spar|path-format-spec}}}}
{{dsc mem fun|format|nolink=true|writes the formatted output as specified by {{spar|path-format-spec}}}}
{{dsc end}}

{{member|1={{small|std::formatter&lt;std::filesystem::path&gt;::}}set_debug_format|2=
{{dcl begin}}
{{dcl|1=
constexpr void set_debug_format();
}}
{{dcl end}}

Allows the current object to format pathname as an [[cpp/utility/format/spec#Formatting escaped characters and strings|escaped string]].
}}

{{member|1={{small|std::formatter&lt;std::filesystem::path&gt;::}}parse|2=
{{dcl begin}}
{{dcl|1=
constexpr auto parse( std::basic_format_parse_context&lt;CharT&gt;&amp; ctx ) 
    -&gt; std::basic_format_parse_context&lt;CharT&gt;::iterator;
}}
{{dcl end}}

Parses the format specifiers as a {{spar|path-format-spec}} and stores the parsed specifiers in the current object.

Returns an iterator past the end of the {{spar|path-format-spec}}.
}}

{{member|1={{small|std::formatter&lt;std::filesystem::path&gt;::}}format|2=
{{dcl begin}}
{{dcl|1=
template&lt; class FormatContext &gt;
auto format( const std::filesystem::path&amp; p, FormatContext&amp; ctx ) const 
    -&gt; FormatContext::iterator;
}}
{{dcl end}}

Let {{c|s}} be {{c|p.generic&lt;std::filesystem::path::value_type&gt;()}} if the {{ttb|g}} option is used, otherwise {{c|p.native()}}. Writes {{c|s}} into {{c|ctx.out()}} as specified by {{spar|path-format-spec}}.

For character transcoding of the pathname:
* The pathname is transcoded from the native encoding for wide character strings to UTF-8 with maximal subparts of ill-formed subsequences substituted with {{tt|U+FFFD}} REPLACEMENT CHARACTER if
** {{c|std::is_same_v&lt;CharT, char&gt;}} is {{c|true}},
** {{c|std::is_same_v&lt;typename path::value_type, wchar_t&gt;}} is {{c|true}}, and
** [[cpp/language/charset#Code unit and literal encoding|ordinary literal encoding]] is UTF-8.
* Otherwise, no transcoding is performed if {{c|std::is_same_v&lt;typename path::value_type, CharT&gt;}} is {{c|true}}.
* Otherwise, transcoding is implementation-defined.

Returns an iterator past the end of the output range.
}}

===Notes===
{{ftm begin}}
{{ftm|std=C++26|value=202403L|__cpp_lib_format_path|formatting support for {{tt|std::filesystem::path}}}}
{{ftm end}}

===Example===
{{example
|code=
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/format/dsc formatter}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
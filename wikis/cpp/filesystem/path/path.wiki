{{cpp/filesystem/path/title|path}}
{{cpp/filesystem/path/navbar}}
{{dcl begin}}
{{dcl|since=c++17|num=1|
path() noexcept;
}}
{{dcl|since=c++17|num=2|
path( const path&amp; p );
}}
{{dcl|since=c++17|num=3|
path( path&amp;&amp; p ) noexcept;
}}
{{dcl|since=c++17|num=4|1=
path( string_type&amp;&amp; source, format fmt = auto_format );
}}
{{dcl|since=c++17|num=5|1=
template&lt; class Source &gt;
path( const Source&amp; source, format fmt = auto_format );
}}
{{dcl|since=c++17|num=6|1=
template&lt; class InputIt &gt;
path( InputIt first, InputIt last, format fmt = auto_format );
}}
{{dcl|since=c++17|num=7|1=
template&lt; class Source &gt;
path( const Source&amp; source, const std::locale&amp; loc, format fmt = auto_format );
}}
{{dcl|since=c++17|num=8|1=
template&lt; class InputIt &gt;
path( InputIt first, InputIt last, const std::locale&amp; loc, format fmt = auto_format );
}}
{{dcl end}}

Constructs a new {{tt|path}} object.

@1@ Constructs an empty path.
@2@ Copy constructor. Constructs a path whose pathname, in both native and generic formats, is the same as that of {{c|p}}.
@3@ Move constructor. Constructs a path whose pathname, in both native and generic formats, is the same as that of {{c|p}}, {{c|p}} is left in valid but unspecified state.
@4-6@ Constructs the path from a character sequence (format interpreted as specified by {{c|fmt}}) provided by {{c|source}} {{v|4,5}}, which is a pointer or an input iterator to a null-terminated character/wide character sequence, an {{lc|std::basic_string}} or an {{lc|std::basic_string_view}}, or represented as a pair of input iterators [{{c|first}}, {{c|last}}) {{v|6}}. Any of the character types {{c|char}}, {{rev inl|since=c++20|{{c|char8_t}}, }}{{c|char16_t}}, {{c|char32_t}}, {{c|wchar_t}} is allowed, and the method of conversion to the native character set depends on the character type used by {{c|source}}.
:*If the source character type is {{c|char}}, the encoding of the source is assumed to be the native narrow encoding (so no conversion takes place on POSIX systems).
{{rrev|since=c++20|
:*If the source character type is {{c|char8_t}}, conversion from UTF-8 to native filesystem encoding is used.
}}
:*If the source character type is {{c|char16_t}}, conversion from UTF-16 to native filesystem encoding is used.
:*If the source character type is {{c|char32_t}}, conversion from UTF-32 to native filesystem encoding is used.
:* If the source character type is {{c|wchar_t}}, the input is assumed to be the native wide encoding (so no conversion takes places on Windows).
@7,8@ Constructs the path from a character sequence (format interpreted as specified by {{c|fmt}}) provided by {{c|source}} {{v|7}}, which is a pointer or an input iterator to a null-terminated character sequence, an {{lc|std::string}}, an {{lc|std::string_view}}, or represented as a pair of input iterators [{{c|first}}, {{c|last}}) {{v|8}}. The only character type allowed is {{c|char}}. Uses {{c|loc}} to perform the character encoding conversion. If {{tt|value_type}} is {{c|wchar_t}}, converts from to wide using the {{c|std::codecvt&lt;wchar_t, char, std::mbstate_t&gt;}} facet of {{c|loc}}. Otherwise, first converts to wide using the {{c|std::codecvt&lt;wchar_t, char, std::mbstate_t&gt;}} facet and then converts to filesystem native character type using {{c|std::codecvt&lt;wchar_t,value_type&gt;}} facet of {{c|loc}}.

{{cpp/filesystem/path/param source constraints|5|7}}

===Parameters===
{{par begin}}
{{par|p|a path to copy}}
{{par|source|{{lc|std::basic_string}}, {{lc|std::basic_string_view}}, pointer to a null-terminated character string, or input iterator with a character value type that points to a null-terminated character sequence (the character type must be {{c|char}} for overload {{v|7}})}}
{{par|first, last|pair of {{named req|InputIterator}}s that specify a character sequence}}
{{par|fmt|enumerator of type {{ltt|cpp/filesystem/path/format|path::format}} which specifies how pathname format is to be interpreted}}
{{par|loc|locale that defines encoding conversion to use}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par req|The value type of {{tt|InputIt}} must be one of the character types {{c|char}}, {{c|wchar_t}}, {{rev inl|since=c++20|{{c|char8_t}}, }}{{c|char16_t}} and {{c|char32_t}} to use the overload {{v|6}}.}}
{{par req|The value type of {{tt|InputIt}} must be {{c|char}} to use the overload {{v|8}}.}}
{{par end}}

===Exceptions===
@2,4-8@ {{cpp/impldef exception item}}

===Notes===
{{rrev multi|until1=c++20|rev1=
For portable pathname generation from Unicode strings, see {{rlpt|u8path}}.
|rev2=
{{tt|path}} constructor supports creation from UTF-8 string when the source is a sequence of {{c|char8_t}}.
}}

===Example===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;iostream&gt;
namespace fs = std::filesystem;

int main()
{
    fs::path p1 = "/usr/lib/sendmail.cf"; // portable format
    fs::path p2 = "C:\\users\\abcdef\\AppData\\Local\\Temp\\"; // native format
    fs::path p3 = U"D:/猫.txt"; // UTF-32 string
    fs::path p4 = u8"~/狗.txt"; // UTF-8 string

    std::cout &lt;&lt; "p1 = " &lt;&lt; p1 &lt;&lt; '\n'
              &lt;&lt; "p2 = " &lt;&lt; p2 &lt;&lt; '\n'
              &lt;&lt; "p3 = " &lt;&lt; p3 &lt;&lt; '\n'
              &lt;&lt; "p4 = " &lt;&lt; p4 &lt;&lt; '\n';
}
|output=
p1 = "/usr/lib/sendmail.cf"
p2 = "C:\\users\\abcdef\\AppData\\Local\\Temp\\"
p3 = "D:/猫.txt"
p4 = "~/狗.txt"
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3244|std=C++17|before=constraint that {{tt|Source}} cannot be {{tt|path}} was missing|after=added}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/filesystem/path/dsc u8path}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
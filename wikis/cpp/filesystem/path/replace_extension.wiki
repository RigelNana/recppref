{{cpp/filesystem/path/title|replace_extension}}
{{cpp/filesystem/path/navbar}}
{{dcl begin}}
{{dcl|since=c++17|1=
path&amp; replace_extension( const path&amp; replacement = path() );
}}
{{dcl end}}

Replaces the extension with {{c|replacement}} or removes it when the default value of {{c|replacement}} is used.

Firstly, if this path has an {{ltf|cpp/filesystem/path/extension}}, it is removed from the generic-format view of the pathname. 

Then, a dot character is appended to the generic-format view of the pathname, if {{c|replacement}} is not empty and does not begin with a dot character.

Then {{c|replacement}} is appended as if by {{c|operator+{{=}}(replacement)}}.

===Parameters===
{{par begin}}
{{par|replacement|the extension to replace with}}
{{par end}}

===Return value===
{{c|*this}}

{{cpp/impldef exception}}

===Notes===
The type of {{c|replacement}} is {{lc|std::filesystem::path}} even though it is not intended to represent an object on the file system in order to correctly account for the filesystem character encoding.

===Example===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;utility&gt;

int main()
{
    const int width1{18}, width2{11}; // columns' width

    std::cout &lt;&lt; std::left &lt;&lt; std::setw(width1) &lt;&lt; "Path:"
              &lt;&lt; std::setw(width2) &lt;&lt; "Ext:" &lt;&lt; "Result:\n";
    for (const auto&amp; [p, e] : {
            std::make_pair("/foo/bar.jpg", ".png"),
            {"/foo/bar.jpg", "png"},
            {"/foo/bar.jpg", "."},
            {"/foo/bar.jpg", ""},
            {"/foo/bar.", "png"},
            {"/foo/bar", ".png"},
            {"/foo/bar", "png"},
            {"/foo/bar", "."},
            {"/foo/bar", ""},
            {"/foo/.", ".png"},
            {"/foo/.", "png"},
            {"/foo/.", "."},
            {"/foo/.", ""},
            {"/foo/", ".png"},
            {"/foo/", "png"}&lt;!----&gt;})
    {
        std::filesystem::path path{p}, ext{e};
        std::cout &lt;&lt; std::setw(width1) &lt;&lt; path &lt;&lt; std::setw(width2) &lt;&lt; ext;
        path.replace_extension(ext);
        std::cout &lt;&lt; path &lt;&lt; '\n';
    }
}
|output=
Path:             Ext:       Result:
"/foo/bar.jpg"    ".png"     "/foo/bar.png"
"/foo/bar.jpg"    "png"      "/foo/bar.png"
"/foo/bar.jpg"    "."        "/foo/bar."
"/foo/bar.jpg"    ""         "/foo/bar"
"/foo/bar."       "png"      "/foo/bar.png"
"/foo/bar"        ".png"     "/foo/bar.png"
"/foo/bar"        "png"      "/foo/bar.png"
"/foo/bar"        "."        "/foo/bar."
"/foo/bar"        ""         "/foo/bar"
"/foo/."          ".png"     "/foo/..png"
"/foo/."          "png"      "/foo/..png"
"/foo/."          "."        "/foo/.."
"/foo/."          ""         "/foo/."
"/foo/"           ".png"     "/foo/.png"
"/foo/"           "png"      "/foo/.png"
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/filesystem/path/dsc extension}}
{{dsc inc|cpp/filesystem/path/dsc filename}}
{{dsc inc|cpp/filesystem/path/dsc stem}}
{{dsc mem fun|cpp/filesystem/path/has_path|title=has_extension|checks if the corresponding path element is not empty}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{title|1=operator==,!=,&lt;,&lt;=,&gt;,&gt;=,&lt;=&gt;{{small|(std::filesystem::path)}}}}
{{cpp/filesystem/path/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|1=
friend bool operator==( const path&amp; lhs, const path&amp; rhs ) noexcept;
}}
{{dcl|num=2|since=c++17|until=c++20|1=
friend bool operator!=( const path&amp; lhs, const path&amp; rhs ) noexcept;
}}
{{dcl|num=3|since=c++17|until=c++20|1=
friend bool operator&lt;( const path&amp; lhs, const path&amp; rhs ) noexcept;
}}
{{dcl|num=4|since=c++17|until=c++20|1=
friend bool operator&lt;=( const path&amp; lhs, const path&amp; rhs ) noexcept;
}}
{{dcl|num=5|since=c++17|until=c++20|1=
friend bool operator&gt;( const path&amp; lhs, const path&amp; rhs ) noexcept;
}}
{{dcl|num=6|since=c++17|until=c++20|1=
friend bool operator&gt;=( const path&amp; lhs, const path&amp; rhs ) noexcept;
}}
{{dcl|num=7|since=c++20|1=
friend std::strong_ordering
    operator&lt;=&gt;( const path&amp; lhs, const path&amp; rhs ) noexcept;
}}
{{dcl end}}

Compares two paths lexicographically.

@1@ Checks whether {{c|lhs}} and {{c|rhs}} are equal. Equivalent to {{c|!(lhs &lt; rhs) &amp;&amp; !(rhs &lt; lhs)}}.

@2@ Checks whether {{c|lhs}} and {{c|rhs}} are not equal. Equivalent to {{c|!(lhs {{==}} rhs)}}.

@3@ Checks whether {{c|lhs}} is less than {{c|rhs}}. Equivalent to {{c|lhs.compare(rhs) &lt; 0}}.

@4@ Checks whether {{c|lhs}} is less than or equal to {{c|rhs}}. Equivalent to {{c|!(rhs &lt; lhs)}}.

@5@ Checks whether {{c|lhs}} is greater than {{c|rhs}}. Equivalent to {{c|rhs &lt; lhs}}.

@6@ Checks whether {{c|lhs}} is greater than or equal to {{c|rhs}}. Equivalent to {{c|!(lhs &lt; rhs)}}.

@7@ Obtains the three-way comparison result of {{c|lhs}} and {{c|rhs}}. Equivalent to {{c|1=lhs.compare(rhs) &lt;=&gt; 0}}.

{{cpp/hidden friend|std::filesystem::path|plural=yes}} This prevents undesirable conversions in the presence of a {{c|using namespace std::filesystem;}} ''using-directive''.

{{rrev|since=c++20|
{{cpp/note synthesized compare}}
}}

===Parameters===
{{par begin}}
{{par|lhs, rhs|the paths to compare}}
{{par end}}

===Return value===
@1-6@ {{c|true}} if the corresponding comparison yields, {{c|false}} otherwise.
@7@ {{c|std::strong_ordering::less}} if {{c|lhs}} is less than {{c|rhs}}, otherwise {{c|std::strong_ordering::greater}} if {{c|rhs}} is less than {{c|lhs}}, otherwise {{c|std::strong_ordering::equal}}.

===Notes===
Path equality and equivalence have different semantics.

In the case of equality, as determined by {{tt|operator{{==}}}}, only lexical representations are compared. Therefore, {{c|1=path("a") == path("b")}} is never {{c|true}}.

In the case of equivalence, as determined by {{lc|std::filesystem::equivalent()}}, it is checked whether two paths ''resolve'' to the same file system object. Thus {{c|equivalent("a", "b")}} will return {{c|true}} if the paths resolve to the same file.

===Example===
{{example}}

===Defect reports===
{{dr list begin}}
{{dr list item|dr=3065|wg=lwg|std=C++17|before=allowed comparison of everything convertible to {{tt|path}} in the presence of a ''using-directive''|after=made hidden friend}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/filesystem/path/dsc compare}}
{{dsc inc|cpp/filesystem/dsc equivalent}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
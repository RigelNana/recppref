{{cpp/filesystem/path/title|append|operator/{{=}}}}
{{cpp/filesystem/path/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|1=
path&amp; operator/=( const path&amp; p );
}}
{{dcl|num=2|since=c++17|1=
template&lt; class Source &gt;
path&amp; operator/=( const Source&amp; source );
}}
{{dcl|num=3|since=c++17|1=
template&lt; class Source &gt;
path&amp; append( const Source&amp; source );
}}
{{dcl|num=4|since=c++17|1=
template&lt; class InputIt &gt;
path&amp; append( InputIt first, InputIt last );
}}
{{dcl end}}

@1@ If {{c|p.is_absolute() {{!!}} (p.has_root_name() &amp;&amp; p.root_name() !{{=}} root_name())}}, then replaces the current path with {{c|p}} as if by {{c|operator{{=}}(p)}} and finishes.
@@* Otherwise, if {{c|p.has_root_directory()}}, then removes any root directory and the entire relative path from the generic format pathname of {{c|*this}}.
@@* Otherwise, if {{c|has_filename() {{!!}} (!has_root_directory() &amp;&amp; is_absolute())}}, then appends {{tt|path::preferred_separator}} to the generic format of {{c|*this}}.
@@* Either way, then appends the native format pathname of {{c|p}}, omitting any {{spar|root-name}} from its generic format, to the native format of {{c|*this}}.

{{source|1=
// Where "//host" is a root-name
path("//host")  / "foo" // the result is      "//host/foo" (appends with separator)
path("//host/") / "foo" // the result is also "//host/foo" (appends without separator)

// On POSIX,
path("foo") / ""      // the result is "foo/" (appends)
path("foo") / "/bar"; // the result is "/bar" (replaces)

// On Windows,
path("foo") / "C:/bar";  // the result is "C:/bar" (replaces)
path("foo") / "C:";      // the result is "C:"     (replaces)
path("C:") / "";         // the result is "C:"     (appends, without separator)
path("C:foo") / "/bar";  // yields "C:/bar"        (removes relative path, then appends)
path("C:foo") / "C:bar"; // yields "C:foo/bar"     (appends, omitting p's root-name)
}}

@2,3@ Same as {{v|1}}, but accepts any {{lc|std::basic_string}}, {{lc|std::basic_string_view}}, null-terminated multicharacter string, or an input iterator pointing to a null-terminated multicharacter sequence. Equivalent to {{c|1=return operator/=(path(source));}}.
@4@ Same as {{v|1}}, but accepts any iterator pair that designates a multicharacter string. Equivalent to {{c|1=return operator/=(path(first, last));}}.

{{cpp/filesystem/path/param source constraints|2|3}}

===Parameters===
{{par begin}}
{{par|p|pathname to append}}
{{par|source|{{lc|std::basic_string}}, {{lc|std::basic_string_view}}, null-terminated multicharacter string, or an input iterator pointing to a null-terminated multicharacter sequence, which represents a path name (either in portable or in native format)}}
{{par|first, last|pair of {{named req|InputIterator}}s that specify a multicharacter sequence that represents a path name}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par req|The value type of {{tt|InputIt}} must be one of the encoded character types ({{c|char}}, {{c|wchar_t}}, {{c|char16_t}} and {{c|char32_t}}).}}
{{par end}}

===Return value===
{{c|*this}}

===Exceptions===
May throw {{c|std::bad_alloc}} if memory allocation fails. 

===Notes===
These functions effectively yield an approximation of the meaning of the argument path {{c|p}} in an environment where {{c|*this}} is the starting directory. 

===Example===
{{example
|The output is produced on Windows.
|code=
#include &lt;filesystem&gt;
#include &lt;iostream&gt;
namespace fs = std::filesystem;

int main()
{
    fs::path p1 = "C:";
    p1 /= "Users"; // does not insert a separator
    std::cout &lt;&lt; "\"C:\" / \"Users\" == " &lt;&lt; p1 &lt;&lt; '\n';
    p1 /= "batman"; // inserts fs::path::preferred_separator, '\' on Windows
    std::cout &lt;&lt; "\"C:\" / \"Users\" / \"batman\" == " &lt;&lt; p1 &lt;&lt; '\n';
}
|p=true
|output=
"C:" / "Users" == "C:Users"
"C:" / "Users" / "batman" == "C:Users\\batman"
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3244|std=C++17|before=constraint that {{tt|Source}} cannot be {{tt|path}} was missing|after=added}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/filesystem/path/dsc concat}}
{{dsc inc|cpp/filesystem/path/dsc operator/}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
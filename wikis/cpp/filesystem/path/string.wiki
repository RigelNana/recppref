{{cpp/filesystem/path/title|string|wstring|u8string|u16string|u32string}}
{{cpp/filesystem/path/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|1=
template&lt; class CharT, class Traits = std::char_traits&lt;CharT&gt;,
          class Alloc = std::allocator&lt;CharT&gt; &gt;
std::basic_string&lt;CharT,Traits,Alloc&gt;
    string( const Alloc&amp; a = Alloc() ) const;
}}
{{dcl rev begin|num=2|since=c++17}}
{{dcl|
std::string string() const;
}}
{{dcl|
std::wstring wstring() const;
}}
{{dcl|
std::u16string u16string() const;
}}
{{dcl|
std::u32string u32string() const;
}}
{{dcl rev end}}
{{dcl rev begin|num=3}}
{{dcl|since=c++17|until=c++20|
std::string u8string() const;
}}
{{dcl|since=c++20|
std::u8string u8string() const;
}}
{{dcl rev end}}
{{dcl end}}

Returns the internal pathname in native pathname format, converted to specific string type. Conversion, if any, is performed as follows:
{{cpp/filesystem/path/encoding_rules}}
@1@ All memory allocations are performed by {{c|a}}.
@3@ The result encoding in the case of {{c|u8string()}} is always UTF-8.

===Parameters===
(none)

===Return value===
The internal pathname in native pathname format, converted to specified string type.

{{cpp/impldef exception}}

===Example===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cstdio&gt;
#include &lt;filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;
 
int main()
{
    const char* const localeName = "ja_JP.utf-8";
    std::setlocale(LC_ALL, localeName);
    std::locale::global(std::locale(localeName));
 
    const std::filesystem::path p(u8"要らない.txt");
    std::ofstream(p) &lt;&lt; "File contents";
 
    // native string representation can be used with OS APIs
    if (std::FILE* const f = std::fopen(p.string().c_str(), "r"))
    {
        for (int ch; (ch = std::fgetc(f)) != EOF;)
            std::putchar(ch);
 
        std::fclose(f);
    }
 
    // multibyte and wide representation can be used for output
    std::cout &lt;&lt; "\nFile name in narrow multibyte encoding: " &lt;&lt; p.string() &lt;&lt; '\n';

    // wstring() will throw in stdlibc++ (as per gcc-12.1.0), see:
    // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95048
    // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102839
    // works with more recent gcc-12.2.1 (2023/02/01) and clang-10+
    std::wcout &lt;&lt; "File name in wide encoding: " &lt;&lt; p.wstring() &lt;&lt; '\n';
 
    std::filesystem::remove(p);
}
|p=true
|output=
File contents
File name in narrow multibyte encoding: 要らない.txt
File name in wide encoding: 要らない.txt
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/filesystem/path/dsc generic string}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
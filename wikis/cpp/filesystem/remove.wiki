{{cpp/filesystem/title|remove|remove_all}}
{{cpp/filesystem/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|since=c++17|num=1|1=
bool remove( const std::filesystem::path&amp; p );
}}
{{dcl|since=c++17|num=2|1=
bool remove( const std::filesystem::path&amp; p, std::error_code&amp; ec ) noexcept;
}}
{{dcl|since=c++17|num=3|
std::uintmax_t remove_all( const std::filesystem::path&amp; p );
}}
{{dcl|since=c++17|num=4|1=
std::uintmax_t remove_all( const std::filesystem::path&amp; p, std::error_code&amp; ec );
}}
{{dcl end}}

@1,2@ The file or empty directory identified by the path {{c|p}} is deleted as if by the POSIX [https://pubs.opengroup.org/onlinepubs/9699919799/functions/remove.html {{tt|remove}}]. Symlinks are not followed (symlink is removed, not its target).
@3,4@ Deletes the contents of {{c|p}} (if it is a directory) and the contents of all its subdirectories, recursively, then deletes {{c|p}} itself as if by repeatedly applying the POSIX [https://pubs.opengroup.org/onlinepubs/9699919799/functions/remove.html {{tt|remove}}]. Symlinks are not followed (symlink is removed, not its target).

===Parameters===
{{par begin}}
{{par|p|path to delete}}
{{par|ec|out-parameter for error reporting in the non-throwing overload.}}
{{par end}}

===Return value===
@1,2@ {{c|true}} if the file was deleted, {{c|false}} if it did not exist. The overload that takes {{tt|error_code&amp;}} argument returns {{c|false}} on errors.
@3,4@ Returns the number of files and directories that were deleted (which may be zero if {{c|p}} did not exist to begin with). The overload that takes {{tt|error_code&amp;}} argument returns {{c|static_cast&lt;std::uintmax_t&gt;(-1)}} on error.

===Exceptions===
{{cpp/filesystem/error_handling|p|throw=1,3/2,4}}

===Notes===
On POSIX systems, this function typically calls [https://pubs.opengroup.org/onlinepubs/9699919799/functions/unlink.html {{tt|unlink}}] and [https://pubs.opengroup.org/onlinepubs/9699919799/functions/rmdir.html {{tt|rmdir}}] as needed, on Windows [https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-deletefilew {{tt|DeleteFileW}}] and [https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-removedirectoryw {{tt|RemoveDirectoryW}}].

If {{c|p}} did not exist, this function returns {{c/core|false}} and does not report an error.

===Example===
{{example
|code=
#include &lt;cstdint&gt;
#include &lt;filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;

int main()
{
    namespace fs = std::filesystem;
    std::cout &lt;&lt; std::boolalpha;

    fs::path tmp{std::filesystem::temp_directory_path()};

    const auto O_O{"O_O"};
    std::ofstream{tmp / O_O} &lt;&lt; O_O; // creates file containing O_O
    std::cout &lt;&lt; "remove(): " &lt;&lt; fs::remove(tmp / O_O) &lt;&lt; '\n'; // success
    std::cout &lt;&lt; "remove(): " &lt;&lt; fs::remove(tmp / O_O) &lt;&lt; '\n'; // fail

    std::filesystem::create_directories(tmp / "abcdef/example");
    const std::uintmax_t n{fs::remove_all(tmp / "abcdef")};
    std::cout &lt;&lt; "remove_all(): " &lt;&lt; n &lt;&lt; " files or directories\n";
}
|p=true
|output=
remove(): true
remove(): false
remove_all(): 2 files or directories
}}

===Defect reports===
{{dr list begin}}
{{dr list item|dr=3014|wg=lwg|std=C++17|before={{tt|error_code}} overload of {{tt|remove_all}} marked noexcept but can allocate memory|after=noexcept removed}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/c/dsc remove}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
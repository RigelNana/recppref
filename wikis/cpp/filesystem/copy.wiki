{{cpp/filesystem/title|copy}}
{{cpp/filesystem/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|num=1|since=c++17|1=
void copy( const std::filesystem::path&amp; from,
           const std::filesystem::path&amp; to );
}}
{{dcl|num=2|since=c++17|1=
void copy( const std::filesystem::path&amp; from,
           const std::filesystem::path&amp; to,
           std::error_code&amp; ec );
}}
{{dcl|num=3|since=c++17|1=
void copy( const std::filesystem::path&amp; from,
           const std::filesystem::path&amp; to,
           std::filesystem::copy_options options );
}}
{{dcl|num=4|since=c++17|1=
void copy( const std::filesystem::path&amp; from,
           const std::filesystem::path&amp; to,
           std::filesystem::copy_options options,
           std::error_code&amp; ec );
}}
{{dcl end}}

Copies files and directories, with a variety of options.

@1,2@ The default, equivalent to {{v|3,4}} with {{tt|copy_options::none}} used as {{c|options}}.
@3,4@ Copies the file or directory {{c|from}} to file or directory {{c|to}}, using the copy options indicated by {{c|options}}. The behavior is undefined if there is more than one option in any of the {{rlp|copy_options}} option group present in {{c|options}} (even in the {{tt|copy_file}} group).

The behavior is as follows:
* First, before doing anything else, obtains type and permissions of {{c|from}} by no more than a single call to 
:* {{lc|std::filesystem::symlink_status}}, if {{tt|copy_options::skip_symlinks}}, {{tt|copy_options::copy_symlinks}}, or {{tt|copy_options::create_symlinks}} is present in {{c|options}};
:* {{lc|std::filesystem::status}} otherwise.
* If necessary, obtains the status of {{c|to}}, by no more than a single call to
:* {{lc|std::filesystem::symlink_status}}, if {{tt|copy_options::skip_symlinks}} or {{tt|copy_options::create_symlinks}} is present in {{c|options}};
:* {{lc|std::filesystem::status}} otherwise (including the case where {{tt|copy_options::copy_symlinks}} is present in {{c|options}}).
* If either {{c|from}} or {{c|to}} has an implementation-defined [[cpp/filesystem/file_type|file type]], the effects of this function are implementation-defined.
* If {{c|from}} does not exist, reports an error.
* If {{c|from}} and {{c|to}} are the same file as determined by {{lc|std::filesystem::equivalent}}, reports an error.
* If either {{c|from}} or {{c|to}} is not a regular file, a directory, or a symlink, as determined by {{lc|std::filesystem::is_other}}, reports an error.
* If {{c|from}} is a directory, but {{c|to}} is a regular file, reports an error.
* If {{c|from}} is a symbolic link, then
:* If {{tt|copy_options::skip_symlink}} is present in {{c|options}}, does nothing.
:* Otherwise, if {{c|to}} does not exist and {{tt|copy_options::copy_symlinks}} is present in {{c|options}}, then behaves as if {{c|copy_symlink(from, to)}}.
:* Otherwise, reports an error.
* Otherwise, if {{c|from}} is a regular file, then
:* If {{tt|copy_options::directories_only}} is present in {{c|options}}, does nothing.
:* Otherwise, if {{tt|copy_options::create_symlinks}} is present in {{c|options}}, creates a symlink to {{c|to}}. Note: {{c|from}} must be an absolute path unless {{c|to}} is in the current directory.
:* Otherwise, if {{tt|copy_options::create_hard_links}} is present in {{c|options}}, creates a hard link to {{c|to}}.
:* Otherwise, if {{c|to}} is a directory, then behaves as if {{c|copy_file(from, to/from.filename(), options)}} (creates a copy of {{c|from}} as a file in the directory {{c|to}}).
:* Otherwise, behaves as if {{c|copy_file(from, to, options)}} (copies the file).
* Otherwise, if {{c|from}} is a directory and {{tt|copy_options::create_symlinks}} is set in {{c|options}}, reports an error with an error code equal to {{c|std::make_error_code(std::errc::is_a_directory)}}.
* Otherwise, if {{c|from}} is a directory and either {{c|options}} has {{tt|copy_options::recursive}} or is {{tt|copy_options::none}},
:* If {{c|to}} does not exist, first executes {{c|create_directory(to, from)}} (creates the new directory with a copy of the old directory's attributes).
:* Then, whether {{c|to}} already existed or was just created, iterates over the files contained in {{c|from}} as if by {{c|for (const std::filesystem::directory_entry&amp; x : std::filesystem::directory_iterator(from))}} and for each directory entry, recursively calls {{c|copy(x.path(), to/x.path().filename(), options {{!}} in-recursive-copy)}}, where ''in-recursive-copy'' is a special bit that has no other effect when set in {{c|options}}. (The sole purpose of setting this bit is to prevent recursive copying subdirectories if {{c|options}} is {{tt|copy_options::none}}.)
* Otherwise does nothing.

===Parameters===
{{par begin}}
{{par|from|path to the source file, directory, or symlink}}
{{par|to|path to the target file, directory, or symlink}}
{{par|ec|out-parameter for error reporting in the non-throwing overload}}
{{par end}}

===Return value===
(none)

===Exceptions===
{{cpp/filesystem/error_handling|from|to|throw=1,3/2,4}}

===Notes===
The default behavior when copying directories is the non-recursive copy: the files are copied, but not the subdirectories:
{{source|1=
// Given
// /dir1 contains /dir1/file1, /dir1/file2, /dir1/dir2
// and /dir1/dir2 contains /dir1/dir2/file3
// After
std::filesystem::copy("/dir1", "/dir3");
// /dir3 is created (with the attributes of /dir1)
// /dir1/file1 is copied to /dir3/file1
// /dir1/file2 is copied to /dir3/file2
}}

While with {{tt|copy_options::recursive}}, the subdirectories are also copied, with their content, recursively.
{{source|1=
// ...but after
std::filesystem::copy("/dir1", "/dir3", std::filesystem::copy_options::recursive);
// /dir3 is created (with the attributes of /dir1)
// /dir1/file1 is copied to /dir3/file1
// /dir1/file2 is copied to /dir3/file2
// /dir3/dir2 is created (with the attributes of /dir1/dir2)
// /dir1/dir2/file3 is copied to /dir3/dir2/file3
}}

===Example===
{{cpp/filesystem/copy_example}}

===Defect reports===
{{dr list begin}}
{{dr list item|dr=3013|wg=lwg|std=C++17|before={{tt|error_code}} overload marked noexcept but can allocate memory|after=noexcept removed}}
{{dr list item|dr=2682|wg=lwg|std=C++17|before=attempting to create a symlink for a directory succeeds but does nothing|after=reports an error}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc copy_options}}
{{dsc inc|cpp/filesystem/dsc copy_symlink}}
{{dsc inc|cpp/filesystem/dsc copy_file}}
{{dsc end}}

{{langlinks|es|ja|zh}}
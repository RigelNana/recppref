{{cpp/filesystem/title|directory_iterator}}
{{cpp/filesystem/directory_iterator/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|since=c++17|1=
class directory_iterator;
}}
{{dcl end}}

{{tt|directory_iterator}} is a {{named req|InputIterator}} that iterates over the {{ltt|cpp/filesystem/directory_entry|directory_entry}} elements of a directory (but does not visit the subdirectories). The iteration order is unspecified, except that each directory entry is visited only once. The special pathnames {{spar|dot}} and {{spar|dot-dot}} are skipped.

If the {{tt|directory_iterator}} reports an error or is advanced past the last directory entry, it becomes equal to the default-constructed iterator, also known as the end iterator. Two end iterators are always equal, dereferencing or incrementing the end iterator is undefined behavior.

If a file or a directory is deleted or added to the directory tree after the directory iterator has been created, it is unspecified whether the change would be observed through the iterator.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|value_type}}|{{lc|std::filesystem::directory_entry}}}}
{{dsc|{{tt|difference_type}}|{{lc|std::ptrdiff_t}}}}
{{dsc|{{tt|pointer}}|{{c/core|const std::filesystem::directory_entry*}}}}
{{dsc|{{tt|reference}}|{{c/core|const std::filesystem::directory_entry&amp;}}}}
{{dsc|{{tt|iterator_category}}|{{lc|std::input_iterator_tag}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/filesystem/directory_iterator/dsc constructor}}
{{dsc inc|cpp/filesystem/directory_iterator/dsc destructor}}
{{dsc inc|cpp/filesystem/directory_iterator/dsc operator{{=}}}}
{{dsc inc|cpp/filesystem/directory_iterator/dsc operator*}}
{{dsc inc|cpp/filesystem/directory_iterator/dsc increment}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/filesystem/directory_iterator/dsc begin}}
{{dsc end}}

Additionally, {{rev inl|until=c++20|{{tt|1=operator==}} and {{tt|1=operator!=}} are}}{{rev inl|since=c++20|{{tt|1=operator==}} is}} provided as required by {{named req|InputIterator}}.

It is unspecified {{rev inl|since=c++20|whether {{tt|1=operator!=}} is provided because it can be synthesized from {{tt|1=operator==}}, and}} whether an equality operator is a member or non-member.

===Helper specializations===
{{dcl begin}}
{{dcl|since=c++20|1=
template&lt;&gt;
constexpr bool 
    ranges::enable_borrowed_range&lt;std::filesystem::directory_iterator&gt; = true;
}}
{{dcl|since=c++20|1=
template&lt;&gt;
constexpr bool 
    ranges::enable_view&lt;std::filesystem::directory_iterator&gt; = true;
}}
{{dcl end}}

These specializations for {{tt|directory_iterator}} make it a {{lconcept|borrowed_range}} and a {{lconcept|view}}.

===Notes===
{{cpp/filesystem/directory_caching_note}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;

int main()
{
    const std::filesystem::path sandbox{"sandbox"};
    std::filesystem::create_directories(sandbox/"dir1"/"dir2");
    std::ofstream{sandbox/"file1.txt"};
    std::ofstream{sandbox/"file2.txt"};
 
    std::cout &lt;&lt; "directory_iterator:\n";
    // directory_iterator can be iterated using a range-for loop
    for (auto const&amp; dir_entry : std::filesystem::directory_iterator{sandbox}) 
        std::cout &lt;&lt; dir_entry.path() &lt;&lt; '\n';

    std::cout &lt;&lt; "\ndirectory_iterator as a range:\n";
    // directory_iterator behaves as a range in other ways, too
    std::ranges::for_each(
        std::filesystem::directory_iterator{sandbox},
        [](const auto&amp; dir_entry) { std::cout &lt;&lt; dir_entry &lt;&lt; '\n'; });

    std::cout &lt;&lt; "\nrecursive_directory_iterator:\n";
    for (auto const&amp; dir_entry : std::filesystem::recursive_directory_iterator{sandbox}) 
        std::cout &lt;&lt; dir_entry &lt;&lt; '\n';
 
    // delete the sandbox dir and all contents within it, including subdirs
    std::filesystem::remove_all(sandbox);
}
|p=true
|output=
directory_iterator:
"sandbox/file2.txt"
"sandbox/file1.txt"
"sandbox/dir1"

directory_iterator as a range:
"sandbox/file2.txt"
"sandbox/file1.txt"
"sandbox/dir1"

recursive_directory_iterator:
"sandbox/file2.txt"
"sandbox/file1.txt"
"sandbox/dir1"
"sandbox/dir1/dir2"
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3480|std=C++20|before={{tt|directory_iterator}} was neither a {{lconcept|borrowed_range}} nor a {{lconcept|view}}|after=it is both}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc recursive_directory_iterator}}
{{dsc inc|cpp/filesystem/dsc directory_options}}
{{dsc inc|cpp/filesystem/dsc directory_entry}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
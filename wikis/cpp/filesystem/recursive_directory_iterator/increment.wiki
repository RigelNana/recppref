{{cpp/filesystem/recursive_directory_iterator/title|operator++|increment}}
{{cpp/filesystem/recursive_directory_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|1=
recursive_directory_iterator&amp; operator++();
}}
{{dcl|num=2|since=c++17|1=
recursive_directory_iterator&amp; increment( std::error_code&amp; ec );
}}
{{dcl end}}

Advances the iterator to the next entry. Invalidates all copies of the previous value of {{c|*this}}.

If there are no more entries left in the currently iterated directory, the iteration is resumed over the parent directory. The process is repeated if the parent directory has no sibling entries that can to be iterated on. If the parent of the directory hierarchy that has been recursively iterated on is reached (there are no candidate entries at {{c|1=depth() == 0)}}, {{c|*this}} is set to an end iterator.

Otherwise, if {{c|*this}} refers to a directory, it is iterated into if the following conditions are met:

* {{lc|disable_recursion_pending()}} has not been called before this increment, i.e. {{c|1=recursion_pending() == true}}.
* The directory is not a symlink or following symlinks is enabled, i.e., at least one of the following is true:
**{{c|1=!is_symlink((*this)-&gt;symlink_status())}}.
**{{c|1=(options() &amp; directory_options::follow_directory_symlink) != directory_options::none)}}

===Parameters===
{{par begin}}
{{par|ec|error code to store the error status to}}
{{par end}}

===Return value===
{{c|*this}}

===Exceptions===
{{cpp/filesystem/error handling|throw=1/2}}

===Example===
{{example}}

===Defect reports===
{{dr list begin}}
{{dr list item|dr=3013|wg=lwg|std=C++17|before={{tt|error_code}} overload marked noexcept but can allocate memory|after=noexcept removed}}
{{dr list end}}

{{langlinks|de|es|ja|ru|zh}}
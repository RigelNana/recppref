{{cpp/filesystem/title|exists}}
{{cpp/filesystem/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|num=1|since=c++17|1=
bool exists( std::filesystem::file_status s ) noexcept;
}}
{{dcl|num=2|since=c++17|1=
bool exists( const std::filesystem::path&amp; p );
}}
{{dcl|num=3|since=c++17|1=
bool exists( const std::filesystem::path&amp; p, std::error_code&amp; ec ) noexcept;
}}
{{dcl end}}

Checks if the given file status or path corresponds to an existing file or directory.

@1@ Equivalent to {{c|1=status_known(s) &amp;&amp; s.type() != file_type::not_found}}.
@2,3@ Let {{c|s}} be a {{c|std::filesystem::file_status}} determined as if by {{c|status(p)}} or {{c|status(p, ec)}} (symlinks are followed), respectively. Returns {{c|exists(s)}}. The non-throwing overload calls {{c|ec.clear()}} if {{c|status_known(s)}}.

===Parameters===
{{par begin}}
{{par|s|file status to check}}
{{par|p|path to examine}}
{{par|ec|out-parameter for error reporting in the non-throwing overload}}
{{par end}}

===Return value===
{{c|true}} if the given path or file status corresponds to an existing file or directory, {{c|false}} otherwise.

===Exceptions===
{{cpp/filesystem/error_handling|p|throw=2/3}}

No filesystem exception is thrown if object does not exist (use return value).

===Notes===
The information provided by this function is usually also provided as a byproduct of directory iteration. During directory iteration, calling {{c|exists(*iterator)}} is less efficient than {{c|exists(iterator-&gt;status())}}.

===Example===
{{example
|code=
#include &lt;cstdint&gt;
#include &lt;filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
namespace fs = std::filesystem;

void demo_exists(const fs::path&amp; p, fs::file_status s = fs::file_status{})
{
    std::cout &lt;&lt; p;
    if (fs::status_known(s) ? fs::exists(s) : fs::exists(p))
        std::cout &lt;&lt; " exists\n";
    else
        std::cout &lt;&lt; " does not exist\n";
}

int main()
{
    const fs::path sandbox{"sandbox"};
    fs::create_directory(sandbox);
    std::ofstream{sandbox/"file"}; // create regular file
    fs::create_symlink("non-existing", sandbox/"symlink");

    demo_exists(sandbox);

    for (const auto&amp; entry : fs::directory_iterator(sandbox))
        demo_exists(entry, entry.status()); // use cached status from directory entry

    fs::remove_all(sandbox);
}
|output=
"sandbox" exists
"sandbox/symlink" does not exist
"sandbox/file" exists
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc status}}
{{dsc inc|cpp/filesystem/dsc file_status}}
{{dsc inc|cpp/filesystem/directory_entry/dsc exists}}
{{dsc end}}

{{langlinks|es|ja|zh}}
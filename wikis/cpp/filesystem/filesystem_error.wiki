{{cpp/filesystem/title|filesystem_error}}
{{cpp/filesystem/filesystem_error/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|since=c++17|1=
class filesystem_error;
}}
{{dcl end}}

The class {{tt|std::filesystem::filesystem_error}} defines an exception object that is thrown on failure by the throwing overloads of the functions in the filesystem library.

{{inheritance diagram/std-filesystem-filesystem_error}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/filesystem/filesystem_error/dsc constructor}}
{{dsc inc|cpp/filesystem/filesystem_error/dsc operator{{=}}}}
{{dsc inc|cpp/filesystem/filesystem_error/dsc path}}
{{dsc inc|cpp/filesystem/filesystem_error/dsc what}}
{{dsc end}}

{{cpp/error/system_error/inherit}}
{{cpp/error/runtime_error/inherit}}
{{cpp/error/exception/inherit}}

===Notes===
In order to ensure that copy functions of {{tt|filesystem_error}} are noexcept, typical implementations store an object holding the return value of {{lc|what()}} and two {{lc|std::filesystem::path}} objects referenced by {{lc|path1()}} and {{lc|path2()}} respectively in a separately-allocated reference-counted storage.

Currently the [https://github.com/microsoft/STL/blob/master/stl/inc/filesystem#L1749 MS STL implementation] is non-conforming: objects mentioned above are stored directly in the {{tt|filesystem}} object, which makes the copy functions not noexcept.

===Example===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;iostream&gt;
#include &lt;system_error&gt;

int main()
{
    const std::filesystem::path from{"/none1/a"}, to{"/none2/b"};

    try
    {
        std::filesystem::copy_file(from, to); // throws: files do not exist
    }
    catch (std::filesystem::filesystem_error const&amp; ex)
    {
        std::cout &lt;&lt; "what():  " &lt;&lt; ex.what() &lt;&lt; '\n'
                  &lt;&lt; "path1(): " &lt;&lt; ex.path1() &lt;&lt; '\n'
                  &lt;&lt; "path2(): " &lt;&lt; ex.path2() &lt;&lt; '\n'
                  &lt;&lt; "code().value():    " &lt;&lt; ex.code().value() &lt;&lt; '\n'
                  &lt;&lt; "code().message():  " &lt;&lt; ex.code().message() &lt;&lt; '\n'
                  &lt;&lt; "code().category(): " &lt;&lt; ex.code().category().name() &lt;&lt; '\n';
    }

    // All functions have non-throwing equivalents
    std::error_code ec;
    std::filesystem::copy_file(from, to, ec); // does not throw
    std::cout &lt;&lt; "\nNon-throwing form sets error_code: " &lt;&lt; ec.message() &lt;&lt; '\n';
}
|p=true
|output=
what():  filesystem error: cannot copy file: No such file or directory [/none1/a] [/none2/b]
path1(): "/none1/a"
path2(): "/none2/b"
code().value():    2
code().message():  No such file or directory
code().category(): generic

Non-throwing form sets error_code: No such file or directory
}}

{{langlinks|es|ja|ru|zh}}
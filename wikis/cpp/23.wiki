{{title|C++23}}
{{cpp/version/navbar}}

The current revision of the C++ standard.

{{todo|Check that all significant features are mentioned (using the Compiler Support tables below). Add more links and maybe regroup some lines.}}

==New language features==
* New [[cpp/feature test#Language features|language feature testing macros]]
* {{ls|cpp/language/function#Explicit object parameter}}, {{lsd|cpp/language/member functions#Explicit object member functions}}, a.k.a. "deducing {{c/core|this}}" ({{stddoc|P0847R7}})
* [[cpp/language/operators#Array subscript operator|Multidimensional subscript operator]] (e.g. {{c|1=v[1, 3, 7] = 42;}}) ({{stddoc|P2128R6}})
* {{c|static operator[]}} ({{stddoc|P2589R1}}), {{c|static operator()}}, and static lambdas ({{stddoc|P1169R4}})
* {{c|auto(x)}} and {{c|auto{x}&lt;!----&gt;}}: [[cpp/language/explicit cast#Syntax|decay-copy]] in the language ({{stddoc|P0849R8}})
* Assumptions via new attribute {{attr|assume|3=(''expression'')}} ({{stddoc|P1774R8}})
* Attributes on [[cpp/language/lambda#Syntax|lambda-expressions]] ({{stddoc|P2173R1}})
* Optional [[cpp/types/floating-point|extended floating-point types]]: {{c/core|std::float{16{{!}}32{{!}}64{{!}}128}_t}}, and {{c/core|std::bfloat16_t}} ({{stddoc|P1467R9}})
* New preprocessor directives: [[cpp/preprocessor/conditional|{{tt|#elifdef}}, {{tt|#elifndef}}]] ({{stddoc|P2334R1}}), and {{ltt|cpp/preprocessor/error|#warning}} ({{stddoc|P2437R1}})
* [[cpp/language/integer literal#The type of the literal|Literal suffix '{{tt|Z}}'/'{{tt|z}}']] for ({{c/core|signed}}) {{c/core|std::size_t}} literals ({{stddoc|P0330R8}}), e.g. {{c|1=auto ouz = 0uz;}}
* White-spaces trimming before line splicing. ({{stddoc|P2223R2}})
* Simpler implicit move ({{stddoc|P2266R3}})
* Extending the lifetime of temporaries in range-based for loop initializer ({{stddoc|P2718R0}})
* CTAD from inherited constructors ({{stddoc|P2582R1}})
* Labels at the end of compound statements ({{stddoc|P2324R2}}), e.g.&lt;br&gt;
: {{c multi|
void f(int&amp; x)|
{|
    if (x)|
        goto END;|
    x {{=}} 42;|
END:|
}&lt;!----&gt;}}
* Alias declarations ({{c/core|using}}) in init-statements ({{stddoc|P2360R0}}), e.g.&lt;br&gt;
: {{c multi
|for (using T {{=}} int; T e : v)
|    /* ... */
}}
* Make {{ttb|()}} more optional for lambda expressions ({{stddoc|P1102R2}})
* Narrowing contextual conversions to {{c/core|bool}} in {{c/core|static_assert}} and {{c/core|if constexpr}} ({{stddoc|P1401R5}})
* Make declaration order layout (of non-static class data members) mandated ({{stddoc|P1847R4}})
* Text encoding changes:
** [[cpp/language/charset|Character sets and encodings]] ({{stddoc|P2314R4}})
** Consistent character literal encoding ({{stddoc|P2316R2}})
** {{ls|cpp/language/escape#Named universal character escapes}}, e.g. {{c|"\N{CAT FACE}"}} for {{c|"üê±"}} ({{stddoc|P2071R2}})
** [[cpp/language/escape|Delimited escape sequences]], e.g. {{c|"\o{7777}"}}, {{c|"\x{C0DE}"}}, {{c|"\u{CAFE}"}} ({{stddoc|P2290R3}})
** [[cpp/language/translation_phases#Phase 1|Support for UTF-8 as a portable source file encoding]] ({{stddoc|P2295R6}})
* {{ltt|cpp/language/if#Consteval if|if consteval}} / {{ltt|cpp/language/if#Consteval if|if not consteval}} ({{stddoc|P1938R3}})
* {{c/core|constexpr}} changes:
** Non-literal variables, labels, and {{c/core|goto}}s in {{c/core|constexpr}} functions ({{stddoc|P2242R3}})
** Permitting {{c/core|static}} and {{c/core|thread_local}} variables in constant expressions in {{c/core|constexpr}} functions ({{stddoc|P2647R1}})
** {{c/core|constexpr}} function does not need its return type and parameter types to be literal type ({{stddoc|P2448R2}})
** {{c/core|constexpr}} function for which no invocation satisfies the requirements of a core constant expression ({{stddoc|P2448R2}})

==New library features==
* New [[cpp/feature test#Library features|library feature testing macros]]
===New modules===
* [[cpp/standard library#Importing modules|{{tt|std}} and {{tt|std.compat}}]] ({{stddoc|P2465R3}})

===New headers===
* {{header|expected}}
* {{header|flat_map}}
* {{header|flat_set}}
* {{header|generator}}
* {{header|mdspan}}
* {{header|print}}
* {{header|spanstream}}
* {{header|stacktrace}}
* {{header|stdfloat}}

C compatibility headers:
* {{header|stdatomic.h}} ({{stddoc|P0943R6}})

===Library features===
=====General Utilities=====
* {{c/core|std::expected}}: a new vocabulary type to return a function's result ({{header|expected}}) ({{stddoc|P0323R12}}, {{stddoc|P2549R1}})
* {{c/core|std::move_only_function}}: a move-only callable wrapper ({{stddoc|P0288R9}})
* {{c/core|std::bind_back}}: a call wrapper ({{stddoc|p2387r3}})
* {{c/core|std::byteswap}}: reverses the bytes ({{stddoc|P1272R4}})
* {{c/core|std::forward_like}} ({{stddoc|P2445R1}})
* {{c/core|std::invoke_r}}: invokes a {{named req|Callable}} object ({{stddoc|p2136r3}})
* {{c/core|std::to_underlying}}: a utility function to get the underlying value of {{c/core|enum}} ({{stddoc|P1682R3}})
* {{c/core|std::unreachable}}: a function to mark unreachable code ({{stddoc|p0627r6}})
* Monadic operations ({{tt|transform}}, {{tt|or_else}}, and {{tt|and_then}}) for {{c/core|std::optional}} ({{stddoc|P0798R8}}) and {{c/core|std::expected}} ({{stddoc|P2505R5}})
* {{c/core|std::tuple}} is compatible with other tuple-like objects ({{stddoc|p2165r4}})
* Adding default arguments for {{c/core|std::pair}}'s forwarding constructor ({{stddoc|p2718r0}})
* {{c/core|std::basic_common_reference}} specialization for {{c/core|std::reference_wrapper}} yielding reference types ({{stddoc|p2655r3}})

=====Coroutine Library=====
* {{c/core|std::generator}}: synchronous {{lt|cpp/language/coroutines|coroutine}} generator for ranges ({{stddoc|P2502R2}}, {{stddoc|P2787R0}})

=====Diagnostic=====
* {{ls|cpp/utility#Stacktrace}} library ({{stddoc|p0881r7}})

=====Algorithm, Iterators, and Ranges=====
* New range adaptors:
** {{c/core|views::adjacent}} and {{c/core|views::adjacent_transform}} ({{stddoc|P2321R2}})
** {{c/core|views::as_const}} ({{stddoc|P2278R4}})
** {{c/core|views::as_rvalue}} ({{stddoc|P2446R2}})
** {{c/core|views::cartesian_product}} ({{stddoc|p2374r4}})
** {{c/core|views::chunk_by}} ({{stddoc|P2443R1}})
** {{c/core|views::chunk}} ({{stddoc|P2442R1}})
** {{c/core|views::enumerate}} ({{stddoc|p2164r9}})
** {{c/core|views::join_with}} ({{stddoc|p2441r2}})
** {{c/core|views::repeat}} ({{stddoc|p2474r2}})
** {{c/core|views::slide}} ({{stddoc|P2442R1}})
** {{c/core|views::stride}} ({{stddoc|p1899r3}})
** {{c/core|views::zip}}, {{c/core|views::zip_transform}} ({{stddoc|P2321R2}})
* {{c/core|ranges::range_adaptor_closure}}: a helper for program-defined range adaptor closures ({{stddoc|p2387r3}})
* {{c/core|ranges::to}}: a range conversion function ({{stddoc|p1206r7}})
* New constrained ranges algorithm:
** {{c/core|ranges::starts_with}} and {{c/core|ranges::ends_with}} ({{stddoc|p1659r3}})
** {{c/core|ranges::contains}} and  {{c/core|ranges::contains_subrange}} ({{stddoc|p2302r4}})
** {{c/core|ranges::find_last}}, {{c/core|ranges::find_last_if}}, and {{c/core|ranges::find_last_if_not}} ({{stddoc|p1223r5}})
** {{c/core|ranges::iota}}, {{c/core|ranges::shift_left}}, and {{c/core|ranges::shift_right}}: rangified versions of non-constrained algorithms  ({{stddoc|p2440r1}})
** {{c/core|ranges::fold_left}} etc.: [[cpp/algorithm/ranges#Constrained fold operations|range fold algorithms]] ({{stddoc|p2322r6}})
* Rectifying constant iterators, sentinels, and ranges, that is, {{c/core|ranges::cbegin}} and other similar utilities returning constant iterators should be fully guaranteed even for shallow-{{c/core|const}} views (such as {{c/core|std::span}}) ({{stddoc|p2278r4}})
* Making multi-param constructors of some views explicit ({{stddoc|p2711r1}})
* Ranges iterators as inputs to non-ranges algorithms ({{stddoc|p2408r5}})
* Relaxing range adaptors to allow for move-only types ({{stddoc|p2494r2}})

=====Containers=====
* {{c/core|std::mdspan}}: a non-owning multidimensional array reference ({{stddoc|P0009R18}}, {{stddoc|P2599R2}}, {{stddoc|P2604R0}}, {{stddoc|P2613R1}}, {{stddoc|P2763R1}})
* Constructibility and assignability of containers from other compatible ranges ({{stddoc|p1206r7}})
* {{c/core|std::flat_set}}, {{c/core|std::flat_multiset}} ({{stddoc|P1222R4}}), {{c/core|std::flat_map}}, {{c/core|std::flat_multimap}} ({{stddoc|P0429R9}}): flat sets and flat maps - container adaptors wrapping underlying sorted random-access containers
* Allowing iterator pair construction in {{c/core|std::stack}} and {{c/core|std::queue}} ({{stddoc|p1425r4}})
* Heterogeneous erasure overloads for associative containers ({{stddoc|p2077r2}})
* Non-deduction context for allocators in container deduction guides ({{stddoc|p1518r2}})
* Requiring {{c/core|std::span}} and {{c/core|std::basic_string_view}} to be trivially copyable ({{stddoc|p2251r1}})

=====Compile-time support=====
* {{c/core|constexpr}} support for:
** {{c/core|std::bitset}} ({{stddoc|p2417r2}})
** {{c/core|std::unique_ptr}} ({{stddoc|p2273r3}})
** {{ltt|cpp/types/type_info/operator_cmp|2=std::type_info::operator==}} ({{stddoc|p1328r1}})
** Some {{header|cmath}} functions ({{stddoc|p0533r9}})
** Integral overloads of {{c/core|std::to_chars}} and {{c/core|std::from_chars}} ({{stddoc|p2291r3}})
* [[cpp/meta|Metaprogramming]] utilities:
** Adding move-only types support for comparison concepts ({{stddoc|p2404r3}})
** Type traits:
*** {{c/core|std::is_scoped_enum}} ({{stddoc|p1048r1}})
*** {{c/core|std::is_implicit_lifetime}} ({{stddoc|p2674r1}})
*** {{c/core|std::reference_constructs_from_temporary}}, and {{c/core|std::reference_converts_from_temporary}} ({{stddoc|p2255r2}})

=====Memory Management=====
* {{c/core|std::out_ptr}} and {{c/core|std::inout_ptr}}: smart pointer adaptors for C interoperability ({{stddoc|p1132r7}})
* {{c/core|std::allocate_at_least}} and {{c/core|std::allocator::allocate_at_least}} ({{stddoc|p0401r6}})
* {{c/core|std::start_lifetime_as}}: an explicit lifetime management function for implicit-lifetime types ({{stddoc|p2590r2}})
* Disallowing user specialization of {{c/core|std::allocator_traits}} ({{stddoc|p2652r2}})

=====String and Text Processing=====
* New member functions and changes in string types:
** {{c/core|std::basic_string::contains}} and {{c/core|std::basic_string_view::contains}} ({{stddoc|p1679r3}})
** Disabling construction from {{c|nullptr}} for {{c/core|std::basic_string}} and {{c/core|std::basic_string_view}} ({{stddoc|p2166r1}})
** Explicit range constructor for {{c/core|std::basic_string_view}} ({{stddoc|p1989r2}})
** {{c/core|std::basic_string::resize_and_overwrite}} ({{stddoc|p1072r10}})
** Rvalue reference overload of {{c/core|std::basic_string::substr}} for efficient slicing ({{stddoc|p2438r2}})
* Formatting ranges, tuples, escaped presentation of characters and strings, {{c/core|std::thread::id}}, and {{lsd|cpp/utility#Stacktrace}}s. ({{stddoc|p2286r8}}) ({{stddoc|p2585r1}}) ({{stddoc|p2693r1}})

=====I/O and print=====
* Formatted output functions {{c/core|std::print}} and {{c/core|std::println}} provided in header {{header|print}} ({{stddoc|p2093r14}})
* {{tt|spanstream}} library ({{c/core|std::span}}-based string stream) provided in header {{header|spanstream}} ({{stddoc|p0448r4}})
* Support exclusive mode in {{c/core|std::fstreams}} ({{stddoc|p2467r1}})
* Support of printing {{c|volatile T*}}: {{c|std::basic_ostream::operator&lt;&lt;(const volatile void*)}} ({{stddoc|P1147R1}})

==Obsolete features==
=====Removed features=====
* Garbage collection support and reachability-based leak detection. ({{stddoc|P2186R2}})
* Mixed wide string literals {{lsd|cpp/language/string literal#Concatenation}} support, e.g., {{c|1=const auto* no = u"q" U"p"}} is ill-formed. ({{stddoc|P2201R1}})
* Non-encodable wide character literals and multicharacter wide character literals, e.g. {{c|1=wchar_t x = 'db'}} is ill-formed. ({{stddoc|P2362R3}})

=====Deprecated features=====
* {{c/core|std::aligned_storage}} and {{c/core|std::aligned_union}} ({{stddoc|P1413R3}})
* {{c/core|std::numeric_limits::has_denorm}} ({{stddoc|P2614R2}})

=====Reverted deprecations=====
* The {{c|operator,}} (comma operator) in subscript expressions (but the semantics has been changed to support overloadable multidimensional subscript {{c|operator[]}}).
* Some C headers (the corresponding {{tt|&lt;*.h&gt;}} headers for compatibility with C) ({{stddoc|P2340R1}})

==Defect reports==
&lt;!--{{cpp/language/history/DR23}}--&gt;

==Compiler support==
Main Article: [[cpp/compiler support#C++23 features|C++23 compiler support]]
{{cpp/compiler support/23}}
{{cpp/compiler support/note}}

===External links===
{{elink begin}}
{{elink|{{enwiki|C++23}} - Wikipedia}}
&lt;!--
{{elink|[https://github.com/makelinux/examples/blob/HEAD/cpp/23.cpp Working C++23 examples]}}
--&gt;
{{elink end}}

{{langlinks|es|ko|ru|zh}}
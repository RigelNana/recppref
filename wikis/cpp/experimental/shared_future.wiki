{{cpp/experimental/title|shared_future}}
{{cpp/experimental/concurrency/shared_future/navbar}}
{{dcl begin}}
{{dcl header|experimental/shared_future}}
{{dcl|num=1|since=concurrency|
template&lt; class T &gt; class shared_future;
}}
{{dcl|num=2|since=concurrency|
template&lt; class T &gt; class shared_future&lt;T&amp;&gt;;
}}
{{dcl|num=3|since=concurrency|
template&lt;&gt;          class shared_future&lt;void&gt;;
}}
{{dcl end}}

The class template {{tt|std::experimental::shared_future}} extends {{lc|std::shared_future}} with the following operations:

* an ''unwrapping constructor'' from {{tt|future&lt;shared_future&lt;T&gt;&gt;}};
* a member function {{tt|is_ready}} to query whether the associated shared state is ready; and
* a member function {{tt|then}} to attach a continuation to the future.

There is no interoperation between {{tt|std::experimental::shared_future}} and {{lc|std::shared_future}}.

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/experimental/shared_future/dsc constructor}}
{{dsc inc|cpp/experimental/shared_future/dsc is_ready}}
{{dsc inc|cpp/experimental/shared_future/dsc then}}
{{dsc mem fun|cpp/experimental/shared_future/operator{{=}}|assigns the contents}}
{{dsc end}}

{{identical|std::shared_future|
===Member functions===
{{dsc begin}}
{{dsc mem dtor|cpp/thread/shared_future/~shared_future|destructs the future object}}

{{dsc h2|Getting the result}}
{{dsc inc|cpp/thread/future/dsc get|shared_future}}

{{dsc h2|State}}
{{dsc inc|cpp/thread/future/dsc valid|shared_future}}
{{dsc inc|cpp/thread/future/dsc wait|shared_future}}
{{dsc inc|cpp/thread/future/dsc wait_for|shared_future}}
{{dsc inc|cpp/thread/future/dsc wait_until|shared_future}}
{{dsc end}}
}}

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/dsc future}}
{{dsc end}}

{{langlinks|zh}}
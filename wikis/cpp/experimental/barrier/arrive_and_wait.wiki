{{cpp/experimental/barrier/title|arrive_and_wait}}
{{cpp/experimental/concurrency/barrier/navbar}}
{{dcl begin}}
{{dcl | since=concurrency | 1=
void arrive_and_wait();
}}
{{dcl end}}

Blocks and arrive at the barrier's synchronization point.

The behavior is undefined if the calling thread is not in the set of participating threads of this barrier.

Calls to {{tt|arrive_and_wait}} synchronizes with the start of the completion phase of the barrier. The completion of the completion phase synchronizes with the return from the call.

Calls to {{tt|arrive_and_drop}} and {{tt|arrive_and_wait}} never introduce data races with themselves or each other.

=== Notes ===
It is safe for a thread to call either {{tt|arrive_and_wait()}} or {{tt|arrive_and_drop()}} immediately on return from this call. It's not necessary to ensure that all blocked threads have exited {{tt|arrive_and_wait()}} before a thread calls it again.

The set of participating threads for a {{tt|barrier}} constructed for {{tt|num_threads}} threads is the first {{tt|num_threads}} to arrive at its synchronization point. This set does not change from cycle to cycle, except for threads removed from the set due to {{tt|arrive_and_drop()}} calls.

=== Exceptions ===
Throws nothing.

=== See also ===
{{dsc begin}}
{{dsc inc | cpp/experimental/barrier/dsc arrive_and_drop }}
{{dsc end}}

{{langlinks|zh}}
{{cpp/experimental/barrier/title|arrive_and_drop}}
{{cpp/experimental/concurrency/barrier/navbar}}
{{dcl begin}}
{{dcl | since=concurrency | 1=
void arrive_and_drop();
}}
{{dcl end}}

Arrive at the barrier's synchronization point and remove the current thread from the set of participating threads. It is unspecified whether this function blocks until the completion phase has ended.

The behavior is undefined if the calling thread is not in the set of participating threads of this barrier.

Calls to {{tt|arrive_and_drop}} synchronizes with the start of the completion phase of the barrier. If the call blocks, then the completion of the completion phase synchronizes with the return from the call.

Calls to {{tt|arrive_and_drop}} and {{tt|arrive_and_wait}} never introduce data races with themselves or each other.

=== Exceptions ===
Throws nothing.

=== Notes ===
If every participating thread calls {{tt|arrive_and_drop()}}, the barrier can only be destroyed. 

After a thread calls {{tt|arrive_and_drop()}} on a barrier, it is no longer a member of its set of participating threads and hence can no longer call either {{tt|arrive_and_drop()}} or {{tt|arrive_and_wait()}} on the same barrier.

=== See also ===
{{dsc begin}}
{{dsc inc | cpp/experimental/barrier/dsc arrive_and_wait }}
{{dsc end}}

{{langlinks|zh}}
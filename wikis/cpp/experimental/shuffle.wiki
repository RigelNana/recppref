{{cpp/experimental/title|shuffle}}
{{cpp/experimental/lib_extensions_2/navbar}}

{{ddcl|since=libfund_ts_2|header=experimental/algorithm|1=
template&lt; class RandomIt &gt;
void shuffle( RandomIt first, RandomIt last );
}}

Reorders the elements in the given range {{range|first|last}} such that each possible permutation of those elements has equal probability of appearance, using the [[cpp/experimental/lib extensions 2#per-thread engine|per-thread random number engine]] as the random number generator.

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to shuffle randomly}}
{{par req named|RandomIt|RandomAccessIterator|ValueSwappable}}
{{par end}}

===Return value===
(none)

===Complexity===
Linear in the distance between {{c|first}} and {{c|last}}.

===Example===
{{example|code=
#include &lt;experimental/algorithm&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::string sample{"ABCDEF"};

    for (int i = 0; i != 4; ++i)
    {
        std::experimental::shuffle(sample.begin(), sample.end());
        std::cout &lt;&lt; sample &lt;&lt; '\n';
    }
}
|p=true
|output=
DACBFE
CDFBAE
BDCAFE
BAFCED
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc random shuffle}}
{{dsc end}}

{{langlinks|zh}}
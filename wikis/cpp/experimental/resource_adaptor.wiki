{{title|{{small|std::experimental::pmr::}}resource_adaptor, {{small|std::pmr::experimental::}}resource_adaptor}}
{{cpp/experimental/lib extensions/pmr/navbar}}
{{dcl begin}}
{{dcl header | experimental/memory_resource}}
{{dcl | since=libfund_ts | 1=
template&lt; class Alloc &gt;
using resource_adaptor = /*resource-adaptor-imp*/&lt;
                             typename std::allocator_traits&lt;Alloc&gt;::
                             template rebind_alloc&lt;char&gt;&gt;;
}}
{{dcl | since=libfund_ts |
template&lt; class Alloc &gt;
class /*resource-adaptor-imp*/ : public memory_resource; // for exposition only
}}
{{dcl end}}

The alias template {{tt|resource_adaptor}} adapts the allocator type {{tt|Alloc}} with a {{tt|memory_resource}} interface. The allocator is rebound to a {{tt|char}} value type before it is actually adapted (using the ''{{tt|resource-adaptor-imp}}'' class template), so that adapting specializations of the same allocator template always yields the same type, regardless of the value type the allocator template is originally instantiated with.

{{rrev multi
|since1=libfund_ts|rev1=
{{tt|resource_adaptor}} is defined in namespace {{tt|std::experimental::pmr}}, and the base type {{tt|memory_resorce}} in this page is {{lc|std::experimental::pmr::memory_resource}}.
|since2=libfund_ts_3|rev2=
{{tt|resource_adaptor}} is defined in namespace {{tt|std::pmr::experimental}}, and the base type {{tt|memory_resorce}} in this page is {{lc|std::pmr::memory_resource}}.
}}

''{{tt|resource-adaptor-imp}}'' is a class template whose members are described below. The name ''{{tt|resource-adaptor-imp}}'' is for exposition purposes only and not normative.

In addition to meeting the {{named req|Allocator}} requirements, {{tt|Alloc}} must additionally satisfy the following requirements:

* {{c|std::allocator_traits&lt;Alloc&gt;::pointer}} shall be identical to {{c|Alloc::value_type*}}.
* {{c|std::allocator_traits&lt;Alloc&gt;::const_pointer}} shall be identical to {{c|Alloc::value_type const*}}.
* {{c|std::allocator_traits&lt;Alloc&gt;::void_pointer}} shall be identical to {{c|void*}}.
* {{c|std::allocator_traits&lt;Alloc&gt;::const_const_pointer}} shall be identical to {{c|void const*}}.

===Member types of ''resource-adaptor-imp''===
{{dsc begin}}
{{dsc hitem| Member type | Definition}}
{{dsc | {{tt|allocator_type}} | {{tt|Alloc}}}}
{{dsc end}}

===Member functions of ''resource-adaptor-imp''===
{{member|{{small|''resource-adaptor-imp''::}}''resource-adaptor-imp''
|
{{dcl begin}}
{{dcl| num = 1 |  since=libfund_ts |1=
/*resource-adaptor-imp*/() = default;
}}
{{dcl | num = 2 |  since=libfund_ts |1=
/*resource-adaptor-imp*/(const /*resource-adaptor-imp*/&amp; other)
    = default;
}}
{{dcl | num = 3 |  since=libfund_ts |1=
/*resource-adaptor-imp*/(/*resource-adaptor-imp*/&amp;&amp; other)
    = default;
}}
{{dcl | num = 4 |  since=libfund_ts |1=
explicit /*resource-adaptor-imp*/(const Alloc&amp; a2);
}}
{{dcl | num = 5 |  since=libfund_ts |1=
explicit /*resource-adaptor-imp*/(Alloc&amp;&amp; a2);
}}
{{dcl end}}
@1@ Default constructor. Default constructs the wrapped allocator.
@2@ Copy constructor. Copy constructs the wrapped allocator from the allocator wrapped by {{tt|other}}.
@3@ Move constructor. Move constructs the wrapped allocator from the allocator wrapped by {{tt|other}}.
@4@ Initializes the wrapped allocator with {{tt|a2}}.
@5@ Initializes the wrapped allocator with {{c|std::move(a2)}}.

====Parameters====
{{par begin}}
{{par | other | another ''{{tt|resource-adaptor-imp}}'' object to copy or move from }}
{{par | a2 | another {{tt|Alloc}} object to copy or move from }}
{{par end}}
}}

{{member|{{small|''resource-adaptor-imp''::}}get_allocator
|
{{ddcl |  since=libfund_ts |1=
allocator_type get_allocator() const; 
}}
Returns a copy of the wrapped allocator.
}}

{{member|{{small|''resource-adaptor-imp''::}}operator{{=}}
|
{{ddcl |  since=libfund_ts |1=
/*resource-adaptor-imp*/&amp; operator=(const /*resource-adaptor-imp*/&amp; other)
    = default; 
}}
Defaulted copy assignment operator. Copy assigns the wrapped allocator from that of {{tt|other}}.
}}

{{member|{{small|''resource-adaptor-imp''::}}do_allocate
|
{{ddcl |  since=libfund_ts |1=
protected:
virtual void* do_allocate(std::size_t bytes, std::size_t alignment);
}}
Allocates memory using the {{tt|allocate}} member function of the wrapped allocator.
}}

{{member|{{small|''resource-adaptor-imp''::}}do_deallocate
|
{{ddcl |  since=libfund_ts |
protected:
virtual void do_deallocate(void *p, std::size_t bytes, std::size_t alignment);
}}
Deallocates the storage pointed to by {{tt|p}} using the {{tt|deallocate}} member function of the wrapped allocator.

{{tt|p}} must have been allocated using the {{tt|allocate}} member function of an allocator that compares equal to the wrapped allocator, and must not have been subsequently deallocated.
}}

{{member|{{small|''resource-adaptor-imp''::}}do_is_equal
|
{{ddcl |  since=libfund_ts |
protected:
virtual bool do_is_equal(const memory_resource&amp; other) const noexcept;
}}
Let {{tt|p}} be {{c|dynamic_cast&lt;const /*resource-adaptor-imp*/*&gt;(&amp;other)}}. If {{tt|p}} is a null pointer value, returns {{c|false}}. Otherwise, return the result of comparing the allocators wrapped by {{c|*p}} and {{c|*this}} using {{c|1=operator==}}.
}}

{{langlinks|de|es|ja|ru|zh}}
{{title|1=operator==,!=,&lt;,&lt;=,&gt;,&gt;=&lt;small&gt;(std::experimental::observer_ptr)&lt;/small&gt;}}
{{cpp/experimental/lib extensions 2/observer ptr/navbar}}

{{dcl begin}}
{{dcl|since=libfund_ts_2|num=1|1=
template&lt; class W1, class W2 &gt;
bool operator==( const observer_ptr&lt;W1&gt;&amp; p1, const observer_ptr&lt;W2&gt;&amp; p2 );
}}
{{dcl|since=libfund_ts_2|num=2|1=
template&lt; class W1, class W2 &gt;
bool operator!=( const observer_ptr&lt;W1&gt;&amp; p1, const observer_ptr&lt;W2&gt;&amp; p2 );
}}
{{dcl|since=libfund_ts_2|num=3|1=
template&lt; class W &gt;
bool operator==( const observer_ptr&lt;W&gt;&amp; p, std::nullptr_t ) noexcept;
}}
{{dcl|since=libfund_ts_2|num=4|1=
template&lt; class W &gt;
bool operator==( std::nullptr_t, const observer_ptr&lt;W&gt;&amp; p ) noexcept;
}}
{{dcl|since=libfund_ts_2|num=5|1=
template&lt; class W &gt;
bool operator!=( const observer_ptr&lt;W&gt;&amp; p, std::nullptr_t ) noexcept;
}}
{{dcl|since=libfund_ts_2|num=6|1=
template&lt; class W &gt;
bool operator!=( std::nullptr_t, const observer_ptr&lt;W&gt;&amp; p ) noexcept;
}}
{{dcl|since=libfund_ts_2|num=7|1=
template&lt; class W1, class W2 &gt;
bool operator&lt;( const observer_ptr&lt;W1&gt;&amp; p1, const observer_ptr&lt;W2&gt;&amp; p2 );
}}
{{dcl|since=libfund_ts_2|num=8|1=
template&lt; class W1, class W2 &gt;
bool operator&gt;( const observer_ptr&lt;W1&gt;&amp; p1, const observer_ptr&lt;W2&gt;&amp; p2 );
}}
{{dcl|since=libfund_ts_2|num=9|1=
template&lt; class W1, class W2 &gt;
bool operator&lt;=( const observer_ptr&lt;W1&gt;&amp; p1, const observer_ptr&lt;W2&gt;&amp; p2 );
}}
{{dcl|since=libfund_ts_2|num=10|1=
template&lt; class W1, class W2 &gt;
bool operator&gt;=( const observer_ptr&lt;W1&gt;&amp; p1, const observer_ptr&lt;W2&gt;&amp; p2 );
}}
{{dcl end}}

Compares the pointer values of two {{tt|observer_ptr}}s, or an {{tt|observer_ptr}} and {{c|nullptr}}.
@1,2@ Equality comparison for two {{tt|observer_ptr}}s.
@3-6@ Equality comparison for an {{tt|observer_ptr}} and {{c|nullptr}}.
@7-10@ Ordered comparison for two {{tt|observer_ptr}}s.

===Parameters===
{{par begin}}
{{par|p, p1, p2|{{tt|observer_ptr}}s to compare}}
{{par end}} 

===Return value===
@1@ {{c|p1.get() {{==}} p2.get()}}
@2@ {{c|!(p1 {{==}} p2)}}
@3,4@ {{c|!p}}
@5,6@ {{c|(bool)p}}
@7@ {{c|std::less&lt;W3&gt;()(p1.get(), p2.get())}}, where {{tt|W3}} is the composite pointer type of {{tt|W1*}} and {{tt|W2*}}.
@8@ {{c|p2 &lt; p1}}
@9@ {{c|!(p2 &lt; p1)}}
@10@ {{c|!(p1 &lt; p2)}}

{{langlinks|en}}
{{cpp/experimental/fs/title|canonical}}
{{cpp/experimental/fs/navbar}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|num=1|since=fs_ts|1=
path canonical( const path&amp; p, const path&amp; base {{=}} current_path() );
}}
{{dcl|num=2|since=fs_ts|1=
path canonical( const path&amp; p, error_code&amp; ec );
}}
{{dcl|num=3|since=fs_ts|1=
path canonical( const path&amp; p, const path&amp; base, error_code&amp; ec );
}}
{{dcl end}}

Converts path {{c|p}} to a canonical absolute path, i.e. an absolute path that has no dot, dot-dot elements or symbolic links.

If {{c|p}} is not an absolute path, the function behaves as if it is first made absolute by {{c|absolute(p, base)}} or {{c|absolute(p)}} for {{v|2}}.

The path {{c|p}} must exist.

===Parameters===
{{par begin}}
{{par|p|a path which may be absolute or relative to {{c|base}}, and which must be an existing path}}
{{par|base|base path to be used in case {{c|p}} is relative}}
{{par|ec|error code to store error status to}}
{{par end}}

===Return value===
An absolute path that resolves to the same file as {{c|absolute(p, base)}} (or {{c|absolute(p)}} for {{v|2}}).

===Exceptions===
{{cpp/experimental/fs/error_handling|p|base}}

This function is modeled after the POSIX [https://pubs.opengroup.org/onlinepubs/9699919799/functions/realpath.html realpath].

===Example===
{{example
|code=
#include &lt;experimental/filesystem&gt;
#include &lt;iostream&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    fs::path p = fs::path("..") / ".." / "AppData";
    std::cout &lt;&lt; "Current path is " &lt;&lt; fs::current_path() &lt;&lt; '\n'
              &lt;&lt; "Canonical path for " &lt;&lt; p &lt;&lt; " is " &lt;&lt; fs::canonical(p) &lt;&lt; '\n';
}
|p=true
|output=
Current path is "C:\Users\abcdef\AppData\Local\Temp"
Canonical path for "..\..\AppData" is "C:\Users\abcdef\AppData"
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/dsc path}}
{{dsc inc|cpp/experimental/fs/dsc absolute}}
{{dsc end}}
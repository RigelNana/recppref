{{cpp/experimental/fs/title|path}}
{{cpp/experimental/fs/path/navbar}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|since=fs_ts|
class path;
}}
{{dcl end}}

Objects of type {{tt|path}} represent paths on a filesystem. Only syntactic aspects of paths are handled: the pathname may represent a non-existing path or even one that is not allowed to exist on the current file system or OS.

The path name has the following syntax:
# {{spar|root-name}}{{mark optional}}: identifies the root on a filesystem with multiple roots (such as {{c|"C:"}} or {{c|"//myserver"}}. POSIX filesystems have single root.
# {{spar|root-directory}}{{mark optional}}: a directory separator that, if present, marks this path as ''absolute''. If it is missing (and the first element other than the root name is a file name), then the path is ''relative'' and requires another path as the starting location to resolve to a file name.
# Zero or more of the following:
:* {{spar|file-name}}: sequence of characters that aren't directory separators or preferred directory separators (additional limitations may be imposed by the OS or file system). This name may identify a file, a hard link, a symbolic link, or a directory. Two special {{spar|file-name}}s are recognized:
::* {{spar|dot}}: the file name consisting of a single dot character {{c|.}} is a directory name that refers to the current directory.
::* {{spar|dot-dot}}: the file name consisting of two dot characters {{c|..}} is a directory name that refers to the parent directory.
:* {{spar|directory-separator}}s: the forward slash character {{c|/}} or the alternative character provided as {{tt|path::preferred_separator}}. If this character is repeated, it is treated as a single directory separator: {{c|/usr///////lib}} is the same as {{c|/usr/lib}}.

The path can be traversed element-wise via iterators returned by the {{lc|begin()}} and {{lc|end()}} functions, which iterates over root name, root directory, and the subsequent file name elements (directory separators are skipped except the one that identifies the root directory). If the very last element in the path is a directory separator, the last iterator will dereference to a file name {{spar|dot}}.

Calling any non-const member function of a {{tt|path}} invalidates all iterators referring to elements of that object.

If the OS uses a ''native'' syntax that is different from the portable ''generic'' syntax described above, all library functions accept path names in both formats.

Paths are implicitly convertible to and from {{lc|std::basic_string}}s, which makes it possible to use them with other file APIs, e.g. as an argument to {{lc|std::ifstream::open}}.

===Member types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|value_type}}|character type used by the native encoding of the filesystem: {{c|char}} on POSIX, {{c|wchar_t}} on Windows}}
{{dsc|{{tt|string_type}}|{{c|std::basic_string&lt;value_type&gt;}}}}
{{dsc|{{tt|const_iterator}}|a constant {{named req|BidirectionalIterator}} with a {{tt|value_type}} of {{tt|path}}}}
{{dsc|{{tt|iterator}}|an alias to {{tt|const_iterator}}}}
{{dsc end}}

===Member constants===
{{dsc begin}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr value_type}} preferred_separator|alternative directory separator which may be used in addition to the portable {{c|/}}. On Windows, this is the backslash character {{c|\}}. On POSIX, this is the same forward slash {{c|/}} as the portable separator}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/path/dsc constructor}}
{{dsc inc|cpp/experimental/fs/path/dsc destructor}}
{{dsc inc|cpp/experimental/fs/path/dsc operator{{=}}}}
{{dsc inc|cpp/experimental/fs/path/dsc assign}}

{{dsc h2|Concatenation}}
{{dsc inc|cpp/experimental/fs/path/dsc append}}
{{dsc inc|cpp/experimental/fs/path/dsc concat}}

{{dsc h2|Modifiers}}
{{dsc inc|cpp/experimental/fs/path/dsc clear}}
{{dsc inc|cpp/experimental/fs/path/dsc make_preferred}}
{{dsc inc|cpp/experimental/fs/path/dsc remove_filename}}
{{dsc inc|cpp/experimental/fs/path/dsc replace_filename}}
{{dsc inc|cpp/experimental/fs/path/dsc replace_extension}}
{{dsc inc|cpp/experimental/fs/path/dsc swap}}

{{dsc h2|Format observers}}
{{dsc inc|cpp/experimental/fs/path/dsc native}}
{{dsc inc|cpp/experimental/fs/path/dsc string}}
{{dsc inc|cpp/experimental/fs/path/dsc generic_string}}

{{dsc h2|Compare}}
{{dsc inc|cpp/experimental/fs/path/dsc compare}}

{{dsc h2|Decomposition}}
{{dsc inc|cpp/experimental/fs/path/dsc root_name}}
{{dsc inc|cpp/experimental/fs/path/dsc root_directory}}
{{dsc inc|cpp/experimental/fs/path/dsc root_path}}
{{dsc inc|cpp/experimental/fs/path/dsc relative_path}}
{{dsc inc|cpp/experimental/fs/path/dsc parent_path}}
{{dsc inc|cpp/experimental/fs/path/dsc filename}}
{{dsc inc|cpp/experimental/fs/path/dsc stem}}
{{dsc inc|cpp/experimental/fs/path/dsc extension}}

{{dsc h2|Queries}}
{{dsc inc|cpp/experimental/fs/path/dsc empty}}
{{dsc inc|cpp/experimental/fs/path/dsc has_path}}
{{dsc inc|cpp/experimental/fs/path/dsc is_absrel}}

{{dsc h2|Iterators}}
{{dsc inc|cpp/experimental/fs/path/dsc begin}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/path/dsc swap2}}
{{dsc inc|cpp/experimental/fs/path/dsc operator_cmp}}
{{dsc inc|cpp/experimental/fs/path/dsc operator/}}
{{dsc inc|cpp/experimental/fs/path/dsc operator_ltltgtgt}}
{{dsc inc|cpp/experimental/fs/path/dsc u8path}}
{{dsc end}}
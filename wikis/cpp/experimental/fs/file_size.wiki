{{cpp/experimental/fs/title|file_size}}
{{cpp/experimental/fs/navbar}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|num=1|since=fs_ts|1=
std::uintmax_t file_size( const path&amp; p );
std::uintmax_t file_size( const path&amp; p, error_code&amp; ec );
}}
{{dcl end}}

Returns the size of the regular file {{c|p}}, determined as if by reading the {{tt|st_size}} member of the structure obtained by POSIX [https://pubs.opengroup.org/onlinepubs/9699919799/functions/stat.html stat] (symlinks are followed).

Attempting to determine the size of a directory (as well as any other file that is not a regular file or a symlink) is treated as an error.

The non-throwing overload returns returns {{c|-1}} on errors.

===Parameters===
{{par begin}}
{{par|p|path to examine}}
{{par|ec|out-parameter for error reporting in the non-throwing overload}}
{{par end}}

===Return value===
The size of the file, in bytes.

===Exceptions===
{{cpp/experimental/fs/error_handling|p}}

===Example===
{{example
|code=
#include &lt;experimental/filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    fs::path p = fs::current_path() / "example.bin";
    std::ofstream(p).put('a'); // create file of size 1
    std::cout &lt;&lt; "File size = " &lt;&lt; fs::file_size(p) &lt;&lt; '\n';
    fs::remove(p);
    
    try
    {
        fs::file_size("/dev"); // attempt to get size of a directory
    }
    catch (fs::filesystem_error&amp; e)
    {
        std::cout &lt;&lt; e.what() &lt;&lt; '\n';
    }        
}
|p=true
|output=
File size = 1
filesystem error: cannot get file size: Is a directory [/dev]
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/dsc resize_file}}
{{dsc inc|cpp/experimental/fs/dsc space}}
{{dsc end}}
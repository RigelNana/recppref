{{cpp/experimental/fs/directory_entry/title|status|symlink_status}}
{{cpp/experimental/fs/directory_entry/navbar}}
{{dcl begin}}
{{dcl|since=fs_ts|num=1|1=
file_status status() const;
file_status status( error_code&amp; ec ) const;
}}
{{dcl|since=fs_ts|num=2|1=
file_status symlink_status() const;
file_status symlink_status( error_code&amp; ec ) const;
}}
{{dcl end}}

@1@ Returns the potentially cached status of the entry, as if determined by a [[cpp/experimental/fs/status|status]] call (symlinks are followed to their targets).
@2@ Returns the potentially cached status of the entry, as if determined by a [[cpp/experimental/fs/status|symlink_status]] call (symlinks are not followed).

===Parameters===
{{par begin}}
{{par|ec|out-parameter for error reporting in the non-throwing overload}}
{{par end}}

===Return value===
The status of the file referred to by the entry.

===Exceptions===
{{cpp/experimental/fs/error_handling|p}}

===Notes===
The file status information is usually provided as a byproduct of directory iteration, in which case it is cached and may be obtained by these member functions without the cost of an additional system call. During directory iteration, calling {{tt|status}} is unnecessary and accessors such as {{tt|is_directory}} should be called with the cached status value, not with a path.

===Example===
{{cpp/experimental/fs/status_example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/dsc file_status}}
{{dsc inc|cpp/experimental/fs/dsc status}}
{{dsc inc|cpp/experimental/fs/dsc status_known}}
{{dsc inc|cpp/experimental/fs/dsc is_block_file}}
{{dsc inc|cpp/experimental/fs/dsc is_character_file}}
{{dsc inc|cpp/experimental/fs/dsc is_directory}}
{{dsc inc|cpp/experimental/fs/dsc is_fifo}}
{{dsc inc|cpp/experimental/fs/dsc is_other}}
{{dsc inc|cpp/experimental/fs/dsc is_regular_file}}
{{dsc inc|cpp/experimental/fs/dsc is_socket}}
{{dsc inc|cpp/experimental/fs/dsc is_symlink}}
{{dsc end}}
{{cpp/experimental/fs/title|is_other}}
{{cpp/experimental/fs/navbar}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|num=1|since=fs_ts|1=
bool is_other( file_status s );
}}
{{dcl|num=2|since=fs_ts|1=
bool is_other( const path&amp; p );
}}
{{dcl|num=3|since=fs_ts|1=
bool is_other( const path&amp; p, error_code&amp; ec );
}}
{{dcl end}}

Checks if the given file status or path corresponds to a file of type ''other'' type. That is, the file exists, but is neither regular file, nor directory nor a symlink.

@1@ Equivalent to {{c|exists(s) &amp;&amp; !is_regular_file(s) &amp;&amp; !is_directory(s) &amp;&amp; !is_symlink(s)}}.

@2@ Equivalent to {{c|is_other(status(p))}}.

@3@ Equivalent to {{c|is_other(status(p, ec))}}. Returns {{c|false}} and sets {{c|ec}} to an appropriate error code if an error occurs. Otherwise, {{c|ec}} is cleared with a call to {{c|ec.clear()}}.

===Parameters===
{{par begin}}
{{par|s|file status to check}}
{{par|p|path to examine}}
{{par|ec|error code to store the error status to}}
{{par end}}

===Return value===
{{c|true}} if the given path or file status corresponds to a ''other'' file, {{c|false}} otherwise.

===Exceptions===
@1,3@ {{unreviewed noexcept}}

@2@ Throws {{c|filesystem_error}} if an error occurs. The error is constructed with {{c|p}} as an argument. The error code is set to an appropriate error code for the error that caused the failure.

===See also===
{{todo}}
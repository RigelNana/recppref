{{cpp/experimental/fs/recursive_directory_iterator/title|disable_recursion_pending}}
{{cpp/experimental/fs/recursive_directory_iterator/navbar}}
{{dcl begin}}
{{dcl|since=fs_ts|1=
void disable_recursion_pending();
}}
{{dcl end}}

Disables recursion to the currently referred subdirectory, if any.

The call modifies the pending recursion flag on the iterator in such a way that the next time {{ltt|cpp/experimental/fs/recursive_directory_iterator/increment|increment}} is called, the iterator will advance within the current directly even if it is currently referring to a subdirectory that hasn't been visited.

The status of the pending recursion flag can be queried with {{ltt|cpp/experimental/fs/recursive_directory_iterator/recursion_pending|recursion_pending()}}, which is {{c|false}} after this call. It is reset back to {{c|true}} after {{ltt|cpp/experimental/fs/recursive_directory_iterator/increment|increment}}, and its initial value is also {{c|true}}.

The behavior is undefined if {{c|*this}} is the end iterator.

===Parameters===
(none)

===Return value===
(none)

{{cpp/impldef exception}}

===Example===
{{example|code=
#include &lt;experimental/filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    fs::create_directories("sandbox/a/b/c");
    fs::create_directories("sandbox/a/b/d/e");
    std::ofstream("sandbox/a/b/file1.txt");
    fs::create_symlink("a", "sandbox/syma");
    for (auto i = fs::recursive_directory_iterator("sandbox");
             i != fs::recursive_directory_iterator(); ++i)
    {
        std::cout &lt;&lt; std::string(i.depth(), ' ') &lt;&lt; *i;
        if (fs::is_symlink(i-&gt;symlink_status()))
            std::cout &lt;&lt; " -&gt; " &lt;&lt; fs::read_symlink(*i);
        std::cout &lt;&lt; '\n';

        // do not descend into "b"
        if (i-&gt;path().filename() == "b")
            i.disable_recursion_pending();
    }
    fs::remove_all("sandbox");
}
|output=
"sandbox/a"
 "sandbox/a/b"
"sandbox/syma" -&gt; "a"
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/recursive_directory_iterator/dsc recursion_pending}}
{{dsc inc|cpp/experimental/fs/recursive_directory_iterator/dsc increment}}
{{dsc end}}
{{cpp/experimental/fs/title|begin{{small|(recursive_directory_iterator)}}|end{{small|(recursive_directory_iterator)}}}}
{{cpp/experimental/fs/recursive_directory_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=fs_ts|
recursive_directory_iterator begin( recursive_directory_iterator iter );
}}
{{dcl|num=2|since=fs_ts|
recursive_directory_iterator end( const recursive_directory_iterator&amp; );
}}
{{dcl end}}
@1@ Returns {{c|iter}} unchanged.
@2@ Returns a default-constructed {{ltt|cpp/experimental/fs/recursive_directory_iterator|recursive_directory_iterator}}, which serves as the end iterator. The argument is ignored.

These non-member functions enable the use of {{tt|recursive_directory_iterator}}s with range-based for loops.

===Parameters===
{{par begin}}
{{par|iter|a recursive_directory_iterator}}
{{par end}}

===Return value===
@1@ {{c|iter}} unchanged.
@2@ End iterator (default-constructed {{tt|recursive_directory_iterator}}).

===Exceptions===
{{unreviewed noexcept}}

===Example===
{{example|code=
#include &lt;experimental/filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    fs::create_directories("sandbox/a/b");
    std::ofstream("sandbox/file1.txt");
    fs::create_symlink("a", "sandbox/syma");
    for (auto&amp; p : fs::recursive_directory_iterator("sandbox"))
        std::cout &lt;&lt; p &lt;&lt; '\n';
    fs::remove_all("sandbox");
}
|p=true
|output=
"sandbox/a"
"sandbox/a/b"
"sandbox/file1.txt"
"sandbox/syma"
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/directory_iterator/dsc begin}}
{{dsc end}}
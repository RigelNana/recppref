{{cpp/experimental/fs/recursive_directory_iterator/title|depth}}
{{cpp/experimental/fs/recursive_directory_iterator/navbar}}
{{dcl begin}}
{{dcl|since=fs_ts|1=
int depth() const;
}}
{{dcl end}}

Returns the number of directories from the starting directory to the currently iterated directory, i.e. the current depth of the directory hierarchy. 

The starting directory has depth of {{math|0}}, its subdirectories have depth {{math|1}}, etc.

The behavior is undefined if {{c|*this}} is the end iterator.

===Parameters===
(none)

===Return value===
Current depth of the directory hierarchy.

===Exceptions===
Throws nothing.

===Example===
{{example|This example uses iteration depth to calculate the indentation of a directory tree printout.
|code=
#include &lt;experimental/filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    fs::create_directories("sandbox/a/b/c");
    fs::create_directories("sandbox/a/b/d/e");
    std::ofstream("sandbox/a/b/file1.txt");
    fs::create_symlink("a", "sandbox/syma");
    for (auto i = fs::recursive_directory_iterator("sandbox");                       
             i != fs::recursive_directory_iterator(); ++i)
    {
        std::cout &lt;&lt; std::string(i.depth(), ' ') &lt;&lt; *i;
        if (fs::is_symlink(i-&gt;symlink_status()))
            std::cout &lt;&lt; " -&gt; " &lt;&lt; fs::read_symlink(*i);
        std::cout &lt;&lt; '\n';
    }
    fs::remove_all("sandbox");
}
|output=
"sandbox/a"
 "sandbox/a/b"
  "sandbox/a/b/c"
  "sandbox/a/b/d"
   "sandbox/a/b/d/e"
  "sandbox/a/b/file1.txt"
"sandbox/syma" -&gt; "a"
}}
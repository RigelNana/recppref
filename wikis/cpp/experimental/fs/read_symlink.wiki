{{cpp/experimental/fs/title|read_symlink}}
{{cpp/experimental/fs/navbar}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|since=fs_ts|1=
path read_symlink( const path&amp; p );
path read_symlink( const path&amp; p, error_code&amp; ec );
}}
{{dcl end}}

If the path {{c|p}} refers to a symbolic link, returns a new path object which refers to the target of that symbolic link.

It is an error if {{c|p}} does not refer to a symbolic link.

The non-throwing overload returns an empty path on errors.

===Parameters===
{{par begin}}
{{par|p|path to a symlink}}
{{par|ec|out-parameter for error reporting in the non-throwing overload}}
{{par end}}

===Return value===
The target of the symlink (which may not necessarily exist).

===Exceptions===
{{cpp/experimental/fs/error_handling|p}}

===Example===
{{example|code=
#include &lt;experimental/filesystem&gt;
#include &lt;iostream&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    // on a typical Linux system, /lib/libc.so.6 is a symlink
    fs::path p = "/lib/libc.so.6";
    if (exists(p) &amp;&amp; is_symlink(p))
        std::cout &lt;&lt; p &lt;&lt; " -&gt; " &lt;&lt; read_symlink(p) &lt;&lt; '\n';
    else
        std::cout &lt;&lt; p &lt;&lt; " does not exist or is not a symlink\n";
}
|p=true
|output=
"/lib/libc.so.6" -&gt; "libc-2.12.so"
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/dsc is_symlink}}
{{dsc inc|cpp/experimental/fs/dsc create_symlink}}
{{dsc inc|cpp/experimental/fs/dsc copy_symlink}}
{{dsc inc|cpp/experimental/fs/dsc status}}
{{dsc end}}
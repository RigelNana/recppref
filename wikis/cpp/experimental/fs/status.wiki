{{cpp/experimental/fs/title|status|symlink_status}}
{{cpp/experimental/fs/navbar}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|since=fs_ts|num=1|1=
file_status status( const path&amp; p );
file_status status( const path&amp; p, error_code&amp; ec ) noexcept;
}}
{{dcl|since=fs_ts|num=2|1=
file_status symlink_status( const path&amp; p );
file_status symlink_status( const path&amp; p, error_code&amp; ec ) noexcept;
}}
{{dcl end}}

@1@ Determines the type and attributes of the filesystem object identified by {{c|p}} as if by POSIX [https://pubs.opengroup.org/onlinepubs/9699919799/functions/stat.html stat] (symlinks are followed to their targets).
:* If {{c|p}} is a regular file, returns {{c|file_status(file_type::regular)}}. 
:* If {{c|p}} is a directory, returns {{c|file_status(file_type::directory)}}.
:* If {{c|p}} is a block special file, returns {{c|file_status(file_type::block)}}.
:* If {{c|p}} is a character special file, returns {{c|file_status(file_type::character)}}.
:* If {{c|p}} is a fifo or pipe file, returns {{c|file_status(file_type::fifo)}}.
:* If {{c|p}} is a socket, returns {{c|file_status(file_type::socket)}}.
:* If {{c|p}} does not exist, returns {{c|file_status(file_type::not_found)}}.
:* If {{c|p}} exists but file attributes cannot be determined, e.g. due to lack of permissions, returns {{c|file_status(file_type::unknown)}}.
:* If errors prevent even knowing whether {{c|p}} exists, the non-throwing overload sets {{c|ec}} and returns {{c|file_status(file_type::none)}}, and the throwing overload throws {{tt|filesystem_error}}.
:* Otherwise, returns {{c|file_status(file_type::unknown)}}.
@2@ Same as {{v|1}} except that the behavior is as if the POSIX [https://pubs.opengroup.org/onlinepubs/9699919799/functions/lstat.html lstat] is used (symlinks are not followed):
:* If {{c|p}} is a symlink, returns {{c|file_status(file_type::symlink)}}.

===Parameters===
{{par begin}}
{{par|p|path to examine}}
{{par|ec|out-parameter for error reporting in the non-throwing overload}}
{{par end}}

===Return value===
The file status (a {{rlp|file_status}} object).

===Exceptions===
{{cpp/experimental/fs/error_handling|p}}

===Notes===
The information provided by this function is usually also provided as a byproduct of directory iteration, and may be obtained by the member functions of {{rlp|directory_entry}}. During directory iteration, calling {{tt|status}} again is unnecessary.

===Example===
{{cpp/experimental/fs/status_example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/dsc file_status}}
{{dsc inc|cpp/experimental/fs/dsc status_known}}
{{dsc inc|cpp/experimental/fs/dsc is_block_file}}
{{dsc inc|cpp/experimental/fs/dsc is_character_file}}
{{dsc inc|cpp/experimental/fs/dsc is_directory}}
{{dsc inc|cpp/experimental/fs/dsc is_fifo}}
{{dsc inc|cpp/experimental/fs/dsc is_other}}
{{dsc inc|cpp/experimental/fs/dsc is_regular_file}}
{{dsc inc|cpp/experimental/fs/dsc is_socket}}
{{dsc inc|cpp/experimental/fs/dsc is_symlink}}
{{dsc inc|cpp/experimental/fs/dsc exists}}
{{dsc inc|cpp/experimental/fs/directory_entry/dsc status}}
{{dsc end}}
{{cpp/experimental/fs/title|absolute|system_complete}}
{{cpp/experimental/fs/navbar}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|since=fs_ts|num=1|1=
path absolute( const path&amp; p, const path&amp; base = current_path() );
}}
{{dcl|since=fs_ts|num=2|
path system_complete( const path&amp; p );
path system_complete( const path&amp; p, error_code&amp; ec );
}}
{{dcl end}}

@1@ Returns absolute path of {{c|p}} relative to {{c|base}} according to the following rules:
:* If {{c|p}} has both root name and root directory (e.g. {{c|"C:\users"}}, then the path is returned, unmodified.
:* If {{c|p}} has a root name not followed by a root directory (e.g. {{c|"C:text.txt"}}), then {{c|base}} is inserted between {{c|p}}'s root name and the remainder of {{c|p}}. Formally, {{c|p.root_name() / fs::absolute(base).root_directory() / fs::absolute(base).relative_path() / p.relative_path()}} is returned, 
:* If {{c|p}} has no root name, but has a root directory (e.g. {{c|"/var/tmp/file.txt"}} on a POSIX system or {{c|"\users\ABC\Document.doc"}} on Windows, then the root name of {{c|base}}, if it has one, is prepended to {{c|p}} (on a POSIX system, {{c|p}} is not modified, on a Windows system, {{c|"\users\ABC\Document.doc"}} becomes {{c|"C:\users\ABC\Document.doc"}}. Formally, {{c|fs::absolute(base).root_name() / p}} is returned.
:* If {{c|p}} has no root name and no root directory (e.g. {{c|"../file.txt"}}, then the entire {{c|base}} is prepended to {{c|p}}. Formally, {{c|absolute(base) / p}} is returned.
@2@ Obtains the absolute path that identifies the file that the OS file opening API would access given the pathname {{c|p}}. On POSIX systems, this is equivalent to {{v|1}} with the default {{c|base}} ({{tt|fs::current_path()}}). On Windows systems, each logical drive has its own current working directory, and so if {{c|p}} is not already absolute and has a root name component (e.g. {{c|"E:filename.txt"}}, that drive's current working directory is used, which may have been set by an earlier executed program.

===Parameters===
{{par begin}}
{{par|p|path to convert to absolute form}}
{{par|base|path (not necessarily absolute) to serve as the starting location}}
{{par|ec|out-parameter for error reporting in the non-throwing overload}}
{{par end}}

===Return value===
Returns an absolute (although not necessarily canonical) path formed by combining {{c|p}} and {{c|base}} as described above.

===Exceptions===
{{cpp/experimental/fs/error_handling|p|base}}

===Notes===
On systems that support root names (e.g. Windows), the result of calling {{tt|absolute}} on a relative path that has a root name (e.g. {{c|"D:file.txt"}} when the root name of {{c|base}} is different will usually result in a non-existent path.

===Example===
{{example|code=
#include &lt;filesystem&gt;
#include &lt;iostream&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    fs::path p = "C:cl.exe";
    std::cout &lt;&lt; "Current path is " &lt;&lt; fs::current_path() &lt;&lt; '\n'
              &lt;&lt; "Absolute path for " &lt;&lt; p &lt;&lt; " is " &lt;&lt; fs::absolute(p) &lt;&lt; '\n'
	      &lt;&lt; "System complete path for " &lt;&lt; p &lt;&lt; " is "
              &lt;&lt; fs::system_complete(p) &lt;&lt; '\n';
}
|p=true
|output=
Current path is "D:/local/ConsoleApplication1"
Absolute path for "C:cl.exe" is "C:/local/ConsoleApplication1/cl.exe"
System complete path for "C:cl.exe" is "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\bin\cl.exe"
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/dsc canonical}}
{{dsc end}}
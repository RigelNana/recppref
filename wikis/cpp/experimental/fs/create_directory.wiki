{{cpp/experimental/fs/title|create_directory|create_directories}}
{{cpp/experimental/fs/navbar}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|num=1|since=fs_ts|1=
bool create_directory( const path&amp; p );
bool create_directory( const path&amp; p, error_code&amp; ec );
}}
{{dcl|num=2|since=fs_ts|1=
bool create_directory( const path&amp; p, const path&amp; existing_p );
bool create_directory( const path&amp; p, const path&amp; existing_p, error_code&amp; ec );
}}
{{dcl|num=3|since=fs_ts|1=
bool create_directories( const path&amp; p );
bool create_directories( const path&amp; p, error_code&amp; ec );
}}
{{dcl end}}

@1@ Creates the directory {{c|p}} as if by POSIX [https://pubs.opengroup.org/onlinepubs/9699919799/functions/mkdir.html mkdir()] with a second argument of {{c|static_cast&lt;int&gt;(fs::perms::all)}} (the parent directory must already exist). If {{c|p}} already exists and is already a directory, the function does nothing (this condition is not treated as an error). 
@2@ Same as {{v|1}}, except that the attributes of the new directory are copied from {{c|existing_p}} (which must be a directory that exists). It is OS-dependent which attributes are copied: on POSIX systems, the attributes are copied as if by
{{source|1=
stat(existing_p.c_str(), &amp;attributes_stat)
mkdir(p.c_str(), attributes_stat.st_mode)
}}On Windows OS, the attributes are copied as if by
{{source|1=
CreateDirectoryExW(existing_p.c_str(), p.c_str(), 0)
}}
@3@ Executes {{v|1}} for every element of {{c|p}} that does not already exist.

The non-throwing overloads return {{c|false}} if any error occurs.

===Parameters===
{{par begin}}
{{par|p|the path to the new directory to create}}
{{par|existing_p|the path to a directory to copy the attributes from}}
{{par|ec|out-parameter for error reporting in the non-throwing overload}}
{{par end}}

===Return value===
@1,2@ {{c|true}} if directory creation is successful, {{c|false}} otherwise.

===Exceptions===
@1,3@ {{cpp/experimental/fs/error_handling|p}}
@2@ {{cpp/experimental/fs/error_handling|p|existing_p}}

===Notes===
The attribute-preserving overload {{v|2}} is implicitly invoked by {{ltt|cpp/experimental/fs/copy|copy()}} when recursively copying directories. Its equivalent in boost.filesystem is [https://www.boost.org/doc/libs/1_57_0/libs/filesystem/doc/reference.html#copy_directory copy_directory] (with argument order reversed).

===Example===
{{example
|code=
#include &lt;cstdlib&gt;
#include &lt;experimental/filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    fs::create_directories("sandbox/1/2/a");
    fs::create_directory("sandbox/1/2/b");
    fs::permissions("sandbox/1/2/b", fs::perms::remove_perms {{!}} fs::perms::others_all);
    fs::create_directory("sandbox/1/2/c", "sandbox/1/2/b");
    std::system("ls -l sandbox/1/2");
    fs::remove_all("sandbox");
}
|p=true
|output=
drwxr-xr-x 2 user group 4096 Apr 15 09:33 a
drwxr-x--- 2 user group 4096 Apr 15 09:33 b
drwxr-x--- 2 user group 4096 Apr 15 09:33 c
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/dsc create_symlink}}
{{dsc inc|cpp/experimental/fs/dsc copy}}
{{dsc inc|cpp/experimental/fs/dsc perms}}
{{dsc end}}
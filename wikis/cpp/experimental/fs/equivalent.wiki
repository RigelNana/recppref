{{cpp/experimental/fs/title|equivalent}}
{{cpp/experimental/fs/navbar}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|num=1|since=fs_ts|1=
bool equivalent( const path&amp; p1, const path&amp; p2 );
bool equivalent( const path&amp; p1, const path&amp; p2, error_code&amp; ec );
}}
{{dcl end}}

Checks whether the paths {{c|p1}} and {{c|p2}} refer to the same file or directory and have the same file status as determined by {{ltt|cpp/experimental/fs/status|status}} (symlinks are followed).

If {{c|p1}} or {{c|p2}} does not exist or if their file type is not file, directory, or symlink (as determined by {{ltt|cpp/experimental/fs/is_other|is_other}}), an error is reported.

The non-throwing overload returns {{c|false}} on errors.

===Parameters===
{{par begin}}
{{par|p1, p2|paths to check for equivalence}}
{{par|ec|out-parameter for error reporting in the non-throwing overload}}
{{par end}}

===Return value===
{{c|true}} if the {{c|p1}} and {{c|p2}} refer to the same file or directory and their file status is the same. {{c|false}} otherwise.

===Exceptions===
{{cpp/experimental/fs/error_handling|p1|p2}}

===Notes===
Two paths are considered to resolve to the same file system entity if {{tt|st_dev}} and {{tt|st_ino}} of their POSIX [https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/sys_stat.h.html stat structure], obtained as if by POSIX [https://pubs.opengroup.org/onlinepubs/9699919799/functions/stat.html stat], are equal (meaning, the files are located on the same device at the same location).

In particular, all hard links for the same file or directory are equivalent, and a symlink and its target on the same file system are equivalent.

===Example===
{{example
|code=
#include &lt;cstdint&gt;
#include &lt;experimental/filesystem&gt;
#include &lt;iostream&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    // hard link equivalency
    fs::path p1 = ".";
    fs::path p2 = fs::current_path();
    if (fs::equivalent(p1, p2))
        std::cout &lt;&lt; p1 &lt;&lt; " is equivalent to " &lt;&lt; p2 &lt;&lt; '\n';

    // symlink equivalency
    fs::path p3 = "/lib/libc.so.6";
    fs::path p4 = p3.parent_path() / fs::read_symlink(p3);
    if (fs::equivalent(p3, p4))
        std::cout &lt;&lt; p3 &lt;&lt; " is equivalent to " &lt;&lt; p4 &lt;&lt; '\n';
}
|p=true
|output=
"." is equivalent to "/var/tmp/test"
"/lib/libc.so.6" is equivalent to "/lib/libc-2.12.so"
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/dsc status}}
{{dsc end}}
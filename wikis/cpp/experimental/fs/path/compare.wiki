{{cpp/experimental/fs/path/title|compare}}
{{cpp/experimental/fs/path/navbar}}
{{dcl begin}}
{{dcl|num=1|since=fs_ts|1=
int compare( const path&amp; p ) const noexcept;
}}
{{dcl|num=2|since=fs_ts|1=
int compare( const string_type&amp; str ) const;
}}
{{dcl|num=3|since=fs_ts|1=
int compare( const value_type* s ) const;
}}
{{dcl end}}

Compares the lexical representations of the path and another path.

@1@ Returns a value less than, equal to or greater than {{math|0}} if the native representation of the path ({{rlp|native}}()) is respectively lexicographically less than, equal to or greater than the native representation of {{c|p}} ({{c|p.native()}}). Comparison is performed element-wise, as if by iterating both paths from {{rlp|begin}}() to {{rlp|begin|end}}().
@2@ Equivalent to {{c|compare(path(str))}}.
@3@ Equivalent to {{c|compare(path(s))}}.

===Parameters===
{{par begin}}
{{par|p|a path to compare to}}
{{par|str|a string representing path to compare to}}
{{par|s|a null-terminated string representing path to compare to}}
{{par end}}

===Return value===
A value less than {{math|0}} if the path is lexicographically less than the given path.

A value equal to {{math|0}} if the path is lexicographically equal to the given path.

A value greater than {{math|0}} if the path is lexicographically greater than the given path.

===Exceptions===
@2,3@ {{cpp/impldef exception item}}

===Notes===
For two-way comparisons, [[cpp/experimental/fs/path/operator_cmp|binary operators]] may be more suitable.

===Example===
{{example
|code=
#include &lt;experimental/filesystem&gt;
#include &lt;iostream&gt;
namespace fs = std::experimental::filesystem;

void demo(int rc, fs::path p1, fs::path p2)
{
    if (rc &lt; 0)
        std::cout &lt;&lt; p1 &lt;&lt; " &lt; " &lt;&lt; p2 &lt;&lt; '\n';
    else if (rc &gt; 0)
        std::cout &lt;&lt; p1 &lt;&lt; " &gt; " &lt;&lt; p2 &lt;&lt; '\n';
    else if (rc == 0)
        std::cout &lt;&lt; p1 &lt;&lt; " = " &lt;&lt; p2 &lt;&lt; '\n';
}

int main()
{
    fs::path p1 = "/a/b/"; // as if "a/b/." for lexicographical iteration
    fs::path p2 = "/a/b/#";
    demo(p1.compare(p2), p1, p2);
    demo(p1.compare("a/b/_"), p1, "a/b/_");
}
|output=
"/a/b/" &gt; "/a/b/#"
"/a/b/" &lt; "a/b/_"
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/path/dsc operator_cmp}}
{{dsc end}}
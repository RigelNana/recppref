{{cpp/experimental/fs/path/title|append|operator/{{=}}}}
{{cpp/experimental/fs/path/navbar}}
{{dcl begin}}
{{dcl|num=1|since=fs_ts|1=
path&amp; operator/=( const path&amp; p );
}}
{{dcl|num=2|since=fs_ts|1=
template&lt; class Source &gt;
path&amp; operator/=( const Source&amp; source );
}}
{{dcl|num=3|since=fs_ts|1=
template&lt; class Source &gt;
path&amp; append( const Source&amp; source );
}}
{{dcl|num=4|since=fs_ts|1=
template&lt; class InputIt &gt;
path&amp; append( InputIt first, InputIt last );
}}
{{dcl end}}

@1@ First, appends the preferred directory separator to {{c|this}}, except if any of the following conditions is true:
@@* the separator would be redundant ({{c|*this}} already ends with a separator).
@@* {{c|*this}} is empty, or adding it would turn a relative path to an absolute path in some other way.
@@* {{c|p}} is an empty path.
@@* {{c|p.native()}} begins with a directory separator.
@@ Then, appends {{c|p.native()}} to the pathname maintained by {{c|*this}}.
@2,3@ Same as {{v|1}}, but accepts any {{c|std::basic_string}}, null-terminated multicharacter string, or an input iterator pointing to a null-terminated multicharacter sequence.
@4@ Same as {{v|1}}, but accepts any iterator pair that designates a multicharacter string.

===Parameters===
{{par begin}}
{{par|p|pathname to append}}
{{par|source|{{c|std::basic_string}}, null-terminated multicharacter string, or an input iterator pointing to a null-terminated multicharacter sequence, which represents a path name (either in portable or in native format)}}
{{par|first, last|pair of {{named req|InputIterator}}s that specify a multicharacter sequence that represents a path name}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par req|The value type of {{c|InputIt}} must be one of the encoded character types ({{c|char}}, {{c|wchar_t}}, {{c|char16_t}} and {{c|char32_t}}).}}
{{par end}}

===Return value===
{{c|*this}}

===Exceptions===
{{cpp/experimental/fs/error_handling_exception_only}}

===Example===
{{example|code=
#include &lt;experimental/filesystem&gt;
#include &lt;iostream&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    fs::path p1 = "C:";
    p1 /= "Users"; // does not insert a separator
                   // "C:Users" is a relative path in Windows
                   // adding directory separator would turn it to an absolute path
    std::cout &lt;&lt; "\"C:\" / \"Users\" == " &lt;&lt; p1 &lt;&lt; '\n';
    p1 /= "batman"; // inserts fs::path::preferred_separator, '\' on Windows
    std::cout &lt;&lt; "\"C:\" / \"Users\" / \"batman\" == " &lt;&lt; p1 &lt;&lt; '\n';
}
|p=true
|output=
"C:" / "Users" == "C:Users"
"C:" / "Users" / "batman" == "C:Users\batman"
}}
===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/path/dsc concat}}
{{dsc inc|cpp/experimental/fs/path/dsc operator/}}
{{dsc end}}
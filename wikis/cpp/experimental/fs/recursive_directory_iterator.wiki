{{cpp/experimental/fs/title|recursive_directory_iterator}}
{{cpp/experimental/fs/recursive_directory_iterator/navbar}}
{{fmbox|class=noprint|style=font-size: 0.8em|text='''Merged into ISO C++''' The functionality described on this page was merged into the mainline ISO C++ standard as of 3/2016; see [[cpp/filesystem/recursive_directory_iterator|std::filesystem::recursive_directory_iterator]] {{mark since c++17}}}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|since=fs_ts|1=
class recursive_directory_iterator;
}}
{{dcl end}}

{{tt|recursive_directory_iterator}} is a {{named req|InputIterator}} that iterates over the {{ltt|cpp/experimental/fs/directory_entry|directory_entry}} elements of a directory, and, recursively, over the entries of all subdirectories. The iteration order is unspecified, except that each directory entry is visited only once.

By default, symlinks are not followed, but this can be enabled by specifying the directory option {{ltt|cpp/experimental/fs/directory_options|follow_directory_symlink}} at construction time.

The special pathnames {{spar|dot}} and {{spar|dot-dot}} are skipped.

If the {{tt|recursive_directory_iterator}} is advanced past the last directory entry of the top-level directory, it becomes equal to the default-constructed iterator, also known as the end iterator. Two end iterators are always equal, dereferencing or incrementing the end iterator is undefined behavior.

If a file or a directory is deleted or added to the directory tree after the recursive directory iterator has been created, it is unspecified whether the change would be observed through the iterator.

If the directory structure contains cycles, the end iterator may be unreachable.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|value_type}}|{{tt|filesystem::directory_entry}}}}
{{dsc|{{tt|difference_type}}|{{tt|std::ptrdiff_t}}}}
{{dsc|{{tt|pointer}}|{{tt|const filesystem::directory_entry*}}}}
{{dsc|{{tt|reference}}|{{tt|const filesystem::directory_entry&amp;}}}}
{{dsc|{{tt|iterator_category}}|{{tt|std::input_iterator_tag}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/recursive_directory_iterator/dsc constructor}}
{{dsc inc|cpp/experimental/fs/recursive_directory_iterator/dsc destructor}}

{{dsc h2|Observers}}
{{dsc inc|cpp/experimental/fs/recursive_directory_iterator/dsc operator*}}
{{dsc inc|cpp/experimental/fs/recursive_directory_iterator/dsc options}}
{{dsc inc|cpp/experimental/fs/recursive_directory_iterator/dsc depth}}
{{dsc inc|cpp/experimental/fs/recursive_directory_iterator/dsc recursion_pending}}

{{dsc h2|Modifiers}}
{{dsc inc|cpp/experimental/fs/recursive_directory_iterator/dsc operator{{=}}}}
{{dsc inc|cpp/experimental/fs/recursive_directory_iterator/dsc increment}}
{{dsc inc|cpp/experimental/fs/recursive_directory_iterator/dsc pop}}
{{dsc inc|cpp/experimental/fs/recursive_directory_iterator/dsc disable_recursion_pending}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/recursive_directory_iterator/dsc begin}}
{{dsc end}}

Additionally, {{tt|operator{{==}}}} and {{tt|operator!{{=}}}} are provided, either as members or as non-members, as required by {{named req|InputIterator}}.

===Notes===
A {{tt|recursive_directory_iterator}} typically holds a reference-counted ''pointer'' (to satisfy shallow-copy semantics of {{named req|InputIterator}}) to an implementation object, which holds:
* a container (such as {{lc|std::vector}}) of non-recursive {{ltt|cpp/experimental/fs/directory_iterator|directory_iterator}}s that forms the recursion stack.
* the recursion depth counter (accessible with {{ltt|cpp/experimental/fs/recursive_directory_iterator/depth|depth()}}).
* the directory options used at construction (accessible with {{ltt|cpp/experimental/fs/recursive_directory_iterator/options|options()}}).
* the pending recursion flag (accessible with {{ltt|cpp/experimental/fs/recursive_directory_iterator/recursion_pending|recursion_pending()}}, may be combined with the directory options to save space).

===Example===
{{example|code=
#include &lt;experimental/filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    fs::create_directories("sandbox/a/b");
    std::ofstream("sandbox/file1.txt");
    fs::create_symlink("a", "sandbox/syma");
    for (const fs::directory_entry&amp; entry : fs::recursive_directory_iterator("sandbox"))
        std::cout &lt;&lt; entry &lt;&lt; '\n';
    fs::remove_all("sandbox");
}
|p=true
|output=
"sandbox/a"
"sandbox/a/b"
"sandbox/file1.txt"
"sandbox/syma"
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/dsc directory_iterator}}
{{dsc inc|cpp/experimental/fs/dsc directory_entry}}
{{dsc inc|cpp/experimental/fs/dsc directory_options}}
{{dsc end}}
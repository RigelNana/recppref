{{cpp/experimental/fs/title|exists}}
{{cpp/experimental/fs/navbar}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|num=1|since=fs_ts|1=
bool exists( file_status s )
}}
{{dcl|num=2|since=fs_ts|1=
bool exists( const path&amp; p );
bool exists( const path&amp; p, error_code&amp; ec )
}}
{{dcl end}}

Checks if the given file status or path corresponds to an existing file or directory.

@1@ Equivalent to {{c|1=status_known(s) &amp;&amp; s.type() != file_type::not_found}}.
@2@ Equivalent to {{c|exists(status(p))}} or {{c|exists(status(p, ec))}} (symlinks are followed). The non-throwing overload returns {{c|false}} if an error occurs.

===Parameters===
{{par begin}}
{{par|s|file status to check}}
{{par|p|path to examine}}
{{par|ec|out-parameter for error reporting in the non-throwing overload}}
{{par end}}

===Return value===
{{c|true}} if the given path or file status corresponds to an existing file or directory, {{c|false}} otherwise.

===Exceptions===
@1@ {{unreviewed noexcept}}
@2@ {{cpp/experimental/fs/error_handling|p}}

===Notes===
The information provided by this function is usually also provided as a byproduct of directory iteration. During directory iteration, calling {{tt|exists(*iterator)}} is less efficient than {{tt|exists(iterator-&gt;status())}}.

===Example===
{{example
|code=
#include &lt;cstdint&gt;
#include &lt;experimental/filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
namespace fs = std::experimental::filesystem;

void demo_exists(const fs::path&amp; p, fs::file_status s = fs::file_status{})
{
    std::cout &lt;&lt; p;
    if (fs::status_known(s) ? fs::exists(s) : fs::exists(p))
        std::cout &lt;&lt; " exists\n";
    else
        std::cout &lt;&lt; " does not exist\n";
}

int main()
{
    fs::create_directory("sandbox");
    std::ofstream("sandbox/file"); // create regular file
    fs::create_symlink("non-existing", "sandbox/symlink");

    demo_exists("sandbox");
    for (auto it = fs::directory_iterator("sandbox"); it != fs::directory_iterator(); ++it)
        demo_exists(*it, it-&gt;status()); // use cached status from directory entry
    fs::remove_all("sandbox");
}
|output=
"sandbox" exists
"sandbox/file" exists
"sandbox/symlink" does not exist
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/dsc status}}
{{dsc inc|cpp/experimental/fs/dsc file_status}}
{{dsc inc|cpp/experimental/fs/directory_entry/dsc status}}
{{dsc end}}
{{cpp/title|laguerre|laguerref|laguerrel}}
{{cpp/experimental/special_functions/navbar}}
{{dcl begin}}
{{dcl|num=1|
double      laguerre( unsigned int n, double x );
double      laguerre( unsigned int n, float x );
double      laguerre( unsigned int n, long double x );
float       laguerref( unsigned int n, float x );
long double laguerrel( unsigned int n, long double x );
}}
{{dcl|num=2|
double      laguerre( unsigned int n, IntegralType x );
}}
{{dcl end}}

@1@ Computes the non-associated [[enwiki:Laguerre_polynomials|Laguerre polynomials]] of the degree {{c|n}} and argument {{c|x}}.
@2@ A set of overloads or a function template accepting an argument of any [[cpp/types/is_integral|integral type]]. Equivalent to {{v|1}} after casting the argument to {{c|double}}.

{{cpp/experimental/special_functions/macro_note|laguerre}}

===Parameters===
{{par begin}}
{{par|n|the degree of the polynomial, a value of unsigned integer type}}
{{par|x|the argument, a value of a floating-point or integral type}}
{{par end}}

===Return value===
If no errors occur, value of the nonassociated Laguerre polynomial of {{tt|x}}, that is {{math|{{mfrac|{{mexp|x}}|n!}}{{mfrac|d{{su|p=n}}|dx{{su|p=n}}}}(x{{su|p=n}}{{mexp|-x}})}}, is returned.

===Error handling===
Errors may be reported as specified in [[cpp/numeric/math/math_errhandling|math_errhandling]].
* If the argument is NaN, NaN is returned and domain error is not reported.
* If {{c|x}} is negative, a domain error may occur.
* If {{c|n}} is greater or equal than 128, the behavior is implementation-defined.

===Notes===
Implementations that do not support TR 29124 but support TR 19768, provide this function in the header {{tt|tr1/cmath}} and namespace {{tt|std::tr1}}.

An implementation of this function is also [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_poly/laguerre.html available in boost.math].

The Laguerre polynomials are the polynomial solutions of the equation {{math|xy{{su|p=,,}} + (1 - x)y{{su|p=,}} + ny {{=}} 0}}.

The first few are:
* laguerre(0, x) {{=}} 1.
* laguerre(1, x) {{=}} {{math|-x + 1}}.
* laguerre(2, x) {{=}} {{math|{{mfrac|1|2}}[x{{su|p=2}} - 4x + 2]}}.
* laguerre(3, x) {{=}} {{math|{{mfrac|1|6}}[-x{{su|p=3}} - 9x{{su|p=2}} - 18x + 6]}}.

===Example===
{{example
|(works as shown with gcc 6.0)
|code=
#define __STDCPP_WANT_MATH_SPEC_FUNCS__ 1
#include &lt;cmath&gt;
#include &lt;iostream&gt;

double L1(double x)
{
    return -x + 1;
}

double L2(double x)
{
    return 0.5 * (x * x - 4 * x + 2);
}

int main()
{
    // spot-checks
    std::cout &lt;&lt; std::laguerre(1, 0.5) &lt;&lt; '=' &lt;&lt; L1(0.5) &lt;&lt; '\n'
              &lt;&lt; std::laguerre(2, 0.5) &lt;&lt; '=' &lt;&lt; L2(0.5) &lt;&lt; '\n';
}
|output=
0.5=0.5
0.125=0.125
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/special_functions/dsc assoc_laguerre}}
{{dsc end}}

===External links===
[https://mathworld.wolfram.com/LaguerrePolynomial.html Weisstein, Eric W. "Laguerre Polynomial."] From MathWorld--A Wolfram Web Resource.

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
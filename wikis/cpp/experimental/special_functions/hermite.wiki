{{cpp/title|hermite|hermitef|hermitel}}
{{cpp/experimental/special_math/navbar}}
{{dcl begin}}
{{dcl|num=1|
double      hermite( unsigned int n, double x );
double      hermite( unsigned int n, float x );
double      hermite( unsigned int n, long double x );
float       hermitef( unsigned int n, float x );
long double hermitel( unsigned int n, long double x );
}}
{{dcl|num=2|
double      hermite( unsigned int n, IntegralType x );
}}
{{dcl end}}

@1@ Computes the (physicist's) [[enwiki:Hermite_polynomials|Hermite polynomials]] of the degree {{c|n}} and argument {{c|x}}.
@2@ A set of overloads or a function template accepting an argument of any [[cpp/types/is_integral|integral type]]. Equivalent to {{v|1}} after casting the argument to {{c|double}}.

{{cpp/experimental/special_math/macro_note|hermite}}

===Parameters===
{{par begin}}
{{par|n|the degree of the polynomial}}
{{par|x|the argument, a value of a floating-point or integral type}}
{{par end}}

===Return value===
If no errors occur, value of the order-{{c|n}}Hermite polynomial of {{c|x}}, that is {{math|(-1){{su|p=n}}{{mexp|x{{su|p=2}}}}{{mfrac|d{{su|p=n}}|dx{{su|p=n}}}}{{mexp|-x{{su|p=2}}}}}}, is returned.

===Error handling===
Errors may be reported as specified in [[cpp/numeric/math/math_errhandling|math_errhandling]].
* If the argument is NaN, NaN is returned and domain error is not reported.
* If {{c|n}} is greater or equal than 128, the behavior is implementation-defined.

===Notes===
Implementations that do not support TR 29124 but support TR 19768, provide this function in the header {{tt|tr1/cmath}} and namespace {{tt|std::tr1}}.

An implementation of this function is also [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_poly/hermite.html available in boost.math].

The Hermite polynomials are the polynomial solutions of the equation 
{{math|u{{su|p=,,}} - 2xu{{su|p=,}} {{=}} -2nu}}.

The first few are:
* hermite(0, x) {{=}} {{math|1}}.
* hermite(1, x) {{=}} {{math|2x}}.
* hermite(2, x) {{=}} {{math|4x{{su|p=2}} - 2}}.
* hermite(3, x) {{=}} {{math|8x{{su|p=3}} - 12x}}.
* hermite(4, x) {{=}} {{math|16x{{su|p=4}} - 48x{{su|p=2}} + 12}}.

===Example===
{{example
|(works as shown with gcc 6.0)
|code=
#define __STDCPP_WANT_MATH_SPEC_FUNCS__ 1
#include &lt;cmath&gt;
#include &lt;iostream&gt;

double H3(double x)
{
    return 8 * std::pow(x, 3) - 12 * x;
}

double H4(double x)
{
    return 16 * std::pow(x, 4) - 48 * x * x + 12;
}

int main()
{
    // spot-checks
    std::cout &lt;&lt; std::hermite(3, 10) &lt;&lt; '=' &lt;&lt; H3(10) &lt;&lt; '\n'
              &lt;&lt; std::hermite(4, 10) &lt;&lt; '=' &lt;&lt; H4(10) &lt;&lt; '\n';
}
|output=
7880=7880
155212=155212
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/special_math/dsc laguerre}}
{{dsc inc|cpp/experimental/special_math/dsc legendre}}
{{dsc end}}

===External links===
[https://mathworld.wolfram.com/HermitePolynomial.html Weisstein, Eric W. ""Hermite Polynomial."] From MathWorld--A Wolfram Web Resource.

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|assoc_laguerre|assoc_laguerref|assoc_laguerrel}}
{{cpp/experimental/special_math/navbar}}
{{dcl begin}}
{{dcl|num=1|
double      assoc_laguerre ( unsigned int n, unsigned int m, double x );
double      assoc_laguerre ( unsigned int n, unsigned int m, float x );
double      assoc_laguerre ( unsigned int n, unsigned int m, long double x );
float       assoc_laguerref( unsigned int n, unsigned int m, float x );
long double assoc_laguerrel( unsigned int n, unsigned int m, long double x );
}}
{{dcl|num=2|
double      assoc_laguerre ( unsigned int n, unsigned int m, IntegralType x );
}}
{{dcl end}}

@1@ Computes the {{enwiki|Laguerre_polynomials#Generalized_Laguerre_polynomials|associated Laguerre polynomials}} of the degree {{c|n}}, order {{c|m}}, and argument {{c|x}}.
@2@ A set of overloads or a function template accepting an argument of any [[cpp/types/is_integral|integral type]]. Equivalent to {{v|1}} after casting the argument to {{c|double}}.

{{cpp/experimental/special_math/macro_note|assoc_laguerre}}

===Parameters===
{{par begin}}
{{par|n|the degree of the polynomial, a value of unsigned integer type}}
{{par|m|the order of the polynomial, a value of unsigned integer type}}
{{par|x|the argument, a value of a floating-point or integral type}}
{{par end}}

===Return value===
If no errors occur, value of the associated Laguerre polynomial of {{c|x}}, that is {{math|(-1){{su|p=m}}{{mfrac|d{{su|p=m}}|dx{{su|p=m}}}}L{{su|b=n + m}}(x)}}, is returned (where {{math|L{{su|b=n + m}}(x)}} is the unassociated Laguerre polynomial, {{c|std::laguerre(n + m, x)}}).

===Error handling===
Errors may be reported as specified in {{lc|math_errhandling}}.

* If the argument is NaN, NaN is returned and domain error is not reported.
* If {{c|x}} is negative, a domain error may occur.
* If {{c|n}} or {{c|m}} is greater or equal to 128, the behavior is implementation-defined.

===Notes===
Implementations that do not support TR 29124 but support TR 19768, provide this function in the header {{tt|tr1/cmath}} and namespace {{tt|std::tr1}}.

An implementation of this function is also [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_poly/laguerre.html available in boost.math].

The associated Laguerre polynomials are the polynomial solutions of the equation {{math|xy{{su|p=,,}} + (m + 1 - x)y{{su|p=,}} + ny {{=}} 0}}.

The first few are:
* {{tt|assoc_laguerre(0, m, x)}} {{=}} 1.
* {{tt|assoc_laguerre(1, m, x)}} {{=}} {{math|-x + m + 1}}.
* {{tt|assoc_laguerre(2, m, x)}} {{=}} {{math|{{mfrac|1|2}}[x{{su|p=2}} - 2(m + 2)x + (m + 1)(m + 2)]}}.
* {{tt|assoc_laguerre(3, m, x)}} {{=}} {{math|{{mfrac|1|6}}[-x{{su|p=3}} - 3(m + 3)x{{su|p=2}} - 3(m + 2)(m + 3)x + (m + 1)(m + 2)(m + 3)]}}.

===Example===
{{example
|code=
#define __STDCPP_WANT_MATH_SPEC_FUNCS__ 1
#include &lt;cmath&gt;
#include &lt;iostream&gt;

double L1(unsigned m, double x)
{
    return -x + m + 1;
}

double L2(unsigned m, double x)
{
    return 0.5 * (x * x - 2 * (m + 2) * x + (m + 1) * (m + 2));
}

int main()
{
    // spot-checks
    std::cout &lt;&lt; std::assoc_laguerre(1, 10, 0.5) &lt;&lt; '=' &lt;&lt; L1(10, 0.5) &lt;&lt; '\n'
              &lt;&lt; std::assoc_laguerre(2, 10, 0.5) &lt;&lt; '=' &lt;&lt; L2(10, 0.5) &lt;&lt; '\n';
}
|output=
10.5=10.5
60.125=60.125
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/special_math/dsc laguerre}}
{{dsc end}}

===External links===
{{eli|[https://mathworld.wolfram.com/AssociatedLaguerrePolynomial.html Weisstein, Eric W. "Associated Laguerre Polynomial."] From MathWorld &amp;mdash; A Wolfram Web Resource.}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|legendre|legendref|legendrel}}
{{cpp/experimental/special_functions/navbar}}
{{dcl begin}}
{{dcl|num=1|
double      legendre( unsigned int n, double x );
double      legendre( unsigned int n, float x );
double      legendre( unsigned int n, long double x );
float       legendref( unsigned int n, float x );
long double legendrel( unsigned int n, long double x );
}}
{{dcl|num=2|
double      legendre( unsigned int n, IntegralType x );
}}
{{dcl end}}

@1@ Computes the unassociated {{enwiki|Legendre polynomials}} of the degree {{c|n}} and argument {{c|x}}.
@2@ A set of overloads or a function template accepting an argument of any [[cpp/types/is_integral|integral type]]. Equivalent to {{v|1}} after casting the argument to {{c|double}}.

{{cpp/experimental/special_functions/macro_note|legendre}}

===Parameters===
{{par begin}}
{{par|n|the degree of the polynomial}}
{{par|x|the argument, a value of a floating-point or integral type}}
{{par end}}

===Return value===
If no errors occur, value of the order-{{tt|n}} unassociated Legendre polynomial of {{tt|x}}, that is {{math|{{mfrac|1|2{{su|p=n}}n!}}{{mfrac|d{{su|p=n}}|dx{{su|p=n}}}}(x{{su|p=2}} - 1){{su|p=n}}}}, is returned.

===Error handling===
Errors may be reported as specified in {{lc|math_errhandling}}.
* If the argument is NaN, NaN is returned and domain error is not reported.
* The function is not required to be defined for {{math|{{!}}x{{!}} &gt; 1}}.
* If {{c|n}} is greater or equal than 128, the behavior is implementation-defined.

===Notes===
Implementations that do not support TR 29124 but support TR 19768, provide this function in the header {{tt|tr1/cmath}} and namespace {{tt|std::tr1}}.

An implementation of this function is also [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_poly/legendre.html available in boost.math].

The first few Legendre polynomials are:
* legendre(0, x) {{=}} {{math|1}}.
* legendre(1, x) {{=}} {{math|x}}.
* legendre(2, x) {{=}} {{math|{{mfrac|1|2}}(3x{{su|p=2}} - 1)}}.
* legendre(3, x) {{=}} {{math|{{mfrac|1|2}}(5x{{su|p=3}} - 3x)}}.
* legendre(4, x) {{=}} {{math|{{mfrac|1|8}}(35x{{su|p=4}} - 30x{{su|p=2}} + 3)}}.

===Example===
{{example
|(works as shown with gcc 6.0)
|code=
#define __STDCPP_WANT_MATH_SPEC_FUNCS__ 1
#include &lt;cmath&gt;
#include &lt;iostream&gt;

double P3(double x)
{
    return 0.5 * (5 * std::pow(x, 3) - 3 * x);
}

double P4(double x)
{
    return 0.125 * (35 * std::pow(x, 4) - 30 * x * x + 3);
}

int main()
{
    // spot-checks
    std::cout &lt;&lt; std::legendre(3, 0.25) &lt;&lt; '=' &lt;&lt; P3(0.25) &lt;&lt; '\n'
              &lt;&lt; std::legendre(4, 0.25) &lt;&lt; '=' &lt;&lt; P4(0.25) &lt;&lt; '\n';
}
|output=
-0.335938=-0.335938
0.157715=0.157715
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/special_functions/dsc laguerre}}
{{dsc inc|cpp/experimental/special_functions/dsc hermite}}
{{dsc end}}

===External links===
{{eli|[https://mathworld.wolfram.com/LegendrePolynomial.html Weisstein, Eric W. "Legendre Polynomial."] From MathWorld â€” A Wolfram Web Resource.}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|assoc_legendre|assoc_legendref|assoc_legendrel}}
{{cpp/experimental/special_math/navbar}}
{{dcl begin}}
{{dcl|num=1|
double      assoc_legendre( unsigned int n, unsigned int m, double x );
double      assoc_legendre( unsigned int n, unsigned int m, float x );
double      assoc_legendre( unsigned int n, unsigned int m, long double x );
float       assoc_legendref( unsigned int n, unsigned int m, float x );
long double assoc_legendrel( unsigned int n, unsigned int m, long double x );
}}
{{dcl|num=2|
double      assoc_legendre( unsigned int n, unsigned int m, IntegralType x );
}}
{{dcl end}}

@1@ Computes the [[enwiki:Associated_Legendre_polynomials|associated Legendre polynomials]] of the degree {{c|n}}, order {{c|m}}, and argument {{c|x}}.
@2@ A set of overloads or a function template accepting an argument of any [[cpp/types/is_integral|integral type]]. Equivalent to {{v|1}} after casting the argument to {{c|double}}.

{{cpp/experimental/special_math/macro_note|assoc_legendre}}

===Parameters===
{{par begin}}
{{par|n|the degree of the polynomial, a value of unsigned integer type}}
{{par|m|the order of the polynomial, a value of unsigned integer type}}
{{par|x|the argument, a value of a floating-point or integral type}}
{{par end}}

===Return value===
If no errors occur, value of the associated Legendre polynomial {{math|P{{su|p=m|b=n}}}} of {{c|x}}, that is {{math|(1 - x{{su|p=2}}){{su|p=m/2}} {{mfrac|d{{su|p=m}}|dx{{su|p=m}}}}P{{su|b=n}}(x)}}, is returned (where {{math|P{{su|b=n}}(x)}} is the unassociated Legendre polynomial, {{c|std::legendre(n, x)}}).

===Error handling===
Errors may be reported as specified in [[cpp/numeric/math/math_errhandling|math_errhandling]].
* If the argument is NaN, NaN is returned and domain error is not reported.
* If {{math|{{!}}x{{!}} &gt; 1}}, a domain error may occur.
* If {{tt|n}} is greater or equal to 128, the behavior is implementation-defined.

===Notes===
Implementations that do not support TR 29124 but support TR 19768, provide this function in the header {{tt|tr1/cmath}} and namespace {{tt|std::tr1}}.

An implementation of this function is also [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_poly/legendre.html available in boost.math].

The first few associated Legendre polynomials are:
* assoc_legendre(0, 0, x) {{=}} 1.
* assoc_legendre(1, 0, x) {{=}} {{math|x}}.
* assoc_legendre(1, 1, x) {{=}} {{math|-(1 - x{{su|p=2}}){{su|p=1/2}}}}.
* assoc_legendre(2, 0, x) {{=}} {{math|{{mfrac|1|2}}(3x{{su|p=2}} - 1)}}.
* assoc_legendre(2, 1, x) {{=}} {{math|-3x(1 - x{{su|p=2}}){{su|p=1/2}}}}.
* assoc_legendre(2, 2, x) {{=}} {{math|3(1 - x{{su|p=2}})}}.

===Example===
{{example
|(works as shown with gcc 6.0)
|code=
#define __STDCPP_WANT_MATH_SPEC_FUNCS__ 1
#include &lt;cmath&gt;
#include &lt;iostream&gt;

double P20(double x)
{
    return 0.5 * (3 * x * x - 1);
}

double P21(double x)
{
    return -3.0 * x * std::sqrt(1 - x * x);
}

double P22(double x)
{
    return 3 * (1 - x * x);
}

int main()
{
    // spot-checks
    std::cout &lt;&lt; std::assoc_legendre(2, 0, 0.5) &lt;&lt; '=' &lt;&lt; P20(0.5) &lt;&lt; '\n'
              &lt;&lt; std::assoc_legendre(2, 1, 0.5) &lt;&lt; '=' &lt;&lt; P21(0.5) &lt;&lt; '\n'
              &lt;&lt; std::assoc_legendre(2, 2, 0.5) &lt;&lt; '=' &lt;&lt; P22(0.5) &lt;&lt; '\n';
}
|output=
-0.125=-0.125
-1.29904=-1.29904
2.25=2.25
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/special_math/dsc legendre}}
{{dsc end}}

===External links===
[https://mathworld.wolfram.com/AssociatedLegendrePolynomial.html Weisstein, Eric W. "Associated Legendre Polynomial."] From MathWorld--A Wolfram Web Resource.

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
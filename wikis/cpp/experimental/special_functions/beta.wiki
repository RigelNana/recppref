{{cpp/title|beta|betaf|betal}}
{{cpp/experimental/special_functions/navbar}}
{{dcl begin}}
{{dcl|num=1|
double      beta( double x, double y );
float       betaf( float x, float y );
long double betal( long double x, long double y );
}}
{{dcl|num=2|
Promoted    beta( Arithmetic x, Arithmetic y );
}}
{{dcl end}}

@1@ Computes the [[enwiki:Beta_function|beta function]] of {{c|x}} and {{c|y}}.
@2@ A set of overloads or a function template for all combinations of arguments of arithmetic type not covered by {{v|1}}. If any argument has [[cpp/types/is_integral|integral type]], it is cast to {{c|double}}. If any argument is {{c|long double}}, then the return type {{tt|Promoted}} is also {{c|long double}}, otherwise the return type is always {{c|double}}.

{{cpp/experimental/special_functions/macro_note|beta}}

===Parameters===
{{par begin}}
{{par|x, y|values of a floating-point or integral type}}
{{par end}}

===Return value===
If no errors occur, value of the beta function of {{c|x}} and {{c|y}}, that is {{math|{{minteg|0|1|t{{su|p=x-1}}(1 - t){{su|p=(y-1)}}d''t''}}}}, or, equivalently, {{math|{{mfrac|Γ(x)Γ(y)|Γ(x + y)}}}} is returned.

===Error handling===
Errors may be reported as specified in [[cpp/numeric/math/math_errhandling|math_errhandling]].
* If any argument is NaN, NaN is returned and domain error is not reported.
* The function is only required to be defined where both {{c|x}} and {{c|y}} are greater than zero, and is allowed to report a domain error otherwise.

===Notes===
Implementations that do not support TR 29124 but support TR 19768, provide this function in the header {{tt|tr1/cmath}} and namespace {{tt|std::tr1}}.

An implementation of this function is also [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_beta/beta_function.html available in boost.math].

{{c|beta(x, y)}} equals {{c|beta(y, x)}}.

When {{c|x}} and {{c|y}} are positive integers, beta(x, y) equals {{mathjax-or|1=\(\frac{(x - 1)!(y - 1)!}{(x + y - 1)!}\)|2={{mfrac|(x - 1)!(y - 1)!|(x + y - 1)!}}}}.

Binomial coefficients can be expressed in terms of the beta function: {{mathjax-or|1=\(\binom{n}{k} = \frac{1}{(n + 1)B(n - k + 1, k + 1)}\)|2={{mparen|(|)|n|k}}{{=}}{{mfrac|1|(n + 1)Β(n - k + 1, k + 1)}}}}.

===Example===
{{example
|(works as shown with gcc 6.0)
|code=
#define __STDCPP_WANT_MATH_SPEC_FUNCS__ 1
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

double binom(int n, int k)
{
    return 1 / ((n + 1) * std::beta(n - k + 1, k + 1));
}

int main()
{
    std::cout &lt;&lt; "Pascal's triangle:\n";
    for (int n = 1; n &lt; 10; ++n)
    {
        std::cout &lt;&lt; std::string(20 - n * 2, ' ');
        for (int k = 1; k &lt; n; ++k)
            std::cout &lt;&lt; std::setw(3) &lt;&lt; binom(n, k) &lt;&lt; ' ';
        std::cout &lt;&lt; '\n';
    }
}
|output=
Pascal's triangle:
                 
                  2 
                3   3 
              4   6   4 
            5  10  10   5 
          6  15  20  15   6 
        7  21  35  35  21   7 
      8  28  56  70  56  28   8 
    9  36  84 126 126  84  36   9 
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc tgamma}}
{{dsc end}}

===External links===
[https://mathworld.wolfram.com/BetaFunction.html Weisstein, Eric W. "Beta Function."] From MathWorld--A Wolfram Web Resource.

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
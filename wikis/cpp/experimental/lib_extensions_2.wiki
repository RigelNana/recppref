{{title|C++ standard libraries extensions, version 2}}
{{cpp/experimental/lib_extensions_2/navbar}}

Version 2 of the C++ Extensions for Library Fundamentals, ISO/IEC TS 19568:2017, defines the following new components for the C++ standard library, in addition to those defined in [[cpp/experimental/lib extensions|version 1]]:

===The C++ detection idiom===
{{dsc begin}}
{{dsc header|experimental/type_traits}}
{{dsc talias|cpp/experimental/is_detected|title=is_detected &lt;br /&gt; detected_t &lt;br /&gt; detected_or|alias templates that detect whether a ''template-id'' is well-formed}}
{{dsc class|cpp/experimental/nonesuch|class type returned by {{c|detected_t}} on failure}}
{{dsc end}}

===A const-propagating wrapper for pointer-like objects===
{{dsc begin}}
{{dsc header|experimental/propagate_const}}
{{dsc tclass|cpp/experimental/propagate_const|a const-propagating wrapper for pointer-like objects}}
{{dsc end}}

===Non-owning pointers===
{{dsc begin}}
{{dsc header|experimental/memory}}
{{dsc tclass|cpp/experimental/observer_ptr|a class representing a non-owning pointer}}
{{dsc end}}

==={{tt|std::array}} creation===
{{dsc begin}}
{{dsc header|experimental/array}}
{{dsc inc|cpp/experimental/dsc make array}}
{{dsc end}}

==={{tt|ostream_joiner}}===
{{dsc begin}}
{{dsc header|experimental/iterator}}
{{dsc tclass|cpp/experimental/ostream_joiner|an output iterator that writes successive elements into an output stream, separating adjacent elements with a delimiter}}
{{dsc end}}

===Simple random number generation facilities===
{{anchor|per-thread engine}}A ''per-thread engine'' of type {{lc|std::default_random_engine}}, initialized to an unpredictable state, is maintained for each thread and used by the functions below.

{{dsc begin}}
{{dsc header|experimental/random}}
{{dsc inc|cpp/experimental/dsc randint}}
{{dsc inc|cpp/experimental/dsc reseed}}
{{dsc header|experimental/algorithm}}
{{dsc tfun|cpp/experimental/sample|selects n random elements from a sequence}}
{{dsc tfun|cpp/experimental/shuffle|randomly re-orders elements in a range}}
{{dsc end }}

===Feature test macros===
{{dsc begin}}
{{dsc header|experimental/type_traits}}
{{dsc macro const|__cpp_lib_experimental_logical_traits|nolink=true|a value of at least {{c|201511}} indicates that the logical operator type traits are supported}}
{{dsc macro const|__cpp_lib_experimental_detect|nolink=true|a value of at least {{c|201505}} indicates that the detection idiom is supported}}

{{dsc header|experimental/propagate_const}}
{{dsc macro const|__cpp_lib_experimental_propagate_const|nolink=true|a value of at least {{c|201505}} indicates that {{c|propagate_const}} is supported}}

{{dsc header|experimental/functional}}
{{dsc macro const|__cpp_lib_experimental_not_fn|nolink=true|a value of at least {{c|201406}} indicates that {{c|not_fn}} is supported}}

{{dsc header|experimental/memory}}
{{dsc macro const|__cpp_lib_experimental_observer_ptr|nolink=true|a value of at least {{c|201411}} indicates that {{c|observer_ptr}} is supported}}

{{dsc header|experimental/array}}
{{dsc macro const|__cpp_lib_experimental_make_array|nolink=true|a value of at least {{c|201505}} indicates that {{c|make_array}} is supported}}

{{dsc header|experimental/iterator}}
{{dsc macro const|__cpp_lib_experimental_ostream_joiner|nolink=true|a value of at least {{c|201411}} indicates that {{c|ostream_joiner}} is supported}}

{{dsc header|experimental/vector}}
{{dsc macro const|__cpp_lib_experimental_erase_if|nolink=true|a value of at least {{c|201411}} indicates that uniform container erasure is supported}}

{{dsc header|experimental/numeric}}
{{dsc macro const|__cpp_lib_experimental_gcd_lcm|nolink=true|a value of at least {{c|201411}} indicates that {{c|gcd}} and {{c|lcm}} are supported}}

{{dsc header|experimental/random}}
{{dsc macro const|__cpp_lib_experimental_randint|nolink=true|a value of at least {{c|201511}} indicates that {{c|randint}} and related functions are supported}}

{{dsc header|experimental/source_location}}
{{dsc macro const|__cpp_lib_experimental_source_location|nolink=true|a value of at least {{c|201505}} indicates that {{c|source_location}} is supported}}
{{dsc end}}

==Merged into C++17==
The following components of the library fundamentals v2 have been adopted into the C++17 standard. 

{{dsc begin}}
{{dsc header|experimental/type_traits}}
{{dsc talias|cpp/experimental/void_t|variadic alias template for {{tt|void}}}}
{{dsc header|experimental/type_traits}}
{{dsc tclass|cpp/experimental/conjunction|variadic logical AND metafunction}}
{{dsc tclass|cpp/experimental/disjunction|variadic logical OR metafunction}}
{{dsc tclass|cpp/experimental/negation|logical NOT metafunction}}
{{dsc header|experimental/functional}}
{{dsc inc|cpp/experimental/dsc not_fn}}
{{dsc header|experimental/numeric}}
{{dsc inc|cpp/experimental/dsc gcd}}
{{dsc inc|cpp/experimental/dsc lcm}}
{{dsc end }}

==Merged into C++20==
The following components of the library fundamentals v2 have been adopted into the C++20 standard.

===Uniform container erasure===
{{dsc begin}}
{{dsc header|experimental/string}}
{{cpp/experimental/dsc erase|basic_string|mark=no}}
{{cpp/experimental/dsc erase if|basic_string|mark=no}}
{{dsc header|experimental/deque}}
{{cpp/experimental/dsc erase|deque|mark=no}}
{{cpp/experimental/dsc erase if|deque|mark=no}}
{{dsc header|experimental/vector}}
{{cpp/experimental/dsc erase|vector|mark=no}}
{{cpp/experimental/dsc erase if|vector|mark=no}}
{{dsc header|experimental/forward_list}}
{{cpp/experimental/dsc erase|forward_list|mark=no}}
{{cpp/experimental/dsc erase if|forward_list|mark=no}}
{{dsc header|experimental/list}}
{{cpp/experimental/dsc erase|list|mark=no}}
{{cpp/experimental/dsc erase if|list|mark=no}}
{{dsc header|experimental/map}}
{{cpp/experimental/dsc erase if|map|mark=no}}
{{cpp/experimental/dsc erase if|multimap|mark=no}}
{{dsc header|experimental/set}}
{{cpp/experimental/dsc erase if|set|mark=no}}
{{cpp/experimental/dsc erase if|multiset|mark=no}}
{{dsc header|experimental/unordered_map}}
{{cpp/experimental/dsc erase if|unordered_map|mark=no}}
{{cpp/experimental/dsc erase if|unordered_multimap|mark=no}}
{{dsc header|experimental/unordered_set}}
{{cpp/experimental/dsc erase if|unordered_set|mark=no}}
{{cpp/experimental/dsc erase if|unordered_multiset|mark=no}}
{{dsc end }}

===Source code information capture===
{{dsc begin}}
{{dsc header|experimental/source_location}}
{{dsc class|cpp/experimental/source_location|a class representing information about the source code, such as file names, line numbers, and function names}}
{{dsc end}}

==={{tt|std::array}} conversion===
{{dsc begin}}
{{dsc header|experimental/array}}
{{dsc inc|cpp/experimental/dsc to array}}
{{dsc end}}

{{langlinks|ja|ru|zh}}
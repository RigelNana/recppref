{{cpp/experimental/propagate_const/title|operator{{=}}}}
{{cpp/experimental/lib extensions 2/propagate_const/navbar}}

{{dcl begin}}
{{dcl|num=1|since=libfund_ts_2|1= 
constexpr propagate_const&amp; operator=( propagate_const&amp;&amp; p ) = default;
}}
{{dcl|num=2|since=libfund_ts_2|1= 
template&lt; class U &gt;
constexpr propagate_const&amp; operator=( propagate_const&lt;U&gt;&amp;&amp; pu );
}}
{{dcl|num=3|since=libfund_ts_2|1= 
template&lt; class U &gt;
constexpr propagate_const&amp; operator=( U&amp;&amp; u );
}}
{{dcl|num=4|since=libfund_ts_2|1= 
propagate_const&amp; operator=( const propagate_const&amp; ) = delete;
}}
{{dcl end}}

Let {{tt|t_}} designate the private data member that is the wrapped pointer-like object.

@1@ Explicitly defaulted move assignment operator that move assigns {{c|this-&gt;t_}} from {{c|p.t_}}.

@2@ Assigns {{c|std::move(pu.t_)}} to {{c|this-&gt;t_}}.&lt;br&gt;&lt;!--
--&gt;{{cpp/enable_if|{{tt|U}} is implicitly convertible to {{tt|T}}}}.

@3@ Assigns {{c|std::forward&lt;U&gt;(u)}} to {{c|this-&gt;t_}}.&lt;br&gt;&lt;!--
--&gt;{{cpp/enable_if|{{tt|U}} is implicitly convertible to {{tt|T}} and {{c|std::decay_t&lt;U&gt;}} is not a specialization of {{tt|propagate_const}}}}.

@4@ Copy assignment operator is explicitly deleted. {{tt|propagate_const}} is non-copyable.

===Parameters===
{{par begin}}
{{par|p|another {{tt|propagate_const}} object to move from}}
{{par|pu|another {{tt|propagate_const}} object of a different specialization to move from}}
{{par|u|another object to assign to the contained pointer}}
{{par end}}

=== Return value ===
{{c|*this}}.

{{langlinks|de|es|ja|ru|zh}}
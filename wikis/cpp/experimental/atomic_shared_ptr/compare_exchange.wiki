{{cpp/experimental/atomic_shared_ptr/title|compare_exchange_strong|compare_exchange_weak}}
{{cpp/experimental/concurrency/atomic_shared_ptr/navbar}}
{{dcl begin}}
{{dcl|num=1|1=
bool compare_exchange_weak( std::shared_ptr&lt;T&gt;&amp; expected, const std::shared_ptr&lt;T&gt;&amp; desired,
                            std::memory_order success, std::memory_order failure ) noexcept;
}}
{{dcl|num=2|1=
bool compare_exchange_weak( std::shared_ptr&lt;T&gt;&amp; expected, std::shared_ptr&lt;T&gt;&amp;&amp; desired,
                            std::memory_order success, std::memory_order failure ) noexcept;
}}
{{dcl|num=3|1=
bool compare_exchange_weak( std::shared_ptr&lt;T&gt;&amp; expected, const std::shared_ptr&lt;T&gt;&amp; desired,
                            std::memory_order order = std::memory_order_seq_cst ) noexcept;
}}
{{dcl|num=4|1=
bool compare_exchange_weak( std::shared_ptr&lt;T&gt;&amp; expected, std::shared_ptr&lt;T&gt;&amp;&amp; desired,
                            std::memory_order order = std::memory_order_seq_cst ) noexcept;
}}
{{dcl|num=5|1=
bool compare_exchange_strong( std::shared_ptr&lt;T&gt;&amp; expected, const std::shared_ptr&lt;T&gt;&amp; desired,
                              std::memory_order success, std::memory_order failure ) noexcept;
}}
{{dcl|num=6|1=
bool compare_exchange_strong( std::shared_ptr&lt;T&gt;&amp; expected, std::shared_ptr&lt;T&gt;&amp;&amp; desired,
                              std::memory_order success, std::memory_order failure ) noexcept;
}}
{{dcl|num=7|1=
bool compare_exchange_strong( std::shared_ptr&lt;T&gt;&amp; expected, const std::shared_ptr&lt;T&gt;&amp; desired,
                              std::memory_order order = std::memory_order_seq_cst ) noexcept;
}}
{{dcl|num=8|1=
bool compare_exchange_strong( std::shared_ptr&lt;T&gt;&amp; expected, std::shared_ptr&lt;T&gt;&amp;&amp; desired,
                              std::memory_order order = std::memory_order_seq_cst ) noexcept;
}}
{{dcl end}}

Atomically compares the underlying {{tt|shared_ptr}} in {{c|*this}} with {{c|expected}}, and if they are equivalent, replaces the former with {{c|desired}} (performs read-modify-write operation). Otherwise, loads the actual value stored in {{c|*this}} into {{c|expected}} (performs load operation). The replacement is performed as if by the copy or move assignment operator of {{tt|shared_ptr}}, as appropriate.

Two {{tt|shared_ptr}}s are equivalent if and only if they store the same pointer value and share ownership.

The memory models for the read-modify-write and load operations are {{c|success}} and {{c|failure}} respectively. For overloads {{v|3,4,7,8}}, {{c|order}} is used for both read-modify-write and load operations, except that {{lc|std::memory_order_acquire}} and {{lc|std::memory_order_relaxed}} are used for the load operation if {{c|1=order == std::memory_order_acq_rel}}, or {{c|1=order == std::memory_order_release}} respectively.

The weak versions {{v|1-4}} may fail spuriously.

===Parameters===
{{par begin}}
{{par|expected|reference to the value expected to be found in the atomic object}}
{{par|desired|the value to store in the atomic object if it is as expected}}
{{par|success|the memory synchronization ordering for the read-modify-write operation if the comparison succeeds. All values are permitted}}
{{par|failure|the memory synchronization ordering for the load operation if the comparison fails. Cannot be {{lc|std::memory_order_release}} or {{lc|std::memory_order_acq_rel}} and cannot specify stronger ordering than {{c|success}}}}
{{par|order|the memory synchronization ordering for both operations}}
{{par end}}

===Return value===
{{c|true}} if the underlying atomic value was changed, {{c|false}} otherwise.

===Remarks===
{{cpp/experimental/atomic_shared_ptr/atomic remarks}}

If the compare-exchange operation return {{c|true}}, {{c|expected}} is not accessed after the atomic update step. If it returns {{c|false}}, {{c|expected}} is updated with the existing value read from the {{tt|atomic_shared_ptr}} object in the attempted atomic update. The {{tt|use_count}} update corresponding to the write to {{c|expected}} is part of the atomic operation, but the write to {{c|expected}} itself is not required to be part of the atomic operation.

For overloads {{v|1,3,5,7}}, {{c|desired}} is not accessed after the atomic update step.

For overloads {{v|2,4,6,8}}, {{c|desired}} is moved from only if the compare-exchange operation returns {{c|true}}; the moving occurs after the atomic update step.

===Notes===
The weak forms {{v|1-4}} of the functions are allowed to fail spuriously, that is, act as if {{c|*this}} and {{c|expected}} are not equivalent even when they are. When a compare-and-exchange is in a loop, the weak version will yield better performance on some platforms.

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/shared ptr/dsc atomic}}
{{dsc end}}
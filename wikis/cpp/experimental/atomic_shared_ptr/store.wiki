{{cpp/experimental/atomic_shared_ptr/title|store}}
{{cpp/experimental/concurrency/atomic_shared_ptr/navbar}}
{{dcl begin}}
{{dcl | 1=
void store( shared_ptr&lt;T&gt; desired, std::memory_order order = std::memory_order_seq_cst ) noexcept;
}}
{{dcl end}}

Atomically replaces the current value with {{tt|desired}}. Memory is affected according to the value of {{tt|order}}.

{{tt|order}} must be one of {{lc|std::memory_order_relaxed}}, {{lc|std::memory_order_release}} or {{lc|std::memory_order_seq_cst}}. Otherwise the behavior is undefined.

===Parameters===
{{par begin}}
{{par | desired | the {{tt|shared_ptr}} to store into the atomic variable}}
{{par | order | memory order constraints to enforce}}
{{par end}}

===Return value===
(none)

===Remarks===
{{cpp/experimental/atomic_shared_ptr/atomic remarks}}

===See also===
{{dsc begin}}
{{dsc inc | cpp/experimental/atomic_shared_ptr/dsc operator{{=}}}}
{{dsc inc | cpp/memory/shared ptr/dsc atomic}}
{{dsc end}}
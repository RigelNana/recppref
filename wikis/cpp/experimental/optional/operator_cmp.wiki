{{title|1=operator==, !=, &lt;, &lt;=, &gt;, &gt;={{small|(std::experimental::optional)}}}}
{{cpp/experimental/optional/navbar}}
{{dcl begin}}
{{dcl header|experimental/optional}}
{{dcl h|Compare two {{tt|optional}} objects}}
{{dcl|since=libfund_ts|num=1|1=
template&lt; class T &gt; 
constexpr bool operator==( const optional&lt;T&gt;&amp; lhs, const optional&lt;T&gt;&amp; rhs );
}}
{{dcl|since=libfund_ts|num=2|1=
template&lt; class T &gt; 
constexpr bool operator!=( const optional&lt;T&gt;&amp; lhs, const optional&lt;T&gt;&amp; rhs );
}}
{{dcl|since=libfund_ts|num=3|1=
template&lt; class T &gt; 
constexpr bool operator&lt;( const optional&lt;T&gt;&amp; lhs, const optional&lt;T&gt;&amp; rhs );
}}
{{dcl|since=libfund_ts|num=4|1=
template&lt; class T &gt; 
constexpr bool operator&lt;=( const optional&lt;T&gt;&amp; lhs, const optional&lt;T&gt;&amp; rhs );
}}
{{dcl|since=libfund_ts|num=5|1=
template&lt; class T &gt; 
constexpr bool operator&gt;( const optional&lt;T&gt;&amp; lhs, const optional&lt;T&gt;&amp; rhs );
}}
{{dcl|since=libfund_ts|num=6|1=
template&lt; class T &gt; 
constexpr bool operator&gt;=( const optional&lt;T&gt;&amp; lhs, const optional&lt;T&gt;&amp; rhs );
}}
{{dcl h|Compare an {{tt|optional}} object with a {{tt|nullopt}}}}
{{dcl|since=libfund_ts|num=7|1=
template&lt; class T &gt; 
constexpr bool operator==( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}
{{dcl|since=libfund_ts|num=8|1=
template&lt; class T &gt; 
constexpr bool operator==( std::nullopt_t, const optional&lt;T&gt;&amp; opt ) noexcept;
}}
{{dcl|since=libfund_ts|num=9|1=
template&lt; class T &gt; 
constexpr bool operator!=( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}
{{dcl|since=libfund_ts|num=10|1=
template&lt; class T &gt; 
constexpr bool operator!=( std::nullopt_t, const optional&lt;T&gt;&amp; opt ) noexcept;
}}
{{dcl|since=libfund_ts|num=11|1=
template&lt; class T &gt; 
constexpr bool operator&lt;( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}
{{dcl|since=libfund_ts|num=12|1=
template&lt; class T &gt; 
constexpr bool operator&lt;( std::nullopt_t, const optional&lt;T&gt;&amp; opt ) noexcept;
}}
{{dcl|since=libfund_ts|num=13|1=
template&lt; class T &gt; 
constexpr bool operator&lt;=( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}
{{dcl|since=libfund_ts|num=14|1=
template&lt; class T &gt; 
constexpr bool operator&lt;=( std::nullopt_t, const optional&lt;T&gt;&amp; opt ) noexcept;
}}
{{dcl|since=libfund_ts|num=15|1=
template&lt; class T &gt; 
constexpr bool operator&gt;( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}
{{dcl|since=libfund_ts|num=16|1=
template&lt; class T &gt; 
constexpr bool operator&gt;( std::nullopt_t, const optional&lt;T&gt;&amp; opt ) noexcept;
}}
{{dcl|since=libfund_ts|num=17|1=
template&lt; class T &gt; 
constexpr bool operator&gt;=( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}
{{dcl|since=libfund_ts|num=18|1=
template&lt; class T &gt; 
constexpr bool operator&gt;=( std::nullopt_t, const optional&lt;T&gt;&amp; opt ) noexcept;
}}
{{dcl h|Compare an {{tt|optional}} object with a {{tt|T}}}}
{{dcl|since=libfund_ts|num=19|1=
template&lt; class T &gt; 
constexpr bool operator==( const optional&lt;T&gt;&amp; opt, const T&amp; value );
}}
{{dcl|since=libfund_ts|num=20|1=
template&lt; class T &gt; 
constexpr bool operator==( const T&amp; value, const optional&lt;T&gt;&amp; opt );
}}
{{dcl|since=libfund_ts|num=21|1=
template&lt; class T &gt; 
constexpr bool operator!=( const optional&lt;T&gt;&amp; opt, const T&amp; value );
}}
{{dcl|since=libfund_ts|num=22|1=
template&lt; class T &gt; 
constexpr bool operator!=( const T&amp; value, const optional&lt;T&gt;&amp; opt );
}}
{{dcl|since=libfund_ts|num=23|1=
template&lt; class T &gt; 
constexpr bool operator&lt;( const optional&lt;T&gt;&amp; opt, const T&amp; value );
}}
{{dcl|since=libfund_ts|num=24|1=
template&lt; class T &gt; 
constexpr bool operator&lt;( const T&amp; value, const optional&lt;T&gt;&amp; opt );
}}
{{dcl|since=libfund_ts|num=25|1=
template&lt; class T &gt; 
constexpr bool operator&lt;=( const optional&lt;T&gt;&amp; opt, const T&amp; value );
}}
{{dcl|since=libfund_ts|num=26|1=
template&lt; class T &gt; 
constexpr bool operator&lt;=( const T&amp; value, const optional&lt;T&gt;&amp; opt );
}}
{{dcl|since=libfund_ts|num=27|1=
template&lt; class T &gt; 
constexpr bool operator&gt;( const optional&lt;T&gt;&amp; opt, const T&amp; value );
}}
{{dcl|since=libfund_ts|num=28|1=
template&lt; class T &gt; 
constexpr bool operator&gt;( const T&amp; value, const optional&lt;T&gt;&amp; opt );
}}
{{dcl|since=libfund_ts|num=29|1=
template&lt; class T &gt; 
constexpr bool operator&gt;=( const optional&lt;T&gt;&amp; opt, const T&amp; value );
}}
{{dcl|since=libfund_ts|num=30|1=
template&lt; class T &gt; 
constexpr bool operator&gt;=( const T&amp; value, const optional&lt;T&gt;&amp; opt );
}}
{{dcl end}}

Performs comparison operations on {{tt|optional}} objects.

@1-6@ Compares two {{tt|optional}} objects, {{c|lhs}} and {{c|rhs}}. The contained values are compared (using {{c|1=operator==}} for {{v|1,2}} and {{c|operator&lt;}} for {{v|3-6}}) only if both {{c|lhs}} and {{c|rhs}} contain values. Otherwise, 

::* {{c|lhs}} is considered ''equal to'' {{c|rhs}} if, and only if, both {{c|lhs}} and {{c|rhs}} do not contain a value.
::* {{c|lhs}} is considered ''less than'' {{c|rhs}} if, and only if, {{c|rhs}} contains a value and {{c|lhs}} does not.

@7-18@ Compares {{c|opt}} with a {{c|nullopt}}. Equivalent to (1-6) when comparing to an {{tt|optional}} that does not contain a value.

@19-30@ Compares {{c|opt}} with a {{c|value}}. The values are compared (using {{c|1=operator==}} for {{v|19-22}} and {{c|operator&lt;}} for {{v|23-30}}) only if {{c|opt}} contains a value. Otherwise, {{c|opt}} is considered ''less than'' {{c|value}}.

===Parameters===
{{par begin}}
{{par|lhs, rhs, opt|an {{tt|optional}} object to compare}}
{{par|value|value to compare to the contained value}}
{{par hreq}}
{{par req named|T|EqualityComparable|overloads=1,2}}
{{par end}}

===Return value===
@1@ If {{c|1=bool(lhs) != bool(rhs)}}, returns {{c|false}}.
@@ Otherwise, if {{c|1=bool(lhs) == false}} (and so {{c|bool(rhs) {{==}} false}} as well), returns {{c|true}}.
@@ Otherwise, returns {{c|1=*lhs == *rhs}}.
@2@ Returns {{c|1=!(lhs == rhs)}}.
@3@ If {{c|1=bool(rhs) == false}} returns {{c|false}}.
@@ Otherwise, if {{c|1=bool(lhs) == false}}, returns {{c|true}}.
@@ Otherwise returns {{c|*x &lt; *y}}.
@4@ Returns {{c|!(rhs &lt; lhs)}}.
@5@ Returns {{c|rhs &lt; lhs}}.
@6@ Returns {{c|!(lhs &lt; rhs)}}.
@7,8@ Returns {{c|!opt}}.
@9,10@ Returns {{c|bool(opt)}}.
@11@ Returns {{c|false}}.
@12@ Returns {{c|bool(opt)}}.
@13@ Returns {{c|!opt}}.
@14@ Returns {{c|true}}.
@15@ Returns {{c|bool(opt)}}.
@16@ Returns {{c|false}}.
@17@ Returns {{c|true}}.
@18@ Returns {{c|!opt}}.
@19@ Returns {{c|1=bool(opt) ? *opt == value : false}}.
@20@ Returns {{c|1=bool(opt) ? value == *opt : false}}.
@21@ Returns {{c|1=bool(opt) ? !(*opt == value) : true}}.
@22@ Returns {{c|1=bool(opt) ? !(value == *opt) : true}}.
@23@ Returns {{c|1=bool(opt) ? *opt &lt; value : true}}.
@24@ Returns {{c|1=bool(opt) ? value &lt; *opt : false}}.
@25@ Returns {{c|1=!(opt &gt; value)}}.
@26@ Returns {{c|1=!(value &gt; opt)}}.
@27@ Returns {{c|1=bool(opt) ? value &lt; *opt : false}}.
@28@ Returns {{c|1=bool(opt) ? *opt &lt; value : true}}.
@29@ Returns {{c|1=!(opt &lt; value)}}.
@30@ Returns {{c|1=!(value &lt; opt)}}.

===Exceptions===
@1-6@ (none)
@19-30@ (none)
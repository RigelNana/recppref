{{cpp/experimental/optional/title|operator-&gt;|operator*}}
{{cpp/experimental/optional/navbar}}
{{dcl begin}}
{{dcl|since=libfund_ts|num=1|1=
constexpr const T* operator-&gt;() const;
}}
{{dcl|since=libfund_ts|num=1|1=
constexpr T* operator-&gt;();
}}
{{dcl|since=libfund_ts|num=2|1=
constexpr const T&amp; operator*() const&amp;;
}}
{{dcl|since=libfund_ts|num=2|1=
constexpr T&amp; operator*() &amp;;
}}
{{dcl|since=libfund_ts|num=2|1=
constexpr const T&amp;&amp; operator*() const&amp;&amp;;
}}
{{dcl|since=libfund_ts|num=2|1=
constexpr T&amp;&amp; operator*() &amp;&amp;;
}}
{{dcl end}}

Accesses the contained value.

@1@ Returns a pointer to the contained value.

@2@ Returns a reference to the contained value.

The behavior is undefined if {{c|*this}} ''does not contain a value''.

===Parameters===
(none)

===Return value===
Pointer or reference to the contained value.

===Exceptions===
Throws nothing.

===Notes===
This operator does not check whether the optional contains a value. If checked access is needed, {{lc|value()}} or {{lc|value_or()}} may be used.

===Example===
{{example|code=
#include &lt;experimental/optional&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std::literals;

int main()
{
    std::experimental::optional&lt;int&gt; opt1 = 1;
    std::cout &lt;&lt; *opt1 &lt;&lt; '\n';

    std::experimental::optional&lt;std::string&gt; opt2 = "abc"s;
    std::cout &lt;&lt; opt2-&gt;size() &lt;&lt; '\n';
}
|output=
1
3
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/optional/dsc value}}
{{dsc inc|cpp/experimental/optional/dsc value_or}}
{{dsc end}}
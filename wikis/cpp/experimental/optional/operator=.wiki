{{cpp/experimental/optional/title|operator{{=}}}}
{{cpp/experimental/optional/navbar}}
{{dcl begin}}
{{dcl|since=libfund_ts|num=1|1=
optional&amp; operator=( std::experimental::nullopt_t ) noexcept;
}}
{{dcl|since=libfund_ts|num=2|1=
optional&amp; operator=( const optional&amp; other );
}}
{{dcl|since=libfund_ts|num=3|1=
optional&amp; operator=( optional&amp;&amp; other ) noexcept(/* see below */);
}}
{{dcl|since=libfund_ts|num=4|1=
template&lt; class U &gt; 
optional&amp; operator=( U&amp;&amp; value );
}}
{{dcl end}}

Replaces contents of {{c|*this}} with the contents of {{c|other}}.

@1@ If {{c|*this}} contains a value before the call, the contained value is destroyed by calling its destructor as if by {{c|val-&gt;T::~T()}}. {{c|*this}} does not contain a value after this call.

@2,3@ Assigns the state of {{c|other}}.&lt;br&gt;
* If both {{c|*this}} and {{c|other}} do not contain a value, the function has no effect.
* If {{c|*this}} contains a value, but {{c|other}} does not, then the contained value is destroyed by calling its destructor. {{c|*this}} does not contain a value after the call.
* If {{c|other}} contains a value, then depending on whether {{c|*this}} contains a value, the contained value is either [[cpp/language/direct_initialization|direct-initialized]] or assigned from {{c|*other}} {{v|2}} or {{c|std::move(*other)}} {{v|3}}. Note that a moved-from optional still ''contains a value''.

@4@ Decay-only perfect-forwarded assignment: depending on whether {{c|*this}} contains a value before the call, the contained value is either direct-initialized from {{c|std::forward&lt;U&gt;(value)}} or assigned from {{c|std::forward&lt;U&gt;(value)}}. The function does not participate in overload resolution unless {{c|std::is_same&lt;std::decay_t&lt;U&gt;, T&gt;::value}} is {{c|true}}.

===Parameters===
{{par begin}}
{{par|other|another {{tt|optional}} object whose contained value to assign}}
{{par|value|value to assign to the contained value}}
{{par hreq}}
{{par req named|T|CopyConstructible|CopyAssignable|overload=2}}
{{par req named|T|MoveConstructible|MoveAssignable|overload=3}}
{{par end}}

===Return value===
{{c|*this}}

===Exceptions===
@2-4@ Throws any exception thrown by the constructor or assignment operator of {{tt|T}}. If an exception is thrown, the initialization state of {{c|*this}} (and of {{c|other}} in case of (2)) is unchanged, i.e. if the object contained a value, it still contains a value, and the other way round. The contents of {{c|value}} and the contained values of {{c|*this}} and {{c|other}} depend on the exception safety guarantees of the operation from which the exception originates (copy-constructor, move-assignment, etc.).&lt;br&gt;
{{v|3}} has the following {{tt|noexcept}} declaration: {{noexcept|std::is_nothrow_move_assignable&lt;T&gt;::value &amp;&amp; std::is_nothrow_move_constructible&lt;T&gt;::value}}

===Notes===
An optional object {{tt|op}} may be turned into an empty optional with both {{c|1=op = {};}} and {{c|1=op = nullopt;}}.

===Example===
{{example
|code=
#include &lt;experimental/optional&gt;
#include &lt;iostream&gt;

int main()
{
    std::experimental::optional&lt;const char*&gt; s1 = "abc", s2; // constructor
    s2 = s1; // assignment
    s1 = "def"; // decaying assignment (U = char[4], T = const char*)
    std::cout &lt;&lt; *s2 &lt;&lt; ' ' &lt;&lt; *s1 &lt;&lt; '\n';
}
|output=
abc def
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/optional/dsc emplace}}
{{dsc end}}
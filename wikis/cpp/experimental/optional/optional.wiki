{{cpp/experimental/optional/title|optional}}
{{cpp/experimental/optional/navbar}}
{{dcl begin}}
{{dcl|num=1|since=libfund_ts|
constexpr optional() noexcept;
constexpr optional( std::experimental::nullopt_t ) noexcept;
}}
{{dcl|num=2|since=libfund_ts|
optional( const optional&amp; other );
}}
{{dcl|num=3|since=libfund_ts|
optional( optional&amp;&amp; other ) noexcept(/* see below */);
}}
{{dcl|num=4|since=libfund_ts|
constexpr optional( const T&amp; value );
}}
{{dcl|num=5|since=libfund_ts|
constexpr optional( T&amp;&amp; value );
}}
{{dcl|num=6|since=libfund_ts|
template&lt; class... Args &gt; 
constexpr explicit optional( std::experimental::in_place_t, Args&amp;&amp;... args );
}}
{{dcl|num=7|since=libfund_ts|
template&lt; class U, class... Args &gt;
constexpr explicit optional( std::experimental::in_place_t,
                             std::initializer_list&lt;U&gt; ilist, 
                             Args&amp;&amp;... args );
}}
{{dcl end}}

Constructs a new {{tt|optional}} object.

@1@ Constructs the object that ''does not contain a value''.
@2@ Copy constructor: If {{c|other}} contains a value, initializes the contained value as if [[cpp/language/direct_initialization|direct-initializing]] (but not direct-list-initializing) an object of type {{tt|T}} with the expression {{c|*other}}. If {{c|other}} does not contain a value, constructs an object that ''does not contain a value''.
@3@ Move constructor: If {{c|other}} contains a value, initializes the contained value as if [[cpp/language/direct_initialization|direct-initializing]] (but not direct-list-initializing) an object of type {{tt|T}} with the expression {{c|std::move(*other)}} and ''does not'' make {{c|other}} empty: a moved-from optional still ''contains a value'', but the value itself is moved from. If {{c|other}} does not contain a value, constructs an object that ''does not contain a value''.
@4@ Constructs an optional object that ''contains a value'', initialized as if [[cpp/language/direct_initialization|direct-initializing]] (but not direct-list-initializing) an object of type {{tt|T}} with the expression {{c|value}}. This constructor is {{tt|constexpr}} if the constructor of {{tt|T}} selected by direct-initialization is {{tt|constexpr}}.
@5@ Constructs an optional object that ''contains a value'', initialized as if [[cpp/language/direct_initialization|direct-initializing]] (but not direct-list-initializing) an object of type {{tt|T}} with the expression {{c|std::move(value)}}. This constructor is {{tt|constexpr}} if the constructor of {{tt|T}} selected by direct-initialization is {{tt|constexpr}}.
@6@ Constructs an optional object that ''contains a value'', initialized as if [[cpp/language/direct_initialization|direct-initializing]] (but not direct-list-initializing) an object of type {{tt|T}} from the arguments {{c|std::forward&lt;Args&gt;(args)...}}.
@7@ Constructs an optional object that ''contains a value'', initialized as if [[cpp/language/direct_initialization|direct-initializing]] (but not direct-list-initializing) an object of type {{tt|T}} from the arguments {{c|ilist, std::forward&lt;Args&gt;(args)...}}. The function does not participate in the overload resolution if {{cc|1=std::is_constructible&lt;T, std::initializer_list&lt;U&gt;&amp;, Args&amp;&amp;...&gt;::value != true}}.

===Parameters===
{{par begin}}
{{par|other|another {{tt|optional}} object whose contained value to copy}}
{{par|value|value to initialize the contained value with}}
{{par|args...|arguments to initialize the contained value with}}
{{par|ilist|initializer list to initialize the contained value with}}
{{par hreq}}
{{par req named|T|CopyConstructible|overloads=2,4}}
{{par req named|T|MoveConstructible|overloads=3,5}}
{{par end}}

===Exceptions===
@2@ Throws any exception thrown by the constructor of {{tt|T}}.

@3@ Throws any exception thrown by the constructor of {{tt|T}}. Has the following {{tt|noexcept}} declaration: {{noexcept|std::is_nothrow_move_constructible&lt;T&gt;::value}}

@4-7@ Throws any exception thrown by the constructor of {{tt|T}}.

===Example===
{{example|code=
#include &lt;experimental/optional&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::experimental::optional&lt;int&gt; o1,      // empty
                                     o2 = 1,  // init from rvalue
                                     o3 = o2; // copy-constructor

    std::experimental::optional&lt;std::string&gt; o4(std::experimental::in_place,
                                                {'a', 'b', 'c'});

    std::cout &lt;&lt; *o2 &lt;&lt; ' ' &lt;&lt; *o3 &lt;&lt; ' ' &lt;&lt; *o4 &lt;&lt; '\n';
}
|output=
1 1 abc
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/optional/dsc make_optional}}
{{dsc end}}
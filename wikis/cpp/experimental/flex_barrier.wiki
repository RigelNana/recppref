{{cpp/experimental/title|flex_barrier}}
{{fmbox|class=noprint|style=font-size: 0.8em|text='''Merged into ISO C++''' The functionality described on this page was merged into the mainline ISO C++ standard as of 7/2019; see {{ltt|cpp/thread/barrier|std::barrier}} {{mark since c++20}}}}
{{cpp/experimental/concurrency/flex_barrier/navbar}}
{{dcl begin}}
{{dcl header|experimental/barrier}}
{{dcl|since=concurrency|
class flex_barrier;
}}
{{dcl end}}

The class {{tt|std::experimental::flex_barrier}} provides a thread-coordination mechanism that allows a set of participating threads to block until an operation is completed. Unlike {{lc|std::experimental::latch}}, barriers are reusable; once the participating threads are released from a barrier's synchronization point, they can reuse the same barrier.

A barrier has a completion phase, which is executed by one of the participating threads once all threads in the set of participating threads arrive at the synchronization point. The {{tt|arrive_and_wait}} and {{tt|arrive_and_drop}} calls [[cpp/atomic/memory_order|synchronize with]] the start of the completion phase; the end of the completion phase synchronizes with the returns from all calls blocked by its completion.

{{tt|std::experimental::flex_barrier}} allows the user to control the completion phase with a function object. If the function object returns -1, the set of participating threads is unchanged (and the same set of participating threads must arrive at the synchronization point in the next cycle); otherwise the set of participating threads becomes a new set with a size equal to the returned value {{tt|N}}, and consists of the next {{tt|N}} threads to arrive at the barrier's synchronization point.

Users who do not need this functionality can use {{lc|std::experimental::barrier}}.

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/experimental/flex_barrier/dsc constructor}}
{{dsc inc|cpp/experimental/flex_barrier/dsc destructor}}
{{dsc inc|cpp/experimental/flex_barrier/dsc operator{{=}}}}

{{dsc inc|cpp/experimental/flex_barrier/dsc arrive_and_wait}}
{{dsc inc|cpp/experimental/flex_barrier/dsc arrive_and_drop}}
{{dsc end}}

{{langlinks|ja|zh}}
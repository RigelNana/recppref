{{cpp/experimental/packaged_task/title|packaged_task {{mark since libfund_ts}}}}
{{cpp/experimental/lib extensions/pmr/navbar}}
{{dcl begin}}
{{dcl|num=1|since=libfund_ts|1=
packaged_task() noexcept;
}}
{{dcl|num=2|since=libfund_ts|1=
template&lt; class F &gt;
explicit packaged_task( F&amp;&amp; f );
}}
{{dcl|num=3|since=libfund_ts|1=
template&lt; class F, class Allocator &gt;
explicit packaged_task( std::allocator_arg_t, const Allocator&amp; alloc, F&amp;&amp; f );
}}
{{dcl|num=4|since=libfund_ts|1=
packaged_task( const packaged_task&amp; ) = delete;
}}
{{dcl|num=5|since=libfund_ts|1=
packaged_task( packaged_task&amp;&amp; rhs ) noexcept;
}}
{{dcl end}}

Constructs a new {{tt|std::experimental::packaged_task}} object.

@1@ Constructs a {{tt|std::experimental::packaged_task}} object with no task and no shared state.
@2@ Constructs a {{tt|std::experimental::packaged_task}} object with a shared state and a copy of the task, initialized with {{c|std::forward&lt;F&gt;(f)}}. This constructor does not participate in overload resolution if {{c|std::decay&lt;F&gt;::type}} is the same type as {{c|std::packaged_task&lt;R(ArgTypes...)&gt;}}. 
@3@ Constructs a {{tt|std::experimental::packaged_task}} object with a shared state and a copy of the task, initialized with {{c|std::forward&lt;F&gt;(f)}}. Uses the provided allocator to allocate memory necessary to store the task, which is treated as a type-erased allocator (see below). This constructor does not participate in overload resolution if {{c|std::decay&lt;F&gt;::type}} is the same type as {{c|std::packaged_task&lt;R(ArgTypes...)&gt;}}. 
@4@ The copy constructor is deleted, {{tt|std::experimental::packaged_task}} is move-only. 
@5@ Constructs a {{tt|std::experimental::packaged_task}} with the shared state and task formerly owned by {{c|rhs}}, leaving {{c|rhs}} with no shared state and a moved-from task.

{{cpp/experimental/type erased allocator|packaged_task}}

===Parameters===
{{par begin}}
{{par|f|the callable target (function, member function, lambda-expression, functor) to execute}}
{{par|alloc|the allocator to use when storing the task}}
{{par|rhs|the {{tt|std::experimental::packaged_task}} to move from}}
{{par end}}

===Exceptions===
@2,3@ Any exceptions thrown by copy/move constructor of {{c|f}} and possiblly {{lc|std::bad_alloc}} if the allocation fails.

@4@ (none)

{{langlinks|zh}}
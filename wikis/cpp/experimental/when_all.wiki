{{cpp/experimental/title|when_all}}
{{cpp/experimental/concurrency/navbar}}
{{dcl begin}}
{{dcl header|experimental/future}}
{{dcl|num=1|since=concurrency|1=
template&lt; class InputIt &gt;
auto when_all( InputIt first, InputIt last )
    -&gt; future&lt;std::vector&lt;typename std::iterator_traits&lt;InputIt&gt;::value_type&gt;&gt;; 
}}
{{dcl|num=2|since=concurrency|1=
template&lt; class... Futures &gt;
auto when_all( Futures&amp;&amp;... futures )
    -&gt; future&lt;std::tuple&lt;std::decay_t&lt;Futures&gt;...&gt;&gt;;
}}
{{dcl end}}

Create a {{lc|std::experimental::future|future}} object that becomes ready when all of the input {{tt|future}}s and {{lc|std::experimental::shared_future|shared_future}}s become ready. The behavior is undefined if any input {{tt|future}} or {{tt|shared_future}} is invalid.

In particular, let {{tt|Sequence}} be a {{c|std::vector&lt;typename std::iterator_traits&lt;InputIt&gt;::value_type&gt;}} for {{v|1}} and {{c|std::tuple&lt;std::decay_t&lt;Futures&gt;...&gt;}} for {{v|2}}. This function template creates a shared state containing {{tt|Sequence}} and returns a future referring to the shared state. Every input {{tt|future}} is moved into the corresponding object in the {{tt|Sequence}} in the shared state, and every input {{tt|shared_future}} is copied to the corresponding object in the {{tt|Sequence}} in the shared state. The order of the objects in the {{tt|Sequence}} matches the order of arguments.

@1@ This function does not participate in overload resolution unless {{tt|InputIt}}'s value type (i.e., {{c|typename std::iterator_traits&lt;InputIt&gt;::value_type}}) is a {{lc|std::experimental::future}} or {{lc|std::experimental::shared_future}}.
@2@ This function does not participate in overload resolution unless every argument is either a (possibly cv-qualified) {{lc|std::experimental::shared_future}} or a cv-unqualified {{lc|std::experimental::future}}. (Formally, for every type {{tt|Fn}} in {{tt|Futures}}, either {{c|std::remove_reference_t&lt;Fn&gt;}} is {{c|std::experimental::future&lt;Rn&gt;}}, or {{c|std::decay_t&lt;Fn&gt;}} is {{c|std::experimental::shared_future&lt;Rn&gt;}}.)

After this call, every input {{tt|future}} is no longer valid; every input {{tt|shared_future}} remains valid.

===Return value===
A {{tt|future}} referring to the shared state created by the call. The future is always {{c|valid()}}, and it becomes ready when all of the input {{tt|future}}s and {{tt|shared_future}}s the call are ready.

@1@ If the range is empty (i.e., {{c|first {{==}} last}}), the returned {{tt|future}} contains an empty vector and is ready immediately.
@2@ If there are no arguments supplied, a {{tt|future&lt;std::tuple&lt;&gt;&gt;}} is returned and is immediately ready.

{{langlinks|zh}}
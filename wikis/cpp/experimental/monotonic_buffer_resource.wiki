{{cpp/experimental/pmr/title|monotonic_buffer_resource}}
{{cpp/experimental/lib extensions/pmr/monotonic_buffer_resource/navbar}}
{{ddcl|header=experimental/memory_resource|since=libfund_ts|
class monotonic_buffer_resource : public memory_resource;
}}

The class {{tt|std::experimental::pmr::monotonic_buffer_resource}} is a special-purpose memory resource class that releases the allocated memory only when the resource is destroyed. It is intended for very fast memory allocations in situations where memory is used to build up a few objects and then is released all at once.

{{tt|monotonic_buffer_resource}} can be constructed with an initial buffer. If there is no initial buffer, or if the buffer is exhausted, additional buffers are obtained from an ''upstream memory resource'' supplied at construction. The size of buffers obtained follows a geometric progression.

{{tt|monotonic_buffer_resource}} is not thread-safe.

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/experimental/monotonic_buffer_resource/dsc constructor}}
{{dsc inc|cpp/experimental/monotonic_buffer_resource/dsc destructor}}
{{dsc inc|cpp/experimental/monotonic_buffer_resource/dsc operator{{=}}}}

{{dsc h2|Public member functions}}
{{dsc inc|cpp/experimental/monotonic_buffer_resource/dsc release}}
{{dsc inc|cpp/experimental/monotonic_buffer_resource/dsc upstream_resource}}

{{dsc h2|Protected member functions}}
{{dsc inc|cpp/experimental/monotonic_buffer_resource/dsc do_allocate}}
{{dsc inc|cpp/experimental/monotonic_buffer_resource/dsc do_deallocate}}
{{dsc inc|cpp/experimental/monotonic_buffer_resource/dsc do_is_equal}}
{{dsc end}}
{{cpp/experimental/title|split, split_by}}
{{cpp/experimental/simd/navbar}}

{{dcl begin}}
{{dcl header|experimental/simd}}
{{dcl|since=parallelism_ts_2|num=1|
template&lt; std::size_t... Sizes, class T, class Abi &gt;
std::tuple&lt;simd&lt;T, simd_abi::deduce_t&lt;T, Sizes&gt;&gt;...&gt;
    split( const simd&lt;T, Abi&gt;&amp; v ) noexcept;
}}
{{dcl|since=parallelism_ts_2|num=2|
template&lt; std::size_t... Sizes, class T, class Abi &gt;
std::tuple&lt;simd_mask&lt;T, simd_abi::deduce_t&lt;T, Sizes&gt;&gt;...&gt;
    split( const simd_mask&lt;T, Abi&gt;&amp; v ) noexcept;
}}
{{dcl|since=parallelism_ts_2|num=3|
template&lt; class V, class Abi &gt;
std::array&lt;V, simd_size_v&lt;typename V::value_type, Abi&gt; / V::size()&gt;
    split( const simd&lt;typename V::value_type, Abi&gt;&amp; v ) noexcept;
}}
{{dcl|since=parallelism_ts_2|num=4|
template&lt; class V, class Abi &gt;
std::array&lt;V, simd_size_v&lt;typename V::value_type, Abi&gt; / V::size()&gt;
    split( const simd_mask&lt;typename V::value_type, Abi&gt;&amp; v ) noexcept;
}}
{{dcl|since=parallelism_ts_2|num=5|
template&lt; size_t N, class T, class A &gt;
array&lt;resize_simd&lt;simd_size_v&lt;T, A&gt; / N, simd&lt;T, A&gt;&gt;, N&gt;
    split_by( const simd&lt;T, A&gt;&amp; v ) noexcept;
}}
{{dcl|since=parallelism_ts_2|num=6|
template&lt; size_t N, class T, class A &gt;
array&lt;resize_simd&lt;simd_size_v&lt;T, A&gt; / N, simd_mask&lt;T, A&gt;&gt;, N&gt;
    split_by( const simd_mask&lt;T, A&gt;&amp; v ) noexcept;
}}
{{dcl end}}

Splits the input {{tt|simd}} or {{tt|simd_mask}} object into multiple {{tt|simd}} or {{tt|simd_mask}} objects.

@1,2@ Split the input object into potentially different types (e.g. types with different sizes) of objects. These functions do not participate in overloading resolution unless {{c|Sizes...}} sum up to {{c|v.size()}}.

@3,4@ Split the input object into an array of objects. These functions do not participate in overloading resolution unless
* The array element must be of type {{tt|simd}} or {{tt|simd_mask}}, for the type of {{c|v}} as {{tt|simd}} or {{tt|simd_mask}}, respectively.
* {{c|simd_size_v&lt;typename V::value_type, Abi&gt;}} is an integral multiple of {{c|V::size()}}.

@5,6@ Split the input object into an array of objects. These functions shall not participate in overload resolution unless {{c|simd_size_v&lt;T, A&gt;}} is an integral multiple of {{tt|N}}.

===Parameters===
{{par begin}}
{{par|v|the input {{tt|simd}} or {{tt|simd_mask}} object}}
{{par end}}

===Return value===
@1,2@ A tuple that contains the splitted {{tt|simd}} or {{tt|simd_mask}} objects.
@3-6@ An array that contains the splitted {{tt|simd}} or {{tt|simd_mask}} objects.

===Example===
{{example}}

{{langlinks|ja|zh}}
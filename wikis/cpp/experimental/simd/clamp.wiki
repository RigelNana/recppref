{{cpp/experimental/title|clamp}}
{{cpp/experimental/simd/navbar}}

{{ddcl|header=experimental/simd|since=parallelism_ts_2|
template&lt; class T, class Abi &gt;
simd&lt;T, Abi&gt;
clamp( const simd&lt;T, Abi&gt;&amp; v, const simd&lt;T, Abi&gt;&amp; lo, const simd&lt;T, Abi&gt;&amp; hi );
}}

===Parameters===
{{par begin}}
{{par|v|the elements to clamp}}
{{par|lo, hi|the boundaries to clamp {{c|v}} to}}
{{par end}}

===Return value===
The result of element-wise application of {{c|std::clamp(v[i], lo[i], hi[i])}} for all {{math|i âˆˆ}} {{range|0|size()}}.

===Example===
{{example
|code=
#include &lt;cstddef&gt;
#include &lt;cstdint&gt;
#include &lt;experimental/simd&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
namespace stdx = std::experimental;

void println(auto rem, auto const v)
{
    std::cout &lt;&lt; rem &lt;&lt; ": ";
    for (std::size_t i = 0; i != v.size(); ++i)
        std::cout &lt;&lt; std::setw(4) &lt;&lt; v[i] &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    stdx::fixed_size_simd&lt;int, 8&gt; a{[](int i) {
        static constexpr auto c = {-129, -128, -1, 0, 42, 127, 128, 255};
        return c.begin()[i];
    }&lt;!----&gt;};
    println("a", a);

    stdx::fixed_size_simd&lt;int, 8&gt; lo1{INT8_MIN};
    stdx::fixed_size_simd&lt;int, 8&gt; hi1{INT8_MAX};
    const auto b = stdx::clamp(a, lo1, hi1);
    println("b", b);

    stdx::fixed_size_simd&lt;int, 8&gt; lo2{0};
    stdx::fixed_size_simd&lt;int, 8&gt; hi2{UINT8_MAX};
    const auto c = stdx::clamp(a, lo2, hi2);
    println("c", c);
}
|output=
a: -129 -128   -1    0   42  127  128  255 
b: -128 -128   -1    0   42  127  127  127 
c:    0    0    0    0   42  127  128  255
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc clamp}}
{{dsc end}}

{{langlinks|zh}}
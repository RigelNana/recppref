{{cpp/experimental/simd/title|1=operator+=,-=,*=,/=,%=,&amp;=,{{!}}=,^=,&lt;&lt;=,&gt;&gt;=}}
{{cpp/experimental/simd/simd/navbar}}

{{dcl begin}}
{{dcl|num=1|since=parallelism_ts_2|1=
friend simd&amp; operator+=( simd&amp; lhs, const simd&amp; rhs ) noexcept;
}}
{{dcl|num=2|since=parallelism_ts_2|1=
friend simd&amp; operator-=( simd&amp; lhs, const simd&amp; rhs ) noexcept;
}}
{{dcl|num=3|since=parallelism_ts_2|1=
friend simd&amp; operator*=( simd&amp; lhs, const simd&amp; rhs ) noexcept;
}}
{{dcl|num=4|since=parallelism_ts_2|1=
friend simd&amp; operator/=( simd&amp; lhs, const simd&amp; rhs ) noexcept;
}}
{{dcl|num=5|since=parallelism_ts_2|1=
friend simd&amp; operator%=( simd&amp; lhs, const simd&amp; rhs ) noexcept;
}}
{{dcl|num=6|since=parallelism_ts_2|1=
friend simd&amp; operator&amp;=( simd&amp; lhs, const simd&amp; rhs ) noexcept;
}}
{{dcl|num=7|since=parallelism_ts_2|1=
friend simd&amp; operator{{!}}=( simd&amp; lhs, const simd&amp; rhs ) noexcept;
}}
{{dcl|num=8|since=parallelism_ts_2|1=
friend simd&amp; operator^=( simd&amp; lhs, const simd&amp; rhs ) noexcept;
}}
{{dcl|num=9|since=parallelism_ts_2|1=
friend simd&amp; operator&lt;&lt;=( simd&amp; lhs, const simd&amp; rhs ) noexcept;
}}
{{dcl|num=10|since=parallelism_ts_2|1=
friend simd&amp; operator&lt;&lt;=( simd&amp; lhs, int n ) noexcept;
}}
{{dcl|num=11|since=parallelism_ts_2|1=
friend simd&amp; operator&gt;&gt;=( simd&amp; lhs, const simd&amp; rhs ) noexcept;
}}
{{dcl|num=12|since=parallelism_ts_2|1=
friend simd&amp; operator&gt;&gt;=( simd&amp; lhs, int n ) noexcept;
}}
{{dcl end}}

Applies the given compound assignment operator element-wise to each corresponding element of the operands such that {{simd_for_all_i}} the result is equivalent to:

@1@ {{c|1=lhs[i] += rhs[i]}}
@2@ {{c|1=lhs[i] -= rhs[i]}}
@3@ {{c|1=lhs[i] *= rhs[i]}}
@4@ {{c|1=lhs[i] /= rhs[i]}}
@5@ {{c|1=lhs[i] %= rhs[i]}}
@6@ {{c|1=lhs[i] &amp;= rhs[i]}}
@7@ {{c|1=lhs[i] {{!}}= rhs[i]}}
@8@ {{c|1=lhs[i] ^= rhs[i]}}
@9@ {{c|1=lhs[i] &lt;&lt;= rhs[i]}}
@10@ {{c|1=lhs[i] &lt;&lt;= n}}
@11@ {{c|1=lhs[i] &gt;&gt;= rhs[i]}}
@12@ {{c|1=lhs[i] &gt;&gt;= n}}

===Parameters===
{{par begin}}
{{par|lhs|left operands}}
{{par|rhs|right operands}}
{{par|n|number of bits to shift each element in {{c|lhs}}}}
{{par end}}

===Return value===
{{c|lhs}}

===Example===
{{example
|Computes {{c|cosh(β)² - sinh(β)²}} ({{c|1=== 1}}) for some arbitrary angle {{math|β}}, on SIMD data.
|code=
#include &lt;cstddef&gt;
#include &lt;experimental/simd&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;
namespace stq = std::experimental;

void print(const std::string_view rem, const auto x)
{
    std::cout &lt;&lt; rem &lt;&lt; '\n' &lt;&lt; std::fixed;
    for (std::size_t t{}; t != x.size(); ++t)
        std::cout &lt;&lt; std::setw(10) &lt;&lt; x[t] &lt;&lt; ((t + 1) % 8 ? ',' : '\n');
    std::cout &lt;&lt; '\n';
}

int main()
{
    constexpr auto N = 32UZ;
    using elem_t = long double;

    stq::fixed_size_simd&lt;elem_t, N&gt; x{[](elem_t i) { return i / N; }&lt;!----&gt;};
    stq::fixed_size_simd&lt;elem_t, N&gt; y{x};
    x = stq::cosh(x);
    y = stq::sinh(y);
    x *= x;
    y *= y;
    print("cosh(x)²:", x);
    print("sinh(x)²:", y);
    auto z = x - y;
    print("cosh(x)² - sinh(x)²:", z);
    std::cout &lt;&lt; "reduce(z) = " &lt;&lt; stq::reduce(z) &lt;&lt; '\n';
}
|output=
cosh(x)²:
  1.000000,  1.000977,  1.003911,  1.008815,  1.015707,  1.024613,  1.035570,  1.048620
  1.063813,  1.081209,  1.100877,  1.122892,  1.147342,  1.174321,  1.203934,  1.236299
  1.271540,  1.309797,  1.351217,  1.395964,  1.444212,  1.496149,  1.551979,  1.611920
  1.676205,  1.745086,  1.818833,  1.897733,  1.982094,  2.072247,  2.168544,  2.271360

sinh(x)²:
  0.000000,  0.000977,  0.003911,  0.008815,  0.015707,  0.024613,  0.035570,  0.048620
  0.063813,  0.081209,  0.100877,  0.122892,  0.147342,  0.174321,  0.203934,  0.236299
  0.271540,  0.309797,  0.351217,  0.395964,  0.444212,  0.496149,  0.551979,  0.611920
  0.676205,  0.745086,  0.818833,  0.897733,  0.982094,  1.072247,  1.168544,  1.271360

cosh(x)² - sinh(x)²:
  1.000000,  1.000000,  1.000000,  1.000000,  1.000000,  1.000000,  1.000000,  1.000000
  1.000000,  1.000000,  1.000000,  1.000000,  1.000000,  1.000000,  1.000000,  1.000000
  1.000000,  1.000000,  1.000000,  1.000000,  1.000000,  1.000000,  1.000000,  1.000000
  1.000000,  1.000000,  1.000000,  1.000000,  1.000000,  1.000000,  1.000000,  1.000000

reduce(z) = 32.000000
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/simd/simd/dsc operator_arith}}
{{dsc end}}
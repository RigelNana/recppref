{{cpp/experimental/simd/title|1=operator==,!=,&lt;,&lt;=,&gt;,&gt;=}}
{{cpp/experimental/simd/simd/navbar}}

{{dcl begin}}
{{dcl|num=1|since=parallelism_ts_2|1=
friend simd_mask operator==( const simd&amp; lhs, const simd&amp; rhs ) noexcept;
}}
{{dcl|num=2|since=parallelism_ts_2|1=
friend simd_mask operator!=( const simd&amp; lhs, const simd&amp; rhs ) noexcept;
}}
{{dcl|num=3|since=parallelism_ts_2|1=
friend simd_mask operator&lt;( const simd&amp; lhs, const simd&amp; rhs ) noexcept;
}}
{{dcl|num=4|since=parallelism_ts_2|1=
friend simd_mask operator&lt;=( const simd&amp; lhs, const simd&amp; rhs ) noexcept;
}}
{{dcl|num=5|since=parallelism_ts_2|1=
friend simd_mask operator&gt;( const simd&amp; lhs, const simd&amp; rhs ) noexcept;
}}
{{dcl|num=6|since=parallelism_ts_2|1=
friend simd_mask operator&gt;=( const simd&amp; lhs, const simd&amp; rhs ) noexcept;
}}
{{dcl end}}

Applies the given comparison element-wise to each corresponding element of the operands.
Returns a {{ltt|cpp/experimental/simd/simd_mask}} such that {{simd_for_all_i}} the {{math|i}}{{sup|th}} element equals:

@1@ {{c|1=lhs[i] == rhs[i]}}.
@2@ {{c|1=lhs[i] != rhs[i]}}.
@3@ {{c|1=lhs[i] &lt;  rhs[i]}}.
@4@ {{c|1=lhs[i] &lt;= rhs[i]}}.
@5@ {{c|1=lhs[i] &gt;  rhs[i]}}.
@6@ {{c|1=lhs[i] &gt;= rhs[i]}}.

===Parameters===
{{par begin}}
{{par|lhs|left operands}}
{{par|rhs|right operands}}
{{par end}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;initializer_list&gt;
#include &lt;iterator&gt;

#include &lt;experimental/simd&gt;
namespace stdx = std::experimental;

int main()
{
    using V = stdx::fixed_size_simd&lt;int, 4&gt;;
    using M = stdx::fixed_size_simd_mask&lt;int, 4&gt;;

    auto assert_equivalence = [](M&amp;&amp; x, std::initializer_list&lt;int&gt;&amp;&amp; y)
    {
        for (decltype(M::size()) i{}; i != M::size(); ++i)
            assert(x[i] == std::cbegin(y)[i]);
    };

    V a{2}, b, c{3};
    b[0] = 1, b[1] = 2, b[2] = 3, b[3] = 4;

    // a == {2, 2, 2, 2}
    // b == {1, 2, 3, 4}
    // c == {3, 3, 3, 3}

    assert_equivalence(a == a, {1, 1, 1, 1});
    assert_equivalence(a == b, {0, 1, 0, 0});
    assert_equivalence(b == c, {0, 0, 1, 0});
    assert_equivalence(a == c, {0, 0, 0, 0});

    assert_equivalence(a != a, {0, 0, 0, 0});
    assert_equivalence(a != b, {1, 0, 1, 1});
    assert_equivalence(b != c, {1, 1, 0, 1});
    assert_equivalence(a != c, {1, 1, 1, 1});

    assert_equivalence(a &lt; a, {0, 0, 0, 0});
    assert_equivalence(a &lt; b, {0, 0, 1, 1});
    assert_equivalence(b &lt; c, {1, 1, 0, 0});
    assert_equivalence(a &lt; c, {1, 1, 1, 1});
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/simd/dsc all_of}}
{{dsc inc|cpp/experimental/simd/dsc popcount}}
{{dsc inc|cpp/experimental/simd/dsc find_first_set}}
{{dsc inc|cpp/experimental/simd/dsc simd_mask}}
{{dsc end}}
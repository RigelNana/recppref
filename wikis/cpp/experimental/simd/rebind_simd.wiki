{{cpp/experimental/title|rebind_simd|resize_simd}}
{{cpp/experimental/simd/navbar}}

{{dcl begin}}
{{dcl header|experimental/simd}}
{{dcl|num=1|since=parallelism_ts_2|
template&lt; class T, class V &gt;
struct rebind_simd;
}}
{{dcl|num=2|since=parallelism_ts_2|
template&lt; int N, class V &gt;
struct resize_simd;
}}
{{dcl end}}

Creates a {{rlpt|simd}} or {{rlpt|simd_mask}} type with a different element type or size. The new type likely uses an ABI tag type different from {{tt|V::abi_type}}.

@1@ Changes the element type to {{tt|T}} and keeps the size unchanged.
@2@ Changes the size to {{tt|N}} and keeps the element type unchanged.

===Template parameters===
{{par begin}}
{{par|T|the new element type; an arithmetic type other than {{c|bool}}}}
{{par|N|the new number of elements}}
{{par|V|a {{c|simd}} or {{c|simd_mask}} type}}
{{par end}}

===Member types===
{{dsc begin}}
{{dsc hitem|Name|Definition}}
{{dsc|{{tt|type}}|{{tt|simd}} or {{tt|simd_mask}} type with a different element type {{v|1}} or size {{v|2}}}}
{{dsc end}}

===Helper types===
{{dcl begin}}
{{dcl|since=parallelism_ts_2|1=
template&lt; class T, class V &gt;
using rebind_simd_t = typename rebind_simd&lt;T, V&gt;::type;
}}
{{dcl|since=parallelism_ts_2|1=
template&lt; int N, class V &gt;
using resize_simd_t = typename resize_simd&lt;N, V&gt;::type;
}}
{{dcl end}}

===Example===
{{example
|code=
#include &lt;experimental/simd&gt;
#include &lt;iostream&gt;

namespace stdx = std::experimental;
using floatv = stdx::native_simd&lt;float&gt;;
 
// use double precision internally
floatv dp(floatv x)
{
    using doublev = stdx::rebind_simd_t&lt;double, floatv&gt;;
    return stdx::static_simd_cast&lt;floatv&gt;(stdx::simd_cast&lt;doublev&gt;(x) - 1.234);
}
 
template&lt;class T&gt;
stdx::resize_simd_t&lt;T::size() / 2, T&gt; partial_reduction(T x)
{
    auto [lo, hi] = stdx::split&lt;stdx::resize_simd_t&lt;T::size() / 2, T&gt;&gt;(x);
    return lo + hi;
}
 
int main() 
{
    floatv x([](auto i) { return 1.234f + std::numeric_limits&lt;float&gt;::epsilon() * i; });
    x = dp(x);
    const auto y = partial_reduction(x);
    for (unsigned i = 0; i &lt; y.size(); ++i)
        std::cout &lt;&lt; y[i] &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|p=true
|output=1.73569e-07 4.11987e-07
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/simd/dsc deduce}}
{{dsc end}}

{{langlinks|ja|zh}}
{{cpp/experimental/title|where}}
{{cpp/experimental/simd/navbar}}

{{dcl begin}}
{{dcl header|experimental/simd}}
{{dcl|since=parallelism_ts_2|num=1|
template&lt; class T, class Abi &gt;
where_expression&lt;simd_mask&lt;T, Abi&gt;, simd&lt;T, Abi&gt;&gt;
    where( const typename simd&lt;T, Abi&gt;::mask_type&amp; mask,
           simd&lt;T, Abi&gt;&amp; value ) noexcept;
}}
{{dcl|since=parallelism_ts_2|num=2|
template&lt; class T, class Abi &gt;
const_where_expression&lt;simd_mask&lt;T, Abi&gt;, const simd&lt;T, Abi&gt;&gt;
    where( const typename simd&lt;T, Abi&gt;::mask_type&amp; mask,
           const simd&lt;T, Abi&gt;&amp; value ) noexcept;
}}
{{dcl|since=parallelism_ts_2|num=3|
template&lt; class T, class Abi &gt;
where_expression&lt;simd_mask&lt;T, Abi&gt;, simd_mask&lt;T, Abi&gt;&gt;
    where( const type_identity_t&lt;simd_mask&lt;T, Abi&gt;&gt;&amp; mask,
           simd_mask&lt;T, Abi&gt;&amp; value ) noexcept;
}}
{{dcl|since=parallelism_ts_2|num=4|
template&lt; class T, class Abi &gt;
const_where_expression&lt;simd_mask&lt;T, Abi&gt;, const simd_mask&lt;T, Abi&gt;&gt;
    where( const type_identity_t&lt;simd_mask&lt;T, Abi&gt;&gt;&amp; mask,
           const simd_mask&lt;T, Abi&gt;&amp; value ) noexcept;
}}
{{dcl|since=parallelism_ts_2|num=5|
template&lt; class T &gt;
where_expression&lt;bool, T&gt;
    where( /*see below*/ mask, T&amp; value ) noexcept;
}}
{{dcl|since=parallelism_ts_2|num=6|
template&lt; class T &gt;
const_where_expression&lt;bool, const T&gt;
    where( /*see below*/ mask, const T&amp; value ) noexcept;
}}
{{dcl end}}

Constructs a new {{rlpt|const_where_expression}} or {{rlpt|where_expression}}.

@1-6@ Constructs a ''where_expression'' from given mask and value parameters.

===Parameters===
@1-4@
{{par begin}}
{{par|mask|the {{rlpt|simd_mask}} object}}
{{par|value|reference to the {{rlpt|simd}} object that mask applies on}}
{{par end}}

@5,6@
{{par begin}}
{{par|mask|the mask of type {{c/core|bool}}}}
{{par|value|reference to the scalar that mask applies on}}
{{par end}}

===Return value===
The constructed {{rlpt|const_where_expression}} or {{rlpt|where_expression}}.

===Notes===
@5,6@ Uses implementation defined type of mask, so that implicit conversions from other types to {{c/core|bool}} is disabled.

===Example===
{{example}}

{{langlinks|zh}}
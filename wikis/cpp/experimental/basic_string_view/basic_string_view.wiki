{{cpp/experimental/basic_string_view/title|basic_string_view}}
{{cpp/experimental/basic_string_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=libfund_ts| 
constexpr basic_string_view() noexcept;
}}
{{dcl|num=2|since=libfund_ts| 
constexpr basic_string_view( const basic_string_view&amp; other ) noexcept {{=}} default;
}}
{{dcl|num=3|since=libfund_ts|
template&lt;class Allocator&gt;
basic_string_view( const std::basic_string&lt;CharT, Traits, Allocator&gt;&amp; str ) noexcept;
}}
{{dcl|num=4|since=libfund_ts|
constexpr basic_string_view( const CharT* s, size_type count );
}}
{{dcl|num=5|since=libfund_ts|
constexpr basic_string_view( const CharT* s );
}}
{{dcl end}}

@1@ Default constructor. Constructs an empty {{tt|basic_string_view}}.
@2@ Copy constructor. Constructs a view of the same content as {{c|other}}.
@3@ Constructs a view of the first {{c|str.size()}} characters of the character array starting with the element pointed by {{c|str.data()}}.
@4@ Constructs a view of the first {{c|count}} characters of the character array starting with the element pointed by {{c|s}}. {{c|s}} can contain null characters. The behavior is undefined if {{range|s|s + count}} is not a valid range (even though the constructor may not access any of the elements of this range).
@5@ Constructs a view of the null-terminated character string pointed to by {{c|s}}, not including the terminating null character. The length of the view is determined as if by {{c|Traits::length(s)}}. The behavior is undefined if {{range|s|s + Traits::length(s)}} is not a valid range (even though the constructor may not access any of the elements of this range).

===Parameters===
{{par begin}}
{{par|other|another view to initialize the view with}}
{{par|str|a C++ string object to initialize view with}}
{{par|s|pointer to a character array or a C string to initialize the view with}}
{{par|count|number of characters to include in the view}}
{{par end}} 

===Exceptions===
@4,5@ Throws nothing.

===Complexity===
@1-4@ Constant.
@5@ Linear in length of {{c|s}}.

===Example===
{{example
|code=
#include &lt;experimental/string_view&gt;
#include &lt;iostream&gt;

int main()
{
    std::string cppstr = "Foo";
    char array[3] = {'B', 'a', 'r'};
        
    std::experimental::string_view cppstr_v(cppstr);
    std::experimental::string_view array_v(array, sizeof array);
    
    std::experimental::wstring_view wcstr_v = L"xyzzy";
    
    std::cout &lt;&lt; cppstr_v &lt;&lt; '\n'
              &lt;&lt; array_v &lt;&lt; '\n'
              &lt;&lt; wcstr_v.size() &lt;&lt; '\n';
}
|output=
Foo
Bar
5
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/basic_string_view/dsc operator{{=}}}}
{{dsc end}}
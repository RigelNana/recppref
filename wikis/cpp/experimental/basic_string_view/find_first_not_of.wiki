{{cpp/experimental/basic_string_view/title | find_first_not_of }}
{{cpp/experimental/basic_string_view/navbar}}
{{dcl begin}}
{{dcl | num=1 | since=libfund_ts |
constexpr size_type 
    find_first_not_of(basic_string_view v, size_type pos {{=}} 0) const noexcept;
}}
{{dcl | num=2 | since=libfund_ts |
constexpr size_type
    find_first_not_of(CharT c, size_type pos {{=}} 0) const noexcept;
}}
{{dcl | num=3 | since=libfund_ts |
constexpr size_type
    find_first_not_of(const CharT* s, size_type pos, size_type count) const;
}}
{{dcl | num=4 | since=libfund_ts |
constexpr size_type
    find_first_not_of(const CharT* s, size_type pos {{=}} 0) const;
}}
{{dcl end}}

Finds the first character not equal to any of the characters in the given character sequence.

@1@Finds the first character not equal to any of the characters of {{tt|v}} in this view, starting at position {{tt|pos}}.
@2@Equivalent to {{c|find_first_not_of(basic_string_view(&amp;c, 1), pos)}}.
@3@Equivalent to {{c|find_first_not_of(basic_string_view(s, count), pos)}}.
@4@Equivalent to {{c|find_first_not_of(basic_string_view(s), pos)}}.

===Parameters===
{{par begin}}
{{par | v | view to search for}}
{{par | pos | position at which to start the search}}
{{par | count | length of the string of characters to compare}}
{{par | s | pointer to a string of characters to compare}}
{{par | ch | character to compare}}
{{par end}} 

===Return value===
Position of the first character not equal to any of the characters in the given string, or {{lc|npos}} if no such character is found.

===Complexity===
O({{tt|size()}} * {{tt|v.size()}}) at worst.

===See also===
{{dsc begin}}
{{dsc inc | cpp/experimental/basic_string_view/dsc find}}
{{dsc inc | cpp/experimental/basic_string_view/dsc rfind}}
{{dsc inc | cpp/experimental/basic_string_view/dsc find_first_of}}
{{dsc inc | cpp/experimental/basic_string_view/dsc find_last_of}}
{{dsc inc | cpp/experimental/basic_string_view/dsc find_last_not_of}}
{{dsc end}}
{{title|1=operator==,!=,&lt;,&lt;=,&gt;,&gt;=&lt;small&gt;(std::experimental::basic_string_view)&lt;/small&gt;}}
{{cpp/experimental/basic_string_view/navbar}}
{{dcl begin}}
{{dcl header|experimental/string_view}}
{{dcl h|Compare two {{tt|basic_string_view}} objects}}
{{dcl|num=1|since=libfund_ts|1=
template&lt; class CharT, class Traits &gt;
constexpr bool operator==( basic_string_view &lt;CharT,Traits&gt; lhs, 
                           basic_string_view &lt;CharT,Traits&gt; rhs ) noexcept;
}}
{{dcl|num=2|since=libfund_ts|1=
template&lt; class CharT, class Traits &gt;
constexpr bool operator!=( basic_string_view &lt;CharT,Traits&gt; lhs, 
                           basic_string_view &lt;CharT,Traits&gt; rhs ) noexcept;
}}
{{dcl|num=3|since=libfund_ts|1=
template&lt; class CharT, class Traits &gt;
constexpr bool operator&lt;( basic_string_view &lt;CharT,Traits&gt; lhs, 
                          basic_string_view &lt;CharT,Traits&gt; rhs ) noexcept;
}}
{{dcl|num=4|since=libfund_ts|1=
template&lt; class CharT, class Traits &gt;
constexpr bool operator&lt;=( basic_string_view &lt;CharT,Traits&gt; lhs, 
                           basic_string_view &lt;CharT,Traits&gt; rhs ) noexcept;
}}
{{dcl|num=5|since=libfund_ts|1=
template&lt; class CharT, class Traits &gt;
constexpr bool operator&gt;( basic_string_view &lt;CharT,Traits&gt; lhs, 
                          basic_string_view &lt;CharT,Traits&gt; rhs ) noexcept;
}}
{{dcl|num=6|since=libfund_ts|1=
template&lt; class CharT, class Traits &gt;
constexpr bool operator&gt;=( basic_string_view &lt;CharT,Traits&gt; lhs, 
                           basic_string_view &lt;CharT,Traits&gt; rhs ) noexcept;
}}
{{dcl end}}

Compares two views.

All comparisons are done via the {{lc|compare()}} member function (which itself is defined in terms of {{tt|Traits::compare()}}):

* Two views are equal if both the size of {{c|lhs}} and {{c|rhs}} are equal and each character in {{c|lhs}} has an equivalent character in {{c|rhs}} at the same position.

* The ordering comparisons are done lexicographically -- the comparison is performed by a function equivalent to {{lc|std::lexicographical_compare}}.

The implementation shall provide sufficient additional {{tt|constexpr}} and {{tt|noexcept}} overloads of these functions so that a {{tt|basic_string_view&lt;CharT,Traits&gt;}} object {{tt|sv}} may be compared to another object {{tt|t}} with an implicit conversion to {{tt|basic_string_view&lt;CharT,Traits&gt;}}, with semantics identical to comparing {{tt|sv}} and {{tt|basic_string_view&lt;CharT,Traits&gt;(t)}}.

===Parameters===
{{par begin}}
{{par|lhs, rhs|views to compare}}
{{par end}} 

===Return value===
{{c|true}} if the corresponding comparison holds, {{c|false}} otherwise.

===Complexity===
Linear in the size of the views.
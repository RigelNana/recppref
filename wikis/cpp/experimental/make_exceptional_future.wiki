{{cpp/experimental/title|make_exceptional_future}}
{{cpp/experimental/concurrency/navbar}}
{{dcl begin}}
{{dcl header|experimental/future}}
{{dcl|num=1|since=concurrency|1=
template&lt; class T &gt;
future&lt;T&gt; make_exceptional_future( std::exception_ptr ex );
}}
{{dcl|num=2|since=concurrency|1=
template&lt; class T, class E &gt;
future&lt;T&gt; make_exceptional_future( E ex );
}}
{{dcl end}}

@1@ Creates a shared state of type {{tt|T}} that is immediately ready and stores the exception pointer {{c|ex}}, then return a future associated with that shared state, as if by {{c| 
promise&lt;T&gt; p; p.set_exception(ex); return p.get_future();}}. The behavior is undefined if {{c|ex}} is null.

@2@ Creates a shared state of type {{tt|T}} that is immediately ready and stores an exception pointer created from {{c|ex}}, then return a future associated with that shared state, as if by {{c| 
promise&lt;T&gt; p; p.set_exception(std::make_exception_ptr(ex)); return p.get_future();}}.

===Return value===
A {{tt|future}} object associated with the shared state that was created.

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/dsc make_ready_future}}
{{dsc end}}

{{langlinks|zh}}
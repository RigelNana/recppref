{{cpp/experimental/flex_barrier/title|arrive_and_drop}}
{{cpp/experimental/concurrency/flex_barrier/navbar}}
{{dcl begin}}
{{dcl | since=concurrency | 1=
void arrive_and_drop();
}}
{{dcl end}}

Arrive at the {{tt|flex_barrier}}'s synchronization point and remove the current thread from the set of participating threads. It is unspecified whether this function blocks until the completion phase has ended. If the function blocks, the calling thread may be chosen to execute the completion phase.

The behavior is undefined if the calling thread is not in the set of participating threads of this {{tt|flex_barrier}}.

Calls to {{tt|arrive_and_drop}} synchronizes with the start of the completion phase of the {{tt|flex_barrier}}. If the call blocks, then the completion of the completion phase synchronizes with the return from the call.

Calls to {{tt|arrive_and_drop}} and {{tt|arrive_and_wait}} never introduce data races with themselves or each other.

=== Exceptions ===
Throws nothing.

=== Notes ===
The completion phase will be executed even if every participating thread calls {{tt|arrive_and_drop}}.

After a thread calls {{tt|arrive_and_drop}} on a {{tt|flex_barrier}}, it cannot call any member function on that barrier except for the destructor, even if the function object invoked by the completion phase returns a positive value.

=== See also ===
{{dsc begin}}
{{dsc inc | cpp/experimental/flex_barrier/dsc arrive_and_wait }}
{{dsc end}}

{{langlinks|zh}}
{{cpp/experimental/flex_barrier/title|arrive_and_wait}}
{{cpp/experimental/concurrency/flex_barrier/navbar}}
{{dcl begin}}
{{dcl | since=concurrency | 1=
void arrive_and_wait();
}}
{{dcl end}}

Blocks and arrives at the {{tt|flex_barrier}}'s synchronization point.

The behavior is undefined if the calling thread is not in the set of participating threads of this {{tt|flex_barrier}}.

Calls to {{tt|arrive_and_wait}} synchronizes with the start of the completion phase of the {{tt|flex_barrier}}. The completion of the completion phase synchronizes with the return from the call.

Calls to {{tt|arrive_and_drop}} and {{tt|arrive_and_wait}} never introduce data races with themselves or each other.

=== Notes ===
It is safe for a thread to call either {{tt|arrive_and_wait()}} or {{tt|arrive_and_drop()}} immediately on return from this call (provided that the function object for the completion phase did not return zero). It's not necessary to ensure that all blocked threads have exited {{tt|arrive_and_wait()}} before a thread calls it again.

The completion phase executes the function object specified when the {{tt|flex_barrier}} was constructed. If it returns -1, the set of participating threads is unchanged; otherwise, the set of participating threads is a new set with the size equal to the return value {{tt|N}}, and consists of the next {{tt|N}} threads to arrive at the synchronization point. If {{c|1=N == 0}}, the {{tt|flex_barrier}} can only be destroyed.

The initial set of participating threads for a {{tt|flex_barrier}} constructed for {{tt|num_threads}} threads is the first {{tt|num_threads}} to arrive at its synchronization point.

=== Exceptions ===
Throws nothing.

=== See also ===
{{dsc begin}}
{{dsc inc | cpp/experimental/flex_barrier/dsc arrive_and_drop }}
{{dsc end}}

{{langlinks|zh}}
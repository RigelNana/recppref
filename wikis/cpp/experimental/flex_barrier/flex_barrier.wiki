{{cpp/experimental/flex_barrier/title|flex_barrier}}
{{cpp/experimental/concurrency/flex_barrier/navbar}}

{{dcl begin}}
{{dcl|num=1|since=concurrency|1= 
explicit flex_barrier( std::ptrdiff_t num_threads );
}}
{{dcl|num=2|since=concurrency|1=
template&lt; class F &gt;
flex_barrier( std::ptrdiff_t num_threads, F completion );
}}
{{dcl|num=3|since=concurrency|1= 
flex_barrier( const flex_barrier &amp; ) = delete;
}}
{{dcl end}}

@1@ Has the same effect as {{c|flex_barrier(num_threads, c)}}, where {{tt|c}} is a {{named req|Callable}} object whose invocation returns -1 and has no side effects.
@2@ Constructs a {{tt|flex_barrier}} for {{c|num_threads}} participating threads, using {{c|completion}} for the completion phase. The set of participating threads is the first {{c|num_threads}} threads to arrive at the synchronization point.
@3@ Copy constructor is deleted; {{tt|flex_barrier}} is not copyable.

===Parameters===
{{par begin}}
{{par|num_threads|the number of participating threads for the {{tt|flex_barrier}}; must be non-negative}}
{{par|completion|a function object controlling the completion phase; must be {{named req|Callable}} with no arguments and return type {{lc|std::ptrdiff_t}}, and when invoked, must return a value no less than -1 and must not throw an exception}}
{{par hreq}}
{{par req named|F|CopyConstructible}}
{{par end}}

=== Notes ===
If {{c|num_threads}} is zero, the set of participating threads is empty, and flex_barrier can only be destroyed.

{{langlinks|zh}}
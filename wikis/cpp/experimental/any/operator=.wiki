{{cpp/experimental/any/title|operator{{=}}}}
{{cpp/experimental/any/navbar}}
{{dcl begin}}
{{dcl|since=libfund_ts|num=1|1=
any&amp; operator=( const any&amp; rhs );
}}
{{dcl|since=libfund_ts|num=2|1=
any&amp; operator=( any&amp;&amp; rhs ) noexcept;
}}
{{dcl|since=libfund_ts|num=3|1=
template&lt; typename ValueType &gt;
    any&amp; operator=( ValueType&amp;&amp; rhs );
}}
{{dcl end}}

Assigns contents to the contained value. 

@1@ Assigns by copying the state of {{c|rhs}}, as if by {{c|any(rhs).swap(*this)}}.
@2@ Assigns by moving the state of {{c|rhs}}, as if by {{c|any(std::move(rhs)).swap(*this)}}. {{c|rhs}} is left in a valid but unspecified state after the assignment.
@3@ Assigns the type and value of {{c|rhs}}, as if by {{c|any(std::forward&lt;ValueType&gt;(rhs)).swap(*this)}}. If {{c|1=std::is_copy_constructible&lt;std::decay_t&lt;ValueType&gt;&gt;::value}} is {{c|false}}, the program is ill-formed. {{cpp/enable if|{{c|std::decay_t&lt;ValueType&gt;}} is not the same type as {{c|any}}}}.

===Template parameters===
{{par begin}}
{{par|ValueType|contained value type}}
{{par hreq}}
{{par req named|std::decay_t&lt;ValueType&gt;|CopyConstructible}}
{{par end}}

===Parameters===
{{par begin}}
{{par|rhs|object whose contained value to assign}}
{{par end}}

===Return value===
{{c|*this}}

===Exceptions===
@1,3@ Throws {{lc|bad_alloc}} or any exception thrown by the constructor of the contained type. If an exception is thrown, there are no effects (strong exception guarantee).

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/any/dsc constructor}}
{{dsc end}}
{{cpp/title|n=experimental::|any_cast}}
{{cpp/experimental/any/navbar}}
{{dcl begin}}
{{dcl|since=libfund_ts|num=1|
template&lt;class ValueType&gt;
    ValueType any_cast(const any&amp; operand);
}}
{{dcl|since=libfund_ts|num=2|
template&lt;class ValueType&gt;
    ValueType any_cast(any&amp; operand);
}}
{{dcl|since=libfund_ts|num=3|
template&lt;class ValueType&gt;
    ValueType any_cast(any&amp;&amp; operand);
}}
{{dcl|since=libfund_ts|num=4|
template&lt;class ValueType&gt;
    const ValueType* any_cast(const any* operand) noexcept;
}}
{{dcl|since=libfund_ts|num=5|
template&lt;class ValueType&gt;
    ValueType* any_cast(any* operand) noexcept;
}}
{{dcl end}}

Performs type-safe access to the contained object.

For {{v|1-3}}, the program is ill-formed if {{tt|ValueType}} is not a reference and {{c|std::is_copy_constructible&lt;ValueType&gt;::value}} is {{c|false}}.

===Parameters===
{{par begin}}
{{par|operand|target {{tt|any}} object}}
{{par end}} 

===Return value===
@1@ Returns {{c|*any_cast&lt;std::add_const_t&lt;std::remove_reference_t&lt;ValueType&gt;&gt;&gt;(&amp;operand)}}.
@2,3@ Returns {{c|*any_cast&lt;std::remove_reference_t&lt;ValueType&gt;&gt;(&amp;operand)}}.
@4,5@ If {{c|operand}} is not a null pointer, and the {{tt|typeid}} of the requested {{tt|ValueType}} matches that of the contents of {{c|operand}}, a pointer to the value contained by {{c|operand}}, otherwise a null pointer.

===Exceptions===
@1-3@ Throws {{tt|bad_any_cast}} if the {{tt|typeid}} of the requested {{tt|ValueType}} does not match that of the contents of {{c|operand}}.
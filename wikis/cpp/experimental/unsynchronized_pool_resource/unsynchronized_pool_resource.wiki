{{cpp/experimental/pmr/unsynchronized_pool_resource/title|unsynchronized_pool_resource}}
{{cpp/experimental/lib extensions/pmr/unsynchronized_pool_resource/navbar}}
{{dcl begin}}
{{dcl|since=libfund_ts|num=1|1=
unsynchronized_pool_resource();
}}
{{dcl|since=libfund_ts|num=2|1=
explicit unsynchronized_pool_resource( memory_resource* upstream );
}}
{{dcl|since=libfund_ts|num=3|1=
explicit unsynchronized_pool_resource( const pool_options&amp; opts );
}}
{{dcl|since=libfund_ts|num=4|1=
unsynchronized_pool_resource( const pool_options&amp; opts,
                              memory_resource* upstream );
}}
{{dcl|since=libfund_ts|num=5|1=
unsynchronized_pool_resource( const unsynchronized_pool_resource&amp; ) = delete;
}}
{{dcl end}}

Constructs an {{tt|unsynchronized_pool_resource}}.

@1-4@ Constructs an {{tt|unsynchronized_pool_resource}} using the specified upstream memory resource and tuned according to the specified options. The resulting object holds a copy of {{c|upstream}} but does not own the resource to which {{c|upstream}} points.&lt;br/&gt;
The overloads not taking {{c|opts}} as a parameter uses a default constructed instance of {{ltt|cpp/experimental/pool_options}} as the options. The overloads not taking {{c|upstream}} as a parameter uses the return value of {{c|std::experimental::pmr::get_default_resource()}} as the upstream memory resource.

@5@ Copy constructor is deleted.

===Parameters===
{{par begin}}
{{par|opts|a {{c|pool_options}} struct containing the constructor options}}
{{par|upstream|the upstream memory resource to use}}
{{par end}}

===Exceptions===
@1-4@ Throws only if a call to the {{tt|allocate()}} function of the upstream resource throws. It is unspecified if or under what conditions such a call takes place.
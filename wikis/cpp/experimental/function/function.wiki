{{cpp/experimental/function/title|function}}
{{cpp/experimental/lib extensions/pmr/navbar}}
{{dcl begin}}
{{dcl|num=1|since=libfund_ts|
function() noexcept;
}}
{{dcl|num=2|since=libfund_ts|
function( std::nullptr_t ) noexcept;
}}
{{dcl|num=3|since=libfund_ts|
function( const function&amp; other );
}}
{{dcl|num=4|since=libfund_ts|
function( function&amp;&amp; other );
}}
{{dcl|num=5|since=libfund_ts|
template&lt; class F &gt; 
function( F f );
}}
{{dcl rev multi|num=6
|since1=libfund_ts|dcl1=
template&lt; class Alloc &gt;
function( std::allocator_arg_t, const Alloc&amp; alloc ) noexcept;
|since2=libfund_ts_3|dcl2=
function( std::allocator_arg_t,
          const allocator_type&amp; alloc ) noexcept;
}}
{{dcl rev multi|num=7 
|since1=libfund_ts|dcl1=
template&lt; class Alloc &gt;
function( std::allocator_arg_t, const Alloc&amp; alloc, 
          std::nullptr_t ) noexcept;
|since2=libfund_ts_3|dcl2=
function( std::allocator_arg_t, const allocator_type&amp; alloc, 
          std::nullptr_t ) noexcept;
}}
{{dcl rev multi|num=8
|since1=libfund_ts|dcl1=
template&lt; class Alloc &gt;
function( std::allocator_arg_t, const Alloc&amp; alloc, 
          const function&amp; other );
|since2=libfund_ts_3|dcl2=
function( std::allocator_arg_t, const allocator_type&amp; alloc, 
          const function&amp; other );
}}
{{dcl rev multi|num=9
|since1=libfund_ts|dcl1=
template&lt; class Alloc &gt;
function( std::allocator_arg_t, const Alloc&amp; alloc, 
          function&amp;&amp; other );
|since2=libfund_ts_3|dcl2=
function( std::allocator_arg_t, const allocator_type&amp; alloc, 
          function&amp;&amp; other );
}}
{{dcl rev multi|num=10
|since1=libfund_ts|dcl1=
template&lt; class F, class Alloc &gt; 
function( std::allocator_arg_t, const Alloc&amp; alloc, F f );
|since2=libfund_ts_3|dcl2= 
function( std::allocator_arg_t, const allocator_type&amp; alloc, F f );
}}
{{dcl end}}

Constructs a {{tt|std::experimental::function}} from a variety of sources.

@1,2@ Creates an ''empty'' function.

@3@ Copies the ''target'' of {{c|other}} to the ''target'' of {{c|*this}}. If {{c|other}} is ''empty'', {{c|*this}} will be ''empty'' after the call too.

@4@ Moves the ''target'' of {{c|other}} to the ''target'' of {{c|*this}}. If {{c|other}} is ''empty'', {{c|*this}} will be ''empty'' after the call too. {{rev inl|since=libfund_ts_3|After construction, {{c|*this}} stores a copy of {{c|other.get_allocator()}}.}}

@5@ Initializes the ''target'' with a copy of {{c|f}}. If {{c|f}} is a null pointer to function or null pointer to member, {{c|*this}} will be ''empty'' after the call. This constructor does not participate in overload resolution unless f is {{named req|Callable}} for argument types {{tt|Args...}} and return type {{tt|R}}.

@6-10@ Same as {{v|1-5}} except that {{c|alloc}} is used to allocate memory for any internal data structures that the {{tt|function}} might use. {{rev inl|until=libfund_ts_3|These constructors treat {{c|alloc}} as a type-erased allocator (see below).}}

{{rrev multi
|since1=libfund_ts|rev1=
After construction via {{v|1-5}}, {{c|this-&gt;get_memory_resource()}} returns the same value as {{c|std::experimental::pmr::get_default_resource()}} during construction.
|since2=libfund_ts_3|rev2=
After construction via {{v|1-3}} and {{v|5}}, {{c|*this}} stores a default constructed {{c|std::pmr::polymorphic_allocator&lt;&gt;}}.
}}

When the ''target'' is a function pointer or a {{lc|std::reference_wrapper}}, small object optimization is guaranteed, that is, these targets are always directly stored inside the {{lc|std::experimental::function}} object, no dynamic allocation takes place. Other large objects may be constructed in dynamic allocated storage and accessed by the {{lc|std::experimental::function}} object through a pointer.

If a constructor moves or copies a function object, including an instance of {{tt|std::experimental::function}}, then that move or copy is performed by [[cpp/memory/uses_allocator|''using-allocator construction'']] with allocator {{rev inl|until=libfund_ts_3|{{c|this-&gt;get_memory_resource()}}}}{{rev inl|since=libfund_ts_3|{{c|this-&gt;get_allocator()}}}}.

{{cpp/experimental/type erased allocator|function}}

===Parameters===
{{par begin}}
{{par|other|the function object used to initialize {{c|*this}}}}
{{par|f|a callable used to initialize {{c|*this}}}}
{{par|alloc|an allocator used for internal memory allocation}}
{{par hreq}}
{{par req named|F|CopyConstructible|Callable}}
{{par end}}

===Exceptions===
@3,8@ Does not throw if {{c|other}}'s ''target'' is a function pointer or a {{lc|std::reference_wrapper}}, otherwise may throw {{lc|std::bad_alloc}} or any exception thrown by the copy constructor of the stored callable object.

@4@ (none)

@5,10@ Does not throw if {{c|f}} is a function pointer or a {{lc|std::reference_wrapper}}, otherwise may throw {{lc|std::bad_alloc}} or any exception thrown by the copy constructor of the stored callable object.

@9@ (none)

===Example===
{{example
|code=
|output=
}}

{{langlinks|zh}}
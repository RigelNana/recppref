{{title|Parallelized version of existing algorithms {{mark since parallelism ts}}}}
{{cpp/experimental/parallelism/navbar}}
{{fmbox|class=noprint|style=font-size: 0.8em|text='''Merged into ISO C++''' The functionality described on this page was merged into the mainline ISO C++ standard as of 3/2016; see [[cpp/algorithm|the algorithm library]] {{mark since c++17}}}}

The C++ Extensions for Parallelism TS provides parallelized versions of the following 69 existing algorithms. Each of the following parallelized algorithms
* is declared in the {{tt|std::experimental::parallel}} namespace, &lt;!-- technically, it's in parallel::v1, but we ignore the inline namespace for other purposes too --&gt;
* does not participate in overload resolution unless {{tt|is_execution_policy&lt;std::decay_t&lt;ExecutionPolicy&gt;&gt;::value}} is {{tt|true}}, and
* has the same semantics as the corresponding existing algorithm in the C++ standard library, except as noted in the page on [[cpp/experimental/parallelism/parallel algorithms|parallel algorithms]].

&lt;!-- The {{dsc header}}s below are intentionally commented out, since the Parallelism TS doesn't appear to actually specify which header these parallelized algorithms live in :( --&gt;

{{dsc begin}}
{{dsc h2|Non-modifying sequence operations}}
{{dsc hitem|Parallelized algorithm|Existing algorithm}}
&lt;!-- {{dsc header|experimental/algorithm}} --&gt; 
{{cpp/experimental/parallelism/existing|all_of|
template&lt; class ExecutionPolicy, class InputIt, class UnaryPred &gt;
bool all_of( ExecutionPolicy&amp;&amp; policy, InputIt first, InputIt last,
             UnaryPred p );
}}
{{cpp/experimental/parallelism/existing|any_of|
template&lt; class ExecutionPolicy, class InputIt, class UnaryPred &gt;
bool any_of( ExecutionPolicy&amp;&amp; policy, InputIt first, InputIt last,
             UnaryPred p );
}}
{{cpp/experimental/parallelism/existing|none_of|
template&lt; class ExecutionPolicy, class InputIt, class UnaryPred &gt;
bool none_of( ExecutionPolicy&amp;&amp; policy, InputIt first, InputIt last,
              UnaryPred p );
}}
{{cpp/experimental/parallelism/existing|count|
template&lt; class ExecutionPolicy, class InputIt, class T &gt;
typename iterator_traits&lt;InputIt&gt;::difference_type
    count( ExecutionPolicy&amp;&amp; policy, InputIt first, InputIt last, 
           const T &amp;value );
}}
{{cpp/experimental/parallelism/existing|count_if|
template&lt; class ExecutionPolicy, class InputIt, class UnaryPred &gt;
typename iterator_traits&lt;InputIt&gt;::difference_type
    count_if( ExecutionPolicy&amp;&amp; policy, InputIt first, InputIt last,
              UnaryPred p );
}}
{{cpp/experimental/parallelism/existing|mismatch|
template&lt; class ExecutionPolicy, class InputIt1, class InputIt2 &gt;
std::pair&lt;InputIt1,InputIt2&gt;
    mismatch( ExecutionPolicy&amp;&amp; policy,
              InputIt1 first1, InputIt1 last1,
              InputIt2 first2 );

template&lt; class ExecutionPolicy, class InputIt1, 
          class InputIt2, class BinaryPred &gt;
std::pair&lt;InputIt1,InputIt2&gt;
    mismatch( ExecutionPolicy&amp;&amp; policy,
              InputIt1 first1, InputIt1 last1,
              InputIt2 first2, BinaryPred p );

template&lt; class ExecutionPolicy, class InputIt1, class InputIt2 &gt;
std::pair&lt;InputIt1,InputIt2&gt;
    mismatch( ExecutionPolicy&amp;&amp; policy,
              InputIt1 first1, InputIt1 last1,
              InputIt2 first2, InputIt2 last2 );

template&lt; class ExecutionPolicy, class InputIt1,
          class InputIt2, class BinaryPred &gt;
std::pair&lt;InputIt1,InputIt2&gt;
    mismatch( ExecutionPolicy&amp;&amp; policy,
              InputIt1 first1, InputIt1 last1,
              InputIt2 first2, InputIt2 last2, BinaryPred p );
}}
{{cpp/experimental/parallelism/existing|equal|
template&lt; class ExecutionPolicy, class InputIt1, class InputIt2 &gt;
bool equal( ExecutionPolicy&amp;&amp; policy,
            InputIt1 first1, InputIt1 last1,
            InputIt2 first2 );

template&lt; class ExecutionPolicy, class InputIt1, 
          class InputIt2, class BinaryPred &gt;
bool equal( ExecutionPolicy&amp;&amp; policy,
            InputIt1 first1, InputIt1 last1,
            InputIt2 first2, BinaryPred p );

template&lt; class ExecutionPolicy, class InputIt1, class InputIt2 &gt;
bool equal( ExecutionPolicy&amp;&amp; policy,
            InputIt1 first1, InputIt1 last1,
            InputIt2 first2, InputIt2 last2 );

template&lt; class ExecutionPolicy, class InputIt1,
          class InputIt2, class BinaryPred &gt;
bool equal( ExecutionPolicy&amp;&amp; policy,
            InputIt1 first1, InputIt1 last1, 
            InputIt2 first2, InputIt2 last2, BinaryPred p );
}}
{{cpp/experimental/parallelism/existing|find|
template&lt; class ExecutionPolicy, class InputIt, class T &gt;
InputIt find( ExecutionPolicy&amp;&amp; policy, InputIt first, InputIt last,
              const T&amp; value );
}}
{{cpp/experimental/parallelism/existing|find_if|
template&lt; class ExecutionPolicy, class InputIt, class UnaryPred &gt;
InputIt find_if( ExecutionPolicy&amp;&amp; policy, InputIt first, InputIt last,
                 UnaryPred p );
}}
{{cpp/experimental/parallelism/existing|find_if_not|
template&lt; class ExecutionPolicy, class InputIt, class UnaryPred &gt;
InputIt find_if_not( ExecutionPolicy&amp;&amp; policy,
                     InputIt first, InputIt last, 
                     UnaryPred p );
}}
{{cpp/experimental/parallelism/existing|find_end|
template&lt; class ExecutionPolicy, class ForwardIt1, class ForwardIt2 &gt;
ForwardIt1 find_end( ExecutionPolicy&amp;&amp; policy,
                     ForwardIt1 first, ForwardIt1 last,
                     ForwardIt2 s_first, ForwardIt2 s_last );
        
template&lt; class ExecutionPolicy, class ForwardIt1,
          class ForwardIt2, class BinaryPred &gt;
ForwardIt1 find_end( ExecutionPolicy&amp;&amp; policy,
                     ForwardIt1 first, ForwardIt1 last,
                     ForwardIt2 s_first, ForwardIt2 s_last,
                     BinaryPred p );
}}
{{cpp/experimental/parallelism/existing|find_first_of|
template&lt; class ExecutionPolicy, class InputIt, class ForwardIt &gt;
InputIt find_first_of( ExecutionPolicy&amp;&amp; policy,
                       InputIt first, InputIt last,
                       ForwardIt s_first, ForwardIt s_last );

template&lt; class ExecutionPolicy, class InputIt,
          class ForwardIt, class BinaryPred &gt;
InputIt find_first_of( ExecutionPolicy&amp;&amp; policy,
                       InputIt first, InputIt last,
                       ForwardIt s_first, ForwardIt s_last,
                       BinaryPred p );
}}
{{cpp/experimental/parallelism/existing|adjacent_find|
template&lt; class ExecutionPolicy, class ForwardIt &gt;
ForwardIt adjacent_find( ExecutionPolicy&amp;&amp; policy, 
                         ForwardIt first, ForwardIt last );
        
template&lt; class ExecutionPolicy, class ForwardIt, class BinaryPred &gt;
ForwardIt adjacent_find( ExecutionPolicy&amp;&amp; policy, 
                         ForwardIt first, ForwardIt last,
                         BinaryPred p );
}}
{{cpp/experimental/parallelism/existing|search|
template&lt; class ExecutionPolicy, class ForwardIt1, class ForwardIt2 &gt;
ForwardIt1 search( ExecutionPolicy&amp;&amp; policy, 
                   ForwardIt1 first, ForwardIt1 last,
                   ForwardIt2 s_first, ForwardIt2 s_last );

template&lt; class ExecutionPolicy, class ForwardIt1,
          class ForwardIt2, class BinaryPred &gt;
ForwardIt1 search( ExecutionPolicy&amp;&amp; policy,
                   ForwardIt1 first, ForwardIt1 last,
                   ForwardIt2 s_first, ForwardIt2 s_last,
                   BinaryPred p );
}}
{{cpp/experimental/parallelism/existing|search_n|
template&lt; class ExecutionPolicy, class ForwardIt, class Size, class T &gt;
ForwardIt search_n( ExecutionPolicy&amp;&amp; policy,
                    ForwardIt first, ForwardIt last,
                    Size count, const T&amp; value );
        
template&lt; class ExecutionPolicy, class ForwardIt,
          class Size, class T, class BinaryPred &gt;
ForwardIt search_n( ExecutionPolicy&amp;&amp; policy,
                    ForwardIt first, ForwardIt last,
                    Size count, const T&amp; value, 
                    BinaryPred p );
}}

{{dsc h2|Modifying sequence operations}}
{{dsc hitem|Parallelized algorithm|Existing algorithm}}
&lt;!-- {{dsc header|experimental/algorithm}} --&gt; 
{{cpp/experimental/parallelism/existing|copy|
template&lt; class ExecutionPolicy, class InputIt, class OutputIt &gt;
OutputIt copy( ExecutionPolicy&amp;&amp; policy, InputIt first, InputIt last, 
               OutputIt d_first );
}}
{{cpp/experimental/parallelism/existing|copy_if|
template&lt; class ExecutionPolicy, class InputIt,
          class OutputIt, class UnaryPred &gt;
OutputIt copy_if( ExecutionPolicy&amp;&amp; policy, InputIt first, InputIt last,
                  OutputIt d_first, UnaryPred pred );
}}
{{cpp/experimental/parallelism/existing|copy_n|
template&lt; class ExecutionPolicy, class InputIt,
          class Size, class OutputIt &gt;
OutputIt copy_n( ExecutionPolicy&amp;&amp; policy, InputIt first, Size count,
                 OutputIt result );
}}
{{cpp/experimental/parallelism/existing|move|override=cpp/algorithm/move|
template&lt; class ExecutionPolicy, class InputIt, class OutputIt &gt;
OutputIt move( ExecutionPolicy&amp;&amp; policy, InputIt first, InputIt last,
               OutputIt d_first );
}}
{{cpp/experimental/parallelism/existing|fill|
template&lt; class ExecutionPolicy, class ForwardIt, class T &gt;
void fill( ExecutionPolicy&amp;&amp; policy, ForwardIt first, ForwardIt last,
           const T&amp; value );
}}
{{cpp/experimental/parallelism/existing|fill_n|
template&lt; class ExecutionPolicy, class OutputIt, class Size, class T &gt;
OutputIt fill_n( ExecutionPolicy&amp;&amp; policy, OutputIt first, Size count,
                 const T&amp; value );
}}
{{cpp/experimental/parallelism/existing|transform|
template&lt; class ExecutionPolicy, class InputIt, 
          class OutputIt, class UnaryOp &gt;
OutputIt transform( ExecutionPolicy&amp;&amp; policy, 
                    InputIt first1, InputIt last1, 
                    OutputIt d_first, UnaryOp unary_op );

template&lt; class ExecutionPolicy, class InputIt1, class InputIt2,
          class OutputIt, class BinaryOp &gt;
OutputIt transform( ExecutionPolicy&amp;&amp; policy, 
                    InputIt1 first1, InputIt1 last1, 
                    InputIt2 first2, OutputIt d_first,
                    BinaryOp binary_op );
}}
{{cpp/experimental/parallelism/existing|generate|
template&lt; class ExecutionPolicy, class ForwardIt, class Generator &gt;
void generate( ExecutionPolicy&amp;&amp; policy, ForwardIt first, ForwardIt last,
               Generator g );
}}
{{cpp/experimental/parallelism/existing|generate_n|
template&lt; class ExecutionPolicy, class OutputIt,
          class Size, class Generator &gt;
OutputIt generate_n( ExecutionPolicy&amp;&amp; policy, OutputIt first,
                     Size count, Generator g );
}}
{{cpp/experimental/parallelism/existing|remove|override=cpp/algorithm/remove|
template&lt; class ExecutionPolicy, class ForwardIt, class T &gt;
ForwardIt remove( ExecutionPolicy&amp;&amp; policy,
                  ForwardIt first, ForwardIt last, const T&amp; value );
}}
{{cpp/experimental/parallelism/existing|remove_if|
template&lt; class ExecutionPolicy, class ForwardIt, class UnaryPred &gt;
ForwardIt remove_if( ExecutionPolicy&amp;&amp; policy, 
                     ForwardIt first, ForwardIt last, UnaryPred p );
}}
{{cpp/experimental/parallelism/existing|remove_copy|
template&lt; class ExecutionPolicy, class InputIt, class OutputIt, class T &gt;
OutputIt remove_copy( ExecutionPolicy&amp;&amp; policy, 
                      InputIt first, InputIt last, 
                      OutputIt d_first, const T&amp; value );
}}
{{cpp/experimental/parallelism/existing|remove_copy_if|
template&lt; class ExecutionPolicy, class InputIt,
          class OutputIt, class UnaryPred &gt;
OutputIt remove_copy_if( ExecutionPolicy&amp;&amp; policy, 
                         InputIt first, InputIt last, 
                         OutputIt d_first, UnaryPred p );
}}
{{cpp/experimental/parallelism/existing|replace|
template&lt; class ExecutionPolicy, class ForwardIt, class T &gt;
void replace( ExecutionPolicy&amp;&amp; policy,
              ForwardIt first, ForwardIt last,
              const T&amp; old_value, const T&amp; new_value );
}}
{{cpp/experimental/parallelism/existing|replace_if|
template&lt; class ExecutionPolicy, class ForwardIt,
          class UnaryPred, class T &gt;
void replace_if( ExecutionPolicy&amp;&amp; policy,
                 ForwardIt first, ForwardIt last,
                 UnaryPred p, const T&amp; new_value );
}}
{{cpp/experimental/parallelism/existing|replace_copy|
template&lt; class ExecutionPolicy, class InputIt, class OutputIt, class T &gt;
OutputIt replace_copy( ExecutionPolicy&amp;&amp; policy, 
                       InputIt first, InputIt last, OutputIt d_first,
                       const T&amp; old_value, const T&amp; new_value );
}}
{{cpp/experimental/parallelism/existing|replace_copy_if|
template&lt; class ExecutionPolicy, class InputIt, class OutputIt,
          class UnaryPred, class T &gt;
OutputIt replace_copy_if( ExecutionPolicy&amp;&amp; policy, 
                          InputIt first, InputIt last, OutputIt d_first,
                          UnaryPred p, const T&amp; new_value );
}}
{{cpp/experimental/parallelism/existing|swap_ranges|
template&lt; class ExecutionPolicy, class ForwardIt1, class ForwardIt2 &gt;
ForwardIt2 swap_ranges( ExecutionPolicy&amp;&amp; policy,
                        ForwardIt1 first1, ForwardIt1 last1,
                        ForwardIt2 first2 );
}}
{{cpp/experimental/parallelism/existing|reverse|
template&lt; class ExecutionPolicy, class BidirIt &gt;
void reverse( ExecutionPolicy&amp;&amp; policy, BidirIt first, BidirIt last );
}}
{{cpp/experimental/parallelism/existing|reverse_copy|
template&lt; class ExecutionPolicy, class BidirIt, class OutputIt &gt;
OutputIt reverse_copy( ExecutionPolicy&amp;&amp; policy, 
                       BidirIt first, BidirIt last, OutputIt d_first );
}}
{{cpp/experimental/parallelism/existing|rotate|
template&lt; class ExecutionPolicy, class ForwardIt &gt;
ForwardIt rotate( ExecutionPolicy&amp;&amp; policy, 
                  ForwardIt first, ForwardIt n_first, ForwardIt last );
}}
{{cpp/experimental/parallelism/existing|rotate_copy|
template&lt; class ExecutionPolicy, class ForwardIt, class OutputIt &gt;
OutputIt rotate_copy( ExecutionPolicy&amp;&amp; policy, 
                      ForwardIt first, ForwardIt n_first, ForwardIt last,
                      OutputIt d_first );
}}
{{cpp/experimental/parallelism/existing|unique|
template&lt; class ExecutionPolicy, class ForwardIt &gt;
ForwardIt unique( ExecutionPolicy&amp;&amp; policy, 
                  ForwardIt first, ForwardIt last );

template&lt; class ExecutionPolicy, class ForwardIt, class BinaryPred &gt;
ForwardIt unique( ExecutionPolicy&amp;&amp; policy, 
                  ForwardIt first, ForwardIt last, BinaryPred p );
}}
{{cpp/experimental/parallelism/existing|unique_copy|
template&lt; class ExecutionPolicy, class InputIt, class OutputIt &gt;
OutputIt unique_copy( ExecutionPolicy&amp;&amp; policy, 
                      InputIt first, InputIt last,
                      OutputIt d_first );

template&lt; class ExecutionPolicy, class InputIt,
          class OutputIt, class BinaryPred &gt;
OutputIt unique_copy( ExecutionPolicy&amp;&amp; policy, 
                      InputIt first, InputIt last,
                      OutputIt d_first, BinaryPred p );
}}
{{dsc h2|Partitioning operations}}
{{dsc hitem|Parallelized algorithm|Existing algorithm}}
&lt;!-- {{dsc header|experimental/algorithm}} --&gt; 
{{cpp/experimental/parallelism/existing|is_partitioned|
template&lt; class ExecutionPolicy, class InputIt, class UnaryPred &gt;
bool is_partitioned( ExecutionPolicy&amp;&amp; policy, 
                     InputIt first, InputIt last, UnaryPred p );
}}
{{cpp/experimental/parallelism/existing|partition|
template&lt; class ExecutionPolicy, class ForwardIt, class UnaryPred &gt;
ForwardIt partition( ExecutionPolicy&amp;&amp; policy, 
                     ForwardIt first, ForwardIt last, UnaryPred p );
}}
{{cpp/experimental/parallelism/existing|partition_copy|
template&lt; class ExecutionPolicy, class InputIt, class OutputIt1,
          class OutputIt2, class UnaryPred &gt;
std::pair&lt;OutputIt1, OutputIt2&gt;
     partition_copy( ExecutionPolicy&amp;&amp; policy, 
                     InputIt first, InputIt last,
                     OutputIt1 d_first_true, OutputIt2 d_first_false,
                     UnaryPred p );
}}
{{cpp/experimental/parallelism/existing|stable_partition|
template&lt; class ExecutionPolicy, class BidirIt, class UnaryPred &gt;
BidirIt stable_partition( ExecutionPolicy&amp;&amp; policy, 
                          BidirIt first, BidirIt last, UnaryPred p );
}}
{{dsc h2|Sorting operations}}
{{dsc hitem|Parallelized algorithm|Existing algorithm}}
&lt;!-- {{dsc header|experimental/algorithm}} --&gt; 
{{cpp/experimental/parallelism/existing|is_sorted|
template&lt; class ExecutionPolicy, class ForwardIt &gt;
bool is_sorted( ExecutionPolicy&amp;&amp; policy,
                ForwardIt first, ForwardIt last );

template&lt; class ExecutionPolicy, class ForwardIt, class Compare &gt;
bool is_sorted( ExecutionPolicy&amp;&amp; policy, 
                ForwardIt first, ForwardIt last, Compare cmp );
}}
{{cpp/experimental/parallelism/existing|is_sorted_until|
template&lt; class ExecutionPolicy, class ForwardIt &gt;
ForwardIt is_sorted_until( ExecutionPolicy&amp;&amp; policy,
                           ForwardIt first, ForwardIt last );

template&lt; class ExecutionPolicy, class ForwardIt, class Compare &gt;
ForwardIt is_sorted_until( ExecutionPolicy&amp;&amp; policy, 
                           ForwardIt first, ForwardIt last, 
                           Compare cmp );
}}
{{cpp/experimental/parallelism/existing|sort|
template&lt; class ExecutionPolicy, class RandomIt &gt;
void sort( ExecutionPolicy&amp;&amp; policy, RandomIt first, RandomIt last );

template&lt; class ExecutionPolicy, class RandomIt, class Compare &gt;
void sort( ExecutionPolicy&amp;&amp; policy, 
           RandomIt first, RandomIt last, Compare cmp );
}}
{{cpp/experimental/parallelism/existing|partial_sort|
template&lt; class ExecutionPolicy, class RandomIt &gt;
void partial_sort( ExecutionPolicy&amp;&amp; policy,
                   RandomIt first, RandomIt middle, RandomIt last );

template&lt; class ExecutionPolicy, class RandomIt, class Compare &gt;
void partial_sort( ExecutionPolicy&amp;&amp; policy, 
                   RandomIt first, RandomIt middle, RandomIt last,
                   Compare cmp );
}}
{{cpp/experimental/parallelism/existing|partial_sort_copy|
template&lt; class ExecutionPolicy, class InputIt, class RandomIt &gt;
RandomIt partial_sort_copy( ExecutionPolicy&amp;&amp; policy, 
                            InputIt first, InputIt last,
                            RandomIt d_first, RandomIt d_last );

template&lt; class ExecutionPolicy, class InputIt,
          class RandomIt, class Compare &gt;
RandomIt partial_sort_copy( ExecutionPolicy&amp;&amp; policy, 
                            InputIt first, InputIt last,
                            RandomIt d_first, RandomIt d_last,
                            Compare cmp );
}}
{{cpp/experimental/parallelism/existing|stable_sort|
template&lt; class ExecutionPolicy, class RandomIt &gt;
void stable_sort( ExecutionPolicy&amp;&amp; policy, 
                  RandomIt first, RandomIt last );

template&lt; class ExecutionPolicy, class RandomIt, class Compare &gt;
void stable_sort( ExecutionPolicy&amp;&amp; policy,
                  RandomIt first, RandomIt last, Compare cmp );
}}
{{cpp/experimental/parallelism/existing|nth_element|
template&lt; class ExecutionPolicy, class RandomIt &gt;
void nth_element( ExecutionPolicy&amp;&amp; policy,
                  RandomIt first, RandomIt nth, RandomIt last );

template&lt; class ExecutionPolicy, class RandomIt, class Compare &gt;
void nth_element( ExecutionPolicy&amp;&amp; policy,
                  RandomIt first, RandomIt nth, RandomIt last,
                  Compare cmp );
}}
{{dsc h2|Set operations (on sorted ranges)}}
{{dsc hitem|Parallelized algorithm|Existing algorithm}}
&lt;!-- {{dsc header|experimental/algorithm}} --&gt; 
{{cpp/experimental/parallelism/existing|merge|
template&lt; class ExecutionPolicy, class InputIt1,
          class InputIt2, class OutputIt &gt;
OutputIt merge( ExecutionPolicy&amp;&amp; policy,
                InputIt1 first1, InputIt1 last1,
                InputIt2 first2, InputIt2 last2,
                OutputIt d_first );

template&lt; class ExecutionPolicy, class InputIt1, class InputIt2,
          class OutputIt, class Compare &gt;
OutputIt merge( ExecutionPolicy&amp;&amp; policy, 
                InputIt1 first1, InputIt1 last1,
                InputIt2 first2, InputIt2 last2,
                OutputIt d_first, Compare cmp );
}}
{{cpp/experimental/parallelism/existing|inplace_merge|
template&lt; class ExecutionPolicy, class BidirIt &gt;
void inplace_merge( ExecutionPolicy&amp;&amp; policy,
                    BidirIt first, BidirIt middle, BidirIt last );

template&lt; class ExecutionPolicy, class BidirIt, class Compare &gt;
void inplace_merge( ExecutionPolicy&amp;&amp; policy,
                    BidirIt first, BidirIt middle, BidirIt last,
                    Compare cmp );
}}
{{cpp/experimental/parallelism/existing|includes|
template&lt; class ExecutionPolicy, class InputIt1, class InputIt2 &gt;
bool includes( ExecutionPolicy&amp;&amp; policy,
               InputIt1 first1, InputIt1 last1,
               InputIt2 first2, InputIt2 last2 );

template&lt; class ExecutionPolicy, class InputIt1,
          class InputIt2, class Compare &gt;
bool includes( ExecutionPolicy&amp;&amp; policy,
               InputIt1 first1, InputIt1 last1,
               InputIt2 first2, InputIt2 last2, Compare cmp );
}}
{{cpp/experimental/parallelism/existing|set_difference|
template&lt; class ExecutionPolicy, class InputIt1,
          class InputIt2, class OutputIt &gt;
OutputIt set_difference( ExecutionPolicy&amp;&amp; policy, 
                         InputIt1 first1, InputIt1 last1,
                         InputIt2 first2, InputIt2 last2,
                         OutputIt d_first );

template&lt; class ExecutionPolicy, class InputIt1, class InputIt2,
          class OutputIt, class Compare &gt;
OutputIt set_difference( ExecutionPolicy&amp;&amp; policy,
                         InputIt1 first1, InputIt1 last1,
                         InputIt2 first2, InputIt2 last2,
                         OutputIt d_first, Compare cmp );
}}
{{cpp/experimental/parallelism/existing|set_intersection|
template&lt; class ExecutionPolicy, class InputIt1,
          class InputIt2, class OutputIt &gt;
OutputIt set_intersection( ExecutionPolicy&amp;&amp; policy,
                           InputIt1 first1, InputIt1 last1,
                           InputIt2 first2, InputIt2 last2,
                           OutputIt d_first );

template&lt; class ExecutionPolicy, class InputIt1, class InputIt2,
          class OutputIt, class Compare &gt;
OutputIt set_intersection( ExecutionPolicy&amp;&amp; policy, 
                           InputIt1 first1, InputIt1 last1,
                           InputIt2 first2, InputIt2 last2,
                           OutputIt d_first, Compare cmp );
}}
{{cpp/experimental/parallelism/existing|set_symmetric_difference|
template&lt; class ExecutionPolicy, class InputIt1,
          class InputIt2, class OutputIt &gt;
OutputIt set_symmetric_difference( ExecutionPolicy&amp;&amp; policy, 
                                   InputIt1 first1, InputIt1 last1,
                                   InputIt2 first2, InputIt2 last2,
                                   OutputIt d_first );

template&lt; class ExecutionPolicy, class InputIt1, class InputIt2,
          class OutputIt, class Compare &gt;
OutputIt set_symmetric_difference( ExecutionPolicy&amp;&amp; policy, 
                                   InputIt1 first1, InputIt1 last1,
                                   InputIt2 first2, InputIt2 last2,
                                   OutputIt d_first, Compare cmp );
}}
{{cpp/experimental/parallelism/existing|set_union|
template&lt; class ExecutionPolicy, class InputIt1,
          class InputIt2, class OutputIt &gt;
OutputIt set_union( ExecutionPolicy&amp;&amp; policy, 
                    InputIt1 first1, InputIt1 last1,
                    InputIt2 first2, InputIt2 last2,
                    OutputIt d_first );

template&lt; class ExecutionPolicy, class InputIt1, class InputIt2,
          class OutputIt, class Compare &gt;
OutputIt set_union( ExecutionPolicy&amp;&amp; policy, 
                    InputIt1 first1, InputIt1 last1,
                    InputIt2 first2, InputIt2 last2,
                    OutputIt d_first, Compare cmp );
}}
{{dsc h2|Heap operations}}
{{dsc hitem|Parallelized algorithm|Existing algorithm}}
&lt;!-- {{dsc header|experimental/algorithm}} --&gt; 
{{cpp/experimental/parallelism/existing|is_heap|
template&lt; class ExecutionPolicy, class RandomIt &gt;
bool is_heap( ExecutionPolicy&amp;&amp; policy,
              RandomIt first, RandomIt last );

template&lt; class ExecutionPolicy, class RandomIt, class Compare &gt;
bool is_heap( ExecutionPolicy&amp;&amp; policy,
              RandomIt first, RandomIt last, Compare cmp );
}}
{{cpp/experimental/parallelism/existing|is_heap_until|
template&lt; class ExecutionPolicy, class RandomIt &gt;
RandomIt is_heap_until( ExecutionPolicy&amp;&amp; policy, 
                        RandomIt first, RandomIt last );

template&lt; class ExecutionPolicy, class RandomIt, class Compare &gt;
RandomIt is_heap_until( ExecutionPolicy&amp;&amp; policy, 
                        RandomIt first, RandomIt last, Compare cmp );
}}
{{dsc h2|Minimum/maximum operations}}
{{dsc hitem|Parallelized algorithm|Existing algorithm}}
&lt;!-- {{dsc header|experimental/algorithm}} --&gt; 
{{cpp/experimental/parallelism/existing|max_element|
template&lt; class ExecutionPolicy, class ForwardIt &gt; 
ForwardIt max_element( ExecutionPolicy&amp;&amp; policy,
                       ForwardIt first, ForwardIt last );

template&lt; class ExecutionPolicy, class ForwardIt, class Compare &gt;
ForwardIt max_element( ExecutionPolicy&amp;&amp; policy, 
                       ForwardIt first, ForwardIt last, Compare cmp );
}}
{{cpp/experimental/parallelism/existing|min_element|
template&lt; class ExecutionPolicy, class ForwardIt &gt; 
ForwardIt min_element( ExecutionPolicy&amp;&amp; policy,
                       ForwardIt first, ForwardIt last );

template&lt; class ExecutionPolicy, class ForwardIt, class Compare &gt;
ForwardIt min_element( ExecutionPolicy&amp;&amp; policy, 
                       ForwardIt first, ForwardIt last, Compare cmp );
}}
{{cpp/experimental/parallelism/existing|minmax_element|
template&lt; class ExecutionPolicy, class ForwardIt &gt; 
std::pair&lt;ForwardIt,ForwardIt&gt;
    minmax_element( ExecutionPolicy&amp;&amp; policy,
                    ForwardIt first, ForwardIt last );

template&lt; class ExecutionPolicy, class ForwardIt, class Compare &gt;
std::pair&lt;ForwardIt,ForwardIt&gt; 
    minmax_element( ExecutionPolicy&amp;&amp; policy, 
                    ForwardIt first, ForwardIt last, Compare cmp );
}}
{{cpp/experimental/parallelism/existing|lexicographical_compare|
template&lt; class ExecutionPolicy, class InputIt1, class InputIt2 &gt;
bool lexicographical_compare( ExecutionPolicy&amp;&amp; policy,
                              InputIt1 first1, InputIt1 last1,
                              InputIt2 first2, InputIt2 last2 );

template&lt; class ExecutionPolicy, class InputIt1, 
          class InputIt2, class Compare &gt;
bool lexicographical_compare( ExecutionPolicy&amp;&amp; policy,
                              InputIt1 first1, InputIt1 last1,
                              InputIt2 first2, InputIt2 last2,
                              Compare cmp );
}}
{{dsc h2|Numeric operations}}
{{dsc hitem|Parallelized algorithm|Existing algorithm}}
&lt;!-- {{dsc header|experimental/numeric}} --&gt; 
{{cpp/experimental/parallelism/existing|adjacent_difference|
template&lt; class ExecutionPolicy, class InputIt, class OutputIt &gt;
OutputIt adjacent_difference( ExecutionPolicy&amp;&amp; policy, 
                              InputIt first, InputIt last, 
                              OutputIt d_first );

template&lt; class ExecutionPolicy, class InputIt,
          class OutputIt, class BinaryOp &gt;
OutputIt adjacent_difference( ExecutionPolicy&amp;&amp; policy, 
                              InputIt first, InputIt last, 
                              OutputIt d_first, BinaryOp op );
}}
{{cpp/experimental/parallelism/existing|inner_product|
template&lt; class ExecutionPolicy, class InputIt1,
          class InputIt2, class T &gt;
T inner_product( ExecutionPolicy&amp;&amp; policy, 
                 InputIt1 first1, InputIt1 last1, InputIt2 first2,
                 T value );

template&lt; class ExecutionPolicy, class InputIt1, class InputIt2,
          class T, class BinaryOp1, class BinaryOp2 &gt; 
T inner_product( ExecutionPolicy&amp;&amp; policy, 
                 InputIt1 first1, InputIt1 last1, InputIt2 first2,
                 T value, BinaryOp1 op1, BinaryOp2 op2 );
}}
{{dsc h2|Operations on uninitialized memory}}
{{dsc hitem|Parallelized algorithm|Existing algorithm}}
&lt;!-- {{dsc header|experimental/memory}} --&gt; 
{{cpp/experimental/parallelism/existing|uninitialized_copy|
template&lt; class ExecutionPolicy, class InputIt, class ForwardIt &gt;
ForwardIt uninitialized_copy( ExecutionPolicy&amp;&amp; policy, 
                              InputIt first, InputIt last,
                              ForwardIt d_first );
}}
{{cpp/experimental/parallelism/existing|uninitialized_copy_n|
template&lt; class ExecutionPolicy, class InputIt,
          class Size, class ForwardIt &gt;
ForwardIt uninitialized_copy_n( ExecutionPolicy&amp;&amp; policy,
                                InputIt first, Size count, 
                                ForwardIt d_first );
}}
{{cpp/experimental/parallelism/existing|uninitialized_fill|
template&lt; class ExecutionPolicy, class ForwardIt, class T &gt;
void uninitialized_fill( ExecutionPolicy&amp;&amp; policy, 
                         ForwardIt first, ForwardIt last,
                         const T&amp; value );
}}
{{cpp/experimental/parallelism/existing|uninitialized_fill_n|
template&lt; class ExecutionPolicy, class ForwardIt, class Size, class T &gt;
ForwardIt uninitialized_fill_n( ExecutionPolicy&amp;&amp; policy,
                                ForwardIt first, Size count,
                                const T&amp; value );
}}
{{dsc end}}
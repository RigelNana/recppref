{{title|Extensions for concurrency}}
{{cpp/experimental/concurrency/navbar}}

The C++ Extensions for Concurrency, ISO/IEC TS 19571:2016, defines the following new components for the C++ standard library:

===Continuations and other extensions for std::future===
{{dsc begin}}
{{dsc header|experimental/future}}
{{dsc inc|cpp/experimental/dsc future}}
{{dsc inc|cpp/experimental/dsc shared_future}}
{{dsc tclass|cpp/experimental/concurrency/promise|a modified version of {{lc|std::promise}} that uses {{lc|std::experimental::future}}|notes={{mark since concurrency ts}}}}
{{dsc tclass|cpp/experimental/concurrency/packaged_task|a modified version of {{lc|std::packaged_task}} that uses {{lc|std::experimental::future}}|notes={{mark since concurrency ts}}}}
{{dsc inc|cpp/experimental/dsc when_all}}
{{dsc inc|cpp/experimental/dsc when_any}}
{{dsc inc|cpp/experimental/dsc make_ready_future}}
{{dsc inc|cpp/experimental/dsc make_exceptional_future}}
{{dsc end}}

===Feature test macros===
{{dsc begin}}
{{dsc header|experimental/future}}
{{dsc macro const|__cpp_lib_experimental_future_continuations|nolink=true|a value of at least {{c|201505}} indicates that future::then and other extensions are supported}}
{{dsc header|experimental/latch}}
{{dsc macro const|__cpp_lib_experimental_latch|nolink=true|a value of at least {{c|201505}} indicates that the latch type is supported}}
{{dsc header|experimental/barrier}}
{{dsc macro const|__cpp_lib_experimental_barrier|nolink=true|a value of at least {{c|201505}} indicates that barrier type is supported}}
{{dsc header|experimental/atomic}}
{{dsc macro const|__cpp_lib_experimental_atomic_smart_pointers|nolink=true|a value of at least {{c|201505}} indicates that the atomic smart pointers are supported}}
{{dsc end}}

==Merged into C++20==
The following components of the Concurrency TS have been adopted into the C++20 standard.

===Latches and barriers===
{{dsc begin}}
{{dsc header|experimental/latch}}
{{dsc inc|cpp/experimental/dsc latch}}
{{dsc header|experimental/barrier}}
{{dsc inc|cpp/experimental/dsc barrier}}
{{dsc inc|cpp/experimental/dsc flex_barrier}}
{{dsc end}}

===Atomic smart pointers===
These class templates replace the shared_ptr [[cpp/memory/shared_ptr/atomic|atomic function overloads]]
{{dsc begin}}
{{dsc header|experimental/atomic}}
{{dsc inc|cpp/experimental/dsc atomic_shared_ptr}}
{{dsc inc|cpp/experimental/dsc atomic_weak_ptr}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
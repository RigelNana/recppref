{{cpp/experimental/weak_ptr/title|weak_ptr}}
{{cpp/experimental/weak_ptr/navbar}}
{{dcl begin}}
{{dcl|num=1|since=libfund_ts|1= 
constexpr weak_ptr() noexcept;
}}
{{dcl|num=2|since=libfund_ts|1= 
weak_ptr( const weak_ptr&amp; r ) noexcept;
}}
{{dcl|num=2|since=libfund_ts|1= 
template&lt; class Y &gt; 
weak_ptr( const weak_ptr&lt;Y&gt;&amp; r ) noexcept;
}}
{{dcl|num=2|since=libfund_ts|1= 
template&lt; class Y &gt; 
weak_ptr( const std::experimental::shared_ptr&lt;Y&gt;&amp; r ) noexcept;
}}
{{dcl|num=3|since=libfund_ts|1= 
weak_ptr( weak_ptr&amp;&amp; r ) noexcept;
}}
{{dcl|num=3|since=libfund_ts|1= 
template&lt; class Y &gt; 
weak_ptr( weak_ptr&lt;Y&gt;&amp;&amp; r ) noexcept;
}}
{{dcl end}}

Constructs a new {{tt|weak_ptr}} that potentially shares an object with {{c|r}}.

@1@ Default constructor. Constructs empty {{tt|weak_ptr}}.
@2@ Constructs new {{tt|weak_ptr}} which shares an object managed by {{c|r}}. If {{c|r}} manages no object, {{c|*this}} manages no object too. The templated overloads don't participate in overload resolution unless either {{tt|Y*}} is implicitly convertible to {{tt|T*}}, or {{tt|Y}} is the type "array of {{tt|N}} {{tt|U}}" for some type {{tt|U}} and some number {{tt|N}}, and {{tt|T}} is the type "array of unknown bound of (possibly cv-qualified) {{tt|U}}". 
@3@ Move constructors. Moves a {{tt|weak_ptr}} instance from {{c|r}} into {{c|*this}}. After this, {{c|r}} is empty and {{c|1=r.use_count() == 0}}. The templated overload doesn't participate in overload resolution unless either {{tt|Y*}} is implicitly convertible to {{tt|T*}}, or {{tt|Y}} is the type "array of {{tt|N}} {{tt|U}}" for some type {{tt|U}} and some number {{tt|N}}, and {{tt|T}} is the type "array of unknown bound of (possibly cv-qualified) {{tt|U}}".&lt;!-- LWG 2521 --&gt;

===Parameters===
{{par begin}}
{{par|r|a {{lc|std::experimental::shared_ptr}} or {{lc|std::experimental::weak_ptr}} that will be viewed by this {{lc|std::experimental::weak_ptr}}}}
{{par end}} 

===Exceptions===
{{noexcept}}

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/weak_ptr/dsc constructor}}
{{dsc inc|cpp/memory/weak_ptr/dsc operator{{=}}}}
{{dsc end}}
{{cpp/experimental/title|make_unique_resource_checked}}
{{cpp/experimental/unique_resource/navbar}}

{{ddcl|header=experimental/scope|since=libfund_ts_3|1=
template&lt; class R, class D, class S = std::decay_t&lt;R&gt; &gt;
std::experimental::unique_resource&lt;std::decay_t&lt;R&gt;, std::decay_t&lt;D&gt;&gt;
    make_unique_resource_checked( R&amp;&amp; r, const S&amp; invalid, D&amp;&amp; d )
    noexcept(/*see below*/);
}}

Creates a {{tt|unique_resource}}, initializes its stored resource handle is initialized with {{c|std::forward&lt;R&gt;(r)}} and its deleter with {{c|std::forward&lt;D&gt;(d)}}. The created {{tt|unique_resource}} owns the resource if and only if {{c|1=bool(r == invalid)}} is {{c|false}}.

The program is ill-formed if the expression {{c|1=r == invalid}} cannot be [[cpp/language/implicit conversion#Contextual conversions|contextually converted to {{c|bool}}]], and the behavior is undefined if the conversion results in undefined behavior or throws an exception.

===Paramaters===
{{par begin}}
{{par|r|a resource handle}}
{{par|d|a deleter to use to dispose the resource}}
{{par|invalid|a value indicating the resource handle is invalid}}
{{par end}}

===Reture value===
A {{tt|unique_resource}} described above.

===Exceptions===
Any exception thrown in initialization of the stored resource handle and the deleter.

{{noexcept|
    std::is_nothrow_constructible_v&lt;std::decay_t&lt;R&gt;, R&gt; &amp;&amp;
    std::is_nothrow_constructible_v&lt;std::decay_t&lt;D&gt;, D&gt;
}}

===Notes===
{{tt|make_unique_resource_checked}} exists to avoid calling a deleter function with an invalid argument.

Resource handle {{c|r}} is either copied or moved into the return value, and the created {{tt|unique_resource}} always holds an underlying resource handle with object type.

===Example===
{{example
|code=
#include &lt;cstdio&gt;
#include &lt;experimental/scope&gt;

int main()
{
    // avoid calling fclose when fopen fails
    auto file = std::experimental::make_unique_resource_checked(
        std::fopen("potentially_nonexistent_file.txt", "r"),
        nullptr,
        [](std::FILE *fptr) { std::fclose(fptr); }
    );
    if (file.get())
        std::puts("The file exists.");
    else
        std::puts("The file does not exist.");
}
|p=true
|output=The file does not exist.
}}

===See also===
{{dsc begin}}
{{dsc end}}

{{langlinks|ja|zh}}
{{cpp/experimental/unique_resource/title|operator{{=}}}}
{{cpp/experimental/unique_resource/navbar}}

{{ddcl|since=libfund_ts_3|1=
unique_resource&amp; operator=( unique_resource&amp;&amp; other )
    noexcept(/*see below*/);
}}

Move assignment operator. Replaces the managed resource and the deleter with {{c|other}}'s.

Formally, let {{tt|RS}} be the type of stored resource handle:
* First, calls {{c|reset()}} to dispose the currently owned resource, if any.
* Then assigns the stored resource handle and the deleter with {{c|other}}'s. {{tt|std::move}} is applied to the stored resource handle or the deleter of {{c|other}} if {{c|std::is_nothrow_move_assignable_v&lt;RS&gt;}} or {{c|std::is_nothrow_move_assignable_v&lt;D&gt;}} is {{c|true}} respectively. Assignment of the stored resource handle is executed first, unless {{c|std::is_nothrow_move_assignable_v&lt;D&gt;}} is {{c|false}} and {{c|std::is_nothrow_move_assignable_v&lt;RS&gt;}} is {{c|true}}.
* Finally, sets {{c|*this}} to own the resource if and only if {{c|other}} owned it before assignment, and {{c|other}} not to own the resource.

If {{c|std::is_nothrow_move_assignable_v&lt;RS&gt;}} is {{c|true}}, {{tt|RS}} shall satisfy the {{named req|MoveAssignable}} requirements; otherwise {{tt|RS}} shall satisfy the {{named req|CopyAssignable}} requirements. If {{c|std::is_nothrow_move_assignable_v&lt;D&gt;}} is {{c|true}}, {{tt|D}} shall satisfy the {{named req|MoveAssignable}} requirements; otherwise {{tt|D}} shall satisfy the {{named req|CopyAssignable}} requirements. Failing to satisfy above requirements results in undefined behavior.

===Parameters===
{{par begin}}
{{par|other|resource wrapper from which ownership will be transferred}}
{{par end}}

===Return value===
{{c|*this}}

===Exceptions===
Any exception thrown in copy-assignment.
{{noexcept|std::is_nothrow_move_assignable_v&lt;RS&gt; &amp;&amp; std::is_nothrow_move_assignable_v&lt;D&gt;}}

===Notes===
If a copy of a member throws an exception, this mechanism leaves {{c|other}} intact and {{c|*this}} in the released state.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/unique_resource/dsc reset}}
{{dsc inc|cpp/memory/unique_ptr/dsc operator{{=}}}}
{{dsc end}}

{{langlinks|ja|zh}}
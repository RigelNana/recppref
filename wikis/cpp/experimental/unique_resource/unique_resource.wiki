{{cpp/experimental/unique_resource/title|unique_resource}}
{{cpp/experimental/unique_resource/navbar}}

{{dcl begin}}
{{dcl|num=1|since=libfund_ts_3|
unique_resource();
}}
{{dcl|num=2|since=libfund_ts_3|
template&lt; class RR, class DD &gt;
unique_resource( RR&amp;&amp; r, DD&amp;&amp; d ) noexcept(/*see below*/)
}}
{{dcl|num=3|since=libfund_ts_3|
unique_resource( unique_resource&amp;&amp; other );
}}
{{dcl end}}

Follow items are used for explanatory purpose:
* {{tt|RS}} is the type of stored resource handle.
* The expression {{c|res_}} refers the underlying resource handle.
* {{tt|del_}} refers the deleter object.

@1@ Default constructor. Value-initializes the stored resource handle and the deleter. The constructed {{tt|unique_resource}} does not own the resource.
@@ {{cpp/enable_if|both {{c|std::is_default_constructible_v&lt;R&gt;}} and {{c|std::is_default_constructible_v&lt;D&gt;}} are {{c|true}}}}.

@2@ The stored resource handle is initialized with {{c|std::forward&lt;RR&gt;(r)}} if {{c|std::is_nothrow_constructible_v&lt;RS, RR&gt;}} is {{c|true}}, otherwise {{c|r}}. If initialization of the stored resource handle throws an exception, calls {{c|d(r)}}.&lt;br&gt;Then, the deleter is initialized with {{c|std::forward&lt;DD&gt;(d)}} if {{c|std::is_nothrow_constructible_v&lt;D, DD&gt;}} is {{c|true}}, otherwise {{c|d}}. If initialization of deleter throws an exception, calls {{c|d(res_)}}.&lt;br&gt;The constructed {{tt|unique_resource}} owns the resource.
@@ {{cpp/enable_if|all of {{c|std::is_constructible_v&lt;RS, RR&gt;}}, {{c|std::is_constructible_v&lt;D, DD&gt;}}, {{c|std::is_nothrow_constructible_v&lt;RS, RR&gt; {{!!}} std::is_constructible_v&lt;RS, RR&amp;&gt;}} and {{c|std::is_nothrow_constructible_v&lt;D, DD&gt; {{!!}} std::is_constructible_v&lt;D, DD&amp;&gt;}} are {{c|true}}}}.
@@ The program is ill-formed if any of the expressions {{c|d(r)}}, {{c|d(res_)}} and {{c|del_(res_)}} is ill-formed.
@@ The behavior is undefined if any of the expressions {{c|d(r)}}, {{c|d(res_)}} and {{c|del_(res_)}} results in undefined behavior or throws an exception.

@3@ Move constructor. The stored resource handle is initialized from the one of {{c|other}}, using {{tt|std::move}} if {{c|std::is_nothrow_move_constructible_v&lt;RS&gt;}} is {{c|true}}. If initialization of the stored resource handle throws an exception, {{c|other}} is not modified.&lt;br&gt;Then, the deleter is initialized with the one of {{c|other}}, using {{tt|std::move}} if {{c|std::is_nothrow_move_constructible_v&lt;D&gt;}} is {{c|true}}. If initialization of the deleter throws an exception and {{c|std::is_nothrow_move_constructible_v&lt;RS&gt;}} is {{c|true}} and {{c|other}} owns the resource, calls the deleter of {{c|other}} with {{c|res_}} to dispose the resource, then calls {{c|other.release()}}.&lt;br&gt;After construction, the constructed {{tt|unique_resource}} owns its resource if and only if {{c|other}} owned the resource before the construction, and {{c|other}} is set to not own the resource.

===Parameters===
{{par begin}}
{{par|r|a resource handle}}
{{par|d|a deleter to use to dispose the resource}}
{{par|other|another {{tt|unique_resource}} to acquire the ownership from}}
{{par end}}

===Exceptions===
Any exception thrown during initialization of the stored resource handle or the deleter.
@2@ {{noexcept|(
    std::is_nothrow_constructible_v&lt;RS, RR&gt; {{!!}} std::is_nothrow_constructible_v&lt;RS, RR&amp;&gt;
) &amp;&amp;
(
    std::is_nothrow_constructible_v&lt;D, DD&gt; {{!!}} std::is_nothrow_constructible_v&lt;D, DD&amp;&gt;
)}}
@3@ {{noexcept|
    std::is_nothrow_move_constructible_v&lt;R1&gt; &amp;&amp; std::is_nothrow_move_constructible_v&lt;D&gt;
}}

===Notes===
The mechanism of these constructors ensures no leaking of resources.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/unique_ptr/dsc constructor}}
{{dsc end}}

{{langlinks|ja|zh}}
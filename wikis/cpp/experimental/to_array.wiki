{{cpp/experimental/title|to_array}}
{{cpp/experimental/lib_extensions_2/navbar}}
{{fmbox|class=noprint|style=font-size: 0.8em|text='''Merged into ISO C++''' The functionality described on this page was merged into the mainline ISO C++ standard as of 7/2019, see  {{ltt|cpp/container/array/to_array|std::to_array}} {{mark since c++20}}}}
{{dcl begin}}
{{dcl header|experimental/array}}
{{dcl|since=libfund_ts_2|1=
template&lt; class T, std::size_t N &gt;
constexpr std::array&lt;std::remove_cv_t&lt;T&gt;, N&gt; to_array(T (&amp;a)[N]);
}}
{{dcl end}}

Creates a {{lc|std::array}} from the built-in array {{c|a}}. The elements of the {{lc|std::array}} are copy-initialized from the corresponding element of {{c|a}}.

===Parameters===
{{par begin}}
{{par|a|the built-in array to be used to initialize the {{lc|std::array}}}}
{{par end}}

===Return value===
An {{lc|std::array}} object whose elements are copy-initialized from the corresponding element of {{c|a}}.

===Possible implementation===
{{eq fun|1=
namespace detail
{
    template&lt;class T, std::size_t N, std::size_t... I&gt;
    constexpr std::array&lt;std::remove_cv_t&lt;T&gt;, N&gt;
        to_array_impl(T (&amp;a)[N], std::index_sequence&lt;I...&gt;)
    {
        return { {a[I]...} };
    }
}

template&lt;class T, std::size_t N&gt;
constexpr std::array&lt;std::remove_cv_t&lt;T&gt;, N&gt; to_array(T (&amp;a)[N])
{
    return detail::to_array_impl(a, std::make_index_sequence&lt;N&gt;{});
}
}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;cstdlib&gt;
#include &lt;experimental/array&gt;
#include &lt;unistd.h&gt;

// mkstemp(3) that works
template&lt;std::size_t N&gt;
int tempfd(char const (&amp;tmpl)[N])
{
    auto s = std::experimental::to_array(tmpl);
    int fd = mkstemp(s.data());
    if (fd != -1)
        unlink(s.data());

    return fd;
}

int main()
{
    int fd = tempfd("/tmp/test.XXXXXX");
    int rt = close(fd);
    assert(rt == 0);
}
|output=
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/dsc make array}}
{{dsc end}}

{{langlinks|ja|zh}}
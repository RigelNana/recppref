{{cpp/experimental/pmr/title|polymorphic_allocator}}
{{cpp/experimental/lib extensions/pmr/polymorphic_allocator/navbar}}
{{fmbox|class=noprint|style=font-size: 0.8em|text='''Merged into ISO C++''' The functionality described on this page was merged into the mainline ISO C++ standard as of 3/2016, see {{ltt|cpp/memory/polymorphic_allocator|std::pmr::polymorphic_allocator}} {{mark since c++17}}}}
{{ddcl|header=experimental/memory_resource|since=libfund_ts|
template&lt; class T &gt;
class polymorphic_allocator;
}}

The class template {{tt|std::experimental::pmr::polymorphic_allocator}} is an {{named req|Allocator}} whose allocation behavior depends on the memory resource it is constructed with. Thus, different instances of {{tt|polymorphic_allocator}} can exhibit entirely different allocation behavior. This runtime polymorphism allows objects using {{tt|polymorphic_allocator}} to behave as if they used different allocator types at run time despite the identical static allocator type.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|definition}}
{{dsc|{{tt|value_type}}|{{tt|T}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/experimental/polymorphic_allocator/dsc constructor}}
{{dsc inc|cpp/experimental/polymorphic_allocator/dsc destructor}}
{{dsc inc|cpp/experimental/polymorphic_allocator/dsc operator{{=}}}}

{{dsc h2|Public member functions}}
{{dsc inc|cpp/experimental/polymorphic_allocator/dsc allocate}}
{{dsc inc|cpp/experimental/polymorphic_allocator/dsc deallocate}}
{{dsc inc|cpp/experimental/polymorphic_allocator/dsc construct}}
{{dsc inc|cpp/experimental/polymorphic_allocator/dsc destroy}}
{{dsc inc|cpp/experimental/polymorphic_allocator/dsc select_on_container_copy_construction}}
{{dsc inc|cpp/experimental/polymorphic_allocator/dsc resource}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/experimental/polymorphic_allocator/dsc operator eq}}
{{dsc end}}
{{cpp/experimental/title|sample}}
{{cpp/experimental/lib_extensions/navbar}}

{{dcl begin}}
{{dcl header|experimental/algorithm}}
{{dcl|num=1|since=libfund_ts|
template&lt; class PopulationIterator, class SampleIterator,
          class Distance, class URBG &gt;
SampleIterator sample( PopulationIterator first, PopulationIterator last,
                       SampleIterator out, Distance n, 
                       URBG&amp;&amp; g );
}}
{{dcl|num=2|since=libfund_ts_2|
template&lt; class PopulationIterator, class SampleIterator, class Distance &gt;
SampleIterator sample( PopulationIterator first, PopulationIterator last,
                       SampleIterator out, Distance n );
}}
{{dcl end}}

Selects {{c|n}} elements from the sequence {{range|first|last}} such that each possible sample has equal probability of appearance, and writes those selected elements into the output iterator {{c|out}}.

If {{c|n}} is greater than the number of elements in the sequence, selects {{c|last - first}} elements.

The algorithm is stable only if {{tt|PopulationIterator}} meets the requirements of {{named req|ForwardIterator}}.

@1@ Random numbers are generated using the random number generator {{c|g}}.
@2@ Random numbers are generated using the [[cpp/experimental/lib extensions 2#Simple random number generation facilities|per-thread engine]].

===Parameters===
{{par begin}}
{{par|first, last|pair of iterators forming the range from which to make the sampling (the population)}}
{{par|out|the output iterator where the samples are written. Must not be in the range {{range|first|last}}}}
{{par|n|number of samples to make}}
{{par|g|the random number generator used as the source of randomness}}
{{par req named|PopulationIterator|InputIterator}}
{{par req named|SampleIterator|OutputIterator}}
{{par req|{{tt|SampleIterator}} must also meet the requirements of {{named req|RandomAccessIterator}} if {{tt|PopulationIterator}} doesn't meet {{named req|ForwardIterator}}.}}
{{par req|{{tt|PopulationIterator}}'s value type must be writeable to {{c|out}}.}}
{{par req|{{tt|Distance}} must be an integer type.}}
{{par req|{{tt|URBG}} must meet the requirements of {{named req|UniformRandomBitGenerator}} and its return type must be convertible to {{tt|Distance}}.}}
{{par end}}

===Return value===
Returns a copy of {{c|out}} after the last sample that was output, that is, end of the sample range.

===Complexity===
Linear in {{c|std::distance(first, last)}}.

===Notes===
This function may implement selection sampling or reservoir sampling.

===Example===
{{example
|code=
#include &lt;experimental/algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;random&gt;
#include &lt;string&gt;
 
int main()
{
    std::string in = "abcdefgh", out;
    std::experimental::sample(in.begin(), in.end(), std::back_inserter(out),
                              5, std::mt19937{std::random_device{}()});
    std::cout &lt;&lt; "five random letters out of " &lt;&lt; in &lt;&lt; " : " &lt;&lt; out &lt;&lt; '\n';
}
|p=true
|output=
five random letters out of abcdefgh : cdefg
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc random_shuffle}}
{{dsc end}}

{{langlinks|zh}}
{{cpp/experimental/ranges/title|find|find_if|find_if_not}}
{{cpp/experimental/ranges/algorithm/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/algorithm}}
{{dcl|since=ranges|num=1|1=
template&lt; InputIterator I, Sentinel&lt;I&gt; S, class T, class Proj = ranges::identity &gt;
    requires IndirectRelation&lt;ranges::equal_to&lt;&gt;, projected&lt;I, Proj&gt;, const T*&gt;
I find( I first, S last, const T&amp; value, Proj proj = Proj{} );
}}
{{dcl|since=ranges|num=2|1=
template&lt; InputRange R, class T, class Proj = ranges::identity &gt;
    requires IndirectRelation&lt;ranges::equal_to&lt;&gt;, 
                              projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;, const T*&gt;
ranges::safe_iterator_t&lt;R&gt; find( R&amp;&amp; r, const T&amp; value, Proj proj = Proj{} );
}}
{{dcl|since=ranges|num=3|1=
template&lt; InputIterator I, Sentinel&lt;I&gt; S, class Proj = ranges::identity,
          IndirectUnaryPredicate&lt;projected&lt;I, Proj&gt;&gt; Pred &gt;
I find_if( I first, S last, Pred pred, Proj proj = Proj{} );
}}
{{dcl|since=ranges|num=4|1=
template&lt; InputRange R, class Proj = ranges::identity,
          IndirectUnaryPredicate&lt;projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt; Pred &gt;
ranges::safe_iterator_t&lt;R&gt; find_if( R&amp;&amp; r, Pred pred, Proj proj = Proj{} );
}}
{{dcl|since=ranges|num=5|1=
template&lt; InputIterator I, Sentinel&lt;I&gt; S, class Proj = ranges::identity,
          IndirectUnaryPredicate&lt;projected&lt;I, Proj&gt;&gt; Pred &gt;
I find_if_not( I first, S last, Pred pred, Proj proj = Proj{} );
}}
{{dcl|since=ranges|num=6|1=
template&lt; InputRange R, class Proj = ranges::identity,
          IndirectUnaryPredicate&lt;projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt; Pred &gt;
ranges::safe_iterator_t&lt;R&gt; find_if_not( R&amp;&amp; r, Pred pred, Proj proj = Proj{} );
}}
{{dcl end}}

Returns the first element in the range {{range|first|last}} that satisfies specific criteria:
@1@ {{tt|find}} searches for an element whose projected value is equal to {{c|value}} (i.e., {{c|value {{==}} ranges::invoke(proj, *i)}}).

@3@ {{tt|find_if}} searches for an element for whose projected value predicate {{c|p}} returns {{c|true}} (i.e., {{c|ranges::invoke(pred, ranges::invoke(proj, *i))}}) is {{c|true}}).

@5@ {{tt|find_if_not}} searches for an element for whose projected value predicate {{c|q}} returns {{c|false}} (i.e., {{c|ranges::invoke(pred, ranges::invoke(proj, *i))}}) is {{c|false}}).

@2,4,6@ Same as {{v|1,3,5}}, but uses {{c|r}} as the source range, as if using {{c|ranges::begin(r)}} as {{c|first}} and {{c|ranges::end(r)}} as {{c|last}}.

{{cpp/experimental/ranges/algorithm/tparams}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to examine}}
{{par|r|the range of elements to examine}}
{{par|value|value to compare the projected elements to}}
{{par|pred|predicate to apply to the projected elements}}
{{par|proj|projection to apply to the elements}}
{{par end}}

===Return value===
Iterator to the first element satisfying the condition. If no such element is found, returns an iterator that compares equal to {{c|last}}.

===Complexity===
At most {{c|last}} - {{c|first}} applications of the predicate and projection.

===Possible implementation===
{{eq fun
|1=
template&lt;InputIterator I, Sentinel&lt;I&gt; S, class T, class Proj = ranges::identity&gt;
    requires IndirectRelation&lt;ranges::equal_to&lt;&gt;, projected&lt;I, Proj&gt;, const T*&gt;
I find(I first, S last, const T&amp; value, Proj proj = Proj{})
{
    for (; first != last; ++first)
        if (ranges::invoke(proj, *first) == value)
            break;
    return first;
}
|2=
template&lt;InputIterator I, Sentinel&lt;I&gt; S, class Proj = ranges::identity,
         IndirectUnaryPredicate&lt;projected&lt;I, Proj&gt;&gt; Pred&gt;
I find_if(I first, S last, Pred pred, Proj proj = Proj{})
{
    for (; first != last; ++first)
        if (ranges::invoke(pred, ranges::invoke(proj, *first)))
            break;
    return first;
}
|3=
template&lt;InputIterator I, Sentinel&lt;I&gt; S, class Proj = ranges::identity,
         IndirectUnaryPredicate&lt;projected&lt;I, Proj&gt;&gt; Pred&gt;
I find_if_not(I first, S last, Pred pred, Proj proj = Proj{})
{
    for (; first != last; ++first)
        if (!ranges::invoke(pred, ranges::invoke(proj, *first)))
            break;
    return first;
}
}}

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc find}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc adjacent_find}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc find_end}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc find_first_of}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc mismatch}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc search}}
{{dsc end}}
{{cpp/experimental/ranges/title|all_of|any_of|none_of}}
{{cpp/experimental/ranges/algorithm/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/algorithm}}
{{dcl|since=ranges_ts|num=1|1=
template&lt; InputIterator I, Sentinel&lt;I&gt; S, class Proj = ranges::identity,
          IndirectUnaryPredicate&lt;projected&lt;I, Proj&gt;&gt; Pred &gt;
bool all_of( I first, S last, Pred pred, Proj proj = Proj{} );}}
{{dcl|since=ranges_ts|num=2|1=
template&lt; InputRange R, class Proj = ranges::identity,
          IndirectUnaryPredicate&lt;projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt; Pred &gt;
bool all_of( R&amp;&amp; r, Pred pred, Proj proj = Proj{} );}}
{{dcl|since=ranges_ts|num=3|1=
template&lt; InputIterator I, Sentinel&lt;I&gt; S, class Proj = ranges::identity,
          IndirectUnaryPredicate&lt;projected&lt;I, Proj&gt;&gt; Pred &gt;
bool any_of( I first, S last, Pred pred, Proj proj = Proj{} );}}
{{dcl|since=ranges_ts|num=4|1=
template&lt; InputRange R, class Proj = ranges::identity,
          IndirectUnaryPredicate&lt;projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt; Pred &gt;
bool any_of( R&amp;&amp; r, Pred pred, Proj proj = Proj{} );}}
{{dcl|since=ranges_ts|num=5|1=
template&lt; InputIterator I, Sentinel&lt;I&gt; S, class Proj = identity,
          IndirectUnaryPredicate&lt;projected&lt;I, Proj&gt;&gt; Pred &gt;
bool none_of( I first, S last, Pred pred, Proj proj = Proj{} );}}
{{dcl|since=ranges_ts|num=6|1=
template&lt; InputRange R, class Proj = ranges::identity,
          IndirectUnaryPredicate&lt;projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt; Pred &gt;
bool none_of( R&amp;&amp; r, Pred pred, Proj proj = Proj{} );}}
{{dcl end}}
@1@ Checks if unary predicate {{c|pred}} returns {{c|true}} for all elements in the range {{range|first|last}}.

@3@ Checks if unary predicate {{c|pred}} returns {{c|true}} for at least one element in the range {{range|first|last}}.

@5@ Checks if unary predicate {{c|pred}} returns {{c|true}} for no elements in the range {{range|first|last}}.

@2,4,6@ Same as {{v|1,3,5}}, but uses {{c|r}} as the source range, as if using {{c|ranges::begin(r)}} as {{c|first}} and {{c|ranges::end(r)}} as {{c|last}}.

{{cpp/experimental/ranges/algorithm/tparams}}

===Parameters===
{{par begin}}
{{par|first, last|the range of the elements to examine}}
{{par|r|the range of the elements to examine}}
{{par|pred|predicate to apply to the projected elements}}
{{par|proj|projection to apply to the elements}}
{{par end}}

===Return value===
@1,2@ {{c|true}} if {{c|pred}} returns {{c|true}} for all elements in the range, {{c|false}} otherwise. Returns {{c|true}} if the range is empty.

@3,4@ {{c|true}} if {{c|pred}} returns {{c|true}} for at least one element in the range, {{c|false}} otherwise. Returns {{c|false}} if the range is empty.

@5,6@ {{c|true}} if {{c|pred}} returns {{c|true}} for no elements in the range, {{c|false}} otherwise. Returns {{c|true}} if the range is empty.

===Complexity===
@1-6@ At most {{c|last - first}} applications of the predicate and {{c|last - first}} applications of the projection.

===Possible implementation===
{{eq fun|1=
template&lt;InputIterator I, Sentinel&lt;I&gt; S, class Proj = ranges::identity,
         IndirectUnaryPredicate&lt;projected&lt;I, Proj&gt;&gt; Pred&gt;
bool all_of(I first, S last, Pred pred, Proj proj = Proj{})
{
    return ranges::find_if_not(first, last, std::ref(pred), std::ref(proj)) == last;
}

template&lt;InputRange R, class Proj = ranges::identity,
         IndirectUnaryPredicate&lt;projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt; Pred&gt;
bool all_of(R&amp;&amp; r, Pred pred, Proj proj = Proj{})
{
    return ranges::all_of(ranges::begin(r), ranges::end(r),
                          std::ref(pred), std::ref(proj));
}
|2=
template&lt;InputIterator I, Sentinel&lt;I&gt; S, class Proj = ranges::identity,
         IndirectUnaryPredicate&lt;projected&lt;I, Proj&gt;&gt; Pred&gt;
bool any_of(I first, S last, Pred pred, Proj proj = Proj{})
{
    return ranges::find_if(first, last, std::ref(pred), std::ref(proj)) != last;
}

template&lt;InputRange R, class Proj = ranges::identity,
         IndirectUnaryPredicate&lt;projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt; Pred&gt;
bool any_of(R&amp;&amp; r, Pred pred, Proj proj = Proj{})
{
    return ranges::any_of(ranges::begin(r), ranges::end(r),
                          std::ref(pred), std::ref(proj));
}
|3=
template&lt;InputIterator I, Sentinel&lt;I&gt; S, class Proj = identity,
         IndirectUnaryPredicate&lt;projected&lt;I, Proj&gt;&gt; Pred&gt;
bool none_of(I first, S last, Pred pred, Proj proj = Proj{})
{
    return ranges::find_if(first, last, std::ref(pred), std::ref(proj)) == last;
}

template&lt;InputRange R, class Proj = ranges::identity,
         IndirectUnaryPredicate&lt;projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt; Pred&gt;
bool none_of(R&amp;&amp; r, Pred pred, Proj proj = Proj{})
{
    return ranges::none_of(ranges::begin(r), ranges::end(r),
                           std::ref(pred), std::ref(proj));
}
}}

===Example===
{{example
|code=
#include &lt;experimental/ranges/algorithm&gt;
#include &lt;experimental/ranges/iterator&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;numeric&gt;
#include &lt;vector&gt;

namespace ranges = std::experimental::ranges;
 
int main()
{
    std::vector&lt;int&gt; v(10, 2);
    std::partial_sum(v.cbegin(), v.cend(), v.begin());
    std::cout &lt;&lt; "Among the numbers: ";
    ranges::copy(v, ranges::ostream_iterator&lt;int&gt;(std::cout, " "));
    std::cout &lt;&lt; '\n';
 
    if (ranges::all_of(v.cbegin(), v.cend(), [](int i) { return i % 2 == 0; }))
        std::cout &lt;&lt; "All numbers are even\n";
    if (ranges::none_of(v, std::bind(std::modulus&lt;int&gt;(), std::placeholders::_1, 2)))
        std::cout &lt;&lt; "None of them are odd\n";

    struct DivisibleBy
    {
        const int d;
        DivisibleBy(int n) : d(n) {}
        bool operator()(int n) const { return n % d == 0; }
    };
 
    if (ranges::any_of(v, DivisibleBy(7)))
        std::cout &lt;&lt; "At least one number is divisible by 7\n";
}
|output=Among the numbers: 2 4 6 8 10 12 14 16 18 20 
All numbers are even
None of them are odd
At least one number is divisible by 7
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc all_any_none_of}}
{{dsc end}}

{{langlinks|zh}}
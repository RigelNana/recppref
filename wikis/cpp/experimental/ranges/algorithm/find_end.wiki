{{cpp/experimental/ranges/title|find_end}}
{{cpp/experimental/ranges/algorithm/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/algorithm}}
{{dcl|since=ranges|num=1|1=
template&lt; ForwardIterator I1, Sentinel&lt;I1&gt; S1, ForwardIterator I2, Sentinel&lt;I2&gt; S2,
          class Proj = ranges::identity,
          IndirectRelation&lt;I2, projected&lt;I1, Proj&gt;&gt; Pred = ranges::equal_to&lt;&gt; &gt;
I1 find_end( I1 first1, S1 last1, I2 first2, S2 last2,
             Pred pred = Pred{}, Proj proj = Proj{} );
}}
{{dcl|since=ranges|num=2|1=
template&lt; ForwardRange R1, ForwardRange R2, class Proj = ranges::identity,
          IndirectRelation&lt;ranges::iterator_t&lt;R2&gt;,
                           projected&lt;ranges::iterator_t&lt;R1&gt;, Proj&gt;&gt; Pred = ranges::equal_to&lt;&gt; &gt;
ranges::safe_iterator_t&lt;R1&gt; find_end( Rng1&amp;&amp; rng1, Rng2&amp;&amp; rng2, 
                                      Pred pred = Pred{}, Proj proj = Proj{} );
}}
{{dcl end}}

@1@ Searches for the last occurrence of the sequence {{range|first2|last2}} in the range {{range|first1|last1}} (after projection with {{c|proj}}). 

@2@ Same as {{v|1}}, but uses {{c|r1}} as the first source range and {{c|r2}} as the second source range, as if using {{c|ranges::begin(r1)}} as {{c|first1}}, {{c|ranges::end(r1)}} as {{c|last1}}, {{c|ranges::begin(r2)}} as {{c|first2}}, and {{c|ranges::end(r2)}} as {{c|last2}}.

{{cpp/experimental/ranges/algorithm/tparams}}

===Parameters===
{{par begin}}
{{par|first1, last1|the range of elements to examine}}
{{par|r1|the range of elements to examine}}
{{par|first2, last2|the range of elements to search for}}
{{par|r2|the range of elements to search for}}
{{par|pred|predicate to compare the elements}}
{{par|proj|projection to apply to the elements in the first range}}
{{par end}}

===Return value===
Iterator to the beginning of last occurrence of the sequence {{range|first2|last2}} in range {{range|first1|last1}} (after projection with {{c|proj}}).

If {{range|first2|last2}} is empty or if no such sequence is found, an iterator that compares equal to {{c|last1}} is returned.

===Complexity===
At most {{tt|S * (N - S + 1)}} applications of the predicate and projection, where {{c|S {{=}} last2 - first2}} and {{c|N {{=}} last1 - first1}}.

===Notes===
The projection is only applied to the range {{range|first1|last1}}.

===Possible implementation===
{{eq fun
|1=
template&lt;ForwardIterator I1, Sentinel&lt;I1&gt; S1, ForwardIterator I2, Sentinel&lt;I2&gt; S2,
         class Proj = ranges::identity,
         IndirectRelation&lt;I2, projected&lt;I1, Proj&gt;&gt; Pred = ranges::equal_to&lt;&gt;&gt;
I1 find_end(I1 first1, S1 last1, I2 first2, S2 last2,
            Pred pred = Pred{}, Proj proj = Proj{})
{
    I1 result = ranges::next(first1, last1);
    if (first2 == last2)
        return result;
    while (true)
    {
        I1 new_result = ranges::search(first1, last1, first2, last2, pred, proj);
        if (new_result == last1)
            break;
        else
        {
            result = new_result;
            first1 = result;
            ++first1;
        }
    }
    return result;
}
}}

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc find_end}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc search}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc includes}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc adjacent_find}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc find}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc find_first_of}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc search_n}}
{{dsc end}}
{{cpp/experimental/ranges/title|search}}
{{cpp/experimental/ranges/algorithm/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/algorithm}}
{{dcl|since=ranges|num=1|1=
template&lt; ForwardIterator I1, Sentinel&lt;I1&gt; S1,
          ForwardIterator I2, Sentinel&lt;I2&gt; S2, class Pred = ranges::equal_to&lt;&gt;,
          class Proj1 = ranges::identity, class Proj2 = ranges::identity &gt;
    requires IndirectlyComparable&lt;I1, I2, Pred, Proj1, Proj2&gt;
I1 search( I1 first1, S1 last1, I2 first2, S2 last2,
           Pred pred = Pred{}, Proj1 proj1 = Proj1{}, Proj2 proj2 = Proj2{} );
}}
{{dcl|since=ranges|num=2|1=
template&lt; ForwardRange R1, ForwardRange R2, class Pred = ranges::equal_to&lt;&gt;,
          class Proj1 = ranges::identity, class Proj2 = ranges::identity &gt;
    requires IndirectlyComparable&lt;ranges::iterator_t&lt;R1&gt;, ranges::iterator_t&lt;R2&gt;,
                                  Pred, Proj1, Proj2&gt;
ranges::safe_iterator_t&lt;R1&gt; search( R1&amp;&amp; r1, R2&amp;&amp; r2, Pred pred = Pred{},
                                    Proj1 proj1 = Proj1{}, Proj2 proj2 = Proj2{} );
}}
{{dcl end}}

@1@ Searches for the first occurrence of the sequence of elements {{range|first2|last2}} in the range {{range|first1|last1}}. Elements are compared using {{c|pred}} after being projected with {{c|proj2}} and {{c|proj1}}, respectively.
@2@ Same as {{v|1}}, but uses {{c|r1}} as the first source range and {{c|r2}} as the second source range, as if using {{c|ranges::begin(r1)}} as {{c|first1}}, {{c|ranges::end(r1)}} as {{c|last1}}, {{c|ranges::begin(r2)}} as {{c|first2}}, and {{c|ranges::end(r2)}} as {{c|last2}}.

{{cpp/experimental/ranges/algorithm/tparams}}

===Parameters===
{{par begin}}
{{par|first1, last1|the range of elements to examine}}
{{par|r1|the range of elements to examine}}
{{par|first2, last2|the range of elements to search for}}
{{par|r2|the range of elements to search for}}
{{par|pred|predicate to apply to the projected elements}}
{{par|proj1|projection to apply to the elements in the first range}}
{{par|proj2|projection to apply to the elements in the second range}}
{{par end}}

===Return value===
An iterator to the beginning of first occurrence of the sequence {{range|first2|last2}} in the range {{range|first1|last1}}. If {{range|first2|last2}} is empty, {{c|first1}} is returned. If no such occurrence is found, an iterator that compares equal to {{c|last1}} is returned. 

===Complexity===
At most {{tt|S * N}} applications of the predicate and each projection, where {{c|S {{=}} last2 - first2}} and {{c|N {{=}} last1 - first1}}.

===Possible implementation===
{{eq fun|1=
template&lt;ForwardIterator I1, Sentinel&lt;I1&gt; S1,
         ForwardIterator I2, Sentinel&lt;I2&gt; S2, class Pred = ranges::equal_to&lt;&gt;,
         class Proj1 = ranges::identity, class Proj2 = ranges::identity&gt;
    requires IndirectlyComparable&lt;I1, I2, Pred, Proj1, Proj2&gt;
I1 search(I1 first1, S1 last1, I2 first2, S2 last2,
          Pred pred = Pred{}, Proj1 proj1 = Proj1{}, Proj2 proj2 = Proj2{})
{
    for (; ; ++first1)
    {
        I1 it = first1;
        for (I2 it2 = first2; ; (void)++it, (void)++it2)
        {
            if (it2 == last2)
                return first1;
            if (it == last1)
                return it;
            if (!ranges::invoke(pred, ranges::invoke(proj1, *it),
                                      ranges::invoke(proj2, *it2)))
                break;
        }
    }
}
}}

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc search}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc find_end}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc includes}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc equal}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc find}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc lexicographical_compare}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc mismatch}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc search_n}}
{{dsc end}}
{{cpp/experimental/ranges/title|find_first_of}}
{{cpp/experimental/ranges/algorithm/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/algorithm}}
{{dcl|since=ranges|num=1|1=
template&lt; InputIterator I1, Sentinel&lt;I1&gt; S1, ForwardIterator I2, Sentinel&lt;I2&gt; S2,
          class Proj1 = ranges::identity, class Proj2 = ranges::identity,
          IndirectRelation&lt;projected&lt;I1, Proj1&gt;, 
                           projected&lt;I2, Proj2&gt;&gt; Pred = ranges::equal_to&lt;&gt; &gt;
I1 find_first_of( I1 first1, S1 last1, I2 first2, S2 last2, Pred pred = Pred{},
                  Proj1 proj1 = Proj1{}, Proj2 proj2 = Proj2{} );

}}
{{dcl|since=ranges|num=2|1=
template&lt; InputRange R1, ForwardRange R2, 
          class Proj1 = ranges::identity, class Proj2 = ranges::identity,
          IndirectRelation&lt;projected&lt;ranges::iterator_t&lt;R1&gt;, Proj1&gt;,
                           projected&lt;ranges::iterator_t&lt;R2&gt;, Proj2&gt;&gt; Pred = ranges::equal_to&lt;&gt; &gt;
ranges::safe_iterator_t&lt;R1&gt; find_first_of( R1&amp;&amp; r1, R2&amp;&amp; r2, Pred pred = Pred{},
                                           Proj1 proj1 = Proj1{}, Proj2 proj2 = Proj2{} );
}}
{{dcl end}}

@1@ Searches the range {{range|first1|last1}} for any of the elements in the range {{range|first2|last2}}, after projecting the ranges with {{c|proj1}} and {{c|proj2}} respectively. The projected elements are compared using {{c|pred}}.
@2@ Same as {{v|1}}, but uses {{c|r1}} as the first source range and {{c|r2}} as the second source range, as if using {{c|ranges::begin(r1)}} as {{c|first1}}, {{c|ranges::end(r1)}} as {{c|last1}}, {{c|ranges::begin(r2)}} as {{c|first2}}, and {{c|ranges::end(r2)}} as {{c|last2}}.

===Parameters===
{{par begin}}
{{par|first1, last1|the range of elements to examine}}
{{par|r1|the range of elements to examine}}
{{par|first2, last2|the range of elements to search for}}
{{par|r2|the range of elements to search for}}
{{par|pred|predicate to use to compare the projected elements with}}
{{par|proj1|projection to apply to the elements in the first range}}
{{par|proj2|projection to apply to the elements in the second range}}
{{par end}}

===Return value===
Iterator to the first element in the range {{range|first1|last1}} that is equal to an element from the range {{range|first2|last2}} after projection. If no such element is found, an iterator comparing equal to {{c|last1}} is returned.

===Complexity===
At most {{tt|(S * N)}} applications of the predicate and each projection, where {{c|S {{=}} distance(last2 - first2)}} and {{c|N {{=}} last1 - first1}}.

===Possible implementation===
{{eq fun
|1=
template&lt;InputIterator I1, Sentinel&lt;I1&gt; S1, ForwardIterator I2, Sentinel&lt;I2&gt; S2,
         class Proj1 = ranges::identity, class Proj2 = ranges::identity,
         IndirectRelation&lt;projected&lt;I1, Proj1&gt;, 
                          projected&lt;I2, Proj2&gt;&gt; Pred = ranges::equal_to&lt;&gt;&gt;
I1 find_first_of(I1 first1, S1 last1, I2 first2, S2 last2, Pred pred = Pred{},
                 Proj1 proj1 = Proj1{}, Proj2 proj2 = Proj2{})
{
    for (; first1 != last1; ++first1)
        for (ForwardIt it = first2; it != last2; ++it)
            if (ranges::invoke(pred, ranges::invoke(proj1, *first1),
                                     ranges::invoke(proj2, *it)))
                return first1;
    return first1;
}
}}

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc find_first_of}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc find}}
{{dsc end}}
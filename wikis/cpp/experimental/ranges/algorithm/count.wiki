{{cpp/experimental/ranges/title|count|count_if}}
{{cpp/experimental/ranges/algorithm/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/algorithm}}
{{dcl|since=ranges|num=1|1=
template&lt; InputIterator I, Sentinel&lt;I&gt; S, class T, class Proj = ranges::identity &gt;
    requires IndirectRelation&lt;ranges::equal_to&lt;&gt;, projected&lt;I, Proj&gt;, const T*&gt;
ranges::difference_type_t&lt;I&gt; count( I first, S last, const T&amp; value, Proj proj = Proj{} );
}}
{{dcl|since=ranges|num=2|1=
template&lt; InputRange R, class T, class Proj = ranges::identity &gt;
    requires IndirectRelation&lt;ranges::equal_to&lt;&gt;, 
                              projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;, const T*&gt;
ranges::difference_type_t&lt;ranges::iterator_t&lt;R&gt;&gt; 
    count( R&amp;&amp; r, const T&amp; value, Proj proj = Proj{} );
}}
{{dcl|since=ranges|num=3|1=
template&lt; InputIterator I, Sentinel&lt;I&gt; S, class Proj = ranges::identity,
          IndirectUnaryPredicate&lt;projected&lt;I, Proj&gt;&gt; Pred &gt;
ranges::difference_type_t&lt;I&gt; count_if( I first, S last, Pred pred, Proj proj = Proj{} );
}}
{{dcl|since=ranges|num=4|1=
template&lt; InputRange R, class Proj = ranges::identity,
          IndirectUnaryPredicate&lt;projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt; Pred &gt;
ranges::difference_type_t&lt;ranges::iterator_t&lt;R&gt;&gt; 
    count_if( R&amp;&amp; r, Pred pred, Proj proj = Proj{} );
}}
{{dcl end}}

Returns the number of elements in the range {{range|first|last}} satisfying specific criteria. 
@1@ Counts the elements whose projected values are equal to {{c|value}} (i.e., {{c|ranges::invoke(proj, *i) {{==}} value}}).
@3@ Counts the elements whose projected values satisfy the predicate {{c|pred}} (i.e., {{c|ranges::invoke(pred, ranges::invoke(proj, *i)) !{{=}} false}}).
@2,4@ Same as {{v|1,3}}, but uses {{c|r}} as the source range, as if using {{c|ranges::begin(r)}} as {{c|first}} and {{c|ranges::end(r)}} as {{c|last}}.

{{cpp/experimental/ranges/algorithm/tparams}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to examine}}
{{par|r|the range of elements to examine}}
{{par|value|the value to search for}}
{{par|pred|predicate to apply to the projected elements}}
{{par|proj|projection to apply to the elements}}
{{par end}}

===Return value===
Number of elements satisfying the condition.

===Complexity===
Exactly {{c|last}} - {{c|first}} comparisons / applications of the predicate, and the same number of applications of the projection.

===Notes===
For the number of elements in the range {{range|first|last}} without any additional criteria, see {{lc|ranges::distance}}.

===Possible implementation===
{{eq fun
|1=
template&lt;InputIterator I, Sentinel&lt;I&gt; S, class T, class Proj = ranges::identity&gt;
    requires IndirectRelation&lt;ranges::equal_to&lt;&gt;, projected&lt;I, Proj&gt;, const T*&gt;
ranges::difference_type_t&lt;I&gt; count(I first, S last, const T&amp; value, Proj proj = Proj{})
{
    ranges::difference_type_t&lt;I&gt; ret = 0;
    for (; first != last; ++first)
        if (ranges::invoke(proj, *first) == value)
            ++ret;
    return ret;
}
|2=
template&lt;InputIterator I, Sentinel&lt;I&gt; S, class Proj = ranges::identity,
         IndirectUnaryPredicate&lt;projected&lt;I, Proj&gt;&gt; Pred&gt;
ranges::difference_type_t&lt;I&gt; count_if(I first, S last, Pred pred, Proj proj = Proj{})
{
    ranges::difference_type_t&lt;I&gt; ret = 0;
    for (; first != last; ++first)
        if (ranges::invoke(pred, ranges::invoke(proj, *i)))
            ++ret;
    return ret;
}
}}

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc count}}
{{dsc inc|cpp/experimental/ranges/iterator/dsc distance}}
{{dsc end}}
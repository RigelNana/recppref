{{cpp/experimental/ranges/title|sort}}
{{cpp/experimental/ranges/algorithm/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/algorithm}}
{{dcl|since=ranges|num=1|1= 
template&lt; RandomAccessIterator I, Sentinel&lt;I&gt; S,
          class Comp = ranges::less&lt;&gt;, class Proj = ranges::identity &gt;
    requires Sortable&lt;I, Comp, Proj&gt;
I sort( I first, S last, Comp comp = Comp{}, Proj proj = Proj{} );
}}
{{dcl|since=ranges|num=2|1= 
template&lt; RandomAccessRange R,
          class Comp = ranges::less&lt;&gt;, class Proj = ranges::identity &gt;
    requires Sortable&lt;ranges::iterator_t&lt;R&gt;, Comp, Proj&gt;
ranges::safe_iterator_t&lt;R&gt; sort( R&amp;&amp; r, Comp comp = Comp{}, Proj proj = Proj{} );
}}
{{dcl end}}

@1@ Sorts the elements in the range {{range|first|last}} in ascending order. The order of equal elements is not guaranteed to be preserved. Elements are compared using {{c|comp}} after applying the projection {{c|proj}}.
@2@ Sorts the elements in the range {{c|r}}, as if by {{c|return ranges::sort(ranges::begin(r), ranges::end(r), comp, proj);}}.

{{cpp/experimental/ranges/algorithm/tparams}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to sort}}
{{par|r|the range of elements to sort}}
{{par|comp|the comparator to use}}
{{par|proj|the projection to apply to elements in the range}}
{{par end}}

===Return value===
An iterator pointing past the end of the range (i.e., it compares equal to {{c|last}} for overload {{v|1}}, and {{tt|ranges::end(r)}} for overload {{v|2}}).

===Complexity===
{{math|O(N&amp;middot;log(N))}} comparisons, where N is equal to the number of elements in the range.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc sort}}
{{dsc end}}

{{langlinks|zh}}
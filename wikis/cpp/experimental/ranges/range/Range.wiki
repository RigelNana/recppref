{{cpp/experimental/ranges/title|Range}}
{{cpp/experimental/ranges/range/navbar}}
{{ddcl|header=experimental/ranges/range|since=ranges|1=
template&lt; class T &gt;
concept bool Range =
    requires(T&amp;&amp; t) {
        ranges::begin(t); /* not necessarily equality-preserving (see below) */
        ranges::end(t);
    };
}}

Given an lvalue {{tt|t}} of type {{c|std::remove_reference_t&lt;T&gt;}}, {{tt|Range&lt;T&gt;}} is satisfied only if
* {{range|ranges::begin(t)|ranges::end(t)}} denotes a range; and
* both {{c|ranges::begin(t)}} and {{c|ranges::end(t)}} are amortized constant time and non-modifying.
* If {{c|ranges::iterator_t&lt;T&gt;}} satisfies {{rconcept|ForwardIterator}}, {{c|ranges::begin(t)}} is equality preserving.

{{langlinks|zh}}
{{cpp/experimental/ranges/title|View}}
{{cpp/experimental/ranges/range/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/range}}
{{dcl|since=ranges|1=
template&lt; class T &gt;
concept bool View = Range&lt;T&gt; &amp;&amp; Semiregular&lt;T&gt; &amp;&amp; /* view-predicate&lt;T&gt; */;
}}
{{dcl|since=ranges|1=
template&lt; class T &gt;
struct enable_view {};
}}
{{dcl|since=ranges|1=
struct view_base {};
}}
{{dcl end}}

The concept {{tt|View&lt;T&gt;}} specifies the semiregular range {{tt|T}} has constant-time copy, move, and assignment operations.

The {{c|/* view-predicate&lt;T&gt; */}} portion of the concept is determined as follows:
* if the ''qualified-id'' {{c|ranges::enable_view&lt;T&gt;::type}} is valid and denotes a type, {{c|ranges::enable_view&lt;T&gt;::type::value}};
* otherwise, if {{c|std::is_base_of_v&lt;ranges::view_base, T&gt;}} is {{c|true}}, {{c|true}};
* otherwise, if {{tt|T}} is a specialization of {{lc|std::initializer_list}}, {{lc|std::set}}, {{lc|std::multiset}}, {{lc|std::unordered_set}}, or {{lc|std::unordered_multiset}}, {{c|false}};
* otherwise, if both {{tt|T}} and {{tt|const T}} satisfy {{rconcept|Range}} and {{c|ranges::reference_t &lt;ranges::iterator_t&lt;T&gt;&gt;}} is not the same type as {{c|ranges::reference_t&lt;ranges::iterator_t&lt;const T&gt;&gt;}}, {{c|false}};
* otherwise, {{c|true}}.

{{langlinks|zh}}
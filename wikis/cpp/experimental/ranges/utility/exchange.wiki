{{cpp/experimental/ranges/title|exchange}}
{{cpp/experimental/ranges/utility/navbar}}
{{ddcl|header=experimental/ranges/utility|since=ranges|1=
template&lt; MoveConstructible T, class U = T &gt;
    requires Assignable&lt;T&amp;, U&gt;
constexpr T exchange( T&amp; obj, U&amp;&amp; new_val ) noexcept(/* see below */);
}}

Replaces the value of {{c|obj}} with {{c|new_value}} and returns the old value of {{c|obj}}, as if by
{{source|1=
T old_value = std::move(obj);
obj = std::forward&lt;U&gt;(new_value);
return old_value;
}}

===Parameters===
{{par begin}}
{{par|obj|object whose value to replace}}
{{par|new_value|the value to assign to {{tt|obj}}}}
{{par end}}

===Return value===
The old value of {{c|obj}}.

===Exceptions===
{{noexcept|1=std::is_nothrow_move_constructible&lt;T&gt;::value &amp;&amp;
         std::is_nothrow_assignable&lt;T&amp;, U&gt;::value}}

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc exchange}}
{{dsc end}}

{{langlinks|zh}}
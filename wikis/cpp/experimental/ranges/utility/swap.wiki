{{cpp/experimental/ranges/title|swap}}
{{cpp/experimental/ranges/utility/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/utility}}
{{dcl|notes={{mark|customization point object}}|since=ranges|1=
namespace {
    constexpr /* unspecified */ swap = /* unspecified */;
}
}}
{{dcl h|Call signature}}
{{dcl|1=
template&lt; class T, class U &gt;
    requires /* see below */
void swap( T&amp;&amp; t, U&amp;&amp; u ) noexcept(/* see below */);
}}
{{dcl end}}

Exchanges the values referenced by {{c|t}} and {{c|u}}. 

A call to {{tt|ranges::swap}} is equivalent to:
@1@ {{c|(void)swap(std::forward&lt;T&gt;(t), std::forward&lt;U&gt;(u))}}, if that expression is valid, where the [[cpp/language/overload resolution|overload resolution]] is performed with the following candidates:
* {{c|1=template&lt;class T&gt; void swap(T&amp;, T&amp;) = delete;}}
* {{c|1=template&lt;class T, std::size_t N&gt; void swap(T(&amp;)[N], T(&amp;)[N]) = delete;}}
* any declarations of {{tt|swap}} found by [[cpp/language/adl|argument-dependent lookup]].
@@ If the function selected by overload resolution does not exchange the values referenced by {{c|t}} and {{c|u}}, the program is ill-formed; no diagnostic required.
@2@ Otherwise, {{c|(void)ranges::swap_ranges(t, u)}}, if {{tt|T}} and {{tt|U}} are lvalue references to array types of equal extent (but possibly different element types) and {{c|ranges::swap(*t, *u)}} is a valid expression.
@3@ Otherwise, if {{tt|T}} and {{tt|U}} are both {{tt|V&amp;}} for some type {{tt|V}} that meets the syntactic requirements of {{c|MoveConstructible&lt;V&gt;}} and {{c|Assignable&lt;V&amp;, V&gt;}}, exchanges the referenced values as if by {{c|1= V v{std::move(t)}; t = std::move(u); u = std::move(v);}}. If the semantic requirements of either concept are not satisfied, the program is ill-formed; no diagnostic required.
@4@ In all other cases, a call to {{tt|ranges::swap}} is ill-formed.

{{c|ranges::swap}} can be used in a constant expression if every function it calls (as specified above) can be so used.

{{cpp/experimental/ranges/cpo}}

===Exceptions===
@1@ {{noexcept|noexcept((void)swap(std::forward&lt;T&gt;(t), std::forward&lt;T&gt;(u)))}}, where {{tt|swap}} is found as described above.
@2@ {{noexcept|noexcept(ranges::swap(*t, *u))}}
@3@ {{noexcept|std::is_nothrow_move_constructible&lt;V&gt;::value &amp;&amp;
         std::is_nothrow_move_assignable&lt;V&gt;::value}}

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc swap}}
{{dsc end}}

{{langlinks|zh}}
{{cpp/experimental/ranges/title|greater_equal}}
{{cpp/experimental/ranges/utility/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/functional}}
{{dcl|since=ranges|1=
template&lt; class T = void &gt;
    requires StrictTotallyOrdered&lt;T&gt; {{!!}}
             Same&lt;T, void&gt; {{!!}}
             /* &lt; on two const T lvalues invokes a built-in operator comparing pointers */
struct greater_equal;
}}
{{dcl|since=ranges|1=
template&lt;&gt;
struct greater_equal&lt;void&gt;;
}}
{{dcl end}}

Function object for performing comparisons. The primary template invokes {{c|operator&lt;}} on const lvalues of type {{tt|T}} and negates the result. The specialization {{tt|greater_equal&lt;void&gt;}} deduces the parameter types of the function call operator from the arguments (but not the return type).

All specializations of {{tt|greater_equal}} are {{rconcept|Semiregular}}.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|is_transparent}} {{mark|member only of {{tt|greater_equal&lt;void&gt;}} specialization}}|/* unspecified */}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem fun|operator()|nolink=true|checks if the first argument is ''greater'' than or ''equal'' to the second}}
{{dsc end}}

{{member|1={{small|std::experimental::ranges::greater_equal::}}operator()|2=
{{dcl begin}}
{{dcl|num=1|notes={{mark|member only of primary {{tt|greater_equal&lt;T&gt;}} template}}|1=
constexpr bool operator()(const T&amp; x, const T&amp; y) const;
}}
{{dcl|num=2|notes={{mark|member only of {{tt|greater_equal&lt;void&gt;}} specialization}}|1=
template&lt; class T, class U &gt;
    requires StrictTotallyOrderedWith&lt;T, U&gt; {{!!}}
             /* std::declval&lt;T&gt;() &lt; std::declval&lt;U&gt;() resolves to
                a built-in operator comparing pointers */
constexpr bool operator()(T&amp;&amp; t, U&amp;&amp; u) const;
}}
{{dcl end}}

@1@ Compares {{tt|x}} and {{tt|y}}. Equivalent to {{c|return !ranges::less&lt;&gt;{}(x, y);}}.
@2@ Compares {{tt|t}} and {{tt|u}}. Equivalent to {{c|return !ranges::less&lt;&gt;{}(std::forward&lt;T&gt;(t), std::forward&lt;U&gt;(u));}}.
}}

===Notes===
Unlike {{lc|std::greater_equal}}, {{tt|ranges::greater_equal}} requires all six comparison operators {{tt|&lt;}}, {{tt|1=&lt;=}}, {{tt|&gt;}}, {{tt|1=&gt;=}}, {{tt|1===}} and {{tt|1=!=}} to be valid (via the {{rconcept|StrictTotallyOrdered}} and {{rconcept|StrictTotallyOrderedWith}} constraints) and is entirely defined in terms of {{lc|ranges::less}}. However, the implementation is free to use {{c|1=operator&gt;=}} directly, because those concepts require the results of the comparison operators to be consistent.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc greater_equal}}
{{dsc end}}

{{langlinks|zh}}
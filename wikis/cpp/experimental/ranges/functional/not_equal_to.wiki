{{cpp/experimental/ranges/title|not_equal_to}}
{{cpp/experimental/ranges/utility/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/functional}}
{{dcl|since=ranges|1=
template&lt; class T = void &gt;
    requires EqualityComparable&lt;T&gt; {{!!}}
             Same&lt;T, void&gt; {{!!}}
             /* == on two const T lvalues invokes a built-in operator comparing pointers */
struct not_equal_to;
}}
{{dcl|since=ranges|1=
template&lt;&gt;
struct not_equal_to&lt;void&gt;;
}}
{{dcl end}}

Function object for performing comparisons. The primary template invokes {{c|operator {{==}}}} on const lvalues of type {{tt|T}} and negates the result. The specialization {{tt|not_equal_to&lt;void&gt;}} deduces the parameter types of the function call operator from the arguments (but not the return type).

All specializations of {{tt|not_equal_to}} are {{rconcept|Semiregular}}.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|is_transparent}} {{mark|member only of {{tt|not_equal_to&lt;void&gt;}} specialization}}|/* unspecified */}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem fun|operator()|nolink=true|checks if the arguments are ''not equal''}}
{{dsc end}}

{{member|1={{small|std::experimental::ranges::not_equal_to::}}operator()|2=
{{dcl begin}}
{{dcl|num=1|notes={{mark|member only of primary {{tt|not_equal_to&lt;T&gt;}} template}}|1=
constexpr bool operator()(const T&amp; x, const T&amp; y) const;
}}
{{dcl|num=2|notes={{mark|member only of {{tt|not_equal_to&lt;void&gt;}} specialization}}|1=
template&lt; class T, class U &gt;
    requires EqualityComparableWith&lt;T, U&gt; {{!!}}
             /* std::declval&lt;T&gt;() == std::declval&lt;U&gt;() resolves to
                a built-in operator comparing pointers */
constexpr bool operator()(T&amp;&amp; t, U&amp;&amp; u) const;
}}
{{dcl end}}

@1@ Compares {{tt|x}} and {{tt|y}}. Equivalent to {{c|return !ranges::equal_to&lt;&gt;{}(x, y);}}.
@2@ Compares {{tt|t}} and {{tt|u}}. Equivalent to {{c|return !ranges::equal_to&lt;&gt;{}(std::forward&lt;T&gt;(t), std::forward&lt;U&gt;(u));}}.
}}

===Notes===
Unlike {{lc|std::not_equal_to}}, {{tt|ranges::not_equal_to}} requires both {{tt|1===}} and {{tt|1=!=}} to be valid (via the {{rconcept|EqualityComparable}} and {{rconcept|EqualityComparableWith}} constraints), and is entirely defined in terms of 
{{lc|ranges::equal_to}}. However, the implementation is free to use {{c|1=operator!=}} directly, because those concepts require the results of {{tt|{{==}}}} and {{tt|!{{=}}}} to be consistent.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc not_equal_to}}
{{dsc end}}

{{langlinks|zh}}
{{cpp/experimental/ranges/title|less}}
{{cpp/experimental/ranges/utility/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/functional}}
{{dcl|since=ranges|1=
template&lt; class T = void &gt;
    requires StrictTotallyOrdered&lt;T&gt; {{!!}}
             Same&lt;T, void&gt; {{!!}}
             /* &lt; on two const T lvalues invokes a built-in operator comparing pointers */
struct less;
}}
{{dcl|since=ranges|1=
template&lt;&gt;
struct less&lt;void&gt;;
}}
{{dcl end}}

Function object for performing comparisons. The primary template invokes {{c|operator&lt;}} on const lvalues of type {{tt|T}}. The specialization {{tt|less&lt;void&gt;}} deduces the parameter types of the function call operator from the arguments (but not the return type).

All specializations of {{tt|less}} are {{rconcept|Semiregular}}.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|is_transparent}} {{mark|member only of {{tt|less&lt;void&gt;}} specialization}}|/* unspecified */}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem fun|operator()|nolink=true|checks if the first argument is ''less'' than the second}}
{{dsc end}}

{{member|1={{small|std::experimental::ranges::less::}}operator()|2=
{{dcl begin}}
{{dcl|num=1|notes={{mark|member only of primary {{tt|less&lt;T&gt;}} template}}|1=
constexpr bool operator()(const T&amp; x, const T&amp; y) const;
}}
{{dcl|num=2|notes={{mark|member only of {{tt|less&lt;void&gt;}} specialization}}|1=
template&lt; class T, class U &gt;
    requires StrictTotallyOrderedWith&lt;T, U&gt; {{!!}}
             /* std::declval&lt;T&gt;() &lt; std::declval&lt;U&gt;() resolves to
                a built-in operator comparing pointers */
constexpr bool operator()(T&amp;&amp; t, U&amp;&amp; u) const;
}}
{{dcl end}}

@1@ Compares {{tt|x}} and {{tt|y}}. Equivalent to {{c|return ranges::less&lt;&gt;{}(x, y);}}.
@2@ Compares {{tt|t}} and {{tt|u}}. Equivalent to {{c|return std::forward&lt;T&gt;(t) &lt; std::forward&lt;U&gt;(u);}}, except when that expression resolves to a call to a builtin {{c|operator&lt;}} comparing pointers.

When a call to {{v|1}} or {{v|2}} would invoke a built-in operator comparing pointers of type {{tt|P}}, the result is instead determined as follows:
* Returns {{c|true}} if the (possibly converted) value of the first argument precedes the (possibly converted) value of the second argument in the implementation-defined strict total ordering over all pointer values of type {{tt|P}}. This strict total ordering is consistent with the partial order imposed by the builtin operators {{tt|&lt;}}, {{tt|&gt;}}, {{tt|&lt;{{=}}}}, and {{tt|&gt;{{=}}}}.
* Otherwise, returns {{c|false}}.

The behavior is undefined unless the conversion sequences from both {{tt|T}} and {{tt|U}} to {{tt|P}} are equality-preserving (see below).

{{cpp/experimental/ranges/equality preservation|skip-requires=yes}}
}}

===Notes===
Unlike {{lc|std::less}}, {{tt|ranges::less}} requires all six comparison operators {{tt|&lt;}}, {{tt|1=&lt;=}}, {{tt|&gt;}}, {{tt|1=&gt;=}}, {{tt|1===}} and {{tt|1=!=}} to be valid (via the {{rconcept|StrictTotallyOrdered}} and {{rconcept|StrictTotallyOrderedWith}} constraints).

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc less}}
{{dsc end}}

{{langlinks|zh}}
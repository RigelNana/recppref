{{cpp/experimental/ranges/title|Readable}}
{{cpp/experimental/ranges/iterator/navbar}}
{{ddcl|header=experimental/ranges/iterator|since=ranges|1=
template&lt; class In &gt;
concept bool Readable =
    requires {
        typename ranges::value_type_t&lt;In&gt;;
        typename ranges::reference_t&lt;In&gt;;
        typename ranges::rvalue_reference_t&lt;In&gt;;
    } &amp;&amp;
    CommonReference&lt;ranges::reference_t&lt;In&gt;&amp;&amp;, ranges::value_type_t&lt;In&gt;&amp;&gt; &amp;&amp;
    CommonReference&lt;ranges::reference_t&lt;In&gt;&amp;&amp;, ranges::rvalue_reference_t&lt;In&gt;&amp;&amp;&gt; &amp;&amp;
    CommonReference&lt;ranges::rvalue_reference_t&lt;In&gt;&amp;&amp;, const ranges::value_type_t&lt;In&gt;&amp;&gt;;
}}

The concept {{tt|Readable}} is satisfied by types that are readable by applying {{tt|operator*}}, such as pointers, smart pointers, and iterators.

{{langlinks|zh}}
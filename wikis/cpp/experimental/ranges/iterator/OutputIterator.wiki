{{cpp/experimental/ranges/title|OutputIterator}}
{{cpp/experimental/ranges/iterator/navbar}}
{{ddcl|header=experimental/ranges/iterator|since=ranges|1=
template&lt; class I, class T &gt;
concept bool OutputIterator =
    Iterator&lt;I&gt; &amp;&amp; Writable&lt;I, T&gt; &amp;&amp;
    requires(I i, T&amp;&amp; t) {
        *i++ = std::forward&lt;T&gt;(t); // not required to be equality preserving
    };
}}

The {{tt|OutputIterator}} concept is a refinement of {{rconcept|Iterator}}, adding the requirement that it can be used to write values of values of type and value category encoded by {{tt|T}} (via {{rconcept|Writable}}). {{rconcept|EqualityComparable}} is not required.

Let {{tt|E}} be an expression such that {{c|decltype((E))}} is {{tt|T}}, and {{tt|i}} be a dereferenceable object of type {{tt|I}}. {{tt|OutputIterator&amp;lt;I, T&amp;gt;}} is satisfied only if {{c|1=*i++ = E;}} has effects equivalent to {{c|1=*i = E; ++i;}}.

{{cpp/experimental/ranges/equality preservation|skip-requires=yes}}

===Notes===
Unlike the output iterator requirements in the C++ standard, {{tt|OutputIterator}} in the Ranges TS does not require that the iterator category tag be defined. 

Algorithms on output iterators should be single pass.

{{langlinks|zh}}
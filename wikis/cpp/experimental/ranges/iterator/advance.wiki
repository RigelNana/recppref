{{cpp/experimental/ranges/title|advance}}
{{cpp/experimental/ranges/iterator/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/iterator}}
{{dcl|notes={{mark|customization point object}}|since=ranges|1=
namespace {
    constexpr /* unspecified */ advance = /* unspecified */;
}
}}
{{dcl h|Call signature}}
{{dcl|num=1|
template&lt; Iterator I &gt;
constexpr void advance( I&amp; i, ranges::difference_type_t&lt;I&gt; n );
}}
{{dcl|num=2|
template&lt; Iterator I, Sentinel&lt;I&gt; S &gt;
constexpr void advance( I&amp; i, S bound );
}}
{{dcl|num=3|
template&lt; Iterator I, Sentinel&lt;I&gt; S &gt;
constexpr ranges::difference_type_t&lt;I&gt; advance( I&amp; i, ranges::difference_type_t&lt;I&gt; n, S bound );
}}
{{dcl end}}

Advances the iterator {{c|i}} {{c|n}} times, or until {{c|bound}} is reached, whichever comes first.

@1@ If {{tt|I}} models {{rconcept|RandomAccessIterator}}, equivalent to {{c|i +{{=}} n}}. Otherwise, increments (or decrements if {{c|n}} is negative) {{c|i}} {{c|n}} times. The behavior is undefined if {{c|n}} is negative and {{tt|I}} does not model {{rconcept|BidirectionalIterator}}.
@2@ If {{c|Assignable&lt;I&amp;, S&gt;}} is satisfied, equivalent to {{c|i {{=}} std::move(bound)}}.
@@ Otherwise, if {{range|i|bound}} does not denote a range, the behavior is undefined.
@@ Otherwise, if {{c|SizedSentinel&lt;S, I&gt;}} is satisfied, equivalent to {{c|ranges::advance(i, bound - i)}}.
@@ Otherwise, increments {{c|i}} until {{c|i {{==}} bound}}.
@3@ If {{c|SizedSentinel&lt;S, I&gt;}} is satisfied, equivalent to {{c|ranges::advance(i, bound)}} if |{{c|n}}| &gt;= |{{c|bound - i}}|, and {{c|ranges::advance(i, n)}} otherwise.
@@ Otherwise, increments (or decrements if {{c|n}} is negative) {{c|i}} either {{c|n}} times or until {{c|i {{==}} bound}}, whichever comes first.
@@ If {{c|n &gt; 0}}, {{range|i|bound}} shall denote a range; if {{c|n {{==}} 0}}, either {{range|i|bound}} or {{range|bound|i}} shall denote a range; if {{c|n &lt; 0}}, {{range|bound|i}} shall denote a range, {{tt|I}} and {{tt|S}} shall be the same type, and {{tt|I}} must model {{rconcept|BidirectionalIterator}}. Otherwise, the behavior is undefined.

{{cpp/experimental/ranges/cpo}}

===Return value===
@1,2@ (none)
@3@ The number of increment/decrements not performed due to reaching {{c|bound}}. In other words, {{c|n - M}}, where {{tt|M}} is the distance from the starting position of {{c|i}} to the ending position and is negative if the ending position is before the starting position.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc advance}}
{{dsc inc|cpp/experimental/ranges/iterator/dsc distance}}
{{dsc inc|cpp/experimental/ranges/iterator/dsc next}}
{{dsc inc|cpp/experimental/ranges/iterator/dsc prev}}
{{dsc end}}

{{langlinks|ja|zh}}
{{cpp/experimental/ranges/title|value_type}}
{{cpp/experimental/ranges/iterator/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/iterator}}
{{dcl|num=1|
template&lt; class I &gt;
struct value_type {};
}}
{{dcl|num=2|
template&lt; class T &gt;
struct value_type&lt;T*&gt;;
}}
{{dcl|num=3|
template&lt; class I &gt;
    requires std::is_array&lt;I&gt;::value
struct value_type&lt;I&gt; : value_type&lt;std::decay_t&lt;I&gt;&gt; {};
}}
{{dcl|num=4|
template&lt; class T &gt;
struct value_type&lt;const T&gt; : value_type&lt;std::decay_t&lt;T&gt;&gt; {};
}}
{{dcl|num=5|
template&lt; class T &gt;
    requires requires { typename T::value_type; }
struct value_type&lt;T&gt;;
}}
{{dcl|num=6|
template&lt; class T &gt;
    requires requires { typename T::element_type; }
struct value_type&lt;T&gt;;
}}
{{dcl end}}

Computes the associated value type of the type {{tt|I}}, if any. Users may specialize {{tt|value_type}} for a program-defined type.

@1@ Primary template is an empty struct.
@2@ Specialization for pointers. If {{tt|T}} is an object type, provides a member type {{tt|type}} equal to {{c|std::remove_cv_t&lt;T&gt;}}. Otherwise, there is no member {{tt|type}}.
@3@ Specialization for array types.
@4@ Specialization for const-qualified types.
@5@ Specialization for types that define a public and accessible member type {{tt|value_type}}. If {{tt|T::value_type}} is an object type, provides a member type {{tt|type}} equal to {{tt|T::value_type}}. Otherwise, there is no member {{tt|type}}.
@6@ Specialization for types that define a public and accessible member type {{tt|element_type}} (e.g., {{lc|std::shared_ptr}}). If {{tt|T::element_type}} is an object type, provides a member type {{tt|type}} equal to {{c|std::remove_cv_t&lt;typename T::element_type&gt;}}. Otherwise, there is no member {{tt|type}}.

===Helper alias template===
{{ddcl|since=ranges|1=
template&lt; class T &gt; 
using value_type_t = typename ranges::value_type&lt;T&gt;::type;
}}

===Notes===
If a type contains both a {{tt|value_type}} member and a {{tt|element_type}} member, then the specializations {{v|5}} and {{v|6}} are ambiguous.

{{tt|value_type}} is intended for use with {{rconcept|Readable}} types such as iterators. It is not intended for use with ranges.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/experimental/ranges/iterator/dsc Readable}}
{{dsc inc|cpp/experimental/ranges/iterator/dsc iterator_traits}}
{{dsc end}}

{{langlinks|ja|zh}}
{{cpp/experimental/ranges/title|Iterator}}
{{cpp/experimental/ranges/iterator/navbar}}
{{ddcl|header=experimental/ranges/iterator|since=ranges|1=
template&lt; class I &gt;
concept bool Iterator =
    requires(I i) {
        { *i } -&gt; auto&amp;&amp;; // Requires: i is dereferenceable
    } &amp;&amp;
    WeaklyIncrementable&lt;I&gt;;
}}

The {{tt|Iterator}} concept forms the basis of the iterator concept taxonomy; every iterator satisfies the {{tt|Iterator}} requirements.

{{cpp/experimental/ranges/equality preservation}}

===Notes===
{{tt|Iterator}} itself only specifies operations for dereferencing and incrementing an iterator. Most algorithms will require additional operations, for example:
* comparing iterators with sentinels (see {{rconcept|Sentinel}});
* reading values from an iterator (see {{rconcept|Readable}} and {{rconcept|InputIterator}});
* writing values to an iterator (see {{rconcept|Writable}} and {{rconcept|OutputIterator}});
* a richer set of iterator movements (see {{rconcept|ForwardIterator}}, {{rconcept|BidirectionalIterator}}, {{rconcept|RandomAccessIterator}}).

The {{c|-&gt; auto&amp;&amp;}} constraint implies that the result type of the deference cannot be {{c|void}}.

{{langlinks|zh}}
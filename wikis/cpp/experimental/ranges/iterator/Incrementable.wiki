{{cpp/experimental/ranges/title|Incrementable}}
{{cpp/experimental/ranges/iterator/navbar}}
{{ddcl|header=experimental/ranges/iterator|since=ranges|1=
template&lt; class I &gt;
concept bool Incrementable =
    Regular&lt;I&gt; &amp;&amp;
    WeaklyIncrementable&lt;I&gt; &amp;&amp;
    requires(I i) {
        { i++ } -&gt; Same&lt;I&gt;&amp;&amp;;
    };
}}

The concept {{tt|Incrementable&amp;lt;I&amp;gt;}} specifies the requirements on a type that can be incremented (with the pre- and post-increment operators). The increment operations (including those required by {{rconcept|WeaklyIncrementable}}) are required to be equality-preserving, and the type is required to be {{rconcept|EqualityComparable}}.

Let {{tt|a}} and {{tt|b}} be incrementable objects of type {{tt|I}}. {{tt|Incrementable&amp;lt;I&amp;gt;}} is satisfied only if:
* If {{c|1=bool(a == b)}} then {{c|1=bool(a++ == b)}}.
* If {{c|1=bool(a == b)}} then {{c|1=bool(void(a++), a) == ++b)}}.

{{cpp/experimental/ranges/equality preservation}}

===Notes===
The requirement that {{tt|a}} equals {{tt|b}} implies {{tt|++a}} equals {{tt|++b}} allows the use of multi-pass algorithms with {{tt|Incrementable}} types.

{{langlinks|zh}}
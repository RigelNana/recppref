{{cpp/experimental/ranges/title|input_iterator_tag|output_iterator_tag|forward_iterator_tag|bidirectional_iterator_tag|random_access_iterator_tag}}
{{cpp/experimental/ranges/iterator/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/iterator}}
{{dcl|
struct input_iterator_tag {};
}}
{{dcl|
struct output_iterator_tag {};
}}
{{dcl|
struct forward_iterator_tag : public input_iterator_tag {};
}}
{{dcl|
struct bidirectional_iterator_tag : public forward_iterator_tag {};
}}
{{dcl|
struct random_access_iterator_tag : public bidirectional_iterator_tag {};
}}
{{dcl end}}

Defines the category of an iterator. Each tag is an empty type and corresponds to one of the five iterator categories:
* {{tt|input_iterator_tag}} corresponds to {{rconcept|InputIterator}}.
* {{tt|forward_iterator_tag}} corresponds to {{rconcept|ForwardIterator}}.
* {{tt|bidirectional_iterator_tag}} corresponds to {{rconcept|BidirectionalIterator}}.
* {{tt|random_access_iterator_tag}} corresponds to {{rconcept|RandomAccessIterator}}.
* {{tt|output_iterator_tag}} corresponds to {{rconcept|OutputIterator}}; it is not used and provided solely for backward compatiblity.

Iterator category tags carry information that can be used to select the most efficient algorithms for the specific requirement set that is implied by the category. However, concept-based overloading is preferred.

For every {{rconcept|InputIterator}} type {{tt|I}}, {{c|ranges::iterator_category_t&lt;I&gt;}} must be defined to be an alias for the most specific category tag that describes the iterator's behavior.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc iterator tags}}
{{dsc inc|cpp/experimental/ranges/iterator/dsc iterator_traits}}
{{dsc end}}

{{langlinks|ja|zh}}
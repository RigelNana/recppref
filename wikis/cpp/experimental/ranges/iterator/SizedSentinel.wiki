{{cpp/experimental/ranges/title|SizedSentinel}}
{{cpp/experimental/ranges/iterator/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/iterator}}
{{dcl|num=1|since=ranges|1=
template&lt; class S, class I &gt;
concept bool SizedSentinel =
    Sentinel&lt;S, I&gt; &amp;&amp;
    !ranges::disable_sized_sentinel&lt;std::remove_cv_t&lt;S&gt;, std::remove_cv_t&lt;I&gt;&gt; &amp;&amp;
    requires(const I&amp; i, const S&amp; s) {
        { s - i } -&gt; Same&lt;ranges::difference_type_t&lt;I&gt;&gt;&amp;&amp;;
        { i - s } -&gt; Same&lt;ranges::difference_type_t&lt;I&gt;&gt;&amp;&amp;;
    };
}}
{{dcl|num=1|since=ranges|1=
template&lt; class S, class I &gt;
constexpr bool disable_sized_sentinel = false;
}}
{{dcl end}}

The {{tt|SizedSentinel}} concept specifies that an object of the iterator type {{tt|I}} and an object of the sentinel type {{tt|S}} can be subtracted to compute the distance between them in constant time. 

Let {{tt|i}} be an iterator of type {{tt|I}}, and {{tt|s}} a sentinel of type {{tt|S}} such that {{range|i|s}} denotes a range. Let {{tt|N}} be the smallest number of applications of {{tt|++i}} necessary to make {{c|1=bool(i == s)}} be true. Then {{tt|SizedSentinel&amp;lt;S, I&amp;gt;}} is satisfied only if:
* If {{tt|N}} is representable by {{c|ranges::difference_type_t&lt;I&gt;}}, then {{c|s - i}} is well-defined and equals {{tt|N}}; and
* If {{tt|-N}} is representable by {{c|ranges::difference_type_t&lt;I&gt;}}, then {{c|i - s}} is well-defined and equals {{tt|-N}}.

The variable template {{tt|disable_sized_sentinel}} provides a mechanism for iterators and sentinels that can be subtracted but do not meet the semantic requirements of {{tt|SizedSentinel}} to opt out of the concept by specializing the variable template to have the value {{c|true}}.

{{cpp/experimental/ranges/equality preservation}}
{{cpp/experimental/ranges/note implicit expression variations}}

{{langlinks|zh}}
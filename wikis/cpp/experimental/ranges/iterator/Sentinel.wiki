{{cpp/experimental/ranges/title|Sentinel}}
{{cpp/experimental/ranges/iterator/navbar}}
{{ddcl|header=experimental/ranges/iterator|since=ranges|1=
template&lt; class S, class I &gt;
concept bool Sentinel = 
    Semiregular&lt;S&gt; &amp;&amp; Iterator&lt;I&gt; &amp;&amp;
    WeaklyEqualityComparableWith&lt;S, I&gt;;
}}

The {{tt|Sentinel}} concept specifies the relationship between an {{rconcept|Iterator}} type and a {{rconcept|Semiregular}} type whose values denote a range.

Let {{tt|s}} and {{tt|i}} be values of type {{tt|S}} and {{tt|I}}, respectively, such that {{range|i|s}} denotes a range. {{tt|Sentinel&amp;lt;S, I&amp;gt;}} is satisfied only if:
* {{c|1=i == s}} is well-defined.
* If {{c|1=bool(i != s)}} then {{tt|i}} is dereferenceable and {{range|++i|s}} denotes a range.

The domain of {{tt|1===}} can change over time. Given an iterator {{tt|i}} and sentinel {{tt|s}} such that {{range|i|s}} denotes a range and {{c|1=i != s}}, {{range|i|s}} is not required to continue to denote a range after incrementing any iterator equal to {{tt|i}} (and so {{c|1=i == s}} is no longer required to be well-defined after such an increment).

{{langlinks|zh}}
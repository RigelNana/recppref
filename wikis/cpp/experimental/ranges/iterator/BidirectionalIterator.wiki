{{cpp/experimental/ranges/title|BidirectionalIterator}}
{{cpp/experimental/ranges/iterator/navbar}}
{{ddcl|header=experimental/ranges/iterator|since=ranges|1=
template&lt; class I &gt;
concept bool BidirectionalIterator =
    ForwardIterator&lt;I&gt; &amp;&amp;
    DerivedFrom&lt;ranges::iterator_category_t&lt;I&gt;, ranges::bidirectional_iterator_tag&gt; &amp;&amp;
    requires(I i) {
        { --i } -&gt; Same&lt;I&gt;&amp;;
        { i-- } -&gt; Same&lt;I&gt;&amp;&amp;;
    };
}}

The concept {{tt|BidirectionalIterator&amp;lt;I&amp;gt;}} refines {{rconcept|ForwardIterator}} by adding the ability to move an iterator backward.

A bidirectional iterator {{tt|r}} is said to be ''decrementable'' if and only if there exists some {{tt|s}} such that {{c|1=++s == r}}. All decrementable iterators {{tt|r}} shall be in the domain of the expressions {{c|--r}} and {{c|r--}}.

Let {{tt|a}} and {{tt|b}} be decrementable objects of type {{tt|I}}. {{tt|BidirectionalIterator&amp;lt;I&amp;gt;}} is satisfied only if:
* Pre-decrement yields an lvalue that refers to the operand: {{c|1=std::addressof(--a) == std::addressof(a)}}.
* Post-decrement yields the previous value of the operand: if {{c|1=bool(a == b)}}, then {{c|1=bool(a-- == b)}}.
* Post-decrement and pre-decrement perform the same modification on its operand: If {{c|1=bool(a == b)}}, then after evaluating both {{c|a--}} and {{c|--b}}, {{c|1=bool(a == b)}} still holds.
* Increment and decrement are inverses of each other:
:* If {{tt|a}} is incrementable and {{c|1=bool(a == b)}}, then {{c|1=bool(--(++a) == b)}}.
:* If {{c|1=bool(a == b)}}, then {{c|1=bool(++(--a) == b)}}.

{{cpp/experimental/ranges/equality preservation}}

{{langlinks|zh}}
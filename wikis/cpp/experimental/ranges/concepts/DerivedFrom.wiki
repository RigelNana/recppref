{{cpp/experimental/ranges/title|DerivedFrom}}
{{cpp/experimental/ranges/concepts/navbar}}
{{ddcl|header=experimental/ranges/concepts|since=ranges|1=
template&lt; class T, class U &gt;
concept bool DerivedFrom =
    std::is_base_of&lt;U, T&gt;::value &amp;&amp;
    std::is_convertible&lt;std::remove_cv_t&lt;T&gt;*, std::remove_cv_t&lt;U&gt;*&gt;::value; 
}}

The concept {{c|DerivedFrom&lt;T, U&gt;}} is satisfied if and only if {{tt|U}} is a class type that is either {{tt|T}} or a public and unambiguous base of {{tt|T}}.

Despite the use of {{lc|std::is_base_of}} and {{lc|std::is_convertible}} in its description above, {{tt|DerivedFrom}} is not required to use it in its implementation. Thus, there need not be any subsumption relationship between {{c|DerivedFrom&lt;T, U&gt;}} and {{c|std::is_base_of&lt;U,T&gt;::value}} or {{c|std::is_convertible&lt;std::remove_cv_t&lt;T&gt;*, std::remove_cv_t&lt;U&gt;*&gt;::value}}.

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_base_of}}
{{dsc inc|cpp/types/dsc is_convertible}}
{{dsc end}}

{{langlinks|zh}}
{{cpp/experimental/ranges/title|Destructible}}
{{cpp/experimental/ranges/concepts/navbar}}
{{ddcl|header=experimental/ranges/concepts|since=ranges|1=
template&lt; class T &gt;
concept bool Destructible = std::is_nothrow_destructible&lt;T&gt;::value; 
}}

The concept {{tt|Destructible}} specifies the concept of all types whose instances can safely be destroyed at the end of their lifetime (including reference types).

There need not be any subsumption relationship between {{tt|Destructible&lt;T&gt;}} and {{c|std::is_nothrow_destructible&lt;T&gt;::value}}.

===Notes===
Unlike the {{named req|Destructible}} named requirement in the main C++ standard, {{tt|Destructible}} requires the destructor to be {{c|noexcept(true)}}, not merely non-throwing when invoked, and allows reference types and array types.

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_destructible}}
{{dsc end}}

{{langlinks|zh}}
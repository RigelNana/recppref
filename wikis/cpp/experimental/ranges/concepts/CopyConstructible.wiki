{{cpp/experimental/ranges/title|CopyConstructible}}
{{cpp/experimental/ranges/concepts/navbar}}
{{ddcl|header=experimental/ranges/concepts|since=ranges|1=
template&lt; class T &gt;
concept bool CopyConstructible =
    MoveConstructible&lt;T&gt; &amp;&amp;
    Constructible&lt;T, T&amp;&gt; &amp;&amp; ConvertibleTo&lt;T&amp;, T&gt; &amp;&amp;
    Constructible&lt;T, const T&amp;&gt; &amp;&amp; ConvertibleTo&lt;const T&amp;, T&gt; &amp;&amp;
    Constructible&lt;T, const T&gt; &amp;&amp; ConvertibleTo&lt;const T, T&gt;;
}}

The concept {{tt|CopyConstructible}} is satisfied if {{tt|T}} is an lvalue reference type, or if it is a {{rconcept|MoveConstructible}} object type where an object of that type can constructed from a (possibly const) lvalue or const rvalue of that type in both direct- and copy-initialization contexts with the usual semantics (a copy is constructed with the source unchanged).

More precisely, if {{tt|T}} is an object type, then {{tt|CopyConstructible&lt;T&gt;}} is satisfied only if given
* {{tt|v}}, an lvalue of type (possibly {{c|const}}) {{tt|T}} or an rvalue of type {{c|const T}},
the following are true:
* After the definition {{c|1=T u = v;}}, {{tt|u}} is equal to {{tt|v}};
* {{c|T{v}&lt;!----&gt;}} is equal to {{tt|v}}.

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_copy_constructible}}
{{dsc end}}

{{langlinks|zh}}
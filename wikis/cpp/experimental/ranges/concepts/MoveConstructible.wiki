{{cpp/experimental/ranges/title|MoveConstructible}}
{{cpp/experimental/ranges/concepts/navbar}}
{{ddcl|header=experimental/ranges/concepts|since=ranges|1=
template&lt; class T &gt;
concept bool MoveConstructible =
    Constructible&lt;T, T&gt; &amp;&amp; ConvertibleTo&lt;T, T&gt;;
}}

The concept {{tt|MoveConstructible}} is satisfied if {{tt|T}} is a reference type, or if it is an object type where an object of that type can constructed from an rvalue of that type in both direct- and copy-initialization contexts, with the usual semantics.

More precisely, if {{tt|T}} is an object type, then {{tt|MoveConstructible&lt;T&gt;}} is satisfied only if given
* {{tt|rv}}, an rvalue of type {{tt|T}}, and
* {{tt|u2}}, a distinct object of type {{tt|T}} equal to {{tt|rv}},
the following are true:
* After the definition {{c|T u {{=}} rv;}}, {{tt|u}} is equal to {{tt|u2}};
* {{tt|T{rv} }} is equal to {{tt|u2}}; and
* If {{tt|T}} is not const-qualified, then {{tt|rv}}'s resulting state (after the definition/expression is evaluated in either bullets above) is valid but unspecified; otherwise, it is unchanged.

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_move_constructible}}
{{dsc end}}

{{langlinks|zh}}
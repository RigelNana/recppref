{{cpp/experimental/ranges/title|UniformRandomNumberGenerator}}
{{cpp/experimental/ranges/concepts/navbar}}
{{ddcl|header=experimental/ranges/random|since=ranges|1=
template&lt; class G &gt;
concept bool UniformRandomNumberGenerator =
    Invocable&lt;G&amp;&gt; &amp;&amp;
    UnsignedIntegral&lt;std::result_of_t&lt;G&amp;()&gt;&gt; &amp;&amp;
    requires {
        { G::min() } -&gt; Same&lt;std::result_of_t&lt;G&amp;()&gt;&gt;&amp;&amp;;
        { G::max() } -&gt; Same&lt;std::result_of_t&lt;G&amp;()&gt;&gt;&amp;&amp;;
    };
}}

The concept {{tt|UniformRandomNumberGenerator&lt;G&gt;}} specifies that {{tt|G}} is the type of a uniform random number generator, that is, objects of type {{tt|G}} is a function object returning unsigned integer values such that each value in the range of possible results has (ideally) equal probability of being returned.

{{tt|UniformRandomNumberGenerator&lt;G&gt;}} is satisfied only if, given any object {{tt|g}} of type {{tt|G}}:
* {{tt|G::min()}} and {{tt|G::max()}} are prvalue&lt;!--see P0898--&gt; constant expressions;
* {{tt|G::min() &lt; G::max()}}
* {{tt|g()}} is in the range {{tt|[G::min(), G::max()]}}
* {{tt|g()}} has amortized constant complexity.

{{langlinks|zh}}
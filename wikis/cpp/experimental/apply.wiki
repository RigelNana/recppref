{{cpp/experimental/title|apply}}
{{cpp/experimental/lib_extensions/navbar}}
{{fmbox|class=noprint|style=font-size: 0.8em|text='''Merged into ISO C++''' The functionality described on this page was merged into the mainline ISO C++ standard as of 3/2016, see  {{ltt|cpp/utility/apply|std::apply}} {{mark since c++17}}}}
{{dcl begin}}
{{dcl header|experimental/tuple}}
{{dcl|since=libfund_ts|
template&lt; class F, class Tuple &gt;
constexpr decltype(auto) apply(F&amp;&amp; f, Tuple&amp;&amp; t);
}}
{{dcl end}}
Invoke the {{named req|Callable}} object {{c|f}} with a tuple of arguments.

===Parameters===
{{par begin}}
{{par|f|{{named req|Callable}} object to be invoked}}
{{par|t|tuple whose elements to be used as arguments to {{c|f}}}}
{{par end}}

===Return value===
What returned by {{c|f}}.

===Possible implementation===
{{eq fun|1=
namespace detail
{
    template&lt;class F, class Tuple, std::size_t... I&gt;
    constexpr decltype(auto) apply_impl(F&amp;&amp; f, Tuple&amp;&amp; t, std::index_sequence&lt;I...&gt;)
    {
        return std::invoke(std::forward&lt;F&gt;(f), std::get&lt;I&gt;(std::forward&lt;Tuple&gt;(t))...);
        // Note: std::invoke is a C++17 feature
    }
} // namespace detail

template&lt;class F, class Tuple&gt;
constexpr decltype(auto) apply(F&amp;&amp; f, Tuple&amp;&amp; t)
{
    return detail::apply_impl(std::forward&lt;F&gt;(f), std::forward&lt;Tuple&gt;(t),
        std::make_index_sequence&lt;std::tuple_size_v&lt;std::decay_t&lt;Tuple&gt;&gt;&gt;{});
}
}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;tuple&gt;

template&lt;typename... Ts&gt;
void print_tuple(const std::tuple&lt;Ts...&gt; &amp;tuple)
{
    std::apply([](const auto&amp;... elem) 
    {
        ((std::cout &lt;&lt; elem &lt;&lt; '\n'), ...); 
    }, tuple);
}

int main()
{
    const std::tuple&lt;int, char&gt; t = std::make_tuple(5, 'a');
    print_tuple(t);
}
|output=
5
a
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/tuple/dsc make_tuple}}
{{dsc inc|cpp/utility/tuple/dsc forward_as_tuple}}
{{dsc end}}
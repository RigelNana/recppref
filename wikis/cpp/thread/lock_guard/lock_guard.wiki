{{cpp/thread/lock_guard/title|lock_guard}}
{{cpp/thread/lock_guard/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|
explicit lock_guard( mutex_type&amp; m );
}}
{{dcl|num=2|since=c++11|
lock_guard( mutex_type&amp; m, std::adopt_lock_t t );
}}
{{dcl|num=3|since=c++11|1=
lock_guard( const lock_guard&amp; ) = delete;
}}
{{dcl end}}

Acquires ownership of the given mutex {{c|m}}.

@1@ Effectively calls {{c|m.lock()}}.
@2@ Acquires ownership of the mutex {{c|m}} without attempting to lock it. The behavior is undefined if the current thread does not hold a non-shared lock (i.e., a lock acquired by {{tt|lock}}, {{tt|try_lock}}, {{tt|try_lock_for}}, or {{tt|try_lock_until}}) on {{c|m}}.&lt;!--P2160R1--&gt;
@3@ Copy constructor is deleted.

The behavior is undefined if {{c|m}} is destroyed before the {{tt|lock_guard}} object is.

===Parameters===
{{par begin}}
{{par|m|mutex to acquire ownership of}}
{{par|t|tag parameter used to select non-locking version of the constructor}}
{{par end}}

===Exceptions===
@1@ Throws any exceptions thrown by {{c|m.lock()}}.

@2@ Throws nothing.

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
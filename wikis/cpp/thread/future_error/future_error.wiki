{{cpp/thread/future_error/title|future_error}}
{{cpp/thread/future_error/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|
future_error( const future_error&amp; other ) noexcept;
}}
{{dcl|num=2|since=c++17|
explicit future_error( std::future_errc ec );
}}
{{dcl end}}

@1@ Copy constructor. Initializes the contents of the new {{tt|future_error}} object with those of {{c|other}}. If {{c|*this}} and {{c|other}} both have dynamic type {{tt|std::future_error}} then {{c|1=std::strcmp(what(), other.what()) == 0}}.
@2@ Constructs a new {{tt|future_error}} object containing the error code {{c|std::make_error_code(ec)}}.

===Parameters===
{{par begin}}
{{par|other|another {{tt|future_error}} object to copy}}
{{par|ec|error code}}
{{par end}}

===Notes===
There is no standard-compliant way for the user to construct a {{tt|future_error}} other than copying from another {{tt|future_error}} prior to C++17. C++11 and C++14 depict an exposition-only public constructor taking a {{lc|std::error_code}}, and some implementations provide such a constructor. 

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
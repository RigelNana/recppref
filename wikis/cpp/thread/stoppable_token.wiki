{{cpp/title|stoppable_token}}
{{cpp/thread/navbar}}
{{dcl begin}}
{{dcl header|stop_token}}
{{dcl|since=c++26|1=
template&lt; class Token &gt;
concept stoppable_token =
    requires (const Token tok) {
        typename /*check-type-alias-exists*/&lt;Token::template callback_type&gt;;
        { tok.stop_requested() } noexcept -&gt; std::same_as&lt;bool&gt;;
        { tok.stop_possible() } noexcept -&gt; std::same_as&lt;bool&gt;;
        { Token(tok) } noexcept; // see implicit expression variations
    } &amp;&amp;
    std::copyable&lt;Token&gt; &amp;&amp;
    std::equality_comparable&lt;Token&gt;;
}}
{{dcl h|Helper templates}}
{{dcl|notes={{mark expos}}|1=
template&lt; template&lt;class&gt; class &gt;
struct /*check-type-alias-exists*/; // not defined
}}
{{dcl end}}

The concept {{tt|stoppable_token&lt;Token&gt;}} specifies the basic interface of a stop token that is {{lconcept|copyable}} and {{lconcept|equality_comparable}} and allows polling to see if the stop request is possible and whether the request has been made.

===Semantic requirements===
{{todo}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/thread/dsc unstoppable_token}}
{{dsc end}}

{{langlinks|es|ja|zh|ru}}
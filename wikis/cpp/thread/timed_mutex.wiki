{{cpp/title|timed_mutex}}
{{cpp/thread/timed_mutex/navbar}}
{{ddcl|header=mutex|since=c++11|1=
class timed_mutex;
}}

The {{tt|timed_mutex}} class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads. 

In a manner similar to {{ltt|cpp/thread/mutex}}, {{tt|timed_mutex}} offers exclusive, non-recursive ownership semantics. In addition, {{tt|timed_mutex}} provides the ability to attempt to claim ownership of a {{tt|timed_mutex}} with a timeout via the member functions {{ltf|cpp/thread/timed_mutex/try_lock_for}} and {{ltf|cpp/thread/timed_mutex/try_lock_until}}.

The {{tt|timed_mutex}} class satisfies all requirements of {{named req|TimedMutex}} and {{named req|StandardLayoutType}}.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc inc|cpp/thread/dsc native_handle_type|timed_mutex}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/thread/mutex/dsc constructor|timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc destructor|timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc operator{{=}}}}

{{dsc h2|Locking}}
{{dsc inc|cpp/thread/mutex/dsc lock|timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock|timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_for|timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_until|timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc unlock|timed_mutex}}

{{dsc h2|Native handle}}
{{dsc inc|cpp/thread/mutex/dsc native_handle|timed_mutex}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
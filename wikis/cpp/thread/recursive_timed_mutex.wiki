{{cpp/title|recursive_timed_mutex}}
{{cpp/thread/recursive_timed_mutex/navbar}}
{{ddcl|header=mutex|since=c++11|1=
class recursive_timed_mutex;
}}

The {{tt|recursive_timed_mutex}} class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads.

In a manner similar to {{lc|std::recursive_mutex}}, {{tt|recursive_timed_mutex}} provides exclusive, recursive ownership semantics. In addition, {{tt|recursive_timed_mutex}} provides the ability to attempt to claim ownership of a {{tt|recursive_timed_mutex}} with a timeout via the [[cpp/thread/recursive_timed_mutex/try_lock_for|{{tt|try_lock_for}}]] and [[cpp/thread/recursive_timed_mutex/try_lock_until|{{tt|try_lock_until}}]] member functions.

The {{tt|recursive_timed_mutex}} class satisfies all requirements of {{named req|TimedMutex}} and {{named req|StandardLayoutType}}.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc inc|cpp/thread/dsc native_handle_type|recursive_timed_mutex}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/thread/mutex/dsc constructor|recursive_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc destructor|recursive_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc operator{{=}}}}

{{dsc h2|Locking}}
{{dsc inc|cpp/thread/mutex/dsc lock|recursive_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock|recursive_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_for|recursive_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_until|recursive_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc unlock|recursive_timed_mutex}}

{{dsc h2|Native handle}}
{{dsc inc|cpp/thread/mutex/dsc native_handle|recursive_timed_mutex}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
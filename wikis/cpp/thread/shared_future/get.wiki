{{cpp/thread/shared_future/title|get}}
{{cpp/thread/shared_future/navbar}}

{{dcl begin}}
{{dcl h|Main template}}
{{dcl|num=1|since=c++11|
const T&amp; get() const;
}}
{{dcl h|{{c/core|std::shared_future&lt;T&amp;&gt;}} specializations}}
{{dcl|num=2|since=c++11|
T&amp; get() const;
}}
{{dcl h|{{c/core|std::shared_future&lt;void&gt;}} specialization}}
{{dcl|num=3|since=c++11|
void get() const;
}}
{{dcl end}}

The {{tt|get}} member function waits (by calling {{lc|wait()}}) until the shared state is ready, then retrieves the value stored in the shared state (if any).

If {{lc|valid()}} is {{c|false}} before the call to this function, the behavior is undefined.

===Return value===
@1@ A const reference to the value stored in the shared state. The behavior of accessing the value through this reference after the shared state has been destroyed is undefined.
@2@ The reference stored as value in the shared state.
@3@ (none)

===Exceptions===
If an exception was stored in the shared state referenced by the future (e.g. via a call to {{l2tf std|cpp/thread/promise/set_exception}}) then that exception will be thrown.

===Notes===
The C++ standard recommends the implementations to detect the case when {{lc|valid()}} is {{c|false}} before the call and throw a {{lc|std::future_error}} with an error condition of {{lc|std::future_errc::no_state}}.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/thread/future/dsc valid|shared_future}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
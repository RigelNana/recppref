{{cpp/thread/scoped_lock/title|scoped_lock}}
{{cpp/thread/scoped_lock/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|
explicit scoped_lock( MutexTypes&amp;... m );
}}
{{dcl|num=2|since=c++17|
scoped_lock( std::adopt_lock_t, MutexTypes&amp;... m );
}}
{{dcl|num=3|since=c++17|1=
scoped_lock( const scoped_lock&amp; ) = delete;
}}
{{dcl end}}

Acquires ownership of the given mutexes {{c|m}}.

@1@ If {{c|1=sizeof...(MutexTypes) == 0}}, does nothing. Otherwise, if {{c|1=sizeof...(MutexTypes) == 1}}, effectively calls {{c|m.lock()}}. Otherwise, effectively calls {{c|std::lock(m...)}}.
@2@ Acquires ownership of the mutexes {{c|m...}} without attempting to lock any of them. The behavior is undefined unless the current thread holds a non-shared lock (i.e., a lock acquired by {{tt|lock}}, {{tt|try_lock}}, {{tt|try_lock_for}}, or {{tt|try_lock_until}}) on each object in {{c|m...}}.&lt;!--P2160R1--&gt;
@3@ Copy constructor is deleted.

The behavior is undefined if {{c|m}} is destroyed before the {{tt|scoped_lock}} object is.

===Parameters===
{{par begin}}
{{par|m|mutexes to acquire ownership of}}
{{par end}}

===Exceptions===
@1@ Throws any exceptions thrown by {{c|m.lock()}}.
@2@ Throws nothing.

===Defect reports===
{{dr list begin}}
{{dr list item|paper=p0739r0|std=C++17|before={{tt|adopt_lock_t}} parameter was last, impeding class template argument deduction|after=moved to first}}
{{dr list end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
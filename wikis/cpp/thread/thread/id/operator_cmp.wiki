{{title|1=operator==,!=,&lt;,&lt;=,&gt;,&gt;=,&lt;=&gt;{{small|(std::thread::id)}}}}
{{cpp/thread/thread/id/navbar}}
{{dcl begin}}
{{dcl header|thread}}
{{dcl|num=1|since=c++11|1=
bool operator==( std::thread::id lhs, std::thread::id rhs ) noexcept;
}}
{{dcl|num=2|since=c++11|until=c++20|1=
bool operator!=( std::thread::id lhs, std::thread::id rhs ) noexcept;
}}
{{dcl|num=3|since=c++11|until=c++20|1=
bool operator&lt; ( std::thread::id lhs, std::thread::id rhs ) noexcept;
}}
{{dcl|num=4|since=c++11|until=c++20|1=
bool operator&lt;=( std::thread::id lhs, std::thread::id rhs ) noexcept;
}}
{{dcl|num=5|since=c++11|until=c++20|1=
bool operator&gt; ( std::thread::id lhs, std::thread::id rhs ) noexcept;
}}
{{dcl|num=6|since=c++11|until=c++20|1=
bool operator&gt;=( std::thread::id lhs, std::thread::id rhs ) noexcept;
}}
{{dcl|num=7|since=c++20|1=
std::strong_ordering operator&lt;=&gt;( std::thread::id lhs,
                                  std::thread::id rhs ) noexcept;
}}
{{dcl end}}

Compares two thread identifiers.

@1,2@ Checks whether {{c|lhs}} and {{c|rhs}} represent either the same thread, or no thread.

@3-7@ Compares {{c|lhs}} and {{c|rhs}} in an unspecified total ordering.

{{rrev|since=c++20|
{{cpp/note synthesized compare}}
}}

===Parameters===
{{par begin}}
{{par|lhs, rhs|thread identifiers to compare}}
{{par end}} 

===Return value===
@1-6@ {{c|true}} if the corresponding relation holds, {{c|false}} otherwise.

@7@ {{c|std::strong_ordering::less}} if {{c|lhs}} is less than {{c|rhs}} in the total ordering; otherwise {{c|std::strong_ordering::greater}} if {{c|rhs}} is less than {{c|lhs}} in the total ordering; otherwise {{c|std::strong_ordering::equal}}.

===Complexity===
Constant.

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;thread&gt;


int main()
{
    auto work = [] { std::this_thread::sleep_for(std::chrono::seconds(1)); };
    std::thread t1(work);
    std::thread t2(work);

    assert(t1.get_id() == t1.get_id() and
           t2.get_id() == t2.get_id() and
           t1.get_id() != t2.get_id());

    if (const auto cmp = t1.get_id() &lt;=&gt; t2.get_id(); cmp &lt; 0)
        std::cout &lt;&lt; "id1 &lt; id2\n";
    else
        std::cout &lt;&lt; "id1 &gt; id2\n";

    std::cout &lt;&lt; "id1: " &lt;&lt; t1.get_id() &lt;&lt; "\n"
                 "id2: " &lt;&lt; t2.get_id() &lt;&lt; '\n';

    t1.join();
    t2.join();
}
|p=true
|output=
id1 &gt; id2
id1: 139741717640896
id2: 139741709248192
}}

===See also===
{{dsc begin}}
{{dsc see c|c/thread/thrd_equal}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
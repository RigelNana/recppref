{{title|deduction guides for {{tt|std::packaged_task}}}}
{{cpp/thread/packaged_task/navbar}}
{{dcl begin}}
{{dcl header|future}}
{{dcl|num=1|since=c++17|
template&lt; class R, class... Args &gt; 
packaged_task( R(*)(Args...) ) -&gt; packaged_task&lt;R(Args...)&gt;;
}}
{{dcl|num=2|since=c++17|
template&lt; class F &gt;
packaged_task( F ) -&gt; packaged_task&lt;/*see below*/&gt;;
}}
{{dcl|num=3|since=c++23|
template&lt; class F &gt;
packaged_task( F ) -&gt; packaged_task&lt;/*see below*/&gt;;
}}
{{dcl|num=4|since=c++23|
template&lt; class F &gt;
packaged_task( F ) -&gt; packaged_task&lt;/*see below*/&gt;;
}}
{{dcl end}}
@1@ This [[cpp/language/class template argument deduction|deduction guide]] is provided for {{lc|std::packaged_task}} to allow deduction from functions.
@2@ {{cpp/enable_if|{{c|&amp;F::operator()}} is well-formed when treated as an unevaluated operand and  {{c|decltype(&amp;F::operator())}} is of the form {{c|R(G::*)(A...)}} (optionally cv-qualified, optionally noexcept, optionally lvalue reference qualified)}}. The deduced type is {{c|std::packaged_task&lt;R(A...)&gt;}}.
@3@ {{cpp/enable_if|{{c|&amp;F::operator()}} is well-formed when treated as an unevaluated operand and {{c|F::operator()}} is an [[cpp/language/member_functions#Explicit_object_parameter|explicit object parameter function]] whose type is of form {{c|R(G, A...)}} or {{c|R(G, A...) noexcept}}}}. The deduced type is {{c|std::packaged_task&lt;R(A...)&gt;}}.
@4@ {{cpp/enable_if|{{c|&amp;F::operator()}} is well-formed when treated as an unevaluated operand and {{c|F::operator()}} is a [[cpp/language/static#Static_member_functions|static member function]] whose type is of form {{c|R(A...)}} or {{c|R(A...) noexcept}}}}. The deduced type is {{c|std::packaged_task&lt;R(A...)&gt;}}.

===Notes===
These deduction guides do not allow deduction from a function with [[cpp/language/variadic_arguments|ellipsis parameter]], and the {{c|...}} in the types is always treated as a {{lsd|cpp/language/parameter pack#Pack expansion}}.

===Example===
{{example
|code=
#include &lt;future&gt;

int func(double) { return 0; }

int main()
{
    std::packaged_task f{func}; // deduces packaged_task&lt;int(double)&gt;

    int i = 5;
    std::packaged_task g = [&amp;](double) { return i; }; // =&gt; packaged_task&lt;int(double)&gt;
}
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
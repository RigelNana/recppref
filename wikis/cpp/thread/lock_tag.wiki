{{cpp/title|defer_lock|try_to_lock|adopt_lock|defer_lock_t|try_to_lock_t|adopt_lock_t}}
{{cpp/thread/navbar}}
{{dcl begin}}
{{dcl header|mutex}}
{{dcl|num=1|since=c++11|1=
struct defer_lock_t { explicit defer_lock_t() = default; };
}}
{{dcl|num=2|since=c++11|notes={{mark|inline since C++17}}|1=
constexpr std::defer_lock_t defer_lock {};
}}
{{dcl|num=3|since=c++11|1=
struct try_to_lock_t { explicit try_to_lock_t() = default; };
}}
{{dcl|num=4|since=c++11|notes={{mark|inline since C++17}}|1=
constexpr std::try_to_lock_t try_to_lock {};
}}
{{dcl|num=5|since=c++11|1=
struct adopt_lock_t { explicit adopt_lock_t() = default; };
}}
{{dcl|num=6|since=c++11|notes={{mark|inline since C++17}}|1=
constexpr std::adopt_lock_t adopt_lock {};
}}
{{dcl end}}

@1,3,5@ The empty class tag types {{tt|std::defer_lock_t}}, {{tt|std::try_to_lock_t}} and {{tt|std::adopt_lock_t}} can be used in the constructor's parameter list for {{lc|std::unique_lock}} and {{lc|std::shared_lock}} to specify locking strategy. 

@2,4,6@ The corresponding {{tt|std::defer_lock}}, {{tt|std::try_to_lock}} and {{tt|std::adopt_lock}} instances of {{v|1,3,5}} can be passed to the constructors to indicate the type of locking strategy.

One of the constructors of the class template {{lc|std::lock_guard}} only accepts the tag {{tt|std::adopt_lock}}.

{{cpp/thread/lock_tag_types}}

===Example===
{{include|cpp/thread/example_lock_tag}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/thread/dsc lock_tag_t}}
{{dsc inc|cpp/thread/lock_guard/dsc constructor}}
{{dsc inc|cpp/thread/unique_lock/dsc constructor}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/thread/stop_token/title|stop_possible}}
{{cpp/thread/stop_token/navbar}}
{{ddcl|since=c++20|
bool stop_possible() const noexcept;
}}

Checks if the {{tt|stop_token}} object has associated stop-state, and that state either has already had a stop requested or it has associated {{lc|std::stop_source}} object(s).

A default constructed {{c|stop_token}} has no associated stop-state, and thus cannot be stopped; the associated stop-state for which no {{lc|std::stop_source}} object(s) exist can also not be stopped if such a request has not already been made.

===Parameters===
(none)

===Return value===
{{c|false}} if the {{tt|stop_token}} object has no associated stop-state, or it did not yet receive a stop request and there are no associated {{lc|std::stop_source}} object(s); {{c|true}} otherwise.

===Notes===
If the {{tt|stop_token}} object has associated stop-state and a stop request has already been made, this function still returns {{c|true}}.

If the {{tt|stop_token}} object has associated stop-state from a {{lc|std::jthread}}&amp;mdash;for example, the {{tt|stop_token}} was retrieved by invoking {{c|get_stop_token()}} on a {{lc|std::jthread}} object&amp;mdash;then this function always returns {{c|true}}. A {{lc|std::jthread}} always has an internal {{lc|std::stop_source}} object, even if the thread's invoking function does not check it.

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;condition_variable&gt;
#include &lt;format&gt;
#include &lt;iostream&gt;
#include &lt;mutex&gt;
#include &lt;string_view&gt;
#include &lt;thread&gt;
using namespace std::chrono_literals;

int main()
{
    std::cout &lt;&lt; std::boolalpha;
    auto print = [](std::string_view name, const std::stop_token&amp; token)
    {
        std::cout &lt;&lt; std::format("{}: stop_possible = {:s}, stop_requested = {:s}\n", 
            name, token.stop_possible(), token.stop_requested()
        );
    };

    // A worker thread that will listen to stop requests
    auto stop_worker = std::jthread([](std::stop_token stoken)
    {
        for (int i = 10; i; --i)
        {
            std::this_thread::sleep_for(300ms);
            if (stoken.stop_requested())
            {
                std::cout &lt;&lt; "  Sleepy worker is requested to stop\n";
                return;
            }
            std::cout &lt;&lt; "  Sleepy worker goes back to sleep\n";
        }
    });

    // A worker thread that will only stop when completed
    auto inf_worker = std::jthread([]()
    {
        for (int i = 5; i; --i)
        {
            std::this_thread::sleep_for(300ms);
            std::cout &lt;&lt; "  Run as long as we want\n";
        }
    });

    std::stop_token def_token;
    std::stop_token stop_token = stop_worker.get_stop_token();
    std::stop_token inf_token = inf_worker.get_stop_token();
    print("def_token ", def_token);
    print("stop_token", stop_token);
    print("inf_token ", inf_token);

    std::cout &lt;&lt; "\nRequest and join stop_worker:\n";
    stop_worker.request_stop();
    stop_worker.join();

    std::cout &lt;&lt; "\nRequest and join inf_worker:\n";
    inf_worker.request_stop();
    inf_worker.join();
    std::cout &lt;&lt; '\n';

    print("def_token ", def_token);
    print("stop_token", stop_token);
    print("inf_token ", inf_token);
}
|p=true
|output=
def_token : stop_possible = false, stop_requested = false
stop_token: stop_possible = true, stop_requested = false
inf_token : stop_possible = true, stop_requested = false

Request and join stop_worker:
  Run as long as we want
  Sleepy worker is requested to stop

Request and join inf_worker:
  Run as long as we want
  Run as long as we want
  Run as long as we want
  Run as long as we want

def_token : stop_possible = false, stop_requested = false
stop_token: stop_possible = true, stop_requested = true
inf_token : stop_possible = true, stop_requested = true
}}

{{langlinks|es|ja|ru|zh}}
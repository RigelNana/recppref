{{cpp/thread/stop_source/title|stop_source}}
{{cpp/thread/stop_source/navbar}}

{{dcl begin}}
{{dcl|since=c++20|num=1|
stop_source();
}}
{{dcl|since=c++20|num=2|
explicit stop_source( std::nostopstate_t nss ) noexcept;
}}
{{dcl|since=c++20|num=3|
stop_source( const stop_source&amp; other ) noexcept;
}}
{{dcl|since=c++20|num=4|
stop_source( stop_source&amp;&amp; other ) noexcept;
}}
{{dcl end}}

Constructs a new {{tt|stop_source}} object.

@1@ Constructs a {{tt|stop_source}} with new stop-state.
@2@ Constructs an empty {{tt|stop_source}} with no associated stop-state.
@3@ Copy constructor. Constructs a {{tt|stop_source}} whose associated stop-state is the same as that of {{c|other}}.
@4@ Move constructor. Constructs a {{tt|stop_source}} whose associated stop-state is the same as that of {{c|other}}; {{c|other}} is left empty.

===Parameters===
{{par begin}}
{{par|nss|an {{tt|std::nostopstate_t}} placeholder object to construct an empty {{tt|stop_source}}}}
{{par|other|another {{tt|stop_source}} object to construct this {{tt|stop_source}} object with}}
{{par end}}

===Postconditions===
@1@ {{lc|stop_possible()}} is {{c|true}} and {{lc|stop_requested()}} is {{c|false}}. 
@2@ {{lc|stop_possible()}} and {{lc|stop_requested()}} are both {{c|false}}.
@3@ {{c|*this}} and {{c|other}} share the same associated stop-state and compare equal.
@4@ {{c|*this}} has {{c|other}}'s previously associated stop-state, and {{c|other.stop_possible()}} is {{c|false}}.

===Exceptions===
@1@ {{lc|std::bad_alloc}} if memory could not be allocated for the stop-state.

{{langlinks|es|ja|ru|zh}}
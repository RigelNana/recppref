{{cpp/thread/condition_variable_any/title|wait_for}}
{{cpp/thread/condition_variable_any/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++11|
template&lt; class Lock, class Rep, class Period &gt;
std::cv_status wait_for( Lock&amp; lock,
                         const std::chrono::duration&lt;Rep, Period&gt;&amp; rel_time );
}}
{{dcl|num=2|since=c++11|
template&lt; class Lock, class Rep, class Period, class Predicate &gt;
bool wait_for( Lock&amp; lock, const std::chrono::duration&lt;Rep, Period&gt;&amp; rel_time,
               Predicate pred );
}}
{{dcl|num=3|since=c++20|
template&lt; class Lock, class Rep, class Period, class Predicate &gt;
bool wait_for( Lock&amp; lock, std::stop_token stoken,
               const std::chrono::duration&lt;Rep, Period&gt;&amp; rel_time,
               Predicate pred );
}}
{{dcl end}}

{{tt|wait_for}} causes the current thread to block until the condition variable is notified, the given duration has been elapsed, or a spurious wakeup occurs. {{c|pred}} can be optionally provided to detect spurious wakeup.

@1@ Equivalent to {{c|return wait_until(lock, std::chrono::steady_clock::now() + rel_time);}}.

@2,3@ Waiting for a specific condition to become true, can be used to ignore spurious awakenings.
:@2@ Equivalent to {{c|return wait_until(lock, std::chrono::steady_clock::now() + rel_time, std::move(pred));}}.
:@3@ Registers {{c|*this}} for the duration of this call, to be notified if a stop request is made on {{c|stoken}}'s associated stop-state; it is then equivalent to {{c multi|return wait_until(lock, std::move(stoken),|                  std::chrono::steady_clock::now() + rel_time, std::move(pred));}}.

Right after {{tt|wait_for}} returns, {{c|lock}} is locked by the calling thread. If this postcondition cannot be satisfied&lt;ref&gt;This can happen if the re-locking of the mutex throws an exception.&lt;/ref&gt;, calls {{lc|std::terminate}}.

&lt;references/&gt;

===Parameters===
{{par begin}}
{{par|lock|an lock which must be locked by the calling thread}}
{{par|stoken|a stop token to register interruption for}}
{{par|rel_time|the maximum duration to wait}}
{{par|pred|the predicate to check whether the waiting can be completed}}
{{par hreq}}
{{par req named|Lock|BasicLockable}}
{{par req named|Predicate|FunctionObject}}
{{par req|{{c|pred()}} must be a valid expression, and its type and value category must meet the {{named req|BooleanTestable}} requirements.}}
{{par end}}

===Return value===
@1@ {{c|std::cv_status::timeout}} if {{c|rel_time}} has been elapsed since the beginning of this call, otherwise {{c|std::cv_status::no_timeout}}.
@2,3@ The latest result of {{c|pred()}} before returning to the caller.

===Exceptions===
@1@ Timeout-related exceptions.
@2,3@ Timeout-related exceptions, and any exception thrown by {{c|pred}}.

===Notes===
Even if notified under lock, overload {{v|1}} makes no guarantees about the state of the associated predicate when returning due to timeout.

{{cpp/thread/condition_variable/single total order note}}

===Example===
{{cpp/thread/condition_variable/example1|condition_variable_any}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2093|std=C++11|before=timeout-related exceptions were missing in the specification|after=mentions these exceptions}}
{{dr list item|wg=lwg|dr=2114|paper=P2167R3|std=C++11|before=convertibility to {{c/core|bool}} was too weak to reflect the expectation of implementations|after=requirements strengthened}}
{{dr list item|wg=lwg|dr=2135|std=C++11|before=the behavior was unclear if {{c|lock.lock()}} throws an exception|after=calls {{lc|std::terminate}} in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/thread/condition_variable/dsc wait|condition_variable_any}}
{{dsc inc|cpp/thread/condition_variable/dsc wait_until|condition_variable_any}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
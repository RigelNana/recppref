{{cpp/title|jthread}}
{{cpp/thread/jthread/navbar}}
{{ddcl|header=thread|since=c++20|
class jthread;
}}

The class {{tt|jthread}} represents [[enwiki:Thread_(computing)|a single thread of execution]]. It has the same general behavior as {{lc|std::thread}}, except that {{tt|jthread}} automatically rejoins on destruction, and can be cancelled/stopped in certain situations.

Threads begin execution immediately upon construction of the associated thread object (pending any OS scheduling delays), starting at the top-level function provided as a {{rlp|jthread/jthread|constructor argument}}. The return value of the top-level function is ignored and if it terminates by throwing an exception, {{lc|std::terminate}} is called. The top-level function may communicate its return value or an exception to the caller via {{lc|std::promise}} or by modifying shared variables (which may require synchronization, see {{lc|std::mutex}} and {{lc|std::atomic}}).

Unlike {{lc|std::thread}}, the {{tt|jthread}} logically holds an internal private member of type {{tt|std::stop_source}}, which maintains a shared stop-state. The {{tt|jthread}} constructor accepts a function that takes a {{lc|std::stop_token}} as its first argument, which will be passed in by the {{tt|jthread}} from its internal {{lc|std::stop_source}}. This allows the function to check if stop has been requested during its execution, and return if it has.

{{tt|std::jthread}} objects may also be in the state that does not represent any thread (after default construction, move from, {{lc|detach}}, or {{lc|join}}), and a thread of execution may be not associated with any {{tt|jthread}} objects (after {{lc|detach}}).

No two {{tt|std::jthread}} objects may represent the same thread of execution; {{tt|std::jthread}} is not {{named req|CopyConstructible}} or {{named req|CopyAssignable}}, although it is {{named req|MoveConstructible}} and {{named req|MoveAssignable}}.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|id}}|{{ltt|cpp/thread/thread/id|std::thread::id}}}}
{{dsc inc|cpp/thread/dsc native_handle_type|jthread}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/thread/jthread/dsc constructor}}
{{dsc inc|cpp/thread/jthread/dsc destructor}}
{{dsc inc|1=cpp/thread/jthread/dsc operator=}}

{{dsc h2|Observers}}
{{dsc inc|cpp/thread/thread/dsc joinable|jthread}}
{{dsc inc|cpp/thread/thread/dsc get_id|jthread}}
{{dsc inc|cpp/thread/thread/dsc native_handle|jthread}}
{{dsc inc|cpp/thread/thread/dsc hardware_concurrency|jthread}}

{{dsc h2|Operations}}
{{dsc inc|cpp/thread/thread/dsc join|jthread}}
{{dsc inc|cpp/thread/thread/dsc detach|jthread}}
{{dsc inc|cpp/thread/thread/dsc swap|jthread}}

{{dsc h2|Stop token handling}}
{{dsc inc|cpp/thread/jthread/dsc get_stop_source}}
{{dsc inc|cpp/thread/jthread/dsc get_stop_token}}
{{dsc inc|cpp/thread/jthread/dsc request_stop}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/thread/thread/dsc swap2|jthread}}
{{dsc end}}

===Notes===
{{feature test macro|__cpp_lib_jthread|std=C++20|value=201911L|{{rlp|stop_token|Stop token}} and [[#Top|joining thread]]}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/thread/dsc thread}}
{{dsc end}}

{{langlinks|ar|de|es|fr|it|ja|pt|ru|zh}}
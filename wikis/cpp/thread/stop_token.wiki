{{cpp/title|stop_token}}
{{cpp/thread/stop_token/navbar}}
{{ddcl|header=stop_token|since=c++20|
class stop_token;
}}

The {{tt|stop_token}} class provides the means to check if a stop request has been made or can be made, for its associated {{ltt|cpp/thread/stop_source|std::stop_source}} object. It is essentially a thread-safe "view" of the associated stop-state.

The {{tt|stop_token}} can also be passed to the constructor of {{ltt|cpp/thread/stop_callback|std::stop_callback}}, such that the callback will be invoked if the {{tt|stop_token}}'s associated {{lc|std::stop_source}} is requested to stop. And {{tt|stop_token}} can be passed to the interruptible waiting functions of {{lc|std::condition_variable_any}}, to interrupt the condition variable's wait if stop is requested.

===Member alias templates===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{c/core|callback_type&lt;Callback&gt;}} {{mark since c++26}}|{{c/core|std::stop_callback&lt;Callback&gt;}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/thread/stop_token/dsc constructor}}
{{dsc inc|cpp/thread/stop_token/dsc destructor}}
{{dsc inc|cpp/thread/stop_token/dsc operator{{=}}}}

{{dsc h2|Modifiers}}
{{dsc inc|cpp/thread/stop_token/dsc swap}}

{{dsc h2|Observers}}
{{dsc inc|cpp/thread/stop_token/dsc stop_requested}}
{{dsc inc|cpp/thread/stop_token/dsc stop_possible}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/thread/stop_token/dsc operator_cmp}}
{{dsc inc|cpp/thread/stop_token/dsc swap2}}
{{dsc end}}

===Notes===
A {{tt|stop_token}} object is not generally constructed independently, but rather retrieved from a {{lc|std::jthread}} or {{lc|std::stop_source}}. This makes it share the same associated stop-state as the {{lc|std::jthread}} or {{lc|std::stop_source}}.

{{feature test macro|__cpp_lib_jthread|std=C++20|value=201911L|[[#Top|Stop token]] and {{rlp|jthread|joining thread}}}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;thread&gt;

using namespace std::literals::chrono_literals;

void f(std::stop_token stop_token, int value)
{
    while (!stop_token.stop_requested())
    {
        std::cout &lt;&lt; value++ &lt;&lt; ' ' &lt;&lt; std::flush;
        std::this_thread::sleep_for(200ms);
    }
    std::cout &lt;&lt; std::endl;
}

int main()
{
    std::jthread thread(f, 5); // prints 5 6 7 8... for approximately 3 seconds
    std::this_thread::sleep_for(3s);
    // The destructor of jthread calls request_stop() and join().
}
|p=true
|output=
5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
}}

{{langlinks|es|ja|zh}}
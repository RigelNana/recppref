{{cpp/thread/shared_lock/title|try_lock_for}}
{{cpp/thread/shared_lock/navbar}}
{{dcl begin}}
{{dcl|since=c++14|1=
template&lt; class Rep, class Period &gt;
bool try_lock_for( const std::chrono::duration&lt;Rep,Period&gt;&amp; timeout_duration );
}}
{{dcl end}}

Tries to lock the associated mutex in shared mode. Blocks until specified {{tt|timeout_duration}} has elapsed or the lock is acquired, whichever comes first. On successful lock acquisition returns {{c|true}}, otherwise returns {{c|false}}. Effectively calls {{c|mutex()-&gt;try_lock_shared_for(timeout_duration)}}.

This function may block for longer than {{c|timeout_duration}} due to scheduling or resource contention delays. 

The standard recommends that a steady clock is used to measure the duration. If an implementation uses a system clock instead, the wait time may also be sensitive to clock adjustments.

{{lc|std::system_error}} is thrown if there is no associated mutex or if the mutex is already locked.

The behavior is undefined if {{tt|Mutex}} does not meet the {{named req|SharedTimedLockable}} requirements.

===Parameters===
{{par begin}}
{{par|timeout_duration|maximum duration to block for}}
{{par end}}

===Return value===
{{c|true}} if the ownership of the mutex has been acquired successfully, {{c|false}} otherwise.

===Exceptions===
* Any exceptions thrown by {{c|mutex()-&gt;try_lock_shared_for(timeout_duration)}}.

* If there is no associated mutex, {{lc|std::system_error}} with an error code of {{lc|std::errc::operation_not_permitted}}.

* If the mutex is already locked, {{lc|std::system_error}} with an error code of {{lc|std::errc::resource_deadlock_would_occur}}.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/thread/unique_lock/dsc try_lock_for}}
{{dsc inc|cpp/thread/shared_lock/dsc lock}}
{{dsc inc|cpp/thread/shared_lock/dsc try_lock}}
{{dsc inc|cpp/thread/shared_lock/dsc try_lock_until}}
{{dsc inc|cpp/thread/shared_lock/dsc unlock}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
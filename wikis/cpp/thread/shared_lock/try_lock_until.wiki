{{cpp/thread/shared_lock/title|try_lock_until}}
{{cpp/thread/shared_lock/navbar}}
{{dcl begin}}
{{dcl|since=c++14|1=
template&lt; class Clock, class Duration &gt;
bool try_lock_until( const std::chrono::time_point&lt;Clock,Duration&gt;&amp; timeout_time );
}}
{{dcl end}}

Tries to lock the associated mutex in shared mode. Blocks until specified {{c|timeout_time}} has been reached or the lock is acquired, whichever comes first. On successful lock acquisition returns {{c|true}}, otherwise returns {{c|false}}. May block for longer than until {{c|timeout_time}} has been reached.

Effectively calls {{c|mutex()-&gt;try_lock_shared_until(timeout_time)}}.

{{lc|std::system_error}} is thrown if there is no associated mutex or if the mutex is already locked.

{{tt|Clock}} must meet the {{named req|Clock}} requirements. The behavior is undefined if {{tt|Mutex}} does not meet the {{named req|SharedTimedLockable}} requirements. {{rev inl|since=c++20|The program is ill-formed if {{c|std::chrono::is_clock_v&lt;Clock&gt;}} is {{c|false}}.}}

===Parameters===
{{par begin}}
{{par|timeout_time|maximum time point to block until}}
{{par end}}

===Return value===
{{c|true}} if the ownership of the mutex has been acquired successfully, {{c|false}} otherwise.

===Exceptions===
* Any exceptions thrown by {{c|mutex()-&gt;try_lock_shared_for(timeout_time)}}.

* If there is no associated mutex, {{lc|std::system_error}} with an error code of {{lc|std::errc::operation_not_permitted}}.

* If the mutex is already locked, {{lc|std::system_error}} with an error code of {{lc|std::errc::resource_deadlock_would_occur}}.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/thread/shared_lock/dsc lock}}
{{dsc inc|cpp/thread/shared_lock/dsc try_lock}}
{{dsc inc|cpp/thread/shared_lock/dsc try_lock_for}}
{{dsc inc|cpp/thread/shared_lock/dsc unlock}}
{{dsc inc|cpp/thread/unique_lock/dsc try_lock_until}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
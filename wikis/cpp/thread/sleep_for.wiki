{{cpp/title|n=this_thread::|sleep_for}}
{{cpp/thread/navbar}}
{{ddcl|header=thread|since=c++11|1=
template&lt; class Rep, class Period &gt;
void sleep_for( const std::chrono::duration&lt;Rep, Period&gt;&amp; sleep_duration );
}}

Blocks the execution of the current thread for ''at least'' the specified {{c|sleep_duration}}.

This function may block for longer than {{c|sleep_duration}} due to scheduling or resource contention delays.

The standard recommends that a steady clock is used to measure the duration. If an implementation uses a system clock instead, the wait time may also be sensitive to clock adjustments.

===Parameters===
{{par begin}}
{{par|sleep_duration|time duration to sleep}}
{{par end}}

===Return value===
(none)

===Exceptions===
Any exception thrown by {{tt|clock}}, {{tt|time_point}}, or {{tt|duration}} during the execution (clocks, time points, and durations provided by the standard library never throw).

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;thread&gt;
 
int main()
{
    using namespace std::chrono_literals;

    std::cout &lt;&lt; "Hello waiter\n" &lt;&lt; std::flush;

    const auto start = std::chrono::high_resolution_clock::now();
    std::this_thread::sleep_for(2000ms);
    const auto end = std::chrono::high_resolution_clock::now();
    const std::chrono::duration&lt;double, std::milli&gt; elapsed = end - start;

    std::cout &lt;&lt; "Waited " &lt;&lt; elapsed &lt;&lt; '\n';
}
|p=true
|output=
Hello waiter
Waited 2000.13 ms
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/thread/dsc sleep_until}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
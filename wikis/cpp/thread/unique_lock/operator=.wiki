{{cpp/thread/unique_lock/title|operator{{=}}}}
{{cpp/thread/unique_lock/navbar}}
{{dcl begin}}
{{dcl|since=c++11|1=
unique_lock&amp; operator=( unique_lock&amp;&amp; other );
}}
{{dcl end}}

Move assignment operator. Replaces the contents with those of {{c|other}} using move semantics. 

If prior to the call {{c|*this}} has an associated mutex and has acquired ownership of it, the mutex is unlocked. 

===Parameters===
{{par begin}}
{{par|other|another {{tt|unique_lock}} to replace the state with}}
{{par end}}

===Return value===
{{c|*this}}

===Exceptions===
Throws nothing.

===Notes===
With a recursive mutex it is possible for both {{c|*this}} and {{c|other}} to own the same mutex before the assignment. In this case, {{c|*this}} will own the mutex after the assignment and {{c|other}} will not.

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2104|std=C++11|before=the move assignment operator was {{c/core|noexcept}}, but it may&lt;br&gt;throw an exception in the case of undefined behavior&lt;ref&gt;For example, {{c|*this}} is constructed with {{lc|std::adopt_lock}}, but the calling thread does not have the ownership of the associated mutex. In this case, {{c|*this}} cannot properly release the ownership of the associated mutex, and it may result in an exception to be thrown.&lt;/ref&gt;|after=it is not {{c/core|noexcept}}}}
{{dr list end}}
&lt;references/&gt;

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
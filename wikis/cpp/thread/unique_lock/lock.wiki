{{cpp/thread/unique_lock/title|lock}}
{{cpp/thread/unique_lock/navbar}}
{{dcl begin}}
{{dcl|since=c++11|1=
void lock();
}}
{{dcl end}}

Locks (i.e., takes ownership of) the associated mutex. Effectively calls {{c|mutex()-&gt;lock()}}.

===Parameters===
(none)

===Return value===
(none)

===Exceptions===
* Any exceptions thrown by {{c|mutex()-&gt;lock()}}.

* If there is no associated mutex, {{lc|std::system_error}} with an error code of {{lc|std::errc::operation_not_permitted}}.

* If the mutex is already locked by this {{tt|unique_lock}} (in other words, {{lc|owns_lock()}} is {{c|true}}), {{lc|std::system_error}} with an error code of {{lc|std::errc::resource_deadlock_would_occur}}.

===Example===
{{example
|The following example uses {{tt|lock}} to re-acquire a mutex that was unlocked.
|p=true
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;mutex&gt;
#include &lt;thread&gt;
#include &lt;vector&gt;

int main()
{
    int counter = 0;
    std::mutex counter_mutex;
    std::vector&lt;std::thread&gt; threads;
  
    auto worker_task = [&amp;](int id)
    {
        std::unique_lock&lt;std::mutex&gt; lock(counter_mutex);
        ++counter;
        std::cout &lt;&lt; id &lt;&lt; ", initial counter: " &lt;&lt; counter &lt;&lt; '\n';
        lock.unlock();

        // don't hold the lock while we simulate an expensive operation
        std::this_thread::sleep_for(std::chrono::seconds(1));

        lock.lock();
        ++counter;
        std::cout &lt;&lt; id &lt;&lt; ", final counter: " &lt;&lt; counter &lt;&lt; '\n';
    };

    for (int i = 0; i &lt; 10; ++i)
        threads.emplace_back(worker_task, i);

    for (auto&amp; thread : threads)
        thread.join();
}
|output=
0, initial counter: 1
1, initial counter: 2
2, initial counter: 3
3, initial counter: 4
4, initial counter: 5
5, initial counter: 6
6, initial counter: 7
7, initial counter: 8
8, initial counter: 9
9, initial counter: 10
6, final counter: 11
3, final counter: 12
4, final counter: 13
2, final counter: 14
5, final counter: 15
0, final counter: 16
1, final counter: 17
7, final counter: 18
9, final counter: 19
8, final counter: 20
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/thread/unique_lock/dsc try_lock}}
{{dsc inc|cpp/thread/unique_lock/dsc unlock}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
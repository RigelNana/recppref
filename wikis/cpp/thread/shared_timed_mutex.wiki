{{cpp/title|shared_timed_mutex}}
{{cpp/thread/shared_timed_mutex/navbar}}
{{ddcl|header=shared_mutex|since=c++14|1=
class shared_timed_mutex;
}}

The {{tt|shared_timed_mutex}} class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads. In contrast to other mutex types which facilitate exclusive access, a {{tt|shared_timed_mutex}} has two levels of access:

* ''exclusive'' - only one thread can own the mutex.

* ''shared'' - several threads can share ownership of the same mutex.

Shared mutexes are usually used in situations when multiple readers can access the same resource at the same time without causing data races, but only one writer can do so.

In a manner similar to {{ltt|cpp/thread/timed_mutex}}, {{tt|shared_timed_mutex}} provides the ability to attempt to claim ownership of a {{tt|shared_timed_mutex}} with a timeout via the {{ltf|cpp/thread/shared_timed_mutex/try_lock_for}}, {{ltf|cpp/thread/shared_timed_mutex/try_lock_until}}, {{ltf|cpp/thread/shared_timed_mutex/try_lock_shared_for}}, {{ltf|cpp/thread/shared_timed_mutex/try_lock_shared_until}} member functions.

The {{tt|shared_timed_mutex}} class satisfies all requirements of {{named req|SharedTimedMutex}} and {{named req|StandardLayoutType}}.

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/thread/mutex/dsc constructor|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc destructor|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc operator{{=}}}}

{{dsc h2|Exclusive locking}}
{{dsc inc|cpp/thread/mutex/dsc lock|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_for|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_until|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc unlock|shared_timed_mutex}}

{{dsc h2|Shared locking}}
{{dsc inc|cpp/thread/mutex/dsc lock_shared|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_shared|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_shared_for|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_shared_until|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc unlock_shared|shared_timed_mutex}}
{{dsc end}}

===Notes===
{{feature test macro|__cpp_lib_shared_timed_mutex|{{tt|std::shared_timed_mutex}}|value=201402L|std=C++14}}

===Example===
{{todo|build a motivating example}}
{{example|A copy assignment operator for a class that holds resources that can handle multiple readers, but only one writer.
|code=
#include &lt;mutex&gt;
#include &lt;shared_mutex&gt;

class R
{
    mutable std::shared_timed_mutex mut;
    /* data */
public:
    R&amp; operator=(const R&amp; other)
    {
        // requires exclusive ownership to write to *this
        std::unique_lock&lt;std::shared_timed_mutex&gt; lhs(mut, std::defer_lock);
        // requires shared ownership to read from other
        std::shared_lock&lt;std::shared_timed_mutex&gt; rhs(other.mut, std::defer_lock);
        std::lock(lhs, rhs);
        /* assign data */
        return *this;
    }
};

int main()
{
    R r;
}
}}

{{langlinks|es|ja|ru|zh}}
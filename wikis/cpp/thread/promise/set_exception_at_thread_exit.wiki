{{cpp/thread/promise/title|set_exception_at_thread_exit}}
{{cpp/thread/promise/navbar}}
{{ddcl|since=c++11|
void set_exception_at_thread_exit( std::exception_ptr p );
}}

Stores the exception pointer {{c|p}} into the shared state without making the state ready immediately. The state is made ready when the current thread exits, after all variables with thread-local storage duration have been destroyed.  

The operation behaves as though {{lc|set_value}}, {{lc|set_exception}}, {{lc|set_value_at_thread_exit}}, and {{tt|set_exception_at_thread_exit}} acquire a single mutex associated with the promise object while updating the promise object.

An exception is thrown if there is no shared state or the shared state already stores a value or exception.

Calls to this function do not introduce data races with calls to {{lc|get_future}} (therefore they need not synchronize with each other).

===Parameters===
{{par begin}}
{{par|p|exception pointer to store. The behavior is undefined if {{c|p}} is {{c|nullptr}}}}
{{par end}}

===Return value===
(none)

===Exceptions===
{{lc|std::future_error}} on the following conditions:

* {{c|*this}} has no shared state. The error code is set to {{ltt|cpp/thread/future_errc|no_state}}.

* The shared state already stores a value or exception. The error code is set to {{ltt|cpp/thread/future_errc|promise_already_satisfied}}.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/thread/promise/dsc set_exception}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
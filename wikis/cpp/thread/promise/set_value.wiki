{{cpp/thread/promise/title|set_value}}
{{cpp/thread/promise/navbar}}
{{dcl begin}}
{{dcl h|Main template}}
{{dcl|num=1|since=c++11|
void set_value( const R&amp; value );
}}
{{dcl|num=2|since=c++11|
void set_value( R&amp;&amp; value );
}}
{{dcl h|{{c/core|std::promise&lt;R&amp;&gt;}} specializations}}
{{dcl|num=3|since=c++11|
void set_value( R&amp; value );
}}
{{dcl h|{{c/core|std::promise&lt;void&gt;}} specialization}}
{{dcl|num=4|since=c++11|
void set_value();
}}
{{dcl end}}

@1-3@ Atomically stores {{c|value}} into the shared state and makes the state ready. 
@4@ Makes the state ready.

The operation behaves as though {{tt|set_value}}, {{lc|set_exception}}, {{lc|set_value_at_thread_exit}}, and {{lc|set_exception_at_thread_exit}} acquire a single mutex associated with the promise object while updating the promise object.

Calls to this function do not introduce data races with calls to {{lc|get_future}} (therefore they need not synchronize with each other).

===Parameters===
{{par begin}}
{{par|value|value to store in the shared state}}
{{par end}}

===Return value===
(none)

===Exceptions===
{{lc|std::future_error}} on the following conditions:
* {{c|*this}} has no shared state. The error code is set to {{ltt|cpp/thread/future_errc|no_state}}.
* The shared state already stores a value or exception. The error code is set to {{ltt|cpp/thread/future_errc|promise_already_satisfied}}.

Additionally:
@1@ Any exception thrown by the constructor selected to copy an object of type {{tt|R}}.
@2@ Any exception thrown by the constructor selected to move an object of type {{tt|R}}.

===Example===
{{example
|This example shows how {{c/core|std::promise&lt;void&gt;}} can be used as signals between threads.
|code=
#include &lt;algorithm&gt;
#include &lt;cctype&gt;
#include &lt;chrono&gt;
#include &lt;future&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;sstream&gt;
#include &lt;thread&gt;
#include &lt;vector&gt;

using namespace std::chrono_literals;

int main()
{
    std::istringstream iss_numbers{"3 4 1 42 23 -23 93 2 -289 93"};
    std::istringstream iss_letters{" a 23 b,e a2 k k?a;si,ksa c"};
    
    std::vector&lt;int&gt; numbers;
    std::vector&lt;char&gt; letters;
    std::promise&lt;void&gt; numbers_promise, letters_promise;
    
    auto numbers_ready = numbers_promise.get_future();
    auto letter_ready = letters_promise.get_future();
    
    std::thread value_reader([&amp;]
    {
        // I/O operations
        std::copy(std::istream_iterator&lt;int&gt;{iss_numbers},
                  std::istream_iterator&lt;int&gt;{},
                  std::back_inserter(numbers));
        
        // notify for numbers
        numbers_promise.set_value();
        
        std::copy_if(std::istreambuf_iterator&lt;char&gt;{iss_letters},
                     std::istreambuf_iterator&lt;char&gt;{},
                     std::back_inserter(letters),
                     ::isalpha);
        
        // notify for letters
        letters_promise.set_value();
    });
    
    
    numbers_ready.wait();
    
    std::sort(numbers.begin(), numbers.end());
    
    if (letter_ready.wait_for(1s) == std::future_status::timeout)
    {
        // output the numbers while letters are being obtained
        for (int num : numbers)
            std::cout &lt;&lt; num &lt;&lt; ' ';
        numbers.clear(); // numbers were already printed
    }
    
    letter_ready.wait();
    std::sort(letters.begin(), letters.end());
    
    // does nothing if numbers were already printed
    for (int num : numbers)
        std::cout &lt;&lt; num &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    for (char let : letters)
        std::cout &lt;&lt; let &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    value_reader.join();
}
|output=
-289 -23 1 2 3 4 23 42 93 93 
a a a a b c e i k k k s s 
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2098|std=C++11|before=overloads {{v|1,2}} could only throw the&lt;br&gt;exceptions thrown by the copy/move&lt;br&gt;constructor of {{tt|R}} respectively|after=they can throw the exceptions thrown&lt;br&gt;by the actual constructor selected&lt;br&gt;to copy/move an object of type {{tt|R}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/thread/promise/dsc set_value_at_thread_exit}}
{{dsc inc|cpp/thread/promise/dsc set_exception}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
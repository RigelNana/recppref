{{cpp/thread/promise/title|set_value_at_thread_exit}}
{{cpp/thread/promise/navbar}}
{{dcl begin}}
{{dcl h|Main template}}
{{dcl|num=1|since=c++11|
void set_value_at_thread_exit( const R&amp; value );
}}
{{dcl|num=2|since=c++11|
void set_value_at_thread_exit( R&amp;&amp; value );
}}
{{dcl h|{{c/core|std::promise&lt;R&amp;&gt;}} specializations}}
{{dcl|num=3|since=c++11|
void set_value_at_thread_exit( R&amp; value );
}}
{{dcl h|{{c/core|std::promise&lt;void&gt;}} specialization}}
{{dcl|num=4|since=c++11|
void set_value_at_thread_exit();
}}
{{dcl end}}

Stores the {{c|value}} into the shared state without making the state ready immediately. The state is made ready when the current thread exits, after all variables with thread-local storage duration have been destroyed.

The operation behaves as though {{lc|set_value}}, {{lc|set_exception}}, {{tt|set_value_at_thread_exit}}, and {{lc|set_exception_at_thread_exit}} acquire a single mutex associated with the promise object while updating the promise object.

Calls to this function do not introduce data races with calls to {{lc|get_future}} (therefore they need not synchronize with each other).

===Parameters===
{{par begin}}
{{par|value|value to store in the shared state}}
{{par end}}

===Return value===
(none)

===Exceptions===
{{lc|std::future_error}} on the following conditions:
* {{c|*this}} has no shared state. The error code is set to {{ltt|cpp/thread/future_errc|no_state}}.
* The shared state already stores a value or exception. The error code is set to {{ltt|cpp/thread/future_errc|promise_already_satisfied}}.

Additionally:
@1@ Any exception thrown by the constructor selected to copy an object of type {{tt|R}}.
@2@ Any exception thrown by the constructor selected to move an object of type {{tt|R}}.

===Example===
{{example
|code=
#include &lt;future&gt;
#include &lt;iostream&gt;
#include &lt;thread&gt;

int main()
{
    using namespace std::chrono_literals;
    std::promise&lt;int&gt; p;
    std::future&lt;int&gt; f = p.get_future();
    std::thread([&amp;p]
    {
        std::this_thread::sleep_for(1s);
        p.set_value_at_thread_exit(9);
    }).detach();

    std::cout &lt;&lt; "Waiting... " &lt;&lt; std::flush;
    f.wait();
    std::cout &lt;&lt; "Done!\nResult is: " &lt;&lt; f.get() &lt;&lt; '\n';
}
|output=
Waiting... Done!
Result is: 9
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2098|std=C++11|before=it was unclear which exceptions are required to be thrown|after=made clear}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/thread/promise/dsc set_value}}
{{dsc inc|cpp/thread/promise/dsc set_exception_at_thread_exit}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|n=this_thread::|yield}}
{{cpp/thread/navbar}}
{{ddcl|header=thread|since=c++11|1=
void yield() noexcept;
}}

Provides a hint to the implementation to reschedule the execution of threads, allowing other threads to run. 

===Parameters===
(none)

===Return value===
(none)

===Notes===
The exact behavior of this function depends on the implementation, in particular on the mechanics of the OS scheduler in use and the state of the system. For example, a first-in-first-out realtime scheduler ({{tt|SCHED_FIFO}} in Linux) would suspend the current thread and put it on the back of the queue of the same-priority threads that are ready to run, and if there are no other threads at the same priority, {{tt|yield}} has no effect.

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;thread&gt;

// "busy sleep" while suggesting that other threads run 
// for a small amount of time
void little_sleep(std::chrono::microseconds us)
{
    auto start = std::chrono::high_resolution_clock::now();
    auto end = start + us;
    do
    {
        std::this_thread::yield();
    }
    while (std::chrono::high_resolution_clock::now() &lt; end);
}

int main()
{
    auto start = std::chrono::high_resolution_clock::now();

    little_sleep(std::chrono::microseconds(100));

    auto elapsed = std::chrono::high_resolution_clock::now() - start;
    std::cout &lt;&lt; "waited for "
              &lt;&lt; std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(elapsed).count()
              &lt;&lt; " microseconds\n";
}
|p=true
|output=
waited for 128 microseconds
}}

===See also===
{{dsc begin}}
{{dsc see c|c/thread/thrd_yield}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
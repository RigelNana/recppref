{{cpp/thread/shared_timed_mutex/title|lock_shared}}
{{cpp/thread/shared_timed_mutex/navbar}}
{{dcl begin}}
{{dcl|since={{cpp/std|shared_timed_mutex}}|
void lock_shared();
}}
{{dcl end}}

Acquires shared ownership of the mutex. If another thread is holding the mutex in exclusive ownership, a call to {{tt|lock_shared}} will block execution until shared ownership can be acquired.

If {{tt|lock_shared}} is called by a thread that already owns the {{tt|mutex}} in any mode (exclusive or shared), the behavior is undefined.

If more than the implementation-defined maximum number of shared owners already locked the mutex in shared mode, {{tt|lock_shared}} blocks execution until the number of shared owners is reduced. The maximum number of owners is guaranteed to be at least 10000.

Prior {{lc|unlock()}} operation on the same mutex ''synchronizes-with'' (as defined in {{lc|std::memory_order}}) this operation.

===Parameters===
(none)

===Return value===
(none)

===Exceptions===
Throws {{lc|std::system_error}} when errors occur, including errors from the underlying operating system that would prevent {{tt|lock}} from meeting its specifications. The mutex is not locked in the case of any exception being thrown.

===Notes===
{{tt|lock_shared()}} is usually not called directly: {{lc|std::shared_lock}} is used to manage shared locking.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/thread/mutex/dsc lock|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_shared|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc unlock_shared|shared_timed_mutex}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/thread/shared_timed_mutex/title|try_lock_shared_until}}
{{cpp/thread/shared_timed_mutex/navbar}}
{{dcl begin}}
{{dcl|since=c++14|
template&lt; class Clock, class Duration &gt;
bool try_lock_shared_until( const std::chrono::time_point&lt;Clock,Duration&gt;&amp; timeout_time );
}}
{{dcl end}}

Tries to lock the mutex in shared mode. Blocks until specified {{c|timeout_time}} has been reached or the lock is acquired, whichever comes first. On successful lock acquisition returns {{c|true}}, otherwise returns {{c|false}}.

If {{c|timeout_time}} has already passed, this function behaves like {{lc|try_lock_shared()}}.

{{cpp/thread/block until|timeout_time}}

As with {{lc|try_lock_shared()}}, this function is allowed to fail spuriously and return {{c|false}} even if the mutex was not locked by any other thread at some point before {{c|timeout_time}}.

Prior {{lc|unlock()}} operation on the same mutex ''synchronizes-with'' (as defined in {{lc|std::memory_order}}) this operation if it returns {{c|true}}.

If {{tt|try_lock_shared_until}} is called by a thread that already owns the {{tt|mutex}} in any mode (shared or exclusive), the behavior is undefined.

===Parameters===
{{par begin}}
{{par|timeout_time|maximum time point to block until}}
{{par end}}

===Return value===
{{c|true}} if the shared lock ownership was acquired successfully, otherwise {{c|false}}.

===Exceptions===
Any exception thrown by clock, time_point, or duration during the execution (clocks, time points, and durations provided by the standard library never throw).

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_until|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_shared|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_shared_for|shared_timed_mutex}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
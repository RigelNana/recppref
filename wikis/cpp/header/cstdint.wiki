{{cpp/header/title|cstdint|notes={{mark c++11}}}}
{{cpp/header/navbar}}
{{cpp/header/c}}

This header is part of the [[cpp/types|type support]] library, providing [[cpp/types/integer|fixed width integer types]] and part of [[cpp/types/climits|C numeric limits interface]].

{{dsc begin}}
{{dsc h1 | Types}}
{{dsc inc | cpp/types/dsc intN_t}}
{{dsc inc | cpp/types/dsc int_fastN_t}}
{{dsc inc | cpp/types/dsc int_leastN_t}}
{{dsc inc | cpp/types/dsc intmax_t }}
{{dsc inc | cpp/types/dsc intptr_t }}
{{dsc inc | cpp/types/dsc uintN_t}}
{{dsc inc | cpp/types/dsc uint_fastN_t}}
{{dsc inc | cpp/types/dsc uint_leastN_t}}
{{dsc inc | cpp/types/dsc uintmax_t }}
{{dsc inc | cpp/types/dsc uintptr_t }}
{{dsc h1 | Macros}}
{{dsc h2 | Signed integers : minimum value}}
{{dsc inc | cpp/types/dsc INTn_MIN}}
{{dsc inc | cpp/types/dsc INT_FASTn_MIN}}
{{dsc inc | cpp/types/dsc INT_LEASTn_MIN}}
{{dsc inc | cpp/types/dsc INTPTR_MIN }}
{{dsc inc | cpp/types/dsc INTMAX_MIN }}
{{dsc h2 | Signed integers : maximum value| nolink=true }}
{{dsc inc | cpp/types/dsc INTn_MAX}}
{{dsc inc | cpp/types/dsc INT_FASTn_MAX}}
{{dsc inc | cpp/types/dsc INT_LEAST8_MAX}}
{{dsc inc | cpp/types/dsc INTPTR_MAX }}
{{dsc inc | cpp/types/dsc INTMAX_MAX }}
{{dsc h2 | Unsigned integers : maximum value| nolink=true }}
{{dsc inc | cpp/types/dsc UINTn_MAX}}
{{dsc inc | cpp/types/dsc UINT_FASTn_MAX}}
{{dsc inc | cpp/types/dsc UINT_LEASTn_MAX}}
{{dsc inc | cpp/types/dsc UINTPTR_MAX }}
{{dsc inc | cpp/types/dsc UINTMAX_MAX  }}
{{dsc h2 | Limits of other integer types}}
{{dsc inc | cpp/types/dsc PTRDIFF_MIN }}
{{dsc inc | cpp/types/dsc PTRDIFF_MAX }}
{{dsc inc | cpp/types/dsc SIZE_MAX }}
{{dsc inc | cpp/types/dsc SIG_ATOMIC_MIN }}
{{dsc inc | cpp/types/dsc SIG_ATOMIC_MAX }}
{{dsc inc | cpp/types/dsc WCHAR_MIN }}
{{dsc inc | cpp/types/dsc WCHAR_MAX }}
{{dsc inc | cpp/types/dsc WINT_MIN }}
{{dsc inc | cpp/types/dsc WINT_MAX}}
{{dsc h2 | Function macros for integer constants}}
{{dsc inc | cpp/types/dsc INTn_C}}
{{dsc inc | cpp/types/dsc INTMAX_C }}
{{dsc inc | cpp/types/dsc UINTn_C}}
{{dsc inc | cpp/types/dsc UINTMAX_C }}
{{dsc end}}

===Synopsis===
{{source|1=
namespace std {
  using int8_t         = /* signed integer type */;   // optional
  using int16_t        = /* signed integer type */;   // optional
  using int32_t        = /* signed integer type */;   // optional
  using int64_t        = /* signed integer type */;   // optional
  using intN_t         = /* see description */;       // optional, see description

  using int_fast8_t    = /* signed integer type */;
  using int_fast16_t   = /* signed integer type */;
  using int_fast32_t   = /* signed integer type */;
  using int_fast64_t   = /* signed integer type */;
  using int_fastN_t    = /* see description */;       // optional, see description

  using int_least8_t   = /* signed integer type */;
  using int_least16_t  = /* signed integer type */;
  using int_least32_t  = /* signed integer type */;
  using int_least64_t  = /* signed integer type */;
  using int_leastN_t   = /* see description */;       // optional, see description

  using intmax_t       = /* signed integer type */;
  using intptr_t       = /* signed integer type */;   // optional

  using uint8_t        = /* unsigned integer type */; // optional
  using uint16_t       = /* unsigned integer type */; // optional
  using uint32_t       = /* unsigned integer type */; // optional
  using uint64_t       = /* unsigned integer type */; // optional
  using uintN_t        = /* see description */;       // optional, see description

  using uint_fast8_t   = /* unsigned integer type */;
  using uint_fast16_t  = /* unsigned integer type */;
  using uint_fast32_t  = /* unsigned integer type */;
  using uint_fast64_t  = /* unsigned integer type */;
  using uint_fastN_t   = /* see description */;       // optional, see description

  using uint_least8_t  = /* unsigned integer type */;
  using uint_least16_t = /* unsigned integer type */;
  using uint_least32_t = /* unsigned integer type */;
  using uint_least64_t = /* unsigned integer type */;
  using uint_leastN_t  = /* see description */;       // optional, see description

  using uintmax_t      = /* unsigned integer type */;
  using uintptr_t      = /* unsigned integer type */; // optional
}

#define INTN_MIN         /* see description */
#define INTN_MAX         /* see description */
#define UINTN_MAX        /* see description */

#define INT_FASTN_MIN    /* see description */
#define INT_FASTN_MAX    /* see description */
#define UINT_FASTN_MAX   /* see description */

#define INT_LEASTN_MIN   /* see description */
#define INT_LEASTN_MAX   /* see description */
#define UINT_LEASTN_MAX  /* see description */

#define INTMAX_MIN       /* see description */
#define INTMAX_MAX       /* see description */
#define UINTMAX_MAX      /* see description */

#define INTPTR_MIN       /* see description */        // optional
#define INTPTR_MAX       /* see description */        // optional
#define UINTPTR_MAX      /* see description */        // optional

#define PTRDIFF_MIN      /* see description */
#define PTRDIFF_MAX      /* see description */
#define SIZE_MAX         /* see description */

#define SIG_ATOMIC_MIN   /* see description */
#define SIG_ATOMIC_MAX   /* see description */

#define WCHAR_MIN        /* see description */
#define WCHAR_MAX        /* see description */

#define WINT_MIN         /* see description */
#define WINT_MAX         /* see description */

#define INTN_C(value)    /* see description */
#define UINTN_C(value)   /* see description */
#define INTMAX_C(value)  /* see description */
#define UINTMAX_C(value) /* see description */
}}

{{langlinks|de|es|ja|ru|zh}}
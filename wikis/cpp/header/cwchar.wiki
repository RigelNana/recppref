{{cpp/header/title|cwchar}}
{{cpp/header/navbar}}
{{cpp/header/c}}

This header is part of the null-terminated [[cpp/string/wide|wide]] and [[cpp/string/multibyte|multibyte]] strings libraries.
It also provides some [[cpp/io/c|C-style I/O]] functions and conversion from [[cpp/chrono/c|C-style Date]].

===Macros===
{{dsc begin}}
{{dsc inc|cpp/types/dsc NULL}}
{{dsc macro const|WEOF|nolink=true|a non-character value of type {{tt|std::wint_t}} used to indicate errors}}
{{dsc macro const|WCHAR_MIN|nolink=true|the smallest valid value of {{c/core|wchar_t}} }}
{{dsc macro const|WCHAR_MAX|nolink=true|the largest valid value of {{c/core|wchar_t}} }}
{{dsc end}}

===Types===
{{dsc begin}}
{{dsc inc|cpp/string/multibyte/dsc mbstate_t}}
{{dsc inc|cpp/types/dsc size_t}}
{{dsc|{{ttb|wint_t}}|integer type that can hold any valid wide character and at least one more value}}
{{dsc inc|cpp/chrono/c/dsc tm}}
{{dsc end}}

===Functions===
{{dsc begin}}
{{dsc h2|String manipulation}}
{{dsc inc|cpp/string/wide/dsc wcscpy}}
{{dsc inc|cpp/string/wide/dsc wcsncpy}}
{{dsc inc|cpp/string/wide/dsc wcscat}}
{{dsc inc|cpp/string/wide/dsc wcsncat}}
{{dsc inc|cpp/string/wide/dsc wcsxfrm}}

{{dsc h2|String examination}}
{{dsc inc|cpp/string/wide/dsc wcslen}}
{{dsc inc|cpp/string/wide/dsc wcscmp}}
{{dsc inc|cpp/string/wide/dsc wcsncmp}}
{{dsc inc|cpp/string/wide/dsc wcscoll}}
{{dsc inc|cpp/string/wide/dsc wcschr}}
{{dsc inc|cpp/string/wide/dsc wcsrchr}}
{{dsc inc|cpp/string/wide/dsc wcsspn}}
{{dsc inc|cpp/string/wide/dsc wcscspn}}
{{dsc inc|cpp/string/wide/dsc wcspbrk}}
{{dsc inc|cpp/string/wide/dsc wcsstr}}
{{dsc inc|cpp/string/wide/dsc wcstok}}

{{dsc h2|Wide character array manipulation}}
{{dsc inc|cpp/string/wide/dsc wmemcpy}}
{{dsc inc|cpp/string/wide/dsc wmemmove}}
{{dsc inc|cpp/string/wide/dsc wmemcmp}}
{{dsc inc|cpp/string/wide/dsc wmemchr}}
{{dsc inc|cpp/string/wide/dsc wmemset}}

{{dsc h2|Multibyte/wide character conversion }}
{{dsc inc|cpp/string/multibyte/dsc mbsinit}}
{{dsc inc|cpp/string/multibyte/dsc btowc}}
{{dsc inc|cpp/string/multibyte/dsc wctob}}
{{dsc inc|cpp/string/multibyte/dsc mbrlen}}
{{dsc inc|cpp/string/multibyte/dsc mbrtowc}}
{{dsc inc|cpp/string/multibyte/dsc wcrtomb}}
{{dsc inc|cpp/string/multibyte/dsc mbsrtowcs}}
{{dsc inc|cpp/string/multibyte/dsc wcsrtombs}}

{{dsc h2|Input/Output }}
{{dsc inc|cpp/io/c/dsc fgetwc}}
{{dsc inc|cpp/io/c/dsc fgetws}}
{{dsc inc|cpp/io/c/dsc fputwc}}
{{dsc inc|cpp/io/c/dsc fputws}}
{{dsc inc|cpp/io/c/dsc getwchar}}
{{dsc inc|cpp/io/c/dsc putwchar}}
{{dsc inc|cpp/io/c/dsc ungetwc}}
{{dsc inc|cpp/io/c/dsc fwide}}
{{dsc inc|cpp/io/c/dsc fwscanf}}
{{dsc inc|cpp/io/c/dsc vfwscanf}}
{{dsc inc|cpp/io/c/dsc fwprintf}}
{{dsc inc|cpp/io/c/dsc vfwprintf}}

{{dsc h2|String conversions}}
{{dsc inc|cpp/chrono/c/dsc wcsftime}}
{{dsc inc|cpp/string/wide/dsc wcstol}}
{{dsc inc|cpp/string/wide/dsc wcstoul}}
{{dsc inc|cpp/string/wide/dsc wcstof}}

{{dsc end}}

===Notes===
* {{lc|NULL}} is also defined in the following headers:
** {{header|cstddef}}
** {{header|cstring}}
** {{header|ctime}}
** {{header|clocale}}
** {{header|cstdio}}
* {{lc|std::size_t}} is also defined in the following headers:
** {{header|cstddef}}
** {{header|ctime}}
** {{header|cstdio}}
* {{tt|std::wint_t}} is also defined in the following headers:
** {{header|cwctype}}
* {{lc|std::tm}} is also defined in the following headers:
** {{header|ctime}}

===Synopsis===
{{source|1=
namespace std {
  using size_t =    /* see description */; // freestanding
  using mbstate_t = /* see description */; // freestanding
  using wint_t =    /* see description */; // freestanding

  struct tm;

  int fwprintf(FILE* stream, const wchar_t* format, ...);
  int fwscanf(FILE* stream, const wchar_t* format, ...);
  int swprintf(wchar_t* s, size_t n, const wchar_t* format, ...);
  int swscanf(const wchar_t* s, const wchar_t* format, ...);
  int vfwprintf(FILE* stream, const wchar_t* format, va_list arg);
  int vfwscanf(FILE* stream, const wchar_t* format, va_list arg);
  int vswprintf(wchar_t* s, size_t n, const wchar_t* format, va_list arg);
  int vswscanf(const wchar_t* s, const wchar_t* format, va_list arg);
  int vwprintf(const wchar_t* format, va_list arg);
  int vwscanf(const wchar_t* format, va_list arg);
  int wprintf(const wchar_t* format, ...);
  int wscanf(const wchar_t* format, ...);
  wint_t fgetwc(FILE* stream);
  wchar_t* fgetws(wchar_t* s, int n, FILE* stream);
  wint_t fputwc(wchar_t c, FILE* stream);
  int fputws(const wchar_t* s, FILE* stream);
  int fwide(FILE* stream, int mode);
  wint_t getwc(FILE* stream);
  wint_t getwchar();
  wint_t putwc(wchar_t c, FILE* stream);
  wint_t putwchar(wchar_t c);
  wint_t ungetwc(wint_t c, FILE* stream);
  double wcstod(const wchar_t* nptr, wchar_t** endptr);
  float wcstof(const wchar_t* nptr, wchar_t** endptr);
  long double wcstold(const wchar_t* nptr, wchar_t** endptr);
  long int wcstol(const wchar_t* nptr, wchar_t** endptr, int base);
  long long int wcstoll(const wchar_t* nptr, wchar_t** endptr, int base);
  unsigned long int wcstoul(const wchar_t* nptr, wchar_t** endptr, int base);
  unsigned long long int wcstoull(const wchar_t* nptr, wchar_t** endptr, int base);
  wchar_t* wcscpy(wchar_t* s1, const wchar_t* s2);                // freestanding
  wchar_t* wcsncpy(wchar_t* s1, const wchar_t* s2, size_t n);     // freestanding
  wchar_t* wmemcpy(wchar_t* s1, const wchar_t* s2, size_t n);     // freestanding
  wchar_t* wmemmove(wchar_t* s1, const wchar_t* s2, size_t n);    // freestanding
  wchar_t* wcscat(wchar_t* s1, const wchar_t* s2);                // freestanding
  wchar_t* wcsncat(wchar_t* s1, const wchar_t* s2, size_t n);     // freestanding
  int wcscmp(const wchar_t* s1, const wchar_t* s2);               // freestanding
  int wcscoll(const wchar_t* s1, const wchar_t* s2);
  int wcsncmp(const wchar_t* s1, const wchar_t* s2, size_t n);    // freestanding
  size_t wcsxfrm(wchar_t* s1, const wchar_t* s2, size_t n);
  int wmemcmp(const wchar_t* s1, const wchar_t* s2, size_t n);    // freestanding
  const wchar_t* wcschr(const wchar_t* s, wchar_t c);             // freestanding
  wchar_t* wcschr(wchar_t* s, wchar_t c);                         // freestanding
  size_t wcscspn(const wchar_t* s1, const wchar_t* s2);           // freestanding
  const wchar_t* wcspbrk(const wchar_t* s1, const wchar_t* s2);   // freestanding
  wchar_t* wcspbrk(wchar_t* s1, const wchar_t* s2);               // freestanding
  const wchar_t* wcsrchr(const wchar_t* s, wchar_t c);            // freestanding
  wchar_t* wcsrchr(wchar_t* s, wchar_t c);                        // freestanding
  size_t wcsspn(const wchar_t* s1, const wchar_t* s2);            // freestanding
  const wchar_t* wcsstr(const wchar_t* s1, const wchar_t* s2);    // freestanding
  wchar_t* wcsstr(wchar_t* s1, const wchar_t* s2);                // freestanding
  wchar_t* wcstok(wchar_t* s1, const wchar_t* s2, wchar_t** ptr); // freestanding
  const wchar_t* wmemchr(const wchar_t* s, wchar_t c, size_t n);  // freestanding
  wchar_t* wmemchr(wchar_t* s, wchar_t c, size_t n);              // freestanding
  size_t wcslen(const wchar_t* s);                                // freestanding
  wchar_t* wmemset(wchar_t* s, wchar_t c, size_t n);              // freestanding
  size_t wcsftime(wchar_t* s, size_t maxsize, const wchar_t* format, const tm* timeptr);
  wint_t btowc(int c);
  int wctob(wint_t c);

  // multibyte / wide string and character conversion functions
  int mbsinit(const mbstate_t* ps);
  size_t mbrlen(const char* s, size_t n, mbstate_t* ps);
  size_t mbrtowc(wchar_t* pwc, const char* s, size_t n, mbstate_t* ps);
  size_t wcrtomb(char* s, wchar_t wc, mbstate_t* ps);
  size_t mbsrtowcs(wchar_t* dst, const char** src, size_t len, mbstate_t* ps);
  size_t wcsrtombs(char* dst, const wchar_t** src, size_t len, mbstate_t* ps);
}

#define NULL      /* see description */ // freestanding
#define WCHAR_MAX /* see description */ // freestanding
#define WCHAR_MIN /* see description */ // freestanding
#define WEOF      /* see description */ // freestanding
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=345|std=C++98|before={{lc|std::tm}} was not provided in {{tt|&lt;cwchar&gt;}}|after=provided}}
{{dr list end}}

{{langlinks|es|ja|ru|zh}}
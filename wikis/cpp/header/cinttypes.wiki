{{cpp/header/title|cinttypes|notes={{mark c++11}}}}
{{cpp/header/navbar}}
{{cpp/header/c}}

{{dsc begin}}
{{dsc h1|Includes}}
{{dsc inc|cpp/header/dsc cstdint}}

{{dsc h1|Types}}
{{dsc inc|cpp/numeric/math/dsc imaxdiv_t}}

{{dsc h1|Functions}}
{{dsc inc|cpp/numeric/math/dsc imaxabs}}
{{dsc inc|cpp/numeric/math/dsc imaxdiv}}
{{dsc inc|cpp/string/byte/dsc strtoimax}}
{{dsc inc|cpp/string/wide/dsc wcstoimax}}

{{dsc h1|Macros}}
{{dsc h2|Format constants for the {{lc|std::fprintf}} family of functions}}
{{dsc macro const|PRId8&lt;br&gt;PRId16&lt;br&gt;PRId32&lt;br&gt;PRId64&lt;br&gt;PRIdLEAST8&lt;br&gt;PRIdLEAST16&lt;br&gt;PRIdLEAST32&lt;br&gt;PRIdLEAST64&lt;br&gt;PRIdFAST8&lt;br&gt;PRIdFAST16&lt;br&gt;PRIdFAST32&lt;br&gt;PRIdFAST64&lt;br&gt;PRIdMAX&lt;br&gt;PRIdPTR|notes={{mark c++11}}|format conversion specifier to output a signed decimal integer value of type {{lc|std::int8_t}}, {{lc|std::int16_t}}, {{lc|std::int32_t}}, {{lc|std::int64_t}}, {{lc|std::int_least8_t}}, {{lc|std::int_least16_t}}, {{lc|std::int_least32_t}}, {{lc|std::int_least64_t}}, {{lc|std::int_fast8_t}}, {{lc|std::int_fast16_t}}, {{lc|std::int_fast32_t}}, {{lc|std::int_fast64_t}}, {{lc|std::intmax_t}}, {{lc|std::intptr_t}} respectively, equivalent to {{tt|d}} for {{c/core|int}}|nolink=true}}
{{dsc macro const|PRIi8&lt;br&gt;PRIi16&lt;br&gt;PRIi32&lt;br&gt;PRIi64&lt;br&gt;PRIiLEAST8&lt;br&gt;PRIiLEAST16&lt;br&gt;PRIiLEAST32&lt;br&gt;PRIiLEAST64&lt;br&gt;PRIiFAST8&lt;br&gt;PRIiFAST16&lt;br&gt;PRIiFAST32&lt;br&gt;PRIiFAST64&lt;br&gt;PRIiMAX&lt;br&gt;PRIiPTR|notes={{mark c++11}}|format conversion specifier to output a signed decimal integer value of type {{lc|std::int8_t}}, {{lc|std::int16_t}}, {{lc|std::int32_t}}, {{lc|std::int64_t}}, {{lc|std::int_least8_t}}, {{lc|std::int_least16_t}}, {{lc|std::int_least32_t}}, {{lc|std::int_least64_t}}, {{lc|std::int_fast8_t}}, {{lc|std::int_fast16_t}}, {{lc|std::int_fast32_t}}, {{lc|std::int_fast64_t}}, {{lc|std::intmax_t}}, {{lc|std::intptr_t}} respectively, equivalent to {{tt|i}} for {{c/core|int}}|nolink=true}}
{{dsc macro const|PRIu8&lt;br&gt;PRIu16&lt;br&gt;PRIu32&lt;br&gt;PRIu64&lt;br&gt;PRIuLEAST8&lt;br&gt;PRIuLEAST16&lt;br&gt;PRIuLEAST32&lt;br&gt;PRIuLEAST64&lt;br&gt;PRIuFAST8&lt;br&gt;PRIuFAST16&lt;br&gt;PRIuFAST32&lt;br&gt;PRIuFAST64&lt;br&gt;PRIuMAX&lt;br&gt;PRIuPTR|notes={{mark c++11}}|format conversion specifier to output an unsigned decimal integer value of type {{lc|std::uint8_t}}, {{lc|std::uint16_t}}, {{lc|std::uint32_t}}, {{lc|std::uint64_t}}, {{lc|std::uint_least8_t}}, {{lc|std::uint_least16_t}}, {{lc|std::uint_least32_t}}, {{lc|std::uint_least64_t}}, {{lc|std::uint_fast8_t}}, {{lc|std::uint_fast16_t}}, {{lc|std::uint_fast32_t}}, {{lc|std::uint_fast64_t}}, {{lc|std::uintmax_t}}, {{lc|std::uintptr_t}} respectively, equivalent to {{tt|u}} for {{c/core|unsigned int}}|nolink=true}}
{{dsc macro const|PRIo8&lt;br&gt;PRIo16&lt;br&gt;PRIo32&lt;br&gt;PRIo64&lt;br&gt;PRIoLEAST8&lt;br&gt;PRIoLEAST16&lt;br&gt;PRIoLEAST32&lt;br&gt;PRIoLEAST64&lt;br&gt;PRIoFAST8&lt;br&gt;PRIoFAST16&lt;br&gt;PRIoFAST32&lt;br&gt;PRIoFAST64&lt;br&gt;PRIoMAX&lt;br&gt;PRIoPTR|notes={{mark c++11}}|format conversion specifier to output an unsigned octal integer value of type {{lc|std::uint8_t}}, {{lc|std::uint16_t}}, {{lc|std::uint32_t}}, {{lc|std::uint64_t}}, {{lc|std::uint_least8_t}}, {{lc|std::uint_least16_t}}, {{lc|std::uint_least32_t}}, {{lc|std::uint_least64_t}}, {{lc|std::uint_fast8_t}}, {{lc|std::uint_fast16_t}}, {{lc|std::uint_fast32_t}}, {{lc|std::uint_fast64_t}}, {{lc|std::uintmax_t}}, {{lc|std::uintptr_t}} respectively, equivalent to {{tt|o}} for {{c/core|unsigned int}}|nolink=true}}
{{dsc macro const|PRIx8&lt;br&gt;PRIx16&lt;br&gt;PRIx32&lt;br&gt;PRIx64&lt;br&gt;PRIxLEAST8&lt;br&gt;PRIxLEAST16&lt;br&gt;PRIxLEAST32&lt;br&gt;PRIxLEAST64&lt;br&gt;PRIxFAST8&lt;br&gt;PRIxFAST16&lt;br&gt;PRIxFAST32&lt;br&gt;PRIxFAST64&lt;br&gt;PRIxMAX&lt;br&gt;PRIxPTR|notes={{mark c++11}}|format conversion specifier to output an unsigned lowercase hexadecimal integer value of type {{lc|std::uint8_t}}, {{lc|std::uint16_t}}, {{lc|std::uint32_t}}, {{lc|std::uint64_t}}, {{lc|std::uint_least8_t}}, {{lc|std::uint_least16_t}}, {{lc|std::uint_least32_t}}, {{lc|std::uint_least64_t}}, {{lc|std::uint_fast8_t}}, {{lc|std::uint_fast16_t}}, {{lc|std::uint_fast32_t}}, {{lc|std::uint_fast64_t}}, {{lc|std::uintmax_t}}, {{lc|std::uintptr_t}} respectively, equivalent to {{tt|x}} for {{c/core|unsigned int}}|nolink=true}}
{{dsc macro const|PRIX8&lt;br&gt;PRIX16&lt;br&gt;PRIX32&lt;br&gt;PRIX64&lt;br&gt;PRIXLEAST8&lt;br&gt;PRIXLEAST16&lt;br&gt;PRIXLEAST32&lt;br&gt;PRIXLEAST64&lt;br&gt;PRIXFAST8&lt;br&gt;PRIXFAST16&lt;br&gt;PRIXFAST32&lt;br&gt;PRIXFAST64&lt;br&gt;PRIXMAX&lt;br&gt;PRIXPTR|notes={{mark c++11}}|format conversion specifier to output an unsigned uppercase hexadecimal integer value of type {{lc|std::uint8_t}}, {{lc|std::uint16_t}}, {{lc|std::uint32_t}}, {{lc|std::uint64_t}}, {{lc|std::uint_least8_t}}, {{lc|std::uint_least16_t}}, {{lc|std::uint_least32_t}}, {{lc|std::uint_least64_t}}, {{lc|std::uint_fast8_t}}, {{lc|std::uint_fast16_t}}, {{lc|std::uint_fast32_t}}, {{lc|std::uint_fast64_t}}, {{lc|std::uintmax_t}}, {{lc|std::uintptr_t}} respectively, equivalent to {{tt|X}} for {{c/core|unsigned int}}|nolink=true}}
{{dsc h2|Format constants for the {{lc|std::fscanf}} family of functions}}
{{dsc macro const|SCNd8&lt;br&gt;SCNd16&lt;br&gt;SCNd32&lt;br&gt;SCNd64&lt;br&gt;SCNdLEAST8&lt;br&gt;SCNdLEAST16&lt;br&gt;SCNdLEAST32&lt;br&gt;SCNdLEAST64&lt;br&gt;SCNdFAST8&lt;br&gt;SCNdFAST16&lt;br&gt;SCNdFAST32&lt;br&gt;SCNdFAST64&lt;br&gt;SCNdMAX&lt;br&gt;SCNdPTR|notes={{mark c++11}}|format conversion specifier to input a signed decimal integer value of type {{lc|std::int8_t}}, {{lc|std::int16_t}}, {{lc|std::int32_t}}, {{lc|std::int64_t}}, {{lc|std::int_least8_t}}, {{lc|std::int_least16_t}}, {{lc|std::int_least32_t}}, {{lc|std::int_least64_t}}, {{lc|std::int_fast8_t}}, {{lc|std::int_fast16_t}}, {{lc|std::int_fast32_t}}, {{lc|std::int_fast64_t}}, {{lc|std::intmax_t}}, {{lc|std::intptr_t}} respectively, equivalent to {{tt|d}} for {{c/core|int}}|nolink=true}}
{{dsc macro const|SCNi8&lt;br&gt;SCNi16&lt;br&gt;SCNi32&lt;br&gt;SCNi64&lt;br&gt;SCNiLEAST8&lt;br&gt;SCNiLEAST16&lt;br&gt;SCNiLEAST32&lt;br&gt;SCNiLEAST64&lt;br&gt;SCNiFAST8&lt;br&gt;SCNiFAST16&lt;br&gt;SCNiFAST32&lt;br&gt;SCNiFAST64&lt;br&gt;SCNiMAX&lt;br&gt;SCNiPTR|notes={{mark c++11}}|format conversion specifier to input a signed decimal/octal/hexadecimal integer value of type {{lc|std::int8_t}}, {{lc|std::int16_t}}, {{lc|std::int32_t}}, {{lc|std::int64_t}}, {{lc|std::int_least8_t}}, {{lc|std::int_least16_t}}, {{lc|std::int_least32_t}}, {{lc|std::int_least64_t}}, {{lc|std::int_fast8_t}}, {{lc|std::int_fast16_t}}, {{lc|std::int_fast32_t}}, {{lc|std::int_fast64_t}}, {{lc|std::intmax_t}}, {{lc|std::intptr_t}} respectively, equivalent to {{tt|i}} for {{c/core|int}}|nolink=true}}
{{dsc macro const|SCNu8&lt;br&gt;SCNu16&lt;br&gt;SCNu32&lt;br&gt;SCNu64&lt;br&gt;SCNuLEAST8&lt;br&gt;SCNuLEAST16&lt;br&gt;SCNuLEAST32&lt;br&gt;SCNuLEAST64&lt;br&gt;SCNuFAST8&lt;br&gt;SCNuFAST16&lt;br&gt;SCNuFAST32&lt;br&gt;SCNuFAST64&lt;br&gt;SCNuMAX&lt;br&gt;SCNuPTR|notes={{mark c++11}}|format conversion specifier to input an unsigned decimal integer value of type {{lc|std::uint8_t}}, {{lc|std::uint16_t}}, {{lc|std::uint32_t}}, {{lc|std::uint64_t}}, {{lc|std::uint_least8_t}}, {{lc|std::uint_least16_t}}, {{lc|std::uint_least32_t}}, {{lc|std::uint_least64_t}}, {{lc|std::uint_fast8_t}}, {{lc|std::uint_fast16_t}}, {{lc|std::uint_fast32_t}}, {{lc|std::uint_fast64_t}}, {{lc|std::uintmax_t}}, {{lc|std::uintptr_t}} respectively, equivalent to {{tt|u}} for {{c/core|unsigned int}}|nolink=true}}
{{dsc macro const|SCNo8&lt;br&gt;SCNo16&lt;br&gt;SCNo32&lt;br&gt;SCNo64&lt;br&gt;SCNoLEAST8&lt;br&gt;SCNoLEAST16&lt;br&gt;SCNoLEAST32&lt;br&gt;SCNoLEAST64&lt;br&gt;SCNoFAST8&lt;br&gt;SCNoFAST16&lt;br&gt;SCNoFAST32&lt;br&gt;SCNoFAST64&lt;br&gt;SCNoMAX&lt;br&gt;SCNoPTR|notes={{mark c++11}}|format conversion specifier to input an unsigned octal integer value of type {{lc|std::uint8_t}}, {{lc|std::uint16_t}}, {{lc|std::uint32_t}}, {{lc|std::uint64_t}}, {{lc|std::uint_least8_t}}, {{lc|std::uint_least16_t}}, {{lc|std::uint_least32_t}}, {{lc|std::uint_least64_t}}, {{lc|std::uint_fast8_t}}, {{lc|std::uint_fast16_t}}, {{lc|std::uint_fast32_t}}, {{lc|std::uint_fast64_t}}, {{lc|std::uintmax_t}}, {{lc|std::uintptr_t}} respectively, equivalent to {{tt|o}} for {{c/core|unsigned int}}|nolink=true}}
{{dsc macro const|SCNx8&lt;br&gt;SCNx16&lt;br&gt;SCNx32&lt;br&gt;SCNx64&lt;br&gt;SCNxLEAST8&lt;br&gt;SCNxLEAST16&lt;br&gt;SCNxLEAST32&lt;br&gt;SCNxLEAST64&lt;br&gt;SCNxFAST8&lt;br&gt;SCNxFAST16&lt;br&gt;SCNxFAST32&lt;br&gt;SCNxFAST64&lt;br&gt;SCNxMAX&lt;br&gt;SCNxPTR|notes={{mark c++11}}|format conversion specifier to input an unsigned hexadecimal integer value of type {{lc|std::uint8_t}}, {{lc|std::uint16_t}}, {{lc|std::uint32_t}}, {{lc|std::uint64_t}}, {{lc|std::uint_least8_t}}, {{lc|std::uint_least16_t}}, {{lc|std::uint_least32_t}}, {{lc|std::uint_least64_t}}, {{lc|std::uint_fast8_t}}, {{lc|std::uint_fast16_t}}, {{lc|std::uint_fast32_t}}, {{lc|std::uint_fast64_t}}, {{lc|std::uintmax_t}}, {{lc|std::uintptr_t}} respectively, equivalent to {{tt|x}} for {{c/core|unsigned int}}|nolink=true}}
&lt;!--{{dsc macro const|SCNX8&lt;br&gt;SCNX16&lt;br&gt;SCNX32&lt;br&gt;SCNX64&lt;br&gt;SCNXLEAST8&lt;br&gt;SCNXLEAST16&lt;br&gt;SCNXLEAST32&lt;br&gt;SCNXLEAST64&lt;br&gt;SCNXFAST8&lt;br&gt;SCNXFAST16&lt;br&gt;SCNXFAST32&lt;br&gt;SCNXFAST64&lt;br&gt;SCNXMAX&lt;br&gt;SCNXPTR|format conversion specifier to input an unsigned uppercase hexadecimal integer value of type {{lc|std::uint8_t}}, {{lc|std::uint16_t}}, {{lc|std::uint32_t}}, {{lc|std::uint64_t}}, {{lc|std::uint_least8_t}}, {{lc|std::uint_least16_t}}, {{lc|std::uint_least32_t}}, {{lc|std::uint_least64_t}}, {{lc|std::uint_fast8_t}}, {{lc|std::uint_fast16_t}}, {{lc|std::uint_fast32_t}}, {{lc|std::uint_fast64_t}}, {{lc|std::uintmax_t}}, {{lc|std::uintptr_t}} respectively, equivalent to {{tt|X}} for {{c/core|unsigned int}}|nolink=true}}--&gt;
{{dsc end}}

===Synopsis===
{{source|1=
#include &lt;cstdint&gt;

namespace std
{
    using imaxdiv_t = /* see description */;

    constexpr intmax_t imaxabs(intmax_t j);
    constexpr imaxdiv_t imaxdiv(intmax_t numer, intmax_t denom);
    intmax_t strtoimax(const char* nptr, char** endptr, int base);
    uintmax_t strtoumax(const char* nptr, char** endptr, int base);
    intmax_t wcstoimax(const wchar_t* nptr, wchar_t** endptr, int base);
    uintmax_t wcstoumax(const wchar_t* nptr, wchar_t** endptr, int base);

    constexpr intmax_t abs(intmax_t);            // optional, see description
    constexpr imaxdiv_t div(intmax_t, intmax_t); // optional, see description
}

#define PRIdN /* see description */
#define PRIiN /* see description */
#define PRIoN /* see description */
#define PRIuN /* see description */
#define PRIxN /* see description */
#define PRIXN /* see description */
#define SCNdN /* see description */
#define SCNiN /* see description */
#define SCNoN /* see description */
#define SCNuN /* see description */
#define SCNxN /* see description */
#define PRIdLEASTN /* see description */
#define PRIiLEASTN /* see description */
#define PRIoLEASTN /* see description */
#define PRIuLEASTN /* see description */
#define PRIxLEASTN /* see description */
#define PRIXLEASTN /* see description */
#define SCNdLEASTN /* see description */
#define SCNiLEASTN /* see description */
#define SCNoLEASTN /* see description */
#define SCNuLEASTN /* see description */
#define SCNxLEASTN /* see description */
#define PRIdFASTN /* see description */
#define PRIiFASTN /* see description */
#define PRIoFASTN /* see description */
#define PRIuFASTN /* see description */
#define PRIxFASTN /* see description */
#define PRIXFASTN /* see description */
#define SCNdFASTN /* see description */
#define SCNiFASTN /* see description */
#define SCNoFASTN /* see description */
#define SCNuFASTN /* see description */
#define SCNxFASTN /* see description */
#define PRIdMAX /* see description */
#define PRIiMAX /* see description */
#define PRIoMAX /* see description */
#define PRIuMAX /* see description */
#define PRIxMAX /* see description */
#define PRIXMAX /* see description */
#define SCNdMAX /* see description */
#define SCNiMAX /* see description */
#define SCNoMAX /* see description */
#define SCNuMAX /* see description */
#define SCNxMAX /* see description */
#define PRIdPTR /* see description */
#define PRIiPTR /* see description */
#define PRIoPTR /* see description */
#define PRIuPTR /* see description */
#define PRIxPTR /* see description */
#define PRIXPTR /* see description */
#define SCNdPTR /* see description */
#define SCNiPTR /* see description */
#define SCNoPTR /* see description */
#define SCNuPTR /* see description */
#define SCNxPTR /* see description */
}}

{{langlinks|es|ja|ru|zh}}
{{cpp/header/experimental/title|experimental/memory_resource}}
{{cpp/header/experimental/navbar}}

This header is part of the Library Fundamentals TS ([[cpp/experimental/lib extensions|v1]], [[cpp/experimental/lib extensions 2|v2]], [[cpp/experimental/lib extensions 3|v3]]).

===Classes===
{{dsc begin}}
{{dsc namespace | std::experimental::pmr}}
{{dsc class | cpp/experimental/memory_resource |  an abstract interface for classes that encapsulate memory resources }} 
{{dsc class | cpp/experimental/synchronized_pool_resource | a thread-safe {{lc|memory_resource}} for managing allocations in pools of different block sizes}}
{{dsc class | cpp/experimental/unsynchronized_pool_resource | a thread-unsafe {{lc|memory_resource}} for managing allocations in pools of different block sizes}}
{{dsc class | cpp/experimental/monotonic_buffer_resource | a special-purpose {{lc|memory_resource}} that releases the allocated memory only when the resource is destroyed}}
{{dsc tclass | cpp/experimental/polymorphic_allocator | an allocator that supports run-time polymorphism based on the {{lc|memory_resource}} it is constructed with }}
{{dsc talias | cpp/experimental/resource_adaptor | adapts an allocator into a {{lc|memory_resource}}}}
{{dsc end}}

===Functions===

{{dsc begin}}
{{dsc namespace | std::experimental::pmr}}
{{dsc h2 | Comparison}}
{{dsc inc | cpp/experimental/pmr/memory_resource/dsc operator_cmp}}
{{dsc inc | cpp/experimental/pmr/polymorphic_allocator/dsc operator_cmp}}

{{dsc h2 | Global memory resources}}
{{dsc inc | cpp/experimental/pmr/dsc new_delete_resource}}
{{dsc inc | cpp/experimental/pmr/dsc null_memory_resource}}


{{dsc h2 | Default memory resource}}
{{dsc inc | cpp/experimental/pmr/dsc get_default_resource}}
{{dsc inc | cpp/experimental/pmr/dsc set_default_resource}}
{{dsc end}}

===Synopsis===
{{source|1=

namespace std {
namespace experimental {
inline namespace fundamentals_v1 {
namespace pmr {

  class memory_resource;

  bool operator==(const memory_resource&amp; a,
                  const memory_resource&amp; b) noexcept;
  bool operator!=(const memory_resource&amp; a,
                  const memory_resource&amp; b) noexcept;

  template &lt;class Tp&gt; class polymorphic_allocator;

  template &lt;class T1, class T2&gt;
  bool operator==(const polymorphic_allocator&lt;T1&gt;&amp; a,
                  const polymorphic_allocator&lt;T2&gt;&amp; b) noexcept;
  template &lt;class T1, class T2&gt;
  bool operator!=(const polymorphic_allocator&lt;T1&gt;&amp; a,
                  const polymorphic_allocator&lt;T2&gt;&amp; b) noexcept;

  // The name resource_adaptor_imp is for exposition only.
  template &lt;class Allocator&gt; class resource_adaptor_imp;

  template &lt;class Allocator&gt;
    using resource_adaptor = resource_adaptor_imp&lt;
      typename allocator_traits&lt;Allocator&gt;::template rebind_alloc&lt;char&gt;&gt;;

  // Global memory resources
  memory_resource* new_delete_resource() noexcept;
  memory_resource* null_memory_resource() noexcept;

  // The default memory resource
  memory_resource* set_default_resource(memory_resource* r) noexcept;
  memory_resource* get_default_resource() noexcept;

  // Standard memory resources
  struct pool_options;
  class synchronized_pool_resource;
  class unsynchronized_pool_resource;
  class monotonic_buffer_resource;

} // namespace pmr
} // namespace fundamentals_v1
} // namespace experimental
} // namespace std
}}

{{langlinks|ja|zh}}
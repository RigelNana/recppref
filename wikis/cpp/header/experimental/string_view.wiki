{{cpp/header/experimental/title|experimental/string_view}}
{{cpp/header/experimental/navbar}}

This header is part of the Library Fundamentals TS ([[cpp/experimental/lib extensions|v1]], [[cpp/experimental/lib extensions 2|v2]]).

===Classes===
{{dsc begin}}
{{dsc hitem|Name|Description}}
{{dsc|{{lc|std::experimental::basic_string_view}} {{mark since libfund ts}}|Class template representing a reference to a character string {{mark tclass}}}}
{{dsc|{{lc|std::experimental::string_view}} {{mark since libfund ts}}|{{c|std::experimental::basic_string_view&lt;char&gt;}} {{mark typedef}}}}
{{dsc|{{lc|std::experimental::wstring_view}} {{mark since libfund ts}}|{{c|std::experimental::basic_string_view&lt;wchar_t&gt;}} {{mark typedef}}}}
{{dsc|{{lc|std::experimental::u16string_view}} {{mark since libfund ts}}|{{c|std::experimental::basic_string_view&lt;char16_t&gt;}}  {{mark typedef}}}}
{{dsc|{{lc|std::experimental::u32string_view}} {{mark since libfund ts}}|{{c|std::experimental::basic_string_view&lt;char32_t&gt;}} {{mark typedef}}}}

{{dsc|{{c|std::hash&lt;std::experimental::string_view&gt;}} {{mark since libfund ts}}|{{mark ptclass}}}}
{{dsc|{{c|std::hash&lt;std::experimental::u16string_view&gt;}} {{mark since libfund ts}}|{{mark ptclass}}}}
{{dsc|{{c|std::hash&lt;std::experimental::u32string_view&gt;}} {{mark since libfund ts}}|{{mark ptclass}}}}
{{dsc|{{c|std::hash&lt;std::experimental::wstring_view&gt;}}  {{mark since libfund ts}}|{{mark ptclass}}}}
{{dsc end}}

===Functions===

{{dsc begin}}
{{dsc inc|cpp/experimental/basic_string_view/dsc operator_cmp}}

{{dsc h2|Output}}
{{dsc inc|cpp/experimental/basic_string_view/dsc operator_ltlt}}
{{dsc end}}

===Synopsis===
{{source|1=

namespace std {
  namespace experimental {
  inline namespace fundamentals_v1 {

    // 7.2, Class template basic_string_view
    template&lt;class CharT, class Traits = char_traits&lt;CharT&gt;&gt;
        class basic_string_view;

    // 7.9, basic_string_view non-member comparison functions
    template&lt;class CharT, class Traits&gt;
    constexpr bool operator==(basic_string_view&lt;CharT, Traits&gt; x,
                              basic_string_view&lt;CharT, Traits&gt; y) noexcept;
    template&lt;class CharT, class Traits&gt;
    constexpr bool operator!=(basic_string_view&lt;CharT, Traits&gt; x,
                              basic_string_view&lt;CharT, Traits&gt; y) noexcept;
    template&lt;class CharT, class Traits&gt;
    constexpr bool operator&lt; (basic_string_view&lt;CharT, Traits&gt; x,
                                 basic_string_view&lt;CharT, Traits&gt; y) noexcept;
    template&lt;class CharT, class Traits&gt;
    constexpr bool operator&gt; (basic_string_view&lt;CharT, Traits&gt; x,
                              basic_string_view&lt;CharT, Traits&gt; y) noexcept;
    template&lt;class CharT, class Traits&gt;
    constexpr bool operator&lt;=(basic_string_view&lt;CharT, Traits&gt; x,
                                 basic_string_view&lt;CharT, Traits&gt; y) noexcept;
    template&lt;class CharT, class Traits&gt;
    constexpr bool operator&gt;=(basic_string_view&lt;CharT, Traits&gt; x,
                              basic_string_view&lt;CharT, Traits&gt; y) noexcept;
    // /* see description */, sufficient additional overloads of comparison functions

    // 7.10, Inserters and extractors
    template&lt;class CharT, class Traits&gt;
      basic_ostream&lt;CharT, Traits&gt;&amp;
        operator&lt;&lt;(basic_ostream&lt;CharT, Traits&gt;&amp; os,
                   basic_string_view&lt;CharT, Traits&gt; str);

    // basic_string_view typedef names
    typedef basic_string_view&lt;char&gt; string_view;
    typedef basic_string_view&lt;char16_t&gt; u16string_view;
    typedef basic_string_view&lt;char32_t&gt; u32string_view;
    typedef basic_string_view&lt;wchar_t&gt; wstring_view;

  }  // namespace fundamentals_v1
  }  // namespace experimental

  // 7.11, Hash support
  template &lt;class T&gt; struct hash;
  template &lt;&gt; struct hash&lt;experimental::string_view&gt;;
  template &lt;&gt; struct hash&lt;experimental::u16string_view&gt;;
  template &lt;&gt; struct hash&lt;experimental::u32string_view&gt;;
  template &lt;&gt; struct hash&lt;experimental::wstring_view&gt;;

}  // namespace std
}}

{{langlinks|ja|zh}}
{{cpp/header/title|experimental/ranges/range}}
{{cpp/header/navbar}}

This header is part of the [[cpp/experimental/ranges|ranges]] library.

=== Range concepts ===
{{dsc begin}}
{{dsc namespace | std::experimental::ranges}}
{{dsc inc | cpp/experimental/ranges/range/dsc Range}}
{{dsc inc | cpp/experimental/ranges/range/dsc SizedRange}}
{{dsc inc | cpp/experimental/ranges/range/dsc View}}
{{dsc inc | cpp/experimental/ranges/range/dsc BoundedRange}}
{{dsc inc | cpp/experimental/ranges/range/dsc InputRange}}
{{dsc inc | cpp/experimental/ranges/range/dsc OutputRange}}
{{dsc inc | cpp/experimental/ranges/range/dsc ForwardRange}}
{{dsc inc | cpp/experimental/ranges/range/dsc BidirectionalRange}}
{{dsc inc | cpp/experimental/ranges/range/dsc RandomAccessRange}}
{{dsc end}}

=== Range access ===
{{dsc begin}}
{{dsc namespace | std::experimental::ranges}}
{{dsc inc | cpp/experimental/ranges/range/dsc begin}}
{{dsc inc | cpp/experimental/ranges/range/dsc end}}
{{dsc inc | cpp/experimental/ranges/range/dsc rbegin}}
{{dsc inc | cpp/experimental/ranges/range/dsc rend}}
{{dsc end}}

=== Range primitives ===
{{dsc begin}}
{{dsc namespace | std::experimental::ranges}}
{{dsc inc | cpp/experimental/ranges/range/dsc size}}
{{dsc inc | cpp/experimental/ranges/range/dsc empty}}
{{dsc inc | cpp/experimental/ranges/range/dsc data}}
{{dsc inc | cpp/experimental/ranges/range/dsc iterator_t}}
{{dsc end}}

=== Synopsis ===
{{source|1=

#include &lt;experimental/ranges/iterator&gt;

namespace std { namespace experimental { namespace ranges { inline namespace v1 {

namespace {
  constexpr /* unspecified */ begin = /* unspecified */;
  constexpr /* unspecified */ end = /* unspecified */;
  constexpr /* unspecified */ cbegin = /* unspecified */;
  constexpr /* unspecified */ cend = /* unspecified */;
  constexpr /* unspecified */ rbegin = /* unspecified */;
  constexpr /* unspecified */ rend = /* unspecified */;
  constexpr /* unspecified */ crbegin = /* unspecified */;
  constexpr /* unspecified */ crend = /* unspecified */;
}

namespace {
  constexpr /* unspecified */ size = /* unspecified */;
  constexpr /* unspecified */ empty = /* unspecified */;
  constexpr /* unspecified */ data = /* unspecified */;
  constexpr /* unspecified */ cdata = /* unspecified */;
}

template &lt;class T&gt;
using iterator_t = decltype(ranges::begin(declval&lt;T&amp;&gt;()));

template &lt;class T&gt;
using sentinel_t = decltype(ranges::end(declval&lt;T&amp;&gt;()));

template &lt;class&gt;
constexpr bool disable_sized_range = false;

template &lt;class T&gt;
struct enable_view { };

struct view_base { };

template &lt;class T&gt;
concept bool Range = /* see definition */;

template &lt;class T&gt;
concept bool SizedRange = /* see definition */;

template &lt;class T&gt;
concept bool View = /* see definition */;

template &lt;class T&gt;
concept bool BoundedRange = /* see definition */;

template &lt;class T&gt;
concept bool InputRange = /* see definition */;

template &lt;class R, class T&gt;
concept bool OutputRange = /* see definition */;

template &lt;class T&gt;
concept bool ForwardRange = /* see definition */;

template &lt;class T&gt;
concept bool BidirectionalRange = /* see definition */;

template &lt;class T&gt;
concept bool RandomAccessRange = /* see definition */;

{{))}}{{))}}

}}
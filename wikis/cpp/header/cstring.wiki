{{cpp/header/title|cstring}}
{{cpp/header/navbar}}
{{cpp/header/c}}

This header is for [[cpp/string/byte|C-style null-terminated byte strings]].

===Macros===
{{dsc begin}}
{{dsc inc|cpp/types/dsc NULL}}
{{dsc end}}

===Types===
{{dsc begin}}
{{dsc inc|cpp/types/dsc size_t}}
{{dsc end}}

===Functions===
{{dsc begin}}
{{dsc h2|String manipulation}}
{{dsc inc|cpp/string/byte/dsc strcpy}}
{{dsc inc|cpp/string/byte/dsc strncpy}}
{{dsc inc|cpp/string/byte/dsc strcat}}
{{dsc inc|cpp/string/byte/dsc strncat}}
{{dsc inc|cpp/string/byte/dsc strxfrm}}

{{dsc h2|String examination}}
{{dsc inc|cpp/string/byte/dsc strlen}}
{{dsc inc|cpp/string/byte/dsc strcmp}}
{{dsc inc|cpp/string/byte/dsc strncmp}}
{{dsc inc|cpp/string/byte/dsc strcoll}}
{{dsc inc|cpp/string/byte/dsc strchr}}
{{dsc inc|cpp/string/byte/dsc strrchr}}
{{dsc inc|cpp/string/byte/dsc strspn}}
{{dsc inc|cpp/string/byte/dsc strcspn}}
{{dsc inc|cpp/string/byte/dsc strpbrk}}
{{dsc inc|cpp/string/byte/dsc strstr}}
{{dsc inc|cpp/string/byte/dsc strtok}}

{{dsc h2|Character array manipulation}}
{{dsc inc|cpp/string/byte/dsc memchr}}
{{dsc inc|cpp/string/byte/dsc memcmp}}
{{dsc inc|cpp/string/byte/dsc memset}}
{{dsc inc|cpp/string/byte/dsc memcpy}}
{{dsc inc|cpp/string/byte/dsc memmove}}

{{dsc h2|Miscellaneous}}
{{dsc inc|cpp/string/byte/dsc strerror}}
{{dsc end}}

===Notes===
* {{lc|NULL}} is also defined in the following headers:
** {{header|clocale}}
** {{header|ctime}}
** {{header|cstddef}}
** {{header|cstdio}}
** {{header|cwchar}}
* {{lc|std::size_t}} is also defined in the following headers:
** {{header|ctime}}
** {{header|cstddef}}
** {{header|cstdio}}
** {{header|cuchar}} {{mark since c++17}}
** {{header|cwchar}}

===Synopsis===
{{source|1=
namespace std {
  using size_t = /* see description */;                  // freestanding

  void* memcpy(void* s1, const void* s2, size_t n);      // freestanding
  void* memmove(void* s1, const void* s2, size_t n);     // freestanding
  char* strcpy(char* s1, const char* s2);                // freestanding
  char* strncpy(char* s1, const char* s2, size_t n);     // freestanding
  char* strcat(char* s1, const char* s2);                // freestanding
  char* strncat(char* s1, const char* s2, size_t n);     // freestanding
  int memcmp(const void* s1, const void* s2, size_t n);  // freestanding
  int strcmp(const char* s1, const char* s2);            // freestanding
  int strcoll(const char* s1, const char* s2);
  int strncmp(const char* s1, const char* s2, size_t n); // freestanding
  size_t strxfrm(char* s1, const char* s2, size_t n);
  const void* memchr(const void* s, int c, size_t n);    // freestanding
  void* memchr(void* s, int c, size_t n);                // freestanding
  const char* strchr(const char* s, int c);              // freestanding
  char* strchr(char* s, int c);                          // freestanding
  size_t strcspn(const char* s1, const char* s2);        // freestanding
  const char* strpbrk(const char* s1, const char* s2);   // freestanding
  char* strpbrk(char* s1, const char* s2);               // freestanding
  const char* strrchr(const char* s, int c);             // freestanding
  char* strrchr(char* s, int c);                         // freestanding
  size_t strspn(const char* s1, const char* s2);         // freestanding
  const char* strstr(const char* s1, const char* s2);    // freestanding
  char* strstr(char* s1, const char* s2);                // freestanding
  char* strtok(char* s1, const char* s2);                // freestanding
  void* memset(void* s, int c, size_t n);                // freestanding
  char* strerror(int errnum);
  size_t strlen(const char* s);                          // freestanding
}

#define NULL /* see description */                       // freestanding
}}

{{langlinks|es|ja|ru|zh}}
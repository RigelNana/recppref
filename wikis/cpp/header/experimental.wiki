{{title|Experimental C++ Standard Library headers}}
{{cpp/header/experimental/navbar}}

The interface of Experimental C++ standard libraries (i.e. libraries introduced by [[cpp/experimental|C++ TR's/TS's]]) is defined by the following collection of headers.

{{dsc begin}}
{{dsc h1|Execution {{stddoc|P2300}}}}
{{dsc|{{ttb|{{header|experimental/execution}}}} {{small|(P2300)}}|[[cpp/experimental/execution|Asynchronous execution on generic execution resources]]}}

{{dsc h1|Filesystem TS}}
{{dsc|{{ttb|{{header|experimental/filesystem}}}} {{mark since fs ts}}|[[cpp/experimental/fs|Filesystem library]]}}

{{dsc h1|Parallelism TS}}
{{dsc|{{ttb|{{header|experimental/algorithm}}}} {{mark since parallelism ts}}|[[cpp/experimental/parallelism#Parallelized versions of existing algorithms|Non-numeric parallel algorithms]]}}
{{dsc|{{ttb|{{header|experimental/execution_policy}}}} {{mark since parallelism ts}}|[[cpp/experimental/parallelism#Execution policies|Execution policies]]}}
{{dsc|{{ttb|{{header|experimental/exception_list}}}} {{mark since parallelism ts}}|[[cpp/experimental/parallelism#Exception lists|Parallel exceptions]]}}
{{dsc|{{ttb|{{header|experimental/numeric}}}} {{mark since parallelism ts}}|[[cpp/experimental/parallelism#Parallelized versions of existing algorithms|Numeric parallel algorithms]]}}

{{dsc h1|Library Fundamentals TS}}
{{dsc|{{ttb|{{header|experimental/algorithm}}}} {{mark since libfund ts}}|{{ltt|cpp/experimental/sample}} and {{ltt|cpp/experimental/search}}}}
{{dsc|{{ttb|{{header|experimental/any}}}} {{mark since libfund ts}}|{{ltt|cpp/experimental/any}}}}
{{dsc|{{ttb|{{header|experimental/chrono}}}} {{mark since libfund ts}}|[[cpp/experimental/type_trait_variable_templates|Variable templates for type traits]]}}
{{dsc|{{ttb|{{header|experimental/deque}}}} {{mark since libfund ts}}|[[cpp/experimental/lib_extensions/pmr_container|Convenience aliases for containers using polymorphic allocators]]}}
{{dsc|{{ttb|{{header|experimental/forward_list}}}} {{mark since libfund ts}}|[[cpp/experimental/lib_extensions/pmr_container|Convenience aliases for containers using polymorphic allocators]]}}
{{dsc|{{ttb|{{header|experimental/future}}}} {{mark since libfund ts}}|{{ltt|cpp/experimental/lib_extensions/promise}} and {{ltt|cpp/experimental/lib_extensions/packaged_task}} using polymorphic allocators}}
{{dsc|{{ttb|{{header|experimental/list}}}} {{mark since libfund ts}}|[[cpp/experimental/lib_extensions/pmr_container|Convenience aliases for containers using polymorphic allocators]]}}
{{dsc|{{ttb|{{header|experimental/functional}}}} {{mark since libfund ts}}|{{ltt|cpp/experimental/function}} using polymorphic allocators and [[cpp/experimental/lib_extensions#Sampling and searching algorithms|searchers]]}}
{{dsc|{{ttb|{{header|experimental/map}}}} {{mark since libfund ts}}|[[cpp/experimental/lib_extensions/pmr_container|Convenience aliases for containers using polymorphic allocators]]}}
{{dsc|{{ttb|{{header|experimental/memory}}}} {{mark since libfund ts}}|{{ltt|cpp/experimental/shared_ptr}} and {{ltt|cpp/experimental/weak_ptr}} with array support}}
{{dsc|{{ttb|{{header|experimental/memory_resource}}}} {{mark since libfund ts}}|[[cpp/experimental/lib_extensions|Polymorphic allocators and memory resources]]}}
{{dsc|{{ttb|{{header|experimental/optional}}}} {{mark since libfund ts}}|{{ltt|cpp/experimental/optional}}}}
{{dsc|{{ttb|{{header|experimental/ratio}}}} {{mark since libfund ts}}|[[cpp/experimental/type_trait_variable_templates|Variable templates for type traits]]}}
{{dsc|{{ttb|{{header|experimental/regex}}}} {{mark since libfund ts}}|[[cpp/experimental/lib_extensions/pmr_container|Convenience aliases for containers using polymorphic allocators]]}}
{{dsc|{{ttb|{{header|experimental/set}}}} {{mark since libfund ts}}|[[cpp/experimental/lib_extensions/pmr_container|Convenience aliases for containers using polymorphic allocators]]}}
{{dsc|{{ttb|{{header|experimental/string}}}} {{mark since libfund ts}}|[[cpp/experimental/lib_extensions/pmr_container|Convenience aliases for containers using polymorphic allocators]]}}
{{dsc|{{ttb|{{header|experimental/string_view}}}} {{mark since libfund ts}}|{{ltt|cpp/experimental/basic_string_view}}}}
{{dsc|{{ttb|{{header|experimental/system_error}}}} {{mark since libfund ts}}|[[cpp/experimental/type_trait_variable_templates|Variable templates for type traits]]}}
{{dsc|{{ttb|{{header|experimental/tuple}}}} {{mark since libfund ts}}|[[cpp/experimental/type_trait_variable_templates|Variable templates for type traits]] and {{ltt|cpp/experimental/apply}}}}
{{dsc|{{ttb|{{header|experimental/type_traits}}}} {{mark since libfund ts}}|[[cpp/experimental/type_trait_variable_templates|Variable templates for type traits]] and {{ltt|cpp/experimental/invocation_type}}}}
{{dsc|{{ttb|{{header|experimental/unordered_map}}}} {{mark since libfund ts}}|[[cpp/experimental/lib_extensions/pmr_container|Convenience aliases for containers using polymorphic allocators]]}}
{{dsc|{{ttb|{{header|experimental/unordered_set}}}} {{mark since libfund ts}}|[[cpp/experimental/lib_extensions/pmr_container|Convenience aliases for containers using polymorphic allocators]]}}
{{dsc|{{ttb|{{header|experimental/utility}}}} {{mark since libfund ts}}|{{ltt|cpp/experimental/erased_type}}}}
{{dsc|{{ttb|{{header|experimental/vector}}}} {{mark since libfund ts}}|[[cpp/experimental/lib_extensions/pmr_container|Convenience aliases for containers using polymorphic allocators]]}}

{{dsc h1|Concurrency TS}}
{{dsc|{{ttb|{{header|experimental/atomic}}}} {{mark since concurrency ts}}|{{ltt|cpp/experimental/atomic_shared_ptr}} and {{ltt|cpp/experimental/atomic_weak_ptr}}}}
{{dsc|{{ttb|{{header|experimental/barrier}}}} {{mark since concurrency ts}}|{{ltt|cpp/experimental/barrier}} and {{ltt|cpp/experimental/flex_barrier}}}}
{{dsc|{{ttb|{{header|experimental/future}}}} {{mark since concurrency ts}}|[[cpp/experimental/concurrency#Continuations and other extensions for std::future|Extensions for {{tt|std::future}}]]}}
{{dsc|{{ttb|{{header|experimental/latch}}}} {{mark since concurrency ts}}|{{ltt|cpp/experimental/latch}}}}

{{dsc h1|Library Fundamentals TS v2}}
{{dsc|{{ttb|{{header|experimental/algorithm}}}} {{mark since libfund ts 2}}|{{ltt|cpp/experimental/sample}} and {{ltt|cpp/experimental/shuffle}}}}
{{dsc|{{ttb|{{header|experimental/array}}}} {{mark since libfund ts 2}}|{{ltt|cpp/experimental/make_array}} and {{ltt|cpp/experimental/to_array}}}}
{{dsc|{{ttb|{{header|experimental/deque}}}} {{mark since libfund ts 2}}|{{ltt|cpp/experimental/deque/erase}} and {{ltt|cpp/experimental/deque/erase_if}}}}
{{dsc|{{ttb|{{header|experimental/forward_list}}}} {{mark since libfund ts 2}}|{{ltt|cpp/experimental/forward_list/erase}} and {{ltt|cpp/experimental/forward_list/erase_if}}}}
{{dsc|{{ttb|{{header|experimental/functional}}}} {{mark since libfund ts 2}}|{{ltt|cpp/experimental/not_fn}}}}
{{dsc|{{ttb|{{header|experimental/iterator}}}} {{mark since libfund ts 2}}|{{ltt|cpp/experimental/ostream_joiner}}}}
{{dsc|{{ttb|{{header|experimental/list}}}} {{mark since libfund ts 2}}|{{ltt|cpp/experimental/list/erase}} and {{ltt|cpp/experimental/list/erase_if}}}}
{{dsc|{{ttb|{{header|experimental/map}}}} {{mark since libfund ts 2}}|{{ltt|cpp/experimental/map/erase_if}} and {{ltt|cpp/experimental/multimap/erase_if}}}}
{{dsc|{{ttb|{{header|experimental/memory}}}} {{mark since libfund ts 2}}|{{ltt|cpp/experimental/observer_ptr}}}}
{{dsc|{{ttb|{{header|experimental/numeric}}}} {{mark since libfund ts 2}}|{{ltt|cpp/experimental/gcd}} and {{ltt|cpp/experimental/lcm}}}}
{{dsc|{{ttb|{{header|experimental/propagate_const}}}} {{mark since libfund ts 2}}|{{ltt|cpp/experimental/propagate_const}}}}
{{dsc|{{ttb|{{header|experimental/random}}}} {{mark since libfund ts 2}}|{{ltt|cpp/experimental/randint}} and {{ltt|cpp/experimental/reseed}}}}
{{dsc|{{ttb|{{header|experimental/set}}}} {{mark since libfund ts 2}}|{{ltt|cpp/experimental/set/erase_if}} and {{ltt|cpp/experimental/multiset/erase_if}}}}
{{dsc|{{ttb|{{header|experimental/source_location}}}} {{mark since libfund ts 2}}|{{ltt|cpp/experimental/source_location}}}}
{{dsc|{{ttb|{{header|experimental/string}}}} {{mark since libfund ts 2}}|{{ltt|cpp/experimental/basic_string/erase}} and {{ltt|cpp/experimental/basic_string/erase_if}}}}
{{dsc|{{ttb|{{header|experimental/type_traits}}}} {{mark since libfund ts 2}}|[[cpp/experimental/lib_extensions_2|Metafunctions and detection idiom]]}}
{{dsc|{{ttb|{{header|experimental/unordered_map}}}} {{mark since libfund ts 2}}|{{ltt|cpp/experimental/unordered_map/erase_if}} and {{ltt|cpp/experimental/unordered_multimap/erase_if}}}}
{{dsc|{{ttb|{{header|experimental/unordered_set}}}} {{mark since libfund ts 2}}|{{ltt|cpp/experimental/unordered_set/erase_if}} and {{ltt|cpp/experimental/unordered_multiset/erase_if}}}}
{{dsc|{{ttb|{{header|experimental/vector}}}} {{mark since libfund ts 2}}|{{ltt|cpp/experimental/vector/erase}} and {{ltt|cpp/experimental/vector/erase_if}}}}

{{dsc h1|Ranges TS}}
{{dsc|{{ttb|{{header|experimental/ranges/algorithm}}}} {{mark since ranges ts}}|[[cpp/experimental/ranges#Algorithms|Algorithms library]]}}
{{dsc|{{ttb|{{header|experimental/ranges/concepts}}}} {{mark since ranges ts}}|[[cpp/experimental/ranges#Concepts|Concepts library]]}}
{{dsc|{{ttb|{{header|experimental/ranges/functional}}}} {{mark since ranges ts}}|[[cpp/experimental/ranges#Function objects|Function objects]]}}
{{dsc|{{ttb|{{header|experimental/ranges/iterator}}}} {{mark since ranges ts}}|[[cpp/experimental/ranges#Iterators|Iterators library]]}}
{{dsc|{{ttb|{{header|experimental/ranges/random}}}} {{mark since ranges ts}}|{{rconcept|UniformRandomNumberGenerator}} concept}}
{{dsc|{{ttb|{{header|experimental/ranges/range}}}} {{mark since ranges ts}}|[[cpp/experimental/ranges#Ranges|Ranges library]]}}
{{dsc|{{ttb|{{header|experimental/ranges/tuple}}}} {{mark since ranges ts}}|[[cpp/experimental/ranges#Tagged pairs and tuples|Tagged tuples]]}}
{{dsc|{{ttb|{{header|experimental/ranges/type_traits}}}} {{mark since ranges ts}}|[[cpp/experimental/ranges#Metaprogramming and type traits|Metaprogramming and type traits]]}}
{{dsc|{{ttb|{{header|experimental/ranges/utility}}}} {{mark since ranges ts}}|[[cpp/experimental/ranges#Utility components|Utility components]]}}
&lt;!--
{{dsc h1|Coroutines TS}}
{{dsc|{{ttb|{{header|experimental/coroutine}}}} {{mark since coro ts}}|[[cpp/experimental/coroutine|Coroutines support library]]}}
--&gt;
{{dsc h1|Networking TS}}
{{dsc|{{ttb|{{header|experimental/buffer}}}} {{mark since networking ts}}|[[cpp/experimental/networking#Buffers and buffer-oriented streams|Buffers]]}}
{{dsc|{{ttb|{{header|experimental/executor}}}} {{mark since networking ts}}|[[cpp/experimental/networking#Asynchronous model|Asynchronous model]]}}
{{dsc|{{ttb|{{header|experimental/internet}}}} {{mark since networking ts}}|[[cpp/experimental/networking#Internet protocol|Internet protocol]]}}
{{dsc|{{ttb|{{header|experimental/io_context}}}} {{mark since networking ts}}|[[cpp/experimental/networking#Basic I/O services|Basic I/O services]]}}
{{dsc|{{ttb|{{header|experimental/net}}}} {{mark since networking ts}}|Convenience header that includes every other Networking TS header}}
{{dsc|{{ttb|{{header|experimental/netfwd}}}} {{mark since networking ts}}|Contains forward declarations of major Networking TS components}}
{{dsc|{{ttb|{{header|experimental/socket}}}} {{mark since networking ts}}|[[cpp/experimental/networking#Sockets and socket streams|Sockets]]}}
{{dsc|{{ttb|{{header|experimental/timer}}}} {{mark since networking ts}}|Timers}}

{{dsc h1|Parallelism TS v2}}
{{dsc|{{ttb|{{header|experimental/algorithm}}}} {{mark since parallelism ts 2}}|[[cpp/experimental/parallelism 2#Parallel algorithms|Non-numeric parallel algorithms]]}}
{{dsc|{{ttb|{{header|experimental/execution_policy}}}} {{mark since parallelism ts 2}}|[[cpp/experimental/parallelism 2#Execution policies|{{tt|unseq}} and {{tt|vec}} policies]]}}
{{dsc|{{ttb|{{header|experimental/simd}}}} {{mark since parallelism ts 2}}|[[cpp/experimental/simd|Data-parallel types]]}}
{{dsc|{{ttb|{{header|experimental/task_block}}}} {{mark since parallelism ts 2}}|[[cpp/experimental/parallelism 2#Task Block|Task block]]}}

{{dsc h1|Reflection TS}}
{{dsc|{{ttb|{{header|experimental/reflect}}}} {{mark since reflection ts}}|[[cpp/experimental/reflect#Library support|Static reflection support library]]}}
&lt;!--{{dsc|{{ttb|{{header|experimental/meta}}}} {{mark since reflection ts}}|
Meta functions|[[cpp/experimental/reflect|Static reflection support library]]}}--&gt;

{{dsc h1|Library Fundamentals TS v3}}
{{dsc|{{ttb|{{header|experimental/scope}}}} {{mark since libfund ts 3}}|{{ltt|cpp/experimental/scope_exit}}, {{ltt|cpp/experimental/scope_fail}}, {{ltt|cpp/experimental/scope_success}} and {{ltt|cpp/experimental/unique_resource}}}}
{{dsc end}}

{{langlinks|ar|de|es|fr|it|ja|pt|ru|zh}}
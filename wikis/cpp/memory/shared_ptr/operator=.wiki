{{cpp/memory/shared_ptr/title|operator{{=}}}}
{{cpp/memory/shared_ptr/navbar}}
{{dcl begin}}
{{dcl|num=1|1= 
shared_ptr&amp; operator=( const shared_ptr&amp; r ) noexcept;
}}
{{dcl|num=2|1= 
template&lt; class Y &gt; 
shared_ptr&amp; operator=( const shared_ptr&lt;Y&gt;&amp; r ) noexcept;
}}
{{dcl|num=3|1= 
shared_ptr&amp; operator=( shared_ptr&amp;&amp; r ) noexcept;
}}
{{dcl|num=4|1= 
template&lt; class Y &gt; 
shared_ptr&amp; operator=( shared_ptr&lt;Y&gt;&amp;&amp; r ) noexcept;
}}
{{dcl|num=5|deprecated=c++11|until=c++17|1= 
template&lt; class Y &gt; 
shared_ptr&amp; operator=( std::auto_ptr&lt;Y&gt;&amp;&amp; r );
}}
{{dcl|num=6|1= 
template&lt; class Y, class Deleter &gt; 
shared_ptr&amp; operator=( std::unique_ptr&lt;Y, Deleter&gt;&amp;&amp; r );
}}
{{dcl end}}

Replaces the managed object with the one managed by {{c|r}}.

If {{c|*this}} already owns an object and it is the last {{tt|shared_ptr}} owning it, and {{c|r}} is not the same as {{c|*this}}, the object is destroyed through the owned deleter.

@1,2@ Shares ownership of the object managed by {{c|r}}. If {{c|r}} manages no object, {{c|*this}} manages no object too. Equivalent to {{c|shared_ptr&lt;T&gt;(r).swap(*this)}}.

@3,4@ Move-assigns a {{tt|shared_ptr}} from {{c|r}}. After the assignment, {{c|*this}} contains a copy of the previous state of {{c|r}}, and {{c|r}} is empty. Equivalent to {{c|shared_ptr&lt;T&gt;(std::move(r)).swap(*this)}}.

@5@ Transfers the ownership of the object managed by {{c|r}} to {{c|*this}}. If {{c|r}} manages no object, {{c|*this}} manages no object too. After the assignment, {{c|*this}} contains the pointer previously held by {{c|r}}, and {{c|1=use_count() == 1}}; also {{c|r}} is empty. Equivalent to {{c|shared_ptr&lt;T&gt;(r).swap(*this)}}.

@6@ Transfers the ownership of the object managed by {{c|r}} to {{c|*this}}. The deleter associated to {{c|r}} is stored for future deletion of the managed object. {{c|r}} manages no object after the call. Equivalent to {{c|shared_ptr&lt;T&gt;(std::move(r)).swap(*this)}}.

===Parameters===
{{par begin}}
{{par|r|another smart pointer to share the ownership to or acquire the ownership from}}
{{par end}} 

===Return value===
{{c|*this}}

===Notes===
The implementation may meet the requirements without creating a temporary {{tt|shared_ptr}} object.

===Exceptions===
@5,6@ {{cpp/impldef exception item}}

===Example===
{{example
|code=
|output=
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/shared_ptr/dsc reset}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
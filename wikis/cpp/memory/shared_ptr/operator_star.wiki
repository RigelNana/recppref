{{cpp/memory/shared_ptr/title|operator*|operator-&amp;gt;}}
{{cpp/memory/shared_ptr/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1= 
T&amp; operator*() const noexcept;
}}
{{dcl|num=2|since=c++11|1=
T* operator-&gt;() const noexcept;
}}
{{dcl end}}

Dereferences the stored pointer. The behavior is undefined if the stored pointer is null.

===Parameters===
(none)

===Return value===
@1@ The result of dereferencing the stored pointer, i.e., {{c|*get()}}.
@2@ The stored pointer, i.e., {{c|get()}}.

===Remarks===
When {{tt|T}} is {{rev inl|since=c++17|an array type or (possibly cv-qualified)}} {{tt|void}}, it is unspecified whether function {{v|1}} is declared. If it is declared, it is unspecified what its return type is, except that the declaration (although not necessarily the definition) of the function shall be well formed. This makes it possible to instantiate {{c|std::shared_ptr&lt;void&gt;}}

{{rev begin}}
{{rev|since=c++17|
When {{tt|T}} is an array type, it is unspecified whether function {{v|2}} is declared. If it is declared, it is unspecified what its return type is, except that the declaration of the function shall be well-formed.
}}{{rev end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;

struct Foo
{
    Foo(int in) : a(in) {}
    void print() const
    {
        std::cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; '\n';
    }
    int a;
};

int main()
{
    auto ptr = std::make_shared&lt;Foo&gt;(10);
    ptr-&gt;print();
    (*ptr).print();
}
|output=
a = 10
a = 10
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/shared_ptr/dsc get}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
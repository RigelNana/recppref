{{cpp/memory/shared_ptr/title|use_count}}
{{cpp/memory/shared_ptr/navbar}}
{{ddcl|
long use_count() const noexcept;
}}

Returns the number of different {{tt|shared_ptr}} instances ({{c|*this}} included) managing the current object. If there is no managed object, {{c|0}} is returned.

In multithreaded environment, use_count atomically retrieves the number of instances (typical implementations use a [[cpp/atomic/memory_order|memory_order_relaxed]] load).

===Parameters===
(none)

===Return value===
The number of {{lc|std::shared_ptr}} instances managing the current object or {{c|0}} if there is no managed object.

===Notes===
Common use cases include
* comparison with {{c|0}}. If {{tt|use_count}} returns zero, the shared pointer is ''empty'' and manages no objects (whether or not its stored pointer is {{ltt|cpp/language/nullptr|nullptr}}).
* comparison with {{c|1}}. If {{tt|use_count}} returns 1, there are no other owners. {{rev inl|until=c++20|The {{rev inl|since=c++17|deprecated}} member function {{lc|unique()}} is provided for this use case.}}

In multithreaded environment

The value returned by {{tt|use_count}} should be considered approximate, as the number of shared owners might change in other threads between the atomic retrieval and meaningful use of the value. When {{tt|use_count}} returns 1, it does not imply that the object is safe to modify because accesses to the managed object by former shared owners may not have completed, and because new shared owners may be introduced concurrently, such as by {{lc|std::weak_ptr::lock}}. Only when {{tt|use_count}} returns 0 is the count accurate.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;

void fun(std::shared_ptr&lt;int&gt; sp)
{
    std::cout &lt;&lt; "in fun(): sp.use_count() == " &lt;&lt; sp.use_count()
              &lt;&lt; " (object @ " &lt;&lt; sp &lt;&lt; ")\n";
}

int main()
{
    auto sp1 = std::make_shared&lt;int&gt;(5);
    std::cout &lt;&lt; "in main(): sp1.use_count() == " &lt;&lt; sp1.use_count()
              &lt;&lt; " (object @ " &lt;&lt; sp1 &lt;&lt; ")\n";

    fun(sp1);
}
|p=true
|output=
in main(): sp1.use_count() == 1 (object @ 0x20eec30)
in fun(): sp.use_count() == 2 (object @ 0x20eec30)
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/shared_ptr/dsc unique}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
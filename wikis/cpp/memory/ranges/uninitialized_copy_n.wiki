{{cpp/ranges/title|uninitialized_copy_n|uninitialized_copy_n_result}}
{{cpp/memory/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcl h|Call signature}}
{{dcla|num=1|since=c++20|constexpr=c++26|
template&lt; std::input_iterator I,
          no-throw-input-iterator O, no-throw-sentinel-for&lt;O&gt; S &gt;
    requires std::constructible_from&lt;std::iter_value_t&lt;O&gt;,
                                     std::iter_reference_t&lt;I&gt;&gt;
uninitialized_copy_n_result&lt;I, O&gt;
    uninitialized_copy_n( I ifirst, std::iter_difference_t&lt;I&gt; count,
                          O ofirst, S olast );
}}
{{dcl h|Helper types}}
{{dcl|num=2|since=c++20|1=
template&lt; class I, class O &gt;
using uninitialized_copy_n_result = ranges::in_out_result&lt;I, O&gt;;
}}
{{dcl end}}

Let {{mathjax-or|\(\scriptsize N\)|N}} be {{c|ranges::min(count, ranges::distance(ofirst, olast))}}.

Copies {{mathjax-or|\(\scriptsize N\)|N}} elements from the range beginning at {{c|ifirst}} to an uninitialized memory area {{range|ofirst|olast}} as if by
{{c multi|
auto ret {{=}} ranges::uninitialized_copy(std::counted_iterator(std::move(ifirst), count),|
                                      std::default_sentinel, ofirst, olast);|
return {std::move(ret.in).base(), ret.out};
}}

If an exception is thrown during the initialization, the objects already constructed are destroyed in an unspecified order.

If {{range|ofirst|olast}} overlaps with {{counted range|ifirst|count}}, the behavior is undefined.

{{cpp/ranges/niebloid}}

===Parameters===
{{par begin}}
{{par|ifirst|the beginning of the range of elements to copy from}}
{{par|count|the number of elements to copy}}
{{par|ofirst, olast|iterator-sentinel pair denoting the destination range}}
{{par end}}

===Return value===
As described above.

===Complexity===
{{mathjax-or|\(\scriptsize\mathcal{O}(N)\)|ùìû(N)}}.

===Exceptions===
Any exception thrown on construction of the elements in the destination range.

===Notes===
An implementation may improve the efficiency of the {{tt|ranges::uninitialized_copy_n}}, by using e.g. {{lc|ranges::copy_n}}, if the value type of the output range is {{named req|TrivialType}}.

{{feature test macro|__cpp_lib_raw_memory_algorithms|std=C++26|value=202411L|{{c/core|constexpr}} for [[cpp/memory#Uninitialized memory algorithms|specialized memory algorithms]], {{vl|1}}}}

===Possible implementation===
{{eq fun|1=
struct uninitialized_copy_n_fn
{
    template&lt;std::input_iterator I, no-throw-input-iterator O, no-throw-sentinel-for&lt;O&gt; S&gt;
        requires std::constructible_from&lt;std::iter_value_t&lt;O&gt;, std::iter_reference_t&lt;I&gt;&gt;
    constexpr ranges::uninitialized_copy_n_result&lt;I, O&gt;
        operator()(I ifirst, std::iter_difference_t&lt;I&gt; count, O ofirst, S olast) const
    {
        auto iter = std::counted_iterator(std::move(ifirst), count);
        auto ret = ranges::uninitialized_copy(iter, std::default_sentinel, ofirst, olast);
        return {std::move(ret.in).base(), ret.out};
    }
};

inline constexpr uninitialized_copy_n_fn uninitialized_copy_n{};
}}

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;string&gt;

int main()
{
    const char* stars[]{"Procyon", "Spica", "Pollux", "Deneb", "Polaris"};
    
    constexpr int n{4};
    alignas(alignof(std::string)) char out[n * sizeof(std::string)];
    
    try
    {
        auto first{reinterpret_cast&lt;std::string*&gt;(out)};
        auto last{first + n};
        auto ret{std::ranges::uninitialized_copy_n(std::begin(stars), n, first, last)};
        
        std::cout &lt;&lt; '{';
        for (auto it{first}; it != ret.out; ++it)
            std::cout &lt;&lt; (it == first ? "" : ", ") &lt;&lt; std::quoted(*it);
        std::cout &lt;&lt; "};\n";
        
        std::ranges::destroy(first, last);
    }
    catch (...)
    {
        std::cout &lt;&lt; "uninitialized_copy_n exception\n";
    }
}
|output=
{"Procyon", "Spica", "Pollux", "Deneb"};
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_copy}}
{{dsc inc|cpp/memory/dsc uninitialized_copy_n}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/ranges/title|uninitialized_move|uninitialized_move_result}}
{{cpp/memory/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcl h|Call signature}}
{{dcla|num=1|since=c++20|constexpr=c++26|
template&lt; std::input_iterator I, std::sentinel_for&lt;I&gt; S1,
          no-throw-forward-iterator O, no-throw-sentinel-for&lt;O&gt; S2 &gt;
    requires std::constructible_from&lt;std::iter_value_t&lt;O&gt;,
                                     std::iter_rvalue_reference_t&lt;I&gt;&gt;
uninitialized_move_result&lt;I, O&gt;
    uninitialized_move( I ifirst, S1 ilast, O ofirst, S2 olast );
}}
{{dcla|num=2|since=c++20|constexpr=c++26|
template&lt; ranges::input_range IR, no-throw-forward-range OR &gt;
    requires std::constructible_from
                 &lt;ranges::range_value_t&lt;OR&gt;,
                  ranges::range_rvalue_reference_t&lt;IR&gt;&gt;
uninitialized_move_result&lt;ranges::borrowed_iterator_t&lt;IR&gt;,
                          ranges::borrowed_iterator_t&lt;OR&gt;&gt;
    uninitialized_move( IR&amp;&amp; in_range, OR&amp;&amp; out_range );
}}
{{dcl h|Helper types}}
{{dcl|num=3|since=c++20|1=
template&lt; class I, class O &gt;
using uninitialized_move_result = ranges::in_out_result&lt;I, O&gt;;
}}
{{dcl end}}

Let {{mathjax-or|\(\scriptsize N\)|N}} be {{c|ranges::min(ranges::distance(ifirst, ilast), ranges::distance(ofirst, olast))}}.

@1@ Copies {{mathjax-or|\(\scriptsize N\)|N}} elements from {{range|ifirst|ilast}} (using move semantics if supported) to an uninitialized memory area {{range|ofirst|olast}} as if by
{{box|
{{c/core|1=for (; ifirst != ilast &amp;&amp; ofirst != olast; ++ofirst, (void)++ifirst)}}&lt;br&gt;
{{nbspt|4}}{{c/core|::new (}}{{lti|cpp/memory/voidify}}{{c/core|(*ofirst))}}&lt;br&gt;
{{nbspt|8}}{{c/core|std::remove_reference_t&lt;std::iter_reference_t&lt;O&gt;&gt;(ranges::iter_move(ifirst));}}&lt;br&gt;
{{c/core|return {std::move(ifirst), ofirst};}}
}}
@@ If an exception is thrown during the initialization then the objects that already constructed in {{range|ofirst|olast}} are destroyed in an unspecified order. Also, the objects in {{range|ifirst|ilast}} that were already moved, are left in a valid but unspecified state.

@2@ Equivalent to {{c multi|return ranges::uninitialized_move(ranges::begin(in_range), ranges::end(in_range),|                                  ranges::begin(out_range), ranges::end(out_range));}}.

{{cpp/ranges/niebloid}}

===Parameters===
{{par begin}}
{{par|ifirst, ilast|iterator-sentinel pair denoting the input range of elements to move from}}
{{par|in_range|the input range of elements to move from}}
{{par|ofirst, olast|iterator-sentinel pair denoting the output range to initialize}}
{{par|out_range|the output range to initialize}}
{{par end}}

===Return value===
As described above.

===Complexity===
Linear in {{mathjax-or|\(\scriptsize N\)|N}}.

===Exceptions===
Any exception thrown on construction of the elements in the destination range.

===Notes===
An implementation may improve the efficiency of the {{tt|ranges::uninitialized_move}}, e.g. by using {{lc|ranges::copy_n}}, if the value type of the output range is {{named req|TrivialType}}.

{{feature test macro|__cpp_lib_raw_memory_algorithms|std=C++26|value=202411L|{{c/core|constexpr}} for [[cpp/memory#Uninitialized memory algorithms|specialized memory algorithms]], {{vl|1,2}}}}

===Possible implementation===
{{eq fun|1=
struct uninitialized_move_fn
{
    template&lt;std::input_iterator I, std::sentinel_for&lt;I&gt; S1,
             no-throw-forward-iterator O, no-throw-sentinel-for&lt;O&gt; S2&gt;
        requires std::constructible_from&lt;std::iter_value_t&lt;O&gt;,
                                         std::iter_rvalue_reference_t&lt;I&gt;&gt;
    constexpr ranges::uninitialized_move_result&lt;I, O&gt;
        operator()(I ifirst, S1 ilast, O ofirst, S2 olast) const
    {
        using ValueType = std::remove_reference_t&lt;std::iter_reference_t&lt;O&gt;&gt;;
        O current{ofirst};
        try
        {
            for (; !(ifirst == ilast or current == olast); ++ifirst, ++current)
                ::new (static_cast&lt;void*&gt;(std::addressof(*current))))
                    ValueType(ranges::iter_move(ifirst));
            return {std::move(ifirst), std::move(current)};
        }
        catch (...) // rollback: destroy constructed elements
        {
            for (; ofirst != current; ++ofirst)
                ranges::destroy_at(std::addressof(*ofirst));
            throw;
        }
    }
    
    template&lt;ranges::input_range IR, no-throw-forward-range OR&gt;
        requires std::constructible_from&lt;ranges::range_value_t&lt;OR&gt;,
                                         ranges::range_rvalue_reference_t&lt;IR&gt;&gt;
    constexpr ranges::uninitialized_move_result&lt;ranges::borrowed_iterator_t&lt;IR&gt;,
                                                ranges::borrowed_iterator_t&lt;OR&gt;&gt;
        operator()(IR&amp;&amp; in_range, OR&amp;&amp; out_range) const
    {
        return (*this)(ranges::begin(in_range), ranges::end(in_range),
                       ranges::begin(out_range), ranges::end(out_range));
    }
};

inline constexpr uninitialized_move_fn uninitialized_move{};
}}

===Example===
{{example
|code=
#include &lt;cstdlib&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;string&gt;

void print(auto rem, auto first, auto last)
{
    for (std::cout &lt;&lt; rem; first != last; ++first)
        std::cout &lt;&lt; std::quoted(*first) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::string in[]{"Home", "World"};
    print("initially, in: ", std::begin(in), std::end(in));
    
    if (constexpr auto sz = std::size(in);
        void* out = std::aligned_alloc(alignof(std::string), sizeof(std::string) * sz))
    {
        try
        {
            auto first{static_cast&lt;std::string*&gt;(out)};
            auto last{first + sz};
            std::ranges::uninitialized_move(std::begin(in), std::end(in), first, last);
            
            print("after move, in: ", std::begin(in), std::end(in));
            print("after move, out: ", first, last);
            
            std::ranges::destroy(first, last);
        }
        catch (...)
        {
            std::cout &lt;&lt; "Exception!\n";
        }
        std::free(out);
    }
}
|p=true&lt;!-- move results are indeterminate --&gt;
|output=
initially, in: "Home" "World"
after move, in: "" ""
after move, out: "Home" "World"
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3870|std=C++20|before=this algorithm might create objects on a {{c/core|const}} storage|after=kept disallowed}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_move_n}}
{{dsc inc|cpp/memory/dsc uninitialized_move}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
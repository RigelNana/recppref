{{cpp/ranges/title|destroy_n}}
{{cpp/memory/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcl h|Call signature}}
{{dcl|since=c++20|
template&lt; no-throw-input-iterator I &gt;
    requires std::destructible&lt;std::iter_value_t&lt;I&gt;&gt;
constexpr I destroy_n( I first, std::iter_difference_t&lt;I&gt; n ) noexcept;
}}
{{dcl end}}

Destroys the {{c|n}} objects in the range starting at {{c|first}}, equivalent to
{{source|1=
return std::ranges::destroy(std::counted_iterator(first, n), std::default_sentinel).base();
}}

{{cpp/ranges/niebloid}}

===Parameters===
{{par begin}}
{{par|first|the beginning of the range of elements to destroy}}
{{par|n|the number of elements to destroy}}
{{par end}}

===Return value===
The end of the range of objects that has been destroyed.

===Complexity===
Linear in {{c|n}}.

===Possible implementation===
{{eq fun|1=
struct destroy_n_fn
{
    template&lt;no-throw-input-iterator I&gt;
        requires std::destructible&lt;std::iter_value_t&lt;I&gt;&gt;
    constexpr I operator()(I first, std::iter_difference_t&lt;I&gt; n) const noexcept
    {
        for (; n != 0; (void)++first, --n)
            std::ranges::destroy_at(std::addressof(*first));
        return first;
    }
};

inline constexpr destroy_n_fn destroy_n{};
}}

===Example===
{{cpp/memory/destroy example|ranges::destroy_n}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/ranges/dsc destroy_at}}
{{dsc inc|cpp/memory/ranges/dsc destroy}}
{{dsc inc|cpp/memory/dsc destroy_n}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
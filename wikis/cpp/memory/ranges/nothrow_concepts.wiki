{{title|''no-throw-input-iterator'', ''no-throw-forward-iterator'', ''no-throw-sentinel-for'', ''no-throw-input-range'', ''no-throw-forward-range''}}
{{cpp/memory/navbar}}
{{dcl begin}}
{{dcl|num=1|notes={{mark expos}}|1=
template&lt; class I &gt;
concept no-throw-input-iterator =
    std::input_iterator&lt;I&gt; &amp;&amp;
    std::is_lvalue_reference_v&lt;std::iter_reference_t&lt;I&gt;&gt; &amp;&amp;
    std::same_as&lt;std::remove_cvref_t&lt;std::iter_reference_t&lt;I&gt;&gt;, std::iter_value_t&lt;I&gt;&gt;;
}}
{{dcl|num=2|notes={{mark expos}}|1=
template&lt; class I &gt;
concept no-throw-forward-iterator =
    no-throw-input-iterator&lt;I&gt; &amp;&amp;
    std::forward_iterator&lt;I&gt; &amp;&amp;
    no-throw-sentinel-for&lt;I, I&gt;;
}}
{{dcl|num=3|notes={{mark expos}}|1=
template&lt; class S, class I &gt;
concept no-throw-sentinel-for = std::sentinel_for&lt;S, I&gt;;
}}
{{dcl|num=4|notes={{mark expos}}|1=
template&lt; class R &gt;
concept no-throw-input-range =
    ranges::range&lt;R&gt; &amp;&amp;
    no-throw-input-iterator&lt;ranges::iterator_t&lt;R&gt;&gt; &amp;&amp;
    no-throw-sentinel-for&lt;ranges::sentinel_t&lt;R&gt;, ranges::iterator_t&lt;R&gt;&gt;;
}}
{{dcl|num=5|notes={{mark expos}}|1=
template&lt; class R &gt;
concept no-throw-forward-range =
    no-throw-input-range&lt;R&gt; &amp;&amp;
    no-throw-forward-iterator&lt;ranges::iterator_t&lt;R&gt;&gt;;
}}
{{dcl end}}

These exposition-only concepts specify that no exceptions are thrown from operations required by algorithms on iterators, sentinels, and ranges.

@1@ The {{tt|''no-throw-input-iterator''}} concept requires that dereferencing the iterator yields an lvalue, like {{lconcept|contiguous_iterator}} and {{named req|ForwardIterator}}.

===Semantic requirements===
Like all standard concepts, every concept listed here is modeled only if all concepts it subsumes are modeled.

@1@ A type {{tt|I}} models {{tt|''no-throw-input-iterator''}} only if no exceptions are thrown from increment, copy construction, move construction, copy assignment, move assignment, or indirection through valid iterators.

@3@ Types {{tt|S}} and {{tt|I}} model {{tt|''no-throw-sentinel-for''}} only if no exceptions are thrown from copy construction, move construction, copy assignment, move assignment, or comparisons between valid values of type {{tt|I}} and {{tt|S}}.

@4@ A type {{tt|R}} models {{tt|''no-throw-input-range''}} only if no exceptions are thrown from calls to {{c|ranges::begin}} and {{c|ranges::end}} on an object of type {{tt|R}}.

===Notes===
These concepts allow some operations on iterators and sentinels to throw exceptions, e.g. operations on invalid values.

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc input_iterator}}
{{dsc inc|cpp/iterator/dsc forward_iterator}}
{{dsc inc|cpp/iterator/dsc sentinel_for}}
{{dsc inc|cpp/ranges/dsc input_range}}
{{dsc inc|cpp/ranges/dsc forward_range}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
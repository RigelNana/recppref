{{cpp/title|uninitialized_construct_using_allocator}}
{{cpp/memory/navbar}}
{{ddcl|header=memory|since=c++20|
template&lt; class T, class Alloc, class... Args &gt;
constexpr T* uninitialized_construct_using_allocator( T* p,
                                                      const Alloc&amp; alloc,
                                                      Args&amp;&amp;... args );
}}

Creates an object of the given type {{tt|T}} by means of {{rlp|uses allocator|uses-allocator construction}} at the uninitialized memory location indicated by {{c|p}}.

Equivalent to 
{{source|1=
return std::apply(
    [&amp;]&lt;class... Xs&gt;(Xs&amp;&amp;...xs)
    {
        return std::construct_at(p, std::forward&lt;Xs&gt;(xs)...);
    },
    std::uses_allocator_construction_args&lt;T&gt;(alloc, std::forward&lt;Args&gt;(args)...));
}}

===Parameters===
{{par begin}}
{{par|p|the memory location where the object will be placed}}
{{par|alloc|the allocator to use}}
{{par|args|the arguments to pass to T's constructor}}
{{par end}}

===Return value===
Pointer to the newly-created object of type {{tt|T}}.

===Exceptions===
May throw any exception thrown by the constructor of {{tt|T}}, typically including {{lc|std::bad_alloc}}.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc uses_allocator}}
{{dsc inc|cpp/memory/dsc make_obj_using_allocator}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/title|uninitialized_value_construct}}
{{cpp/memory/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcla|num=1|since=c++17|constexpr=c++26|
template&lt; class NoThrowForwardIt &gt;
void uninitialized_value_construct( NoThrowForwardIt first,
                                    NoThrowForwardIt last );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class NoThrowForwardIt &gt;
void uninitialized_value_construct( ExecutionPolicy&amp;&amp; policy,
                                    NoThrowForwardIt first,
                                    NoThrowForwardIt last );
}}
{{dcl end}}

@1@ Constructs objects of type {{c/core|typename std::iterator_traits&lt;NoThrowForwardIt&gt;::value_type}} in the uninitialized memory area {{range|first|last}} by [[cpp/language/value initialization|value-initialization]], as if by
{{box|
{{c/core|1=for (; first != last; ++first)}}&lt;br&gt;
{{nbspt|4}}{{c/core|::new (}}{{rlpi|voidify}}{{c/core|(*first))}}&lt;br&gt;
{{nbspt|8}}{{c/core|typename std::iterator_traits&lt;NoThrowForwardIt&gt;::value_type();}}
}}
@@ If an exception is thrown during the initialization, the objects already constructed are destroyed in an unspecified order.

@2@ Same as {{v|1}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition}}

===Parameters===
{{par begin}}
{{par|first, last|the range of the elements to initialize}}
{{par exec pol}}
{{par hreq}}
{{par req named|NoThrowForwardIt|ForwardIterator}}
{{par req|No increment, assignment, comparison, or indirection through valid instances of {{tt|NoThrowForwardIt}} may throw exceptions.}}
{{par end}}

===Complexity===
Linear in the distance between {{c|first}} and {{c|last}}.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=yes}}

===Notes===
{{feature test macro|__cpp_lib_raw_memory_algorithms|std=C++26|value=202411L|{{c/core|constexpr}} for [[cpp/memory#Uninitialized memory algorithms|specialized memory algorithms]], {{vl|1}}}}

===Possible implementation===
{{eq fun|1=
template&lt;class NoThrowForwardIt&gt;
constexpr void uninitialized_value_construct(NoThrowForwardIt first,
                                             NoThrowForwardIt last)
{
    using Value = typename std::iterator_traits&lt;NoThrowForwardIt&gt;::value_type;
    NoThrowForwardIt current = first;
    try
    {
        for (; current != last; ++current)
        {
            ::new (static_cast&lt;void*&gt;(std::addressof(*current))) Value();
        }
    }
    catch (...)
    {
        std::destroy(first, current);
        throw;
    }
}
}}

===Example===
{{example|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;string&gt;

int main()
{
    struct S { std::string m{"Default value"}; };
    
    constexpr int n{3};
    alignas(alignof(S)) unsigned char mem[n * sizeof(S)];
    
    try
    {
        auto first{reinterpret_cast&lt;S*&gt;(mem)};
        auto last{first + n};
        
        std::uninitialized_value_construct(first, last);
        
        for (auto it{first}; it != last; ++it)
            std::cout &lt;&lt; it-&gt;m &lt;&lt; '\n';
        
        std::destroy(first, last);
    }
    catch (...)
    {
        std::cout &lt;&lt; "Exception!\n";
    }
    
    // For scalar types, uninitialized_value_construct
    // zero-fills the given uninitialized memory area.
    int v[]{1, 2, 3, 4};
    for (const int i : v)
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    std::uninitialized_value_construct(std::begin(v), std::end(v));
    for (const int i : v)
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
Default value
Default value
Default value
1 2 3 4
0 0 0 0
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3870|std=C++20|before=this algorithm might create objects on a {{c/core|const}} storage|after=kept disallowed}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc uninitialized_value_construct_n}}
{{dsc inc|cpp/memory/dsc uninitialized_default_construct}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_value_construct}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
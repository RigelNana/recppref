{{cpp/title|bad_array_new_length}}
{{cpp/memory/new/navbar}}
{{ddcl|header=new|since=c++11|
class bad_array_new_length;
}}

{{tt|std::bad_array_new_length}} is the type of the object thrown as exceptions by the [[cpp/language/new|new-expressions]] to report invalid array lengths if

# Array length is negative,
# Total size of the new array would exceed implementation-defined maximum value,
# The number of initializer-clauses exceeds the number of elements to initialize.

Only the first array dimension may generate this exception; dimensions other than the first are constant expressions and are checked at compile time.

{{inheritance diagram/std-bad_array_new_length}}

===Member functions===
{{cpp/error/exception/member of derived|bad_array_new_length|std=c++11}}

{{cpp/memory/new/bad_alloc/inherit}}

{{cpp/error/exception/inherit}}

===Notes===
{{feature test macro|__cpp_lib_constexpr_exceptions|value=202411L|std=C++26|{{c/core|constexpr}} for exception types}}

===Example===
{{example
|Three conditions where {{tt|std::bad_array_new_length}} should be thrown:
|code=
#include &lt;climits&gt;
#include &lt;iostream&gt;
#include &lt;new&gt;

int main()
{
    try
    {
        int negative = -1;
        new int[negative];
    }
    catch (const std::bad_array_new_length&amp; e)
    {
        std::cout &lt;&lt; "1) " &lt;&lt; e.what() &lt;&lt; ": negative size\n";
    }
    
    try
    {
        int small = 1;
        new int[small]{1,2,3};
    }
    catch (const std::bad_array_new_length&amp; e)
    {
        std::cout &lt;&lt; "2) " &lt;&lt; e.what() &lt;&lt; ": too many initializers\n";
    }
    
    try
    {
        long large = LONG_MAX;
        new int[large][1000];
    } 
    catch (const std::bad_array_new_length&amp; e)
    {
        std::cout &lt;&lt; "3) " &lt;&lt; e.what() &lt;&lt; ": too large\n";
    }

    std::cout &lt;&lt; "End\n";
}
|p=true
|output=
1) std::bad_array_new_length: negative size
2) std::bad_array_new_length: too many initializers
3) std::bad_array_new_length: too large
End
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/new/dsc operator_new}}
{{dsc inc|cpp/memory/new/dsc bad_alloc}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
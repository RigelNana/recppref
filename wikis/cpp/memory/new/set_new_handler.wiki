{{cpp/title|set_new_handler}}
{{cpp/memory/new/navbar}}
{{dcl begin}}
{{dcl header|new}}
{{dcl rev multi|until1=c++11
|dcl1=
std::new_handler set_new_handler( std::new_handler new_p ) throw();
|dcl2=
std::new_handler set_new_handler( std::new_handler new_p ) noexcept;
}}
{{dcl end}}

Makes {{c|new_p}} the new global new-handler function and returns the previously installed new-handler.

The ''new-handler'' function is the function called by {{rlp|operator_new|allocation functions}} whenever a memory allocation attempt fails. Its intended purpose is one of three things:

@1@ make more memory available,

@2@ terminate the program (e.g. by calling {{lc|std::terminate}}),

@3@ throw exception of type {{lc|std::bad_alloc}} or derived from {{lc|std::bad_alloc}}.

The default implementation throws {{lc|std::bad_alloc}}. The user can install their own ''new-handler'', which may offer behavior different than the default one.

If ''new-handler'' returns, the allocation function repeats the previously-failed allocation attempt and calls the ''new-handler'' again if the allocation fails again. To end the loop, ''new-handler'' may call {{c|std::set_new_handler(nullptr)}}: if, after a failed allocation attempt, allocation function finds that  {{lc|std::get_new_handler}} returns a null pointer value, it will throw {{lc|std::bad_alloc}}.

At program startup, ''new-handler'' is a null pointer.

{{rrev|since=c++11|
This function is thread-safe. Every call to {{tt|std::set_new_handler}} ''synchronizes-with'' (see {{lc|std::memory_order}}) the subsequent {{tt|std::set_new_handler}} and {{lc|std::get_new_handler}} calls.
}}

===Parameters===
{{par begin}}
{{par|new_p|pointer to function of type {{lc|std::new_handler}}, or null pointer}}
{{par end}}

===Return value===
The previously-installed new handler, or a null pointer value if none was installed.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;new&gt;

void handler()
{
    std::cout &lt;&lt; "Memory allocation failed, terminating\n";
    std::set_new_handler(nullptr);
}

int main()
{
    std::set_new_handler(handler);
    try
    {
        while (true)
        {
            new int[1000'000'000ul]();
        }
    }
    catch (const std::bad_alloc&amp; e)
    {
        std::cout &lt;&lt; e.what() &lt;&lt; '\n';
    }
}
|p=true
|output=
Memory allocation failed, terminating
std::bad_alloc
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/new/dsc operator_new}}
{{dsc inc|cpp/memory/new/dsc get_new_handler}}
{{dsc inc|cpp/memory/new/dsc new_handler}}
{{dsc inc|cpp/memory/new/dsc bad_alloc}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
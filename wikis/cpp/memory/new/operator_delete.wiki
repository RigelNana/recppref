{{title|{{small|operator}} delete{{small|, operator}} delete[]}}
{{cpp/memory/new/navbar}}
{{dcl begin}}
{{dcl header|new}}
{{dcl h|replaceable usual deallocation functions}}
{{dcl rev multi|num=1|anchor=1|until1=c++11
|dcl1=void operator delete  ( void* ptr ) throw();
|dcl2=void operator delete  ( void* ptr ) noexcept;
}}
{{dcl rev multi|num=2|anchor=2|until1=c++11
|dcl1=void operator delete[]( void* ptr ) throw();
|dcl2=void operator delete[]( void* ptr ) noexcept;
}}
{{dcla|since=c++17|num=3|void operator delete  ( void* ptr, std::align_val_t al ) noexcept;}}
{{dcla|since=c++17|num=4|void operator delete[]( void* ptr, std::align_val_t al ) noexcept;}}
{{dcla|since=c++14|num=5|void operator delete  ( void* ptr, std::size_t sz ) noexcept;}}
{{dcla|since=c++14|num=6|void operator delete[]( void* ptr, std::size_t sz ) noexcept;}}
{{dcla|since=c++17|num=7|void operator delete  ( void* ptr, std::size_t sz,
                        std::align_val_t al ) noexcept;}}
{{dcla|since=c++17|num=8|void operator delete[]( void* ptr, std::size_t sz,
                        std::align_val_t al ) noexcept;}}
{{dcl h|replaceable placement deallocation functions}}
{{dcl rev multi|num=9|anchor=9|until1=c++11
|dcl1=void operator delete  ( void* ptr, const std::nothrow_t&amp; tag ) throw();
|dcl2=void operator delete  ( void* ptr, const std::nothrow_t&amp; tag ) noexcept;
}}
{{dcl rev multi|num=10|anchor=10|until1=c++11
|dcl1=void operator delete[]( void* ptr, const std::nothrow_t&amp; tag ) throw();
|dcl2=void operator delete[]( void* ptr, const std::nothrow_t&amp; tag ) noexcept;
}}
{{dcla|since=c++17|num=11|void operator delete  ( void* ptr, std::align_val_t al,
                        const std::nothrow_t&amp; tag ) noexcept;}}
{{dcla|since=c++17|num=12|void operator delete[]( void* ptr, std::align_val_t al,
                        const std::nothrow_t&amp; tag ) noexcept;}}
{{dcl h|non-allocating placement deallocation functions}}
{{dcl rev multi|num=13|anchor=13|until1=c++11
|dcl1=void operator delete  ( void* ptr, void* place ) throw();
|dcl2=void operator delete  ( void* ptr, void* place ) noexcept;
}}
{{dcl rev multi|num=14|anchor=14|until1=c++11
|dcl1=void operator delete[]( void* ptr, void* place ) throw();
|dcl2=void operator delete[]( void* ptr, void* place ) noexcept;
}}
{{dcl h|user-defined placement deallocation functions}}
{{dcla|num=15|void operator delete  ( void* ptr, args... );}}
{{dcla|num=16|void operator delete[]( void* ptr, args... );}}
{{dcl h|class-specific usual deallocation functions}}
{{dcla|num=17|void T::operator delete  ( void* ptr );}}
{{dcla|num=18|void T::operator delete[]( void* ptr );}}
{{dcla|since=c++17|num=19|void T::operator delete  ( void* ptr, std::align_val_t al );}}
{{dcla|since=c++17|num=20|void T::operator delete[]( void* ptr, std::align_val_t al );}}
{{dcla|num=21|void T::operator delete  ( void* ptr, std::size_t sz );}}
{{dcla|num=22|void T::operator delete[]( void* ptr, std::size_t sz );}}
{{dcla|since=c++17|num=23|void T::operator delete  ( void* ptr, std::size_t sz, std::align_val_t al );}}
{{dcla|since=c++17|num=24|void T::operator delete[]( void* ptr, std::size_t sz, std::align_val_t al );}}
{{dcl h|class-specific placement deallocation functions}}
{{dcla|num=25|void T::operator delete  ( void* ptr, args... );}}
{{dcla|num=26|void T::operator delete[]( void* ptr, args... );}}
{{dcl h|class-specific usual destroying deallocation functions}}
{{dcla|since=c++20|num=27|void T::operator delete( T* ptr, std::destroying_delete_t );}}
{{dcla|since=c++20|num=28|void T::operator delete( T* ptr, std::destroying_delete_t,
                         std::align_val_t al );}}
{{dcla|since=c++20|num=29|void T::operator delete( T* ptr, std::destroying_delete_t, std::size_t sz );}}
{{dcla|since=c++20|num=30|void T::operator delete( T* ptr, std::destroying_delete_t,
                         std::size_t sz, std::align_val_t al );}}
{{dcl end}}

Deallocates storage previously allocated by a matching {{lc|operator new}}. These deallocation functions are called by [[cpp/language/delete|delete-expressions]] and by [[cpp/language/new|new-expressions]] to deallocate memory after destructing (or failing to construct) objects with dynamic storage duration. They may also be called using regular function call syntax.

@1@ Called by [[cpp/language/delete|delete-expressions]] to deallocate storage previously allocated for a single object.
@@ The behavior of the standard library implementation of this function is undefined unless {{c|ptr}} is a null pointer or is a pointer previously obtained from the standard library implementation of {{c/core|operator new(std::size_t)}} or {{c/core|operator new(std::size_t, std::nothrow_t)}}.
@2@ Called by [[cpp/language/delete|delete[]-expressions]] to deallocate storage previously allocated for an array of objects.
@@ The behavior of the standard library implementation of this function is undefined unless {{c|ptr}} is a null pointer or is a pointer previously obtained from the standard library implementation of {{c/core|operator new[](std::size_t)}} or {{c/core|operator new[](std::size_t, std::nothrow_t)}}.
@3,4@ Same as {{v|1,2}}, except called if the alignment requirement exceeds {{c|__STDCPP_DEFAULT_NEW_ALIGNMENT__}}.
@5,6@ Called instead of {{v|1,2}} if a user-defined replacement is provided, except that it's unspecified whether {{v|1,2}} or {{v|5,6}} is called when deleting objects of incomplete type and arrays of non-class and trivially-destructible class types.{{mark unreviewed dr|cwg|1788}} A memory allocator can use the given size to be more efficient.
@@ The standard library implementations are identical to {{v|1,2}}.
@7,8@ Same as {{v|5,6}}, except called if the alignment requirement exceeds {{c|__STDCPP_DEFAULT_NEW_ALIGNMENT__}}.

@9@ Called by the non-throwing single-object [[cpp/language/new|new-expressions]] if a constructor of the object throws an exception.
@@ The standard library implementation behaves the same as {{v|1}}.
@10@ Called by the non-throwing array [[cpp/language/new|new[]-expressions]] if a constructor of any object throws an exception (after executing the destructors of all objects in the array that were successfully constructed).
@@ The standard library implementation behaves the same as {{v|2}}.
@11,12@ Same as {{v|9,10}}, except called if the alignment requirement exceeds {{c|__STDCPP_DEFAULT_NEW_ALIGNMENT__}}.

@13@ Called by the standard single-object [[cpp/language/new|placement new]] expression if the object's constructor throws an exception.
@@ The standard library implementation of this function does nothing.
@14@ Called by the standard array form of the [[cpp/language/new|placement new[]&lt;!----&gt;]] expression if any of the objects' constructors throws an exception (after executing the destructors of all objects that were constructed successfully).
@@ The standard library implementation of this function does nothing.

@15@ If defined, called by the custom single-object [[cpp/language/new|placement new]] expression with the matching signature if the object's constructor throws an exception.
@@ If a class-specific version {{v|25}} is defined, it is called in preference to {{v|9}}.
@@ If neither {{v|25}} nor {{v|15}} is provided by the user, no deallocation function is called.
@16@ If defined, called by the custom array form of [[cpp/language/new|placement new[]&lt;!----&gt;]] expression with the matching signature if any of the objects' constructors throws an exception (after executing the destructors for all objects that were constructed successfully).
@@ If a class-specific version {{v|26}} is defined, it is called in preference to {{v|10}}.
@@ If neither {{v|26}} nor {{v|16}} is provided by the user, no deallocation function is called.

@17@ If defined, called by the usual single-object [[cpp/language/delete|delete-expressions]] if deallocating an object of type {{tt|T}}.
@18@ If defined, called by the usual array [[cpp/language/delete|delete[]-expressions]] if deallocating an array of objects of type {{tt|T}}.
@19,20@ If defined, called in preference to {{v|17,18}} if the alignment requirement exceeds {{c|__STDCPP_DEFAULT_NEW_ALIGNMENT__}}.

@21@ If defined, and if {{v|17}} is not defined, called by the usual single-object [[cpp/language/delete|delete-expressions]] if deallocating an object of type {{tt|T}}.
@22@ If defined, and if {{v|18}} is not defined, called by the usual array [[cpp/language/delete|delete[]-expressions]] if deallocating an array of objects of type {{tt|T}}.
@23,24@ If defined, and if {{v|19,20}} are not defined, called in preference to allocator-unaware members if the alignment requirement exceeds {{c|__STDCPP_DEFAULT_NEW_ALIGNMENT__}}.

@25@ If defined, called by the custom single-object [[cpp/language/new|placement new]] expression with the matching signature if the object's constructor throws an exception.
@@ If this function is not provided, and a matching {{v|15}} is not provided either, no deallocation function is called.
@26@ If defined, called by the custom array form of [[cpp/language/new|placement new[]&lt;!----&gt;]] expression with the matching signature if any of the objects' constructors throws an exception (after executing the destructors for all objects that were constructed successfully).
@@ If this function is not provided, and a matching {{v|16}} is not provided either, no deallocation function is called.

@27-30@ If defined, [[cpp/language/delete|delete-expressions]] does not execute the destructor for {{c|*p}} before placing a call to {{tt|operator delete}}. Instead, direct invocation of the destructor such as by {{c|p-&gt;~T();}} becomes the responsibility of this user-defined operator delete.

{{rrev|since=c++17|
See [[cpp/language/delete|delete-expression]] for exact details on the overload resolution rules between alignment-aware and alignment-unaware overloads of usual (non-placement) deallocation functions.
}}

In all cases, if {{c|ptr}} is a null pointer, the standard library deallocation functions do nothing. If the pointer passed to the standard library deallocation function was not obtained from the corresponding standard library allocation function, the behavior is undefined.

After the standard library deallocation function returns, all pointers referring to any part of the deallocated storage become invalid.

Indirection through a pointer that became invalid in this manner and passing it to a deallocation function (double-delete) is undefined behavior. Any other use is implementation-defined.

===Parameters===
{{par begin}}
{{par|ptr|pointer to a memory block to deallocate or a null pointer}}
{{par|sz|the size that was passed to the matching allocation function}}
{{par|place|pointer used as the placement parameter in the matching placement new}}
{{par|tag|overload disambiguation tag matching the tag used by non-throwing operator new}}
{{par|al|alignment of the object or array element that was allocated}}
{{par|args|arbitrary parameters matching a placement allocation function (may include {{lc|std::size_t}} and {{lc|std::align_val_t}})}}
{{par end}}

===Return value===
(none)

===Exceptions===
{{rrev|since=c++11|All deallocation functions are {{c/core|noexcept(true)}} unless specified otherwise in the declaration.}}
If a deallocation function terminates by throwing an exception, the behavior is undefined{{rev inl|since=c++11|, even if it is declared with {{c/core|noexcept(false)}}}}.

===Global replacements===
The replaceable deallocation functions {{v|1-12|1}} are implicitly declared in each translation unit even if the {{header|new}} header is not included. These functions are ''replaceable'': a user-provided non-member function with the same signature defined anywhere in the program, in any source file, replaces the corresponding implicit version for the entire program. Its declaration does not need to be visible.

The program is ill-formed, no diagnostic required if more than one replacement is provided in the program or if a replacement is declared with the [[cpp/language/inline|{{tt|inline}} specifier]]&lt;!-- LWG 2340 --&gt;. The program is ill-formed if a replacement is defined in namespace other than global namespace, or if it is defined as a static non-member function at global scope.

The standard library implementations of the nothrow versions {{v|9,10|9}} directly call the corresponding throwing versions {{v|1,2|1}}. The standard library implementations of the size-aware deallocation functions {{v|5-8|5}} directly call the corresponding size-unaware deallocation functions {{v|1-4|1}}. The standard library implementations of size-unaware throwing array forms {{v|2,4|2}} directly calls the corresponding single-object forms {{v|1,3|1}}. Thus, replacing the throwing single object deallocation functions {{v|1,3|1}} is sufficient to handle all deallocations.

{{cpp/memory/new/minimal replacement example}}

Overloads of {{tt|operator delete}} and {{tt|operator delete[]}} with additional user-defined parameters ("placement forms", {{v|15,16|15}}) may be declared at global scope as usual, and are called by the matching placement forms of ''new-expressions'' if a constructor of the object that is being allocated throws an exception.

The standard library placement forms of {{tt|operator delete}} {{v|13,14|13}} cannot be replaced and can only be customized if the placement new-expression did not use the {{c/core|::new}} syntax, by providing a class-specific placement delete {{v|25,26|25}} with matching signature: {{c/core|void T::operator delete(void*, void*)}} or {{c/core|void T::operator delete[](void*, void*)}}.

===Class-specific overloads===
Deallocation functions {{v|17-24|17}} may be defined as static member functions of a class. These deallocation functions, if provided, are called by [[cpp/language/delete|delete-expressions]] when deleting objects {{v|17,19,21|17}} and arrays {{v|18,20,22|18}} of this class, unless the delete expression used the form {{c/core|::delete}} which bypasses class-scope lookup. The keyword {{c/core|static}} is optional for these function declarations: whether the keyword is used or not, the deallocation function is always a static member function.

The delete expression looks for appropriate deallocation function's name starting from the class scope (array form looks in the scope of the array element class) and proceeds to the global scope if no members are found as usual. Note, that as per [[cpp/language/lookup|name lookup rules]], any deallocation functions declared in class scope hides all global deallocation functions.

If the static type of the object that is being deleted differs from its dynamic type (such as when deleting a [[cpp/language/object|polymorphic]] object through a pointer to base), and if the destructor in the static type is virtual, the single object form of delete begins lookup of the deallocation function's name starting from the point of definition of the final overrider of its virtual destructor. Regardless of which deallocation function would be executed at run time, the statically visible version of operator delete must be accessible in order to compile. In other cases, when deleting an array through a pointer to base, or when deleting through pointer to base with non-virtual destructor, the behavior is undefined.

If the single-argument overload {{v|17,18|17}} is not provided, but the size-aware overload taking {{lc|std::size_t}} as the second parameter {{v|21,22|21}} is provided, the size-aware form is called for normal deallocation, and the C++ runtime passes the size of the object to be deallocated as the second argument. If both forms are defined, the size-unaware version is called.

{{example
|code=
#include &lt;cstddef&gt;
#include &lt;iostream&gt;

// sized class-specific deallocation functions
struct X
{
    static void operator delete(void* ptr, std::size_t sz)
    {
        std::cout &lt;&lt; "custom delete for size " &lt;&lt; sz &lt;&lt; '\n';
        ::operator delete(ptr);
    }
    
    static void operator delete[](void* ptr, std::size_t sz)
    {
        std::cout &lt;&lt; "custom delete for size " &lt;&lt; sz &lt;&lt; '\n';
        ::operator delete[](ptr);
    }
};

int main()
{
    X* p1 = new X;
    delete p1;
    
    X* p2 = new X[10];
    delete[] p2;
}
|p=true
|output=
custom delete for size 1
custom delete for size 18
}}

Overloads of {{tt|operator delete}} and {{tt|operator delete[]}} with additional user-defined parameters ("placement forms", {{v|25,26|25}}) may also be defined as class members. When the failed placement new expression looks for the corresponding placement delete function to call, it begins lookup at class scope before examining the global scope, and looks for the function with the signature matching the placement new:

{{example
|code=
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
 
struct X
{
    X() { throw std::runtime_error("X(): std::runtime_error"); }
 
    // custom placement new
    static void* operator new(std::size_t sz, bool b)
    {
        std::cout &lt;&lt; "custom placement new called, b = " &lt;&lt; b &lt;&lt; '\n';
        return ::operator new(sz);
    }
 
    // custom placement delete
    static void operator delete(void* ptr, bool b)
    {
        std::cout &lt;&lt; "custom placement delete called, b = " &lt;&lt; b &lt;&lt; '\n';
        ::operator delete(ptr);
    }
};

int main()
{
    try
    {
        [[maybe_unused]] X* p1 = new (true) X;
    }
    catch (const std::exception&amp; ex)
    {
        std::cout &lt;&lt; ex.what() &lt;&lt; '\n';
    }
}
|output=
custom placement new called, b = 1
custom placement delete called, b = 1
X(): std::runtime_error
}}

If class-level {{tt|operator delete}} is a template function, it must have the return type of {{c/core|void}}, the first argument {{c/core|void*}}, and it must have two or more parameters. In other words, only placement forms can be templates. A template instance is never a usual deallocation function, regardless of its signature. The specialization of the template operator delete is chosen with [[cpp/language/template argument deduction|template argument deduction]].

===Notes===
The call to the class-specific {{c/core|T::operator delete}} on a polymorphic class is the only case where a static member function is called through dynamic dispatch.

If the behavior of a deallocation function does not satisfy the default constraints, the behavior is undefined.

{{cpp/memory/thread safety note}}
{{ftm begin|std=1|comment=1|sort=1}}
{{ftm|std=C++14|value=201309L|__cpp_sized_deallocation|Sized deallocation}}
{{ftm|std=C++20|value=201806L|__cpp_impl_destroying_delete|Destroying operator delete (compiler support)}}
{{ftm|std=C++20|value=201806L|__cpp_lib_destroying_delete|Destroying operator delete (library support)}}
{{ftm end}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=cwg|dr=220|std=C++98|before=user-defined deallocation functions were permitted to throw|after=throwing from a deallocation function&lt;br&gt;results in undefined behavior}}
{{dr list item|wg=cwg|dr=1438|std=C++98|before=any use of an invalid pointer value was undefined behavior|after=only indirection and deallocation are}}
{{dr list item|wg=lwg|dr=206|std=C++98|before=replacing (2) did not affect the default behavior of (10)|after=the default behavior changes accordingly}}
{{dr list item|wg=lwg|dr=298|std=C++98|before=replacing (1) did not affect the default behavior of (9)|after=the default behavior changes accordingly}}
&lt;!-- The resolution of LWG 298 actually made the default behavior of (10) dependent on (9) (which depends on (1)) instead of (2), the resolution of LWG 206 was applied later and fixed it. --&gt;
{{dr list item|wg=lwg|dr=404|std=C++98|before=replacements of the replaceable deallocation&lt;br&gt;functions could be declared {{c/core|inline}}|after=prohibited, no diagnostic required}}
{{dr list item|wg=lwg|dr=2458|std=C++14|before=overloads taking {{c/core|(void*, std::size_t, const}}&lt;br&gt;{{c/core|std::nothrow_t&amp;)}} were specified, but could never be called|after=removed spurious overloads}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/coroutine/generator/promise_type/dsc operator delete}}
{{dsc inc|cpp/memory/new/dsc operator new}}
{{dsc inc|cpp/memory/dsc return_temporary_buffer}}
{{dsc inc|cpp/memory/c/dsc free}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
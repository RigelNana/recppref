{{cpp/memory/pmr/title|set_default_resource}}
{{cpp/memory/navbar}}
{{ddcl|header=memory_resource|since=c++17|
std::pmr::memory_resource* set_default_resource( std::pmr::memory_resource* r ) noexcept;
}}

If {{c|r}} is not null, sets the default memory resource pointer to {{c|r}}; otherwise, sets the default memory resource pointer to {{c|std::pmr::new_delete_resource()}}.

The ''default memory resource pointer'' is used by certain facilities when an explicit memory resource is not supplied. The initial default memory resource pointer is the return value of {{lc|std::pmr::new_delete_resource}}.

This function is thread-safe. Every call to {{tt|std::pmr::set_default_resource}} ''synchronizes with'' (see {{lc|std::memory_order}}) the subsequent {{tt|std::pmr::set_default_resource}} and {{lc|std::pmr::get_default_resource}} calls.

===Return value===
Returns the previous value of the default memory resource pointer.

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;cstddef&gt;
#include &lt;cstdint&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;memory_resource&gt;
#include &lt;vector&gt;

class noisy_allocator : public std::pmr::memory_resource
{
    void* do_allocate(std::size_t bytes, std::size_t alignment) override
    {
        std::cout &lt;&lt; "+ Allocating " &lt;&lt; bytes &lt;&lt; " bytes @ ";
        void* p = std::pmr::new_delete_resource()-&gt;allocate(bytes, alignment);
        std::cout &lt;&lt; p &lt;&lt; '\n';
        return p;
    }

    void do_deallocate(void* p, std::size_t bytes, std::size_t alignment) override
    {
        std::cout &lt;&lt; "- Deallocating " &lt;&lt; bytes &lt;&lt; " bytes @ " &lt;&lt; p &lt;&lt; '\n';
        return std::pmr::new_delete_resource()-&gt;deallocate(p, bytes, alignment);
    }

    bool do_is_equal(const std::pmr::memory_resource&amp; other) const noexcept override
    {
        return std::pmr::new_delete_resource()-&gt;is_equal(other);
    }
};

int main()
{
    constexpr int push_back_limit{16};
    noisy_allocator mem;
    std::pmr::set_default_resource(&amp;mem);

    {
        std::cout &lt;&lt; "Entering scope #1 (without buffer on stack)...\n";
        std::cout &lt;&lt; "Creating vector v...\n";
        std::pmr::vector&lt;std::uint16_t&gt; v{1, 2, 3, 4};
        std::cout &lt;&lt; "v.data() @ " &lt;&lt; v.data() &lt;&lt; '\n';

        std::cout &lt;&lt; "Requesting more...\n";
        for (int i{0}; i != push_back_limit; ++i)
        {
            v.push_back(i);
            std::cout &lt;&lt; "v.size(): " &lt;&lt; v.size() &lt;&lt; '\n';
        }
        std::cout &lt;&lt; "Exiting scope #1...\n";
    }

    std::cout &lt;&lt; '\n';

    {
        std::cout &lt;&lt; "Entering scope #2 (with buffer on stack)...\n";

        std::uint8_t buffer[16];
        std::cout &lt;&lt; "Allocating buffer on stack: " &lt;&lt; sizeof buffer &lt;&lt; " bytes @ "
                  &lt;&lt; static_cast&lt;void*&gt;(buffer) &lt;&lt; '\n';
        std::pmr::monotonic_buffer_resource mem_res{std::data(buffer), std::size(buffer)};

        std::cout &lt;&lt; "Creating vector v...\n";
        std::pmr::vector&lt;std::uint16_t&gt; v{&lt;!----&gt;{1, 2, 3, 4}, &amp;mem_res&lt;!----&gt;};
        std::cout &lt;&lt; "v.data() @ " &lt;&lt; v.data() &lt;&lt; '\n'; // equals to `buffer` address

        std::cout &lt;&lt; "Requesting more...\n";
        for (int i{0}; i != push_back_limit; ++i)
        {
            v.push_back(i);
            std::cout &lt;&lt; "v.size(): " &lt;&lt; v.size() &lt;&lt; '\n';
        }
        std::cout &lt;&lt; "Exiting scope #2...\n";
    }
}
|p=true
|output=
Entering scope #1 (without buffer on stack)...
Creating vector v...
+ Allocating 8 bytes @ 0x1f75c30
v.data() @ 0x1f75c30
Requesting more...
+ Allocating 16 bytes @ 0x1f75c50
- Deallocating 8 bytes @ 0x1f75c30
v.size(): 5
v.size(): 6
v.size(): 7
v.size(): 8
+ Allocating 32 bytes @ 0x1f75c70
- Deallocating 16 bytes @ 0x1f75c50
v.size(): 9
v.size(): 10
v.size(): 11
v.size(): 12
v.size(): 13
v.size(): 14
v.size(): 15
v.size(): 16
+ Allocating 64 bytes @ 0x1f75ca0
- Deallocating 32 bytes @ 0x1f75c70
v.size(): 17
v.size(): 18
v.size(): 19
v.size(): 20
Exiting scope #1...
- Deallocating 64 bytes @ 0x1f75ca0

Entering scope #2 (with buffer on stack)...
Allocating buffer on stack: 16 bytes @ 0x7fffbe9f8240
Creating vector v...
v.data() @ 0x7fffbe9f8240
Requesting more...
+ Allocating 64 bytes @ 0x1f75ca0
v.size(): 5
v.size(): 6
v.size(): 7
v.size(): 8
v.size(): 9
v.size(): 10
v.size(): 11
v.size(): 12
v.size(): 13
v.size(): 14
v.size(): 15
v.size(): 16
+ Allocating 128 bytes @ 0x1f75cf0
v.size(): 17
v.size(): 18
v.size(): 19
v.size(): 20
Exiting scope #2...
- Deallocating 128 bytes @ 0x1f75cf0
- Deallocating 64 bytes @ 0x1f75ca0
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc get_default_resource}}
{{dsc inc|cpp/memory/dsc new_delete_resource}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
{{cpp/title|owner_hash}}
{{cpp/memory/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcl|since=c++26|
struct owner_hash;
}}
{{dcl end}}

This function object provides owner-based (as opposed to value-based) hashing of both {{lc|std::weak_ptr}} and {{lc|std::shared_ptr}}.

===Nested types===
{{dsc begin}}
{{dsc hitem|Nested type|Definition}}
{{dsc|{{tt|is_transparent}}|[[cpp/utility/functional#Transparent function objects|unspecified]]}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc fun|cpp/memory/owner_hash|title=operator()|inlinemem=true|calculates the hash of the shared-ownership pointer}}
{{dsc end}}

{{member|{{small|std::owner_hash::}}operator()|
{{dcl begin}}
{{dcl|since=c++26|num=1|
template&lt; class T &gt;
std::size_t operator()( const std::shared_ptr&lt;T&gt;&amp; key ) const noexcept;
}}
{{dcl|since=c++26|num=2|
template&lt; class T &gt;
std::size_t operator()( const std::weak_ptr&lt;T&gt;&amp; key ) const noexcept;
}}
{{dcl end}}

Equivalent to {{c|return key.owner_hash();}}.

===Parameters===
{{par begin}}
{{par|key|shared-ownership pointer to be hashed}}
{{par end}}

===Return value===
A hash value that is identical for any {{lc|std::shared_ptr}} or {{lc|std::weak_ptr}} object sharing the same ownership.
}}

===Notes===
{{feature test macro|__cpp_lib_smart_ptr_owner_equality|Enabling the use of {{tt|std::shared_ptr}} and {{tt|std::weak_ptr}} as keys in {{lsd|cpp/container#Unordered associative containers}}|std=C++26|value=202306L}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/shared_ptr/dsc owner_hash}}
{{dsc inc|cpp/memory/weak_ptr/dsc owner_hash}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
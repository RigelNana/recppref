{{cpp/memory/enable_shared_from_this/title|shared_from_this}}
{{cpp/memory/enable_shared_from_this/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|
std::shared_ptr&lt;T&gt; shared_from_this();
}}
{{dcl|num=2|since=c++11|
std::shared_ptr&lt;T const&gt; shared_from_this() const;
}}
{{dcl end}}

Returns a {{c/core|std::shared_ptr&lt;T&gt;}} that shares ownership of {{c|*this}} with all existing {{c/core|std::shared_ptr}} that refer to {{c|*this}}.

===Return value===
{{box|{{c/core|std::shared_ptr&lt;T&gt;(}}{{rlpsi|/#weak_this}}{{sep}}{{c/core|)}}}}

===Exceptions===
If {{tt|shared_from_this}} is called on an object that is not previously shared by {{lc|std::shared_ptr}}, {{lc|std::bad_weak_ptr}} is thrown by the {{lc|std::shared_ptr}} constructor.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;

struct Foo : public std::enable_shared_from_this&lt;Foo&gt;
{
    Foo() { std::cout &lt;&lt; "Foo::Foo\n"; }
    ~Foo() { std::cout &lt;&lt; "Foo::~Foo\n"; } 
    std::shared_ptr&lt;Foo&gt; getFoo() { return shared_from_this(); }
};

int main()
{
    Foo *f = new Foo;
    std::shared_ptr&lt;Foo&gt; pf1;
    
    {
        std::shared_ptr&lt;Foo&gt; pf2(f);
        pf1 = pf2-&gt;getFoo(); // shares ownership of object with pf2
    }
    
    std::cout &lt;&lt; "pf2 is gone\n";   
}
|output=
Foo::Foo
pf2 is gone
Foo::~Foo
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc shared_ptr}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/memory/enable_shared_from_this/title|operator{{=}}}}
{{cpp/memory/enable_shared_from_this/navbar}}
{{dcl begin}}
{{dcl|since=c++11|1= 
enable_shared_from_this&amp; operator=( const enable_shared_from_this &amp;rhs ) noexcept;
}}
{{dcl end}}

Does nothing; returns {{c|*this}}.

===Parameters===
{{par begin}}
{{par|rhs|another {{tt|enable_shared_from_this}} to assign to {{c|*this}}}}
{{par end}} 

===Return value===
{{c|*this}}

===Notes===
{{rlpsi|/#weak_this}} is not affected by the assignment.

===Example===
Note: {{c|1=enable_shared_from_this::operator=}} is defined as {{tt|protected}} in order to prevent accidental slicing but allow derived classes to have default assignment operators.
{{example
|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;
 
class SharedInt : public std::enable_shared_from_this&lt;SharedInt&gt;
{
public:
    explicit SharedInt(int n) : mNumber(n) {}
    SharedInt(const SharedInt&amp;) = default;
    SharedInt(SharedInt&amp;&amp;) = default;
    ~SharedInt() = default;
    
    // Both assignment operators use enable_shared_from_this::operator=
    SharedInt&amp; operator=(const SharedInt&amp;) = default;
    SharedInt&amp; operator=(SharedInt&amp;&amp;) = default;
    
    int number() const { return mNumber; }
    
private:
    int mNumber;
};
 
int main()
{
    std::shared_ptr&lt;SharedInt&gt; a = std::make_shared&lt;SharedInt&gt;(2);
    std::shared_ptr&lt;SharedInt&gt; b = std::make_shared&lt;SharedInt&gt;(4);
    *a = *b;
    
    std::cout &lt;&lt; a-&gt;number() &lt;&lt; '\n';
}
|output=
4
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc shared_ptr}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|raw_storage_iterator}}
{{cpp/memory/raw_storage_iterator/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcl rev begin}}
{{dcl|until=c++17|1=
template&lt; class OutputIt, class T &gt;
class raw_storage_iterator
    : public std::iterator&lt;std::output_iterator_tag, void, void, void, void&gt;;
}}
{{dcl|since=c++17|deprecated=c++17|removed=c++20|1=
template&lt; class OutputIt, class T &gt;
class raw_storage_iterator;
}}
{{dcl rev end}}
{{dcl end}}

The output iterator {{tt|std::raw_storage_iterator}} makes it possible for standard algorithms to store results in uninitialized memory. Whenever the algorithm writes an object of type {{tt|T}} to the dereferenced iterator, the object is copy-constructed into the location in the uninitialized storage pointed to by the iterator. The template parameter {{tt|OutputIt}} is any type that meets the requirements of {{named req|OutputIterator}} and has {{c|operator*}} defined to return an object, for which {{c|operator&amp;}} returns an object of type {{tt|T*}}. Usually, the type {{tt|T*}} is used as {{tt|OutputIt}}.

===Type requirements===
{{par begin}}
{{par req named|OutputIt|OutputIterator}}
{{par end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/memory/raw_storage_iterator/dsc constructor}}
{{dsc inc|cpp/memory/raw_storage_iterator/dsc operator{{=}}}}
{{dsc inc|cpp/memory/raw_storage_iterator/dsc operator*}}
{{dsc inc|cpp/memory/raw_storage_iterator/dsc operator_arith}}
{{dsc inc|cpp/memory/raw_storage_iterator/dsc base}}
{{dsc end}}

{{cpp/iterator/iterator/inherit|std::output_iterator_tag|void|void|void|void}}

===Note===
{{tt|std::raw_storage_iterator}} was deprecated primarily because of its exception-unsafe behavior. Unlike {{lc|std::uninitialized_copy}}, it doesn't handle exceptions during operations like {{lc|std::copy}} safely, potentially leading to resource leaks due to a lack of tracking the number of successfully constructed objects and their proper destruction in the presence of exceptions.

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;string&gt;

int main()
{
    const std::string s[] = {"This", "is", "a", "test", "."};
    std::string* p = std::allocator&lt;std::string&gt;().allocate(5);
 
    std::copy(std::begin(s), std::end(s),
              std::raw_storage_iterator&lt;std::string*, std::string&gt;(p));
 
    for (std::string* i = p; i != p + 5; ++i)
    {
        std::cout &lt;&lt; *i &lt;&lt; '\n';
        i-&gt;~basic_string&lt;char&gt;();
    }
    std::allocator&lt;std::string&gt;().deallocate(p, 5);
}
|output=
This
is
a
test
.
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc allocator_traits}}
{{dsc inc|cpp/memory/dsc scoped_allocator_adaptor}}
{{dsc inc|cpp/memory/dsc uses_allocator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
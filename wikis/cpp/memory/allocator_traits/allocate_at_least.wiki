{{cpp/memory/allocator_traits/title|allocate_at_least}}
{{cpp/memory/allocator_traits/navbar}}
{{ddcl|since=c++23|
static constexpr std::allocation_result&lt;pointer, size_type&gt;
    allocate_at_least( Alloc&amp; a, size_type n );
}}

{{tt|allocate_at_least}} calls {{c|a.allocate_at_least(n)}} and returns its result if the call is well-formed, otherwise, it is equivalent to {{c|return {a.allocate(n), n};}}.

{{tt|allocator_at_least}} tries to allocate a storage for at least {{c|n}} {{tt|value_type}} objects, and provides a fallback mechanism that allocates a storage for exact {{c|n}} objects.

===Parameters===
{{par begin}}
{{par|a|an allocator used for allocating storage}}
{{par|n|the lower bound of number of objects to allocate storage for}}
{{par end}}

===Return value===
{{c|a.allocate_at_least(n)}} if it is well-formed.

Otherwise, {{c|std::allocation_result&lt;pointer, size_type&gt;{a.allocate(n), n}&lt;!----&gt;}}.

===Exceptions===
Throws what and when the selected allocation function throws.

===Notes===
The {{tt|allocate_at_least}} member function of {{named req|Allocator}} types are mainly provided for contiguous containers, e.g. {{lc|std::vector}} and {{lc|std::basic_string}}, in order to reduce reallocation by making their capacity match the actually allocated size when possible. Because {{tt|allocate_at_least}} provides a fallback mechanism, it can be directly used where appropriate.

Given an allocator object {{c|a}} of type {{tt|Alloc}}, let {{c|result}} denote the value returned from {{c|std::allocator_traits&lt;Alloc&gt;::allocate_at_least(a, n)}}, the storage should be deallocated by {{c|a.deallocate(result.ptr, m)}} (typically called via {{c|std::allocator_traits&lt;Alloc&gt;::deallocate(a, result.ptr, m)}}) in order to avoid memory leak.

The argument {{c|m}} used in deallocation must be not less than {{c|n}} and not greater than {{c|result.count}}, otherwise, the behavior is undefined. Note that {{c|n}} is always equal to {{c|result.count}} if the allocator does not provide {{tt|allocate_at_least}}, which means that {{c|m}} is required to be equal to {{c|n}}.

{{feature test macro|__cpp_lib_allocate_at_least|std=C++23|value=202302L|{{ttt|allocate_at_least}} etc.}}

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/allocator/dsc allocate_at_least}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
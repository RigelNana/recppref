{{cpp/memory/allocator_traits/title|allocate}}
{{cpp/memory/allocator_traits/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcla|num=1|anchor=no|since=c++11|constexpr=c++20|
static pointer allocate( Alloc&amp; a, size_type n );
}}
{{dcla|num=2|anchor=no|since=c++11|constexpr=c++20|
static pointer allocate( Alloc&amp; a, size_type n, const_void_pointer hint );
}}
{{dcl end}}

Uses the allocator {{c|a}} to allocate {{c|n * sizeof(Alloc::value_type)}} bytes of uninitialized storage. An array of type {{c|Alloc::value_type[n]}} is created in the storage, but none of its elements are constructed.

@1@ Calls {{c|a.allocate(n)}}.

@2@ Additionally passes memory locality hint {{c|hint}}. Calls {{c|a.allocate(n, hint)}} if possible. If not possible (e.g. {{c|a}} has no two-argument member function {{tt|allocate}}), calls {{c|a.allocate(n)}}.

===Parameters===
{{par begin}}
{{par|a|allocator to use}}
{{par|n|the number of objects to allocate storage for}}
{{par|hint|pointer to a nearby memory location}}
{{par end}}

===Return value===
The pointer returned by the call to {{c|a.allocate(n)}}.

===Notes===
{{tt|Alloc::allocate}} was not required to create array object until {{wg21|P0593R6}}, which made using non-default allocator for {{lc|std::vector}} and some other containers not well-defined according to a strict reading of the core language specification.

After calling {{tt|allocate}} and before construction of elements, pointer arithmetic of {{c|Alloc::value_type*}} is well-defined within the allocated array, but the behavior is undefined if elements are accessed.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/allocator/dsc allocate}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
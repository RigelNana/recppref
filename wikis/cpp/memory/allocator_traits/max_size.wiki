{{cpp/memory/allocator_traits/title|max_size}}
{{cpp/memory/allocator_traits/navbar}}
{{ddcla|header=memory|since=c++11|constexpr=c++20|
static size_type max_size( const Alloc&amp; a ) noexcept;
}}

If possible, obtains the maximum theoretically possible allocation size from the allocator {{c|a}}, by calling {{c|a.max_size()}}.

If the above is not possible (e.g., {{tt|Alloc}} does not have the member function {{tt|max_size()}}), then returns {{c|std::numeric_limits&lt;size_type&gt;::max() / sizeof(value_type)}}.

===Parameters===
{{par begin}}
{{par|a|allocator to detect}}
{{par end}}

===Return value===
Theoretical maximum allocation size.

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2162|std=C++11|before={{tt|max_size}} was not required to be noexcept|after=required}}
{{dr list item|wg=lwg|dr=2466|std=C++11|before=theoretical maximum allocation size in bytes was returned as fallback|after=size in elements is returned}}
{{dr list end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;locale&gt;

int main()
{
    std::allocator&lt;short&gt; b;
    std::allocator&lt;int&gt; d;

    const auto p = std::allocator_traits&lt;decltype(b)&gt;::max_size(b);
    const auto q = std::allocator_traits&lt;decltype(d)&gt;::max_size(d);

    std::cout.imbue(std::locale("en_US.UTF-8"));
    std::cout &lt;&lt; std::uppercase
              &lt;&lt; "p = " &lt;&lt; std::dec &lt;&lt; p &lt;&lt; " = 0x" &lt;&lt; std::hex &lt;&lt; p &lt;&lt; '\n'
              &lt;&lt; "q = " &lt;&lt; std::dec &lt;&lt; q &lt;&lt; " = 0x" &lt;&lt; std::hex &lt;&lt; q &lt;&lt; '\n';
}
|p=true
|output=
p = 9,223,372,036,854,775,807 = 0x7,FFF,FFF,FFF,FFF,FFF
q = 4,611,686,018,427,387,903 = 0x3,FFF,FFF,FFF,FFF,FFF
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/allocator/dsc max_size}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/memory/allocator_traits/title|construct}}
{{cpp/memory/allocator_traits/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcla|since=c++11|constexpr=c++20|
template&lt; class T, class... Args &gt;
static void construct( Alloc&amp; a, T* p, Args&amp;&amp;... args );
}}
{{dcl end}}

If possible, constructs an object of type {{tt|T}} in allocated uninitialized storage pointed to by {{c|p}}, by calling
{{c|a.construct(p, std::forward&lt;Args&gt;(args)...)}}.

If the above is not possible (e.g. {{tt|Alloc}} does not have the member function {{tt|construct()}}), then calls
{{rrev multi
|until1=c++20|rev1={{c|::new (static_cast&lt;void*&gt;(p)) T(std::forward&lt;Args&gt;(args)...)}}
|rev2={{c|std::construct_at(p, std::forward&lt;Args&gt;(args)...)}}
}}

===Parameters===
{{par begin}}
{{par|a|allocator to use for construction}}
{{par|p|pointer to the uninitialized storage on which a {{tt|T}} object will be constructed}}
{{par|args...|the constructor arguments to pass to {{c|a.construct()}} or to {{rev inl|until=c++20|placement-new}}{{rev inl|since=c++20|{{lc|std::construct_at()}}}}}}
{{par end}}

===Return value===
(none)

===Notes===
This function is used by the standard library containers when inserting, copying, or moving elements.

Because this function provides the automatic fall back to placement new, the member function {{tt|construct()}} is an optional {{named req|Allocator}} requirement since C++11.

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/new/dsc operator_new}}
{{dsc inc|cpp/memory/allocator/dsc construct}}
{{dsc inc|cpp/memory/dsc construct_at}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
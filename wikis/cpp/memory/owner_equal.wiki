{{cpp/title|owner_equal}}
{{cpp/memory/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcl|since=c++26|
struct owner_equal;
}}
{{dcl end}}

This function object provides owner-based (as opposed to value-based) mixed-type equal comparison of both {{lc|std::weak_ptr}} and {{lc|std::shared_ptr}}. The comparison is such that two smart pointers compare equivalent only if they are both empty or if they share ownership, even if the values of the raw pointers obtained by {{tt|get()}} are different (e.g. because they point at different subobjects within the same object).

@1@ Owner-based mixed-type equal comparison is not provided for types other than {{lc|std::shared_ptr}} and {{lc|std::weak_ptr}}.

@2@ The owner-based mixed-type equal comparison of {{lc|std::shared_ptr}} and {{lc|std::weak_ptr}}.
@@ It is the preferred comparison predicate when building unordered associative containers with {{lc|std::shared_ptr}} and {{lc|std::weak_ptr}} as keys together with {{lc|std::owner_hash}}, that is, {{c/core|std::unordered_map&lt;std::shared_ptr&lt;T&gt;, U, std::owner_hash, std::owner_equal&gt;}} or {{c/core|std::unordered_map&lt;std::weak_ptr&lt;T&gt;, U, std::owner_hash, std::owner_equal&gt;}}.

@3@ {{tt|std::owner_equal}} deduces the parameter types from the arguments.

===Nested types===
{{dsc begin}}
{{dsc hitem|Nested type|Definition}}
{{dsc|{{tt|is_transparent}}|[[cpp/utility/functional#Transparent function objects|unspecified]]}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc fun|cpp/memory/owner_equal|title=operator()|inlinemem=true|compares its arguments using owner-based semantics}}
{{dsc end}}

{{member|{{small|std::owner_equal::}}operator()|
{{dcl begin}}
{{dcl|since=c++26| 
template&lt; class T, class U &gt;
bool operator()( const std::shared_ptr&lt;T&gt;&amp; lhs, 
                 const std::shared_ptr&lt;U&gt;&amp; rhs ) const noexcept;
}}
{{dcl|since=c++26|
template&lt; class T, class U &gt;
bool operator()( const std::shared_ptr&lt;T&gt;&amp; lhs, 
                 const std::weak_ptr&lt;U&gt;&amp; rhs ) const noexcept;
}}
{{dcl|since=c++26| 
template&lt; class T, class U &gt;
bool operator()( const std::weak_ptr&lt;T&gt;&amp; lhs, 
                 const std::shared_ptr&lt;U&gt;&amp; rhs ) const noexcept;
}}
{{dcl|since=c++26|
template&lt; class T, class U &gt;
bool operator()( const std::weak_ptr&lt;T&gt;&amp; lhs, 
                 const std::weak_ptr&lt;U&gt;&amp; rhs ) const noexcept;
}}
{{dcl end}}

Compares {{c|lhs}} and {{c|rhs}} using owner-based semantics. Effectively calls {{c|lhs.owner_equal(rhs)}}.

The equal comparison is an equivalence relation.

{{c|lhs}} and {{c|rhs}} are equivalent only if they are both empty or share ownership.

===Parameters===
{{par begin}}
{{par|lhs, rhs|shared-ownership pointers to compare}}
{{par end}}

===Return value===
{{c|true}} if {{c|lhs}} and {{c|rhs}} are both empty or share ownership as determined by the owner-based equal comparison, {{c|false}} otherwise.
}}

===Notes===
{{feature test macro|__cpp_lib_smart_ptr_owner_equality|Enabling the use of {{tt|std::shared_ptr}} and {{tt|std::weak_ptr}} as keys in {{lsd|cpp/container#Unordered associative containers}}|std=C++26|value=202306L}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/shared_ptr/dsc owner_equal}}
{{dsc inc|cpp/memory/weak_ptr/dsc owner_equal}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/memory/weak_ptr/title|weak_ptr}}
{{cpp/memory/weak_ptr/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|
constexpr weak_ptr() noexcept;
}}
{{dcl|num=2|since=c++11|
weak_ptr( const weak_ptr&amp; r ) noexcept;
}}
{{dcl|num=2|since=c++11|
template&lt; class Y &gt; 
weak_ptr( const weak_ptr&lt;Y&gt;&amp; r ) noexcept;
}}
{{dcl|num=2|since=c++11|
template&lt; class Y &gt; 
weak_ptr( const std::shared_ptr&lt;Y&gt;&amp; r ) noexcept;
}}
{{dcl|num=3|since=c++11|
weak_ptr( weak_ptr&amp;&amp; r ) noexcept;
}}
{{dcl|num=3|since=c++11|
template&lt; class Y &gt; 
weak_ptr( weak_ptr&lt;Y&gt;&amp;&amp; r ) noexcept;
}}
{{dcl end}}

Constructs new {{tt|weak_ptr}} that potentially shares an object with {{c|r}}.

@1@ Default constructor. Constructs empty {{tt|weak_ptr}}.
@2@ Constructs new {{tt|weak_ptr}} which shares an object managed by {{c|r}}. If {{c|r}} manages no object, {{c|*this}} manages no object too. The templated overloads don't participate in the overload resolution unless {{tt|Y*}} is implicitly convertible to {{tt|T*}}{{rev inl|since=c++17|, or {{tt|Y}} is the type "array of {{tt|N}} {{tt|U}}" for some type {{tt|U}} and some number {{tt|N}}, and {{tt|T}} is the type "array of unknown bound of (possibly cv-qualified) {{tt|U}}"}}.
@3@ Move constructors. Moves a weak_ptr instance from {{c|r}} into {{c|*this}}. After this, {{c|r}} is empty and {{c|1=r.use_count() == 0}}. The templated overload doesn't participate in the overload resolution unless {{tt|Y*}} is implicitly convertible to {{tt|T*}}.

===Parameters===
{{par begin}}
{{par|r|a {{lc|std::shared_ptr}} or {{lc|std::weak_ptr}} that will be viewed by this {{lc|std::weak_ptr}}}}
{{par end}} 

===Notes===
Because the default constructor is {{tt|constexpr}}, static {{lc|std::weak_ptr}}s are initialized as part of [[cpp/language/initialization#Non-local_variables|static non-local initialization]], before any dynamic non-local initialization begins. This makes it safe to use a {{lc|std::weak_ptr}} in a constructor of any static object.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;

struct Foo {};

int main()
{
    std::weak_ptr&lt;Foo&gt; w_ptr;

    {
        auto ptr = std::make_shared&lt;Foo&gt;();
        w_ptr = ptr;
        std::cout &lt;&lt; "w_ptr.use_count() inside scope: " &lt;&lt; w_ptr.use_count() &lt;&lt; '\n';
    }

    std::cout &lt;&lt; "w_ptr.use_count() out of scope: " &lt;&lt; w_ptr.use_count() &lt;&lt; '\n';
    std::cout &lt;&lt; "w_ptr.expired() out of scope: "
              &lt;&lt; std::boolalpha &lt;&lt; w_ptr.expired() &lt;&lt; '\n';
}
|output=
w_ptr.use_count() inside scope: 1
w_ptr.use_count() out of scope: 0
w_ptr.expired() out of scope: true
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2315|std=C++11|before=move semantic was not enabled for {{tt|weak_ptr}}|after=enabled}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/weak_ptr/dsc operator{{=}}}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
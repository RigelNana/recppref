{{cpp/memory/weak_ptr/title|lock}}
{{cpp/memory/weak_ptr/navbar}}
{{ddcl|since=c++11|
std::shared_ptr&lt;T&gt; lock() const noexcept;
}}

Creates a new {{lc|std::shared_ptr}} that shares ownership of the managed object. If there is no managed object, i.e. {{c|*this}} is empty, then the returned {{tt|shared_ptr}} also is empty.

Effectively returns {{c|expired() ? shared_ptr&lt;T&gt;() : shared_ptr&lt;T&gt;(*this)}}, executed atomically.

===Parameters===
(none)

===Return value===
A {{tt|shared_ptr}} which shares ownership of the owned object if {{lc|std::weak_ptr::expired}} returns {{c|false}}. Else returns default-constructed {{tt|shared_ptr}} of type {{tt|T}}.

===Notes===
Both this function and the constructor of {{lc|std::shared_ptr}} may be used to acquire temporary ownership of the managed object referred to by a {{tt|std::weak_ptr}}. The difference is that the constructor of {{lc|std::shared_ptr}} throws an exception when its {{tt|std::weak_ptr}} argument is empty, while {{lc|std::weak_ptr&lt;T&gt;::lock()}} constructs an empty {{lc|std::shared_ptr&lt;T&gt;}}.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;

void observe(std::weak_ptr&lt;int&gt; weak)
{
    if (auto p = weak.lock())
        std::cout &lt;&lt; "\tobserve() is able to lock weak_ptr&lt;&gt;, value=" &lt;&lt; *p &lt;&lt; '\n';
    else
        std::cout &lt;&lt; "\tobserve() is unable to lock weak_ptr&lt;&gt;\n";
}

int main()
{
    std::weak_ptr&lt;int&gt; weak;
    std::cout &lt;&lt; "weak_ptr&lt;&gt; is not yet initialized\n";
    observe(weak);
    
    {
        auto shared = std::make_shared&lt;int&gt;(42);
        weak = shared;
        std::cout &lt;&lt; "weak_ptr&lt;&gt; is initialized with shared_ptr\n";
        observe(weak);
    }

    std::cout &lt;&lt; "shared_ptr&lt;&gt; has been destructed due to scope exit\n";
    observe(weak);
}
|output=
weak_ptr&lt;&gt; is not yet initialized
        observe() is unable to lock weak_ptr&lt;&gt;
weak_ptr&lt;&gt; is initialized with shared_ptr
        observe() is able to lock weak_ptr&lt;&gt;, value=42
shared_ptr&lt;&gt; has been destructed due to scope exit
        observe() is unable to lock weak_ptr&lt;&gt;
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2316|std=C++11|before=lock() was not required to be atomic, but required to be noexcept, which led to a contradiction|after=specified to be atomic}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/weak_ptr/dsc expired}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/memory/weak_ptr/title|expired}}
{{cpp/memory/weak_ptr/navbar}}
{{ddcl|since=c++11|
bool expired() const noexcept;
}}

Equivalent to {{c|1=use_count() == 0}}. The destructor for the managed object may not yet have been called, but this object's destruction is imminent (or may have already happened).

===Parameters===
(none)

===Return value===
{{c|true}} if the managed object has already been deleted, {{c|false}} otherwise.

===Notes===
If the managed object is shared among threads, it is only meaningful when {{tt|expired()}} returns true.

===Example===
{{example
|Demonstrates how {{tt|expired}} is used to check validity of the pointer.
|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;

std::weak_ptr&lt;int&gt; gw;

void f()
{
    if (!gw.expired())
	std::cout &lt;&lt; "gw is valid\n";
    else
        std::cout &lt;&lt; "gw is expired\n";
}
 
int main()
{
    {
        auto sp = std::make_shared&lt;int&gt;(42);
	gw = sp;

	f();
    }

    f();
}
|output=
gw is valid
gw is expired
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/weak_ptr/dsc lock}}
{{dsc inc|cpp/memory/weak_ptr/dsc use_count}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
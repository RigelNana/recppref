{{cpp/memory/weak_ptr/title|operator{{=}}}}
{{cpp/memory/weak_ptr/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1=
weak_ptr&amp; operator=( const weak_ptr&amp; r ) noexcept;
}}
{{dcl|num=2|since=c++11|1=
template&lt; class Y &gt; 
weak_ptr&amp; operator=( const weak_ptr&lt;Y&gt;&amp; r ) noexcept;
}}
{{dcl|num=3|since=c++11|1=
template&lt; class Y &gt; 
weak_ptr&amp; operator=( const shared_ptr&lt;Y&gt;&amp; r ) noexcept;
}}
{{dcl|num=4|since=c++11|1=
weak_ptr&amp; operator=( weak_ptr&amp;&amp; r ) noexcept;
}}
{{dcl|num=5|since=c++11|1=
template&lt; class Y &gt; 
weak_ptr&amp; operator=( weak_ptr&lt;Y&gt;&amp;&amp; r ) noexcept;
}}
{{dcl end}}

Replaces the managed object with the one managed by {{c|r}}. The object is shared with {{c|r}}. If {{c|r}} manages no object, {{c|*this}} manages no object too. 

@1-3@ Equivalent to {{c|std::weak_ptr&lt;T&gt;(r).swap(*this)}}.
@4,5@ Equivalent to {{c|std::weak_ptr&lt;T&gt;(std::move(r)).swap(*this)}}.

===Parameters===
{{par begin}}
{{par|r|smart pointer to share an object with}}
{{par end}}

===Return value===
{{c|*this}}

===Notes===
The implementation may meet the requirements without creating a temporary {{tt|weak_ptr}} object.

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2315|std=C++11|before=move semantic was not enabled for {{tt|weak_ptr}}|after=enabled}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/weak_ptr/dsc constructor}}
{{dsc inc|cpp/memory/weak_ptr/dsc swap}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
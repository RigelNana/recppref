{{cpp/memory/pmr/title|synchronized_pool_resource}}
{{cpp/memory/synchronized_pool_resource/navbar}}
{{ddcl|header=memory_resource|since=c++17|
class synchronized_pool_resource : public std::pmr::memory_resource;
}}

The class {{tt|std::pmr::synchronized_pool_resource}} is a general-purpose memory resource class with the following properties:
* It owns the allocated memory and frees it on destruction, even if {{tt|deallocate}} has not been called for some of the allocated blocks.
* It consists of a collection of ''pools'' that serves requests for different block sizes. Each pool manages a collection of ''chunks'' that are then divided into blocks of uniform size. 
* Calls to {{ltt|cpp/memory/synchronized_pool_resource/do_allocate}} are dispatched to the pool serving the smallest blocks accommodating the requested size.
* Exhausting memory in the pool causes the next allocation request for that pool to allocate an additional chunk of memory from the ''upstream allocator'' to replenish the pool. The chunk size obtained increases geometrically.
* Allocations requests that exceed the largest block size are served from the ''upstream allocator'' directly.
* The largest block size and maximum chunk size may be tuned by passing a {{lc|std::pmr::pool_options}} struct to its constructor.

{{tt|synchronized_pool_resource}} may be accessed from multiple threads without external synchronization, and may have thread-specific pools to reduce synchronization costs. If the memory resource is only accessed from one thread, {{ltt|cpp/memory/unsynchronized_pool_resource}} is more efficient.

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/memory/synchronized_pool_resource/dsc constructor}}
{{dsc inc|cpp/memory/synchronized_pool_resource/dsc destructor}}
{{dsc inc|cpp/memory/synchronized_pool_resource/dsc operator{{=}}}}

{{dsc h2|Public member functions}}
{{dsc inc|cpp/memory/synchronized_pool_resource/dsc release}}
{{dsc inc|cpp/memory/synchronized_pool_resource/dsc upstream_resource}}
{{dsc inc|cpp/memory/synchronized_pool_resource/dsc options}}

{{dsc h2|Protected member functions}}
{{dsc inc|cpp/memory/synchronized_pool_resource/dsc do_allocate}}
{{dsc inc|cpp/memory/synchronized_pool_resource/dsc do_deallocate}}
{{dsc inc|cpp/memory/synchronized_pool_resource/dsc do_is_equal}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
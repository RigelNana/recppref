{{cpp/memory/auto_ptr/title|auto_ptr}}
{{cpp/memory/auto_ptr/navbar}}
{{dcl begin}}
{{dcl|deprecated=c++11|removed=c++17|num=1|1=
explicit auto_ptr( X* p = 0 ) throw();
}}
{{dcl|deprecated=c++11|removed=c++17|num=2|
auto_ptr( auto_ptr&amp; r ) throw();
}}
{{dcl|deprecated=c++11|removed=c++17|num=3|
template&lt; class Y &gt;
auto_ptr( auto_ptr&lt;Y&gt;&amp; r ) throw();
}}
{{dcl|deprecated=c++11|removed=c++17|num=4|
auto_ptr( auto_ptr_ref&lt;X&gt; m ) throw();
}}
{{dcl end}}

Constructs the {{tt|auto_ptr}} from a pointer that refers to the object to manage.

@1@ Constructs the {{tt|auto_ptr}} with pointer {{c|p}}.

@2@ Constructs the {{tt|auto_ptr}} with the pointer held in {{c|r}}. {{c|r.release()}} is called to acquire the ownership of the object.

@3@ Same as (2). {{c|Y*}} must be implicitly convertible to {{c|T*}}.

@4@ Constructs the {{tt|auto_ptr}} with the pointer held in the {{tt|auto_ptr}} instance referred to by {{c|m}}. {{c|p.release()}} is called for the {{tt|auto_ptr p}} that {{c|m}} holds to acquire the ownership of the object. 

@@ {{tt|auto_ptr_ref}} is an implementation-defined type that holds a reference to {{tt|auto_ptr}}. {{lc|std::auto_ptr}} is implicitly [[cpp/memory/auto_ptr/operator auto_ptr|convertible to]] and [[cpp/memory/auto_ptr/operator=|assignable from]] this type. The implementation is allowed to provide the template with a different name or implement equivalent functionality in other ways.

===Parameters===
{{par begin}}
{{par|p|a pointer to an object to manage}}
{{par|r|another {{tt|auto_ptr}} to transfer the ownership of the object from}}
{{par|m|an implementation-defined type that holds a reference to {{tt|auto_ptr}}}}
{{par end}}

===Notes===
{{cpp/memory/auto_ptr/auto_ptr_ref_note}}

{{langlinks|es|ja|ru|zh}}
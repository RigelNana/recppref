{{cpp/memory/auto_ptr/title|operator{{=}}}}
{{cpp/memory/auto_ptr/navbar}}
{{dcl begin}}
{{dcl|deprecated=c++11|removed=c++17|num=1|1=
auto_ptr&amp; operator=( auto_ptr&amp; r ) throw();
}}
{{dcl|deprecated=c++11|removed=c++17|num=2|1=
template&lt; class Y &gt;
auto_ptr&amp; operator=( auto_ptr&lt;Y&gt;&amp; r ) throw();
}}
{{dcl|deprecated=c++11|removed=c++17|num=3|1=
auto_ptr&amp; operator=( auto_ptr_ref&lt;T&gt; m ) throw();
}}
{{dcl end}}
 
Replaces the managed object with the one managed by {{c|r}} or {{c|m}}. 

@1@ Effectively calls {{c|reset(r.release())}}. 

@2@ Effectively calls {{c|reset(r.release())}}. {{tt|Y*}} must be implicitly convertible to {{tt|T*}}.

@3@ Effectively calls {{c|reset(m.release())}}. {{tt|auto_ptr_ref}} is an implementation-defined type that holds a reference to {{tt|auto_ptr}}. {{lc|std::auto_ptr}} is implicitly [[cpp/memory/auto_ptr/operator auto_ptr|convertible to]] and [[cpp/memory/auto_ptr/auto_ptr|from]] this type. The implementation is allowed to provide the template with a different name or implement equivalent functionality in other ways.

===Parameters===
{{par begin}}
{{par|r|another {{tt|auto_ptr}} to transfer the ownership of the object from}}
{{par|m|an object of implementation-defined type that holds a reference to {{tt|auto_ptr}}}}
{{par end}}

===Return value===
{{c|*this}}.

===Notes===
{{cpp/memory/auto_ptr/auto_ptr_ref_note}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=127|std=C++98|before={{tt|auto_ptr}} was not assignable from {{tt|auto_ptr_ref}}|after=added overload (3)}}
{{dr list end}}

{{langlinks|es|ja|ru|zh}}
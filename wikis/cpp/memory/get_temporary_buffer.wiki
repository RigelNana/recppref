{{cpp/title|get_temporary_buffer}}
{{cpp/memory/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcl|until=c++11|1=
template&lt; class T &gt;
std::pair&lt;T*, std::ptrdiff_t&gt;
    get_temporary_buffer( std::ptrdiff_t count );
}}
{{dcl|since=c++11|deprecated=c++17|removed=c++20|1=
template&lt; class T &gt;
std::pair&lt;T*, std::ptrdiff_t&gt;
    get_temporary_buffer( std::ptrdiff_t count ) noexcept;
}}
{{dcl end}}

If {{c|count}} is negative or zero, does nothing.

Otherwise, requests to allocate uninitialized contiguous storage for {{c|count}} adjacent objects of type {{tt|T}}. The request is non-binding, and the implementation may instead allocate the storage for any other number of (including zero) adjacent objects of type {{tt|T}}.

{{rrev|since=c++11|
It is implementation-defined whether [[cpp/language#object#Alignment|over-aligned]] types are supported.
}}

===Parameters===
{{par begin}}
{{par|count|the desired number of objects}}
{{par end}}

===Return value===
A {{lc|std::pair}}, the member {{tt|first}} is a pointer to the beginning of the allocated storage and the member {{tt|second}} is the number of objects that fit in the storage that was actually allocated.

If {{c|1=count &lt;= 0}} or allocated storage is not enough to store a single element of type {{tt|T}}, the member {{tt|first}} of the result is a null pointer and the member {{tt|second}} is zero.

===Notes===
This API was originally designed with the intent of providing a more efficient implementation than the general-purpose {{c/core|operator new}}, but no such implementation was created and the API was deprecated and removed.

===Example===
{{include|cpp/memory/example1}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=425|std=C++98|before=the behavior when {{c|1=count &lt;= 0}} was unclear|after=made clear}}
{{dr list item|wg=lwg|dr=2072|std=C++98|before=it was not allowed to allocate insufficient memory|after=allowed}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc return_temporary_buffer}}
{{dsc inc|cpp/memory/allocator_traits/dsc allocate_at_least}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
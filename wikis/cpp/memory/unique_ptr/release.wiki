{{cpp/memory/unique_ptr/title|release}}
{{cpp/memory/unique_ptr/navbar}}
{{ddcl | since=c++11 | notes={{mark|constexpr since C++23}} | 1=
pointer release() noexcept;
}}

Releases the ownership of the managed object, if any.

{{lc|get()}} returns {{c|nullptr}} after the call.

The caller is responsible for cleaning up the object (e.g. by use of {{lc|get_deleter()}}).

===Parameters===
(none)

===Return value===
Pointer to the managed object or {{c|nullptr}} if there was no managed object, i.e. the value which would be returned by {{lc|get()}} before the call.

===Example===
{{example |
 | code=
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;memory&gt;

struct Foo
{
    Foo() { std::cout &lt;&lt; "Foo\n"; }
    ~Foo() { std::cout &lt;&lt; "~Foo\n"; }
};

// Ownership of the Foo resource is transferred when calling this function
void legacy_api(Foo* owning_foo)
{
    std::cout &lt;&lt; __func__ &lt;&lt; '\n';
    // [legacy code that no one understands or dares touch anymore]
    // [...]
    delete owning_foo;
}

int main()
{
    std::unique_ptr&lt;Foo&gt; managed_foo(new Foo);
    // [code that might return or throw or some such]
    // [...]
    legacy_api(managed_foo.release());

    assert(managed_foo == nullptr);
}

 | output=
Foo
legacy_api
~Foo
}}

===See also===
{{dsc begin}}
{{dsc inc | cpp/memory/unique_ptr/dsc get}}
{{dsc inc | cpp/memory/unique_ptr/dsc get_deleter}}
{{dsc inc | cpp/memory/unique_ptr/dsc reset}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
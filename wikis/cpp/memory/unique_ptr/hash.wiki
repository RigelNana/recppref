{{cpp/title|hash&lt;small&gt;&lt;std::unique_ptr&gt;&lt;/small&gt;}}
{{cpp/memory/unique_ptr/navbar}}
{{ddcl|since=c++11|1=
template&lt; class T, class Deleter &gt;
struct hash&lt;std::unique_ptr&lt;T, Deleter&gt;&gt;;
}}

The template specialization of {{lc|std::hash}} for {{c|std::unique_ptr&lt;T, Deleter&gt;}} allows users to obtain hashes of objects of type {{c|std::unique_ptr&lt;T, Deleter&gt;}}.

The specialization {{c|std::hash&lt;std::unique_ptr&lt;T,D&gt;&gt;}} is enabled (see {{lc|std::hash}}) if {{c|std::hash&lt;typename std::unique_ptr&lt;T,D&gt;::pointer&gt;}} is enabled, and is disabled otherwise.

When enabled, for a given {{c|1=std::unique_ptr&lt;T, D&gt; p}}, this specialization ensures that
{{c|1=std::hash&lt;std::unique_ptr&lt;T, D&gt;&gt;()(p) == std::hash&lt;typename std::unique_ptr&lt;T, D&gt;::pointer&gt;()(p.get())}}.

The member functions of this specialization are not guaranteed to be noexcept because the pointer may be a fancy pointer and its hash might throw.

===Example===
{{example
|code=
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;memory&gt;
 
struct Foo
{
    Foo(int num) : nr(num) { std::cout &lt;&lt; "Foo(" &lt;&lt; nr &lt;&lt; ")\n"; }

    ~Foo() { std::cout &lt;&lt; "~Foo()\n"; }

    bool operator==(const Foo &amp;other) const { return nr == other.nr; };

    int nr;
};
 
int main()
{
    std::cout &lt;&lt; std::boolalpha &lt;&lt; std::hex;

    Foo* foo = new Foo(5);
    std::unique_ptr&lt;Foo&gt; up(foo); 
    std::cout &lt;&lt; "hash(up):    " &lt;&lt; std::hash&lt;std::unique_ptr&lt;Foo&gt;&gt;()(up) &lt;&lt; '\n'
              &lt;&lt; "hash(foo):   " &lt;&lt; std::hash&lt;Foo*&gt;()(foo) &lt;&lt; '\n'
              &lt;&lt; "*up==*foo:   " &lt;&lt; (*up == *foo) &lt;&lt; "\n\n";
 
    std::unique_ptr&lt;Foo&gt; other = std::make_unique&lt;Foo&gt;(5);
    std::cout &lt;&lt; "hash(up):    " &lt;&lt; std::hash&lt;std::unique_ptr&lt;Foo&gt;&gt;()(up) &lt;&lt; '\n'
              &lt;&lt; "hash(other): " &lt;&lt; std::hash&lt;std::unique_ptr&lt;Foo&gt;&gt;()(other) &lt;&lt; '\n'
              &lt;&lt; "*up==*other: " &lt;&lt;(*up == *other) &lt;&lt; "\n\n";
}
|p=true
|output=
Foo(5)
hash(up):    acac20
hash(foo):   acac20
*up==*foo:   true

Foo(5)
hash(up):    acac20
hash(other): acbc50
*up==*other: true

~Foo()
~Foo()
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc hash}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
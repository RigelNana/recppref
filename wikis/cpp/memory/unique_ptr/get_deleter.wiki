{{cpp/memory/unique_ptr/title|get_deleter}}
{{cpp/memory/unique_ptr/navbar}}
{{dcl begin}}
{{dcl|since=c++11|notes={{mark|constexpr since C++23}}|1=
Deleter&amp; get_deleter() noexcept;
}}
{{dcl|since=c++11|notes={{mark|constexpr since C++23}}|1=
const Deleter&amp; get_deleter() const noexcept;
}}
{{dcl end}}

Returns the deleter object which would be used for destruction of the managed object.

===Parameters===
(none)

===Return value===
The stored deleter object.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;

struct Foo
{
    Foo() { std::cout &lt;&lt; "Foo() 0x" &lt;&lt; std::hex &lt;&lt; (void*)this &lt;&lt; '\n'; }
    ~Foo() { std::cout &lt;&lt; "~Foo() 0x" &lt;&lt; std::hex &lt;&lt; (void*)this &lt;&lt; '\n'; }
};
 
struct D
{
    int number;

    void bar()
    {
        std::cout &lt;&lt; "call D::bar(), my number is: " &lt;&lt; std::dec &lt;&lt; number &lt;&lt; '\n';
    }

    void operator()(Foo* p) const
    {
        std::cout &lt;&lt; "call deleter for Foo object 0x" &lt;&lt; std::hex &lt;&lt; (void*)p &lt;&lt; '\n';
        delete p;
    }
};

int main()
{
    std::cout &lt;&lt; "main start\n";

    std::unique_ptr&lt;Foo, D&gt; up1(new Foo(), D(42));
    D&amp; del1 = up1.get_deleter();
    del1.bar();

    std::unique_ptr&lt;Foo, D&gt; up2(new Foo(), D(43));
    D&amp; del2 = up2.get_deleter();
    auto* released = up2.release();
    del2(released);

    std::cout &lt;&lt; "main end\n";
}
|output=
main start
Foo() 0x0x90cc30
call D::bar(), my number is: 42
Foo() 0x0x90cc50
call deleter for Foo object 0x0x90cc50
~Foo() 0x0x90cc50
main end
call deleter for Foo object 0x0x90cc30
~Foo() 0x0x90cc30
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/shared_ptr/dsc get_deleter}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
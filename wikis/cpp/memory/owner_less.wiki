{{cpp/title|owner_less}}
{{cpp/memory/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcl rev begin|num=1}}
{{dcl|since=c++11|until=c++17|
template&lt; class T &gt;
struct owner_less; /* undefined */
}}
{{dcl|since=c++17|1=
template&lt; class T = void &gt;
struct owner_less; /* undefined */
}}
{{dcl rev end}}
{{dcl|since=c++11|num=2|
template&lt; class T &gt;
struct owner_less&lt;std::shared_ptr&lt;T&gt;&gt;;
}}
{{dcl|since=c++11|num=3|
template&lt; class T &gt;
struct owner_less&lt;std::weak_ptr&lt;T&gt;&gt;;
}}
{{dcl|since=c++17|num=4|
template&lt;&gt;
struct owner_less&lt;void&gt;;
}}
{{dcl end}}

This function object provides owner-based (as opposed to value-based) mixed-type ordering of both {{lc|std::weak_ptr}} and {{lc|std::shared_ptr}}. The order is such that two smart pointers compare equivalent only if they are both empty or if they share ownership, even if the values of the raw pointers obtained by {{tt|get()}} are different (e.g. because they point at different subobjects within the same object).

@1@ Owner-based mixed-type ordering is not provided for types other than {{lc|std::shared_ptr}} and {{lc|std::weak_ptr}}.

@2@ The owner-based mixed-type ordering of {{lc|std::shared_ptr}}.
@@ It is the preferred comparison predicate when building associative containers with {{lc|std::shared_ptr}} as keys, that is, {{c/core|std::map&lt;std::shared_ptr&lt;T&gt;, U, std::owner_less&lt;std::shared_ptr&lt;T&gt;&gt;&gt;}}.

@3@ The owner-based mixed-type ordering of {{lc|std::weak_ptr}}.
@@ It is the preferred comparison predicate when building associative containers with {{lc|std::weak_ptr}} as keys, that is, {{c/core|std::map&lt;std::weak_ptr&lt;T&gt;, U, std::owner_less&lt;std::weak_ptr&lt;T&gt;&gt;&gt;}}.

@4@ The {{c/core|void}} specialization deduces the parameter types from the arguments.

The default {{c/core|operator&lt;}} is not defined for weak pointers, and may wrongly consider two shared pointers for the same object non-equivalent (see {{l2tt std|cpp/memory/shared_ptr/owner_before}}).

{{rrev|since=c++17|
===Specializations===
The standard library provides a specialization of {{tt|std::owner_less}} when {{tt|T}} is not specified. In this case, the parameter types are deduced from the arguments (each of which must still be either a {{lc|std::shared_ptr}} or a {{lc|std::weak_ptr}}).
{{dsc begin}}
{{dsc inc|cpp/memory/dsc owner_less_void}}
{{dsc end}}
}}


{{rrev|until=c++20|
===Nested types===
{{dsc begin}}
{{dsc hitem|Nested type|Definition}}
{{dsc|{{tt|result_type}} {{mark deprecated c++17}}|{{v|2,3}} {{c/core|bool}}}}
{{dsc|{{tt|first_argument_type}} {{mark deprecated c++17}}|{{v|2}} {{c/core|std::shared_ptr&lt;T&gt;}}&lt;br&gt;{{v|3}} {{c/core|std::weak_ptr&lt;T&gt;}}}}
{{dsc|{{tt|second_argument_type}} {{mark deprecated c++17}}|{{v|2}} {{c/core|std::shared_ptr&lt;T&gt;}}&lt;br&gt;{{v|3}} {{c/core|std::weak_ptr&lt;T&gt;}}}}
{{dsc end}}
}}

===Member functions===
{{dsc begin}}
{{dsc fun|cpp/memory/owner_less|title=operator()|inlinemem=true|compares its arguments using owner-based semantics}}
{{dsc end}}

{{member|{{small|std::owner_less::}}operator()|
{{dcl begin}}
{{dcl h|member only of specialization {{v|2}}}}
{{dcl|since=c++11|
bool operator()( const std::shared_ptr&lt;T&gt;&amp; lhs, 
                 const std::shared_ptr&lt;T&gt;&amp; rhs ) const noexcept;
}}
{{dcl h|member only of specialization {{v|3}}}}
{{dcl|since=c++11|
bool operator()( const std::weak_ptr&lt;T&gt;&amp; lhs, 
                 const std::weak_ptr&lt;T&gt;&amp; rhs ) const noexcept;
}}
{{dcl h|member of both template specializations}}
{{dcl|since=c++11|
bool operator()( const std::shared_ptr&lt;T&gt;&amp; lhs, 
                 const std::weak_ptr&lt;T&gt;&amp; rhs ) const noexcept;
}}
{{dcl|since=c++11|
bool operator()( const std::weak_ptr&lt;T&gt;&amp; lhs, 
                 const std::shared_ptr&lt;T&gt;&amp; rhs ) const noexcept;
}}
{{dcl end}}

Compares {{c|lhs}} and {{c|rhs}} using owner-based semantics. Effectively calls {{c|lhs.owner_before(rhs)}}.

The ordering is strict weak ordering relation.

{{c|lhs}} and {{c|rhs}} are equivalent only if they are both empty or share ownership.

===Parameters===
{{par begin}}
{{par|lhs, rhs|shared-ownership pointers to compare}}
{{par end}}

===Return value===
{{c|true}} if {{c|lhs}} is ''less than'' {{c|rhs}} as determined by the owner-based ordering, {{c|false}} otherwise.
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2873|std=C++11|before={{c/core|operator()}} was not required to be noexcept|after=required to be noexcept}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/shared_ptr/dsc owner_before}}
{{dsc inc|cpp/memory/weak_ptr/dsc owner_before}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/memory/polymorphic_allocator/title|new_object}}
{{cpp/memory/polymorphic_allocator/navbar}}

{{ddcl|since=c++20|
template&lt; class U, class... CtorArgs &gt;
U* new_object( CtorArgs&amp;&amp;... ctor_args );
}}

Allocates and constructs an object of type {{tt|U}}.

Given {{tt|alloc}} is a {{c|std::pmr::polymorphic_allocator&lt;T&gt;}}:
{{source|1=
U* p = alloc.new_object&lt;U&gt;(std::forward&lt;CtorArgs&gt;(ctor_args)...);
}}
is equivalent to 
{{source|1=
U* p = alloc.allocate_object&lt;U&gt;();
try
{
    alloc.construct(p, std::forward&lt;CtorArgs&gt;(ctor_args)...);
}
catch (...)
{
    alloc.deallocate_object(p);
    throw;
}
}}

===Parameters===
{{par begin}}
{{par|ctor_args|the arguments to forward to the constructor of {{tt|U}}}}
{{par end}}

===Return value===
A pointer to the allocated and constructed object. 

===Notes===
This function was introduced for use with the fully-specialized allocator {{c|std::pmr::polymorphic_allocator&lt;&gt;}}, but it may be useful in any specialization as a shortcut to avoid having to rebind from {{c|std::pmr::polymorphic_allocator&lt;T&gt;}} to {{c|std::pmr::polymorphic_allocator&lt;U&gt;}}, and having to call {{lc|allocate}}, {{lc|construct}}, and {{lc|deallocate}} individually.

Since {{tt|U}} is not deduced, it must be provided as a template argument when calling this function.

===Exceptions===
May throw any exceptions thrown by the call to {{c|allocate_object}} or the constructor of {{tt|U}}.

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc allocate_bytes}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc allocate_object}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc allocate}}
{{dsc inc|cpp/memory/allocator traits/dsc allocate}}
{{dsc inc|cpp/memory/memory resource/dsc allocate}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
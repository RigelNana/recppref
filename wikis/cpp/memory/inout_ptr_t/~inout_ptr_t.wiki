{{cpp/memory/inout_ptr_t/title|~inout_ptr_t}}
{{cpp/memory/inout_ptr_t/navbar}}
{{ddcl | since=c++23 |
~inout_ptr_t();
}}

Resets the adapted {{tt|Smart}} object by the value of modified {{tt|Pointer}} object (or the {{c|void*}} object if {{c|operator void**()}} has been called) and the captured arguments. {{c|release()}} may be called on the adapted {{tt|Smart}} object if it is not called by the constructor.

Let
* {{tt|s}} denotes the adapted {{tt|Smart}} object,
* {{tt|args...}} denotes the captured arguments,
* {{tt|p}} denotes the value of stored {{tt|Pointer}}, or {{c|static_cast&lt;Pointer&gt;(*operator void**())}} if {{c|operator void**}} has been called,
* {{tt|SP}} be
** {{c|Smart::pointer}}, if it is valid and denotes a type, otherwise,
** {{c|Smart::element_type*}}, if {{c|Smart::element_type}} is valid and denotes a type, otherwise,
** {{c|std::pointer_traits&lt;Smart&gt;::element_type*}}, if {{c|std::pointer_traits&lt;Smart&gt;::element_type}} is valid and denotes a type, otherwise,
** {{tt|Pointer}},
* {{c|/*do-release*/}} denotes {{c|s.release()}} if the {{rlp|inout_ptr_t|constructor}} does not call {{c|release()}}, empty otherwise.

If {{tt|Smart}} is a pointer type, the destructor performs
:{{c|1=s = static_cast&lt;Smart&gt;(p);}}, and the program is ill-formed if {{c|sizeof...(Args) &gt; 0}};
otherwise, if {{c|s.reset(static_cast&lt;SP&gt;(p), std::forward&lt;Args&gt;(args)...)}} is well-formed, the destructor performs
:{{c|/*do-release*/; if (p) { s.reset(static_cast&lt;SP&gt;(p), std::forward&lt;Args&gt;(args)...); } }};
otherwise, if {{c|std::is_constructible_v&lt;Smart, SP, Args...&gt;}} is {{c|true}}, the destructor performs
:{{c|1=/*do-release*/; if (p) { s = Smart(static_cast&lt;SP&gt;(p), std::forward&lt;Args&gt;(args)...); } }};
otherwise, the program is ill-formed.

===Notes===
The implementation may allocate the storage for the data structure needed for {{tt|Smart}} (e.g. a control block) on construction, in order to leave non-throwing works to the destructor.

Arguments captured by value are destroyed after resetting.

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3897|std=C++23|before=the destructor did not update a raw pointer to the null value|after=it does}}
{{dr list end}}

{{langlinks|es|ja|ru|zh}}
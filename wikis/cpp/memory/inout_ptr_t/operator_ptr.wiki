{{cpp/memory/inout_ptr_t/title|operator Pointer*|operator void**}}
{{cpp/memory/inout_ptr_t/navbar}}
{{dcl begin}}
{{dcl | num=1 | since=c++23 |
operator Pointer*() const noexcept;
}}
{{dcl | num=2 | since=c++23 |
operator void**() const noexcept;
}}
{{dcl end}}

Exposes the address of a {{tt|Pointer}} or {{c|void*}} object to a foreign function which will generally release the ownership represented by its value and then re-initialize it.

@1@ Converts {{c|*this}} to the address of stored {{tt|Pointer}} object.

@2@ Converts {{c|*this}} to the address of a {{c|void*}} object. This conversion function participates in overload resolution only if {{tt|Pointer}} is not same as {{c|void*}}, and the program is ill-formed if {{tt|Pointer}} is not a pointer type.&lt;br&gt;The initial value of the {{c|void*}} object is equal the value of the stored {{tt|Pointer}} object converted to {{c|void*}}, and any modification to it affects the {{tt|Pointer}} value used in the {{rlp|~inout_ptr_t|destructor}}. Accessing the {{c|void*}} object outside the lifetime of {{c|*this}} has undefined behavior.

Once one of these two conversion functions has been called on an {{tt|inout_ptr_t}} object, the other shall not be called on it, otherwise, the behavior is undefined.

===Parameters===
(none)

===Return value===
@1@ The address of stored {{tt|Pointer}} object.

@2@ The address of the {{c|void*}} object that satisfies aforementioned requirements.

===Notes===
If the object pointed by the return value has not been rewritten, it is equal to the value held by adapted {{tt|Smart}} object before construction.

On common implementations, the object representation of every {{tt|Pointer}} that is a pointer type is compatible with that of {{c|void*}}, and therefore these implementations typically store the {{c|void*}} object within the storage for the {{tt|Pointer}} object, no additional storage needed:
* If the implementation enables type-based alias analysis (which relies on the [[cpp/language/reinterpret_cast#Type aliasing|strict aliasing rule]]), a properly aligned {{c|std::byte[sizeof(void*)]}} member subobject may be used, and both conversion functions return the address of objects [[cpp/language/object#Object creation|implicitly created]] within the array.
* Otherwise, a {{tt|Pointer}} member subobject may be used for both conversion functions, and {{v|2}} may directly returns its address {{ltt|cpp/language/reinterpret_cast}} to {{c|void**}}.

If {{tt|Pointer}} is a pointer type whose object representation is incompatible with that of {{c|void*}}, an additional {{c|bool}} flag may be needed for recording whether {{v|1}} (or {{v|2}}) has been called.

===Example===
{{example}}

{{langlinks|es|ja|ru|zh}}
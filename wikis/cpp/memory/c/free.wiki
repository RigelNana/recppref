{{cpp/title|free}}
{{cpp/memory/navbar}}
{{ddcl|header=cstdlib|
void free( void* ptr );
}}

Deallocates the space previously allocated by {{lc|std::malloc}}, {{lc|std::calloc}}{{rev inl|since=c++17|, {{lc|std::aligned_alloc}}}}, or {{lc|std::realloc}}.

If {{c|ptr}} is a null pointer, the function does nothing.

The behavior is undefined if the value of {{c|ptr}} does not equal a value returned earlier by {{lc|std::malloc}}, {{lc|std::calloc}}{{rev inl|since=c++17|, {{lc|std::aligned_alloc}}}}, or {{lc|std::realloc}}.

The behavior is undefined if the memory area referred to by {{c|ptr}} has already been deallocated, that is, {{tt|std::free}} or {{lc|std::realloc}} has already been called with {{c|ptr}} as the argument and no calls to {{lc|std::malloc}}, {{lc|std::calloc}}{{rev inl|since=c++17|, {{lc|std::aligned_alloc}}}}, or {{lc|std::realloc}} resulted in a pointer equal to {{c|ptr}} afterwards.

The behavior is undefined if after {{tt|std::free}} returns, an access is made through the pointer {{c|ptr}} (unless another allocation function happened to result in a pointer value equal to {{c|ptr}}).

{{cpp/memory/thread_safety_note}}

===Parameters===
{{par begin}}
{{par|ptr|pointer to the memory to deallocate}}
{{par end}}

===Return value===
(none)

===Notes===
The function accepts (and does nothing with) the null pointer to reduce the amount of special-casing. Whether allocation succeeds or not, the pointer returned by an allocation function can be passed to {{tt|std::free}}.

===Example===
{{example|code=
#include &lt;cstdlib&gt;

int main()
{
    int* p1 = (int*)std::malloc(10 * sizeof *p1);
    std::free(p1); // every allocated pointer must be freed

    int* p2 = (int*)std::calloc(10, sizeof *p2);
    int* p3 = (int*)std::realloc(p2, 1000 * sizeof *p3);
    if (!p3) // p3 null means realloc failed and p2 must be freed.
        std::free(p2);
    std::free(p3); // p3 can be freed whether or not it is null.
}
}}

===See also===
{{dsc begin}}
{{dsc see c|c/memory/free}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
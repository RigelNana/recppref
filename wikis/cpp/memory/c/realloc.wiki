{{cpp/title|realloc}}
{{cpp/memory/navbar}}
{{ddcl|header=cstdlib|
void* realloc( void* ptr, std::size_t new_size );
}}

Reallocates the given area of memory ([[cpp/language/object#Object creation|implicitly creating]] objects in the destination area). It must be previously allocated by {{lc|std::malloc}}, {{lc|std::calloc}} or {{tt|std::realloc}} and not yet freed with {{lc|std::free}}, otherwise, the results are undefined.

The reallocation is done by either:
@a@ expanding or contracting the existing area pointed to by {{c|ptr}}, if possible. The contents of the area remain unchanged up to the lesser of the new and old sizes. If the area is expanded, the contents of the new part of the array are undefined.
@b@ allocating a new memory block of size {{c|new_size}} bytes, copying memory area with size equal the lesser of the new and the old sizes, and freeing the old block.

If there is not enough memory, the old memory block is not freed and null pointer is returned.

If {{c|ptr}} is a null pointer, the behavior is the same as calling {{c|std::malloc(new_size)}}.

If {{c|new_size}} is zero, the behavior is implementation defined: null pointer may be returned (in which case the old memory block may or may not be freed) or some non-null pointer may be returned that may not be used to access storage. {{rev inl|since=c++20|Such usage is deprecated (via {{stddoc|n2396.htm#dr_400|C DR 400|lang=c}}).}}

{{cpp/memory/thread_safety_note}}

===Parameters===
{{par begin}}
{{par|ptr|pointer to the memory area to be reallocated}}
{{par|new_size|new size of the array}}
{{par end}}

===Return value===
On success, returns a pointer to the beginning of newly allocated memory. To avoid a memory leak, the returned pointer must be deallocated with {{lc|std::free}} or {{tt|std::realloc}}. The original pointer {{c|ptr}} is invalidated and any access to it is [[cpp/language/ub|undefined behavior]] (even if reallocation was in-place).

On failure, returns a null pointer. The original pointer {{c|ptr}} remains valid and may need to be deallocated with {{lc|std::free}}.

===Notes===
Because reallocation may involve bytewise copying (regardless of whether it expands or contracts the area), it is necessary (but not sufficient) for those objects to be of {{named req|TriviallyCopyable}} type.

Some non-standard libraries define a type trait "BitwiseMovable" or "Relocatable", which describes a type that does not have:
* external references (e.g. nodes of a list or a tree that holds reference to another element), and
* internal references (e.g. member pointer which might hold the address of another member).

Objects of such type can be accessed after their storage is reallocated even if their copy constructors are not trivial.

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;cstdlib&gt;
#include &lt;new&gt;

class MallocDynamicBuffer
{
    char* p;
public:
    explicit MallocDynamicBuffer(std::size_t initial = 0) : p(nullptr)
    {
        resize(initial);
    }
    
    ~MallocDynamicBuffer() { std::free(p); }
    
    void resize(std::size_t newSize)
    {
        if (newSize == 0) // this check is not strictly needed,
        {
            std::free(p); // but zero-size realloc is deprecated in C
            p = nullptr;
        }
        else
        {
            if (void* mem = std::realloc(p, newSize))
                p = static_cast&lt;char*&gt;(mem);
            else
                throw std::bad_alloc();
        }
    }

    char&amp; operator[](size_t n) { return p[n]; }
    char operator[](size_t n) const { return p[n]; }
};

int main()
{
    MallocDynamicBuffer buf1(1024);
    buf1[5] = 'f';
    buf1.resize(10); // shrink
    assert(buf1[5] == 'f');
    buf1.resize(1024); // grow
    assert(buf1[5] == 'f');
}
}}

===See also===
{{dsc begin}}
{{dsc see c|c/memory/realloc}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
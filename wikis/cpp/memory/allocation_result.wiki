{{cpp/title|allocation_result}}
{{cpp/memory/navbar}}
{{ddcl|header=memory|since=c++23|1=
template&lt; class Pointer, class SizeType = std::size_t &gt;
struct allocation_result;
}}

{{tt|allocation_result}} specializations are returned from the {{tt|allocate_at_least}} member function of appropriate {{named req|Allocator}} types (e.g. {{ltt|cpp/memory/allocator/allocate_at_least|std::allocator::allocate_at_least}}) and {{ltt|cpp/memory/allocator_traits/allocate_at_least|std::allocator_traits::allocate_at_least}}.

Every specialization of {{tt|allocation_result}} has no base classes or declared members other than {{tt|ptr}} and {{tt|count}}, thus it is suitable for {{lt|cpp/language/aggregate initialization}} and {{lt|cpp/language/structured binding}}.

===Template parameters===
{{par begin}}
{{par|Pointer|typically {{c|std::allocator_traits&lt;Alloc&gt;::pointer}}, where {{tt|Alloc}} is an {{named req|Allocator}} type}}
{{par|SizeType|typically {{c|std::allocator_traits&lt;Alloc&gt;::size_type}}, where {{tt|Alloc}} is an {{named req|Allocator}} type}}
{{par end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc mem obj|ptr|nolink=true|a pointer of type {{tt|Pointer}} which is typically used for the address of the first element in the storage allocated by {{tt|allocate_at_least}}}}
{{dsc mem obj|count|nolink=true|a value of type {{tt|SizeType}} which is typically used for the actual number of elements in the storage allocated by {{tt|allocate_at_least}}}}
{{dsc end}}

===Notes===
{{tt|Pointer}} and {{tt|SizeType}} are a pointer to an object type and {{c|std::make_unsigned_t&lt;std::ptrdiff_t&gt;}} (which is almost always same as {{lc|std::size_t}}) by default.

{{feature test macro|__cpp_lib_allocate_at_least|std=C++23|value=202302L|Size-feedback in the Allocator interface}}

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/memory/allocator/dsc allocate_at_least}}
{{dsc inc|cpp/memory/allocator_traits/dsc allocate_at_least}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/memory/pmr/title|monotonic_buffer_resource}}
{{cpp/memory/monotonic_buffer_resource/navbar}}
{{ddcl|header=memory_resource|since=c++17|
class monotonic_buffer_resource : public std::pmr::memory_resource;
}}

The class {{tt|std::pmr::monotonic_buffer_resource}} is a special-purpose memory resource class that releases the allocated memory only when the resource is destroyed. It is intended for very fast memory allocations in situations where memory is used to build up a few objects and then is released all at once.

{{tt|monotonic_buffer_resource}} can be constructed with an initial buffer. If there is no initial buffer, or if the buffer is exhausted, additional buffers are obtained from an ''upstream memory resource'' supplied at construction. The size of buffers obtained follows a geometric progression.

{{tt|monotonic_buffer_resource}} is not thread-safe.

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/memory/monotonic_buffer_resource/dsc constructor}}
{{dsc inc|cpp/memory/monotonic_buffer_resource/dsc destructor}}
{{dsc inc|cpp/memory/monotonic_buffer_resource/dsc operator{{=}}}}

{{dsc h2|Public member functions}}
{{dsc inc|cpp/memory/monotonic_buffer_resource/dsc release}}
{{dsc inc|cpp/memory/monotonic_buffer_resource/dsc upstream_resource}}

{{dsc h2|Protected member functions}}
{{dsc inc|cpp/memory/monotonic_buffer_resource/dsc do_allocate}}
{{dsc inc|cpp/memory/monotonic_buffer_resource/dsc do_deallocate}}
{{dsc inc|cpp/memory/monotonic_buffer_resource/dsc do_is_equal}}
{{dsc end}}

===Example===
The program measures the time of creating huge double-linked lists using the following allocators:
* default standard allocator,
* default {{tt|pmr}} allocator,
* {{tt|pmr}} allocator with monotonic resource but without explicit memory buffer,
* {{tt|pmr}} allocator with monotonic resource and external memory buffer (on stack).
{{example|code=
#include &lt;array&gt;
#include &lt;chrono&gt;
#include &lt;cstddef&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;list&gt;
#include &lt;memory_resource&gt;

template&lt;typename Func&gt;
auto benchmark(Func test_func, int iterations)
{
    const auto start = std::chrono::system_clock::now();
    while (iterations-- &gt; 0)
        test_func();
    const auto stop = std::chrono::system_clock::now();
    const auto secs = std::chrono::duration&lt;double&gt;(stop - start);
    return secs.count();
}

int main()
{
    constexpr int iterations{100};
    constexpr int total_nodes{2'00'000};

    auto default_std_alloc = [total_nodes]
    {
        std::list&lt;int&gt; list;
        for (int i{}; i != total_nodes; ++i)
            list.push_back(i);
    };

    auto default_pmr_alloc = [total_nodes]
    {
        std::pmr::list&lt;int&gt; list;
        for (int i{}; i != total_nodes; ++i)
            list.push_back(i);
    };

    auto pmr_alloc_no_buf = [total_nodes]
    {
        std::pmr::monotonic_buffer_resource mbr;
        std::pmr::polymorphic_allocator&lt;int&gt; pa{&amp;mbr};
        std::pmr::list&lt;int&gt; list{pa};
        for (int i{}; i != total_nodes; ++i)
            list.push_back(i);
    };

    auto pmr_alloc_and_buf = [total_nodes]
    {
        std::array&lt;std::byte, total_nodes * 32&gt; buffer; // enough to fit in all nodes
        std::pmr::monotonic_buffer_resource mbr{buffer.data(), buffer.size()};
        std::pmr::polymorphic_allocator&lt;int&gt; pa{&amp;mbr};
        std::pmr::list&lt;int&gt; list{pa};
        for (int i{}; i != total_nodes; ++i)
            list.push_back(i);
    };

    const double t1 = benchmark(default_std_alloc, iterations);
    const double t2 = benchmark(default_pmr_alloc, iterations);
    const double t3 = benchmark(pmr_alloc_no_buf , iterations);
    const double t4 = benchmark(pmr_alloc_and_buf, iterations);

    std::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(3)
              &lt;&lt; "t1 (default std alloc): " &lt;&lt; t1 &lt;&lt; " sec; t1/t1: " &lt;&lt; t1/t1 &lt;&lt; '\n'
              &lt;&lt; "t2 (default pmr alloc): " &lt;&lt; t2 &lt;&lt; " sec; t1/t2: " &lt;&lt; t1/t2 &lt;&lt; '\n'
              &lt;&lt; "t3 (pmr alloc  no buf): " &lt;&lt; t3 &lt;&lt; " sec; t1/t3: " &lt;&lt; t1/t3 &lt;&lt; '\n'
              &lt;&lt; "t4 (pmr alloc and buf): " &lt;&lt; t4 &lt;&lt; " sec; t1/t4: " &lt;&lt; t1/t4 &lt;&lt; '\n';
}
|p=true
|output=
t1 (default std alloc): 0.720 sec; t1/t1: 1.000
t2 (default pmr alloc): 0.915 sec; t1/t2: 0.787
t3 (pmr alloc  no buf): 0.370 sec; t1/t3: 1.945
t4 (pmr alloc and buf): 0.247 sec; t1/t4: 2.914
}}

{{langlinks|de|es|ja|ru|zh}}
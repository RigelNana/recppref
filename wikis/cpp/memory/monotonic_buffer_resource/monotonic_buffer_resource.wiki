{{cpp/memory/monotonic_buffer_resource/title|monotonic_buffer_resource}}
{{cpp/memory/monotonic_buffer_resource/navbar}}
{{dcl begin}}
{{dcl|since=c++17|num=1|1=
monotonic_buffer_resource();
}}
{{dcl|since=c++17|num=2|1=
explicit monotonic_buffer_resource( std::pmr::memory_resource* upstream );
}}
{{dcl|since=c++17|num=3|1=
explicit monotonic_buffer_resource( std::size_t initial_size );
}}
{{dcl|since=c++17|num=4|1=
monotonic_buffer_resource( std::size_t initial_size,
                           std::pmr::memory_resource* upstream );
}}
{{dcl|since=c++17|num=5|1=
monotonic_buffer_resource( void* buffer, std::size_t buffer_size );
}}
{{dcl|since=c++17|num=6|1=
monotonic_buffer_resource( void* buffer, std::size_t buffer_size,
                           std::pmr::memory_resource* upstream );
}}
{{dcl|since=c++17|num=7|1=
monotonic_buffer_resource( const monotonic_buffer_resource&amp; ) = delete;
}}
{{dcl end}}

Constructs a {{rlpt|/|monotonic_buffer_resource}}. The constructors not taking an upstream memory resource pointer use the return value of {{lc|std::pmr::get_default_resource}} as the upstream memory resource.

@1,2@ Sets the ''current buffer'' to null and the ''next buffer size'' to an implementation-defined size.
@3,4@ Sets the ''current buffer'' to null and the ''next buffer size'' to a size no smaller than {{c|initial_size}}.
@5,6@ Sets the ''current buffer'' to {{c|buffer}} and the ''next buffer size'' to {{c|buffer_size}} (but not less than 1). Then increase the ''next buffer size'' by an implementation-defined growth factor (which does not have to be integral).
@7@ Copy constructor is deleted.

=== Parameters ===
{{par begin}}
{{par|upstream|the upstream memory resource to use; must point to a valid memory resource}}
{{par|initial_size|the minimum size of the first buffer to allocate; must be greater than zero}}
{{par|buffer|the initial buffer to use}}
{{par|buffer_size|the size of the initial buffer; cannot be greater than the number of bytes in {{ttb|buffer}}}}
{{par end}}

{{langlinks|es|ja|ru|zh}}
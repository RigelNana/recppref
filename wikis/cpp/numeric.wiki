{{title|Numerics library}}
{{cpp/numeric/navbar}}

The C++ numerics library includes common mathematical functions and types, as well as optimized numeric arrays and support for random number generation.

==Mathematical functions and types==

===[[cpp/numeric/math|Common mathematical functions]]===
The header {{header|cmath}} provides [[cpp/numeric/math|standard C library mathematical functions]] such as {{lc|std::fabs}}, {{lc|std::sqrt}}, and {{lc|std::sin}}.

{{anchor|Mathematical special functions}}
===[[cpp/numeric/special functions|Mathematical special functions]] {{mark since c++17}}===
The header {{header|cmath}} also provides several mathematical special functions such as {{lc|std::beta}}, {{lc|std::hermite}}, and {{lc|std::cyl_bessel_i}}.

{{anchor|Mathematical constants}}
===[[cpp/numeric/constants|Mathematical constants]] {{mark since c++20}}===
The header {{header|numbers}} provides several mathematical constants, such as {{lc|std::numbers::pi}} or {{lc|std::numbers::sqrt2}}

{{anchor|Basic linear algebra algorithms}}
===[[cpp/numeric/linalg|Basic linear algebra algorithms]] {{mark since c++26}}===
The header {{header|linalg}} provides basic linear algebra algorithms which are based on BLAS.

{{anchor|Data-parallel types}}
===[[cpp/numeric/simd|Data-parallel types]] {{mark since c++26}}===
The header {{header|simd}} provides portable types for explicitly stating data-parallelism and structuring data for more efficient SIMD access.

===Complex number arithmetic===
{{dsc begin}}
{{dsc header|complex}}
{{dsc tclass|cpp/numeric/complex|a complex number type}}
{{dsc end}}

===Numeric arrays===
{{dsc begin}}
{{dsc header|valarray}}
{{dsc tclass|cpp/numeric/valarray|numeric arrays, array masks and array slices}}
{{dsc end}}

==Numeric algorithms==

The header {{header|numeric}} provides numeric algorithms below:

{{anchor|Factor operations}}
===Factor operations {{mark since c++17}}===
{{dsc begin}}
{{dsc header|numeric}}
{{dsc inc|cpp/numeric/dsc gcd}}
{{dsc inc|cpp/numeric/dsc lcm}}
{{dsc end}}

{{anchor|Interpolation operations}}
===Interpolation operations {{mark c++20}}===
{{dsc begin}}
{{dsc header|numeric}}
{{dsc inc|cpp/numeric/dsc midpoint}}
{{dsc header|cmath}}
{{dsc inc|cpp/numeric/dsc lerp}}
{{dsc end}}

{{anchor|Saturation arithmetic}}
===Saturation arithmetic {{mark since c++26}}===
{{dsc begin}}
{{dsc header|numeric}}
{{dsc inc|cpp/numeric/dsc add_sat}}
{{dsc inc|cpp/numeric/dsc sub_sat}}
{{dsc inc|cpp/numeric/dsc mul_sat}}
{{dsc inc|cpp/numeric/dsc div_sat}}
{{dsc inc|cpp/numeric/dsc saturate_cast}}
{{dsc end}}

===Numeric operations===
{{dsc begin}}
{{dsc header|numeric}}
{{dsc inc|cpp/algorithm/dsc iota}}
{{dsc inc|cpp/algorithm/ranges/dsc iota}}
{{dsc inc|cpp/algorithm/dsc accumulate}}
&lt;!--{{dsc inc|cpp/algorithm/ranges/dsc accumulate}}--&gt;
{{dsc inc|cpp/algorithm/dsc reduce}}
&lt;!--{{dsc inc|cpp/algorithm/ranges/dsc reduce}}--&gt;
{{dsc inc|cpp/algorithm/dsc transform_reduce}}
&lt;!--{{dsc inc|cpp/algorithm/ranges/dsc transform_reduce}}--&gt;
{{dsc inc|cpp/algorithm/dsc inner_product}}
&lt;!--{{dsc inc|cpp/algorithm/ranges/dsc inner_product}}--&gt;
{{dsc inc|cpp/algorithm/dsc adjacent_difference}}
&lt;!--{{dsc inc|cpp/algorithm/ranges/dsc adjacent_difference}}--&gt;
{{dsc inc|cpp/algorithm/dsc partial_sum}}
&lt;!--{{dsc inc|cpp/algorithm/ranges/dsc partial_sum}}--&gt;
{{dsc inc|cpp/algorithm/dsc inclusive_scan}}
&lt;!--{{dsc inc|cpp/algorithm/ranges/dsc inclusive_scan}}--&gt;
{{dsc inc|cpp/algorithm/dsc exclusive_scan}}
&lt;!--{{dsc inc|cpp/algorithm/ranges/dsc exclusive_scan}}--&gt;
{{dsc inc|cpp/algorithm/dsc transform_inclusive_scan}}
&lt;!--{{dsc inc|cpp/algorithm/ranges/dsc transform_inclusive_scan}}--&gt;
{{dsc inc|cpp/algorithm/dsc transform_exclusive_scan}}
&lt;!--{{dsc inc|cpp/algorithm/ranges/dsc transform_exclusive_scan}}--&gt;
{{dsc end}}

==Miscellaneous==

===[[cpp/numeric/random|Pseudo-random number generation]]===
The header {{header|random}} defines [[cpp/numeric/random|pseudo-random number generators and numerical distributions]]. The header {{header|cstdlib}} also includes C-style random number generation via {{lc|std::srand}} and {{lc|std::rand}}.

{{anchor|Floating-point environment}}
===[[cpp/numeric/fenv|Floating-point environment]] {{mark since c++11}}===
The header {{header|cfenv}} defines [[cpp/numeric/fenv|flags and functions related to exceptional floating-point state]], such as overflow and division by zero.

{{anchor|Bit manipulation}}
===[[cpp/utility/bit|Bit manipulation]] {{mark since c++20}}===
The header {{header|bit}} provides several function templates to access, manipulate, and process individual bits and bit sequences. The byte ordering ([[cpp/types/endian|endianness]]) of scalar types can be inspected via {{c/core|std::endian}} facility. &lt;!--"Bit manipulation" is part of "General utilities" since C++23--&gt;

===See also===
{{dsc begin}}
{{dsc see c|c/numeric|Numerics|nomono=true}}
{{dsc end}}

{{langlinks|ar|de|es|fr|it|ja|pt|ru|zh}}
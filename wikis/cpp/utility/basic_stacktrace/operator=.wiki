{{cpp/utility/basic_stacktrace/title|1=operator=}}
{{cpp/utility/basic_stacktrace/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
basic_stacktrace&amp; operator=( const basic_stacktrace&amp; other );
}}
{{dcl|num=2|since=c++23|1=
basic_stacktrace&amp; operator=( basic_stacktrace&amp;&amp; other )
    noexcept(/* see below */);
}}
{{dcl end}}

Replaces the contents of the {{tt|basic_stacktrace}}.

@1@ Copy assignment operator. Replaces the contents with a copy of the contents of {{c|other}}.
@@ If {{c|std::allocator_traits&lt;allocator_type&gt;::propagate_on_container_copy_assignment::value}} is {{c|true}}, the allocator of {{c|*this}} is replaced by a copy of that of {{c|other}}. If the allocator of {{c|*this}} after assignment would compare unequal to its old value, the old allocator is used to deallocate the memory, then the new allocator is used to allocate it before copying the entries. Otherwise, the memory owned by {{c|*this}} may be reused when possible. 

@2@ Move assignment operator. Replaces the contents with those of {{c|other}} using move semantics (i.e. the data in {{c|other}} is moved from {{c|other}} into {{c|*this}}). {{c|other}} is in a valid but unspecified state afterwards.
@@ If {{c|std::allocator_traits&lt;allocator_type&gt;::propagate_on_container_move_assignment::value}} is {{c|true}}, the allocator of {{c|*this}} is replaced by a copy of that of {{c|other}}. If it is {{c|false}} and the allocators of {{c|*this}} and {{c|other}} do not compare equal, {{c|*this}} cannot take ownership of the memory owned by {{c|other}} and must assign each entries individually, allocating additional memory using its own allocator as needed.

In any case, the stacktrace entries originally belong to {{c|*this}} may be either destroyed or replaced by element-wise assignment.

{{c|*this}} may be set to empty on allocation failure if the implementation strengthens the exception specification.

===Parameters===
{{par begin}}
{{par|other|another {{tt|basic_stacktrace}} to use as source}}
{{par end}}

===Return value===
{{c|*this}}

===Complexity===
@1@ Linear in the size of {{c|*this}} and {{c|other}}.
@2@ Linear in the size of {{c|*this}} unless the allocators do not compare equal and do not propagate, in which case linear in the size of {{c|*this}} and {{c|other}}.

===Exceptions===
@1@ {{cpp/impldef exception item}}
@2@ {{noexcept|std::allocator_traits&lt;Allocator&gt;::propagate_on_container_move_assignment::value
{{!!}} std::allocator_traits&lt;Allocator&gt;::is_always_equal::value}}

===Notes===
{{cpp/container/lwg2321-note|2|assign=yes}}

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc constructor}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/utility/source_location/title|source_location}}
{{cpp/utility/source_location/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr source_location() noexcept;
}}
{{dcl|num=2|since=c++20|1=
source_location( const source_location&amp; other );
}}
{{dcl|num=3|since=c++20|1=
source_location( source_location&amp;&amp; other ) noexcept;
}}
{{dcl end}}

@1@ Constructs a {{tt|source_location}} object of unspecified value.
@2,3@ Copy and move constructors. It is unspecified whether they are trivial and/or constexpr.

===Parameters===
{{par begin}}
{{par|other|another {{tt|source_location}} to copy or move from}}
{{par end}}

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;source_location&gt;
#include &lt;string_view&gt;
#include &lt;vector&gt;

// GCC specific type name printer
#if (__GNUG__ &gt;= 11)
template&lt;typename T&gt;
auto type_name_helper(const std::source_location s = std::source_location::current())
{
    using std::operator""sv;
    const std::string_view fun_name{s.function_name()};
    constexpr auto prefix{"[with T = "sv};
    const auto type_name_begin{fun_name.find(prefix)};
    if (""sv.npos == type_name_begin)
        return ""sv;
    const std::size_t first{type_name_begin + prefix.length()};
    return std::string_view{fun_name.cbegin() + first, fun_name.cend() - 1};
}

template&lt;typename T&gt;
auto type_name() { return type_name_helper&lt;T&gt;(); }
#endif

void print(std::string_view const comment, std::source_location const l)
{
    std::cout &lt;&lt; comment &lt;&lt; ":\n"
              &lt;&lt; "  file_name     : " &lt;&lt; std::quoted(l.file_name()) &lt;&lt; '\n'
              &lt;&lt; "  function_name : " &lt;&lt; std::quoted(l.function_name()) &lt;&lt; '\n'
              &lt;&lt; "  line          : " &lt;&lt; l.line() &lt;&lt; '\n'
              &lt;&lt; "  column        : " &lt;&lt; l.column() &lt;&lt; '\n';
}

int main()
{
    constexpr std::source_location default_constructed;
    print("default constructed", default_constructed);

    constexpr std::source_location current = std::source_location::current();
    print("current", current);

#if (__GNUG__ &gt;= 11)
    const std::vector&lt;std::vector&lt;int&gt;&gt; v{&lt;!----&gt;{1,2}, {3,4,5}, {6}&lt;!----&gt;};
    auto jv = std::ranges::join_view(v);
    std::cout &lt;&lt; '\n'
              &lt;&lt; '[' &lt;&lt; type_name&lt;int&gt;() &lt;&lt; "]\n"
              &lt;&lt; '[' &lt;&lt; type_name&lt;double*&gt;() &lt;&lt; "]\n"
              &lt;&lt; '[' &lt;&lt; type_name&lt;decltype([](){})&gt;() &lt;&lt; "]\n"
              &lt;&lt; '[' &lt;&lt; type_name&lt;decltype(type_name&lt;int&gt;())&gt;() &lt;&lt; "]\n"
              &lt;&lt; '[' &lt;&lt; type_name&lt;decltype(jv)&gt;() &lt;&lt; "]\n";
#endif
}
|p=true
|output=
default constructed:
  file_name     : ""
  function_name : ""
  line          : 0
  column        : 0
current:
  file_name     : "main.cpp"
  function_name : "int main()"
  line          : 39
  column        : 75

[int]
[double*]
[main()::&lt;lambda()&gt;]
[std::basic_string_view&lt;char&gt;]
[std::ranges::join_view&lt;std::ranges::ref_view&lt;const std::vector&lt;std::vector&lt;int&gt; &gt; &gt; &gt;]
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/source_location/dsc current}}
{{dsc inc|cpp/utility/stacktrace_entry/dsc constructor}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
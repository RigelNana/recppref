{{cpp/title|weak_ordering}}
{{cpp/utility/navbar}}
{{ddcl|since=c++20|header=compare|1=
class weak_ordering;
}}

The class type {{tt|std::weak_ordering}} is the result type of a [[cpp/language/operator comparison#Three-way comparison|three-way comparison]] that:
* Admits all six relational operators ({{tt|1===}}, {{tt|1=!=}}, {{tt|&lt;}}, {{tt|1=&lt;=}}, {{tt|&gt;}}, {{tt|1=&gt;=}}).
{{cpp/utility/compare/substitutable|no}}
* {{enwiki|Connected relation|Does not allow incomparable values}}: exactly one of {{c|a &lt; b}}, {{c|1=a == b}}, or {{c|a &gt; b}} must be {{c|true}}.

===Constants===
The type {{tt|std::weak_ordering}} has three valid values, implemented as const static data members of its type:
{{dsc begin}}
{{dsc hitem|Name|Definition}}
{{dsc mem sconst|{{dsc small|{{c/core|inline constexpr std::weak_ordering}}}} less|nolink=true|a valid value indicating less-than (ordered before) relationship}}
{{dsc mem sconst|{{dsc small|{{c/core|inline constexpr std::weak_ordering}}}} equivalent|nolink=true|a valid value indicating equivalence (neither ordered before nor ordered after)}}
{{dsc mem sconst|{{dsc small|{{c/core|inline constexpr std::weak_ordering}}}} greater|nolink=true|a valid value indicating greater-than (ordered after) relationship}}
{{dsc end}}

===Conversions===
{{tt|std::weak_ordering}} is implicitly-convertible to {{lc|std::partial_ordering}}, while {{lc|std::strong_ordering}} is implicitly-convertible to {{lc|weak_ordering}}.

{{dsc begin}}
{{dsc mem fun|cpp/utility/compare/weak_ordering|inlinemem=true|title=operator partial_ordering|implicit conversion to {{lc|std::partial_ordering}}}}
{{dsc end}}

{{member|{{small|std::weak_ordering::}}operator partial_ordering|2=
{{ddcl|1=
constexpr operator partial_ordering() const noexcept;
}}

===Return value===
{{lc|std::partial_ordering::less}} if {{tt|v}} is {{tt|less}}, {{lc|std::partial_ordering::greater}} if {{tt|v}} is {{tt|greater}},
{{lc|std::partial_ordering::equivalent}} if {{tt|v}} is {{tt|equivalent}}.
}}

===Comparisons===
Comparison operators are defined between values of this type and literal {{c|0}}. This supports the expressions {{c|1=a &lt;=&gt; b == 0}} or {{c|1=a &lt;=&gt; b &lt; 0}} that can be used to convert the result of a three-way comparison operator to a boolean relationship; see  {{ltt|cpp/utility/compare/named_comparison_functions|std::is_eq}}, {{ltt|cpp/utility/compare/named_comparison_functions|std::is_lt}}, etc.

{{cpp/hidden friend|plural=yes|{{tt|std::weak_ordering}}}}

The behavior of a program that attempts to compare a {{tt|weak_ordering}} with anything other than the integer literal {{c|0}} is undefined.
{{dsc begin}}
{{dsc fun|cpp/utility/compare/weak_ordering|inlinemem=true|title=operator==&lt;br&gt;operator&lt;&lt;br&gt;operator&gt;&lt;br&gt;operator&lt;=&lt;br&gt;operator&gt;=&lt;br&gt;operator&lt;=&gt;|compares with zero or a {{tt|weak_ordering}}}}
{{dsc end}}

{{member|operator{{==}}|2=
{{dcl begin}}
{{dcl|num=1|1=
friend constexpr bool operator==( weak_ordering v, /*unspecified*/ u ) noexcept;
}}
{{dcl|num=2|1=
friend constexpr bool operator==( weak_ordering v, weak_ordering w ) noexcept = default;
}}
{{dcl end}}

===Parameters===
{{par begin}}
{{par|v, w|{{tt|std::weak_ordering}} values to check}}
{{par|u|an unused parameter of any type that accepts literal zero argument}}
{{par end}}

===Return value===
@1@ {{c|true}} if {{tt|v}} is {{tt|equivalent}}, {{c|false}} if {{tt|v}} is {{tt|less}} or {{tt|greater}}
@2@ {{c|true}} if both parameters hold the same value, {{c|false}} otherwise
}}

{{member|operator&amp;lt;|2=
{{dcl begin}}
{{dcl|num=1|1=
friend constexpr bool operator&lt;( weak_ordering v, /*unspecified*/ u ) noexcept;
}}
{{dcl|num=2|1=
friend constexpr bool operator&lt;( /*unspecified*/ u, weak_ordering v ) noexcept;
}}
{{dcl end}}

===Parameters===
{{par begin}}
{{par|v|a {{tt|std::weak_ordering}} value to check}}
{{par|u|an unused parameter of any type that accepts literal zero argument}}
{{par end}}

===Return value===
@1@ {{c|true}} if {{tt|v}} is {{tt|less}}, and {{c|false}} if {{tt|v}} is {{tt|greater}} or {{tt|equivalent}}
@2@ {{c|true}} if {{tt|v}} is {{tt|greater}}, and {{c|false}} if {{tt|v}} is {{tt|less}} or {{tt|equivalent}}
}}

{{member|operator&amp;lt;{{=}}|2=
{{dcl begin}}
{{dcl|num=1|1=
friend constexpr bool operator&lt;=( weak_ordering v, /*unspecified*/ u ) noexcept;
}}
{{dcl|num=2|1=
friend constexpr bool operator&lt;=( /*unspecified*/ u, weak_ordering v ) noexcept;
}}
{{dcl end}}

===Parameters===
{{par begin}}
{{par|v|a {{tt|std::weak_ordering}} value to check}}
{{par|u|an unused parameter of any type that accepts literal zero argument}}
{{par end}}

===Return value===
@1@ {{c|true}} if {{tt|v}} is {{tt|less}} or {{tt|equivalent}}, and {{c|false}} if {{tt|v}} is {{tt|greater}}
@2@ {{c|true}} if {{tt|v}} is {{tt|greater}} or {{tt|equivalent}}, and {{c|false}} if {{tt|v}} is {{tt|less}}
}}

{{member|operator&amp;gt;|2=
{{dcl begin}}
{{dcl|num=1|1=
friend constexpr bool operator&gt;( weak_ordering v, /*unspecified*/ u ) noexcept;
}}
{{dcl|num=2|1=
friend constexpr bool operator&gt;( /*unspecified*/ u, weak_ordering v ) noexcept;
}}
{{dcl end}}

===Parameters===
{{par begin}}
{{par|v|a {{tt|std::weak_ordering}} value to check}}
{{par|u|an unused parameter of any type that accepts literal zero argument}}
{{par end}}

===Return value===
@1@ {{c|true}} if {{tt|v}} is {{tt|greater}}, and {{c|false}} if {{tt|v}} is {{tt|less}} or {{tt|equivalent}}
@2@ {{c|true}} if {{tt|v}} is {{tt|less}}, and {{c|false}} if {{tt|v}} is {{tt|greater}} or {{tt|equivalent}}
}}

{{member|operator&amp;gt;{{=}}|2=
{{dcl begin}}
{{dcl|num=1|1=
friend constexpr bool operator&gt;=( weak_ordering v, /*unspecified*/ u ) noexcept;
}}
{{dcl|num=2|1=
friend constexpr bool operator&gt;=( /*unspecified*/ u, weak_ordering v ) noexcept;
}}
{{dcl end}}

===Parameters===
{{par begin}}
{{par|v|a {{tt|std::weak_ordering}} value to check}}
{{par|u|an unused parameter of any type that accepts literal zero argument}}
{{par end}}

===Return value===
@1@ {{c|true}} if {{tt|v}} is {{tt|greater}} or {{tt|equivalent}}, and {{c|false}} if {{tt|v}} is {{tt|less}}
@2@ {{c|true}} if {{tt|v}} is {{tt|less}} or {{tt|equivalent}}, and {{c|false}} if {{tt|v}} is {{tt|greater}}
}}
{{member|operator&lt;{{=}}&gt;|2=
{{dcl begin}}
{{dcl|num=1|1=
friend constexpr weak_ordering operator&lt;=&gt;( weak_ordering v, /*unspecified*/ u ) noexcept;
}}
{{dcl|num=2|1=
friend constexpr weak_ordering operator&lt;=&gt;( /*unspecified*/ u, weak_ordering v ) noexcept;
}}
{{dcl end}}

===Parameters===
{{par begin}}
{{par|v|a {{tt|std::weak_ordering}} value to check}}
{{par|u|an unused parameter of any type that accepts literal zero argument}}
{{par end}}

===Return value===
@1@ {{c|v}}.
@2@ {{tt|greater}} if {{tt|v}} is {{tt|less}}, {{tt|less}} if {{tt|v}} is {{tt|greater}}, otherwise {{tt|v}}.
}}

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/compare/dsc strong_ordering}}
{{dsc inc|cpp/utility/compare/dsc partial_ordering}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
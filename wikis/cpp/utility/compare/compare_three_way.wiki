{{cpp/title|compare_three_way}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|compare}}
{{dcl header|functional}}
{{dcl|since=c++20|
struct compare_three_way;
}}
{{dcl end}}

Function object for performing comparisons. Deduces the parameter types and the return type of the function call operator.

===Nested types===
{{dsc begin}}
{{dsc hitem|Nested type|Definition}}
{{dsc|{{tt|is_transparent}}|[[cpp/utility/functional#Transparent function objects|unspecified]]}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem fun|operator()|nolink=true|obtains the result of three-way comparison on both arguments}}
{{dsc end}}

{{member|1={{small|std::compare_three_way::}}operator()|2=
{{ddcl|
template&lt; class T, class U &gt;
constexpr auto operator()( T&amp;&amp; t, U&amp;&amp; u ) const;
}}

Given the expression {{c|1=std::forward&lt;T&gt;(t) &lt;=&gt; std::forward&lt;U&gt;(u)}} as {{c|expr}}:
* If {{c|expr}} results in a call to [[cpp/language/operator comparison#Built-in pointer equality comparison|built-in]] {{c/core|1=operator&lt;=&gt;}} comparing pointers, given the {{lsd|cpp/language/pointer#Composite pointer type}} of {{c|t}} and {{c|u}} as {{tt|P}}:
:* Compares the two converted pointers (of type {{tt|P}}) in the [[cpp/language/operator comparison#Pointer total order|implementation-defined strict total order over pointers]]:
::* If {{c|t}} precedes {{c|u}}, returns {{ltt|cpp/utility/compare/strong_ordering|std::strong_ordering::less}}.
::* If {{c|u}} precedes {{c|t}}, returns {{ltt|cpp/utility/compare/strong_ordering|std::strong_ordering::greater}}.
::* Otherwise, returns {{ltt|cpp/utility/compare/strong_ordering|std::strong_ordering::equal}}.
:* If the conversion sequence from {{tt|T}} to {{tt|P}} or the conversion sequence from {{tt|U}} to {{tt|P}} is not [[cpp/concepts#Equality preservation|equality-preserving]], the behavior is undefined.
* Otherwise:
:* Returns the result of {{c|expr}}.
:* If {{c|std::three_way_comparable_with&lt;T, U&gt;}} is not modeled, the behavior is undefined.

{{cpp/enable if|{{c|std::three_way_comparable_with&lt;T, U&gt;}} is satisfied}}.
}}

===Example===
{{example|code=
#include &lt;compare&gt;
#include &lt;iostream&gt;

struct Rational
{
    int num;
    int den; // &gt; 0
    
    // Although the comparison X &lt;=&gt; Y will work, a direct call
    // to std::compare_three_way{}(X, Y) requires the operator==
    // be defined, to satisfy the std::three_way_comparable_with.
    constexpr bool operator==(Rational const&amp;) const = default;
};

constexpr std::weak_ordering operator&lt;=&gt;(Rational lhs, Rational rhs)
{
    return lhs.num * rhs.den &lt;=&gt; rhs.num * lhs.den;
}

void print(std::weak_ordering value)
{
    value &lt; 0 ? std::cout &lt;&lt; "less\n" :
    value &gt; 0 ? std::cout &lt;&lt; "greater\n" :
                std::cout &lt;&lt; "equal\n";
}

int main()
{
    Rational a{6, 5};
    Rational b{8, 7};
    print(a &lt;=&gt; b);
    print(std::compare_three_way{}(a, b));
}
|output=
greater
greater
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3530|std=C++20|before=syntactic checks were relaxed while comparing pointers|after=only semantic requirements are relaxed}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/ranges/dsc equal_to}}
{{dsc inc|cpp/utility/functional/ranges/dsc not_equal_to}}
{{dsc inc|cpp/utility/functional/ranges/dsc less}}
{{dsc inc|cpp/utility/functional/ranges/dsc greater}}
{{dsc inc|cpp/utility/functional/ranges/dsc less_equal}}
{{dsc inc|cpp/utility/functional/ranges/dsc greater_equal}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
{{cpp/title|get{{petty|(std::variant)}}}}
{{cpp/utility/variant/navbar}}
{{dcl begin}}
{{dcl header|variant}}
{{dcl rev begin|since=c++17|num=1}}
{{dcl|
template&lt; std::size_t I, class... Types &gt;
constexpr std::variant_alternative_t&lt;I, std::variant&lt;Types...&gt;&gt;&amp;
    get( std::variant&lt;Types...&gt;&amp; v );
}}
{{dcl|
template&lt; std::size_t I, class... Types &gt;
constexpr std::variant_alternative_t&lt;I, std::variant&lt;Types...&gt;&gt;&amp;&amp;
    get( std::variant&lt;Types...&gt;&amp;&amp; v );
}}
{{dcl|
template&lt; std::size_t I, class... Types &gt;
constexpr const std::variant_alternative_t&lt;I, std::variant&lt;Types...&gt;&gt;&amp;
    get( const std::variant&lt;Types...&gt;&amp; v );
}}
{{dcl|
template&lt; std::size_t I, class... Types &gt;
constexpr const std::variant_alternative_t&lt;I, std::variant&lt;Types...&gt;&gt;&amp;&amp;
    get( const std::variant&lt;Types...&gt;&amp;&amp; v );
}}
{{dcl rev end}}
{{dcl rev begin|since=c++17|num=2}}
{{dcl|
template&lt; class T, class... Types &gt;
constexpr T&amp; get( std::variant&lt;Types...&gt;&amp; v );
}}
{{dcl|
template&lt; class T, class... Types &gt;
constexpr T&amp;&amp; get( std::variant&lt;Types...&gt;&amp;&amp; v );
}}
{{dcl|
template&lt; class T, class... Types &gt;
constexpr const T&amp; get( const std::variant&lt;Types...&gt;&amp; v );
}}
{{dcl|
template&lt; class T, class... Types &gt;
constexpr const T&amp;&amp; get( const std::variant&lt;Types...&gt;&amp;&amp; v );
}}
{{dcl rev end}}
{{dcl end}}

@1@ Index-based value accessor: If {{c|1=v.index() == I}}, returns a reference to the value stored in {{c|v}}. Otherwise, throws {{lc|std::bad_variant_access}}. The call is ill-formed if {{tt|I}} is not a valid index in the variant.
@2@ Type-based value accessor: If {{c|v}} holds the alternative {{tt|T}}, returns a reference to the value stored in {{c|v}}. Otherwise, throws {{lc|std::bad_variant_access}}. The call is ill-formed if {{tt|T}} is not a unique element of {{c|Types...}}.

===Template parameters===
{{par begin}}
{{par|I|index to look up}}
{{par|T|unique type to look up}}
{{par|Types...|types forming the {{tt|variant}}}}
{{par end}}

===Parameters===
{{par begin}}
{{par|v|a {{tt|variant}}}}
{{par end}}

===Return value===
Reference to the value stored in the variant.

===Exceptions===
@1,2@ Throws {{lc|std::bad_variant_access}} on errors.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;variant&gt;
 
int main()
{
    std::variant&lt;int, float&gt; v{12}, w;
    std::cout &lt;&lt; std::get&lt;int&gt;(v) &lt;&lt; '\n';
    w = std::get&lt;int&gt;(v);
    w = std::get&lt;0&gt;(v); // same effect as the previous line
 
//  std::get&lt;double&gt;(v); // error: no double in [int, float]
//  std::get&lt;3&gt;(v);      // error: valid index values are 0 and 1
 
    try
    {
        w = 42.0f;
        std::cout &lt;&lt; std::get&lt;float&gt;(w) &lt;&lt; '\n'; // ok, prints 42
        w = 42;
        std::cout &lt;&lt; std::get&lt;float&gt;(w) &lt;&lt; '\n'; // throws
    }
    catch (std::bad_variant_access const&amp; ex)
    {
        std::cout &lt;&lt; ex.what() &lt;&lt; ": w contained int, not float\n";
    }
}
|p=true
|output=
12
42
Unexpected index: w contained int, not float
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/variant/dsc get_if}}
{{dsc inc|cpp/utility/tuple/dsc get}}
{{dsc inc|cpp/container/array/dsc get}}
{{dsc inc|cpp/utility/pair/dsc get}}
{{dsc inc|cpp/ranges/subrange/dsc get}}
{{dsc inc|cpp/numeric/complex/dsc get}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
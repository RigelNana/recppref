{{cpp/utility/variant/title|swap}}
{{cpp/utility/variant/navbar}}
{{dcl begin}}
{{dcla|since=c++17|constexpr=c++20|
void swap( variant&amp; rhs ) noexcept(/* see below */);
}}
{{dcl end}}

Swaps two {{rlpt|/|variant}} objects.

* If both {{c|*this}} and {{c|rhs}} are valueless by exception, does nothing.
* Otherwise, if both {{c|*this}} and {{c|rhs}} hold the same alternative, calls {{c|swap(*std::get_if&lt;i&gt;(this), *std::get_if&lt;i&gt;(std::addressof(rhs)))}} where {{c|i}} is {{rlpf|index}}. If an exception is thrown, the state of the values depends on the exception safety of the {{tt|swap}} function called.
* Otherwise, exchanges values of {{c|rhs}} and {{c|*this}}. If an exception is thrown, the state of {{c|*this}} and {{c|rhs}} depends on exception safety of variant's move constructor.

The program is ill-formed unless type {{tt|T_i}} are {{named req|Swappable}} and {{c|std::is_move_constructible_v&lt;T_i&gt;}} is {{c|true}} for all {{tt|T_i}} in {{tt|Types...}}.

===Parameters===
{{par begin}}
{{par|rhs|a {{tt|variant}} object to swap with}}
{{par end}}

===Return value===
(none)

===Exceptions===
If {{c|1=this-&gt;index() == rhs.index()}}, may throw any exception thrown by {{c|swap(*std::get_if&lt;i&gt;(this), *std::get_if&lt;i&gt;(std::addressof(rhs)))}} with {{c|i}} being {{rlpf|index}}.

Otherwise, may throw any exception thrown by the move constructors of the alternatives currently held by {{c|*this}} and {{c|rhs}}.

{{noexcept|((std::is_nothrow_move_constructible_v&lt;Types&gt; &amp;&amp;
           std::is_nothrow_swappable_v&lt;Types&gt;) &amp;&amp; ...)}}

===Notes===
{{ftm begin}}
{{ftm|std=C++20|dr=yes|value=202106L|__cpp_lib_variant|Fully {{c/core|constexpr}} {{tt|std::variant}}}}
{{ftm end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;variant&gt;

int main()
{
    std::variant&lt;int, std::string&gt; v1{2}, v2{"abc"};
    std::visit([](auto&amp;&amp; x) { std::cout &lt;&lt; x &lt;&lt; ' '; }, v1);
    std::visit([](auto&amp;&amp; x) { std::cout &lt;&lt; x &lt;&lt; '\n'; }, v2);
    v1.swap(v2);
    std::visit([](auto&amp;&amp; x) { std::cout &lt;&lt; x &lt;&lt; ' '; }, v1);
    std::visit([](auto&amp;&amp; x) { std::cout &lt;&lt; x &lt;&lt; '\n'; }, v2);
}
|output=
2 abc
abc 2
}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P2231R1|std=C++20|before={{tt|swap}} was not {{c/core|constexpr}} while non-trivial destructors can be {{c/core|constexpr}} in C++20|after=made {{c/core|constexpr}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/variant/dsc swap2}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/title|get_if {{small|(std::variant)}}}}
{{cpp/utility/variant/navbar}}
{{dcl begin}}
{{dcl header|variant}}
{{dcl rev begin|num=1|since=c++17}}
{{dcl|
template&lt; std::size_t I, class... Types &gt;
constexpr std::add_pointer_t&lt;std::variant_alternative_t&lt;I, std::variant&lt;Types...&gt;&gt;&gt;
    get_if( std::variant&lt;Types...&gt;* pv ) noexcept;
}}
{{dcl|
template&lt; std::size_t I, class... Types &gt;
constexpr std::add_pointer_t&lt;const std::variant_alternative_t&lt;I, std::variant&lt;Types...&gt;&gt;&gt;
    get_if( const std::variant&lt;Types...&gt;* pv ) noexcept;
}}
{{dcl rev end}}
{{dcl rev begin|num=2|since=c++17}}
{{dcl|
template&lt; class T, class... Types &gt;
constexpr std::add_pointer_t&lt;T&gt;
    get_if( std::variant&lt;Types...&gt;* pv ) noexcept;
}}
{{dcl|
template&lt; class T, class... Types &gt;
constexpr std::add_pointer_t&lt;const T&gt;
    get_if( const std::variant&lt;Types...&gt;* pv ) noexcept;
}}
{{dcl rev end}}
{{dcl end}}

@1@ Index-based non-throwing accessor: If {{c|pv}} is not a null pointer and {{c|1=pv-&gt;index() == I}}, returns a pointer to the value stored in the variant pointed to by {{c|pv}}. Otherwise, returns a null pointer value. The call is ill-formed if {{tt|I}} is not a valid index in the variant.
@2@ Type-based non-throwing accessor: Equivalent to {{v|1}} with {{tt|I}} being the zero-based index of {{tt|T}} in {{c|Types...}}. The call is ill-formed if {{tt|T}} is not a unique element of {{c|Types...}}.

===Template parameters===
{{par begin}}
{{par|I|index to look up}}
{{par|Type|unique type to look up}}
{{par end}}

===Parameters===
{{par begin}}
{{par|pv|pointer to a variant}}
{{par end}}

===Return value===
Pointer to the value stored in the pointed-to variant or null pointer on error.

===Example===
{{example|code=
#include &lt;iostream&gt;
#include &lt;variant&gt;

int main()
{
    auto check_value = [](const std::variant&lt;int, float&gt;&amp; v)
    {
        if (const int* pval = std::get_if&lt;int&gt;(&amp;v))
            std::cout &lt;&lt; "variant value: " &lt;&lt; *pval &lt;&lt; '\n';
        else
            std::cout &lt;&lt; "failed to get value!" &lt;&lt; '\n';
    };

    std::variant&lt;int, float&gt; v{12}, w{3.f};
    check_value(v);
    check_value(w);
}
|output=
variant value: 12
failed to get value!
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/variant/dsc get}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
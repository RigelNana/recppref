{{cpp/title|holds_alternative}}
{{cpp/utility/variant/navbar}}
{{dcl begin}}
{{dcl header|variant}}
{{dcl|since=c++17|
template&lt; class T, class... Types &gt;
constexpr bool holds_alternative( const std::variant&lt;Types...&gt;&amp; v ) noexcept;
}}
{{dcl end}}

Checks if the variant {{c|v}} holds the alternative {{tt|T}}. The call is ill-formed if {{tt|T}} does not appear exactly once in {{tt|Types...}}

===Parameters===
{{par begin}}
{{par|v|variant to examine}}
{{par end}}

===Return value===
{{c|true}} if the variant currently holds the alternative {{tt|T}}, {{c|false}} otherwise.

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;string&gt;
#include &lt;variant&gt;

int main()
{
    std::variant&lt;int, std::string&gt; v = "abc";
    assert(not std::holds_alternative&lt;int&gt;(v));
    assert(std::holds_alternative&lt;std::string&gt;(v));
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/variant/dsc index}}
{{dsc inc|cpp/utility/variant/dsc get}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
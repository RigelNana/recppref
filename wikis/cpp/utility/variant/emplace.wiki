{{cpp/utility/variant/title|emplace}}
{{cpp/utility/variant/navbar}}
{{dcl begin}}
{{dcla|num=1|constexpr=c++20|since=c++17|1=
template&lt; class T, class... Args &gt;
T&amp; emplace( Args&amp;&amp;... args );
}}
{{dcla|num=2|anchor=no|constexpr=c++20|since=c++17|1=
template&lt; class T, class U, class... Args &gt;
T&amp; emplace( std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args );
}}
{{dcla|num=3|anchor=no|constexpr=c++20|since=c++17|1=
template&lt; std::size_t I, class... Args &gt;
std::variant_alternative_t&lt;I, variant&gt;&amp; emplace( Args&amp;&amp;... args );
}}
{{dcla|num=4|anchor=no|constexpr=c++20|since=c++17|1=
template&lt; std::size_t I, class U, class... Args &gt;
std::variant_alternative_t&lt;I, variant&gt;&amp;
    emplace( std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args );
}}
{{dcl end}}

Creates a new value in-place, in an existing {{tt|variant}} object

@1@ Equivalent to {{c|emplace&lt;I&gt;(std::forward&lt;Args&gt;(args)...)}}, where {{tt|I}} is the zero-based index of {{tt|T}} in {{tt|Types...}}.
* {{cpp/enable_if|{{c|std::is_constructible_v&lt;T, Args...&gt;}} is {{c|true}}, and {{tt|T}} occurs exactly once in {{tt|Types...}}}}.
@2@ Equivalent to {{c|emplace&lt;I&gt;(il, std::forward&lt;Args&gt;(args)...)}}, where {{tt|I}} is the zero-based index of {{tt|T}} in {{tt|Types...}}.
* {{cpp/enable_if|{{c|std::is_constructible_v&lt;T, std::initializer_list&lt;U&gt;&amp;, Args...&gt;}} is {{c|true}}, and {{tt|T}} occurs exactly once in {{tt|Types...}}}}.
@3@ First, destroys the currently contained value (if any). Then [[cpp/language/direct initialization|direct-initializes]] the contained value as if constructing a value of type {{tt|T_I}} with the arguments {{c|std::forward&lt;Args&gt;(args)...}}. If an exception is thrown, {{c|*this}} may become {{rlpt|valueless_by_exception}}.
* {{cpp/enable_if|{{c|std::is_constructible_v&lt;T_I, Args...&gt;}} is {{c|true}}}}.
* It is a compile-time error if {{tt|I}} is not less than {{c|sizeof...(Types)}}.
@4@ First, destroys the currently contained value (if any). Then [[cpp/language/direct initialization|direct-initializes]] the contained value as if constructing a value of type {{tt|T_I}} with the arguments {{c|il, std::forward&lt;Args&gt;(args)...}}. If an exception is thrown, {{c|*this}} may become {{rlpt|valueless_by_exception}}.
* {{cpp/enable_if|{{c|std::is_constructible_v&lt;T_I, std::initializer_list&lt;U&gt;&amp;, Args...&gt;}} is {{c|true}}}}.
* It is a compile-time error if {{tt|I}} is not less than {{c|sizeof...(Types)}}.

===Parameters===
{{par begin}}
{{par|args|constructor arguments to use when constructing the new value}}
{{par|il|initializer_list argument to use when constructing the new value}}
{{par end}}

===Return value===
A reference to the new contained value.

===Exceptions===
@1-4@ Any exception thrown during the initialization of the contained value.

===Notes===
{{ftm begin|sort=1}}
{{ftm|std=C++20|dr=yes|value=202106L|__cpp_lib_variant|Fully {{c/core|constexpr}} {{tt|std::variant}} {{vl|1-4}}}}
{{ftm end}}

===Example===
{{example
|code =
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;variant&gt;

int main()
{
    std::variant&lt;std::string&gt; v1;
    v1.emplace&lt;0&gt;("abc"); // OK
    std::cout &lt;&lt; std::get&lt;0&gt;(v1) &lt;&lt; '\n';
    v1.emplace&lt;std::string&gt;("def"); // OK
    std::cout &lt;&lt; std::get&lt;0&gt;(v1) &lt;&lt; '\n';

    std::variant&lt;std::string, std::string&gt; v2;
    v2.emplace&lt;1&gt;("ghi"); // OK
    std::cout &lt;&lt; std::get&lt;1&gt;(v2) &lt;&lt; '\n';
    // v2.emplace&lt;std::string&gt;("abc"); -&gt; Error
}
|output =
abc
def
ghi
}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P2231R1|std=C++20|before={{tt|emplace}} was not {{c/core|constexpr}} while the required operations can be {{c/core|constexpr}} in C++20|after=made {{c/core|constexpr}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/variant/dsc operator{{=}}}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/title|swap{{small|(std::variant)}}}}
{{cpp/utility/variant/navbar}}
{{dcl begin}}
{{dcl header|variant}}
{{dcla|anchor=no|since=c++17|constexpr=c++20|
template&lt; class... Types &gt;
void swap( std::variant&lt;Types...&gt;&amp; lhs,
           std::variant&lt;Types...&gt;&amp; rhs ) noexcept(/* see below */);
}}
{{dcl end}}

Overloads the {{lc|std::swap}} algorithm for {{lc|std::variant}}. Effectively calls {{c|lhs.swap(rhs)}}.

{{cpp/enable if|{{c|std::is_move_constructible_v&lt;T_i&gt;}} and {{c|std::is_swappable_v&lt;T_i&gt;}} are both {{c|true}} for all {{tt|T_i}} in {{tt|Types...}}}}.

===Parameters===
{{par begin}}
{{par|lhs, rhs|{{tt|variant}} objects whose values to swap}}
{{par end}}

===Return value===
(none)

===Exceptions===
{{noexcept|noexcept(lhs.swap(rhs))}}

===Notes===
{{ftm begin}}
{{ftm|std=C++20|dr=yes|value=202106L|__cpp_lib_variant|Fully {{c/core|constexpr}} {{tt|std::variant}}}}
{{ftm end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;variant&gt;

void print(auto const&amp; v, char term = '\n')
{
    std::visit([](auto&amp;&amp; o) { std::cout &lt;&lt; o; }, v);
    std::cout &lt;&lt; term;
}

int main()
{
    std::variant&lt;int, std::string&gt; v1{123}, v2{"XYZ"};
    print(v1, ' ');
    print(v2);

    std::swap(v1, v2);
    print(v1, ' ');
    print(v2);

    std::variant&lt;double, std::string&gt; v3{3.14};
    // std::swap(v1, v3); // ERROR: ~ inconsistent parameter packs
}
|output=
123 XYZ
XYZ 123
}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P2231R1|std=C++20|before={{tt|swap}} was not {{c/core|constexpr}} while the required operations can be {{c/core|constexpr}} in C++20|after=made {{c/core|constexpr}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/variant/dsc swap}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/utility/variant/title|~variant}}
{{cpp/utility/variant/navbar}}
{{dcl begin}}
{{dcla|anchor=no|since=c++17|constexpr=c++20|
~variant();
}}
{{dcl end}}

If {{rlpf|valueless_by_exception}} is {{c|true}}, does nothing. Otherwise, destroys the currently contained object.

This destructor is trivial if {{c|std::is_trivially_destructible_v&lt;T_i&gt;}} is {{c|true}} for all {{tt|T_i}} in {{tt|Types...}}.

===Notes===
{{ftm begin}}
{{ftm|std=C++20|dr=yes|value=202106L|__cpp_lib_variant|Fully {{c/core|constexpr}} {{tt|std::variant}}}}
{{ftm end}}

===Example===
{{example
|code=
#include &lt;cstdio&gt;
#include &lt;variant&gt;

int main()
{
    struct X { ~X() { puts("X::~X();"); } };
    struct Y { ~Y() { puts("Y::~Y();"); } };

    {
        puts("entering block #1");
        std::variant&lt;X,Y&gt; var;
        puts("leaving block #1");
    }

    {
        puts("entering block #2");
        std::variant&lt;X,Y&gt; var{ std::in_place_index_t&lt;1&gt;{} }; // constructs var(Y)
        puts("leaving block #2");
    }
}
|output=
entering block #1
leaving block #1
X::~X();
entering block #2
leaving block #2
Y::~Y();
}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P2231R1|std=C++20|before=the destructor was not {{c/core|constexpr}} while non-trivial destructors can be {{c/core|constexpr}} in C++20|after=made {{c/core|constexpr}}}}
{{dr list end}}

{{langlinks|es|ja|ru|zh}}
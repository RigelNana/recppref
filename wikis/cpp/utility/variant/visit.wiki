{{cpp/utility/variant/title|visit}}
{{cpp/utility/variant/navbar}}
{{dcl begin}}
{{dcl|since=c++26|num=1|
template&lt; class Self, class Visitor &gt;
constexpr decltype(auto) visit( this Self&amp;&amp; self, Visitor&amp;&amp; vis );
}}
{{dcl|since=c++26|num=2|
template&lt; class R, class Self, class Visitor &gt;
constexpr R visit( this Self&amp;&amp; self, Visitor&amp;&amp; vis );
}}
{{dcl end}}

Applies the visitor {{c|vis}} (a {{named req|Callable}} that can be called with any combination of types from the variant) to the variant held by {{c|self}}.

Given type {{c|V}} as {{c|decltype(std::forward_like&lt;Self&gt;(std::declval&lt;variant&gt;()))}}, the equivalent call is:
@1@ {{c|return std::visit(std::forward&lt;Visitor&gt;(vis), (V) self);}}.
@2@ {{c|return std::visit&lt;R&gt;(std::forward&lt;Visitor&gt;(vis), (V) self);}}.

===Parameters===
{{par begin}}
{{par|vis|a {{named req|Callable}} that accepts every possible alternative from the variant}}
{{par|self|variant to pass to the visitor}}
{{par end}}

===Return value===
@1@ The result of the {{c|std::visit}} invocation.
@2@ Nothing if {{tt|R}} is (possibly cv-qualified) {{c/core|void}}; otherwise the result of the {{c|std::visit&lt;R&gt;}} invocation.

===Exceptions===
Only throws if the call to {{c|std::visit}} throws.

===Notes===
{{feature test macro|__cpp_lib_variant|std=C++26|value=202306L|member {{tt|visit}}}}

===Example===
{{example
|code=
#include &lt;print&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;
#include &lt;variant&gt;
 
struct Base {};
struct Derived : Base {};

// helper type for the visitor
template&lt;class... Ts&gt;
struct overloads : Ts... { using Ts::operator()...; };
 
// the variant to visit
using var_t = std::variant&lt;int, std::string, Derived&gt;;

int main()
{
    const auto visitor = overloads
    {
        [](int i){ std::print("int = {}\n", i); },
        [](std::string_view s){ std::println("string = “{}”", s); },
        [](const Base&amp;){ std::println("base"); }
    };

    const var_t var1 = 42, var2 = "abc", var3 = Derived();

#if (__cpp_lib_variant &gt;= 202306L)
    var1.visit(visitor);
    var2.visit(visitor);
    var3.visit(visitor);
#else
    std::visit(visitor, var1);
    std::visit(visitor, var2);
    std::visit(visitor, var3);
#endif
}
|output=
int = 42
string = “abc”
base
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/variant/dsc visit2}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
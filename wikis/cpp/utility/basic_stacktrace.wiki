{{cpp/title|basic_stacktrace}}
{{cpp/utility/basic_stacktrace/navbar}}
{{dcl begin}}
{{dcl header|stacktrace}}
{{dcl|num=1|since=c++23|
template&lt; class Allocator &gt;
class basic_stacktrace;
}}
{{dcl|num=2|since=c++23|1=
using stacktrace =
    std::basic_stacktrace&lt;std::allocator&lt;std::stacktrace_entry&gt;&gt;;
}}
{{dcl|num=3|since=c++23|1=
namespace pmr {
using stacktrace =
    std::basic_stacktrace&lt;std::pmr::polymorphic_allocator&lt;std::stacktrace_entry&gt;&gt;;
}
}}
{{dcl end}}

@1@ The {{tt|basic_stacktrace}} class template represents a snapshot of the whole stacktrace or its given part. It satisfies the requirement of {{named req|AllocatorAwareContainer}}, {{named req|SequenceContainer}}, and {{named req|ReversibleContainer}}, except that only move, assignment, swap, and operations for const-qualified sequence containers are supported, and the semantics of comparison functions are different from those required for a container.

@2@ Convenience type alias for the {{tt|basic_stacktrace}} using the default {{lc|std::allocator}}.

@3@ Convenience type alias for the {{tt|basic_stacktrace}} using the {{lt|cpp/memory/polymorphic allocator}}.

The ''invocation sequence'' of the current evaluation {{mathjax-or|\(\small{ {x}_{0} }\)|x&lt;sub&gt;0&lt;/sub&gt;}} in the current thread of execution is a sequence {{mathjax-or|\(\small{ ({x}_{0}, \dots, {x}_{n})}\)|(x&lt;sub&gt;0&lt;/sub&gt;, ..., x&lt;sub&gt;n&lt;/sub&gt;)}} of evaluations such that, for {{mathjax-or|\(\small{i \ge 0}\)|i≥0}}, {{mathjax-or|\(\small{ {x}_{i} }\)|x&lt;sub&gt;i&lt;/sub&gt;}} is within the function invocation {{mathjax-or|\(\small{ {x}_{i+1} }\)|x&lt;sub&gt;i+1&lt;/sub&gt;}}.

A ''stacktrace'' is an approximate representation of an invocation sequence and consists of stacktrace entries.

A ''stacktrace entry'' represents an evaluation in a stacktrace. It is represented by {{lc|std::stacktrace_entry}} in the C++ standard library.

===Template parameters===
{{par begin}}
{{par|Allocator|An allocator that is used to acquire/release memory and to construct/destroy the elements in that memory. The type must meet the requirements of {{named req|Allocator}}. The program is ill-formed if {{tt|Allocator::value_type}} is not {{lc|std::stacktrace_entry}}.}}
{{par end}}

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|value_type}}|{{lc|std::stacktrace_entry}}}}
{{dsc|{{tt|const_reference}}|{{co|const value_type&amp;}}}}
{{dsc|{{tt|reference}}|{{co|value_type&amp;}}}}
{{dsc|{{tt|const_iterator}}|implementation-defined const {{named req|RandomAccessIterator}} type that models {{lconcept|random_access_iterator}}}}
{{dsc|{{tt|iterator}}|{{tt|const_iterator}}}}
{{dsc|{{tt|reverse_iterator}}|{{co|std::reverse_iterator&lt;iterator&gt;}}}}
{{dsc|{{tt|reverse_const_iterator}}|{{co|std::reverse_iterator&lt;const_iterator&gt;}}}}
{{dsc|{{tt|difference_type}}|implementation-defined signed integer type}}
{{dsc|{{tt|size_type}}|implementation-defined unsigned integer type}}
{{dsc|{{tt|allocator_type}}|{{tt|Allocator}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc constructor}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc destructor}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc operator{{=}}}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc current}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc get_allocator}}

{{dsc h2|Iterators}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc begin}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc end}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc rbegin}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc rend}}

{{dsc h2|Capacity}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc empty}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc size}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc max_size}}

{{dsc h2|Element access}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc operator at}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc at}}

{{dsc h2|Modifiers}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc swap}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc tfun|cpp/utility/basic_stacktrace/operator cmp|title=operator==&lt;br&gt;operator&lt;=&gt;|notes={{mark c++23}}|compares the sizes and the contents of two {{tt|basic_stacktrace}} values}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc swap2}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc to_string}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc operator ltlt}}
{{dsc end}}

===Helper classes===
{{dsc begin}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc hash}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc formatter}}
{{dsc end}}

===Notes===
Support for custom allocators is provided for using {{tt|basic_stacktrace}} on a hot path or in embedded environments. Users can allocate {{tt|stacktrace_entry}} objects on the stack or in some other place, where appropriate.

The sequence of {{lc|std::stacktrace_entry}} objects owned by a {{tt|std::basic_stacktrace}} is immutable, and either is empty or represents a contiguous interval of the whole stacktrace.

{{co|boost::stacktrace::basic_stacktrace}} (available in [https://www.boost.org/doc/libs/release/doc/html/stacktrace.html Boost.Stacktrace]) can be used instead when {{tt|std::basic_stacktrace}} is not available.

{{ftm begin|std=1|comment=1}}
{{ftm|__cpp_lib_stacktrace|std=C++23|value=202011L|[[#top|Stacktrace]] library}}
{{ftm|__cpp_lib_formatters|Formatting {{lc|std::thread::id}} and {{lc|std::stacktrace}}|value=202302L|std=C++23}}
{{ftm end}}

===Example===
{{example
|The output obtained using Compiler Explorer: [https://godbolt.org/z/sjxvc97a7 msvc] and [https://godbolt.org/z/v117ccshs gcc].
|code=
#include &lt;iostream&gt;
#include &lt;stacktrace&gt;

int nested_func(int c)
{
    std::cout &lt;&lt; std::stacktrace::current() &lt;&lt; '\n';
    return c + 1;
}

int func(int b)
{
    return nested_func(b + 1);
}

int main()
{
    std::cout &lt;&lt; func(777);
}
|p=true
|output=
// msvc output (the lines ending with '⤶' arrows are split to fit the width):
0&gt; C:\Users\ContainerAdministrator\AppData\Local\Temp\compiler-explorer-compiler20221122-⤶
31624-2ja1sf.8ytzw\example.cpp(6): output_s!nested_func+0x1F
1&gt; C:\Users\ContainerAdministrator\AppData\Local\Temp\compiler-explorer-compiler20221122-⤶
31624-2ja1sf.8ytzw\example.cpp(12): output_s!func+0x15
2&gt; C:\Users\ContainerAdministrator\AppData\Local\Temp\compiler-explorer-compiler20221122-⤶
31624-2ja1sf.8ytzw\example.cpp(15): output_s!main+0xE
3&gt; D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl(288): output_s!⤶
__scrt_common_main_seh+0x10C
4&gt; KERNEL32!BaseThreadInitThunk+0x14
5&gt; ntdll!RtlUserThreadStart+0x21
779

gcc output:
   0# nested_func(int) at /app/example.cpp:7
   1# func(int) at /app/example.cpp:13
   2#      at /app/example.cpp:18
   3#      at :0
   4#      at :0
   5# 

779
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc stacktrace_entry}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
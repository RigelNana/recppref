{{cpp/title|source_location}}
{{cpp/utility/source_location/navbar}}
{{dcl begin}}
{{dcl header|source_location}}
{{dcl|since=c++20|
struct source_location;
}}
{{dcl end}}

The {{tt|std::source_location}} class represents certain information about the source code, such as file names, line numbers, and function names. Previously, functions that desire to obtain this information about the call site (for logging, testing, or debugging purposes) must use macros so that [[cpp/preprocessor/replace#Predefined macros|predefined macros]] like {{c|__LINE__}} and {{c|__FILE__}} are expanded in the context of the caller. The {{tt|std::source_location}} class provides a better alternative.

{{tt|std::source_location}} meets the {{named req|DefaultConstructible}}, {{named req|CopyConstructible}}, {{named req|CopyAssignable}}, {{named req|Destructible}} and {{named req|Swappable}} requirements.

Additionally, the following conditions are {{c|true}}:
* {{c|std::is_nothrow_move_constructible_v&lt;std::source_location&gt;}},
* {{c|std::is_nothrow_move_assignable_v&lt;std::source_location&gt;}}, and
* {{c|std::is_nothrow_swappable_v&lt;std::source_location&gt;}}.

It is intended that {{tt|std::source_location}} has a small size and can be copied efficiently.

It is unspecified whether the copy/move constructors and the copy/move assignment operators of {{tt|std::source_location}} are trivial and/or constexpr.

===Member functions===
{{dsc begin}}
{{dsc h2|Creation}}
{{dsc inc|cpp/utility/source_location/dsc constructor}}
{{dsc inc|cpp/utility/source_location/dsc current}}

{{dsc h2|Field access}}
{{dsc inc|cpp/utility/source_location/dsc line}}
{{dsc inc|cpp/utility/source_location/dsc column}}
{{dsc inc|cpp/utility/source_location/dsc file_name}}
{{dsc inc|cpp/utility/source_location/dsc function_name}}
{{dsc end}}

===Notes===
{{feature test macro|__cpp_lib_source_location|std=C++20|value=201907L|Source-code information capture ([[#Top|{{tt|std::source_location}}]])}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;source_location&gt;
#include &lt;string_view&gt;

void log(const std::string_view message,
         const std::source_location location =
               std::source_location::current())
{
    std::clog &lt;&lt; "file: "
              &lt;&lt; location.file_name() &lt;&lt; '('
              &lt;&lt; location.line() &lt;&lt; ':'
              &lt;&lt; location.column() &lt;&lt; ") `"
              &lt;&lt; location.function_name() &lt;&lt; "`: "
              &lt;&lt; message &lt;&lt; '\n';
}

template&lt;typename T&gt;
void fun(T x)
{
    log(x); // line 20
}

int main(int, char*[])
{
    log("Hello world!"); // line 25
    fun("Hello C++20!");
}
|p=true
|output=
file: main.cpp(25:8) `int main(int, char**)`: Hello world!
file: main.cpp(20:8) `void fun(T) [with T = const char*]`: Hello C++20!
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/preprocessor/dsc line}}
{{dsc inc|cpp/utility/dsc stacktrace_entry}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
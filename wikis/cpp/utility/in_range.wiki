{{cpp/title|in_range}}
{{cpp/utility/navbar}}

{{dcl begin}}
{{dcl header|utility}}
{{dcl|since=c++20|1=
template&lt; class R, class T &gt;
constexpr bool in_range( T t ) noexcept;
}}
{{dcl end}}

Returns {{c|true}} if the value of {{c|t}} is in the range of values that can be represented in {{tt|R}}, that is, if {{c|t}} can be converted to {{tt|R}} in a value-preserving manner.

It is a compile-time error if either {{tt|T}} or {{tt|U}} is a non-[[cpp/language/types#Integer types|integer]] type, a character type, or {{c/core|bool}}.

===Parameters===
{{par begin}}
{{par|t|value to test}}
{{par end}}

===Return value===
{{c|true}} if the value of {{c|t}} is representable in {{tt|R}}, {{c|false}} otherwise.

===Possible implementation===
{{eq fun|1=
template&lt;class R, class T&gt;
constexpr bool in_range(T t) noexcept
{
    return std::cmp_greater_equal(t, std::numeric_limits&lt;R&gt;::min()) &amp;&amp;
        std::cmp_less_equal(t, std::numeric_limits&lt;R&gt;::max());
}
}}

===Notes===
This function cannot be used with [[cpp/language/enum|enums]] (including {{ltt std|cpp/types/byte}}), {{c/core|char}}, {{c/core|char8_t}}, {{c/core|char16_t}}, {{c/core|char32_t}}, {{c/core|wchar_t}} and {{c/core|bool}}.

{{feature test macro|__cpp_lib_integer_comparison_functions|Integer comparison functions|value=202002L|std=C++20}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;utility&gt;

int main()
{
    std::cout &lt;&lt; std::boolalpha;

    std::cout &lt;&lt; std::in_range&lt;std::size_t&gt;(-1) &lt;&lt; '\n';
    std::cout &lt;&lt; std::in_range&lt;std::size_t&gt;(42) &lt;&lt; '\n';
}
|output=
false
true
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc min}}
{{dsc inc|cpp/algorithm/ranges/dsc max}}
{{dsc inc|cpp/algorithm/ranges/dsc clamp}}
{{dsc inc|cpp/numeric/dsc lerp}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
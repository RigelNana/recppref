{{title|Variadic functions}}
{{cpp/utility/variadic/navbar}}

Variadic functions are functions (e.g. {{lc|std::printf}}) which take a [[cpp/language/variadic_arguments|variable number of arguments]].

To declare a variadic function, an ellipsis appears after the list of parameters, e.g. {{c|int printf(const char* format...);}}, which may be preceded by an optional comma. See [[cpp/language/variadic_arguments|Variadic arguments]] for additional detail on the syntax, automatic argument conversions and the alternatives.

To access the variadic arguments from the function body, the following library facilities are provided:

{{dsc begin}}
{{dsc header|cstdarg}}
{{dsc inc|cpp/utility/variadic/dsc va_start}}
{{dsc inc|cpp/utility/variadic/dsc va_arg}}
{{dsc inc|cpp/utility/variadic/dsc va_copy}}
{{dsc inc|cpp/utility/variadic/dsc va_end}}
{{dsc inc|cpp/utility/variadic/dsc va_list}}
{{dsc end}}

===Example===
{{example
|code=
#include &lt;cstdarg&gt;
#include &lt;iostream&gt;

void simple_printf(const char* fmt...) // C-style "const char* fmt, ..." is also valid
{
    va_list args;
    va_start(args, fmt);

    while (*fmt != '\0')
    {
        if (*fmt == 'd')
        {
            int i = va_arg(args, int);
            std::cout &lt;&lt; i &lt;&lt; '\n';
        }
        else if (*fmt == 'c')
        {
            // note automatic conversion to integral type
            int c = va_arg(args, int);
            std::cout &lt;&lt; static_cast&lt;char&gt;(c) &lt;&lt; '\n';
        }
        else if (*fmt == 'f')
        {
            double d = va_arg(args, double);
            std::cout &lt;&lt; d &lt;&lt; '\n';
        }
        ++fmt;
    }

    va_end(args);
}

int main()
{
    simple_printf("dcff", 3, 'a', 1.999, 42.5); 
}
|output=
3
a
1.999
42.5
}}

===See also===
{{dsc begin}}
{{dsc see c|c/variadic|Variadic functions|nomono=true}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
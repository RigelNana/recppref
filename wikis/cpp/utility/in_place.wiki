{{cpp/title|in_place|in_place_type|in_place_index|in_place_t|in_place_type_t|in_place_index_t}}
{{cpp/utility/navbar}}
{{dcl begin}}
{{dcl header|utility}}
{{dcl|num=1|since=c++17|1=
struct in_place_t { explicit in_place_t() = default; };
}}
{{dcl|num=2|since=c++17|1=
inline constexpr std::in_place_t in_place {};
}}
{{dcl|num=3|since=c++17|1=
template&lt; class T &gt;
struct in_place_type_t { explicit in_place_type_t() = default; };
}}
{{dcl|num=4|since=c++17|1=
template&lt; class T &gt;
constexpr std::in_place_type_t&lt;T&gt; in_place_type {};
}}
{{dcl|num=5|since=c++17|1=
template&lt; std::size_t I &gt;
struct in_place_index_t { explicit in_place_index_t() = default; };
}}
{{dcl|num=6|since=c++17|1=
template&lt; std::size_t I &gt;
constexpr std::in_place_index_t&lt;I&gt; in_place_index {};
}}
{{dcl end}}

@1,3,5@ The type/type templates {{tt|std::in_place_t}}, {{tt|std::in_place_type_t}} and {{tt|std::in_place_index_t}} can be used in the constructor's parameter list to match the intended tag.

@2,4,6@ The corresponding {{tt|std::in_place}}, {{tt|std::in_place_type}}, and {{tt|std::in_place_index}} instances of {{v|1,3,5}} are disambiguation tags that can be passed to the constructors to indicate that the contained object should be constructed in-place, and (for the latter two) the type of the object to be constructed.

===Standard library===
The following standard library types use {{v|1-6}} as disambiguation tags:
{{dsc begin}}
{{dsc inc|cpp/utility/dsc any}}
{{dsc inc|cpp/utility/dsc expected}}
{{dsc inc|cpp/utility/functional/dsc move_only_function}}
{{dsc inc|cpp/utility/dsc optional}}
{{dsc inc|cpp/utility/dsc variant}}
{{dsc end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc sorted_unique}}
{{dsc inc|cpp/container/dsc sorted_equivalent}}
{{dsc end}}

{{langlinks|ja|ru|zh}}
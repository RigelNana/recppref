{{title|1=operator=={{petty|(std::expected)}}}}
{{cpp/utility/expected/navbar}}

{{dcl begin}}
{{dcl h|Primary template}}
{{dcl|num=1|since=c++23|1=
template&lt; class T2, class E2 &gt;
    requires (!std::is_void_v&lt;T2&gt;)
friend constexpr bool operator==( const expected&amp; lhs,
                                  const std::expected&lt;T2, E2&gt;&amp; rhs );
}}
{{dcl|num=2|since=c++23|1=
template&lt; class E2 &gt;
friend constexpr bool operator==( const expected&amp; lhs,
                                  const std::unexpected&lt;E2&gt;&amp; unex );
}}
{{dcl|num=3|since=c++23|1=
template&lt; class T2 &gt;
friend constexpr bool operator==( const expected&amp; lhs, const T2&amp; val );
}}
{{dcl h|{{c/core|void}} partial specialization}}
{{dcl|num=4|since=c++23|1=
template&lt; class T2, class E2 &gt;
  requires std::is_void_v&lt;T2&gt;
friend constexpr bool operator==( const expected&amp; lhs,
                                  const std::expected&lt;T2, E2&gt;&amp; rhs );
}}
{{dcl|num=5|since=c++23|1=
template&lt; class E2 &gt;
friend constexpr bool operator==( const expected&amp; lhs,
                                  const std::unexpected&lt;E2&gt;&amp; unex );
}}
{{dcl end}}

Performs comparison operations on {{lc|std::expected}} objects.

@1@ Compares two {{lc|std::expected}} objects. The objects compare equal if and only if both {{c|lhs}} and {{c|rhs}} contain expected values that are equal, or both contain unexpected values that are equal.
{{rev begin}}
{{rev|until=c++26|
If any of the following expressions is ill-formed, or its result is not convertible to {{c/core|bool}}, the program is ill-formed:
}}
{{rev|since=c++26|
{{cpp/enable if|all following expressions is well-formed, and their results are convertible to {{c/core|bool}}}}:
}}
{{rev end}}
* {{c|1=*lhs == *rhs}}
* {{c|1=lhs.error() == rhs.error()}}

@2@ Compares {{lc|std::expected}} object with an {{lc|std::unexpected}} object. The objects compare equal if and only if {{c|lhs}} contains an unexpected value that is equal to {{c|unex.error()}}.
{{rev begin}}
{{rev|until=c++26|
If the expression {{c|1=lhs.error() == unex.error()}} is ill-formed, or its result is not convertible to {{c/core|bool}}, the program is ill-formed.
}}
{{rev|since=c++26|
{{cpp/enable if|the expression {{c|1=lhs.error() == unex.error()}} is well-formed, and its result is convertible to {{c/core|bool}}}}.
}}
{{rev end}}

@3@ Compares {{lc|std::expected}} object with an expected value. The objects compare equal if and only if {{c|lhs}} contains an expected value that is equal to {{c|val}}.
{{rev begin}}
{{rev|until=c++26|
If the expression {{c|1=*lhs == val}} is ill-formed, or its result is not convertible to {{c/core|bool}}, the program is ill-formed.
}}
{{rev|since=c++26|
{{cpp/enable if|all following conditions are satisfied:
* {{tt|T2}} is not a specialization of {{lc|std::expected}}.
* The expression {{c|1=*lhs == val}} is well-formed, and its result is convertible to {{c/core|bool}}}}.
}}
{{rev end}}

@4@ Compares two {{lc|std::expected}} objects. The objects compare equal if and only if {{c|lhs}} and {{c|rhs}} both represent expected values, or both contain unexpected values that are equal.
{{rev begin}}
{{rev|until=c++26|
If the expression {{c|1=lhs.error() == rhs.error()}} is ill-formed, or its result is not convertible to {{c/core|bool}}, the program is ill-formed.
}}
{{rev|since=c++26|
{{cpp/enable if|the expression {{c|1=lhs.error() == rhs.error()}} is well-formed, and its result is convertible to {{c/core|bool}}}}.
}}
{{rev end}}

@5@ Compares {{lc|std::expected}} object with an {{lc|std::unexpected}} object. The objects compare equal if and only if {{c|lhs}} contains an unexpected value that is equal to {{c|unex.error()}}.
{{rev begin}}
{{rev|until=c++26|
If the expression {{c|1=lhs.error() == unex.error()}} is ill-formed, or its result is not convertible to {{c/core|bool}}, the program is ill-formed.
}}
{{rev|since=c++26|
{{cpp/enable if|the expression {{c|1=lhs.error() == unex.error()}} is well-formed, and its result is convertible to {{c/core|bool}}}}.
}}
{{rev end}}

{{cpp/hidden friend|{{tt|std::expected&lt;T, E&gt;}}|plural=yes}}

{{cpp/note synthesized eq}}

===Parameters===
{{par begin}}
{{par|lhs, rhs|{{lc|std::expected}} object(s) to compare}}
{{par|unex|{{lc|std::unexpected}} value to compare to {{c|lhs}}}}
{{par|val|value to compare to the expected value contained in {{c|lhs}}}}
{{par end}}

===Return value===
@1@ {{c multi|lhs.has_value() !{{=}} rhs.has_value() ? false :|    (lhs.has_value() ? *lhs {{==}} *rhs : lhs.error() {{==}} rhs.error())}}

@2@ {{c|1=!lhs.has_value() &amp;&amp; static_cast&lt;bool&gt;(lhs.error() == unex.error())}}

@3@ {{c|1=lhs.has_value() &amp;&amp; static_cast&lt;bool&gt;(*lhs == val)}}

@4@ {{c multi|lhs.has_value() !{{=}} rhs.has_value() ? false :|    lhs.has_value() {{!!}} static_cast&lt;bool&gt;(lhs.error() {{==}} rhs.error())}}

@5@ {{c|1=!lhs.has_value() &amp;&amp; static_cast&lt;bool&gt;(lhs.error() == unex.error())}}

===Exceptions===
Throws when and what the comparison throws.

===Notes===
{{feature test macro|__cpp_lib_constrained_equality|constrained comparison operators for {{lc|std::expected}}|value=202411L|std=C++26}}

===Example===
{{example
|code=
#include &lt;expected&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

using namespace std::string_view_literals;

int main()
{
    auto x1{"\N{GREEN HEART}"sv};
    auto x2{"\N{CROSS MARK}"sv};
    std::expected&lt;std::string_view, int&gt; e1{x1}, e2{x1}, e3{x2};
    std::unexpected u1{13};
    
    std::cout &lt;&lt; "Overload (1):\n"
              &lt;&lt; e1.value() &lt;&lt; (e1 == e2 ? " == " : " != ") &lt;&lt; *e2 &lt;&lt; '\n'
              &lt;&lt; e1.value() &lt;&lt; (e1 != e3 ? " != " : " == ") &lt;&lt; *e3 &lt;&lt; "\n\n";
    
    std::cout &lt;&lt; "Overload (2):\n"
              &lt;&lt; e1.value() &lt;&lt; (e1 == u1 ? " == " : " != ") &lt;&lt; u1.error() &lt;&lt; '\n';
    e1 = std::unexpected{13};
    std::cout &lt;&lt; e1.error() &lt;&lt; (e1 == u1 ? " == " : " != ") &lt;&lt; u1.error() &lt;&lt; '\n';
    e1 = std::unexpected{31};
    std::cout &lt;&lt; e1.error() &lt;&lt; (e1 != u1 ? " != " : " == ") &lt;&lt; u1.error() &lt;&lt; '\n';
    
    std::cout &lt;&lt; "Overload (3):\n"
              &lt;&lt; *e1 &lt;&lt; (e1 == x1 ? " == " : " != ") &lt;&lt; x1 &lt;&lt; '\n'
              &lt;&lt; *e1 &lt;&lt; (e1 != x2 ? " != " : " == ") &lt;&lt; x2 &lt;&lt; "\n\n";
}
|output=
Overload (1):
üíö == üíö
üíö != ‚ùå

Overload (2):
üíö != 13
13 == 13
31 != 13

Overload (3):
üíö == üíö
üíö != ‚ùå
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/expected/dsc unexpected}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
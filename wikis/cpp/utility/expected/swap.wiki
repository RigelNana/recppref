{{cpp/utility/expected/title|swap}}
{{cpp/utility/expected/navbar}}

{{dcl begin}}
{{dcl h|Primary template}}
{{dcl|num=1|since=c++23|
constexpr void swap( expected&amp; other ) noexcept(/* see below */);
}}
{{dcl h|{{c/core|void}} partial specialization}}
{{dcl|num=2|since=c++23|
constexpr void swap( expected&amp; other ) noexcept(/* see below */);
}}
{{dcl end}}

Swaps the contents with those of {{c|other}}.

@1@ The contained values are swapped as follows:
{|class="wikitable"
!rowspan=2|Value of&lt;br&gt;{{nbsp}}{{rlpf|operator bool|has_value}}{{nbsp}}
!colspan=2|Value of {{c|other.has_value()}}
|-
!style="font-weight: normal;"|{{c|true}}
!style="font-weight: normal;"|{{c|false}}
|-
|style="text-align: center;"|{{c|true}}
|{{box|{{c/core|using std::swap;}}&lt;br&gt;{{c/core|swap(}}{{rlpi|/#Data members|val}}{{c/core|, rhs.}}{{tti|val}}{{c/core|);}}}}
|see below
|-
|style="text-align: center;"|{{c|false}}
|{{c|other.swap(*this);}}
|{{box|{{c/core|using std::swap;}}&lt;br&gt;{{c/core|swap(}}{{rlpi|/#Data members|unex}}{{c/core|, rhs.}}{{tti|unex}}{{c/core|);}}}}
|}

@@ If {{rlpf|operator bool|has_value}} is {{c|true}} and {{c|other.has_value()}} is {{c|false}}, equivalent to:
{{box|
{{c/core|// Case 1: the move constructions of unexpected values are non-throwing:}}&lt;br&gt;
{{c/core|// ‚Äúother.unex‚Äù will be restored if the construction of ‚Äúother.val‚Äù fails}}&lt;br&gt;
{{c/core|if constexpr (std::is_nothrow_move_constructible_v&lt;E&gt;)}}&lt;br&gt;
{{c/core|{}}&lt;br&gt;
{{nbspt|4}}{{c/core|E temp(std::move(other.}}{{tti|unex}}{{c/core|));}}&lt;br&gt;
{{nbspt|4}}{{c/core|std::destroy_at(std::addressof(other.}}{{tti|unex}}{{c/core|));}}&lt;br&gt;
{{nbspt|4}}{{c/core|try}}&lt;br&gt;
{{nbspt|4}}{{c/core|{}}&lt;br&gt;
{{nbspt|8}}{{c/core|std::construct_at(std::addressof(other.}}{{tti|val}}{{c/core|), std::move(}}{{tti|val}}{{c/core|)); // may throw}}&lt;br&gt;
{{nbspt|8}}{{c/core|std::destroy_at(std::addressof(}}{{tti|val}}{{c/core|));}}&lt;br&gt;
{{nbspt|8}}{{c/core|std::construct_at(std::addressof(}}{{tti|unex}}{{c/core|), std::move(temp));}}&lt;br&gt;
{{nbspt|4}}{{c/core|}&lt;!----&gt;}}&lt;br&gt;
{{nbspt|4}}{{c/core|catch(...)}}&lt;br&gt;
{{nbspt|4}}{{c/core|{}}&lt;br&gt;
{{nbspt|8}}{{c/core|std::construct_at(std::addressof(other.}}{{tti|unex}}{{c/core|), std::move(temp));}}&lt;br&gt;
{{nbspt|8}}{{c/core|throw;}}&lt;br&gt;
{{nbspt|4}}{{c/core|}&lt;!----&gt;}}&lt;br&gt;
{{c/core|}&lt;!----&gt;}}&lt;br&gt;
{{c/core|// Case 2: the move constructions of expected values are non-throwing:}}&lt;br&gt;
{{c/core|// ‚Äúthis-&gt;val‚Äù will be restored if the construction of ‚Äúthis-&gt;unex‚Äù fails}}&lt;br&gt;
{{c/core|else}}&lt;br&gt;
{{c/core|{}}&lt;br&gt;
{{nbspt|4}}{{c/core|T temp(std::move(}}{{tti|val}}{{c/core|));}}&lt;br&gt;
{{nbspt|4}}{{c/core|std::destroy_at(std::addressof(}}{{tti|val}}{{c/core|));}}&lt;br&gt;
{{nbspt|4}}{{c/core|try}}&lt;br&gt;
{{nbspt|4}}{{c/core|{}}&lt;br&gt;
{{nbspt|8}}{{c/core|std::construct_at(std::addressof(}}{{tti|unex}}{{c/core|), std::move(other.}}{{tti|unex}}{{c/core|)); // may throw}}{{nbspt}}&lt;br&gt;
{{nbspt|8}}{{c/core|std::destroy_at(std::addressof(other.}}{{tti|unex}}{{c/core|));}}&lt;br&gt;
{{nbspt|8}}{{c/core|std::construct_at(std::addressof(other.}}{{tti|val}}{{c/core|), std::move(temp));}}&lt;br&gt;
{{nbspt|4}}{{c/core|}&lt;!----&gt;}}&lt;br&gt;
{{nbspt|4}}{{c/core|catch(...)}}&lt;br&gt;
{{nbspt|4}}{{c/core|{}}&lt;br&gt;
{{nbspt|8}}{{c/core|std::construct_at(std::addressof(}}{{tti|val}}{{c/core|), std::move(temp));}}&lt;br&gt;
{{nbspt|8}}{{c/core|throw;}}&lt;br&gt;
{{nbspt|4}}{{c/core|}&lt;!----&gt;}}&lt;br&gt;
{{c/core|}&lt;!----&gt;}}&lt;br&gt;
{{rlpi|/#Data members|has_val}}{{nbspt}}{{c/core|1== false;}}&lt;br&gt;
{{c/core|rhs.}}{{tti|has_val}}{{nbspt}}{{c/core|1== true;}}
}}

@@ {{cpp/enable if|all following values are {{c|true}}}}:
* {{c|std::is_swappable_v&lt;T&gt;}}
* {{c|std::is_swappable_v&lt;E&gt;}}
* {{c|std::is_move_constructible_v&lt;T&gt; &amp;&amp; std::is_move_constructible_v&lt;E&gt;}}
* {{c|std::is_nothrow_move_constructible_v&lt;T&gt; {{!!}} std::is_nothrow_move_constructible_v&lt;E&gt;}}

@2@ The unexpected values are swapped as follows:
{|class="wikitable"
!rowspan=2|Value of&lt;br&gt;{{nbsp}}{{rlpf|operator bool|has_value}}{{nbsp}}
!colspan=2|Value of {{c|other.has_value()}}
|-
!style="font-weight: normal;"|{{c|true}}
!style="font-weight: normal;"|{{c|false}}
|-
|style="text-align: center;"|{{c|true}}
|{{box|{{c/core|using std::swap;}}&lt;br&gt;{{c/core|swap(}}{{rlpi|/#Data members|val}}{{c/core|, rhs.}}{{tti|val}}{{c/core|);}}}}
|{{box|{{c/core|std::construct_at(std::addressof(}}{{tti|unex}}{{c/core|),}}&lt;br&gt;{{nbspt|18}}{{c/core|std::move(rhs.}}{{tti|unex}}{{c/core|));}}&lt;br&gt;{{c/core|std::destroy_at(std::addressof(rhs.}}{{tti|unex}}{{c/core|));}}&lt;br&gt;{{tti|has_val}}{{nbspt}}{{c/core|1== false;}}&lt;br&gt;{{c/core|rhs.}}{{tti|has_val}}{{nbspt}}{{c/core|1== true;}}}}
|-
|style="text-align: center;"|{{c|false}}
|{{c|other.swap(*this);}}
|{{box|{{c/core|using std::swap;}}&lt;br&gt;{{c/core|swap(}}{{rlpi|/#Data members|unex}}{{c/core|, rhs.}}{{tti|unex}}{{c/core|);}}}}
|}

@@ {{cpp/enable if|{{c|std::is_swappable_v&lt;E&gt;}} and {{c|std::is_move_constructible_v&lt;E&gt;}} are both {{c|true}}}}.

===Parameters===
{{par begin}}
{{par|other|the {{tt|expected}} object to exchange the contents with}}
{{par end}}

===Exceptions===
@1@ {{noexcept|
    std::is_nothrow_move_constructible_v&lt;T&gt; &amp;&amp; std::is_nothrow_swappable_v&lt;T&gt; &amp;&amp;
    std::is_nothrow_move_constructible_v&lt;E&gt; &amp;&amp; std::is_nothrow_swappable_v&lt;E&gt;
}}

@2@ {{noexcept|
    std::is_nothrow_move_constructible_v&lt;E&gt; &amp;&amp; std::is_nothrow_swappable_v&lt;E&gt;
}}

===Example===
{{example
|code=
#include &lt;expected&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

using Ex = std::expected&lt;std::string, int&gt;;

void show(const Ex&amp; ex1, const Ex&amp; ex2)
{
    for (int i{}; i &lt; 2; ++i)
    {
        std::cout &lt;&lt; (i ? "ex2" : "ex1");
        if (const Ex&amp; ex = (i ? ex2 : ex1); ex.has_value())
            std::cout &lt;&lt; ".has_value() = " &lt;&lt; *ex &lt;&lt; '\n';
        else
            std::cout &lt;&lt; ".error() = " &lt;&lt; ex.error() &lt;&lt; '\n';
    }
}

int main()
{
    Ex ex1("\N{CAT FACE}");
    Ex ex2{"\N{GREEN HEART}"};
    show(ex1, ex2);
    ex1.swap(ex2);
    std::cout &lt;&lt; "ex1.swap(ex2);\n";
    show(ex1, ex2);
    std::cout &lt;&lt; '\n';

    ex2 = std::unexpected(13);
    show(ex1, ex2);
    std::cout &lt;&lt; "ex1.swap(ex2);\n";
    ex1.swap(ex2);
    show(ex1, ex2);
    std::cout &lt;&lt; '\n';

    ex2 = std::unexpected(19937);
    show(ex1, ex2);
    std::cout &lt;&lt; "ex1.swap(ex2);\n";
    ex1.swap(ex2);
    show(ex1, ex2);
}
|output=
ex1.has_value() = üê±
ex2.has_value() = üíö
ex1.swap(ex2);
ex1.has_value() = üíö
ex2.has_value() = üê±

ex1.has_value() = üíö
ex2.error() = 13
ex1.swap(ex2);
ex1.error() = 13
ex2.has_value() = üíö

ex1.error() = 13
ex2.error() = 19937
ex1.swap(ex2);
ex1.error() = 19937
ex2.error() = 13
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/expected/dsc swap2}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
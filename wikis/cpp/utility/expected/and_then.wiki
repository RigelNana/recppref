{{cpp/utility/expected/title|and_then}}
{{cpp/utility/expected/navbar}}
{{dcl begin}}
{{dcl h|Main template}}
{{dcla|num=1|since=c++23|
template&lt; class F &gt;
constexpr auto and_then( F&amp;&amp; f ) &amp;;
}}
{{dcl|num=2|since=c++23|
template&lt; class F &gt;
constexpr auto and_then( F&amp;&amp; f ) const&amp;;
}}
{{dcla|num=3|since=c++23|
template&lt; class F &gt;
constexpr auto and_then( F&amp;&amp; f ) &amp;&amp;;
}}
{{dcl|num=4|since=c++23|
template&lt; class F &gt;
constexpr auto and_then( F&amp;&amp; f ) const&amp;&amp;;
}}
{{dcl h|{{c/core|void}} partial specialization}}
{{dcla|num=5|since=c++23|
template&lt; class F &gt;
constexpr auto and_then( F&amp;&amp; f ) &amp;;
}}
{{dcl|num=6|since=c++23|
template&lt; class F &gt;
constexpr auto and_then( F&amp;&amp; f ) const&amp;;
}}
{{dcla|num=7|since=c++23|
template&lt; class F &gt;
constexpr auto and_then( F&amp;&amp; f ) &amp;&amp;;
}}
{{dcl|num=8|since=c++23|
template&lt; class F &gt;
constexpr auto and_then( F&amp;&amp; f ) const&amp;&amp;;
}}
{{dcl end}}

If {{c|*this}} represents an expected value, invokes {{c|f}} and returns its result. Otherwise, returns a {{tt|std::expected}} object that contains an unexpected value, which is initialized with the unexpected value of {{c|*this}}.
@1-4@ {{c|f}} is invoked with the expected value {{rlpi|/#Data members|val}} as the argument.
@5-8@ {{c|f}} is invoked without any argument.

Given type {{tt|U}} as:
@1,2@ {{c/core|std::remove_cvref_t&lt;std::invoke_result_t&lt;F, decltype((}}{{tti|val}}{{c/core|))&gt;&gt;}}
@3,4@ {{c/core|std::remove_cvref_t&lt;std::invoke_result_t&lt;F, decltype(std::move(}}{{tti|val}}{{c/core|))&gt;&gt;}}
@5-8@ {{c/core|std::remove_cvref_t&lt;std::invoke_result_t&lt;F&gt;&gt;}}

If {{tt|U}} is not a specialization of {{tt|std::expected}}, or {{c|std::is_same_v&lt;U::error_type, E&gt;}} is {{c|false}}, the program is ill-formed.

@1,2@ {{cpp/enable if|plural=yes|{{c|std::is_constructible_v&lt;E, decltype(error())&gt;}} is {{c|true}}}}.

@3,4@ {{cpp/enable if|plural=yes|{{c|std::is_constructible_v&lt;E, decltype(std::move(error()))&gt;}} is {{c|true}}}}.

@5,6@ {{cpp/enable if|plural=yes|{{c|std::is_constructible_v&lt;E, decltype(error())&gt;}} is {{c|true}}}}.

@7,8@ {{cpp/enable if|plural=yes|{{c|std::is_constructible_v&lt;E, decltype(std::move(error()))&gt;}} is {{c|true}}}}.

===Parameters===
{{par begin}}
{{par|f|a suitable function or {{named req|Callable}} object that returns a {{lc|std::expected}}}}
{{par end}}

===Return value===
{|class="wikitable"
!rowspan=2|{{nbsp}}Overload{{nbsp}}
!colspan=2|Value of {{rlpf|operator bool|has_value}}
|-
!style="font-weight: normal;"|{{c|true}}
!style="font-weight: normal;"|{{c|false}}
|-
|style="text-align: center;"|{{vl|1,2}}
|{{box|{{c/core|std::invoke(std::forward&lt;F&gt;(f),}}{{nbspt}}{{tti|val}}{{c/core|)}}}}
|{{c|U(std::unexpect, error())}}
|-
|style="text-align: center;"|{{vl|3,4}}
|{{box|{{c/core|std::invoke(std::forward&lt;F&gt;(f),std::move(}}{{tti|val}}{{c/core|))}}}}
|{{c|U(std::unexpect, std::move(error()))}}
|-
|style="text-align: center;"|{{vl|5,6}}
|rowspan=2|{{c|std::invoke(std::forward&lt;F&gt;(f))}}
|{{c|U(std::unexpect, error())}}
|-
|style="text-align: center;"|{{vl|7,8}}
|{{c|U(std::unexpect, std::move(error()))}}
|}

===Notes===
{{ftm begin|std=1|comment=1}}
{{ftm|__cpp_lib_expected|std=C++23|value=202211L|Monadic functions for {{tt|std::expected}}}}
{{ftm end}}

===Example===
{{example}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3938|std=C++23|before=the expected value was obtained by {{c|value()}}&lt;ref&gt;{{rlpf|value}} requires {{tt|E}} to be copy constructible (see {{lwg|3843}}), where {{rlpt|operator*}} does not.&lt;/ref&gt;|after=changed to {{c|**this}}}}
{{dr list item|wg=lwg|dr=3973|std=C++23|before=the expected value was obtained by {{c|**this}}&lt;ref&gt;{{c|**this}} can trigger [[cpp/language/adl|argument-dependent lookup]].&lt;/ref&gt;|after=changed to {{box|{{rlpi|/#Data members|val}}}}}}
{{dr list end}}
&lt;references/&gt;

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/expected/dsc unexpect_t}}
{{dsc inc|cpp/utility/expected/dsc transform}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
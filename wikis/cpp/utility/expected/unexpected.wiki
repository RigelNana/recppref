{{cpp/title|unexpected}}
{{cpp/utility/expected/navbar}}

{{dcl begin}}
{{dcl header|expected}}
{{dcl|since=c++23|1=
template&lt; class E &gt;
class unexpected;
}}
{{dcl end}}

The class template {{tt|std::unexpected}} represents an unexpected value stored in {{lc|std::expected}}. In particular, {{lc|std::expected}} has constructors with {{tt|std::unexpected}} as a single argument, which creates an {{rlpt|/|expected}} object that contains an unexpected value.

A program is ill-formed if it instantiates an {{tt|unexpected}} with a non-object type, an array type, a specialization of {{tt|std::unexpected}}, or a cv-qualified type.

===Template parameters===
{{par begin}}
{{par|E|the type of the unexpected value. The type must not be an array type, a non-object type, a specialization of {{tt|std::unexpected}}, or a cv-qualified type.}}
{{par end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|{{PAGENAME}}#ctor|constructs the {{tt|unexpected}} object}}
{{dsc mem dtor|nolink=true|destroys the {{tt|unexpected}} object, along with the stored value|notes={{mark implicit}}}}
{{dsc mem fun|nolink=true|operator{{=}}|assigns the stored value|notes={{mark implicit}}}}
{{dsc mem fun|{{PAGENAME}}#error|title=error|accesses the stored value}}
{{dsc mem fun|{{PAGENAME}}#swap|title=swap|swaps the stored value}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc tfun|{{PAGENAME}}#compare|title=operator==|compares the stored value|notes={{mark c++23}}}}
{{dsc tfun|{{PAGENAME}}#swap2|title=swap{{dsc small|(std::unexpected)}}|specializes the {{lc|std::swap}} algorithm|notes={{mark c++23}}}}
{{dsc end}}

{{anchor|ctor}}
{{member|1={{small|std::unexpected::}}unexpected|2=
{{dcl begin}}
{{dcl|num=1|1=
constexpr unexpected( const unexpected&amp; ) = default;
}}
{{dcl|num=2|1=
constexpr unexpected( unexpected&amp;&amp; ) = default;
}}
{{dcl|num=3|1=
template&lt; class Err = E &gt;
constexpr explicit unexpected( Err&amp;&amp; e );
}}
{{dcl|num=4|1=
template&lt; class... Args &gt;
constexpr explicit unexpected( std::in_place_t, Args&amp;&amp;... args );
}}
{{dcl|num=5|1=
template&lt; class U, class... Args &gt;
constexpr explicit unexpected( std::in_place_t,
                               std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args );
}}
{{dcl end}}

Constructs a {{tt|std::unexpected}} object.

@1,2@ Copy/move constructor. Copies or moves the stored value, respectively.
@3@ Constructs the stored value, as if by [[cpp/language/direct initialization|direct-initializing]] a value of type {{tt|E}} from {{c|std::forward&lt;Err&gt;(e)}}.
* {{cpp/enable_if|
** {{c|std::is_same_v&lt;std::remove_cvref_t&lt;Err&gt;, unexpected&gt;}} is false, and
** {{c|std::is_same_v&lt;std::remove_cvref_t&lt;Err&gt;, std::in_place_t&gt;}} is false, and
** {{c|std::is_constructible_v&lt;E, Err&gt;}} is true.
}}
@4@ Constructs the stored value, as if by [[cpp/language/direct initialization|direct-initializing]] a value of type {{tt|E}} from the arguments {{c|std::forward&lt;Args&gt;(args)...}}.
* {{cpp/enable_if|{{c|std::is_constructible_v&lt;E, Args...&gt;}} is true.}}
@5@ Constructs the stored value, as if by [[cpp/language/direct initialization|direct-initializing]] a value of type {{tt|E}} from the arguments {{c|il, std::forward&lt;Args&gt;(args)...}}.
* {{cpp/enable_if|{{c|std::is_constructible_v&lt;E, std::initializer_list&lt;U&gt;&amp;, Args...&gt;}} is true.}}

===Parameters===
{{par begin}}
{{par|e|value with which to initialize the contained value}}
{{par|args...|arguments with which to initialize the contained value}}
{{par|il|initializer list with which to initialize the contained value}}
{{par end}}

===Exceptions===
Throws any exception thrown by the constructor of {{tt|E}}.
}}

{{anchor|error}}
{{member|1={{small|std::unexpected::}}error|2=
{{dcl begin}}
{{dcl|1=
constexpr const E&amp; error() const&amp; noexcept;
constexpr E&amp; error() &amp; noexcept;
constexpr const E&amp;&amp; error() const&amp;&amp; noexcept;
constexpr E&amp;&amp; error() &amp;&amp; noexcept;
}}
{{dcl end}}

Returns a reference to the stored value.
}}

{{anchor|swap}}
{{member|1={{small|std::unexpected::}}swap|2=
{{dcl begin}}
{{dcl|1=
constexpr void swap( unexpected&amp; other ) noexcept(std::is_nothrow_swappable_v&lt;E&gt;);
}}
{{dcl end}}

Swaps the stored values, as if by {{c|using std::swap; swap(error(), other.error());}}.

The program is ill-formed if {{c|std::is_swappable_v&lt;E&gt;}} is false.
}}

{{anchor|compare}}
{{member|1=operator=={{small|(std::unexpected)}}|2=
{{dcl begin}}
{{dcl|1=
template&lt; class E2 &gt;
friend constexpr bool operator==( unexpected&amp; x, std::unexpected&lt;E2&gt;&amp; y );
}}
{{dcl end}}

Compares the stored values, as if by {{c|1=return x.error() == y.error()}}.

If the expression {{c|1=x.error() == e.error()}} is not well-formed, or if its result is not convertible to {{c/core|bool}}, the program is ill-formed.

{{cpp/hidden friend|std::unexpected&lt;E&gt;}}
}}

{{anchor|swap2}}
{{member|1=swap{{small|(std::unexpected)}}|2=
{{dcl begin}}
{{dcl|1=
friend constexpr void
swap( unexpected&amp; x, unexpected&amp; y ) noexcept(noexcept(x.swap(y)));
}}
{{dcl end}}

Equivalent to {{c|x.swap(y)}}.

{{cpp/enable if|{{c|std::is_swappable_v&lt;E&gt;}} is true.}}

{{cpp/hidden friend|std::unexpected&lt;E&gt;}}
}}

===Deduction guides===
{{dcl begin}}
{{dcl|since=c++23|1=
template&lt; class E &gt;
unexpected(E) -&gt; unexpected&lt;E&gt;;
}}
{{dcl end}}

The [[cpp/language/class template argument deduction|deduction guide]] is provided for {{lc|unexpected}} to allow deduction from the constructor argument.

===Notes===
Prior to C++17, the name {{ltt|cpp/error/unexpected|std::unexpected}} denoted the function called by the C++ runtime when a dynamic exception specification was violated.

===Example===
{{example
|code=
#include &lt;expected&gt;
#include &lt;iostream&gt;

enum class error
{
    compile_time_error,
    runtime_error
};

[[nodiscard]] auto unexpected_runtime_error() -&gt; std::expected&lt;int, error&gt;
{
    return std::unexpected(error::runtime_error);
}

int main()
{
    std::expected&lt;double, int&gt; ex = std::unexpected(3);

    if (!ex)
        std::cout &lt;&lt; "ex contains an error value\n";

    if (ex == std::unexpected(3))
        std::cout &lt;&lt; "The error value is equal to 3\n";

    const auto e = unexpected_runtime_error();

    e.and_then([](const auto&amp; e) -&gt; std::expected&lt;int, error&gt;
    {
        std::cout &lt;&lt; "and_then: " &lt;&lt; int(e); // not printed
        return {};
    })
    .or_else([](const auto&amp; e) -&gt; std::expected&lt;int, error&gt;
    {
        std::cout &lt;&lt; "or_else: " &lt;&lt; int(e); // prints this line
        return {};
    });
}
|output=
ex contains an error value
The error value is equal to 3
or_else: 1
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/expected/dsc constructor}}
{{dsc inc|cpp/utility/expected/dsc operator cmp}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
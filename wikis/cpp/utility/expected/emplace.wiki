{{cpp/utility/expected/title|emplace}}
{{cpp/utility/expected/navbar}}

{{dcl begin}}
{{dcl h|Primary template}}
{{dcl|num=1|since=c++23|
template&lt; class... Args &gt;
constexpr T&amp; emplace( Args&amp;&amp;... args ) noexcept;
}}
{{dcl|num=2|since=c++23|
template&lt; class U, class... Args &gt;
constexpr T&amp; emplace( std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args ) noexcept;
}}
{{dcl h|{{c/core|void}} partial specialization}}
{{dcl|num=3|since=c++23|
constexpr void emplace() noexcept;
}}
{{dcl end}}

Constructs an expected value in-place. After the call, {{rlpf|operator bool|has_value}} returns true.

@1@ Destroys the contained value, then [[cpp/language/direct initialization|direct-initializes]] the expected value contained in {{c|*this}} with {{c|std::forward&lt;Args&gt;(args)...}}.
@@ {{cpp/enable if|{{c|std::is_nothrow_constructible_v&lt;T, Args...&gt;}} is {{c|true}}}}.

@2@ Destroys the contained value, then direct-initializes the expected value contained in {{c|*this}} with {{c|il}} and {{c|std::forward&lt;Args&gt;(args)...}}.
@@ {{cpp/enable if|{{c|std::is_nothrow_constructible_v&lt;T, std::initializer_list&lt;U&gt;&amp;, Args...&gt;}} is {{c|true}}}}.

@3@ If {{c|*this}} contains an unexpected value, destroys that value.

===Parameters===
{{par begin}}
{{par|args|the arguments to pass to the constructor}}
{{par|il|the initializer list to pass to the constructor}}
{{par end}}

===Return value===
@1@ {{box|{{c/core|*std::construct_at(std::addressof(}}{{rlpi|/#Data members|val}}{{c/core|), std::forward&lt;Args&gt;(args)...)}}}}

@2@ {{box|{{c/core|*std::construct_at(std::addressof(}}{{rlpi|/#Data members|val}}{{c/core|), il, std::forward&lt;Args&gt;(args)...)}}}}

===Notes===
If the construction of {{tt|T}} is potentially-throwing, {{rlpt|1=operator=}} can be used instead.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/expected/dsc operator{{=}}}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
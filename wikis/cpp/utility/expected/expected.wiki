{{cpp/utility/expected/title|expected}}
{{cpp/utility/expected/navbar}}
{{dcl begin}}
{{dcl h|Main template}}
{{dcla|num=1|since=c++23|
constexpr expected();
}}
{{dcla|num=2|since=c++23|
constexpr expected( const expected&amp; other );
}}
{{dcla|num=3|since=c++23|
constexpr expected( expected&amp;&amp; other ) noexcept(/* see below */);
}}
{{dcla|num=4|since=c++23|notes={{mark|conditionally explicit}}|
template&lt; class U, class G &gt;
constexpr expected( const expected&lt;U, G&gt;&amp; other );
}}
{{dcla|num=5|since=c++23|notes={{mark|conditionally explicit}}|
template&lt; class U, class G &gt;
constexpr expected( expected&lt;U, G&gt;&amp;&amp; other );
}}
{{dcla|num=6|since=c++23|1=
template&lt; class U = T &gt;
constexpr explicit(!std::is_convertible_v&lt;U, T&gt;) expected( U&amp;&amp; v );
}}
{{dcla|num=7|since=c++23|
template&lt; class G &gt;
constexpr explicit(!std::is_convertible_v&lt;const G&amp;, E&gt;)
    expected( const std::unexpected&lt;G&gt;&amp; e );
}}
{{dcla|num=8|since=c++23|
template&lt; class G &gt;
constexpr explicit(!std::is_convertible_v&lt;G, E&gt;)
    expected( std::unexpected&lt;G&gt;&amp;&amp; e );
}}
{{dcla|num=9|since=c++23|
template&lt; class... Args &gt;
constexpr explicit expected( std::in_place_t, Args&amp;&amp;... args );
}}
{{dcla|num=10|since=c++23|
template&lt; class U, class... Args &gt;
constexpr explicit
    expected( std::in_place_t,
              std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args );
}}
{{dcla|num=11|since=c++23|
template&lt; class... Args &gt;
constexpr explicit expected( std::unexpect_t, Args&amp;&amp;... args );
}}
{{dcla|num=12|since=c++23|
template&lt; class U, class... Args &gt;
constexpr explicit
    expected( std::unexpect_t,
              std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args );
}}
{{dcl h|{{c/core|void}} partial specialization}}
{{dcla|num=13|since=c++23|
constexpr expected();
}}
{{dcla|num=14|since=c++23|
constexpr expected( const expected&amp; other );
}}
{{dcla|num=15|since=c++23|
constexpr expected( expected&amp;&amp; other )
    noexcept(std::is_nothrow_move_constructible_v&lt;E&gt;);
}}
{{dcla|num=16|since=c++23|
template&lt; class U, class G &gt;
constexpr explicit(!std::is_convertible_v&lt;const G&amp;, E&gt;)
    expected( const expected&lt;U, G&gt;&amp; other );
}}
{{dcla|num=17|since=c++23|
template&lt; class U, class G &gt;
constexpr explicit(!std::is_convertible_v&lt;G, E&gt;)
    expected( expected&lt;U, G&gt;&amp;&amp; other );
}}
{{dcla|num=18|since=c++23|
template&lt; class G &gt;
constexpr explicit(!std::is_convertible_v&lt;const G&amp;, E&gt;)
    expected( const std::unexpected&lt;G&gt;&amp; e );
}}
{{dcla|num=19|since=c++23|
template&lt; class G &gt;
constexpr explicit(!std::is_convertible_v&lt;G, E&gt;)
    expected( std::unexpected&lt;G&gt;&amp;&amp; e );
}}
{{dcla|num=20|since=c++23|
template&lt; class... Args &gt;
constexpr explicit expected( std::in_place_t );
}}
{{dcla|num=21|since=c++23|
template&lt; class... Args &gt;
constexpr explicit expected( std::unexpect_t, Args&amp;&amp;... args );
}}
{{dcla|num=22|since=c++23|
template&lt; class U, class... Args &gt;
constexpr explicit
    expected( std::unexpect_t,
              std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args );
}}
{{dcl end}}

Constructs a new {{tt|expected}} object.

===Parameters===
{{par begin}}
{{par|other|another {{tt|expected}} object whose contained value is copied}}
{{par|e|{{rlpt|unexpected|std::unexpected}} object whose contained value is copied}}
{{par|v|value with which to initialize the contained value}}
{{par|args|arguments with which to initialize the contained value}}
{{par|il|initializer list with which to initialize the contained value}}
{{par end}}

===Effects===
====Primary template constructors====
{|class="wikitable"
!rowspan=2|Overload
!rowspan=2|Initialization&lt;br&gt;method
!colspan=2|Initializer for...
!rowspan=2|{{rlpt|operator bool|has_value()}}&lt;br&gt;after construction
|-
!the expected value
!the unexpected value
|-
|{{vl|1}}
|[[cpp/language/value initialization|Value]]
|(empty)
|{{n/a|-}}
|{{c|true}}
|-
|{{vl|2}}
|rowspan=11|[[cpp/language/direct initialization|Direct]]&lt;br&gt;(non-list)
|{{c|*other}}
|{{c|other.error()}}
|rowspan=4|{{c|other.has_value()}}&lt;br&gt;
* If {{c|true}}, only initializes the expected value.
* If {{c|false}}, only initializes the unexpected value.
|-
|{{vl|3}}
|{{c|std::move(*other)}}
|{{c|std::move(other.error())}}
|-
|{{vl|4}}
|{{c multi|std::forward&lt;const U&amp;&gt;|    (*other)}}
|{{c multi|std::forward&lt;const G&amp;&gt;|    (other.error())}}
|-
|{{vl|5}}
|{{c|std::forward&lt;U&gt;(*other)}}
|{{c multi|std::forward&lt;G&gt;|    (other.error())}}
|-
|{{vl|6}}
|{{c|std::forward&lt;U&gt;(v)}}
|{{n/a|-}}
|{{c|true}}
|-
|{{vl|7}}
|rowspan=2 {{n/a|-}}
|{{c multi|std::forward&lt;const G&amp;&gt;|    (e.error())}}
|rowspan=2|{{c|false}}
|-
|{{vl|8}}
|{{c|std::forward&lt;G&gt;(e.error())}}
|-
|{{vl|9}}
|{{c|std::forward&lt;Args&gt;(args)...}}
|rowspan=2 {{n/a|-}}
|rowspan=2|{{c|true}}
|-
|{{vl|10}}
|{{c multi|il,|std::forward&lt;Args&gt;(args)...}}
|-
|{{vl|11}}
|rowspan=2 {{n/a|-}}
|{{c|std::forward&lt;Args&gt;(args)...}}
|rowspan=2|{{c|false}}
|-
|{{vl|12}}
|{{c multi|il,|std::forward&lt;Args&gt;(args)...}}
|}

===={{c/core|void}} partial specialization constructors====
{|class="wikitable"
!Overload
!Initialization method
!Initializer for the unexpected value
!{{rlpt|operator bool|has_value()}} after construction
|-
|{{vl|13}}
|{{n/a}}
|{{n/a|-}}
|{{c|true}}
|-
|{{vl|14}}
|rowspan=6|Direct (non-list)
|{{c|rhs.error()}}
|rowspan=4|{{c|other.has_value()}}&lt;br&gt;
* If {{c|false}}, initializes the unexpected value.
|-
|{{vl|15}}
|{{c|std::move(rhs.error)}}
|-
|{{vl|16}}
|{{c|std::forward&lt;const G&amp;&gt;(rhs.error())}}
|-
|{{vl|17}}
|{{c|std::forward&lt;G&gt;(rhs.error())}}
|-
|{{vl|18}}
|{{c|std::forward&lt;const G&amp;&gt;(e.error())}}
|rowspan=2|{{c|false}}
|-
|{{vl|19}}
|{{c|std::forward&lt;G&gt;(e.error())}}
|-
|{{vl|20}}
|{{n/a}}
|{{n/a|-}}
|{{c|true}}
|-
|{{vl|21}}
|rowspan=2|Direct (non-list)
|{{c|std::forward&lt;Args&gt;(args)...}}
|rowspan=2|{{c|false}}
|-
|{{vl|22}}
|{{c|il, std::forward&lt;Args&gt;(args)...}}
|}

===Constraints and supplement information===
====Primary template constructors====
@1@ {{cpp/enable if|{{c|std::is_default_constructible_v&lt;T&gt;}} is {{c|true}}}}.

@2@ This constructor is defined as deleted unless {{c|std::is_copy_constructible_v&lt;T&gt;}} and {{c|std::is_copy_constructible_v&lt;E&gt;}} are both {{c|true}}.
@@ This constructor is trivial if {{c|std::is_trivially_copy_constructible_v&lt;T&gt;}} and {{c|std::is_trivially_copy_constructible_v&lt;E&gt;}} are both {{c|true}}.

@3@ {{cpp/enable if|{{c|std::is_move_constructible_v&lt;T&gt;}} and {{c|std::is_move_constructible_v&lt;E&gt;}} are both {{c|true}}}}.
@@ This constructor is trivial if {{c|std::is_trivially_move_constructible_v&lt;T&gt;}} and {{c|std::is_trivially_move_constructible_v&lt;E&gt;}} are both {{c|true}}.

@4,5@ {{cpp/enable if|plural=yes|all following conditions are satisfied:
* For overload {{v|4}}, {{c|std::is_constructible_v&lt;T, const U&amp;&gt;}} and {{c|std::is_constructible_v&lt;E, const G&amp;&gt;}} are both {{c|true}}.
* For overload {{v|5}}, {{c|std::is_constructible_v&lt;T, U&gt;}} and {{c|std::is_constructible_v&lt;E, G&gt;}} are both {{c|true}}.
* If {{tt|T}} is not (possibly cv-qualified) {{c/core|bool}}, the following 8 values are all {{c|false}}:
** {{c|std::is_constructible_v&lt;T, std::expected&lt;U, G&gt;&amp;&gt;}}
** {{c|std::is_constructible_v&lt;T, std::expected&lt;U, G&gt;&gt;}}
** {{c|std::is_constructible_v&lt;T, const std::expected&lt;U, G&gt;&amp;&gt;}}
** {{c|std::is_constructible_v&lt;T, const std::expected&lt;U, G&gt;&gt;}}
** {{c|std::is_convertible_v&lt;std::expected&lt;U, G&gt;&amp;, T&gt;}}
** {{c|std::is_convertible_v&lt;std::expected&lt;U, G&gt;, T&gt;}}
** {{c|std::is_convertible_v&lt;const std::expected&lt;U, G&gt;&amp;, T&gt;}}
** {{c|std::is_convertible_v&lt;const std::expected&lt;U, G&gt;, T&gt;}}
* The following 4 values are all {{c|false}}:
** {{c|std::is_constructible_v&lt;std::unexpected&lt;E&gt;, std::expected&lt;U, G&gt;&amp;&gt;}}
** {{c|std::is_constructible_v&lt;std::unexpected&lt;E&gt;, std::expected&lt;U, G&gt;&gt;}}
** {{c|std::is_constructible_v&lt;std::unexpected&lt;E&gt;, const std::expected&lt;U, G&gt;&amp;&gt;}}
** {{c|std::is_constructible_v&lt;std::unexpected&lt;E&gt;, const std::expected&lt;U, G&gt;&gt;}}}}
:@4@ This constructor is {{c/core|explicit}} if {{c|std::is_convertible_v&lt;const U&amp;, T&gt;}} or {{c|std::is_convertible_v&lt;const G&amp;, E&gt;}} is {{c|false}}.
:@5@ This constructor is {{c/core|explicit}} if {{c|std::is_convertible_v&lt;U, T&gt;}} or {{c|std::is_convertible_v&lt;G, E&gt;}} is {{c|false}}.

@6@ {{cpp/enable if|all following conditions are satisfied:
* {{c|std::is_same_v&lt;std::remove_cvref_t&lt;U&gt;, std::in_place_t&gt;}} is {{c|false}}.
* {{c|std::is_same_v&lt;std::expected&lt;T, E&gt;, std::remove_cvref_t&lt;U&gt;&gt;}} is {{c|false}}.
* {{c|std::is_constructible_v&lt;T, U&gt;}} is {{c|true}}.
* {{c/core|std::remove_cvref_t&lt;U&gt;}} is not a specialization of {{rlpt|unexpected|std::unexpected}}.
* If {{tt|T}} is (possibly cv-qualified) {{c/core|bool}}, {{c/core|std::remove_cvref_t&lt;U&gt;}} is not a specialization of {{rlpt|/|std::expected}}.}}

@7@ {{cpp/enable if|{{c|std::is_constructible_v&lt;E, const G&amp;&gt;}} is {{c|true}}}}.

@8@ {{cpp/enable if|{{c|std::is_constructible_v&lt;E, G&gt;}} is {{c|true}}}}.

@9@ {{cpp/enable if|{{c|std::is_constructible_v&lt;T, Args...&gt;}} is {{c|true}}}}.

@10@ {{cpp/enable if|{{c|std::is_constructible_v&lt;T, std::initializer_list&lt;U&gt;&amp;, Args...&gt;}} is {{c|true}}}}.

@11@ {{cpp/enable if|{{c|std::is_constructible_v&lt;E, Args...&gt;}} is {{c|true}}}}.

@12@ {{cpp/enable if|{{c|std::is_constructible_v&lt;E, std::initializer_list&lt;U&gt;&amp;, Args...&gt;}} is {{c|true}}}}.

===={{c/core|void}} partial specialization constructors====
@14@ This constructor is defined as deleted unless {{c|std::is_copy_constructible_v&lt;E&gt;}} is {{c|true}}.
@@ This constructor is trivial if {{c|std::is_trivially_copy_constructible_v&lt;E&gt;}} is {{c|true}}.

@15@ {{cpp/enable if|{{c|std::is_move_constructible_v&lt;E&gt;}} is {{c|true}}}}.
@@ This constructor is trivial if {{c|std::is_trivially_move_constructible_v&lt;E&gt;}} is {{c|true}}.

@16,17@ {{cpp/enable if|plural=yes|all following conditions are satisfied:
* For overload {{v|16}}, {{c|std::is_constructible_v&lt;E, const G&amp;&gt;}} is {{c|true}}.
* For overload {{v|17}}, {{c|std::is_constructible_v&lt;E, G&gt;}} is {{c|true}}.
* {{c|std::is_void_v&lt;U&gt;}} is {{c|true}}.
* The following 4 values are all {{c|false}}:
** {{c|std::is_constructible_v&lt;std::unexpected&lt;E&gt;, std::expected&lt;U, G&gt;&amp;&gt;}}
** {{c|std::is_constructible_v&lt;std::unexpected&lt;E&gt;, std::expected&lt;U, G&gt;&gt;}}
** {{c|std::is_constructible_v&lt;std::unexpected&lt;E&gt;, const std::expected&lt;U, G&gt;&amp;&gt;}}
** {{c|std::is_constructible_v&lt;std::unexpected&lt;E&gt;, const std::expected&lt;U, G&gt;&gt;}}}}

@18@ {{cpp/enable if|{{c|std::is_constructible_v&lt;E, const G&amp;&gt;}} is {{c|true}}}}.

@19@ {{cpp/enable if|{{c|std::is_constructible_v&lt;E, G&gt;}} is {{c|true}}}}.

@21@ {{cpp/enable if|{{c|std::is_constructible_v&lt;E, Args...&gt;}} is {{c|true}}}}.

@22@ {{cpp/enable if|{{c|std::is_constructible_v&lt;E, std::initializer_list&lt;U&gt;&amp;, Args...&gt;}} is {{c|true}}}}.

===Exceptions===
====Primary template constructors====
@1@ Throws any exception thrown by the initialization of the expected value.

@2@ Throws any exception thrown by the initialization of the expected or unexpected value.

@3@ Throws any exception thrown by the initialization of the expected or unexpected value.
@@ {{noexcept|std::is_nothrow_move_constructible_v&lt;T&gt;
    &amp;&amp; std::is_nothrow_move_constructible_v&lt;E&gt;}}

@4,5@ Throws any exception thrown by the initialization of the expected or unexpected value.

@6@ Throws any exception thrown by the initialization of the expected value.

@7,8@ Throws any exception thrown by the initialization of the unexpected value.

@9,10@ Throws any exception thrown by the initialization of the expected value.

@11,12@ Throws any exception thrown by the initialization of the unexpected value.

===={{c/core|void}} partial specialization constructors====
@14-19@ Throws any exception thrown by the initialization of the unexpected value.

@21,22@ Throws any exception thrown by the initialization of the unexpected value.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/expected/dsc unexpected}}
{{dsc inc|cpp/utility/dsc in_place}}
{{dsc inc|cpp/utility/expected/dsc unexpect_t}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
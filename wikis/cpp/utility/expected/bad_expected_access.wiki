{{cpp/title|bad_expected_access}}
{{cpp/utility/expected/navbar}}

{{dcl begin}}
{{dcl header|expected}}
{{dcl | num=1 | since=c++23 |1=
template&lt; class E &gt;
class bad_expected_access : public std::bad_expected_access&lt;void&gt;
}}
{{dcl | num=2 | since=c++23 |1=
template&lt;&gt;
class bad_expected_access&lt;void&gt; : public std::exception
}}
{{dcl end}}

@1@ Defines a type of object to be thrown by {{ltt|cpp/utility/expected/value|std::expected::value}} when accessing an expected object that contains an unexpected value. {{tt|bad_expected_access&lt;E&gt;}} stores a copy of the unexpected value.

@2@ {{tt|bad_expected_access&lt;void&gt;}} is the base class of all other {{tt|bad_expected_access}} specializations.

{{todo|inheritance diagram}}

===Members of the primary template===
{{dsc begin}}
{{dsc mem ctor | cpp/utility/expected/bad_expected_access | inlinemem=true | constructs a {{tt|bad_expected_access}} object}}
{{dsc mem fun | error | nolink=true | returns the stored value}}
{{dsc mem fun | what | nolink=true | returns the explanatory string}}
{{dsc end}}

{{member | 1={{small|std::bad_expected_access::}}bad_expected_access | 2=
{{dcl begin}}
{{dcl |
explicit bad_expected_access( E e );
}}
{{dcl end}}

Constructs a new {{tt|bad_expected_access&lt;E&gt;}} object. Initializes the stored value with {{tt|std::move(e)}}.
}}
{{member | 1={{small|std::bad_expected_access::}}error |2=
{{dcl begin}}
{{dcl |
const E&amp; error() const &amp; noexcept;
E&amp; error() &amp; noexcept;
const E&amp;&amp; error() const &amp;&amp; noexcept;
E&amp;&amp; error() &amp;&amp; noexcept;
}}
{{dcl end}}

Returns a reference to the stored value.
}}
{{member | {{small|std::bad_expected_access::}}what |
{{dcl begin}}
{{dcl |
const char* what() const noexcept override;
}}
{{dcl end}}

Returns the explanatory string.

===Parameters===
(none)

===Return value===
Pointer to a null-terminated string with explanatory information. The string is suitable for conversion and display as a {{lc|std::wstring}}. The pointer is guaranteed to be valid at least until the exception object from which it is obtained is destroyed, or until a non-const member function (e.g. copy assignment operator) on the exception object is called.

===Notes===
Implementations are allowed but not required to override {{tt|what()}}.
}}

===Members of the {{tt|bad_expected_access&lt;void&gt;}} specialization===
{{dsc begin}}
{{dsc prot mem ctor | nolink=true | constructs a {{tt|bad_expected_access&lt;void&gt;}} object}}
{{dsc prot mem dtor | nolink=true | destroys the {{tt|bad_expected_access&lt;void&gt;}} object}}
{{dsc prot mem fun | operator{{=}} | nolink=true | replaces the {{tt|bad_expected_access&lt;void&gt;}} object}}
{{dsc mem fun | what | nolink=true | returns the explanatory string}}
{{dsc end}}

Special member functions of {{tt|bad_expected_access&lt;void&gt;}} are protected. They can only be called by derived classes.

===Example===
{{example
|code=
|output=
}}

{{langlinks|es|zh}}
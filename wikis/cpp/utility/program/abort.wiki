{{cpp/title|abort}}
{{cpp/utility/program/navbar}}
{{dcl begin}}
{{dcl header|cstdlib}}
{{dcl rev multi|until1=c++11|dcl1=
void abort();
|dcl2=
[[noreturn]] void abort() noexcept;
}}
{{dcl end}}

Causes abnormal program termination unless {{lc|SIGABRT}} is being caught by a signal handler passed to {{lc|std::signal}} and the handler does not return.

Destructors of variables with automatic{{rev inl|since=c++11|, thread local}} and static {{lt|cpp/language/storage duration}}s are not called. Functions registered with {{lc|std::atexit()}} {{rev inl|since=c++11|and {{lc|std::at_quick_exit}}}} are also not called. Whether open resources such as files are closed is implementation defined. An implementation defined status is returned to the host environment that indicates unsuccessful execution. 

===Parameters===
(none)

===Return value===
None because it does not return.

===Exceptions===
Throws nothing.

===Notes===
POSIX specifies that the [https://pubs.opengroup.org/onlinepubs/9699919799/functions/abort.html {{tt|abort()}}] function overrides blocking or ignoring the {{tt|SIGABRT}} signal.

Some compiler intrinsics, e.g. [https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html {{tt|__builtin_trap}}] (gcc, clang, and icc) or [https://learn.microsoft.com/en-us/cpp/intrinsics/fastfail {{tt|__fastfail}}]/[https://learn.microsoft.com/en-us/cpp/intrinsics/debugbreak {{tt|__debugbreak}}] (msvc), can be used to terminate the program as fast as possible.

===Example===
{{example
|code=
#include &lt;csignal&gt;
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;

class Tester
{
public:
    Tester()  { std::cout &lt;&lt; "Tester ctor\n"; }
    ~Tester() { std::cout &lt;&lt; "Tester dtor\n"; }
};

Tester static_tester; // Destructor not called

void signal_handler(int signal) 
{
    if (signal == SIGABRT)
        std::cerr &lt;&lt; "SIGABRT received\n";
    else
        std::cerr &lt;&lt; "Unexpected signal " &lt;&lt; signal &lt;&lt; " received\n";
    std::_Exit(EXIT_FAILURE);
}

int main()
{
    Tester automatic_tester; // Destructor not called

    // Setup handler
    auto previous_handler = std::signal(SIGABRT, signal_handler);
    if (previous_handler == SIG_ERR)
    {
        std::cerr &lt;&lt; "Setup failed\n";
        return EXIT_FAILURE;
    }

    std::abort(); // Raise SIGABRT
    std::cout &lt;&lt; "This code is unreachable\n";
}
|output=
Tester ctor
Tester ctor
SIGABRT received
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/program/dsc exit}}
{{dsc inc|cpp/utility/program/dsc atexit}}
{{dsc inc|cpp/utility/program/dsc quick_exit}}
{{dsc inc|cpp/utility/program/dsc at_quick_exit}}
{{dsc inc|cpp/utility/program/dsc signal}}
{{dsc inc|cpp/error/dsc terminate}}
{{dsc see c|c/program/abort}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|tr|zh}}
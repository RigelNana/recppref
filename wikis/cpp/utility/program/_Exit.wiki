{{cpp/title|_Exit}}
{{cpp/utility/program/navbar}}
{{ddcl|header=cstdlib|since=c++11|
[[noreturn]] void _Exit( int exit_code ) noexcept;
}}

Causes normal program termination to occur without completely cleaning the resources.

Destructors of variables with automatic, thread local and static storage durations are not called. Functions passed to {{lc|std::at_quick_exit()}} or {{lc|std::atexit()}} are not called. Whether open resources such as files are closed is implementation defined. 

If {{tt|exit_code}} is {{lc|0}} or {{lc|EXIT_SUCCESS}}, an implementation-defined status indicating successful termination is returned to the host environment. If {{tt|exit_code}} is {{lc|EXIT_FAILURE}}, an implementation-defined status, indicating ''unsuccessful'' termination, is returned. In other cases implementation-defined status value is returned.

{{rrev|since=c++23|
A freestanding implementation is required to provide {{tt|std::_Exit}}.
}}

===Parameters===
{{par begin}}
{{par|exit_code|exit status of the program}}
{{par end}}

===Return value===
(none)

===Notes===
Although {{tt|_Exit}} is required to be freestanding since C++23, it is not required to be available in a freestanding C implementation.

===Example===
{{example
|code=
#include &lt;iostream&gt;

class Static
{
public:
    ~Static() 
    {
        std::cout &lt;&lt; "Static dtor\n";
    }
};

class Local
{
public:
    ~Local() 
    {
        std::cout &lt;&lt; "Local dtor\n";
    }
};

Static static_variable; // dtor of this object will *not* be called

void atexit_handler()
{
    std::cout &lt;&lt; "atexit handler\n";
}

int main()
{
    Local local_variable; // dtor of this object will *not* be called
    
    // handler will *not* be called
    const int result = std::atexit(atexit_handler);

    if (result != 0)
    {
        std::cerr &lt;&lt; "atexit registration failed\n";
        return EXIT_FAILURE;
    }

    std::cout &lt;&lt; "test" &lt;&lt; std::endl; // flush from std::endl
        // needs to be here, otherwise nothing will be printed
    std::_Exit(EXIT_FAILURE);
}
|output=
test
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/program/dsc abort}}
{{dsc inc|cpp/utility/program/dsc exit}}
{{dsc see c|c/program/_Exit}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
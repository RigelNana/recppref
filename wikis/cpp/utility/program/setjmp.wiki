{{title|setjmp}}
{{cpp/utility/program/navbar}}
{{ddcl|header=csetjmp|
#define setjmp(env) /* implementation-defined */
}}

Saves the current execution context into a variable {{c|env}} of type {{lc|std::jmp_buf}}. This variable can later be used to restore the current execution context by {{lc|std::longjmp}} function. That is, when a call to {{lc|std::longjmp}} function is made, the execution continues at the particular call site that constructed the {{lc|std::jmp_buf}} variable passed to {{lc|std::longjmp}}. In that case {{tt|setjmp}} returns the value passed to {{lc|std::longjmp}}.

The invocation of {{tt|setjmp}} must appear only in one of the following contexts:
# the entire controlling expression of {{ltt|cpp/language/if}}, {{ltt|cpp/language/switch}}, {{ltt|cpp/language/while}}, {{ltt|cpp/language/do|do-while}}, {{ltt|cpp/language/for}}.&lt;!--
--&gt;{{source|1=
switch (setjmp(env)) { // ...
}}
# one operand of a relational or equality operator with the other operand an integer constant expression, with the resulting expression being the entire controlling expression of {{ltt|cpp/language/if}}, {{ltt|cpp/language/switch}}, {{ltt|cpp/language/while}}, {{ltt|cpp/language/do|do-while}}, {{ltt|cpp/language/for}}.&lt;!--
--&gt;{{source|1=
if (setjmp(env) &gt; 0) { // ...
}}
# the operand of a unary ! operator with the resulting expression being the entire controlling expression of {{ltt|cpp/language/if}}, {{ltt|cpp/language/switch}}, {{ltt|cpp/language/while}}, {{ltt|cpp/language/do|do-while}}, {{ltt|cpp/language/for}}.&lt;!--
--&gt;{{source|1=
while (!setjmp(env)) { // ...
}}
# the entire expression of an [[cpp/language/statements#Expression statements|expression statement]] (possibly cast to {{c/core|void}}).&lt;!--
--&gt;{{source|1=
setjmp(env);
}}
If {{tt|setjmp}} appears in any other context, the behavior is undefined.

{{rev begin}}
{{rev|since=c++20|
Additionally, the behavior is undefined if {{tt|setjmp}} is invoked in a [[cpp/language/coroutines|coroutine]] in a place where the {{c/core|co_await}} operator may be used.
}}
{{rev end}}

Upon return to the scope of {{tt|setjmp}}:
* all accessible objects, floating-point status flags, and other components of the abstract machine have the same values as they had when {{lc|std::longjmp}} was executed,
* except for the non-[[cpp/language/cv|volatile]] local variables in the function containing the invocation of {{tt|setjmp}}, whose values are indeterminate if they have been changed since the {{tt|setjmp}} invocation.

===Parameters===
{{par begin}}
{{par|env|variable to save the execution state of the program to}}
{{par end}}

===Return value===
{{c|0}} if the macro was called by the original code and the execution context was saved to {{c|env}}.

Non-zero value if a non-local jump was just performed. The return value is the same as passed to {{lc|std::longjmp}}.

===Notes===
Above requirements forbid using return value of {{tt|setjmp}} in data flow (e.g. to initialize or assign an object with it). The return value can only be either used in control flow or discarded.

===Example===
{{cpp/utility/program/example setjmp}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/program/dsc longjmp}}
{{dsc see c|c/program/setjmp}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
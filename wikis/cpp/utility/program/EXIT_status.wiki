{{title|EXIT_SUCCESS, EXIT_FAILURE}}
{{cpp/utility/program/navbar}}
{{dcl begin}}
{{dcl header|cstdlib}}
{{dcl|
#define EXIT_SUCCESS /*implementation defined*/
}}
{{dcl|
#define EXIT_FAILURE /*implementation defined*/
}}
{{dcl end}}

The {{tt|EXIT_SUCCESS}} and {{tt|EXIT_FAILURE}} macros expand into integral constant expressions that can be used as arguments to the {{lc|std::exit}} function (and, therefore, as the values to return from the {{lt|cpp/language/main function}}), and indicate program execution status.

{{rrev|since=c++23|
A freestanding implementation is required to provide {{tt|EXIT_SUCCESS}} and {{tt|EXIT_FAILURE}}.
}}

{{dsc begin}}
{{dsc hitem|Constant|Description}}
{{dsc|{{tt|EXIT_SUCCESS}}|successful execution of a program}}
{{dsc|{{tt|EXIT_FAILURE}}|unsuccessful execution of a program}}
{{dsc end}}

===Notes===
Both {{tt|EXIT_SUCCESS}} and the value zero indicate successful program execution status (see {{lc|std::exit}}), although it is not required that {{tt|EXIT_SUCCESS}} equals zero.

Although {{tt|EXIT_SUCCESS}} and {{tt|EXIT_FAILURE}} are required to be freestanding since C++23, they are not required to be available in a freestanding C implementation.

===Example===
{{example
|code=
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;

int main(int argc, char* argv[])
{
    if (argc &lt;= 1)
    {
        std::cout &lt;&lt; "At least one command-line argument required\n";
        return EXIT_FAILURE;
    }
    
    std::cout &lt;&lt; argv[1] &lt;&lt; '\n';
    return EXIT_SUCCESS;
}
|p=true
|output=
The quick brown fox jumps over the lazy cat
}}

===See also===
{{dsc begin}}
{{dsc see c|c/program/EXIT_status|EXIT_SUCCESS|EXIT_FAILURE}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
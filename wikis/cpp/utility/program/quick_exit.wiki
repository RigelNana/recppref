{{cpp/title|quick_exit}}
{{cpp/utility/program/navbar}}
{{ddcl|header=cstdlib|since=c++11|
[[noreturn]] void quick_exit( int exit_code ) noexcept;
}}

Causes normal program termination to occur without completely cleaning the resources.

Functions passed to {{lc|std::at_quick_exit}} are called in reverse order of their registration. If an exception tries to propagate out of any of the functions, {{lc|std::terminate}} is called. After calling the registered functions, calls {{c|std::_Exit(exit_code)}}.

Functions passed to {{lc|std::atexit}} are not called.

===Parameters===
{{par begin}}
{{par|exit_code|exit status of the program}}
{{par end}}

===Return value===
(none)

===Example===
{{example
|code=
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;

template&lt;int N&gt;
void quick_exit_handler()
{
    std::cout &lt;&lt; "quick_exit handler #" &lt;&lt; N &lt;&lt; std::endl; // flush is intended
}

void at_exit_handler()
{
    std::cout &lt;&lt; "at_exit handler\n";
}

int main()
{
    if (std::at_quick_exit(quick_exit_handler&lt;1&gt;) {{!!}}
        std::at_quick_exit(quick_exit_handler&lt;2&gt;))
    {
        std::cerr &lt;&lt; "Registration failed\n";
        return EXIT_FAILURE;
    }

    std::atexit(at_exit_handler); // the handler will not be called

    struct R { ~R() { std::cout &lt;&lt; "destructor\n"; } } resource;

    /*...*/

    std::quick_exit(EXIT_SUCCESS);

    std::cout &lt;&lt; "This statement is unreachable...\n";
}
|output=
quick_exit handler #2
quick_exit handler #1
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/program/dsc abort}}
{{dsc inc|cpp/utility/program/dsc exit}}
{{dsc inc|cpp/utility/program/dsc atexit}}
{{dsc inc|cpp/utility/program/dsc at_quick_exit}}
{{dsc see c|c/program/quick_exit}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|getenv}}
{{cpp/utility/program/navbar}}
{{ddcl|header=cstdlib|
char* getenv( const char* env_var );
}}

Searches the ''environment list'' provided by the host environment (the OS), for a string that matches the C string pointed to by {{tt|env_var}} and returns a pointer to the C string that is associated with the matched environment list member.

{{rev begin}}
{{rev|until=c++11|
This function is not required to be thread-safe. Another call to {{tt|getenv}}, as well as a call to the POSIX functions [https://pubs.opengroup.org/onlinepubs/9699919799/functions/setenv.html {{tt|setenv()}}], [https://pubs.opengroup.org/onlinepubs/9699919799/functions/unsetenv.html {{tt|unsetenv()}}], and [https://pubs.opengroup.org/onlinepubs/9699919799/functions/putenv.html {{tt|putenv()}}] may invalidate the pointer returned by a previous call or modify the string obtained from a previous call.
}}
{{rev|since=c++11|
This function is thread-safe (calling it from multiple threads does not introduce a data race) as long as no other function modifies the host environment. In particular, the POSIX functions [https://pubs.opengroup.org/onlinepubs/9699919799/functions/setenv.html {{tt|setenv()}}], [https://pubs.opengroup.org/onlinepubs/9699919799/functions/unsetenv.html {{tt|unsetenv()}}], and [https://pubs.opengroup.org/onlinepubs/9699919799/functions/putenv.html {{tt|putenv()}}] would introduce a data race if called without synchronization.
}}
{{rev end}}

Modifying the string returned by {{tt|getenv}} invokes undefined behavior.

===Parameters===
{{par begin}}
{{par|env_var|null-terminated character string identifying the name of the environmental variable to look for}}
{{par end}}

===Return value===
Character string identifying the value of the environmental variable or null pointer if such variable is not found.

===Notes===
On POSIX systems, the [https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap08.html#tag_08 environment variables] are also accessible through the global variable {{tt|environ}}, declared as {{c|extern char** environ;}} in {{header|unistd.h|&lt;!--to skip red-link generation--&gt;lang=c}}, and through the optional third argument, {{tt|envp}}, of [[cpp/language/main function|the main function]].

===Example===
{{example
|code=
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;

int main()
{
    if (const char* env_p = std::getenv("PATH"))
        std::cout &lt;&lt; "Your PATH is: " &lt;&lt; env_p &lt;&lt; '\n';
}
|p=true
|output=
Your PATH is: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
}}

===See also===
{{dsc begin}}
{{dsc see c|c/program/getenv}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|system}}
{{cpp/utility/program/navbar}}
{{ddcl|header=cstdlib|
int system( const char* command );
}}

Calls the host environment's command processor (e.g. {{tt|/bin/sh}}, {{tt|cmd.exe}}) with the parameter {{tt|command}}. Returns an implementation-defined value (usually the value that the invoked program returns).

If {{tt|command}} is a null pointer, checks if the host environment has a command processor and returns a nonzero value if and only if the command processor exists.

===Parameters===
{{par begin}}
{{par|command|character string identifying the command to be run in the command processor. If a null pointer is given, command processor is checked for existence}}
{{par end}}

===Return value===
Implementation-defined value. If {{tt|command}} is a null pointer, returns a nonzero value if and only if the command processor exists.

===Notes===
On POSIX systems, the return value can be decomposed using [https://pubs.opengroup.org/onlinepubs/9699919799/functions/wait.html {{tt|WEXITSTATUS}} and {{tt|WSTOPSIG}}].

The related POSIX function [https://pubs.opengroup.org/onlinepubs/9699919799/functions/popen.html {{tt|popen}}] makes the output generated by {{tt|command}} available to the caller.

An explicit flush  of {{lc|std::cout}} is also necessary before a call to {{lc|std::system}}, if the spawned process performs any screen I/O.

===Example===
{{example
|
|code=
#include &lt;cstdlib&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;

int main()
{
    std::system("ls -l &gt;test.txt"); // executes the UNIX command "ls -l &gt;test.txt"
    std::cout &lt;&lt; std::ifstream("test.txt").rdbuf();
}
|p=true
|output=
total 16
-rwxr-xr-x 1 2001 2000 8859 Sep 30 20:52 a.out
-rw-rw-rw- 1 2001 2000  161 Sep 30 20:52 main.cpp
-rw-r--r-- 1 2001 2000    0 Sep 30 20:52 test.txt
}}

===See also===
{{dsc begin}}
{{dsc see c|c/program/system}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
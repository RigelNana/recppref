{{cpp/title|at_quick_exit}}
{{cpp/utility/program/navbar}}
{{dcl begin}}
{{dcl header|cstdlib}}
{{dcl|num=1|since=c++11|
int at_quick_exit( /*atexit-handler*/* func ) noexcept;
int at_quick_exit( /*c-atexit-handler*/* func ) noexcept;
}}
{{dcl|num=2|notes={{mark expos}}|1=
extern "C++" using /*atexit-handler*/ = void();
extern "C" using /*c-atexit-handler*/ = void();
}}
{{dcl end}}

Registers the function pointed to by {{tt|func}} to be called on quick program termination (via {{lc|std::quick_exit}}).

Calling the function from several threads does not induce a data race. The implementation is guaranteed to support the registration of at least 32 functions. The exact limit is implementation-defined. 

The registered functions will not be called on {{rlp|exit|normal program termination}}. If a function need to be called in that case, {{lc|std::atexit}} must be used.

===Parameters===
{{par begin}}
{{par|func|pointer to a function to be called on quick program termination}}
{{par end}}

===Return value===
{{c|0}} if the registration succeeds, nonzero value otherwise.

===Notes===
The two overloads are distinct because the types of the parameter {{tt|func}} are distinct ([[cpp/language/language linkage|language linkage]] is part of its type).

===Example===
{{example
|code=
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;

void f1()
{
    std::cout &lt;&lt; "pushed first" &lt;&lt; std::endl; // flush is intentional
}

extern "C" void f2()
{
    std::cout &lt;&lt; "pushed second\n";
}

int main()
{
    auto f3 = []
    {
        std::cout &lt;&lt; "pushed third\n";
    };

    std::at_quick_exit(f1);
    std::at_quick_exit(f2);
    std::at_quick_exit(f3);
    std::quick_exit(0);
}
|output=
pushed third
pushed second
pushed first
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/program/dsc abort}}
{{dsc inc|cpp/utility/program/dsc exit}}
{{dsc inc|cpp/utility/program/dsc atexit}}
{{dsc inc|cpp/utility/program/dsc quick_exit}}
{{dsc see c|c/program/at_quick_exit}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
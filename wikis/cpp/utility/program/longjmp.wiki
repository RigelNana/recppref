{{cpp/title|longjmp}}
{{cpp/utility/program/navbar}}
{{dcl begin}}
{{dcl header|csetjmp}}
{{dcl rev begin}}
{{dcl|until=c++17|
             void longjmp( std::jmp_buf env, int status );
}}
{{dcl|since=c++17|
[[noreturn]] void longjmp( std::jmp_buf env, int status );
}}
{{dcl rev end}}
{{dcl end}}

Loads the execution context {{c|env}} saved by a previous call to {{lc|setjmp}}. This function does not return. Control is transferred to the call site of the macro {{lc|setjmp}} that set up {{c|env}}. That {{lc|setjmp}} then returns the value, passed as the {{c|status}}.

If the function that called {{lc|setjmp}} has exited, the behavior is undefined (in other words, only long jumps up the call stack are allowed).

===Extra restrictions in C++===
On top of C {{ltt|c/program/longjmp}}, C++ {{tt|std::longjmp}} has more restricted behavior.

If replacing {{tt|std::longjmp}} with {{c/core|throw}} and {{lc|setjmp}} with {{c/core|catch}} would invoke a [[cpp/language/destructor#Trivial destructor|non-trivial destructor]] for any automatic object, the behavior of such {{tt|std::longjmp}} is undefined.

{{rev begin}}
{{rev|since=c++20|
The behavior is undefined if {{tt|std::longjmp}} is called in a [[cpp/language/coroutines|coroutine]] in a place where the {{c/core|co_await}} operator may be used.
}}
{{rev end}}

===Parameters===
{{par begin}}
{{par|env|variable referring to the execution state of the program saved by {{lc|setjmp}}}}
{{par|status|the value to return from {{lc|setjmp}}. If it is equal to {{c|0}}, {{c|1}} is used instead}}
{{par end}}

===Return value===
(none)

===Notes===
{{tt|std::longjmp}} is the mechanism used in C to handle unexpected error conditions where the function cannot return meaningfully. C++ generally uses [[cpp/language/exceptions|exception handling]] for this purpose.

===Example===
{{cpp/utility/program/example setjmp}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=619|std=C++98|before=the wording of the extra restrictions in C++ was vague|after=improved the wording}}
{{dr list item|wg=lwg|dr=894|std=C++98|before=the behavior was undefined if replacing&lt;br&gt;{{tt|std::longjmp}} with {{c/core|throw}} and {{lc|setjmp}} with&lt;br&gt;{{c/core|catch}} would destroy any automatic object|after=the behavior is only undefined&lt;br&gt;if a non-trivial destructor for&lt;br&gt;any automatic object is invoked}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/program/dsc setjmp}}
{{dsc see c|c/program/longjmp}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|piecewise_construct|piecewise_construct_t}}
{{cpp/utility/pair/navbar}}
{{dcl begin}}
{{dcl header|utility}}
{{dcl|num=1|since=c++11|1=
struct piecewise_construct_t { explicit piecewise_construct_t() = default; };
}}
{{dcl|num=2|since=c++11|notes={{mark|inline since C++17}}|
constexpr std::piecewise_construct_t piecewise_construct{};
}}
{{dcl end}}

@1@ {{tt|std::piecewise_construct_t}} is an empty class tag type used to disambiguate between different functions that take two tuple arguments.
@2@ The constant {{tt|std::piecewise_construct}} is an instance of {{v|1}}.

The overloads that do not use {{tt|std::piecewise_construct_t}} assume that each tuple argument becomes the element of a pair. The overloads that use {{tt|std::piecewise_construct_t}} assume that each tuple argument is used to construct, piecewise, a new object of specified type, which will become the element of the pair.

===Standard library===
The following standard library types and functions use it as a disambiguation tag:
{{dsc begin}}
{{dsc inc|cpp/utility/dsc pair}}
{{dsc inc|cpp/memory/dsc uses_allocator_construction_args}}
{{dsc inc|cpp/ranges/dsc repeat_view}}
{{dsc end}}

===Example===
{{include|cpp/utility/example_piecewise_construct}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2510|std=C++11|before=the default constructor was non-explicit, which could lead to ambiguity|after=made explicit}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc mem ctor|cpp/utility/pair/pair|constructs new pair}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|breakpoint}}
{{cpp/error/navbar}}
{{ddcl|header=debugging|since=c++26|
void breakpoint() noexcept;
}}

Unconditional breakpoint: Attempts to temporarily stop program execution and pass control to the debugger, regardless of whether the presence of a debugger can be detected. The behavior of this function is implementation-defined.

===Notes===
The intent of this function is allowing for runtime control of breakpoints beyond what might be available from a debugger while not causing the program to exit. For example, breaking when an infrequent non-critical condition is detected, allowing programmatic control with complex runtime sensitive conditions, breaking on user input to inspect context in interactive programs without needing to switch to the debugger application, etc.

This function standardizes many similar existing facilities: [https://clang.llvm.org/docs/LanguageExtensions.html#builtin-debugtrap {{tt|__builtin_debugtrap}}] from LLVM, [https://learn.microsoft.com/en-us/cpp/intrinsics/debugbreak {{tt|__debugbreak}}] from Win32 API, [https://github.com/boostorg/test/blob/develop/include/boost/test/impl/debug.ipp#L716 {{tt|debugger_break}}] from [https://www.boost.org/doc/libs/release/libs/test/doc/html/index.html boost.test], {{c|assert(false)}}, {{c|_asm { int 3 }&lt;!----&gt;}} (MSVC) and {{c|asm("int3")}} (GCC/clang) for x86 targets, [[#External links|etc]].

{{ftm begin}}
{{ftm|__cpp_lib_debugging|Debugging support library|value=202311L|std=C++26|rowspan=2}}
{{ftm|-|Replaceable {{tt|std::is_debugger_present}}|value=202403L|std=C++26}}
{{ftm end}}

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc is_debugger_present}}
{{dsc inc|cpp/utility/dsc breakpoint_if_debugging}}
{{dsc end}}

===External links===
{{elink begin}}
{{elink|armKEIL: [https://developer.arm.com/documentation/dui0375/g/Compiler-specific-Features/--breakpoint-intrinsic {{tt|__breakpoint}} intrinsic]}}
{{elink|Portable Snippets: [https://github.com/nemequ/portable-snippets/tree/master/debug-trap Debugging assertions and traps]}}
{{elink|EASTL: [https://github.com/electronicarts/EASTL/blob/3.18.00/include/EASTL/internal/config.h#L613 {{tt|EASTL_DEBUG_BREAK}}]}}
{{elink|Catch2: [https://github.com/catchorg/Catch2/blob/v3.0.0-preview4/src/catch2/internal/catch_debugger.hpp {{tt|CATCH_TRAP}} and {{tt|CATCH_BREAK_INTO_DEBUGGER}}]}}
{{elink|Unreal Engine: [https://docs.unrealengine.com/5.0/en-US/API/Runtime/Core/GenericPlatform/FGenericPlatformMisc/DebugBreak/ {{tt|DebugBreak}}]}}
{{elink|JUCE: [https://github.com/juce-framework/JUCE/blob/6.1.5/modules/juce_core/system/juce_PlatformDefs.h#L63 {{tt|JUCE_BREAK_IN_DEBUGGER}}]}}
{{elink|Dear ImGui: [https://github.com/ocornut/imgui/blob/v1.86/imgui_internal.h#L257 {{tt|IM_DEBUG_BREAK}}]}}
{{elink|AWS C Common: [https://github.com/awslabs/aws-c-common/blob/v0.6.19/include/aws/common/system_info.h#L55 {{tt|aws_debug_break}}]}}
{{elink end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|{{dsc small|hash&lt;Key&gt;::}}operator()}}
{{cpp/utility/hash/navbar}}

Specializations of {{lc|std::hash}} should define an {{tt|operator()}} that:

* Takes a single argument {{c|key}} of type {{tt|Key}}.
* Returns a value of type {{c|std::size_t}} that represents the hash value of {{c|key}}.
* For two parameters {{tt|k1}} and {{tt|k2}} that are equal, {{c|1=std::hash&lt;Key&gt;()(k1) == std::hash&lt;Key&gt;()(k2)}}.
* For two different parameters {{tt|k1}} and {{tt|k2}} that are not equal, the probability that {{c|1=std::hash&lt;Key&gt;()(k1) == std::hash&lt;Key&gt;()(k2)}} should be very small, approaching {{c|1.0 / std::numeric_limits&lt;size_t&gt;::max()}}.

===Parameters===
{{par begin}}
{{par|key|the object to be hashed}}
{{par end}}

===Return value===
A {{c|std::size_t}} representing the hash value.

===Exceptions===
Hash functions should not throw exceptions.

===Example===
{{example
|The following code shows how to specialize the {{lc|std::hash}} template for a custom class. The hash function uses [[enwiki:Fowler–Noll–Vo hash function|Fowler–Noll–Vo]] hash algorithm.
|code=
#include &lt;cstdint&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

struct Employee
{
    std::string name;
    std::uint64_t ID;
};

namespace std
{
    template &lt;&gt;
    class hash&lt;Employee&gt;
    {
    public:
        std::uint64_t operator()(const Employee&amp; employee) const
        {
             // computes the hash of an employee using a variant
             // of the Fowler-Noll-Vo hash function
             constexpr std::uint64_t prime{0x100000001B3};
             std::uint64_t result{0xcbf29ce484222325};

             for (std::uint64_t i{}, ie = employee.name.size(); i != ie; ++i)
                 result = (result * prime) ^ employee.name[i];

             return result ^ (employee.ID &lt;&lt; 1);
         }
    };
}

int main()
{
    Employee employee;
    employee.name = "Zaphod Beeblebrox";
    employee.ID = 42;

    std::hash&lt;Employee&gt; hash_fn;
    std::cout &lt;&lt; hash_fn(employee) &lt;&lt; '\n';
}
|output=12615575401975788567
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
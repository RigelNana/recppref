{{title|''tuple-like'', ''pair-like''}}
{{cpp/utility/tuple/navbar}}
{{dcl begin}}
{{dcla|since=c++23|num=1|expos=yes|anchor=no|1=
template&lt; class T &gt;
concept tuple-like = /* see below */;
}}
{{dcla|since=c++23|num=2|expos=yes|anchor=no|1=
template&lt; class T &gt;
concept pair-like =
    tuple-like&lt;T&gt; &amp;&amp; std::tuple_size_v&lt;std::remove_cvref_t&lt;T&gt;&gt; == 2;
}}
{{dcl end}}

@1@ A type {{tt|T}} models and satisfies the concept {{tti|tuple-like}} if {{c/core|std::remove_cvref_t&lt;T&gt;}} is a specialization of
* {{lc|std::array}},
{{rrev|since=c++26|* {{lc|std::complex}},}}
* {{lc|std::pair}},
* {{lc|std::tuple}}, or
* {{lc|std::ranges::subrange}}.

@2@ {{tti|pair-like}} objects are {{tti|tuple-like}} objects with exactly 2 elements.

===Notes===
{{tti|tuple-like}} types implement the ''tuple protocol'', i.e., such types can be used with {{ltt std|cpp/utility/tuple/get}}, {{ltt std|cpp/utility/tuple_element}} and {{ltt std|cpp/utility/tuple_size}}.

Elements of {{tti|tuple-like}} types can be bound with [[cpp/language/structured binding#Case 2: binding a tuple-like type|structured binding]].

===See also===
{{tti|tuple-like}} and {{tti|pair-like}} are used in the following standard library components:
{{dsc begin}}
{{dsc inc|cpp/utility/tuple/dsc constructor}}
{{dsc inc|cpp/utility/tuple/dsc operator{{=}}}}
{{dsc inc|cpp/utility/tuple/dsc operator cmp}}
{{dsc inc|cpp/utility/tuple/dsc basic common reference}}
{{dsc inc|cpp/utility/tuple/dsc common type}}
{{dsc inc|cpp/utility/tuple/dsc tuple_cat}}
{{dsc inc|cpp/utility/dsc apply}}
{{dsc inc|cpp/utility/dsc make_from_tuple}}
{{dsc inc|cpp/utility/pair/dsc constructor}}
{{dsc inc|cpp/utility/pair/dsc operator{{=}}}}
{{dsc inc|cpp/ranges/subrange/dsc operator PairLike}}
{{dsc inc|cpp/ranges/dsc elements_view}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/title|uses_allocator&lt;small&gt;&lt;std::tuple&gt;&lt;/small&gt;}}
{{cpp/utility/tuple/navbar}}
{{dcl begin}}
{{dcl header | tuple}}
{{dcl | since=c++11 |
template&lt; class... Types, class Alloc &gt;
struct uses_allocator&lt; std::tuple&lt;Types...&gt;, Alloc &gt; : std::true_type { };
}}
{{dcl end}}

This specialization of {{lc|std::uses_allocator}} informs other library components that tuples support ''uses-allocator construction'', even though they do not have a nested {{tt|allocator_type}}.

{{cpp/types/integral_constant/inherit2 |{{c|true}}|bool}}

===Example===
{{source|1=
// myalloc is a stateful Allocator with a single-argument constructor
// that takes an int. It has no default constructor.

    using innervector_t = std::vector&lt;int, myalloc&lt;int&gt;&gt;;
    using elem_t = std::tuple&lt;int, innervector_t&gt;;
    using Alloc = std::scoped_allocator_adaptor&lt; myalloc&lt;elem_t&gt;, myalloc&lt;int&gt;&gt;;

    Alloc a(1,2);
    std::vector&lt;elem_t, Alloc&gt; v(a);
    v.resize(1);                  // uses allocator #1 for elements of v
    std::get&lt;1&gt;(v[0]).resize(10); // uses allocator #2 for innervector_t
}}

===See also===
{{dsc begin}}
{{dsc inc | cpp/memory/dsc uses_allocator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
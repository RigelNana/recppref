{{cpp/title|forward_as_tuple}}
{{cpp/utility/tuple/navbar}}
{{ddcla|header=tuple|since=c++11|constexpr=c++14|
template&lt; class... Types &gt;
std::tuple&lt;Types&amp;&amp;...&gt; forward_as_tuple( Types&amp;&amp;... args ) noexcept;
}}

Constructs a tuple of references to the arguments in {{c|args}} suitable for forwarding as an argument to a function. The tuple has rvalue reference data members when rvalues are used as arguments, and otherwise has lvalue reference data members.

===Parameters===
{{par begin}}
{{par|args|zero or more arguments to construct the tuple from}}
{{par end}}

===Return value===
A {{lc|std::tuple}} object created as if by {{c|std::tuple&lt;Types&amp;&amp;...&gt;(std::forward&lt;Types&gt;(args)...)}}

===Notes===
If the arguments are temporaries, {{tt|forward_as_tuple}} does not extend their lifetime; they have to be used before the end of the full expression.

===Example===
{{example|
|code=
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;string&gt;
#include &lt;tuple&gt;

int main()
{
    std::map&lt;int, std::string&gt; m;

    m.emplace(std::piecewise_construct,
              std::forward_as_tuple(6),
              std::forward_as_tuple(9, 'g'));
    std::cout &lt;&lt; "m[6] = " &lt;&lt; m[6] &lt;&lt; '\n';

    // The following is an error: it produces a
    // std::tuple&lt;int&amp;&amp;, char&amp;&amp;&gt; holding two dangling references.
    //
    // auto t = std::forward_as_tuple(20, 'a');
    // m.emplace(std::piecewise_construct, std::forward_as_tuple(10), t);
}
|output=
m[6] = ggggggggg
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/tuple/dsc make_tuple}}
{{dsc inc|cpp/utility/tuple/dsc tie}}
{{dsc inc|cpp/utility/tuple/dsc tuple_cat}}
{{dsc inc|cpp/utility/dsc apply}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
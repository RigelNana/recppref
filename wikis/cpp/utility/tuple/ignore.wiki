{{cpp/title|ignore}}
{{cpp/utility/tuple/navbar}}
{{dcl begin}}
{{dcl header|tuple}}
{{dcl header|utility}}
{{dcl rev multi|num=1
|since1=c++11|dcl1=
const /*ignore-type*/ ignore;
|since2=c++14|notes2={{mark|inline since c++17}}|dcl2=
constexpr /*ignore-type*/ ignore;
}}
{{dcl rev multi|num=2
|since1=c++11|notes1={{mark expos}}|dcl1=
struct /*ignore-type*/
{
    template&lt; class T &gt;
    const /*ignore-type*/&amp; operator=( const T&amp; ) const noexcept
    {
        return *this;
    }
};
|since2=c++14|notes2={{mark expos}}|dcl2=
struct /*ignore-type*/
{
    template&lt; class T &gt;
    constexpr const /*ignore-type*/&amp; operator=( const T&amp; ) const noexcept
    {
        return *this;
    }
};
}}
{{dcl end}}

@1@ An object such that any value can be assigned to it with no effect.

@2@ The type of {{tt|std::ignore}}.

===Notes===
A {{c/core|void}} expression or a volatile bit-field value cannot be assigned to {{tt|std::ignore}}.

{{tt|std::ignore}} is intended for use with {{lc|std::tie}} when unpacking a {{lc|std::tuple}}, as a placeholder for the arguments that are not used, but can be used for any unwanted assignment.

Some code guides recommend using {{tt|std::ignore}} to avoid warnings from unused return values of {{attr|nodiscard}} functions, even though an assignment isn't required.

For ignoring values not requiring assignment, one may cast to {{c/core|void}}. For variables that have names, but whose value is unused, one may cast those to {{c/core|void}} or declare those variables with {{attr|maybe_unused}}.

===Example===
# Demonstrates the use of {{tt|std::ignore}} together with a {{attr|nodiscard}} function.
# Unpacks a {{c|std::pair&lt;iterator, bool&gt;}} returned by {{box|{{c/core|std::set}}{{c/core|::}}{{ltt|cpp/container/set/insert}}{{c/core|()}}}}, but only saves the boolean.
{{example
|code=
#include &lt;iostream&gt;
#include &lt;set&gt;
#include &lt;string&gt;
#include &lt;tuple&gt;

[[nodiscard]] int dontIgnoreMe()
{
    return 42;
}

int main()
{
    std::ignore = dontIgnoreMe();

    std::set&lt;std::string&gt; set_of_str;
    if (bool inserted{false};
        std::tie(std::ignore, inserted) = set_of_str.insert("Test"),
        inserted)
        std::cout &lt;&lt; "Value was inserted successfully.\n";
}
|output=
Value was inserted successfully.
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2773|std=C++14|before={{lc|std::tuple}} was made {{c/core|constexpr}} but {{tt|std::ignore}} was not yet|after=made {{c/core|constexpr}}}}
{{dr list item|paper=P2968R2|std=C++11|before=the behavior of {{tt|std::ignore}} outside of {{lc|std::tie}} was not formally specified|after=made fully specified}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/tuple/dsc tie}}
{{dsc end}}
{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/utility/pair/title | swap}}
{{cpp/utility/pair/navbar}}
{{dcl begin}}
{{dcl rev multi|num=1
|since1=c++11|dcl1=
void swap( pair&amp; other ) noexcept(/* see below */);
|since2=c++20|dcl2=
constexpr void swap( pair&amp; other ) noexcept(/* see below */);
}}
{{dcl|num=2
|since=c++23|
constexpr void swap( const pair&amp; other ) const noexcept(/* see below */);
}}
{{dcl end}}

Swaps {{tt|first}} with {{tt|other.first}} and {{tt|second}} with {{tt|other.second}}, as if by {{c|using std::swap; swap(first, other.first); swap(second, other.second);}}.

{{rrev multi
|rev1=
If either selected {{tt|swap}} function call is ill-formed or does not swap the value of the member, the behavior is undefined.
|since2=c++23|rev2=
@1@ The program is ill-formed if either {{c|std::is_swappable_v&lt;T1&gt;}} or {{c|std::is_swappable_v&lt;T2&gt;}} is not {{c|true}}.

@2@ The program is ill-formed if either {{c|std::is_swappable_v&lt;const T1&gt;}} or {{c|std::is_swappable_v&lt;const T2&gt;}} is not {{c|true}}.

If either selected {{tt|swap}} function call does not swap the value of the member, the behavior is undefined.
}}

===Parameters===
{{par begin}}
{{par | other | pair of values to swap }}
{{par end}} 

===Return value===
(none)

===Exceptions===
{{rrev multi|until1=c++17
|rev1=
{{noexcept|
     noexcept(swap(first, other.first)) &amp;&amp;
     noexcept(swap(second, other.second))
}}
In the expression above, the identifier {{tt|swap}} is looked up in the same manner as the one used by the C++17 {{lc|std::is_nothrow_swappable}} trait. &lt;!-- LWG 2456 --&gt;
|rev2=
@1@ {{noexcept|
     std::is_nothrow_swappable_v&lt;first_type&gt; &amp;&amp;
     std::is_nothrow_swappable_v&lt;second_type&gt;
}}
@2@ {{noexcept|
     std::is_nothrow_swappable_v&lt;const first_type&gt; &amp;&amp;
     std::is_nothrow_swappable_v&lt;const second_type&gt;
}}
}}

===Example===
{{example
 | code=
#include &lt;iostream&gt;
#include &lt;utility&gt;
#include &lt;string&gt;
int main()
{
    std::pair&lt;int, std::string&gt; p1(10, "test"), p2;
    p2.swap(p1);
    std::cout &lt;&lt; "(" &lt;&lt; p2.first &lt;&lt; ", " &lt;&lt; p2.second &lt;&lt; ")\n";
    
#if __cpp_lib_ranges_zip &gt;= 202110L
    // Using the C++23 const qualified swap overload
    // (swap is no longer propagating pair constness)
    int i1 = 10, i2{};
    std::string s1("test"), s2;
    const std::pair&lt;int&amp;, std::string&amp;&gt; r1(i1, s1), r2(i2, s2);
    r2.swap(r1);
    std::cout &lt;&lt; "(" &lt;&lt; i2 &lt;&lt; ", " &lt;&lt; s2 &lt;&lt; ")\n";
#endif
}
 | p=true
 | output=
(10, test)
(10, test)
}}

===Defect reports===
{{dr list begin}}
{{dr list item|std=C++11|wg=lwg|dr=2456|before=the {{tt|noexcept}} specification is ill-formed|after=made to work}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc swap}}
{{dsc inc|cpp/utility/tuple/dsc swap}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
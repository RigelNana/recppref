{{cpp/title|move_if_noexcept}}
{{cpp/utility/navbar}}
{{dcl begin}}
{{dcl header|utility}}
{{dcla|since=c++11|constexpr=c++14|
template&lt; class T &gt;
/* see below */ move_if_noexcept( T&amp; x ) noexcept;
}}
{{dcl end}}

{{tt|std::move_if_noexcept}} obtains an rvalue reference to its argument if its move constructor does not throw exceptions or if there is no copy constructor (move-only type), otherwise obtains an lvalue reference to its argument. It is typically used to combine move semantics with strong exception guarantee.

The return type of {{tt|std::move_if_noexcept}} is:
* {{c|T&amp;&amp;}} if {{c|std::is_nothrow_move_constructible&lt;T&gt;::value {{!!}} !std::is_copy_constructible&lt;T&gt;::value}} is {{c|true}}.
* Otherwise, {{c|const T&amp;}}.

===Parameters===
{{par begin}}
{{par|x|the object to be moved or copied}}
{{par end}}

===Return value===
{{c|std::move(x)}} or {{c|x}}, depending on exception guarantees.

===Complexity===
Constant.

===Notes===
This is used, for example, by {{lc|std::vector::resize}}, which may have to allocate new storage and then move or copy elements from old storage to new storage. If an exception occurs during this operation, {{lc|std::vector::resize}} undoes everything it did to this point, which is only possible if {{tt|std::move_if_noexcept}} was used to decide whether to use move construction or copy construction (unless copy constructor is not available, in which case move constructor is used either way and the strong exception guarantee may be waived).

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;utility&gt;

struct Bad
{
    Bad() {}
    Bad(Bad&amp;&amp;) // may throw
    {
        std::cout &lt;&lt; "Throwing move constructor called\n";
    }
    Bad(const Bad&amp;) // may throw as well
    {
        std::cout &lt;&lt; "Throwing copy constructor called\n";
    }
};

struct Good
{
    Good() {}
    Good(Good&amp;&amp;) noexcept // will NOT throw
    {
        std::cout &lt;&lt; "Non-throwing move constructor called\n";
    }
    Good(const Good&amp;) noexcept // will NOT throw
    {
        std::cout &lt;&lt; "Non-throwing copy constructor called\n";
    }
};

int main()
{
    Good g;
    Bad b;
    [[maybe_unused]] Good g2 = std::move_if_noexcept(g);
    [[maybe_unused]] Bad b2 = std::move_if_noexcept(b);
}
|output=
Non-throwing move constructor called
Throwing copy constructor called
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc forward}}
{{dsc inc|cpp/utility/dsc move}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|swap{{small|(std::optional)}}}}
{{cpp/utility/optional/navbar}}
{{ddcl|header=optional|since=c++17|notes={{mark constexpr since c++20}}|
template&lt; class T &gt;
void swap( std::optional&lt;T&gt;&amp; lhs,
           std::optional&lt;T&gt;&amp; rhs ) noexcept(/* see below */);
}}

Overloads the {{lc|std::swap}} algorithm for {{lc|std::optional}}. Exchanges the state of {{c|lhs}} with that of {{c|rhs}}. Effectively calls {{c|lhs.swap(rhs)}}.

{{cpp/enable_if|{{c|std::is_move_constructible_v&lt;T&gt;}} and {{c|std::is_swappable_v&lt;T&gt;}} are both {{c|true}}}}.

===Parameters===
{{par begin}}
{{par|lhs, rhs|{{tt|optional}} objects whose states to swap}}
{{par end}}

===Return value===
(none)

===Exceptions===
{{noexcept|noexcept(lhs.swap(rhs))}}

===Notes===
{{ftm begin}}
{{ftm|std=C++20|dr=20|value=202106L|__cpp_lib_optional|Fully {{c/core|constexpr}}}}
{{ftm end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;optional&gt;
#include &lt;string&gt;

int main()
{
    std::optional&lt;std::string&gt; a{"██████"}, b{"▒▒▒▒▒▒"};

    auto print = [&amp;](auto const&amp; s)
    {
        std::cout &lt;&lt; s &lt;&lt; "\t"
                     "a = " &lt;&lt; a.value_or("(null)") &lt;&lt; "  "
                     "b = " &lt;&lt; b.value_or("(null)") &lt;&lt; '\n';
    };

    print("Initially:");
    std::swap(a, b);
    print("swap(a, b):");
    a.reset();
    print("\n""a.reset():");
    std::swap(a, b);
    print("swap(a, b):");
}
|output=
Initially:   a = ██████  b = ▒▒▒▒▒▒
swap(a, b):  a = ▒▒▒▒▒▒  b = ██████

a.reset():   a = (null)  b = ██████
swap(a, b):  a = ██████  b = (null)
}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P2231R1|std=C++20|before={{tt|swap}} was not {{c/core|constexpr}} while the required operations can be {{c/core|constexpr}} in C++20|after=made {{c/core|constexpr}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc swap}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
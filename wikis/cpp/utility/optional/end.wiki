{{cpp/utility/optional/title|end}}
{{cpp/utility/optional/navbar}}
{{dcl begin}}
{{dcl|since=c++26|
constexpr iterator end() noexcept;
}}
{{dcl|since=c++26|
constexpr const_iterator end() const noexcept;
}}
{{dcl end}}

Returns a past-the-end iterator. Equivalent to {{c|return begin() + has_value();}}.

{{image|range-begin-end.svg}}

===Parameters===
(none)

===Return value===
Past-the-end iterator

===Complexity===
Constant.

===Notes===
{{feature test macro|std=C++26|value=202406L|__cpp_lib_optional_range_support|Range support for {{tt|std::optional}}}}

===Example===
{{example|code=
#include &lt;optional&gt;
#include &lt;print&gt;

int main()
{
    constexpr std::optional&lt;int&gt; none = std::nullopt; // optional @1
    constexpr std::optional&lt;int&gt; some = 42;           // optional @2

    static_assert(none.begin() == none.end());
    static_assert(some.begin() != some.end());

    // ranged-for loop support
    for (int i : none)
        std::println("Optional @1 has a value of {}", i);

    for (int i : some)
        std::println("Optional @2 has a value of {}", i);
}
|output=
Optional @2 has a value of 42
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc begin}}
{{dsc end}}

{{langlinks|es|ja|zh}}
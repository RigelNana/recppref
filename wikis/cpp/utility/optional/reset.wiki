{{cpp/utility/optional/title|reset}}
{{cpp/utility/optional/navbar}}
{{ddcl|since=c++17|notes={{mark constexpr since c++20}}&lt;!-- P2231R1 --&gt;|
void reset() noexcept;
}}

If {{c|*this}} contains a value, destroy that value as if by {{c|value().T::~T()}}. Otherwise, there are no effects.

{{c|*this}} does not contain a value after this call.

===Notes===
{{ftm begin}}
{{ftm|std=C++20|dr=20|value=202106L|__cpp_lib_optional|Fully {{c/core|constexpr}}}}
{{ftm end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;optional&gt;

struct A
{
    std::string s;
    A(std::string str) : s(std::move(str)) { std::cout &lt;&lt; " constructed\n"; }
    ~A() { std::cout &lt;&lt; " destructed\n"; }
    A(const A&amp; o) : s(o.s) { std::cout &lt;&lt; " copy constructed\n"; }
    A(A&amp;&amp; o) : s(std::move(o.s)) { std::cout &lt;&lt; " move constructed\n"; }
    
    A&amp; operator=(const A&amp; other)
    {
        s = other.s;
        std::cout &lt;&lt; " copy assigned\n";
        return *this;
    }
    
    A&amp; operator=(A&amp;&amp; other)
    {
        s = std::move(other.s);
        std::cout &lt;&lt; " move assigned\n";
        return *this;
    }
};

int main()
{
    std::cout &lt;&lt; "Create empty optional:\n";
    std::optional&lt;A&gt; opt;

    std::cout &lt;&lt; "Construct and assign value:\n";
    opt = A("Lorem ipsum dolor sit amet, consectetur adipiscing elit nec.");

    std::cout &lt;&lt; "Reset optional:\n";
    opt.reset();
    std::cout &lt;&lt; "End example\n";
}
|output=
Create empty optional:
Construct and assign value:
 constructed
 move constructed
 destructed
Reset optional:
 destructed
End example
}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P2231R1|std=C++20|before={{tt|reset}} was not constexpr while non-trivial destruction is allowed in {{c/core|constexpr}} in C++20|after=made {{c/core|constexpr}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc operator{{=}}}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
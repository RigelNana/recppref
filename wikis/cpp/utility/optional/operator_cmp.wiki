{{title|1=operator==, !=, &lt;, &lt;=, &gt;, &gt;=, &lt;=&gt;{{small|(std::optional)}}}}
{{cpp/utility/optional/navbar}}
{{dcl begin}}
{{dcl header|optional}}
{{dcl h|Compare two {{tt|optional}} objects}}
{{dcl|num=1|since=c++17|1=
template&lt; class T, class U &gt;
constexpr bool operator==( const optional&lt;T&gt;&amp; lhs, const optional&lt;U&gt;&amp; rhs );
}}
{{dcl|num=2|since=c++17|1=
template&lt; class T, class U &gt;
constexpr bool operator!=( const optional&lt;T&gt;&amp; lhs, const optional&lt;U&gt;&amp; rhs );
}}
{{dcl|num=3|since=c++17|1=
template&lt; class T, class U &gt;
constexpr bool operator&lt;( const optional&lt;T&gt;&amp; lhs, const optional&lt;U&gt;&amp; rhs );
}}
{{dcl|num=4|since=c++17|1=
template&lt; class T, class U &gt;
constexpr bool operator&lt;=( const optional&lt;T&gt;&amp; lhs, const optional&lt;U&gt;&amp; rhs );
}}
{{dcl|num=5|since=c++17|1=
template&lt; class T, class U &gt;
constexpr bool operator&gt;( const optional&lt;T&gt;&amp; lhs, const optional&lt;U&gt;&amp; rhs );
}}
{{dcl|num=6|since=c++17|1=
template&lt; class T, class U &gt;
constexpr bool operator&gt;=( const optional&lt;T&gt;&amp; lhs, const optional&lt;U&gt;&amp; rhs );
}}
{{dcl|num=7|since=c++20|1=
template&lt; class T, std::three_way_comparable_with&lt;T&gt; U &gt;
constexpr std::compare_three_way_result_t&lt;T, U&gt;
    operator&lt;=&gt;( const optional&lt;T&gt;&amp; lhs, const optional&lt;U&gt;&amp; rhs );
}}
{{dcl h|Compare an {{tt|optional}} object with a {{tt|nullopt}}}}
{{dcl|num=8|since=c++17|1=
template&lt; class T &gt;
constexpr bool operator==( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}
{{dcl|num=9|since=c++17|until=c++20|1=
template&lt; class T &gt;
constexpr bool operator==( std::nullopt_t, const optional&lt;T&gt;&amp; opt ) noexcept;
}}
{{dcl|num=10|since=c++17|until=c++20|1=
template&lt; class T &gt;
constexpr bool operator!=( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}
{{dcl|num=11|since=c++17|until=c++20|1=
template&lt; class T &gt;
constexpr bool operator!=( std::nullopt_t, const optional&lt;T&gt;&amp; opt ) noexcept;
}}
{{dcl|num=12|since=c++17|until=c++20|1=
template&lt; class T &gt;
constexpr bool operator&lt;( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}
{{dcl|num=13|since=c++17|until=c++20|1=
template&lt; class T &gt;
constexpr bool operator&lt;( std::nullopt_t, const optional&lt;T&gt;&amp; opt ) noexcept;
}}
{{dcl|num=14|since=c++17|until=c++20|1=
template&lt; class T &gt;
constexpr bool operator&lt;=( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}
{{dcl|num=15|since=c++17|until=c++20|1=
template&lt; class T &gt;
constexpr bool operator&lt;=( std::nullopt_t, const optional&lt;T&gt;&amp; opt ) noexcept;
}}
{{dcl|num=16|since=c++17|until=c++20|1=
template&lt; class T &gt;
constexpr bool operator&gt;( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}
{{dcl|num=17|since=c++17|until=c++20|1=
template&lt; class T &gt;
constexpr bool operator&gt;( std::nullopt_t, const optional&lt;T&gt;&amp; opt ) noexcept;
}}
{{dcl|num=18|since=c++17|until=c++20|1=
template&lt; class T &gt; 
constexpr bool operator&gt;=( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}
{{dcl|num=19|since=c++17|until=c++20|1=
template&lt; class T &gt; 
constexpr bool operator&gt;=( std::nullopt_t, const optional&lt;T&gt;&amp; opt ) noexcept;
}}
{{dcl|num=20|since=c++20|1=
template&lt; class T &gt;
constexpr std::strong_ordering
    operator&lt;=&gt;( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}

{{dcl h|Compare an {{tt|optional}} object with a value}}
{{dcl|num=21|since=c++17|1=
template&lt; class T, class U &gt;
constexpr bool operator==( const optional&lt;T&gt;&amp; opt, const U&amp; value );
}}
&lt;!-- Exchanging the template parameters T/U is intentional for
     even-numbered overloads in order to simplify the constraints --&gt;
{{dcl|num=22|since=c++17|1=
template&lt; class U, class T &gt;
constexpr bool operator==( const U&amp; value, const optional&lt;T&gt;&amp; opt );
}}
{{dcl|num=23|since=c++17|1=
template&lt; class T, class U &gt;
constexpr bool operator!=( const optional&lt;T&gt;&amp; opt, const U&amp; value );
}}
{{dcl|num=24|since=c++17|1=
template&lt; class U, class T &gt;
constexpr bool operator!=( const U&amp; value, const optional&lt;T&gt;&amp; opt );
}}
{{dcl|num=25|since=c++17|1=
template&lt; class T, class U &gt;
constexpr bool operator&lt;( const optional&lt;T&gt;&amp; opt, const U&amp; value );
}}
{{dcl|num=26|since=c++17|1=
template&lt; class U, class T &gt;
constexpr bool operator&lt;( const U&amp; value, const optional&lt;T&gt;&amp; opt );
}}
{{dcl|num=27|since=c++17|1=
template&lt; class T, class U &gt;
constexpr bool operator&lt;=( const optional&lt;T&gt;&amp; opt, const U&amp; value );
}}
{{dcl|num=28|since=c++17|1=
template&lt; class U, class T &gt;
constexpr bool operator&lt;=( const U&amp; value, const optional&lt;T&gt;&amp; opt );
}}
{{dcl|num=29|since=c++17|1=
template&lt; class T, class U &gt;
constexpr bool operator&gt;( const optional&lt;T&gt;&amp; opt, const U&amp; value );
}}
{{dcl|num=30|since=c++17|1=
template&lt; class U, class T &gt;
constexpr bool operator&gt;( const U&amp; value, const optional&lt;T&gt;&amp; opt );
}}
{{dcl|num=31|since=c++17|1=
template&lt; class T, class U &gt;
constexpr bool operator&gt;=( const optional&lt;T&gt;&amp; opt, const U&amp; value );
}}
{{dcl|num=32|since=c++17|1=
template&lt; class U, class T &gt;
constexpr bool operator&gt;=( const U&amp; value, const optional&lt;T&gt;&amp; opt );
}}
{{dcl|num=33|since=c++20|1=
template&lt; class T, std::three_way_comparable_with&lt;T&gt; U &gt;
constexpr std::compare_three_way_result_t&lt;T, U&gt;
    operator&lt;=&gt;( const optional&lt;T&gt;&amp; opt, const U&amp; value );
}}

{{dcl end}}

Performs comparison operations on {{tt|optional}} objects.

@1-7@ Compares two {{tt|optional}} objects, {{c|lhs}} and {{c|rhs}}. The contained values are compared (using the corresponding operator of {{tt|T}}) only if both {{c|lhs}} and {{c|rhs}} contain values. Otherwise, 
* {{c|lhs}} is considered ''equal to'' {{c|rhs}} if, and only if, both {{c|lhs}} and {{c|rhs}} do not contain a value.
* {{c|lhs}} is considered ''less than'' {{c|rhs}} if, and only if, {{c|rhs}} contains a value and {{c|lhs}} does not.

:@1-6@ Let {{c|@}} denote the corresponding comparison operator, for each of these functions:
{{rev begin}}
{{rev|until=c++26|
If the corresponding expression {{c|*lhs @ *rhs}} is ill-formed or its result is not convertible to {{c/core|bool}}, the program is ill-formed.
}}
{{rev|since=c++26|
{{cpp/enable if|the corresponding expression {{c|*lhs @ *rhs}} is well-formed and its result is convertible to {{c/core|bool}}}}.
}}
{{rev end}}

@8-20@ Compares {{c|opt}} with a {{tt|nullopt}}. Equivalent to {{v|1-6}} when comparing to an {{tt|optional}} that does not contain a value.
{{rrev|since=c++20|
{{cpp/note synthesized compare}}
}}

@21-33@ Compares {{c|opt}} with a {{c|value}}. The values are compared (using the corresponding operator of {{tt|T}}) only if {{c|opt}} contains a value. Otherwise, {{c|opt}} is considered ''less than'' {{c|value}}.

:@21-32@ Let {{c|@}} denote the corresponding comparison operator, for each of these functions:
{{rev begin}}
{{rev|until=c++26|
If the corresponding expression {{c|*opt @ value}} or {{c|value @ *opt}} (depending on the positions of the operands) is ill-formed or its result is not convertible to {{c/core|bool}}, the program is ill-formed.
}}
{{rev|since=c++26|
{{cpp/enable if|all following conditions are satisfied}}:
* {{tt|U}} is not a specialization of {{lc|std::optional}}.
* The corresponding expression {{c|*opt @ value}} or {{c|value @ *opt}} (depending on the positions of the operands) is well-formed and its result is convertible to {{c/core|bool}}.
}}
{{rev end}}

===Parameters===
{{par begin}}
{{par|lhs, rhs, opt|an {{tt|optional}} object to compare}}
{{par|value|value to compare to the contained value}}
{{par end}}

===Return value===
@1@ {{c multi|lhs.has_value() !{{=}} rhs.has_value() ? false :|    (lhs.has_value() {{==}} false ? true : *lhs {{==}} *rhs)}}
@2@ {{c multi|lhs.has_value() !{{=}} rhs.has_value() ? true :|    (lhs.has_value() {{==}} false ? false : *lhs !{{=}} *rhs)}}
@3@ {{c|!rhs ? false : (!lhs ? true : *lhs &lt; *rhs)}}
@4@ {{c|!lhs ? false : (!rhs ? true : *lhs &gt; *rhs)}}
@5@ {{c|1=!lhs ? true : (!rhs ? false : *lhs &lt;= *rhs)}}
@6@ {{c|1=!rhs ? true : (!lhs ? false : *lhs &gt;= *rhs)}}
@7@ {{c|1=lhs &amp;&amp; rhs ? *lhs &lt;=&gt; *rhs : lhs.has_value() &lt;=&gt; rhs.has_value()}}

@8,9@ {{c|!opt}}
@10,11@ {{c|opt.has_value()}}
@12@ {{c|false}}
@13@ {{c|opt.has_value()}}
@14@ {{c|!opt}}
@15@ {{c|true}}
@16@ {{c|opt.has_value()}}
@17@ {{c|false}}
@18@ {{c|true}}
@19@ {{c|!opt}}
@20@ {{c|1=opt.has_value() &lt;=&gt; false}}

@21@ {{c|1=opt.has_value() ? *opt == value : false}}
@22@ {{c|1=opt.has_value() ? value == *opt : false}}
@23@ {{c|1=opt.has_value() ? *opt != value : true}}
@24@ {{c|1=opt.has_value() ? value != *opt : true}}
@25@ {{c|1=opt.has_value() ? *opt &lt; value  : true}}
@26@ {{c|1=opt.has_value() ? value &lt; *opt  : false}}
@27@ {{c|1=opt.has_value() ? *opt &lt;= value : true}}
@28@ {{c|1=opt.has_value() ? value &lt;= *opt : false}}
@29@ {{c|1=opt.has_value() ? *opt &gt; value  : false}}
@30@ {{c|1=opt.has_value() ? value &gt; *opt  : true}}
@31@ {{c|1=opt.has_value() ? *opt &gt;= value : false}}
@32@ {{c|1=opt.has_value() ? value &gt;= *opt : true}}
@33@ {{c|1=opt.has_value() ? *opt &lt;=&gt; value : std::strong_ordering::less}}

===Exceptions===
@1-7@ {{cpp/impldef exception item}}
@21-33@ Throws when and what the comparison throws.

===Notes===
{{feature test macro|__cpp_lib_constrained_equality|constrained comparison operators for {{lc|std::optional}}||value=202403L|std=C++26}}

===Defect reports===
{{dr list begin}}
{{dr list item|dr=2945|wg=lwg|std=C++17|before=order of template parameters inconsistent for compare-with-T cases|after=made consistent}}
{{dr list end}}

{{langlinks|es|ja|ru|zh}}
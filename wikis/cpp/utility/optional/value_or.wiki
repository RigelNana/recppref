{{cpp/utility/optional/title|value_or}}
{{cpp/utility/optional/navbar}}
{{dcl begin}}
{{dcl|since=c++17|num=1|1=
template&lt; class U &gt; 
constexpr T value_or( U&amp;&amp; default_value ) const&amp;;
}}
{{dcl|since=c++17|num=2|1=
template&lt; class U &gt; 
constexpr T value_or( U&amp;&amp; default_value ) &amp;&amp;;
}}
{{dcl end}}

Returns the contained value if {{c|*this}} has a value, otherwise returns {{c|default_value}}.
@1@ Equivalent to {{c|bool(*this) ? **this : static_cast&lt;T&gt;(std::forward&lt;U&gt;(default_value))}}.
@2@ Equivalent to {{c|bool(*this) ? std::move(**this) : static_cast&lt;T&gt;(std::forward&lt;U&gt;(default_value))}}.

===Parameters===
{{par begin}}
{{par|default_value|the value to use in case {{c|*this}} is empty}}
{{par hreq}}
{{par req named|T|CopyConstructible|overload=1}}
{{par req named|T|MoveConstructible|overload=2}}
{{par req|{{tt|U&amp;&amp;}} must be convertible to {{tt|T}}.}}
{{par end}}

===Return value===
The current value if {{c|*this}} has a value, or {{c|default_value}} otherwise.

===Exceptions===
Any exception thrown by the selected constructor of the return value {{tt|T}}.

===Example===
{{example
|code=
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#include &lt;optional&gt;

std::optional&lt;const char*&gt; maybe_getenv(const char* n)
{
    if (const char* x = std::getenv(n))
        return x;
    else
        return {};
}

int main()
{
    std::cout &lt;&lt; maybe_getenv("SHELL").value_or("(none)") &lt;&lt; '\n';
    std::cout &lt;&lt; maybe_getenv("MYPWD").value_or("(none)") &lt;&lt; '\n';
}
|p=true
|output=
/usr/bin/zsh
(none)
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc value}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
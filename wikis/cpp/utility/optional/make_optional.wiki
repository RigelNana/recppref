{{cpp/title|make_optional}}
{{cpp/utility/optional/navbar}}
{{dcl begin}}
{{dcl header|optional}}
{{dcl|num=1|since=c++17|1=
template&lt; class T &gt;
constexpr std::optional&lt;std::decay_t&lt;T&gt;&gt; make_optional( T&amp;&amp; value );
}}
{{dcla|num=2|since=c++17|1=
template&lt; class T, class... Args &gt;
constexpr std::optional&lt;T&gt; make_optional( Args&amp;&amp;... args );
}}
{{dcl|num=3|since=c++17|1=
template&lt; class T, class U, class... Args &gt;
constexpr std::optional&lt;T&gt; make_optional( std::initializer_list&lt;U&gt; il,
                                          Args&amp;&amp;... args );
}}
{{dcl end}}

@1@ Creates an optional object from {{c|value}}. Effectively calls {{c|std::optional&lt;std::decay_t&lt;T&gt;&gt;(std::forward&lt;T&gt;(value))}}.
@2@ Creates an optional object constructed in-place from {{c|args...}}. Equivalent to {{c|return std::optional&lt;T&gt;(std::in_place, std::forward&lt;Args&gt;(args)...);}}.&lt;br&gt;{{cpp/enable_if|{{c|std::is_constructible_v&lt;T, Args...&gt;}} is {{c|true}}}}.
@3@ Creates an optional object constructed in-place from {{c|il}} and {{c|args...}}. Equivalent to {{c|return std::optional&lt;T&gt;(std::in_place, il, std::forward&lt;Args&gt;(args)...);}}.&lt;br&gt;{{cpp/enable_if|{{c|std::is_constructible_v&lt;T, std::initializer_list&lt;U&gt;&amp;, Args...&gt;}} is {{c|true}}}}.

===Parameters===
{{par begin}}
{{par|value|the value to construct optional object with}}
{{par|il, args|arguments to be passed to the constructor of {{tt|T}}}}
{{par end}}

===Return value===
The constructed optional object.

===Exceptions===
Throws any exception thrown by the constructor of {{tt|T}}.

===Notes===
{{tt|T}} need not be movable for overloads {{vl|2,3}} due to guaranteed copy elision.

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;optional&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

int main()
{
    auto op1 = std::make_optional&lt;std::vector&lt;char&gt;&gt;({'a','b','c'});
    std::cout &lt;&lt; "op1: ";
    for (char c : op1.value())
        std::cout &lt;&lt; c &lt;&lt; ',';
    auto op2 = std::make_optional&lt;std::vector&lt;int&gt;&gt;(5, 2);
    std::cout &lt;&lt; "\nop2: ";
    for (int i : *op2)
        std::cout &lt;&lt; i &lt;&lt; ',';
    std::string str{"hello world"};
    auto op3 = std::make_optional&lt;std::string&gt;(std::move(str));
    std::cout &lt;&lt; "\nop3: " &lt;&lt; std::quoted(op3.value_or("empty value")) &lt;&lt; '\n';
    std::cout &lt;&lt; "str: " &lt;&lt; std::quoted(str) &lt;&lt; '\n';
}
|p=true
|output=
op1: a,b,c,
op2: 2,2,2,2,2,
op3: "hello world"
str: ""
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc constructor}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
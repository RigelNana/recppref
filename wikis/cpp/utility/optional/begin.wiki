{{cpp/utility/optional/title|begin}}
{{cpp/utility/optional/navbar}}
{{dcl begin}}
{{dcl|since=c++26|
constexpr iterator begin() noexcept;
}}
{{dcl|since=c++26|
constexpr const_iterator begin() const noexcept;
}}
{{dcl end}}

If {{c|*this}} contains a value, returns an iterator to the contained value. Otherwise, a past-the-end iterator value.

{{image|range-begin-end.svg}}

===Parameters===
(none)

===Return value===
Iterator to the contained value if {{c|has_value()}} is {{c/core|true}}. Otherwise, a past-the-end iterator.

===Complexity===
Constant.

===Notes===
{{feature test macro|std=C++26|value=202406L|__cpp_lib_optional_range_support|Range support for {{tt|std::optional}}}}

===Example===
{{example
|code=
#include &lt;optional&gt;
#include &lt;print&gt;
#include &lt;vector&gt;

int main()
{
    constexpr std::optional&lt;int&gt; none = std::nullopt;
    constexpr std::optional&lt;int&gt; some = 42;

    static_assert(none.begin() == none.end());
    static_assert(some.begin() != some.end());

    // ranged-for loop support
    for (int i : none)
        std::println("'none' has a value of {}", i);

    for (int i : some)
        std::println("'some' has a value of {}", i);

    std::optional&lt;std::vector&lt;int&gt;&gt; many({0, 1, 2});
    for (const auto&amp; v : many)
        std::println("'many' has a value of {}", v);
}
|output=
'some' has a value of 42
'many' has a value of [0, 1, 2]
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc end}}
{{dsc end}}

{{langlinks|es|ja|zh}}
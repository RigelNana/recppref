{{cpp/title|format}}
{{cpp/utility/format/navbar}}

{{dcl begin}}
{{dcl header|format}}
{{dcl|num=1|since=c++20|1=
template&lt; class... Args &gt;
std::string format( std::format_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl|num=2|since=c++20|1=
template&lt; class... Args &gt;
std::wstring format( std::wformat_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl|num=3|since=c++20|1=
template&lt; class... Args &gt;
std::string format( const std::locale&amp; loc,
                    std::format_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl|num=4|since=c++20|1=
template&lt; class... Args &gt;
std::wstring format( const std::locale&amp; loc,
                     std::wformat_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl end}}

Format {{c|args}} according to the format string {{c|fmt}}, and return the result as a string. If present, {{c|loc}} is used for locale-specific formatting.

@1@ Equivalent to {{c|return std::vformat(fmt.get(), std::make_format_args(args...));}}.
@2@ Equivalent to {{c|return std::vformat(fmt.get(), std::make_wformat_args(args...));}}.
@3@ Equivalent to {{c|return std::vformat(loc, fmt.get(), std::make_format_args(args...));}}.
@4@ Equivalent to {{c|return std::vformat(loc, fmt.get(), std::make_wformat_args(args...));}}.

Since {{wg21|P2216R3}}, {{tt|std::format}} does a compile-time check on the format string (via the helper type {{lc|std::format_string}} or {{lc|std::wformat_string}}). If it is found to be invalid for the types of the arguments to be formatted, a compilation error will be emitted. If the format string cannot be a compile-time constant, or the compile-time check needs to be avoided, use {{lc|std::vformat}} {{rev inl|since=c++26|or {{rlpt|runtime_format|std::runtime_format}} on {{c|fmt}}}} instead.

The following requirements apply to each type {{tt|T}} in {{tt|Args}}, where {{tt|CharT}} is {{c|char}} for overloads {{v|1,3}}, {{c|wchar_t}} for overloads {{v|2,4}}:
* {{c|std::formatter&lt;T, CharT&gt;}} must satisfy {{named req|BasicFormatter}}
* {{c|std::formatter&lt;T, CharT&gt;::parse()}} must be {{c|constexpr}} since {{wg21|P2216R3}} ({{lc|std::vformat}} does not have this requirement)

===Parameters===
{{par begin}}
{{par|fmt|{{include|cpp/utility/format/format string|const}}}}
{{par|args...|arguments to be formatted}}
{{par|loc|{{lc|std::locale}} used for locale-specific formatting}}
{{par end}}

===Return value===
A string object holding the formatted result.

===Exceptions===
Throws {{lc|std::bad_alloc}} on allocation failure. Also propagates exception thrown by any formatter.

===Notes===
It is not an error to provide more arguments than the format string requires:

{{source|
std::format("{} {}!", "Hello", "world", "something"); // OK, produces "Hello world!"
}}

As of {{wg21|P2216R3}}, it is an error if the format string is not a constant expression. {{lc|std::vformat}} can be used in this case.

{{source|
std::string f(std::string_view runtime_format_string)
{
    // return std::format(runtime_format_string, "foo", "bar"); // error
    return std::vformat(runtime_format_string, std::make_format_args("foo", "bar")); // OK
}
}}

{{rrev|since=c++26|{{lc|std::runtime_format}} can be used directly on {{tt|std::format}} instead of {{lc|std::vformat}} which requires {{lc|std::basic_format_args}} as an argument.

{{source|
std::string f(std::string_view runtime_format_string)
{
    return std::format(std::runtime_format(runtime_format_string), "foo", "bar");
}
}}

}}

===Example===
{{example
|code=
#include &lt;format&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;

template&lt;typename... Args&gt;
std::string dyna_print(std::string_view rt_fmt_str, Args&amp;&amp;... args)
{
    return std::vformat(rt_fmt_str, std::make_format_args(args...));
}

int main()
{
    std::cout &lt;&lt; std::format("Hello {}!\n", "world");

    std::string fmt;
    for (int i{}; i != 3; ++i)
    {
        fmt += "{} "; // constructs the formatting string
        std::cout &lt;&lt; fmt &lt;&lt; " : ";
        std::cout &lt;&lt; dyna_print(fmt, "alpha", 'Z', 3.14, "unused");
        std::cout &lt;&lt; '\n';
    }
}
|output=
Hello world!
{}  : alpha
{} {}  : alpha Z
{} {} {}  : alpha Z 3.14
}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P2216R3|std=C++20|before=throws {{lc|std::format_error}} for invalid format string|after=invalid format string results in compile-time error}}
{{dr list item|paper=P2418R2|std=C++20|before=objects that are neither const-usable nor copyable&lt;br&gt;(such as generator-like objects) are not formattable|after=allow formatting these objects}}
{{dr_p2508}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/format/dsc format_to}}
{{dsc inc|cpp/utility/format/dsc format_to_n}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
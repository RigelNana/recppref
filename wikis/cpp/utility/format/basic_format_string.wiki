{{cpp/title|basic_format_string|format_string|wformat_string}}
{{cpp/utility/format/navbar}}

{{dcl begin}}
{{dcl header|format}}
{{dcl|num=1|since=c++20|
template&lt; class CharT, class... Args &gt;
struct basic_format_string;
}}
{{dcl|num=2|since=c++20|1=
template&lt; class... Args &gt;
using format_string =
    basic_format_string&lt;char, std::type_identity_t&lt;Args&gt;...&gt;;
}}
{{dcl|num=3|since=c++20|1=
template&lt; class... Args &gt;
using wformat_string =
    basic_format_string&lt;wchar_t, std::type_identity_t&lt;Args&gt;...&gt;;
}}
{{dcl end}}

Class template {{tt|std::basic_format_string}} wraps a {{lc|std::basic_string_view}} that will be used by formatting functions.

The constructor of {{tt|std::basic_format_string}} performs compile-time format string checks{{rev inl|since=c++26| unless the constructor argument is returned by {{rlpt|runtime_format|std::runtime_format}}}}.

===Member functions===
{{dsc begin}}
{{dsc mem ctor|nolink=true|constructs a {{tt|basic_format_string}}, raising compile error if the argument is not a format string}}
{{dsc mem fun|nolink=true|get|returns the wrapped string}}
{{dsc end}}

{{member|1={{small|std::basic_format_string::}}basic_format_string|2=
{{dcl begin}}
{{dcl|num=1|
template&lt; class T &gt;
consteval basic_format_string( const T&amp; s );
}}
{{dcl|num=2|since=c++26|
basic_format_string( /* runtime-format-string */&lt;CharT&gt; s ) noexcept;
}}
{{dcl end}}

@1@ Constructs a {{tt|basic_format_string}} object that stores a view of string {{c|s}}. If the argument is not a compile-time constant, or if it cannot be parsed as a format string for the formatting argument types {{tt|Args}}, the construction is ill-formed.
@@ {{cpp/enable if|{{c/core|const T&amp;}} models {{c|std::convertible_to&lt;std::basic_string_view&lt;CharT&gt;&gt;}}}}.

@2@ Constructs a {{tt|basic_format_string}} object that stores a view of string {{c|s}} as returned by {{lc|std::runtime_format}}. It does not perform format string checks upon construction.

===Parameters===
{{par begin}}
{{par|s|{{cpp/utility/format/format string}}}}
{{par end}}
}}
{{member|1={{small|std::basic_format_string::}}get|2=
{{dcl begin}}
{{dcl|1=
constexpr std::basic_string_view&lt;CharT&gt; get() const noexcept;
}}
{{dcl end}}

Returns the stored string view.
}}

===Notes===
The alias templates {{tt|format_string}} and {{tt|wformat_string}} use {{lc|std::type_identity_t}} to inhibit template argument deduction. Typically, when they appear as a function parameter, their template arguments are deduced from other function arguments.

{{source|1=
template&lt;class... Args&gt;
std::string format(std::format_string&lt;Args...&gt; fmt, Args&amp;&amp;... args);

auto s = format("{} {}", 1.0, 2);
// Calls format&lt;double, int&gt;. Args are deduced from 1.0, 2
// Due to the use of type_identity_t in format_string, template argument deduction
// does not consider the type of the format string.
}}

===Example===
{{example}}

===Defect reports===
{{dr list begin}}
{{dr_p2508}}
{{dr list end}}

{{langlinks|es|ja|ru|zh}}
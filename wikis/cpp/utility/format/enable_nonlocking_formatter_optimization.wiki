{{cpp/title|enable_nonlocking_formatter_optimization}}
{{cpp/utility/format/navbar}}

{{dcl begin}}
{{dcl header|format}}
{{dcl|since=c++23|1=
template&lt; class T &gt;
constexpr bool enable_nonlocking_formatter_optimization = false;
}}
{{dcl end}}

This template can be used by implementations to enable efficient implementations of {{ltt std|cpp/io/print}} and {{ltt std|cpp/io/println}}.

If {{tt|std::enable_nonlocking_formatter_optimization&lt;T&gt;}} is {{c|true}}, printing an argument of type {{tt|T}} can be performed in a more efficient way (see {{ltt std|cpp/io/print}} for details). {{tt|std::enable_nonlocking_formatter_optimization}} specializations can be {{c|true}} in the following cases:
* {{tt|T}} is one of the types where {{ltt std|cpp/utility/format/formatter|formatter}}{{c/core|&lt;T, CharT&gt;}} is a {{rlp|formatter#Basic standard specializations|basic standard specialization}} or {{rlp|formatter#Standard specializations for library types|standard specialization for a library type}} (see below).
* A program may specialize this template for any cv-unqualified {{lsd|cpp/language/type#Program-defined type}} {{tt|T}}. Such specializations must be {{lsd|cpp/language/constant expression#Usable in constant expressions}} and have type {{c/core|const bool}}.

===Basic standard specializations===
In the following list, {{tt|CharT}} is either {{c/core|char}} or {{c/core|wchar_t}}, {{tt|ArithmeticT}} is any cv-unqualified arithmetic type other than {{c/core|char}}, {{c/core|wchar_t}}, {{c/core|char8_t}}, {{c/core|char16_t}}, or {{c/core|char32_t}}:

{{dcl begin}}
{{dcl h|Nonlocking flag for character formatters}}
{{dcl|num=1|1=
template&lt;&gt;
constexpr bool enable_nonlocking_formatter_optimization&lt;CharT&gt; = true;
}}
{{dcl h|Nonlocking flag for string formatters}}
{{dcl|num=2|1=
template&lt;&gt;
constexpr bool enable_nonlocking_formatter_optimization&lt;CharT*&gt; = true;
}}
{{dcl|num=3|1=
template&lt;&gt;
constexpr bool enable_nonlocking_formatter_optimization&lt;const CharT*&gt; = true;
}}
{{dcl|num=4|1=
template&lt; std::size_t N &gt;
constexpr bool enable_nonlocking_formatter_optimization&lt;CharT[N]&gt; = true;
}}
{{dcl|num=5|1=
template&lt; class Traits, class Alloc &gt;
constexpr bool enable_nonlocking_formatter_optimization
    &lt;std::basic_string&lt;CharT, Traits, Alloc&gt;&gt; = true;
}}
{{dcl|num=6|1=
template&lt; class Traits &gt;
constexpr bool enable_nonlocking_formatter_optimization
    &lt;std::basic_string_view&lt;CharT, Traits&gt;&gt; = true;
}}
{{dcl h|Nonlocking flag for arithmetic formatters}}
{{dcl|num=7|1=
template&lt;&gt;
constexpr bool enable_nonlocking_formatter_optimization&lt;ArithmeticT&gt; = true;
}}
{{dcl h|Nonlocking flag for pointer formatters}}
{{dcl|num=8|1=
template&lt;&gt;
constexpr bool enable_nonlocking_formatter_optimization&lt;std::nullptr_t&gt; = true;
}}
{{dcl|num=9|1=
template&lt;&gt;
constexpr bool enable_nonlocking_formatter_optimization&lt;void*&gt; = true;
}}
{{dcl|num=10|1=
template&lt;&gt;
constexpr bool enable_nonlocking_formatter_optimization&lt;const void*&gt; = true;
}}
{{dcl end}}

===Standard specializations for library types===
Specializations of {{tt|enable_nonlocking_formatter_optimization}} for all specializations of the following standard templates are defined as {{c|true}}:
* {{ltt|cpp/chrono/zoned_time|std::chrono::zoned_time}} when its template parameter type {{tt|TimeZonePtr}} is {{c/core|const std::chrono::time_zone*}}

Specializations of {{tt|enable_nonlocking_formatter_optimization}} for all specializations of the following standard templates are defined as conditionally {{c|true}}:
* {{ltt|cpp/utility/pair|std::pair}}
* {{ltt|cpp/utility/tuple|std::tuple}}
* {{ltt|cpp/chrono/duration|std::chrono::duration}}

Specialization of {{tt|enable_nonlocking_formatter_optimization}} for all [[cpp/utility/format/ranges_formatter|formattable range types]] are always defined as {{c|false}} for which the range format kind is not {{c|std::range_format::disabled}}.

===Notes===
{{ftm begin|sort=yes}}
{{ftm|__cpp_lib_print|Formatted output with stream locking|value=202403L|std=C++26|dr=23|rowspan=2}}
{{ftm|-|Enabling nonlocking formatter optimization for more formattable types|value=202406L|std=C++26|dr=23}}
{{ftm end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/format/dsc formatter}}
{{dsc inc|cpp/io/dsc print}}
{{dsc inc|cpp/io/dsc println}}
{{dsc end}}

{{langlinks|zh}}
{{cpp/title|formatted_size}}
{{cpp/utility/format/navbar}}

{{dcl begin}}
{{dcl header|format}}
{{dcl|num=1|since=c++20|1=
template&lt; class... Args &gt;
std::size_t formatted_size( std::format_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl|num=2|since=c++20|1=
template&lt; class... Args &gt;
std::size_t formatted_size( std::wformat_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl|num=3|since=c++20|1=
template&lt; class... Args &gt;
std::size_t formatted_size( const std::locale&amp; loc,
                            std::format_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl|num=4|since=c++20|1=
template&lt; class... Args &gt;
std::size_t formatted_size( const std::locale&amp; loc,
                            std::wformat_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl end}}

Determine the total number of characters in the formatted string by formatting {{c|args}} according to the format string {{c|fmt}}. If present, {{c|loc}} is used for locale-specific formatting.

The behavior is undefined if {{c|std::formatter&lt;std::remove_cvref_t&lt;Ti&gt;, CharT&gt;}} does not meet the {{named req|BasicFormatter}} requirements for any {{tt|Ti}} in {{tt|Args}}.

===Parameters===
{{par begin}}
{{par|fmt|{{cpp/utility/format/format string|const}}}}
{{par|args...|arguments to be formatted}}
{{par|loc|{{lc|std::locale}} used for locale-specific formatting}}
{{par end}}

===Return value===
The total number of characters in the formatted string.

===Exceptions===
Propagates any exception thrown by formatter.

===Example===
{{example
|code=
#include &lt;format&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;
#include &lt;vector&gt;

int main()
{
    using namespace std::literals::string_view_literals;

    constexpr auto fmt_str{"Hubble's H{0} {1} {2:*^4} miles/sec/mpc."sv};
    constexpr auto sub_zero{"\N{SUBSCRIPT ZERO}"sv}; // "₀" or {0342, 130, 128}
    constexpr auto aprox_equ{"\N{APPROXIMATELY EQUAL TO}"sv}; // "≅" or {0342, 137, 133}
    constexpr int Ho{42}; // H₀

    const auto min_buffer_size{std::formatted_size(fmt_str, sub_zero, aprox_equ, Ho)};
    std::cout &lt;&lt; "Min buffer size = " &lt;&lt; min_buffer_size &lt;&lt; '\n';

    // Use std::vector as dynamic buffer. The buffer does not include the trailing '\0'.
    std::vector&lt;char&gt; buffer(min_buffer_size);

    std::format_to_n(buffer.data(), buffer.size(), fmt_str, sub_zero, aprox_equ, Ho);
    std::cout &lt;&lt; "Buffer: "
              &lt;&lt; std::quoted(std::string_view{buffer.data(), min_buffer_size})
              &lt;&lt; '\n';

    // Print the buffer directly after adding the trailing '\0'.
    buffer.push_back('\0');
    std::cout &lt;&lt; "Buffer: " &lt;&lt; std::quoted(buffer.data()) &lt;&lt; '\n';
}
|output=
Min buffer size = 37
Buffer: "Hubble's H₀ ≅ *42* miles/sec/mpc."
Buffer: "Hubble's H₀ ≅ *42* miles/sec/mpc."
}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P2216R3|std=C++20|before=throws {{lc|std::format_error}} for invalid format string|after=invalid format string results in compile-time error}}
{{dr list item|paper=P2418R2|std=C++20|before=objects that are neither const-usable nor copyable&lt;br&gt;(such as generator-like objects) are not formattable|after=allow formatting these objects}}
{{dr_p2508}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/format/dsc format_to}}
{{dsc inc|cpp/utility/format/dsc format_to_n}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
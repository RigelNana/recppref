{{cpp/title|basic_format_context}}
{{cpp/utility/format/navbar}}

{{dcl begin}}
{{dcl header|format}}
{{dcl|num=1|since=c++20|1=
template&lt; class OutputIt, class CharT &gt;
class basic_format_context;
}}
{{dcl|num=2|since=c++20|1=
using format_context = basic_format_context&lt;/* unspecified */, char&gt;;
}}
{{dcl|num=3|since=c++20|1=
using wformat_context = basic_format_context&lt;/* unspecified */, wchar_t&gt;;
}}
{{dcl end}}

Provides access to formatting state consisting of the formatting arguments and the output iterator.

@2@ The unspecified template argument is an output iterator that appends to {{lc|std::string}}, such as {{c|std::back_insert_iterator&lt;std::string&gt;}}. Implementations typically use an iterator to type-erased buffer type that supports appending to any contiguous and resizable container.

@3@ The unspecified template argument is an output iterator that appends to {{lc|std::wstring}}.

The behavior is undefined if {{tt|OutputIt}} does not model {{c|std::output_iterator&lt;const CharT&amp;&gt;}}.

A program that declares an explicit or partial specialization of {{tt|std::basic_format_context}} is ill-formed, no diagnostic required.

{{tt|std::basic_format_context}} objects can only be created by the implementation. User codes are only allowed to modify the format context via the {{tt|format}} function of {{lc|std::formatter}} specializations.

===Member types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|iterator}}|{{tt|OutputIt}}}}
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc end}}

===Member alias templates===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{c/core|formatter_type&lt;T&gt;}}|{{c/core|std::formatter&lt;T, CharT&gt;}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|nolink=true|notes={{cmark deleted}}|{{tt|basic_format_context}} cannot be constructed by user code}}
{{dsc mem fun|operator{{=}}|nolink=true|notes={{cmark deleted}}|{{tt|basic_format_context}} is not assignable}}
{{dsc mem fun|arg|nolink=true|returns the argument at the given index}}
{{dsc mem fun|locale|nolink=true|returns the locale used for locale-specific formatting}}
{{dsc mem fun|out|nolink=true|returns the iterator to output buffer}}
{{dsc mem fun|advance_to|nolink=true|advances the output iterator to the given position}}
{{dsc end}}
{{member|{{small|std::basic_format_context::}}arg|2=
{{ddcl|1=
std::basic_format_arg&lt;basic_format_context&gt; arg( std::size_t id ) const;
}}

Returns a {{tt|std::basic_format_arg}} holding the {{tt|id}}-th argument in {{tt|args}}, where {{tt|args}} is the parameter pack or {{tt|std::basic_format_args}} object passed to the formatting function.

If {{tt|id}} is not less than the number of formatting arguments, returns a default-constructed {{tt|std::basic_format_arg}} (holding a {{lc|std::monostate}} object).
}}
{{member|{{small|std::basic_format_context::}}locale|2=
{{ddcl|1=
std::locale locale();
}}

Returns the locale passed to the formatting function, or a default-constructed {{lc|std::locale}} if the formatting function does not take a locale.
}}
{{member|{{small|std::basic_format_context::}}out|2=
{{ddcl|1=
iterator out();
}}

Returns the iterator to the output buffer. The result is move-constructed from the stored iterator.
}}
{{member|{{small|std::basic_format_context::}}advance_to|2=
{{ddcl|1=
void advance_to( iterator it );
}}

Move assigns {{tt|it}} to the stored output iterator. After a call to {{tt|advance_to}}, the next call to {{tt|out()}} will return an iterator with the value that {{tt|it}} had before the assignment.
}}

===Example===
{{example
|code=
|output=
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3567|std=C++20|before={{tt|basic_format_context}} does not work move-only iterator types|after=made to move iterators}}
{{dr list item|wg=lwg|dr=3975|std=C++20|before=user specialization of {{tt|basic_format_context}} was allowed|after=disallowed}}
{{dr list item|wg=lwg|dr=4061|std=C++20|before={{tt|basic_format_context}} was constructible and assignable by user code|after=made neither constructible nor assignable}}
{{dr list end}}

{{langlinks|es|ja|ru|zh}}
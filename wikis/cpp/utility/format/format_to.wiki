{{cpp/title|format_to}}
{{cpp/utility/format/navbar}}

{{dcl begin}}
{{dcl header|format}}
{{dcl|num=1|since=c++20|1=
template&lt; class OutputIt, class... Args &gt;
OutputIt format_to( OutputIt out,
                    std::format_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl|num=2|since=c++20|1=
template&lt; class OutputIt, class... Args &gt;
OutputIt format_to( OutputIt out,
                    std::wformat_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl|num=3|since=c++20|1=
template&lt; class OutputIt, class... Args &gt;
OutputIt format_to( OutputIt out, const std::locale&amp; loc,
                    std::format_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl|num=4|since=c++20|1=
template&lt; class OutputIt, class... Args &gt;
OutputIt format_to( OutputIt out, const std::locale&amp; loc,
                    std::wformat_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl end}}

Format {{c|args}} according to the format string {{c|fmt}}, and write the result to the output iterator {{c|out}}. If present, {{c|loc}} is used for locale-specific formatting.

Equivalent to:
@1@ {{c|return std::vformat_to(std::move(out), fmt.str, std::make_format_args(args...));}}
@2@ {{c|return std::vformat_to(std::move(out), fmt.str, std::make_wformat_args(args...));}}
@3@ {{c|return std::vformat_to(std::move(out), loc, fmt.str, std::make_format_args(args...));}}
@4@ {{c|return std::vformat_to(std::move(out), loc, fmt.str, std::make_wformat_args(args...));}}.


Let {{tt|CharT}} be {{c/core|char}} for overloads {{v|1,3}}, {{c/core|wchar_t}} for overloads {{v|2,4}}.

{{cpp/enable if|plural=yes|{{tt|OutputIt}} satisfies the concept {{c/core|std::output_iterator&lt;const CharT&amp;&gt;}}.}}

If any of the following conditions is satisfied, the behavior is undefined:
* {{tt|OutputIt}} does not model {{c/core|std::output_iterator&lt;const CharT&amp;&gt;}}.
* {{c/core|std::formatter&lt;Ti, CharT&gt;}} does not meet the {{named req|BasicFormatter}} requirements (as required by {{lc|std::make_format_args}} and {{lc|std::make_wformat_args}}) for some {{tt|Ti}} in {{tt|Args}}.

===Parameters===
{{par begin}}
{{par|out|iterator to the output buffer}}
{{par|fmt|{{include|cpp/utility/format/format string|const}}}}
{{par|args...|arguments to be formatted}}
{{par|loc|{{lc|std::locale}} used for locale-specific formatting}}
{{par end}}

===Return value===
Iterator past the end of the output range.

===Exceptions===
Propagates any exception thrown by formatter or iterator operations.

===Notes===
As of {{wg21|P2216R3}}, it is an error if the format string is not a constant expression. {{lc|std::vformat_to}} {{rev inl|since=c++26|or {{lc|std::runtime_format}}}} can be used in this case.

===Example===
{{example
|code=
#include &lt;format&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;

int main()
{
    std::string buffer;
    
    std::format_to
    (
        std::back_inserter(buffer), // &lt; OutputIt
        "Hello, C++{}!\n",          // &lt; fmt
        "20"                        // &lt; arg
    );
    std::cout &lt;&lt; buffer;
    buffer.clear();
    
    std::format_to
    (
        std::back_inserter(buffer), // &lt; OutputIt
        "Hello, {0}::{1}!{2}",      // &lt; fmt
        "std",                      // &lt; arg {0}
        "format_to()",              // &lt; arg {1}
        "\n",                       // &lt; arg {2}
        "extra param(s)..."         // &lt; unused
    );
    std::cout &lt;&lt; buffer &lt;&lt; std::flush;
    
    std::wstring wbuffer;
    std::format_to
    (
        std::back_inserter(wbuffer),// &lt; OutputIt
        L"Hello, {2}::{1}!{0}",     // &lt; fmt
        L"\n",                      // &lt; arg {0}
        L"format_to()",             // &lt; arg {1}
        L"std",                     // &lt; arg {2}
        L"...is not..."             // &lt; unused
        L"...an error!"             // &lt; unused
    );
    std::wcout &lt;&lt; wbuffer;
}
|output=
Hello, C++20!
Hello, std::format_to()!
Hello, std::format_to()!
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3539|std=C++20|before={{c|out}} could not be a move-only iterator|after=it can be}}
{{dr list item|paper=P2216R3|std=C++20|before=throws {{lc|std::format_error}} for invalid format string|after=results in compile-time error instead}}
{{dr list item|paper=P2418R2|std=C++20|before=objects that are neither const-usable nor copyable&lt;br&gt;(such as generator-like objects) are not formattable|after=allow formatting these objects}}
{{dr_p2508}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/format/dsc format}}
{{dsc inc|cpp/utility/format/dsc format_to_n}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/title|basic_format_parse_context}}
{{cpp/utility/format/navbar}}

{{dcl begin}}
{{dcl header|format}}
{{dcl|since=c++20|
template&lt; class CharT &gt;
class basic_format_parse_context;
}}
{{dcl end}}

Provides access to the format string parsing state consisting of the format string range being parsed and the argument counter for automatic indexing.

A {{tt|std::basic_format_parse_context}} instance is passed to {{named req|Formatter}} when parsing the format specification.

A program that declares an explicit or partial specialization of {{tt|std::basic_format_parse_context}} is ill-formed, no diagnostic required.

{{cpp/basic char typedefs|format_parse_context|format}}

===Member types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc|{{tt|iterator}}|{{c/core|std::basic_string_view&lt;CharT&gt;::const_iterator}}}}
{{dsc|{{tt|const_iterator}}|{{c/core|std::basic_string_view&lt;CharT&gt;::const_iterator}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|nolink=true|constructs a {{tt|std::basic_format_parse_context}} instance from format string and argument count}}
{{dsc mem fun|operator{{=}}|nolink=true|notes={{cmark deleted}}|{{tt|std::basic_format_parse_context}} is not copyable}}
{{dsc mem fun|begin|nolink=true|returns an iterator to the beginning of the format string range}}
{{dsc mem fun|end|nolink=true|returns an iterator to the end of the format string range}}
{{dsc mem fun|advance_to|nolink=true|advances the begin iterator to the given position}}
{{dsc mem fun|next_arg_id|nolink=true|enters automatic indexing mode, and returns the next argument index}}
{{dsc mem fun|check_arg_id|nolink=true|enters manual indexing mode, checks if the given argument index is in range}}
{{dsc mem fun|check_dynamic_spec|nolink=true|checks if the type of the corresponding format argument with the given argument index is in the given type template arguments|notes={{mark c++26}}}}
{{dsc mem fun|check_dynamic_spec_integral|nolink=true|checks if the type of the corresponding format argument with the given argument index is an integral type|notes={{mark c++26}}}}
{{dsc mem fun|check_dynamic_spec_string|nolink=true|checks if the type of the corresponding format argument with the given argument index is a string type|notes={{mark c++26}}}}
{{dsc end}}

{{member|{{small|std::basic_format_parse_context::}}basic_format_parse_context|2=
{{dcl begin}}
{{dcl rev multi|num=1|until1=c++26|dcl1=
constexpr explicit 
basic_format_parse_context( std::basic_string_view&lt;CharT&gt; fmt,
                            std::size_t num_args = 0 ) noexcept;
|since2=c++26|dcl2=
constexpr explicit 
basic_format_parse_context( std::basic_string_view&lt;CharT&gt; fmt ) noexcept;
}}
{{dcl|num=2|1=
basic_format_parse_context( const basic_format_parse_context&amp; ) = delete;
}}
{{dcl end}}

@1@ Constructs a {{tt|std::basic_format_parse_context}} instance. Initializes the format string range to {{range|fmt.begin()|fmt.end()}}, and the argument count to {{rev inl|until=c++26|{{c|num_args}}}}{{rev inl|since=c++26|{{c|0}}}}. 
{{rrev|since=c++26|Any call to {{tt|next_arg_id}}, {{tt|check_arg_id}}, or {{tt|check_dynamic_spec}} on an instance of {{tt|std::basic_format_parse_context}} initialized using this constructor is not a core constant expression.}}

@2@ The copy constructor is deleted. {{tt|std::basic_format_parse_context}} is not copyable.
}}

{{member|{{small|std::basic_format_parse_context::}}begin|2=
{{ddcl|
constexpr const_iterator begin() const noexcept;
}}

Returns an iterator to the beginning of the format string range.
}}

{{member|{{small|std::basic_format_parse_context::}}end|2=
{{ddcl|
constexpr const_iterator end() const noexcept;
}}

Returns an iterator to the end of the format string range.
}}

{{member|{{small|std::basic_format_parse_context::}}advance_to|2=
{{ddcl|
constexpr void advance_to( const_iterator it );
}}

Sets the beginning of the format string range to {{c|it}}. After a call to {{tt|advance_to()}}, subsequent calls to {{tt|begin()}} will return a copy of {{c|it}}.

The behavior is undefined if {{c|end()}} is not [[cpp/iterator#Ranges|reachable]] from {{c|it}}.
}}

{{member|{{small|std::basic_format_parse_context::}}next_arg_id|2=
{{ddcl|
constexpr std::size_t next_arg_id();
}}

Enters automatic argument indexing mode, and returns the next argument index, starting from 0.

If {{c|*this}} has already entered manual argument indexing mode, throws {{lc|std::format_error}}.

If the next argument index is larger than or equal to the {{c|num_args}} provided in the constructor, the call is not a core constant expression.
}}

{{member|{{small|std::basic_format_parse_context::}}check_arg_id|2=
{{ddcl|
constexpr void check_arg_id( std::size_t id );
}}

Enters manual argument indexing mode.

If {{c|*this}} has already entered automatic argument indexing mode, throws {{lc|std::format_error}}.

If {{c|id}} is larger than or equal to the {{c|num_args}} provided in the constructor, the call is not a core constant expression.
}}

{{member|{{small|std::basic_format_parse_context::}}check_dynamic_spec|2=
{{ddcl|since=c++26|
template&lt; class... Ts &gt;
constexpr void check_dynamic_spec( std::size_t id ) noexcept;
}}

If {{c|id}} is larger than or equal to the {{c|num_args}} provided in the constructor or the type of the corresponding format argument (after conversion to {{lc|std::basic_format_arg}}) is not one of the types in {{c|Ts...}}, the call is not a core constant expression. A call to {{c|check_dynamic_spec}} has no effect at runtime.

The program is ill-formed unless {{c|1=sizeof...(Ts) &gt;= 1}}, the types in {{c|Ts...}} are unique, and each type is one of {{c|bool}}, {{c|char_type}}, {{c|int}}, {{c|unsigned int}}, {{c|long long int}}, {{c|unsigned long long int}}, {{c|float}}, {{c|double}}, {{c|long double}}, {{c|const char_type*}}, {{c|std::basic_string_view&lt;char_type&gt;}}, or {{c|const void*}}.
}}

{{member|{{small|std::basic_format_parse_context::}}check_dynamic_spec_integral|2=
{{ddcl|since=c++26|
constexpr void check_dynamic_spec_integral( std::size_t id ) noexcept;
}}

Equivalent to call {{c|check_dynamic_spec&lt;int, unsigned int, long long int, unsigned long long int&gt;(id)}}. A call to {{c|check_dynamic_spec_integral}} has no effect at runtime.
}}

{{member|{{small|std::basic_format_parse_context::}}check_dynamic_spec_string|2=
{{ddcl|since=c++26|
constexpr void check_dynamic_spec_string( std::size_t id ) noexcept;
}}

Equivalent to call {{c|check_dynamic_spec&lt;const char_type*, std::basic_string_view&lt;char_type&gt;&gt;(id)}}. A call to {{c|check_dynamic_spec_string}} has no effect at runtime.
}}

===Example===
{{example
|code=
|output=
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3825|std=C++20|before={{tt|check_arg_id}} has a compile-time argument&lt;br&gt;{{c|id}} check, but {{tt|next_arg_id}} did not have|after=added}}
{{dr list item|wg=lwg|dr=3975|std=C++20|before=user specialization of {{tt|basic_format_parse_context}} was allowed|after=disallowed}}
{{dr list end}}

{{langlinks|es|ja|ru|zh}}
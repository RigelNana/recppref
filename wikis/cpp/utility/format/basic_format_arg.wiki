{{cpp/title|basic_format_arg}}
{{cpp/utility/format/navbar}}

{{ddcl|header = format|since=c++20|1=
template&lt; class Context &gt;
class basic_format_arg;
}}

Provides access to a formatting argument.

{{tt|basic_format_arg}} objects are typically created by {{lc|std::make_format_args}} and accessed through {{lc|std::visit_format_arg}}{{rev inl|since=c++26| or the {{tt|visit}} member functions}}.

A {{tt|basic_format_arg}} object behaves as if it stores a {{lc|std::variant}} of the following types:

* {{c|std::monostate}} (only if the object was default-constructed)
* {{c|bool}}
* {{c|Context::char_type}}
* {{c|int}}
* {{c|unsigned int}}
* {{c|long long int}}
* {{c|unsigned long long int}}
* {{c|float}}
* {{c|double}}
* {{c|long double}}
* {{c|const Context::char_type*}}
* {{c|std::basic_string_view&lt;Context::char_type&gt;}}
* {{c|const void*}}
* {{c|basic_format_arg::handle}}

===Member classes===
{{dsc begin}}
{{dsc mem class|cpp/utility/format/basic_format_arg/handle|notes={{mark c++20}}|type-erased wrapper that allows formatting an object of user-defined type}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|nolink=true|notes={{mark c++20}}|constructs a {{tt|std::basic_format_arg}}}}
{{dsc mem fun|operator bool|nolink=true|notes={{mark c++20}}|checks if the current object holds a formatting argument}}
{{dsc mem fun|visit|nolink=true|notes={{mark c++26}}|visit the stored formatting argument}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/utility/format/dsc visit_format_arg}}
{{dsc end}}

{{member|{{small|std::basic_format_arg::}}basic_format_arg|2=
{{ddcl|since=c++20|
basic_format_arg() noexcept;
}}

Default constructor. Constructs a {{tt|basic_format_arg}} that does not hold a formatting argument. The stored object has type {{lc|std::monostate}}.

To create a {{tt|basic_format_arg}} that holds a formatting argument, {{lc|std::make_format_args}} has to be used.
}}
{{member|{{small|std::basic_format_arg::}}operator bool|2=
{{ddcl|since=c++20|
explicit operator bool() const noexcept;
}}
Checks whether {{c|*this}} holds a formatting argument.

Returns {{c|true}} if {{c|*this}} holds a formatting argument (i.e. the stored object does not have type {{lc|std::monostate}}), {{c|false}} otherwise.
}}
{{anchor|visit}}
{{member|{{small|std::basic_format_arg::}}visit|2=
{{dcl begin}}
{{dcl|num=1|since=c++26|
template&lt; class Visitor &gt;
decltype(auto) visit( this basic_format_arg arg, Visitor&amp;&amp; vis );
}}
{{dcl|num=2|since=c++26|
template&lt; class R, class Visitor &gt;
R visit( this basic_format_arg arg, Visitor&amp;&amp; vis );
}}
{{dcl end}}

Applies the visitor {{c|vis}} to the object contained in {{c|arg}}.

The {{tt|visit}} functions do not modify the {{tt|basic_format_arg}} object on which it is called because a copy of the object is used when calling {{c|vis}}.

@1@ Equivalent to {{c|return std::visit(std::forward&lt;Visitor&gt;(vis), v);}}, where {{tt|v}} is the {{lc|std::variant}} stored in {{c|arg}}.

@2@ Equivalent to {{c|return std::visit&lt;R&gt;(std::forward&lt;Visitor&gt;(vis), v);}}, where {{tt|v}} is the {{lc|std::variant}} stored in {{c|arg}}.
}}

===Notes===
{{ftm begin}}
{{ftm|__cpp_lib_format|Member [[#visit|{{tt|visit}}]]|std=C++26|value=202306L}}
{{ftm end}}

===Example===
{{example
|code=
|output=
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/format/dsc basic_format_args}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/title|runtime_format}}
{{cpp/utility/format/navbar}}

{{dcl begin}}
{{dcl header|format}}
{{dcl|num=1|since=c++26|1=
/*runtime-format-string*/&lt;char&gt; runtime_format( std::string_view fmt ) noexcept;
}}
{{dcl|num=2|since=c++26|1=
/*runtime-format-string*/&lt;wchar_t&gt; runtime_format( std::wstring_view fmt ) noexcept;
}}
{{dcl end}}

Returns an object that stores a runtime format string directly usable in user-oriented formatting functions and can be implicitly converted to {{rlpt|basic_format_string|std::basic_format_string}}.

===Parameters===
{{par begin}}
{{par|fmt|a string view}}
{{par end}}

===Return value===
An object holding the runtime format string of the exposition-only type:
{{member|{{petty|'''Class template'''}} {{small|{{tti|runtime-format-string}} {{tt|&lt;CharT&gt;}}}}|2=

{{dcl begin}}
{{dcl|notes={{mark expos}}|1=
template&lt; class CharT &gt;
struct /*runtime-format-string*/;
}}
{{dcl end}}

====Member objects====
The returned object contains an exposition-only non-static data member {{tti|str}} of type {{lc|std::basic_string_view&lt;CharT&gt;}}.

====Constructors and assignments====
{{dcl begin}}
{{dcl|num=1|1=
/*runtime-format-string*/( std::basic_string_view&lt;CharT&gt; s ) noexcept;
}}
{{dcl|num=2|1=
/*runtime-format-string*/( const /*runtime-format-string*/&amp; ) = delete;
}}
{{dcl|num=3|1=
/*runtime-format-string*/&amp; operator=( const /*runtime-format-string*/&amp; ) = delete;
}}
{{dcl end}}

@1@ Initializes {{tti|str}} with {{tt|s}}.
@2@ Copy constructor is explicitly deleted. The type is neither copyable nor movable.
@3@ The assignment is explicitly deleted.
}}

===Notes===
Since the return type of {{tt|runtime_format}} is neither copyable nor movable, an attempt of passing {{c|runtime_fmt}} as glvalue inhibits the construction of {{lc|std::basic_format_string}} which results in program ill-formed. To construct {{tt|std::basic_format_string}} with {{tt|runtime_format}}, the returned value of {{tt|runtime_format}} is passed directly on {{tt|std::basic_format_string}} as prvalue where copy elision is guaranteed.

{{source|1=
auto runtime_fmt = std::runtime_format("{}");

auto s0 = std::format(runtime_fmt, 1); // error
auto s1 = std::format(std::move(runtime_fmt), 1); // still error
auto s2 = std::format(std::runtime_format("{}"), 1); // ok
}}

{{ftm begin}}
{{ftm|std=C++26|value=202311L|__cpp_lib_format|Runtime format strings}}
{{ftm end}}

===Example===
{{example
|code=
#include &lt;format&gt;
#include &lt;print&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;

int main()
{
    std::print("Hello {}!\n", "world");

    std::string fmt;
    for (int i{}; i != 3; ++i)
    {
        fmt += "{} "; // constructs the formatting string
        std::print("{} : ", fmt);
        std::println(std::runtime_format(fmt), "alpha", 'Z', 3.14, "unused");
    }
}
|output=
Hello world!
{}  : alpha
{} {}  : alpha Z
{} {} {}  : alpha Z 3.14
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/format/dsc format}}
{{dsc inc|cpp/utility/format/dsc vformat}}
{{dsc inc|cpp/utility/format/dsc basic_format_string}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
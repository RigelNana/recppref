{{cpp/title|formatter}}
{{cpp/utility/format/navbar}}

{{ddcl|header=format|since=c++20|1=
template&lt; class T, class CharT = char &gt;
struct formatter;
}}

The enabled specializations of {{tt|std::formatter}} define formatting rules for a given type. Enabled specializations meet the {{named req|BasicFormatter}} requirements, and, unless otherwise specified, also meet the {{named req|Formatter}} requirements.

For all types {{tt|T}} and {{tt|CharT}} for which no specialization {{tt|std::formatter&lt;T, CharT&gt;}} is enabled, that specialization is a complete type and is disabled.

Disabled specializations do not meet the {{named req|Formatter}} requirements, and the following are all {{c|false}}:
* {{lc|std::is_default_constructible_v}}
* {{lc|std::is_copy_constructible_v}}
* {{lc|std::is_move_constructible_v}}
* {{lc|std::is_copy_assignable_v}}
* {{lc|std::is_move_assignable_v}}.

===Basic standard specializations===
In the following list, {{tt|CharT}} is either {{c/core|char}} or {{c/core|wchar_t}}, {{tt|ArithmeticT}} is any cv-unqualified arithmetic type other than {{c/core|char}}, {{c/core|wchar_t}}, {{c/core|char8_t}}, {{c/core|char16_t}}, or {{c/core|char32_t}}:

{{dcl begin}}
{{dcl h|Character formatters}}
{{dcl|num=1|1=
template&lt;&gt;
struct formatter&lt;char, char&gt;;
}}
{{dcl|num=2|1=
template&lt;&gt;
struct formatter&lt;char, wchar_t&gt;;
}}
{{dcl|num=3|1=
template&lt;&gt;
struct formatter&lt;wchar_t, wchar_t&gt;;
}}
{{dcl h|String formatters}}
{{dcl|num=4|1=
template&lt;&gt;
struct formatter&lt;CharT*, CharT&gt;;
}}
{{dcl|num=5|1=
template&lt;&gt;
struct formatter&lt;const CharT*, CharT&gt;;
}}
{{dcl|num=6|1=
template&lt; std::size_t N &gt;
struct formatter&lt;CharT[N], CharT&gt;;
}}
{{dcl|num=7|1=
template&lt; class Traits, class Alloc &gt;
struct formatter&lt;std::basic_string&lt;CharT, Traits, Alloc&gt;, CharT&gt;;
}}
{{dcl|num=8|1=
template&lt; class Traits &gt;
struct formatter&lt;std::basic_string_view&lt;CharT, Traits&gt;, CharT&gt;;
}}
{{dcl h|Arithmetic formatters}}
{{dcl|num=9|1=
template&lt;&gt;
struct formatter&lt;ArithmeticT, CharT&gt;;
}}
{{dcl h|Pointer formatters}}
{{dcl|num=10|1=
template&lt;&gt;
struct formatter&lt;std::nullptr_t, CharT&gt;;
}}
{{dcl|num=11|1=
template&lt;&gt;
struct formatter&lt;void*, CharT&gt;;
}}
{{dcl|num=12|1=
template&lt;&gt;
struct formatter&lt;const void*, CharT&gt;;
}}
{{dcl end}}

Formatters for other pointers and pointers to members are disabled.

Specializations such as {{c/core|std::formatter&lt;wchar_t, char&gt;}} and {{c/core|std::formatter&lt;const char*, wchar_t&gt;}} that would require encoding conversions are disabled.

{{rrev|since=c++23|
The following specialization are still disabled in C++23 to avoid formatting some {{c/core|char}} sequences as ranges of {{c/core|wchar_t}}:

{{dcl begin}}
{{dcl h|Disabled formatters for {{c/core|wchar_t}}}}
{{dcl|num=1|
template&lt;&gt;
struct formatter&lt;char*, wchar_t&gt;;
}}
{{dcl|num=2|
template&lt;&gt;
struct formatter&lt;const char*, wchar_t&gt;;
}}
{{dcl|num=3|
template&lt; std::size_t N &gt;
struct formatter&lt;char[N], wchar_t&gt;;
}}
{{dcl|num=4|
template&lt; class Traits, class Allocator &gt;
struct formatter&lt;std::basic_string&lt;char, Traits, Allocator&gt;, wchar_t&gt;;
}}
{{dcl|num=5|
template&lt; class Traits &gt;
struct formatter&lt;std::basic_string_view&lt;char, Traits&gt;, wchar_t&gt;;
}}
{{dcl end}}

A ''debug-enabled'' formatter specialization additionally provides a public non-static member function {{c|constexpr void set_debug_format();}} which modifies the state of the formatter object so that it will format the values as [[cpp/utility/format/spec#Formatting escaped characters and strings|escaped and quoted]], as if the {{spar|type}} of the format specifier parsed by the last call to {{tt|parse}} were {{ttb|?}}.

Each formatter specialization for string or character type is ''debug-enabled''.
}}

===Standard format specification===
{{todo|The standard format specification is moved to a separate {{rlp|spec|page}}. The section title is temporarily preserved for links to this section. This section will be removed after all those links are settled.}}

===Standard specializations for library types===
{{dsc begin}}
{{dsc inc|cpp/chrono/dsc formatter|duration}}
{{dsc inc|cpp/chrono/dsc formatter|sys_time|system_clock}}
{{dsc inc|cpp/chrono/dsc formatter|utc_time|utc_clock}}
{{dsc inc|cpp/chrono/dsc formatter|tai_time|tai_clock}}
{{dsc inc|cpp/chrono/dsc formatter|gps_time|gps_clock}}
{{dsc inc|cpp/chrono/dsc formatter|file_time|file_clock}}
{{dsc inc|cpp/chrono/dsc formatter|local_time|local_t}}
{{dsc inc|cpp/chrono/dsc formatter|day}}
{{dsc inc|cpp/chrono/dsc formatter|month}}
{{dsc inc|cpp/chrono/dsc formatter|year}}
{{dsc inc|cpp/chrono/dsc formatter|weekday}}
{{dsc inc|cpp/chrono/dsc formatter|weekday_indexed}}
{{dsc inc|cpp/chrono/dsc formatter|weekday_last}}
{{dsc inc|cpp/chrono/dsc formatter|month_day}}
{{dsc inc|cpp/chrono/dsc formatter|month_day_last}}
{{dsc inc|cpp/chrono/dsc formatter|month_weekday}}
{{dsc inc|cpp/chrono/dsc formatter|month_weekday_last}}
{{dsc inc|cpp/chrono/dsc formatter|year_month}}
{{dsc inc|cpp/chrono/dsc formatter|year_month_day}}
{{dsc inc|cpp/chrono/dsc formatter|year_month_day_last}}
{{dsc inc|cpp/chrono/dsc formatter|year_month_weekday}}
{{dsc inc|cpp/chrono/dsc formatter|year_month_weekday_last}}
{{dsc inc|cpp/chrono/dsc formatter|hh_mm_ss}}
{{dsc inc|cpp/chrono/dsc formatter|sys_info}}
{{dsc inc|cpp/chrono/dsc formatter|local_info}}
{{dsc inc|cpp/chrono/dsc formatter|zoned_time}}
&lt;!-- C++23 Specializations --&gt;
{{dsc inc|cpp/utility/basic_stacktrace/dsc formatter}}
{{dsc inc|cpp/utility/stacktrace_entry/dsc formatter}}
{{dsc inc|cpp/thread/thread/id/dsc formatter}}
{{dsc inc|cpp/container/vector_bool/reference/dsc formatter}}
{{dsc inc|cpp/utility/format/dsc tuple_formatter}}
{{dsc inc|cpp/utility/format/dsc ranges_formatter}}
{{dsc inc|cpp/container/dsc adaptor_formatter|stack}}
{{dsc inc|cpp/container/dsc adaptor_formatter|queue}}
{{dsc inc|cpp/container/dsc adaptor_formatter|priority_queue}}
&lt;!-- C++26 Specializations --&gt;
{{dsc inc|cpp/filesystem/path/dsc formatter}}
{{dsc end}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;format&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string_view&gt;
 
struct QuotableString : std::string_view
{};
 
template&lt;&gt;
struct std::formatter&lt;QuotableString, char&gt;
{
    bool quoted = false;

    template&lt;class ParseContext&gt;
    constexpr ParseContext::iterator parse(ParseContext&amp; ctx)
    {
        auto it = ctx.begin();
        if (it == ctx.end())
            return it;
            
        if (*it == '#')
        {
            quoted = true;
            ++it;
        }
        if (it != ctx.end() &amp;&amp; *it != '}')
            throw std::format_error("Invalid format args for QuotableString.");
            
        return it;
    }
 
    template&lt;class FmtContext&gt;
    FmtContext::iterator format(QuotableString s, FmtContext&amp; ctx) const
    {
        std::ostringstream out;
        if (quoted)
            out &lt;&lt; std::quoted(s);
        else
            out &lt;&lt; s;

        return std::ranges::copy(std::move(out).str(), ctx.out()).out;
    }
};
 
int main()
{
    QuotableString a("be"), a2(R"( " be " )");
    QuotableString b("a question");
    std::cout &lt;&lt; std::format("To {0} or not to {0}, that is {1}.\n", a, b);
    std::cout &lt;&lt; std::format("To {0:} or not to {0:}, that is {1:}.\n", a, b);
    std::cout &lt;&lt; std::format("To {0:#} or not to {0:#}, that is {1:#}.\n", a2, b);
}
|output=
To be or not to be, that is a question.
To be or not to be, that is a question.
To " \" be \" " or not to " \" be \" ", that is "a question".
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3944|std=C++23|before=some {{c/core|char}} sequences were formattable as ranges of {{c/core|wchar_t}}|after=disable specializations added}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/format/dsc basic_format_context}}
{{dsc inc|cpp/utility/format/dsc formattable}}
{{dsc inc|cpp/utility/format/dsc range_formatter}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
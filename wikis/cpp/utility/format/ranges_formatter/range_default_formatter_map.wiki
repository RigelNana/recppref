{{cpp/title|''range-default-formatter''{{small|&lt;std::range_format::map&gt;}}}}
{{cpp/utility/format/ranges_formatter/navbar}}
{{ddcl|header=format|since=c++23|notes={{mark expos}}|1=
template&lt; ranges::input_range R, class CharT &gt;
struct /*range-default-formatter*/&lt;range_format::map, R, CharT&gt;;
}}

The class template {{c/core|/*range-default-formatter*/}} for range types is specialized for formatting range as a map of keys to values if {{c|std::format_kind&lt;R&gt;}} is {{c|std::range_format::map}}.

===Member types===
{{dsc begin}}
{{dsc hitem|Member|Definition}}
{{dsc expos mem type|private=yes|maybe-const-map|{{box/core|{{lsi|cpp/utility/format#fmt-maybe-const}}{{c/core|&lt;R, CharT&gt;}}}}}}
{{dsc expos mem type|private=yes|element-type|{{box/core|{{c/core|std::remove_cvref_t&lt;ranges::range_reference_t&lt;}}{{tti|maybe-const-map}}{{c/core|&gt;&gt;}}}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member|Definition}}
{{dsc expos mem obj|private=yes|underlying_|id=underlying|the underlying formatter of type {{box/core|{{c/core|std::range_formatter&lt;}}{{tti|element-type}}{{c/core|, CharT&gt;}}}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|nolink=true|constructs a {{tti|range-default-formatter}}}}
{{dsc mem fun|parse|nolink=true|parses the format specifier as specified by ''[[cpp/utility/format/range_formatter#Range format specification|range-format-spec]]''}}
{{dsc mem fun|format|nolink=true|writes the range formatted output as specified by ''[[cpp/utility/format/range_formatter#Range format specification|range-format-spec]]''}}
{{dsc end}}

{{member|1={{small|std::''range-default-formatter''&lt;std::range_format::map&gt;::}}''range-default-formatter''|2=
{{ddcl|1=
constexpr /*range-default-formatter*/();
}}

Equivalent to:&lt;br&gt;
{{c multi
|underlying_.set_brackets(STATICALLY_WIDEN&lt;CharT&gt;("{"), STATICALLY_WIDEN&lt;CharT&gt;("}"));
|underlying_.underlying().set_brackets({}, {});
|underlying_.underlying().set_separator(STATICALLY_WIDEN&lt;charT&gt;(": "));
}}

where {{c|STATICALLY_WIDEN&lt;CharT&gt;("...")}} is {{c|"..."}} if {{tt|CharT}} is {{c/core|char}}, and {{c|L"..."}} if {{tt|CharT}} is {{c/core|wchar_t}}.

The program is ill-formed unless:
* {{tti|element-type}} is a specialization of {{lc|std::pair}}, or
* {{tti|element-type}} is a specialization of {{lc|std::tuple}} and {{tt|std::tuple_size_v&lt;''element-type''&gt;}} is {{c|2}}.
}}

{{member|1={{small|std::''range-default-formatter''&lt;std::range_format::map&gt;::}}parse|2=
{{ddcl|1=
template&lt; class ParseContext &gt;
constexpr auto parse( ParseContext&amp; ctx ) -&gt; ParseContext::iterator;
}}

Equivalent to: {{box|{{c/core|return}}{{nbspt}}{{lsi|#underlying_}}{{c/core|.format(ctx);}}}}.

Returns an iterator past the end of the ''[[cpp/utility/format/range_formatter#Range format specification|range-format-spec]]''.
}}

{{member|1={{small|std::''range-default-formatter''&lt;std::range_format::map&gt;::}}format|2=
{{ddcl|1=
template&lt; class FormatContext &gt;
auto format( maybe-const-map&amp; r, FormatContext&amp; ctx ) const -&gt; FormatContext::iterator;
}}

Equivalent to: {{box|{{c/core|return}}{{nbspt}}{{lsi|#underlying_}}{{c/core|.format(r, ctx);}}}}.

Returns an iterator past the end of the output range.
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/format/dsc formatter}}
{{dsc inc|cpp/utility/format/dsc range_formatter}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
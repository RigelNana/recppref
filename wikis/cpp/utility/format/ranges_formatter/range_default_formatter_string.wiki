{{cpp/title|''range-default-formatter''{{small|&lt;std::range_format::string&gt;}}|''range-default-formatter''{{small|&lt;std::range_format::debug_string&gt;}}}}
{{cpp/utility/format/ranges_formatter/navbar}}
{{ddcl|header=format|since=c++23|notes={{mark expos}}|1=
template&lt; std::range_format K, ranges::input_range R, class CharT &gt;
    requires (K == std::range_format::string {{!!}} K == std::range_format::debug_string)
struct /*range-default-formatter*/&lt;K, R, CharT&gt;;
}}

The class template {{c/core|/*range-default-formatter*/}} for range types is specialized for formatting range as a string or an escaped string if {{c|std::format_kind&lt;R&gt;}} is either {{c|std::range_format::string}} or {{c|std::range_format::debug_string}}.

===Data members===
{{dsc begin}}
{{dsc hitem|Member|Definition}}
{{dsc expos mem obj|private=yes|underlying_|the underlying formatter of type {{c/core|std::formatter&lt;std::basic_string&lt;CharT&gt;, CharT&gt;}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|nolink=true|notes={{mark implicit}}|constructs a {{tti|range-default-formatter}}}}
{{dsc mem fun|parse|nolink=true|parses the format specifier as specified by ''[[cpp/utility/format/spec|std-format-spec]]''}}
{{dsc mem fun|format|nolink=true|writes the formatted output as specified by ''[[cpp/utility/format/spec|std-format-spec]]''}}
{{dsc end}}

{{member|1={{small|std::''range-default-formatter''&lt;std::range_format::string&gt;::}}parse&lt;br&gt;{{small|std::''range-default-formatter''&lt;std::range_format::debug_string&gt;::}}parse|2=
{{ddcl|1=
template&lt; class ParseContext &gt;
constexpr auto parse( ParseContext&amp; ctx ) -&gt; ParseContext::iterator;
}}

Equivalent to:

{{c multi|
auto i {{=}} underlying_.parse(ctx);|
if constexpr (K {{==}} std::range_format::debug_string)|
    underlying_.set_debug_format();|
return i;
}}

Returns an iterator past the end of the ''[[cpp/utility/format/spec|std-format-spec]]''.
}}

{{member|1={{small|std::''range-default-formatter''&lt;std::range_format::string&gt;::}}format&lt;br&gt;{{small|std::''range-default-formatter''&lt;std::range_format::debug_string&gt;::}}format|2=
{{ddcl|1=
template&lt; class FormatContext &gt;
auto format( /* see below */&amp; r, FormatContext&amp; ctx ) const -&gt; FormatContext::iterator;
}}

If {{c|ranges::input_range&lt;const R&gt;}} is {{c|true}}, the type of {{c|r}} is {{c/core|const R&amp;}}. Otherwise, the type is {{c/core|R&amp;}}.

Let {{c|s}} be a {{c|std::basic_string&lt;CharT&gt;}} as if by constructing {{c|s}} with {{c|std::basic_string&lt;CharT&gt;(std::from_range, r)}} such that {{c|ranges::equal(s, r)}} is {{c|true}}.

Equivalent to {{c|return underlying_.format(s, ctx);}}.

Returns an iterator past the end of the output range.
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/format/dsc formatter}}
{{dsc inc|cpp/utility/format/dsc range_formatter}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
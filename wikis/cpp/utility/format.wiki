{{title|Formatting library {{mark since c++20}}}}
{{cpp/utility/format/navbar}}

The text formatting library offers a safe and extensible alternative to the printf family of functions. It is intended to complement the existing C++ I/O streams library.

===Format specifications===
Format specification specifies how objects are formatted with different kinds of options.

The formatting of objects of basic types and standard string types uses the {{rl|spec|basic format specification}}. Other library components may also provide their own format specifications, see {{rl|basic_format_string|here}} for details.

===Formatting functions===
{{dsc begin}}
{{dsc header|format}}
{{dsc inc|cpp/utility/format/dsc format}}
{{dsc inc|cpp/utility/format/dsc format_to}}
{{dsc inc|cpp/utility/format/dsc format_to_n}}
{{dsc inc|cpp/utility/format/dsc formatted_size}}
{{dsc end}}

===Format strings===
{{dsc begin}}
{{dsc header|format}}
{{dsc inc|cpp/utility/format/dsc basic_format_string}}
{{dsc inc|cpp/utility/format/dsc runtime_format}}
{{dsc end}}

===Formatting concepts===
{{dsc begin}}
{{dsc header|format}}
{{dsc inc|cpp/utility/format/dsc formattable}}
{{dsc end}}

===Extensibility support and implementation detail===
{{dsc begin}}
{{dsc header|format}}
{{dsc inc|cpp/utility/format/dsc vformat}}
{{dsc inc|cpp/utility/format/dsc vformat_to}}
{{dsc inc|cpp/utility/format/dsc make_format_args}}
{{dsc inc|cpp/utility/format/dsc visit_format_arg}}
{{dsc inc|cpp/utility/format/dsc formatter}}
{{dsc inc|cpp/utility/format/dsc range_formatter}}
{{dsc inc|cpp/utility/format/dsc enable_nonlocking_formatter_optimization}}
{{dsc inc|cpp/utility/format/dsc range_format}}
{{dsc inc|cpp/utility/format/dsc format_kind}}
{{dsc inc|cpp/utility/format/dsc basic_format_arg}}
{{dsc inc|cpp/utility/format/dsc basic_format_args}}
{{dsc inc|cpp/utility/format/dsc basic_format_context}}
{{dsc inc|cpp/utility/format/dsc basic_format_parse_context}}
{{dsc inc|cpp/utility/format/dsc format_error}}
{{dsc end}}

===Helper items {{mark since c++23}}===
{{dcl begin}}
{{dcla|num=1|anchor=const-formattable-range|expos=yes|1=
template&lt; class R, class CharT &gt;
concept /*const-formattable-range*/ = 
    ranges::input_range&lt;const R&gt; &amp;&amp;
    std::formattable&lt;ranges::range_reference_t&lt;const R&gt;, CharT&gt;;
}}
{{dcla|num=2|anchor=fmt-maybe-const|expos=yes|1=
template&lt; class R, class CharT &gt;
using /*fmt-maybe-const*/ = 
    std::conditional_t&lt;/*const-formattable-range*/&lt;R, CharT&gt;, const R, R&gt;;
}}
{{dcl end}}

===Notes===
{{ftm begin|sort=1}}
{{ftm|__cpp_lib_format|std=C++20|value=201907L|rowspan="10"|Text formatting}}
{{ftm|-|std=C++23|dr=20|value=202106L|Compile-time format string checks;&lt;br&gt;Reducing parameterization of {{lc|std::vformat_to}}}}
{{ftm|-|std=C++23|dr=20|value=202110L|Fixing locale handling in chrono formatters;&lt;br&gt;Supporting non-const-formattable types}}
{{ftm|-|std=C++23|dr=20|value=202207L|Exposing {{lc|std::basic_format_string}};&lt;br&gt;Clarify handling of encodings in localized formatting of chrono types}}
{{ftm|-|Formatting pointers|std=C++26|value=202304L}}
{{ftm|-|Type-checking format args|std=C++26|value=202305L}}
{{ftm|-|Member {{rlt|basic_format_arg#visit|std::basic_format_arg::visit}}|std=C++26|value=202306L}}
{{ftm|-|Runtime format string|std=C++26|value=202311L}}
{{ftm|-|Printing Blank Lines with {{lc|std::println}}|std=C++26|value=202403L}}
{{ftm|-|Permit an efficient implementation of {{lc|std::print}} {{todo|1=the value should be &gt;= 202406L, i.e. be different from the previous one}}|std=C++26|dr=23|value=202403L}}
{{ftm|__cpp_lib_format_ranges|std=C++23|value=202207L|Formatting ranges}}
{{ftm|__cpp_lib_format_path|std=C++26|Formatting of {{lc|std::filesystem::path}}|value=202403L}}
{{ftm|__cpp_lib_format_uchar|std=C++26|Fix formatting of code units as integers|value=202311L}}
{{ftm|__cpp_lib_formatters|std=C++23|Formatting {{lc|std::thread::id}} and {{lc|std::stacktrace}}|value=202302L}}
{{ftm end}}

We intentionally treat the addition of {{tt|std::basic_format_string}} ({{wg21|P2508}}) as a defect report because all known implementations make these components available in C++20 mode, although it is not so categorized officially.

===Example===
{{example|code=
#include &lt;cassert&gt;
#include &lt;format&gt;

int main()
{
    std::string message = std::format("The answer is {}.", 42);
    assert(message == "The answer is 42.");
}
}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P2418R2|std=C++20|before=objects that are neither const-formattable nor copyable&lt;br&gt;(such as generator-like objects) are not formattable|after=allow formatting these objects&lt;br&gt;(relaxed formatter requirements)}}
{{dr_p2508}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/dsc print}}
{{dsc inc|cpp/io/dsc println}}
{{dsc inc|cpp/io/basic_ostream/dsc print}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
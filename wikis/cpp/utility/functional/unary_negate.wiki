{{cpp/title|unary_negate}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl rev begin}}
{{dcl|until=c++11|
template&lt; class Predicate &gt;
struct unary_negate : public std::unary_function&lt;Predicate::argument_type, bool&gt;;
}}
{{dcl|since=c++11|deprecated=c++17|removed=c++20| 
template&lt; class Predicate &gt;
struct unary_negate;
}}
{{dcl rev end}}
{{dcl end}}

{{tt|std::unary_negate}} is a wrapper function object returning the complement of the unary predicate it holds.

The unary predicate type must define a member type, {{tt|argument_type}}, that is convertible to the predicate's parameter type. The unary function objects obtained from {{lc|std::ref}}, {{lc|std::cref}}, {{lc|std::negate}}, {{lc|std::logical_not}}, {{lc|std::mem_fn}}, {{lc|std::function}}, {{lc|std::hash}}, or from another call to {{lc|std::not1}} have this type defined, as are function objects derived from the deprecated {{lc|std::unary_function}}. 

{{tt|std::unary_negate}} objects are easily constructed with helper function {{lc|std::not1}}.

===Member types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|argument_type}}|{{c|Predicate::argument_type}}}}
{{dsc|{{tt|result_type}}|{{c|bool}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|nolink=true|constructs a new unary_negate object with the supplied predicate}}
{{dsc mem fun|operator()|nolink=true|returns the logical complement of the result of a call to the stored predicate}}
{{dsc end}}

{{member|{{small|std::unary_negate::}}unary_negate|2=
{{dcl begin}}
{{dcl rev begin}}
{{dcl|until=c++14|
explicit unary_negate( Predicate const&amp; pred );
}}
{{dcl|since=c++14|
constexpr explicit unary_negate( Predicate const&amp; pred );
}}
{{dcl rev end}}
{{dcl end}}

Constructs a {{tt|std::unary_negate}} function object with the stored predicate {{c|pred}}.

===Parameters===
{{par begin}}
{{par|pred|predicate function object}}
{{par end}}

}}

{{member|{{small|std::unary_negate::}}operator()|2=
{{dcl begin}}
{{dcl rev begin}}
{{dcl|until=c++14|
bool operator()( argument_type const&amp; x ) const;
}}
{{dcl|since=c++14|
constexpr bool operator()( argument_type const&amp; x ) const;
}}
{{dcl rev end}}
{{dcl end}}

Returns the logical complement of the result of calling  {{c|pred(x)}}.

===Parameters===
{{par begin}}
{{par|x|argument to pass through to predicate}}
{{par end}}

===Return value===
The logical complement of the result of calling {{c|pred(x)}}.
}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

struct less_than_7 : std::unary_function&lt;int, bool&gt;
{
    bool operator()(int i) const { return i &lt; 7; }
};

int main()
{
    std::vector&lt;int&gt; v(7, 7);
    v[0] = v[1] = v[2] = 6;
    
    std::unary_negate&lt;less_than_7&gt; not_less_than_7((less_than_7()));
    // C++11 solution:
    // Use std::function&lt;bool (int)&gt;
    // std::function&lt;bool (int)&gt; not_less_than_7 =
    //     [](int x)-&gt;bool { return !less_than_7()(x); };
    
    std::cout &lt;&lt; std::count_if(v.begin(), v.end(), not_less_than_7);
}
|output=
4
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc binary_negate}}
{{dsc inc|cpp/utility/functional/dsc function}}
{{dsc inc|cpp/utility/functional/dsc move_only_function}}
{{dsc inc|cpp/utility/functional/dsc not1}}
{{dsc inc|cpp/utility/functional/dsc ptr_fun}}
{{dsc inc|cpp/utility/functional/dsc unary_function}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
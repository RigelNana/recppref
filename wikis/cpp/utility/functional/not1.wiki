{{cpp/title|not1}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl rev begin}}
{{dcl|until=c++14|
template&lt; class Predicate &gt;
std::unary_negate&lt;Predicate&gt; not1( const Predicate&amp; pred );
}}
{{dcl|since=c++14|deprecated=c++17|removed=c++20|
template&lt; class Predicate &gt;
constexpr std::unary_negate&lt;Predicate&gt; not1( const Predicate&amp; pred );
}}
{{dcl rev end}}
{{dcl end}}

{{tt|std::not1}} is a helper function to create a function object that returns the complement of the unary predicate function passed. The function object created is of type {{c|std::unary_negate&lt;Predicate&gt;}}.

The unary predicate type must define a member type, {{tt|argument_type}}, that is convertible to the predicate's parameter type. The unary function objects obtained from {{lc|std::ref}}, {{lc|std::cref}}, {{lc|std::negate}}, {{lc|std::logical_not}}, {{lc|std::mem_fn}}, {{lc|std::function}}, {{lc|std::hash}}, or from another call to {{tt|std::not1}} have this type defined, as are function objects derived from the deprecated {{lc|std::unary_function}}.

===Parameters===
{{par begin}}
{{par|pred|unary predicate}}
{{par end}}

===Return value===
{{tt|std::not1}} returns an object of type {{c|std::unary_negate&lt;Predicate&gt;}}, constructed with {{c|pred}}.

===Exceptions===
(none)

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;numeric&gt;
#include &lt;vector&gt;

struct LessThan7 : std::unary_function&lt;int, bool&gt;
{
    bool operator()(int i) const { return i &lt; 7; }
};

int main()
{
    std::vector&lt;int&gt; v(10);
    std::iota(std::begin(v), std::end(v), 0);
    
    std::cout &lt;&lt; std::count_if(begin(v), end(v), std::not1(LessThan7())) &lt;&lt; '\n';
    
    // the same as above using std::function
    std::function&lt;bool(int)&gt; less_than_9 = [](int x) { return x &lt; 9; };
    std::cout &lt;&lt; std::count_if(begin(v), end(v), std::not1(less_than_9)) &lt;&lt; '\n';
}
|output=
3
1
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc not_fn}}
{{dsc inc|cpp/utility/functional/dsc unary_negate}}
{{dsc inc|cpp/utility/functional/dsc function}}
{{dsc inc|cpp/utility/functional/dsc move_only_function}}
{{dsc inc|cpp/utility/functional/dsc not2}}
{{dsc inc|cpp/utility/functional/dsc ptr_fun}}
{{dsc inc|cpp/utility/functional/dsc unary_function}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
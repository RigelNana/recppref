{{cpp/title|not_equal_to}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl rev begin}}
{{dcl|until=c++14|
template&lt; class T &gt;
struct not_equal_to;
}}
{{dcl|since=c++14|
template&lt; class T {{=}} void &gt;
struct not_equal_to;
}}
{{dcl rev end}}
{{dcl end}}

Function object for performing comparisons. Unless specialised, invokes {{c|operator!{{=}}}} on type {{tt|T}}.

===Specializations===
{{rev begin}}
{{rev|since=c++14|
The standard library provides a specialization of {{tt|std::not_equal_to}} when {{tt|T}} is not specified, which leaves the parameter types and return type to be deduced.
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc not_equal_to_void}}
{{dsc end}}
}}
{{rev end}}

{{cpp/utility/functional/member types|result=bool|arg1=T|arg2=T}}

===Member functions===
{{dsc begin}}
{{dsc mem fun|operator()|nolink=true|checks if the arguments are ''not equal''}}
{{dsc end}}

{{member|{{small|std::not_equal_to::}}operator()|2=
{{dcl begin}}
{{dcla|constexpr=c++14|1=
bool operator()( const T&amp; lhs, const T&amp; rhs ) const;
}}
{{dcl end}}

Checks whether {{c|lhs}} is ''not equal'' to {{c|rhs}}.

===Parameters===
{{par begin}}
{{par|lhs, rhs|values to compare}}
{{par end}}

===Return value===
{{c|true}} if {{c|1=lhs != rhs}}, {{c|false}} otherwise.

{{cpp/impldef exception}}

===Possible implementation===
{{eq fun|1=
constexpr bool operator()(const T&amp; lhs, const T&amp; rhs) const 
{
    return lhs != rhs;
}
}}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc equal}}
{{dsc inc|cpp/utility/functional/dsc less}}
{{dsc inc|cpp/utility/functional/ranges/dsc {{SUBPAGENAMEE}}}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
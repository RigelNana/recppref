{{cpp/title|identity}}
{{cpp/utility/functional/navbar}}
{{ddcl|header=functional|since=c++20|
struct identity;
}}

{{tt|std::identity}} is a function object type whose {{c|operator()}} returns its argument unchanged.

===Member types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|is_transparent}}|[[cpp/utility/functional#Transparent function objects|unspecified]]}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem fun|cpp/utility/functional/identity|title=operator()|inlinemem=true|returns the argument unchanged}}
{{dsc end}}

{{member|{{small|std::identity::}}operator()|2=
{{ddcl|
template&lt; class T &gt;
constexpr T&amp;&amp; operator()( T&amp;&amp; t ) const noexcept;
}}

Returns {{c|std::forward&lt;T&gt;(t)}}.

===Parameters===
{{par begin}}
{{par|t|argument to return}}
{{par end}}

===Return value===
{{c|std::forward&lt;T&gt;(t)}}.
}}

===Notes===
{{tt|std::identity}} serves as the default projection in [[cpp/algorithm/ranges|constrained algorithms]]. Its direct usage is usually not needed.

===Example===
{{example|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string&gt;

struct Pair
{
    int n;
    std::string s;
    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Pair&amp; p)
    {
        return os &lt;&lt; '{' &lt;&lt; p.n &lt;&lt; ", " &lt;&lt; p.s &lt;&lt; '}';
    }
};

// A range-printer that can print projected (modified) elements of a range.
template&lt;std::ranges::input_range R,
         typename Projection = std::identity&gt; //&lt;- Notice the default projection
void print(std::string_view const rem, R&amp;&amp; range, Projection projection = {})
{
    std::cout &lt;&lt; rem &lt;&lt; '{';
    std::ranges::for_each(
        range,
        [O = 0](const auto&amp; o) mutable { std::cout &lt;&lt; (O++ ? ", " : "") &lt;&lt; o; },
        projection
    );
    std::cout &lt;&lt; "}\n";
}

int main()
{
    const auto v = {Pair{1, "one"}, {2, "two"}, {3, "three"}&lt;!----&gt;};
    
    print("Print using std::identity as a projection: ", v);
    print("Project the Pair::n: ", v, &amp;Pair::n);
    print("Project the Pair::s: ", v, &amp;Pair::s);
    print("Print using custom closure as a projection: ", v,
        [](Pair const&amp; p) { return std::to_string(p.n) + ':' + p.s; });
}
|output=
Print using std::identity as a projection: {&lt;!----&gt;{1, one}, {2, two}, {3, three}&lt;!----&gt;}
Project the Pair::n: {1, 2, 3}
Project the Pair::s: {one, two, three}
Print using custom closure as a projection: {1:one, 2:two, 3:three}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc type_identity}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
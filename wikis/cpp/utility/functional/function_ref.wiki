{{cpp/title|function_ref}}
{{cpp/utility/functional/function_ref/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl|num=1|since=c++26|
template&lt; class... &gt;
class function_ref; // not defined
}}
{{dcl|num=2|since=c++26|
template&lt; class R, class... Args &gt;
class function_ref&lt;R(Args...)&gt;;
template&lt; class R, class... Args &gt;
class function_ref&lt;R(Args...) noexcept&gt;;
template&lt; class R, class... Args &gt;
class function_ref&lt;R(Args...) const&gt;;
template&lt; class R, class... Args &gt;
class function_ref&lt;R(Args...) const noexcept&gt;;
}}
{{dcl end}}

Class template {{tt|std::function_ref}} is a non-owning function wrapper. {{tt|std::function_ref}} objects can store and invoke reference to {{named req|Callable}} ''target'' - functions, [[cpp/language/lambda|lambda expressions]], [[cpp/utility/functional/bind|bind expressions]], or other function objects, but not pointers to member functions and pointers to member objects. {{c/core|std::nontype}} can be used to construct {{tt|std::function_ref}} by passing function pointers, pointers to member functions, and pointers to member objects.

{{tt|std::function_ref}}s supports every possible combination of [[cpp/language/member functions#Member functions with cv-qualifiers|cv-qualifiers]] (excluding {{c/core|volatile}}), and [[cpp/language/noexcept spec|noexcept-specifiers]] provided in its template parameter.

Every specialization of {{tt|std::function_ref}} is a {{named req|TriviallyCopyable}} type that satisfies {{lconcept|copyable}}.

===Member types===
{{dsc begin}}
{{dsc hitem|Member|Definition}}
{{dsc expos mem type|BoundEntityType|private=yes|unspecified {{named req|TriviallyCopyable}} type that satisfies {{lconcept|copyable}} and is capable of storing a pointer to object value or pointer to function value}}
{{dsc expos mem type|FunctionPointerType|private=yes|{{box/core|{{c/core|R(*)(}}{{tti|BoundEntityType}}{{sep}}{{c/core|, Args&amp;&amp;...) noexcept(}}{{spar|noex}}{{sep}}{{c/core|)}}}}
where {{spar|noex}} is {{c|true}} if {{c/core|noexcept}} is present in function signature as part of the template parameter of {{tt|std::function_ref}}, {{c|false}} otherwise}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member|Definition}}
{{dsc expos mem obj|spec={{tti|BoundEntityType}}|bound-entity|id=bound-entity|a bound entity object}}
{{dsc expos mem obj|spec={{tti|FunctionPointerType}}|thunk-ptr|id=thunk-ptr|a stored pointer to function}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/function_ref/dsc constructor}}
{{dsc inc|cpp/utility/functional/function_ref/dsc operator{{=}}}}
{{dsc inc|cpp/utility/functional/function_ref/dsc operator()}}
{{dsc end}}

==={{rl|deduction guides|Deduction guides}}===

===Notes===
{{feature test macro|__cpp_lib_function_ref|std=C++26|value=202306L|{{tt|std::function_ref}}}}

===Example===
{{todo|example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc function}}
{{dsc inc|cpp/utility/functional/dsc copyable_function}}
{{dsc inc|cpp/utility/functional/dsc move_only_function}}
{{dsc inc|cpp/utility/dsc nontype}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
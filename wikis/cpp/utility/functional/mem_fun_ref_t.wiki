{{cpp/title | mem_fun_ref_t | mem_fun1_ref_t | const_mem_fun_ref_t | const_mem_fun1_ref_t}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header | functional }}
{{dcl | deprecated=c++11 | until=c++17  | num=1 | 
template&lt; class S, class T &gt; 
class mem_fun_ref_t : public unary_function&lt;T,S&gt; {
public:
    explicit mem_fun_ref_t(S (T::*p)());
    S operator()(T&amp; p) const;
};
}}
{{dcl | deprecated=c++11 | until=c++17  | num=2 |
template&lt; class S, class T &gt; 
class const_mem_fun_ref_t : public unary_function&lt;T,S&gt; {
public:
    explicit const_mem_fun_ref_t(S (T::*p)() const);
    S operator()(const T&amp; p) const;
};
}}
{{dcl | deprecated=c++11 | until=c++17  | num=3 | 
template&lt; class S, class T, class A &gt; 
class mem_fun1_ref_t : public binary_function&lt;T,A,S&gt; {
public:
    explicit mem_fun1_ref_t(S (T::*p)(A));
    S operator()(T&amp; p, A x) const;
};
}}
{{dcl | deprecated=c++11 | until=c++17  | num=4 |
template&lt; class S, class T, class A &gt; 
class const_mem_fun1_ref_t : public binary_function&lt;T,A,S&gt; {
public:
    explicit const_mem_fun1_ref_t(S (T::*p)(A) const);
    S operator()(const T&amp; p, A x) const;
};
}}
{{dcl end}}

Wrapper around a member function pointer. The class instance whose member function to call is passed as a reference to the {{tt|operator()}}.

@1@ Wraps a non-const member function with no parameters.

@2@ Wraps a const member function with no parameters.

@3@ Wraps a non-const member function with a single parameter.

@4@ Wraps a const member function with a single parameter.

===See also===
{{dsc begin}}
{{dsc inc | cpp/utility/functional/dsc mem_fun_ref}}
{{dsc inc | cpp/utility/functional/dsc mem_fun_t}}
{{dsc end}}

[[de:cpp/utility/functional/mem fun ref t]]
[[es:cpp/utility/functional/mem fun ref t]]
[[fr:cpp/utility/functional/mem fun ref t]]
[[it:cpp/utility/functional/mem fun ref t]]
[[ja:cpp/utility/functional/mem fun ref t]]
[[pt:cpp/utility/functional/mem fun ref t]]
[[ru:cpp/utility/functional/mem fun ref t]]
[[zh:cpp/utility/functional/mem fun ref t]]
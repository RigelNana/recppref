{{cpp/title|unary_function}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl|until=c++17|deprecated=c++11|1=
template&lt; typename ArgumentType, typename ResultType &gt;
struct unary_function;
}}
{{dcl end}}

{{tt|std::unary_function}} is a base class for creating function objects with one argument.

{{tt|std::unary_function}} does not define {{c|operator()}}; it is expected that derived classes will define this. {{tt|std::unary_function}} provides only two types - {{tt|argument_type}} and {{tt|result_type}} - defined by the template parameters.

Some standard library function object adaptors, such as {{lc|std::not1}}, require the function objects they adapt to have certain types defined; {{lc|std::not1}} requires the function object being adapted to have a type named {{tt|argument_type}}. Deriving function objects that take one argument from {{tt|std::unary_function}} is an easy way to make them compatible with those adaptors.

{{tt|std::unary_function}} is deprecated in C++11.

===Member types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|argument_type}}|{{tt|ArgumentType}}}}
{{dsc|{{tt|result_type}}|{{tt|ResultType}}}}
{{dsc end}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

struct less_than_7 : std::unary_function&lt;int, bool&gt;
{
    bool operator()(int i) const { return i &lt; 7; }
};

int main()
{
    std::vector&lt;int&gt; v(10, 7);
    v[0] = v[1] = v[2] = 6;
 
    std::cout &lt;&lt; std::count_if(v.begin(), v.end(), std::not1(less_than_7()));
 
    // C++11 solution:
    // Cast to std::function&lt;bool (int)&gt; somehow - even with a lambda
    // std::cout &lt;&lt; std::count_if(v.begin(), v.end(),
    //     std::not1(std::function&lt;bool (int)&gt;([](int i) { return i &lt; 7; })));
}
|output=
7
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc function}}
{{dsc inc|cpp/utility/functional/dsc move_only_function}}
{{dsc inc|cpp/utility/functional/dsc ptr_fun}}
{{dsc inc|cpp/utility/functional/dsc pointer_to_unary_function}}
{{dsc inc|cpp/utility/functional/dsc binary_function}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
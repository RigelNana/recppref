{{cpp/title|swap&lt;small&gt;(std::function)&lt;/small&gt;}}
{{cpp/utility/functional/function/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl|since=c++11|
template&lt; class R, class... Args &gt;
void swap( std::function&lt;R(Args...)&gt;&amp; lhs, std::function&lt;R(Args...)&gt;&amp; rhs ) noexcept;
}}
{{dcl end}}

Overloads the {{lc|std::swap}} algorithm for {{lc|std::function}}. Exchanges the state of {{c|lhs}} with that of {{c|rhs}}. Effectively calls {{c|lhs.swap(rhs)}}.

===Parameters===
{{par begin}}
{{par|lhs, rhs|polymorphic function wrappers whose states to swap}}
{{par end}}

===Return value===
(none)

===Example===
{{example
|code=
#include &lt;functional&gt;
#include &lt;iostream&gt;

void foo(const char* str, int x)
{
    std::cout &lt;&lt; "foo(\"" &lt;&lt; str &lt;&lt; "\", " &lt;&lt; x &lt;&lt; ")\n";
}

void bar(const char* str, int x)
{
    std::cout &lt;&lt; "bar(\"" &lt;&lt; str &lt;&lt; "\", " &lt;&lt; x &lt;&lt; ")\n";
}

int main()
{
    std::function&lt;void(const char*, int)&gt; f1{foo};
    std::function&lt;void(const char*, int)&gt; f2{bar};

    f1("f1", 1);
    f2("f2", 2);

    std::cout &lt;&lt; "std::swap(f1, f2);\n";
    std::swap(f1, f2);

    f1("f1", 1);
    f2("f2", 2);
}
|output=
foo("f1", 1)
bar("f2", 2)
std::swap(f1, f2);
bar("f1", 1)
foo("f2", 2)
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2062|std=C++11|before=overload of {{tt|swap}} for {{tt|function}} was not required to be noexcept|after=required}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/function/dsc swap}}
{{dsc inc|cpp/utility/functional/move_only_function/dsc swap2}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/utility/functional/function/title|target_type}}
{{cpp/utility/functional/function/navbar}}
{{ddcl|since=c++11|
const std::type_info&amp; target_type() const noexcept;
}}

Returns the type of the stored function.

===Parameters===
(none)

===Return value===
{{c|typeid(T)}} if the stored function has type {{tt|T}}, otherwise {{c|typeid(void)}}

===Example===
{{example
|code=
#include &lt;functional&gt;
#include &lt;iostream&gt;

int f(int a) { return -a; }
void g(double) {}
int main()
{
    // fn1 and fn2 have the same type, but their targets do not
    std::function&lt;int(int)&gt; fn1(f),
                            fn2([](int a) {return -a;});
    std::cout &lt;&lt; fn1.target_type().name() &lt;&lt; '\n'
              &lt;&lt; fn2.target_type().name() &lt;&lt; '\n';
    
    // since C++17 deduction guides (CTAD) can avail
    std::cout &lt;&lt; std::function{g}.target_type().name() &lt;&lt; '\n';
}
|p=true
|output=
PFiiE
Z4mainEUliE_
PFvdE
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/function/dsc target}}
{{dsc inc|cpp/types/dsc type_info}}
{{dsc|'''{{ltt|cpp/language/typeid|typeid}}'''|queries information of a type, returning a {{tt|std::type_info}} object representing the type&lt;br&gt;{{small|{{mark|operator}}}}}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
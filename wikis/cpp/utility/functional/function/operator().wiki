{{cpp/utility/functional/function/title|operator()}}
{{cpp/utility/functional/function/navbar}}
{{ddcl|since=c++11|
R operator()( Args... args ) const;
}}

Invokes the stored callable function target with the parameters {{c|args}}.

Effectively does {{box|{{lti|cpp/utility/functional|INVOKE&lt;R&gt;}}{{c/core|(f, std::forward&lt;Args&gt;(args)...)}}}}, where {{c|f}} is the {{rlp|/|target object}} of {{c|*this}}.

===Parameters===
{{par begin}}
{{par|args|parameters to pass to the stored callable function target}}
{{par end}}

===Return value===
None if {{tt|R}} is {{c/core|void}}. Otherwise the return value of the invocation of the stored callable object.

===Exceptions===
Throws {{lc|std::bad_function_call}} if {{c|*this}} does not store a callable function target, i.e. {{c|1=!*this == true}}.

===Example===
{{example
|The following example shows how {{lc|std::function}} can be passed to other functions by value. Also, it shows how {{lc|std::function}} can store lambdas.
|code=
#include &lt;functional&gt;
#include &lt;iostream&gt;

void call(std::function&lt;int()&gt; f) // can be passed by value
{ 
    std::cout &lt;&lt; f() &lt;&lt; '\n';
}

int normal_function()
{
    return 42;
}

int main()
{
    int n = 1;
    std::function&lt;int()&gt; f;
    try
    {
        call(f);
    }
    catch (const std::bad_function_call&amp; ex)
    {
        std::cout &lt;&lt; ex.what() &lt;&lt; '\n';
    }

    f = [&amp;n](){ return n; };
    call(f);

    n = 2;
    call(f);

    f = normal_function;
    call(f);

    std::function&lt;void(std::string, int)&gt; g;
    g = [](std::string str, int i) { std::cout &lt;&lt; str &lt;&lt; ' ' &lt;&lt; i &lt;&lt; '\n'; };
    g("Hi", 052);
}
|p=true
|output=
bad_function_call
1
2
42
Hi 42
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/move_only_function/dsc operator()}}
{{dsc inc|cpp/utility/functional/reference_wrapper/dsc operator()}}
{{dsc inc|cpp/utility/functional/dsc bad_function_call}}
{{dsc inc|cpp/utility/functional/dsc invoke}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/utility/functional/function/title | target}}
{{cpp/utility/functional/function/navbar}}
{{dcl begin}}
{{dcl | num=1 | since=c++11 |
template&lt; class T &gt; 
T* target() noexcept; 
}}
{{dcl | num=2 | since=c++11 |
template&lt; class T &gt; 
const T* target() const noexcept;
}}
{{dcl end}}

Returns a pointer to the stored callable function target.

===Parameters===
(none)

===Return value===
A pointer to the stored function if {{c|target_type() {{==}} typeid(T)}}, otherwise a null pointer.

===Example===
{{example
 | code=
#include &lt;functional&gt;
#include &lt;iostream&gt;

int f(int, int) { return 1; }
int g(int, int) { return 2; }
void test(std::function&lt;int(int, int)&gt; const&amp; arg)
{
    std::cout &lt;&lt; "test function: ";
    if (arg.target&lt;std::plus&lt;int&gt;&gt;())
        std::cout &lt;&lt; "it is plus\n";
    if (arg.target&lt;std::minus&lt;int&gt;&gt;())
        std::cout &lt;&lt; "it is minus\n";

    int (*const* ptr)(int, int) = arg.target&lt;int(*)(int, int)&gt;();
    if (ptr &amp;&amp; *ptr == f)
        std::cout &lt;&lt; "it is the function f\n";
    if (ptr &amp;&amp; *ptr == g)
        std::cout &lt;&lt; "it is the function g\n";
}

int main()
{
    test(std::function&lt;int(int, int)&gt;(std::plus&lt;int&gt;()));
    test(std::function&lt;int(int, int)&gt;(std::minus&lt;int&gt;()));
    test(std::function&lt;int(int, int)&gt;(f));
    test(std::function&lt;int(int, int)&gt;(g));
}
 | output=
test function: it is plus
test function: it is minus
test function: it is the function f
test function: it is the function g
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2591|std=C++11|before=the behavior is undefined if {{tt|T}} is not {{named req|Callable}}|after=behavior is defined (always returns {{tt|nullptr}})}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc | cpp/utility/functional/function/dsc target_type}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
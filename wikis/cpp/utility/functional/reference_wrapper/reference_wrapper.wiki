{{cpp/utility/functional/reference_wrapper/title|reference_wrapper}}
{{cpp/utility/functional/reference_wrapper/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|notes={{mark constexpr since c++20}}|
template&lt; class U &gt;
reference_wrapper( U&amp;&amp; x ) noexcept(/*see below*/) ;
}}
{{dcl|num=2|since=c++11|notes={{mark constexpr since c++20}}|
reference_wrapper( const reference_wrapper&amp; other ) noexcept;
}}
{{dcl end}}

Constructs a new reference wrapper.

@1@ Converts {{c|x}} to {{tt|T&amp;}} as if by {{c|1=T&amp; t = std::forward&lt;U&gt;(x);}}, then stores a reference to {{tt|t}}. {{cpp/enable if|{{c|typename std::decay&lt;U&gt;::type}} is not the same type as {{tt|reference_wrapper}} and the expression {{c|FUN(std::declval&lt;U&gt;())}} is well-formed}}, where {{tt|FUN}} names the set of imaginary functions
{{source|1=
void FUN(T&amp;) noexcept;
void FUN(T&amp;&amp;) = delete;
}}

@2@ Copy constructor. Stores a reference to {{c|other.get()}}.

===Parameters===
{{par begin}}
{{par|x|an object to wrap}}
{{par|other|another reference wrapper}}
{{par end}}

===Exceptions===
@1@ {{noexcept|noexcept(FUN(std::declval&lt;U&gt;()))}} where {{tt|FUN}} is the set of imaginary functions described in the description above.

===Example===
{{example
|code=
|output=
}}

===Defect reports===
{{dr list begin}}
{{dr list item|std=C++11|dr=2993|wg=lwg|before=deleted {{tt|reference_wrapper(T&amp;&amp;)}} constructor interferes&lt;br&gt; with overload resolution in some cases|after= replaced with a constructor template}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
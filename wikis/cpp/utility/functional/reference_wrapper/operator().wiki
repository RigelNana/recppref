{{cpp/utility/functional/reference_wrapper/title|operator()}}
{{cpp/utility/functional/reference_wrapper/navbar}}
{{dcl begin}}
{{dcl rev multi
|since1=c++11|dcl1=
template&lt; class... ArgTypes &gt;
typename std::result_of&lt;T&amp;(ArgTypes&amp;&amp;...)&gt;::type
    operator() ( ArgTypes&amp;&amp;... args ) const;
|since2=c++17|notes2={{mark constexpr since c++20}}|dcl2=
template&lt; class... ArgTypes &gt;
std::invoke_result_t&lt;T&amp;, ArgTypes...&gt;
    operator() ( ArgTypes&amp;&amp;... args ) const noexcept(/* see below */);
}}
{{dcl end}}

Calls the {{named req|Callable}} object, reference to which is stored, as if by {{box|{{lti|cpp/utility/functional|INVOKE}}{{c/core|(}}{{rlpf|get}}{{c/core|, std::forward&lt;ArgTypes&gt;(args)...)}}}}. This function is available only if the stored reference points to a {{named req|Callable}} object.

{{tt|T}} must be a complete type.

===Parameters===
{{par begin}}
{{par|args|arguments to pass to the called function}}
{{par end}}

===Return value===
The return value of the called function.

===Exceptions===
{{rrev multi|since1=c++11|until1=c++17
|rev1=May throw implementation-defined exceptions.
|rev2={{noexcept|std::is_nothrow_invocable_v&lt;T&amp;, ArgTypes...&gt;}}
}}

===Example===
{{example|
|code=
#include &lt;functional&gt;
#include &lt;iostream&gt;

void f1()
{
    std::cout &lt;&lt; "reference to function called\n";
}

void f2(int n)
{
    std::cout &lt;&lt; "bind expression called with " &lt;&lt; n &lt;&lt; " as the argument\n";
}

int main()
{
    std::reference_wrapper&lt;void()&gt; ref1 = std::ref(f1);
    ref1();
    
    auto b = std::bind(f2, std::placeholders::_1);
    auto ref2 = std::ref(b);
    ref2(7);
    
    auto c = []{ std::cout &lt;&lt; "lambda function called\n"; };
    auto ref3 = std::ref(c);
    ref3();
}
|output=
reference to function called
bind expression called with 7 as the argument
lambda function called
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3764|std=C++17|before={{c/core|operator()}} is not {{c/core|noexcept}}|after=propagate {{c/core|noexcept}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/reference_wrapper/dsc get}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
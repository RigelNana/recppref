{{cpp/title|binder1st|binder2nd}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl|deprecated=c++11|until=c++17|num=1|
template&lt; class Fn &gt;
class binder1st
    : public std::unary_function&lt;typename Fn::second_argument_type, 
                                 typename Fn::result_type&gt; {
protected:
    Fn op;
    typename Fn::first_argument_type value;
public:
    binder1st( const Fn&amp; fn, 
               const typename Fn::first_argument_type&amp; value );

    typename Fn::result_type 
        operator()(const typename Fn::second_argument_type&amp; x) const;

    typename Fn::result_type 
        operator()(typename Fn::second_argument_type&amp; x) const;
};
}}
{{dcl|deprecated=c++11|until=c++17|num=2|
template&lt; class Fn &gt;
class binder2nd
    : public std::unary_function&lt;typename Fn::first_argument_type,
                                 typename Fn::result_type&gt; {
protected:
    Fn op;
    typename Fn::second_argument_type value;
public:
    binder2nd( const Fn&amp; fn, 
               const typename Fn::second_argument_type&amp; value );

    typename Fn::result_type 
        operator()(const typename Fn::first_argument_type&amp; x) const;

    typename Fn::result_type 
        operator()(typename Fn::first_argument_type&amp; x) const;
};
}}
{{dcl end}}

A function object that binds an argument to a binary function.

The value of the parameter is passed to the object at the construction time and stored within the object. Whenever the function object is invoked though {{tt|operator()}}, the stored value is passed as one of the arguments, the other argument is passed as an argument of {{tt|operator()}}. The resulting function object is a unary function.

@1@ Binds the first parameter to the value {{c|value}} given at the construction of the object.

@2@ Binds the second parameter to the value {{c|value}} given at the construction of the object.

===Example===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

const double pi = std::acos(-1); // use std::numbers::pi in C++20

int main()
{
    // deprecated in C++11, removed in C++17
    auto f1 = std::bind1st(std::multiplies&lt;double&gt;(), pi / 180.0);

    // C++11 replacement
    auto f2 = [](double a) { return a * pi / 180.0; };

    for (double n : {0, 30, 45, 60, 90, 180})
        std::cout &lt;&lt; n &lt;&lt; "°\t" &lt;&lt; std::fixed &lt;&lt; "= "
                  &lt;&lt; f1(n) &lt;&lt; " rad (using binder)\t= "
                  &lt;&lt; f2(n) &lt;&lt; " rad (using lambda)\n"
                  &lt;&lt; std::defaultfloat;
}
|output=
0°	= 0.000000 rad (using binder)	= 0.000000 rad (using lambda)
30°	= 0.523599 rad (using binder)	= 0.523599 rad (using lambda)
45°	= 0.785398 rad (using binder)	= 0.785398 rad (using lambda)
60°	= 1.047198 rad (using binder)	= 1.047198 rad (using lambda)
90°	= 1.570796 rad (using binder)	= 1.570796 rad (using lambda)
180°	= 3.141593 rad (using binder)	= 3.141593 rad (using lambda)
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=109|std=C++98|before={{tt|operator()}} could not modify to argument passed to it|after=added overloads to handle this}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc bind12}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
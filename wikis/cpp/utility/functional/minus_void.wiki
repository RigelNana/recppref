{{cpp/title|minus&lt;void&gt;}}
{{cpp/utility/functional/navbar}}
{{ddcl|header=functional|since=c++14|
template&lt;&gt;
class minus&lt;void&gt;;
}}

{{c/core|std::minus&lt;void&gt;}} is a specialization of {{lc|std::minus}} with parameter and return type deduced.

===Member types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|is_transparent}}|[[cpp/utility/functional#Transparent function objects|unspecified]]}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem fun|cpp/utility/functional/minus_void|title=operator()|inlinemem=true|returns the difference of two arguments}}
{{dsc end}}

{{member|{{small|std::minus&lt;void&gt;::}}operator()|2=
{{ddcl|1=
template&lt; class T, class U &gt;
constexpr auto operator()( T&amp;&amp; lhs, U&amp;&amp; rhs ) const
    -&gt; decltype(std::forward&lt;T&gt;(lhs) - std::forward&lt;U&gt;(rhs));
}}

Returns the difference of {{c|lhs}} and {{c|rhs}}.

===Parameters===
{{par begin}}
{{par|lhs, rhs|values to subtract}}
{{par end}}

===Return value===
{{c|std::forward&lt;T&gt;(lhs) - std::forward&lt;U&gt;(rhs)}}.
}}

===Example===
{{example
|code=
#include &lt;complex&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;

int main()
{
    auto complex_minus = std::minus&lt;void&gt;{}; // “void” can be omitted
    constexpr std::complex&lt;int&gt; z(4, 2);
    std::cout &lt;&lt; complex_minus(z, 1) &lt;&lt; '\n';
    std::cout &lt;&lt; (z - 1) &lt;&lt; '\n';
}
|output=
(3,2)
(3,2)
}}

{{langlinks|es|ja|ru|zh}}
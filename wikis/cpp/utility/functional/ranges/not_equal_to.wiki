{{cpp/ranges/title|not_equal_to}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl|since=c++20|
struct not_equal_to;
}}
{{dcl end}}

Function object for performing comparisons. Deduces the parameter types of the function call operator from the arguments (but not the return type).

===Nested types===
{{dsc begin}}
{{dsc hitem|Nested type|Definition}}
{{dsc|{{tt|is_transparent}}|[[cpp/utility/functional#Transparent function objects|unspecified]]}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem fun|operator()|nolink=true|checks if the arguments are ''not equal''}}
{{dsc end}}

{{member|1={{small|std::ranges::not_equal_to::}}operator()|2=
{{ddcl|
template&lt; class T, class U &gt;
constexpr bool operator()( T&amp;&amp; t, U&amp;&amp; u ) const;
}}

Equivalent to {{c|return !ranges::equal_to{}(std::forward&lt;T&gt;(t), std::forward&lt;U&gt;(u));}}.

{{cpp/enable if|{{c|std::equality_comparable_with&lt;T, U&gt;}} is satisfied}}.
}}

===Notes===
Unlike {{lc|std::not_equal_to}}, {{tt|std::ranges::not_equal_to}} requires both {{tt|1===}} and {{tt|1=!=}} to be valid (via the {{lconcept|equality_comparable_with}} constraint), and is entirely defined in terms of {{lc|std::ranges::equal_to}}.

===Example===
{{example}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3530|std=C++20|before=syntactic checks were relaxed while comparing pointers|after=only semantic requirements are relaxed}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc not_equal_to}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/title|binary_function}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl|until=c++17|deprecated=c++11|1=
template&lt;
    class Arg1,
    class Arg2, 
    class Result
&gt; struct binary_function;
}}
{{dcl end}}

{{tt|std::binary_function}} is a base class for creating function objects with two arguments.

{{tt|std::binary_function}} does not define {{c|operator()}}; it is expected that derived classes will define this. {{tt|std::binary_function}} provides only three types - {{tt|first_argument_type}}, {{tt|second_argument_type}} and {{tt|result_type}} - defined by the template parameters.

Some standard library function object adaptors, such as {{lc|std::not2}}, require the function objects they adapt to have certain types defined; {{lc|std::not2}} requires the function object being adapted to have two types named {{tt|first_argument_type}} and {{tt|second_argument_type}}. Deriving function objects that take two arguments from {{tt|std::binary_function}} is an easy way to make them compatible with those adaptors.

{{tt|std::binary_function}} is deprecated in C++11 and removed in C++17.

===Member types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|first_argument_type}}|{{tt|Arg1}}}}
{{dsc|{{tt|second_argument_type}}|{{tt|Arg2}}}}
{{dsc|{{tt|result_type}}|{{tt|Result}}}}
{{dsc end}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

struct same : std::binary_function&lt;int, int, bool&gt;
{
    bool operator()(int a, int b) const { return a == b; }
};

int main()
{
    std::vector&lt;char&gt; v1{'A', 'B', 'C', 'D', 'E'};
    std::vector&lt;char&gt; v2{'E', 'D', 'C', 'B', 'A'};
    std::vector&lt;bool&gt; v3(v1.size());
 
    std::transform(v1.begin(), v1.end(), v2.begin(), v3.begin(), std::not2(same()));
 
    std::cout &lt;&lt; std::boolalpha;
    for (std::size_t i = 0; i &lt; v1.size(); ++i)
        std::cout &lt;&lt; v1[i] &lt;&lt; " != " &lt;&lt; v2[i] &lt;&lt; " : " &lt;&lt; v3[i] &lt;&lt; '\n';
}
|output=
A != E : true
B != D : true
C != C : false
D != B : true
E != A : true
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc function}}
{{dsc inc|cpp/utility/functional/dsc move_only_function}}
{{dsc inc|cpp/utility/functional/dsc ptr_fun}}
{{dsc inc|cpp/utility/functional/dsc pointer_to_binary_function}}
{{dsc inc|cpp/utility/functional/dsc unary_function}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|logical_and}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl rev begin}}
{{dcl|until=c++14|
template&lt; class T &gt;
struct logical_and;
}}
{{dcl|since=c++14|
template&lt; class T {{=}} void &gt;
struct logical_and;
}}
{{dcl rev end}}
{{dcl end}}

Function object for performing logical AND (logical conjunction). Effectively calls {{c|operator&amp;&amp;}} on type {{tt|T}}.

===Specializations===
{{rev begin}}
{{rev|since=c++14|
The standard library provides a specialization of {{tt|std::logical_and}} when {{tt|T}} is not specified, which leaves the parameter types and return type to be deduced.
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc logical_and_void}}
{{dsc end}}
}}
{{rev end}}

{{cpp/utility/functional/member types|result=bool|arg1=T|arg2=T}}

===Member functions===
{{dsc begin}}
{{dsc mem fun|operator()|nolink=true|returns the logical AND of the two arguments}}
{{dsc end}}

{{member|{{small|std::logical_and::}}operator()|2=
{{dcl begin}}
{{dcla|constexpr=c++14|1=
bool operator()( const T&amp; lhs, const T&amp; rhs ) const;
}}
{{dcl end}}

Returns the logical AND of {{c|lhs}} and {{c|rhs}}.

===Parameters===
{{par begin}}
{{par|lhs, rhs|values to compute logical AND of}}
{{par end}}

===Return value===
The result of {{c|lhs &amp;&amp; rhs}}.

{{cpp/impldef exception}}

===Possible implementation===
{{eq fun|1=
constexpr bool operator()(const T&amp; lhs, const T&amp; rhs) const 
{
    return lhs &amp;&amp; rhs;
}
}}
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
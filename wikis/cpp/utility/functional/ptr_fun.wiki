{{cpp/title|ptr_fun}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl|deprecated=c++11|until=c++17|num=1|
template&lt; class Arg, class Result &gt;
std::pointer_to_unary_function&lt;Arg,Result&gt;
    ptr_fun( Result (*f)(Arg) );
}}
{{dcl|deprecated=c++11|until=c++17|num=2|
template&lt; class Arg1, class Arg2, class Result &gt;
std::pointer_to_binary_function&lt;Arg1,Arg2,Result&gt;
    ptr_fun( Result (*f)(Arg1, Arg2) );
}}
{{dcl end}}

Creates a function wrapper object (either {{c|std::pointer_to_unary_function}} or {{c|std::pointer_to_binary_function}}), deducing the target type from the template arguments.

@1@ Effectively calls {{c|std::pointer_to_unary_function&lt;Arg,Result&gt;(f)}}.

@2@ Effectively calls {{c|std::pointer_to_binary_function&lt;Arg1,Arg2,Result&gt;(f)}}.

This function and the related types are deprecated as of C++11 in favor of the more general {{lc|std::function}} and {{lc|std::ref}}, both of which create callable adaptor-compatible function objects from plain functions.

===Parameters===
{{par begin}}
{{par|f|pointer to a function to create a wrapper for}}
{{par end}}

===Return value===
A function object wrapping {{c|f}}.

{{cpp/impldef exception}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

constexpr bool is_vowel(char c)
{
    return std::string_view{"aeoiuAEIOU"}.find(c) != std::string_view::npos;
}

int main()
{
    std::string_view s = "Hello, world!";
    std::ranges::copy_if(s, std::ostreambuf_iterator&lt;char&gt;(std::cout),
        std::not1(std::ptr_fun(is_vowel)));
#if 0
// C++11 alternatives:
        std::not1(std::cref(is_vowel)));
        std::not1(std::function&lt;bool(char)&gt;(is_vowel)));
        [](char c) { return !is_vowel(c); });
// C++17 alternatives:
        std::not_fn(is_vowel));
#endif
}
|output=
Hll, wrld!
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc function}}
{{dsc inc|cpp/utility/functional/dsc move_only_function}}
{{dsc inc|cpp/utility/functional/dsc invoke}}
{{dsc inc|cpp/utility/functional/dsc not_fn}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
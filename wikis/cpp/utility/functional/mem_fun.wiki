{{cpp/title|mem_fun}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl|deprecated=c++11|until=c++17|num=1|
template&lt; class Res, class T &gt;
std::mem_fun_t&lt;Res,T&gt; mem_fun( Res (T::*f)() );
}}
{{dcl|deprecated=c++11|until=c++17|num=1|
template&lt; class Res, class T &gt;
std::const_mem_fun_t&lt;Res,T&gt; mem_fun( Res (T::*f)() const );
}}
{{dcl|deprecated=c++11|until=c++17|num=2|
template&lt; class Res, class T, class Arg &gt;
std::mem_fun1_t&lt;Res,T,Arg&gt; mem_fun( Res (T::*f)(Arg) );
}}
{{dcl|deprecated=c++11|until=c++17|num=2|
template&lt; class Res, class T, class Arg &gt;
std::const_mem_fun1_t&lt;Res,T,Arg&gt; mem_fun( Res (T::*f)(Arg) const );
}}
{{dcl end}}

Creates a member function wrapper object, deducing the target type from the template arguments. The wrapper object expects a pointer to an object of type {{tt|T}} as the first parameter to its {{c|operator()}}.

@1@ Effectively calls {{c|std::mem_fun_t&lt;Res,T&gt;(f)}} or {{c|std::const_mem_fun_t&lt;Res,T&gt;(f)}}.

@2@ Effectively calls {{c|std::mem_fun1_t&lt;Res,T,Arg&gt;(f)}} or {{c|std::const_mem_fun1_t&lt;Res,T,Arg&gt;(f)}}.

This function and the related types were deprecated in C++11 and removed in C++17 in favor of the more general {{lc|std::mem_fn}} and {{lc|std::bind}}, both of which create callable adaptor-compatible function objects from member functions.

===Parameters===
{{par begin}}
{{par|f|pointer to a member function to create a wrapper for}}
{{par end}}

===Return value===
A function object wrapping {{c|f}}.

{{cpp/impldef exception}}

===Notes===
The difference between {{c|std::mem_fun}} and {{c|std::mem_fun_ref}} is that the former produces a function wrapper that expects a pointer to an object, whereas the latter &amp;mdash; a reference.

===Example===
{{example
|1=Demonstrates {{tt|std::mem_fun}} usage and compares it with {{lc|std::mem_fn}}. C++11/14 compatible compilation mode might be necessary: g++/clang++ with -std=c++11, cl with /std:c++11, etc. On recent compilers, e.g. gcc-12, might issue "deprecated declaration" warnings if not compiled in C++98 mode.
|code=
#include &lt;functional&gt;
#include &lt;iostream&gt;

struct S
{
    int get_data() const { return data; }
    void no_args() const { std::cout &lt;&lt; "void S::no_args() const\n"; }
    void one_arg(int) { std::cout &lt;&lt; "void S::one_arg()\n"; }
    void two_args(int, int) { std::cout &lt;&lt; "void S::two_args(int, int)\n"; }
#if __cplusplus &gt; 201100
    int data{42};
#else
    int data;
    S() : data(42) {}
#endif
};

int main()
{
    S s;
 
    std::const_mem_fun_t&lt;int, S&gt; p = std::mem_fun(&amp;S::get_data);
    std::cout &lt;&lt; "s.get_data(): " &lt;&lt; p(&amp;s) &lt;&lt; '\n';
 
    std::const_mem_fun_t&lt;void, S&gt; p0 = std::mem_fun(&amp;S::no_args);
    p0(&amp;s);

    std::mem_fun1_t&lt;void, S, int&gt; p1 = std::mem_fun(&amp;S::one_arg);
    p1(&amp;s, 1);

#if __cplusplus &gt; 201100
//  auto p2 = std::mem_fun(&amp;S::two_args); // Error: mem_fun supports only member functions
                                          // without parameters or with only one parameter.
                                          // Thus, std::mem_fn is a better alternative:
    auto p2 = std::mem_fn(&amp;S::two_args);
    p2(s, 1, 2);

//  auto pd = std::mem_fun(&amp;S::data); // Error: pointers to data members are not supported.
                                      // Use std::mem_fn instead:
    auto pd = std::mem_fn(&amp;S::data);
    std::cout &lt;&lt; "s.data = " &lt;&lt; pd(s) &lt;&lt; '\n';
#endif
}
|p=true
|output=
s.get_data(): 42
void S::no_args() const
void S::one_arg(int)
void S::two_args(int, int)
s.data = 42
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc mem_fn}}
{{dsc inc|cpp/utility/functional/dsc mem_fun_ref}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/utility/functional/move_only_function/title|move_only_function}}
{{cpp/utility/functional/move_only_function/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
move_only_function() noexcept;
}}
{{dcl|num=2|since=c++23|
move_only_function( std::nullptr_t ) noexcept;
}}
{{dcl|num=3|since=c++23|
move_only_function( move_only_function&amp;&amp; other ) noexcept;
}}
{{dcl|num=4|since=c++23|1=
move_only_function( const move_only_function&amp; ) = delete;
}}
{{dcl|num=5|since=c++23|
template&lt; class F &gt; 
move_only_function( F&amp;&amp; f );
}}
{{dcl|num=6|since=c++23|
template&lt; class T, class... CArgs &gt; 
explicit move_only_function( std::in_place_type_t&lt;T&gt;, CArgs&amp;&amp;... args );
}}
{{dcl|num=7|since=c++23|
template&lt; class T, class U, class... CArgs &gt; 
explicit move_only_function( std::in_place_type_t&lt;T&gt;,
                             std::initializer_list&lt;U&gt; il, CArgs&amp;&amp;... args );
}}
{{dcl end}}

Creates a new {{tt|std::move_only_function}}.

@1,2@ Default constructor and the constructor taking {{c|nullptr}} construct an empty {{tt|std::move_only_function}}.

@3@ Move constructor constructs a {{tt|std::move_only_function}} whose target is that of {{c|other}}. {{c|other}} is in a valid but unspecified state after move construction.

@4@ Copy constructor is deleted. {{tt|std::move_only_function}} does not satisfy {{named req|CopyConstructible}}.

@5@ Let {{tt|VT}} be {{c|std::decay_t&lt;F&gt;}}. If {{c|f}} is a null function pointer, a null pointer to member value, or an empty {{tt|std::move_only_function}} (may be any other specialization), then constructs an empty {{tt|std::move_only_function}}. Otherwise, constructs a {{tt|std::move_only_function}} whose target is of type {{tt|VT}} and direct-non-list-initialized with {{c|std::forward&lt;F&gt;(f)}}.
* {{cpp/enable_if|{{tt|VT}} is neither same as {{tt|move_only_function}} nor a specialization of {{lc|std::in_place_type_t}}, and {{c|/*is-callable-from*/&lt;VT&gt;}} (see below) is {{c|true}}}}.
* The program is ill-formed if {{c|std::is_constructible_v&lt;VT, F&gt;}} is not {{c|true}}.

@6@ Let {{tt|VT}} be {{c|std::decay_t&lt;T&gt;}}. Constructs a {{tt|std::move_only_function}} whose target is of type {{tt|VT}} and direct-non-list-initialized with {{c|std::forward&lt;CArgs&gt;(args)...}}.
* {{cpp/enable_if|both {{c|std::is_constructible_v&lt;VT, CArgs...&gt;}} and {{c|/*is-callable-from*/&lt;VT&gt;}} (see below) are {{c|true}}}}.
* The program is ill-formed if {{tt|VT}} is not the same type as {{tt|T}}.

@7@ Let {{tt|VT}} be {{c|std::decay_t&lt;T&gt;}}. Constructs a {{tt|std::move_only_function}} whose target is of type {{tt|VT}} and direct-non-list-initialized with {{c|il, std::forward&lt;CArgs&gt;(args)...}}.
* {{cpp/enable_if|both {{c|std::is_constructible_v&lt;VT, std::initializer_list&lt;U&gt;&amp;, CArgs...&gt;}} and {{c|/*is-callable-from*/&lt;VT&gt;}} (see below) are {{c|true}}}}.
* The program is ill-formed if {{tt|VT}} is not the same type as {{tt|T}}.

For constructors {{v|5-7}}, the behavior is undefined if {{tt|VT}} does not satisfy the {{named req|Destructible}} requirements, or {{c|std::is_move_constructible_v&lt;VT&gt;}} is {{c|true}} but {{tt|VT}} does not satisfy the {{named req|MoveConstructible}} requirements.

{{cpp/utility/functional/is_callable_from_table|move_only_function}}

===Parameters===
{{par begin}}
{{par|other|another {{tt|std::move_only_function}} to move from}}
{{par|f|a function or a {{named req|Callable}} object to wrap}}
{{par|args|arguments to construct the target object}}
{{par|il|{{lc|std::initializer_list}} to construct the target object}}
{{par end}}

===Exceptions===
@5-7@ May throw {{lc|std::bad_alloc}} on allocation failure or propagate the exception thrown by the initialization of the target. No exception is thrown if {{tt|VT}} is a function pointer type or a specialization of {{lc|std::reference_wrapper}}.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/function/dsc constructor}}
{{dsc inc|cpp/utility/functional/copyable_function/dsc constructor}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
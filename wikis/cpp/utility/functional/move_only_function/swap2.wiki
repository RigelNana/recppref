{{title|swap{{petty|(std::move_only_function)}}}}
{{cpp/utility/functional/move_only_function/navbar}}
{{ddcl|since=c++23|
friend void swap( std::move_only_function&amp; lhs, std::move_only_function&amp; rhs ) noexcept;
}}

Overloads the {{lc|std::swap}} algorithm for {{lc|std::move_only_function}}. Exchanges the state of {{c|lhs}} with that of {{c|rhs}}. Effectively calls {{c|lhs.swap(rhs)}}.

{{cpp/hidden friend|{{tt|std::move_only_function&lt;FunctionType&gt;}}}}

===Parameters===
{{par begin}}
{{par|lhs, rhs|{{tt|std::move_only_function}} objects whose states to swap}}
{{par end}}

===Return value===
(none)

===Example===
{{example
|code=
#include &lt;concepts&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;

void foo(const char* str, int x)
{
    std::cout &lt;&lt; "foo(\"" &lt;&lt; str &lt;&lt; "\", " &lt;&lt; x &lt;&lt; ")\n";
}

void bar(const char* str, int x)
{
    std::cout &lt;&lt; "bar(\"" &lt;&lt; str &lt;&lt; "\", " &lt;&lt; x &lt;&lt; ")\n";
}

int main()
{
    std::move_only_function&lt;void(const char*, int) const&gt; f1{foo};
    std::move_only_function&lt;void(const char*, int) const&gt; f2{bar};

    f1("f1", 1);
    f2("f2", 2);

    std::cout &lt;&lt; "std::ranges::swap(f1, f2);\n";
    std::ranges::swap(f1, f2); // finds the hidden friend

    f1("f1", 1);
    f2("f2", 2);
}
|output=
foo("f1", 1)
bar("f2", 2)
std::ranges::swap(f1, f2);
bar("f1", 1)
foo("f2", 2)
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/move_only_function/dsc swap}}
{{dsc inc|cpp/utility/functional/function/dsc swap2}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
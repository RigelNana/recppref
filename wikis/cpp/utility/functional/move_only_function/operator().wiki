{{cpp/utility/functional/move_only_function/title | operator()}}
{{cpp/utility/functional/move_only_function/navbar}}
{{ddcl | since=c++23 |
R operator()( Args... args ) /*cv*/ /*ref*/ noexcept(/*noex*/);
}}

Invokes the stored callable target with the parameters {{tt|args}}. The {{c|/*cv*/}}, {{c|/*ref*/}}, and {{c|/*noex*/}} parts of {{c|operator()}} are identical to those of the template parameter of {{tt|std::move_only_function}}.

Equivalent to {{c|return std::invoke_r&lt;R&gt;(/*cv-ref-cast*/(f), std::forward&lt;Args&gt;(args)...);}}, where {{tt|f}} is a cv-unqualified lvalue that denotes the target object of {{c|*this}}, and {{c|/*cv-ref-cast*/(f)}} is equivalent to:
* {{c|f}} if {{spar|cv}} {{spar|ref}} is either empty or {{c|&amp;}}, or
* {{c|std::as_const(f)}} if {{spar|cv}} {{spar|ref}} is either {{c|const}} or {{c|const &amp;}}, or
* {{c|std::move(f)}} if {{spar|cv}} {{spar|ref}} is {{c|&amp;&amp;}}, or
* {{c|std::move(std::as_const(f))}} if {{spar|cv}} {{spar|ref}} is {{c|const &amp;&amp;}}.

The behavior is undefined if {{c|*this}} is empty.

===Parameters===
{{par begin}}
{{par | args | parameters to pass to the stored callable target}}
{{par end}}

===Return value===
{{c|std::invoke_r&lt;R&gt;(/*cv-ref-cast*/(f), std::forward&lt;Args&gt;(args)...)}}.

===Exceptions===
Propagates the exception thrown by the underlying function call.

===Example===
{{example
 | The following example shows how {{lc|std::move_only_function}} can passed to other functions by value. Also, it shows how {{lc|std::move_only_function}} can store lambdas.
 | code=
#include &lt;iostream&gt;
#include &lt;functional&gt;

void call(std::move_only_function&lt;int() const&gt; f)  // can be passed by value
{ 
    std::cout &lt;&lt; f() &lt;&lt; '\n';
}

int normal_function() 
{
    return 42;
}

int main()
{
    int n = 1;
    auto lambda = [&amp;n](){ return n; };
    std::move_only_function&lt;int() const&gt; f = lambda;
    call(std::move(f));

    n = 2;
    call(lambda); 

    f = normal_function; 
    call(std::move(f));
}
 | output=
1
2
42
}}

===See also===
{{dsc begin}}
{{dsc inc | cpp/utility/functional/function/dsc operator()}}
{{dsc inc | cpp/utility/functional/reference_wrapper/dsc operator()}}
{{dsc inc | cpp/utility/functional/dsc invoke}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|negate&lt;void&gt;}}
{{cpp/utility/functional/navbar}}
{{ddcl|header=functional|since=c++14|
template&lt;&gt;
class negate&lt;void&gt;;
}}

{{c|std::negate&lt;&gt;}} is a specialization of {{lc|std::negate}} with parameter and return type deduced.

===Member types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|is_transparent}}|[[cpp/utility/functional#Transparent function objects|unspecified]]}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem fun|cpp/utility/functional/negate_void|title=operator()|inlinemem=true|returns its negated argument}}
{{dsc end}}

{{member|{{small|std::negate&lt;void&gt;::}}operator()|2=
{{ddcl|1=
template&lt; class T &gt;
constexpr auto operator()( T&amp;&amp; arg ) const
    -&gt; decltype(-std::forward&lt;T&gt;(arg));
}}

Returns the result of negating {{c|arg}}.

===Parameters===
{{par begin}}
{{par|arg|value to negate}}
{{par end}}

===Return value===
{{c|-std::forward&lt;T&gt;(arg)}}.
}}

===Example===
{{example
|code=
#include &lt;complex&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;

int main()
{
    auto complex_negate = std::negate&lt;void&gt;{}; // “void” can be omitted
    constexpr std::complex z(4, 2);
    std::cout &lt;&lt; z &lt;&lt; '\n';
    std::cout &lt;&lt; -z &lt;&lt; '\n';
    std::cout &lt;&lt; complex_negate(z) &lt;&lt; '\n';
}
|output=
(4,2)
(-4,-2)
(-4,-2)
}}

{{langlinks|es|ja|ru|zh}}
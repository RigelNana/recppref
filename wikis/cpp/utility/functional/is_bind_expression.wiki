{{cpp/title|is_bind_expression}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl|since=c++11|1=
template&lt; class T &gt;
struct is_bind_expression;
}}
{{dcl end}}

If {{tt|T}} is a type produced by a call to {{lc|std::bind}} (but not {{lc|std::bind_front}} or {{lc|std::bind_front|std::bind_back}}), this template is derived from {{lc|std::true_type}}. For any other type (unless user-specialized), this template is derived from {{lc|std::false_type}}.

A program may specialize this template for a {{lsd|cpp/language/type#Program-defined type}} {{tt|T}} to implement {{named req|UnaryTypeTrait}} with base characteristic of {{lc|std::true_type}} to indicate that {{tt|T}} should be treated by {{lc|std::bind}} as if it were the type of a bind subexpression: when a bind-generated function object is invoked, a bound argument of this type will be invoked as a function object and will be given all the unbound arguments passed to the bind-generated object.

===Helper variable template===
{{ddcl|since=c++17|1=
template&lt; class T &gt;
constexpr bool is_bind_expression_v = is_bind_expression&lt;T&gt;::value;
}}

{{cpp/types/integral_constant/inherit|{{tt|T}} is a function object generated by {{lc|std::bind}}}}

===Example===
{{example
|code=
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

struct MyBind
{
    typedef int result_type;
    int operator()(int a, int b) const { return a + b; }
};

namespace std
{
    template&lt;&gt;
    struct is_bind_expression&lt;MyBind&gt; : public true_type {};
}

int f(int n1, int n2)
{
    return n1 + n2;
}

int main()
{
    // as if bind(f, bind(MyBind(), _1, _2), 2)
    auto b = std::bind(f, MyBind(), 2); 
    
    std::cout &lt;&lt; "Adding 2 to the sum of 10 and 11 gives " &lt;&lt; b(10, 11) &lt;&lt; '\n';
}
|output=
Adding 2 to the sum of 10 and 11 gives 23
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2010|std=C++11|before=program-defined specializations could&lt;br&gt;only be derived from {{lc|std::false_type}}|after=can be derived from&lt;br&gt;{{lc|std::true_type}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc bind}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
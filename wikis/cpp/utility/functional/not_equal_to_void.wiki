{{cpp/title|not_equal_to&lt;void&gt;}}
{{cpp/utility/functional/navbar}}
{{ddcl|header=functional|since=c++14|
template&lt;&gt;
class not_equal_to&lt;void&gt;;
}}

{{c/core|std::not_equal_to&lt;void&gt;}} is a specialization of {{lc|std::not_equal_to}} with parameter and return type deduced.

===Nested types===
{{dsc begin}}
{{dsc hitem|Nested type|Definition}}
{{dsc|{{tt|is_transparent}}|[[cpp/utility/functional#Transparent function objects|unspecified]]}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem fun|cpp/utility/functional/not_equal_to_void|title=operator()|inlinemem=true|tests if the two arguments do not compare equal}}
{{dsc end}}

{{member|{{small|std::not_equal_to&lt;void&gt;::}}operator()|2=
{{ddcl|1=
template&lt; class T, class U &gt;
constexpr auto operator()( T&amp;&amp; lhs, U&amp;&amp; rhs ) const
    -&gt; decltype(std::forward&lt;T&gt;(lhs) != std::forward&lt;U&gt;(rhs));
}}

Returns the result of non-equality comparison between {{c|lhs}} and {{c|rhs}}.

===Parameters===
{{par begin}}
{{par|lhs, rhs|values to compare}}
{{par end}}

===Return value===
{{c|1=std::forward&lt;T&gt;(lhs) != std::forward&lt;U&gt;(rhs)}}.
}}

===Example===
{{example
|code=
#include &lt;functional&gt;

int main()
{
    constexpr int p = 0, q = 8;
    std::not_equal_to&lt;&gt; not_equal{};
    static_assert(!not_equal(p, p));
    static_assert(not_equal(p, q));
}
}}

{{langlinks|es|ja|ru|zh}}
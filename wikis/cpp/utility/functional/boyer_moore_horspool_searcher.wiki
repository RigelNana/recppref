{{cpp/title|boyer_moore_horspool_searcher}}
{{cpp/utility/functional/navbar}}

{{dcl begin}}
{{dcl header|functional}}
{{dcl|since=c++17|1=
template&lt; class RandomIt1,
          class Hash = std::hash&lt;typename std::iterator_traits&lt;RandomIt1&gt;::value_type&gt;,
          class BinaryPredicate = std::equal_to&lt;&gt; &gt;
class boyer_moore_horspool_searcher;
}}
{{dcl end}}

A searcher suitable for use with the {{named req|Searcher}} overload of {{lc|std::search}} that implements the {{enwiki|Boyer%E2%80%93Moore%E2%80%93Horspool algorithm|Boyer-Moore-Horspool string searching algorithm}}.

{{tt|std::boyer_moore_horspool_searcher}} is {{named req|CopyConstructible}} and {{named req|CopyAssignable}}.

{{tt|RandomIt1}} must meet the requirements of {{named req|RandomAccessIterator}}.

===Member functions===
{{member|{{small|std::boyer_moore_horspool_searcher::}}boyer_moore_horspool_searcher|2=
{{dcl begin}}
{{dcl|1=
boyer_moore_horspool_searcher( RandomIt1 pat_first,
                               RandomIt1 pat_last,
                               Hash hf = Hash(),
                               BinaryPredicate pred = BinaryPredicate() );
}}
{{dcl end}}
Constructs a {{tt|std::boyer_moore_horspool_searcher}} by storing copies of {{c|pat_first}}, {{c|pat_last}}, {{c|hf}}, and {{c|pred}}, setting up any necessary internal data structures. 

The value type of {{tt|RandomIt1}} must be {{named req|DefaultConstructible}}, {{named req|CopyConstructible}} and {{named req|CopyAssignable}}.

For any two values {{tt|A}} and {{tt|B}} of the type {{c|std::iterator_traits&lt;RandomIt1&gt;::value_type}}, if {{c|1= pred(A, B) == true}}, then {{c|1= hf(A) == hf(B)}} shall be {{c|true}}.

===Parameters===
{{par begin}}
{{par|pat_first, pat_last|a pair of iterators designating the string to be searched for}}
{{par|hf|a callable object used to hash the elements of the string}}
{{par|pred|a callable object used to determine equality}}
{{par end}}

===Exceptions===
Any exceptions thrown by 
* the copy constructor of {{tt|RandomIt1}};
* the default constructor, copy constructor, or copy assignment operator of the value type of {{tt|RandomIt1}}; or
* the copy constructor or function call operator of {{tt|BinaryPredicate}} or {{tt|Hash}}.
May also throw {{lc|std::bad_alloc}} if additional memory required for internal data structures cannot be allocated.
}}

{{member|{{small|std::boyer_moore_horspool_searcher::}}operator()|2=
{{dcl begin}}
{{dcl|
template&lt; class RandomIt2 &gt;
std::pair&lt;RandomIt2, RandomIt2&gt; operator()( RandomIt2 first, RandomIt2 last ) const;
}}
{{dcl end}}
The member function called by the Searcher overload of {{lc|std::search}} to perform a search with this searcher. {{tt|RandomIt2}} must meet the requirements of {{named req|RandomAccessIterator}}.

{{tt|RandomIt1}} and {{tt|RandomIt2}} must have the same value type.

===Parameters===
{{par begin}}
{{par|first, last|a pair of iterators designating the string to be examined}}
{{par end}}

===Return value===
If the pattern {{range|pat_first|pat_last}} is empty, returns {{c|std::make_pair(first, first)}}.

Otherwise, returns a pair of iterators to the first and one past last positions in {{range|first|last}} where a subsequence that compares equal to {{range|pat_first|pat_last}} as defined by {{c|pred}} is located, or {{c|std::make_pair(last, last)}} otherwise.
}}

===Notes===
{{feature test macro|__cpp_lib_boyer_moore_searcher|[[cpp/utility/functional#Searchers|searchers]]|value=201603L|std=C++17}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;
 
int main()
{
    constexpr std::string_view in =
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed "
        "do eiusmod tempor incididunt ut labore et dolore magna aliqua";

    const std::string_view needle{"pisci"};

    auto it = std::search(in.begin(), in.end(),
                  std::boyer_moore_horspool_searcher(
                      needle.begin(), needle.end()));
    if (it != in.end())
        std::cout &lt;&lt; "The string " &lt;&lt; std::quoted(needle) &lt;&lt; " found at offset "
                  &lt;&lt; it - in.begin() &lt;&lt; '\n';
    else
        std::cout &lt;&lt; "The string " &lt;&lt; std::quoted(needle) &lt;&lt; " not found\n";
}
|output=
The string "pisci" found at offset 43
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc search}}
{{dsc inc|cpp/utility/functional/dsc default_searcher}}
{{dsc inc|cpp/utility/functional/dsc boyer_moore_searcher}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
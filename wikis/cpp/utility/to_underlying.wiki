{{cpp/title|to_underlying}}
{{cpp/utility/navbar}}
{{ddcl|header=utility|since=c++23|
template&lt; class Enum &gt;
constexpr std::underlying_type_t&lt;Enum&gt; to_underlying( Enum e ) noexcept;
}}

Converts an enumeration to its underlying type. Equivalent to {{c|return static_cast&lt;std::underlying_type_t&lt;Enum&gt;&gt;(e);}}.

===Parameters===
{{par begin}}
{{par|e|enumeration value to convert}}
{{par end}}

===Return value===
The integer value of the underlying type of {{tt|Enum}}, converted from {{c|e}}.

===Notes===
{{tt|std::to_underlying}} can be used to avoid converting an enumeration to an integer type other than its underlying type.

{{feature_test_macro|__cpp_lib_to_underlying|{{tt|std::to_underlying}}|value=202102L|std=C++23}}

===Example===
{{example
|code=
#include &lt;cstdint&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;type_traits&gt;
#include &lt;utility&gt;

enum class E1 : char { e };
static_assert(std::is_same_v&lt;char, decltype(std::to_underlying(E1::e))&gt;);

enum struct E2 : long { e };
static_assert(std::is_same_v&lt;long, decltype(std::to_underlying(E2::e))&gt;);

enum E3 : unsigned { e };
static_assert(std::is_same_v&lt;unsigned, decltype(std::to_underlying(e))&gt;);

int main()
{
    enum class ColorMask : std::uint32_t
    {
        red = 0xFF, green = (red &lt;&lt; 8), blue = (green &lt;&lt; 8), alpha = (blue &lt;&lt; 8)
    };

    std::cout &lt;&lt; std::hex &lt;&lt; std::uppercase &lt;&lt; std::setfill('0')
              &lt;&lt; std::setw(8) &lt;&lt; std::to_underlying(ColorMask::red) &lt;&lt; '\n'
              &lt;&lt; std::setw(8) &lt;&lt; std::to_underlying(ColorMask::green) &lt;&lt; '\n'
              &lt;&lt; std::setw(8) &lt;&lt; std::to_underlying(ColorMask::blue) &lt;&lt; '\n'
              &lt;&lt; std::setw(8) &lt;&lt; std::to_underlying(ColorMask::alpha) &lt;&lt; '\n';

//  std::underlying_type_t&lt;ColorMask&gt; x = ColorMask::alpha; // Error: no known conversion
    [[maybe_unused]]
    std::underlying_type_t&lt;ColorMask&gt; y = std::to_underlying(ColorMask::alpha); // OK
}
|output=
000000FF
0000FF00
00FF0000
FF000000
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc underlying_type}}
{{dsc inc|cpp/types/dsc is_enum}}
{{dsc inc|cpp/types/dsc is_scoped_enum}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
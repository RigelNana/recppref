{{cpp/title|any}}
{{cpp/utility/any/navbar}}
{{ddcl|header=any|since=c++17|
class any;
}}

The class {{tt|any}} describes a type-safe container for single values of any [[cpp/types/is_copy_constructible|copy constructible]] type.

@1@ An object of class {{tt|any}} stores an instance of any type that satisfies the constructor requirements or is empty, and this is referred to as the ''state'' of the class {{tt|any}} object. The stored instance is called the contained object. Two states are equivalent if they are either both empty or if both are not empty and if the contained objects are equivalent.

@2@ The non-member {{tt|any_cast}} functions provide type-safe access to the contained object.

Implementations are encouraged to avoid dynamic allocations for small objects, but such an optimization may only be applied to types for which {{lc|std::is_nothrow_move_constructible}} returns {{tt|true}}.

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/utility/any/dsc constructor}}
{{dsc inc|cpp/utility/any/dsc operator{{=}}}}
{{dsc inc|cpp/utility/any/dsc destructor}}

{{dsc h2|Modifiers}}
{{dsc inc|cpp/utility/any/dsc emplace}}
{{dsc inc|cpp/utility/any/dsc reset}}
{{dsc inc|cpp/utility/any/dsc swap}}

{{dsc h2|Observers}}
{{dsc inc|cpp/utility/any/dsc has_value}}
{{dsc inc|cpp/utility/any/dsc type}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/utility/any/dsc swap2}}
{{dsc inc|cpp/utility/any/dsc any_cast}}
{{dsc inc|cpp/utility/any/dsc make_any}}
{{dsc end}}

===Helper classes===
{{dsc begin}}
{{dsc inc|cpp/utility/any/dsc bad_any_cast}}
{{dsc end}}

===Notes===
{{feature test macro|__cpp_lib_any|{{ttt|std::any}}|value=201606L|std=C++17}}

===Example===
{{example
|code=
#include &lt;any&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; std::boolalpha;

    // any type
    std::any a = 1;
    std::cout &lt;&lt; a.type().name() &lt;&lt; ": " &lt;&lt; std::any_cast&lt;int&gt;(a) &lt;&lt; '\n';
    a = 3.14;
    std::cout &lt;&lt; a.type().name() &lt;&lt; ": " &lt;&lt; std::any_cast&lt;double&gt;(a) &lt;&lt; '\n';
    a = true;
    std::cout &lt;&lt; a.type().name() &lt;&lt; ": " &lt;&lt; std::any_cast&lt;bool&gt;(a) &lt;&lt; '\n';

    // bad cast
    try
    {
        a = 1;
        std::cout &lt;&lt; std::any_cast&lt;float&gt;(a) &lt;&lt; '\n';
    }
    catch (const std::bad_any_cast&amp; e)
    {
        std::cout &lt;&lt; e.what() &lt;&lt; '\n';
    }

    // has value
    a = 2;
    if (a.has_value())
        std::cout &lt;&lt; a.type().name() &lt;&lt; ": " &lt;&lt; std::any_cast&lt;int&gt;(a) &lt;&lt; '\n';

    // reset
    a.reset();
    if (!a.has_value())
        std::cout &lt;&lt; "no value\n";

    // pointer to contained data
    a = 3;
    int* i = std::any_cast&lt;int&gt;(&amp;a);
    std::cout &lt;&lt; *i &lt;&lt; '\n';
}
|p=true
|output=
int: 1
double: 3.14
bool: true
bad any_cast
int: 2
no value
3
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc function}}
{{dsc inc|cpp/utility/functional/dsc move_only_function}}
{{dsc inc|cpp/utility/dsc variant}}
{{dsc inc|cpp/utility/dsc optional}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
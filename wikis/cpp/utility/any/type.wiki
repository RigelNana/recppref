{{cpp/utility/any/title|type}}
{{cpp/utility/any/navbar}}
{{ddcl|since=c++17|
const std::type_info&amp; type() const noexcept;
}}

Queries the contained type.

===Return value===
The {{lc|typeid}} of the contained value if instance is non-empty, otherwise {{c|typeid(void)}}.

===Example===
{{example
|The example demonstrates {{tt|std::any}} visitor idiom with ability to register new visitors at compile- and run-time.
|code=
#include &lt;any&gt;
#include &lt;functional&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;type_traits&gt;
#include &lt;typeindex&gt;
#include &lt;typeinfo&gt;
#include &lt;unordered_map&gt;
#include &lt;vector&gt;
 
template&lt;class T, class F&gt;
inline std::pair&lt;const std::type_index, std::function&lt;void(const std::any&amp;)&gt;&gt;
    to_any_visitor(const F&amp; f)
{
    return
    {
        std::type_index(typeid(T)),
        [g = f](std::any const&amp; a)
        {
            if constexpr (std::is_void_v&lt;T&gt;)
                g();
            else
                g(std::any_cast&lt;T const&amp;&gt;(a));
        }
    };
}

static std::unordered_map&lt;std::type_index, std::function&lt;void(const std::any&amp;)&gt;&gt;
    any_visitor
{
    to_any_visitor&lt;void&gt;([] { std::cout &lt;&lt; "{}"; }),
    to_any_visitor&lt;int&gt;([](int x) { std::cout &lt;&lt; x; }),
    to_any_visitor&lt;unsigned&gt;([](unsigned x) { std::cout &lt;&lt; x; }),
    to_any_visitor&lt;float&gt;([](float x) { std::cout &lt;&lt; x; }),
    to_any_visitor&lt;double&gt;([](double x) { std::cout &lt;&lt; x; }),
    to_any_visitor&lt;char const*&gt;([](char const* s)
        { std::cout &lt;&lt; std::quoted(s); }),
    // ... add more handlers for your types ...
};

inline void process(const std::any&amp; a)
{
    if (const auto it = any_visitor.find(std::type_index(a.type()));
        it != any_visitor.cend())
        it-&gt;second(a);
    else
        std::cout &lt;&lt; "Unregistered type " &lt;&lt; std::quoted(a.type().name());
}

template&lt;class T, class F&gt;
inline void register_any_visitor(const F&amp; f)
{
    std::cout &lt;&lt; "Register visitor for type "
              &lt;&lt; std::quoted(typeid(T).name()) &lt;&lt; '\n';
    any_visitor.insert(to_any_visitor&lt;T&gt;(f));
}
 
int main()
{
    std::vector&lt;std::any&gt; va{&lt;!----&gt;{}, 42, 123u, 3.14159f, 2.71828, "C++17"};
 
    for (int n{}; const std::any&amp; a : va)
    {
        std::cout &lt;&lt; (n++ ? ", " : "[");
        process(a);
    }
    std::cout &lt;&lt; "]\n";

    process(std::any(0xFULL)); //&lt; Unregistered type "y" (unsigned long long)
    std::cout &lt;&lt; '\n';

    register_any_visitor&lt;unsigned long long&gt;([](auto x)
    {
        std::cout &lt;&lt; std::hex &lt;&lt; std::showbase &lt;&lt; x; 
    });

    process(std::any(0xFULL)); //&lt; OK: 0xf
    std::cout &lt;&lt; '\n';
}
|p=true&lt;!--type_info::name() is implementation defined--&gt;
|output=
[{}, 42, 123, 3.14159, 2.71828, "C++17"]
Unregistered type "y"
Register visitor for type "y"
0xf
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc type_index}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
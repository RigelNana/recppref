{{cpp/title|make_any}}
{{cpp/utility/any/navbar}}
{{dcl begin}}
{{dcl header|any}}
{{dcl|num=1|since=c++17|
template&lt; class T, class... Args &gt;
std::any make_any( Args&amp;&amp;... args );
}}
{{dcl|num=2|since=c++17|
template&lt; class T, class U, class... Args &gt;
std::any make_any( std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args );
}}
{{dcl end}}

Constructs an {{tt|any}} object containing an object of type {{tt|T}}, passing the provided arguments to {{tt|T}}'s constructor.

@1@ Equivalent to {{c|return std::any(std::in_place_type&lt;T&gt;, std::forward&lt;Args&gt;(args)...);}}
@2@ Equivalent to {{c|return std::any(std::in_place_type&lt;T&gt;, il, std::forward&lt;Args&gt;(args)...);}}

===Example===
{{example
|code=
#include &lt;any&gt;
#include &lt;complex&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    auto a0 = std::make_any&lt;std::string&gt;("Hello, std::any!\n");
    auto a1 = std::make_any&lt;std::complex&lt;double&gt;&gt;(0.1, 2.3);

    std::cout &lt;&lt; std::any_cast&lt;std::string&amp;&gt;(a0);
    std::cout &lt;&lt; std::any_cast&lt;std::complex&lt;double&gt;&amp;&gt;(a1) &lt;&lt; '\n';

    using lambda = std::function&lt;void(void)&gt;;

    // Put a lambda into std::any. Attempt #1 (failed).
    std::any a2 = [] { std::cout &lt;&lt; "Lambda #1.\n"; };
    std::cout &lt;&lt; "a2.type() = \"" &lt;&lt; a2.type().name() &lt;&lt; "\"\n";
    
    // any_cast casts to &lt;void(void)&gt; but actual type is not
    // a std::function..., but ~ main::{lambda()#1}, and it is
    // unique for each lambda. So, this throws...
    try
    {
        std::any_cast&lt;lambda&gt;(a2)();
    }
    catch (std::bad_any_cast const&amp; ex)
    {
        std::cout &lt;&lt; ex.what() &lt;&lt; '\n';
    }

    // Put a lambda into std::any. Attempt #2 (successful).
    auto a3 = std::make_any&lt;lambda&gt;([] { std::cout &lt;&lt; "Lambda #2.\n"; });
    std::cout &lt;&lt; "a3.type() = \"" &lt;&lt; a3.type().name() &lt;&lt; "\"\n";
    std::any_cast&lt;lambda&gt;(a3)();
}
|p=true
|output=
Hello, std::any!
(0.1,2.3)
a2.type() = "Z4mainEUlvE_"
bad any_cast
a3.type() = "St8functionIFvvEE"
Lambda #2.
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/any/dsc constructor}}
{{dsc inc|cpp/utility/any/dsc any_cast}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
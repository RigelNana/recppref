{{cpp/utility/any/title|emplace}}
{{cpp/utility/any/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|
template&lt; class ValueType, class... Args &gt;
std::decay_t&lt;ValueType&gt;&amp; emplace( Args&amp;&amp;... args );
}}
{{dcl|num=2|since=c++17|
template&lt; class ValueType, class U, class... Args &gt;
std::decay_t&lt;ValueType&gt;&amp; emplace( std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args );
}}
{{dcl end}}

Changes the contained object to one of type {{c|std::decay_t&lt;ValueType&gt;}} constructed from the arguments.

First destroys the current contained object (if any) by {{lc|reset|reset()}}, then:

@1@ constructs an object of type {{c|std::decay_t&lt;ValueType&gt;}}, [[cpp/language/direct initialization|direct-non-list-initialized]] from {{c|std::forward&lt;Args&gt;(args)...}}, as the contained object.
* {{cpp/enable if|{{c|1=std::is_constructible_v&lt;std::decay_t&lt;ValueType&gt;, Args...&gt;}} and {{c|std::is_copy_constructible_v&lt;std::decay_t&lt;ValueType&gt;&gt;}} are both {{c|true}}}}.

@2@ constructs an object of type {{c|std::decay_t&lt;ValueType&gt;}}, [[cpp/language/direct initialization|direct-non-list-initialized]] from {{c|il, std::forward&lt;Args&gt;(args)...}}, as the contained object.
* {{cpp/enable if|{{c|1=std::is_constructible_v&lt;std::decay_t&lt;ValueType&gt;, std::initializer_list&lt;U&gt;&amp;, Args...&gt;}} and {{c|std::is_copy_constructible_v&lt;std::decay_t&lt;ValueType&gt;&gt;}} are both {{c|true}}}}. 

===Template parameters===
{{par begin}}
{{par|ValueType|contained value type}}
{{par hreq}}
{{par req named|std::decay_t&lt;ValueType&gt;|CopyConstructible}}
{{par end}}

===Return value===
A reference to the new contained object.

===Exceptions===
Throws any exception thrown by {{tt|T}}'s constructor. If an exception is thrown, the previously contained object (if any) has been destroyed, and {{c|*this}} does not contain a value.

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;any&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

class Star
{
    std::string name;
    int id;

public:
    Star(std::string name, int id) : name{name}, id{id}
    {
        std::cout &lt;&lt; "Star::Star(string, int)\n";
    }

    void print() const
    {
        std::cout &lt;&lt; "Star{\"" &lt;&lt; name &lt;&lt; "\" : " &lt;&lt; id &lt;&lt; "};\n";
    }
};

int main()
{
    std::any celestial;
    // (1) emplace(Args&amp;&amp;... args);
    celestial.emplace&lt;Star&gt;("Procyon", 2943);
    const auto* star = std::any_cast&lt;Star&gt;(&amp;celestial);
    star-&gt;print();

    std::any av;
    // (2) emplace(std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args);
    av.emplace&lt;std::vector&lt;char&gt;&gt;({'C', '+', '+', '1', '7'} /* no args */);
    std::cout &lt;&lt; av.type().name() &lt;&lt; '\n';
    const auto* va = std::any_cast&lt;std::vector&lt;char&gt;&gt;(&amp;av);
    std::for_each(va-&gt;cbegin(), va-&gt;cend(), [](char const&amp; c) { std::cout &lt;&lt; c; });
    std::cout &lt;&lt; '\n';
}
|p=true
|output=
Star::Star(string, int)
Star{"Procyon" : 2943};
St6vectorIcSaIcEE
C++17
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/any/dsc constructor}}
{{dsc inc|cpp/utility/any/dsc reset}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/utility/bitset/title|set}}
{{cpp/utility/bitset/navbar}}
{{dcl begin}}
{{dcla|num=1|noexcept=c++11|constexpr=c++23|
bitset&amp; set();
}}
{{dcl|num=2|notes={{mark constexpr since c++23}}|1=
bitset&amp; set( std::size_t pos, bool value = true );
}}
{{dcl end}}

Sets all bits to {{c|true}} or sets one bit to specified value.

@1@ Sets all bits to {{c|true}}.

@2@ Sets the bit at position {{c|pos}} to the value {{c|value}}.

===Parameters===
{{par begin}}
{{par|pos|the position (counting from {{c|0}}, i.e. from least significant to most significant) of the bit to set}}
{{par|value|the value to set the bit to}}
{{par end}}

===Return value===
{{c|*this}}

===Exceptions===
@2@ Throws {{lc|std::out_of_range}} if {{c|pos}} does not correspond to a valid bit position.

===Example===
{{example
|code=
#include &lt;bitset&gt;
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
 
int main()
{
    std::bitset&lt;8&gt; b;
    std::cout &lt;&lt; b &lt;&lt; '\n';
    std::cout &lt;&lt; b.set() &lt;&lt; '\n';
    std::cout &lt;&lt; b.reset() &lt;&lt; '\n';
    
    for (std::size_t i = 1; i &lt; b.size(); i += 2)
        b.set(i);
    
    std::cout &lt;&lt; b &lt;&lt; '\n';
}
|output=
00000000
11111111
00000000
10101010
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=186|std=C++98|before=the type of {{c|value}} was {{c/core|int}}|after=corrected to {{c/core|bool}}}}
{{dr list item|wg=lwg|dr=2250|std=C++98|before=the behavior was undefined if {{c|pos}} does&lt;br&gt;not correspond to a valid bit position|after=always throws an&lt;br&gt;exception in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/bitset/dsc reset}}
{{dsc inc|cpp/utility/bitset/dsc flip}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
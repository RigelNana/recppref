{{cpp/utility/bitset/title|operator&amp;{{=}},{{!=}},^{{=}},~}}
{{cpp/utility/bitset/navbar}}
{{dcl begin}}
{{dcla|num=1|noexcept=c++11|constexpr=c++23|1=
bitset&amp; operator&amp;=( const bitset&amp; other );
}}
{{dcla|num=2|noexcept=c++11|constexpr=c++23|1=
bitset&amp; operator{{!}}=( const bitset&amp; other );
}}
{{dcla|num=3|noexcept=c++11|constexpr=c++23|1=
bitset&amp; operator^=( const bitset&amp; other );
}}
{{dcla|num=4|noexcept=c++11|constexpr=c++23|1=
bitset operator~() const;
}}
{{dcl end}}

Performs binary AND, OR, XOR and NOT.

@1@ Sets the bits to the result of binary AND on corresponding pairs of bits of {{c|*this}} and {{c|other}}.

@2@ Sets the bits to the result of binary OR on corresponding pairs of bits of {{c|*this}} and {{c|other}}.

@3@ Sets the bits to the result of binary XOR on corresponding pairs of bits of {{c|*this}} and {{c|other}}.

@4@ Returns a temporary copy of {{c|*this}} with all bits flipped (binary NOT).

Note that {{tt|1=&amp;=}}, {{tt|1={{!}}=}}, and {{tt|1=^=}} are only defined for bitsets of the same size {{tt|N}}.

===Parameters===
{{par begin}}
{{par|other|another bitset}}
{{par end}}

===Return value===
@1-3@ {{c|*this}}

@4@ {{c|std::bitset&lt;N&gt;(*this).flip()}}

===Example===
{{example
|code=
#include &lt;bitset&gt;
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    const std::string pattern_str{"1001"};
    std::bitset&lt;16&gt; pattern{pattern_str}, dest;
 
    for (std::size_t i = dest.size() / pattern_str.size(); i != 0; --i)
    {
        dest &lt;&lt;= pattern_str.size();
        dest {{!}}= pattern;
        std::cout &lt;&lt; dest &lt;&lt; " (i = " &lt;&lt; i &lt;&lt; ")\n";
    }

    std::cout &lt;&lt; ~dest &lt;&lt; " (~dest)\n";
}
|output=
0000000000001001 (i = 4)
0000000010011001 (i = 3)
0000100110011001 (i = 2)
1001100110011001 (i = 1)
0110011001100110 (~dest)
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/bitset/dsc operator_ltltgtgt}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
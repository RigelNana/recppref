{{cpp/utility/bitset/title|to_ullong}}
{{cpp/utility/bitset/navbar}}
{{ddcl|since=c++11|notes={{mark constexpr since c++23}}|
unsigned long long to_ullong() const
}}

Converts the contents of the bitset to an {{c|unsigned long long}} integer.

The first bit of the bitset corresponds to the least significant digit of the number and the last bit corresponds to the most significant digit.

===Parameters===
(none)

===Return value===
The converted integer

===Exceptions===
{{lc|std::overflow_error}} if the value can not be represented in {{c|unsigned long long}}.

===Example===
{{example
|code=
#include &lt;bitset&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;

int main()
{
    std::bitset&lt;std::numeric_limits&lt;unsigned long long&gt;::digits&gt; b
    (
        0x123456789abcdef0LL
    );

    std::cout &lt;&lt; b &lt;&lt; "  " &lt;&lt; std::hex &lt;&lt; b.to_ullong() &lt;&lt; '\n';
    b.flip();
    std::cout &lt;&lt; b &lt;&lt; "  " &lt;&lt; b.to_ullong() &lt;&lt; '\n';

    std::bitset&lt;std::numeric_limits&lt;unsigned long long&gt;::digits + 1&gt; q{0};
    try
    {
        (~q).to_ullong(); // throws
    }
    catch (const std::overflow_error&amp; ex)
    {
        std::cout &lt;&lt; "ex: " &lt;&lt; ex.what() &lt;&lt; '\n';
    }
}
|output=
0001001000110100010101100111100010011010101111001101111011110000  123456789abcdef0
1110110111001011101010011000011101100101010000110010000100001111  edcba9876543210f
ex: _Base_bitset::_M_do_to_ullong
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/bitset/dsc to_string}}
{{dsc inc|cpp/utility/bitset/dsc to_ulong}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
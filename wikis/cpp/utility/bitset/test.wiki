{{cpp/utility/bitset/title|test}}
{{cpp/utility/bitset/navbar}}
{{ddcla|constexpr=c++23|
bool test( std::size_t pos ) const;
}}

Returns the value of the bit at the position {{c|pos}} (counting from 0).

Unlike {{lc|operator[]}}, it performs a bounds check.

===Parameters===
{{par begin}}
{{par|pos|position of the bit to return (counting from 0)}}
{{par end}}

===Return value===
{{c|true}} if the requested bit is set, {{c|false}} otherwise.

===Exceptions===
Throws {{lc|std::out_of_range}} if {{c|pos}} does not correspond to a valid bit position.

===Example===
{{example
|code=
#include &lt;bit&gt;
#include &lt;bitset&gt;
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;

int main()
{
    std::bitset&lt;10&gt; b1("1111010000");
    
    std::size_t idx = 0;
    while (idx &lt; b1.size() &amp;&amp; !b1.test(idx))
        ++idx;
    
    assert(static_cast&lt;int&gt;(idx) == std::countr_zero(b1.to_ulong()));
    
    if (idx &lt; b1.size())
        std::cout &lt;&lt; "The first set bit is at index " &lt;&lt; idx &lt;&lt; '\n';
    else
        std::cout &lt;&lt; "no set bits\n";
    
    try
    {
        std::bitset&lt;0B10'1001'1010&gt; bad;
        if (bad.test(bad.size()))
            std::cout &lt;&lt; "Expect unexpected!\n";
    }
    catch (std::out_of_range const&amp; ex)
    {
        std::cout &lt;&lt; "Exception: " &lt;&lt; ex.what() &lt;&lt; '\n';
    }
}
|p=true
|output=
The first set bit is at index 4
Exception: bitset::test: __position (which is 666) &gt;= _Nb (which is 666)
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2250|std=C++98|before=the behavior was undefined if {{c|pos}} does&lt;br&gt;not correspond to a valid bit position|after=always throws an&lt;br&gt;exception in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/bitset/dsc operator at}}
{{dsc inc|cpp/numeric/dsc popcount}}
{{dsc inc|cpp/numeric/dsc has_single_bit}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
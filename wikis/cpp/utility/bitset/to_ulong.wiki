{{cpp/utility/bitset/title|to_ulong}}
{{cpp/utility/bitset/navbar}}
{{ddcl|notes={{mark constexpr since c++23}}|
unsigned long to_ulong() const
}}

Converts the contents of the bitset to an {{c|unsigned long}} integer.

The first bit of the bitset corresponds to the least significant digit of the number and the last bit corresponds to the most significant digit.

===Parameters===
(none)

===Return value===
The converted integer.

===Exceptions===
Throws {{lc|std::overflow_error}} if the value can not be represented in {{c|unsigned long}}.

===Example===
{{example
|code=
#include &lt;bitset&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;

int main()
{
    for (unsigned long i = 0; i &lt; 10; ++i)
    {
        std::bitset&lt;5&gt; b(i);
        std::bitset&lt;5&gt; b_inverted = ~b;
        std::cout &lt;&lt; i &lt;&lt; '\t' &lt;&lt; b &lt;&lt; '\t' &lt;&lt; b_inverted &lt;&lt; '\t'
                  &lt;&lt; b_inverted.to_ulong() &lt;&lt; '\n';
    }

    std::cout &lt;&lt; std::bitset&lt;32&gt;().to_string('-') &lt;&lt; '\n';

    try
    {
        std::bitset&lt;128&gt; x(42);
        std::cout &lt;&lt; x.to_ulong() &lt;&lt; '\n';
        x.flip();
        std::cout &lt;&lt; x.to_ulong() &lt;&lt; '\n'; // throws
    }
    catch (const std::overflow_error&amp; ex)
    {
        std::cout &lt;&lt; "ex: " &lt;&lt; ex.what() &lt;&lt; '\n';
    }
}
|p=true
|output=
0   00000   11111   31
1   00001   11110   30
2   00010   11101   29
3   00011   11100   28
4   00100   11011   27
5   00101   11010   26
6   00110   11001   25
7   00111   11000   24
8   01000   10111   23
9   01001   10110   22
--------------------------------
42
ex: bitset to_ulong overflow error
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/bitset/dsc to_string}}
{{dsc inc|cpp/utility/bitset/dsc to_ullong}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/utility/bitset/title|operator&lt;&lt;,&lt;&lt;{{=}},&gt;&gt;,&gt;&gt;{{=}}}}
{{cpp/utility/bitset/navbar}}
{{dcl begin}}
{{dcla|num=1|noexcept=c++11|constexpr=c++23|1=
bitset operator&lt;&lt;( std::size_t pos ) const;
}}
{{dcla|num=2|noexcept=c++11|constexpr=c++23|1=
bitset&amp; operator&lt;&lt;=( std::size_t pos );
}}
{{dcla|num=3|noexcept=c++11|constexpr=c++23|1=
bitset operator&gt;&gt;( std::size_t pos ) const;
}}
{{dcla|num=4|noexcept=c++11|constexpr=c++23|1=
bitset&amp; operator&gt;&gt;=( std::size_t pos );
}}
{{dcl end}}

Performs binary shift left (towards higher index positions) and binary shift right (towards lower index positions). Zeroes are shifted in, and bits that would go to an index out of range are dropped (ignored).

@1,2@ Performs binary shift left. The {{v|2}} version is destructive, i.e. performs the shift to the current object.

@3,4@ Performs binary shift right. The {{v|4}} version is destructive, i.e. performs the shift to the current object.

===Parameters===
{{par begin}}
{{par|pos|number of positions to shift the bits}}
{{par end}}

===Return value===
@1,3@ New bitset object containing the shifted bits.

@2,4@ {{c|*this}}

===Example===
{{example
|code=
#include &lt;bitset&gt;
#include &lt;iostream&gt;

int main()
{
    std::bitset&lt;8&gt; b{0b01110010};
    std::cout &lt;&lt; b &lt;&lt; " (initial value)\n";

    for (; b.any(); b &gt;&gt;= 1)
    {
        while (!b.test(0))
            b &gt;&gt;= 1;
        std::cout &lt;&lt; b &lt;&lt; '\n';
    }

    std::cout &lt;&lt; b &lt;&lt; " (final value)\n";
}
|output=
01110010 (initial value)
00111001
00000111
00000011
00000001
00000000 (final value)
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/dsc rotl}}
{{dsc inc|cpp/numeric/dsc rotr}}
{{dsc inc|cpp/utility/bitset/dsc operator_logic}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
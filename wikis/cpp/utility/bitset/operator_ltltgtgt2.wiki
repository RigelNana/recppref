{{title|1=operator&lt;&lt;,&gt;&gt;&lt;small&gt;(std::bitset)&lt;/small&gt;}}
{{cpp/utility/bitset/navbar}}
{{dcl begin}}
{{dcl header|bitset}}
{{dcl|num=1|1=
template&lt; class CharT, class Traits, std::size_t N &gt;
std::basic_ostream&lt;CharT, Traits&gt;&amp;
    operator&lt;&lt;( std::basic_ostream&lt;CharT, Traits&gt;&amp; os, const std::bitset&lt;N&gt;&amp; x );
}}
{{dcl|num=2|1=
template&lt; class CharT, class Traits, std::size_t N &gt;
std::basic_istream&lt;CharT, Traits&gt;&amp;
    operator&gt;&gt;( std::basic_istream&lt;CharT, Traits&gt;&amp; is, std::bitset&lt;N&gt;&amp; x );
}}
{{dcl end}}

Inserts or extracts a bitset from a character stream.

@1@ Writes the bitset {{c|x}} to the character stream {{c|os}} as if by first converting it to a {{c/core|std::basic_string&lt;CharT, Traits&gt;}} using {{lc|to_string()}}, and then writing it into {{c|os}} using the {{ltt|cpp/string/basic_string/operator ltltgtgt|operator&lt;&lt;}} (which is a {{named req|FormattedOutputFunction}} for strings).&lt;br&gt;&lt;!--
--&gt;The characters to use for ones and zeroes are obtained from the currently-imbued locale by calling {{c|std::use_facet&lt;std::ctype&lt;CharT&gt;&gt;(os.getloc()).widen()}} with {{c|'1'}} and {{c|'0'}} as arguments.

@2@ Behaves as a {{named req|FormattedInputFunction}}. After constructing and checking the sentry object, which may skip leading whitespace, extracts up to {{c|N}} characters from {{c|is}} and stores the characters in the bitset {{c|x}}.&lt;br&gt;&lt;!--

--&gt;Characters are extracted until either
* {{c|N}} characters have been read,
* end-of-file occurs in {{c|is}}, or
* the next character is neither {{c|is.widen('0')}} nor {{c|is.widen('1')}}.
If {{c|N &gt; 0}} and no characters are extracted, {{c|is.setstate(ios_base::failbit)}} is called.

===Parameters===
{{par begin}}
{{par|os|the character stream to write to}}
{{par|is|the character stream to read from}}
{{par|x|the bitset to be read or written}}
{{par end}}

===Return value===
@1@ {{c|os}}
@2@ {{c|is}}

===Example===
{{example
|code=
#include &lt;bitset&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
{
    std::string bit_string = "001101";
    std::istringstream bit_stream(bit_string);
    
    std::bitset&lt;3&gt; b1;
    bit_stream &gt;&gt; b1; // reads "001", stream still holds "101"
    std::cout &lt;&lt; b1 &lt;&lt; '\n';
    
    std::bitset&lt;8&gt; b2;
    bit_stream &gt;&gt; b2; // reads "101", populates the 8-bit set as "00000101"
    std::cout &lt;&lt; b2 &lt;&lt; '\n';
}
|output=
001
00000101
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=303|std=C++98|before=single-byte characters were extracted from&lt;br&gt;{{c|is}}, but {{tt|CharT}} can have multiple bytes|after=extracts {{tt|CharT}} and compares&lt;br&gt;it with widened {{c|'0'}} and {{c|'1'}}}}
{{dr list item|wg=lwg|dr=396|std=C++98|before=the content written by {{c/core|operator&lt;&lt;}} was locale-independent|after=writes widened {{c|'0'}}s and {{c|'1'}}s}}
{{dr list item|wg=lwg|dr=3199|std=C++98|before=extracting a {{tt|std::bitset&lt;0&gt;}} always sets {{tt|failbit}}|after=such extraction never sets {{tt|failbit}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/bitset/dsc operator_ltltgtgt}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
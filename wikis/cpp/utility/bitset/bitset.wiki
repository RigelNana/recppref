{{cpp/utility/bitset/title|bitset}}
{{cpp/utility/bitset/navbar}}
{{dcl begin}}
{{dcla|num=1|constexpr=c++11|noexcept=c++11|
bitset();
}}
{{dcl rev multi|num=2|until1=c++11|dcl1=
bitset( unsigned long val );
|dcl2=
constexpr bitset( unsigned long long val ) noexcept;
}}
{{dcla|num=3|constexpr=c++23|1=
template&lt; class CharT, class Traits, class Alloc &gt;
explicit bitset
    ( const std::basic_string&lt;CharT, Traits, Alloc&gt;&amp; str,
      typename std::basic_string
                   &lt;CharT, Traits, Alloc&gt;::size_type pos = 0,
      typename std::basic_string&lt;CharT, Traits, Alloc&gt;::size_type
          n = std::basic_string&lt;CharT, Traits, Alloc&gt;::npos,
      CharT zero = CharT('0'), CharT one = CharT('1') );
}}
{{dcla|num=4|since=c++26|1=
template&lt; class CharT, class Traits &gt;
constexpr explicit bitset
    ( std::basic_string_view&lt;CharT, Traits&gt; str,
      std::size_t pos = 0, std::size_t n = std::size_t(-1),
      CharT zero = CharT('0'), CharT one = CharT('1') );
}}
{{dcla|num=5|since=c++11|constexpr=c++23|1=
template&lt; class CharT &gt;
explicit bitset( const CharT* str, std::size_t n = std::size_t(-1),
                 CharT zero = CharT('0'), CharT one = CharT('1') );
}}
{{dcl end}}

Constructs a new bitset from one of several optional data sources:

@1@ Default constructor. Constructs a bitset with all bits set to zero.

@2@ Constructs a bitset from an unsigned integer {{c|val}}.
@@ Given the number of bits in the [[cpp/language/object#Object representation and value representation|value representation]] of {{rev inl|until=c++11|{{c/core|unsigned long}}}}{{rev inl|since=c++11|{{c/core|unsigned long long}}}} as {{c|S}}:
* The first (rightmost, least significant) {{c|std::min(S, N)}} bit positions are initialized with the corresponding bit values of {{c|val}}.
* If {{c|S}} is less than {{c|N}}, the remaining bit positions are initialized to zeroes.

@3@ Constructs a bitset using the characters in {{c|str}}. An optional starting position {{c|pos}} and length {{c|n}} can be provided, as well as characters denoting alternate values for set ({{c|one}}) and unset ({{c|zero}}) bits. {{tt|Traits::eq()}} is used to compare the character values.
@@ The effective length of the initializing string is {{c|std::min(n, str.size() - pos)}}.

@4@ Similar to {{v|3}}, but uses a {{lc|std::basic_string_view}} instead of a {{lc|std::basic_string}}.

@5@ Similar to {{v|3}}, but uses a {{c/core|const CharT*}} instead of a {{lc|std::basic_string}}.
{{rev begin}}
{{rev|until=c++26|
Equivalent to {{c multi|bitset(n {{==}} std::basic_string&lt;CharT&gt;::npos|          ? std::basic_string&lt;CharT&gt;(str)|          : std::basic_string&lt;CharT&gt;(str, n), 0, n, zero, one)}}.
}}
{{rev|since=c++26|
Equivalent to {{c multi|bitset(n {{==}} std::basic_string_view&lt;CharT&gt;::npos|          ? std::basic_string_view&lt;CharT&gt;(str)|          : std::basic_string_view&lt;CharT&gt;(str, n), 0, n, zero, one)}}.
}}
{{rev end}}

===Parameters===
{{par begin}}
{{par|val|number used to initialize the bitset}}
{{par|str|string used to initialize the bitset}}
{{par|pos|a starting offset into {{c|str}}}}
{{par|n|number of characters to use from {{c|str}}}}
{{par|zero|alternate character for unset bits in {{c|str}}}}
{{par|one|alternate character for set bits in {{c|str}}}}
{{par end}}

===Exceptions===
@3,4@ {{lc|std::out_of_range}} if {{c|pos &gt; str.size()}}, {{lc|std::invalid_argument}} if any character is not {{c|one}} or {{c|zero}}.

@5@ {{lc|std::invalid_argument}} if any character is not {{c|one}} or {{c|zero}}.

===Notes===
{{ftm begin}}
{{ftm|__cpp_lib_constexpr_bitset|std=C++23|value=202207L|A more constexpr {{tt|std::bitset}}, overloads {{vl|3,5}}}}
{{ftm|__cpp_lib_bitset|std=C++26|value=202306L|Interfacing {{tt|std::bitset}} with {{lc|std::string_view}}, {{vl|4}}}}
{{ftm end}}

===Example===
{{example
|code=
#include &lt;bitset&gt;
#include &lt;climits&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    // empty constructor (1)
    std::bitset&lt;8&gt; b1; // [0,0,0,0,0,0,0,0]
    
    // unsigned long long constructor (2)
    std::bitset&lt;8&gt; b2(42);          // [0,0,1,0,1,0,1,0]
    std::bitset&lt;70&gt; bl(ULLONG_MAX); // [0,0,0,0,0,0,1,1,1,...,1,1,1] in C++11
    std::bitset&lt;8&gt; bs(0xfff0);      // [1,1,1,1,0,0,0,0]
    
    // string constructor (3)
    std::string bit_string = "110010";
    std::bitset&lt;8&gt; b3(bit_string);       // [0,0,1,1,0,0,1,0]
    std::bitset&lt;8&gt; b4(bit_string, 2);    // [0,0,0,0,0,0,1,0]
    std::bitset&lt;8&gt; b5(bit_string, 2, 3); // [0,0,0,0,0,0,0,1]
    
    // string constructor using custom zero/one digits (3)
    std::string alpha_bit_string = "aBaaBBaB";
    std::bitset&lt;8&gt; b6(alpha_bit_string, 0, alpha_bit_string.size(),
                      'a', 'B');         // [0,1,0,0,1,1,0,1]
    
    // char* constructor using custom digits (5)
    std::bitset&lt;8&gt; b7("XXXXYYYY", 8, 'X', 'Y'); // [0,0,0,0,1,1,1,1]
    
    std::cout &lt;&lt;   "b1: " &lt;&lt; b1 &lt;&lt; "\nb2: " &lt;&lt; b2 &lt;&lt; "\nbl: " &lt;&lt; bl
              &lt;&lt; "\nbs: " &lt;&lt; bs &lt;&lt; "\nb3: " &lt;&lt; b3 &lt;&lt; "\nb4: " &lt;&lt; b4
              &lt;&lt; "\nb5: " &lt;&lt; b5 &lt;&lt; "\nb6: " &lt;&lt; b6 &lt;&lt; "\nb7: " &lt;&lt; b7 &lt;&lt; '\n';
}
|p=true
|output=
b1: 00000000
b2: 00101010
bl: 0000001111111111111111111111111111111111111111111111111111111111111111
bs: 11110000
b3: 00110010
b4: 00000010
b5: 00000001
b6: 01001101
b7: 00001111
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=396|std=C++98|before=the values of the zero and one characters for overload {{v|3}}&lt;br&gt;were {{c|0}} and {{c|1}} (which do not correspond to {{c|'0'}} and {{c|'1'}})|after=added parameters to provide&lt;br&gt;values for these characters}}
{{dr list item|wg=lwg|dr=457|std=C++98|before={{c|S}} was {{c|CHAR_BIT * sizeof(unsigned long)}}&lt;br&gt;for overload {{v|2}}, but {{c/core|unsigned long}} is not&lt;br&gt;guaranteed to use all its bits to represent its value|after=consider the number&lt;br&gt;of bits of the value&lt;br&gt;representation instead}}
{{dr list item|wg=lwg|dr=2250|std=C++98|before=the behavior was undefined if {{c|pos &gt; str.size()}} is {{c|true}}|after=always throws an&lt;br&gt;exception in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/bitset/dsc set}}
{{dsc inc|cpp/utility/bitset/dsc reset}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
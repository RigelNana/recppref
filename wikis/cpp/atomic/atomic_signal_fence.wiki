{{cpp/title | atomic_signal_fence }}
{{cpp/thread/navbar}}
{{dcl begin}}
{{dcl header | atomic }}
{{dcl | since=c++11 | 1=
extern "C" void atomic_signal_fence( std::memory_order order ) noexcept;
}}
{{dcl end}}

Establishes memory synchronization ordering of non-atomic and relaxed atomic accesses, as instructed by {{tt|order}}, between a thread and a signal handler executed on the same thread. This is equivalent to {{lc|std::atomic_thread_fence}}, except no CPU instructions for memory ordering are issued. Only reordering of the instructions by the compiler is suppressed as {{tt|order}} instructs. For example, a fence with release semantics prevents reads or writes from being moved past subsequent writes and a fence with acquire semantics prevents reads or writes from being moved ahead of preceding reads.

===Parameters===
{{par begin}}
{{par | order | the memory ordering executed by this fence}}
{{par end}} 

===Return value===
(none)

===Example===
{{example}} &lt;!-- adapt from http://stackoverflow.com/a/14594071/273767 --&gt;

===See also===
{{dsc begin}}
{{dsc inc | cpp/atomic/dsc memory_order}}
{{dsc inc | cpp/atomic/dsc atomic_thread_fence}}
{{dsc see c | c/atomic/atomic_signal_fence}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
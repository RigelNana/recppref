{{cpp/atomic/atomic/title|fetch_and}}
{{cpp/atomic/atomic/navbar}}
{{dcl begin}}
{{dcl h|member only of {{tt|atomic&lt;''Integral''}}{{sep}}{{tt|&gt;}} specializations}}
{{dcl|num=1|since=c++11|1=
T fetch_and( T arg, std::memory_order order =
                        std::memory_order_seq_cst ) noexcept;
}}
{{dcl|num=2|since=c++11|1=
T fetch_and( T arg, std::memory_order order =
                        std::memory_order_seq_cst ) volatile noexcept;
}}
{{dcl end}}

Atomically replaces the current value with the result of bitwise AND of the value and {{c|arg}}. The operation is read-modify-write operation. Memory is affected according to the value of {{c|order}}.

{{rrev|since=c++20|
It is deprecated if {{c|std::atomic&lt;T&gt;::is_always_lock_free}} is {{c|false}} and overload {{v|2}} participates in overload resolution.
}}

===Parameters===
{{par begin}}
{{par|arg|the other argument of bitwise AND}}
{{par|order|memory order constraints to enforce}}
{{par end}}

===Return value===
The value immediately preceding the effects of this function in the {{lsd|cpp/atomic/memory order#Modification order}} of {{c|*this}}.

===See also===
{{dsc begin}}
{{dsc inc|cpp/atomic/dsc atomic_fetch_and}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
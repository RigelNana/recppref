{{cpp/atomic/atomic/title|fetch_sub}}
{{cpp/atomic/atomic/navbar}}
{{dcl begin}}
{{dcl h|member only of {{tt|atomic&lt;''Integral''}}{{sep}}{{tt|&gt;}} specializations&lt;br&gt;{{rev inl|since=c++20|and {{tt|atomic&lt;''Floating''}}{{sep}}{{tt|&gt;}} specializations}}}}
{{dcl|num=1|since=c++11|1=
T fetch_sub( T arg, std::memory_order order =
                        std::memory_order_seq_cst ) noexcept;
}}
{{dcl|num=2|since=c++11|1=
T fetch_sub( T arg, std::memory_order order =
                        std::memory_order_seq_cst ) volatile noexcept;
}}
{{dcl h|member only of {{tt|atomic&lt;T*&gt;}} partial specialization}}
{{dcl|num=3|since=c++11|1=
T* fetch_sub( std::ptrdiff_t arg,
              std::memory_order order =
                  std::memory_order_seq_cst ) noexcept;
}}
{{dcl|num=4|since=c++11|1=
T* fetch_sub( std::ptrdiff_t arg,
              std::memory_order order =
                  std::memory_order_seq_cst ) volatile noexcept;
}}
{{dcl end}}

Atomically replaces the current value with the result of arithmetic subtraction of the value and {{c|arg}}. That is, it performs atomic post-decrement. The operation is read-modify-write operation. Memory is affected according to the value of {{c|order}}.

@1,2@ For signed integral types, arithmetic is defined to use twoâ€™s complement representation. There are no undefined results.
{{rrev|since=c++20|
For floating-point types, the [[cpp/numeric/fenv|floating-point environment]] in effect may be different from the calling thread's floating-point environment. The operation need not be conform to the corresponding {{lc|std::numeric_limits}} traits but is encouraged to do so. If the result is not a representable value for its type, the result is unspecified but the operation otherwise has no undefined behavior.
}}

@3,4@ The result may be an undefined address, but the operation otherwise has no undefined behavior.
@@ If {{tt|T}} is not a complete object type, the program is ill-formed.


{{rrev|since=c++20|
It is deprecated if {{c|std::atomic&lt;T&gt;::is_always_lock_free}} is {{c|false}} and overload {{v|2}} or {{v|4}} participates in overload resolution.
}}

===Parameters===
{{par begin}}
{{par|arg|the other argument of arithmetic subtraction}}
{{par|order|memory order constraints to enforce}}
{{par end}}

===Return value===
The value immediately preceding the effects of this function in the {{lsd|cpp/atomic/memory order#Modification order}} of {{c|*this}}.

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P0558R1|std=C++11|before=arithmetic permitted on pointers to (possibly cv-qualified) {{c/core|void}} or function|after=made ill-formed}}
{{dr list end}}
 
===See also===
{{dsc begin}}
{{dsc inc|cpp/atomic/dsc atomic_fetch_sub}}
{{dsc inc|cpp/atomic/atomic/dsc operator arith}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/atomic/atomic/title|fetch_max}}
{{cpp/atomic/atomic/navbar}}
{{dcl begin}}
{{dcl h|member only of {{tt|atomic&lt;''Integral''}}{{sep}}{{tt|&gt;}} specializations}}
{{dcl|num=1|since=c++26|1=
T fetch_max( T arg, std::memory_order order =
                        std::memory_order_seq_cst ) noexcept;
}}
{{dcl|num=2|since=c++26|1=
T fetch_max( T arg, std::memory_order order =
                        std::memory_order_seq_cst ) volatile noexcept;
}}
{{dcl h|member only of {{tt|atomic&lt;T*&gt;}} partial specialization}}
{{dcl|num=3|since=c++26|1=
T* fetch_max( T* arg, std::memory_order order =
                          std::memory_order_seq_cst ) noexcept;
}}
{{dcl|num=4|since=c++26|1=
T* fetch_max( T* arg, std::memory_order order =
                          std::memory_order_seq_cst ) volatile noexcept;
}}
{{dcl end}}

Atomically replaces the current value with the result of {{lc|std::max}} of the value and {{c|arg}}. That is, it performs atomic maximum operation. The operation is a read-modify-write operation. Memory is affected according to the value of {{c|order}}.

@3,4@ If the pointers point to different complete objects (or subobjects thereof), [[cpp/language/operator comparison#Built-in pointer relational comparison|pointer comparison]] does not establish a {{enwiki|strict weak ordering}}.

It is deprecated if {{c|std::atomic&lt;T&gt;::is_always_lock_free}} is {{c|false}} and overload {{v|2}} or {{v|4}} participates in overload resolution.

===Parameters===
{{par begin}}
{{par|arg|the other argument of {{lc|std::max}}}}
{{par|order|memory order constraints to enforce}}
{{par end}}

===Return value===
The value immediately preceding the effects of this function in the {{lsd|cpp/atomic/memory order#Modification order}} of {{c|*this}}.

===Notes===
{{feature test macro|__cpp_lib_atomic_min_max|Atomic minimum/maximum|value=202403L|std=C++26}}

===Example===
{{example}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
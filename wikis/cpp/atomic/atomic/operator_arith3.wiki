{{cpp/atomic/atomic/title|1=operator&amp;=,{{!}}=,^=}}
{{cpp/atomic/atomic/navbar}}
{{dcl begin}}
{{dcl h|member only of {{tt|atomic&lt;''Integral''}}{{sep}}{{tt|&gt;}} specializations}}
{{dcl|num=1|since=c++11|1=
T operator&amp;=( T arg ) noexcept;
}}
{{dcl|num=2|since=c++11|1=
T operator&amp;=( T arg ) volatile noexcept;
}}
{{dcl|num=3|since=c++11|1=
T operator{{!}}=( T arg ) noexcept;
}}
{{dcl|num=4|since=c++11|1=
T operator{{!}}=( T arg ) volatile noexcept;
}}
{{dcl|num=5|since=c++11|1=
T operator^=( T arg ) noexcept;
}}
{{dcl|num=6|since=c++11|1=
T operator^=( T arg ) volatile noexcept;
}}
{{dcl end}}

Atomically replaces the current value with the result of computation involving the previous value and {{c|arg}}. The operation is read-modify-write operation.
* {{c/core|1=operator&amp;=}} performs atomic bitwise and. Equivalent to {{c|return fetch_and(arg) &amp; arg;}}.
* {{c/core|1=operator{{!}}=}} performs atomic bitwise or. Equivalent to {{c|return fetch_or(arg) {{!}} arg;}}.
* {{c/core|1=operator^=}} performs atomic bitwise exclusive or. Equivalent to {{c|return fetch_xor(arg) ^ arg;}}.

{{rrev|since=c++20|
It is deprecated if {{c|std::atomic&lt;T&gt;::is_always_lock_free}} is {{c|false}} and any {{c/core|volatile}} overload participates in overload resolution.
}}

===Parameters===
{{par begin}}
{{par|arg|the argument for the arithmetic operation}}
{{par end}}

===Return value===
The resulting value (that is, the result of applying the corresponding binary operator to the value immediately preceding the effects of the corresponding member function in the {{lsd|cpp/atomic/memory order#Modification order}} of {{c|*this}}).

===Notes===
Unlike most compound assignment operators, the compound assignment operators for atomic types do not return a reference to their left-hand arguments. They return a copy of the stored value instead.

===See also===
{{dsc begin}}
{{dsc inc|cpp/atomic/atomic/dsc fetch_and}}
{{dsc inc|cpp/atomic/atomic/dsc fetch_or}}
{{dsc inc|cpp/atomic/atomic/dsc fetch_xor}}
{{dsc inc|cpp/atomic/atomic/dsc operator arith}}
{{dsc inc|cpp/atomic/atomic/dsc operator arith2}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
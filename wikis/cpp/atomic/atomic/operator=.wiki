{{cpp/atomic/atomic/title|operator{{=}}}}
{{cpp/atomic/atomic/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1=
T operator=( T desired ) noexcept;
}}
{{dcl|num=2|since=c++11|1=
T operator=( T desired ) volatile noexcept;
}}
{{dcl|num=3|since=c++11|1=
atomic&amp; operator=( const atomic&amp; ) = delete;
}}
{{dcl|num=4|since=c++11|1=
atomic&amp; operator=( const atomic&amp; ) volatile = delete;
}}
{{dcl end}}

@1,2@ Atomically assigns {{c|desired}} to the atomic variable. Equivalent to {{c|store(desired)}}.
{{rrev|since=c++20|
It is deprecated if {{c|std::atomic&lt;T&gt;::is_always_lock_free}} is {{c|false}} and overload {{v|2}} participates in overload resolution.
}}

@3,4@ Atomic variables are not {{named req|CopyAssignable}}.

===Parameters===
{{par begin}}
{{par|desired|value to assign}}
{{par end}}

===Return value===
@1,2@ {{c|desired}}

===Notes===
Unlike most assignment operators, the assignment operators for atomic types do not return a reference to their left-hand arguments. They return a copy of the stored value instead.

===See also===
{{dsc begin}}
{{dsc inc|cpp/atomic/atomic/dsc constructor}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
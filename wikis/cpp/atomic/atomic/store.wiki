{{cpp/atomic/atomic/title|store}}
{{cpp/atomic/atomic/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1=
void store( T desired, std::memory_order order =
                           std::memory_order_seq_cst ) noexcept;
}}
{{dcl|num=2|since=c++11|1=
void store( T desired, std::memory_order order =
                           std::memory_order_seq_cst ) volatile noexcept;
}}
{{dcl end}}

Atomically replaces the current value with {{c|desired}}. Memory is affected according to the value of {{c|order}}.

If {{c|order}} is one of {{c|std::memory_order_consume}}, {{c|std::memory_order_acquire}} and {{c|std::memory_order_acq_rel}}, the behavior is undefined.

{{rrev|since=c++20|
It is deprecated if {{c|std::atomic&lt;T&gt;::is_always_lock_free}} is {{c|false}} and overload {{v|2}} participates in overload resolution.
}}

===Parameters===
{{par begin}}
{{par|desired|the value to store into the atomic variable}}
{{par|order|memory order constraints to enforce}}
{{par end}}

===Return value===
(none)

===See also===
{{dsc begin}}
{{dsc inc|cpp/atomic/atomic/dsc operator{{=}}}}
{{dsc inc|cpp/atomic/dsc atomic_store}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
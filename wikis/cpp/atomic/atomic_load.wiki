{{cpp/title|atomic_load|atomic_load_explicit}}
{{cpp/thread/navbar}}
{{dcl begin}}
{{dcl header|atomic}}
{{dcl|num=1|since=c++11|
template&lt; class T &gt;
T atomic_load( const std::atomic&lt;T&gt;* obj ) noexcept;
}}
{{dcl|num=2|since=c++11|
template&lt; class T &gt;
T atomic_load( const volatile std::atomic&lt;T&gt;* obj ) noexcept;
}}
{{dcl|num=3|since=c++11|
template&lt; class T &gt;
T atomic_load_explicit( const std::atomic&lt;T&gt;* obj, 
                        std::memory_order order ) noexcept;
}}
{{dcl|num=4|since=c++11|
template&lt; class T &gt;
T atomic_load_explicit( const volatile std::atomic&lt;T&gt;* obj, 
                        std::memory_order order ) noexcept;
}}
{{dcl end}}

@1,2@ Atomically obtains the value pointed to by {{c|obj}} as if by {{c|obj-&gt;load()}}.

@3,4@ Atomically obtains the value pointed to by {{c|obj}} as if by {{c|obj-&gt;load(order)}}.
@@ If order is one of {{c|std::memory_order_release}} and {{c|std::memory_order_acq_rel}}, the behavior is undefined.

===Parameters===
{{par begin}}
{{par|obj|pointer to the atomic object to modify}}
{{par|order|the memory synchronization ordering for this operation}}
{{par end}} 

===Return value===
The value that is held by the atomic object pointed to by {{c|obj}}.

===See also===
{{dsc begin}}
{{dsc inc|cpp/atomic/atomic/dsc load|mem=std::atomic&lt;T&gt;}}
{{dsc inc|cpp/atomic/dsc atomic_store}}
{{dsc inc|cpp/atomic/dsc memory_order}}
{{dsc break}}
{{dsc tfun|cpp/memory/shared_ptr/atomic|title=std::atomic_load{{dsc small|(std::shared_ptr)}}
&lt;br&gt;std::atomic_load_explicit{{dsc small|(std::shared_ptr)}}|specializes atomic operations for {{lc|std::shared_ptr}}|notes={{mark life|deprecated=c++20|removed=c++26|br=yes}}}}
{{dsc see c|c/atomic/atomic_load|atomic_load|atomic_load_explicit}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
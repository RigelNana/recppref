{{cpp/title|kill_dependency}}
{{cpp/thread/navbar}}
{{ddcl|header=atomic|since=c++11|1=
template&lt; class T &gt;
T kill_dependency( T y ) noexcept;
}}

Informs the compiler that the dependency tree started by an {{lc|std::memory_order_consume}} atomic load operation does not extend past the return value of {{tt|std::kill_dependency}}; that is, the argument does not carry a dependency into the return value.

This may be used to avoid unnecessary {{lc|std::memory_order_acquire}} fences when the dependency chain leaves function scope (and the function does not have the {{attr|carries_dependency}} attribute).

===Parameters===
{{par begin}}
{{par|y|the expression whose return value is to be removed from a dependency tree}}
{{par end}}

===Return value===
Returns {{c|y}}, no longer a part of a dependency tree.

===Examples===
=====file1.cpp:=====
{{source|1=
struct Foo
{
    int* a;
    int* b;
};

std::atomic&lt;Foo*&gt; foo_head[10];
int foo_array[10][10];

// consume operation starts a dependency chain, which escapes this function
[[carries_dependency]] Foo* f(int i)
{
    return foo_head[i].load(memory_order_consume);
}

// the dependency chain enters this function through the right parameter and is
// killed before the function ends (so no extra acquire operation takes place)
int g(int* x, int* y [[carries_dependency]])
{
    return std::kill_dependency(foo_array[*x][*y]);
}
}}
=====file2.cpp:=====
{{source|1=
[[carries_dependency]] struct Foo* f(int i);
int g(int* x, int* y [[carries_dependency]]);

int c = 3;
void h(int i)
{
    Foo* p;
    p = f(i); // dependency chain started inside f continues into p without undue acquire
    do_something_with(g(&amp;c, p-&gt;a)); // p-&gt;b is not brought in from the cache
    do_something_with(g(p-&gt;a, &amp;c)); // left argument does not have the carries_dependency
                                    // attribute: memory acquire fence may be issued
                                    // p-&gt;b becomes visible before g() is entered
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/atomic/dsc memory_order}}
{{dsc see c|c/atomic/kill_dependency}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{title|ATOMIC_VAR_INIT}}
{{cpp/thread/navbar}}
{{dcl begin}}
{{dcl header | atomic}}
{{dcl | since=c++11 | deprecated=c++20 |
#define ATOMIC_VAR_INIT(value) /* implementation-defined */
}}
{{dcl end}}

Expands to an expression which can be used to initialize an {{lc|std::atomic}} object that can be initialized from {{tt|value}}. If the atomic object has static storage duration, this initialization is [[cpp/language/constant_initialization|constant initialization]].

===Notes===
Accessing the variable during initialization from another thread, even through an atomic operation, is a data race (it may happen if the address is immediately passed to another thread with a {{lc|std::memory_order_relaxed}} operation)

This macro is primarily provided for compatibility with C; it behaves the same as the constructor of {{lc|std::atomic}}.

===Example===
{{example
 | 
 | code=
#include &lt;atomic&gt;
#include &lt;iostream&gt;

int main()
{
    std::atomic&lt;int&gt; a = ATOMIC_VAR_INIT(1);
    // std::atomic&lt;int&gt; a(1);   // C++-only alternative
    std::cout &lt;&lt; "Initialized std::atomic&lt;int&gt; as: " &lt;&lt; a &lt;&lt; '\n';
}
 | output=
Initialized std::atomic&lt;int&gt; as: 1
}}

===See also===
{{dsc begin}}
{{dsc inc | cpp/atomic/dsc atomic_init}}
{{dsc inc | cpp/atomic/atomic/dsc constructor}}
{{dsc see c | c/atomic/ATOMIC_VAR_INIT}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
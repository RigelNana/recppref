{{cpp/atomic/atomic_ref/title|store}}
{{cpp/atomic/atomic_ref/navbar}}
{{ddcla|constexpr=c++26|1=
void store( value_type desired,
            std::memory_order order =
                std::memory_order_seq_cst ) const noexcept;
}}

Atomically replaces the current value of the referenced object with {{c|desired}}. Memory is affected according to the value of {{c|order}}.

{{cpp/enable if|{{c|std::is_const_v&lt;T&gt;}} is {{c|false}}}}.

If {{c|order}} is not {{c|std::memory_order_relaxed}}, {{c|std::memory_order_release}} or {{c|std::memory_order_seq_cst}}, the behavior is undefined.

===Parameters===
{{par begin}}
{{par|desired|the value to store into the referenced object}}
{{par|order|memory order constraints to enforce}}
{{par end}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3508|paper=P3323R1|std=C++20|before={{tt|store}} was meaningless for {{c/core|const T}}|after=constrained to accept only non-const {{tt|T}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/atomic/atomic_ref/dsc operator{{=}}}}
{{dsc end}}

{{langlinks|es|ja|zh}}
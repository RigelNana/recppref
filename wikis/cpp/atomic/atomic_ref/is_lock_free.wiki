{{cpp/atomic/atomic_ref/title|is_lock_free}}
{{cpp/atomic/atomic_ref/navbar}}
{{dcl begin}}
{{dcl|since=c++20| 
bool is_lock_free() const noexcept;
}}
{{dcl end}}

Checks whether the atomic operations on this object are lock-free.

===Parameters===
(none)

===Return value===
{{c|true}} if the atomic operations on this object are lock-free, {{c|false}} otherwise.

===Notes===
All atomic types except for {{lc|std::atomic_flag}} may be implemented using mutexes or other locking operations, rather than using the lock-free atomic CPU instructions. Atomic types are also allowed to be ''sometimes'' lock-free, e.g. if only aligned memory accesses are naturally atomic on a given architecture, misaligned objects of the same type have to use locks.

The C++ standard recommends (but does not require) that lock-free atomic operations are also address-free, that is, suitable for communication between processes using shared memory.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/atomic/atomic_ref/dsc is_always_lock_free}}
{{dsc end}}

{{langlinks|es|ja|zh}}
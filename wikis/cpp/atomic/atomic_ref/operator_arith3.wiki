{{cpp/atomic/atomic_ref/title|1=operator&amp;=,{{!}}=,^=}}
{{cpp/atomic/atomic_ref/navbar}}
{{dcl begin}}
{{dcl h|Provided only when {{tt|T}} is an integral type other than ''cv'' {{c/core|bool}}}}
{{dcl|num=1|since=c++20|1=
value_type operator&amp;=( value_type arg ) const noexcept;
}}
{{dcl|num=2|since=c++20|1=
value_type operator{{!}}=( value_type arg ) const noexcept;
}}
{{dcl|num=3|since=c++20|1=
value_type operator^=( value_type arg ) const noexcept;
}}
{{dcl end}}

Atomically replaces the current value of the referenced object with the result of computation involving the previous value and {{c|arg}}. These operations are read-modify-write operations.
* {{c/core|1=operator&amp;=}} performs atomic bitwise AND. Equivalent to {{c|return fetch_and(arg) &amp; arg;}}.
* {{c/core|1=operator!=}} performs atomic bitwise OR. Equivalent to {{c|return fetch_or(arg) {{!}} arg;}}.
* {{c/core|1=operator^=}} performs atomic bitwise XOR. Equivalent to {{c|return fetch_xor(arg) ^ arg;}}.

{{cpp/enable if|plural=yes|{{c/core|std::is_const_v&lt;T&gt;}} is {{c|false}}}}.

===Parameters===
{{par begin}}
{{par|arg|the argument for the arithmetic operation}}
{{par end}}

===Return value===
The resulting value (that is, the result of applying the corresponding binary operator to the value immediately preceding the effects of the corresponding member function).

===Notes===
Unlike most compound assignment operators, the compound assignment operators for {{tt|atomic_ref}} do not return a reference to their left-hand arguments. They return a copy of the stored value instead.

===Example===
{{example}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3508|paper=P3323R1|std=C++20|before=compound assignment operators were meaningless for {{c/core|const T}}|after=constrained to accept only non-const {{tt|T}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/atomic/atomic_ref/dsc fetch_and}}
{{dsc inc|cpp/atomic/atomic_ref/dsc fetch_or}}
{{dsc inc|cpp/atomic/atomic_ref/dsc fetch_xor}}
{{dsc inc|cpp/atomic/atomic_ref/dsc operator arith}}
{{dsc inc|cpp/atomic/atomic_ref/dsc operator arith2}}
{{dsc end}}

{{langlinks|es|ja|zh}}
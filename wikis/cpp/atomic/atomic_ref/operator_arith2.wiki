{{cpp/atomic/atomic_ref/title|1=operator+=,-=}}
{{cpp/atomic/atomic_ref/navbar}}
{{dcl begin}}
{{dcl h|Provided only when {{tt|T}} is an arithmetic type other than ''cv'' {{c/core|bool}} or a pointer-to-object type}}
{{dcla|num=1|constexpr=c++26|1=
value_type operator+=( difference_type arg ) const noexcept;
}}
{{dcla|num=2|constexpr=c++26|1=
value_type operator-=( difference_type arg ) const noexcept;
}}
{{dcl end}}

Atomically replaces the current value referenced by {{box|{{c/core|*}}{{rlpsi|/#ptr}}}} with the result of computation involving the previous value and {{c|arg}}. These operations are read-modify-write operations.
@1@ {{c/core|1=operator+=}} performs atomic addition. Equivalent to {{c|return fetch_add(arg) + arg;}}.
@2@ {{c/core|1=operator-=}} performs atomic subtraction. Equivalent to {{c|return fetch_sub(arg) - arg;}}.

* For signed integral types, arithmetic is defined to use twoâ€™s complement representation. There are no undefined results.
* For floating-point types, the [[cpp/numeric/fenv|floating-point environment]] in effect may be different from the calling thread's floating-point environment. The operation need not be conform to the corresponding {{lc|std::numeric_limits}} traits but is encouraged to do so. If the result is not a representable value for its type, the result is unspecified but the operation otherwise has no undefined behavior.
* For pointer types, the result may be an undefined address, but the operation otherwise has no undefined behavior.
** If {{c/core|std::remove_pointer_t&lt;T&gt;}} is not a complete object type, the program is ill-formed.

{{cpp/enable if|plural=yes|{{c/core|std::is_const_v&lt;T&gt;}} is {{c|false}}}}.

===Parameters===
{{par begin}}
{{par|arg|the argument for the arithmetic operation}}
{{par end}}

===Return value===
The resulting value (that is, the result of applying the corresponding binary operator to the value referenced by {{box|{{c/core|*}}{{rlpsi|/#ptr}}}} immediately preceding the effects of the corresponding member function).

===Notes===
Unlike most compound assignment operators, the compound assignment operators for {{tt|atomic_ref}} return a copy of the stored value instead of a reference to {{c|arg}}.

===Example===
{{example}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3508|paper=P3323R1|std=C++20|before=compound assignment operators were meaningless for {{c/core|const T}}|after=constrained to accept only non-const {{tt|T}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/atomic/atomic_ref/dsc fetch_add}}
{{dsc inc|cpp/atomic/atomic_ref/dsc fetch_sub}}
{{dsc inc|cpp/atomic/atomic_ref/dsc operator arith}}
{{dsc inc|cpp/atomic/atomic_ref/dsc operator arith3}}
{{dsc end}}

{{langlinks|es|ja|zh}}
{{cpp/atomic/atomic_ref/title|1=operator++,++{{small|(int)}},--,--{{small|(int)}}}}
{{cpp/atomic/atomic_ref/navbar}}
{{dcl begin}}
{{dcl h|Provided only when {{tt|T}} is an integral type other than ''cv'' {{c/core|bool}} or a pointer-to-object type}}
{{dcl|num=1|since=c++20|1=
value_type operator++() const noexcept;
}}
{{dcl|num=2|since=c++20|1=
value_type operator++( int ) const noexcept;
}}
{{dcl|num=3|since=c++20|1=
value_type operator--() const noexcept;
}}
{{dcl|num=4|since=c++20|1=
value_type operator--( int ) const noexcept;
}}
{{dcl end}}

Atomically increments or decrements the current value of the referenced object. These operations are read-modify-write operations. 

@1@ Performs atomic pre-increment. Equivalent to {{c|return fetch_add(1) + 1;}}.
@2@ Performs atomic post-increment. Equivalent to {{c|return fetch_add(1);}}.
@3@ Performs atomic pre-decrement. Equivalent to {{c|return fetch_sub(1) - 1;}}
@4@ Performs atomic post-decrement. Equivalent to {{c|return fetch_sub(1);}}.

* For signed integral types, arithmetic is defined to use twoâ€™s complement representation. There are no undefined results. 
* For pointer-to-object types, the result may be an undefined address, but the operations otherwise have no undefined behavior. The program is ill-formed if {{c/core|std::remove_pointer_t&lt;T&gt;}} is not a complete object type.

{{cpp/enable if|plural=yes|{{c/core|std::is_const_v&lt;T&gt;}} is {{c|false}}}}.

===Return value===
@1,3@ The value of the referenced object after the modification.
@2,4@ The value of the referenced object before the modification.

===Notes===
Unlike most pre-increment and pre-decrement operators, the pre-increment and pre-decrement operators for {{tt|atomic_ref}} do not return a reference to the modified object. They return a copy of the stored value instead.

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3508|paper=P3323R1|std=C++20|before=increment and decrement operators were meaningless for {{c/core|const T}}|after=constrained to accept only non-const {{tt|T}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/atomic/atomic_ref/dsc fetch_add}}
{{dsc inc|cpp/atomic/atomic_ref/dsc fetch_sub}}
{{dsc inc|cpp/atomic/atomic_ref/dsc operator arith2}}
{{dsc inc|cpp/atomic/atomic_ref/dsc operator arith3}}
{{dsc end}}

{{langlinks|es|ja|zh}}
{{cpp/title|atomic_flag_test_and_set|atomic_flag_test_and_set_explicit}}
{{cpp/thread/navbar}}
{{dcl begin}}
{{dcl header|atomic}}
{{dcl|num=1|since=c++11|
bool atomic_flag_test_and_set( volatile std::atomic_flag* obj ) noexcept;
}}
{{dcl|num=2|since=c++11|
bool atomic_flag_test_and_set( std::atomic_flag* obj ) noexcept;
}}
{{dcl|num=3|since=c++11|
bool atomic_flag_test_and_set_explicit( volatile std::atomic_flag* obj, 
                                        std::memory_order order ) noexcept;
}}
{{dcl|num=4|since=c++11|
bool atomic_flag_test_and_set_explicit( std::atomic_flag* obj, 
                                        std::memory_order order ) noexcept;
}}
{{dcl end}}

Atomically changes the state of a {{lc|std::atomic_flag}} pointed to by {{c|obj}} to set ({{c|true}}) and returns the value it held before.
@1,2@ The memory synchronization order is {{c|std::memory_order_seq_cst}}.
@3,4@ The memory synchronization order is {{c|order}}.

===Parameters===
{{par begin}}
{{par|obj|pointer to {{lc|std::atomic_flag}} to access}}
{{par|order|the memory synchronization order}}
{{par end}} 

===Return value===
The value previously held by the flag pointed to by {{c|obj}}.

===Notes===
{{tt|std::atomic_flag_test_and_set}} and {{tt|std::atomic_flag_test_and_set_explicit}} can be implemented as {{c|obj-&gt;test_and_set()}} and {{c|obj-&gt;test_and_set(order)}} respectively.

===Example===
{{example
|A spinlock mutex can be implemented in userspace using an {{tt|std::atomic_flag}}.
|code=
#include &lt;atomic&gt;
#include &lt;iostream&gt;
#include &lt;thread&gt;
#include &lt;vector&gt;

std::atomic_flag lock = ATOMIC_FLAG_INIT;

void f(int n)
{
    for (int cnt = 0; cnt &lt; 100; ++cnt)
    {
        while (std::atomic_flag_test_and_set_explicit(&amp;lock, std::memory_order_acquire))
            ; // spin until the lock is acquired
        std::cout &lt;&lt; "Output from thread " &lt;&lt; n &lt;&lt; '\n';
        std::atomic_flag_clear_explicit(&amp;lock, std::memory_order_release);
    }
}

int main()
{
    std::vector&lt;std::thread&gt; v;
    for (int n = 0; n &lt; 10; ++n)
        v.emplace_back(f, n);
    for (auto&amp; t : v)
        t.join();
}
|output=
Output from thread 2
Output from thread 6
Output from thread 7
...&lt;exactly 1000 lines&gt;...
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/atomic/dsc atomic_flag}}
{{dsc inc|cpp/atomic/dsc atomic_flag_clear}}
{{dsc inc|cpp/atomic/dsc memory_order}}
{{dsc see c|c/atomic/atomic_flag_test_and_set|atomic_flag_test_and_set|atomic_flag_test_and_set_explicit}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/numeric/op_sat|code=
{{example
|Can be previewed on [https://godbolt.org/z/G6o9ajz6d Compiler Explorer].
|code=
#include &lt;climits&gt;
#include &lt;limits&gt;
#include &lt;numeric&gt;

static_assert(CHAR_BIT == 8);
static_assert(UCHAR_MAX == 255);

int main()
{
    constexpr int a = std::add_sat(3, 4); // no saturation occurs, T = int
    static_assert(a == 7);

    constexpr unsigned char b = std::add_sat&lt;unsigned char&gt;(UCHAR_MAX, 4); // saturated
    static_assert(b == UCHAR_MAX);

    constexpr unsigned char c = std::add_sat(UCHAR_MAX, 4); // not saturated, T = int
        // add_sat(int, int) returns int tmp == 259,
        // then assignment truncates 259 % 256 == 3
    static_assert(c == 3);

//  unsigned char d = std::add_sat(252, c); // Error: inconsistent deductions for T

    constexpr unsigned char e = std::add_sat&lt;unsigned char&gt;(251, a); // saturated
    static_assert(e == UCHAR_MAX);
        // 251 is of type T = unsigned char, `a` is converted to unsigned char value;
        // might yield an int -&gt; unsigned char conversion warning for `a`

    constexpr signed char f = std::add_sat&lt;signed char&gt;(-123, -3); // not saturated
    static_assert(f == -126);

    constexpr signed char g = std::add_sat&lt;signed char&gt;(-123, -13); // saturated
    static_assert(g == std::numeric_limits&lt;signed char&gt;::min()); // g == -128
}
}}
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|rotl}}
{{cpp/utility/bit/navbar}}
{{ddcl|header=bit|since=c++20|
template&lt; class T &gt;
constexpr T rotl( T x, int s ) noexcept;
}}

Computes the result of bitwise left-rotating the value of {{c|x}} by {{c|s}} positions. This operation is also known as a left {{enwiki|Circular shift|circular shift}}.

Formally, let {{tt|N}} be {{c/core|std::numeric_limits&lt;T&gt;::digits}} and {{c|r}} be {{c|s % N}}.
* If {{c|r}} is {{c|0}}, returns {{c|x}};
* if {{c|r}} is positive, returns {{c|(x &lt;&lt; r) {{!}} (x &gt;&gt; (N - r))}};
* if {{c|r}} is negative, returns {{c|std::rotr(x, -r)}}.

{{cpp/enable if|{{tt|T}} is an unsigned integer type (that is, {{c/core|unsigned char}}, {{c/core|unsigned short}}, {{c/core|unsigned int}}, {{c/core|unsigned long}}, {{c/core|unsigned long long}}, or an extended unsigned integer type)}}.

===Parameters===
{{par begin}}
{{par|x|value of unsigned integer type}}
{{par|s|number of positions to shift}}
{{par end}}

===Return value===
The result of bitwise left-rotating {{c|x}} by {{c|s}} positions.

===Notes===
{{feature test macro|__cpp_lib_bitops|std=C++20|value=201907L|[[cpp/numeric#Bit manipulation (since C++20)|Bit operations]]}}

===Example===
{{example
|code=
#include &lt;bit&gt;
#include &lt;bitset&gt;
#include &lt;cstdint&gt;
#include &lt;iostream&gt;

int main()
{
    using bin = std::bitset&lt;8&gt;;
    const std::uint8_t x{0b00011101};
    std::cout &lt;&lt; bin(x) &lt;&lt; " &lt;- x\n";
    for (const int s : {0, 1, 4, 9, -1})
        std::cout &lt;&lt; bin(std::rotl(x, s)) &lt;&lt; " &lt;- rotl(x, " &lt;&lt; s &lt;&lt; ")\n";
}
|output=
00011101 &lt;- x
00011101 &lt;- rotl(x, 0)
00111010 &lt;- rotl(x, 1)
11010001 &lt;- rotl(x, 4)
00111010 &lt;- rotl(x, 9)
10001110 &lt;- rotl(x, -1)
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/dsc rotr}}
{{dsc inc|cpp/utility/bitset/dsc operator_ltltgtgt}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
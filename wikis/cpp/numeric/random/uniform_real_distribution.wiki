{{cpp/title|uniform_real_distribution}}
{{cpp/numeric/random/uniform_real_distribution/navbar}}
{{ddcl|header=random|since=c++11|1=
template&lt; class RealType = double &gt;
class uniform_real_distribution;
}}

Produces random floating-point values {{mathjax-or|\(\small x\)|x}}, uniformly distributed on the interval {{mathjax-or|\(\small [a, b)\)|[a, b)}}, that is, distributed according to the probability density function:

:{{mathjax-or|1=\({\small P(x{{!}}a,b) =} \frac{1}{b-a}\)|2=P(x{{!}}a,b) = {{mfrac|1|b − a}}}}.

{{tt|std::uniform_real_distribution}} satisfies all requirements of {{named req|RandomNumberDistribution}}.

===Template parameters===
{{par begin}}
{{cpp/numeric/random/param_list|RealType}}
{{par end}}

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|result_type}}{{mark c++11}}|{{c|RealType}}}}
{{cpp/numeric/random/param_type}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc constructor|uniform_real_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc reset|uniform_real_distribution}}

{{dsc h2|Generation}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator()|uniform_real_distribution}}

{{dsc h2|Characteristics}}
{{dsc inc|cpp/numeric/random/distribution/dsc params|uniform_real_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc param|uniform_real_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc min|uniform_real_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc max|uniform_real_distribution}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_cmp|uniform_real_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_ltltgtgt|uniform_real_distribution}}
{{dsc end}}

===Notes===
It is difficult to create a distribution over the closed interval {{mathjax-or|\(\small[a, b]\)|[a, b]}} from this distribution. Using {{c|std::nextafter(b, std::numeric_limits&lt;RealType&gt;::max())}} as the second parameter does not always work due to rounding error. 

Most existing implementations have a bug where they may occasionally return {{mathjax-or|\(\small b\)|b}} ([https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63176 GCC #63176] [https://llvm.org/bugs/show_bug.cgi?id=18767 LLVM #18767] [https://github.com/microsoft/STL/issues/1074 MSVC STL #1074]). This was originally only thought to happen when {{tt|RealType}} is {{c|float}} and when {{lwg|2524}} is present, but it has since been shown that [https://hal.science/hal-03282794v4/file/rand-in-range.pdf neither is required to trigger the bug].&lt;!--
https://stackoverflow.com/questions/25668600/is-1-0-a-valid-random-number--&gt;

===Example===
{{example
|Print 10 random numbers between 1 and 2.
|code=
#include &lt;iostream&gt;
#include &lt;random&gt;

int main()
{
    std::random_device rd;  // Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()
    std::uniform_real_distribution&lt;&gt; dis(1.0, 2.0);
    for (int n = 0; n &lt; 10; ++n)
        // Use dis to transform the random unsigned int generated by gen into a 
        // double in [1, 2). Each call to dis(gen) generates a new random double.
        std::cout &lt;&lt; dis(gen) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|p=true
|output=
1.80829 1.15391 1.18483 1.38969 1.36094 1.0648 1.97798 1.27984 1.68261 1.57326 
}}

===External links===
{{eli|[https://hal.science/hal-03282794v4/file/rand-in-range.pdf Drawing random floating-point numbers from an interval] &amp;mdash; &amp;copy; 2022. Frédéric Goualard, Université de Nantes.}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
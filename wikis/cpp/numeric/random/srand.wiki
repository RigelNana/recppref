{{cpp/title|srand}}
{{cpp/numeric/random/navbar}}
{{ddcl|header=cstdlib| 
void srand( unsigned seed );
}}

Seeds the pseudo-random number generator used by {{lc|std::rand()}} with the value {{tt|seed}}.

If {{lc|std::rand()}} is used before any calls to {{tt|srand()}}, {{lc|std::rand()}} behaves as if it was seeded with {{c|srand(1)}}.

Each time {{lc|std::rand()}} is seeded with the same {{tt|seed}}, it must produce the same sequence of values.

{{tt|srand()}} is not guaranteed to be thread-safe.

===Parameters===
{{par begin}}
{{par|seed|the seed value}}
{{par end}}

===Return value===
(none)

===Notes===
Generally speaking, the pseudo-random number generator should only be seeded once, before any calls to {{tt|rand()}}, at the start of the program.
It should not be repeatedly seeded, or reseeded every time you wish to generate a new batch of pseudo-random numbers.

Standard practice is to use the result of a call to {{c|std::time(0)}} as the seed.
However, {{lc|std::time}} returns a {{c|std::time_t}} value, and {{c|std::time_t}} is not guaranteed to be an integral type.
In practice, though, every major implementation defines {{c|std::time_t}} to be an integral type, and this is also what POSIX requires.

===Example===
{{example
|code=
#include &lt;cstdlib&gt;
#include &lt;ctime&gt;
#include &lt;iostream&gt;

int main() 
{
    std::srand(std::time(0)); // use current time as seed for random generator
    std::cout &lt;&lt; "Random value on [0, " &lt;&lt; RAND_MAX &lt;&lt; "]: " &lt;&lt; std::rand() &lt;&lt; '\n';
}
|p=true
|output=
Random value on [0, 2147483647]: 1373858591
}}

===See also===

{{dsc begin}}
{{dsc inc|cpp/numeric/random/dsc rand}}
{{dsc inc|cpp/numeric/random/dsc RAND_MAX}}
{{dsc inc|cpp/experimental/dsc reseed }}
{{dsc see c|c/numeric/random/srand}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
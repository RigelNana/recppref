{{cpp/title|uniform_random_bit_generator}}
{{cpp/numeric/random/navbar}}
{{ddcl|header=random|since=c++20|1=
template&lt; class G &gt;
concept uniform_random_bit_generator =
    std::invocable&lt;G&amp;&gt; &amp;&amp; std::unsigned_integral&lt;std::invoke_result_t&lt;G&amp;&gt;&gt; &amp;&amp;
    requires {
        { G::min() } -&gt; std::same_as&lt;std::invoke_result_t&lt;G&amp;&gt;&gt;;
        { G::max() } -&gt; std::same_as&lt;std::invoke_result_t&lt;G&amp;&gt;&gt;;
        requires std::bool_constant&lt;(G::min() &lt; G::max())&gt;::value;
    };
}}

The concept {{tt|uniform_random_bit_generator&lt;G&gt;}} specifies that {{tt|G}} is the type of a uniform random bit generator, that is, objects of type {{tt|G}} is a function object returning unsigned integer values such that each value in the range of possible results has (ideally) equal probability of being returned.

===Semantic requirements===
{{tt|uniform_random_bit_generator&lt;G&gt;}} is modeled only if, given any object {{tt|g}} of type {{tt|G}}:
* {{tt|g()}} is in the range {{closed range|G::min()|G::max()}},
* {{tt|g()}} has amortized constant complexity.

===Notes===
In order to satisfy the requirement {{c|std::bool_constant&lt;(G::min() &lt; G::max())&gt;::value}}, both {{c|G::min()}} and {{c|G::max()}} must be constant expressions, and the result of the comparison must be {{c|true}}.

{{langlinks|es|ja|zh}}
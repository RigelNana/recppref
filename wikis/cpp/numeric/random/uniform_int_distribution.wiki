{{cpp/title|uniform_int_distribution}}
{{cpp/numeric/random/uniform_int_distribution/navbar}}
{{ddcl|header=random|since=c++11|1=
template&lt; class IntType = int &gt;
class uniform_int_distribution;
}}

Produces random integer values {{mathjax-or|\(\small i\)|i}}, uniformly distributed on the closed interval {{mathjax-or|\(\small[a, b]\)|[a, b]}}, that is, distributed according to the discrete probability function

:{{mathjax-or|1=\({\small P(i{{!}}a,b) =}\frac{1}{b - a + 1}\)|2=P(i{{!}}a,b) = {{mfrac|1|b âˆ’ a + 1}}}}.

{{tt|std::uniform_int_distribution}} satisfies all requirements of {{named req|RandomNumberDistribution}}.

===Template parameters===
{{par begin}}
{{cpp/numeric/random/param_list|IntType}}
{{par end}}

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|result_type}} {{mark c++11}}|{{co|IntType}}}}
{{cpp/numeric/random/param_type}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc constructor|uniform_int_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc reset|uniform_int_distribution}}

{{dsc h2|Generation}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator()|uniform_int_distribution}}

{{dsc h2|Characteristics}}
{{dsc inc|cpp/numeric/random/distribution/dsc params|uniform_int_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc param|uniform_int_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc min|uniform_int_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc max|uniform_int_distribution}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_cmp|uniform_int_distribution|IntType}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_ltltgtgt|uniform_int_distribution}}
{{dsc end}}

===Example===
{{example
|This program simulates throwing 6-sided {{enwiki|dice}}.
|code=
#include &lt;iostream&gt;
#include &lt;random&gt;

int main()
{
    std::random_device rd;  // a seed source for the random number engine
    std::mt19937 gen(rd()); // mersenne_twister_engine seeded with rd()
    std::uniform_int_distribution&lt;&gt; distrib(1, 6);

    // Use distrib to transform the random unsigned int
    // generated by gen into an int in [1, 6]
    for (int n = 0; n != 10; ++n)
        std::cout &lt;&lt; distrib(gen) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|p=true
|output=
1 1 6 5 2 2 5 5 6 2
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
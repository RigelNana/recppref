{{cpp/title|poisson_distribution}}
{{cpp/numeric/random/poisson_distribution/navbar}}
{{ddcl|header=random|since=c++11|1=
template&lt; class IntType = int &gt;
class poisson_distribution;
}}

Produces random non-negative integer values {{math|i}}, distributed according to discrete probability function:

:{{mathjax-or|1=\(P(i {{!}} \mu) = \frac{e^{-\mu}\mu^i}{i!}\)|2=P(i{{!}}μ) = {{mfrac|e{{su|p=-μ}}·μ{{su|p=i}}|i!}}}}

The value obtained is the probability of exactly {{math|i}} occurrences of a random event if the expected, ''mean'' number of its occurrence under the same conditions (on the same time/space interval) is {{math|μ}}.

{{tt|std::poisson_distribution}} satisfies {{named req|RandomNumberDistribution}}.

===Template parameters===
{{par begin}}
{{cpp/numeric/random/param_list|IntType}}
{{par end}}

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|result_type}} {{mark c++11}}|{{tt|IntType}}}}
{{cpp/numeric/random/param_type}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc constructor|poisson_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc reset|poisson_distribution}}

{{dsc h2|Generation}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator()|poisson_distribution}}

{{dsc h2|Characteristics}}
{{dsc inc|cpp/numeric/random/poisson_distribution/dsc mean}}
{{dsc inc|cpp/numeric/random/distribution/dsc param|poisson_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc min|poisson_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc max|poisson_distribution}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_cmp|poisson_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_ltltgtgt|poisson_distribution}}
{{dsc end}}

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;random&gt;
#include &lt;string&gt;

int main()
{
    std::random_device rd;
    std::mt19937 gen(rd());

    // If an event occurs 4 times a minute on average, how
    // often is it that it occurs n times in one minute?
    std::poisson_distribution&lt;&gt; d(4);

    std::map&lt;int, int&gt; hist;
    for (int n = 0; n != 10000; ++n)
        ++hist[d(gen)];

    for (auto [x, y] : hist)
        std::cout &lt;&lt; std::hex &lt;&lt; x &lt;&lt; ' '
                  &lt;&lt; std::string(y / 100, '*') &lt;&lt; '\n';
}
|p=true
|output=
0 *
1 *******
2 **************
3 *******************
4 *******************
5 ***************
6 **********
7 *****
8 **
9 *
a
b
c
d
}}

===External links===
{{eli|[https://mathworld.wolfram.com/PoissonDistribution.html Weisstein, Eric W. "Poisson Distribution."] From MathWorld &amp;mdash; A Wolfram Web Resource.}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
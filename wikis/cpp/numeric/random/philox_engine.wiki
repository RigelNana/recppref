{{cpp/title|philox_engine}}
{{cpp/numeric/random/philox_engine/navbar}}
{{dcl begin}}
{{dcl header|random}}
{{dcl|since=c++26|
template&lt;
    class UIntType, std::size_t w, std::size_t n, std::size_t r,
    UIntType... consts
&gt;
class philox_engine;
}}
{{dcl end}}

{{tt|std::philox_engine}} is a counter-based random number engine.

===Template parameters===
{{par begin}}
{{cpp/numeric/random/param list|UIntType}}
{{par|w|the word size in bits}}
{{par|n|the word count}}
{{par|r|the round count}}
{{par|consts|the sequence of multipliers and round constants used for generating random numbers}}
{{par end}}

If any of the following values is not {{c|true}}, the program is ill-formed:
* {{c|1=sizeof...(consts) == n}}
* {{c|1=n == 2 {{!!}} n == 4 {{!!}} n == 8 {{!!}} n == 16}}
* {{c|0 &lt; r}}
* {{c|1=0 &lt; w &amp;&amp; w &lt;= std::numeric_limits&lt;UIntType&gt;::digits}}

===Generator properties===
In the following description, let {{mathjax-or|\(\scriptsize Q_i \)|Q{{su|b=i}}}} denote the {{c|i}}th element of sequence {{c|Q}}, where the subscript starts from zero.

The {{rlp|/#Random number engines|size}} of the states of {{tt|philox_engine}} is {{mathjax-or|\(\scriptsize O(n)\)|O(n)}}, each of them consists of four parts:
* A sequence {{c|X}} of {{c|n}} integer values, where each value is in {{range/core|{{c|0}}|{{box|{{math|{{tt|2}}{{su|p={{tt|w}}}}}}}}}}.
:* This sequence represents a large unsigned integer counter value {{mathjax-or|1=\(\scriptsize Z=\sum_{j=0}^{n-1} X \cdot 2^{wj} \)|2=Z=∑{{su|p=n-1|b=j=0}}X⋅2{{su|p=wj}}}} of {{mathjax-or|\(\scriptsize n \cdot w \)|n⋅w}} bits.
* A sequence {{c|K}} of {{c|n / 2}} keys of type {{tt|UIntType}}.
* A buffer {{c|Y}} of {{c|n}} produced values of type {{tt|UIntType}}.
* An index {{c|j}} in {{c|Y}} buffer.

The {{rlp|/#Random number engines|transition algorithm}} of {{tt|philox_engine}} ({{mathjax-or|\(\scriptsize TA(X_i) \)|TA(X{{su|b=i}})}}) is defined as follows:
* If {{c|j}} is not {{c|n - 1}}, increments {{c|j}} by {{c|1}}.&lt;ref&gt;In this case, the next generation algorithm call returns the next generated value in the buffer.&lt;/ref&gt;
* If {{c|j}} is {{c|n - 1}}, performs the following operations:&lt;ref&gt;In this case, the buffer is refreshed, and the next generation algorithm call returns the first value in the new buffer.&lt;/ref&gt;
# Generates a new sequence of {{c|n}} random values (see below) and stores them in {{c|Y}}.
# Increments the counter {{c|Z}} by {{c|1}}.
# Resets {{c|j}} to {{c|0}}.

The {{rlp|/#Random number engines|generation algorithm}} of {{tt|philox_engine}} is {{mathjax-or|1=\(\scriptsize GA(X_i)=Y_j \)|2=GA(X{{su|b=i}})=Y{{su|b=j}}}}.

&lt;references/&gt;

====Generating random values====
Random values are generated from the following parameters:
* the number of rounds {{c|r}}
* the current counter sequence {{c|X}}
* the key sequence {{c|K}}
* the multiplier sequence {{c|M}}
* the round constant sequence {{c|C}}

The sequences {{c|M}} and {{c|C}} are formed from the values from template parameter pack {{c|consts}}, which represents the {{mathjax-or|\(\scriptsize M_k \)|M{{su|b=k}}}} and {{mathjax-or|\(\scriptsize C_k \)|C{{su|b=k}}}} constants as {{tt|[}}{{mathjax-or|\(\scriptsize M_0 \)|M{{su|b=0}}}}{{tt|,}}{{nbspt}}{{mathjax-or|\(\scriptsize C_0 \)|C{{su|b=0}}}}{{tt|,}}{{nbspt}}{{mathjax-or|\(\scriptsize M_1 \)|M{{su|b=1}}}}{{tt|,}}{{nbspt}}{{mathjax-or|\(\scriptsize C_1 \)|C{{su|b=1}}}}{{tt|,... , ...,}}{{nbspt}}{{mathjax-or|\(\scriptsize M_{n/2-1} \)|M{{su|b=n/2-1}}}}{{tt|,}}{{nbspt}}{{mathjax-or|\(\scriptsize C_{n/2-1} \)|C{{su|b=n/2-1}}}}{{tt|]}}.

Random numbers are generated by the following process:
# Initializes the output sequence {{c|S}} with the elements of {{c|X}}.
# Updates the elements of {{c|S}} for {{c|r}} rounds.
# Replaces the values in the buffer {{c|Y}} with the values in {{c|S}}.

====Updating the output sequence====
For each round of update, an intermediate sequence {{c|V}} is initialized with the elements of {{c|S}} in a specified order:
{|class="wikitable" style="text-align: center;"
!{{nbsp}}{{c|n}}{{nbsp}}
!{{nbsp}}{{sep}}{{sep}}{{sep}}{{mathjax-or|\(\scriptsize V_0 \)|V{{su|b=0}}}}{{sep}}{{sep}}{{sep}}{{nbsp}}
!{{nbsp}}{{sep}}{{sep}}{{sep}}{{mathjax-or|\(\scriptsize V_1 \)|V{{su|b=1}}}}{{sep}}{{sep}}{{sep}}{{nbsp}}
!{{nbsp}}{{sep}}{{sep}}{{sep}}{{mathjax-or|\(\scriptsize V_2 \)|V{{su|b=2}}}}{{sep}}{{sep}}{{sep}}{{nbsp}}
!{{nbsp}}{{sep}}{{sep}}{{sep}}{{mathjax-or|\(\scriptsize V_3 \)|V{{su|b=3}}}}{{sep}}{{sep}}{{sep}}{{nbsp}}
!{{nbsp}}{{sep}}{{sep}}{{sep}}{{mathjax-or|\(\scriptsize V_4 \)|V{{su|b=4}}}}{{sep}}{{sep}}{{sep}}{{nbsp}}
!{{nbsp}}{{sep}}{{sep}}{{sep}}{{mathjax-or|\(\scriptsize V_5 \)|V{{su|b=5}}}}{{sep}}{{sep}}{{sep}}{{nbsp}}
!{{nbsp}}{{sep}}{{sep}}{{sep}}{{mathjax-or|\(\scriptsize V_6 \)|V{{su|b=6}}}}{{sep}}{{sep}}{{sep}}{{nbsp}}
!{{nbsp}}{{sep}}{{sep}}{{sep}}{{mathjax-or|\(\scriptsize V_7 \)|V{{su|b=7}}}}{{sep}}{{sep}}{{sep}}{{nbsp}}
!{{nbsp}}{{sep}}{{sep}}{{sep}}{{mathjax-or|\(\scriptsize V_8 \)|V{{su|b=8}}}}{{sep}}{{sep}}{{sep}}{{nbsp}}
!{{nbsp}}{{sep}}{{sep}}{{sep}}{{mathjax-or|\(\scriptsize V_9 \)|V{{su|b=9}}}}{{sep}}{{sep}}{{sep}}{{nbsp}}
!{{nbsp}}{{mathjax-or|\(\scriptsize V_{10} \)|V{{su|b=10}}}}{{nbsp}}
!{{nbsp}}{{mathjax-or|\(\scriptsize V_{11} \)|V{{su|b=11}}}}{{nbsp}}
!{{nbsp}}{{mathjax-or|\(\scriptsize V_{12} \)|V{{su|b=12}}}}{{nbsp}}
!{{nbsp}}{{mathjax-or|\(\scriptsize V_{13} \)|V{{su|b=13}}}}{{nbsp}}
!{{nbsp}}{{mathjax-or|\(\scriptsize V_{14} \)|V{{su|b=14}}}}{{nbsp}}
!{{nbsp}}{{mathjax-or|\(\scriptsize V_{15} \)|V{{su|b=15}}}}{{nbsp}}
|-
|{{c|2}}
|{{mathjax-or|\(\scriptsize S_0 \)|S{{su|b=0}}}}
|{{mathjax-or|\(\scriptsize S_1 \)|S{{su|b=1}}}}
|colspan=14 {{n/a}}
|-
|{{c|4}}
|{{mathjax-or|\(\scriptsize S_0 \)|S{{su|b=0}}}}
|{{mathjax-or|\(\scriptsize S_3 \)|S{{su|b=3}}}}
|{{mathjax-or|\(\scriptsize S_2 \)|S{{su|b=2}}}}
|{{mathjax-or|\(\scriptsize S_1 \)|S{{su|b=1}}}}
|colspan=12 {{n/a}}
|-
|{{c|8}}
|{{mathjax-or|\(\scriptsize S_2 \)|S{{su|b=2}}}}
|{{mathjax-or|\(\scriptsize S_1 \)|S{{su|b=1}}}}
|{{mathjax-or|\(\scriptsize S_4 \)|S{{su|b=4}}}}
|{{mathjax-or|\(\scriptsize S_7 \)|S{{su|b=7}}}}
|{{mathjax-or|\(\scriptsize S_6 \)|S{{su|b=6}}}}
|{{mathjax-or|\(\scriptsize S_5 \)|S{{su|b=5}}}}
|{{mathjax-or|\(\scriptsize S_0 \)|S{{su|b=0}}}}
|{{mathjax-or|\(\scriptsize S_3 \)|S{{su|b=3}}}}
|colspan=8 {{n/a}}
|-
|{{c|16}}
|{{mathjax-or|\(\scriptsize S_0 \)|S{{su|b=0}}}}
|{{mathjax-or|\(\scriptsize S_9 \)|S{{su|b=9}}}}
|{{mathjax-or|\(\scriptsize S_2 \)|S{{su|b=2}}}}
|{{mathjax-or|\(\scriptsize S_{13} \)|S{{su|b=13}}}}
|{{mathjax-or|\(\scriptsize S_6 \)|S{{su|b=6}}}}
|{{mathjax-or|\(\scriptsize S_{11} \)|S{{su|b=11}}}}
|{{mathjax-or|\(\scriptsize S_4 \)|S{{su|b=4}}}}
|{{mathjax-or|\(\scriptsize S_{15} \)|S{{su|b=15}}}}
|{{mathjax-or|\(\scriptsize S_{10} \)|S{{su|b=10}}}}
|{{mathjax-or|\(\scriptsize S_7 \)|S{{su|b=7}}}}
|{{mathjax-or|\(\scriptsize S_{12} \)|S{{su|b=12}}}}
|{{mathjax-or|\(\scriptsize S_3 \)|S{{su|b=3}}}}
|{{mathjax-or|\(\scriptsize S_{14} \)|S{{su|b=14}}}}
|{{mathjax-or|\(\scriptsize S_5 \)|S{{su|b=5}}}}
|{{mathjax-or|\(\scriptsize S_8 \)|S{{su|b=8}}}}
|{{mathjax-or|\(\scriptsize S_1 \)|S{{su|b=1}}}}
|}

Given the following operation notations:
* {{mathjax-or|\(\scriptsize \mathsf{xor} \)|xor}}, built-in [[cpp/language/operator arithmetic#Bitwise logic operators|bitwise XOR]].
* {{mathjax-or|\(\scriptsize \mathsf{mullo} \)|mullo}}, it calcuates the low half of modular multiplication and is defined as {{mathjax-or|1=\(\scriptsize \mathsf{mullo}(a,b,w)=(a \cdot b) \mod 2^w \)|2=mullo(a,b,w)=(a⋅b) mod 2{{su|p=w}}}}.
* {{mathjax-or|\(\scriptsize \mathsf{mulhi} \)|mulhi}}, it calcuates the high half of multiplication and is defined as {{mathjax-or|1=\(\scriptsize \mathsf{mulhi}(a,b,w)=\left\lfloor (a \cdot b)/2^w \right\rfloor \)|2=mulhi(a,b,w)=⌊(a⋅b)/2{{su|p=w}}⌋}}.

Let {{c|q}} be the current round number (starting from zero), for each integer {{c|k}} in {{range|0|n / 2}}, the elements of the output sequence {{c|S}} are updated as follows:
* {{mathjax-or|1=\(\scriptsize X_{2 \cdot k}=\mathsf{mullo}(V_{2 \cdot k+1},M_k,w) \)|2=X{{su|b=2⋅k}}=mullo(V{{su|b=2⋅k+1}},M{{su|b=k}},w)}}
* {{mathjax-or|1=\(\scriptsize X_{2 \cdot k+1}=\mathsf{mulhi}(V_{2 \cdot k+1},M_k,w)\ \mathsf{xor}\ ((K_k+q \cdot C_k) \mod 2^w)\ \mathsf{xor}\ V_{2 \cdot k} \)|2=X{{su|b=2⋅k+1}}=mulhi(V{{su|b=2⋅k+1}},M{{su|b=k}},w) xor ((K{{su|b=k}}+q⋅C{{su|b=k}}) mod 2{{su|p=w}}) xor V{{su|b=2⋅k}}}}

===Predefined specializations===
The following specializations define the random number engine with two commonly used parameter sets:
{{dsc begin}}
{{dsc header|random}}
{{dsc hitem|Type|Definition}}
{{dsc inc|cpp/numeric/random/dsc philox4x32}}
{{dsc inc|cpp/numeric/random/dsc philox4x64}}
{{dsc end}}

===Nested types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|result_type}}|{{tt|UIntType}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr {{lc|std::size_t}}}} word_size|{{c|w}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr {{lc|std::size_t}}}} word_count|{{c|n}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr {{lc|std::size_t}}}} round_count|{{c|r}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr {{c/core|std::array&lt;result_type, word_count / 2&gt;}}}} multipliers|the [[#Generating random values|multiplier sequence]] {{c|M}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr {{c/core|std::array&lt;result_type, word_count / 2&gt;}}}} round_consts|the [[#Generating random values|round constant sequence]] {{c|C}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr {{lc|std::uint_least32_t}}}} default_seed|{{c|20111115u}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc h2|Construction and Seeding}}
{{dsc inc|cpp/numeric/random/engine/dsc constructor|philox_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc seed|philox_engine}}
{{dsc inc|cpp/numeric/random/philox_engine/dsc set_counter}}

{{dsc h2|Generation}}
{{dsc inc|cpp/numeric/random/engine/dsc operator()|philox_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc discard|philox_engine}}

{{dsc h2|Characteristics}}
{{dsc inc|cpp/numeric/random/engine/dsc min|philox_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc max|philox_engine}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/engine/dsc operator cmp|philox_engine|since=c++26}}
{{dsc inc|cpp/numeric/random/engine/dsc operator ltltgtgt|philox_engine|since=c++26}}
{{dsc end}}

===Notes===
{{feature test macro|__cpp_lib_philox_engine|{{tt|std::philox_engine}}|value=202406L|std=C++26}}

===Example===
{{example}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|exponential_distribution}}
{{cpp/numeric/random/exponential_distribution/navbar}}
{{ddcl|header=random|since=c++11|1=
template&lt; class RealType = double &gt;
class exponential_distribution;
}}

Produces random non-negative floating-point values {{mathjax-or|\(\small x\)|x}}, distributed according to probability density function:

:{{mathjax-or|1=\(\small P(x{{!}}\lambda) = \lambda e^{-\lambda x}\)|2=P(x{{!}}位) = 位e{{su|p=-位x}}}}

The value obtained is the time/distance until the next random event if random events occur at constant rate {{mathjax-or|\(\small\lambda\)|位}} per unit of time/distance. For example, this distribution describes the time between the clicks of a Geiger counter or the distance between point mutations in a DNA strand.

This is the continuous counterpart of {{lc|std::geometric_distribution}}.

{{tt|std::exponential_distribution}} satisfies {{named req|RandomNumberDistribution}}.

===Template parameters===
{{par begin}}
{{cpp/numeric/random/param_list|RealType}}
{{par end}}

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|result_type}} {{mark c++11}}|{{co|RealType}}}}
{{cpp/numeric/random/param_type}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc constructor|exponential_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc reset|exponential_distribution}}

{{dsc h2|Generation}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator()|exponential_distribution}}

{{dsc h2|Characteristics}}
{{dsc inc|cpp/numeric/random/exponential_distribution/dsc lambda}}
{{dsc inc|cpp/numeric/random/distribution/dsc param|exponential_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc min|exponential_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc max|exponential_distribution}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_cmp|exponential_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_ltltgtgt|exponential_distribution}}
{{dsc end}}

===Notes===
Some implementations may occasionally return infinity if {{tt|RealType}} is {{c|float}}. This is {{lwg|2524}}.

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;random&gt;
#include &lt;string&gt;

int main()
{
    std::random_device rd;
    std::mt19937 gen(rd());

    // if particles decay once per second on average,
    // how much time, in seconds, until the next one?
    std::exponential_distribution&lt;&gt; d(1);
 
    std::map&lt;int, int&gt; hist;
    for (int n = 0; n != 10000; ++n)
        ++hist[2 * d(gen)];

    for (auto const&amp; [x, y] : hist)
        std::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(1)
                  &lt;&lt; x / 2.0 &lt;&lt; '-' &lt;&lt; (x + 1) / 2.0 &lt;&lt; ' '
                  &lt;&lt; std::string(y / 200, '*') &lt;&lt; '\n';
}
|p=true
|output=
0.0-0.5 *******************
0.5-1.0 ***********
1.0-1.5 *******
1.5-2.0 ****
2.0-2.5 **
2.5-3.0 *
3.0-3.5
3.5-4.0
}}

===External links===
{{eli|[https://mathworld.wolfram.com/ExponentialDistribution.html Weisstein, Eric W. "Exponential Distribution."] From MathWorld &amp;mdash; A Wolfram Web Resource.}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
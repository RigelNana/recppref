{{cpp/title|geometric_distribution}}
{{cpp/numeric/random/geometric_distribution/navbar}}
{{ddcl|header=random|since=c++11|1=
template&lt; class IntType = int &gt;
class geometric_distribution;
}}

Produces random non-negative integer values {{math|i}}, distributed according to discrete probability function:

:{{mathjax-or|1=\(P(i{{!}}p) = p \cdot (1-p)^i\)|2=P(i{{!}}p) = p · (1 − p){{su|p=i}}}}

The value represents the number of failures in a series of independent yes/no trials (each succeeds with probability p), before exactly 1 success occurs.

{{c|std::geometric_distribution&lt;&gt;(p)}} is exactly equivalent to {{c|std::negative_binomial_distribution&lt;&gt;(1, p)}}. It is also the discrete counterpart of {{lc|std::exponential_distribution}}.

{{tt|std::geometric_distribution}} satisfies {{named req|RandomNumberDistribution}}.

===Template parameters===
{{par begin}}
{{cpp/numeric/random/param_list|IntType}}
{{par end}}

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|result_type}} {{mark c++11}}|{{co|IntType}}}}
{{cpp/numeric/random/param_type}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc constructor|geometric_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc reset|geometric_distribution}}

{{dsc h2|Generation}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator()|geometric_distribution}}

{{dsc h2|Characteristics}}
{{dsc inc|cpp/numeric/random/geometric_distribution/dsc p}}
{{dsc inc|cpp/numeric/random/distribution/dsc param|geometric_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc min|geometric_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc max|geometric_distribution}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_cmp|geometric_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_ltltgtgt|geometric_distribution}}
{{dsc end}}

===Example===
{{example
|{{c|std::geometric_distribution&lt;&gt;(0.5)}} is the default and represents the number of coin tosses that are required to get heads.
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;random&gt;
#include &lt;string&gt;

int main()
{
    std::random_device rd;
    std::mt19937 gen(rd());

    std::geometric_distribution&lt;&gt; d;
        // same as 
        // std::negative_binomial_distribution&lt;&gt; d(1, 0.5):

    std::map&lt;int, int&gt; hist;
    for (int n = 0; n != 10000; ++n)
        ++hist[d(gen)];

    for (auto [x, y] : hist)
    {
        const char c = x &lt; 10 ? x + '0' : x - 10 + 'a';
        std::cout &lt;&lt; c &lt;&lt; ' ' &lt;&lt; std::string(y / 100, '*') &lt;&lt; '\n';
    }
}
|p=true
|output=
0 *************************************************
1 *************************
2 ************
3 ******
4 **
5 *
6
7
8
9
}}

===External links===
{{eli|[https://mathworld.wolfram.com/GeometricDistribution.html Weisstein, Eric W. "Geometric Distribution."] From MathWorld &amp;mdash; A Wolfram Web Resource.}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
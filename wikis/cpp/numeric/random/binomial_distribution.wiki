{{cpp/title|binomial_distribution}}
{{cpp/numeric/random/binomial_distribution/navbar}}
{{ddcl|header=random|since=c++11|1=
template&lt; class IntType = int &gt;
class binomial_distribution;
}}

Produces random non-negative integer values {{math|i}}, distributed according to discrete probability function:

:{{mathjax-or|1=\(P(i{{!}}t,p) = \binom{t}{i} \cdot p^i \cdot (1-p)^{t-i}\)|2=P(i{{!}}t,p) {{=}}{{mparen|(|)|t|i}} · p{{su|p=i}} · (1 − p){{su|p=t−i}}}}

The value obtained is the number of successes in a sequence of {{math|t}} yes/no experiments, each of which succeeds with probability {{math|p}}.

{{tt|std::binomial_distribution}} satisfies {{named req|RandomNumberDistribution}}.

===Template parameters===
{{par begin}}
{{cpp/numeric/random/param_list|IntType}}
{{par end}}

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|result_type}} {{mark c++11}}|{{co|IntType}}}}
{{cpp/numeric/random/param_type}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc constructor|binomial_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc reset|binomial_distribution}}

{{dsc h2|Generation}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator()|binomial_distribution}}

{{dsc h2|Characteristics}}
{{dsc inc|cpp/numeric/random/distribution/dsc params|binomial_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc param|binomial_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc min|binomial_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc max|binomial_distribution}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_cmp|binomial_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_ltltgtgt|binomial_distribution}}
{{dsc end}}

===Example===
{{example
|Plot of binomial distribution with probability of success of each trial exactly 0.5, illustrating the relationship with the pascal triangle (the probabilities that none, 1, 2, 3, or all four of the 4 trials will be successful in this case are 1:4:6:4:1).
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;random&gt;
#include &lt;string&gt;

int main()
{
    std::random_device rd;
    std::mt19937 gen(rd());
    // perform 4 trials, each succeeds 1 in 2 times
    std::binomial_distribution&lt;&gt; d(4, 0.5);

    std::map&lt;int, int&gt; hist;
    for (int n = 0; n != 10000; ++n)
        ++hist[d(gen)];

    for (auto const&amp; [x, y] : hist)
        std::cout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; std::string(y / 100, '*') &lt;&lt; '\n';
}
|p=true
|output=
0 ******
1 ************************
2 *************************************
3 *************************
4 ******
}}

===External links===
{{eli|[https://mathworld.wolfram.com/BinomialDistribution.html Weisstein, Eric W. "Binomial Distribution."] From MathWorld &amp;mdash; A Wolfram Web Resource.}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
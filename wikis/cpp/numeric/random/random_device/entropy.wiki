{{cpp/numeric/random/random_device/title|entropy}}
{{cpp/numeric/random/random_device/navbar}}
{{ddcl|since=c++11|1=
double entropy() const noexcept;
}}

Obtains an estimate of the random number device entropy, which is a floating-point value between {{math|0}} and {{math|log{{su|b=2}}(max()+1)}} (which is equal to {{c|std::numeric_limits&lt;unsigned int&gt;::digits}}). If the device has {{math|n}} states whose individual probabilities are {{math|P{{su|b=0}},...,P{{su|b=n-1}}}}, the device entropy {{math|S}} is defined as

{{math|1=S = −∑{{su|b=i=0|p=n-1}} P{{su|b=i}}log(P{{su|b=i}})}}

A deterministic random number generator (e.g. a pseudo-random engine) has entropy zero.

===Return value===
The value of the device entropy, or zero if not applicable.

===Notes===
This function is not fully implemented in some standard libraries. For example, [https://github.com/llvm-mirror/libcxx/blob/master/src/random.cpp#L174 LLVM libc++] prior to version 12 always returns zero even though the device is non-deterministic. In comparison, Microsoft Visual C++ implementation always returns {{c|32}}, and [https://github.com/boostorg/random/blob/master/src/random_device.cpp#L242 boost.random] returns {{c|10}}.

The entropy of the Linux kernel device {{tt|/dev/urandom}} may be obtained using [https://man7.org/linux/man-pages/man4/random.4.html {{tt|ioctl RNDGETENTCNT}}] &amp;mdash; that is what {{tt|std::random_device::entropy()}} in [https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/src/c%2B%2B11/random.cc#L188 GNU libstdc++] uses as of version 8.1.

===Example===
{{example
|Example output on one of the implementations
|code=
#include &lt;iostream&gt;
#include &lt;random&gt;

int main()
{
    std::random_device rd;
    std::cout &lt;&lt; rd.entropy() &lt;&lt; '\n';
}
|p=true
|output=
32
}}

{{langlinks|ja|zh}}
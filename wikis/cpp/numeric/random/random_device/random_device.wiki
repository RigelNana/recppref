{{cpp/numeric/random/random_device/title|random_device}}
{{cpp/numeric/random/random_device/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1=
random_device() : random_device( /*implementation-defined*/ ) {} 
}}
{{dcl|num=2|since=c++11|1=
explicit random_device( const std::string&amp; token );
}}
{{dcl|num=3|since=c++11|1=
random_device( const random_device&amp; ) = delete;
}}
{{dcl end}}

@1@ Default constructs a new {{lc|std::random_device}} object with an implementation-defined {{tt|token}}.
@2@ Constructs a new {{lc|std::random_device}} object, making use of the argument {{c|token}} in an implementation-defined manner. 
@3@ The copy constructor is deleted: {{tt|std::random_device}} is not copyable nor movable.

===Exceptions===
Throws an implementation-defined exception derived from {{lc|std::exception}} on failure.

===Notes===
The implementation in [https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/src/c%2B%2B11/random.cc#L319 libstdc++] expects {{tt|token}} to name the source of random bytes. Possible token values include {{c|"default"}},  {{c|"hw"}}, {{c|"rand_s"}}, {{c|"rdseed"}}, {{c|"rdrand"}}, {{c|"rdrnd"}}, {{c|"/dev/urandom"}}, {{c|"/dev/random"}}, {{c|"mt19937"}}, and integer string specifying the seed of the mt19937 engine. (Token values other than {{c|"default"}} are only valid for certain targets.)&lt;!-- This is documented in https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#iso.2011.specific, but it doesn't have a better anchor --&gt;

The implementation in [https://github.com/llvm/llvm-project/blob/main/libcxx/src/random.cpp#L124 libc++], when configured to use character device as the source, expects {{tt|token}} to be the name of a character device that produces random numbers when read from; otherwise it expects {{tt|token}} to be {{c|"/dev/urandom"}}.

Both libstdc++ and libc++ throw an exception if provided an unsupported token. [https://github.com/microsoft/STL/blob/c10ae01b4d9508eed9d5f059a120ee7223b6ac12/stl/inc/random#L5026 Microsoft's stdlib] ignores the token entirely.

===Example===
{{example
|Demonstrates commonly available types of {{tt|std::random_device}} on Linux.
|code=
#include &lt;iostream&gt;
#include &lt;random&gt;

void demo(std::random_device&amp;&amp; rd)
{
    static std::uniform_int_distribution&lt;int&gt; d(0, 9);
    for (int n = 0; n != 10; ++n)
        std::cout &lt;&lt; d(rd) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    // Note: How the supplied token is handled is implementation-defined!

    // Default token for random_device is usually /dev/urandom on Linux
    demo(std::random_device {});

    // Request /dev/random, blocks when entropy is empty
    // Works on libstdc++, ignored in msvc++, might throw on libc++ (as of Nov 2022)
    demo(std::random_device {"/dev/random"});

    // Request non-blocking /dev/urandom, ensures that RDRAND is not used
    // Works on libstdc++ and libc++, ignored in msvc++ (as of Nov 2022)
    demo(std::random_device {"/dev/urandom"});

    // Request "hw", will use hardware-based random generation like rdrand
    // Works on libstdc++, ignored in msvc++, throws on libc++ (as of Nov 2022)
    demo(std::random_device {"hw"});
}
|p=true
|output=
9 5 2 7 5 9 4 1 0 7 
4 7 6 5 1 5 5 1 8 6 
3 3 6 1 4 1 4 1 0 2 
4 6 3 9 1 9 4 0 9 3 
}}

=== Defect reports ===
{{dr list begin}}
{{dr list item|paper=P0935R0|std=C++11|before=default constructor was explicit|after=made implicit}}
{{dr list end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|rand}}
{{cpp/numeric/random/navbar}}
{{ddcl|header=cstdlib| 
int rand();
}}

Returns a pseudo-random integral value from the range {{closed range|0|RAND_MAX}}.

{{lc|std::srand()}} seeds the pseudo-random number generator used by {{tt|rand()}}.
If {{tt|rand()}} is used before any calls to {{lc|std::srand()}}, {{tt|rand()}} behaves as if it was seeded with {{c|std::srand(1)}}.

Each time {{tt|rand()}} is seeded with {{lc|std::srand()}}, it must produce the same sequence of values on successive calls.

Other functions in the standard library may call {{tt|rand}}. It is implementation-defined which functions do so.

It is implementation-defined whether {{tt|rand()}} is thread-safe.

===Return value===
Pseudo-random integral value between {{c|0}} and {{lc|RAND_MAX}}.

===Notes===
There are no guarantees as to the quality of the random sequence produced.
In the past, some implementations of {{tt|rand()}} have had serious shortcomings in the randomness, distribution and period of the sequence produced (in one well-known example, the low-order bit simply alternated between {{c|1}} and {{c|0}} between calls).

{{tt|rand()}} is not recommended for serious random-number generation needs. {{rev inl|since=c++11|It is recommended to use C++11's [[cpp/numeric/random|random number generation]] facilities to replace {{tt|rand()}}.}}

===Example===
{{example
|The function {{tt|bounded_rand()}} below is an adapted version of [https://pcg-random.org/posts/bounded-rands.html#debiased-modulo-once-javas-method Debiased Modulo (Once)].
|code=
#include &lt;cstdlib&gt;
#include &lt;ctime&gt;
#include &lt;initializer_list&gt;
#include &lt;iostream&gt;

unsigned bounded_rand(unsigned range)
{
    for (unsigned x, r;;)
        if (x = rand(), r = x % range, x - r &lt;= -range)
            return r;
}

int main() 
{
    std::srand(std::time({})); // use current time as seed for random generator
    const int random_value = std::rand();
    std::cout &lt;&lt; "Random value on [0, " &lt;&lt; RAND_MAX &lt;&lt; "]: " &lt;&lt; random_value &lt;&lt; '\n';

    for (const unsigned sides : {2, 4, 6, 8})
    {
        std::cout &lt;&lt; "Roll " &lt;&lt; sides &lt;&lt; "-sided die 8 times: ";
        for (int n = 8; n; --n)
            std::cout &lt;&lt; 1 + bounded_rand(sides) &lt;&lt; ' ';

        std::cout &lt;&lt; '\n';
    }
}
|p=true
|output=
Random value on [0, 2147483647]: 948298199
Roll 2-sided die 8 times: 2 2 1 2 1 1 2 2 
Roll 4-sided die 8 times: 1 3 4 2 1 3 3 1 
Roll 6-sided die 8 times: 3 2 1 6 6 4 4 2 
Roll 8-sided die 8 times: 4 5 6 6 3 6 1 2
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/dsc uniform_int_distribution}}
{{dsc inc|cpp/numeric/random/dsc srand}}
{{dsc inc|cpp/numeric/random/dsc RAND_MAX}}
{{dsc inc|cpp/experimental/dsc randint}}
{{dsc see c|c/numeric/random/rand}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
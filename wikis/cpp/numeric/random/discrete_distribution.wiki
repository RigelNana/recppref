{{cpp/title|discrete_distribution}}
{{cpp/numeric/random/discrete_distribution/navbar}}
{{ddcl|header=random|since=c++11|1=
template&lt; class IntType = int &gt;
class discrete_distribution;
}}

{{tt|std::discrete_distribution}} produces random integers on the interval {{range|0|n}}, where the probability of each individual integer {{tt|i}} is defined as {{math|w{{su|b=i}}/S}}, that is the ''weight'' of the {{tt|i}}th integer divided by the sum of all {{tt|n}} weights.

{{tt|std::discrete_distribution}} satisfies all requirements of {{named req|RandomNumberDistribution}}.

===Template parameters===
{{par begin}}
{{cpp/numeric/random/param_list|IntType}}
{{par end}}

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|result_type}} {{mark c++11}}|{{co|IntType}}}}
{{cpp/numeric/random/param_type}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc constructor|discrete_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc reset|discrete_distribution}}

{{dsc h2|Generation}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator()|discrete_distribution}}

{{dsc h2|Characteristics}}
{{dsc inc|cpp/numeric/random/discrete_distribution/dsc probabilities}}
{{dsc inc|cpp/numeric/random/distribution/dsc param|discrete_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc min|discrete_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc max|discrete_distribution}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_cmp|discrete_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_ltltgtgt|discrete_distribution}}
{{dsc end}}

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;random&gt;

int main()
{
    std::random_device rd;
    std::mt19937 gen(rd());
    std::discrete_distribution&lt;&gt; d({40, 10, 10, 40});
    std::map&lt;int, int&gt; map;

    for (int n = 0; n &lt; 1e4; ++n)
        ++map[d(gen)];

    for (const auto&amp; [num, count] : map)
        std::cout &lt;&lt; num &lt;&lt; " generated " &lt;&lt; std::setw(4) &lt;&lt; count &lt;&lt; " times\n";
}
|p=true
|output=
0 generated 4037 times
1 generated  962 times
2 generated 1030 times
3 generated 3971 times
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|mersenne_twister_engine}}
{{cpp/numeric/random/mersenne_twister_engine/navbar}}
{{dcl begin}}
{{dcl header|random}}
{{dcl|since=c++11|1=
template&lt;
    class UIntType, std::size_t w, std::size_t n, std::size_t m, std::size_t r,
    UIntType a, std::size_t u, UIntType d, std::size_t s,
    UIntType b, std::size_t t, UIntType c, std::size_t l, UIntType f
&gt; class mersenne_twister_engine;
}}
{{dcl end}}

{{tt|mersenne_twister_engine}} is a random number engine based on {{enwiki|Mersenne Twister}} algorithm. It produces high quality, but not cryptographically secure, unsigned integer random numbers of type {{tt|UIntType}} on the interval {{mathjax-or|\(\scriptsize {[0,2^w)}\)|[0, 2{{su|p=w}})}}.

===Template parameters===
{{par begin}}
{{cpp/numeric/random/param list|UIntType}}
{{par|w|the power of two that determines the range of values generated by the engine}}
{{par|n|the degree of recurrence}}
{{par|m|the middle word, an offset used in the recurrence relation defining the state}}
{{par|r|the number of bits of the lower bit-mask, also known as the twist value}}
{{par|a|the conditional xor-mask, i.e. the coefficients of the rational normal form twist matrix}}
{{par|u, d, s, b, t, c, l|the 1{{sup|st}} to 7{{sup|th}} components of the bit-scrambling (tempering) matrix}}
{{par|f|the initialization multiplier}}
{{par end}}

If any of the following restrictions is violated, the program is ill-formed:
* {{c|m}} is in {{closed range|1|n}}.
* The following expressions are all {{c|true}}:
:* {{c|1=w &gt;= 3}}
:* {{c|1=w &gt;= r}}
:* {{c|1=w &gt;= u}}
:* {{c|1=w &gt;= s}}
:* {{c|1=w &gt;= t}}
:* {{c|1=w &gt;= l}}
:* {{c|1=w &lt;= std::numeric_limits&lt;UIntType&gt;::digits}}
* Given {{c|(1u &lt;&lt; w) - 1u}} as {{c|w1}}, the following expressions are all {{c|true}}:
:* {{c|1=a &lt;= w1}}
:* {{c|1=b &lt;= w1}}
:* {{c|1=c &lt;= w1}}
:* {{c|1=d &lt;= w1}}
:* {{c|1=f &lt;= w1}}

===Generator properties===
The {{rlp|/#Random number engines|size}} of the states of {{tt|mersenne_twister_engine}} is {{c|n}}, each of them consists of a sequence {{c|X}} of {{c|n}} values of type {{tt|result_type}}. {{mathjax-or|\(\scriptsize X_j\)|X{{su|b=j}}}} stands for the {{mathjax-or|\(\scriptsize j\mod n\)|j mod n}}th value (starting from 0) of {{c|X}}.

Given the following bitwise operation notations:
* {{mathjax-or|\(\scriptsize \mathsf{bitand}\)|bitand}}, built-in [[cpp/language/operator arithmetic#Bitwise logic operators|bitwise AND]].
* {{mathjax-or|\(\scriptsize \mathsf{xor}\)|xor}}, built-in [[cpp/language/operator arithmetic#Bitwise logic operators|bitwise XOR]].
* {{mathjax-or|\(\scriptsize \mathsf{lshift}\)|lshift}}, built-in [[cpp/language/operator arithmetic#Bitwise shift operators|bitwise left-shift]].
* {{mathjax-or|\(\scriptsize \mathsf{rshift}\)|rshift}}, built-in [[cpp/language/operator arithmetic#Bitwise shift operators|bitwise right-shift]].

The {{rlp|/#Random number engines|transition algorithm}} of {{tt|mersenne_twister_engine}} ({{mathjax-or|\(\scriptsize TA(x_i)\)|TA(x{{su|b=i}})}}) is defined as follows:
# Concatenate the upper {{c|w - r}} bits of {{mathjax-or|\(\scriptsize X_{i-n}\)|X{{su|b=i-n}}}} with the lower {{c|r}} bits of {{mathjax-or|\(\scriptsize X_{i+1-n}\)|X{{su|b=i+1-n}}}} to obtain an unsigned integer value {{c|Y}}.
# Let {{c|y}} be {{mathjax-or|\(\scriptsize a \cdot (Y\ \mathsf{bitand}\ 1)\)|a·(Y bitand 1)}}, and set {{mathjax-or|\(\scriptsize X_i\)|X{{su|b=i}}}} to {{mathjax-or|\(\scriptsize X_{i+m−n}\ \mathsf{xor}\ (Y\ \mathsf{rshift}\ 1)\ \mathsf{xor}\ y\)|X{{su|b=i+m−n}} xor (Y rshift 1) xor y}}.

The {{rlp|/#Random number engines|generation algorithm}} of {{tt|mersenne_twister_engine}} ({{mathjax-or|\(\scriptsize GA(x_i)\)|GA(x{{su|b=i}})}}) is defined as follows:
# Let {{mathjax-or|\(\scriptsize z_1\)|z{{su|b=1}}}} be {{mathjax-or|\(\scriptsize X_i\ \mathsf{xor}\ ((X_i\ \mathsf{rshift}\ u)\ \mathsf{bitand}\ d)\)|X{{su|b=i}} xor ((X{{su|b=i}} rshift u) bitand d)}}.
# Let {{mathjax-or|\(\scriptsize z_2\)|z{{su|b=2}}}} be {{mathjax-or|\(\scriptsize z_1\ \mathsf{xor}\ (((z_1\ \mathsf{lshift}\ s)\mod 2^w)\ \mathsf{bitand}\ b)\)|X{{su|b=i}} xor (((X{{su|b=i}} lshift s) mod 2{{su|p=w}}) bitand b)}}.
# Let {{mathjax-or|\(\scriptsize z_3\)|z{{su|b=3}}}} be {{mathjax-or|\(\scriptsize z_2\ \mathsf{xor}\ (((z_2\ \mathsf{lshift}\ t)\mod 2^w)\ \mathsf{bitand}\ c)\)|X{{su|b=i}} xor (((X{{su|b=i}} lshift t) mod 2{{su|p=w}}) bitand c)}}.
# Let {{mathjax-or|\(\scriptsize z_4\)|z{{su|b=4}}}} be {{mathjax-or|\(\scriptsize z_3\ \mathsf{xor}\ (z_3\ \mathsf{rshift}\ l)\)|z{{su|b=3}} xor (z{{su|b=3}} rshift l)}}.
# Deliver {{mathjax-or|\(\scriptsize z_4\)|z{{su|b=4}}}} as the result (i.e. {{mathjax-or|1=\(\scriptsize GA(x_i)=z_4\)|2=GA(x{{su|b=i}})=z{{su|b=4}}}}).

===Predefined specializations===
The following specializations define the random number engine with two commonly used parameter sets:
{{dsc begin}}
{{dsc header|random}}
{{dsc hitem|Type|Definition}}
{{dsc inc|cpp/numeric/random/dsc mt19937}}
{{dsc inc|cpp/numeric/random/dsc mt19937_64}}
{{dsc end}}

===Nested types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|result_type}}|{{tt|UIntType}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr size_t}} word_size|{{c|w}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr size_t}} state_size|{{c|n}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr size_t}} shift_size|{{c|m}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr size_t}} mask_bits|{{c|r}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} xor_mask|{{c|a}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr size_t}} tempering_u|{{c|u}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} tempering_d|{{c|d}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr size_t}} tempering_s|{{c|s}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} tempering_b|{{c|b}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr size_t}} tempering_t|{{c|t}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} tempering_c|{{c|c}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr size_t}} tempering_l|{{c|l}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} initialization_multiplier|{{c|f}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} default_seed|{{c|5489u}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc h2|Construction and Seeding}}
{{dsc inc|cpp/numeric/random/engine/dsc constructor|mersenne_twister_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc seed|mersenne_twister_engine}}

{{dsc h2|Generation}}
{{dsc inc|cpp/numeric/random/engine/dsc operator()|mersenne_twister_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc discard|mersenne_twister_engine}}

{{dsc h2|Characteristics}}
{{dsc inc|cpp/numeric/random/engine/dsc min|mersenne_twister_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc max|mersenne_twister_engine}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/engine/dsc operator_cmp|mersenne_twister_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc operator_ltltgtgt|mersenne_twister_engine}}
{{dsc end}}

===Example===
{{example}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
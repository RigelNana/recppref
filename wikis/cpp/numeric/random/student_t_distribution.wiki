{{cpp/title|student_t_distribution}}
{{cpp/numeric/random/student_t_distribution/navbar}}
{{ddcl|header=random|since=c++11|1=
template&lt; class RealType = double &gt;
class student_t_distribution;
}}

Produces random floating-point values {{math|x}}, distributed according to probability density function:

:{{mathjax-or|1=\(p(x{{!}}n) = \frac{1}{\sqrt{n\pi} } \cdot \frac{\Gamma(\frac{n+1}{2})}{\Gamma(\frac{n}{2})} \cdot (1+\frac{x^2}{n})^{-\frac{n+1}{2} } \)|2=p(x{{!}}n) {{=}} {{mfrac|1|{{mrad|n&amp;pi;}}}} · {{mfrac|Γ({{mfrac|n+1|2}})|Γ({{mfrac|n|2}})}} · {{mparen|(|)|1+{{mfrac|x{{su|p=2}}|n}}|rows=3}} {{su|p=-{{mfrac|n+1|2}}}}}}

where {{math|n}} is known as the number of ''degrees of freedom''. This distribution is used when estimating the ''mean'' of an unknown normally distributed value given {{math|n + 1}} independent measurements, each with additive errors of unknown standard deviation, as in physical measurements. Or, alternatively, when estimating the unknown mean of a normal distribution with unknown standard deviation, given {{math|n + 1}} samples.

{{ttt|std::student_t_distribution}} satisfies all requirements of {{named req|RandomNumberDistribution}}.

===Template parameters===
{{par begin}}
{{cpp/numeric/random/param_list|RealType}}
{{par end}}

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|result_type}} {{mark c++11}}|{{co|RealType}}}}
{{cpp/numeric/random/param_type}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc constructor|student_t_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc reset|student_t_distribution}}

{{dsc h2|Generation}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator()|student_t_distribution}}

{{dsc h2|Characteristics}}
{{dsc inc|cpp/numeric/random/student_t_distribution/dsc n}}
{{dsc inc|cpp/numeric/random/distribution/dsc param|student_t_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc min|student_t_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc max|student_t_distribution}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_cmp|student_t_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_ltltgtgt|student_t_distribution}}
{{dsc end}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;random&gt;
#include &lt;vector&gt;

{{cpp/numeric/draw_vbars}}

int main()
{
    std::random_device rd{};
    std::mt19937 gen{rd()};

    std::student_t_distribution&lt;&gt; d{10.0f};

    const int norm = 10'000;
    const float cutoff = 0.000'3f;

    std::map&lt;int, int&gt; hist{};
    for (int n = 0; n != norm; ++n)
        ++hist[std::round(d(gen))];

    std::vector&lt;float&gt; bars;
    std::vector&lt;int&gt; indices;
    for (const auto&amp; [n, p] : hist)
        if (float x = p * (1.0f / norm); cutoff &lt; x)
        {
            bars.push_back(x);
            indices.push_back(n);
        }

    for (draw_vbars&lt;8, 5&gt;(bars); const int n : indices)
        std::cout &lt;&lt; " " &lt;&lt; std::setw(2) &lt;&lt; n &lt;&lt; "   ";
    std::cout &lt;&lt; '\n';
}
|p=true
|output=&lt;nowiki/&gt;
                        █████                               ┬ 0.3753
                        █████                               │
                  ▁▁▁▁▁ █████                               │
                  █████ █████ ▆▆▆▆▆                         │
                  █████ █████ █████                         │
                  █████ █████ █████                         │
            ▄▄▄▄▄ █████ █████ █████ ▄▄▄▄▄                   │
▁▁▁▁▁ ▃▃▃▃▃ █████ █████ █████ █████ █████ ▃▃▃▃▃ ▁▁▁▁▁ ▁▁▁▁▁ ┴ 0.0049
 -4    -3    -2    -1     0     1     2     3     4     5

}}

===External links===
{{eli|[https://mathworld.wolfram.com/Studentst-Distribution.html Weisstein, Eric W. "Student's t-Distribution."] From MathWorld &amp;mdash; A Wolfram Web Resource.}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
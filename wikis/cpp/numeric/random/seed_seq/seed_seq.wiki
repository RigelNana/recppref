{{cpp/numeric/random/seed_seq/title|seed_seq}}
{{cpp/numeric/random/seed_seq/navbar}}
{{dcl begin}}
{{dcla|num=1|since=c++11|
seed_seq() noexcept;
}}
{{dcl|num=2|since=c++11|1=
seed_seq( const seed_seq&amp; ) = delete;
}}
{{dcl|num=3|since=c++11|
template&lt; class InputIt &gt;
seed_seq( InputIt begin, InputIt end );
}}
{{dcla|num=4|since=c++11|
template&lt; class T &gt;
seed_seq( std::initializer_list&lt;T&gt; il );
}}
{{dcl end}}

@1@ The default constructor. After construction, {{rlpsi|/#v}} is empty.

@2@ The copy constructor is deleted: {{tt|std::seed_seq}} is not copyable.

@3@ Constructs a {{tt|std::seed_seq}} with the values in the range {{range|begin|end}}. Equivalent to default-initializing {{rlpsi|/#v}}{{sep}} followed by {{box|{{c/core|1=for (InputIt s = begin; s != end; ++s)}}&lt;br&gt;{{nbspt|4}}{{rlpsi|/#v}}{{sep}}{{c/core|.push_back(modseed(*s));}}}}, where {{mathjax-or|1=\(\scriptsize \mathrm{modseed}(x)=x \mod 2^{32} \)|2=mod_seed(x)=x mod 2{{su|p=32}}}}.
@@ If {{c/core|std::iterator_traits&lt;InputIt&gt;::value_type}} is not an integer type, the program is ill-formed.
@@ If {{tt|InputIt}} does not satisfy the requirements of {{named req|InputIterator}}, the behavior is undefined.

@4@ Equivalent to {{c|seed_seq(il.begin(), il.end())}}. This constructor enables [[cpp/language/list initialization|list-initialization]] from the list of seed values.
@@ {{cpp/enable if|{{tt|T}} is an integer type}}.

===Parameters===
{{par begin}}
{{par|begin, end|the pair of iterators denoting the initial seed sequence}}
{{par|il|the initial seed sequence}}
{{par end}}

===Example===
{{example
|code=
#include &lt;iterator&gt;
#include &lt;random&gt;
#include &lt;sstream&gt;

int main()
{
    std::seed_seq s1; // default-constructible
    std::seed_seq s2{1, 2, 3}; // can use list-initialization
    std::seed_seq s3 = {-1, 0, 1}; // another form of list-initialization
    int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::seed_seq s4(a, a + 10); // can use iterators
    std::istringstream buf("1 2 3 4 5"); 
    std::istream_iterator&lt;int&gt; beg(buf), end;
    std::seed_seq s5(beg, end); // even stream input iterators
}
|output=
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2180|std=C++11|before=all constructors were non-throwing|after=only overload {{vl|1}} is non-throwing}}
{{dr list item|wg=lwg|dr=3422|std=C++11|before=1. overload {{vl|1}} was not noexcept&lt;br&gt;2. overload {{vl|4}} was not constrainted|after=1.made noexcept&lt;br&gt;2. constrained}}
{{dr list end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
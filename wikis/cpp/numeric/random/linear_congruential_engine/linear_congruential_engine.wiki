{{cpp/numeric/random/linear_congruential_engine/title|linear_congruential_engine}}
{{cpp/numeric/random/linear_congruential_engine/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|
linear_congruential_engine() : linear_congruential_engine(default_seed) {}
}}
{{dcl|num=2|since=c++11|
explicit linear_congruential_engine( result_type value );
}}
{{dcla|num=3|since=c++11|
template&lt; class SeedSeq &gt;
explicit linear_congruential_engine( SeedSeq&amp; seq );
}}
{{dcl|num=4|since=c++11|notes={{mark implicit}}|
linear_congruential_engine( const linear_congruential_engine&amp; other );
}}
{{dcl end}}

Constructs the pseudo-random number engine.

@1@ The default constructor.
* If the default-constructed engine is of type {{tt|std::minstd_rand0}}, the 10000th consecutive invocation of it produces the value {{c|1043618065}}.
* If the default-constructed engine is of type {{tt|std::minstd_rand}}, the 10000th consecutive invocation of it produces the value {{c|399268537}}.

@2@ Constructs the engine with a seed value {{c|value}}. The engine's initial {{rlp|/#Generator properties|state}} is determined as follows:
* If {{c|1=c % m == 0}} and {{c|1=value % m == 0}} are both {{c|true}}, the state is {{c|1}}.
* Otherwise, the state is {{c|value % m}}.

@3@ Constructs the engine with a seed sequence {{c|seq}}. Given {{c|std::size_t(std::log2(m) / 32) + 1}} as {{c|k}}, the engine's initial {{rlp|/#Generator properties|state}} is determined as follows:
# Creates an invented array object {{c|a}} of length {{c|k + 3}}.
# Calls {{c|seq.generate(a + 0, a + k + 3)}}.
# Let {{c|S}} be {{mathjax-or|1=\(\scriptsize (\sum^{k-1}_{j=0} a_{j+3} \cdot 2^{32j}) \mod m \)|2=(∑{{su|p=k-1|b=j=0}} a{{su|b=j+3}}·2{{su|p=32j}}) mod m}}.
# If both {{c|1=c % m == 0}} and {{c|1=S == 0}} are {{c|true}}, sets the engine's state to {{c|1}}. Otherwise, sets the engine’s state to {{c|S}}.
@@ {{cpp/enable if|{{tt|SeedSeq}} meets the requirements of {{named req|SeedSequence}}}}.

@4@ The copy constructor. Upon construction, {{c|1=*this == other}} is {{c|true}}.

===Parameters===
{{par begin}}
{{par|value|seed value to use in the initialization of the internal state}}
{{par|seq|seed sequence to use in the initialization of the internal state}}
{{par end}}

===Complexity===
@1,2@ Constant.
@3@ Same as the complexity of the {{tt|seq.generate}} call.
@4@ Constant.

===Exceptions===
@3@ If {{tt|SeedSeq}} is not {{lc|std::seed_seq}}, throws the exceptions thrown by the {{tt|seq.generate}} call.

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2181|std=C++11|before=overload {{vl|3}} would not throw even if the {{tt|seq.generate}} call throws|after=propagates the exception}}
{{dr list item|paper=P0935R0|std=C++11|before=the default constructor was explicit|after=made implicit}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/engine/dsc seed|linear_congruential_engine}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
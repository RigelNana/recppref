{{cpp/title|random_device}}
{{cpp/numeric/random/random_device/navbar}}
{{ddcl|header=random|since=c++11|1=
class random_device;
}}

{{tt|std::random_device}} is a uniformly-distributed integer random number generator that produces non-deterministic random numbers.

{{tt|std::random_device}} may be implemented in terms of an implementation-defined pseudo-random number engine if a non-deterministic source (e.g. a hardware device) is not available to the implementation. In this case each {{ttt|std::random_device}} object may generate the same number sequence.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|result_type}} {{mark c++11}}|{{co|unsigned int}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc h2|Construction}}
{{dsc inc|cpp/numeric/random/engine/dsc constructor|random_device}}
{{dsc mem fun|nolink=true|operator{{=}}|notes={{mark|deleted}} {{mark c++11}}|the assignment operator is deleted}}

{{dsc h2|Generation}}
{{dsc inc|cpp/numeric/random/engine/dsc operator()|random_device}}

{{dsc h2|Characteristics}}
{{dsc inc|cpp/numeric/random/random_device/dsc entropy}}
{{dsc inc|cpp/numeric/random/engine/dsc min|random_device}}
{{dsc inc|cpp/numeric/random/engine/dsc max|random_device}}
{{dsc end}}

===Notes===
A notable implementation where {{ttt|std::random_device}} is deterministic in old versions of MinGW-w64 ([https://sourceforge.net/p/mingw-w64/bugs/338/ bug 338], fixed since GCC 9.2). The latest MinGW-w64 versions can be downloaded from [https://gcc-mcf.lhmouse.com/ GCC with the MCF thread model].

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;random&gt;
#include &lt;string&gt;

int main()
{
    std::random_device rd;
    std::map&lt;int, int&gt; hist;
    std::uniform_int_distribution&lt;int&gt; dist(0, 9);

    for (int n = 0; n != 20000; ++n)
        ++hist[dist(rd)]; // note: demo only: the performance of many
                          // implementations of random_device degrades sharply
                          // once the entropy pool is exhausted. For practical use
                          // random_device is generally only used to seed
                          // a PRNG such as mt19937

    for (auto [x, y] : hist)
        std::cout &lt;&lt; x &lt;&lt; " : " &lt;&lt; std::string(y / 100, '*') &lt;&lt; '\n';
}
|p=true
|output=
0 : ********************
1 : *******************
2 : ********************
3 : ********************
4 : ********************
5 : *******************
6 : ********************
7 : ********************
8 : *******************
9 : ********************
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
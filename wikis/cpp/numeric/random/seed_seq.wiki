{{cpp/title|seed_seq}}
{{cpp/numeric/random/seed_seq/navbar}}
{{ddcl|header=random|since=c++11|
class seed_seq;
}}

{{tt|std::seed_seq}} consumes a sequence of integer-valued data and produces a requested number of 32-bit unsigned integer values, based on the consumed data. The produced values are distributed over the entire 32-bit range even if the consumed values are close.

It provides a way to seed a large number of random number engines or to seed a generator that requires a lot of entropy, given a small seed or a poorly distributed initial seed sequence.

{{ttt|std::seed_seq}} meets the requirements of {{named req|SeedSequence}}.

===Nested types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|result_type}}|{{lc|std::uint_least32_t}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member|Description}}
{{dsc expos mem obj|spec={{c/core|std::vector&lt;result_type&gt;}}|v|id=v|the underlying seed sequence}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/numeric/random/seed_seq/seed_seq|constructs and seeds the {{tt|std::seed_seq}} object}}
{{dsc mem fun|nolink=true|operator{{=}}|notes={{cmark|deleted}}|{{tt|std::seed_seq}} is not assignable}}
{{dsc mem fun|cpp/numeric/random/seed_seq/generate|calculates the bias-eliminated, evenly distributed 32-bit values}}
{{dsc mem fun|cpp/numeric/random/seed_seq/size|obtains the number of stored 32-bit values}}
{{dsc mem fun|cpp/numeric/random/seed_seq/param|copies all stored 32-bit values}}
{{dsc end}}

===Example===
{{example
|code=
#include &lt;cstdint&gt;
#include &lt;iostream&gt;
#include &lt;random&gt;

int main()
{
    std::seed_seq seq{1, 2, 3, 4, 5};
    std::vector&lt;std::uint32_t&gt; seeds(10);
    seq.generate(seeds.begin(), seeds.end());
    for (std::uint32_t n : seeds)
        std::cout &lt;&lt; n &lt;&lt; '\n';
}
|p=true
|output=
4204997637
4246533866
1856049002
1129615051
690460811
1075771511
46783058
3904109078
1534123438
1495905678
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|linear_congruential_engine}}
{{cpp/numeric/random/linear_congruential_engine/navbar}}
{{dcl begin}}
{{dcl header|random}}
{{dcl|since=c++11|
template&lt;
    class UIntType,
    UIntType a,
    UIntType c,
    UIntType m
&gt; class linear_congruential_engine;
}}
{{dcl end}}

{{tt|linear_congruential_engine}} is a random number engine based on {{enwiki|Linear congruential generator}} (LCG).

===Template parameters===
{{par begin}}
{{cpp/numeric/random/param_list|UIntType}}
{{par|a|the multiplier term}}
{{par|c|the increment term}}
{{par|m|the modulus term}}
{{par end}}

When {{c|m}} is not zero, if {{c|1=a &gt;= m}} or {{c|1=c &gt;= m}} is {{c|true}}, the program is ill-formed.

===Generator properties===
The {{rlp|/#Random number engines|size}} of the states of {{tt|linear_congruential_engine}} is {{c|1}}, each of them consists of a single integer.

The actual modulus {{mathjax-or|\(\scriptsize m_0\)|m{{su|b=0}}}} is defined as follows:
* If {{c|m}} is not zero, {{mathjax-or|\(\scriptsize m_0\)|m{{su|b=0}}}} is {{c|m}}.
* If {{c|m}} is zero, {{mathjax-or|\(\scriptsize m_0\)|m{{su|b=0}}}} is the value of {{c|std::numeric_limits&lt;result_type&gt;::max()}} plus {{c|1}} (which means {{mathjax-or|\(\scriptsize m_0\)|m{{su|b=0}}}} need not be representable as {{tt|result_type}}).

The {{rlp|/#Random number engines|transition algorithm}} of {{tt|linear_congruential_engine}} is {{mathjax-or|1=\(\scriptsize TA(x_i) = (a \cdot x_i + c)\mod m_0\)|2=TA(x{{su|b=i}}) = (a·x{{su|b=i}}+c) mod m{{su|b=0}}}}.

The {{rlp|/#Random number engines|generation algorithm}} of {{tt|linear_congruential_engine}} is {{mathjax-or|1=\(\scriptsize GA(x_i) = (a \cdot x_i + c)\mod m_0\)|2=GA(x{{su|b=i}}) = (a·x{{su|b=i}}+c) mod m{{su|b=0}}}}.

The pseudo-random number generated with the current state is also the successor state.

===Predefined specializations===
The following specializations define the random number engine with two commonly used parameter sets:
{{dsc begin}}
{{dsc header|random}}
{{dsc hitem|Type|Definition}}
{{dsc inc|cpp/numeric/random/dsc minstd_rand0}}
{{dsc inc|cpp/numeric/random/dsc minstd_rand}}
{{dsc end}}

===Nested types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|result_type}}|{{tt|UIntType}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} multiplier|{{c|a}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} increment|{{c|c}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} modulus|{{c|m}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} default_seed|{{c|1u}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc h2|Construction and Seeding}}
{{dsc inc|cpp/numeric/random/engine/dsc constructor|linear_congruential_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc seed|linear_congruential_engine}}

{{dsc h2|Generation}}
{{dsc inc|cpp/numeric/random/engine/dsc operator()|linear_congruential_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc discard|linear_congruential_engine}}

{{dsc h2|Characteristics}}
{{dsc inc|cpp/numeric/random/engine/dsc min|linear_congruential_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc max|linear_congruential_engine}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/engine/dsc operator cmp|linear_congruential_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc operator ltltgtgt|linear_congruential_engine}}
{{dsc end}}

===Example===
{{example}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/numeric/random/subtract_with_carry_engine/title|subtract_with_carry_engine}}
{{cpp/numeric/random/subtract_with_carry_engine/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|
subtract_with_carry_engine() : subtract_with_carry_engine(0u) {}
}}
{{dcl|num=2|since=c++11|
explicit subtract_with_carry_engine( result_type value );
}}
{{dcl|num=3|since=c++11|
template&lt; class SeedSeq &gt;
explicit subtract_with_carry_engine( SeedSeq&amp; seq );
}}
{{dcl|num=4|since=c++11|notes={{mark implicit}}|
subtract_with_carry_engine( const subtract_with_carry_engine&amp; other );
}}
{{dcl end}}

Constructs the pseudo-random number engine.

@1@ The default constructor.
* If the default-constructed engine is of type {{tt|std::ranlux24_base}}, the 10000th consecutive invocation of it produces the value {{c|7937952}}.
* If the default-constructed engine is of type {{tt|std::ranlux48_base}}, the 10000th consecutive invocation of it produces the value {{c|61839128582725}}.

@2@ Constructs the engine with a seed value {{c|value}}. The sequence {{c|X}} of the engine's initial {{rlp|/#Generator properties|state}} is determined as follows:
# Constructs a {{c/core|std::linear_congruential_engine&lt;std::uint_least32_t, 40014u, 0u, 2147483563u&gt;}} object {{c|e}} with argument {{c|1=value == 0u ? default_seed : static_cast&lt;std::uint_least32_t&gt;(value % 2147483563u)}}.
# Let {{c|n}} be {{c|std::size_t(w / 32) + 1}}.
# Sets the values of {{mathjax-or|\(\scriptsize X_{-r} \)|X{{su|b=-r}}}}, ..., {{mathjax-or|\(\scriptsize X_{-1} \)|X{{su|b=-1}}}}, in that order. Each value {{mathjax-or|\(\scriptsize X_i \)|X{{su|b=i}}}} is set as specified below:
:# Successively calls {{c|e}} for {{c|n}} times, the return values are denoted as {{mathjax-or|\(\scriptsize z_0 \)|z{{su|b=0}}}} ... {{mathjax-or|\(\scriptsize z_{n-1} \)|z{{su|b=n-1}}}}.
:# Sets {{mathjax-or|\(\scriptsize X_i \)|X{{su|b=i}}}} to {{mathjax-or|1=\(\scriptsize (\sum^{n-1}_{j=0} z_j \cdot 2^{32j}) \mod m \)|2=(∑{{su|p=n-1|b=j=0}} z{{su|b=j}}·2{{su|p=32j}}) mod m}}.
@@ If {{mathjax-or|\(\scriptsize X_{-1} \)|X{{su|b=-1}}}} is {{c|0}}, sets the carry value {{c|c}} of the engine's initial state to {{c|1}}. Otherwise, sets {{c|c}} to {{c|0}}.

@3@ Constructs the engine with a seed sequence {{c|seq}}. Given {{c|std::size_t(w / 32) + 1}} as {{c|k}}, the sequence {{c|X}} of the engine's initial {{rlp|/#Generator properties|state}} is determined as follows:
# Creates an invented array object {{c|a}} of length {{c|r * k}}.
# Calls {{c|seq.generate(a + 0, a + r * k)}}.
# For each integer {{c|i}} in {{closed range|-r|-1}}, sets {{mathjax-or|\(\scriptsize X_{i} \)|X{{su|b=i}}}} to {{mathjax-or|1=\(\scriptsize (\sum^{k-1}_{j=0} a_{k(i+r)+j} \cdot 2^{32j}) \mod m \)|2=(∑{{su|p=k-1|b=j=0}} a{{su|b=k(i+r)+j}}·2{{su|p=32j}}) mod m}}.
@@ If {{mathjax-or|\(\scriptsize X_{-1} \)|X{{su|b=-1}}}} is {{c|0}}, sets the carry value {{c|c}} of the engine's initial state to {{c|1}}. Otherwise, sets {{c|c}} to {{c|0}}.
@@ {{cpp/enable if|{{tt|SeedSeq}} meets the requirements of {{named req|SeedSequence}}}}.

@4@ The copy constructor. Upon construction, {{c|1=*this == other}} is {{c|true}}.

===Parameters===
{{par begin}}
{{par|value|seed value to use in the initialization of the internal state}}
{{par|seq|seed sequence to use in the initialization of the internal state}}
{{par end}}

===Complexity===
@1,2@ {{c|(std::size_t(w / 32) + 1) * r}} invocations of {{c|e}}.
@3@ Same as the complexity of the {{tt|seq.generate}} call.
@4@ {{mathjax-or|\(\scriptsize O(r) \)|O(r)}}.

===Exceptions===
@3@ If {{tt|SeedSeq}} is not {{lc|std::seed_seq}}, throws the exceptions thrown by the {{tt|seq.generate}} call.

===Example===
{{example
|{{todo|demos for overloads (2-4) required}}
|code=
#include &lt;cassert&gt;
#include &lt;random&gt;

int main()
{
    std::ranlux24_base gen24; // overload (1)
    std::ranlux48_base gen48; // overload (1)
    gen24.discard(10000 - 1);
    gen48.discard(10000 - 1);
    assert(gen24() == 7'937'952);
    assert(gen48() == 61'839'128'582'725);
}
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2181|std=C++11|before=overload {{vl|3}} would not throw even if the {{tt|seq.generate}} call throws|after=propagates the exception}}
{{dr list item|wg=lwg|dr=3809|std=C++11|before={{c|e}} could not be constructed if {{tt|result_type}} is {{lc|std::uint16_t}}|after=can be constructed in this case}}
{{dr list item|wg=lwg|dr=4014|std=C++11|before=the resolution of {{lwg|3809}} caused the initial seed&lt;br&gt;of the intermediate {{lc|std::linear_congruential_engine}}&lt;br&gt;to have a different type from the engine's {{tt|result_type}}|after=truncates and&lt;br&gt;converts {{c|value}}}}
{{dr list item|paper=P0935R0|std=C++11|before=the default constructor was explicit|after=made implicit}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/engine/dsc seed|subtract_with_carry_engine}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
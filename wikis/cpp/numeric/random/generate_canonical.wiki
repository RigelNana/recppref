{{cpp/title|generate_canonical}}
{{cpp/numeric/random/navbar}}
{{ddcl|header=random|since=c++11|
template&lt; class RealType, std::size_t Bits, class Generator &gt;
RealType generate_canonical( Generator&amp; g );
}}

Generates a random floating point number in range {{range|0|1}}. 

To generate enough entropy, {{c|generate_canonical()}} will call {{c|g()}} exactly {{mathjax-or|\(\small k\)|k}} times, where {{mathjax-or|1= \(\small k = \max(1, \lceil \frac{b}{\log_2 R} \rceil)\) |2=k = max(1, ⌈ b / log{{su|b=2}} R ⌉)}} and

* {{c|1=b = std::min(Bits, std::size_t {std::numeric_limits&lt;RealType&gt;::digits})}},
* {{c|1=R = g.max() - g.min() + 1}}.

===Parameters===
{{par begin}}
{{par|g|generator to use to acquire entropy}}
{{par end}}

===Return value===
Floating point value in range {{range|0|1}}.

===Exceptions===
None except from those thrown by {{c|g}}.

===Notes===
Some existing implementations have a bug where they may occasionally return {{c|1.0}} if {{tt|RealType}} is {{c/core|float}}  [https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63176 GCC #63176] [https://bugs.llvm.org/show_bug.cgi?id=18767 LLVM #18767] [https://github.com/microsoft/STL/issues/1074 MSVC STL #1074]. This is {{lwg|2524}}&lt;!--
http://stackoverflow.com/questions/25668600/is-1-0-a-valid-random-number--&gt;.

===Example===
{{example
|Produce random numbers with 10 bits of randomness: this may produce only {{c|k * R}} distinct values.
|code=
#include &lt;iostream&gt;
#include &lt;random&gt;

int main()
{
    std::random_device rd;
    std::mt19937 gen(rd());
    for (int n = 0; n &lt; 10; ++n)
        std::cout &lt;&lt; std::generate_canonical&lt;double, 10&gt;(gen) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|p=true
|output=
0.208143 0.824147 0.0278604 0.343183 0.0173263 0.864057 0.647037 0.539467 0.0583497 0.609219 
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/dsc uniform_real_distribution}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
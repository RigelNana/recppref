{{cpp/title|gcd}}
{{cpp/numeric/navbar}}
{{ddcl|header=numeric|since=c++17|
template&lt; class M, class N &gt;
constexpr std::common_type_t&lt;M, N&gt; gcd( M m, N n );
}}

Computes the {{enwiki|greatest common divisor}} of the integers {{c|m}} and {{c|n}}.

If either {{tt|M}} or {{tt|N}} is not an integer type, or if either is (possibly cv-qualified) {{c|bool}}, the program is ill-formed.

If either {{c|{{!}}m{{!}}}} or {{c|{{!}}n{{!}}}} is not representable as a value of type {{c|std::common_type_t&lt;M, N&gt;}}, the behavior is undefined.

===Parameters===
{{par begin}}
{{par|m, n|integer values}}
{{par end}}

===Return value===
If both {{c|m}} and {{c|n}} are zero, returns zero. Otherwise, returns the greatest common divisor of {{c|{{!}}m{{!}}}} and {{c|{{!}}n{{!}}}}.

===Exceptions===
Throws no exceptions.

===Notes===
{{feature test macro|__cpp_lib_gcd_lcm|{{tt|std::gcd}}, {{lc|std::lcm}}|value=201606L|std=C++17}}

===Example===
{{example|code=
#include &lt;numeric&gt;

int main()
{
    constexpr int p{2 * 2 * 3};
    constexpr int q{2 * 3 * 3};
    static_assert(2 * 3 == std::gcd(p, q));

    static_assert(std::gcd( 6,  10) == 2);
    static_assert(std::gcd( 6, -10) == 2);
    static_assert(std::gcd(-6, -10) == 2);

    static_assert(std::gcd( 24, 0) == 24);
    static_assert(std::gcd(-24, 0) == 24);
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/dsc lcm}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
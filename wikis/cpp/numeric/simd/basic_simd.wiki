{{cpp/title|basic_simd|simd}}
{{cpp/numeric/simd/basic_simd/navbar}}
{{dcl begin}}
{{dcl header|simd}}
{{dcl|num=1|since=c++26|1=
template&lt; class T, class Abi = /*native-abi*/&lt;T&gt; &gt;
class basic_simd;
}}
{{dcl|num=2|since=c++26|1=
template&lt; class T, /*simd-size-type*/ N = /*simd-size-v*/&lt;T, /*native-abi*/&lt;T&gt;&gt; &gt;
using simd = basic_simd&lt;T, /*deduce-abi-t*/&lt;T, N&gt;&gt;;
}}
{{dcl end}}

@1@ {{tt|std::basic_simd}} specialization is a data-parallel type. The default ABI tag is determined by the implementation at compile-time.
@2@ {{tt|std::simd}} is an alias template that allows users to specify the width to a certain size. The default width is determined by the implementation at compile-time.

Every specialization of {{tt|basic_simd}} is a complete type. The specialization is
* ''enabled'', if {{tt|T}} is a {{rlp|/#vectorizable types|vectorizable type}}, and there exists value {{tt|M}} in the range {{closed range|1|64}} such that {{tt|Abi}} is {{box/core|{{lti|cpp/numeric/simd#deduce-abi-t|deduce-abi-t}}{{c/core|&lt;T, M&gt;}}}},
* otherwise ''disabled'', if {{tt|T}} is not a vectorizable type,
* otherwise, it is implementation-defined if such specialization is enabled.

If {{c/core|basic_simd&lt;T, Abi&gt;}} is disabled, the specialization has all deleted default constructor, destructor, copy constructor, and copy assignment. In addition, only the member types below are present.

If {{c/core|basic_simd&lt;T, Abi&gt;}} is enabled, {{c/core|basic_simd&lt;T, Abi&gt;}} is {{named req|TriviallyCopyable}}.

===Template parameters===
{{par begin}}
{{par|T|element type; a vectorizable type}}
{{par|Abi|{{rlp|/#ABI tags|tag type}} used to determine the width and storage}}
{{par|N|the width of the data-parallel type; the number of elements}}
{{par end}}

===Member types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|value_type}}|{{tt|T}}}}
{{dsc|{{tt|mask_type}}|{{c/core|std::basic_simd_mask&lt;sizeof(T), Abi&gt;}}}}
{{dsc|{{tt|abi_type}}|{{tt|Abi}}}}
{{dsc end}}

===Member constant===
{{dsc begin}}
{{dsc hitem|Name|Description}}
{{dsc mem sconst|nolink=true|{{dsc small|{{box/core|{{c/core|constexpr std::integral_constant&lt;}}{{lsi|cpp/numeric/simd#simd-size-type}}{{c/core|,}}{{nbspt}}{{lsi|cpp/numeric/simd#simd-size-v}}{{c/core|&lt;T, Abi&gt;&gt;}}}}}} size|the width of {{tt|basic_simd}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/simd/basic_simd/dsc constructor}}
{{dsc inc|cpp/numeric/simd/basic_simd/dsc operator_at}}
{{dsc inc|cpp/numeric/simd/basic_simd/dsc operator_mem_arith}}
{{dsc inc|cpp/numeric/simd/basic_simd/dsc operator_mem_arith2}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/numeric/simd/basic_simd/dsc operator_arith}}
{{dsc inc|cpp/numeric/simd/basic_simd/dsc operator_compound}}
{{dsc inc|cpp/numeric/simd/basic_simd/dsc operator_cmp}}
{{dsc inc|cpp/numeric/simd/basic_simd/dsc simd_select}}
{{dsc end}}

===Deduction guide===
{{ddcl|since=c++26|1=
template&lt; class R, class... Ts &gt;
basic_simd( R&amp;&amp; r, Ts... ) -&gt; /* see below */;
}}
The deduction guide is present only if:
* {{tt|R}} models {{lconcept|contiguous_range}} and {{lconcept|sized_range}}, and
* {{c|ranges::size(r)}} is a {{lt|cpp/language/constant expression}}.

The deduced type is equivalent to {{c/core|std::simd&lt;ranges::range_value_t&lt;R&gt;, ranges::size(r)&gt;}}.

===Notes===
Implementations are recommended to support explicit conversions between enabled specializations of {{tt|basic_simd}} and appropriate implementation-defined types. These appropriate types are non-standard vector types which are available in the implementation.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/simd/dsc basic_simd_mask}}
{{dsc inc|cpp/numeric/simd/dsc simd_mask}}
{{dsc inc|cpp/numeric/dsc valarray}}
{{dsc end}}

{{langlinks|zh}}
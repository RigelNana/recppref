{{cpp/numeric/valarray/title|1=operator+=,-=,*=,/=,%=,&amp;=,{{!}}=,&lt;&lt;=,&gt;&gt;=}}
{{cpp/numeric/valarray/navbar}}
{{dcl begin}}
{{dcl|num=1|1=
valarray&lt;T&gt;&amp; operator+=( const valarray&lt;T&gt;&amp; v );
valarray&lt;T&gt;&amp; operator-=( const valarray&lt;T&gt;&amp; v );
valarray&lt;T&gt;&amp; operator*=( const valarray&lt;T&gt;&amp; v );
valarray&lt;T&gt;&amp; operator/=( const valarray&lt;T&gt;&amp; v );
valarray&lt;T&gt;&amp; operator%=( const valarray&lt;T&gt;&amp; v );
valarray&lt;T&gt;&amp; operator&amp;=( const valarray&lt;T&gt;&amp; v );
valarray&lt;T&gt;&amp; operator{{!}}=( const valarray&lt;T&gt;&amp; v );
valarray&lt;T&gt;&amp; operator^=( const valarray&lt;T&gt;&amp; v );
valarray&lt;T&gt;&amp; operator&lt;&lt;=( const valarray&lt;T&gt;&amp; v );
valarray&lt;T&gt;&amp; operator&gt;&gt;=( const valarray&lt;T&gt;&amp; v );
}}
{{dcl|num=2|1=
valarray&lt;T&gt;&amp; operator+=( const T&amp; val );
valarray&lt;T&gt;&amp; operator-=( const T&amp; val );
valarray&lt;T&gt;&amp; operator*=( const T&amp; val );
valarray&lt;T&gt;&amp; operator/=( const T&amp; val );
valarray&lt;T&gt;&amp; operator%=( const T&amp; val );
valarray&lt;T&gt;&amp; operator&amp;=( const T&amp; val );
valarray&lt;T&gt;&amp; operator{{!}}=( const T&amp; val );
valarray&lt;T&gt;&amp; operator^=( const T&amp; val );
valarray&lt;T&gt;&amp; operator&lt;&lt;=( const T&amp; val );
valarray&lt;T&gt;&amp; operator&gt;&gt;=( const T&amp; val );
}}
{{dcl end}}

Applies compound assignment operators to each element in the numeric array. 

@1@ Each element is assigned value obtained by applying the corresponding operator to the previous value of the element and corresponding element from {{c|v}}.

@@ The behavior is undefined if {{c|1=size() != v.size()}}.

@@ The behavior is undefined if any of the values in {{c|v}} is computed during the assignment and depends on any of the values in {{c|*this}}, that is, the expression on the right side of the assignment refers to a variable in the left side of the assignment.

@2@ Each element is assigned value obtained by applying the corresponding operator to the previous value of the element and the value of {{c|val}}.

===Parameters===
{{par begin}}
{{par|v|another numeric array}}
{{par|val|a value}}
{{par end}}

===Return value===
{{c|*this}}

{{cpp/impldef exception}}

===Notes===
Each of the operators can only be instantiated if the following requirements are met:
* The indicated operator can be applied to type {{tt|T}}.
* The result value can be unambiguously converted to {{tt|T}}.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string_view&gt;
#include &lt;type_traits&gt;
#include &lt;valarray&gt;

void o(std::string_view rem, auto const&amp; v, bool nl = false)
{
    if constexpr (std::is_scalar_v&lt;std::decay_t&lt;decltype(v)&gt;&gt;)
        std::cout &lt;&lt; rem &lt;&lt; " : " &lt;&lt; v;
    else
    {
        for (std::cout &lt;&lt; rem &lt;&lt; " : { "; auto const e : v)
            std::cout &lt;&lt; e &lt;&lt; ' ';
        std::cout &lt;&lt; '}';
    }
    std::cout &lt;&lt; (nl ? "\n" : ";  ");
}

int main()
{
    std::valarray&lt;int&gt; x, y;

    o("x", x = {1, 2, 3, 4}), o("y", y = {4, 3, 2, 1}), o("x += y", x += y, 1);
    o("x", x = {4, 3, 2, 1}), o("y", y = {3, 2, 1, 0}), o("x -= y", x -= y, 1);
    o("x", x = {1, 2, 3, 4}), o("y", y = {5, 4, 3, 2}), o("x *= y", x *= y, 1);
    o("x", x = {1, 3, 4, 7}), o("y", y = {1, 1, 3, 5}), o("x &amp;= y", x &amp;= y, 1);
    o("x", x = {0, 1, 2, 4}), o("y", y = {4, 3, 2, 1}), o("x &lt;&lt;=y", x &lt;&lt;=y, 1);

    std::cout &lt;&lt; '\n';

    o("x", x = {1, 2, 3, 4}), o("x += 5", x += 5, 1);
    o("x", x = {1, 2, 3, 4}), o("x *= 2", x *= 2, 1);
    o("x", x = {8, 6, 4, 2}), o("x /= 2", x /= 2, 1);
    o("x", x = {8, 4, 2, 1}), o("x &gt;&gt;=1", x &gt;&gt;=1, 1);
}
|output=
x : { 1 2 3 4 };  y : { 4 3 2 1 };  x += y : { 5 5 5 5 }
x : { 4 3 2 1 };  y : { 3 2 1 0 };  x -= y : { 1 1 1 1 }
x : { 1 2 3 4 };  y : { 5 4 3 2 };  x *= y : { 5 8 9 8 }
x : { 1 3 4 7 };  y : { 1 1 3 5 };  x &amp;= y : { 1 1 0 5 }
x : { 0 1 2 4 };  y : { 4 3 2 1 };  x &lt;&lt;=y : { 0 8 8 8 }

x : { 1 2 3 4 };  x += 5 : { 6 7 8 9 }
x : { 1 2 3 4 };  x *= 2 : { 2 4 6 8 }
x : { 8 6 4 2 };  x /= 2 : { 4 3 2 1 }
x : { 8 4 2 1 };  x &gt;&gt;=1 : { 4 2 1 0 }
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/valarray/dsc operator_arith}}
{{dsc inc|cpp/numeric/valarray/dsc operator_arith3}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
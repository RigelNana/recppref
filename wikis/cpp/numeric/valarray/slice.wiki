{{cpp/title|slice}}
{{cpp/numeric/valarray/navbar}}
{{ddcl|header=valarray|
class slice;
}}

{{tt|std::slice}} is the selector class that identifies a subset of {{lc|std::valarray}} similar to {{enwiki|BLAS}} slice. An object of type {{tt|std::slice}} holds three values: the starting index, the stride, and the total number of values in the subset. Objects of type {{tt|std::slice}} can be used as indices with valarray's {{c/core|operator[]}}.

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/numeric/valarray/slice|inlinemem=true|constructs a slice}}
{{dsc mem fun|cpp/numeric/valarray/slice|title=start&lt;br&gt;size&lt;br&gt;stride|inlinemem=true|returns the parameters of the slice}}
{{dsc end}}

{{member|{{small|std::slice::}}slice|
{{dcl begin}}
{{dcl|num=1|
slice()
}}
{{dcl|num=2|
slice( std::size_t start, std::size_t size, std::size_t stride );
}}
{{dcl|num=3|
slice( const slice&amp; other );
}}
{{dcl end}}

Constructs a new slice.

@1@ Default constructor. Equivalent to {{c|slice(0, 0, 0)}}. This constructor exists only to allow construction of arrays of slices.

@2@ Constructs a new slice with parameters {{c|start}}, {{c|size}}, {{c|stride}}. This slice will refer to {{c|size}} number of elements, each with the position:

:@@ {{math|start + 0 * stride}}
:@@ {{math|start + 1 * stride}}
:@@ {{math|...}}
:@@ {{math|start + (size - 1) * stride}}

@3@ Constructs a copy of {{c|other}}.

===Parameters===
{{par begin}}
{{par|start|the position of the first element}}
{{par|size|the number of elements in the slice}}
{{par|stride|the number of positions between successive elements in the slice}}
{{par|other|another slice to copy}}
{{par end}}
}}

{{member|{{small|std::slice::}}start, size, stride|
{{dcl begin}}
{{dcl|num=1|
std::size_t start() const;
}}
{{dcl|num=2|
std::size_t size() const;
}}
{{dcl|num=3|
std::size_t stride() const;
}}
{{dcl end}}

Returns the parameters passed to the slice on construction - start, size and stride respectively.

===Parameters===
(none)

===Return value===
The parameters of the slice -- start, size and stride respectively.

===Complexity===
Constant.
}}

===Non-member functions===
{{dsc begin}}
{{dsc fun|cpp/numeric/valarray/slice|title=operator=={{dsc small|(std::slice)}}|notes={{mark c++20}}|inlinemem=true|checks if two slices are equal}}
{{dsc end}}

{{member|1=operator=={{petty|(std::slice)}}|2=
{{dcl begin}}
{{dcl|since=c++20|1=
friend bool operator==( const slice&amp; lhs, const slice&amp; rhs );
}}
{{dcl end}}

Checks if the parameters of {{c|lhs}} and {{c|rhs}} - start, size and stride are equal respectively.

{{cpp/hidden friend|std::slice}}

{{cpp/note synthesized eq}}

===Parameters===
{{par begin}}
{{par|lhs, rhs|slices to compare}}
{{par end}}

===Return value===
{{c|1=lhs.start() == rhs.start() &amp;&amp; lhs.size() == rhs.size() &amp;&amp; lhs.stride() == rhs.stride()}}
}}

===Example===
{{example
|Barebones valarray-backed Matrix class with a {{enwiki|Trace (linear algebra)|trace}} calculating function.
|code=
#include &lt;iostream&gt;
#include &lt;valarray&gt;

class Matrix
{
    std::valarray&lt;int&gt; data;
    int dim;
public:
    Matrix(int r, int c) : data(r*c), dim(c) {}
    int&amp; operator()(int r, int c) { return data[r * dim + c]; }
    int trace() const { return data[std::slice(0, dim, dim + 1)].sum(); }
};

int main()
{
    Matrix m(3, 3);
    int n = 0;
    for (int r = 0; r &lt; 3; ++r)
       for (int c = 0; c &lt; 3; ++c)
           m(r, c) = ++n;
    std::cout &lt;&lt; "Trace of the matrix (1,2,3) (4,5,6) (7,8,9) is " &lt;&lt; m.trace() &lt;&lt; '\n';
}
|output=
Trace of the matrix (1,2,3) (4,5,6) (7,8,9) is 15
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=543|std=C++98|before=it was unclear whether a default constructed slice is usable|after=it is usable (as an empty subset)}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/valarray/dsc operator_at}}
{{dsc inc|cpp/numeric/valarray/dsc gslice}}
{{dsc inc|cpp/numeric/valarray/dsc slice_array}}
{{dsc inc|cpp/container/dsc mdspan}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
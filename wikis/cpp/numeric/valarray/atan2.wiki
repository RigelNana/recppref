{{cpp/title|atan2{{small|(std::valarray)}}}}
{{cpp/numeric/valarray/navbar}}
{{dcl begin}}
{{dcl header|valarray}}
{{dcl|num=1|
template&lt; class T &gt; 
std::valarray&lt;T&gt; atan2( const std::valarray&lt;T&gt;&amp; y, const std::valarray&lt;T&gt;&amp; x );
}}
{{dcl|num=2|
template&lt; class T &gt; 
std::valarray&lt;T&gt; atan2( const std::valarray&lt;T&gt;&amp; y,
                        const typename std::valarray&lt;T&gt;::value_type&amp; vx );
}}
{{dcl|num=3|
template&lt; class T &gt; 
std::valarray&lt;T&gt; atan2( const typename std::valarray&lt;T&gt;::value_type&amp; vy,
                        const std::valarray&lt;T&gt;&amp; x );
}}
{{dcl end}}

Computes the inverse tangent of {{c|y / x}} using the signs of arguments to correctly determine quadrant.

@1@ Computes the inverse tangent of each pair of corresponding values from {{c|y}} and {{c|x}}.

The behavior is undefined if {{c|1=x.size() != y.size()}}.
@2@ Computes the inverse tangent of {{c|vx}} and each value in the numeric array {{c|y}}.
@3@ Computes the inverse tangent of {{c|vy}} and each value in the numeric array {{c|x}}.

===Parameters===
{{par begin}}
{{par|x, y|numeric arrays to compute inverse tangent of}}
{{par|vy, vx|values to compute inverse tangent of}}
{{par end}}

===Return value===
A numeric array containing the results of computation of inverse tangent.

===Notes===
{{cpp/numeric/valarray/notes unq|atan2}}

{{cpp/numeric/valarray/notes ret|atan2}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;valarray&gt;

void show(char const* title, const std::valarray&lt;double&gt;&amp; va)
{
    std::cout &lt;&lt; title &lt;&lt; ' ';
    std::for_each(std::begin(va), std::end(va), [](const double x)
    { 
        std::cout &lt;&lt; ' ' &lt;&lt; std::right &lt;&lt; std::setw(4) &lt;&lt; x &lt;&lt; "°";
    });
    std::cout &lt;&lt; '\n';
}

const double pi = std::acos(-1.0); // C++20: std::numbers::pi

int main()
{
    auto degrees_to_radians = [](double const&amp; x) { return (pi * x / 180); };
    auto radians_to_degrees = [](double const&amp; x) { return (180 * x / pi); };

    const std::valarray&lt;double&gt; degrees{-90, -60, -45, -30, 0, 30, 45, 60, 90};
    const std::valarray&lt;double&gt; radians = degrees.apply(degrees_to_radians);

    const auto sin = std::sin(radians);
    const auto cos = std::cos(radians);

    show("(1)", std::atan2(sin, cos).apply(radians_to_degrees));
    show("(2)", std::atan2(sin/cos, 1.0).apply(radians_to_degrees));
    show("(3)", std::atan2(1.0, cos/sin).apply(radians_to_degrees));
}
|output=
(1)   -90°  -60°  -45°  -30°    0°   30°   45°   60°   90°
(2)   -90°  -60°  -45°  -30°    0°   30°   45°   60°   90°
(3)    90°  120°  135°  150°    0°   30°   45°   60°   90°
}}

=== Defect reports ===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3074|std=C++98|before={{tt|T}} is deduced from both the scalar and the {{tt|valarray}} for {{v|2,3}}, disallowing mixed-type calls |after=only deduce {{tt|T}} from the {{tt|valarray}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/valarray/dsc asin}}
{{dsc inc|cpp/numeric/valarray/dsc acos}}
{{dsc inc|cpp/numeric/valarray/dsc atan}}
{{dsc inc|cpp/numeric/math/dsc atan2}}
{{dsc inc|cpp/numeric/complex/dsc arg}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
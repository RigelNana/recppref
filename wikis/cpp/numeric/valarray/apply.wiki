{{cpp/numeric/valarray/title|apply}}
{{cpp/numeric/valarray/navbar}}
{{dcl begin}}
{{dcl| 
valarray&lt;T&gt; apply( T func(T) ) const;
}}
{{dcl|
valarray&lt;T&gt; apply( T func(const T&amp;) ) const;
}}
{{dcl end}}

Returns a new valarray of the same size with values which are acquired by applying function {{tt|func}} to the previous values of the elements.

===Parameters===
{{par begin}}
{{par|func|function to apply to the values}}
{{par end}}

===Return value===
The resulting valarray with values acquired by applying function {{tt|func}}.

===Notes===
{{cpp/numeric/valarray/notes_ret}}

===Possible implementation===&lt;!--Note: This is moved from separated pages--&gt;
Following straightforward implementations can be replaced by expression templates for a higher efficiency.
{{eq fun|1=
template&lt;class T&gt;
valarray&lt;T&gt; valarray&lt;T&gt;::apply(T func(T)) const
{
    valarray&lt;T&gt; other = *this;
    for (T&amp; i : other)
        i = func(i);
    return other;
}

template&lt;class T&gt;
valarray&lt;T&gt; valarray&lt;T&gt;::apply(T func(const T&amp;)) const
{
    valarray&lt;T&gt; other = *this;
    for (T&amp; i : other)
        i = func(i);
    return other;
}
}}

===Example===
{{example
|Calculates and prints the first 10 factorials.
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;
#include &lt;valarray&gt;

int main()
{
    std::valarray&lt;int&gt; v = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    v = v.apply([](int n) -&gt; int
                {
                    return std::round(std::tgamma(n + 1));
                });
    for (auto n : v)
        std::cout &lt;&lt; n &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
1 2 6 24 120 720 5040 40320 362880 3628800
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc for_each}}
{{dsc inc|cpp/algorithm/ranges/dsc for_each}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
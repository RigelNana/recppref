{{cpp/title|gslice}}
{{cpp/numeric/valarray/navbar}}
{{ddcl|header=valarray|
class gslice;
}}

{{tt|std::gslice}} is the selector class that identifies a subset of {{lc|std::valarray}} indices defined by a multi-level set of strides and sizes. Objects of type {{tt|std::gslice}} can be used as indices with valarray's {{c/core|operator[]}} to select, for example, columns of a multidimensional array represented as a {{tt|valarray}}.

Given the starting value {{math|s}}, a list of strides {{math|i{{su|b=j}}}} and a list of sizes {{math|d{{su|b=j}}}}, a {{tt|std::gslice}} constructed from these values selects the set of indices {{math|k{{su|b=j}}{{=}}s+Î£{{su|b=j}}(i{{su|b=j}}d{{su|b=j}})}}.

For example, a gslice with starting index {{tt|3}}, strides {{tt|{19,4,1}}} and lengths {{tt|{2,4,3}}} generates the following set of {{tt|24{{=}}2*4*3}} indices:

{{cc|1=
3 + 0*19 + 0*4 + 0*1 = 3,
3 + 0*19 + 0*4 + 1*1 = 4,
3 + 0*19 + 0*4 + 2*1 = 5,
3 + 0*19 + 1*4 + 0*1 = 7,
3 + 0*19 + 1*4 + 1*1 = 8,
3 + 0*19 + 1*4 + 2*1 = 9,
3 + 0*19 + 2*4 + 0*1 = 11,
...
3 + 1*19 + 3*4 + 1*1 = 35,
3 + 1*19 + 3*4 + 2*1 = 36}} 

It is possible to construct {{tt|std::gslice}} objects that select some indices more than once: if the above example used the strides {{tt|{1,1,1}&lt;!----&gt;}}, the indices would have been {{tt|{3, 4, 5, 4, 5, 6, ...}&lt;!----&gt;}}. Such gslices may only be used as arguments to the const version of {{rlpt|operator at|std::valarray::operator[]}}, otherwise the behavior is undefined.

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/numeric/valarray/gslice|inlinemem=true|constructs a generic slice}}
{{dsc mem fun|cpp/numeric/valarray/gslice|title=start&lt;br&gt;size&lt;br&gt;stride|inlinemem=true|returns the parameters of the slice}}
{{dsc end}}

{{member|{{small|std::gslice::}}gslice|
{{dcl begin}}
{{dcl|num=1|
gslice()
}}
{{dcl|num=2|
gslice( std::size_t start, const std::valarray&lt;std::size_t&gt;&amp; sizes,
                           const std::valarray&lt;std::size_t&gt;&amp; strides );
}}
{{dcl|num=3|
gslice( const gslice&amp; other );
}}
{{dcl end}}

Constructs a new generic slice.

@1@ Default constructor. Equivalent to {{c|gslice(0, std::valarray&lt;std::size_t&gt;(), std::valarray&lt;std::size_t&gt;())}}. This constructor exists only to allow construction of arrays of slices.

@2@ Constructs a new slice with parameters {{c|start}}, {{c|sizes}}, {{c|strides}}.

@3@ Constructs a copy of {{c|other}}.

===Parameters===
{{par begin}}
{{par|start|the position of the first element}}
{{par|sizes|an array that defines the number of elements in each dimension}}
{{par|strides|an array that defines the number of positions between successive elements in each dimension}}
{{par|other|another slice to copy}}
{{par end}}
}}


{{member|{{small|std::slice::}}start, size, stride|
{{dcl begin}}
{{dcl|num=1|
std::size_t start() const;
}}
{{dcl|num=2|
std::valarray&lt;std::size_t&gt; size() const;
}}
{{dcl|num=3|
std::valarray&lt;std::size_t&gt; stride() const;
}}
{{dcl end}}

Returns the parameters passed to the slice on construction - start, sizes and strides respectively.

===Parameters===
(none)

===Return value===
The parameters of the slice -- start, sizes and strides respectively.

===Complexity===
Constant.
}}

===Example===
{{example
|Demonstrates the use of gslices to address columns of a 3D array:
|code=
#include &lt;iostream&gt;
#include &lt;valarray&gt;

void test_print(std::valarray&lt;int&gt;&amp; v, int planes, int rows, int cols)
{
    for (int r = 0; r &lt; rows; ++r)
    {
        for (int z = 0; z &lt; planes; ++z)
        {
            for (int c = 0; c &lt; cols; ++c)
                std::cout &lt;&lt; v[z * rows * cols + r * cols + c] &lt;&lt; ' ';
            std::cout &lt;&lt; "  ";
        }
        std::cout &lt;&lt; '\n';
    }
}

int main()
{
    std::valarray&lt;int&gt; v = // 3d array: 2 x 4 x 3 elements
        {111,112,113 , 121,122,123 , 131,132,133 , 141,142,143,
         211,212,213 , 221,222,223 , 231,232,233 , 241,242,243};
    // int ar3d[2][4][3]
    std::cout &lt;&lt; "Initial 2x4x3 array:\n";
    test_print(v, 2, 4, 3);
    
    // update every value in the first columns of both planes
    v[std::gslice(0, {2, 4}, {4 * 3, 3})] = 1; // two level one strides of 12 elements
                                               // then four level two strides of 3 elements
    
    // subtract the third column from the second column in the 1st plane
    v[std::gslice(1, {1, 4}, {4 * 3, 3})] -= v[std::gslice(2, {1, 4}, {4 * 3, 3})];
    
    std::cout &lt;&lt; "\n" "After column operations:\n";
    test_print(v, 2, 4, 3);
}
|output=
Initial 2x4x3 array:
111 112 113   211 212 213
121 122 123   221 222 223
131 132 133   231 232 233
141 142 143   241 242 243

After column operations:
1 -1 113   1 212 213
1 -1 123   1 222 223
1 -1 133   1 232 233
1 -1 143   1 242 243
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=543|std=C++98|before=it was unclear whether a default constructed generic slice is usable|after=it is usable (as an empty subset)}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/valarray/dsc operator_at}}
{{dsc inc|cpp/numeric/valarray/dsc slice}}
{{dsc inc|cpp/numeric/valarray/dsc gslice_array}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
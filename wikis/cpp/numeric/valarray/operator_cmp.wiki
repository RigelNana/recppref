{{title|1=operator==,!=,&lt;,&lt;=,&gt;,&gt;={{small|(std::valarray)}}}}
{{cpp/numeric/valarray/navbar}}
{{dcl begin}}
{{dcl header|valarray}}
{{dcl|num=1|1=
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator==( const std::valarray&lt;T&gt;&amp; lhs, const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator!=( const std::valarray&lt;T&gt;&amp; lhs, const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&lt; ( const std::valarray&lt;T&gt;&amp; lhs, const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&lt;=( const std::valarray&lt;T&gt;&amp; lhs, const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&gt; ( const std::valarray&lt;T&gt;&amp; lhs, const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&gt;=( const std::valarray&lt;T&gt;&amp; lhs, const std::valarray&lt;T&gt;&amp; rhs );
}}
{{dcl|num=2|1=
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator==( const typename std::valarray&lt;T&gt;::value_type &amp; lhsv,
                                const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator!=( const typename std::valarray&lt;T&gt;::value_type &amp; lhsv,
                                const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&lt; ( const typename std::valarray&lt;T&gt;::value_type &amp; lhsv,
                                const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&lt;=( const typename std::valarray&lt;T&gt;::value_type &amp; lhsv,
                                const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&gt; ( const typename std::valarray&lt;T&gt;::value_type &amp; lhsv,
                                const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&gt;=( const typename std::valarray&lt;T&gt;::value_type &amp; lhsv,
                                const std::valarray&lt;T&gt;&amp; rhs );
}}
{{dcl|num=3|1=
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator==( const std::valarray&lt;T&gt;&amp; lhs,
                                const typename std::valarray&lt;T&gt;::value_type &amp; rhsv );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator!=( const std::valarray&lt;T&gt;&amp; lhs,
                                const typename std::valarray&lt;T&gt;::value_type &amp; rhsv );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&lt; ( const std::valarray&lt;T&gt;&amp; lhs,
                                const typename std::valarray&lt;T&gt;::value_type &amp; rhsv );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&lt;=( const std::valarray&lt;T&gt;&amp; lhs,
                                const typename std::valarray&lt;T&gt;::value_type &amp; rhsv );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&gt; ( const std::valarray&lt;T&gt;&amp; lhs,
                                const typename std::valarray&lt;T&gt;::value_type &amp; rhsv );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&gt;=( const std::valarray&lt;T&gt;&amp; lhs,
                                const typename std::valarray&lt;T&gt;::value_type &amp; rhsv );
}}
{{dcl end}}

Compares each value within the numeric array with another value.

@1@ Returns a numeric array of {{c|bool}} containing elements each of which is obtained by applying the indicated comparison operator to the corresponding values of {{c|lhs}} and {{c|rhs}}.

The behavior is undefined if {{c|1=size() != v.size()}}.

@2@ Returns a numeric array of {{c|bool}} containing elements each of which is obtained by applying the indicated comparison operator to {{c|lhsv}} and the corresponding value of {{c|rhs}}.

@3@ Returns a numeric array of {{c|bool}} containing elements each of which is obtained by applying the indicated comparison operator to the corresponding value of {{c|lhs}} and {{c|rhsv}}.

===Parameters===
{{par begin}}
{{par|lhs, rhs|numeric arrays to compare}}
{{par|lhsv, rhsv|values to compare to each element within a numeric array}}
{{par end}}

===Return value===
A numeric array of {{c|bool}} containing comparison results of corresponding elements.

{{cpp/impldef exception}}

===Notes===
Each of the operators can only be instantiated if the following requirements are met:
:* The indicated operator can be applied to type {{tt|T}}.
:* The result value can be unambiguously converted to {{c|bool}}.

{{cpp/numeric/valarray/notes_ret}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;valarray&gt;

int main()
{
    // zero all negatives in a valarray
    std::valarray&lt;int&gt; v = {1, -1, 0, -3, 10, -1, -2};
    std::cout &lt;&lt; "Before: ";
    for (auto n : v)
        std::cout &lt;&lt; n &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    v[v &lt; 0] = 0;
    std::cout &lt;&lt; "After: ";
    for (auto n : v)
        std::cout &lt;&lt; n &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    // convert the valarray&lt;bool&gt; result of == to a single bool
    std::valarray&lt;int&gt; a = {1, 2, 3};
    std::valarray&lt;int&gt; b = {2, 4, 6};

    std::cout &lt;&lt; "2*a == b is " &lt;&lt; std::boolalpha
              &lt;&lt; (2 * a == b).min() &lt;&lt; '\n';
}
|output=
Before: 1 -1 0 -3 10 -1 -2
After: 1 0 0 0 10 0 0
2*a == b is true
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3074|std=C++98|before={{tt|T}} is deduced from both the scalar and the {{tt|valarray}} for {{v|2,3}},&lt;br&gt;disallowing mixed-type calls|after=only deduce {{tt|T}} from the {{tt|valarray}}}}
{{dr list end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
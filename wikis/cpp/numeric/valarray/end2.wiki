{{cpp/title|end&lt;small&gt;(std::valarray)&lt;/small&gt;}}
{{cpp/numeric/valarray/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|
template&lt; class T &gt; 
/* see below */ end( valarray&lt;T&gt;&amp; v );
}}
{{dcl|num=2|since=c++11|
template&lt; class T &gt; 
/* see below */ end( const valarray&lt;T&gt;&amp; v );
}}
{{dcl end}}

The overload of {{lc|std::end}} for {{tt|valarray}} returns an iterator of unspecified type referring to the one past the last element in the numeric array. 

@1@ The return type must
* meet the requirements of [[cpp/iterator|mutable]] {{named req|RandomAccessIterator}},
{{rrev|since=c++20|* model {{lconcept|contiguous_iterator}},}}
* have a member type {{tt|value_type}}, which is {{tt|T}}, and
* have a member type {{tt|reference}}, which is {{tt|T&amp;}}.
@2@ The return type must
* meet the requirements of [[cpp/iterator|constant]] {{named req|RandomAccessIterator}},
{{rrev|since=c++20|* model {{lconcept|contiguous_iterator}},}}
* have a member type {{tt|value_type}}, which is {{tt|T}}, and
* have a member type {{tt|reference}}, which is {{tt|const T&amp;}}.

The iterator returned from this function is invalidated when the member function {{rlpf|resize}} is called on {{c|v}} or when the lifetime of {{c|v}} ends, whichever comes first.

===Parameters===
{{par begin}}
{{par|v|a numeric array}}{{par end}} 

===Return value===
Iterator to one past the last value in the numeric array.

{{cpp/impldef exception}}

===Notes===
Unlike other functions that take {{tt|std::valarray}} arguments, {{tt|end()}} cannot accept the replacement types (such as the types produced by expression templates) that may be returned from expressions involving valarrays: {{c|std::end(v1 + v2)}} is not portable, {{c|std::end(std::valarray&lt;T&gt;(v1 + v2))}} has to be used instead.

The intent of this function is to allow [[cpp/language/range-for|range for loops]] to work with valarrays, not to provide container semantics.

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;valarray&gt;

int main()
{
    const std::valarray&lt;char&gt; va
    {
        'H', 'e', 'l', 'l', 'o', 
        ',', ' ', 
        'C', '+', '+', '!', '\n'
    };

    std::for_each(std::begin(va), std::end(va),
                  [](char c){ std::cout &lt;&lt; c; });
}
|output=
Hello, C++!
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2058|std=C++11|before=1. {{tt|end()}} was required to support replacement types&lt;br&gt;2. it was unspecified when the returned iterators will be invalidated|after=1. only accepts {{tt|valarray}}|after=1. not required&lt;br&gt;2. specified}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/valarray/dsc begin2}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
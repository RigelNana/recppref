{{cpp/numeric/valarray/title|operator{{=}}}}
{{cpp/numeric/valarray/navbar}}
{{dcl begin}}
{{dcl|num=1|1=
valarray&lt;T&gt;&amp; operator=( const valarray&lt;T&gt;&amp; other );
}}
{{dcl|num=2|since=c++11|1=
valarray&lt;T&gt;&amp; operator=( valarray&lt;T&gt;&amp;&amp; other ) noexcept;
}}
{{dcl|num=3|1=
valarray&lt;T&gt;&amp; operator=( const T&amp; val );
}}
{{dcl|num=4|1=
valarray&lt;T&gt;&amp; operator=( const std::slice_array&lt;T&gt;&amp; other );
}}
{{dcl|num=5|1=
valarray&lt;T&gt;&amp; operator=( const std::gslice_array&lt;T&gt;&amp; other );
}}
{{dcl|num=6|1=
valarray&lt;T&gt;&amp; operator=( const std::mask_array&lt;T&gt;&amp; other );
}}
{{dcl|num=7|1=
valarray&lt;T&gt;&amp; operator=( const std::indirect_array&lt;T&gt;&amp; other );
}}
{{dcl|num=8|since=c++11|1=
valarray&lt;T&gt;&amp; operator=( std::initializer_list&lt;T&gt; il );
}}
{{dcl end}}

Replaces the contents of the numeric array.

@1@ Copy assignment operator. If {{c|1=size() != other.size()}}, first resizes {{c|*this}} as if by {{c|resize(other.size())}}. Each element of {{c|*this}} is assigned the value of the corresponding element of {{c|other}}.
@2@ Move assignment operator. Replaces the contents of {{c|*this}} with those of {{c|other}}. The value of {{c|other}} is unspecified after this operation. The complexity of this operation may be linear if T has non-trivial destructors, but is usually constant otherwise.
@3@ Replaces each value in {{c|*this}} with a copy of {{c|val}}.
@4-7@ Replaces the contents of {{c|*this}} with the result of a generalized subscripting operation. The behavior is undefined if {{rlpf|size}} does not equal the length of {{c|other}} or if any value on the left depends on the value on the right (e.g. {{c|1=v = v[v &gt; 2]}}).
@8@ Assigns the contents of initializer list {{c|il}}. Equivalent to {{c|1=*this = valarray(il)}}.

===Parameters===
{{par begin}}
{{par|other|another numeric array (or a mask) to assign}}
{{par|val|the value to initialize each element with}}
{{par|il|initializer list to assign}}
{{par end}}

===Return value===
{{c|*this}}

===Exceptions===
@1,3-8@ {{cpp/impldef exception item}}

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;valarray&gt;

void print(const char* rem, const std::valarray&lt;int&gt;&amp; v)
{
    std::cout &lt;&lt; std::left &lt;&lt; std::setw(36) &lt;&lt; rem &lt;&lt; std::right;
    for (int n : v)
        std::cout &lt;&lt; std::setw(3) &lt;&lt; n;
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::valarray&lt;int&gt; v1(3);
    v1 = -1; // (3) from a scalar 
    print("assigned from scalar: ", v1);
    
    v1 = {1, 2, 3, 4, 5, 6}; // (8): from initializer list of different size
    print("assigned from initializer_list:", v1);
    
    std::valarray&lt;int&gt; v2(3);
    v2 = v1[std::slice(0, 3, 2)]; // (4): from slice array
    print("every 2nd element starting at pos 0:", v2);
    
    v2 = v1[v1 % 2 == 0]; // (6): from mask array
    print("values that are even:", v2);
    
    std::valarray&lt;std::size_t&gt; idx = {0, 1, 2, 4}; // index array
    v2.resize(4); // sizes must match when assigning from gen subscript
    v2 = v1[idx]; // (7): from indirect array
    print("values at positions 0, 1, 2, 4:", v2);
}
|output=
assigned from scalar:                -1 -1 -1
assigned from initializer_list:       1  2  3  4  5  6
every 2nd element starting at pos 0:  1  3  5
values that are even:                 2  4  6
values at positions 0, 1, 2, 4:       1  2  3  5
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=624|std=C++98|before=the behaviors of overloads {{v|4-7}} were&lt;br&gt;unclear if the length of {{c|other}} is not {{rlpf|size}}|after=the behaviors are&lt;br&gt;undefined in this case}}
{{dr list item|wg=lwg|dr=630|std=C++98|before=the behavior of the copy assignment operator&lt;br&gt;was undefined if {{c|1=size() != other.size()}}|after=resizes {{c|*this}}&lt;br&gt;first in this case}}
{{dr list item|wg=lwg|dr=2071|std=C++11|before=the move assignment operator resized&lt;br&gt;{{c|*this}} if {{c|1=size() != other.size()}}|after=not required to&lt;br&gt;resize in this case}}
{{dr list end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
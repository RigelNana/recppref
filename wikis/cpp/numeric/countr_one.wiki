{{cpp/title|countr_one}}
{{cpp/utility/bit/navbar}}
{{ddcl|header=bit|since=c++20|
template&lt; class T &gt;
constexpr int countr_one( T x ) noexcept;
}}

Returns the number of consecutive {{c|1}} bits in the value of {{c|x}}, starting from the least significant bit ("right").

{{cpp/enable_if|{{tt|T}} is an unsigned integer type (that is, {{c/core|unsigned char}}, {{c/core|unsigned short}}, {{c/core|unsigned int}}, {{c/core|unsigned long}}, {{c/core|unsigned long long}}, or an extended unsigned integer type)}}.

===Parameters===
{{par begin}}
{{par|x|value of unsigned integer type}}
{{par end}}

===Return value===
The number of consecutive {{c|1}} bits in the value of {{c|x}}, starting from the least significant bit.

===Notes===
{{feature test macro|__cpp_lib_bitops|std=C++20|value=201907L|[[cpp/numeric#Bit manipulation (since C++20)|Bit operations]]}}

===Example===
{{example
|code=
#include &lt;bit&gt;
#include &lt;bitset&gt;
#include &lt;cstdint&gt;
#include &lt;iostream&gt;

int main()
{
    for (const std::uint8_t i : {0, 0b11111111, 0b11111110, 0b11100011})
        std::cout &lt;&lt; "countr_one( " &lt;&lt; std::bitset&lt;8&gt;(i) &lt;&lt; " ) = "
                  &lt;&lt; std::countr_one(i) &lt;&lt; '\n';
}
|output=
countr_one( 00000000 ) = 0
countr_one( 11111111 ) = 8
countr_one( 11111110 ) = 0
countr_one( 11100011 ) = 2
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/dsc countl_zero}}
{{dsc inc|cpp/numeric/dsc countl_one}}
{{dsc inc|cpp/numeric/dsc countr_zero}}
{{dsc inc|cpp/numeric/dsc popcount}}
{{dsc inc|cpp/numeric/dsc has_single_bit}}
{{dsc inc|cpp/utility/bitset/dsc count}}
{{dsc inc|cpp/utility/bitset/dsc all_any_none}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/title|saturate_cast}}
{{cpp/numeric/navbar}}
{{ddcl|header=numeric|since=c++26|
template&lt; class T, class U &gt;
constexpr T saturate_cast( U x ) noexcept;
}}

Converts the value {{c|x}} to a value of type {{tt|T}}, clamping {{c|x}} between the minimum and maximum values of type {{tt|T}}.

The program is ill-formed if either {{tt|T}} or {{tt|U}} is not a signed or unsigned [[cpp/language/types#Integer types|integer type]] (including [[cpp/language/types#Standard integer types|standard integer type]] and [[cpp/language/types#Extended integer types (since C++11)|extended integer type]]).

===Parameters===
{{par begin}}
{{par|x|an integer value}}
{{par end}}

===Return value===
* {{c|x}}, if {{c|x}} is representable as a value of type {{tt|T}}. Otherwise,
* either the largest or smallest representable value of type {{tt|T}}, whichever is closer to the value of {{c|x}}.

===Notes===
{{feature test macro|__cpp_lib_saturation_arithmetic|Saturation arithmetic|value=202311L|std=C++26}}

===Possible implementation===
See [https://github.com/gcc-mirror/gcc/blob/07fe07935ddb9228b4426dbfdb62d4a7e7337efe/libstdc%2B%2B-v3/include/bits/sat_arith.h#L106 libstdc++ (GCC)]&lt;!--, [ libc++ (Clang)], and [ MSVC STL]--&gt;.

===Example===
{{example
|Can be previewed on [https://godbolt.org/z/5P149Y377 Compiler Explorer].
|code=
#include &lt;cstdint&gt;
#include &lt;limits&gt;
#include &lt;numeric&gt;

int main()
{
    constexpr std::int16_t x1{696};

    constexpr std::int8_t x2 = std::saturate_cast&lt;std::int8_t&gt;(x1);
    static_assert(x2 == std::numeric_limits&lt;std::int8_t&gt;::max());

    constexpr std::uint8_t x3 = std::saturate_cast&lt;std::uint8_t&gt;(x1);
    static_assert(x3 == std::numeric_limits&lt;std::uint8_t&gt;::max());

    constexpr std::int16_t y1{-696};

    constexpr std::int8_t y2 = std::saturate_cast&lt;std::int8_t&gt;(y1);
    static_assert(y2 == std::numeric_limits&lt;std::int8_t&gt;::min());

    constexpr std::uint8_t y3 = std::saturate_cast&lt;std::uint8_t&gt;(y1);
    static_assert(y3 == 0);
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/dsc bit_cast}}
{{dsc inc|cpp/algorithm/dsc clamp}}
{{dsc inc|cpp/utility/dsc in_range}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
{{cpp/title|n=literals::complex_literals::|operator""i, operator""if, operator""il}}
{{cpp/numeric/complex/navbar}}
{{dcl begin}}
{{dcl header|complex}}
{{dcla|num=1|since=c++14|1=
constexpr complex&lt;double&gt; operator""i( long double arg );
constexpr complex&lt;double&gt; operator""i( unsigned long long arg );
}}
{{dcla|num=2|since=c++14|1=
constexpr complex&lt;float&gt; operator""if( long double arg );
constexpr complex&lt;float&gt; operator""if( unsigned long long arg );
}}
{{dcla|num=3|since=c++14|1=
constexpr complex&lt;long double&gt; operator""il( long double arg );
constexpr complex&lt;long double&gt; operator""il( unsigned long long arg );
}}
{{dcl end}}

Forms a {{lc|std::complex}} literal representing an imaginary number.

@1@ Forms a literal {{c|std::complex&lt;double&gt;}} with the real part zero and imaginary part {{c|arg}}.
@2@ Forms a literal {{c|std::complex&lt;float&gt;}} with the real part zero and imaginary part {{c|arg}}.
@3@ Forms a literal {{c|std::complex&lt;long double&gt;}} with the real part zero and imaginary part {{c|arg}}.

===Parameters===
{{par begin}}
{{par|arg|the value of the imaginary number}}
{{par end}}

===Return value===
The {{lc|std::complex}} literal with the real part zero and imaginary part {{c|arg}}.

===Notes===
These operators are declared in the namespace {{c|std::literals::complex_literals}}, where both {{tt|literals}} and {{tt|complex_literals}} are inline namespaces. Access to these operators can be gained with either:
* {{c|using namespace std::literals}},
* {{c|using namespace std::complex_literals}}, or
* {{c|using namespace std::literals::complex_literals}}.

Even though {{c|if}} is a [[cpp/keywords/if|keyword]] in C++, it is a {{spar|ud-suffix}} of the [[cpp/language/user literal|literal operator]] of the form {{c|operator ""if}} and in the literal expressions such as {{c|1if}} or {{c|1.0if}} because it is not separated by whitespace and is not a standalone token.

{{feature test macro|__cpp_lib_complex_udls|User-Defined Literals for {{lc|std::complex}}|value=201309L|std=C++14}}

===Possible implementation===
{{eq impl
|title1=operator""i|ver1=1|1=
constexpr std::complex&lt;double&gt; operator""i(unsigned long long d)
{
    return std::complex&lt;double&gt; {0.0, static_cast&lt;double&gt;(d)};
}

constexpr std::complex&lt;double&gt; operator""i(long double d)
{
    return std::complex&lt;double&gt; {0.0, static_cast&lt;double&gt;(d)};
}
|title2=operator""if|ver2=2|2=
constexpr std::complex&lt;float&gt; operator""if(unsigned long long d)
{
    return std::complex&lt;float&gt; {0.0f, static_cast&lt;float&gt;(d)};
}

constexpr std::complex&lt;float&gt; operator""if(long double d)
{
    return std::complex&lt;float&gt; {0.0f, static_cast&lt;float&gt;(d)};
}
|title3=operator""il|ver3=3|3=
constexpr std::complex&lt;long double&gt; operator""il(unsigned long long d)
{
    return std::complex&lt;long double&gt; {0.0L, static_cast&lt;long double&gt;(d)};
}

constexpr std::complex&lt;long double&gt; operator""il(long double d)
{
    return std::complex&lt;long double&gt; {0.0L, d};
}
}}

===Example===
{{example
|code=
#include &lt;complex&gt;
#include &lt;iostream&gt;

int main()
{
    using namespace std::complex_literals;

    std::complex&lt;double&gt; c = 1.0 + 1i;
    std::cout &lt;&lt; "abs" &lt;&lt; c &lt;&lt; " = " &lt;&lt; std::abs(c) &lt;&lt; '\n';

    std::complex&lt;float&gt; z = 3.0f + 4.0if;
    std::cout &lt;&lt; "abs" &lt;&lt; z &lt;&lt; " = " &lt;&lt; std::abs(z) &lt;&lt; '\n';
}
|output=
abs(1,1) = 1.41421
abs(3,4) = 5
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc complex}}
{{dsc inc|cpp/numeric/complex/dsc operator{{=}}}}
{{dsc see c|c/numeric/complex/I}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
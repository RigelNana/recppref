{{cpp/title|conj{{small|(std::complex)}}}}
{{cpp/numeric/complex/navbar}}
{{dcl begin}}
{{dcl header|complex}}
{{dcl rev multi|num=1|dcl1=
template&lt; class T &gt; 
std::complex&lt;T&gt; conj( const std::complex&lt;T&gt;&amp; z );
|since2=c++20|dcl2=
template&lt; class T &gt; 
constexpr std::complex&lt;T&gt; conj( const std::complex&lt;T&gt;&amp; z );
}}
{{dcl h|[[#Notes|Additional overloads]] {{mark since c++11}}}}
{{dcl header|complex}}
{{dcl rev multi|num=A|dcl1=
std::complex&lt;float&gt;       conj( float f );
std::complex&lt;double&gt;      conj( double f );
std::complex&lt;long double&gt; conj( long double f );
|since2=c++20|dcl2=
constexpr std::complex&lt;float&gt;       conj( float f );
constexpr std::complex&lt;double&gt;      conj( double f );
constexpr std::complex&lt;long double&gt; conj( long double f );
|since3=c++23|dcl3=
template&lt; class FloatingPoint &gt;
constexpr std::complex&lt;FloatingPoint&gt; conj( FloatingPoint f );
}}
{{dcl rev multi|num=B|dcl1=
template&lt; class Integer &gt;
constexpr std::complex&lt;double&gt; conj( Integer i );
|since2=c++20|dcl2=
template&lt; class Integer &gt;
constexpr std::complex&lt;double&gt; conj( Integer i );
}}
{{dcl end}}

@1@ Computes the {{enwiki|Complex conjugate|complex conjugate}} of {{c|z}} by reversing the sign of the imaginary part.

{{rrev|since=c++11|
@A,B@ Additional overloads are provided for all integer and floating-point types, which are treated as complex numbers with zero imaginary component.
}}

===Parameters===
{{par begin}}
{{par|z|complex value}}
{{par|f|floating-point value}}
{{par|i|integer value}}
{{par end}}

===Return value===
@1@ The complex conjugate of {{c|z}}.
@A@ {{c|std::complex(f)}}.
@B@ {{c|std::complex&lt;double&gt;(i)}}.

===Notes===
{{cpp/numeric/complex/additional overload note|conj}}

===Example===
{{example|
|code=
#include &lt;complex&gt;
#include &lt;iostream&gt;

int main()
{
    std::complex&lt;double&gt; z(1.0, 2.0);
    std::cout &lt;&lt; "The conjugate of " &lt;&lt; z &lt;&lt; " is " &lt;&lt; std::conj(z) &lt;&lt; '\n'
              &lt;&lt; "Their product is " &lt;&lt; z * std::conj(z) &lt;&lt; '\n';
}
|output=
The conjugate of (1,2) is (1,-2)
Their product is (5,0)
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc abs}}
{{dsc inc|cpp/numeric/complex/dsc norm}}
{{dsc inc|cpp/numeric/complex/dsc polar}}
{{dsc see c|c/numeric/complex/conj}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
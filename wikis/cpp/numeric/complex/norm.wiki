{{cpp/title|norm{{small|(std::complex)}}}}
{{cpp/numeric/complex/navbar}}
{{dcl begin}}
{{dcl header|complex}}
{{dcl rev multi|num=1|dcl1=
template&lt; class T &gt; 
T norm( const std::complex&lt;T&gt;&amp; z );
|since2=c++20|dcl2=
template&lt; class T &gt; 
constexpr T norm( const std::complex&lt;T&gt;&amp; z );
}}
{{dcl h|[[#Notes|Additional overloads]] {{mark since c++11}}}}
{{dcl header|complex}}
{{dcl rev multi|num=A|dcl1=
float       norm( float f );
double      norm( double f );
long double norm( long double f );
|since2=c++20|dcl2=
constexpr float       norm( float f );
constexpr double      norm( double f );
constexpr long double norm( long double f );
|since3=c++23|dcl3=
template&lt; class FloatingPoint &gt;
constexpr FloatingPoint norm( FloatingPoint f );
}}
{{dcl rev multi|num=B|dcl1=
template&lt; class Integer &gt; 
double norm( Integer i );
|since2=c++20|dcl2=
template&lt; class Integer &gt; 
constexpr double norm( Integer i );
}}
{{dcl end}}

@1@ Returns the squared magnitude of the complex number {{c|z}}.

{{rrev|since=c++11|
@A,B@ Additional overloads are provided for all integer and floating-point types, which are treated as complex numbers with zero imaginary component.
}}

===Parameters===
{{par begin}}
{{par|z|complex value}}
{{par|f|floating-point value}}
{{par|i|integer value}}
{{par end}}

===Return value===
@1@ The squared magnitude of {{c|z}}.
@A@ The square of {{c|f}}.
@B@ The square of {{c|i}}.

===Notes===
The norm calculated by this function is also known as {{enwiki|Field norm|field norm}} or [https://mathworld.wolfram.com/AbsoluteSquare.html absolute square].

The {{enwiki|Euclidean space#Euclidean norm|Euclidean norm}} of a complex number is provided by {{ltt std|cpp/numeric/complex/abs}}, which is more costly to compute. In some situations, it may be replaced by {{tt|std::norm}}, for example, if {{c|abs(z1) &gt; abs(z2)}} then {{c|norm(z1) &gt; norm(z2)}}.

{{cpp/numeric/complex/additional overload note|norm}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;complex&gt;
#include &lt;iostream&gt;

int main()
{
    constexpr std::complex&lt;double&gt; z {3.0, 4.0};
    static_assert(std::norm(z) == (z.real() * z.real() + z.imag() * z.imag()));
    static_assert(std::norm(z) == (z * std::conj(z)));
           assert(std::norm(z) == (std::abs(z) * std::abs(z)));
    std::cout &lt;&lt; "std::norm(" &lt;&lt; z &lt;&lt; ") = " &lt;&lt; std::norm(z) &lt;&lt; '\n';
}
|output=
std::norm((3,4)) = 25
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc abs}}
{{dsc inc|cpp/numeric/complex/dsc conj}}
{{dsc inc|cpp/numeric/complex/dsc polar}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
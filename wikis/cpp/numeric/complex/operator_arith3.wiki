{{title|operator+,-,*,/ {{small|(std::complex)}}}}
{{cpp/numeric/complex/navbar}}
{{dcl begin}}
{{dcl rev multi|num=1|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator+( const std::complex&lt;T&gt;&amp; lhs,
                           const std::complex&lt;T&gt;&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator+( const std::complex&lt;T&gt;&amp; lhs,
                                     const std::complex&lt;T&gt;&amp; rhs );
}}
{{dcl rev multi|num=2|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator+( const std::complex&lt;T&gt;&amp; lhs,
                           const T&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator+( const std::complex&lt;T&gt;&amp; lhs,
                                     const T&amp; rhs );
}}
{{dcl rev multi|num=3|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator+( const T&amp; lhs,
                           const std::complex&lt;T&gt;&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator+( const T&amp; lhs,
                                     const std::complex&lt;T&gt;&amp; rhs );
}}
{{dcl rev multi|num=4|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator-( const std::complex&lt;T&gt;&amp; lhs,
                           const std::complex&lt;T&gt;&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator-( const std::complex&lt;T&gt;&amp; lhs,
                                     const std::complex&lt;T&gt;&amp; rhs );
}}
{{dcl rev multi|num=5|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator-( const std::complex&lt;T&gt;&amp; lhs,
                           const T&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator-( const std::complex&lt;T&gt;&amp; lhs,
                                     const T&amp; rhs );
}}
{{dcl rev multi|num=6|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator-( const T&amp; lhs,
                           const std::complex&lt;T&gt;&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator-( const T&amp; lhs,
                                     const std::complex&lt;T&gt;&amp; rhs );
}}
{{dcl rev multi|num=7|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator*( const std::complex&lt;T&gt;&amp; lhs,
                           const std::complex&lt;T&gt;&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator*( const std::complex&lt;T&gt;&amp; lhs,
                                     const std::complex&lt;T&gt;&amp; rhs );
}}
{{dcl rev multi|num=8|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator*( const std::complex&lt;T&gt;&amp; lhs,
                           const T&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator*( const std::complex&lt;T&gt;&amp; lhs,
                                     const T&amp; rhs );
}}
{{dcl rev multi|num=9|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator*( const T&amp; lhs,
                           const std::complex&lt;T&gt;&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator*( const T&amp; lhs,
                                     const std::complex&lt;T&gt;&amp; rhs );
}}
{{dcl rev multi|num=10|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator/( const std::complex&lt;T&gt;&amp; lhs,
                           const std::complex&lt;T&gt;&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator/( const std::complex&lt;T&gt;&amp; lhs,
                                     const std::complex&lt;T&gt;&amp; rhs );
}}
{{dcl rev multi|num=11|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator/( const std::complex&lt;T&gt;&amp; lhs,
                           const T&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator/( const std::complex&lt;T&gt;&amp; lhs,
                                     const T&amp; rhs );
}}
{{dcl rev multi|num=12|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator/( const T&amp; lhs,
                           const std::complex&lt;T&gt;&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator/( const T&amp; lhs,
                                     const std::complex&lt;T&gt;&amp; rhs );
}}
{{dcl end}}

Implements the binary operators for complex arithmetic and for mixed complex/scalar arithmetic. Scalar arguments are treated as complex numbers with the real part equal to the argument and the imaginary part set to zero.

@1-3@ Returns the sum of its arguments.
@4-6@ Returns the result of subtracting {{c|rhs}} from {{c|lhs}}.
@7-9@ Multiplies its arguments.
@10-12@ Divides {{c|lhs}} by {{c|rhs}}.

===Parameters===
{{par begin}}
{{par|lhs, rhs|the arguments: either both complex numbers or one complex and one scalar of matching type ({{c|float}}, {{c|double}}, {{c|long double}})}}
{{par end}}

===Return value===
@1-3@ {{c|1= std::complex&lt;T&gt;(lhs) += rhs}}
@4-6@ {{c|1= std::complex&lt;T&gt;(lhs) -= rhs}}
@7-9@ {{c|1= std::complex&lt;T&gt;(lhs) *= rhs}}
@10-12@ {{c|1= std::complex&lt;T&gt;(lhs) /= rhs}}

===Notes===
Because {{lt|cpp/language/template argument deduction}} does not consider implicit conversions, these operators cannot be used for mixed integer/complex arithmetic. In all cases, the scalar must have the same type as the underlying type of the complex number.

The GCC flag "-fcx-limited-range" (included by "-ffast-math") changes the behavior of complex multiply/division by removing checks for floating point edge cases. This impacts loop vectorization.

===Example===
{{example
|code=
#include &lt;complex&gt;
#include &lt;iostream&gt;

int main()
{
    std::complex&lt;double&gt; c2(2.0, 0.0);
    std::complex&lt;double&gt; ci(0.0, 1.0);

    std::cout &lt;&lt; ci &lt;&lt; " + " &lt;&lt; c2 &lt;&lt; " = " &lt;&lt; ci + c2 &lt;&lt; '\n'
              &lt;&lt; ci &lt;&lt; " * " &lt;&lt; ci &lt;&lt; " = " &lt;&lt; ci * ci &lt;&lt; '\n'
              &lt;&lt; ci &lt;&lt; " + " &lt;&lt; c2 &lt;&lt; " / " &lt;&lt; ci &lt;&lt; " = " &lt;&lt; ci + c2 / ci &lt;&lt; '\n'
              &lt;&lt; 1  &lt;&lt; " / " &lt;&lt; ci &lt;&lt; " = " &lt;&lt; 1.0 / ci &lt;&lt; '\n';

//    std::cout &lt;&lt; 1.0f / ci; // compile error
//    std::cout &lt;&lt; 1 / ci; // compile error
}
|output=
(0,1) + (2,0) = (2,1)
(0,1) * (0,1) = (-1,0)
(0,1) + (2,0) / (0,1) = (0,-1)
1 / (0,1) = (0,-1)
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc operator_arith}}
{{dsc inc|cpp/numeric/complex/dsc operator_arith2}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|acosh{{small|(std::complex)}}}}
{{cpp/numeric/complex/navbar}}
{{ddcl|header=complex|since=c++11|1=
template&lt; class T &gt; 
complex&lt;T&gt; acosh( const complex&lt;T&gt;&amp; z );
}}

Computes complex arc hyperbolic cosine of a complex value {{c|z}} with branch cut at values less than 1 along the real axis.

===Parameters===
{{par begin}}
{{par|z|complex value}}
{{par end}}

===Return value===
If no errors occur, the complex arc hyperbolic cosine of {{c|z}} is returned, in the range of a half-strip of nonnegative values along the real axis and in the interval {{math|[−iπ; +iπ]}} along the imaginary axis.

===Error handling and special values===
Errors are reported consistent with {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic,
* {{c|std::acosh(std::conj(z)) {{==}} std::conj(std::acosh(z))}}.
* If {{c|z}} is {{tt|(±0,+0)}}, the result is {{tt|(+0,π/2)}}.
* If {{c|z}} is {{tt|(x,+∞)}} (for any finite x), the result is {{tt|(+∞,π/2)}}.
* If {{c|z}} is {{tt|(x,NaN)}} (for any&lt;ref&gt;per {{stddoc|n1892.htm#dr_471|C11 DR471|lang=c}}, this holds for non-zero x only. If {{c|z}} is {{tt|(0,NaN)}}, the result should be {{tt|(NaN,π/2)}}.&lt;/ref&gt; finite x), the result is {{tt|(NaN,NaN)}} and {{lc|FE_INVALID}} may be raised.
* If {{c|z}} is {{tt|(-∞,y)}} (for any positive finite y), the result is {{tt|(+∞,π)}}.
* If {{c|z}} is {{tt|(+∞,y)}} (for any positive finite y), the result is {{tt|(+∞,+0)}}.
* If {{c|z}} is {{tt|(-∞,+∞)}}, the result is {{tt|(+∞,3π/4)}}.
* If {{c|z}} is {{tt|(±∞,NaN)}}, the result is {{tt|(+∞,NaN)}}.
* If {{c|z}} is {{tt|(NaN,y)}} (for any finite y), the result is {{tt|(NaN,NaN)}} and {{lc|FE_INVALID}} may be raised.
* If {{c|z}} is {{tt|(NaN,+∞)}}, the result is {{tt|(+∞,NaN)}}.
* If {{c|z}} is {{tt|(NaN,NaN)}}, the result is {{tt|(NaN,NaN)}}.
&lt;references/&gt;

===Notes===
Although the C++ standard names this function "complex arc hyperbolic cosine", the inverse functions of the hyperbolic functions are the area functions. Their argument is the area of a hyperbolic sector, not an arc. The correct name is "complex inverse hyperbolic cosine", and, less common, "complex area hyperbolic cosine".

Inverse hyperbolic cosine is a multivalued function and requires a branch cut on the complex plane. The branch cut is conventionally placed at the line segment {{math|(-∞,+1)}} of the real axis.

The mathematical definition of the principal value of the inverse hyperbolic cosine is {{math|acosh z {{=}} ln(z + {{mrad|z+1}} {{mrad|z-1}})}}.

For any {{c|z}}, {{math|acosh(z) {{=}} {{mfrac|{{mrad|z-1}}|{{mrad|1-z}}}} acos(z) }}, or simply {{math|i acos(z)}} in the upper half of the complex plane.

===Example===
{{example
|code=
#include &lt;complex&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; std::fixed;
    std::complex&lt;double&gt; z1(0.5, 0);
    std::cout &lt;&lt; "acosh" &lt;&lt; z1 &lt;&lt; " = " &lt;&lt; std::acosh(z1) &lt;&lt; '\n';

    std::complex&lt;double&gt; z2(0.5, -0.0);
    std::cout &lt;&lt; "acosh" &lt;&lt; z2 &lt;&lt; " (the other side of the cut) = "
              &lt;&lt; std::acosh(z2) &lt;&lt; '\n';

    // in upper half-plane, acosh = i acos 
    std::complex&lt;double&gt; z3(1, 1), i(0, 1);
    std::cout &lt;&lt; "acosh" &lt;&lt; z3 &lt;&lt; " = " &lt;&lt; std::acosh(z3) &lt;&lt; '\n'
              &lt;&lt; "i*acos" &lt;&lt; z3 &lt;&lt; " = " &lt;&lt; i*std::acos(z3) &lt;&lt; '\n';
}
|output=
acosh(0.500000,0.000000) = (0.000000,-1.047198)
acosh(0.500000,-0.000000) (the other side of the cut) = (0.000000,1.047198)
acosh(1.000000,1.000000) = (1.061275,0.904557)
i*acos(1.000000,1.000000) = (1.061275,0.904557)
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc acos}}
{{dsc inc|cpp/numeric/complex/dsc asinh}}
{{dsc inc|cpp/numeric/complex/dsc atanh}}
{{dsc inc|cpp/numeric/complex/dsc cosh}}
{{dsc inc|cpp/numeric/math/dsc acosh}}
{{dsc see c|c/numeric/complex/cacosh}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
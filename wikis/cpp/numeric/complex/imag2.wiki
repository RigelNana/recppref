{{cpp/title|imag{{small|(std::complex)}}}}
{{cpp/numeric/complex/navbar}}
{{dcl begin}}
{{dcl header|complex}}
{{dcl rev multi|num=1|dcl1=
template&lt; class T &gt; 
T imag( const std::complex&lt;T&gt;&amp; z );
|since2=c++14|dcl2=
template&lt; class T &gt; 
constexpr T imag( const std::complex&lt;T&gt;&amp; z );
}}
{{dcl h|[[#Notes|Additional overloads]] {{mark since c++11}}}}
{{dcl header|complex}}
{{dcl rev multi|num=A|dcl1=
float       imag( float f );
double      imag( double f );
long double imag( long double f );
|since2=c++14|dcl2=
constexpr float       imag( float f );
constexpr double      imag( double f );
constexpr long double imag( long double f );
|since3=c++23|dcl3=
template&lt; class FloatingPoint &gt;
FloatingPoint imag( FloatingPoint f );
}}
{{dcl rev multi|num=B|dcl1=
template&lt; class Integer &gt; 
double imag( Integer i );
|since2=c++14|dcl2=
template&lt; class Integer &gt; 
constexpr double imag( Integer i );
}}
{{dcl end}}

@1@ Returns the imaginary part of the complex number {{c|z}}, i.e. {{c|z.imag()}}.

{{rrev|since=c++11|
@A,B@ Additional overloads are provided for all integer and floating-point types, which are treated as complex numbers with zero imaginary part.
}}

===Parameters===
{{par begin}}
{{par|z|complex value}}
{{par|f|floating-point value}}
{{par|i|integer value}}
{{par end}}

===Return value===
@1@ The imaginary part of {{c|z}}.
@A@ {{c|decltype(f){}&lt;!----&gt;}} (zero).
@B@ {{c|0.0}}.

===Notes===
{{cpp/numeric/complex/additional overload note|imag}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc imag}}
{{dsc inc|cpp/numeric/complex/dsc real2}}
{{dsc see c|c/numeric/complex/cimag}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|sqrt&lt;small&gt;(std::complex)&lt;/small&gt;}}
{{cpp/numeric/complex/navbar}}
{{dcl begin}}
{{dcl header|complex}}
{{dcl|1=
template&lt; class T &gt;
std::complex&lt;T&gt; sqrt( const std::complex&lt;T&gt;&amp; z );
}}
{{dcl end}}

Computes the square root of the complex number {{c|z}} with a branch cut along the negative real axis.

===Parameters===
{{par begin}}
{{par|z|complex number to take the square root of}}
{{par end}}

===Return value===
If no errors occur, returns the square root of {{c|z}}, in the range of the right half-plane, including the imaginary axis ({{math|[0; +∞)}} along the real axis and {{math|(−∞; +∞)}} along the imaginary axis).

===Error handling and special values===
Errors are reported consistent with {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic,
* The function is continuous onto the branch cut taking into account the sign of imaginary part
* {{c|std::sqrt(std::conj(z)) {{==}} std::conj(std::sqrt(z))}}
* If {{c|z}} is {{tt|(±0,+0)}}, the result is {{tt|(+0,+0)}}
* If {{c|z}} is {{tt|(x,+∞)}}, the result is {{tt|(+∞,+∞)}} even if x is NaN
* If {{c|z}} is {{tt|(x,NaN)}}, the result is {{tt|(NaN,NaN)}} (unless x is ±∞) and  {{lc|FE_INVALID}} may be raised
* If {{c|z}} is {{tt|(-∞,y)}}, the result is {{tt|(+0,+∞)}} for finite positive y
* If {{c|z}} is {{tt|(+∞,y)}}, the result is {{tt|(+∞,+0)}} for finite positive y
* If {{c|z}} is {{tt|(-∞,NaN)}}, the result is {{tt|(NaN,∞)}} (sign of imaginary part unspecified)
* If {{c|z}} is {{tt|(+∞,NaN)}}, the result is {{tt|(+∞,NaN)}}
* If {{c|z}} is {{tt|(NaN,y)}}, the result is {{tt|(NaN,NaN)}} and {{lc|FE_INVALID}} may be raised
* If {{c|z}} is {{tt|(NaN,NaN)}}, the result is {{tt|(NaN,NaN)}}

===Notes===
The semantics of this function are intended to be consistent with the C function {{ltt|c/numeric/complex/csqrt}}.

===Example===
{{example
|code=
#include &lt;complex&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; "Square root of -4 is "
              &lt;&lt; std::sqrt(std::complex&lt;double&gt;(-4.0, 0.0)) &lt;&lt; '\n'
              &lt;&lt; "Square root of (-4,-0) is "
              &lt;&lt; std::sqrt(std::complex&lt;double&gt;(-4.0, -0.0))
              &lt;&lt; " (the other side of the cut)\n";
}
|output=
Square root of -4 is (0,2)
Square root of (-4,-0) is (0,-2) (the other side of the cut)
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2597|std=C++98|before=specification mishandles signed zero imaginary parts|after=erroneous requirement removed}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc pow}}
{{dsc inc|cpp/numeric/math/dsc sqrt}}
{{dsc inc|cpp/numeric/valarray/dsc sqrt}}
{{dsc see c|c/numeric/complex/csqrt}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
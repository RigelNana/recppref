{{cpp/title|sinh{{small|(std::complex)}}}}
{{cpp/numeric/complex/navbar}}
{{ddcl|header=complex|since=c++11|1=
template&lt; class T &gt; 
complex&lt;T&gt; sinh( const complex&lt;T&gt;&amp; z );
}}

Computes complex hyperbolic sine of a complex value {{c|z}}. 

===Parameters===
{{par begin}}
{{par|z|complex value}}
{{par end}}

===Return value===

If no errors occur, complex hyperbolic sine of {{c|z}} is returned.

===Error handling and special values===
Errors are reported consistent with {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic,
* {{c|std::sinh(std::conj(z)) {{==}} std::conj(std::sinh(z))}}
* {{c|std::sinh(z) {{==}} -std::sinh(-z)}}
* If {{c|z}} is {{tt|(+0,+0)}}, the result is {{tt|(+0,+0)}}
* If {{c|z}} is {{tt|(+0,+∞)}}, the result is {{tt|(±0,NaN)}} (the sign of the real part is unspecified) and {{lc|FE_INVALID}} is raised
* If {{c|z}} is {{tt|(+0,NaN)}}, the result is {{tt|(±0,NaN)}}
* If {{c|z}} is {{tt|(x,+∞)}} (for any positive finite x), the result is {{tt|(NaN,NaN)}} and {{lc|FE_INVALID}} is raised
* If {{c|z}} is {{tt|(x,NaN)}} (for any positive finite x), the result is {{tt|(NaN,NaN)}} and {{lc|FE_INVALID}} may be raised
* If {{c|z}} is {{tt|(+∞,+0)}}, the result is {{tt|(+∞,+0)}}
* If {{c|z}} is {{tt|(+∞,y)}} (for any positive finite y), the result is {{tt|+∞cis(y)}}
* If {{c|z}} is {{tt|(+∞,+∞)}}, the result is {{tt|(±∞,NaN)}} (the sign of the real part is  unspecified) and {{lc|FE_INVALID}} is raised
* If {{c|z}} is {{tt|(+∞,NaN)}}, the result is {{tt|(±∞,NaN)}} (the sign of the real part is  unspecified)
* If {{c|z}} is {{tt|(NaN,+0)}}, the result is {{tt|(NaN,+0)}}
* If {{c|z}} is {{tt|(NaN,y)}} (for any finite nonzero y), the result is {{tt|(NaN,NaN)}} and {{lc|FE_INVALID}} may be raised
* If {{c|z}} is {{tt|(NaN,NaN)}}, the result is {{tt|(NaN,NaN)}}

where {{math|cis(y)}} is {{math|cos(y) + i sin(y)}}.

===Notes===
Mathematical definition of hyperbolic sine is {{math|sinh z {{=}} {{mfrac|e{{su|p=z}}-e{{su|p=-z}}|2}}}}.

Hyperbolic sine is an entire function in the complex plane and has no branch cuts. It is periodic with respect to the imaginary component, with period {{math|2&amp;pi;i}}.

===Example===
{{example|
|code=
#include &lt;cmath&gt;
#include &lt;complex&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; std::fixed;
    std::complex&lt;double&gt; z(1.0, 0.0); // behaves like real sinh along the real line
    std::cout &lt;&lt; "sinh" &lt;&lt; z &lt;&lt; " = " &lt;&lt; std::sinh(z)
              &lt;&lt; " (sinh(1) = " &lt;&lt; std::sinh(1) &lt;&lt; ")\n";

    std::complex&lt;double&gt; z2(0.0, 1.0); // behaves like sine along the imaginary line
    std::cout &lt;&lt; "sinh" &lt;&lt; z2 &lt;&lt; " = " &lt;&lt; std::sinh(z2)
              &lt;&lt; " ( sin(1) = " &lt;&lt; std::sin(1) &lt;&lt; ")\n";
}
|output=
sinh(1.000000,0.000000) = (1.175201,0.000000) (sinh(1) = 1.175201)
sinh(0.000000,1.000000) = (0.000000,0.841471) ( sin(1) = 0.841471)
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc cosh}}
{{dsc inc|cpp/numeric/complex/dsc tanh}}
{{dsc inc|cpp/numeric/complex/dsc asinh}}
{{dsc inc|cpp/numeric/math/dsc sinh}}
{{dsc inc|cpp/numeric/valarray/dsc sinh}}
{{dsc see c|c/numeric/complex/csinh}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
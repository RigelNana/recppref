{{title|operator&lt;&lt;,&gt;&gt;{{petty|(std::complex)}}}}
{{cpp/numeric/complex/navbar}}
{{dcl begin}}
{{dcl header|complex}}
{{dcl|num=1|
template&lt; class T, class CharT, class Traits &gt;
std::basic_ostream&lt;CharT, Traits&gt;&amp;
    operator&lt;&lt;( std::basic_ostream&lt;CharT, Traits&gt;&amp; os, const std::complex&lt;T&gt;&amp; x );
}}
{{dcl|num=2|
template&lt; class T, class CharT, class Traits &gt;
std::basic_istream&lt;CharT, Traits&gt;&amp;
    operator&gt;&gt;( std::basic_istream&lt;CharT, Traits&gt;&amp; is, std::complex&lt;T&gt;&amp; x );
}}
{{dcl end}}

@1@ Writes to {{c|os}} the complex number in the form {{c|(real, imaginary)}}.
@2@ Reads a complex number from {{c|is}}. The supported formats are
*{{c|real}}
*{{c|(real)}}
*{{c|(real, imaginary)}}
where the input for {{c|real}} and {{c|imaginary}} must be convertible to {{c|T}}.
If an error occurs calls {{c|is.setstate(ios_base::failbit)}}.

===Exceptions===
May throw {{lc|std::ios_base::failure}} on stream errors.

===Parameters===
{{par begin}}
{{par|os|a character output stream}}
{{par|is|a character input stream}}
{{par|x|the complex number to be inserted or extracted}}
{{par end}}

===Return value===
@1@ {{c|os}}

@2@ {{c|is}}

===Notes===
@1@ As the comma may be used in the current locale as decimal separator, the output may be ambiguous. This can be solved with {{lc|std::showpoint}} which forces the decimal separator to be visible.
@2@ The input is performed as a series of simple formatted extractions. Whitespace skipping is the same for each of them.

===Possible implementation===
{{eq fun
|1=
template&lt;class T, class CharT, class Traits&gt;
basic_ostream&lt;CharT, Traits&gt;&amp;
    operator&lt;&lt;(basic_ostream&lt;CharT, Traits&gt;&amp; o, const complex&lt;T&gt;&amp; x)
{
    basic_ostringstream&lt;CharT, Traits&gt; s;
    s.flags(o.flags());
    s.imbue(o.getloc());
    s.precision(o.precision());
    s &lt;&lt; '(' &lt;&lt; x.real() &lt;&lt; ',' &lt;&lt; x.imag() &lt;&lt; ')';
    return o &lt;&lt; s.str();
}
}}

===Example===
{{example
|code=
#include &lt;complex&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; std::complex&lt;double&gt; {3.14, 2.71} &lt;&lt; '\n';
}
|p=true
|output=(3.14,2.71)
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
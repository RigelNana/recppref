{{cpp/title|acos{{small|(std::complex)}}}}
{{cpp/numeric/complex/navbar}}
{{ddcl|header=complex|since=c++11|1=
template&lt; class T &gt; 
complex&lt;T&gt; acos( const complex&lt;T&gt;&amp; z );
}}

Computes complex arc cosine of a complex value {{c|z}}. Branch cuts exist outside the interval {{math|[−1, +1]}} along the real axis.

===Parameters===
{{par begin}}
{{par|z|complex value}}
{{par end}}

===Return value===
If no errors occur, complex arc cosine of {{c|z}} is returned, in the range of a strip unbounded along the imaginary axis and in the interval {{math|[0, +π]}} along the real axis.

===Error handling and special values===
Errors are reported consistent with {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic,
* {{c|std::acos(std::conj(z)) {{==}} std::conj(std::acos(z))}}
* If {{c|z}} is {{tt|(±0,+0)}}, the result is {{tt|(π/2,-0)}}
* If {{c|z}} is {{tt|(±0,NaN)}}, the result is {{tt|(π/2,NaN)}}
* If {{c|z}} is {{tt|(x,+∞)}} (for any finite x), the result is {{tt|(π/2,-∞)}}
* If {{c|z}} is {{tt|(x,NaN)}} (for any nonzero finite x), the result is {{tt|(NaN,NaN)}} and {{lc|FE_INVALID}} may be raised.
* If {{c|z}} is {{tt|(-∞,y)}} (for any positive finite y), the result is {{tt|(π,-∞)}}
* If {{c|z}} is {{tt|(+∞,y)}} (for any positive finite y), the result is {{tt|(+0,-∞)}}
* If {{c|z}} is {{tt|(-∞,+∞)}}, the result is {{tt|(3π/4,-∞)}}
* If {{c|z}} is {{tt|(+∞,+∞)}}, the result is {{tt|(π/4,-∞)}}
* If {{c|z}} is {{tt|(±∞,NaN)}}, the result is {{tt|(NaN,±∞)}} (the sign of the imaginary part is unspecified)
* If {{c|z}} is {{tt|(NaN,y)}} (for any finite y), the result is {{tt|(NaN,NaN)}} and {{lc|FE_INVALID}} may be raised
* If {{c|z}} is {{tt|(NaN,+∞)}}, the result is {{tt|(NaN,-∞)}}
* If {{c|z}} is {{tt|(NaN,NaN)}}, the result is {{tt|(NaN,NaN)}}

===Notes===
Inverse cosine (or arc cosine) is a multivalued function and requires a branch cut on the complex plane. The branch cut is conventionally placed at the line segments {{math|(-∞,-1)}} and {{math|(1,∞)}} of the real axis.

The mathematical definition of the principal value of arc cosine is {{math|acos z {{=}} {{mfrac|1|2}}π + ''i''ln(''i''z + {{mrad|1-z{{su|p=2}}}})}}.

For any {{c|z}}, {{math|acos(z) {{=}} π - acos(-z)}}.

===Example===
{{example|
|code=
#include &lt;cmath&gt;
#include &lt;complex&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; std::fixed;
    std::complex&lt;double&gt; z1(-2.0, 0.0);
    std::cout &lt;&lt; "acos" &lt;&lt; z1 &lt;&lt; " = " &lt;&lt; std::acos(z1) &lt;&lt; '\n';

    std::complex&lt;double&gt; z2(-2.0, -0.0);
    std::cout &lt;&lt; "acos" &lt;&lt; z2 &lt;&lt; " (the other side of the cut) = "
              &lt;&lt; std::acos(z2) &lt;&lt; '\n';

    // for any z, acos(z) = pi - acos(-z)
    const double pi = std::acos(-1);
    std::complex&lt;double&gt; z3 = pi - std::acos(z2);
    std::cout &lt;&lt; "cos(pi - acos" &lt;&lt; z2 &lt;&lt; ") = " &lt;&lt; std::cos(z3) &lt;&lt; '\n';
}
|output=
acos(-2.000000,0.000000) = (3.141593,-1.316958)
acos(-2.000000,-0.000000) (the other side of the cut) = (3.141593,1.316958)
cos(pi - acos(-2.000000,-0.000000)) = (2.000000,0.000000)
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc asin}}
{{dsc inc|cpp/numeric/complex/dsc atan}}
{{dsc inc|cpp/numeric/complex/dsc cos}}
{{dsc inc|cpp/numeric/math/dsc acos}}
{{dsc inc|cpp/numeric/valarray/dsc acos}}
{{dsc see c|c/numeric/complex/cacos}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/numeric/complex/title|1=operator+=,-=,*=,/=}}
{{cpp/numeric/complex/navbar}}
{{dcl begin}}
{{dcl h|Primary template {{tt|complex&lt;T&gt;}}}}
{{dcl rev multi | num=1 | until1=c++20 | dcl1=
complex&amp; operator+=( const T&amp; other );
|since2=c++20|dcl2=
constexpr complex&amp; operator+=( const T&amp; other );
}}
{{dcl rev multi| num=2 | until1=c++20 | dcl1=
complex&amp; operator-=( const T&amp; other );
|since2=c++20|dcl2=
constexpr complex&amp; operator-=( const T&amp; other );
}}
{{dcl rev multi| num=3 | until1=c++20 | dcl1=
complex&amp; operator*=( const T&amp; other );
|since2=c++20|dcl2=
constexpr complex&amp; operator*=( const T&amp; other );
}}
{{dcl rev multi| num=4 | until1=c++20 | dcl1=
complex&amp; operator/=( const T&amp; other );
|since2=c++20|dcl2=
constexpr complex&amp; operator/=( const T&amp; other );
}}

{{dcl h|Specialization {{tt|complex&lt;float&gt;}}}}
{{dcl rev multi | num=1 | until1=c++20 | dcl1=
complex&amp; operator+=( float other );
|since2=c++20|dcl2=
constexpr complex&amp; operator+=( float other );
}}
{{dcl rev multi| num=2 | until1=c++20 | dcl1=
complex&amp; operator-=( float other );
|since2=c++20|dcl2=
constexpr complex&amp; operator-=( float other );
}}
{{dcl rev multi| num=3 | until1=c++20 | dcl1=
complex&amp; operator*=( float other );
|since2=c++20|dcl2=
constexpr complex&amp; operator*=( float other );
}}
{{dcl rev multi| num=4 | until1=c++20 | dcl1=
complex&amp; operator/=( float other );
|since2=c++20|dcl2=
constexpr complex&amp; operator/=( float other );
}}

{{dcl h|Specialization {{tt|complex&lt;double&gt;}}}}
{{dcl rev multi | num=1 | until1=c++20 | dcl1=
complex&amp; operator+=( double other );
|since2=c++20|dcl2=
constexpr complex&amp; operator+=( double other );
}}
{{dcl rev multi| num=2 | until1=c++20 | dcl1=
complex&amp; operator-=( double other );
|since2=c++20|dcl2=
constexpr complex&amp; operator-=( double other );
}}
{{dcl rev multi| num=3 | until1=c++20 | dcl1=
complex&amp; operator*=( double other );
|since2=c++20|dcl2=
constexpr complex&amp; operator*=( double other );
}}
{{dcl rev multi| num=4 | until1=c++20 | dcl1=
complex&amp; operator/=( double other );
|since2=c++20|dcl2=
constexpr complex&amp; operator/=( double other );
}}

{{dcl h|Specialization {{tt|complex&lt;long double&gt;}}}}
{{dcl rev multi | num=1 | until1=c++20 | dcl1=
complex&amp; operator+=( long double other );
|since2=c++20|dcl2=
constexpr complex&amp; operator+=( long double other );
}}
{{dcl rev multi| num=2 | until1=c++20 | dcl1=
complex&amp; operator-=( long double other );
|since2=c++20|dcl2=
constexpr complex&amp; operator-=( long double other );
}}
{{dcl rev multi| num=3 | until1=c++20 | dcl1=
complex&amp; operator*=( long double other );
|since2=c++20|dcl2=
constexpr complex&amp; operator*=( long double other );
}}
{{dcl rev multi| num=4 | until1=c++20 | dcl1=
complex&amp; operator/=( long double other );
|since2=c++20|dcl2=
constexpr complex&amp; operator/=( long double other );
}}

{{dcl h|All specializations}}
{{dcl rev multi| num=5 | until1=c++20 | dcl1=
template&lt;class X&gt;
complex&amp; operator+=( const std::complex&lt;X&gt;&amp; other );
|since2=c++20|dcl2=
template&lt;class X&gt;
constexpr complex&amp; operator+=( const std::complex&lt;X&gt;&amp; other );
}}
{{dcl rev multi| num=6 | until1=c++20 | dcl1=
template&lt;class X&gt;
complex&amp; operator-=( const std::complex&lt;X&gt;&amp; other );
|since2=c++20|dcl2=
template&lt;class X&gt;
constexpr complex&amp; operator-=( const std::complex&lt;X&gt;&amp; other );
}}
{{dcl rev multi| num=7 | until1=c++20 | dcl1=
template&lt;class X&gt;
complex&amp; operator*=( const std::complex&lt;X&gt;&amp; other );
|since2=c++20|dcl2=
template&lt;class X&gt;
constexpr complex&amp; operator*=( const std::complex&lt;X&gt;&amp; other );
}}
{{dcl rev multi| num=8 | until1=c++20 | dcl1=
template&lt;class X&gt;
complex&amp; operator/=( const std::complex&lt;X&gt;&amp; other );
|since2=c++20|dcl2=
template&lt;class X&gt;
constexpr complex&amp; operator/=( const std::complex&lt;X&gt;&amp; other );
}}
{{dcl end}}

Implements the compound assignment operators for complex arithmetic and for mixed complex/scalar arithmetic. Scalar arguments are treated as complex numbers with the real part equal to the argument and the imaginary part set to zero.

@1,5@ Adds {{tt|other}} to {{c|*this}}.
@2,6@ Subtracts {{tt|other}} from {{c|*this}}.
@3,7@ Multiplies {{c|*this}} by {{tt|other}}.
@4,8@ Divides {{c|*this}} by {{tt|other}}.

===Parameters===
{{par begin}}
{{par | other | a complex or scalar value of matching type ({{c|float}}, {{c|double}}, {{c|long double}})}}
{{par end}}

===Return value===
{{c|*this}}

===See also===
{{dsc begin}}
{{dsc inc | cpp/numeric/complex/dsc operator_arith2}}
{{dsc inc | cpp/numeric/complex/dsc operator_arith3}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
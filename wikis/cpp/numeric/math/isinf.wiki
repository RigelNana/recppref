{{cpp/numeric/math/unary_is|isinf
|description= Determines if the given floating-point number {{c|num}} is a positive or negative infinity.
|condition=is infinite
|note=
[https://gcc.gnu.org/wiki/FloatingPointMath GCC] and [https://clang.llvm.org/docs/UsersManual.html#controlling-floating-point-behavior Clang] support a {{tt|-ffinite-math}} option (additionally implied by {{tt|-ffast-math}}), which allows the respective compiler to assume the nonexistence of special IEEE-754 floating point values such as NaN, infinity, or negative zero. In other words, {{tt|std::isinf}} is assumed to always return {{c|false}} under this option.
}}

===Example===
{{example
|code=
#include &lt;cfloat&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;

int main()
{
    const double max = std::numeric_limits&lt;double&gt;::max();
    const double inf = std::numeric_limits&lt;double&gt;::infinity();

    std::cout &lt;&lt; std::boolalpha
              &lt;&lt; "isinf(NaN) = " &lt;&lt; std::isinf(NAN) &lt;&lt; '\n'
              &lt;&lt; "isinf(Inf) = " &lt;&lt; std::isinf(INFINITY) &lt;&lt; '\n'
              &lt;&lt; "isinf(max) = " &lt;&lt; std::isinf(max) &lt;&lt; '\n'
              &lt;&lt; "isinf(inf) = " &lt;&lt; std::isinf(inf) &lt;&lt; '\n'
              &lt;&lt; "isinf(0.0) = " &lt;&lt; std::isinf(0.0) &lt;&lt; '\n'
              &lt;&lt; "isinf(exp(800)) = " &lt;&lt; std::isinf(std::exp(800)) &lt;&lt; '\n'
              &lt;&lt; "isinf(DBL_MIN/2.0) = " &lt;&lt; std::isinf(DBL_MIN / 2.0) &lt;&lt; '\n';
}
|output=
isinf(NaN) = false
isinf(Inf) = true
isinf(max) = false
isinf(inf) = true
isinf(0.0) = false
isinf(exp(800)) = true
isinf(DBL_MIN/2.0) = false
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc fpclassify}}
{{dsc inc|cpp/numeric/math/dsc isfinite}}
{{dsc inc|cpp/numeric/math/dsc isnan}}
{{dsc inc|cpp/numeric/math/dsc isnormal}}
{{dsc see c|c/numeric/math/isinf}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
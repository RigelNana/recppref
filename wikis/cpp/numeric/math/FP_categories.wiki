{{title|FP_NORMAL, FP_SUBNORMAL, FP_ZERO, FP_INFINITE, FP_NAN}}
{{cpp/numeric/math/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl|since=c++11|
#define FP_NORMAL    /* implementation defined */
}}
{{dcl|since=c++11|
#define FP_SUBNORMAL /* implementation defined */
}}
{{dcl|since=c++11|
#define FP_ZERO      /* implementation defined */
}}
{{dcl|since=c++11|
#define FP_INFINITE  /* implementation defined */
}}
{{dcl|since=c++11|
#define FP_NAN       /* implementation defined */
}}
{{dcl end}}

The {{tt|FP_NORMAL}}, {{tt|FP_SUBNORMAL}}, {{tt|FP_ZERO}}, {{tt|FP_INFINITE}}, {{tt|FP_NAN}} macros each represent a distinct category of floating-point numbers. They all expand to an integer constant expression.

{{dsc begin}}
{{dsc hitem|Constant|Explanation}}
{{dsc|{{tt|FP_NORMAL}}|indicates that the value is ''normal'', i.e. not an infinity, subnormal, not-a-number or zero}}
{{dsc|{{tt|FP_SUBNORMAL}}|indicates that the value is ''subnormal''}}
{{dsc|{{tt|FP_ZERO}}|indicates that the value is positive or negative zero}}
{{dsc|{{tt|FP_INFINITE}}|indicates that the value is not representable by the underlying type (positive or negative infinity)}}
{{dsc|{{tt|FP_NAN}}|indicates that the value is not-a-number (NaN)}}
{{dsc end}}

===Example===
{{example|
|code=
#include &lt;cfloat&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;

auto show_classification(double x)
{
    switch (std::fpclassify(x))
    {
        case FP_INFINITE:
            return "Inf";
        case FP_NAN:
            return "NaN";
        case FP_NORMAL:
            return "normal";
        case FP_SUBNORMAL:
            return "subnormal";
        case FP_ZERO:
            return "zero";
        default:
            return "unknown";
    }
}

int main()
{
    std::cout &lt;&lt; "1.0/0.0 is " &lt;&lt; show_classification(1 / 0.0) &lt;&lt; '\n'
              &lt;&lt; "0.0/0.0 is " &lt;&lt; show_classification(0.0 / 0.0) &lt;&lt; '\n'
              &lt;&lt; "DBL_MIN/2 is " &lt;&lt; show_classification(DBL_MIN / 2) &lt;&lt; '\n'
              &lt;&lt; "-0.0 is " &lt;&lt; show_classification(-0.0) &lt;&lt; '\n'
              &lt;&lt; "1.0 is " &lt;&lt; show_classification(1.0) &lt;&lt; '\n';
}
|output=
1.0/0.0 is Inf
0.0/0.0 is NaN
DBL_MIN/2 is subnormal
-0.0 is zero
1.0 is normal
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc fpclassify}}
{{dsc see c|c/numeric/math/FP_categories|ntitle=floating point number categories}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
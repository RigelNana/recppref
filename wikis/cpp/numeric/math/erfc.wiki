{{cpp/title|erfc|erfcf|erfcl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=erfc
|param1=num
|constexpr_since=26
|desc=Computes the {{enwiki|Complementary error function|complementary error function}} of {{c|num}}, that is {{c|1.0 - std::erf(num)}}, but without loss of precision for large {{c|num}}.
}}

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur, value of the complementary error function of {{c|num}}, that is {{mathjax-or|\(\frac{2}{\sqrt{\pi} }\int_{num}^{\infty}{e^{-{t^2} }\mathsf{d}t}\)|{{mfrac|2|{{mrad|&amp;pi;}}}}{{minteg|num|∞|{{mexp|-t{{su|p=2}}}}d''t''}}}} or {{mathjax-or|\({\small 1-\operatorname{erf}(num)}\)|1-erf(num)}}, is returned.

If a range error occurs due to underflow, the correct result (after rounding) is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* If the argument is +∞, +0 is returned.
* If the argument is -∞, 2 is returned.
* If the argument is NaN, NaN is returned.

===Notes===
For the IEEE-compatible type {{c/core|double}}, underflow is guaranteed if {{c|num &gt; 26.55}}.

{{cpp/numeric/math/additional integer overload note|erfc}}

===Example===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;

double normalCDF(double x) // Phi(-∞, x) aka N(x)
{
    return std::erfc(-x / std::sqrt(2)) / 2;
}

int main()
{
    std::cout &lt;&lt; "normal cumulative distribution function:\n"
              &lt;&lt; std::fixed &lt;&lt; std::setprecision(2);
    for (double n = 0; n &lt; 1; n += 0.1)
        std::cout &lt;&lt; "normalCDF(" &lt;&lt; n &lt;&lt; ") = " &lt;&lt; 100 * normalCDF(n) &lt;&lt; "%\n";
    
    std::cout &lt;&lt; "special values:\n"
              &lt;&lt; "erfc(-Inf) = " &lt;&lt; std::erfc(-INFINITY) &lt;&lt; '\n'
              &lt;&lt; "erfc(Inf) = " &lt;&lt; std::erfc(INFINITY) &lt;&lt; '\n';
}
|output=
normal cumulative distribution function:
normalCDF(0.00) = 50.00%
normalCDF(0.10) = 53.98%
normalCDF(0.20) = 57.93%
normalCDF(0.30) = 61.79%
normalCDF(0.40) = 65.54%
normalCDF(0.50) = 69.15%
normalCDF(0.60) = 72.57%
normalCDF(0.70) = 75.80%
normalCDF(0.80) = 78.81%
normalCDF(0.90) = 81.59%
normalCDF(1.00) = 84.13%
special values:
erfc(-Inf) = 2.00
erfc(Inf) = 0.00
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc erf}}
{{dsc see c|c/numeric/math/erfc}}
{{dsc end}}

===External links===
{{eli|[https://mathworld.wolfram.com/Erfc.html Weisstein, Eric W. "Erfc."] From MathWorld &amp;mdash; A Wolfram Web Resource.}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
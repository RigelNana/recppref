{{cpp/title|fpclassify}}
{{cpp/numeric/math/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++11|dcl1=
int fpclassify( float num );
int fpclassify( double num );
int fpclassify( long double num );
|since2=c++23|dcl2=
constexpr int fpclassify( /* floating-point-type */ num );
}}
{{dcl h|[[#Notes|Additional overloads]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++11|notes={{mark constexpr since c++23}}|
template&lt; class Integer &gt;
int fpclassify( Integer num );
}}
{{dcl end}}

@1@ Categorizes floating point value {{c|num}} into the following categories: zero, subnormal, normal, infinite, NAN, or implementation-defined category.{{rev inl|since=c++23| The library provides overloads of {{tt|std::fpclassify}} for all cv-unqualified floating-point types as the type of the parameter {{c|num}}.}}
@A@ Additional overloads are provided for all integer types, which are treated as {{c/core|double}}.

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value}}
{{par end}}

===Return value===
one of {{lc|FP_INFINITE}}, {{lc|FP_NAN}}, {{lc|FP_NORMAL}}, {{lc|FP_SUBNORMAL}}, {{lc|FP_ZERO}} or implementation-defined type, specifying the category of {{c|num}}.

===Notes===
{{cpp/numeric/math/additional integer overload note|fpclassify}}

===Example===
{{example|
|code=
#include &lt;cfloat&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;

auto show_classification(double x)
{
    switch (std::fpclassify(x))
    {
        case FP_INFINITE:
            return "Inf";
        case FP_NAN:
            return "NaN";
        case FP_NORMAL:
            return "normal";
        case FP_SUBNORMAL:
            return "subnormal";
        case FP_ZERO:
            return "zero";
        default:
            return "unknown";
    }
}

int main()
{
    std::cout &lt;&lt; "1.0/0.0 is " &lt;&lt; show_classification(1 / 0.0) &lt;&lt; '\n'
              &lt;&lt; "0.0/0.0 is " &lt;&lt; show_classification(0.0 / 0.0) &lt;&lt; '\n'
              &lt;&lt; "DBL_MIN/2 is " &lt;&lt; show_classification(DBL_MIN / 2) &lt;&lt; '\n'
              &lt;&lt; "-0.0 is " &lt;&lt; show_classification(-0.0) &lt;&lt; '\n'
              &lt;&lt; "1.0 is " &lt;&lt; show_classification(1.0) &lt;&lt; '\n';
}
|output=
1.0/0.0 is Inf
0.0/0.0 is NaN
DBL_MIN/2 is subnormal
-0.0 is zero
1.0 is normal
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc isfinite}}
{{dsc inc|cpp/numeric/math/dsc isinf}}
{{dsc inc|cpp/numeric/math/dsc isnan}}
{{dsc inc|cpp/numeric/math/dsc isnormal}}
{{dsc inc|cpp/types/dsc numeric_limits}}
{{dsc see c|c/numeric/math/fpclassify}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
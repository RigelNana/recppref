{{cpp/title|nan|nanf|nanl}}
{{cpp/numeric/math/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl|since=c++11|num=1|
float       nanf( const char* arg );
}}
{{dcl|since=c++11|num=2|
double      nan ( const char* arg );
}}
{{dcl|since=c++11|num=3|
long double nanl( const char* arg );
}}
{{dcl end}}

Converts the character string {{c|arg}} into the corresponding quiet NaN value, as if by calling {{lc|std::strtof}}, {{lc|std::strtod}}, or {{lc|std::strtold}}, respectively.

@1@ The call {{box|{{c/core|std::nanf("}}{{spar|n-char-sequence}}{{c/core|")}}}}, where {{spar|n-char-sequence}} is a sequence of digits, ASCII letters, and underscores, is equivalent to the call {{box|{{c/core|std::strtof("NAN(}}{{spar|n-char-sequence}}{{c/core|)"}}{{c/core|, (char**)nullptr);}}}}.

@@ The call {{c|std::nanf("")}} is equivalent to the call {{c|std::strtof("NAN()", (char**)nullptr);}}.

@@ The call {{box|{{c/core|std::nanf("}}{{spar|string}}{{c/core|")}}}}, where {{spar|string}} is neither an {{spar|n-char-sequence}} nor an empty string, is equivalent to the call {{c|std::strtof("NAN", (char**)nullptr);}}.

@2@ Same as {{v|1}}, but calls {{lc|std::strtod}} instead of {{lc|std::strtof}}.
@3@ Same as {{v|1}}, but calls {{lc|std::strtold}} instead of {{lc|std::strtof}}.

===Parameters===
{{par begin}}
{{par|arg|narrow character string identifying the contents of a NaN}}
{{par end}}

===Return value===
The quiet NaN value that corresponds to the identifying string {{c|arg}} or zero if the implementation does not support quiet NaNs.

If the implementation supports IEEE floating-point arithmetic (IEC 60559), it also supports quiet NaNs.

===Error handling===
This function is not subject to any of the error conditions specified in {{ltt|cpp/numeric/math/math_errhandling}}.

===Example===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;cstdint&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;

int main()
{
    double f1 = std::nan("1");
    std::uint64_t f1n; std::memcpy(&amp;f1n, &amp;f1, sizeof f1);
    std::cout &lt;&lt; "nan(\"1\") = " &lt;&lt; f1 &lt;&lt; " (" &lt;&lt; std::hex &lt;&lt; f1n &lt;&lt; ")\n";
    
    double f2 = std::nan("2");
    std::uint64_t f2n; std::memcpy(&amp;f2n, &amp;f2, sizeof f2);
    std::cout &lt;&lt; "nan(\"2\") = " &lt;&lt; f2 &lt;&lt; " (" &lt;&lt; std::hex &lt;&lt; f2n &lt;&lt; ")\n";
}
|p=true
|output=
nan("1") = nan (7ff0000000000001)
nan("2") = nan (7ff0000000000002)
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc isnan}}
{{dsc inc|cpp/numeric/math/dsc NAN}}}
{{dsc inc|cpp/types/numeric_limits/dsc has_quiet_NaN}}
{{dsc inc|cpp/types/numeric_limits/dsc has_signaling_NaN}}
{{dsc inc|cpp/types/numeric_limits/dsc quiet_NaN}}
{{dsc inc|cpp/types/numeric_limits/dsc signaling_NaN}}
{{dsc see c|c/numeric/math/nan|nanf|nan|nanl}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
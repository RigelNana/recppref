{{cpp/title|acos|acosf|acosl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=acos
|param1=num
|constexpr_since=26
|desc=Computes the principal value of the arc cosine of {{c|num}}.
}}

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur, the arc cosine of {{c|num}} ({{math|arccos(num)}}) in the range {{math|[0, &amp;pi;]}}, is returned.

If a domain error occurs, an implementation-defined value is returned (NaN where supported).

If a range error occurs due to underflow, the correct result (after rounding) is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

Domain error occurs if {{c|num}} is outside the range {{closed range|-1.0|1.0}}.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* If the argument is {{math|+1}}, the value {{tt|+0}} is returned.
* If {{math|{{!}}num{{!}} &gt; 1}}, a domain error occurs and NaN is returned.
* if the argument is NaN, NaN is returned.

===Notes===
{{cpp/numeric/math/additional integer overload note|acos}}

===Example===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;

// #pragma STDC FENV_ACCESS ON

int main()
{
    std::cout &lt;&lt; "acos(-1) = " &lt;&lt; std::acos(-1) &lt;&lt; '\n'
              &lt;&lt; "acos(0.0) = " &lt;&lt; std::acos(0.0) &lt;&lt; '\n'
              &lt;&lt; "2*acos(0.0) = " &lt;&lt; 2 * std::acos(0) &lt;&lt; '\n'
              &lt;&lt; "acos(0.5) = " &lt;&lt; std::acos(0.5) &lt;&lt; '\n'
              &lt;&lt; "3*acos(0.5) = " &lt;&lt; 3 * std::acos(0.5) &lt;&lt; '\n'
              &lt;&lt; "acos(1) = " &lt;&lt; std::acos(1) &lt;&lt; '\n';
    
    // error handling
    errno = 0;
    std::feclearexcept(FE_ALL_EXCEPT);
    
    std::cout &lt;&lt; "acos(1.1) = " &lt;&lt; std::acos(1.1) &lt;&lt; '\n';
    
    if (errno == EDOM)
        std::cout &lt;&lt; "    errno == EDOM: " &lt;&lt; std::strerror(errno) &lt;&lt; '\n';
    if (std::fetestexcept(FE_INVALID))
        std::cout &lt;&lt; "    FE_INVALID raised" &lt;&lt; '\n';
}
|output=
acos(-1) = 3.14159
acos(0.0) = 1.5708
2*acos(0.0) = 3.14159
acos(0.5) = 1.0472
3*acos(0.5) = 3.14159
acos(1) = 0
acos(1.1) = nan
    errno == EDOM: Numerical argument out of domain
    FE_INVALID raised
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc asin}}
{{dsc inc|cpp/numeric/math/dsc atan}}
{{dsc inc|cpp/numeric/math/dsc atan2}}
{{dsc inc|cpp/numeric/math/dsc cos}}
{{dsc inc|cpp/numeric/complex/dsc acos}}
{{dsc inc|cpp/numeric/valarray/dsc acos}}
{{dsc see c|c/numeric/math/acos}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
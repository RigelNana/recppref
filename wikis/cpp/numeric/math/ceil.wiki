{{cpp/title|ceil|ceilf|ceill}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=ceil
|param1=num
|constexpr_since=23
|desc=Computes the least integer value not less than {{c|num}}.
}}

===Parameters===
{{par begin}}
{{par|num|floating point or integer value}}
{{par end}}

===Return value===
If no errors occur, the smallest integer value not less than {{c|num}}, that is {{math|⌈num⌉}}, is returned.

{{plot|left=Return value|bottom={{c|num}}|math-ceil.svg}}

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* The current [[cpp/numeric/fenv/FE_round|rounding mode]] has no effect.
* If {{c|num}} is ±∞, it is returned unmodified.
* If {{c|num}} is ±0, it is returned, unmodified.
* If {{c|num}} is NaN, NaN is returned.

===Notes===
{{lc|FE_INEXACT}} may be (but is not required to be) raised when rounding a non-integer finite value.

The largest representable floating-point values are exact integers in all standard floating-point formats, so this function never overflows on its own; however the result may overflow any integer type (including {{lc|std::intmax_t}}), when stored in an integer variable. It is for this reason that the return type is floating-point not integral.

This function (for {{c/core|double}} argument) behaves as if (except for the freedom to not raise {{lc|FE_INEXACT}}) implemented by the following code:
{{source|1=
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#pragma STDC FENV_ACCESS ON

double ceil(double x)
{
    int save_round = std::fegetround();
    std::fesetround(FE_UPWARD);
    double result = std::rint(x); // or std::nearbyint
    std::fesetround(save_round);
    return result;
}
}}

{{cpp/numeric/math/additional integer overload note|ceil}}

===Example===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; std::fixed
              &lt;&lt; "ceil(+2.4) = " &lt;&lt; std::ceil(+2.4) &lt;&lt; '\n'
              &lt;&lt; "ceil(-2.4) = " &lt;&lt; std::ceil(-2.4) &lt;&lt; '\n'
              &lt;&lt; "ceil(-0.0) = " &lt;&lt; std::ceil(-0.0) &lt;&lt; '\n'
              &lt;&lt; "ceil(-Inf) = " &lt;&lt; std::ceil(-INFINITY) &lt;&lt; '\n';
}
|output=
ceil(+2.4) = 3.000000
ceil(-2.4) = -2.000000
ceil(-0.0) = -0.000000
ceil(-Inf) = -inf
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc floor}}
{{dsc inc|cpp/numeric/math/dsc trunc}}
{{dsc inc|cpp/numeric/math/dsc round}}
{{dsc inc|cpp/numeric/math/dsc nearbyint}}
{{dsc inc|cpp/numeric/math/dsc rint}}
{{dsc see c|c/numeric/math/ceil}}
{{dsc end}}

===External links===
{{eli|[https://stackoverflow.com/a/2745086 Fast ceiling of an integer division] &amp;mdash; StackOverflow}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
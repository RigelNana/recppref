{{cpp/title|expm1|expm1f|expm1l}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=expm1
|param1=num
|constexpr_since=26
|desc=Computes the ''e'' ({{enwiki|E (mathematical_constant)|Euler's number}}, {{c/core|2.7182818...}}) raised to the given power {{c|num}}, minus {{c|1.0}}. This function is more accurate than the expression {{c|std::exp(num) - 1.0}} if {{c|num}} is close to zero.
}}

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur {{math|e{{su|p=num}}-1}} is returned.

If a range error due to overflow occurs, {{lc|HUGE_VAL|+HUGE_VAL}}, {{tt|+HUGE_VALF}}, or {{tt|+HUGE_VALL}} is returned.

If a range error occurs due to underflow, the correct result (after rounding) is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* If the argument is ±0, it is returned, unmodified.
* If the argument is -∞, -1 is returned.
* If the argument is +∞, +∞ is returned.
* If the argument is NaN, NaN is returned.

===Notes===
The functions {{tt|std::expm1}} and {{lc|std::log1p}} are useful for financial calculations, for example, when calculating small daily interest rates: {{math|(1+x){{su|p=n}}-1}} can be expressed as {{c|std::expm1(n * std::log1p(x))}}. These functions also simplify writing accurate inverse hyperbolic functions.

For IEEE-compatible type {{c/core|double}}, overflow is guaranteed if {{math|709.8 &lt; num}}.

{{cpp/numeric/math/additional integer overload note|expm1}}

===Example===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
// #pragma STDC FENV_ACCESS ON

int main()
{
    std::cout &lt;&lt; "expm1(1) = " &lt;&lt; std::expm1(1) &lt;&lt; '\n'
              &lt;&lt; "Interest earned in 2 days on $100, compounded daily at 1%\n"
              &lt;&lt; "    on a 30/360 calendar = "
              &lt;&lt; 100 * std::expm1(2 * std::log1p(0.01 / 360)) &lt;&lt; '\n'
              &lt;&lt; "exp(1e-16)-1 = " &lt;&lt; std::exp(1e-16) - 1
              &lt;&lt; ", but expm1(1e-16) = " &lt;&lt; std::expm1(1e-16) &lt;&lt; '\n';
    
    // special values
    std::cout &lt;&lt; "expm1(-0) = " &lt;&lt; std::expm1(-0.0) &lt;&lt; '\n'
              &lt;&lt; "expm1(-Inf) = " &lt;&lt; std::expm1(-INFINITY) &lt;&lt; '\n';
    
    // error handling
    errno = 0;
    std::feclearexcept(FE_ALL_EXCEPT);
    
    std::cout &lt;&lt; "expm1(710) = " &lt;&lt; std::expm1(710) &lt;&lt; '\n';
    
    if (errno == ERANGE)
        std::cout &lt;&lt; "    errno == ERANGE: " &lt;&lt; std::strerror(errno) &lt;&lt; '\n';
    if (std::fetestexcept(FE_OVERFLOW))
        std::cout &lt;&lt; "    FE_OVERFLOW raised\n";
}
|p=true
|output=
expm1(1) = 1.71828
Interest earned in 2 days on $100, compounded daily at 1%
    on a 30/360 calendar = 0.00555563
exp(1e-16)-1 = 0, but expm1(1e-16) = 1e-16
expm1(-0) = -0
expm1(-Inf) = -1
expm1(710) = inf
    errno == ERANGE: Result too large
    FE_OVERFLOW raised
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc exp}}
{{dsc inc|cpp/numeric/math/dsc exp2}}
{{dsc inc|cpp/numeric/math/dsc log1p}}
{{dsc see c|c/numeric/math/expm1}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
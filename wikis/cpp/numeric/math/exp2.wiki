{{cpp/title|exp2|exp2f|exp2l}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=exp2
|param1=num
|constexpr_since=26
|desc=Computes 2 raised to the given power {{c|num}}.
}}

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur, the base-''2'' exponential of {{c|num}} ({{math|2{{su|p=num}}}}) is returned.

If a range error due to overflow occurs, {{lc|HUGE_VAL|+HUGE_VAL}}, {{tt|+HUGE_VALF}}, or {{tt|+HUGE_VALL}} is returned.

If a range error occurs due to underflow, the correct result (after rounding) is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* If the argument is ±0, 1 is returned.
* If the argument is -∞, +0 is returned.
* If the argument is +∞, +∞ is returned.
* If the argument is NaN, NaN is returned.

===Notes===
{{cpp/numeric/math/additional integer overload note|exp2}}

For integral exponents, it may be preferable to use {{lc|std::ldexp}}.

===Example===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;

// #pragma STDC FENV_ACCESS ON

int main()
{
    std::cout &lt;&lt; "exp2(4) = " &lt;&lt; std::exp2(4) &lt;&lt; '\n'
              &lt;&lt; "exp2(0.5) = " &lt;&lt; std::exp2(0.5) &lt;&lt; '\n'
              &lt;&lt; "exp2(-4) = " &lt;&lt; std::exp2(-4) &lt;&lt; '\n';
    
    // special values
    std::cout &lt;&lt; "exp2(-0) = " &lt;&lt; std::exp2(-0.0) &lt;&lt; '\n'
              &lt;&lt; "exp2(-Inf) = " &lt;&lt; std::exp2(-INFINITY) &lt;&lt; '\n';
    
    // error handling
    errno = 0;
    std::feclearexcept(FE_ALL_EXCEPT);
    const double inf = std::exp2(1024);
    const bool is_range_error = errno == ERANGE;

    std::cout &lt;&lt; "exp2(1024) = " &lt;&lt; inf &lt;&lt; '\n';
    if (is_range_error)
        std::cout &lt;&lt; "    errno == ERANGE: " &lt;&lt; std::strerror(ERANGE) &lt;&lt; '\n';
    if (std::fetestexcept(FE_OVERFLOW))
        std::cout &lt;&lt; "    FE_OVERFLOW raised\n";
}
|p=true
|output=
exp2(4) = 16
exp2(0.5) = 1.41421
exp2(-4) = 0.0625
exp2(-0) = 1
exp2(-Inf) = 0
exp2(1024) = inf
    errno == ERANGE: Numerical result out of range
    FE_OVERFLOW raised
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc exp}}
{{dsc inc|cpp/numeric/math/dsc expm1}}
{{dsc inc|cpp/numeric/math/dsc ldexp}}
{{dsc inc|cpp/numeric/math/dsc log2}}
{{dsc see c|c/numeric/math/exp2}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
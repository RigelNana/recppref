{{cpp/title|log10|log10f|log10l}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=log10
|param1=num
|constexpr_since=26
|desc=Computes the {{enwiki|Common logarithm|common (base-''10'') logarithm}} of {{c|num}}.
}}

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur, the common (base-''10'') logarithm of {{c|num}} ({{math|log{{su|b=10}}(num)}} or {{math|lg(num)}}) is returned.

If a domain error occurs, an implementation-defined value is returned (NaN where supported).

If a pole error occurs, {{lc|HUGE_VAL|-HUGE_VAL}}, {{tt|-HUGE_VALF}}, or {{tt|-HUGE_VALL}} is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

Domain error occurs if {{c|num}} is less than zero.

Pole error may occur if {{c|num}} is zero.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* If the argument is ±0, -∞ is returned and {{lc|FE_DIVBYZERO}} is raised.
* If the argument is 1, +0 is returned.
* If the argument is negative, NaN is returned and {{lc|FE_INVALID}} is raised.
* If the argument is +∞, +∞ is returned.
* If the argument is NaN, NaN is returned.

===Notes===
{{cpp/numeric/math/additional integer overload note|log10}}

===Example===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
// #pragma STDC FENV_ACCESS ON

int main()
{
    std::cout &lt;&lt; "log10(1000) = " &lt;&lt; std::log10(1000) &lt;&lt; '\n'
              &lt;&lt; "log10(0.001) = " &lt;&lt; std::log10(0.001) &lt;&lt; '\n'
              &lt;&lt; "base-5 logarithm of 125 = "
              &lt;&lt; std::log10(125) / std::log10(5) &lt;&lt; '\n';
    
    // special values
    std::cout &lt;&lt; "log10(1) = " &lt;&lt; std::log10(1) &lt;&lt; '\n'
              &lt;&lt; "log10(+Inf) = " &lt;&lt; std::log10(INFINITY) &lt;&lt; '\n';
    
    // error handling
    errno = 0;
    std::feclearexcept(FE_ALL_EXCEPT);
    
    std::cout &lt;&lt; "log10(0) = " &lt;&lt; std::log10(0) &lt;&lt; '\n';
    
    if (errno == ERANGE)
        std::cout &lt;&lt; "    errno == ERANGE: " &lt;&lt; std::strerror(errno) &lt;&lt; '\n';
    if (std::fetestexcept(FE_DIVBYZERO))
        std::cout &lt;&lt; "    FE_DIVBYZERO raised\n";
}
|p=true
|output=
log10(1000) = 3
log10(0.001) = -3
base-5 logarithm of 125 = 3
log10(1) = 0
log10(+Inf) = inf
log10(0) = -inf
    errno == ERANGE: Numerical result out of range
    FE_DIVBYZERO raised
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc log}}
{{dsc inc|cpp/numeric/math/dsc log2}}
{{dsc inc|cpp/numeric/math/dsc log1p}}
{{dsc inc|cpp/numeric/complex/dsc log10}}
{{dsc inc|cpp/numeric/valarray/dsc log10}}
{{dsc see c|c/numeric/math/log10}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
{{cpp/title|rint|rintf|rintl|lrint|lrintf|lrintl|llrint|llrintf|llrintl}}
{{cpp/numeric/math/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl h|Rounding to floating-point types}}
{{dcl rev multi|num=1|since1=c++11|dcl1=
float       rint ( float num );
double      rint ( double num );
long double rint ( long double num );
|since2=c++23|dcl2=
/* floating-point-type */ rint( /* floating-point-type */ num );
}}
{{dcl|num=2|since=c++11|
float       rintf( float num );
}}
{{dcl|num=3|since=c++11|
long double rintl( long double num );
}}
{{dcl h|Rounding to {{c/core|long}}}}
{{dcl rev multi|num=4|since1=c++11|dcl1=
long lrint ( float num );
long lrint ( double num );
long lrint ( long double num );
|since2=c++23|dcl2=
long lrint ( /* floating-point-type */ num );
}}
{{dcl|num=5|since=c++11|
long lrintf( float num );
}}
{{dcl|num=6|since=c++11|
long lrintl( long double num );
}}
{{dcl h|Rounding to {{c/core|long long}}}}
{{dcl rev multi|num=7|since1=c++11|dcl1=
long long llrint ( float num );
long long llrint ( double num );
long long llrint ( long double num );
|since2=c++23|dcl2=
long long llrint ( /* floating-point-type */ num );
}}
{{dcl|num=8|since=c++11|
long long llrintf( float num );
}}
{{dcl|num=9|since=c++11|
long long llrintl( long double num );
}}
{{dcl h|[[#Notes|Additional overloads]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++11|
template&lt; class Integer &gt;
double rint( Integer num );
}}
{{dcl|num=B|since=c++11|
template&lt; class Integer &gt;
long lrint( Integer num );
}}
{{dcl|num=C|since=c++11|
template&lt; class Integer &gt;
long long llrint( Integer num );
}}
{{dcl end}}

@1-3@ Rounds the floating-point argument {{c|num}} to an integer value (in floating-point format), using the [[cpp/numeric/fenv/FE_round|current rounding mode]].{{rev inl|since=c++23| The library provides overloads of {{tt|std::rint}} for all cv-unqualified floating-point types as the type of the parameter {{c|num}}.}}
@4-9@ Rounds the floating-point argument {{c|num}} to an integer value, using the [[cpp/numeric/fenv/FE_round|current rounding mode]].{{rev inl|since=c++23| The library provides overloads of {{tt|std::lrint}} and {{tt|std::llrint}} for all cv-unqualified floating-point types as the type of the parameter {{c|num}}.}}
@A-C@ Additional overloads are provided for all integer types, which are treated as {{c/core|double}}.

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur, the nearest integer value to {{c|num}}, according to the [[cpp/numeric/fenv/FE_round|current rounding mode]], is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

If the result of {{tt|std::lrint}} or {{tt|std::llrint}} is outside the range representable by the return type, a domain error or a range error may occur.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
: For the {{tt|std::rint}} function:
* If {{c|num}} is ±∞, it is returned, unmodified.
* If {{c|num}} is ±0, it is returned, unmodified.
* If {{c|num}} is NaN, NaN is returned.
: For {{tt|std::lrint}} and {{tt|std::llrint}} functions:
* If {{c|num}} is ±∞, {{lc|FE_INVALID}} is raised and an implementation-defined value is returned.
* If the result of the rounding is outside the range of the return type, {{lc|FE_INVALID}} is raised and an implementation-defined value is returned.
* If {{c|num}} is NaN, {{lc|FE_INVALID}} is raised and an implementation-defined value is returned.

===Notes===
[https://pubs.opengroup.org/onlinepubs/9699919799/functions/lrint.html POSIX specifies] that all cases where {{tt|std::lrint}} or {{tt|std::llrint}} raise {{lc|FE_INEXACT}} are domain errors.

As specified in {{lc|math_errhandling}}, {{lc|FE_INEXACT}} may be (but isn't required to be on non-IEEE floating-point platforms) raised by {{tt|std::rint}} when rounding a non-integer finite value.

The only difference between {{tt|std::rint}} and {{lc|std::nearbyint}} is that {{lc|std::nearbyint}} never raises {{lc|FE_INEXACT}}.

The largest representable floating-point values are exact integers in all standard floating-point formats, so {{tt|std::rint}} never overflows on its own; however the result may overflow any integer type (including {{lc|std::intmax_t}}), when stored in an integer variable.

If the current rounding mode is:
* {{lc|FE_DOWNWARD}}, then {{tt|std::rint}} is equivalent to {{lc|std::floor}}.
* {{lc|FE_UPWARD}}, then {{tt|std::rint}} is equivalent to {{lc|std::ceil}}.
* {{lc|FE_TOWARDZERO}}, then {{tt|std::rint}} is equivalent to {{lc|std::trunc}}.
* {{lc|FE_TONEAREST}}, then {{tt|std::rint}} differs from {{lc|std::round}} in that halfway cases are rounded to even rather than away from zero.

{{cpp/numeric/math/additional integer overload note|rint}}

===Example===
{{example
|code=
#include &lt;cfenv&gt;
#include &lt;climits&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;
// #pragma STDC FENV_ACCESS ON
 
int main()
{
    std::fesetround(FE_TONEAREST);
    std::cout &lt;&lt; "Rounding to nearest (halfway cases to even):\n"
              &lt;&lt; "  rint(+2.3) = " &lt;&lt; std::rint(2.3) &lt;&lt; '\n'
              &lt;&lt; "  rint(+2.5) = " &lt;&lt; std::rint(2.5) &lt;&lt; '\n'
              &lt;&lt; "  rint(+3.5) = " &lt;&lt; std::rint(3.5) &lt;&lt; '\n'
              &lt;&lt; "  rint(-2.3) = " &lt;&lt; std::rint(-2.3) &lt;&lt; '\n'
              &lt;&lt; "  rint(-2.5) = " &lt;&lt; std::rint(-2.5) &lt;&lt; '\n'
              &lt;&lt; "  rint(-3.5) = " &lt;&lt; std::rint(-3.5) &lt;&lt; '\n';
 
    std::fesetround(FE_DOWNWARD);
    std::cout &lt;&lt; "Rounding down:\n"
              &lt;&lt; "  rint(+2.3) = " &lt;&lt; std::rint(2.3) &lt;&lt; '\n'
              &lt;&lt; "  rint(+2.5) = " &lt;&lt; std::rint(2.5) &lt;&lt; '\n'
              &lt;&lt; "  rint(+3.5) = " &lt;&lt; std::rint(3.5) &lt;&lt; '\n'
              &lt;&lt; "  rint(-2.3) = " &lt;&lt; std::rint(-2.3) &lt;&lt; '\n'
              &lt;&lt; "  rint(-2.5) = " &lt;&lt; std::rint(-2.5) &lt;&lt; '\n'
              &lt;&lt; "  rint(-3.5) = " &lt;&lt; std::rint(-3.5) &lt;&lt; '\n'
              &lt;&lt; "Rounding down with lrint:\n"
              &lt;&lt; "  lrint(+2.3) = " &lt;&lt; std::lrint(2.3) &lt;&lt; '\n'
              &lt;&lt; "  lrint(+2.5) = " &lt;&lt; std::lrint(2.5) &lt;&lt; '\n'
              &lt;&lt; "  lrint(+3.5) = " &lt;&lt; std::lrint(3.5) &lt;&lt; '\n'
              &lt;&lt; "  lrint(-2.3) = " &lt;&lt; std::lrint(-2.3) &lt;&lt; '\n'
              &lt;&lt; "  lrint(-2.5) = " &lt;&lt; std::lrint(-2.5) &lt;&lt; '\n'
              &lt;&lt; "  lrint(-3.5) = " &lt;&lt; std::lrint(-3.5) &lt;&lt; '\n'
              &lt;&lt; "Special values:\n"
              &lt;&lt; "  lrint(-0.0) = " &lt;&lt; std::lrint(-0.0) &lt;&lt; '\n'
              &lt;&lt; std::hex &lt;&lt; std::showbase
              &lt;&lt; "  lrint(-Inf) = " &lt;&lt; std::lrint(-INFINITY) &lt;&lt; '\n';

    // error handling
    std::feclearexcept(FE_ALL_EXCEPT);
 
    std::cout &lt;&lt; "std::rint(0.1) = " &lt;&lt; std::rint(.1) &lt;&lt; '\n';
    if (std::fetestexcept(FE_INEXACT))
        std::cout &lt;&lt; "  FE_INEXACT was raised\n";
 
    std::feclearexcept(FE_ALL_EXCEPT);
 
    std::cout &lt;&lt; "std::lrint(LONG_MIN-2048.0) = "
              &lt;&lt; std::lrint(LONG_MIN - 2048.0) &lt;&lt; '\n';
    if (std::fetestexcept(FE_INVALID))
        std::cout &lt;&lt; "  FE_INVALID was raised\n";
}
|p=true
|output=
Rounding to nearest (halfway cases to even):
  rint(+2.3) = 2
  rint(+2.5) = 2
  rint(+3.5) = 4
  rint(-2.3) = -2
  rint(-2.5) = -2
  rint(-3.5) = -4
Rounding down:
  rint(+2.3) = 2
  rint(+2.5) = 2
  rint(+3.5) = 4
  rint(-2.3) = -2
  rint(-2.5) = -2
  rint(-3.5) = -4
Rounding down with lrint:
  lrint(+2.3) = 2
  lrint(+2.5) = 2
  lrint(+3.5) = 3
  lrint(-2.3) = -3
  lrint(-2.5) = -3
  lrint(-3.5) = -4
Special values:
  lrint(-0.0) = 0
  lrint(-Inf) = 0x8000000000000000
std::rint(0.1) = 0
std::lrint(LONG_MIN-2048.0) = 0x8000000000000000
  FE_INVALID was raised
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc trunc}}
{{dsc inc|cpp/numeric/math/dsc nearbyint}}
{{dsc inc|cpp/numeric/fenv/dsc feround}}
{{dsc see c|c/numeric/math/rint}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
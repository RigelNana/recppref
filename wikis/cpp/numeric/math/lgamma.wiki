{{cpp/title|lgamma|lgammaf|lgammal}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=lgamma
|param1=num
|constexpr_since=26
|desc=Computes the natural logarithm of the absolute value of the {{enwiki|gamma function}} of {{c|num}}.
}}

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur, the value of the logarithm of the gamma function of {{c|num}}, that is {{mathjax-or|1=\(\log_{e}{{!}}{\int_0^\infty t^{num-1} e^{-t} \mathsf{d}t}{{!}}\)|2=log{{su|b=e}}{{!}}{{minteg|0|∞|''t''{{su|p=num-1}} {{mexp|-t}} d''t''}}{{!}}}}, is returned.

If a pole error occurs, {{lc|HUGE_VAL|+HUGE_VAL}}, {{tt|+HUGE_VALF}}, or {{tt|+HUGE_VALL}} is returned.

If a range error due to overflow occurs, {{lc|HUGE_VAL|±HUGE_VAL}}, {{tt|±HUGE_VALF}}, or {{tt|±HUGE_VALL}} is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

If {{c|num}} is zero or is an integer less than zero, a pole error may occur.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* If the argument is 1, +0 is returned.
* If the argument is 2, +0 is returned.
* If the argument is ±0, +∞ is returned and {{lc|FE_DIVBYZERO}} is raised.
* If the argument is a negative integer, +∞ is returned and {{lc|FE_DIVBYZERO}} is raised.
* If the argument is ±∞, +∞ is returned.
* If the argument is NaN, NaN is returned.

===Notes===
If {{c|num}} is a natural number, {{c|std::lgamma(num)}} is the logarithm of the factorial of {{c|num - 1}}.

The [https://pubs.opengroup.org/onlinepubs/9699919799/functions/lgamma.html POSIX version of {{tt|lgamma}}] is not thread-safe: each execution of the function stores the sign of the gamma function of {{c|num}} in the static external variable {{tt|signgam}}. Some implementations provide {{tt|lgamma_r}}, which takes a pointer to user-provided storage for {{tt|singgam}} as the second parameter, and is thread-safe.

There is a non-standard function named {{tt|gamma}} in various implementations, but its definition is inconsistent. For example, glibc and 4.2BSD version of {{tt|gamma}} executes {{tt|lgamma}}, but 4.4BSD version of {{tt|gamma}} executes {{tt|tgamma}}.

{{cpp/numeric/math/additional integer overload note|lgamma}}

===Example===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;

// #pragma STDC FENV_ACCESS ON

const double pi = std::acos(-1); // or std::numbers::pi since C++20

int main()
{
    std::cout &lt;&lt; "lgamma(10) = " &lt;&lt; std::lgamma(10)
              &lt;&lt; ", log(9!) = " &lt;&lt; std::log(std::tgamma(10))
              &lt;&lt; ", exp(lgamma(10)) = " &lt;&lt; std::exp(std::lgamma(10)) &lt;&lt; '\n'
              &lt;&lt; "lgamma(0.5) = " &lt;&lt; std::lgamma(0.5)
              &lt;&lt; ", log(sqrt(pi)) = " &lt;&lt; std::log(std::sqrt(pi)) &lt;&lt; '\n';
    
    // special values
    std::cout &lt;&lt; "lgamma(1) = " &lt;&lt; std::lgamma(1) &lt;&lt; '\n'
              &lt;&lt; "lgamma(+Inf) = " &lt;&lt; std::lgamma(INFINITY) &lt;&lt; '\n';
    
    // error handling
    errno = 0;
    std::feclearexcept(FE_ALL_EXCEPT);
    
    std::cout &lt;&lt; "lgamma(0) = " &lt;&lt; std::lgamma(0) &lt;&lt; '\n';
    
    if (errno == ERANGE)
        std::cout &lt;&lt; "    errno == ERANGE: " &lt;&lt; std::strerror(errno) &lt;&lt; '\n';
    if (std::fetestexcept(FE_DIVBYZERO))
        std::cout &lt;&lt; "    FE_DIVBYZERO raised\n";
}
|output=
lgamma(10) = 12.8018, log(9!) = 12.8018, exp(lgamma(10)) = 362880
lgamma(0.5) = 0.572365, log(sqrt(pi)) = 0.572365
lgamma(1) = 0
lgamma(+Inf) = inf
lgamma(0) = inf
    errno == ERANGE: Numerical result out of range
    FE_DIVBYZERO raised
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc tgamma}}
{{dsc see c|c/numeric/math/lgamma}}
{{dsc end}}

===External links===
{{eli|[https://mathworld.wolfram.com/LogGammaFunction.html Weisstein, Eric W. "Log Gamma Function."] From MathWorld &amp;mdash; A Wolfram Web Resource.}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
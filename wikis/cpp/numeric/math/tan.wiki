{{cpp/title|tan|tanf|tanl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=tan
|param1=num
|constexpr_since=26
|desc=Computes the tangent of {{c|num}} (measured in radians).
}}

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value representing angle in radians}}
{{par end}}

===Return value===
If no errors occur, the tangent of {{c|num}} ({{math|tan(num)}}) is returned.

{{rrev|until=c++11|
The result may have little or no significance if the magnitude of {{c|num}} is large.
}}

If a domain error occurs, an implementation-defined value is returned (NaN where supported).

If a range error occurs due to underflow, the correct result (after rounding) is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* if the argument is ±0, it is returned unmodified.
* if the argument is ±∞, NaN is returned and {{lc|FE_INVALID}} is raised.
* if the argument is NaN, NaN is returned.

===Notes===
The case where the argument is infinite is not specified to be a domain error in C (to which C++ defers), but it is defined as a [https://pubs.opengroup.org/onlinepubs/9699919799/functions/tan.html domain error in POSIX].

The function has mathematical poles at {{math|π(1/2 + n)}}; however no common floating-point representation is able to represent π/2 exactly, thus there is no value of the argument for which a pole error occurs.

{{cpp/numeric/math/additional integer overload note|tan}}

===Example===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;

// #pragma STDC FENV_ACCESS ON
const double pi = std::acos(-1); // or C++20's std::numbers::pi

int main()
{
    // typical usage
    std::cout &lt;&lt; "tan(1*pi/4) = " &lt;&lt; std::tan(1*pi/4) &lt;&lt; '\n' // 45°
              &lt;&lt; "tan(3*pi/4) = " &lt;&lt; std::tan(3*pi/4) &lt;&lt; '\n' // 135°
              &lt;&lt; "tan(5*pi/4) = " &lt;&lt; std::tan(5*pi/4) &lt;&lt; '\n' // -135°
              &lt;&lt; "tan(7*pi/4) = " &lt;&lt; std::tan(7*pi/4) &lt;&lt; '\n'; // -45°
    
    // special values
    std::cout &lt;&lt; "tan(+0) = " &lt;&lt; std::tan(0.0) &lt;&lt; '\n'
              &lt;&lt; "tan(-0) = " &lt;&lt; std::tan(-0.0) &lt;&lt; '\n';
    
    // error handling
    std::feclearexcept(FE_ALL_EXCEPT);
    
    std::cout &lt;&lt; "tan(INFINITY) = " &lt;&lt; std::tan(INFINITY) &lt;&lt; '\n';
    if (std::fetestexcept(FE_INVALID))
        std::cout &lt;&lt; "    FE_INVALID raised\n";
}
|p=true
|output=
tan(1*pi/4) = 1
tan(3*pi/4) = -1
tan(5*pi/4) = 1
tan(7*pi/4) = -1
tan(+0) = 0
tan(-0) = -0
tan(INFINITY) = -nan
    FE_INVALID raised
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc sin}}
{{dsc inc|cpp/numeric/math/dsc cos}}
{{dsc inc|cpp/numeric/math/dsc atan}}
{{dsc inc|cpp/numeric/complex/dsc tan}}
{{dsc inc|cpp/numeric/valarray/dsc tan}}
{{dsc see c|c/numeric/math/tan}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
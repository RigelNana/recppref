{{cpp/title|atan2|atan2f|atan2l}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=atan2
|param1=y
|param2=x
|constexpr_since=26
|desc=Computes the arc tangent of {{c|y / x}} using the signs of arguments to determine the correct quadrant.
}}

===Parameters===
{{par begin}}
{{par|y, x|floating-point or integer values}}
{{par end}}

===Return value===
If no errors occur, the arc tangent of {{c|y / x}} ({{math|arctan({{mfrac|y|x}})}}) in the range {{math|[-&amp;pi;, +&amp;pi;]}} radians, is returned.

{{plot|math-atan2.png|left={{c|y}} argument|bottom={{c|x}} argument|right=Return value|size=x240px}}

If a domain error occurs, an implementation-defined value is returned (NaN where supported).

If a range error occurs due to underflow, the correct result (after rounding) is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

Domain error may occur if {{c|x}} and {{c|y}} are both zero.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* If {{c|x}} and {{c|y}} are both zero, domain error ''does not'' occur.
* If {{c|x}} and {{c|y}} are both zero, range error does not occur either.
* If {{c|y}} is zero, pole error does not occur.
* If {{c|y}} is ±0 and {{c|x}} is negative or -0, ±&amp;pi; is returned.
* If {{c|y}} is ±0 and {{c|x}} is positive or +0, ±0 is returned.
* If {{c|y}} is ±∞ and {{c|x}} is finite, ±&amp;pi;/2 is returned.
* If {{c|y}} is ±∞ and {{c|x}} is -∞, ±3&amp;pi;/4 is returned.
* If {{c|y}} is ±∞ and {{c|x}} is +∞, ±&amp;pi;/4 is returned.
* If {{c|x}} is ±0 and {{c|y}} is negative, -&amp;pi;/2 is returned.
* If {{c|x}} is ±0 and {{c|y}} is positive, +&amp;pi;/2 is returned.
* If {{c|x}} is -∞ and {{c|y}} is finite and positive, +&amp;pi; is returned.
* If {{c|x}} is -∞ and {{c|y}} is finite and negative, -&amp;pi; is returned.
* If {{c|x}} is +∞ and {{c|y}} is finite and positive, +0 is returned.
* If {{c|x}} is +∞ and {{c|y}} is finite and negative, -0 is returned.
* If either {{c|x}} is NaN or {{c|y}} is NaN, NaN is returned.

===Notes===
{{c|std::atan2(y, x)}} is equivalent to {{c|std::arg(std::complex&lt;std::common_type_t&lt;decltype(x), decltype(y)&gt;&gt;(x, y))}}.

[https://pubs.opengroup.org/onlinepubs/9699919799/functions/atan2.html POSIX specifies] that in case of underflow, the value {{c|y / x}} is returned, and if that is not supported, an implementation-defined value no greater than {{lc|DBL_MIN}}, {{lc|FLT_MIN}}, and {{lc|LDBL_MIN}} is returned.

{{cpp/numeric/math/additional overload note|atan2}}

===Example===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;

void print_coordinates(int x, int y)
{
    std::cout &lt;&lt; std::showpos
              &lt;&lt; "(x:" &lt;&lt; x &lt;&lt; ", y:" &lt;&lt; y &lt;&lt; ") cartesian is "
              &lt;&lt; "(r:" &lt;&lt; std::hypot(x, y)
              &lt;&lt; ", phi:" &lt;&lt; std::atan2(y, x) &lt;&lt; ") polar\n";
}

int main()
{
    // normal usage: the signs of the two arguments determine the quadrant
    print_coordinates(+1, +1); // atan2( 1,  1) =  +pi/4, Quad I
    print_coordinates(-1, +1); // atan2( 1, -1) = +3pi/4, Quad II
    print_coordinates(-1, -1); // atan2(-1, -1) = -3pi/4, Quad III
    print_coordinates(+1, -1); // atan2(-1,  1) =  -pi/4, Quad IV
    
    // special values
    std::cout &lt;&lt; std::noshowpos
              &lt;&lt; "atan2(0, 0) = " &lt;&lt; atan2(0, 0) &lt;&lt; '\n'
              &lt;&lt; "atan2(0,-0) = " &lt;&lt; atan2(0, -0.0) &lt;&lt; '\n'
              &lt;&lt; "atan2(7, 0) = " &lt;&lt; atan2(7, 0) &lt;&lt; '\n'
              &lt;&lt; "atan2(7,-0) = " &lt;&lt; atan2(7, -0.0) &lt;&lt; '\n';
}
|output=
(x:+1, y:+1) cartesian is (r:1.41421, phi:0.785398) polar
(x:-1, y:+1) cartesian is (r:1.41421, phi:2.35619) polar
(x:-1, y:-1) cartesian is (r:1.41421, phi:-2.35619) polar
(x:+1, y:-1) cartesian is (r:1.41421, phi:-0.785398) polar
atan2(0, 0) = 0
atan2(0,-0) = 3.14159
atan2(7, 0) = 1.5708
atan2(7,-0) = 1.5708
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc asin}}
{{dsc inc|cpp/numeric/math/dsc acos}}
{{dsc inc|cpp/numeric/math/dsc atan}}
{{dsc inc|cpp/numeric/complex/dsc arg}}
{{dsc inc|cpp/numeric/valarray/dsc atan2}}
{{dsc see c|c/numeric/math/atan2}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
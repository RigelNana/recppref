{{cpp/title|cosh|coshf|coshl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=cosh
|param1=num
|constexpr_since=26
|desc=Computes the hyperbolic cosine of {{c|num}}.
}}

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur, the hyperbolic cosine of {{c|num}} ({{math|cosh(num)}}, or {{math|{{mfrac|e{{su|p=num}}+e{{su|p=-num}}|2}}}}) is returned.

If a range error due to overflow occurs, {{lc|HUGE_VAL|+HUGE_VAL}}, {{tt|+HUGE_VALF}}, or {{tt|+HUGE_VALL}} is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* if the argument is ±0, 1 is returned.
* If the argument is ±∞, +∞ is returned.
* if the argument is NaN, NaN is returned.

===Notes===
For the IEEE-compatible type {{c/core|double}}, if {{math|{{!}}num{{!}} &gt; 710.5}}, then {{c|std::cosh(num)}} overflows.

{{cpp/numeric/math/additional integer overload note|cosh}}

===Example===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
// #pragma STDC FENV_ACCESS ON

int main()
{
    const double x = 42;

    std::cout &lt;&lt; "cosh(1) = " &lt;&lt; std::cosh(1) &lt;&lt; '\n'
              &lt;&lt; "cosh(-1) = " &lt;&lt; std::cosh(-1) &lt;&lt; '\n'
              &lt;&lt; "log(sinh(" &lt;&lt; x &lt;&lt; ")+cosh(" &lt;&lt; x &lt;&lt; ")) = "
              &lt;&lt; std::log(std::sinh(x) + std::cosh(x)) &lt;&lt; '\n';

    // special values
    std::cout &lt;&lt; "cosh(+0) = " &lt;&lt; std::cosh(0.0) &lt;&lt; '\n'
              &lt;&lt; "cosh(-0) = " &lt;&lt; std::cosh(-0.0) &lt;&lt; '\n';

    // error handling
    errno=0;
    std::feclearexcept(FE_ALL_EXCEPT);

    std::cout &lt;&lt; "cosh(710.5) = " &lt;&lt; std::cosh(710.5) &lt;&lt; '\n';

    if (errno == ERANGE)
        std::cout &lt;&lt; "    errno == ERANGE: " &lt;&lt; std::strerror(errno) &lt;&lt; '\n';
    if (std::fetestexcept(FE_OVERFLOW))
        std::cout &lt;&lt; "    FE_OVERFLOW raised\n";
}
|p=true
|output=
cosh(1) = 1.54308
cosh(-1) = 1.54308
log(sinh(42)+cosh(42)) = 42
cosh(+0) = 1
cosh(-0) = 1
cosh(710.5) = inf
    errno == ERANGE: Numerical result out of range
    FE_OVERFLOW raised
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc sinh}}
{{dsc inc|cpp/numeric/math/dsc tanh}}
{{dsc inc|cpp/numeric/math/dsc acosh}}
{{dsc inc|cpp/numeric/complex/dsc cosh}}
{{dsc inc|cpp/numeric/valarray/dsc cosh}}
{{dsc see c|c/numeric/math/cosh}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
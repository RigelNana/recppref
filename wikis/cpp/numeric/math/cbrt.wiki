{{cpp/title|cbrt|cbrtf|cbrtl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=cbrt
|param1=num
|constexpr_since=26
|desc=Computes the cube root of {{c|num}}.
}}

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur, the cube root of {{c|num}} ({{mathjax-or|1=\(\small{\sqrt[3]{num} }\)|2={{mrad|num|3}}}}), is returned.

If a range error occurs due to underflow, the correct result (after rounding) is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* if the argument is ±0 or ±∞, it is returned, unchanged.
* if the argument is NaN, NaN is returned.

===Notes===
{{c|std::cbrt(num)}} is not equivalent to {{c|std::pow(num, 1.0 / 3)}} because the rational number {{mathjax-or|1=\(\small{\frac1{3} }\)|2={{mfrac|1|3}} }} is typically not equal to {{c|1.0 / 3}} and {{lc|std::pow}} cannot raise a negative base to a fractional exponent. Moreover, {{c|std::cbrt(num)}} usually gives more accurate results than {{c|std::pow(num, 1.0 / 3)}} (see example).

{{cpp/numeric/math/additional integer overload note|cbrt}}

===Example===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;

int main()
{
    std::cout
        &lt;&lt; "Normal use:\n"
        &lt;&lt; "cbrt(729)       = " &lt;&lt; std::cbrt(729) &lt;&lt; '\n'
        &lt;&lt; "cbrt(-0.125)    = " &lt;&lt; std::cbrt(-0.125) &lt;&lt; '\n'
        &lt;&lt; "Special values:\n"
        &lt;&lt; "cbrt(-0)        = " &lt;&lt; std::cbrt(-0.0) &lt;&lt; '\n'
        &lt;&lt; "cbrt(+inf)      = " &lt;&lt; std::cbrt(INFINITY) &lt;&lt; '\n'
        &lt;&lt; "Accuracy and comparison with `pow`:\n"
        &lt;&lt; std::setprecision(std::numeric_limits&lt;double&gt;::max_digits10)
        &lt;&lt; "cbrt(343)       = " &lt;&lt; std::cbrt(343) &lt;&lt; '\n'
        &lt;&lt; "pow(343,1.0/3)  = " &lt;&lt; std::pow(343, 1.0 / 3) &lt;&lt; '\n'
        &lt;&lt; "cbrt(-343)      = " &lt;&lt; std::cbrt(-343) &lt;&lt; '\n'
        &lt;&lt; "pow(-343,1.0/3) = " &lt;&lt; std::pow(-343, 1.0 / 3) &lt;&lt; '\n';
}
|p=true
|output=
Normal use:
cbrt(729)       = 9
cbrt(-0.125)    = -0.5
Special values:
cbrt(-0)        = -0
cbrt(+inf)      = inf
Accuracy and comparison with `pow`:
cbrt(343)       = 7
pow(343,1.0/3)  = 6.9999999999999991
cbrt(-343)      = -7
pow(-343,1.0/3) = -nan
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc pow}}
{{dsc inc|cpp/numeric/math/dsc sqrt}}
{{dsc inc|cpp/numeric/math/dsc hypot}}
{{dsc see c|c/numeric/math/cbrt}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
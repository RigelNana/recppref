{{cpp/title|exp|expf|expl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=exp
|param1=num
|constexpr_since=26
|desc=Computes {{math|e}} ({{enwiki|E (mathematical constant)|Euler's number}}, {{co|2.7182818...}}) raised to the given power {{c|num}}.
}}

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur, the base-{{math|e}} exponential of {{c|num}} ({{math|e{{su|p=num}}}}) is returned.

If a range error occurs due to overflow, {{lc|HUGE_VAL|+HUGE_VAL}}, {{tt|+HUGE_VALF}}, or {{tt|+HUGE_VALL}} is returned.

If a range error occurs due to underflow, the correct result (after rounding) is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* If the argument is ±0, 1 is returned.
* If the argument is -∞, +0 is returned.
* If the argument is +∞, +∞ is returned.
* If the argument is NaN, NaN is returned.

===Notes===
For IEEE-compatible type {{c/core|double}}, overflow is guaranteed if {{math|709.8 &lt; num}}, and underflow is guaranteed if {{math|num &lt; -708.4}}.

{{cpp/numeric/math/additional integer overload note|exp}}

===Example===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;numbers&gt;
 
// #pragma STDC FENV_ACCESS ON

consteval double approx_e()
{
    long double e{1.0};
    for (auto fac{1ull}, n{1llu}; n != 18; ++n, fac *= n)
        e += 1.0 / fac;
    return e;
}

int main()
{
    std::cout &lt;&lt; std::setprecision(16)
              &lt;&lt; "exp(1) = e¹ = " &lt;&lt; std::exp(1) &lt;&lt; '\n'
              &lt;&lt; "numbers::e  = " &lt;&lt; std::numbers::e &lt;&lt; '\n'
              &lt;&lt; "approx_e    = " &lt;&lt; approx_e() &lt;&lt; '\n'
              &lt;&lt; "FV of $100, continuously compounded at 3% for 1 year = "
              &lt;&lt; std::setprecision(6) &lt;&lt; 100 * std::exp(0.03) &lt;&lt; '\n';
 
    // special values
    std::cout &lt;&lt; "exp(-0) = " &lt;&lt; std::exp(-0.0) &lt;&lt; '\n'
              &lt;&lt; "exp(-Inf) = " &lt;&lt; std::exp(-INFINITY) &lt;&lt; '\n';
 
    // error handling 
    errno = 0;
    std::feclearexcept(FE_ALL_EXCEPT);
 
    std::cout &lt;&lt; "exp(710) = " &lt;&lt; std::exp(710) &lt;&lt; '\n';
 
    if (errno == ERANGE)
        std::cout &lt;&lt; "    errno == ERANGE: " &lt;&lt; std::strerror(errno) &lt;&lt; '\n';
    if (std::fetestexcept(FE_OVERFLOW))
        std::cout &lt;&lt; "    FE_OVERFLOW raised\n";
}
|p=true
|output=
exp(1) = e¹ = 2.718281828459045
numbers::e  = 2.718281828459045
approx_e    = 2.718281828459045
FV of $100, continuously compounded at 3% for 1 year = 103.045
exp(-0) = 1
exp(-Inf) = 0
exp(710) = inf
    errno == ERANGE: Numerical result out of range
    FE_OVERFLOW raised
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc exp2}}
{{dsc inc|cpp/numeric/math/dsc expm1}}
{{dsc inc|cpp/numeric/math/dsc log}}
{{dsc inc|cpp/numeric/complex/dsc exp}}
{{dsc inc|cpp/numeric/valarray/dsc exp}}
{{dsc see c|c/numeric/math/exp}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
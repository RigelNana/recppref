{{cpp/title|erf|erff|erfl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=erf
|param1=num
|constexpr_since=26
|desc=Computes the {{enwiki|Error function|error function}} of {{c|num}}.
}}

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur, value of the error function of {{c|num}}, that is {{mathjax-or|\(\frac{2}{\sqrt{\pi} }\int_{0}^{num}{e^{-{t^2} }\mathsf{d}t}\)|{{mfrac|2|{{mrad|&amp;pi;}}}}{{minteg|0|num|{{mexp|-t{{su|p=2}}}}d''t''}}}}, is returned.&lt;br&gt;&lt;!-- a blank line does not work here --&gt;
If a range error occurs due to underflow, the correct result (after rounding), that is {{mathjax-or|\(\frac{2\cdot num}{\sqrt{\pi} }\)|{{mfrac|2*num|{{mrad|&amp;pi;}}}}}} is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* If the argument is ±0, ±0 is returned.
* If the argument is ±∞, ±1 is returned.
* If the argument is NaN, NaN is returned.

===Notes===
Underflow is guaranteed if {{c|{{!}}num{{!}} &lt; DBL_MIN * (std::sqrt(π) / 2)}}.

{{mathjax-or|\(\operatorname{erf}(\frac{x}{\sigma \sqrt{2} })\)|erf({{mfrac|x|&amp;sigma;{{mrad|2}}}})}} is the probability that a measurement whose errors are subject to a normal distribution with standard deviation {{mathjax-or|\(\sigma\)|&amp;sigma;}} is less than {{mathjax-or|\(x\)|x}} away from the mean value.

{{cpp/numeric/math/additional integer overload note|erf}}

===Example===
{{example
|The following example calculates the probability that a normal variate is on the interval (x1, x2):
|code=
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;

double phi(double x1, double x2)
{
    return (std::erf(x2 / std::sqrt(2)) - std::erf(x1 / std::sqrt(2))) / 2;
}

int main()
{
    std::cout &lt;&lt; "Normal variate probabilities:\n"
              &lt;&lt; std::fixed &lt;&lt; std::setprecision(2);
    for (int n = -4; n &lt; 4; ++n)
        std::cout &lt;&lt; '[' &lt;&lt; std::setw(2) &lt;&lt; n
                  &lt;&lt; ':' &lt;&lt; std::setw(2) &lt;&lt; n + 1 &lt;&lt; "]: "
                  &lt;&lt; std::setw(5) &lt;&lt; 100 * phi(n, n + 1) &lt;&lt; "%\n";
    
    std::cout &lt;&lt; "Special values:\n"
              &lt;&lt; "erf(-0) = " &lt;&lt; std::erf(-0.0) &lt;&lt; '\n'
              &lt;&lt; "erf(Inf) = " &lt;&lt; std::erf(INFINITY) &lt;&lt; '\n';
}
|output=
Normal variate probabilities:
[-4:-3]:  0.13%
[-3:-2]:  2.14%
[-2:-1]: 13.59%
[-1: 0]: 34.13%
[ 0: 1]: 34.13%
[ 1: 2]: 13.59%
[ 2: 3]:  2.14%
[ 3: 4]:  0.13%
Special values:
erf(-0) = -0.00
erf(Inf) = 1.00
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc erfc}}
{{dsc see c|c/numeric/math/erf}}
{{dsc end}}

===External links===
{{eli|[https://mathworld.wolfram.com/Erf.html Weisstein, Eric W. "Erf."] From MathWorld &amp;mdash; A Wolfram Web Resource.}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
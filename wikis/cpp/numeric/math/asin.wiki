{{cpp/title|asin|asinf|asinl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=asin
|param1=num
|constexpr_since=26
|desc=Computes the principal value of the arc sine of {{c|num}}.
}}

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur, the arc sine of {{c|num}} ({{math|arcsin(num)}}) in the range {{math|[- {{mfrac|&amp;pi;|2}} , +{{mfrac|&amp;pi;|2}}]}}, is returned.

If a domain error occurs, an implementation-defined value is returned (NaN where supported).

If a range error occurs due to underflow, the correct result (after rounding) is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

Domain error occurs if {{c|num}} is outside the range {{closed range|-1.0|1.0}}.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* If the argument is Â±0, it is returned unmodified.
* If {{math|{{!}}num{{!}} &gt; 1}}, a domain error occurs and NaN is returned.
* if the argument is NaN, NaN is returned.

===Notes===
{{cpp/numeric/math/additional integer overload note|asin}}

===Example===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;

// #pragma STDC FENV_ACCESS ON

int main()
{
    std::cout &lt;&lt; "asin(1.0) = " &lt;&lt; asin(1) &lt;&lt; '\n'
              &lt;&lt; "2*asin(1.0) = " &lt;&lt; 2 * asin(1) &lt;&lt; '\n'
              &lt;&lt; "asin(-0.5) = " &lt;&lt; asin(-0.5) &lt;&lt; '\n'
              &lt;&lt; "6*asin(-0.5) =" &lt;&lt; 6 * asin(-0.5) &lt;&lt; '\n';
    
    // special values
    std::cout &lt;&lt; "asin(0.0) = " &lt;&lt; asin(0) &lt;&lt; " asin(-0.0)=" &lt;&lt; asin(-0.0) &lt;&lt; '\n';
    
    // error handling
    errno = 0;
    std::feclearexcept(FE_ALL_EXCEPT);
    
    std::cout &lt;&lt; "asin(1.1) = " &lt;&lt; asin(1.1) &lt;&lt; '\n';
    
    if (errno == EDOM)
        std::cout &lt;&lt; "    errno == EDOM: " &lt;&lt; std::strerror(errno) &lt;&lt; '\n';
    if (std::fetestexcept(FE_INVALID))
        std::cout &lt;&lt; "    FE_INVALID raised" &lt;&lt; '\n';
}
|p=true
|output=
asin(1.0) = 1.5708
2*asin(1.0) = 3.14159
asin(-0.5) = -0.523599
6*asin(-0.5) = -3.14159
asin(0.0) = 0 asin(-0.0)=-0
asin(1.1) = nan
    errno == EDOM: Numerical argument out of domain
    FE_INVALID raised
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc acos}}
{{dsc inc|cpp/numeric/math/dsc atan}}
{{dsc inc|cpp/numeric/math/dsc atan2}}
{{dsc inc|cpp/numeric/math/dsc sin}}
{{dsc inc|cpp/numeric/complex/dsc asin}}
{{dsc inc|cpp/numeric/valarray/dsc asin}}
{{dsc see c|c/numeric/math/asin}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
{{cpp/title|hypot|hypotf|hypotl}}
{{cpp/numeric/math/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++11|dcl1=
float       hypot ( float x, float y );
double      hypot ( double x, double y );
long double hypot ( long double x, long double y );
|since2=c++23|dcl2=
/*floating-point-type*/ 
            hypot ( /*floating-point-type*/ x,
                    /*floating-point-type*/ y );
|notes2={{mark constexpr since c++26}}
}}
{{dcla|num=2|since=c++11|constexpr=c++26|
float       hypotf( float x, float y );
}}
{{dcla|num=3|since=c++11|constexpr=c++26|
long double hypotl( long double x, long double y );
}}
{{dcl rev multi|num=4|since1=c++17|dcl1=
float       hypot ( float x, float y, float z );
double      hypot ( double x, double y, double z );
long double hypot ( long double x, long double y, long double z );
|since2=c++23|dcl2=
/*floating-point-type*/
            hypot ( /*floating-point-type*/ x,
                    /*floating-point-type*/ y,
                    /*floating-point-type*/ z );
|notes2={{mark constexpr since c++26}}
}}
{{dcl h|[[#Notes|Additional overloads]]}}
{{dcl header|cmath}}
{{dcla|num=A|since=c++11|constexpr=c++26|
template&lt; class Arithmetic1, Arithmetic2 &gt;
/*common-floating-point-type*/
            hypot ( Arithmetic1 x, Arithmetic2 y );
}}
{{dcl|num=B|since=c++17|constexpr=c++26|
template&lt; class Arithmetic1, Arithmetic2, Arithmetic3 &gt;
/*common-floating-point-type*/
            hypot ( Arithmetic1 x, Arithmetic2 y, Arithmetic3 z );
}}
{{dcl end}}

@1-3@ Computes the square root of the sum of the squares of {{c|x}} and {{c|y}}, without undue overflow or underflow at intermediate stages of the computation.{{rev inl|since=c++23|The library provides overloads of {{tt|std::hypot}} for all cv-unqualified floating-point types as the type of the parameters {{c|x}} and {{c|y}}.}}
@4@ Computes the square root of the sum of the squares of {{c|x}}, {{c|y}}, and {{c|z}}, without undue overflow or underflow at intermediate stages of the computation.{{rev inl|since=c++23|The library provides overloads of {{tt|std::hypot}} for all cv-unqualified floating-point types as the type of the parameters {{c|x}}, {{c|y}} and {{c|z}}.}}
@A,B@ Additional overloads are provided for all other combinations of arithmetic types.

The value computed by the two-argument version of this function is the length of the hypotenuse of a right-angled triangle with sides of length {{c|x}} and {{c|y}}, or the distance of the point {{tt|(x,y)}} from the origin {{tt|(0,0)}}, or the magnitude of a complex number {{tt|x+''i''y}}.

The value computed by the three-argument version of this function is the distance of the point {{tt|(x,y,z)}} from the origin {{tt|(0,0,0)}}.

===Parameters===
{{par begin}}
{{par|x, y, z|floating-point or integer values}}
{{par end}}

===Return value===
@1-3,A@ If no errors occur, the hypotenuse of a right-angled triangle, {{mathjax-or|1=\(\scriptsize{\sqrt{x^2+y^2} }\)|2={{mrad|x{{su|p=2}}+y{{su|p=2}}}}}}, is returned.
@4,B@ If no errors occur, the distance from origin in 3D space, {{mathjax-or|1=\(\scriptsize{\sqrt{x^2+y^2+z^2} }\)|2={{mrad|x{{su|p=2}}+y{{su|p=2}}+z{{su|p=2}}}}}}, is returned.

If a range error due to overflow occurs, {{lc|HUGE_VAL|+HUGE_VAL}}, {{tt|+HUGE_VALF}}, or {{tt|+HUGE_VALL}} is returned.

If a range error due to underflow occurs, the correct result (after rounding) is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* {{c|std::hypot(x, y)}}, {{c|std::hypot(y, x)}}, and {{c|std::hypot(x, -y)}} are equivalent.
* if one of the arguments is ±0, {{c|std::hypot(x, y)}} is equivalent to {{lc|std::fabs}} called with the non-zero argument.
* if one of the arguments is ±∞, {{c|std::hypot(x, y)}} returns +∞ even if the other argument is NaN.
* otherwise, if any of the arguments is NaN, NaN is returned.

===Notes===
Implementations usually guarantee precision of less than 1 {{enwiki|Unit in the last place|ulp}} (Unit in the Last Place &amp;mdash; Unit of Least Precision): [https://sourceware.org/git/?p=glibc.git;a=blob_plain;f=sysdeps/ieee754/dbl-64/e_hypot.c GNU], [https://www.freebsd.org/cgi/cvsweb.cgi/src/lib/msun/src/e_hypot.c BSD].

{{c|std::hypot(x, y)}} is equivalent to {{c|std::abs(std::complex&lt;double&gt;(x, y))}}.

{{posix|hypot||POSIX specifies}} that underflow may only occur when both arguments are subnormal and the correct result is also subnormal (this forbids naive implementations).

{{rrev|since=c++17|
Distance between two points {{tt|(x1, y1, z1)}} and {{tt|(x2, y2, z2)}} on 3D space can be calculated using 3-argument overload of {{tt|std::hypot}} as {{c|std::hypot(x2 - x1, y2 - y1, z2 - z1)}}.
}}

{{cpp/numeric/math/additional overload note|hypot}}

{{feature test macro|__cpp_lib_hypot|std=C++17|value=201603L|3-argument overload of {{tt|std::hypot}} {{v|4,B}}}}

===Example===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cfloat&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;

// #pragma STDC FENV_ACCESS ON

struct Point3D { float x, y, z; };

int main()
{
    // typical usage
    std::cout &lt;&lt; "(1,1) cartesian is (" &lt;&lt; std::hypot(1, 1)
              &lt;&lt; ',' &lt;&lt; std::atan2(1,1) &lt;&lt; ") polar\n";
    
    Point3D a{3.14, 2.71, 9.87}, b{1.14, 5.71, 3.87};
    // C++17 has 3-argument hypot overload:
    std::cout &lt;&lt; "distance(a,b) = "
              &lt;&lt; std::hypot(a.x - b.x, a.y - b.y, a.z - b.z) &lt;&lt; '\n';
    
    // special values
    std::cout &lt;&lt; "hypot(NAN,INFINITY) = " &lt;&lt; std::hypot(NAN, INFINITY) &lt;&lt; '\n';
    
    // error handling
    errno = 0;
    std::feclearexcept(FE_ALL_EXCEPT);
    std::cout &lt;&lt; "hypot(DBL_MAX,DBL_MAX) = " &lt;&lt; std::hypot(DBL_MAX, DBL_MAX) &lt;&lt; '\n';
    
    if (errno == ERANGE)
        std::cout &lt;&lt; "    errno = ERANGE " &lt;&lt; std::strerror(errno) &lt;&lt; '\n';
    if (std::fetestexcept(FE_OVERFLOW))
        std::cout &lt;&lt; "    FE_OVERFLOW raised\n";
}
|output=
(1,1) cartesian is (1.41421,0.785398) polar
distance(a,b) = 7
hypot(NAN,INFINITY) = inf
hypot(DBL_MAX,DBL_MAX) = inf
    errno = ERANGE Numerical result out of range
    FE_OVERFLOW raised
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc pow}}
{{dsc inc|cpp/numeric/math/dsc sqrt}}
{{dsc inc|cpp/numeric/math/dsc cbrt}}
{{dsc inc|cpp/numeric/complex/dsc abs}}
{{dsc see c|c/numeric/math/hypot}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
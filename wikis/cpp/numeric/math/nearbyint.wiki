{{cpp/title|nearbyint|nearbyintf|nearbyintl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=nearbyint
|param1=num
|desc=Rounds the floating-point argument {{c|num}} to an integer value in floating-point format, using the [[cpp/numeric/fenv/FE_round|current rounding mode]].
}}

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value}}
{{par end}}

===Return value===
The nearest integer value to {{c|num}}, according to the [[cpp/numeric/fenv/FE_round|current rounding mode]], is returned.

===Error handling===
This function is not subject to any of the errors specified in {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* {{lc|FE_INEXACT}} is never raised.
* If {{c|num}} is ±∞, it is returned, unmodified.
* If {{c|num}} is ±0, it is returned, unmodified.
* If {{c|num}} is NaN, NaN is returned.

===Notes===
The only difference between {{tt|std::nearbyint}} and {{lc|std::rint}} is that {{tt|std::nearbyint}} never raises {{lc|FE_INEXACT}}.

The largest representable floating-point values are exact integers in all standard floating-point formats, so {{tt|std::nearbyint}} never overflows on its own; however the result may overflow any integer type (including {{lc|std::intmax_t}}), when stored in an integer variable.

If the current rounding mode is {{lc|FE_TONEAREST}}, this function rounds to even in halfway cases (like {{lc|std::rint}}, but unlike {{lc|std::round}}).

{{cpp/numeric/math/additional integer overload note|nearbyint}}

===Example===
{{example
|code=
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;
#pragma STDC FENV_ACCESS ON

int main()
{
    std::fesetround(FE_TONEAREST);
    std::cout &lt;&lt; "rounding to nearest: \n"
              &lt;&lt; "nearbyint(+2.3) = " &lt;&lt; std::nearbyint(2.3)
              &lt;&lt; "  nearbyint(+2.5) = " &lt;&lt; std::nearbyint(2.5)
              &lt;&lt; "  nearbyint(+3.5) = " &lt;&lt; std::nearbyint(3.5) &lt;&lt; '\n'
              &lt;&lt; "nearbyint(-2.3) = " &lt;&lt; std::nearbyint(-2.3)
              &lt;&lt; "  nearbyint(-2.5) = " &lt;&lt; std::nearbyint(-2.5)
              &lt;&lt; "  nearbyint(-3.5) = " &lt;&lt; std::nearbyint(-3.5) &lt;&lt; '\n';
    
    std::fesetround(FE_DOWNWARD);
    std::cout &lt;&lt; "rounding down:\n"
              &lt;&lt; "nearbyint(+2.3) = " &lt;&lt; std::nearbyint(2.3)
              &lt;&lt; "  nearbyint(+2.5) = " &lt;&lt; std::nearbyint(2.5)
              &lt;&lt; "  nearbyint(+3.5) = " &lt;&lt; std::nearbyint(3.5) &lt;&lt; '\n'
              &lt;&lt; "nearbyint(-2.3) = " &lt;&lt; std::nearbyint(-2.3)
              &lt;&lt; "  nearbyint(-2.5) = " &lt;&lt; std::nearbyint(-2.5)
              &lt;&lt; "  nearbyint(-3.5) = " &lt;&lt; std::nearbyint(-3.5) &lt;&lt; '\n';
    
    std::cout &lt;&lt; "nearbyint(-0.0) = " &lt;&lt; std::nearbyint(-0.0)  &lt;&lt; '\n'
              &lt;&lt; "nearbyint(-Inf) = " &lt;&lt; std::nearbyint(-INFINITY) &lt;&lt; '\n';
}
|output=
rounding to nearest: 
nearbyint(+2.3) = 2  nearbyint(+2.5) = 2  nearbyint(+3.5) = 4
nearbyint(-2.3) = -2  nearbyint(-2.5) = -2  nearbyint(-3.5) = -4
rounding down:
nearbyint(+2.3) = 2  nearbyint(+2.5) = 2  nearbyint(+3.5) = 3
nearbyint(-2.3) = -3  nearbyint(-2.5) = -3  nearbyint(-3.5) = -4
nearbyint(-0.0) = -0
nearbyint(-Inf) = -inf
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc rint}}
{{dsc inc|cpp/numeric/math/dsc round}}
{{dsc inc|cpp/numeric/fenv/dsc feround}}
{{dsc see c|c/numeric/math/nearbyint}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
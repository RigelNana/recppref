{{cpp/title|sinh|sinhf|sinhl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=sinh
|param1=num
|constexpr_since=26
|desc=Computes the hyperbolic sine of {{c|num}}.
}}

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur, the hyperbolic sine of {{c|num}} ({{math|sinh(num)}}, or {{math|{{mfrac|e{{su|p=num}}-e{{su|p=-num}}|2}}}}) is returned.

If a range error due to overflow occurs, {{lc|HUGE_VAL|±HUGE_VAL}}, {{tt|±HUGE_VALF}}, or {{tt|±HUGE_VALL}} is returned.

If a range error occurs due to underflow, the correct result (after rounding) is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* if the argument is ±0 or ±∞, it is returned unmodified.
* if the argument is NaN, NaN is returned.

===Notes===
[https://pubs.opengroup.org/onlinepubs/9699919799/functions/sinh.html POSIX specifies] that in case of underflow, {{c|num}} is returned unmodified, and if that is not supported, and implementation-defined value no greater than {{lc|DBL_MIN}}, {{lc|FLT_MIN}}, and {{lc|LDBL_MIN}} is returned.

{{cpp/numeric/math/additional integer overload note|sinh}}

===Example===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
// #pragma STDC FENV_ACCESS ON

int main()
{
    const double x = 42;

    std::cout &lt;&lt; "sinh(1) = " &lt;&lt; std::sinh(1) &lt;&lt; '\n'
              &lt;&lt; "sinh(-1) = " &lt;&lt; std::sinh(-1) &lt;&lt; '\n'
              &lt;&lt; "log(sinh(" &lt;&lt; x &lt;&lt; ")+cosh(" &lt;&lt; x &lt;&lt; ")) = "
              &lt;&lt; std::log(std::sinh(x) + std::cosh(x)) &lt;&lt; '\n';

    // special values
    std::cout &lt;&lt; "sinh(+0) = " &lt;&lt; std::sinh(0.0) &lt;&lt; '\n'
              &lt;&lt; "sinh(-0) = " &lt;&lt; std::sinh(-0.0) &lt;&lt; '\n';

    // error handling
    errno = 0;
    std::feclearexcept(FE_ALL_EXCEPT);

    std::cout &lt;&lt; "sinh(710.5) = " &lt;&lt; std::sinh(710.5) &lt;&lt; '\n';

    if (errno == ERANGE)
        std::cout &lt;&lt; "    errno == ERANGE: " &lt;&lt; std::strerror(errno) &lt;&lt; '\n';
    if (std::fetestexcept(FE_OVERFLOW))
        std::cout &lt;&lt; "    FE_OVERFLOW raised\n";
}
|output=
sinh(1) = 1.1752
sinh(-1) = -1.1752
log(sinh(42)+cosh(42)) = 42
sinh(+0) = 0
sinh(-0) = -0
sinh(710.5) = inf
    errno == ERANGE: Numerical result out of range
    FE_OVERFLOW raised
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc cosh}}
{{dsc inc|cpp/numeric/math/dsc tanh}}
{{dsc inc|cpp/numeric/math/dsc asinh}}
{{dsc inc|cpp/numeric/complex/dsc sinh}}
{{dsc inc|cpp/numeric/valarray/dsc sinh}}
{{dsc see c|c/numeric/math/sinh}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
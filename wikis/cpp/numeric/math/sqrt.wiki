{{cpp/title|sqrt|sqrtf|sqrtl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=sqrt
|param1=num
|constexpr_since=26
|desc=Computes the square root of {{c|num}}.
}}

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur, square root of {{c|num}} ({{mathjax-or|\({\small \sqrt{num} }\)|{{mrad|num}}}}), is returned.

If a domain error occurs, an implementation-defined value is returned (NaN where supported).

If a range error occurs due to underflow, the correct result (after rounding) is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

Domain error occurs if {{c|num}} is less than zero.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* If the argument is less than -0, {{lc|FE_INVALID}} is raised and NaN is returned.
* If the argument is +∞ or ±0, it is returned, unmodified.
* If the argument is NaN, NaN is returned.

===Notes===
{{tt|std::sqrt}} is required by the IEEE standard to be correctly rounded from the infinitely precise result. In particular, the exact result is produced if it can be represented in the floating-point type. The only other operations which require this are the [[cpp/language/operator arithmetic|arithmetic operators]] and the function {{lc|std::fma}}. Other functions, including {{lc|std::pow}}, are not so constrained.

{{cpp/numeric/math/additional integer overload note|sqrt}}

===Example===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
// #pragma STDC FENV_ACCESS ON

int main()
{
    // normal use
    std::cout &lt;&lt; "sqrt(100) = " &lt;&lt; std::sqrt(100) &lt;&lt; '\n'
              &lt;&lt; "sqrt(2) = " &lt;&lt; std::sqrt(2) &lt;&lt; '\n'
              &lt;&lt; "golden ratio = " &lt;&lt; (1 + std::sqrt(5)) / 2 &lt;&lt; '\n';
    
    // special values
    std::cout &lt;&lt; "sqrt(-0) = " &lt;&lt; std::sqrt(-0.0) &lt;&lt; '\n';
    
    // error handling
    errno = 0;
    std::feclearexcept(FE_ALL_EXCEPT);
    
    std::cout &lt;&lt; "sqrt(-1.0) = " &lt;&lt; std::sqrt(-1) &lt;&lt; '\n';
    if (errno == EDOM)
        std::cout &lt;&lt; "    errno = EDOM " &lt;&lt; std::strerror(errno) &lt;&lt; '\n';
    if (std::fetestexcept(FE_INVALID))
        std::cout &lt;&lt; "    FE_INVALID raised\n";
}
|p=true
|output=
sqrt(100) = 10
sqrt(2) = 1.41421
golden ratio = 1.61803
sqrt(-0) = -0
sqrt(-1.0) = -nan
    errno = EDOM Numerical argument out of domain
    FE_INVALID raised
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc pow}}
{{dsc inc|cpp/numeric/math/dsc cbrt}}
{{dsc inc|cpp/numeric/math/dsc hypot}}
{{dsc inc|cpp/numeric/complex/dsc sqrt}}
{{dsc inc|cpp/numeric/valarray/dsc sqrt}}
{{dsc see c|c/numeric/math/sqrt}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
{{cpp/title|sin|sinf|sinl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=sin
|param1=num
|constexpr_since=26
|desc=Computes the sine of {{c|num}} (measured in radians).
}}

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value representing angle in radians}}
{{par end}}

===Return value===
If no errors occur, the sine of {{c|num}} ({{math|sin(num)}}) in the range {{closed range|-1|+1}}, is returned.

{{rrev|until=c++11|
The result may have little or no significance if the magnitude of {{c|num}} is large.
}}

If a domain error occurs, an implementation-defined value is returned (NaN where supported).

If a range error occurs due to underflow, the correct result (after rounding) is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* if the argument is ±0, it is returned unmodified.
* if the argument is ±∞, NaN is returned and {{lc|FE_INVALID}} is raised.&lt;!--not defined as a domain error in C or C++, although defined as a domain error in POSIX--&gt;
* if the argument is NaN, NaN is returned.

===Notes===
The case where the argument is infinite is not specified to be a domain error in C (to which C++ defers), but it is defined as a [https://pubs.opengroup.org/onlinepubs/9699919799/functions/sin.html domain error in POSIX].

POSIX also specifies that in case of underflow, {{c|num}} is returned unmodified, and if that is not supported, an implementation-defined value no greater than {{lc|DBL_MIN}}, {{lc|FLT_MIN}}, and {{lc|LDBL_MIN}} is returned.

{{cpp/numeric/math/additional integer overload note|sin}}

===Example===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;

// #pragma STDC FENV_ACCESS ON

const double pi = std::acos(-1); // or std::numbers::pi since C++20

constexpr double your_sin(double x)
{
    double sin{0}, pow{x};
    for (auto fac{1LLU}, n{1ULL}; n != 20; fac *= ++n, pow *= x)
        if (n &amp; 1)
            sin += (n &amp; 2 ? -pow : pow) / fac;
    return sin;
}

int main()
{
    std::cout &lt;&lt; std::setprecision(10) &lt;&lt; std::showpos
              &lt;&lt; "Typical usage:\n"
              &lt;&lt; "std::sin(pi/6) = " &lt;&lt; std::sin(pi / 6) &lt;&lt; '\n'
              &lt;&lt; "your sin(pi/6) = " &lt;&lt; your_sin(pi / 6) &lt;&lt; '\n'
              &lt;&lt; "std::sin(pi/2) = " &lt;&lt; std::sin(pi / 2) &lt;&lt; '\n'
              &lt;&lt; "your sin(pi/2) = " &lt;&lt; your_sin(pi / 2) &lt;&lt; '\n'
              &lt;&lt; "std::sin(-3*pi/4) = " &lt;&lt; std::sin(-3 * pi / 4) &lt;&lt; '\n'
              &lt;&lt; "your sin(-3*pi/4) = " &lt;&lt; your_sin(-3 * pi / 4) &lt;&lt; '\n'
              &lt;&lt; "Special values:\n"
              &lt;&lt; "std::sin(+0) = " &lt;&lt; std::sin(0.0) &lt;&lt; '\n'
              &lt;&lt; "std::sin(-0) = " &lt;&lt; std::sin(-0.0) &lt;&lt; '\n';

    // error handling
    std::feclearexcept(FE_ALL_EXCEPT);

    std::cout &lt;&lt; "std::sin(INFINITY) = " &lt;&lt; std::sin(INFINITY) &lt;&lt; '\n';
    if (std::fetestexcept(FE_INVALID))
        std::cout &lt;&lt; "    FE_INVALID raised\n";
}
|p=true
|output=
Typical usage:
std::sin(pi/6) = +0.5
your sin(pi/6) = +0.5
std::sin(pi/2) = +1
your sin(pi/2) = +1
std::sin(-3*pi/4) = -0.7071067812
your sin(-3*pi/4) = -0.7071067812
Special values:
std::sin(+0) = +0
std::sin(-0) = -0
std::sin(INFINITY) = -nan
    FE_INVALID raised
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc cos}}
{{dsc inc|cpp/numeric/math/dsc tan}}
{{dsc inc|cpp/numeric/math/dsc asin}}
{{dsc inc|cpp/numeric/complex/dsc sin}}
{{dsc inc|cpp/numeric/valarray/dsc sin}}
{{dsc see c|c/numeric/math/sin}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
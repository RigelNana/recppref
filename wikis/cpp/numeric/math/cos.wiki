{{cpp/title|cos|cosf|cosl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=cos
|param1=num
|constexpr_since=26
|desc=Computes the cosine of {{c|num}} (measured in radians).
}}

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value representing angle in radians}}
{{par end}}

===Return value===
If no errors occur, the cosine of {{c|num}} ({{math|cos(num)}}) in the range {{closed range|-1.0|+1.0}}, is returned.

{{rrev|until=c++11|
The result may have little or no significance if the magnitude of {{c|num}} is large.
}}

If a domain error occurs, an implementation-defined value is returned (NaN where supported).

If a range error occurs due to underflow, the correct result (after rounding) is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* if the argument is ±0, the result is {{c|1.0}}.
* if the argument is ±∞, NaN is returned and {{lc|FE_INVALID}} is raised.
* if the argument is NaN, NaN is returned.

===Notes===
The case where the argument is infinite is not specified to be a domain error in C, but it is defined as a [https://pubs.opengroup.org/onlinepubs/9699919799/functions/cos.html domain error in POSIX].

{{cpp/numeric/math/additional integer overload note|cos}}

===Example===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;numbers&gt;

// #pragma STDC FENV_ACCESS ON

constexpr double pi = std::numbers::pi; // or std::acos(-1) before C++20

constexpr double your_cos(double x)
{
    double cos{1}, pow{x};
    for (auto fac{1ull}, n{1ull}; n != 19; fac *= ++n, pow *= x)
        if ((n &amp; 1) == 0)
            cos += (n &amp; 2 ? -pow : pow) / fac;
    return cos;
}

int main()
{
    std::cout &lt;&lt; std::setprecision(10) &lt;&lt; std::showpos
              &lt;&lt; "Typical usage:\n"
              &lt;&lt; "std::cos(pi/3) = " &lt;&lt; std::cos(pi / 3) &lt;&lt; '\n'
              &lt;&lt; "your cos(pi/3) = " &lt;&lt; your_cos(pi / 3) &lt;&lt; '\n'
              &lt;&lt; "std::cos(pi/2) = " &lt;&lt; std::cos(pi / 2) &lt;&lt; '\n'
              &lt;&lt; "your cos(pi/2) = " &lt;&lt; your_cos(pi / 2) &lt;&lt; '\n'
              &lt;&lt; "std::cos(-3*pi/4) = " &lt;&lt; std::cos(-3 * pi / 4) &lt;&lt; '\n'
              &lt;&lt; "your cos(-3*pi/4) = " &lt;&lt; your_cos(-3 * pi / 4) &lt;&lt; '\n'
              &lt;&lt; "Special values:\n"
              &lt;&lt; "std::cos(+0) = " &lt;&lt; std::cos(0.0) &lt;&lt; '\n'
              &lt;&lt; "std::cos(-0) = " &lt;&lt; std::cos(-0.0) &lt;&lt; '\n';

    // error handling
    std::feclearexcept(FE_ALL_EXCEPT);

    std::cout &lt;&lt; "cos(INFINITY) = " &lt;&lt; std::cos(INFINITY) &lt;&lt; '\n';
    if (std::fetestexcept(FE_INVALID))
        std::cout &lt;&lt; "    FE_INVALID raised\n";
}
|p=true
|output=
Typical usage:
std::cos(pi/3) = +0.5
your cos(pi/3) = +0.5
std::cos(pi/2) = +6.123233996e-17
your cos(pi/2) = -3.373452105e-15
std::cos(-3*pi/4) = -0.7071067812
your cos(-3*pi/4) = -0.7071067812
Special values:
std::cos(+0) = +1
std::cos(-0) = +1
cos(INFINITY) = -nan
    FE_INVALID raised
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc sin}}
{{dsc inc|cpp/numeric/math/dsc tan}}
{{dsc inc|cpp/numeric/math/dsc acos}}
{{dsc inc|cpp/numeric/complex/dsc cos}}
{{dsc inc|cpp/numeric/valarray/dsc cos}}
{{dsc see c|c/numeric/math/cos}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
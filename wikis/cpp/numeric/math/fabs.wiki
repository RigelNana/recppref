{{cpp/title|abs{{small|(float)}}|fabs|fabsf|fabsl}}
{{cpp/numeric/math/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl header|cstdlib}}
{{dcl rev multi|num=1|dcl1=
float       abs( float num );
double      abs( double num );
long double abs( long double num );
|since2=c++23|dcl2=
constexpr /* floating-point-type */
            abs( /* floating-point-type */ num );
}}
{{dcl header|cmath}}
{{dcl rev multi|num=2|dcl1=
float       fabs ( float num );
double      fabs ( double num );
long double fabs ( long double num );
|since2=c++23|dcl2=
constexpr /* floating-point-type */
            fabs ( /* floating-point-type */ num );
}}
{{dcl|num=3|notes={{mark|constexpr since C++23}}|since=c++11|
float       fabsf( float num );
}}
{{dcl|num=4|notes={{mark|constexpr since C++23}}|since=c++11|
long double fabsl( long double num );
}}
{{dcl h|[[#Notes|Additional overloads]] {{mark since c++11}}}}
{{dcl header|cmath}}
{{dcl|num=A|notes={{mark|constexpr since C++23}}|since=c++11|
template&lt; class Integer &gt;
double      fabs ( Integer num );
}}
{{dcl end}}

@1-4@ Computes the absolute value of the floating-point value {{c|num}}.{{rev inl|since=c++23| The library provides overloads of {{tt|std::abs}} and {{tt|std::fabs}} for all cv-unqualified floating-point types as the type of the parameter {{c|num}}.}}

{{rrev|since=c++11|
@A@ Additional overloads are provided for all integer types, which are treated as {{c/core|double}}.
}}

For integral arguments, [[cpp/numeric/math/abs|the integral overloads of {{tt|std::abs}}]] are likely better matches. If {{tt|std::abs}} is called with an unsigned integral argument that cannot be converted to {{c/core|int}} by [[cpp/language/implicit conversion#Integral promotion|integral promotion]], the program is ill-formed.

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value}}
{{par end}}

===Return value===
If successful, returns the absolute value of {{c|arg}} ({{tt|{{!}}arg{{!}}}}). The value returned is exact and does not depend on any rounding modes.

===Error handling===
This function is not subject to any of the error conditions specified in {{lc|math_errhandling}}.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* If the argument is ±0, +0 is returned.
* If the argument is ±∞, +∞ is returned.
* If the argument is NaN, NaN is returned.

===Notes===
{{cpp/numeric/math/additional integer overload note|fabs}}

===Example===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; "abs(+3.0) = " &lt;&lt; std::abs(+3.0) &lt;&lt; '\n'
              &lt;&lt; "abs(-3.0) = " &lt;&lt; std::abs(-3.0) &lt;&lt; '\n';
    
    // special values
    std::cout &lt;&lt; "abs(-0.0) = " &lt;&lt; std::abs(-0.0) &lt;&lt; '\n'
              &lt;&lt; "abs(-Inf) = " &lt;&lt; std::abs(-INFINITY) &lt;&lt; '\n'
              &lt;&lt; "abs(-NaN) = " &lt;&lt; std::abs(-NAN) &lt;&lt; '\n';
}
|p=true
|output=
abs(+3.0) = 3
abs(-3.0) = 3
abs(-0.0) = 0
abs(-Inf) = inf
abs(-NaN) = nan
}}

===Defect reports===
{{dr list begin}}
{{dr list item|std=C++98|wg=lwg|dr=2192|before=overloads of {{tt|std::abs}} were&lt;br&gt;inconsistently declared in two headers|after=declared these overloads&lt;br&gt;in both headers}}
{{dr list item|std=C++11|wg=lwg|dr=2735|before=overloads of {{tt|std::abs}} for integer types&lt;br&gt;returning {{c/core|double}} was erroneously required|after=removed the requirement}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc abs}}
{{dsc inc|cpp/numeric/math/dsc copysign}}
{{dsc inc|cpp/numeric/math/dsc signbit}}
{{dsc inc|cpp/numeric/complex/dsc abs}}
{{dsc inc|cpp/numeric/valarray/dsc abs}}
{{dsc see c|c/numeric/math/fabs}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
{{cpp/title|remainder|remainderf|remainderl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=remainder
|param1=x
|param2=y
|constexpr_since=23
|desc=Computes the IEEE remainder of the floating point division operation {{c|x / y}}.
}}

The IEEE floating-point remainder of the division operation {{c|x / y}} calculated by this function is exactly the value {{c|x - quo * y}}, where the value {{c|quo}} is the integral value nearest the exact value {{c|x / y}}. When {{math|{{!}}quo - x / y{{!}} {{=}} ½}}, the value {{c|quo}} is chosen to be even.

In contrast to {{lc|std::fmod}}, the returned value is not guaranteed to have the same sign as {{c|x}}.

If the returned value is zero, it will have the same sign as {{c|x}}.

===Parameters===
{{par begin}}
{{par|x, y|floating-point or integer values}}
{{par end}}

===Return value===
If successful, returns the IEEE floating-point remainder of the division {{c|x / y}} as defined above.

If a domain error occurs, an implementation-defined value is returned (NaN where supported).

If a range error occurs due to underflow, the correct result is returned.

If {{c|y}} is zero, but the domain error does not occur, zero is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

Domain error may occur if {{c|y}} is zero.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* The current [[cpp/numeric/fenv/FE_round|rounding mode]] has no effect.
* {{lc|FE_INEXACT}} is never raised, the result is always exact.
* If {{c|x}} is ±∞ and {{c|y}} is not NaN, NaN is returned and {{lc|FE_INVALID}} is raised.
* If {{c|y}} is ±0 and {{c|x}} is not NaN, NaN is returned and {{lc|FE_INVALID}} is raised.
* If either argument is NaN, NaN is returned.

===Notes===
[https://pubs.opengroup.org/onlinepubs/9699919799/functions/remainder.html POSIX requires] that a domain error occurs if {{c|x}} is infinite or {{c|y}} is zero.

{{lc|std::fmod}}, but not {{tt|std::remainder}} is useful for doing silent wrapping of floating-point types to unsigned integer types: {{c|1=(0.0 &lt;= (y = std::fmod(std::rint(x), 65536.0)) ? y : 65536.0 + y)}} is in the range {{closed range|-0.0|65535.0}}, which corresponds to {{c/core|unsigned short}}, but {{c|std::remainder(std::rint(x), 65536.0)}} is in the range {{closed range|-32767.0|+32768.0}}, which is outside of the range of {{c/core|signed short}}.

{{cpp/numeric/math/additional overload note|remainder}}

===Example===
{{example
|code=
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;
// #pragma STDC FENV_ACCESS ON

int main()
{
    std::cout &lt;&lt; "remainder(+5.1, +3.0) = " &lt;&lt; std::remainder(5.1, 3) &lt;&lt; '\n'
              &lt;&lt; "remainder(-5.1, +3.0) = " &lt;&lt; std::remainder(-5.1, 3) &lt;&lt; '\n'
              &lt;&lt; "remainder(+5.1, -3.0) = " &lt;&lt; std::remainder(5.1, -3) &lt;&lt; '\n'
              &lt;&lt; "remainder(-5.1, -3.0) = " &lt;&lt; std::remainder(-5.1, -3) &lt;&lt; '\n';
    
    // special values
    std::cout &lt;&lt; "remainder(-0.0, 1.0) = " &lt;&lt; std::remainder(-0.0, 1) &lt;&lt; '\n'
              &lt;&lt; "remainder(5.1, Inf) = " &lt;&lt; std::remainder(5.1, INFINITY) &lt;&lt; '\n';
    
    // error handling
    std::feclearexcept(FE_ALL_EXCEPT);
    std::cout &lt;&lt; "remainder(+5.1, 0) = " &lt;&lt; std::remainder(5.1, 0) &lt;&lt; '\n';
    if (fetestexcept(FE_INVALID))
        std::cout &lt;&lt; "    FE_INVALID raised\n";
}
|p=true
|output=
remainder(+5.1, +3.0) = -0.9
remainder(-5.1, +3.0) = 0.9
remainder(+5.1, -3.0) = -0.9
remainder(-5.1, -3.0) = 0.9
remainder(-0.0, 1.0) = -0
remainder(5.1, Inf) = 5.1
remainder(+5.1, 0) = -nan
    FE_INVALID raised
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc div}}
{{dsc inc|cpp/numeric/math/dsc fmod}}
{{dsc inc|cpp/numeric/math/dsc remquo}}
{{dsc see c|c/numeric/math/remainder}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|ko|pt|ru|zh}}
{{cpp/title|pow|powf|powl}}
{{cpp/numeric/math/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|dcl1=
float       pow ( float base, float exp );
double      pow ( double base, double exp );
long double pow ( long double base, long double exp );
|since2=c++23|dcl2=
/* floating-point-type */
            pow ( /* floating-point-type */ base,
                  /* floating-point-type */ exp )
|notes2={{mark constexpr since c++26}}
}}
{{dcl|num=2|until=c++11|
float       pow ( float base, int exp );
double      pow ( double base, int exp );
long double pow ( long double base, int exp );
}}
{{dcl|num=3|since=c++11|notes={{mark constexpr since c++26}}|
float       powf( float base, float exp );
}}
{{dcl|num=4|since=c++11|notes={{mark constexpr since c++26}}|
long double powl( long double base, long double exp );
}}
{{dcl h|[[#Notes|Additional overloads]] {{mark since c++11}}}}
{{dcl header|cmath}}
{{dcl|num=A|notes={{mark constexpr since c++26}}|
template&lt; class Arithmetic1, class Arithmetic2 &gt;
/* common-floating-point-type */
            pow ( Arithmetic1 base, Arithmetic2 exp );
}}
{{dcl end}}

@1-4@ Computes the value of {{c|base}} raised to the power {{c|exp}}.{{rev inl|since=c++23| The library provides overloads of {{tt|std::pow}} for all cv-unqualified floating-point types as the type of the parameters {{c|base}} and {{c|exp}}.}}

{{rrev|since=c++11|
@A@ Additional overloads are provided for all other combinations of arithmetic types.
}}

===Parameters===
{{par begin}}
{{par|base|base as a floating-point or integer value}}
{{par|exp|exponent as a floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur, {{c|base}} raised to the power of {{c|exp}} ({{math|base{{su|p=exp}}}}), is returned.

If a domain error occurs, an implementation-defined value is returned (NaN where supported).

If a pole error or a range error due to overflow occurs, {{lc|HUGE_VAL|±HUGE_VAL}}, {{tt|±HUGE_VALF}}, or {{tt|±HUGE_VALL}} is returned.

If a range error occurs due to underflow, the correct result (after rounding) is returned.

===Error handling===
Errors are reported as specified in {{lc|math_errhandling}}.

If {{c|base}} is finite and negative and {{c|exp}} is finite and non-integer, a domain error occurs and a range error may occur.

If {{c|base}} is zero and {{c|exp}} is zero, a domain error may occur.

If {{c|base}} is zero and {{c|exp}} is negative, a domain error or a pole error may occur.

If the implementation supports IEEE floating-point arithmetic (IEC 60559),
* {{c|pow(+0, exp)}}, where {{c|exp}} is a negative odd integer, returns +∞ and raises {{lc|FE_DIVBYZERO}}.
* {{c|pow(-0, exp)}}, where {{c|exp}} is a negative odd integer, returns -∞ and raises {{lc|FE_DIVBYZERO}}.
* {{c|pow(±0, exp)}}, where {{c|exp}} is negative, finite, and is an even integer or a non-integer, returns +∞ and raises {{lc|FE_DIVBYZERO}}.
* {{c|pow(±0, -∞)}} returns +∞ and may raise {{lc|FE_DIVBYZERO}}.
* {{c|pow(+0, exp)}}, where {{c|exp}} is a positive odd integer, returns +0.
* {{c|pow(-0, exp)}}, where {{c|exp}} is a positive odd integer, returns -0.
* {{c|pow(±0, exp)}}, where {{c|exp}} is positive non-integer or a positive even integer, returns +0.
* {{c|pow(-1, ±∞)}} returns 1.
* {{c|pow(+1, exp)}} returns 1 for any {{c|exp}}, even when {{c|exp}} is NaN.
* {{c|pow(base, ±0)}} returns 1 for any {{c|base}}, even when {{c|base}} is NaN.
* {{c|pow(base, exp)}} returns NaN and raises {{lc|FE_INVALID}} if {{c|base}} is finite and negative and {{c|exp}} is finite and non-integer.
* {{c|pow(base, -∞)}} returns +∞ for any {{tt|{{!}}base{{!}} &lt; 1}}.
* {{c|pow(base, -∞)}} returns +0 for any {{tt|{{!}}base{{!}} &gt; 1}}.
* {{c|pow(base, +∞)}} returns +0 for any {{tt|{{!}}base{{!}} &lt; 1}}.
* {{c|pow(base, +∞)}} returns +∞ for any {{tt|{{!}}base{{!}} &gt; 1}}.
* {{c|pow(-∞, exp)}} returns -0 if {{c|exp}} is a negative odd integer.
* {{c|pow(-∞, exp)}} returns +0 if {{c|exp}} is a negative non-integer or negative even integer.
* {{c|pow(-∞, exp)}} returns -∞ if {{c|exp}} is a positive odd integer.
* {{c|pow(-∞, exp)}} returns +∞ if {{c|exp}} is a positive non-integer or positive even integer.
* {{c|pow(+∞, exp)}} returns +0 for any negative {{c|exp}}.
* {{c|pow(+∞, exp)}} returns +∞ for any positive {{c|exp}}.
* except where specified above, if any argument is NaN, NaN is returned.

===Notes===
C++98 added overloads where {{c|exp}} has type {{c/core|int}} on top of C {{ltf|c/numeric/math/pow}}, and the return type of {{c/core|std::pow(float, int)}} was {{c/core|float}}. However, the additional overloads introduced in C++11 specify that {{c/core|std::pow(float, int)}} should return {{c/core|double}}. {{lwg|550}} was raised to target this conflict, and the resolution is to removed the extra {{c/core|int}} {{c|exp}} overloads.

Although {{tt|std::pow}} cannot be used to obtain a root of a negative number, {{lc|std::cbrt}} is provided for the common case where {{c|exp}} is 1/3.

{{cpp/numeric/math/additional overload note|pow}}

===Example===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
// #pragma STDC FENV_ACCESS ON

int main()
{
    // typical usage
    std::cout &lt;&lt; "pow(2, 10) = " &lt;&lt; std::pow(2, 10) &lt;&lt; '\n'
              &lt;&lt; "pow(2, 0.5) = " &lt;&lt; std::pow(2, 0.5) &lt;&lt; '\n'
              &lt;&lt; "pow(-2, -3) = " &lt;&lt; std::pow(-2, -3) &lt;&lt; '\n';
    
    // special values
    std::cout &lt;&lt; "pow(-1, NAN) = " &lt;&lt; std::pow(-1, NAN) &lt;&lt; '\n'
              &lt;&lt; "pow(+1, NAN) = " &lt;&lt; std::pow(+1, NAN) &lt;&lt; '\n'
              &lt;&lt; "pow(INFINITY, 2) = " &lt;&lt; std::pow(INFINITY, 2) &lt;&lt; '\n'
              &lt;&lt; "pow(INFINITY, -1) = " &lt;&lt; std::pow(INFINITY, -1) &lt;&lt; '\n';
    
    // error handling
    errno = 0;
    std::feclearexcept(FE_ALL_EXCEPT);
    
    std::cout &lt;&lt; "pow(-1, 1/3) = " &lt;&lt; std::pow(-1, 1.0 / 3) &lt;&lt; '\n';
    if (errno == EDOM)
        std::cout &lt;&lt; "    errno == EDOM " &lt;&lt; std::strerror(errno) &lt;&lt; '\n';
    if (std::fetestexcept(FE_INVALID))
        std::cout &lt;&lt; "    FE_INVALID raised\n";

    std::feclearexcept(FE_ALL_EXCEPT);
    
    std::cout &lt;&lt; "pow(-0, -3) = " &lt;&lt; std::pow(-0.0, -3) &lt;&lt; '\n';
    if (std::fetestexcept(FE_DIVBYZERO))
        std::cout &lt;&lt; "    FE_DIVBYZERO raised\n";
}
|p=true
|output=
pow(2, 10) = 1024
pow(2, 0.5) = 1.41421
pow(-2, -3) = -0.125
pow(-1, NAN) = nan
pow(+1, NAN) = 1
pow(INFINITY, 2) = inf
pow(INFINITY, -1) = 0
pow(-1, 1/3) = -nan
    errno == EDOM Numerical argument out of domain
    FE_INVALID raised
pow(-0, -3) = -inf
    FE_DIVBYZERO raised
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc sqrt}}
{{dsc inc|cpp/numeric/math/dsc cbrt}}
{{dsc inc|cpp/numeric/math/dsc hypot}}
{{dsc inc|cpp/numeric/complex/dsc pow}}
{{dsc inc|cpp/numeric/valarray/dsc pow}}
{{dsc see c|c/numeric/math/pow}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
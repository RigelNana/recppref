{{cpp/numeric/math/unary is|isnan
|description=Determines if the given floating point number {{c|num}} is a not-a-number (NaN) value.
|condition=is a NaN
|note=
There are many different NaN values with different sign bits and payloads, see {{lc|std::nan}} and {{lc|std::numeric_limits::quiet_NaN}}.

NaN values never compare equal to themselves or to other NaN values. Copying a NaN is not required, by IEEE-754, to preserve its bit representation (sign and {{rlp|nan|payload}}), though most implementation do.

Another way to test if a floating-point value is NaN is to compare it with itself: {{c|1=bool is_nan(double x) { return x != x; }&lt;!----&gt;}}.

[https://gcc.gnu.org/wiki/FloatingPointMath GCC] and [https://clang.llvm.org/docs/UsersManual.html#controlling-floating-point-behavior Clang] support a {{tt|-ffinite-math}} option (additionally implied by {{tt|-ffast-math}}), which allows the respective compiler to assume the nonexistence of special IEEE-754 floating point values such as NaN, infinity, or negative zero. In other words, {{tt|std::isnan}} is assumed to always return {{c|false}} under this option.
}}

===Example===
{{example
|code=
#include &lt;cfloat&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; std::boolalpha
              &lt;&lt; "isnan(NaN) = " &lt;&lt; std::isnan(NAN) &lt;&lt; '\n'
              &lt;&lt; "isnan(Inf) = " &lt;&lt; std::isnan(INFINITY) &lt;&lt; '\n'
              &lt;&lt; "isnan(0.0) = " &lt;&lt; std::isnan(0.0) &lt;&lt; '\n'
              &lt;&lt; "isnan(DBL_MIN/2.0) = " &lt;&lt; std::isnan(DBL_MIN / 2.0) &lt;&lt; '\n'
              &lt;&lt; "isnan(0.0 / 0.0)   = " &lt;&lt; std::isnan(0.0 / 0.0) &lt;&lt; '\n'
              &lt;&lt; "isnan(Inf - Inf)   = " &lt;&lt; std::isnan(INFINITY - INFINITY) &lt;&lt; '\n';
}
|output=
isnan(NaN) = true
isnan(Inf) = false
isnan(0.0) = false
isnan(DBL_MIN/2.0) = false
isnan(0.0 / 0.0)   = true
isnan(Inf - Inf)   = true
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc fnan}}
{{dsc inc|cpp/numeric/math/dsc fpclassify}}
{{dsc inc|cpp/numeric/math/dsc isfinite}}
{{dsc inc|cpp/numeric/math/dsc isinf}}
{{dsc inc|cpp/numeric/math/dsc isnormal}}
{{dsc inc|cpp/numeric/math/dsc isunordered}}
{{dsc see c|c/numeric/math/isnan}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
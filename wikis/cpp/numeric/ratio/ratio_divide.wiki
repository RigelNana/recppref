{{cpp/title|ratio_divide}}
{{cpp/numeric/ratio/navbar}}
{{ddcl|header=ratio|since=c++11|1=
template&lt; class R1, class R2 &gt;
using ratio_divide = /* see below */;
}}

The alias template {{tt|std::ratio_divide}} denotes the result of dividing two exact rational fractions represented by the {{lc|std::ratio}} specializations {{tt|R1}} and {{tt|R2}}.

The result is a {{lc|std::ratio}} specialization {{c|std::ratio&lt;U, V&gt;}}, such that given {{c|1=Num == R1::num * R2::den}} and {{c|1=Denom == R1::den * R2::num}} (computed without arithmetic overflow), {{tt|U}} is {{c|std::ratio&lt;Num, Denom&gt;::num}} and {{tt|V}} is {{c|std::ratio&lt;Num, Denom&gt;::den}}.

===Notes===
If {{tt|U}} or {{tt|V}} is not representable in {{lc|std::intmax_t}}, the program is ill-formed. If {{tt|Num}} or {{tt|Denom}} is not representable in {{lc|std::intmax_t}}, the program is ill-formed unless the implementation yields correct values for {{tt|U}} and {{tt|V}}.

The above definition requires that the result of {{c|std::ratio_divide&lt;R1, R2&gt;}} be already reduced to lowest terms; for example, {{c|std::ratio_divide&lt;std::ratio&lt;1, 12&gt;, std::ratio&lt;1, 6&gt;&gt;}} is the same type as {{c|std::ratio&lt;1, 2&gt;}}.

===Example===
{{example
|
|code=
#include &lt;iostream&gt;
#include &lt;ratio&gt;

int main()
{
    using two_third = std::ratio&lt;2, 3&gt;;
    using one_sixth = std::ratio&lt;1, 6&gt;;
    using quotient = std::ratio_divide&lt;two_third, one_sixth&gt;;
    static_assert(std::ratio_equal_v&lt;quotient, std::ratio&lt;0B100, 0X001&gt;&gt;);
    std::cout &lt;&lt; "(2/3) / (1/6) = " &lt;&lt; quotient::num &lt;&lt; '/' &lt;&lt; quotient::den &lt;&lt; '\n';
}
|output=
(2/3) / (1/6) = 4/1
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/ratio/dsc ratio_multiply}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|ratio_equal}}
{{cpp/numeric/ratio/navbar}}
{{ddcl|header=ratio|since=c++11|1=
template&lt; class R1, class R2 &gt;
struct ratio_equal : std::integral_constant&lt;bool, /* see below */&gt; { };
}}

If the ratios {{tt|R1}} and {{tt|R2}} are equal, provides the member constant {{c|value}} equal {{c|true}}. Otherwise, {{c|value}} is {{c|false}}.

===Helper variable template===
{{ddcl|since=c++17|1=
template&lt; class R1, class R2 &gt;
constexpr bool ratio_equal_v = ratio_equal&lt;R1, R2&gt;::value;
}}

{{cpp/types/integral_constant/inherit|{{c|1=R1::num == R2::num &amp;&amp; R1::den == R2::den}}}}

===Possible implementation===
{{eq fun
|1=
template&lt; class R1, class R2 &gt;
struct ratio_equal : public std::integral_constant &lt;
                                 bool,
                                 R1::num == R2::num &amp;&amp; R1::den == R2::den
                            &gt; {};
}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ratio&gt;
 
int main()
{
    constexpr bool equ = std::ratio_equal_v&lt;std::ratio&lt;2,3&gt;,
                                            std::ratio&lt;6,9&gt;&gt;;
    static_assert(equ);
    std::cout &lt;&lt; "2/3 " &lt;&lt; (equ ? "==" : "!=") &lt;&lt; " 6/9\n";
}
|output=
2/3 == 6/9
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/ratio/dsc ratio_not_equal}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
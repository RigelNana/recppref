{{cpp/title|ratio_greater}}
{{cpp/numeric/ratio/navbar}}
{{ddcl|header=ratio|since=c++11|1=
template&lt; class R1, class R2 &gt;
struct ratio_greater : std::integral_constant&lt;bool, /* see below */&gt; { };
}}

If the ratio {{tt|R1}} is greater than the ratio {{tt|R2}}, provides the member constant {{c|value}} equal {{c|true}}. Otherwise, {{c|value}} is {{c|false}}.

===Helper variable template===
{{ddcl|since=c++17|1=
template&lt; class R1, class R2 &gt;
constexpr bool ratio_greater_v = ratio_greater&lt;R1, R2&gt;::value;
}}

{{cpp/types/integral_constant/inherit|{{c|1=R1::num * R2::den &gt; R2::num * R1::den}}, or equivalent expression that avoids overflow}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ratio&gt;

int main()
{
    static_assert(std::ratio_greater&lt;std::ratio&lt;3, 4&gt;, std::ratio&lt;1, 2&gt;&gt;::value,
                  "3/4 &gt; 1/2");

    if (std::ratio_greater&lt;std::ratio&lt;11, 12&gt;, std::ratio&lt;10, 11&gt;&gt;::value)
        std::cout &lt;&lt; "11/12 &gt; 10/11" "\n";

    // Since C++17
    static_assert(std::ratio_greater_v&lt;std::ratio&lt;12, 13&gt;, std::ratio&lt;11, 12&gt;&gt;);

    if constexpr (std::ratio_greater_v&lt;std::ratio&lt;12, 13&gt;, std::ratio&lt;11, 12&gt;&gt;)
        std::cout &lt;&lt; "12/13 &gt; 11/12" "\n";
}
|output=
11/12 &gt; 10/11
12/13 &gt; 11/12
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/ratio/dsc ratio greater_equal}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|ratio}}
{{cpp/numeric/ratio/navbar}}
{{ddcl|header=ratio|since=c++11|1=
template&lt;
    std::intmax_t Num,
    std::intmax_t Denom = 1
&gt; class ratio;
}}

The class template {{tt|std::ratio}} provides {{rlp|/|compile-time rational arithmetic}} support. Each instantiation of this template exactly represents any finite rational number as long as its numerator {{tt|Num}} and denominator {{tt|Denom}} are representable as compile-time constants of type {{lc|std::intmax_t}}. In addition, {{tt|Denom}} may not be zero and both {{tt|Num}} and {{tt|Denom}} may not be equal to the most negative value.

The static data members {{tt|num}} and {{tt|den}} representing the numerator and denominator are calculated by dividing {{tt|Num}} and {{tt|Denom}} by their greatest common divisor. However, two {{tt|std::ratio}} with different {{tt|Num}} or {{tt|Denom}} are distinct types even if they represent the same rational number (after reduction). A {{tt|std::ratio}} type can be reduced to the lowest terms via its {{tt|type}} member: {{c/core|std::ratio&lt;3, 6&gt;::type}} is {{c/core|std::ratio&lt;1, 2&gt;}}.

{{cpp/numeric/ratio/typedefs table}}

===Nested types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|type}}|{{c/core|std::ratio&lt;num, den&gt;}} (the rational type after reduction)}}
{{dsc end}}

===Data members===
In the definitions given below,
* {{c|sign(Denom)}} is {{c|-1}} if {{c|Denom}} is negative, or {{c|1}} otherwise; and
* {{c|gcd(Num, Denom)}} is the greatest common divisor of {{c|std::abs(Num)}} and {{c|std::abs(Denom)}}.
{{dsc begin}}
{{dsc hitem|Member|Definition}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|constexpr std::intmax_t}}}} num|{{c|sign(Denom) * Num / gcd(Num, Denom)}}}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|constexpr std::intmax_t}}}} den|{{c|std::abs(Denom) / gcd(Num, Denom)}}}}
{{dsc end}}

===Notes===
{{ftm begin}}
{{ftm|__cpp_lib_ratio|Adding the new 2022 SI prefixes: quecto, quetta, ronto, ronna|std=C++26|value=202306L}}
{{ftm end}}

===Example===
{{example|code=
#include &lt;ratio&gt;

static_assert
(
    std::ratio_equal_v&lt;std::ratio_multiply&lt;std::femto, std::exa&gt;, std::kilo&gt;
);

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/dsc mathematical constants}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
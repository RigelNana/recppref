{{cpp/title|ratio_not_equal}}
{{cpp/numeric/ratio/navbar}}
{{ddcl|header=ratio|since=c++11|1=
template&lt; class R1, class R2 &gt;
struct ratio_not_equal : std::integral_constant&lt;bool, /* see below */&gt; { };
}}

If the ratios {{tt|R1}} and {{tt|R2}} are not equal, provides the member constant {{c|value}} equal {{c|true}}. Otherwise, {{c|value}} is {{c|false}}.

===Helper variable template===
{{ddcl|since=c++17|1=
template&lt; class R1, class R2 &gt;
constexpr bool ratio_not_equal_v = ratio_not_equal&lt;R1, R2&gt;::value;
}}

{{cpp/types/integral_constant/inherit|{{c|1=R1::num != R2::num {{!!}} R1::den != R2::den}}}}

===Possible implementation===
{{eq fun
|1=
template&lt; class R1, class R2 &gt;
struct ratio_not_equal : std::integral_constant &lt;
                              bool,
                              !std::ratio_equal&lt;R1, R2&gt;
                         &gt; {};
}}

===Example===
{{example
|code=
#include &lt;ratio&gt;

static_assert(std::ratio_not_equal_v&lt;std::ratio&lt;6, 9&gt;, std::ratio&lt;9, 6&gt;&gt;, "6/9 != 9/6");

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/ratio/dsc ratio_equal}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
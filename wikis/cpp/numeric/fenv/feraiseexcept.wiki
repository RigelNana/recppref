{{cpp/title|feraiseexcept}}
{{cpp/numeric/fenv/navbar}}
{{dcl begin}}
{{dcl header|cfenv}}
{{dcl|since=c++11|
int feraiseexcept( int excepts );
}}
{{dcl end}}

Attempts to raise all floating point exceptions listed in {{tt|excepts}} (a bitwise OR of the [[cpp/numeric/fenv/FE_exceptions|floating point exception macros]]). If one of the exceptions is {{lc|FE_OVERFLOW}} or {{lc|FE_UNDERFLOW}}, this function may additionally raise {{lc|FE_INEXACT}}. The order in which the exceptions are raised is unspecified, except that {{lc|FE_OVERFLOW}} and {{lc|FE_UNDERFLOW}} are always raised before {{lc|FE_INEXACT}}.

===Parameters===
{{par begin}}
{{par|excepts|bitmask listing the exception flags to raise}}
{{par end}}

===Return value===
{{c|0}} if all listed exceptions were raised, non-zero value otherwise.

===Example===
{{example
|code=
#include &lt;cfenv&gt;
#include &lt;iostream&gt;

// #pragma STDC FENV_ACCESS ON

int main()
{
    std::feclearexcept(FE_ALL_EXCEPT);
    const int r = std::feraiseexcept(FE_UNDERFLOW {{!}} FE_DIVBYZERO);
    std::cout &lt;&lt; "Raising divbyzero and underflow simultaneously "
              &lt;&lt; (r ? "fails" : "succeeds") &lt;&lt; " and results in\n";

    const int e = std::fetestexcept(FE_ALL_EXCEPT);
    if (e &amp; FE_DIVBYZERO)
        std::cout &lt;&lt; "division by zero\n";
    if (e &amp; FE_INEXACT)
        std::cout &lt;&lt; "inexact\n";
    if (e &amp; FE_INVALID)
        std::cout &lt;&lt; "invalid\n";
    if (e &amp; FE_UNDERFLOW)
        std::cout &lt;&lt; "underflow\n";
    if (e &amp; FE_OVERFLOW)
        std::cout &lt;&lt; "overflow\n";
}
|output=
Raising divbyzero and underflow simultaneously succeeds and results in
division by zero
underflow
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/fenv/dsc feclearexcept}}
{{dsc inc|cpp/numeric/fenv/dsc fetestexcept}}
{{dsc see c|c/numeric/fenv/feraiseexcept}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
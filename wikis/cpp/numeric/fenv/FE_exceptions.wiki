{{title|{{small|FE_DIVBYZERO, FE_INEXACT, FE_INVALID, FE_OVERFLOW, FE_UNDERFLOW, FE_ALL_EXCEPT}}}}
{{cpp/numeric/fenv/navbar}}
{{dcl begin}}
{{dcl header|cfenv}}
{{dcl|since=c++11|
#define FE_DIVBYZERO    /*implementation defined power of 2*/
}}
{{dcl|since=c++11|
#define FE_INEXACT      /*implementation defined power of 2*/
}}
{{dcl|since=c++11|
#define FE_INVALID      /*implementation defined power of 2*/
}}
{{dcl|since=c++11|
#define FE_OVERFLOW     /*implementation defined power of 2*/
}}
{{dcl|since=c++11|
#define FE_UNDERFLOW    /*implementation defined power of 2*/
}}
{{dcl|since=c++11|
#define FE_ALL_EXCEPT   FE_DIVBYZERO {{!}} FE_INEXACT {{!}} \
                        FE_INVALID {{!}} FE_OVERFLOW {{!}}  \
                        FE_UNDERFLOW
}}
{{dcl end}}

All these macro constants (except {{tt|FE_ALL_EXCEPT}}) expand to integer constant expressions that are distinct powers of 2, which uniquely identify all supported floating-point exceptions. Each macro is defined only if it is supported.

The macro constant {{tt|FE_ALL_EXCEPT}}, which expands to the bitwise OR of all other {{tt|FE_*}}, is always defined and is zero if floating-point exceptions are not supported by the implementation.

{{dsc begin}}
{{dsc hitem|Constant|Explanation}}
{{dsc|{{tt|FE_DIVBYZERO}}|pole error occurred in an earlier floating-point operation}}
{{dsc|{{tt|FE_INEXACT}}|inexact result: rounding was necessary to store the result of an earlier floating-point operation}}
{{dsc|{{tt|FE_INVALID}}|domain error occurred in an earlier floating-point operation}}
{{dsc|{{tt|FE_OVERFLOW}}|the result of the earlier floating-point operation was too large to be representable}}
{{dsc|{{tt|FE_UNDERFLOW}}|the result of the earlier floating-point operation was subnormal with a loss of precision}}
{{dsc|{{tt|FE_ALL_EXCEPT}}|bitwise OR of all supported floating-point exceptions}}
{{dsc end}}

The implementation may define additional macro constants in {{header|cfenv}} to identify additional floating-point exceptions. All such constants begin with {{tt|FE_}} followed by at least one uppercase letter.

See {{lc|math_errhandling}} for further details.

===Example===
{{include|cpp/numeric/fenv/example1}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc math_errhandling}}
{{dsc see c|c/numeric/fenv/FE_exceptions|floating point exception macros|nomono=true}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
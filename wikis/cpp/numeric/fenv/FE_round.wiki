{{title|{{small|FE_DOWNWARD, FE_TONEAREST, FE_TOWARDZERO, FE_UPWARD}}}}
{{cpp/numeric/fenv/navbar}}
{{dcl begin}}
{{dcl header|cfenv}}
{{dcl|since=c++11|
#define FE_DOWNWARD     /*implementation defined*/
}}
{{dcl|since=c++11|
#define FE_TONEAREST    /*implementation defined*/
}}
{{dcl|since=c++11|
#define FE_TOWARDZERO   /*implementation defined*/
}}
{{dcl|since=c++11|
#define FE_UPWARD       /*implementation defined*/
}}
{{dcl end}}

Each of these macro constants expands to a nonnegative integer constant expression, which can be used with {{lc|std::fesetround}} and {{lc|std::fegetround}} to indicate one of the supported floating-point rounding modes. The implementation may define additional rounding mode constants in {{header|cfenv}}, which should all begin with {{tt|FE_}} followed by at least one uppercase letter. Each macro is only defined if it is supported.

{{dsc begin}}
{{dsc hitem|Constant|Explanation}}
{{dsc|{{tt|FE_DOWNWARD}}|rounding towards negative infinity}}
{{dsc|{{tt|FE_TONEAREST}}|rounding towards nearest representable value}}
{{dsc|{{tt|FE_TOWARDZERO}}|rounding towards zero}}
{{dsc|{{tt|FE_UPWARD}}|rounding towards positive infinity}}
{{dsc end}}

Additional rounding modes may be supported by an implementation.

The current rounding mode affects the following:
* results of floating-point [[cpp/language/operator_arithmetic|arithmetic operators]] outside of constant expressions
{{source|1=
double x = 1;
x / 10; // 0.09999999999999999167332731531132594682276248931884765625
     // or 0.1000000000000000055511151231257827021181583404541015625
}}
* results of standard library [[cpp/numeric/math|mathematical functions]]
{{source|1=
std::sqrt(2); // 1.41421356237309492343001693370752036571502685546875
           // or 1.4142135623730951454746218587388284504413604736328125
}}
* floating-point to floating-point implicit conversion and casts
{{source|1=
double d = 1 + std::numeric_limits&lt;double&gt;::epsilon();
float f = d; // 1.00000000000000000000000
          // or 1.00000011920928955078125
}}
* string conversions such as {{lc|std::strtod}} or {{lc|std::printf}}
{{source|1=
std::stof("0.1"); // 0.0999999940395355224609375
               // or 0.100000001490116119384765625
}}
* the library rounding functions {{lc|std::nearbyint}}, {{lc|std::rint}}, {{lc|std::lrint}}
{{source|1=
std::lrint(2.1); // 2 or 3
}}
The current rounding mode does NOT affect the following:
* floating-point to integer implicit conversion and casts (always towards zero),
* results of floating-point arithmetic operators in expressions executed at compile time (always to nearest),
* the library functions {{lc|std::round}}, {{lc|std::lround}}, {{lc|std::llround}}, {{lc|std::ceil}}, {{lc|std::floor}}, {{lc|std::trunc}}.

As with any [[cpp/numeric/fenv|floating-point environment]] functionality, rounding is only guaranteed if {{c|#pragma STDC FENV_ACCESS ON}} is set.

Compilers that do not support the pragma may offer their own ways to support current rounding mode. For example Clang and GCC have the option {{tt|-frounding-math}} intended to disable optimizations that would change the meaning of rounding-sensitive code.

===Example===
{{example
|code=
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
// #pragma STDC FENV_ACCESS ON

int main()
{
    std::fesetround(FE_DOWNWARD);
    std::cout &lt;&lt; "rounding down: \n" &lt;&lt; std::setprecision(50)
              &lt;&lt; "         pi = " &lt;&lt; std::acos(-1.f) &lt;&lt; '\n'
              &lt;&lt; "stof(\"1.1\") = " &lt;&lt; std::stof("1.1") &lt;&lt; '\n'
              &lt;&lt; "  rint(2.1) = " &lt;&lt; std::rint(2.1) &lt;&lt; "\n\n";
    std::fesetround(FE_UPWARD);
    std::cout &lt;&lt; "rounding up: \n"
              &lt;&lt; "         pi = " &lt;&lt; std::acos(-1.f) &lt;&lt; '\n'
              &lt;&lt; "stof(\"1.1\") = " &lt;&lt; std::stof("1.1") &lt;&lt; '\n'
              &lt;&lt; "  rint(2.1) = " &lt;&lt; std::rint(2.1) &lt;&lt; '\n';
}
|output=
rounding down:
         pi = 3.141592502593994140625
stof("1.1") = 1.099999904632568359375
  rint(2.1) = 2

rounding up:
         pi = 3.1415927410125732421875
stof("1.1") = 1.10000002384185791015625
  rint(2.1) = 3
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc float_round_style}}
{{dsc inc|cpp/numeric/fenv/dsc feround}}
{{dsc see c|c/numeric/fenv/FE_round|floating-point rounding macros|nomono=true}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
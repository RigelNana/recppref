{{title|Basic linear algebra algorithms {{mark since c++26}}}}
{{cpp/numeric/linalg/navbar}}

Basic linear algebra algorithms are based on the dense Basic Linear Algebra Subroutines ({{enwiki|Basic Linear Algebra Subprograms|BLAS}}) which corresponds to a subset of the [http://www.netlib.org/blas/blast-forum/blas-report.pdf BLAS Standard]. These algorithms that access the elements of arrays view those elements through {{lc|std::mdspan}} representing vector or matrix.

The BLAS algorithms are categorized into three sets of operations called ''levels'', which generally correspond to the degree of the polynomial in the complexities of algorithms:
* {{enwiki|Basic Linear Algebra Subprograms#Level 1|BLAS 1}}: All algorithms with {{lc|std::mdspan}} parameters perform a count of {{lc|std::mdspan}} array accesses and arithmetic operations that are ''linear'' in the maximum product of extents of any {{lc|std::mdspan}} parameter. These algorithms contain ''vector'' operations such as dot products, norms, and vector addition.
* {{enwiki|Basic Linear Algebra Subprograms#Level 2|BLAS 2}}: All algorithms have general complexity in ''quadratic'' time. These algorithms contain ''matrix-vector'' operations such as matrix-vector multiplications and a solver of the triangular linear system.
* {{enwiki|Basic Linear Algebra Subprograms#Level 3|BLAS 3}}: All algorithms have general complexity in ''cubic'' time. These algorithms contain ''matrix-matrix'' operations such as matrix-matrix multiplications and a solver of the multiple triangular linear systems.

{{dsc begin}}
{{dsc h1|In-place transformations}}
{{dsc header|linalg}}
{{dsc namespace|std::linalg}}
{{dsc inc|cpp/numeric/linalg/dsc scaled_accessor}}
{{dsc inc|cpp/numeric/linalg/dsc conjugated_accessor}}
{{dsc inc|cpp/numeric/linalg/dsc layout_transpose}}
{{dsc inc|cpp/numeric/linalg/dsc scaled}}
{{dsc inc|cpp/numeric/linalg/dsc conjugated}}
{{dsc inc|cpp/numeric/linalg/dsc transposed}}
{{dsc inc|cpp/numeric/linalg/dsc conjugate_transposed}}

{{dsc h1|BLAS 1 functions}}
{{dsc header|linalg}}
{{dsc namespace|std::linalg}}
{{dsc inc|cpp/numeric/linalg/dsc setup_givens_rotation}}
{{dsc inc|cpp/numeric/linalg/dsc apply_givens_rotation}}
{{dsc inc|cpp/numeric/linalg/dsc swap_elements}}
{{dsc inc|cpp/numeric/linalg/dsc scale}}
{{dsc inc|cpp/numeric/linalg/dsc copy}}
{{dsc inc|cpp/numeric/linalg/dsc add}}
{{dsc inc|cpp/numeric/linalg/dsc dot}}
{{dsc inc|cpp/numeric/linalg/dsc dotc}}
{{dsc inc|cpp/numeric/linalg/dsc vector_sum_of_squares}}
{{dsc inc|cpp/numeric/linalg/dsc vector_two_norm}}
{{dsc inc|cpp/numeric/linalg/dsc vector_abs_sum}}
{{dsc inc|cpp/numeric/linalg/dsc vector_idx_abs_max}}
{{dsc inc|cpp/numeric/linalg/dsc matrix_frob_norm}}
{{dsc inc|cpp/numeric/linalg/dsc matrix_one_norm}}
{{dsc inc|cpp/numeric/linalg/dsc matrix_inf_norm}}

{{dsc h1|BLAS 2 functions}}
{{dsc header|linalg}}
{{dsc namespace|std::linalg}}
{{dsc inc|cpp/numeric/linalg/dsc matrix_vector_product}}
{{dsc inc|cpp/numeric/linalg/dsc symmetric_matrix_vector_product}}
{{dsc inc|cpp/numeric/linalg/dsc hermitian_matrix_vector_product}}
{{dsc inc|cpp/numeric/linalg/dsc triangular_matrix_vector_product}}
{{dsc inc|cpp/numeric/linalg/dsc triangular_matrix_vector_solve}}
{{dsc inc|cpp/numeric/linalg/dsc matrix_rank_1_update}}
{{dsc inc|cpp/numeric/linalg/dsc matrix_rank_1_update_c}}
{{dsc inc|cpp/numeric/linalg/dsc symmetric_matrix_rank_1_update}}
{{dsc inc|cpp/numeric/linalg/dsc hermitian_matrix_rank_1_update}}
{{dsc inc|cpp/numeric/linalg/dsc symmetric_matrix_rank_2_update}}
{{dsc inc|cpp/numeric/linalg/dsc hermitian_matrix_rank_2_update}}

{{dsc h1|BLAS 3 functions}}
{{dsc header|linalg}}
{{dsc namespace|std::linalg}}
{{dsc inc|cpp/numeric/linalg/dsc matrix_product}}
{{dsc inc|cpp/numeric/linalg/dsc symmetric_matrix_product}}
{{dsc inc|cpp/numeric/linalg/dsc hermitian_matrix_product}}
{{dsc inc|cpp/numeric/linalg/dsc triangular_matrix_product}}
{{dsc inc|cpp/numeric/linalg/dsc symmetric_matrix_rank_k_update}}
{{dsc inc|cpp/numeric/linalg/dsc hermitian_matrix_rank_k_update}}
{{dsc inc|cpp/numeric/linalg/dsc symmetric_matrix_rank_2k_update}}
{{dsc inc|cpp/numeric/linalg/dsc hermitian_matrix_rank_2k_update}}
{{dsc inc|cpp/numeric/linalg/dsc triangular_matrix_matrix_solve}}

{{dsc h1|Helper items}}
{{dsc header|linalg}}
{{dsc namespace|std::linalg}}
{{dsc inc|cpp/numeric/linalg/dsc_storage_order_tags}}
{{dsc inc|cpp/numeric/linalg/dsc_triangle_tags}}
{{dsc inc|cpp/numeric/linalg/dsc_diagonal_tags}}
{{dsc inc|cpp/numeric/linalg/dsc layout_blas_packed}}
{{dsc end}}

===Notes===
{{feature test macro|__cpp_lib_linalg|std=C++26|value=202311L|Basic linear algebra algorithms (BLAS)}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;cstddef&gt;
#include &lt;execution&gt;
#include &lt;linalg&gt;
#include &lt;mdspan&gt;
#include &lt;numeric&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;double&gt; x_vec(42);
    std::ranges::iota(x_vec, 0.0);

    std::mdspan x(x_vec.data(), x_vec.size());

    // x[i] *= 2.0, executed sequentially
    std::linalg::scale(2.0, x);

    // x[i] *= 3.0, executed in parallel
    std::linalg::scale(std::execution::par_unseq, 3.0, x);

    for (std::size_t i{}; i != x.size(); ++i)
        assert(x[i] == 6.0 * static_cast&lt;double&gt;(i));
}
}}

===External links===
{{elink begin}}
{{elink|[http://www.netlib.org/blas/ BLAS homepage]}}
{{elink|[http://www.netlib.org/blas/blast-forum/ BLAS Technical Forum]}}
{{elink end}}

{{langlinks|es|ja|ru|zh}}
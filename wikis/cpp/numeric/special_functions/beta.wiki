{{cpp/title|beta|betaf|betal}}
{{cpp/numeric/special_functions/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++17|dcl1=
float       beta ( float x, float y );
double      beta ( double x, double y );
long double beta ( long double x, long double y );
|since2=c++23|dcl2=
/* floating-point-type */ beta( /* floating-point-type */ x,
                                /* floating-point-type */ y );
}}
{{dcl|num=2|since=c++17|
float       betaf( float x, float y );
}}
{{dcl|num=3|since=c++17|
long double betal( long double x, long double y );
}}
{{dcl h|[[#Notes|Additional overloads]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++17|
template&lt; class Arithmetic1, class Arithmetic2 &gt;
/* common-floating-point-type */ beta( Arithmetic1 x, Arithmetic2 y );
}}
{{dcl end}}

@1-3@ Computes the {{enwiki|Beta function}} of {{c|x}} and {{c|y}}.{{rev inl|since=c++23| The library provides overloads of {{tt|std::beta}} for all cv-unqualified floating-point types as the type of the parameters {{c|x}} and {{c|y}}.}}

@A@ Additional overloads are provided for all other combinations of arithmetic types.

===Parameters===
{{par begin}}
{{par|x, y|floating-point or integer values}}
{{par end}}

===Return value===
If no errors occur, value of the beta function of {{c|x}} and {{c|y}}, that is {{mathjax-or|\(\int_{0}^{1}{ {t}^{x-1}{(1-t)}^{y-1}\mathsf{d}t}\)|{{minteg|0|1|t{{su|p=x-1}}(1-t){{su|p=(y-1)}}d''t''}}}}, or, equivalently, {{mathjax-or|\(\frac{\Gamma(x)\Gamma(y)}{\Gamma(x+y)}\)|{{mfrac|Γ(x)Γ(y)|Γ(x+y)}}}} is returned.

===Error handling===
Errors may be reported as specified in {{lc|math_errhandling}}.
* If any argument is NaN, NaN is returned and domain error is not reported.
* The function is only required to be defined where both {{c|x}} and {{c|y}} are greater than zero, and is allowed to report a domain error otherwise.

===Notes===
{{cpp/numeric/special functions/older impl note}}

An implementation of this function is also [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_beta/beta_function.html available in boost.math].

{{c|std::beta(x, y)}} equals {{c|std::beta(y, x)}}.

When {{c|x}} and {{c|y}} are positive integers, {{c|std::beta(x, y)}} equals {{mathjax-or|1=\(\frac{(x-1)!(y-1)!}{(x+y-1)!}\)|2={{mfrac|(x-1)!(y-1)!|(x+y-1)!}}}}.

Binomial coefficients can be expressed in terms of the beta function: {{mathjax-or|1=\(\binom{n}{k} = \frac{1}{(n+1)B(n-k+1,k+1)}\)|2={{mparen|(|)|n|k}}={{mfrac|1|(n+1)Β(n-k+1,k+1)}}}}.

{{cpp/numeric/special functions/additional overload note|beta}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;numbers&gt;
#include &lt;string&gt;

long binom_via_beta(int n, int k)
{
    return std::lround(1 / ((n + 1) * std::beta(n - k + 1, k + 1)));
}

long binom_via_gamma(int n, int k)
{
    return std::lround(std::tgamma(n + 1) /
                      (std::tgamma(n - k + 1) * 
                       std::tgamma(k + 1)));
}

int main()
{
    std::cout &lt;&lt; "Pascal's triangle:\n";
    for (int n = 1; n &lt; 10; ++n)
    {
        std::cout &lt;&lt; std::string(20 - n * 2, ' ');
        for (int k = 1; k &lt; n; ++k)
        {
            std::cout &lt;&lt; std::setw(3) &lt;&lt; binom_via_beta(n, k) &lt;&lt; ' ';
            assert(binom_via_beta(n, k) == binom_via_gamma(n, k));
        }
        std::cout &lt;&lt; '\n';
    }

    // A spot-check
    const long double p = 0.123; // a random value in [0, 1]
    const long double q = 1 - p;
    const long double π = std::numbers::pi_v&lt;long double&gt;;
    std::cout &lt;&lt; "\n\n" &lt;&lt; std::setprecision(19)
              &lt;&lt; "β(p,1-p)   = " &lt;&lt; std::beta(p, q) &lt;&lt; '\n'
              &lt;&lt; "π/sin(π*p) = " &lt;&lt; π / std::sin(π * p) &lt;&lt; '\n';
}
|output=
Pascal's triangle:
                 
                  2
                3   3
              4   6   4
            5  10  10   5
          6  15  20  15   6
        7  21  35  35  21   7
      8  28  56  70  56  28   8
    9  36  84 126 126  84  36   9

β(p,1-p)   = 8.335989149587307836
π/sin(π*p) = 8.335989149587307834
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc tgamma}}
{{dsc end}}

===External links===
{{eli|[https://mathworld.wolfram.com/BetaFunction.html Weisstein, Eric W. "Beta Function."] From MathWorld &amp;mdash; A Wolfram Web Resource.}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
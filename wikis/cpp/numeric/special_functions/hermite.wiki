{{cpp/title|hermite|hermitef|hermitel}}
{{cpp/numeric/special_functions/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++17|dcl1=
double      hermite ( unsigned int n, double x );
float       hermite ( unsigned int n, float x );
long double hermite ( unsigned int n, long double x );
|since2=c++23|dcl2=
/* floating-point-type */ hermite( unsigned int n,
                                   /* floating-point-type */ x );
}}
{{dcl|num=2|since=c++17|
float       hermitef( unsigned int n, float x );
}}
{{dcl|num=3|since=c++17|
long double hermitel( unsigned int n, long double x );
}}
{{dcl h|[[#Notes|Additional overloads]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++17|
template&lt; class Integer &gt;
double      hermite ( unsigned int n, Integer x );
}}
{{dcl end}}

@1-3@ Computes the (physicist's) {{enwiki|Hermite polynomials}} of the degree {{c|n}} and argument {{c|x}}.{{rev inl|since=c++23| The library provides overloads of {{tt|std::hermite}} for all cv-unqualified floating-point types as the type of the parameter {{c|x}}.}}
@A@ Additional overloads are provided for all integer types, which are treated as {{c/core|double}}.

===Parameters===
{{par begin}}
{{par|n|the degree of the polynomial}}
{{par|x|the argument, a floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur, value of the order-{{c|n}} Hermite polynomial of {{c|x}}, that is {{math|(-1){{su|p=n}}{{mexp|x{{su|p=2}}}}{{mfrac|d{{su|p=n}}|dx{{su|p=n}}}}{{mexp|-x{{su|p=2}}}}}}, is returned.

===Error handling===
Errors may be reported as specified in {{lc|math_errhandling}}.
* If the argument is NaN, NaN is returned and domain error is not reported.
* If {{c|n}} is greater or equal than 128, the behavior is implementation-defined.

===Notes===
{{cpp/numeric/special functions/older impl note}}

An implementation of this function is also [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_poly/hermite.html available in boost.math].

The Hermite polynomials are the polynomial solutions of the equation
{{math|1=u{{su|p=,,}}-2xu{{su|p=,}} = -2nu}}.

The first few are:
{| class="wikitable" style="font-size:95%; text-align:center;"
|-
! Function
! Polynomial
|- style="height:45px;"
| {{nbsp|4}}{{co|hermite(0, x)}}{{nbsp|4}} || {{math|1}}
|- style="height:45px;"
| {{co|hermite(1, x)}} || {{math|2x}}
|- style="height:45px;"
| {{co|hermite(2, x)}} || {{math|4x{{su|p=2}} - 2}}
|- style="height:45px;"
| {{co|hermite(3, x)}} || {{math|8x{{su|p=3}} - 12x}}
|- style="height:45px;"
| {{co|hermite(4, x)}} || {{nbsp|4}}{{math|16x{{su|p=4}} - 48x{{su|p=2}} + 12}}{{nbsp|4}}
|}

{{cpp/numeric/special functions/additional integer overload note|hermite}}

===Example===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;

double H3(double x)
{
    return 8 * std::pow(x, 3) - 12 * x;
}

double H4(double x)
{
    return 16 * std::pow(x, 4) - 48 * x * x + 12;
}

int main()
{
    // spot-checks
    std::cout &lt;&lt; std::hermite(3, 10) &lt;&lt; '=' &lt;&lt; H3(10) &lt;&lt; '\n'
              &lt;&lt; std::hermite(4, 10) &lt;&lt; '=' &lt;&lt; H4(10) &lt;&lt; '\n';
}
|output=
7880=7880
155212=155212
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/special_functions/dsc laguerre}}
{{dsc inc|cpp/numeric/special_functions/dsc legendre}}
{{dsc end}}

===External links===
{{eli|[https://mathworld.wolfram.com/HermitePolynomial.html Weisstein, Eric W. "Hermite Polynomial."] From MathWorld â€” A Wolfram Web Resource.}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
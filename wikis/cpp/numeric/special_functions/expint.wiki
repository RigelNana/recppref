{{cpp/title|expint|expintf|expintl}}
{{cpp/numeric/special_functions/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++17|dcl1=
float       expint ( float num );
double      expint ( double num );
long double expint ( long double num );
|since2=c++23|dcl2=
/* floating-point-type */ expint( /* floating-point-type */ num );
}}
{{dcl|num=2|since=c++17|
float       expintf( float num );
}}
{{dcl|num=3|since=c++17|
long double expintl( long double num );
}}
{{dcl h|[[#Notes|Additional overloads]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++17|
template&lt; class Integer &gt;
double      expint ( Integer num );
}}
{{dcl end}}

@1-3@ Computes the {{enwiki|Exponential integral}} of {{c|num}}.{{rev inl|since=c++23| The library provides overloads of {{tt|std::expint}} for all cv-unqualified floating-point types as the type of the parameter {{c|num}}.}}
@A@ Additional overloads are provided for all integer types, which are treated as {{c/core|double}}.

===Parameters===
{{par begin}}
{{par|num|floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur, value of the exponential integral of {{c|num}}, that is {{math|-{{minteg|-num|∞|{{mfrac|{{mexp|-t}}|t}}d''t''}}}}, is returned.

===Error handling===
Errors may be reported as specified in {{lc|math_errhandling}}.
* If the argument is NaN, NaN is returned and domain error is not reported.
* If the argument is ±0, -∞ is returned.

===Notes===
{{cpp/numeric/special functions/older impl note}}

An implementation of this function is also [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/expint/expint_i.html available in boost.math].

{{cpp/numeric/special functions/additional integer overload note|expint}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

{{cpp/numeric/draw_vbars}}

int main()
{
    std::cout &lt;&lt; "Ei(0) = " &lt;&lt; std::expint(0) &lt;&lt; '\n'
              &lt;&lt; "Ei(1) = " &lt;&lt; std::expint(1) &lt;&lt; '\n'
              &lt;&lt; "Gompertz constant = " &lt;&lt; -std::exp(1) * std::expint(-1) &lt;&lt; '\n';
     
    std::vector&lt;float&gt; v;
    for (float x{1.f}; x &lt; 8.8f; x += 0.3565f)
        v.push_back(std::expint(x));
    draw_vbars&lt;9, 1, 1&gt;(v);
}
|output=
Ei(0) = -inf
Ei(1) = 1.89512
Gompertz constant = 0.596347
                                          █ ┬ 666.505
                                          █ │
                                        ▆ █ │
                                        █ █ │
                                      █ █ █ │
                                    ▆ █ █ █ │
                                ▁ ▆ █ █ █ █ │
                            ▂ ▅ █ █ █ █ █ █ │
▁ ▁ ▁ ▁ ▁ ▁ ▁ ▂ ▂ ▃ ▃ ▄ ▆ ▇ █ █ █ █ █ █ █ █ ┴ 1.89512
}}

===External links===
{{eli|[https://mathworld.wolfram.com/ExponentialIntegral.html Weisstein, Eric W. "Exponential Integral."] From MathWorld — A Wolfram Web Resource.}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
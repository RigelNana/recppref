{{cpp/title|cyl_bessel_k|cyl_bessel_kf|cyl_bessel_kl}}
{{cpp/numeric/special_functions/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++17|dcl1=
float       cyl_bessel_k ( float nu, float x );
double      cyl_bessel_k ( double nu, double x );
long double cyl_bessel_k ( long double nu, long double x );
|since2=c++23|dcl2=
/* floating-point-type */ cyl_bessel_k( /* floating-point-type */ nu,
                                        /* floating-point-type */ x );
}}
{{dcl|num=2|since=c++17|
float       cyl_bessel_kf( float nu, float x );
}}
{{dcl|num=3|since=c++17|
long double cyl_bessel_kl( long double nu, long double x );
}}
{{dcl h|[[#Notes|Additional overloads]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++17|
template&lt; class Arithmetic1, class Arithmetic2 &gt;
/* common-floating-point-type */
    cyl_bessel_k( Arithmetic1 nu, Arithmetic2 x );
}}
{{dcl end}}

@1-3@ Computes the {{enwiki|Bessel function#Modified Bessel functions: I.CE.B1 .2C K.CE.B1|irregular modified cylindrical Bessel function}} (also known as modified Bessel function of the second kind) of {{c|nu}} and {{c|x}}.{{rev inl|since=c++23| The library provides overloads of {{tt|std::cyl_bessel_k}} for all cv-unqualified floating-point types as the type of the parameters {{c|nu}} and {{c|x}}.}}
@A@ Additional overloads are provided for all other combinations of arithmetic types.

===Parameters===
{{par begin}}
{{par|nu|the order of the function}}
{{par|x|the argument of the function}}
{{par end}}

===Return value===
If no errors occur, value of the irregular modified cylindrical Bessel function (modified Bessel function of the second kind) of {{c|nu}} and {{c|x}}, is returned, that is {{math|K{{su|b=nu}}(x) {{=}} {{mfrac|π|2}}{{mfrac|I{{su|b=-nu}}(x)-I{{su|b=nu}}(x)|sin(nuπ)}}}} (where {{math|I{{su|b=nu}}(x)}} is {{c|std::cyl_bessel_i(nu, x)}}) for {{math|x≥0}} and non-integer {{c|nu}}; for integer {{c|nu}} a limit is used.

===Error handling===
Errors may be reported as specified in {{lc|math_errhandling}}:
* If the argument is NaN, NaN is returned and domain error is not reported.
* If {{math|nu≥128}}, the behavior is implementation-defined.

===Notes===
{{cpp/numeric/special functions/older impl note}}

An implementation of this function is also [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/bessel/mbessel.html available in boost.math].

{{cpp/numeric/special functions/additional overload note|cyl_bessel_k}}

===Example===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;
#include &lt;numbers&gt;

int main()
{
    double pi = std::numbers::pi;
    const double x = 1.2345;
    
    // spot check for nu == 0.5
    std::cout &lt;&lt; "K_.5(" &lt;&lt; x &lt;&lt; ") = " &lt;&lt; std::cyl_bessel_k(.5, x) &lt;&lt; '\n'
              &lt;&lt; "calculated via I = "
              &lt;&lt; (pi / 2) * (std::cyl_bessel_i(-.5, x)
                 - std::cyl_bessel_i(.5, x)) / std::sin(.5 * pi) &lt;&lt; '\n';
}
|output=
K_.5(1.2345) = 0.32823
calculated via I = 0.32823
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/special_functions/dsc cyl_bessel_i}}
{{dsc inc|cpp/numeric/special_functions/dsc cyl_bessel_j}}
{{dsc end}}

===External links===
{{eli|[https://mathworld.wolfram.com/ModifiedBesselFunctionoftheSecondKind.html Weisstein, Eric W. "Modified Bessel Function of the Second Kind."] From MathWorld — A Wolfram Web Resource.}}

{{langlinks|es|ja|zh}}
{{cpp/title|laguerre|laguerref|laguerrel}}
{{cpp/numeric/special_functions/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++17|dcl1=
float       laguerre ( unsigned int n, float x );
double      laguerre ( unsigned int n, double x );
long double laguerre ( unsigned int n, long double x );
|since2=c++23|dcl2=
/* floating-point-type */ laguerre( unsigned int n,
                                    /* floating-point-type */ x );
}}
{{dcl|num=2|since=c++17|
float       laguerref( unsigned int n, float x );
}}
{{dcl|num=3|since=c++17|
long double laguerrel( unsigned int n, long double x );
}}
{{dcl h|[[#Notes|Additional overloads]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++17|
template&lt; class Integer &gt;
double      laguerre ( unsigned int n, Integer x );
}}
{{dcl end}}

@1-3@ Computes the non-associated {{enwiki|Laguerre polynomials}} of the degree {{c|n}} and argument {{c|x}}.{{rev inl|since=c++23| The library provides overloads of {{tt|std::laguerre}} for all cv-unqualified floating-point types as the type of the parameter {{c|x}}.}}
@A@ Additional overloads are provided for all integer types, which are treated as {{c/core|double}}.

===Parameters===
{{par begin}}
{{par|n|the degree of the polynomial, an unsigned integer value}}
{{par|x|the argument, a floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur, value of the nonassociated Laguerre polynomial of {{c|x}}, that is {{math|{{mfrac|{{mexp|x}}|n!}}{{mfrac|d{{su|p=n}}|dx{{su|p=n}}}}(x{{su|p=n}}{{mexp|-x}})}}, is returned.

===Error handling===
Errors may be reported as specified in {{lc|math_errhandling}}
* If the argument is NaN, NaN is returned and domain error is not reported
* If {{c|x}} is negative, a domain error may occur
* If {{c|n}} is greater or equal than 128, the behavior is implementation-defined

===Notes===
{{cpp/numeric/special functions/older impl note}}

An implementation of this function is also [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_poly/laguerre.html available in boost.math].

The Laguerre polynomials are the polynomial solutions of the equation {{math|xy{{su|p=,,}}+(1-x)y{{su|p=,}}+ny = 0}}.

The first few are:
{| class="wikitable" style="font-size:95%; text-align:center;"
|-
! Function
! Polynomial
|- style="height:45px;"
| {{nbsp|4}}{{co|laguerre(0, x)}}{{nbsp|4}} || 1
|- style="height:45px;"
| {{co|laguerre(1, x)}} || {{math|-x + 1}}
|- style="height:45px;"
| {{co|laguerre(2, x)}} || {{math|{{mfrac|1|2}}(x{{su|p=2}} - 4x + 2)}}
|- style="height:45px;"
| {{co|laguerre(3, x)}} || {{nbsp|4}}{{math|{{mfrac|1|6}}(-x{{su|p=3}} - 9x{{su|p=2}} - 18x + 6)}}{{nbsp|4}}
|}

{{cpp/numeric/special functions/additional integer overload note|laguerre}}

===Example===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;

double L1(double x)
{
    return -x + 1;
}

double L2(double x)
{
    return 0.5 * (x * x - 4 * x + 2);
}

int main()
{
    // spot-checks
    std::cout &lt;&lt; std::laguerre(1, 0.5) &lt;&lt; '=' &lt;&lt; L1(0.5) &lt;&lt; '\n'
              &lt;&lt; std::laguerre(2, 0.5) &lt;&lt; '=' &lt;&lt; L2(0.5) &lt;&lt; '\n'
              &lt;&lt; std::laguerre(3, 0.0) &lt;&lt; '=' &lt;&lt; 1.0 &lt;&lt; '\n';
}
|output=
0.5=0.5
0.125=0.125
1=1
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/special_functions/dsc assoc_laguerre}}
{{dsc end}}

===External links===
{{eli|[https://mathworld.wolfram.com/LaguerrePolynomial.html Weisstein, Eric W. "Laguerre Polynomial."] From MathWorld â€” A Wolfram Web Resource.}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
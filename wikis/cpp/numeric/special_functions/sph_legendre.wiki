{{cpp/title|sph_legendre|sph_legendref|sph_legendrel}}
{{cpp/numeric/special_functions/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++17|dcl1=
float       sph_legendre ( unsigned l, unsigned m, float theta );
double      sph_legendre ( unsigned l, unsigned m, double theta );
long double sph_legendre ( unsigned l, unsigned m, long double theta );
|since2=c++23|dcl2=
/* floating-point-type */ sph_legendre( unsigned l, unsigned m,
                                        /* floating-point-type */ theta );
}}
{{dcl|num=2|since=c++17|
float       sph_legendref( unsigned l, unsigned m, float theta );
}}
{{dcl|num=3|since=c++17|
long double sph_legendrel( unsigned l, unsigned m, long double theta );
}}
{{dcl h|[[#Notes|Additional overloads]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++17|
template&lt; class Integer &gt;
double      sph_legendre ( unsigned l, unsigned m, Integer theta );
}}
{{dcl end}}

@1-3@ Computes the {{enwiki|Spherical harmonics#Orthogonality and normalization|spherical associated Legendre function}} of degree {{c|l}}, order {{c|m}}, and polar angle {{c|theta}}.{{rev inl|since=c++23| The library provides overloads of {{tt|std::sph_legendre}} for all cv-unqualified floating-point types as the type of the parameter {{c|theta}}.}}
@A@ Additional overloads are provided for all integer types, which are treated as {{c/core|double}}.

===Parameters===
{{par begin}}
{{par|l|degree}}
{{par|m|order}}
{{par|theta|polar angle, measured in radians}}
{{par end}}

===Return value===
If no errors occur, returns the value of the spherical associated Legendre function (that is, spherical harmonic with ϕ = 0) of {{c|l}}, {{c|m}}, and {{c|theta}}, where the spherical harmonic function is defined as {{math|1=Y{{su|b=l|p=m}}(theta,ϕ) = (-1){{su|p=m}}[{{mfrac|(2l+1)(l-m)!|4π(l+m)!}}]{{su|p=1/2}}P{{su|b=l|p=m}}(cos(theta))e{{su|p=imϕ}}}} where {{math|P{{su|b=l|p=m}}(x)}} is {{c|std::assoc_legendre(l, m, x)}}) and {{math|{{!}}m{{!}}≤l}}.

Note that the [https://mathworld.wolfram.com/Condon-ShortleyPhase.html Condon-Shortley phase term ] {{math|(-1){{su|p=m}}}} is included in this definition because it is omitted from the definition of {{math|P{{su|b=l|p=m}}}} in {{lc|std::assoc_legendre}}.

===Error handling===
Errors may be reported as specified in {{lc|math_errhandling}}.
* If the argument is NaN, NaN is returned and domain error is not reported.
* If {{math|l≥128}}, the behavior is implementation-defined.

===Notes===
{{cpp/numeric/special functions/older impl note}}

An implementation of the spherical harmonic function is available in [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_poly/sph_harm.html boost.math], and it reduces to this function when called with the parameter phi set to zero.

{{cpp/numeric/special functions/additional integer overload note|sph_legendre}}

===Example===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;
#include &lt;numbers&gt;

int main()
{
    // spot check for l=3, m=0
    double x = 1.2345;
    std::cout &lt;&lt; "Y_3^0(" &lt;&lt; x &lt;&lt; ") = " &lt;&lt; std::sph_legendre(3, 0, x) &lt;&lt; '\n';

    // exact solution
    std::cout &lt;&lt; "exact solution = "
              &lt;&lt; 0.25 * std::sqrt(7 / std::numbers::pi)
                  * (5 * std::pow(std::cos(x), 3) - 3 * std::cos(x))
              &lt;&lt; '\n';
}
|output=
Y_3^0(1.2345) = -0.302387
exact solution = -0.302387
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/special_functions/dsc assoc_legendre}}
{{dsc end}}

===External links===
{{eli|[https://mathworld.wolfram.com/SphericalHarmonic.html Weisstein, Eric W. "Spherical Harmonic."] From MathWorld — A Wolfram Web Resource.}}

{{langlinks|es|ja|zh}}
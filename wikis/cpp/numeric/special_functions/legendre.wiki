{{cpp/title|legendre|legendref|legendrel}}
{{cpp/numeric/special_functions/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++17|dcl1=
float       legendre ( unsigned int n, float x );
double      legendre ( unsigned int n, double x );
long double legendre ( unsigned int n, long double x );
|since2=c++23|dcl2=
/* floating-point-type */ legendre( unsigned int n,
                                    /* floating-point-type */ x );
}}
{{dcl|num=2|since=c++17|
float       legendref( unsigned int n, float x );
}}
{{dcl|num=3|since=c++17|
long double legendrel( unsigned int n, long double x );
}}
{{dcl h|[[#Notes|Additional overloads]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++17|
template&lt; class Integer &gt;
double      legendre ( unsigned int n, Integer x );
}}
{{dcl end}}

@1-3@ Computes the unassociated {{enwiki|Legendre polynomials}} of the degree {{c|n}} and argument {{c|x}}.{{rev inl|since=c++23| The library provides overloads of {{tt|std::legendre}} for all cv-unqualified floating-point types as the type of the parameter {{c|x}}.}}
@A@ Additional overloads are provided for all integer types, which are treated as {{c/core|double}}.

===Parameters===
{{par begin}}
{{par|n|the degree of the polynomial}}
{{par|x|the argument, a floating-point or integer value}}
{{par end}}

===Return value===
If no errors occur, value of the order-{{c|n}} unassociated Legendre polynomial of {{c|x}}, that is {{mathjax-or|1=\(\mathsf{P}_n(x) = \frac{1}{2^n n!} \frac{\mathsf{d}^n}{\mathsf{d}x^n} (x^2-1)^n \)|2={{mfrac|1|2{{su|p=n}}n!}}{{mfrac|d{{su|p=n}}|dx{{su|p=n}}}}(x{{su|p=2}}-1){{su|p=n}}}}, is returned.

===Error handling===
Errors may be reported as specified in {{lc|math_errhandling}}.
* If the argument is NaN, NaN is returned and domain error is not reported
* The function is not required to be defined for {{math|{{!}}x{{!}}&gt;1}}
* If {{c|n}} is greater or equal than 128, the behavior is implementation-defined

===Notes===
{{cpp/numeric/special functions/older impl note}}

An implementation of this function is also [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_poly/legendre.html available in boost.math].

The first few Legendre polynomials are:
{| class="wikitable" style="font-size:95%; text-align:center;"
|-
! Function
! Polynomial
|- style="height:45px;"
| {{nbsp|4}}{{co|legendre(0, x)}}{{nbsp|4}} || {{math|1}}
|- style="height:45px;"
| {{co|legendre(1, x)}} || {{math|x}}
|- style="height:45px;"
| {{co|legendre(2, x)}} || {{math|{{mfrac|1|2}}(3x{{su|p=2}} - 1)}}
|- style="height:45px;"
| {{co|legendre(3, x)}} || {{math|{{mfrac|1|2}}(5x{{su|p=3}} - 3x)}}
|- style="height:45px;"
| {{co|legendre(4, x)}} || {{nbsp|4}}{{math|{{mfrac|1|8}}(35x{{su|p=4}} - 30x{{su|p=2}} + 3)}}{{nbsp|4}}
|}

{{cpp/numeric/special functions/additional integer overload note|legendre}}

===Example===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;

double P3(double x)
{
    return 0.5 * (5 * std::pow(x, 3) - 3 * x);
}

double P4(double x)
{
    return 0.125 * (35 * std::pow(x, 4) - 30 * x * x + 3);
}

int main()
{
    // spot-checks
    std::cout &lt;&lt; std::legendre(3, 0.25) &lt;&lt; '=' &lt;&lt; P3(0.25) &lt;&lt; '\n'
              &lt;&lt; std::legendre(4, 0.25) &lt;&lt; '=' &lt;&lt; P4(0.25) &lt;&lt; '\n';
}
|output=
-0.335938=-0.335938
0.157715=0.157715
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/special_functions/dsc laguerre}}
{{dsc inc|cpp/numeric/special_functions/dsc hermite}}
{{dsc end}}

===External links===
{{eli|[https://mathworld.wolfram.com/LegendrePolynomial.html Weisstein, Eric W. "Legendre Polynomial."] From MathWorld â€” A Wolfram Web Resource.}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|sph_neumann|sph_neumannf|sph_neumannl}}
{{cpp/numeric/special_functions/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++17|dcl1=
float       sph_neumann ( unsigned n, float x );
double      sph_neumann ( unsigned n, double x );
long double sph_neumann ( unsigned n, long double x );
|since2=c++23|dcl2=
/* floating-point-type */ sph_neumann( unsigned n,
                                       /* floating-point-type */ x );
}}
{{dcl|num=2|since=c++17|
float       sph_neumannf( unsigned n, float x );
}}
{{dcl|num=3|since=c++17|
long double sph_neumannl( unsigned n, long double x );
}}
{{dcl h|[[#Notes|Additional overloads]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++17|
template&lt; class Integer &gt;
double      sph_neumann ( unsigned n, Integer x );
}}
{{dcl end}}

@1-3@ Computes the {{enwiki|Bessel function#Spherical Bessel functions: jn.2C yn|spherical Bessel function of the second kind}}, also known as the spherical Neumann function, of {{c|n}} and {{c|x}}.{{rev inl|since=c++23| The library provides overloads of {{tt|std::sph_neumann}} for all cv-unqualified floating-point types as the type of the parameter {{c|x}}.}}
@A@ Additional overloads are provided for all integer types, which are treated as {{c/core|double}}.

===Parameters===
{{par begin}}
{{par|n|the order of the function}}
{{par|x|the argument of the function}}
{{par end}}

===Return value===
If no errors occur, returns the value of the spherical Bessel function of the second kind (spherical Neumann function) of {{c|n}} and {{c|x}}, that is {{math|1=n{{su|b=n}}(x) = (π/2x){{su|p=1/2}}N{{su|b=n+1/2}}(x)}} where {{math|N{{su|b=n}}(x)}} is {{c|std::cyl_neumann(n, x)}} and {{math|x≥0}}.

===Error handling===
Errors may be reported as specified in {{lc|math_errhandling}}
* If the argument is NaN, NaN is returned and domain error is not reported
* If {{math|n≥128}}, the behavior is implementation-defined

===Notes===
{{cpp/numeric/special functions/older impl note}}

An implementation of this function is also available in [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/bessel/sph_bessel.html boost.math].

{{cpp/numeric/special functions/additional integer overload note|sph_neumann}}

===Example===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;

int main()
{
    // spot check for n == 1
    double x = 1.2345;
    std::cout &lt;&lt; "n_1(" &lt;&lt; x &lt;&lt; ") = " &lt;&lt; std::sph_neumann(1, x) &lt;&lt; '\n';
    
    // exact solution for n_1
    std::cout &lt;&lt; "-cos(x)/x² - sin(x)/x = "
              &lt;&lt; -std::cos(x) / (x * x) - std::sin(x) / x &lt;&lt; '\n';
}
|output=
n_1(1.2345) = -0.981201
-cos(x)/x² - sin(x)/x = -0.981201
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/special_functions/dsc cyl_neumann}}
{{dsc inc|cpp/numeric/special_functions/dsc sph_bessel}}
{{dsc end}}

===External links===
{{eli|[https://mathworld.wolfram.com/SphericalBesselFunctionoftheSecondKind.html Weisstein, Eric W. "Spherical Bessel Function of the Second Kind."] From MathWorld — A Wolfram Web Resource.}}

{{langlinks|es|ja|zh}}
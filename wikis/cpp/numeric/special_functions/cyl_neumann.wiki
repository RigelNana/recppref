{{cpp/title|cyl_neumann|cyl_neumannf|cyl_neumannl}}
{{cpp/numeric/special_functions/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++17|dcl1=
float       cyl_neumann ( float nu, float x );
double      cyl_neumann ( double nu, double x );
long double cyl_neumann ( long double nu, long double x );
|since2=c++23|dcl2=
/* floating-point-type */ cyl_neumann( /* floating-point-type */ nu,
                                       /* floating-point-type */ x );
}}
{{dcl|num=2|since=c++17|
float       cyl_neumannf( float nu, float x );
}}
{{dcl|num=3|since=c++17|
long double cyl_neumannl( long double nu, long double x );
}}
{{dcl h|[[#Notes|Additional overloads]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++17|
template&lt; class Arithmetic1, class Arithmetic2 &gt;
/* common-floating-point-type */
    cyl_neumann( Arithmetic1 nu, Arithmetic2 x );
}}
{{dcl end}}

@1-3@ Computes the {{enwiki|Bessel function#Bessel functions of the second kind: Y.CE.B1|cylindrical Neumann function}} (also known as Bessel function of the second kind or Weber function) of {{c|nu}} and {{c|x}}.{{rev inl|since=c++23| The library provides overloads of {{tt|std::cyl_neumann}} for all cv-unqualified floating-point types as the type of the parameters {{c|nu}} and {{c|x}}.}}
@A@ Additional overloads are provided for all other combinations of arithmetic types.

===Parameters===
{{par begin}}
{{par|nu|the order of the function}}
{{par|x|the argument of the function}}
{{par end}}

===Return value===
If no errors occur, value of the cylindrical Neumann function (Bessel function of the second kind) of {{tt|nu}} and {{tt|x}}, is returned, that is {{math|1=N{{su|b=nu}}(x) = {{mfrac|J{{su|b=nu}}(x)cos(nuπ)-J{{su|b=-nu}}(x)|sin(nuπ)}}}} (where {{math|J{{su|b=nu}}(x)}} is {{c|std::cyl_bessel_j(nu, x)}}) for {{math|x≥0}} and non-integer {{c|nu}}; for integer {{c|nu}} a limit is used.

===Error handling===
Errors may be reported as specified in {{lc|math_errhandling}}:

* If the argument is NaN, NaN is returned and domain error is not reported.
* If {{math|nu≥128}}, the behavior is implementation-defined.

===Notes===
{{cpp/numeric/special functions/older impl note}}

An implementation of this function is also available in [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/bessel/bessel_first.html boost.math].

{{cpp/numeric/special functions/additional overload note|cyl_neumann}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;
#include &lt;numbers&gt;

const double π = std::numbers::pi; // or std::acos(-1) in pre C++20
 
// To calculate the cylindrical Neumann function via cylindrical Bessel function of the
// first kind we have to implement J, because the direct invocation of the
// std::cyl_bessel_j(nu, x), per formula above,
// for negative nu raises 'std::domain_error': Bad argument in __cyl_bessel_j.

double J_neg(double nu, double x)
{
    return std::cos(-nu * π) * std::cyl_bessel_j(-nu, x)
          -std::sin(-nu * π) * std::cyl_neumann(-nu, x);
}

double J_pos(double nu, double x)
{
    return std::cyl_bessel_j(nu, x);
}

double J(double nu, double x)
{
    return nu &lt; 0.0 ? J_neg(nu, x) : J_pos(nu, x);
}

int main()
{
    std::cout &lt;&lt; "spot checks for nu == 0.5\n" &lt;&lt; std::fixed &lt;&lt; std::showpos;
    const double nu = 0.5;
    for (double x = 0.0; x &lt;= 2.0; x += 0.333)
    {
        const double n = std::cyl_neumann(nu, x);
        const double j = (J(nu, x) * std::cos(nu * π) - J(-nu, x)) / std::sin(nu * π);
        std::cout &lt;&lt; "N_.5(" &lt;&lt; x &lt;&lt; ") = " &lt;&lt; n &lt;&lt; ", calculated via J = " &lt;&lt; j &lt;&lt; '\n';
        assert(n == j);
    }
}
|output=
spot checks for nu == 0.5
N_.5(+0.000000) = -inf, calculated via J = -inf
N_.5(+0.333000) = -1.306713, calculated via J = -1.306713
N_.5(+0.666000) = -0.768760, calculated via J = -0.768760
N_.5(+0.999000) = -0.431986, calculated via J = -0.431986
N_.5(+1.332000) = -0.163524, calculated via J = -0.163524
N_.5(+1.665000) = +0.058165, calculated via J = +0.058165
N_.5(+1.998000) = +0.233876, calculated via J = +0.233876
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/special_functions/dsc cyl_bessel_i}}
{{dsc inc|cpp/numeric/special_functions/dsc cyl_bessel_j}}
{{dsc inc|cpp/numeric/special_functions/dsc cyl_bessel_k}}
{{dsc end}}

===External links===
{{eli|[https://mathworld.wolfram.com/BesselFunctionoftheSecondKind.html Weisstein, Eric W. "Bessel Function of the Second Kind."] From MathWorld — A Wolfram Web Resource.}}

{{langlinks|es|ja|zh}}
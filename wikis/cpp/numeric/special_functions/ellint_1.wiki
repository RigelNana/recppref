{{cpp/title|ellint_1|ellint_1f|ellint_1l}}
{{cpp/numeric/special_functions/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++17|dcl1=
float       ellint_1 ( float k, float phi );
double      ellint_1 ( double k, double phi );
long double ellint_1 ( long double k, long double phi );
|since2=c++23|dcl2=
/* floating-point-type */ ellint_1( /* floating-point-type */ k,
                                    /* floating-point-type */ phi );
}}
{{dcl|num=2|since=c++17|
float       ellint_1f( float k, float phi );
}}
{{dcl|num=3|since=c++17|
long double ellint_1l( long double k, long double phi );
}}
{{dcl h|[[#Notes|Additional overloads]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++17|
template&lt; class Arithmetic1, class Arithmetic2 &gt;
/* common-floating-point-type */
    ellint_1( Arithmetic1 k, Arithmetic2 phi );
}}
{{dcl end}}

@1-3@ Computes the {{enwiki|Elliptic integral#Elliptic integral of the first kind|incomplete elliptic integral of the first kind}} of {{c|k}} and {{c|phi}}.{{rev inl|since=c++23| The library provides overloads of {{tt|std::ellint_1}} for all cv-unqualified floating-point types as the type of the parameters {{c|k}} and {{c|phi}}.}}
@A@ Additional overloads are provided for all other combinations of arithmetic types.

===Parameters===
{{par begin}}
{{par|k|elliptic modulus or eccentricity (a floating-point or integer value)}}
{{par|phi|Jacobi amplitude (a floating-point or integer value, measured in radians)}}
{{par end}}

===Return value===
If no errors occur, value of the incomplete elliptic integral of the first kind of {{c|k}} and {{c|phi}}, that is {{math|{{minteg|0|phi|{{mfrac|dθ|{{mrad|1-k{{su|p=2}}sin{{su|p=2}}θ}}}}}}}}, is returned.

===Error handling===
Errors may be reported as specified in {{lc|math_errhandling}}:
* If the argument is NaN, NaN is returned and domain error is not reported.
* If {{math|{{!}}k{{!}}&gt;1}}, a domain error may occur.

===Notes===
{{cpp/numeric/special functions/older impl note}}

An implementation of this function is also available in [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/ellint/ellint_1.html boost.math].

{{cpp/numeric/special functions/additional overload note|ellint_1}}

===Example===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;
#include &lt;numbers&gt;

int main()
{
    const double hpi = std::numbers::pi / 2.0;
    
    std::cout &lt;&lt; "F(0,π/2)  = " &lt;&lt; std::ellint_1(0, hpi) &lt;&lt; '\n'
              &lt;&lt; "F(0,-π/2) = " &lt;&lt; std::ellint_1(0, -hpi) &lt;&lt; '\n'
              &lt;&lt; "π/2       = " &lt;&lt; hpi &lt;&lt; '\n'
              &lt;&lt; "F(0.7,0)  = " &lt;&lt; std::ellint_1(0.7, 0) &lt;&lt; '\n';
}
|output=
F(0,π/2)  = 1.5708
F(0,-π/2) = -1.5708
π/2       = 1.5708
F(0.7,0)  = 0
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/special_functions/dsc comp_ellint_1}}
{{dsc end}}

===External links===
{{eli|[https://mathworld.wolfram.com/EllipticIntegraloftheFirstKind.html Weisstein, Eric W. "Elliptic Integral of the First Kind."] From MathWorld — A Wolfram Web Resource.}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{title|Member templates}}
{{cpp/language/declarations/expressions/templates/navbar}}

Template declarations ({{rlp|class template|class}}, {{rlp|function template|function}}{{rev inl|since=c++14|, and {{rlp|variable template|variables}}}}) can appear inside a {{rlp|class|member specification}} of any class, struct, or union that are not {{rlpsd|class#Local classes}}.

{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

struct Printer
{
    // generic functor
    std::ostream&amp; os;
    Printer(std::ostream&amp; os) : os(os) {}
    template&lt;typename T&gt;
    void operator()(const T&amp; obj) { os &lt;&lt; obj &lt;&lt; ' '; } // member template
};

int main()
{
    std::vector&lt;int&gt; v{1,2,3};
    std::for_each(v.begin(), v.end(), Printer(std::cout));
    std::string s{"abc"};
    std::ranges::for_each(s, Printer(std::cout));
}
|output=
1 2 3 a b c 
}}

Partial specializations of member template may appear both at class scope and at enclosing namespace scope. Explicit specializations may appear in any scope in which the primary template may appear.{{mark unreviewed dr|CWG|727}}
{{source|1=
struct A
{
    template&lt;class T&gt; struct B;        // primary member template
    template&lt;class T&gt; struct B&lt;T*&gt; {}; // OK: partial specialization
//  template&lt;&gt; struct B&lt;int*&gt; {};      // OK via CWG 727: full specialization
};
template&lt;&gt; struct A::B&lt;int*&gt; {};       // OK
template&lt;class T&gt; struct A::B&lt;T&amp;&gt; {};  // OK
}}

If the enclosing class declaration is, in turn, a class template, when a member template is defined outside of the class body, it takes two sets of template parameters: one for the enclosing class, and another one for itself:
{{source|1=
template&lt;typename T1&gt;
struct string
{
    // member template function
    template&lt;typename T2&gt;
    int compare(const T2&amp;);
    // constructors can be templates too
    template&lt;typename T2&gt;
    string(const std::basic_string&lt;T2&gt;&amp; s) { /*...*/ }
};
// out of class definition of string&lt;T1&gt;::compare&lt;T2&gt; 
template&lt;typename T1&gt; // for the enclosing class template
template&lt;typename T2&gt; // for the member template
int string&lt;T1&gt;::compare(const T2&amp; s) { /* ... */ }
}}

===Member function templates===
{{rlp|destructor|Destructor}}s and {{rlp|copy constructor}}s cannot be templates. If a template constructor is declared which could be instantiated with the type signature of a copy constructor, the {{rlpsd|copy constructor#Implicitly-declared copy constructor}} is used instead.

A member function template cannot be virtual, and a member function template in a derived class cannot override a virtual member function from the base class.
{{source|1=
class Base
{
    virtual void f(int);
};

struct Derived : Base
{
    // this member template does not override Base::f
    template&lt;class T&gt; void f(T);

    // non-template member override can call the template:
    void f(int i) override
    {
         f&lt;&gt;(i);
    }
};
}}

A non-template member function and a template member function with the same name may be declared. In case of conflict (when some template specialization matches the non-template function signature exactly), the use of that name and type refers to the non-template member unless an explicit template argument list is supplied.

{{source|1=
template&lt;typename T&gt;
struct A
{
    void f(int); // non-template member
    
    template&lt;typename T2&gt;
    void f(T2); // member template
};

// template member definition
template&lt;typename T&gt;
template&lt;typename T2&gt;
void A&lt;T&gt;::f(T2)
{
    // some code
}

int main()
{
    A&lt;char&gt; ac;
    ac.f('c'); // calls template function A&lt;char&gt;::f&lt;char&gt;(char)
    ac.f(1);   // calls non-template function A&lt;char&gt;::f(int)
    ac.f&lt;&gt;(1); // calls template function A&lt;char&gt;::f&lt;int&gt;(int)
}
}}


An out-of-class definition of a member function template must be ''equivalent'' to the declaration inside the class (see {{rlpsd|function template#Function template overloading}} for the definition of equivalency), otherwise it is considered to be an overload.

{{source|1=
struct X
{
    template&lt;class T&gt; T good(T n);
    template&lt;class T&gt; T bad(T n);
};

template&lt;class T&gt; struct identity { using type = T; };

// OK: equivalent declaration
template&lt;class V&gt;
V X::good(V n) { return n; }

// Error: not equivalent to any of the declarations inside X
template&lt;class T&gt;
T X::bad(typename identity&lt;T&gt;::type n) { return n; }
}}

===Conversion function templates===
A user-defined {{rlp|cast operator|conversion function}} can be a template.

{{source|1=
struct A
{
    template&lt;typename T&gt;
    operator T*(); // conversion to pointer to any type
};

// out-of-class definition
template&lt;typename T&gt;
A::operator T*() { return nullptr; }

// explicit specialization for char*
template&lt;&gt;
A::operator char*() { return nullptr; }

// explicit instantiation
template A::operator void*();

int main()
{
    A a;
    int* ip = a.operator int*(); // explicit call to A::operator int*()
}
}}

During {{rlp|overload resolution}}, specializations of conversion function templates are not found by {{rlp|lookup|name lookup}}. Instead, all visible conversion function templates are considered, and every specialization produced by {{rlp|template argument deduction}} (which has special rules for conversion function templates) is used as if found by name lookup.

Using-declarations in derived classes cannot refer to specializations of template conversion functions from base classes.

{{rrev|since=c++14|{{mark unreviewed dr|CWG|1878}}
A user-defined conversion function template cannot have a deduced return type:
{{source|1=
struct S
{
    operator auto() const { return 10; } // OK
    template&lt;class T&gt; operator auto() const { return 42; } // error
}; 
}}
}}

{{rrev|since=c++14|
===Member variable templates===
A variable template declaration may appear at class scope, in which case it declares a static data member template. See {{rlp|variable template}}s for details.
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=cwg|dr=1878|std=C++14|before=operator auto was technically allowed|after=operator auto forbidden}}
{{dr list end}}

{{langlinks|es|ja|ru|zh}}
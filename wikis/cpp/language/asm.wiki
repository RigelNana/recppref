{{title|{{tt|asm}} declaration}}
{{cpp/language/declarations/navbar}}
''asm-declaration'' gives the ability to embed assembly language source code within a C++ program. This declaration is {{rev inl|since=c++11|conditionally-supported and }}implementation defined, 
meaning that {{rev inl|since=c++11|it may not be present and, even when provided by the implementation, }}it does not have a fixed meaning.

===Syntax===
{{sdsc begin}}
{{sdsc|notes={{mark until c++26}}|
{{spar optional|attr}} {{ttb|asm (}} {{spar|string-literal}} {{ttb|)}} {{ttb|;}}
}}
{{sdsc|notes={{mark since c++26}}|
{{spar optional|attr}} {{ttb|asm (}} {{spar|balanced-token-seq}} {{ttb|)}} {{ttb|;}}
}}
{{sdsc end}}

{{par begin}}
{{par|{{spar|attr}}|{{mark since c++11}} any number of {{rlp|attributes}}}}
{{par|{{spar|string-literal}}|same as in {{rlp|string literal}}, including raw string literals}}
{{par|{{spar|balanced-token-seq}}|a sequence of tokens where parentheses, brackets and braces are balanced; any restrictions on the {{spar|balanced-token-seq}} and its meaning are implementation-defined}}
{{par end}}

===Explanation===
The {{spar|balanced-token-seq}} is typically a string literal that represents a short program written in assembly language, which is executed whenever this declaration is executed. Different C++ compilers have wildly varying rules for asm-declarations, and different conventions for the interaction with the surrounding C++ code.

As other {{rlp|declarations|block declarations}}, this declaration can appear inside a block (a function body or another compound statement), and, as all other declarations, this declaration can also appear outside a block.

{{todo|write a note on GCC extended assembly syntax, since it is now supported by Intel, IBM, Sun (as of v12), etc}}

===Notes===
{{feature test macro|value=201907L|std=C++20|__cpp_constexpr|Trivial {{rlp|default initialization}} and [[#Syntax|asm-declaration]] in {{tt|constexpr}} functions}}

===Keywords===
{{ltt|cpp/keyword/asm}}

===Example===
{{example|Demonstrates two kinds of inline assembly syntax offered by the GCC/Clang compilers. This program works correctly only on the x86_64 platform under Linux.
|code=
#include &lt;iostream&gt;

extern "C" int func(int x);
// the definition of func is written in assembly language
// raw string literal could be very useful
asm(R"(
.globl func
    .type func, @function
    func:
    .cfi_startproc
    movl %edi, %eax /* x is in RDI, see x86-64 calling convention */
    addl $1, %eax
    ret
    .cfi_endproc
)");

int main()
{
    int n = func(0110);
    // formerly non-standard inline assembly, made comforming by P2361R6
    asm ("leal (%0,%0,4),%0"
         : "=r" (n)
         : "0" (n));
    std::cout &lt;&lt; "73*5 = " &lt;&lt; n &lt;&lt; std::endl; // flush is intentional

    // standard inline assembly
    asm ("movq $60, %rax\n" // the exit syscall number on Linux
         "movq $2,  %rdi\n" // this program returns 2
         "syscall");
}
|output=
73*5 = 365
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=cwg|dr=195|std=C++98|before=it was required to support all asm declarations|after=made conditionally-supported}}
{{dr list item|wg=cwg|dr=2262|std=C++11|before=attributes could not be applied to asm declarations|after=allowed}}
{{dr list end}}

===References===
{{ref std c++26}}
{{ref std|section=9.10|title=The {{tt|asm}} declaration|id=dcl.asm}}
{{ref std end}}
{{ref std c++23}}
{{ref std|section=9.10|title=The {{tt|asm}} declaration|id=dcl.asm}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=9.10|title=The {{tt|asm}} declaration|id=dcl.asm}}
{{ref std end}}
{{ref std c++17}}
{{ref std|section=10.4|title=The {{tt|asm}} declaration|id=dcl.asm}}
{{ref std end}}
{{ref std c++14}}
{{ref std|section=7.4|title=The {{tt|asm}} declaration|id=dcl.asm}}
{{ref std end}}
{{ref std c++11}}
{{ref std|section=7.4|title=The {{tt|asm}} declaration|id=dcl.asm}}
{{ref std end}}
{{ref std c++03}}
{{ref std|section=7.4|title=The {{tt|asm}} declaration|id=dcl.asm}}
{{ref std end}}
{{ref std c++98}}
{{ref std|section=7.4|title=The {{tt|asm}} declaration|id=dcl.asm}}
{{ref std end}}

===See also===
* {{ls|cpp/links#C++ ABIs}}
{{dsc begin}}
{{dsc see c|c/language/asm|Inline assembly|nomono=true}}
{{dsc end}}

===External links===
{{elink begin}}
{{elink|1=[https://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html GCC Inline Assembly HOWTO]}}
{{elink|1=&lt;!--NB: not https--&gt;[http://locklessinc.com/articles/gcc_asm/ GCC Inline ASM] &amp;mdash; Locklessinc.com}}
{{elink|1=[https://www.ibm.com/docs/en/xl-c-and-cpp-aix/16.1?topic=compatibility-inline-assembly-statements IBM XL C/C++ Inline Assembly]}}
{{elink|1=[https://www.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/intrinsics/data-align-mem-alloc-intrins-and-inline-asmbly/inline-assembly.html Intel C++ Inline Assembly]}}
{{elink|1=[https://learn.microsoft.com/en-us/cpp/assembler/inline/inline-assembler Visual Studio Inline Assembler]}}
{{elink|1=[https://web.archive.org/web/20160528215011/https://blogs.oracle.com/x86be/entry/gcc_style_asm_inlining_support Sun Studio 12 Asm Statements]}}
{{elink|1=[https://web.archive.org/web/20151009200102/https://h21007.www2.hp.com/portal/site/dspp/menuitem.863c3e4cbcdc3f3515b49c108973a801?ciid=4308e2f5bde02110e2f5bde02110275d6e10RCRD Inline assembly for Itanium-based HP-UX]}}
{{elink|{{enwiki|X86 calling conventions}} &amp;mdash; Wikipedia}}
{{elink end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
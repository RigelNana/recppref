{{title|Copy assignment operator}}
{{cpp/language/classes/navbar}}

A copy assignment operator is a non-template {{rlp|member functions|non-static member function}} with the name {{c/core|1=operator=}} that can be called with an argument of the same class type and copies the content of the argument without mutating the argument.

===Syntax===
For the formal copy assignment operator syntax, see {{rlp|function|function declaration}}. The syntax list below only demonstrates a subset of all valid copy assignment operator syntaxes.
{{sdsc begin}}
{{sdsc|num=1|{{spar|return-type}} {{ttb|1=operator=(}}{{spar sep|parameter-list}}{{ttb|);}}}}
{{sdsc|num=2|{{spar|return-type}} {{ttb|1=operator=(}}{{spar sep|parameter-list}}{{ttb|)}} {{spar|function-body}}}}
{{sdsc|num=3|{{spar|return-type}} {{ttb|1=operator=(}}{{spar sep|parameter-list-no-default}}{{ttb|1=) = default;}}|notes={{mark since c++11}}}}
{{sdsc|num=4|{{spar|return-type}} {{ttb|1=operator=(}}{{spar sep|parameter-list}}{{ttb|1=) = delete;}}|notes={{mark since c++11}}}}
{{sdsc|num=5|{{spar|return-type}} {{spar sep|class-name}}{{ttb|::}}{{ttb|1=operator=(}}{{spar sep|parameter-list}}{{ttb|)}} {{spar|function-body}}}}
{{sdsc|num=6|{{spar|return-type}} {{spar sep|class-name}}{{ttb|::}}{{ttb|1=operator=(}}{{spar sep|parameter-list-no-default}}{{ttb|1=) = default;}}|notes={{mark since c++11}}}}
{{sdsc end}}

{{par begin}}
{{par|{{spar|class-name}}|the class whose copy assignment operator is being declared, the class type is given as {{tt|T}} in the descriptions below}}
{{par|{{spar|parameter-list}}|a {{rlp|function#Parameter list|parameter list}} of only one parameter, which is of type {{tt|T}}, {{tt|T&amp;}}, {{c/core|const T&amp;}}, {{c/core|volatile T&amp;}} or {{c/core|const volatile T&amp;}}}}
{{par|{{spar|parameter-list-no-default}}|a {{rlp|function#Parameter list|parameter list}} of only one parameter, which is of type {{tt|T}}, {{tt|T&amp;}}, {{c/core|const T&amp;}}, {{c/core|volatile T&amp;}} or {{c/core|const volatile T&amp;}} and does not have a default argument}}
{{par|{{spar|function-body}}|the {{rlp|constructor|function body}} of the copy assignment operator}}
{{par|{{spar|return-type}}|any type, but {{tt|T&amp;}} is favored in order to allow chaining asssignments}}
{{par end}}

===Explanation===
@1@ Declaration of a copy assignment operator inside of class definition.
@2-4@ Definition of a copy assignment operator inside of class definition.
:@3@ The copy assignment operator is explicitly-defaulted.
:@4@ The copy assignment operator is deleted.
@5,6@ Definition of a copy assignment operator outside of class definition (the class must contain a declaration {{v|1}}).
:@6@ The copy assignment operator is explicitly-defaulted.

{{source|1=
struct X
{
    X&amp; operator=(X&amp; other);     // copy assignment operator
    X operator=(X other);       // pass-by-value is allowed
//  X operator=(const X other); // Error: incorrect parameter type
};

union Y
{
    // copy assignment operators can have syntaxes not listed above,
    // as long as they follow the general function declaration syntax
    // and do not viloate the restrictions listed above
    auto operator=(Y&amp; other) -&gt; Y&amp;;       // OK: trailing return type
    Y&amp; operator=(this Y&amp; self, Y&amp; other); // OK: explicit object parameter
//  Y&amp; operator=(Y&amp;, int num = 1);        // Error: has other non-object parameters
};
}}

The copy assignment operator is called whenever selected by {{rlp|overload resolution}}, e.g. when an object appears on the left side of an assignment expression.

===Implicitly-declared copy assignment operator===
If no user-defined copy assignment operators are provided for a class type, the compiler will always declare one as an {{c/core|inline public}} member of the class. This implicitly-declared copy assignment operator has the form {{c|1=T&amp; T::operator=(const T&amp;)}} if all of the following is true:
* each direct base {{tt|B}} of {{tt|T}} has a copy assignment operator whose parameters are {{tt|B}} or {{c/core|const B&amp;}} or {{c/core|const volatile B&amp;}};
* each non-static data member {{tt|M}} of {{tt|T}} of class type or array of class type has a copy assignment operator whose parameters are {{tt|M}} or {{c/core|const M&amp;}} or {{c/core|const volatile M&amp;}}.
Otherwise the implicitly-declared copy assignment operator is declared as {{c|1=T&amp; T::operator=(T&amp;)}}.

Due to these rules, the implicitly-declared copy assignment operator cannot bind to a {{c/core|volatile}} lvalue argument.

A class can have multiple copy assignment operators, e.g. both {{c|1=T&amp; T::operator=(T&amp;)}} and {{c|1=T&amp; T::operator=(T)}}. {{rev inl|since=c++11|If some user-defined copy assignment operators are present, the user may still force the generation of the implicitly declared copy assignment operator with the keyword {{c/core|default}}.}}

The implicitly-declared (or defaulted on its first declaration) copy assignment operator has an exception specification as described in {{rev inl|until=c++17|{{rlp|except spec|dynamic exception specification}}}}{{rev inl|since=c++17|{{rlp|noexcept spec|noexcept specification}}}}

Because the copy assignment operator is always declared for any class, the base class assignment operator is always hidden. If a {{rlp|using declaration#In class definition|using-declaration}} is used to bring in the assignment operator from the base class, and its argument type could be the same as the argument type of the implicit assignment operator of the derived class, the using-declaration is also hidden by the implicit declaration.

===Implicitly-defined copy assignment operator===
If the implicitly-declared copy assignment operator is neither deleted nor trivial, it is defined (that is, a function body is generated and compiled) by the compiler if {{rlp|definition#ODR-use|odr-used}}{{rev inl|since=c++14|&lt;!-- P0859R0 --&gt; or {{rlp|constant expression#Functions and variables needed for constant evaluation|needed for constant evaluation}}}}. For union types, the implicitly-defined copy assignment copies the object representation (as by {{lc|std::memmove}}). For non-union class types, the operator performs member-wise copy assignment of the object's direct bases and non-static data members, in their initialization order, using built-in assignment for the scalars, memberwise copy-assignment for arrays, and copy assignment operator for class types (called non-virtually).

{{rrev multi|since1=c++14|since2=c++23
|rev1=The implicitly-defined copy assignment operator for a class {{tt|T}} is {{rlpt|constexpr}} if
* {{tt|T}} is a [[cpp/named req/LiteralType|literal type]], and
* the assignment operator selected to copy each direct base class subobject is a constexpr function, and
* for each non-static data member of {{tt|T}} that is of class type (or array thereof), the assignment operator selected to copy that member is a constexpr function.
|rev2=The implicitly-defined copy assignment operator for a class {{tt|T}} is {{rlpt|constexpr}}.
}}


{{rrev|since=c++11|
The generation of the implicitly-defined copy assignment operator is deprecated if {{tt|T}} has a user-declared destructor or user-declared copy constructor.
}}

===Deleted copy assignment operator===
An implicitly-declared{{rev inl|since=c++11| or explicitly-defaulted}} copy assignment operator for class {{tt|T}} is {{rev inl|until=c++11|undefined}}{{rev inl|since=c++11|defined as deleted}} if any of the following conditions is satisfied:
* {{tt|T}} has a non-static data member of a const-qualified non-class type (or possibly multi-dimensional array thereof).
* {{tt|T}} has a non-static data member of a reference type.
* {{tt|T}} has a {{rlp|object#Potentially constructed subobject|potentially constructed subobject}} of class type {{tt|M}} (or possibly multi-dimensional array thereof) such that the overload resolution as applied to find {{tt|M}}'s copy assignment operator
:* does not result in a usable candidate, or
:* in the case of the subobject being a {{rlp|union#Union-like classes|variant member}}, selects a non-trivial function.

{{rrev|since=c++11|
The implicitly-declared copy assignment operator for class {{tt|T}} is defined as deleted if {{tt|T}} declares a {{rlp|move constructor}} or {{rlp|move assignment|move assignment operator}}.
}}

===Trivial copy assignment operator===
The copy assignment operator for class {{tt|T}} is trivial if all of the following is true:
* it is not user-provided (meaning, it is implicitly-defined or defaulted);
* {{tt|T}} has no virtual member functions;
* {{tt|T}} has no virtual base classes;
* the copy assignment operator selected for every direct base of {{tt|T}} is trivial;
* the copy assignment operator selected for every non-static class type (or array of class type) member of {{tt|T}} is trivial.

A trivial copy assignment operator makes a copy of the object representation as if by {{lc|std::memmove}}. All data types compatible with the C language (POD types) are trivially copy-assignable.

===Eligible copy assignment operator===
{{cpp/language/eligible special member function|copy assignment operator}}

Triviality of eligible copy assignment operators determines whether the class is a [[cpp/named req/TriviallyCopyable|trivially copyable type]].

===Notes===
If both copy and move assignment operators are provided, overload resolution selects the move assignment if the argument is an {{rlp|value category|rvalue}} (either a {{rlp|value category|prvalue}} such as a nameless temporary or an {{rlp|value category|xvalue}} such as the result of {{ltt std|cpp/utility/move}}), and selects the copy assignment if the argument is an {{rlp|value category|lvalue}} (named object or a function/operator returning lvalue reference). If only the copy assignment is provided, all argument categories select it (as long as it takes its argument by value or as reference to const, since rvalues can bind to const references), which makes copy assignment the fallback for move assignment, when move is unavailable.

It is unspecified whether virtual base class subobjects that are accessible through more than one path in the inheritance lattice, are assigned more than once by the implicitly-defined copy assignment operator (same applies to {{rlp|move assignment}}).

See {{rlp|operators#Assignment operator|assignment operator overloading}} for additional detail on the expected behavior of a user-defined copy-assignment operator.

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;string&gt;

struct A
{
    int n;
    std::string s1;
    
    A() = default;
    A(A const&amp;) = default;
    
    // user-defined copy assignment (copy-and-swap idiom)
    A&amp; operator=(A other)
    {
        std::cout &lt;&lt; "copy assignment of A\n";
        std::swap(n, other.n);
        std::swap(s1, other.s1);
        return *this;
    }
};

struct B : A
{
    std::string s2;
    // implicitly-defined copy assignment
};

struct C
{
    std::unique_ptr&lt;int[]&gt; data;
    std::size_t size;
    
    // user-defined copy assignment (non copy-and-swap idiom)
    // note: copy-and-swap would always reallocate resources
    C&amp; operator=(const C&amp; other)
    {
        if (this != &amp;other) // not a self-assignment
        {
            if (size != other.size) // resource cannot be reused
            {
                data.reset(new int[other.size]);
                size = other.size;
            }
            std::copy(&amp;other.data[0], &amp;other.data[0] + size, &amp;data[0]);
        }
        return *this;
    }
};

int main()
{
    A a1, a2;
    std::cout &lt;&lt; "a1 = a2 calls ";
    a1 = a2; // user-defined copy assignment

    B b1, b2;
    b2.s1 = "foo";
    b2.s2 = "bar";
    std::cout &lt;&lt; "b1 = b2 calls ";
    b1 = b2; // implicitly-defined copy assignment
    
    std::cout &lt;&lt; "b1.s1 = " &lt;&lt; b1.s1 &lt;&lt; "; b1.s2 = " &lt;&lt; b1.s2 &lt;&lt; '\n';
}
|output=
a1 = a2 calls copy assignment of A
b1 = b2 calls copy assignment of A
b1.s1 = foo; b1.s2 = bar
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=cwg|dr=1353|std=C++98|before=the conditions where implicitly-declared copy assignment operators&lt;br&gt;are undefined did not consider multi-dimensional array types|after=consider these types}}
{{dr list item|wg=cwg|dr=2094|std=C++11|before=a volatile subobject made defaulted copy&lt;br&gt;assignment operators non-trivial ({{cwg|496}})|after=triviality not affected}}
{{dr list item|wg=cwg|dr=2171|std=C++11|before={{c|1=operator=(X&amp;) = default}} was non-trivial|after=made trivial}}
{{dr list item|wg=cwg|dr=2180|std=C++11|before=a defaulted copy assignment operator for class {{tt|T}} was not defined as deleted&lt;br&gt;if {{tt|T}} is abstract and has non-copy-assignable direct virtual base classes|after=the operator is defined&lt;br&gt;as deleted in this case}}
{{dr list item|wg=cwg|dr=2595|std=C++20|before=a copy assignment operator was not eligible if there&lt;br&gt;is another copy assignment operator which is more&lt;br&gt;constrained but does not satisfy its associated constraints|after=it can be eligible&lt;br&gt;in this case}}
{{dr list end}}

===See also===
* {{rlp|converting constructor}}
* {{rlp|copy constructor}}
* {{rlp|copy elision}}
* {{rlp|default constructor}}
* {{rlp|destructor}}
* {{rlpt|explicit}}
* {{rlp|initialization}}
** {{rlp|aggregate initialization}}
** {{rlp|constant initialization}}
** {{rlp|copy initialization}}
** {{rlp|default initialization}}
** {{rlp|direct initialization}}
** {{rlp|initializer list}}
** {{rlp|list initialization}}
** {{rlp|reference initialization}}
** {{rlp|value initialization}}
** {{rlp|zero initialization}}
* {{rlp|move assignment}}
* {{rlp|move constructor}}
* {{rlpt|new}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
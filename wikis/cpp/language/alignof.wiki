{{title|{{tt|alignof}} operator {{mark since c++11}}}}
{{cpp/language/expressions/navbar}}

Queries alignment requirements of a type.

===Syntax===
{{sdsc begin}}
{{sdsc|{{ttb|alignof(}} {{spar|type-id}} {{ttb|)}}}}
{{sdsc end}}

Returns a value of type {{lc|std::size_t}}.

===Explanation===
Returns {{rlp|object#Alignment|the alignment}}, in bytes, required for any instance of the type indicated by {{rlp|type#Type naming|type-id}}, which is either {{rlp|type#Incomplete type|complete}} object type, an array type whose element type is complete, or a reference type to one of those types.

If the type is reference type, the operator returns the alignment of referenced type; if the type is array type, alignment requirement of the element type is returned.

===Notes===
See {{rlp|object#Alignment|alignment}} for the meaning and properties of the value returned by {{tt|alignof}}.

===Keywords===
{{ltt|cpp/keyword/alignof}}

===Example===
{{example
|code=
#include &lt;iostream&gt;

struct Foo
{
    int   i;
    float f;
    char  c;
};

// Note: alignas(alignof(long double)) below can be
// simplified to alignas(long double) if desired.
struct alignas(alignof(long double)) Foo2
{
    // put your definition here
}; 

struct Empty {};

struct alignas(64) Empty64 {};

#define SHOW(expr) std::cout &lt;&lt; #expr &lt;&lt; " = " &lt;&lt; (expr) &lt;&lt; '\n'

int main()
{
    SHOW(alignof(char));
    SHOW(alignof(int*));
    SHOW(alignof(Foo));
    SHOW(alignof(Foo2));
    SHOW(alignof(Empty));
    SHOW(alignof(Empty64));
}
|p=true
|output=
alignof(char) = 1
alignof(int*) = 8
alignof(Foo) = 4
alignof(Foo2) = 16
alignof(Empty) = 1
alignof(Empty64) = 64
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=cwg|dr=1305|std=C++11|before={{spar|type-id}} could not represent a reference to an array&lt;br&gt;with an unknown bound but a complete element type|after=allowed}}
{{dr list end}}

===References===
{{ref std c++23}}
{{ref std|section=7.6.2.6|title=Alignof|id=expr.alignof}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=7.6.2.5|title=Alignof|id=expr.alignof}}
{{ref std end}}
{{ref std c++17}}
{{ref std|section=8.3.6|title=Alignof|id=expr.alignof}}
{{ref std end}}
{{ref std c++14}}
{{ref std|section=5.3.6|title=Alignof|id=expr.alignof}}
{{ref std end}}
{{ref std c++11}}
{{ref std|section=5.3.6|title=Alignof|id=expr.alignof}}
{{ref std end}}

===See also===
{{dsc begin}}
{{dsc|{{rlp|object#Alignment|Alignment requirement}}|restricts the addresses at which an object may be allocated}}
{{dsc inc|cpp/language/dsc alignas}}
{{dsc inc|cpp/types/dsc alignment_of}}
{{dsc see c|c/language/_Alignof|{{tt|_Alignof}}, {{tt|alignof}} operator|nomono=true}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{title|Function template}}
{{cpp/language/declarations/expressions/templates/navbar}}

A function template defines a family of functions.

===Syntax===
{{sdsc begin}}
{{sdsc|num=1|{{ttb|template}} {{ttb|&lt;}} {{spar|parameter-list}} {{ttb|&gt;}} {{spar|function-declaration}}}}
{{sdsc|num=2|notes={{mark since c++20}}|{{ttb|template}} {{ttb|&lt;}} {{spar|parameter-list}} {{ttb|&gt;}} {{ttb|requires}} {{spar|constraint}} {{spar|function-declaration}}}}
{{sdsc|num=3|notes={{mark since c++20}}|{{spar|function-declaration-with-placeholders}}}}
{{sdsc|num=4|notes={{mark until c++11|removed=yes}}|{{ttb|export}} {{ttb|template}} {{ttb|&lt;}} {{spar|parameter-list}} {{ttb|&gt;}} {{spar|function-declaration}}}}
{{sdsc end}}

===Explanation===
{{par begin}}
{{par|{{spar|parameter-list}}|a non-empty comma-separated list of the {{rlp|template parameters}}, each of which is either {{rlp|template parameters#Non-type template parameter|non-type parameter}}, a {{rlp|template parameters#Type template parameter|type parameter}}, a {{rlp|template parameters#Template template parameter|template parameter}}{{rev inl|since=c++11|, or a {{rlp|parameter pack}} of any of those}}. {{rev inl|since=c++20|As with any template, parameters may be {{rlp|template parameters#Constrained template parameter|constrained}}}}}}
{{par|{{spar|function-declaration}}|a {{rlp|function|function declaration}}. The function name declared becomes a template name.}}
{{par|{{spar|constraint}}|a {{rlp|constraints|constraint expression}} which restricts the template parameters accepted by this function template}}
{{par|{{spar|function-declaration-&lt;br&gt;with-placeholders}}|a {{rlp|function|function declaration}} where the type of at least one parameter uses the placeholder {{rlp|auto}} or [[cpp/language/constraints|Concept auto]]: the template parameter list will have one invented parameter for each placeholder (see Abbreviated function templates below)}}
{{par end}}

{{rrev|until=c++11|
{{tt|export}} was an optional modifier which declared the template as ''exported'' (when used with a class template, it declared all of its members exported as well). Files that instantiated exported templates did not need to include their definitions: the declaration was sufficient. Implementations of {{tt|export}} were rare and disagreed with each other on details.
}}

{{rrev|since=c++20|
===Abbreviated function template===
When placeholder types (either {{rlp|auto}} or [[cpp/language/constraints|Concept auto]]) appear in the parameter list of a function declaration or of a function template declaration, the declaration declares a function template, and one invented template parameter for each placeholder is appended to the template parameter list:
{{source|1=
void f1(auto); // same as template&lt;class T&gt; void f1(T)
void f2(C1 auto); // same as template&lt;C1 T&gt; void f2(T), if C1 is a concept
void f3(C2 auto...); // same as template&lt;C2... Ts&gt; void f3(Ts...), if C2 is a concept
void f4(const C3 auto*, C4 auto&amp;); // same as template&lt;C3 T, C4 U&gt; void f4(const T*, U&amp;);

template&lt;class T, C U&gt;
void g(T x, U y, C auto z); // same as template&lt;class T, C U, C W&gt; void g(T x, U y, W z);
}}

Abbreviated function templates can be specialized like all function templates.
{{source|
template&lt;&gt;
void f4&lt;int&gt;(const int*, const double&amp;); // specialization of f4&lt;int, const double&gt;
}}

}}

===Function template signature===
Every function template has a signature.

The signature of a {{spar|template-head}} is the {{rlp|template parameters|template parameter list}}, excluding template parameter names and {{rlp|template_parameters#Default_template_arguments|default arguments}}{{rev inl|since=c++20|, and requires-clause (if any)}}.

The signature of a function template contains the name, parameter-type-list, return type{{rev inl|since=c++20|, trailing requires-clause (if any)}}, and signature of the {{spar|template-head}}. Except for the following cases, its signature also contains the enclosing namespace.

If the function template is a class member, its signature contains the class of which the function is a member instead of the enclosing namespace. Its signature also contains {{rev inl|since=c++20|the trailing requires-clause (if any)}}{{rev inl|since=c++11|, ref-qualifier (if any), and}} ''cv''-qualifiers (if any).

{{rrev|since=c++20|
If the function template is a {{rlp|friend}} with constraint involving enclosing template parameters, its signature contains the enclosing class instead of the enclosing namespace.
}}

===Function template instantiation===
A function template by itself is not a type, or a function. No code is generated from a source file that contains only template definitions. In order for any code to appear, a template must be instantiated: the template arguments must be determined so that the compiler can generate an actual function (or class, from a class template).

====Explicit instantiation====
{{sdsc begin}}
{{sdsc|num=1|{{ttb|template}} {{spar|return-type}} {{spar|name}} {{ttb|&lt;}}  {{spar|argument-list}} {{ttb|&gt;}} {{ttb|(}} {{spar|parameter-list}} {{ttb|)}} {{ttb|;}}}}
{{sdsc|num=2|{{ttb|template}} {{spar|return-type}} {{spar|name}} {{ttb|(}} {{spar|parameter-list}} {{ttb|)}} {{ttb|;}}}}
{{sdsc|num=3|{{ttb|extern}} {{ttb|template}} {{spar|return-type}} {{spar|name}} {{ttb|&lt;}} {{spar|argument-list}} {{ttb|&gt;}} {{ttb|(}} {{spar|parameter-list}} {{ttb|)}} {{ttb|;}}|notes={{mark since c++11}}}}
{{sdsc|num=4|{{ttb|extern}} {{ttb|template}} {{spar|return-type}} {{spar|name}} {{ttb|(}} {{spar|parameter-list}} {{ttb|)}} {{ttb|;}}|notes={{mark since c++11}}}}
{{sdsc end}}
@1@ Explicit instantiation definition (without {{rlp|template argument deduction}} if every non-default template parameter is explicitly specified)
@2@ Explicit instantiation definition with template argument deduction for all parameters
@3@ Explicit instantiation declaration (without template argument deduction if every non-default template parameter is explicitly specified)
@4@ Explicit instantiation declaration with template argument deduction for all parameters

An explicit instantiation definition forces instantiation of the function or member function they refer to. It may appear in the program anywhere after the template definition, and for a given argument-list, is only allowed to appear once in the program, no diagnostic required.

{{rrev|since=c++11|
An explicit instantiation declaration (an extern template) prevents implicit instantiations: the code that would otherwise cause an implicit instantiation has to use the explicit instantiation definition provided somewhere else in the program.
}}

A trailing template-argument can be left unspecified in an explicit instantiation of a function template specialization or of a member function template specialization if it can be {{rlp|template argument deduction|deduced}} from the function parameter:
{{source|1=
template&lt;typename T&gt;
void f(T s)
{
    std::cout &lt;&lt; s &lt;&lt; '\n';
}

template void f&lt;double&gt;(double); // instantiates f&lt;double&gt;(double)
template void f&lt;&gt;(char);         // instantiates f&lt;char&gt;(char), template argument deduced
template void f(int);            // instantiates f&lt;int&gt;(int), template argument deduced
}}

Explicit instantiation of a function template or of a member function of a class template cannot use {{tt|inline}} or {{tt|constexpr}}. If the declaration of the explicit instantiation names an implicitly-declared special member function, the program is ill-formed.

Explicit instantiation of a {{rlp|constructor}} cannot use a template parameter list (syntax {{v|1}}), which is also never necessary because they can be deduced (syntax {{v|2}}).

{{rrev|since=c++20|
Explicit instantiation of a {{rlpsd|destructor#Prospective destructor}} must name the selected destructor of the class.
}}

Explicit instantiation declarations do not suppress the implicit instantiation of {{rlp|inline}} functions, {{rlp|auto}}-declarations, references, and class template specializations. (thus, when the inline function that is a subject of explicit instantiation declaration is ODR-used, it is implicitly instantiated for inlining, but its out-of-line copy is not generated in this translation unit)

Explicit instantiation definition of a function template with {{rlp|default arguments}} is not a use of the arguments, and does not attempt to initialize them:
{{source|1=
char* p = 0;

template&lt;class T&gt;
T g(T x = &amp;p) { return x; }

template int g&lt;int&gt;(int); // OK even though &amp;p isn’t an int.
}}

====Implicit instantiation====
When code refers to a function in context that requires {{rlp|definition#ODR-use|the function definition to exist}}{{rev inl|since=c++11|, or if the existence of the definition affects the semantics of the program}}, and this particular function has not been explicitly instantiated, implicit instantiation occurs. The list of template arguments does not have to be supplied if it can be {{rlp|template argument deduction|deduced}} from context.

{{example
|code=
#include &lt;iostream&gt;

template&lt;typename T&gt;
void f(T s)
{
    std::cout &lt;&lt; s &lt;&lt; '\n';
}

int main()
{
    f&lt;double&gt;(1); // instantiates and calls f&lt;double&gt;(double)
    f&lt;&gt;('a');     // instantiates and calls f&lt;char&gt;(char)
    f(7);         // instantiates and calls f&lt;int&gt;(int)
    void (*pf)(std::string) = f; // instantiates f&lt;string&gt;(string)
    pf("∇");                     // calls f&lt;string&gt;(string)
}
}}

{{rrev|since=c++11|&lt;!-- P0859R0 --&gt;
The existence of a definition of function is considered to affect the semantics of the program if the function is {{rlp|constant expression#Functions and variables needed for constant evaluation|needed for constant evaluation}} by an expression, even if constant evaluation of the expression is not required or if constant expression evaluation does not use the definition.

{{source|code=
template&lt;typename T&gt;
constexpr int f() { return T::value; }

template&lt;bool B, typename T&gt;
void g(decltype(B ? f&lt;T&gt;() : 0));
template&lt;bool B, typename T&gt;
void g(...);

template&lt;bool B, typename T&gt;
void h(decltype(int{B ? f&lt;T&gt;() : 0}));
template&lt;bool B, typename T&gt;
void h(...);

void x()
{
    g&lt;false, int&gt;(0); // OK: B ? f&lt;T&gt;() : 0 is not potentially constant evaluated
    h&lt;false, int&gt;(0); // error: instantiates f&lt;int&gt; even though B evaluates to false
                      // and list-initialization of int from int cannot be narrowing
}
}}
}}

Note: omitting {{tt|&lt;&gt;}} entirely allows {{rlp|overload resolution}} to examine both template and non-template overloads.

===Template argument deduction===
In order to instantiate a function template, every template argument must be known, but not every template argument has to be specified. When possible, the compiler will deduce the missing template arguments from the function arguments. This occurs when a function call is attempted and when an address of a function template is taken.

{{source|1=
template&lt;typename To, typename From&gt;
To convert(From f);

void g(double d) 
{
    int i = convert&lt;int&gt;(d);    // calls convert&lt;int,double&gt;(double)
    char c = convert&lt;char&gt;(d);  // calls convert&lt;char,double&gt;(double)
    int(*ptr)(float) = convert; // instantiates convert&lt;int, float&gt;(float)
}
}}

This mechanism makes it possible to use template operators, since there is no syntax to specify template arguments for an operator other than by re-writing it as a function call expression.

{{source|1=
#include &lt;iostream&gt;

int main() 
{
    std::cout &lt;&lt; "Hello, world" &lt;&lt; std::endl;
    // operator&lt;&lt; is looked up via ADL as std::operator&lt;&lt;,
    // then deduced to operator&lt;&lt;&lt;char, std::char_traits&lt;char&gt;&gt; both times
    // std::endl is deduced to &amp;std::endl&lt;char, std::char_traits&lt;char&gt;&gt;
}
}}

Template argument deduction takes place after the function template {{rlp|lookup|name lookup}} (which may involve {{rlp|adl|argument-dependent lookup}}) and before {{rlp|overload resolution}}.

See {{rlp|template argument deduction}} for details.

===Explicit template arguments===
Template arguments of a function template may be obtained from
* template argument deduction
* default template arguments
* specified explicitly, which can be done in the following contexts:
:* in a function call expression
:* when an address of a function is taken
:* when a reference to function is initialized 
:* when a pointer to member function is formed
:* in an explicit specialization
:* in an explicit instantiation
:* in a friend declaration

There is no way to explicitly specify template arguments to {{rlp|operators|overloaded operators}}, {{rlp|cast operator|conversion functions}}, and constructors, because they are called without the use of the function name.

The specified template arguments must match the template parameters in kind (i.e., type for type, non-type for non-type, and template for template). There cannot be more arguments than there are parameters{{rev inl|since=c++11| (unless one parameter is a parameter pack, in which case there has to be an argument for each non-pack parameter)}}.

The specified non-type arguments must either match the types of the corresponding non-type template parameters, or be {{rlp|template parameters#Template non-type arguments|convertible to them}}.

The function parameters that do not participate in template argument deduction (e.g. if the corresponding template arguments are explicitly specified) are subject to implicit conversions to the type of the corresponding function parameter (as in the usual {{rlp|overload resolution}}).

{{rrev|since=c++11|
A template parameter pack that is explicitly specified may be extended by template argument deduction if there are additional arguments:
{{source|1=
template&lt;class... Types&gt;
void f(Types... values);

void g()
{
    f&lt;int*, float*&gt;(0, 0, 0); // Types = {int*, float*, int}
}
}}
}}

===Template argument substitution===
When all template arguments have been specified, deduced or obtained from default template arguments, every use of a template parameter in the function parameter list is replaced with the corresponding template arguments.

Substitution failure (that is, failure to replace template parameters with the deduced or provided template arguments) of a function template removes the function template from the {{rlp|overload resolution|overload set}}. This allows a number of ways to manipulate overload sets using template metaprogramming: see {{rlp|sfinae|SFINAE}} for details.

After substitution, all function parameters of array and function type are adjusted to pointers and all top-level cv-qualifiers are dropped from function parameters (as in a regular {{rlpsd|function#Function declaration}}).

The removal of the top-level cv-qualifiers does not affect the type of the parameter as it appears within the function:
{{source|1=
template&lt;class T&gt;
void f(T t);

template&lt;class X&gt;
void g(const X x);

template&lt;class Z&gt;
void h(Z z, Z* zp);

// two different functions with the same type, but 
// within the function, t has different cv qualifications
f&lt;int&gt;(1);       // function type is void(int), t is int
f&lt;const int&gt;(1); // function type is void(int), t is const int

// two different functions with the same type and the same x
// (pointers to these two functions are not equal,
//  and function-local statics would have different addresses)
g&lt;int&gt;(1);       // function type is void(int), x is const int
g&lt;const int&gt;(1); // function type is void(int), x is const int

// only top-level cv-qualifiers are dropped:
h&lt;const int&gt;(1, NULL); // function type is void(int, const int*) 
                       // z is const int, zp is const int* 
}}

===Function template overloading===
Function templates and non-template functions may be overloaded.

A non-template function is always distinct from a template specialization with the same type. Specializations of different function templates are always distinct from each other even if they have the same type. Two function templates with the same return type and the same parameter list are distinct and can be distinguished by their explicit template argument list.

When an expression that uses type or non-type template parameters appears in the function parameter list or in the return type, that expression remains a part of the function template signature for the purpose of overloading:
{{source|1=
template&lt;int I, int J&gt;
A&lt;I+J&gt; f(A&lt;I&gt;, A&lt;J&gt;); // overload #1

template&lt;int K, int L&gt;
A&lt;K+L&gt; f(A&lt;K&gt;, A&lt;L&gt;); // same as #1

template&lt;int I, int J&gt;
A&lt;I-J&gt; f(A&lt;I&gt;, A&lt;J&gt;); // overload #2
}}

Two expressions involving template parameters are called ''equivalent'' if two function definitions that contain these expressions would be the same under {{rlp|definition#One Definition Rule|ODR}}, that is, the two expressions contain the same sequence of tokens whose names are resolved to same entities via name lookup, except template parameters may be differently named. {{rev inl|since=c++20|Two {{rlp|lambda|lambda expressions}} are never equivalent.}}
{{source|1=
template&lt;int I, int J&gt;
void f(A&lt;I+J&gt;); // template overload #1

template&lt;int K, int L&gt;
void f(A&lt;K+L&gt;); // equivalent to #1
}}

When determining if two {{rlp|dependent name|dependent expressions}} are equivalent, only the dependent names involved are considered, not the results of name lookup. If multiple declarations of the same template differ in the result of name lookup, the first such declaration is used:
{{source|1=
template&lt;class T&gt;
decltype(g(T())) h(); // decltype(g(T())) is a dependent type

int g(int);

template&lt;class T&gt;
decltype(g(T())) h()
{                  // redeclaration of h() uses earlier lookup
    return g(T()); // although the lookup here does find g(int)
}

int i = h&lt;int&gt;(); // template argument substitution fails; g(int)
                  // was not in scope at the first declaration of h()
}}

Two function templates are considered ''equivalent'' if
* they are declared in the same scope
* they have the same name
* they have ''equivalent'' template parameter lists, meaning the lists are of the same length, and for each corresponding parameter pair, all of the following is true:
:* the two parameters are of the same kind (both types, both non-types, or both templates)
{{rrev|since=c++11|
:* they are either both parameter packs or neither
}}
:* if non-type, their types are equivalent,
:* if template, their template parameters are equivalent,
{{rrev|since=c++20|
:* if one is declared with concept-name, they both are, and the concept-names are equivalent.
}}
* the expressions involving template parameters in their return types and parameter lists are ''equivalent''
{{rrev|since=c++20|
* the expressions in their requires-clauses that follow the template parameter lists, if present, are equivalent
* the expressions in their requires-clauses that follow the function declarators, if present, are equivalent
}}

Two {{rev inl|since=c++20|{{rlp|expressions#Potentially-evaluated expressions|potentially-evaluated}}}} expressions involving template parameters are called ''functionally equivalent'' if they are not ''equivalent'', but for any given set of template arguments, the evaluation of the two expressions results in the same value.

Two function templates are considered ''functionally equivalent'' if they are ''equivalent'', except that one or more expressions that involve template parameters in their return types and parameter lists are ''functionally equivalent''.

{{rrev|since=c++20|
In addition, two function templates are ''functionally equivalent'' but not ''equivalent'' if their constraints are specified differently, but they accept and are satisfied by the same set of template argument lists.
}}

If a program contains declarations of function templates that are ''functionally equivalent'' but not ''equivalent'', the program is ill-formed; no diagnostic is required.
{{source|1=
// equivalent
template&lt;int I&gt;
void f(A&lt;I&gt;, A&lt;I+10&gt;); // overload #1
template&lt;int I&gt;
void f(A&lt;I&gt;, A&lt;I+10&gt;); // redeclaration of overload #1

// not equivalent
template&lt;int I&gt;
void f(A&lt;I&gt;, A&lt;I+10&gt;); // overload #1
template&lt;int I&gt;
void f(A&lt;I&gt;, A&lt;I+11&gt;); // overload #2

// functionally-equivalent but not equivalent
// This program is ill-formed, no diagnostic required
template&lt;int I&gt;
void f(A&lt;I&gt;, A&lt;I+10&gt;);      // overload #1
template&lt;int I&gt;
void f(A&lt;I&gt;, A&lt;I+1+2+3+4&gt;); // functionally equivalent
}}

When the same function template specialization matches more than one overloaded function template (this often results from {{rlp|template argument deduction}}), ''partial ordering of overloaded function templates'' is performed to select the best match. 

Specifically, partial ordering takes place in the following situations:
@1@ {{rlp|overload resolution}} for a call to a function template specialization:
{{source|1=
template&lt;class X&gt;
void f(X a);
template&lt;class X&gt;
void f(X* a);

int* p;
f(p);
}}
@2@ when the {{rlp|overloaded address|address of a function template specialization}} is taken:
{{source|1=
template&lt;class X&gt;
void f(X a);
template&lt;class X&gt;
void f(X* a);

void (*p)(int*) = &amp;f;
}}
@3@ when a [[cpp/memory/new/operator delete|placement operator delete]] that is a function template specialization is selected to match a placement operator new:
{{todo|mini-example}}
@4@ when a {{rlp|friend#Template friends|friend function declaration}}, an {{rlpsd|function template#Explicit instantiation}}, or an {{rlp|template specialization|explicit specialization}} refers to a function template specialization:
{{source|1=
template&lt;class X&gt;
void f(X a);  // first template f
template&lt;class X&gt;
void f(X* a); // second template f
template&lt;&gt;
void f&lt;&gt;(int *a) {} // explicit specialization

// template argument deduction comes up with two candidates:
// f&lt;int*&gt;(int*) and f&lt;int&gt;(int*)
// partial ordering selects f&lt;int&gt;(int*) as more specialized
}}

Informally "A is more specialized than B" means "A accepts fewer types than B".

Formally, to determine which of any two function templates is more specialized, the partial ordering process first transforms one of the two templates as follows:
* For each type, non-type, and template parameter, {{rev inl|since=c++11|including parameter packs,}} a unique fictitious type, value, or template is generated and substituted into function type of the template
* If only one of the two function templates being compared is a member function, and that function template is a non-static member of some class {{tt|A}}, a new first parameter is inserted into its parameter list. Given ''cv'' as the cv-qualifiers of the function template{{rev inl|since=c++11| and ''ref'' as the ref-qualifier of the function template}}, the new parameter type is ''cv'' {{tt|A&amp;}}{{rev inl|since=c++11| unless ''ref'' is {{tt|&amp;&amp;}}, or ''ref'' is not present and the first parameter of the other template has rvalue reference type, in this case the type is ''cv'' {{tt|A&amp;&amp;}}}}. This helps the ordering of operators, which are looked up both as member and as non-member functions:
{{source|1=
struct A {};

template&lt;class T&gt;
struct B
{
    template&lt;class R&gt;
    int operator*(R&amp;); // #1
};

template&lt;class T, class R&gt;
int operator*(T&amp;, R&amp;); // #2

int main()
{
    A a;
    B&lt;A&gt; b;
    b * a; // template argument deduction for int B&lt;A&gt;::operator*(R&amp;) gives R=A 
           //                             for int operator*(T&amp;, R&amp;), T=B&lt;A&gt;, R=A

    // For the purpose of partial ordering, the member template B&lt;A&gt;::operator*
    // is transformed into template&lt;class R&gt; int operator*(B&lt;A&gt;&amp;, R&amp;);
    
    // partial ordering between 
    //     int operator*(   T&amp;, R&amp;)  T=B&lt;A&gt;, R=A
    // and int operator*(B&lt;A&gt;&amp;, R&amp;)  R=A 
    // selects int operator*(B&lt;A&gt;&amp;, A&amp;) as more specialized
}
}}

After one of the two templates was transformed as described above, {{rlp|template argument deduction}} is executed using the transformed template as the argument template and the original template type of the other template as the parameter template. The process is then repeated using the second template (after transformations) as the argument and the first template in its original form as the parameter.

The types used to determine the order depend on the context:
* in the context of a function call, the types are those function parameter types for which the function call has arguments (default function arguments,{{rev inl|since=c++11| parameter packs,}} and ellipsis parameters are not considered -- see examples below)
* in the context of a call to a user-defined conversion function, the return types of the conversion function templates are used
* in other contexts, the function template type is used

Each type from the list above from the parameter template is deduced. Before deduction begins, each parameter {{ttb|P}} of the parameter template and the corresponding argument {{ttb|A}} of the argument template is adjusted as follows:

* If both {{ttb|P}} and {{ttb|A}} are reference types before, determine which is more cv-qualified (in all other cases, cv-qualifications are ignored for partial ordering purposes)
* If {{ttb|P}} is a reference type, it is replaced by the type referred to
* If {{ttb|A}} is a reference type, it is replaced by the type referred to
* If {{ttb|P}} is cv-qualified, {{ttb|P}} is replaced with cv-unqualified version of itself
* If {{ttb|A}} is cv-qualified, {{ttb|A}} is replaced with cv-unqualified version of itself

After these adjustments, deduction of {{ttb|P}} from {{ttb|A}} is done following {{rlp|template argument deduction#Deduction from a type|template argument deduction from a type}}.

{{rrev|since=c++11|
If {{ttb|P}} is a function parameter pack, the type {{ttb|A}} of each remaining parameter type of the argument template is compared with the type {{ttb|P}} of the declarator-id of the function parameter pack. Each comparison deduces template arguments for subsequent positions in the template parameter packs expanded by the function parameter pack.

If {{ttb|A}} was transformed from a function parameter pack, it is compared with each remaining parameter type of the parameter template.
}}

If the argument {{ttb|A}} of the transformed template-1 can be used to deduce the corresponding parameter {{ttb|P}} of template-2, but not vice versa, then this {{ttb|A}} is more specialized than {{ttb|P}} with regards to the type(s) that are deduced by this {{ttb|P/A}} pair.

If deduction succeeds in both directions, and the original {{ttb|P}} and {{ttb|A}} were reference types, then additional tests are made:
* If {{ttb|A}} was lvalue reference and {{ttb|P}} was rvalue reference, {{ttb|A}} is considered to be more specialized than {{ttb|P}}
* If {{ttb|A}} was more cv-qualified than {{ttb|P}}, {{ttb|A}} is considered to be more specialized than {{ttb|P}}

In all other cases, neither template is more specialized than the other with regards to the type(s) deduced by this {{ttb|P/A}} pair.

After considering every {{ttb|P}} and {{ttb|A}} in both directions, if, for each type that was considered,
* template-1 is at least as specialized as template-2 for all types
* template-1 is more specialized than template-2 for some types
* template-2 is not more specialized than template-1 for any types OR is not at least as specialized for any types

Then template-1 is more specialized than template-2. If the conditions above are true after switching template order, then template-2 is more specialized than template-1. Otherwise, neither template is more specialized than the other.

{{rrev|since=c++11|
In case of a tie, if one function template has a trailing parameter pack and the other does not, the one with the omitted parameter is considered to be more specialized than the one with the empty parameter pack.
}}

If, after considering all pairs of overloaded templates, there is one that is unambiguously more specialized than all others, that template's specialization is selected, otherwise compilation fails.

In the following examples, the fictitious arguments will be called U1, U2:
{{source|1=
template&lt;class T&gt;
void f(T);        // template #1
template&lt;class T&gt;
void f(T*);       // template #2
template&lt;class T&gt;
void f(const T*); // template #3

void m()
{
    const int* p;
    f(p); // overload resolution picks: #1: void f(T ) [T = const int *]
          //                            #2: void f(T*) [T = const int]
          //                            #3: void f(const T *) [T = int]

    // partial ordering:
    
    // #1 from transformed #2: void(T) from void(U1*): P=T A=U1*: deduction ok: T=U1*
    // #2 from transformed #1: void(T*) from void(U1): P=T* A=U1: deduction fails
    // #2 is more specialized than #1 with regards to T
    
    // #1 from transformed #3: void(T) from void(const U1*): P=T, A=const U1*: ok
    // #3 from transformed #1: void(const T*) from void(U1): P=const T*, A=U1: fails
    // #3 is more specialized than #1 with regards to T
    
    // #2 from transformed #3: void(T*) from void(const U1*): P=T* A=const U1*: ok
    // #3 from transformed #2: void(const T*) from void(U1*): P=const T* A=U1*: fails
    // #3 is more specialized than #2 with regards to T
    
    // result: #3 is selected
    // in other words, f(const T*) is more specialized than f(T) or f(T*)
}
}}

{{source|1=
template&lt;class T&gt;
void f(T, T*);   // #1
template&lt;class T&gt;
void f(T, int*); // #2

void m(int* p)
{
    f(0, p); // deduction for #1: void f(T, T*) [T = int]
             // deduction for #2: void f(T, int*) [T = int]
    
    // partial ordering:
    
    // #1 from #2: void(T,T*) from void(U1,int*): P1=T, A1=U1: T=U1
    //                                            P2=T*, A2=int*: T=int: fails
    
    // #2 from #1: void(T,int*) from void(U1,U2*): P1=T A1=U1: T=U1
    //                                             P2=int* A2=U2*: fails
    
    // neither is more specialized w.r.t T, the call is ambiguous
}
}}

{{source|1=
template&lt;class T&gt;
void g(T);  // template #1
template&lt;class T&gt;
void g(T&amp;); // template #2

void m()
{
    float x;
    g(x); // deduction from #1: void g(T ) [T = float]
          // deduction from #2: void g(T&amp;) [T = float]
    
    // partial ordering:
    
    // #1 from #2: void(T) from void(U1&amp;): P=T, A=U1 (after adjustment), ok
    
    // #2 from #1: void(T&amp;) from void(U1): P=T (after adjustment), A=U1: ok
    
    // neither is more specialized w.r.t T, the call is ambiguous
}
}}

{{source|1=
template&lt;class T&gt;
struct A { A(); };

template&lt;class T&gt;
void h(const T&amp;); // #1
template&lt;class T&gt;
void h(A&lt;T&gt;&amp;);    // #2

void m()
{
    A&lt;int&gt; z;
    h(z); // deduction from #1: void h(const T &amp;) [T = A&lt;int&gt;]
          // deduction from #2: void h(A&lt;T&gt; &amp;) [T = int]
    
    // partial ordering:
    
    // #1 from #2: void(const T&amp;) from void(A&lt;U1&gt;&amp;): P=T A=A&lt;U1&gt;: ok T=A&lt;U1&gt;
    
    // #2 from #1: void(A&lt;T&gt;&amp;) from void(const U1&amp;): P=A&lt;T&gt; A=const U1: fails
    
    // #2 is more specialized than #1 w.r.t T
    
    const A&lt;int&gt; z2;
    h(z2); // deduction from #1: void h(const T&amp;) [T = A&lt;int&gt;]
           // deduction from #2: void h(A&lt;T&gt;&amp;) [T = int], but substitution fails
    
    // only one overload to choose from, partial ordering not tried, #1 is called
}
}}

Since a call context considers only parameters for which there are explicit call arguments, those{{rev inl|since=c++11| function parameter packs,}} ellipsis parameters, and parameters with default arguments, for which there is no explicit call argument, are ignored:
{{source|1=
template&lt;class T&gt;
void f(T);         // #1
template&lt;class T&gt;
void f(T*, int = 1); // #2

void m(int* ip)
{
    int* ip;
    f(ip); // calls #2 (T* is more specialized than T)
}
}}

{{source|1=
template&lt;class T&gt;
void g(T);       // #1
template&lt;class T&gt;
void g(T*, ...); // #2

void m(int* ip)
{
    g(ip); // calls #2 (T* is more specialized than T)
}
}}

{{source|1=
template&lt;class T, class U&gt;
struct A {};

template&lt;class T, class U&gt;
void f(U, A&lt;U, T&gt;* p = 0); // #1
template&lt;class U&gt;
void f(U, A&lt;U, U&gt;* p = 0); // #2

void h()
{
    f&lt;int&gt;(42, (A&lt;int, int&gt;*)0); // calls #2
    f&lt;int&gt;(42);                  // error: ambiguous
}
}}

{{source|1=
template&lt;class T&gt;
void g(T, T = T()); // #1
template&lt;class T, class... U&gt;
void g(T, U...);    // #2

void h()
{
    g(42); // error: ambiguous
}
}}

{{source|1=
template&lt;class T, class... U&gt;
void f(T, U...); // #1
template&lt;class T&gt;
void f(T);       // #2

void h(int i)
{
    f(&amp;i); // calls #2 due to the tie-breaker between parameter pack and no parameter
           // (note: was ambiguous between DR692 and DR1395)
}
}}

{{source|1=
template&lt;class T, class... U&gt;
void g(T*, U...); // #1
template&lt;class T&gt;
void g(T);        // #2

void h(int i)
{
    g(&amp;i); // OK: calls #1 (T* is more specialized than T)
}
}}

{{source|1=
template&lt;class... T&gt;
int f(T*...);    // #1
template&lt;class T&gt;
int f(const T&amp;); // #2

f((int*)0); // OK: selects #2; non-variadic template is more specialized than
            // variadic template (was ambiguous before DR1395 because deduction
            // failed in both directions)
}}

{{source|1=
template&lt;class... Args&gt;
void f(Args... args);        // #1
template&lt;class T1, class... Args&gt;
void f(T1 a1, Args... args); // #2
template&lt;class T1, class T2&gt;
void f(T1 a1, T2 a2);        // #3

f();        // calls #1
f(1, 2, 3); // calls #2
f(1, 2);    // calls #3; non-variadic template #3 is more
            // specialized than the variadic templates #1 and #2
}}

During template argument deduction within the partial ordering process, template parameters don't require to be matched with arguments, if the argument is not used in any of the types considered for partial ordering
{{source|1=
template&lt;class T&gt;
T f(int); // #1
template&lt;class T, class U&gt;
T f(U);   // #2

void g()
{
    f&lt;int&gt;(1); // specialization of #1 is explicit: T f(int) [T = int]
               // specialization of #2 is deduced:  T f(U) [T = int, U = int]
    
    // partial ordering (only considering the argument type):
    
    // #1 from #2: T(int) from U1(U2): fails
    // #2 from #1: T(U) from U1(int): ok: U=int, T unused
    
    // calls #1
}
}}

{{rrev|since=c++11|
Partial ordering of function templates containing template parameter packs is independent of the number of deduced arguments for those template parameter packs.
{{source|1=
template&lt;class...&gt;
struct Tuple {};

template&lt;class... Types&gt;
void g(Tuple&lt;Types...&gt;);      // #1
template&lt;class T1, class... Types&gt;
void g(Tuple&lt;T1, Types...&gt;);  // #2
template&lt;class T1, class... Types&gt;
void g(Tuple&lt;T1, Types&amp;...&gt;); // #3

g(Tuple&lt;&gt;());            // calls #1
g(Tuple&lt;int, float&gt;());  // calls #2
g(Tuple&lt;int, float&amp;&gt;()); // calls #3
g(Tuple&lt;int&gt;());         // calls #3
}}
}}

{{todo|14.8.3[temp.over]}}
To compile a call to a function template, the compiler has to decide between non-template overloads, template overloads, and the specializations of the template overloads.

{{source|1=
template&lt;class T&gt;
void f(T);      // #1: template overload
template&lt;class T&gt;
void f(T*);     // #2: template overload

void f(double); // #3: non-template overload
template&lt;&gt;
void f(int);    // #4: specialization of #1

f('a');        // calls #1
f(new int(1)); // calls #2
f(1.0);        // calls #3
f(1);          // calls #4
}}

===Function overloads vs function specializations===
Note that only non-template and primary template overloads participate in overload resolution. The specializations are not overloads and are not considered. Only after the overload resolution selects the best-matching primary function template, its specializations are examined to see if one is a better match.

{{source|1=
template&lt;class T&gt;
void f(T);    // #1: overload for all types
template&lt;&gt;
void f(int*); // #2: specialization of #1 for pointers to int
template&lt;class T&gt;
void f(T*);   // #3: overload for all pointer types

f(new int(1)); // calls #3, even though specialization of #1 would be a perfect match
}}

It is important to remember this rule while ordering the header files of a translation unit. For more examples of the interplay between function overloads and function specializations, expand below:
{{cot|Examples}}
Consider first some scenarios where the argument-dependent lookup is not employed. For that, we use the call {{c|(f)(t)}}. As described in {{rlp|adl|ADL}}, wrapping the function name in parentheses is suppressing the argument-dependent lookup.

* Multiple overloads of {{c|f()}} declared before the ''point-of-reference'' (POR) in {{c|g()}}.
{{example|code=
#include &lt;iostream&gt;

struct A {};

template&lt;class T&gt;
void f(T)  { std::cout &lt;&lt; "#1\n"; } // overload #1 before f() POR
template&lt;class T&gt;
void f(T*) { std::cout &lt;&lt; "#2\n"; } // overload #2 before f() POR

template&lt;class T&gt;
void g(T* t) 
{
    (f)(t); // f() POR
}

int main()
{
    A* p = nullptr;
    g(p); // POR of g() and f()
}

// Both #1 and #2 are added to the candidate list;
// #2 is selected because it is a better match.
|output=
#2
}}


* A better matching template overload is declared after POR.
{{example|code=
#include &lt;iostream&gt;

struct A {};

template&lt;class T&gt;
void f(T)  { std::cout &lt;&lt; "#1\n"; } // #1

template&lt;class T&gt;
void g(T* t) 
{
    (f)(t); // f() POR
}

template&lt;class T&gt;
void f(T*) { std::cout &lt;&lt; "#2\n"; } // #2

int main()
{
    A* p = nullptr;
    g(p); // POR of g() and f()
}

// Only #1 is added to the candidate list; #2 is defined after POR;
// therefore, it is not considered for overloading even if it is a better match.
|output=
#1
}}


* A better matching explicit template specialization is declared after POR.
{{example|code=
#include &lt;iostream&gt;

struct A {};

template&lt;class T&gt;
void f(T)    { std::cout &lt;&lt; "#1\n"; } // #1

template&lt;class T&gt;
void g(T* t) 
{
    (f)(t); // f() POR
}
template&lt;&gt;
void f&lt;&gt;(A*) { std::cout &lt;&lt; "#3\n"; } // #3

int main()
{
    A* p = nullptr;
    g(p); // POR of g() and f()
}

// #1 is added to the candidate list; #3 is a better match defined after POR. The
// candidate list consists of #1 which is eventually selected. After that, the explicit 
// specialization #3 of #1 declared after POI is selected because it is a better match. 
// This behavior is governed by 14.7.3/6 [temp.expl.spec] and has nothing to do with ADL.
|output=
#3
}}


* A better matching template overload is declared after POR. The best matching explicit template specialization is declared after the better matching overload.
{{example|code=
#include &lt;iostream&gt;

struct A {};

template&lt;class T&gt;
void f(T)    { std::cout &lt;&lt; "#1\n"; } // #1

template&lt;class T&gt;
void g(T* t) 
{
    (f)(t); // f() POR
}

template&lt;class T&gt;
void f(T*)   { std::cout &lt;&lt; "#2\n"; } // #2
template&lt;&gt;
void f&lt;&gt;(A*) { std::cout &lt;&lt; "#3\n"; } // #3

int main()
{
    A* p = nullptr;
    g(p); // POR of g() and f()
}

// #1 is the only member of the candidate list and it is eventually selected. 
// After that, the explicit specialization #3 is skipped because it actually 
// specializes #2 declared after POR.
|output=
#1
}}


Let's consider now those cases employing argument-dependent lookup (i.e., we use the more common call format {{c|f(t)}}).

* A better matching template overload is declared after POR.
{{example|code=
#include &lt;iostream&gt;

struct A {};

template&lt;class T&gt;
void f(T)  { std::cout &lt;&lt; "#1\n"; } // #1

template&lt;class T&gt;
void g(T* t) 
{
    f(t); // f() POR
}

template&lt;class T&gt;
void f(T*) { std::cout &lt;&lt; "#2\n"; } // #2

int main()
{
    A* p = nullptr;
    g(p); // POR of g() and f()
}

// #1 is added to the candidate list as a result of the ordinary lookup;
// #2 is defined after POR but it is added to the candidate list via ADL lookup.
// #2 is selected being the better match.
|output=
#2
}}


* A better matching template overload is declared after POR. The best matching explicit template specialization is declared before the better matching overload.
{{example|code=
#include &lt;iostream&gt;

struct A {};

template&lt;class T&gt;
void f(T)    { std::cout &lt;&lt; "#1\n"; } // #1

template&lt;class T&gt;
void g(T* t) 
{
    f(t); // f() POR
}

template&lt;&gt;
void f&lt;&gt;(A*) { std::cout &lt;&lt; "#3\n"; } // #3
template&lt;class T&gt;
void f(T*)   { std::cout &lt;&lt; "#2\n"; } // #2

int main()
{
    A* p = nullptr;
    g(p); // POR of g() and f()
}

// #1 is added to the candidate list as a result of the ordinary lookup;
// #2 is defined after POR but it is added to the candidate list via ADL lookup.
// #2 is selected among the primary templates, being the better match.
// Since #3 is declared before #2, it is an explicit specialization of #1.
// Hence the final selection is #2.
|output=
#2
}}


* A better matching template overload is declared after POR. The best matching explicit template specialization is declared last.
{{example|code=
#include &lt;iostream&gt;

struct A {};

template&lt;class T&gt;
void f(T)    { std::cout &lt;&lt; "#1\n"; } // #1

template&lt;class T&gt;
void g(T* t) 
{
    f(t); // f() POR
}

template&lt;class T&gt;
void f(T*)   { std::cout &lt;&lt; "#2\n"; } // #2
template&lt;&gt;
void f&lt;&gt;(A*) { std::cout &lt;&lt; "#3\n"; } // #3

int main()
{
    A* p = nullptr;
    g(p); // POR of g() and f()
}

// #1 is added to the candidate list as a result of the ordinary lookup;
// #2 is defined after POR but it is added to the candidate list via ADL lookup.
// #2 is selected among the primary templates, being the better match.
// Since #3 is declared after #2, it is an explicit specialization of #2;
// therefore, selected as the function to call.
|output=
#3
}}


Whenever the arguments are some C++ basic types, there are no ADL-associated namespaces. Hence, those scenarios are identical with the non-ADL examples above.
{{cob}}

For detailed rules on overload resolution, see {{rlp|overload resolution}}.

===Function template specialization===
{{todo|14.8[temp.fct.spec] (note that 14.8.1[temp.arg.explicit] is already in full specialization article: either function specifics go here: lack of partials, interaction with function overloads, or just refer to that}}

===Keywords===
{{ltt|cpp/keyword/template}}{{rev inl|since=c++11|,
{{ltt|cpp/keyword/extern}}
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=cwg|dr=214|std=C++98|before=the exact procedure of partial ordering was not specified|after=specification added}}
{{dr list item|wg=cwg|dr=532|std=C++98|before=the order between a non-static member function template&lt;br&gt;and a non-member function template was not specified|after=specification added}}
{{dr list item|wg=cwg|dr=581|std=C++98|before=template argument list in an explicit specialization or&lt;br&gt;instantiation of a constructor template was allowed|after=forbidden}}
{{dr list item|wg=cwg|dr=1321|std=C++98|before=it was unclear whether same dependent names in the&lt;br&gt;first declaration and a redeclaration are equivalent|after=they are equivalent and&lt;br&gt;the meaning is same as&lt;br&gt;in the first declaration}}
{{dr list item|wg=cwg|dr=1395|std=C++11|before=deduction failed when A was from a pack,&lt;br&gt;and there was no empty pack tie-breaker|after=deduction allowed,&lt;br&gt;tie-breaker added}}
{{dr list item|wg=cwg|dr=1406|std=C++11|before=the type of the new first parameter added for&lt;br&gt;a non-static member function template was&lt;br&gt;not relevant to the ref-qualifier of that template|after=the type is an rvalue&lt;br&gt;reference type if the&lt;br&gt;ref-qualifier is {{tt|&amp;&amp;}}}}
{{dr list item|wg=cwg|dr=1446|std=C++11|before=the type of the new first parameter added for a non-static member&lt;br&gt;function template without ref-qualifier was an lvalue reference&lt;br&gt;type, even if that member function template is compared with a&lt;br&gt;function template whose first parameter has rvalue reference type|after=the type is an&lt;br&gt;rvalue reference&lt;br&gt;type in this case}}
{{dr list item|wg=cwg|dr=2373|std=C++98|before=new first parameters were added to the parameter lists&lt;br&gt;of static member function templates in partial ordering|after=not added}}
{{dr list end}}

===See also===
* {{rlp|class template}}
* {{rlp|function|function declaration}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{title|Nested classes}}
{{cpp/language/classes/navbar}}

A declaration of a {{rlp|class|class/struct}} or {{rlp|union}} may appear within another class. Such declaration declares a ''nested class''.

===Explanation===
The name of the nested class exists in the scope of the enclosing class, and name lookup from a member function of a nested class visits the scope of the enclosing class after examining the scope of the nested class. Like any member of its enclosing class, the nested class has access to all names (private, protected, etc) to which the enclosing class has access, but it is otherwise independent and has no special access to the {{rlp|this|{{tt|this}} pointer}} of the enclosing class. Declarations in a nested class can use any members of the enclosing class, following the {{rlp|data members#Usage|usual usage rules}} for the non-static members.

{{source|1=
int x, y; // globals
class enclose // enclosing class
{
    // note: private members
    int x;
    static int s;
public:
    struct inner // nested class
    {
        void f(int i)
        {
            x = i; // Error: can't write to non-static enclose::x without instance
            int a = sizeof x; // Error until C++11,
                              // OK in C++11: operand of sizeof is unevaluated,
                              // this use of the non-static enclose::x is allowed.
            s = i;   // OK: can assign to the static enclose::s
            ::x = i; // OK: can assign to global x
            y = i;   // OK: can assign to global y
        }

        void g(enclose* p, int i)
        {
            p-&gt;x = i; // OK: assign to enclose::x
        }
    };
};
}}

{{rlp|friend|Friend}} functions defined within a nested class have no special access to the members of the enclosing class even if lookup from the body of a member function that is defined within a nested class can find the private members of the enclosing class.

Out-of-class definitions of the members of a nested class appear in the namespace of the enclosing class:

{{source|1=
struct enclose
{
    struct inner
    {
        static int x;
        void f(int i);
    };
};

int enclose::inner::x = 1;       // definition
void enclose::inner::f(int i) {} // definition
}}

Nested classes can be forward-declared and later defined, either within the same enclosing class body, or outside of it:

{{source|1=
class enclose
{
    class nested1;    // forward declaration
    class nested2;    // forward declaration
    class nested1 {}; // definition of nested class
};

class enclose::nested2 {}; // definition of nested class
}}

Nested class declarations obey {{rlp|access|member access}} specifiers, a private member class cannot be named outside the scope of the enclosing class, although objects of that class may be manipulated:

{{source|1=
class enclose
{
    struct nested // private member
    {
        void g() {}
    };
public:
    static nested f() { return nested{}; }
};

int main()
{
    //enclose::nested n1 = enclose::f(); // error: 'nested' is private

    enclose::f().g();       // OK: does not name 'nested'
    auto n2 = enclose::f(); // OK: does not name 'nested'
    n2.g();
}
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=cwg|dr=45|std=C++98|before=the members of a nested class cannot&lt;br&gt;access the enclosing class and its friends|after=they have the same access rights as&lt;br&gt;other members of the enclosing class&lt;br&gt;(also resolves CWG issues #8 and #10)}}
{{dr list end}}

===References===
{{ref std c++23}}
{{ref std|section=11.4.12|title=Nested class declarations|id=class.nest}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=11.4.10|title=Nested class declarations|id=class.nest}}
{{ref std end}}
{{ref std c++17}}
{{ref std|section=12.2.5|title=Nested class declarations|id=class.nest}}
{{ref std end}}
{{ref std c++14}}
{{ref std|section=9.7|title=Nested class declarations|id=class.nest}}
{{ref std end}}
{{ref std c++11}}
{{ref std|section=9.7|title=Nested class declarations|id=class.nest}}
{{ref std end}}
{{ref std c++98}}
{{ref std|section=9.7|title=Nested class declarations|id=class.nest}}
{{ref std end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/language/attributes/title|nodiscard|notes={{mark since c++17}}}}
{{cpp/language/attributes/navbar}}

If a function declared {{tt|nodiscard}} or a function returning an enumeration or class declared {{tt|nodiscard}} by value is called from a [[cpp/language/expressions#Discarded-value expressions|discarded-value expression]] other than a cast to {{c/core|void}}, the compiler is encouraged to issue a warning.

===Syntax===
{{sdsc begin}}
{{sdsc|num=1|notes={{mark since c++17}}|1=
{{ttb|{{c/core|[[nodiscard]]}}}}
}}
{{sdsc|num=2|notes={{mark since c++20}}|1=
{{ttb|&lt;nowiki&gt;[[&lt;/nowiki&gt;nodiscard(}} {{spar|string-literal}} {{ttb|)&lt;nowiki&gt;]]&lt;/nowiki&gt;}}
}}
{{sdsc end}}

{{par begin}}
{{par|{{spar|string-literal}}|an [[cpp/language/string literal#Unevaluated strings|unevaluated string literal]] that could be used to explain the rationale for why the result should not be discarded}}
{{par end}}

===Explanation===
Appears in a function declaration, enumeration declaration, or class declaration.

If, from a [[cpp/language/expressions#Discarded-value_expressions|discarded-value expression]] other than a cast to {{c/core|void}},

* a function declared {{tt|nodiscard}} is called, or
* a function returning an enumeration or class declared {{tt|nodiscard}} by value is called, or
* a constructor declared {{tt|nodiscard}} is called by [[cpp/language/explicit cast|explicit type conversion]] or {{ltt|cpp/language/static_cast}}, or
* an object of an enumeration or class type declared {{tt|nodiscard}} is initialized by [[cpp/language/explicit cast|explicit type conversion]] or {{ltt|cpp/language/static_cast}},

the compiler is encouraged to issue a warning.

{{rrev|since=c++20|The {{spar|string-literal}}, if specified, is usually included in the warnings.}}

===Example===
{{example
|code=
struct [[nodiscard]] error_info { /*...*/ };

error_info enable_missile_safety_mode() { /*...*/ return {}; }

void launch_missiles() { /*...*/ }

void test_missiles()
{
    enable_missile_safety_mode(); // compiler may warn on discarding a nodiscard value
    launch_missiles();
}

error_info&amp; foo() { static error_info e; /*...*/ return e; }

void f1() { foo(); } // nodiscard type is not returned by value, no warning

// nodiscard( string-literal ) (since C++20):
[[nodiscard("PURE FUN")]] int strategic_value(int x, int y) { return x ^ y; }

int main()
{
    strategic_value(4, 2); // compiler may warn on discarding a nodiscard value
    auto z = strategic_value(0, 0); // OK: return value is not discarded
    return z;
}
|p=true
|output=
game.cpp:5:4: warning: ignoring return value of function declared with ⮠
 'nodiscard' attribute
game.cpp:17:5: warning: ignoring return value of function declared with ⮠
 'nodiscard' attribute: PURE FUN
}}

{{rrev|until=c++26|1=
===Standard library===
The following standard functions are declared with {{tt|nodiscard}} attribute:
{{cot}}
{{dsc begin}}

{{dsc h2|Allocation functions}}
{{dsc inc|cpp/memory/new/dsc operator new}}
{{dsc inc|cpp/memory/allocator/dsc allocate}}
{{dsc inc|cpp/memory/allocator_traits/dsc allocate}}
{{dsc inc|cpp/memory/memory_resource/dsc allocate}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc allocate}}
{{dsc inc|cpp/memory/scoped_allocator_adaptor/dsc allocate}}

{{dsc h2|Indirect access}}
{{dsc inc|cpp/utility/dsc launder}}
{{dsc inc|cpp/memory/dsc assume_aligned}}

{{dsc h2|Emptiness-checking functions}}
{{dsc inc|cpp/iterator/dsc empty}}
{{dsc|{{dsc member|cpp/container/node_handle#empty|empty}}|checks whether the node handle is empty&lt;br/&gt;{{mark mem fun|mem=''node handle''}}}}&lt;!-- needs a better description --&gt;
{{dsc inc|cpp/container/dsc empty|array}}
{{dsc inc|cpp/string/basic_string/dsc empty}}
{{dsc inc|cpp/string/basic_string_view/dsc empty}}
{{dsc inc|cpp/container/dsc empty|deque}}
{{dsc inc|cpp/container/dsc empty|forward_list}}
{{dsc inc|cpp/container/dsc empty|list}}
{{dsc inc|cpp/container/dsc empty|map}}
{{dsc inc|cpp/regex/match_results/dsc empty}}
{{dsc inc|cpp/container/dsc empty|multimap}}
{{dsc inc|cpp/container/dsc empty|multiset}}
{{dsc inc|cpp/container/dsc empty|priority_queue}}
{{dsc inc|cpp/container/dsc empty|queue}}
{{dsc inc|cpp/container/dsc empty|set}}
{{dsc inc|cpp/container/span/dsc empty}}
{{dsc inc|cpp/container/dsc empty|stack}}
{{dsc inc|cpp/container/dsc empty|unordered_map}}
{{dsc inc|cpp/container/dsc empty|unordered_multimap}}
{{dsc inc|cpp/container/dsc empty|unordered_multiset}}
{{dsc inc|cpp/container/dsc empty|unordered_set}}
{{dsc inc|cpp/container/dsc empty|vector}}
{{dsc inc|cpp/filesystem/path/dsc empty}}

{{dsc h2|Miscellaneous}}
{{dsc inc|cpp/thread/dsc async}}
&lt;!-- subrange::next, subrange::prev --&gt;

{{dsc end}}
{{cob}}
}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P1771R1|std=C++17|before={{attr/core|nodiscard}} on constructors has no effect|after=can cause a warning if the constructed object is discarded}}
{{dr list end}}

===References===
{{ref std c++23}}
{{ref std|section=9.12.9|title=Nodiscard attribute|id=dcl.attr.nodiscard}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=9.12.8|title=Nodiscard attribute|id=dcl.attr.nodiscard}}
{{ref std end}}
{{ref std c++17}}
{{ref std|section=10.6.7|title=Nodiscard attribute|id=dcl.attr.nodiscard}}
{{ref std end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/tuple/dsc ignore}}
{{dsc see c|c/language/attributes/nodiscard}}
{{dsc end}}

{{langlinks|es|ja|zh}}
{{title|Union declaration}}
{{cpp/language/classes/navbar}}

A union is a special class type that can hold only one of its non-static {{rlp|data members}} at a time.

===Syntax===
The class specifier for a union declaration is similar to {{rlp|class|class or struct}} declaration:

{{sdsc begin}}
{{sdsc|1=
{{ttb|union}} {{spar|attr}} {{spar|class-head-name}} {{ttb|{&lt;!----&gt;}} {{spar|member-specification}} {{ttb|}&lt;!----&gt;}}
}}
{{sdsc end}}

{{par begin}}
{{par|{{spar|attr}}|{{mark since c++11}} optional sequence of any number of {{rlp|attributes}}}}
{{par|{{spar|class-head-name}}|the name of the union that's being defined. Optionally prepended by {{spar|nested-name-specifier}} (sequence of names and scope-resolution operators, ending with scope-resolution operator). The name may be omitted, in which case the union is ''unnamed''}}
{{par|{{spar|member-specification}}|list of access specifiers, member object and member function declarations and definitions.}}
{{par end}}

A union can have member functions (including constructors and destructors), but not virtual functions. 

A union cannot have base classes and cannot be used as a base class.

A union cannot have non-static data members of reference types.
{{rrev multi|until1=c++11|rev1=
Unions cannot contain a non-static data member with a non-trivial special member function ({{rlp|copy constructor}}, {{rlp|copy assignment|copy-assignment}} operator, or {{rlp|destructor}}).
|rev2=
If a union contains a non-static data member with a non-trivial special member function ({{rlp|copy_constructor|copy}}/{{rlp|move_constructor|move}} constructor, {{rlp|copy_assignment|copy}}/{{rlp|move_assignment|move}} assignment, or {{rlp|destructor}}), that function is deleted by default in the union and needs to be defined explicitly by the programmer.

If a union contains a non-static data member with a non-trivial {{rlp|default constructor}}, the default constructor of the union is deleted by default unless a [[#Union-like classes|variant member]] of the union has a default member initializer{{mark unreviewed dr|CWG|2084}}.

At most one [[#Union-like classes|variant member]] can have a {{rlp|data members#Member initialization|default member initializer}}.
}}

Just like in {{rlp|classes|struct}} declaration, the default member access in a union is {{rlp|access|public}}.

===Explanation===
The union is at least as big as necessary to hold its largest data member, but is usually not larger. The other data members are intended to be allocated in the same bytes as part of that largest member. The details of that allocation are implementation-defined, except that all non-static data members have the same address. It is undefined behavior to read from the member of the union that wasn't most recently written. Many compilers implement, as a non-standard language extension, the ability to read inactive members of a union.

{{example
|code=
#include &lt;cstdint&gt;
#include &lt;iostream&gt;

union S
{
    std::int32_t n;     // occupies 4 bytes
    std::uint16_t s[2]; // occupies 4 bytes
    std::uint8_t c;     // occupies 1 byte
};                      // the whole union occupies 4 bytes

int main()
{
    S s = {0x12345678}; // initializes the first member, s.n is now the active member
    // At this point, reading from s.s or s.c is undefined behavior,
    // but most compilers define it.
    std::cout &lt;&lt; std::hex &lt;&lt; "s.n = " &lt;&lt; s.n &lt;&lt; '\n';

    s.s[0] = 0x0011; // s.s is now the active member
    // At this point, reading from s.n or s.c is undefined behavior,
    // but most compilers define it.
    std::cout &lt;&lt; "s.c is now " &lt;&lt; +s.c &lt;&lt; '\n' // 11 or 00, depending on platform
              &lt;&lt; "s.n is now " &lt;&lt; s.n &lt;&lt; '\n'; // 12340011 or 00115678
}
|p=true
|output=
s.n = 12345678
s.c is now 0
s.n is now 115678 &lt;!-- less common output chosen on purpose --&gt;
}}

Each member is allocated as if it is the only member of the class.

{{rrev|since=c++11|
If members of a union are classes with user-defined constructors and destructors, to switch the active member, explicit destructor and placement new are generally needed:

{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

union S
{
    std::string str;
    std::vector&lt;int&gt; vec;
    ~S() {} // needs to know which member is active, only possible in union-like class 
};          // the whole union occupies max(sizeof(string), sizeof(vector&lt;int&gt;))

int main()
{
    S s = {"Hello, world"};
    // at this point, reading from s.vec is undefined behavior
    std::cout &lt;&lt; "s.str = " &lt;&lt; s.str &lt;&lt; '\n';
    s.str.~basic_string();
    new (&amp;s.vec) std::vector&lt;int&gt;;
    // now, s.vec is the active member of the union
    s.vec.push_back(10);
    std::cout &lt;&lt; s.vec.size() &lt;&lt; '\n';
    s.vec.~vector();
}
|output=s.str = Hello, world
1
}}
}}

If two union members are [[cpp/named req/StandardLayoutType|standard-layout]] types, it's well-defined to examine their common subsequence on any compiler.

====Member lifetime====
The {{rlp|lifetime}} of a union member begins when the member is made active. If another member was active previously, its lifetime ends.

When active member of a union is switched by an assignment expression of the form {{tt|1=E1 = E2}} that uses either the built-in assignment operator or a trivial assignment operator, for each union member X that appears in the member access and array subscript subexpressions of {{tt|E1}} that is not a class with non-trivial or deleted default constructors, if modification of X would have undefined behavior under type aliasing rules, an object of the type of X is implicitly created in the nominated storage; no initialization is performed and the beginning of its lifetime is sequenced after the value computation of the left and right operands and before the assignment. 
{{source|1=
union A { int x; int y[4]; };
struct B { A a; };
union C { B b; int k; };

int f()
{
    C c;               // does not start lifetime of any union member
    c.b.a.y[3] = 4;    // OK: "c.b.a.y[3]", names union members c.b and c.b.a.y;
                       // This creates objects to hold union members c.b and c.b.a.y
    return c.b.a.y[3]; // OK: c.b.a.y refers to newly created object
}

struct X { const int a; int b; };
union Y { X x; int k; };

void g()
{
    Y y = {&lt;!----&gt;{1, 2}&lt;!----&gt;}; // OK, y.x is active union member
    int n = y.x.a;
    y.k = 4;   // OK: ends lifetime of y.x, y.k is active member of union
    y.x.b = n; // undefined behavior: y.x.b modified outside its lifetime,
               // "y.x.b" names y.x, but X's default constructor is deleted,
               // so union member y.x's lifetime does not implicitly start
}
}}

Trivial {{rev inl|since=c++11|move constructor, move assignment operator, }}copy constructor and copy assignment operator of union types copy object representations. If the source and the destination are not the same object, these special member functions start lifetime of every object (except for objects that are neither subobjects of the destination nor of {{rlp|lifetime#Implicit-lifetime types|implicit-lifetime type}}&lt;!-- not in the standard, but their lifetimes cannot be started in this way --&gt;) nested in the destination corresponding to the one nested in the source before the copy is performed. Otherwise, they do nothing. Two union objects have the same corresponding active member (if any) after construction or assignment via trivial special functions.

====Anonymous unions====
An ''anonymous union'' is an unnamed union definition that does not simultaneously define any variables (including objects of the union type, references, or pointers to the union).

{{sdsc begin}}
{{sdsc|1=
{{ttb|union}} {{ttb|{}} {{spar|member-specification}} {{ttb|}&lt;!----&gt;}} {{ttb|;}}
}}
{{sdsc end}}

Anonymous unions have further restrictions: they cannot have member functions, cannot have static data members, and all their data members must be public. The only declarations allowed are non-static data members {{rev inl|since=c++11| and {{rlpt|static_assert}} declarations}}.

Members of an anonymous union are injected in the enclosing scope (and must not conflict with other names declared there).

{{source|1=
int main()
{
    union
    {
        int a;
        const char* p;
    };
    a = 1;
    p = "Jennifer";
}
}}

Namespace-scope anonymous unions must be declared static unless they appear in an unnamed namespace.

====Union-like classes====
A ''union-like class'' is either a union, or a (non-union) class that has at least one anonymous union as a member. A union-like class has a set of ''variant members'':
* the non-static data members of its member anonymous unions;
* in addition, if the union-like class is a union, its non-static data members that are not anonymous unions.

Union-like classes can be used to implement {{enwiki|tagged union}}.

{{example
|code=
#include &lt;iostream&gt;

// S has one non-static data member (tag), three enumerator members (CHAR, INT, DOUBLE), 
// and three variant members (c, i, d)
struct S
{
    enum{CHAR, INT, DOUBLE} tag;
    union
    {
        char c;
        int i;
        double d;
    };
};

void print_s(const S&amp; s)
{
    switch(s.tag)
    {
        case S::CHAR: std::cout &lt;&lt; s.c &lt;&lt; '\n'; break;
        case S::INT: std::cout &lt;&lt; s.i &lt;&lt; '\n'; break;
        case S::DOUBLE: std::cout &lt;&lt; s.d &lt;&lt; '\n'; break;
    }
}

int main()
{
    S s = {S::CHAR, 'a'};
    print_s(s);
    s.tag = S::INT;
    s.i = 123;
    print_s(s);
}
|output=
a
123
}}

{{rrev|since=c++17|
The C++ standard library includes {{lc|std::variant}}, which can replace many uses of unions and union-like classes. The example above can be re-written as
{{example
|code=
#include &lt;iostream&gt;
#include &lt;variant&gt;

int main()
{
    std::variant&lt;char, int, double&gt; s = 'a';
    std::visit([](auto x){ std::cout &lt;&lt; x &lt;&lt; '\n';}, s);
    s = 123;
    std::visit([](auto x){ std::cout &lt;&lt; x &lt;&lt; '\n';}, s);
}
|output=
a
123
}}
}}

===Keywords===
{{ltt|cpp/keyword/union}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=cwg|dr=1940|std=c++11|before=anonymous unions only allowed non-static data members|after={{tt|static_assert}} also allowed}}
{{dr list end}}

===References===
{{ref std c++23}}
{{ref std|section=11.5|title=Unions|id=class.union}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=11.5|title=Unions|id=class.union}}
{{ref std end}}
{{ref std c++17}}
{{ref std|section=12.3|title=Unions|id=class.union}}
{{ref std end}}
{{ref std c++14}}
{{ref std|section=9.5|title=Unions|id=class.union}}
{{ref std end}}
{{ref std c++11}}
{{ref std|section=9.5|title=Unions|id=class.union}}
{{ref std end}}
{{ref std c++03}}
{{ref std|section=9.5|title=Unions|id=class.union}}
{{ref std end}}
{{ref std c++98}}
{{ref std|section=9.5|title=Unions|id=class.union}}
{{ref std end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc variant}}
{{dsc see c|c/language/union|Union declaration|nomono=true}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
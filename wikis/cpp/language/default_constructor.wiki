{{title|Default constructors}}
{{cpp/language/classes/navbar}}

A default constructor is a {{rlp|constructor}} which can be called with no arguments.

===Syntax===
{{sdsc begin}}
{{sdsc|num=1|{{spar sep|class-name}}{{ttb|(}}{{spar optional|parameter-list}}{{ttb|);}}}}
{{sdsc|num=2|{{spar sep|class-name}}{{ttb|(}}{{spar optional|parameter-list}}{{ttb|)}} {{spar|function-body}}}}
{{sdsc|num=3|{{spar sep|class-name}}{{ttb|1=() = default;}}|notes={{mark since c++11}}}}
{{sdsc|num=4|{{spar sep|class-name}}{{ttb|(}}{{spar optional|parameter-list}}{{ttb|1=) = delete;}}|notes={{mark since c++11}}}}
{{sdsc|num=5|{{spar sep|class-name}}{{ttb|::}}{{spar sep|class-name}}{{ttb|(}}{{spar optional|parameter-list}}{{ttb|)}} {{spar|function-body}}}}
{{sdsc|num=6|{{spar sep|class-name}}{{ttb|::}}{{spar sep|class-name}}{{ttb|1=() = default;}}|notes={{mark since c++11}}}}
{{sdsc end}}

{{par begin}}
{{par|{{spar|class-name}}|the class whose default constructor is being declared}}
{{par|{{spar|parameter-list}}|a {{rlpsd|function#Parameter list}} where all parameters{{rev inl|since=c++11| (except {{rlp|parameter pack}}s)}} have {{rlp|default arguments}}}}
{{par|{{spar|function-body}}|the {{rlp|constructor|function body}} of the default constructor}}
{{par end}}

===Explanation===
@1@ Declaration of a default constructor inside of class definition.
@2-4@ Definition of a default constructor inside of class definition.
:@3@ The default constructor is explicitly-defaulted.
:@4@ The default constructor is deleted.
@5,6@ Definition of a default constructor outside of class definition (the class must contain a declaration {{v|1}}).
:@6@ The default constructor is explicitly-defaulted.

Default constructors are called during {{rlp|default initialization}}s and {{rlp|value initialization}}s.

===Implicitly-declared default constructor===
If there is no user-declared constructor or constructor template for a class type, the compiler will implicitly declare a default constructor as an {{c/core|inline public}} member of its class.

The implicitly-declared (or defaulted on its first declaration) default constructor has an exception specification as described in {{rev inl|until=c++17|{{rlp|except spec|dynamic exception specification}}}} {{rev inl|since=c++17|{{rlp|noexcept spec|noexcept specification}}}}.

===Implicitly-defined default constructor===
If {{rev inl|until=c++11|the constructor is implicitly-declared}}{{rev inl|since=c++11|the implicitly-declared or explicitly-defaulted default constructor is not defined as deleted}}, it is defined (that is, a function body is generated and compiled) by the compiler if {{rlp|definition#ODR-use|odr-used}}{{rev inl|since=c++11|&lt;!-- P0859R0 --&gt; or {{rlp|constant expression#Functions and variables needed for constant evaluation|needed for constant evaluation}}}}, and it has the same effect as a user-defined constructor with empty body and empty initializer list. That is, it calls the default constructors of the bases and of the non-static members of this class. Class types with an empty user-provided constructor may get treated differently than those with an implicitly-defined default constructor during {{rlp|value initialization}}.

{{rrev|since=c++11|
If this satisfies the requirements of a {{rev inl|until=c++23|{{rlp|constexpr#constexpr constructor|constexpr constructor}}}}{{rev inl|since=c++23|{{rlp|constexpr#constexpr funtcion|constexpr function}}}}, the generated constructor is {{c/core|constexpr}}.

If some user-defined constructors are present, the user may still force the automatic generation of a default constructor by the compiler that would be implicitly-declared otherwise with the keyword {{c/core|default}}.
}}

===Deleted default constructor===
The implicitly-declared{{rev inl|since=c++11| or explicitly-defaulted}} default constructor for class {{tt|T}} is {{rev inl|until=c++11|undefined}}{{rev inl|since=c++11|defined as deleted}} if any of the following conditions is satisfied:
* {{tt|T}} is a {{rlp|union}} and all of its {{rlp|union#Union-like classes|variant members}} are of const-qualified type (or possibly multi-dimensional array thereof).
* {{tt|T}} is a non-union class and all members of any {{rlp|union#Anonymous unions|anonymous union}} member are of const-qualified type (or possibly multi-dimensional array thereof).
* {{tt|T}} has a non-static data member of reference type{{rev inl|since=c++11| without a default initializer}}.
* {{tt|T}} has a non-variant non-static non-{{rlp|default initialization#Default-initialization of a const object|const-default-constructible}} data member of const-qualified type (or possibly multi-dimensional array thereof){{rev inl|since=c++11| without a default member initializer}}.
* {{tt|T}} has a {{rlp|object#Potentially constructed subobject|potentially constructed subobject}} of class type {{tt|M}} (or possibly multi-dimensional array thereof) such that
:* {{tt|M}} has a destructor that is{{rev inl|since=c++11| deleted or}} inaccessible from the default constructor, or
:* all of the following conditions are satisfied:
{{rrev|since=c++11|
::* The subobject is not a non-static data member with a default initializer.
::* The subobject is not a variant member of a union where another non-static data member has a default initializer.
}}
::* The overload resolution as applied to find {{tt|M}}'s default constructor
:::* does not result in a usable candidate, or
:::* in the case of the subobject being a variant member, selects a non-trivial function.

{{rrev|since=c++11|If no user-defined constructors are present and the implicitly-declared default constructor is not trivial, the user may still inhibit the automatic generation of an implicitly-defined default constructor by the compiler with the keyword {{c/core|delete}}.}}

===Trivial default constructor===
The default constructor for class {{tt|T}} is trivial (i.e. performs no action) if all of the following is true:
* The constructor is not user-provided (i.e., is implicitly-defined or defaulted on its first declaration).
* {{tt|T}} has no virtual member functions.
* {{tt|T}} has no virtual base classes.
{{rrev|since=c++11|
* {{tt|T}} has no non-static members with {{rlp|data members#Member initialization|default initializers}}.
}}
* Every direct base of {{tt|T}} has a trivial default constructor.
* Every non-static member of class type (or array thereof) has a trivial default constructor.

A trivial default constructor is a constructor that performs no action. All data types compatible with the C language (POD types) are trivially default-constructible.

===Eligible default constructor===
{{cpp/language/eligible special member function|default constructor}}

Triviality of eligible default constructors determines whether the class is an {{rlp|lifetime#Implicit-lifetime types|implicit-lifetime type}}, and whether the class is a [[cpp/named req/TrivialType|trivial type]].

===Example===
{{example|code=
struct A
{
    int x;
    A(int x = 1): x(x) {} // user-defined default constructor
};
 
struct B : A
{
    // B::B() is implicitly-defined, calls A::A()
};
 
struct C
{
    A a;
    // C::C() is implicitly-defined, calls A::A()
};
 
struct D : A
{
    D(int y) : A(y) {}
    // D::D() is not declared because another constructor exists
};
 
struct E : A
{
    E(int y) : A(y) {}
    E() = default; // explicitly defaulted, calls A::A()
};
 
struct F
{
    int&amp; ref; // reference member
    const int c; // const member
    // F::F() is implicitly defined as deleted
};

// user declared copy constructor (either user-provided, deleted or defaulted)
// prevents the implicit generation of a default constructor

struct G
{
    G(const G&amp;) {}
    // G::G() is implicitly defined as deleted
};

struct H
{
    H(const H&amp;) = delete;
    // H::H() is implicitly defined as deleted
};

struct I
{
    I(const I&amp;) = default;
    // I::I() is implicitly defined as deleted
};

int main()
{
    A a;
    B b;
    C c;
//  D d; // compile error
    E e;
//  F f; // compile error
//  G g; // compile error
//  H h; // compile error
//  I i; // compile error
}
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=cwg|dr=1353|std=C++98|before=the conditions where implicitly-declared default constructors&lt;br&gt;are undefined did not consider multi-dimensional array types|after=consider these types}}
{{dr list item|wg=cwg|dr=2084|std=C++11|before=default member initializers had no effect on whether&lt;br&gt;a defaulted default constructor of a union is deleted|after=they prevent the defaulted default&lt;br&gt;constructor from being deleted}}
{{dr list item|wg=cwg|dr=2595|std=C++20|before=a default constructor was not eligible if there is&lt;br&gt;another default constructor which is more constrained&lt;br&gt;but does not satisfy its associated constraints|after=it can be eligible in this case}}
{{dr list item|wg=cwg|dr=2871|std=C++98|before=a default constructor would be implicitly declared&lt;br&gt;even if there is a user-declared constructor template|after=no implicit declaration&lt;br&gt;in this case}}
{{dr list end}}

===See also===
* {{rlp|constructor}}
* {{rlp|initialization}}
** {{rlp|aggregate initialization}}
** {{rlp|constant initialization}}
** {{rlp|copy initialization}}
** {{rlp|default initialization}}
** {{rlp|direct initialization}}
** {{rlp|list initialization}}
** {{rlp|reference initialization}}
** {{rlp|value initialization}}
** {{rlp|zero initialization}}
* {{rlpt|new}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
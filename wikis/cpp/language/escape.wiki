{{title|Escape sequences}}
{{cpp/language/expressions/navbar}}
Escape sequences are used to represent certain special characters within {{rlp|string literal}}s and {{rlp|character literal}}s. 

The following escape sequences are available:

{| class="wikitable"
|-
! Escape&lt;br&gt; sequence
! Description
! Representation
|-
! colspan="3" | Simple escape sequences
|-
| {{ttb|&lt;nowiki&gt;\'&lt;/nowiki&gt;}} 
| single quote 
| byte {{tt|0x27}} in ASCII encoding
|-
| {{ttb|\"}} 
| double quote
| byte {{tt|0x22}} in ASCII encoding
|-
| {{ttb|\?}} 
| question mark
| byte {{tt|0x3f}} in ASCII encoding
|-
| {{ttb|\\}} 
| backslash
| byte {{tt|0x5c}} in ASCII encoding
|-
| {{ttb|\a}} 
| audible bell
| byte {{tt|0x07}} in ASCII encoding
|-
| {{ttb|\b}} 
| backspace
| byte {{tt|0x08}} in ASCII encoding
|-
| {{ttb|\f}} 
| form feed - new page
| byte {{tt|0x0c}} in ASCII encoding
|-
| {{ttb|\n}} 
| line feed - new line
| byte {{tt|0x0a}} in ASCII encoding
|-
| {{ttb|\r}} 
| carriage return 
| byte {{tt|0x0d}} in ASCII encoding
|-
| {{ttb|\t}} 
| horizontal tab 
| byte {{tt|0x09}} in ASCII encoding
|-
| {{ttb|\v}} 
| vertical tab 
| byte {{tt|0x0b}} in ASCII encoding
|-
! colspan="3" | Numeric escape sequences
|-
| {{ttb|\{{small|''nnn''}}}} 
| rowspan="2" | arbitrary octal value 
| code unit {{tt|''nnn''}} (1~3 octal digits)
|-
| {{ttb|\o{&lt;!-- --&gt;{{small|''n...''}}&lt;!-- --&gt;}&lt;!-- --&gt;}} {{mark since c++23}} 
| code unit {{tt|''n...''}} (arbitrary number of octal digits)
|-
| {{ttb|\x{{small|''n...''}}}} 
| rowspan="2" | arbitrary hexadecimal value
| rowspan="2" | code unit {{tt|''n...''}} (arbitrary number of hexadecimal digits)
|-
| {{ttb|\x{&lt;!-- --&gt;{{small|''n...''}}&lt;!-- --&gt;}&lt;!-- --&gt;}} {{mark since c++23}} 
|-
! colspan="3" | Conditional escape sequences&lt;ref&gt;Conditional escape sequences are conditionally-supported. The character {{ttb|{{small|''c''}}}} in each conditional escape sequence is a member of {{rev inl|until=c++23|{{rlp|charset#Basic source character set|basic source character set}}}}{{rev inl|since=c++23|{{rlp|charset#Basic character set|basic character set}}}} that is not the character following the {{ttb|\}} in any other escape sequence.&lt;/ref&gt;
|-
| {{ttb|\{{small|''c''}}}}
| Implementation-defined
| Implementation-defined
|-
! colspan="3" | Universal character names
|-
| {{ttb|\u{{small|''nnnn''}}}}
| rowspan="3" | arbitrary {{enwiki|Unicode}} value;&lt;br&gt;may result in several code units
| code point {{tt|U+''nnnn''}} (4 hexadecimal digits)
|-
| {{ttb|\u{&lt;!-- --&gt;{{small|''n...''}}&lt;!-- --&gt;}&lt;!-- --&gt;}} {{mark since c++23}} 
| code point {{tt|U+''n...''}} (arbitrary number of hexadecimal digits)
|-
| {{ttb|\U{{small|''nnnnnnnn''}}}}
| code point {{tt|U+''nnnnnnnn''}} (8 hexadecimal digits)
|-
| {{ttb|\N{&lt;!-- --&gt;{{small|''NAME''}}&lt;!-- --&gt;}&lt;!-- --&gt;}} {{mark since c++23}}
| arbitrary Unicode character
| character named by {{tt|''NAME''}} (see [[#Named universal character escapes|below]])
|}
&lt;references/&gt;

===Range of universal character names===
{{rrev multi
|rev1=
If a universal character name corresponds to a code point that is not 0x24 ({{tt|$}}), 0x40 ({{tt|@}}), nor 0x60 ({{tt|`}}) and less than 0xA0, the program is ill-formed. In other words, members of {{rlp|charset#Basic source character set|basic source character set}} and control characters (in ranges 0x0-0x1F and 0x7F-0x9F) cannot be expressed in universal character names.
|since2=c++11|rev2=
If a universal character name corresponding to a code point of a member of {{rlp|charset#Basic source character set|basic source character set}} or control characters appear outside a {{rlp|character literal|character}} or {{rlp|string literal}}, the program is ill-formed.

If a universal character name corresponds surrogate code point (the range 0xD800-0xDFFF, inclusive), the program is ill-formed.

If a universal character name used in a UTF-16/32 string literal does not correspond to a code point in [https://www.iso.org/standard/76835.html ISO/IEC 10646] (the range 0x0-0x10FFFF, inclusive), the program is ill-formed.
|since3=c++20|rev3=
If a universal character name corresponding to a code point of a member of {{rlp|charset#Basic source character set|basic source character set}} or control characters appear outside a {{rlp|character literal|character}} or {{rlp|string literal}}, the program is ill-formed.

If a universal character name does not correspond to a code point in [https://www.iso.org/standard/76835.html ISO/IEC 10646] (the range 0x0-0x10FFFF, inclusive) or corresponds to a surrogate code point (the range 0xD800-0xDFFF, inclusive), the program is ill-formed.
|since4=c++23|rev4=
If a universal character name corresponding to a scalar value of a character in the {{rlp|charset#Basic character set|basic character set}} or a control character appear outside a {{rlp|character literal|character}} or {{rlp|string literal}}, the program is ill-formed.

If a universal character name does not correspond to a scalar value of a character in the {{rlp|charset#Translation character set|translation character set}}, the program is ill-formed.
}}


{{rrev|since=c++23|
====Named universal character escapes====
{{sdsc begin}}
{{sdsc|1=
{{ttb|\N{}} {{spar|n-char-sequence}} {{ttb|}&lt;!-- --&gt;}}
}}
{{sdsc end}}

{{par begin}}
{{par|{{spar|n-char-sequence}}|one or more {{spar|n-char}}s}}
{{par|{{spar|n-char}}|a character from the {{rlp|charset#Translation character set|translation character set}}, except the right curly bracket {{c|}&lt;!----&gt;}} or new-line character}}
{{par end}}

A universal character name of the syntax above is a ''named universal character''. It designates the corresponding character in the [https://www.unicode.org/versions/latest/ Unicode Standard] ([https://www.unicode.org/versions/latest/ch04.pdf chapter 4.8 Name]) if the {{spar|n-char-sequence}} is equal to its character name or to one of its character name aliases of type “control”, “correction”, or “alternate”; otherwise, the program is ill-formed.

These aliases are listed in the [https://www.unicode.org/reports/tr44/ Unicode Character Database]’s [https://www.unicode.org/Public/UCD/latest/ucd/NameAliases.txt NameAliases.txt]. None of these names or aliases have leading or trailing spaces.

A valid {{spar|n-char-sequence}} must contain only uppercase Latin letters A through Z, digits, space, and hyphen-minus. Other characters never occur in a Unicode character name, and thus their appearance in a {{spar|n-char-sequence}} always renders the program ill-formed.
}}

===Notes===
{{c|\0}} is the most commonly used octal escape sequence, because it represents the terminating null character in [[cpp/string#Null-terminated strings|null-terminated strings]].

The new-line character {{c|\n}} has special meaning when used in [[cpp/io/c|text mode I/O]]: it is converted to the OS-specific newline representation, usually a byte or byte sequence. Some systems mark their lines with length fields instead.

Octal escape sequences have a limit of three octal digits, but terminate at the first character that is not a valid octal digit if encountered sooner.

Hexadecimal escape sequences have no length limit and terminate at the first character that is not a valid hexadecimal digit. If the value represented by a single hexadecimal escape sequence does not fit the range of values represented by the character type used in this string literal ({{c/core|char}}, {{rev inl|since=c++20|{{c/core|char8_t}}, }}{{rev inl|since=c++11|{{c/core|char16_t}}, {{c/core|char32_t}}, }}or {{c/core|wchar_t}}), the result is unspecified.

{{rrev|since=c++11|
A universal character name in a narrow string literal or a 16-bit string literal may map to more than one code unit, e.g. {{c|\U0001f34c}} is 4 {{c/core|char}} code units in UTF-8 ({{c|\xF0\x9F\x8D\x8C}}) and 2 {{c/core|char16_t}} code units in UTF-16 ({{c|\xD83C\xDF4C}}).
}}

The question mark escape sequence {{c|\?}} is used to prevent {{rlp|operator alternative|trigraphs}} from being interpreted inside string literals: a string such as {{c|"??/"}} is compiled as {{c|"\"}}, but if the second question mark is escaped, as in {{c|"?\?/"}}, it becomes {{c|"??/"}}. {{rev inl|since=c++17|As trigraphs have been removed from C++, the question mark escape sequence is no longer necessary. It is preserved for compatibility with C++14 (and former revisions) and C.}}
{{feature test macro|std=C++23|value=202207L|__cpp_named_character_escapes|Named universal character escapes}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
 
int main()
{
    std::cout &lt;&lt; "This\nis\na\ntest\n\n";
    std::cout &lt;&lt; "She said, \"Sells she seashells on the seashore?\"\n";
} 
|output=
This
is
a
test

She said, "Sells she seashells on the seashore?"
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=cwg|dr=505|std=C++98|before=the behavior was undefined if the character following&lt;br&gt;a backslash was not one of those specified in the table|after=made conditionally supported&lt;br&gt;(semantic is implementation-defined)}}
{{dr list end}}

===See also===
* {{rlp|ascii|ASCII chart}}
{{dsc begin}}
{{dsc see c|c/language/escape|Escape sequence|nomono=true}}
{{dsc end}}

{{langlinks|ar|cs|de|es|fr|it|ja|ko|pl|pt|ru|tr|zh}}
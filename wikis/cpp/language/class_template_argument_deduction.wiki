{{title|Class template argument deduction (CTAD) {{mark since c++17}}}}
{{cpp/language/declarations/expressions/templates/navbar}}

In order to instantiate a {{rlp|class template}}, every template argument must be known, but not every template argument has to be specified. In the following contexts the compiler will deduce the template arguments from the type of the initializer:
* any {{rlp|declarations|declaration}} that specifies initialization of a variable and variable template, whose declared type is the class template (possibly {{rlp|cv|cv-qualified}}):
{{source|1=
std::pair p(2, 4.5);     // deduces to std::pair&lt;int, double&gt; p(2, 4.5);
std::tuple t(4, 3, 2.5); // same as auto t = std::make_tuple(4, 3, 2.5);
std::less l;             // same as std::less&lt;void&gt; l;
}}
* {{rlp|new|new-expressions}}:
{{source|1=
template&lt;class T&gt;
struct A
{
    A(T, T);
};

auto y = new A{1, 2}; // allocated type is A&lt;int&gt;
}}
* {{rlp|explicit cast|function-style cast}} expressions:
{{source|1=
auto lck = std::lock_guard(mtx);     // deduces to std::lock_guard&lt;std::mutex&gt;
std::copy_n(vi1, 3,
    std::back_insert_iterator(vi2)); // deduces to std::back_insert_iterator&lt;T&gt;,
                                     // where T is the type of the container vi2
std::for_each(vi.begin(), vi.end(),
    Foo([&amp;](int i) {...}));          // deduces to Foo&lt;T&gt;,
                                     // where T is the unique lambda type
}}
{{rrev|since=c++20|1=
* the type of a {{rlpsd|template parameters#Non-type template parameter}}:
{{source|1=
template&lt;class T&gt;
struct X
{
    constexpr X(T) {}
};

template&lt;X x&gt;
struct Y {};

Y&lt;0&gt; y; // OK, Y&lt;X&lt;int&gt;(0)&gt;
}}
}}

===Deduction for class templates===
{{anchor|Automatic deduction guides}}
====Implicitly-generated deduction guides====
When, in a function-style cast or in a variable's declaration, the type specifier consists solely
of the name of a primary class template {{tt|C}} (i.e., there is no accompanying template argument list), candidates for deduction are formed as follows:

* If {{tt|C}} is defined, for each constructor (or constructor template) {{tt|C{{sub|i}}}} declared in the named primary template, a fictional function template {{tt|F{{sub|i}}}}, is constructed, such that all following conditions are satisfied:
:* The template parameters of {{tt|F{{sub|i}}}} are the template parameters of {{tt|C}} followed (if {{tt|C{{sub|i}}}} is a constructor template) by the template parameters of {{tt|C{{sub|i}}}} (default template arguments are included too).
{{rrev|since=c++20|
:* The {{rlp|constraints|associated constraints}} of {{tt|F{{sub|i}}}} are the conjunction of the associated constraints of {{tt|C}} and the associated constraints of {{tt|C{{sub|i}}}}.
}}
:* The {{rlpsd|function#Parameter list}} of {{tt|F{{sub|i}}}} is the parameter list of {{tt|C{{sub|i}}}}.
:* The return type of {{tt|F{{sub|i}}}} is {{tt|C}} followed by the template parameters of the class template enclosed in {{tt|&lt;&gt;}}.

* If {{tt|C}} is not defined or does not declare any constructors, an additional fictional function template is added, derived as above from a hypothetical constructor {{tt|C()}}.

* In any case, an additional fictional function template derived as above from a hypothetical constructor {{tt|C(C)}} is added, called the copy deduction candidate.

* For each [[#User-defined deduction guides|user-defined deduction guide]] {{tt|G{{sub|i}}}}, a fictional function or function template {{tt|F{{sub|i}}}}, is constructed, such that all following conditions are satisfied:
:* The parameter list of {{tt|F{{sub|i}}}} is the parameter list of {{tt|G{{sub|i}}}}.
:* The return type of {{tt|F{{sub|i}}}} is the simple template identifier of {{tt|G{{sub|i}}}}.
:* If {{tt|G{{sub|i}}}} has template parameters (syntax {{v|2}}), {{tt|F{{sub|i}}}} is a function template, and its template parameter list is the template parameter list of {{tt|G{{sub|i}}}}. Otherwise, {{tt|F{{sub|i}}}} is a function.

{{rrev|since=c++20|1=
* In addition, if
:* {{tt|C}} is defined and satisfies the requirements of an {{rlp|aggregate initialization|aggregate type}} with the assumption that any dependent base class has no virtual functions or virtual base classes,
:* there are no user-defined deduction guides for {{tt|C}}, and
:* the variable is initialized from a non-empty list of initializers {{spar|arg1, arg2, ..., argn}} (which may use {{rlpsd|aggregate initialization#Designated initializer}}),
: an aggregate deduction candidate may be added. The parameter list of the aggregate deduction candidate is produced from the aggregate element types, as follows:
:* Let {{tt|e{{sub|i}}}} be the (possibly recursive) {{rlp|aggregate initialization|aggregate element}} that would be initialized from {{tt|arg{{sub|i}}}}, where
::* {{rlpsd|aggregate initialization#Brace elision}} is not considered for any aggregate element that has
:::* a {{rlp|dependent name#Dependent types|dependent}} non-array type,
:::* an array type with a {{rlp|dependent name#Value-dependent expressions|value-dependent}} bound, or
:::* an array type with a dependent array element type and {{tt|arg{{sub|i}}}} is a {{rlp|string literal}}{{mark unreviewed dr|cwg|2685}}
::* if {{tt|C}} (or its element that is itself an aggregate) has a base that is a {{rlp|parameter pack|pack expansion}}:
:::* if the pack expansion is a trailing aggregate element, it is considered to match all remaining elements of the initializer list;
:::* otherwise, the pack is considered to be empty.
:* If there is no such {{tt|e{{sub|i}}}}, the aggregate deduction candidate is not added.
:* Otherwise, determine the parameter list {{tt|T{{sub|1}}, T{{sub|2}}, ..., T{{sub|n}}}} of the aggregate deduction candidate as follows:
::* If {{tt|e{{sub|i}}}} is an array and {{tt|arg{{sub|i}}}} is a {{spar sep|braced-init-list}}, {{tt|T{{sub|i}}}} is an rvalue reference to the declared type of {{tt|e{{sub|i}}}}.
::* If {{tt|e{{sub|i}}}} is an array and {{tt|arg{{sub|i}}}} is a {{rlp|string literal}}, {{tt|T{{sub|i}}}} is an lvalue reference to the const-qualified declared type of {{tt|e{{sub|i}}}}.{{mark unreviewed dr|cwg|2681}}
::* Otherwise, {{tt|T{{sub|i}}}} is the declared type of {{tt|e{{sub|i}}}}.
::* If a pack was skipped because it is a non-trailing aggregate element, an additional parameter pack of the form {{tt|P{{sub|j}} ...}} is inserted in its original aggregate element position. (This will generally cause deduction to fail.)
::* If a pack is a trailing aggregate element, the trailing sequence of parameters corresponding to it is replaced by a single parameter of the form {{tt|T{{sub|n}} ...}}.
: The aggregate deduction candidate is a fictional function template derived as above from a hypothetical constructor {{tt|C(T{{sub|1}}, T{{sub|2}}, ..., T{{sub|n}})}}.

: During template argument deduction for the aggregate deduction candidate, the number of elements in a trailing parameter pack is only deduced from the number of remaining function arguments if it is not otherwise deduced.

{{source|1=
template&lt;class T&gt;
struct A
{
    T t;
    
    struct
    {
        long a, b;
    } u;
};

A a{1, 2, 3};
// aggregate deduction candidate:
//   template&lt;class T&gt;
//   A&lt;T&gt; F(T, long, long);

template&lt;class... Args&gt;
struct B : std::tuple&lt;Args...&gt;, Args... {};

B b{std::tuple&lt;std::any, std::string&gt;{}, std::any{}&lt;!-- --&gt;};
// aggregate deduction candidate:
//   template&lt;class... Args&gt;
//   B&lt;Args...&gt; F(std::tuple&lt;Args...&gt;, Args...);

// type of b is deduced as B&lt;std::any, std::string&gt;
}}
}}

{{rlp|template argument deduction|Template argument deduction}} and {{rlp|overload resolution}} is then performed for initialization of a fictional object of hypothetical class type, whose constructor signatures match the guides (except for return type) for the purpose of forming an overload set, and the initializer is provided by the context in which class template argument deduction was performed, except that &lt;!--P0702R1--&gt; the first phase of {{rlpsd|overload resolution#List-initialization}} (considering initializer-list constructors) is omitted if the initializer list consists of a single expression of type (possibly cv-qualified) {{tt|U}}, where {{tt|U}} is a specialization of {{tt|C}} or a class derived from a specialization of {{tt|C}}.

These fictional constructors are public members of the hypothetical class type. They are explicit if the guide was formed from an explicit constructor. If overload resolution fails, the program is ill-formed. Otherwise, the return type of the selected {{tt|F}} template specialization becomes the deduced class template specialization.

{{source|1=
template&lt;class T&gt;
struct UniquePtr
{
    UniquePtr(T* t);
};

UniquePtr dp{new auto(2.0)};

// One declared constructor:
// C1: UniquePtr(T*);

// Set of implicitly-generated deduction guides:

// F1: template&lt;class T&gt;
//     UniquePtr&lt;T&gt; F(T* p);

// F2: template&lt;class T&gt; 
//     UniquePtr&lt;T&gt; F(UniquePtr&lt;T&gt;); // copy deduction candidate

// imaginary class to initialize:
// struct X
// {
//     template&lt;class T&gt;
//     X(T* p);         // from F1
//     
//     template&lt;class T&gt;
//     X(UniquePtr&lt;T&gt;); // from F2
// };

// direct-initialization of an X object
// with "new double(2.0)" as the initializer
// selects the constructor that corresponds to the guide F1 with T = double
// For F1 with T=double, the return type is UniquePtr&lt;double&gt;

// result:
// UniquePtr&lt;double&gt; dp{new auto(2.0)}
}}

Or, for a more complex example (note: "{{tt|S::N}}" would not compile: scope resolution qualifiers are not something that can be deduced):
{{source|1=
template&lt;class T&gt;
struct S
{
    template&lt;class U&gt;
    struct N
    {
        N(T);
        N(T, U);
        
        template&lt;class V&gt;
        N(V, U);
    };
};

S&lt;int&gt;::N x{2.0, 1};

// the implicitly-generated deduction guides are (note that T is already known to be int)

// F1: template&lt;class U&gt;
//     S&lt;int&gt;::N&lt;U&gt; F(int);

// F2: template&lt;class U&gt;
//     S&lt;int&gt;::N&lt;U&gt; F(int, U);

// F3: template&lt;class U, class V&gt;
//     S&lt;int&gt;::N&lt;U&gt; F(V, U);

// F4: template&lt;class U&gt;
//     S&lt;int&gt;::N&lt;U&gt; F(S&lt;int&gt;::N&lt;U&gt;); (copy deduction candidate)

// Overload resolution for direct-list-init with "{2.0, 1}" as the initializer
// chooses F3 with U=int and V=double.
// The return type is S&lt;int&gt;::N&lt;int&gt;

// result:
// S&lt;int&gt;::N&lt;int&gt; x{2.0, 1};
}}

====User-defined deduction guides====
The syntax of a user-defined deduction guide is the syntax of a function (template) declaration with a trailing return type, except that it uses the name of a class template as the function name:
{{sdsc begin}}
{{sdsc|num=1|{{spar optional|explicit}} {{spar|template-name}} {{ttb|(}} {{spar|parameter-list}} {{ttb|)}} {{ttb|-&gt;}} {{spar|simple-template-id}} {{spar optional|requires-clause}} {{ttb|;}}}}
{{sdsc|num=2|{{ttb|template &lt;}}{{spar sep|template-parameter-list}}{{ttb|&gt;}} {{spar optional|requires-clause}}&lt;br&gt;{{spar optional|explicit}} {{spar|template-name}} {{ttb|(}} {{spar|parameter-list}} {{ttb|)}} {{ttb|-&gt;}} {{spar|simple-template-id}} {{spar optional|requires-clause}} {{ttb|;}}}}
{{sdsc end}}

{{par begin}}
{{par|{{spar|template-parameter-list}}|a non-empty comma-separated list of {{rlp|template parameters}}}}
{{par|{{spar|explicit}}|an {{rlp|explicit|{{tt|explicit}} specifier}}}}
{{par|{{spar|template-name}}|the name of the class template whose arguments are to be deduced}}
{{par|{{spar|parameter-list}}|a (possibly empty) {{rlpsd|function#Parameter list}}}}
{{par|{{spar|simple-template-id}}|a {{rlp|templates#Template identifiers|simple template identifier}}}}
{{par|{{spar|requires-clause}}|{{mark since c++20}} a {{rlp|constraints#Requires clauses|{{c/core|requires}} clause}}}}
{{par end}}


{{rrev|since=c++20|
The parameters of user-defined deduction guides cannot have placeholder types: the {{rlpsd|function template#Abbreviated function template}} syntax is not allowed.
}}

User-defined deduction guides must name a class template and must be introduced within the same semantic scope of the class template (which could be namespace or enclosing class) and, for a member class template, must have the same access, but deduction guides do not become members of that scope.

A deduction guide is not a function and does not have a body. Deduction guides are not found by name lookup and do not participate in overload resolution except for the {{rlp|overload resolution#Best viable function|overload resolution against other deduction guides}} when deducing class template arguments. Deduction guides cannot be redeclared in the same translation unit for the same class template.

{{source|1=
// declaration of the template
template&lt;class T&gt;
struct container
{
    container(T t) {}
    
    template&lt;class Iter&gt;
    container(Iter beg, Iter end);
};

// additional deduction guide
template&lt;class Iter&gt;
container(Iter b, Iter e) -&gt; container&lt;typename std::iterator_traits&lt;Iter&gt;::value_type&gt;;

// uses
container c(7); // OK: deduces T=int using an implicitly-generated guide
std::vector&lt;double&gt; v = {/* ... */};
auto d = container(v.begin(), v.end()); // OK: deduces T=double
container e{5, 6}; // Error: there is no std::iterator_traits&lt;int&gt;::value_type
}}

The fictional constructors for the purpose of overload resolution (described above) are explicit if they correspond to an implicitly-generated deduction guide formed from an explicit constructor or to a user-defined deduction guide that is declared {{rlp|explicit}}. As always, such constructors are ignored in copy-initialization context:
{{source|1=
template&lt;class T&gt;
struct A
{
    explicit A(const T&amp;, ...) noexcept; // #1
    A(T&amp;&amp;, ...);                        // #2
};

int i;
A a1 = {i, i}; // error: cannot deduce from rvalue reference in #2,
               // and #1 is explicit, and not considered in copy-initialization.
A a2{i, i};    // OK, #1 deduces to A&lt;int&gt; and also initializes
A a3{0, i};    // OK, #2 deduces to A&lt;int&gt; and also initializes
A a4 = {0, i}; // OK, #2 deduces to A&lt;int&gt; and also initializes

template&lt;class T&gt;
A(const T&amp;, const T&amp;) -&gt; A&lt;T&amp;&gt;; // #3

template&lt;class T&gt;
explicit A(T&amp;&amp;, T&amp;&amp;)  -&gt; A&lt;T&gt;;  // #4

A a5 = {0, 1}; // error: #3 deduces to A&lt;int&amp;&gt;
               // and #1 &amp; #2 result in same parameter constructors.
A a6{0, 1};    // OK, #4 deduces to A&lt;int&gt; and #2 initializes
A a7 = {0, i}; // error: #3 deduces to A&lt;int&amp;&gt;
A a8{0, i};    // error: #3 deduces to A&lt;int&amp;&gt;
}}

Using a member typedef or alias template in a constructor or constructor template's parameter list does not, by itself, render the corresponding parameter of the implicitly generated guide a non-deduced context.

{{source|1=
template&lt;class T&gt;
struct B
{
    template&lt;class U&gt;
    using TA = T;
    
    template&lt;class U&gt;
    B(U, TA&lt;U&gt;); // #1
};

// Implicit deduction guide generated from #1 is the equivalent of
//     template&lt;class T, class U&gt;
//     B(U, T) -&gt; B&lt;T&gt;;
// rather than
//     template&lt;class T, class U&gt;
//     B(U, typename B&lt;T&gt;::template TA&lt;U&gt;) -&gt; B&lt;T&gt;;
// which would not have been deducible

B b{(int*)0, (char*)0}; // OK, deduces B&lt;char*&gt;
}}

{{rrev|since=c++20|1=
===Deduction for alias templates===
When a function-style cast or declaration of a variable uses the name of an alias template {{tt|A}} without an argument list as the type specifier, where {{tt|A}} is defined as an alias of {{tt|B&lt;ArgList&gt;}}, the scope of {{tt|B}} is non-dependent, and {{tt|B}} is either a class template or a similarly-defined alias template, deduction will proceed in the same way as for class templates, except that the guides are instead generated from the guides of {{tt|B}}, as follows:

* For each guide {{tt|f}} of {{tt|B}}, deduce the template arguments of the return type of {{tt|f}} from {{tt|B&lt;ArgList&gt;}} using {{rlp|template argument deduction}}, except that deduction does not fail if some arguments are not deduced. If deduction fails for another reason, proceed with an empty set of deduced template arguments.{{mark unreviewed dr|cwg|2664}}
* Substitute the result of above deduction into {{tt|f}}, if substitution fails, no guide is produced; otherwise, let {{tt|g}} denote the result of substitution, a guide {{tt|f'}} is formed, such that
:* The parameter types and the return type of {{tt|f'}} are the same as {{tt|g}}
:* If {{tt|f}} is a template, {{tt|f'}} is a function template whose template parameter list consists of all the template parameters of {{tt|A}} (including their default template arguments) that appear in the above deductions or (recursively) in their default template arguments, followed by the template parameters of {{tt|f}} that were not deduced (including their default template arguments); otherwise ({{tt|f}} is not a template), {{tt|f'}} is a function
:* The associated {{rlp|constraints}} of {{tt|f'}} are the conjunction of the associated constraints of {{tt|g}} and a constraint that is satisfied if and only if the arguments of {{tt|A}} are deducible from the result type

{{source|1=
template&lt;class T&gt;
class unique_ptr
{
    /* ... */
};

template&lt;class T&gt;
class unique_ptr&lt;T[]&gt;
{
    /* ... */
};

template&lt;class T&gt;
unique_ptr(T*) -&gt; unique_ptr&lt;T&gt;;   // #1

template&lt;class T&gt;
unique_ptr(T*) -&gt; unique_ptr&lt;T[]&gt;; // #2

template&lt;class T&gt;
concept NonArray = !std::is_array_v&lt;T&gt;;

template&lt;NonArray A&gt;
using unique_ptr_nonarray = unique_ptr&lt;A&gt;;

template&lt;class A&gt;
using unique_ptr_array = unique_ptr&lt;A[]&gt;;

// generated guide for unique_ptr_nonarray:

// from #1 (deduction of unique_ptr&lt;T&gt; from unique_ptr&lt;A&gt; yields T = A):
// template&lt;class A&gt;
//     requires(argument_of_unique_ptr_nonarray_is_deducible_from&lt;unique_ptr&lt;A&gt;&gt;)
// auto F(A*) -&gt; unique_ptr&lt;A&gt;;

// from #2 (deduction of unique_ptr&lt;T[]&gt; from unique_ptr&lt;A&gt; yields nothing):&lt;!--GCC (as of 18/Jan/2020) ICEs here --&gt;
// template&lt;class T&gt;
//     requires(argument_of_unique_ptr_nonarray_is_deducible_from&lt;unique_ptr&lt;T[]&gt;&gt;)
// auto F(T*) -&gt; unique_ptr&lt;T[]&gt;;

// where argument_of_unique_ptr_nonarray_is_deducible_from can be defined as

// template&lt;class&gt;
// class AA;

// template&lt;NonArray A&gt;
// class AA&lt;unique_ptr_nonarray&lt;A&gt;&gt; {};

// template&lt;class T&gt;
// concept argument_of_unique_ptr_nonarray_is_deducible_from =
//     requires { sizeof(AA&lt;T&gt;); };

// generated guide for unique_ptr_array:

// from #1 (deduction of unique_ptr&lt;T&gt; from unique_ptr&lt;A[]&gt; yields T = A[]):
// template&lt;class A&gt;
//     requires(argument_of_unique_ptr_array_is_deducible_from&lt;unique_ptr&lt;A[]&gt;&gt;)
// auto F(A(*)[]) -&gt; unique_ptr&lt;A[]&gt;;

// from #2 (deduction of unique_ptr&lt;T[]&gt; from unique_ptr&lt;A[]&gt; yields T = A):
// template&lt;class A&gt;
//     requires(argument_of_unique_ptr_array_is_deducible_from&lt;unique_ptr&lt;A[]&gt;&gt;)
// auto F(A*) -&gt; unique_ptr&lt;A[]&gt;;

// where argument_of_unique_ptr_array_is_deducible_from can be defined as

// template&lt;class&gt;
// class BB;

// template&lt;class A&gt;
// class BB&lt;unique_ptr_array&lt;A&gt;&gt; {};

// template&lt;class T&gt;
// concept argument_of_unique_ptr_array_is_deducible_from =
//     requires { sizeof(BB&lt;T&gt;); };

// Use:
unique_ptr_nonarray p(new int); // deduced to unique_ptr&lt;int&gt;
// deduction guide generated from #1 returns unique_ptr&lt;int&gt;
// deduction guide generated from #2 returns unique_ptr&lt;int[]&gt;, which is ignored because
//   argument_of_unique_ptr_nonarray_is_deducible_from&lt;unique_ptr&lt;int[]&gt;&gt; is unsatisfied

unique_ptr_array q(new int[42]); // deduced to unique_ptr&lt;int[]&gt;
// deduction guide generated from #1 fails (cannot deduce A in A(*)[] from new int[42])
// deduction guide generated from #2 returns unique_ptr&lt;int[]&gt;
}}
}}

===Notes===
Class template argument deduction is only performed if no template argument list is present. If a template argument list is specified, deduction does not take place.
{{source|1=
std::tuple t1(1, 2, 3);                // OK: deduction
std::tuple&lt;int, int, int&gt; t2(1, 2, 3); // OK: all arguments are provided

std::tuple&lt;&gt; t3(1, 2, 3);    // Error: no matching constructor in tuple&lt;&gt;.
                             //        No deduction performed.
std::tuple&lt;int&gt; t4(1, 2, 3); // Error
}}

{{rrev|until=c++20|1=
Class template argument deduction of aggregates typically requires user-defined deduction guides:
{{source|1=
template&lt;class A, class B&gt;
struct Agg
{
    A a;
    B b;
};
// implicitly-generated guides are formed from default, copy, and move constructors

template&lt;class A, class B&gt;
Agg(A a, B b) -&gt; Agg&lt;A, B&gt;;
// ^ This deduction guide can be implicitly generated in C++20

Agg agg{1, 2.0}; // deduced to Agg&lt;int, double&gt; from the user-defined guide

template&lt;class... T&gt;
array(T&amp;&amp;... t) -&gt; array&lt;std::common_type_t&lt;T...&gt;, sizeof...(T)&gt;;
auto a = array{1, 2, 5u}; // deduced to array&lt;unsigned, 3&gt; from the user-defined guide
}}
}}

User-defined deduction guides do not have to be templates:
{{source|1=
template&lt;class T&gt;
struct S
{
    S(T);
};
S(char const*) -&gt; S&lt;std::string&gt;;

S s{"hello"}; // deduced to S&lt;std::string&gt;
}}

Within the scope of a class template, the name of the template without a parameter list is an injected class name, and can be used as a type. In that case, class argument deduction does not happen and template parameters must be supplied explicitly:
{{source|
template&lt;class T&gt;
struct X
{
    X(T) {}
    
    template&lt;class Iter&gt;
    X(Iter b, Iter e) {}

    template&lt;class Iter&gt;
    auto foo(Iter b, Iter e)
    {
        return X(b, e); // no deduction: X is the current X&lt;T&gt;
    }

    template&lt;class Iter&gt;
    auto bar(Iter b, Iter e)
    {
        return X&lt;typename Iter::value_type&gt;(b, e); // must specify what we want
    }

    auto baz()
    {
        return ::X(0); // not the injected-class-name; deduced to be X&lt;int&gt;
    }
};
}}

In {{rlp|overload resolution#Best viable function|overload resolution}}, partial ordering takes precedence over whether a function template is generated from a user-defined deduction guide: if the function template generated from the constructor is more specialized than the one generated from the user-defined deduction guide, the one generated from the constructor is chosen. Because the copy deduction candidate is typically more specialized than a wrapping constructor, this rule means that copying is generally preferred over wrapping.

{{source|1=
template&lt;class T&gt;
struct A
{
    A(T, int*);     // #1
    A(A&lt;T&gt;&amp;, int*); // #2
    
    enum { value };
};

template&lt;class T, int N = T::value&gt;
A(T&amp;&amp;, int*) -&gt; A&lt;T&gt;; //#3

A a{1, 0}; // uses #1 to deduce A&lt;int&gt; and initializes with #1
A b{a, 0}; // uses #2 (more specialized than #3) to deduce A&lt;int&gt; and initializes with #2
}}

When earlier tiebreakers, including partial ordering, failed to distinguish between two candidate function templates, the following rules apply:
* A function template generated from a user-defined deduction guide is preferred over one implicitly generated from a constructor or constructor template.
* The copy deduction candidate is preferred over all other function templates implicitly generated from a constructor or constructor template.
* A function template implicitly generated from a non-template constructor is preferred over a function template implicitly generated from a constructor template.
{{source|1=
template&lt;class T&gt;
struct A
{
    using value_type = T;
    
    A(value_type); // #1
    A(const A&amp;);   // #2
    A(T, T, int);  // #3
    
    template&lt;class U&gt;
    A(int, T, U);  // #4
};                 // #5, the copy deduction candidate A(A);

A x(1, 2, 3); // uses #3, generated from a non-template constructor

template&lt;class T&gt;
A(T) -&gt; A&lt;T&gt;; // #6, less specialized than #5

A a(42); // uses #6 to deduce A&lt;int&gt; and #1 to initialize
A b = a; // uses #5 to deduce A&lt;int&gt; and #2 to initialize

template&lt;class T&gt;
A(A&lt;T&gt;) -&gt; A&lt;A&lt;T&gt;&gt;; // #7, as specialized as #5

A b2 = a; // uses #7 to deduce A&lt;A&lt;int&gt;&gt; and #1 to initialize
}}

An rvalue reference to a cv-unqualified template parameter is not a {{rlp|template argument deduction|forwarding reference}} if that parameter is a class template parameter:
{{source|1=
template&lt;class T&gt;
struct A
{
    template&lt;class U&gt;
    A(T&amp;&amp;, U&amp;&amp;, int*); // #1: T&amp;&amp; is not a forwarding reference
                       //     U&amp;&amp; is a forwarding reference
    
    A(T&amp;&amp;, int*);      // #2: T&amp;&amp; is not a forwarding reference
};

template&lt;class T&gt;
A(T&amp;&amp;, int*) -&gt; A&lt;T&gt;; // #3: T&amp;&amp; is a forwarding reference

int i, *ip;
A a{i, 0, ip};  // error, cannot deduce from #1
A a0{0, 0, ip}; // uses #1 to deduce A&lt;int&gt; and #1 to initialize
A a2{i, ip};    // uses #3 to deduce A&lt;int&amp;&gt; and #2 to initialize
}}

When initializing from a single argument of a type that is a specialization of the class template at issue, copying deduction is generally preferred over wrapping by default:

{{source|1=
std::tuple t1{1};  //std::tuple&lt;int&gt;
std::tuple t2{t1}; //std::tuple&lt;int&gt;, not std::tuple&lt;std::tuple&lt;int&gt;&gt;

std::vector v1{1, 2};   // std::vector&lt;int&gt;
std::vector v2{v1};     // std::vector&lt;int&gt;, not std::vector&lt;std::vector&lt;int&gt;&gt; (P0702R1)
std::vector v3{v1, v2}; // std::vector&lt;std::vector&lt;int&gt;&gt;
}}

Outside the special case for copying vs. wrapping, the strong preference for initializer-list constructors in list-initialization remains intact.

{{source|1=
std::vector v1{1, 2}; // std::vector&lt;int&gt;

std::vector v2(v1.begin(), v1.end()); // std::vector&lt;int&gt;
std::vector v3{v1.begin(), v1.end()}; // std::vector&lt;std::vector&lt;int&gt;::iterator&gt;
}}

Before class template argument deduction was introduced, a common approach to avoiding explicitly specifying arguments is to use a function template:

{{source|1=
std::tuple p1{1, 1.0};             //std::tuple&lt;int, double&gt;, using deduction
auto p2 = std::make_tuple(1, 1.0); //std::tuple&lt;int, double&gt;, pre-C++17
}}
{{ftm begin|std=1|comment=1|core=1}}
{{ftm|std=C++17|value=201703L|__cpp_deduction_guides|Template argument deduction for class templates|rowspan="2"}}
{{ftm|std=C++20|value=201907L|-|CTAD for aggregates and aliases}}
{{ftm end}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=cwg|dr=2376|std=C++17|before=CTAD would be performed even if the type of the variable declared is&lt;br&gt;different from the class template whose arguments will be deduced|after=do not perform&lt;br&gt;CTAD in this case}}
{{dr list item|wg=cwg|dr=2628|std=C++20|before=implicit deduction guides did not propagate constraints|after=propogate constraints}}
{{dr list item|wg=cwg|dr=2697|std=C++20|before=it was unclear whether the abbreviated function template&lt;br&gt;syntax is allowed in user-defined deduction guides|after=prohibited}}
{{dr list item|wg=cwg|dr=2707|std=C++20|before=deduction guides could not have a trailing {{c/core|requires}} clause|after=they can}}
{{dr list item|wg=cwg|dr=2714|std=C++17|before=implicit deduction guides did not consider&lt;br&gt;the default aguments of constructors|after=consider them}}
{{dr list item|wg=cwg|dr=2913|std=C++20|before=the resolution of {{cwg|2707}} made the deduction guide&lt;br&gt;syntax inconsistent with the function declaration syntax|after=adjusted the syntax}}
{{dr list item|paper=P0702R1|std=C++17|before=an initializer-list constructor can pre-empt the&lt;br&gt;copy deduction candidate, resulting in wrapping|after=initializer-list phase&lt;br&gt;skipped when copying}}
{{dr list end}}

{{langlinks|de|es|ja|ru|zh}}
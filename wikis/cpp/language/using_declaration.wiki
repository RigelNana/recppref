{{title|Using-declaration}}
{{cpp/language/classes/navbar}}

Introduces a name that is defined elsewhere into the declarative region where this using-declaration appears. See {{rev inl|since=c++20|{{lc|{{rlp|enum#Using-enum-declaration|using enum}}}} and }}{{lc|{{rlp|namespace#Using-directives|using namespace}}}} for other related declarations.

{{sdsc begin}}
{{sdsc|{{ttb|using}} {{ttb|typename}}{{mark optional}} {{spar|nested-name-specifier}} {{spar|unqualified-id}} {{ttb|;}}|notes={{mark until c++17}}
}}
{{sdsc|{{ttb|using}} {{spar|declarator-list}} {{ttb|;}}|notes={{mark since c++17}}
}}
{{sdsc end}}

{{par begin}}
{{par|{{ttb|typename}}|the keyword {{c/core|typename}} may be used as necessary to resolve {{rlp|dependent name}}s, when the using-declaration introduces a member type from a base class into a class template }}
{{par|{{spar|nested-name-specifier}}|a sequence of names and scope resolution operators {{tt|::}}, ending with a scope resolution operator. A single {{tt|::}} refers to the global namespace.}}
{{par|{{spar|unqualified-id}}|an {{rlp|identifiers|id-expression}} }}
{{par|{{spar|declarator-list}}|comma-separated list of one or more declarators of the {{ttb|typename}}{{mark optional}} {{spar|nested-name-specifier}} {{spar|unqualified-id}}. Some or all of the declarators may be followed by an ellipsis {{c|...}} to indicate {{rlp|parameter pack|pack expansion}}}}
{{par end}}

===Explanation===
Using-declarations can be used to introduce namespace members into other namespaces and block scopes, or to introduce base class members into derived class definitions{{rev inl|since=c++20|, or to introduce {{rlp|enum|enumerators}} into namespaces, block, and class scopes}}.

{{rrev|since=c++17|
A using-declaration with more than one using-declarator is equivalent to a corresponding sequence of using-declarations with one using-declarator.
}}

====In namespace and block scope====
{{rlp|namespace#Using-declarations|Using-declarations}} introduce a member of another namespace into the current namespace or block scope.
{{source|1=
#include &lt;iostream&gt;
#include &lt;string&gt;

using std::string;

int main()
{
    string str = "Example";
    using std::cout;
    cout &lt;&lt; str;
}
}}
See {{rlp|namespace}} for details.

====In class definition====
Using-declaration introduces a member of a base class into the derived class definition, such as to expose a protected member of base as public member of derived. In this case, {{spar|nested-name-specifier}} must name a base class of the one being defined. If the name is the name of an overloaded member function of the base class, all base class member functions with that name are introduced. If the derived class already has a member with the same name, parameter list, and qualifications, the derived class member hides or overrides (doesn't conflict with) the member that is introduced from the base class.
{{example|
code=
#include &lt;iostream&gt;
 
struct B
{
    virtual void f(int) { std::cout &lt;&lt; "B::f\n"; }
    void g(char)        { std::cout &lt;&lt; "B::g\n"; }
    void h(int)         { std::cout &lt;&lt; "B::h\n"; }
protected:
    int m; // B::m is protected
    typedef int value_type;
};
 
struct D : B
{
    using B::m;          // D::m is public
    using B::value_type; // D::value_type is public

    using B::f;
    void f(int) override { std::cout &lt;&lt; "D::f\n"; } // D::f(int) overrides B::f(int)

    using B::g;
    void g(int) { std::cout &lt;&lt; "D::g\n"; } // both g(int) and g(char) are visible

    using B::h;
    void h(int) { std::cout &lt;&lt; "D::h\n"; } // D::h(int) hides B::h(int)
};
 
int main()
{
    D d;
    B&amp; b = d;
 
//  b.m = 2;  // Error: B::m is protected
    d.m = 1;  // protected B::m is accessible as public D::m
    
    b.f(1);   // calls derived f()
    d.f(1);   // calls derived f()
    std::cout &lt;&lt; "----------\n";
    
    d.g(1);   // calls derived g(int)
    d.g('a'); // calls base g(char), exposed via using B::g;
    std::cout &lt;&lt; "----------\n";
    
    b.h(1);   // calls base h()
    d.h(1);   // calls derived h()
}
|output=
D::f
D::f
----------
D::g
B::g
----------
B::h
D::h
}}

{{rrev|since=c++11|1=
====Inheriting constructors====
If the ''using-declaration'' refers to a constructor of a direct base of the class being defined (e.g. {{c|using Base::Base;}}), all constructors of that base (ignoring member access) are made visible to overload resolution when initializing the derived class. 

If overload resolution selects an inherited constructor, it is accessible if it would be accessible when used to construct an object of the corresponding base class: the accessibility of the using-declaration that introduced it is ignored.

If overload resolution selects one of the inherited constructors when initializing an object of such derived class, then the {{tt|Base}} subobject from which the constructor was inherited is initialized using the inherited constructor, and all other bases and members of {{tt|Derived}} are initialized as if by the defaulted default constructor (default member initializers are used if provided, otherwise default initialization takes place). The entire initialization is treated as a single function call: initialization of the parameters of the inherited constructor is {{rlp|eval order|sequenced before}} initialization of any base or member of the derived object.

{{source|1=
struct B1 { B1(int, ...) {} };
struct B2 { B2(double)   {} };

int get();

struct D1 : B1
{
    using B1::B1; // inherits B1(int, ...)
    int x;
    int y = get();
};

void test()
{
    D1 d(2, 3, 4); // OK: B1 is initialized by calling B1(2, 3, 4),
                   // then d.x is default-initialized (no initialization is performed),
                   // then d.y is initialized by calling get()
    
    D1 e;          // Error: D1 has no default constructor
}

struct D2 : B2
{
    using B2::B2; // inherits B2(double)
    B1 b;
};

D2 f(1.0); // error: B1 has no default constructor
}}

{{source|1=
struct W { W(int); };

struct X : virtual W
{
    using W::W; // inherits W(int)
    X() = delete;
};

struct Y : X
{
    using X::X;
};

struct Z : Y, virtual W
{
    using Y::Y;
};

Z z(0); // OK: initialization of Y does not invoke default constructor of X
}}

If the {{tt|Base}} base class subobject is not to be initialized as part of the {{tt|Derived}} object (i.e., {{tt|Base}} is a {{rlp|derived class#Virtual base classes|virtual base class}} of {{tt|Derived}}, and the {{tt|Derived}} object is not the {{rlp|object#Subobjects|most derived object}}), the invocation of the inherited constructor, including the evaluation of any arguments, is omitted:
{{source|1=
struct V
{
    V() = default;
    V(int);
};

struct Q { Q(); };

struct A : virtual V, Q
{
    using V::V;
    A() = delete;
};

int bar() { return 42; }

struct B : A
{
    B() : A(bar()) {} // OK
};

struct C : B {};

void foo()
{
    C c; // “bar” is not invoked, because the V subobject
         // is not initialized as part of B
         // (the V subobject is initialized as part of C,
         //  because “c” is the most derived object)
} 
}}

If the constructor was inherited from multiple base class subobjects of type {{tt|Base}}, the program is ill-formed, similar to multiply-inherited non-static member functions:
{{source|1=
struct A { A(int); };
struct B : A { using A::A; };
struct C1 : B { using B::B; };
struct C2 : B { using B::B; };

struct D1 : C1, C2
{
    using C1::C1;
    using C2::C2;
};
D1 d1(0); // ill-formed: constructor inherited from different B base subobjects

struct V1 : virtual B { using B::B; };
struct V2 : virtual B { using B::B; };

struct D2 : V1, V2
{
    using V1::V1;
    using V2::V2;
};
D2 d2(0); // OK: there is only one B subobject.
          // This initializes the virtual B base class,
          //   which initializes the A base class
          // then initializes the V1 and V2 base classes
          //   as if by a defaulted default constructor
}}

As with using-declarations for any other non-static member functions, if an inherited constructor matches the signature of one of the constructors of {{tt|Derived}}, it is hidden from lookup by the version found in {{tt|Derived}}. If one of the inherited constructors of {{tt|Base}} happens to have the signature that matches a copy/move constructor of the {{tt|Derived}}, it does not prevent implicit generation of {{tt|Derived}} copy/move constructor (which then hides the inherited version, similar to {{tt|1=using operator=}}).

{{source|1=
struct B1 { B1(int); };
struct B2 { B2(int); };

struct D2 : B1, B2
{
    using B1::B1;
    using B2::B2;
    
    D2(int); // OK: D2::D2(int) hides both B1::B1(int) and B2::B2(int)
};
D2 d2(0);    // calls D2::D2(int)
}}

Within a {{rlp|templates|templated class}}, if a using-declaration refers to a {{rlp|dependent name}}, it is considered to name a constructor if the {{spar|nested-name-specifier}} has a terminal name that is the same as the {{spar|unqualified-id}}.{{mark unreviewed dr|CWG|2070}}&lt;!-- P1787 --&gt;
{{source|1=
template&lt;class T&gt;
struct A : T
{
    using T::T; // OK, inherits constructors of T
};

template&lt;class T, class U&gt;
struct B : T, A&lt;U&gt;
{
    using A&lt;U&gt;::A; // OK, inherits constructors of A&lt;U&gt;
    using T::A;    // does not inherit constructor of T
                   // even though T may be a specialization of A&lt;&gt;
};
}}
}}


{{rrev|since=c++20|
====Introducing scoped enumerators====
In addition to members of another namespace and members of base classes, using-declaration can also introduce enumerators of {{rlp|enum|enumerations}} into namespace, block, and class scopes.

A using-declaration can also be used with unscoped enumerators.

{{source|1=
enum class button { up, down };

struct S
{
    using button::up;
    button b = up; // OK
};

using button::down;
constexpr button non_up = down; // OK

constexpr auto get_button(bool is_up)
{
    using button::up, button::down;
    return is_up ? up : down; // OK
}

enum unscoped { val };
using unscoped::val; // OK, though needless
}}
}}

===Notes===
Only the name explicitly mentioned in the using-declaration is transferred into the declarative scope: in particular, enumerators are not transferred when the enumeration type name is using-declared.

A using-declaration cannot refer to a namespace{{rev inl|until=c++20|, to a scoped enumerator}}, to a destructor of a base class or to a specialization of a member template for a user-defined conversion function.

A using-declaration cannot name a member template specialization ({{rlp|templates#template-id|template-id}} is not permitted by the grammar):
{{source|1=
struct B
{
    template&lt;class T&gt;
    void f();
};

struct D : B
{
    using B::f;      // OK: names a template
//  using B::f&lt;int&gt;; // Error: names a template specialization
    
    void g() { f&lt;int&gt;(); }
};
}}
A using-declaration also can't be used to introduce the name of a dependent member template as a ''template-name'' (the {{tt|template}} disambiguator for {{rlp|dependent name}}s is not permitted).
{{source|1=
template&lt;class X&gt;
struct B
{
    template&lt;class T&gt;
    void f(T);
};

template&lt;class Y&gt;
struct D : B&lt;Y&gt;
{
//  using B&lt;Y&gt;::template f; // Error: disambiguator not allowed
    using B&lt;Y&gt;::f;          // compiles, but f is not a template-name
    
    void g()
    {
//      f&lt;int&gt;(0);          // Error: f is not known to be a template name,
                            // so &lt; does not start a template argument list
        f(0);               // OK
    }   
};
}}

If a using-declaration brings the base class assignment operator into derived class, whose signature happens to match the derived class's copy-assignment or move-assignment operator, that operator is hidden by the implicitly-declared copy/move assignment operator of the derived class. {{rev inl|since=c++11|Same applies to a using-declaration that inherits a base class constructor that happens to match the derived class copy/move constructor}}.

{{rrev|since=c++11|1=
The semantics of inheriting constructors were retroactively changed by a [[#Defect reports|defect report against C++11]]. Previously, an inheriting constructor declaration caused a set of synthesized constructor declarations to be injected into the derived class, which caused redundant argument copies/moves, had problematic interactions with some forms of SFINAE, and in some cases can be unimplementable on major ABIs. Older compilers may still implement the previous semantics.

{{cot|Old inheriting constructor semantics}}
If the ''using-declaration'' refers to a constructor of a direct base of the class being defined (e.g. {{c|using Base::Base;}}), constructors of that base class are inherited, according to the following rules:
@1@ A set of ''candidate inheriting constructors'' is composed of 
:@a@ All non-template constructors of the base class {{rev inl|since=c++14|(after omitting ellipsis parameters, if any)}}
:@b@ For each constructor with default arguments or the ellipsis parameter, all constructor signatures that are formed by dropping the ellipsis and omitting default arguments from the ends of argument lists one by one
:@c@ All constructor templates of the base class {{rev inl|since=c++14|(after omitting ellipsis parameters, if any)}}
:@d@ For each constructor template with default arguments or the ellipsis, all constructor signatures that are formed by dropping the ellipsis and omitting default arguments from the ends of argument lists one by one
@2@ All candidate inherited constructors that aren't the default constructor or the copy/move constructor and whose signatures do not match user-defined constructors in the derived class, are implicitly declared in the derived class. The default parameters are not inherited:
{{source|1=
struct B1
{
    B1(int);
};

struct D1 : B1
{
    using B1::B1;
    
    // The set of candidate inherited constructors is 
    // 1. B1(const B1&amp;)
    // 2. B1(B1&amp;&amp;)
    // 3. B1(int)
    
    // D1 has the following constructors:
    // 1. D1() = delete
    // 2. D1(const D1&amp;) 
    // 3. D1(D1&amp;&amp;)
    // 4. D1(int) &lt;- inherited
};

struct B2
{
    B2(int = 13, int = 42);
};

struct D2 : B2
{
    using B2::B2;
    
    // The set of candidate inherited constructors is
    // 1. B2(const B2&amp;)
    // 2. B2(B2&amp;&amp;)
    // 3. B2(int = 13, int = 42)
    // 4. B2(int = 13)
    // 5. B2()
    
    // D2 has the following constructors:
    // 1. D2()
    // 2. D2(const D2&amp;)
    // 3. D2(D2&amp;&amp;)
    // 4. D2(int, int) &lt;- inherited
    // 5. D2(int) &lt;- inherited
};
}}

The inherited constructors are equivalent to user-defined constructors with an empty body and with a {{rlp|initializer list|member initializer list}} consisting of a single {{spar|nested-name-specifier}}, which forwards all of its arguments to the base class constructor.

It has the same {{rlp|access}} as the corresponding base constructor. It is {{tt|constexpr}} if the user-defined constructor would have satisfied {{tt|constexpr}} constructor requirements. It is deleted if the corresponding base constructor is deleted or if a defaulted default constructor would be deleted (except that the construction of the base whose constructor is being inherited doesn't count). An inheriting constructor cannot be explicitly instantiated or explicitly specialized.

If two using-declarations inherit the constructor with the same signature (from two direct base classes), the program is ill-formed.

An inheriting constructor template should not be {{rlp|function template#Explicit instantiation|explicitly instantiated}} or {{rlp|template specialization|explicitly specialized}}.
{{cob}}
}}
{{anchor|pack_expansion}}
{{rrev|since=c++17|
{{rlp|parameter pack|Pack expansions}} in using-declarations make it possible to form a class that exposes overloaded members of variadic bases without recursion:
{{source|1=

template&lt;typename... Ts&gt;
struct Overloader : Ts...
{
    using Ts::operator()...; // exposes operator() from every base
};

template&lt;typename... T&gt;
Overloader(T...) -&gt; Overloader&lt;T...&gt;; // C++17 deduction guide, not needed in C++20

int main()
{
    auto o = Overloader{ [] (auto const&amp; a) {std::cout &lt;&lt; a;},
                         [] (float f) {std::cout &lt;&lt; std::setprecision(3) &lt;&lt; f;} };
}
}}
}}
{{ftm begin|core=1|sort=1}}
{{ftm|value=200802L|std=C++11|__cpp_inheriting_constructors|rowspan="2"|[[#Inheriting constructors|Inheriting constructors]]}}
{{ftm|value=201511L|std=C++17|dr=11|-|Rewording inheriting constructors}}
{{ftm|value=201611L|std=C++17|__cpp_variadic_using|{{rlp|parameter_pack|Pack expansions}} in {{tt|using}}-declarations}}
{{ftm end}}

===Keywords===
{{ltt|cpp/keyword/using}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=cwg|dr=258|std=C++98|before=a non-const member function of a derived class can&lt;br&gt;override and/or hide a const member function of its base|after=overriding and hiding also require&lt;br&gt;cv-qualifications to be the same}}
{{dr list item|wg=cwg|dr=1738|std=C++11|before=it was not clear whether it is permitted to&lt;br&gt;explicitly instantiate or explicitly specialize&lt;br&gt;specializations of inheriting constructor templates|after=prohibited}}
{{dr list item|wg=cwg|dr=2504|std=C++11|before=the behavior of inheriting constructors&lt;br&gt;from virtual base classes was unclear|after=made clear}}
{{dr list item|paper=P0136R1|std=C++11|before=inheriting constructor declaration injects&lt;br&gt;additional constructors in the derived class|after=causes base class constructors&lt;br&gt;to be found by name lookup}}
{{dr list end}}

# References
===References===
{{ref std c++23}}
{{ref std|section=9.9|title=The {{tt|using}} declaration|id=namespace.udecl}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=9.9|title=The {{tt|using}} declaration|id=namespace.udecl}}
{{ref std end}}
{{ref std c++17}}
{{ref std|section=10.3.3|title=The {{tt|using}} declaration|id=namespace.udecl}}
{{ref std end}}
{{ref std c++14}}
{{ref std|section=7.3.3|title=The {{tt|using}} declaration|id=namespace.udecl}}
{{ref std end}}
{{ref std c++11}}
{{ref std|section=7.3.3|title=The {{tt|using}} declaration|id=namespace.udecl}}
{{ref std end}}
{{ref std c++03}}
{{ref std|section=7.3.3|title=The {{tt|using}} declaration|id=namespace.udecl}}
{{ref std end}}
{{ref std c++98}}
{{ref std|section=7.3.3|title=The {{tt|using}} declaration|id=namespace.udecl}}
{{ref std end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
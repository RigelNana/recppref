{{title|{{tt|nullptr}}, the pointer literal {{mark since c++11}}}}
{{cpp/language/expressions/navbar}}

===Syntax===
{{sdsc begin}}
{{sdsc|{{ttb|nullptr}}}}
{{sdsc end}}

===Explanation===
The keyword {{tt|nullptr}} denotes the pointer literal. It is a {{rlp|value category|prvalue}} of type {{lc|std::nullptr_t}}. There exist {{rlp|implicit conversion}}s from {{tt|nullptr}} to null pointer value of any pointer type and any pointer to member type. Similar conversions exist for any null pointer constant, which includes values of type {{lc|std::nullptr_t}} as well as the macro {{lc|NULL}}.

===Keywords===
{{ltt|cpp/keyword/nullptr}}

===Example===
{{example
|Demonstrates that {{tt|nullptr}} retains the meaning of null pointer constant even if it is no longer a literal.
|code=
#include &lt;cstddef&gt;
#include &lt;iostream&gt;

template&lt;class T&gt;
constexpr T clone(const T&amp; t)
{
    return t;
}

void g(int*)
{
    std::cout &lt;&lt; "Function g called\n";
}

int main()
{
    g(nullptr);        // Fine
    g(NULL);           // Fine
    g(0);              // Fine

    g(clone(nullptr)); // Fine
//  g(clone(NULL));    // ERROR: non-literal zero cannot be a null pointer constant
//  g(clone(0));       // ERROR: non-literal zero cannot be a null pointer constant
}
|output=
Function g called
Function g called
Function g called
Function g called
}}

===References===
{{ref std c++23}}
{{ref std|section=7.3.12|title=Pointer conversions|id=conv.ptr}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=7.3.12|title=Pointer conversions|id=conv.ptr}}
{{ref std end}}
{{ref std c++17}}
{{ref std|section=7.11|title=Pointer conversions|id=conv.ptr}}
{{ref std end}}
{{ref std c++14}}
{{ref std|section=4.10|title=Pointer conversions|id=conv.ptr}}
{{ref std end}}
{{ref std c++11}}
{{ref std|section=4.10|title=Pointer conversions|id=conv.ptr}}
{{ref std end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc NULL}}
{{dsc inc|cpp/types/dsc nullptr_t}}
{{dsc see c|c/language/nullptr}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
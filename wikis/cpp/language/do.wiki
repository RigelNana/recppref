{{title|{{tt|do}}-{{tt|while}} loop}}
{{cpp/language/statements/navbar}}
Conditionally executes a statement repeatedly (at least once).

===Syntax===
{{sdsc begin}}
{{sdsc|{{spar optional|attr}} {{ttb|do}} {{spar|statement}} {{ttb|while (}} {{spar|expression}} {{ttb|);}}}}
{{sdsc end}}

{{par begin}}
{{par|{{spar|attr}}|{{mark since c++11}} any number of {{rlp|attributes}}}}
{{par|{{spar|expression}}|an {{rlp|expressions|expression}}}}
{{par|{{spar|statement}}|a {{rlp|statements|statement}} (typically a compound statement)}}
{{par end}}

===Explanation===
When control reaches a {{c/core|do}} statement, its {{spar|statement}} will be executed unconditionally.

Every time {{spar|statement}} finishes its execution, {{spar|expression}} will be evaluated and contextually converted to {{c/core|bool}}. If the result is {{c|true}}, {{spar|statement}} will be executed again.

If the loop needs to be terminated within {{spar|statement}}, a {{rlp|break|{{c/core|break}} statement}} can be used as terminating statement.

If the current iteration needs to be terminated within {{spar|statement}}, a {{rlp|continue|{{c/core|continue}} statement}} can be used as shortcut.

===Notes===
{{cpp/language/process guarantee note}}

===Keywords===
{{ltt|cpp/keyword/do}},
{{ltt|cpp/keyword/while}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    int j = 2;
    do // compound statement is the loop body
    {
        j += 2;
        std::cout &lt;&lt; j &lt;&lt; ' ';
    }
    while (j &lt; 9);
    std::cout &lt;&lt; '\n';
    
    // common situation where do-while loop is used
    std::string s = "aba";
    std::sort(s.begin(), s.end());
    
    do std::cout &lt;&lt; s &lt;&lt; '\n'; // expression statement is the loop body
    while (std::next_permutation(s.begin(), s.end()));
}
|output=
4 6 8 10
aab
aba
baa
}}

===See also===
{{dsc begin}}
{{dsc see c|c/language/do|do-while}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
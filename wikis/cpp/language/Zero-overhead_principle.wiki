{{title|Zero-overhead principle}}
{{cpp/language/navbar}}

The ''zero-overhead principle'' is a C++ design principle that states:

# You don't pay for what you don't use.
# What you do use is just as efficient as what you could reasonably write by hand.

In general, this means that no feature should be added to C++ that would impose any overhead, whether in time or space, greater than a programmer would introduce without using the feature.

The only two features in the language that do not follow the zero-overhead principle are {{rlp|typeid|runtime type identification}} and {{rlp|exceptions}}, and are why most compilers include a switch to turn them off.

===External links===
{{elink begin}}
{{elink|[https://www.stroustrup.com/ETAPS-corrected-draft.pdf Foundations of C++] - Bjarne Stroustrup}}
{{elink|{{stddoc|p1947|C++ exceptions and alternatives}} - Bjarne Stroustrup}}
{{elink|[https://youtu.be/ARYP83yNAWk De-fragmenting C++] - Making {{rlp|exceptions|Exceptions}} and {{rlp|typeid|RTTI}} More Affordable and Usable - Herb Sutter}}
{{elink|1=[https://youtu.be/uTxRF5ag27A?t=2478 Bjarne Stroustrup: C++ on Artificial Intelligence (AI) Podcast]}}
{{elink end}}

{{langlinks|es|ja|ru|zh}}
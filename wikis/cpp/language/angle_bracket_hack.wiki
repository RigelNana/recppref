{{title|Angle Bracket hack}}

The angle bracket hack resolves a lexing ambiguity when a templated name ending in "&gt;" is used as the template parameter of another class template or function template.  Prior to C++11, when two consecutive angle brackets appeared, many lexers would interpret these as the right shift operator instead according to the language grammar. As a workaround, a space would need to be inserted between the two angle brackets so a lexer could interpret them as individual angle bracket tokens.

{{example
|code=
template &lt;typename T&gt;
struct A
{
    A(){}
};

template &lt;typename T&gt;
struct B
{
    B(){}
};


int main()
{
	A&lt;B&lt;int&gt; &gt; c; // space between &gt;'s needed on many compilers prior to C++11
	A&lt;B&lt;int&gt;&gt; d;  // ok on C++11 and above
}
}}
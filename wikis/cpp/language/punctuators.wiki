{{title|Punctuation}}
{{cpp/language/basics/navbar}}

These are the punctuation symbols in C++. The meaning of each symbol is detailed in the linked pages.

===Preprocessing operators===
Preprocessing operators are recognized by {{lt|cpp/preprocessor}}s.

===={{c|#}} (including {{c|%:}})====
* Introduce a [[cpp/preprocessor|preprocessing directive]].
* The [[cpp/preprocessor/replace## and ## operators|preprocessing operator for stringification]].

===={{c|##}}(including {{c|%:%:}})====
* The [[cpp/preprocessor/replace## and ## operators|preprocessing operator for token pasting]].

===Single-character operators and punctuators===
===={{c|{}} and {{c|}&lt;!----&gt;}} (including {{c|&lt;%}} and {{c|%&gt;}})====
* In a {{rlp|class}} definition, delimit the {{rlpsd|class#Member specification}}.
* In an {{rlp|enum|enumeration}} definition, delimit the enumerator list.
* Delimit a {{rlp|statements#Compound statements|compound statement}}. The compound statement may be part of
:* a {{rlpsd|function#Function definition}}
:* a {{rlp|try|{{c/core|try}} block}}
{{rrev|since=c++11|
:* a {{rlp|lambda|lambda expression}}
}}
* Part of the {{rev inl|until=c++11|{{rlp|aggregate initialization}}}}{{rev inl|since=c++11|{{rlp|list initialization|list-initialization}}}} syntax of an {{rlp|initialization|initializer}}.
* In a {{rlp|namespace|namespace definition}}, delimit the namespace body.
* In a {{rlp|language linkage|language linkage specification}}, delimit the declarations.
{{rrev|since=c++20|
* In a {{rlp|constraints#Requires expressions|{{c/core|requires}} expression}}, delimit the requirements.
* In a {{rlp|constraints#Compound Requirements|compound requirement}}, delimit the expression.
* In an {{rlp|modules|export declaration}}, delimit the declarations.
}}

===={{c|[}} and {{c|]}} (including {{c|&lt;:}} and {{c|:&gt;}})====
* {{rlp|operator member access#Built-in subscript operator|Subscript operator}}; part of {{c|operator[]}} in {{rlp|operators#Array subscript operator|operator overloading}}.
* Part of {{rlp|declarations#Declarators|array declarator}} in a {{rlp|declarations|declaration}} or a {{rlp|type#Type naming|type-id}} (e.g. in a {{rlp|new|{{c/core|new}} expression}}).
* Part of {{c|new[]}} operator in [[cpp/memory/new/operator new|operator overloading (allocation function)]].
* Part of {{c|delete[]}} operator in {{rlp|delete|delete expression}} and [[cpp/memory/new/operator delete|operator overloading (deallocation function)]].
{{rev begin}}
{{rev|since=c++11|
* In a {{rlp|lambda|lambda expression}}, delimit the {{rlp|lambda#Lambda capture|captures}}.
* In an {{rlp|attributes|attribute specifier}}, delimit the attributes.
}}
{{rev|since=c++17|
* In a {{rlp|structured binding|structured binding declaration}}, delimit the identifier list.
}}
{{rev|since=c++26|
* In a {{rlp|pack indexing}}, delimit {{rlp|constant expression|converted constant expression}} representing an index.
}}
{{rev end}}

===={{c|(}} and {{c|)}}====
* In an expression, {{rlp|expressions#Primary expressions|indicate grouping}}.
* {{rlp|operator other#Built-in function call operator|Function call operator}}; part of {{c|operator()}} in {{rlp|operators#Function call operator|operator overloading}}.
* In a {{rlp|explicit cast|function-style type cast}}, delimit the expression/initializers.
* In a {{rlpt|static_cast}}, {{rlpt|const_cast}}, {{rlpt|reinterpret_cast}}, or {{rlpt|dynamic_cast}}, delimit the expression.
* Delimit the operand of the following operators:
:* {{rlpt|typeid}}
:* {{rlpt|sizeof}}
{{rrev|since=c++11|
:* {{rlpt|sizeof...}}
:* {{rlpt|alignof}}
:* {{rlpt|noexcept}}
}}
* In a {{rlp|new|placement {{c/core|new}} expression}}, delimit the placement arguments.
* In a {{rlp|new|{{c/core|new}} expression}}, optionally delimit the type-id.
* In a {{rlp|new|{{c/core|new}} expression}}, delimit the initializers.
* In a {{rlp|explicit cast|C-style cast}}, delimit the type-id.
* In a {{rlp|declarations|declaration}} or a {{rlp|type#Type naming|type-id}}, indicate grouping.
* Delimit the parameter list in
:* a {{rlp|function|function declarator}} (in a {{rlp|declarations|declaration}} or a {{rlp|type#Type naming|type-id}})
{{rev begin}}
{{rev|since=c++11|
:* a {{rlp|lambda|lambda expression}}
}}
{{rev|since=c++17|
:* a {{rlp|class template argument deduction|user-defined deduction guide}}
}}
{{rev|since=c++20|
:* a {{rlp|constraints#Requires expressions|{{c/core|requires}} expression}}
}}
{{rev end}}
* Part of the {{rlp|direct initialization|direct-initialization}} syntax of an {{rlp|initialization|initializer}}.
* In an {{rlp|asm|asm declaration}}, delimit the string literal.
* In a {{rlp|initializer list|member initializer list}}, delimit the initializers to a base or member.
* Delimit the controlling clause of a selection statement or iteration statement, including:
:* {{rlpt|if}}{{rev inl|since=c++23| (except {{rlpsd|if#Consteval if}})}}
:* {{rlpt|switch}}
:* {{rlpt|while}}
:* {{rlpt|do|do-while}}
:* {{rlpt|for}}
{{rrev|since=c++11|
:* {{rlp|range-for|range-based {{tt|for}}}}
}}
* In a {{rlp|catch|handler}}, delimit the parameter declaration.
* In a [[cpp/preprocessor/replace#Function-like macros|function-like macro definition]], delimit the macro parameters.
* In a [[cpp/preprocessor/replace#Function-like macros|function-like macro invocation]], delimit the macro arguments or prevent commas from being interpreted as argument separators.
* Part of a {{tt|defined}}{{rev inl|since=c++17|, {{tt|__has_include}}}}{{rev inl|since=c++20|, {{tt|__has_cpp_attribute}}}} preprocessing operator.
{{rev begin}}
{{rev|since=c++11|
* In a {{rlpt|static_assert}} declaration, delimit the operands.
* Delimit the operand of the following specifiers:
:* {{rlpt|decltype}}
:* {{rlpt|noexcept spec|noexcept}}
:* {{rlpt|alignas}}
{{rrev|since=c++20|
:* {{rlpt|explicit}}
}}
* In an {{rlp|attributes|attribute}}, delimit the attribute arguments.
}}
{{rev|since=c++14|
* Part of {{rlpt|decltype|decltype(auto)}} specifier.
}}
{{rev|since=c++17|
* Delimit a {{rlp|fold|fold expression}}.
}}
{{rev|since=c++20|
* Part of {{ltt|cpp/preprocessor/replace|__VA_OPT__}} replacement in a variadic macro definition.
}}
{{rev end}}

===={{c|;}}====
* Indicate the end of
:* a {{rlp|statements|statement}}
:* a {{rlp|declarations|declaration}} or {{rlp|class#Member specification|member declaration}}
{{rrev|since=c++20|
:* a {{rlp|modules|module declaration}}, import declaration, global module fragment introducer, or private module fragment introducer
:* a {{rlp|constraints#Requires expressions|requirement}}
}}
* Separate the {{spar|condition}} and {{spar|statement}} of a {{rlp|for|{{c/core|for}} statement}}.

===={{c|:}}====
* Part of {{rlpsd|operator other#Conditional operator}}.
* Part of {{rlp|statements#Labels|label declaration}}.
* In the {{spar|base-clause}} of a {{rlp|class|class definition}}, introduce the {{rlp|derived class|base class}}.
* Part of {{rlp|access|access specifier}} in member specification.
* In a {{rlp|bit field|bit-field member declaration}}, introduce the width.
* In a {{rlp|constructor}} definition, introduce the member initializer list.
{{rev begin}}
{{rev|since=c++11|
* In a {{rlp|range-for|range-based {{c/core|for}}}} statement, separate the {{spar|item-declaration}} and the {{spar|range-initializer}}.
* In the {{spar|enum-base}} of an {{rlp|enum|enumeration declaration}}, introduce the underlying type.
}}
{{rev|since=c++17|
* In an {{rlp|attributes|attribute specifier}}, separate the {{spar|attribute-namespace}} and the {{spar|attribute-list}}.
}}
{{rev|since=c++20|
* In a {{rlp|modules|module declaration}} or import declaration of module partition, introduce the module partition name.
* Part of a {{rlpsd|modules#Private module fragment}} introducer ({{c|module :private;}}).
}}
{{rev end}}

===={{c|?}}====
* Part of {{rlpsd|operator other#Conditional operator}}.

===={{c|.}}====
* {{rlp|operator member access#Built-in member access operators|Member access operator}}.
{{rrev|since=c++20|
* In {{rlp|aggregate initialization}}, introduce a designator.
* Part of {{rlp|modules|module name or module partition name}}.
}}

===={{c|~}} (including {{c|compl}})====
* {{rlp|operator arithmetic#Bitwise logic operators|Unary complement operator (a.k.a. bitwise not operator)}}; part of {{c|operator~}} in {{rlp|operators|operator overloading}}.
* Part of an {{rlp|identifiers|identifier expression}} to name a {{rlp|destructor}} or pseudo-destructor.

===={{c|!}} (including {{c|not}})====
* {{rlp|operator logical|Logical not operator}}; part of {{c|operator!}} in {{rlp|operators|operator overloading}}.
{{rrev|since=c++23|
* Part of {{rlpsd|if#Consteval if}} statement.
}}

===={{c|+}}====
* {{rlp|operator arithmetic#Unary arithmetic operators|Unary plus operator}}; part of {{c|operator+}} in {{rlp|operators|operator overloading}}.
* {{rlp|operator arithmetic#Additive operators|Binary plus operator}}; part of {{c|operator+}} in {{rlp|operators|operator overloading}}.

===={{c|-}}====
* {{rlp|operator arithmetic#Unary arithmetic operators|Unary minus operator}}; part of {{c|operator-}} in {{rlp|operators|operator overloading}}.
* {{rlp|operator arithmetic#Additive operators|Binary minus operator}}; part of {{c|operator-}} in {{rlp|operators|operator overloading}}.

===={{c|*}}====
* {{rlp|operator member access#Built-in indirection operator|Indirection operator}}; part of {{c|operator*}} in {{rlp|operators|operator overloading}}.
* {{rlp|operator arithmetic#Multiplicative operators|Multiplication operator}}; part of {{c|operator*}} in {{rlp|operators|operator overloading}}.
* Pointer operator or part of pointer-to-member operator in a {{rlp|declarations#Declarators|declarator}} or in a {{rlp|type#Type naming|type-id}}.
{{rrev|since=c++17|
* Part of {{c|*this}} in a {{rlpsd|lambda#Lambda capture}} list, to capture the current object by copy.
}}

===={{c|/}}====
* {{rlp|operator arithmetic#Multiplicative operators|Division operator}}; part of {{c|operator/}} in {{rlp|operators|operator overloading}}.

===={{c|%}}====
* {{rlp|operator arithmetic#Multiplicative operators|Modulo operator}}; part of {{c|operator%}} in {{rlp|operators|operator overloading}}.

===={{c|^}} (including {{c|xor}})====
* {{rlp|operator arithmetic#Bitwise logic operators|Bitwise xor operator}}; part of {{c|operator^}} in {{rlp|operators|operator overloading}}.

===={{c|&amp;}} (including {{c|bitand}})====
* {{rlp|operator member access#Built-in address-of operator|Address-of operator}}; part of {{c|operator&amp;}} in {{rlp|operators#Rarely overloaded operators|operator overloading}}.
* {{rlp|operator arithmetic#Bitwise logic operators|Bitwise and operator}}; part of {{c|operator&amp;}} in {{rlp|operators|operator overloading}}.
* Lvalue-reference operator in a {{rlp|declarations#Declarators|declarator}} or in a {{rlp|type#Type naming|type-id}}.
{{rrev|since=c++11|
* In a {{rlpsd|lambda#Lambda capture}}, indicate by-reference capture.
* {{rlp|member functions#ref-qualified member functions|Ref-qualifier}} in {{rlp|member functions|member function declaration}}.
}}

===={{c|{{!}}}} (including {{c|bitor}})====
* {{rlp|operator arithmetic#Bitwise logic operators|Bitwise or operator}}; part of {{c|operator{{!}}}} in {{rlp|operators|operator overloading}}.

===={{c|1==}}====
* {{rlp|operator assignment|Simple assignment operator}}; part of {{c|1=operator=}} in {{rlp|operators#Assignment operator|operator overloading}}, which might be a special member function ({{rlp|copy assignment|copy assignment operator}}{{rev inl|since=c++11|or {{rlp|move assignment|move assignment operator}}}}).
* Part of the {{rlp|copy initialization|copy-initialization}} and {{rev inl|until=c++11|{{rlp|aggregate initialization}}}}{{rev inl|since=c++11|{{rlp|list initialization|copy-list-initialization}}}} syntax of an {{rlp|initialization|initializer}}.
* In a {{rlp|function|function declaration}}, introduce a {{rlp|default arguments|default argument}}.
* In a {{rlp|template parameters|template parameter list}}, introduce a {{rlp|template parameters#Default template arguments|default template argument}}.
* In a {{rlp|namespace alias|namespace alias definition}}, separate the alias and the aliased namespace.
* In an {{rlp|enum|enum definition}}, introduce the value of enumerator.
* Part of {{spar|pure-specifier}} in a {{rlp|abstract class|pure virtual function declaration}}.
{{rev begin}}
{{rev|since=c++11|
* Capture default in {{rlpsd|lambda#Lambda capture}}, to indicate by-copy capture.
* Part of defaulted definition ({{c|1==default;}}) or deleted definition ({{c|1==delete;}}) in {{rlp|function#Function definition|function definition}}.
* In a {{rlp|type alias|type alias declaration}}, separate the alias and the aliased type.
}}
{{rev|since=c++20|
* In a {{rlp|constraints|concept definition}}, separate the concept name and the constraint expression.
}}
{{rev end}}

===={{c|&lt;}}====
* {{rlp|operator comparison|Less-than operator}}; part of {{c|operator&lt;}} in {{rlp|operators#Comparison operators|operator overloading}}.
* In a {{rlpt|static_cast}}, {{rlpt|const_cast}}, {{rlpt|reinterpret_cast}}, or {{rlpt|dynamic_cast}}, introduce the type-id.
* Introduce a {{rlp|template parameters#Template arguments|template argument list}}.
* Introduce a {{rlp|template parameters|template parameter list}} in
:* a {{rlp|templates|template declaration}}
:* a {{rlp|partial specialization}}
{{rrev|since=c++20|
:* a {{rlp|lambda|lambda expression}}
}}
* Part of {{c|template&lt;&gt;}} in {{rlp|template specialization|template specialization declaration}}.
* Introduce a header name in
:* a [[cpp/preprocessor/include|{{c/core|#include}} directive]]
{{rev begin}}
{{rev|since=c++17|
:* a [[cpp/preprocessor/include|{{c/core|__has_include}} preprocessing expression]]
}}
{{rev|since=c++20|
:* an {{rlp|modules|{{c/core|import}} declaration}}
}}
{{rev end}}

===={{c|&gt;}}====
* {{rlp|operator comparison|Greater-than operator}}; part of {{c|operator&gt;}} in {{rlp|operators#Comparison operators|operator overloading}}.
* {{rlpt|static_cast}}, {{rlpt|const_cast}}, {{rlpt|reinterpret_cast}}, or {{rlpt|dynamic_cast}}, indicate the end of type-id.
* Indicate the end of a {{rlp|template parameters#Template arguments|template argument list}}.
* Indicate the end of a {{rlp|template parameters|template parameter list}} in
:* a {{rlp|templates|template declaration}}
:* a {{rlp|partial specialization}}
{{rrev|since=c++20|
:* a {{rlp|lambda|lambda expression}}
}}
* Part of {{c|template&lt;&gt;}} in {{rlp|template specialization|template specialization declaration}}.
* Indicate the end of a header name in
:* a [[cpp/preprocessor/include|{{c/core|#include}} directive]]
{{rev begin}}
{{rev|since=c++17|
:* a [[cpp/preprocessor/include|{{c/core|__has_include}} preprocessing expression]]
}}
{{rev|since=c++20|
:* an {{rlp|modules|{{c/core|import}} declaration}}
}}
{{rev end}}

===={{c|,}}====
* {{rlp|operator other#Built-in comma operator|Comma operator}}; part of {{c|operator,}} in {{rlp|operators#Rarely overloaded operators|operator overloading}}.
* List separator in
:* the declarator list in a {{rlp|declarations|declaration}}
:* initializer list in {{rlp|initialization}}
:* the placement argument list in a {{rlp|new|placement new}}
:* the argument list in a {{rlp|operator other#Function call operator|function call expression}}
:* the enumerator list in an {{rlp|enum}} declaration
:* the {{rlp|derived class|base class}} list in a {{rlp|class}} declaration
:* the member initializer list in a {{rlp|constructor}} definition
:* a {{rlp|function#Parameter list|function parameter list}}
:* a {{rlp|template parameters|template parameter list}}
:* a {{rlp|template parameters#Template arguments|template argument list}}
{{rev begin}}
{{rev|since=c++11|
:* a {{rlpsd|lambda#Lambda capture}} list
:* an {{rlp|attributes|attribute}} list
}}
{{rev|since=c++17|
:* the declarator list in a {{rlp|namespace#Using-declarations|using-declaration}}
:* the identifier list in a {{rlp|structured binding}} declaration
}}
{{rev|since=c++23|
:* the argument list in a {{rlp|operator member access#Built-in subscript operator|multi-argument subscript expression}}
}}
{{rev end}}
:* the macro parameter list in a [[cpp/preprocessor/replace|function-like macro definition]]
:* the macro argument list in a [[cpp/preprocessor/replace#Function-like macros|function-like macro invocation]], unless found between the parentheses of an argument
{{rrev|since=c++11|
* In a {{rlpt|static_assert}} declaration, separate the arguments.
}}

===Multi-character operators and punctuators===
===={{c|...}}====
* In the {{rlpsd|function#Parameter list}} of a function declarator{{rev inl|since=c++11|or lambda expression}}{{rev inl|since=c++17|or user-defined deduction guide}}, signify a {{rlp|variadic arguments|variadic function}}.
* In a {{rlp|catch|handler}}, signify catch-all handler.
{{rev begin}}
{{rev|since=c++11|
* In a [[cpp/preprocessor/replace|macro definition]], signify a variadic macro.
* Indicate {{rlp|parameter pack|pack}} declaration and expansion.
}}
{{rev|since=c++26|
* In {{rlp|pack indexing#Syntax|pack indexing}} expression and specifier.
}}
{{rev end}}

===={{c|::}}====
* Scope resolution operator in
:* a {{rlp|qualified lookup|qualified name}}
:* a {{rlp|pointer#Pointers to members|pointer-to-member declaration}}
:* a {{rlpt|new}} or {{rlpt|delete}} expression, to indicate that only global allocation or deallocation functions are looked up
{{rev begin}}
{{rev|since=c++11|
* In an {{rlp|attributes|attribute}}, indicate attribute scope.
}}
{{rev|since=c++17|
* Part of {{rlp|namespace|nested namespace definition}}.
}}
{{rev end}}

===={{c|.*}}====
* {{rlp|operator member access#Built-in pointer-to-member access operators|Pointer-to-member access operator}}.

===={{c|-&gt;}}====
* {{rlp|operator member access#Built-in member access operators|Member access operator}}; part of {{c|operator-&gt;}} in {{rlp|operators|operator overloading}}.
{{rev begin}}
{{rev|since=c++11|
* In a {{rlp|function|function declarator}} or {{rlp|lambda|lambda expression}}, introduce the trailing return type.
}}
{{rev|since=c++17|
* In a {{rlp|class template argument deduction|user-defined deduction guide}}, introduce the result type.
}}
{{rev|since=c++20|
* In a {{rlp|constraints#Compound Requirements|compound requirement}}, introduce the return type requirement.
}}
{{rev end}}

===={{c|-&gt;*}}====
* {{rlp|operator member access#Built-in pointer-to-member access operators|Pointer-to-member access operator}}; part of {{c|operator-&gt;*}} in {{rlp|operators#Rarely overloaded operators|operator overloading}}.

===={{c|1=+=}}====
* {{rlp|operator assignment|Compound assignment operator}}; part of {{c|1=operator+=}} in {{rlp|operators|operator overloading}}.

===={{c|1=-=}}====
* {{rlp|operator assignment|Compound assignment operator}}; part of {{c|1=operator-=}} in {{rlp|operators|operator overloading}}.

===={{c|1=*=}}====
* {{rlp|operator assignment|Compound assignment operator}}; part of {{c|1=operator*=}} in {{rlp|operators|operator overloading}}.

===={{c|1=/=}}====
* {{rlp|operator assignment|Compound assignment operator}}; part of {{c|1=operator/=}} in {{rlp|operators|operator overloading}}.

===={{c|1=%=}}====
* {{rlp|operator assignment|Compound assignment operator}}; part of {{c|1=operator%=}} in {{rlp|operators|operator overloading}}.

===={{c|1=^=}} (including {{c|xor_eq}})====
* {{rlp|operator assignment|Compound assignment operator}}; part of {{c|1=operator^=}} in {{rlp|operators|operator overloading}}.

===={{c|1=&amp;=}} (including {{c|and_eq}})====
* {{rlp|operator assignment|Compound assignment operator}}; part of {{c|1=operator&amp;=}} in {{rlp|operators|operator overloading}}.

===={{c|{{!=}}}} (including {{c|or_eq}})====
* {{rlp|operator assignment|Compound assignment operator}}; part of {{c|operator{{!=}}}} in {{rlp|operators|operator overloading}}.

===={{c|1===}}====
* {{rlp|operator comparison|Equality operator}}; part of {{c|1=operator==}} in {{rlp|operators#Comparison operators|operator overloading}}.

===={{c|1=!=}} (including {{c|not_eq}})====
* {{rlp|operator comparison|Inequality operator}}; part of {{c|1=operator!=}} in {{rlp|operators#Comparison operators|operator overloading}}.

===={{c|1=&lt;=}}====
* {{rlp|operator comparison|Less-than-or-equal-to operator}}; part of {{c|1=operator&lt;=}} in {{rlp|operators#Comparison operators|operator overloading}}.

===={{c|1=&gt;=}}====
* {{rlp|operator comparison|Greater-than-or-equal-to operator}}; part of {{c|1=operator&gt;=}} in {{rlp|operators#Comparison operators|operator overloading}}.

{{rrev|since=c++20|
===={{c|1=&lt;=&gt;}}====
* {{rlp|operator comparison#Three-way comparison|Three-way comparison (spaceship) operator}}; part of {{c|1=operator&lt;=&gt;}} in {{rlp|operators#Comparison operators|operator overloading}}.
}}

===={{c|&amp;&amp;}} (including {{c|and}})====
* {{rlp|operator logical|Logical and operator}}; part of {{c|operator&amp;&amp;}} in {{rlp|operators#Rarely overloaded operators|operator overloading}}.
{{rrev|since=c++11|
* Rvalue-reference operator in a {{rlp|declarations#Declarators|declarator}} or in a {{rlp|type#Type naming|type-id}}.
* {{rlp|member functions#ref-qualified member functions|Ref-qualifier}} in {{rlp|member functions|member function declaration}}.
}}

===={{c|{{!!}}}} (including {{c|or}})====
* {{rlp|operator logical|Logical or operator}}; part of {{c|operator{{!!}}}} in {{rlp|operators#Rarely overloaded operators|operator overloading}}.

===={{c|&lt;&lt;}}====
* {{rlp|operator arithmetic#Bitwise shift operators|Bitwise shift operator}}; part of {{c|operator&lt;&lt;}} in operator overloading ({{rlp|operators#Bitwise arithmetic operators|bitwise operator}} or {{rlp|operators#Stream extraction and insertion|stream insertion operator}}).

===={{c|&gt;&gt;}}====
* {{rlp|operator arithmetic#Bitwise shift operators|Bitwise shift operator}}; part of {{c|operator&gt;&gt;}} in operator overloading ({{rlp|operators#Bitwise arithmetic operators|bitwise operator}} or {{rlp|operators#Stream extraction and insertion|stream extraction operator}}).

===={{c|1=&lt;&lt;=}}====
* {{rlp|operator assignment|Compound assignment operator}}; part of {{c|1=operator&lt;&lt;=}} in {{rlp|operators|operator overloading}}.

===={{c|1=&gt;&gt;=}}====
* {{rlp|operator assignment|Compound assignment operator}}; part of {{c|1=operator&gt;&gt;=}} in {{rlp|operators|operator overloading}}.

===={{c|++}}====
* {{rlp|operator incdec|Increment operator}}; part of {{c|operator++}} in {{rlp|operators|operator overloading}}.

===={{c|--}}====
* {{rlp|operator incdec|Decrement operator}}; part of {{c|operator--}} in {{rlp|operators|operator overloading}}.

===References===
{{ref std c++23}}
{{ref std|section=5.12|title=Operators and punctuators|id=lex.operators}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=5.12|title=Operators and punctuators|id=lex.operators}}
{{ref std end}}
{{ref std c++17}}
{{ref std|section=5.12|title=Operators and punctuators|id=lex.operators}}
{{ref std end}}
{{ref std c++14}}
{{ref std|section=2.13|title=Operators and punctuators|id=lex.operators}}
{{ref std end}}
{{ref std c++11}}
{{ref std|section=2.13|title=Operators and punctuators|id=lex.operators}}
{{ref std end}}
{{ref std c++03}}
{{ref std|section=2.12|title=Operators and punctuators|id=lex.operators}}
{{ref std end}}
{{ref std c++98}}
{{ref std|section=2.12|title=Operators and punctuators|id=lex.operators}}
{{ref std end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/language/dsc operator alternative}}
{{dsc see c|c/language/punctuators|Punctuation|nomono=true}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
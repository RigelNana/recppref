{{title|{{tt|override}} specifier {{mark since c++11}}}}
{{cpp/language/classes/navbar}}

Specifies that a {{rlp|virtual|virtual function}} overrides another virtual function.

===Syntax===
The identifier {{tt|override}}, if used, appears immediately after the {{rlp|function|declarator}} in the syntax of a member function declaration or a member function definition inside a class definition.

{{sdsc begin}}
{{sdsc|num=1|{{spar|declarator}} {{spar optional|virt-specifier-seq}} {{spar optional|pure-specifier}}}}
{{sdsc|num=2|{{spar|declarator}} {{spar optional|virt-specifier-seq}} {{spar|function-body}}}}
{{sdsc end}}
@1@ In a member function declaration, {{tt|override}} may appear in {{spar|virt-specifier-seq}} immediately after the declarator, and before the {{rlp|abstract_class|{{spar|pure-specifier}}}}, if used.
@2@ In a member function definition inside a class definition, {{tt|override}} may appear in {{spar|virt-specifier-seq}} immediately after the declarator and just before {{spar|function-body}}.

In both cases, {{spar|virt-specifier-seq}}, if used, is either {{tt|override}} or {{rlpt|final}}, or {{c/core|final override}} or {{c/core|override final}}.

===Explanation===
In a member function declaration or definition, {{c/core|override}} specifier ensures that the function is virtual and is overriding a virtual function from a base class. The program is ill-formed (a compile-time error is generated) if this is not true.

{{tt|override}} is an ''identifier with a special meaning'' when used after member function declarators; it is not a reserved {{lt|cpp/keyword}} otherwise.

===Keywords===
{{ltt|cpp/identifier_with_special_meaning/override}}

===Example===
{{example
|code=
#include &lt;iostream&gt;

struct A
{
    virtual void foo();
    void bar();
    virtual ~A();
};

// member functions definitions of struct A:
void A::foo() { std::cout &lt;&lt; "A::foo();\n"; }
A::~A() { std::cout &lt;&lt; "A::~A();\n"; }

struct B : A
{
//  void foo() const override; // Error: B::foo does not override A::foo
                               // (signature mismatch)
    void foo() override; // OK: B::foo overrides A::foo
//  void bar() override; // Error: A::bar is not virtual
    ~B() override; // OK: `override` can also be applied to virtual
                   // special member functions, e.g. destructors
    void override(); // OK, member function name, not a reserved keyword
};

// member functions definitions of struct B:
void B::foo() { std::cout &lt;&lt; "B::foo();\n"; }
B::~B() { std::cout &lt;&lt; "B::~B();\n"; }
void B::override() { std::cout &lt;&lt; "B::override();\n"; }

int main()
{
    B b;
    b.foo();
    b.override(); // OK, invokes the member function `override()`
    int override{42}; // OK, defines an integer variable
    std::cout &lt;&lt; "override: " &lt;&lt; override &lt;&lt; '\n';
}
|output=
B::foo();
B::override();
override: 42
B::~B();
A::~A();
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/language/dsc final}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{title|Strings library}}
{{cpp/string/navbar}}

===Characters===
In the C++ standard library, a ''character'' is an object which, when treated sequentially, can represent text.

The term means not only objects of [[cpp/language/type|character types]], but also any value that can be represented by a type that provides the definitions specified in the strings library and following libraries:
* [[cpp/locale|localization library]]
* [[cpp/io|input/output library]]
{{rrev|since=c++11|
* [[cpp/regex|regular expressions library]]
}}

In the strings library{{rev inl|since=c++11| and regular expressions library}}, a character can be of only ''char-like types'', i.e. those non-array types that satisfy the requirements of 
{{rev inl|until=c++20|{{named req|PODType}}}}{{rev inl|since=c++20|until=c++26|{{named req|TrivialType}} and {{named req|StandardLayoutType}}}}{{rev inl|since=c++26|{{named req|TriviallyCopyable}} and {{named req|StandardLayoutType}}}}.

{{rrev|since=c++26|
For any char-like type {{tt|T}}, {{c|std::is_trivially_default_constructible_v&lt;T&gt;}} is {{c|true}}.
}}

Therefore, characters are also referred as ''char-like objects'' in the strings library{{rev inl|since=c++11| and regular expressions library}}.

Some standard library components accept ''character container types''. They, too, are types used to represent individual characters. Such types are used for one of the template arguments of {{lc|std::char_traits}} and the class templates which use {{lc|std::char_traits}}.

===Library components===
The C++ strings library includes the following components:

====Character traits====
Many character-related class templates (such as {{lc|std::basic_string}}) need a set of related types and functions to complete the definition of their semantics. These types and functions are provided as a set of member {{c/core|typedef}} names and functions in the template parameter {{tt|Traits}} used by each such template. The classes which are able to complete those semantics are {{named req|CharTraits}}.

The string library provides the class template {{lc|std::char_traits}} that defines types and functions for {{lc|std::basic_string}}{{rev inl|since=c++17| and {{lc|std::basic_string_view}}}}.

The following specializations are defined, all of them satisfy the {{named req|CharTraits}} requirements:
{{dcl begin}}
{{dcl header|string}}
{{dcl|template&lt;&gt; class char_traits&lt;char&gt;;}}
{{dcl|template&lt;&gt; class char_traits&lt;wchar_t&gt;;}}
{{dcl|template&lt;&gt; class char_traits&lt;char8_t&gt;;|since=c++20}}
{{dcl|template&lt;&gt; class char_traits&lt;char16_t&gt;;|since=c++11}}
{{dcl|template&lt;&gt; class char_traits&lt;char32_t&gt;;|since=c++11}}
{{dcl end}}

When a user-defined character container type for {{lc|std::basic_string}}{{rev inl|since=c++17| and {{lc|std::basic_string_view}}}} is used, it is also necessary to provide a corresponding character trait class (which can be a specialization of {{lc|std::char_traits}}).

{{anchor|String classes}}
====String classes ({{lc|std::string}} etc.)====
The class template {{lc|std::basic_string}} generalizes how sequences of characters are manipulated and stored.  String creation, manipulation, and destruction are all handled by a convenient set of class methods and related functions.

Several specializations of {{lc|std::basic_string}} are provided for commonly-used types:
{{dsc begin}}
{{dsc header|string}}
{{dsc hitem|Type|Definition}}
{{dsc|{{ttb|std::string}}|{{c/core|std::basic_string&lt;char&gt;}}}}
{{dsc|{{ttb|std::wstring}}|{{c/core|std::basic_string&lt;wchar_t&gt;}}}}
{{dsc|{{ttb|std::u8string}} {{mark since c++20}}|{{c/core|std::basic_string&lt;char8_t&gt;}}}}
{{dsc|{{ttb|std::u16string}} {{mark since c++11}}|{{c/core|std::basic_string&lt;char16_t&gt;}}}}
{{dsc|{{ttb|std::u32string}} {{mark since c++11}}|{{c/core|std::basic_string&lt;char32_t&gt;}}}}
{{dsc end}}

{{anchor|String view classes}}
====String view classes ({{lc|std::string_view}} etc.) {{mark since c++17}}====
The class template {{lc|std::basic_string_view}} provides a lightweight object that offers read-only access to a string or a part of a string using an interface similar to the interface of {{lc|std::basic_string}}.

Several specializations of {{lc|std::basic_string_view}} are provided for commonly-used types:
{{dsc begin}}
{{dsc header|string_view}}
{{dsc hitem|Type|Definition}}
{{dsc|{{ttb|std::string_view}}|{{c/core|std::basic_string_view&lt;char&gt;}}}}
{{dsc|{{ttb|std::wstring_view}}|{{c/core|std::basic_string_view&lt;wchar_t&gt;}}}}
{{dsc|{{ttb|std::u8string_view}} {{mark since c++20}}|{{c/core|std::basic_string_view&lt;char8_t&gt;}}}}
{{dsc|{{ttb|std::u16string_view}}|{{c/core|std::basic_string_view&lt;char16_t&gt;}}}}
{{dsc|{{ttb|std::u32string_view}}|{{c/core|std::basic_string_view&lt;char32_t&gt;}}}}
{{dsc end}}

===Relevant libraries===
The [[cpp/text|text processing library]] provides support for localizations, string conversions (e.g. {{ltt std|cpp/locale/toupper}}), character classification functions (e.g. {{ltt std|cpp/locale/isspace}}), and text encoding recognition ({{ltt std|cpp/text/text_encoding}}).

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=1170|std=C++98|before=char-like types could be array types|after=prohibited}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc see c|c/string|Strings library|nomono=true}}
{{dsc end}}

{{langlinks|ar|de|es|fr|it|ja|pt|ru|zh}}
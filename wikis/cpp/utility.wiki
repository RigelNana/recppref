{{title|Utility library}}
{{cpp/utility/navbar}}

C++ includes a variety of utility libraries that provide functionality ranging from [[cpp/utility/bitset|bit-counting]] to [[cpp/utility/functional/bind|partial function application]]. These libraries can be broadly divided into two groups:
* language support libraries, and
* general-purpose libraries.

==Language support==
Language support libraries provide classes and functions that interact closely with language features and support common language idioms.

===[[cpp/types|Type support]]===
Basic types (e.g. {{lc|std::size_t}}, {{lc|std::nullptr_t}}), RTTI (e.g. {{lc|std::type_info}})

{{anchor|Metaprogramming}}
===[[cpp/meta|Metaprogramming]] {{mark since c++11}}===
Type traits (e.g. {{lc|std::is_integral}}, {{lc|std::rank}}), compile-time constants (e.g. {{lc|std::integer_sequence}}, {{lc|std::ratio}})

{{anchor|Constant evaluation context}}
===Constant evaluation context {{mark since c++20}}===
{{dsc begin}}
{{dsc header|type_traits}}
{{dsc inc|cpp/types/dsc is_constant_evaluated}}
{{dsc inc|cpp/types/dsc is_within_lifetime}}
{{dsc end}}

{{anchor|Implementation properties}}
===[[cpp/utility/feature_test|Implementation properties]] {{mark since c++20}}===
The header {{header|version}} supplies implementation-dependent information about the C++ standard library (such as the version number and release date). It also defines the [[cpp/utility/feature test|library feature-test macros]].

===[[cpp/utility/program|Program utilities]]===
Termination (e.g. {{lc|std::abort}}, {{lc|std::atexit}}), environment (e.g. {{lc|std::system}}), signals (e.g. {{lc|std::raise}})

===[[cpp/memory|Dynamic memory management]]===
Smart pointers (e.g. {{lc|std::shared_ptr}}), allocators (e.g. {{lc|std::allocator}} or {{lc|std::pmr::memory_resource}}), C-style memory management (e.g. {{lc|std::malloc}})

===[[cpp/error|Error handling]]===
Exceptions (e.g. {{lc|std::exception}}, {{lc|std::terminate}}), assertions (e.g. {{lc|assert}})

{{anchor|Source code information capture}}
===[[cpp/utility/source_location|Source code information capture]] {{mark since c++20}}===
{{dsc begin}}
{{dsc header|source_location}}
{{dsc inc|cpp/utility/dsc source_location}}
{{dsc end}}

{{anchor|Initializer lists}}
===[[cpp/utility/initializer_list|Initializer lists]] {{mark since c++11}}===
{{dsc begin}}
{{dsc header|initializer_list}}
{{dsc inc|cpp/utility/dsc initializer_list}}
{{dsc end}}

{{anchor|Three-way comparison}}
===Three-way comparison {{mark since c++20}}===
{{dsc begin}}
{{dsc header|compare}}
{{dsc inc|cpp/utility/compare/dsc three_way_comparable}}
{{dsc inc|cpp/utility/compare/dsc partial_ordering}}
{{dsc inc|cpp/utility/compare/dsc weak_ordering}}
{{dsc inc|cpp/utility/compare/dsc strong_ordering}}
{{dsc inc|cpp/utility/compare/dsc named_comparison_functions}}
{{dsc inc|cpp/utility/compare/dsc compare_three_way}}
{{dsc inc|cpp/utility/compare/dsc compare_three_way_result}}
{{dsc inc|cpp/utility/compare/dsc common_comparison_category}}
{{dsc inc|cpp/utility/compare/dsc strong_order}}
{{dsc inc|cpp/utility/compare/dsc weak_order}}
{{dsc inc|cpp/utility/compare/dsc partial_order}}
{{dsc inc|cpp/utility/compare/dsc compare_strong_order_fallback}}
{{dsc inc|cpp/utility/compare/dsc compare_weak_order_fallback}}
{{dsc inc|cpp/utility/compare/dsc compare_partial_order_fallback}}
{{dsc end}}

{{anchor|Coroutine support}}
===[[cpp/coroutine|Coroutine support]] {{mark since c++20}}===
Types for coroutine support, e.g. {{lc|std::coroutine_traits}}, {{lc|std::coroutine_handle}}.

===[[cpp/utility/variadic|Variadic functions]]===
Support for functions that take an arbitrary number of parameters (via e.g. {{lc|va_start}}, {{lc|va_arg}}, {{lc|va_end}}).

==General-purpose utilities==
===Swap===
{{dsc begin}}
{{dsc header|utility}}
{{dsc inc|cpp/algorithm/dsc swap}}
{{dsc inc|cpp/utility/dsc exchange}}
{{dsc header|concepts}}
{{dsc inc|cpp/utility/ranges/dsc swap}}
{{dsc end}}

{{anchor|Type operations}}
===Type operations {{mark since c++11}}===
{{dsc begin}}
{{dsc header|utility}}
{{dsc inc|cpp/utility/dsc forward}}
{{dsc inc|cpp/utility/dsc forward_like}}
{{dsc inc|cpp/utility/dsc move}}
{{dsc inc|cpp/utility/dsc move_if_noexcept}}
{{dsc inc|cpp/utility/dsc as_const}}
{{dsc inc|cpp/utility/dsc declval}}
{{dsc inc|cpp/utility/dsc to_underlying}}
{{dsc end}}

{{anchor|Integer comparison functions}}
===Integer comparison functions {{mark since c++20}}===
{{dsc begin}}
{{dsc header|utility}}
{{dsc inc|cpp/utility/dsc intcmp}}
{{dsc inc|cpp/utility/dsc in_range}}
{{dsc end}}

{{anchor|Relational operators}}
===Relational operators {{mark until c++20}}===
{{dsc begin}}
{{dsc header|utility}}
{{dsc namespace|std::rel_ops}}
{{dsc inc|cpp/utility/rel_ops/dsc operator_cmp}}
{{dsc end}}

{{anchor|Construction tags}}
===Construction tags {{mark since c++11}}===
{{dsc begin}}
{{dsc header|utility}}
{{dsc inc|cpp/utility/dsc piecewise_construct}}
{{dsc inc|cpp/utility/dsc in_place}}
{{dsc inc|cpp/utility/dsc nontype}}
{{dsc end}}

===[[cpp/utility/pair|Pairs]] and [[cpp/utility/tuple|tuples]]===
{{dsc begin}}
{{dsc header|utility}}
{{dsc inc|cpp/utility/dsc pair}}
{{dsc header|tuple}}
{{dsc inc|cpp/utility/dsc tuple}}
{{dsc inc|cpp/utility/dsc apply}}
{{dsc inc|cpp/utility/dsc make_from_tuple}}
{{anchor|Tuple protocol}}
{{dsc h2|[[cpp/utility/tuple/tuple-like|Tuple protocol]] {{mark since c++11}}}}
{{dsc header|tuple}}
{{dsc header|utility}}
{{dsc header|array}}
{{dsc header|ranges}}
{{dsc header|complex}}
{{dsc inc|cpp/utility/dsc tuple_size}}
{{dsc inc|cpp/utility/dsc tuple_element}}
{{dsc end}}

{{anchor|Sum types and type erased wrappers}}
===Sum types and type erased wrappers {{mark since c++17}}===
{{dsc begin}}
{{dsc header|optional}}
{{dsc inc|cpp/utility/dsc optional}}
{{dsc sep}}
{{dsc header|expected}}
{{dsc inc|cpp/utility/dsc expected}}
{{dsc sep}}
{{dsc header|variant}}
{{dsc inc|cpp/utility/dsc variant}}
{{dsc sep}}
{{dsc header|any}}
{{dsc inc|cpp/utility/dsc any}}
{{dsc end}}

===[[cpp/utility/bitset|Bitset]]===
{{dsc begin}}
{{dsc header|bitset}}
{{dsc inc|cpp/utility/dsc bitset}}
{{dsc end}}

{{anchor|Bit manipulation}}
===[[cpp/utility/bit|Bit manipulation]] {{mark since c++20}}===
The header {{header|bit}} provides several function templates to access, manipulate, and process individual bits and bit sequences. The byte ordering ([[cpp/types/endian|endianness]]) of scalar types can be inspected via {{c/core|std::endian}} facility.

{{anchor|Function objects}}
===[[cpp/utility/functional|Function objects]] {{mark since c++11}}===
Partial function application (e.g. {{lc|std::bind}}) and related utilities: utilities for binding such as {{lc|std::ref}}  and {{lc|std::placeholders}}, polymorphic function wrappers: {{lc|std::function}}, predefined functors (e.g. {{lc|std::plus}}, {{lc|std::equal_to}}), pointer-to-member to function converters {{lc|std::mem_fn}}.

{{anchor|Hash support}}
===[[cpp/utility/hash|Hash support]] {{mark since c++11}}===
{{dsc begin}}
{{dsc header|functional}}
{{dsc inc|cpp/utility/dsc hash}}
{{dsc end}}

===See also===
{{dsc begin}}
{{dsc see c|c/utility|Utility library|nomono=true}}
{{dsc end}}

{{langlinks|ar|cs|de|es|fr|it|ja|ko|pl|pt|ru|tr|zh}}
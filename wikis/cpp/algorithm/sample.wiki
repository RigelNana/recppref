{{cpp/title|sample}}
{{cpp/algorithm/navbar}}
{{ddcl|header=algorithm|since=c++17|
template&lt; class PopulationIt, class SampleIt, class Distance, class URBG &gt;
SampleIterator sample( PopulationIt first, PopulationIt last,
                       SampleIt out, Distance n, URBG&amp;&amp; g );
}}

Selects {{c|n}} elements from the sequence {{range|first|last}} (without replacement) such that each possible sample has equal probability of appearance, and writes those selected elements into the output iterator {{c|out}}. Random numbers are generated using the random number generator {{c|g}}.

If {{c|n}} is greater than the number of elements in the sequence, selects all elements in the sequence.

The algorithm is stable (preserves the relative order of the selected elements) only if {{tt|PopulationIt}} meets the requirements of {{named req|ForwardIterator}}.

If {{rev inl|until=c++20|the value type of {{c|first}}}}{{rev inl|since=c++20|{{c|*first}}}} is not [[cpp/iterator#Types and writability|writable]] to {{c|out}}, the program is ill-formed.

If any of the following conditions is satisfied, the behavior is undefined:
* {{c|out}} is in {{range|first|last}}.
* {{tt|PopulationIt}} does not meet the requirements of {{named req|InputIterator}}.
* {{tt|SampleIt}} does not meet the requirements of {{named req|OutputIterator}}.
* All following conditions are satisfied:
{{rev begin}}
{{rev|until=c++23|
:* {{tt|PopulationIt}} does not meet the requirements of {{named req|ForwardIterator}}.
}}
{{rev|since=c++23|
:* {{tt|PopulationIt}} does not model {{lconcept|forward_iterator}}.
}}
{{rev end}}
:* {{tt|SampleIt}} does not meet the requirements of {{named req|RandomAccessIterator}}.
* Given the type {{tt|T}} as {{c/core|std::remove_reference_t&lt;URBG&gt;}}, any of the following conditions is satisfied:
:* {{tt|T}} does not meet the requirements of {{named req|UniformRandomBitGenerator}}.
{{rrev|until=c++20|
:* The return type of {{tt|T}} is not convertible to {{tt|Distance}}.
}}

===Parameters===
{{par begin}}
{{par|first, last|pair of iterators forming the range from which to make the sampling (the population)}}
{{par|out|the output iterator where the samples are written}}
{{par|n|number of samples to make}}
{{par|g|the random number generator used as the source of randomness}}
{{par hreq}}
{{par req|{{tt|Distance}} must be an integer type.}}
{{par end}}

===Return value===
Returns a copy of {{c|out}} after the last sample that was output, that is, end of the sample range.

===Complexity===
Linear in {{c|std::distance(first, last)}}.

===Possible implementation===
See the implementations in [https://github.com/gcc-mirror/gcc/blob/14d8a5ae472ca5743016f37da2dd4770d83dea21/libstdc%2B%2B-v3/include/bits/stl_algo.h#L5743-L5869 libstdc++], [https://github.com/llvm/llvm-project/blob/f221d905b131158cbe3cbc4320d1ecd1376c3f22/libcxx/include/__algorithm/sample.h libc++] and [https://github.com/microsoft/STL/blob/472161105d596192194d4715ccad307c6c163b4a/stl/inc/algorithm#L4518-L4600 MSVC STL].

===Notes===
This function may implement selection sampling or {{enwiki|reservoir sampling}}.

{{feature test macro|__cpp_lib_sample|{{tt|std::sample}}|value=201603L|std=C++17}}

===Example===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;random&gt;
#include &lt;string&gt;

int main()
{
    std::string in {"ABCDEFGHIJK"}, out;
    std::sample(in.begin(), in.end(), std::back_inserter(out), 4,
                std::mt19937 {std::random_device{}()});
    std::cout &lt;&lt; "Four random letters out of " &lt;&lt; in &lt;&lt; " : " &lt;&lt; out &lt;&lt; '\n';
}
|p=true
|output=
Four random letters out of ABCDEFGHIJK: EFGK
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc random_shuffle}}
{{dsc inc|cpp/algorithm/ranges/dsc sample}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
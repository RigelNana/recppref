{{cpp/title|count|count_if}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl rev begin|num=1}}
{{dcla|anchor=1|constexpr=c++20|until=c++26|
template&lt; class InputIt, class T &gt;
typename std::iterator_traits&lt;InputIt&gt;::difference_type
    count( InputIt first, InputIt last, const T&amp; value );
}}
{{dcl|since=c++26|1=
template&lt; class InputIt, class T = typename std::iterator_traits
                                       &lt;InputIt&gt;::value_type &gt;
constexpr typename std::iterator_traits&lt;InputIt&gt;::difference_type
    count( InputIt first, InputIt last, const T&amp; value );
}}
{{dcl rev begin|num=2}}
{{dcl|since=c++17|until=c++26|
template&lt; class ExecutionPolicy, class ForwardIt, class T &gt;
typename std::iterator_traits&lt;ForwardIt&gt;::difference_type
    count( ExecutionPolicy&amp;&amp; policy,
           ForwardIt first, ForwardIt last, const T&amp; value );
}}
{{dcl|since=c++26|1=
template&lt; class ExecutionPolicy,
          class ForwardIt, class T = typename std::iterator_traits
                                         &lt;ForwardIt&gt;::value_type &gt;
typename std::iterator_traits&lt;ForwardIt&gt;::difference_type
    count( ExecutionPolicy&amp;&amp; policy,
           ForwardIt first, ForwardIt last, const T&amp; value );
}}
{{dcl rev end}}
{{dcla|num=3|constexpr=c++20|
template&lt; class InputIt, class UnaryPred &gt;
typename std::iterator_traits&lt;InputIt&gt;::difference_type
    count_if( InputIt first, InputIt last, UnaryPred p );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt, class UnaryPred &gt;
typename std::iterator_traits&lt;ForwardIt&gt;::difference_type
    count_if( ExecutionPolicy&amp;&amp; policy,
              ForwardIt first, ForwardIt last, UnaryPred p );
}}
{{dcl end}}

Returns the number of elements in the range {{range|first|last}} satisfying specific criteria.

@1@ Counts the elements that are equal to {{c|value}} (using {{c/core|1=operator==}}).

@3@ Counts elements for which predicate {{c|p}} returns {{c|true}}.

@2,4@ Same as {{v|1,3}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to examine}}
{{par|value|the value to search for}}
{{par exec pol}}
{{par pred1|p|value=true|for the required elements|p1=InputIt}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par req named|ForwardIt|ForwardIterator}}
{{par req named|UnaryPred|Predicate}}
{{par end}}

===Return value===
The number of iterators {{c|it}} in the [[cpp/iterator#Ranges|range]] {{range|first|last}} satisfying the following condition:
@1,2@ {{c|1=*it == value}} is {{c|true}}.
@3,4@ {{c|1=p(*it) != false}} is {{c|true}}.

===Complexity===
Given {{mathjax-or|\(\scriptsize N\)|N}} as {{c|std::distance(first, last)}}:
@1,2@ Exactly {{mathjax-or|\(\scriptsize N\)|N}} comparisons with {{c|value}} using {{c/core|1=operator==}}.
@3,4@ Exactly {{mathjax-or|\(\scriptsize N\)|N}} applications of the predicate {{c|p}}.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===Notes===
For the number of elements in the range {{range|first|last}} without any additional criteria, see {{lc|std::distance}}.

{{feature test macro|__cpp_lib_algorithm_default_value_type|value=202403|std=C++26|[[cpp/language/list initialization|List-initialization]] for algorithms {{vl|1,2}}}}

===Possible implementation===
See also the implementations of {{tt|count}} in [https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L4056 libstdc++] and [https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L1171 libc++].

See also the implementations of {{tt|count_if}} in [https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L4079 libstdc++] and [https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L1186 libc++].

{{eq impl
|title1=count|ver1=1|1=
template&lt;class InputIt, class T = typename std::iterator_traits&lt;InputIt&gt;::value_type&gt;
typename std::iterator_traits&lt;InputIt&gt;::difference_type
    count(InputIt first, InputIt last, const T&amp; value)
{
    typename std::iterator_traits&lt;InputIt&gt;::difference_type ret = 0;
    for (; first != last; ++first)
        if (*first == value)
            ++ret;
    return ret;
}
|title2=count_if|ver2=3|2=
template&lt;class InputIt, class UnaryPred&gt;
typename std::iterator_traits&lt;InputIt&gt;::difference_type
    count_if(InputIt first, InputIt last, UnaryPred p)
{
    typename std::iterator_traits&lt;InputIt&gt;::difference_type ret = 0;
    for (; first != last; ++first)
        if (p(*first))
            ++ret;
    return ret;
}
}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;cassert&gt;
#include &lt;complex&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;

int main()
{
    constexpr std::array v{1, 2, 3, 4, 4, 3, 7, 8, 9, 10};
    std::cout &lt;&lt; "v: ";
    std::copy(v.cbegin(), v.cend(), std::ostream_iterator&lt;int&gt;(std::cout, " "));
    std::cout &lt;&lt; '\n';
    
    // Determine how many integers match a target value.
    for (const int target : {3, 4, 5})
    {
        const int num_items = std::count(v.cbegin(), v.cend(), target);
        std::cout &lt;&lt; "number: " &lt;&lt; target &lt;&lt; ", count: " &lt;&lt; num_items &lt;&lt; '\n';
    }
    
    // Use a lambda expression to count elements divisible by 4.
    int count_div4 = std::count_if(v.begin(), v.end(), [](int i) { return i % 4 == 0; });
    std::cout &lt;&lt; "numbers divisible by four: " &lt;&lt; count_div4 &lt;&lt; '\n';
    
    // A simplified version of `distance` with O(N) complexity:
    auto distance = [](auto first, auto last)
    {
        return std::count_if(first, last, [](auto) { return true; });
    };
    static_assert(distance(v.begin(), v.end()) == 10);

    std::array&lt;std::complex&lt;double&gt;, 3&gt; nums{&lt;!----&gt;{&lt;!----&gt;{4, 2}, {1, 3}, {4, 2}&lt;!----&gt;}&lt;!----&gt;};
    #ifdef __cpp_lib_algorithm_default_value_type
        // T gets deduced making list-initialization possible
        auto c = std::count(nums.cbegin(), nums.cend(), {4, 2});
    #else
        auto c = std::count(nums.cbegin(), nums.cend(), std::complex&lt;double&gt;{4, 2});
    #endif
    assert(c == 2);
}
|output=
v: 1 2 3 4 4 3 7 8 9 10
number: 3, count: 2
number: 4, count: 2
number: 5, count: 0
numbers divisible by four: 3
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=283|std=C++98|before={{tt|T}} was required to be {{named req|EqualityComparable}}, but&lt;br&gt;the value type of {{tt|InputIt}} is not always {{tt|T}}|after=removed the requirement}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc distance}}
{{dsc inc|cpp/algorithm/ranges/dsc count}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
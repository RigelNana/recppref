{{cpp/title|swap_ranges}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|
template&lt; class ForwardIt1, class ForwardIt2 &gt;
ForwardIt2 swap_ranges( ForwardIt1 first1, ForwardIt1 last1,
                        ForwardIt2 first2 );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2 &gt;
ForwardIt2 swap_ranges( ExecutionPolicy&amp;&amp; policy,
                        ForwardIt1 first1, ForwardIt1 last1,
                        ForwardIt2 first2 );
}}
{{dcl end}}

@1@ Exchanges elements between range {{range|first1|last1}} and another range of {{c|std::distance(first1, last1)}} elements starting at {{c|first2}}.

@2@ Same as {{v|1}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition}}

If any of the following conditions is satisfied, the behavior is undefined:
* The two ranges overlap.
* There exists a pair of corresponding iterators {{c|iter1}} and {{c|iter2}} in the two ranges such that {{c|*iter1}} is not {{named req|Swappable}} with {{c|*iter2}}.

===Parameters===
{{par begin}}
{{par|first1, last1|the first range of elements to swap}}
{{par|first2|beginning of the second range of elements to swap}}
{{par exec pol}}
{{par hreq}}
{{par req named|ForwardIt1, ForwardIt2|ForwardIterator}}
{{par end}}

===Return value===
Iterator to the element past the last element exchanged in the range beginning with {{c|first2}}.

===Complexity===
Exactly {{c|std::distance(first1, last1)}} swaps.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=yes}}

===Notes===
{{cpp/algorithm/notes swap vectorization}}

===Possible implementation===
{{eq fun|1=
template&lt;class ForwardIt1, class ForwardIt2&gt;
constexpr //&lt; since C++20
ForwardIt2 swap_ranges(ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2)
{
    for (; first1 != last1; ++first1, ++first2)
        std::iter_swap(first1, first2);
    
    return first2;
}
}}

===Example===
{{example
|Demonstrates swapping of subranges from different containers.
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;list&gt;
#include &lt;vector&gt;

auto print = [](auto comment, auto const&amp; seq)
{
    std::cout &lt;&lt; comment;
    for (const auto&amp; e : seq)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
};

int main()
{
    std::vector&lt;char&gt; v{'a', 'b', 'c', 'd', 'e'};
    std::list&lt;char&gt; l{'1', '2', '3', '4', '5'};
    
    print("Before swap_ranges:\n" "v: ", v);
    print("l: ", l);
    
    std::swap_ranges(v.begin(), v.begin() + 3, l.begin());
    
    print("After swap_ranges:\n" "v: ", v);
    print("l: ", l);
}
|output=
Before swap_ranges:
v: a b c d e
l: 1 2 3 4 5
After swap_ranges:
v: 1 2 3 d e
l: a b c 4 5
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc iter_swap}}
{{dsc inc|cpp/algorithm/dsc swap}}
{{dsc inc|cpp/algorithm/ranges/dsc swap_ranges}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
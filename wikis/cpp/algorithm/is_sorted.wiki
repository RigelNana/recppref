{{cpp/title|is_sorted}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|since=c++11|notes={{mark constexpr since c++20}}|
template&lt; class ForwardIt &gt;
bool is_sorted( ForwardIt first, ForwardIt last );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt &gt;
bool is_sorted( ExecutionPolicy&amp;&amp; policy,
                ForwardIt first, ForwardIt last );
}}
{{dcla|num=3|since=c++11|notes={{mark constexpr since c++20}}|
template&lt; class ForwardIt, class Compare &gt;
bool is_sorted( ForwardIt first, ForwardIt last, Compare comp );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt, class Compare &gt;
bool is_sorted( ExecutionPolicy&amp;&amp; policy,
                ForwardIt first, ForwardIt last, Compare comp );
}}
{{dcl end}}

Checks if the elements in range {{range|first|last}} are sorted in non-descending order.

@1@ Checks if the elements are {{rlp|/#Requirements|sorted}} with respect to {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}.

@3@ Checks if the elements are sorted with respect to {{c|comp}}.

@2,4@ Same as {{v|1,3}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to examine}}
{{par exec pol}}
{{par cmp ord|comp|p1=ForwardIt}}
{{par hreq}}
{{par req named|ForwardIt|ForwardIterator}}
{{par req named|Compare|Compare}}
{{par end}}

===Return value===
{{c|true}} if the elements in the range are sorted in non-descending order, {{c|false}} otherwise.

===Complexity===
Given {{mathjax-or|\(\scriptsize N\)|N}} as {{c|std::distance(first, last)}}:

@1,2@ {{mathjax-or|\(\scriptsize O(N)\)|O(N)}} comparisons using {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}.

@3,4@ {{mathjax-or|\(\scriptsize O(N)\)|O(N)}} applications of the comparator {{c|comp}}.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===Possible implementation===
See also the implementations in [https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L3184 libstdc++] and [https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L3642 libc++].

{{eq impl
|title1=is_sorted (1)|ver1=1|1=
template&lt;class ForwardIt&gt;
bool is_sorted(ForwardIt first, ForwardIt last)
{
    return std::is_sorted_until(first, last) == last;
}
|title2=is_sorted (3)|ver2=3|2=
template&lt;class ForwardIt, class Compare&gt;
bool is_sorted(ForwardIt first, ForwardIt last, Compare comp)
{
    return std::is_sorted_until(first, last, comp) == last;
}
}}

===Notes===
{{tt|std::is_sorted}} returns {{c|true}} for empty ranges and ranges of length one.

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;functional&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;int&gt; v;
    assert(std::is_sorted(v.cbegin(), v.cend()) &amp;&amp; "an empty range is always sorted");
    v.push_back(42);
    assert(std::is_sorted(v.cbegin(), v.cend()) &amp;&amp; "a range of size 1 is always sorted");
    
    int data[] = {3, 1, 4, 1, 5};
    assert(not std::is_sorted(std::begin(data), std::end(data)));
    
    std::sort(std::begin(data), std::end(data));
    assert(std::is_sorted(std::begin(data), std::end(data)));
    assert(not std::is_sorted(std::begin(data), std::end(data), std::greater&lt;&gt;{}));
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc is_sorted_until}}
{{dsc inc|cpp/algorithm/ranges/dsc is_sorted}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|sort_heap}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|notes={{mark constexpr since c++20}}|
template&lt; class RandomIt &gt;
void sort_heap( RandomIt first, RandomIt last );
}}
{{dcla|num=2|notes={{mark constexpr since c++20}}|
template&lt; class RandomIt, class Compare &gt;
void sort_heap( RandomIt first, RandomIt last, Compare comp );
}}
{{dcl end}}

Converts the {{rlp|/#Heap operations|heap}} {{range|first|last}} into a sorted range. The heap property is no longer maintained.

@1@ The heap is with respect to {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}, and will be sorted with respect to {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}.
@2@ The heap is with respect to {{c|comp}}, and will be sorted with respect to {{c|comp}}.

If any of the following conditions is satisfied, the behavior is undefined:
* {{range|first|last}} is not a heap.
{{rev begin}}
{{rev|until=c++11|
* The type of {{c|*first}} is not {{named req|Swappable}}.
}}
{{rev|since=c++11|
* {{tt|RandomIt}} is not {{named req|ValueSwappable}}.
* The type of {{c|*first}} is not {{named req|MoveConstructible}}.
* The type of {{c|*first}} is not {{named req|MoveAssignable}}.
}}
{{rev end}}

===Parameters===
{{par begin}}
{{par|first, last|the heap to be sorted}}
{{par cmp|comp|p1=RandomIt}}
{{par hreq}}
{{par req named|RandomIt|RandomAccessIterator}}
{{par req named|Compare|Compare}}
{{par end}}

===Complexity===
Given {{mathjax-or|\(\scriptsize N\)|N}} as {{c|std::distance(first, last)}}:
@1@ At most {{mathjax-or|\(\scriptsize 2N \cdot \log(N)\)|2N⋅log(N)}} comparisons using {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}.
@2@ At most {{mathjax-or|\(\scriptsize 2N \cdot \log(N)\)|2N⋅log(N)}} applications of the comparison function {{c|comp}}.

===Possible implementation===
{{eq impl
|title1=sort_heap (1)|ver1=1|1=
template&lt;class RandomIt&gt;
void sort_heap(RandomIt first, RandomIt last)
{
    while (first != last)
        std::pop_heap(first, last--);
}
|title2=sort_heap (2)|ver2=2|2=
template&lt;class RandomIt, class Compare&gt;
void sort_heap(RandomIt first, RandomIt last, Compare comp)
{
    while (first != last)
        std::pop_heap(first, last--, comp);
}
}}

===Example===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;
#include &lt;vector&gt;

void println(std::string_view fmt, const auto&amp; v)
{
    for (std::cout &lt;&lt; fmt; const auto &amp;i : v)
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::vector&lt;int&gt; v{3, 1, 4, 1, 5, 9};
    
    std::make_heap(v.begin(), v.end());
    println("after make_heap, v: ", v);
    
    std::sort_heap(v.begin(), v.end());
    println("after sort_heap, v: ", v);
}
|output=
after make_heap, v: 9 4 5 1 1 3
after sort_heap, v: 1 1 3 4 5 9
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2444|std=C++98|before=at most {{mathjax-or|\(\scriptsize N \cdot \log(N)\)|N⋅log(N)}} comparisons were allowed|after=increased to {{mathjax-or|\(\scriptsize 2N \cdot \log(N)\)|2N⋅log(N)}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc is_heap}}
{{dsc inc|cpp/algorithm/dsc is_heap_until}}
{{dsc inc|cpp/algorithm/dsc make_heap}}
{{dsc inc|cpp/algorithm/dsc pop_heap}}
{{dsc inc|cpp/algorithm/dsc push_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc sort_heap}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
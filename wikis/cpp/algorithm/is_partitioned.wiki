{{cpp/title|is_partitioned}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|since=c++11|notes={{mark constexpr since c++20}}|
template&lt; class InputIt, class UnaryPred &gt;
bool is_partitioned( InputIt first, InputIt last, UnaryPred p );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt, class UnaryPred &gt;
bool is_partitioned( ExecutionPolicy&amp;&amp; policy,
                     ForwardIt first, ForwardIt last, UnaryPred p );
}}
{{dcl end}}

@1@ Checks whether {{range|first|last}} is partitioned by the predicate {{c|p}}: all elements satisfy {{c|p}} appear before all elements that do not.

@2@ Same as {{v|1}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to check}}
{{par exec pol}}
{{par pred1|p|for the elements expected to be found in the beginning of the range|p1=InputIt}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par req named|ForwardIt|ForwardIterator|notes=and its value type must be convertible to {{tt|UnaryPred}}'s parameter type.}}
{{par req named|UnaryPred|Predicate}}
{{par end}}

===Return value===
{{c|true}} if the elements {{c|e}} of {{range|first|last}} are {{rlp|/#Requirements|partitioned}} with respect to the expression {{c|p(e)}}. {{c|false}} otherwise.

===Complexity===
At most {{c|std::distance(first, last)}} applications of {{c|p}}.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=yes}}

===Possible implementation===
{{eq fun|1=
template&lt;class InputIt, class UnaryPred&gt;
bool is_partitioned(InputIt first, InputIt last, UnaryPred p)
{
    for (; first != last; ++first)
        if (!p(*first))
            break;
    for (; first != last; ++first)
        if (p(*first))
            return false;
    return true;
}
}}

===Example===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;iostream&gt;

int main()
{
    std::array&lt;int, 9&gt; v {1, 2, 3, 4, 5, 6, 7, 8, 9};
    
    auto is_even = [](int i) { return i % 2 == 0; };
    std::cout.setf(std::ios_base::boolalpha);
    std::cout &lt;&lt; std::is_partitioned(v.begin(), v.end(), is_even) &lt;&lt; ' ';
    
    std::partition(v.begin(), v.end(), is_even);
    std::cout &lt;&lt; std::is_partitioned(v.begin(), v.end(), is_even) &lt;&lt; ' ';
    
    std::reverse(v.begin(), v.end());
    std::cout &lt;&lt; std::is_partitioned(v.cbegin(), v.cend(), is_even) &lt;&lt; ' ';
    std::cout &lt;&lt; std::is_partitioned(v.crbegin(), v.crend(), is_even) &lt;&lt; '\n';
}
|output=
false true false true
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc partition}}
{{dsc inc|cpp/algorithm/dsc partition_point}}
{{dsc inc|cpp/algorithm/ranges/dsc is_partitioned}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|stable_sort}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|constexpr=c++26|
template&lt; class RandomIt &gt;
void stable_sort( RandomIt first, RandomIt last );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class RandomIt &gt;
void stable_sort( ExecutionPolicy&amp;&amp; policy,
                  RandomIt first, RandomIt last );
}}
{{dcla|num=3|constexpr=c++26|
template&lt; class RandomIt, class Compare &gt;
void stable_sort( RandomIt first, RandomIt last, Compare comp );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy, class RandomIt, class Compare &gt;
void stable_sort( ExecutionPolicy&amp;&amp; policy,
                  RandomIt first, RandomIt last, Compare comp );
}}
{{dcl end}}

Sorts the elements in the range {{range|first|last}} in non-descending order. The order of equivalent elements is guaranteed to be preserved.

@1@ Elements are {{rlp|/#Requirements|sorted}} with respect to {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}.

@3@ Elements are sorted with respect to {{c|comp}}.

@2,4@ Same as {{v|1,3}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

If any of the following conditions is satisfied, the behavior is undefined:
{{rev begin}}
{{rev|until=c++11|
* The type of {{c|*first}} is not {{named req|Swappable}}.
}}
{{rev|since=c++11|
* {{tt|RandomIt}} is not {{named req|ValueSwappable}}.
* The type of {{c|*first}} is not {{named req|MoveConstructible}}.
* The type of {{c|*first}} is not {{named req|MoveAssignable}}.
}}
{{rev end}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to sort}}
{{par exec pol}}
{{par cmp ord|comp|p1=RandomIt}}
{{par hreq}}
{{par req named|RandomIt|RandomAccessIterator}}
{{par req named|Compare|Compare}}
{{par end}}

===Complexity===
Given {{mathjax-or|\(\scriptsize N\)|N}} as {{c|last - first}}:
@1,2@ {{mathjax-or|\(\scriptsize O(N \cdot \log(N))\)|O(N路log(N))}} comparisons using {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} if enough extra memory is available, otherwise {{mathjax-or|\(\scriptsize O(N \cdot \log^{2}(N))\)|O(N路log{{su|p=2}}(N))}} comparisons.
@3,4@ {{mathjax-or|\(\scriptsize O(N \cdot \log(N))\)|O(N路log(N))}} applications of the comparator {{c|comp}} if enough extra memory is available, otherwise {{mathjax-or|\(\scriptsize O(N \cdot \log^{2}(N))\)|O(N路log{{su|p=2}}(N))}} applications.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===Possible implementation===
See also the implementations in [https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L4977 libstdc++] and [https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L4696 libc++].

===Notes===
This function attempts to allocate a temporary buffer equal in size to the sequence to be sorted. If the allocation fails, the less efficient algorithm is chosen.

{{feature test macro|__cpp_lib_constexpr_algorithms|{{c/core|constexpr}} stable sorting, overloads {{vl|1}}, {{vl|3}}|value=202306L|std=C++26}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
 
struct Employee
{
    int age;
    std::string name; // Does not participate in comparisons
};
 
bool operator&lt;(const Employee&amp; lhs, const Employee&amp; rhs)
{
    return lhs.age &lt; rhs.age;
}

#if __cpp_lib_constexpr_algorithms &gt;= 202306L
consteval auto get_sorted()
{
    auto v = std::array{3, 1, 4, 1, 5, 9};
    std::stable_sort(v.begin(), v.end());
    return v;
}
static_assert(std::ranges::is_sorted(get_sorted()));
#endif

int main()
{
    std::vector&lt;Employee&gt; v{&lt;!----&gt;{108, "Zaphod"}, {32, "Arthur"}, {108, "Ford"}&lt;!----&gt;};
 
    std::stable_sort(v.begin(), v.end());
 
    for (const Employee&amp; e : v)
        std::cout &lt;&lt; e.age &lt;&lt; ", " &lt;&lt; e.name &lt;&lt; '\n';
}
|output=
32, Arthur
108, Zaphod
108, Ford
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc sort}}
{{dsc inc|cpp/algorithm/dsc partial_sort}}
{{dsc inc|cpp/algorithm/dsc stable_partition}}
{{dsc inc|cpp/algorithm/ranges/dsc stable_sort}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
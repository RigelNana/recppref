{{cpp/title|find_end}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|notes={{mark constexpr since c++20}}|
template&lt; class ForwardIt1, class ForwardIt2 &gt;
ForwardIt1 find_end( ForwardIt1 first, ForwardIt1 last,
                     ForwardIt2 s_first, ForwardIt2 s_last );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt1, class ForwardIt2 &gt;
ForwardIt1 find_end( ExecutionPolicy&amp;&amp; policy,
                     ForwardIt1 first, ForwardIt1 last,
                     ForwardIt2 s_first, ForwardIt2 s_last );
}}
{{dcla|num=3|notes={{mark constexpr since c++20}}|
template&lt; class ForwardIt1, class ForwardIt2, class BinaryPred &gt;
ForwardIt1 find_end( ForwardIt1 first, ForwardIt1 last,
                     ForwardIt2 s_first, ForwardIt2 s_last,
                     BinaryPred p );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2, class BinaryPred &gt;
ForwardIt1 find_end( ExecutionPolicy&amp;&amp; policy,
                     ForwardIt1 first, ForwardIt1 last,
                     ForwardIt2 s_first, ForwardIt2 s_last,
                     BinaryPred p );
}}
{{dcl end}}

Searches for the last occurrence of the sequence {{range|s_first|s_last}} in the range {{range|first|last}}.

@1@ Elements are compared using {{c/core|1=operator==}}.

@3@ Elements are compared using the given binary predicate {{c|p}}.

@2,4@ Same as {{v|1,3}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition|plural=true}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to examine}}
{{par|s_first, s_last|the range of elements to search for}}
{{par exec pol}}
{{par pred2 eq|p|p1=ForwardIt1|p2=ForwardIt2}}
{{par hreq}}
{{par req named|ForwardIt1|ForwardIterator}}
{{par req named|ForwardIt2|ForwardIterator}}
{{par end}}

===Return value===
Iterator to the beginning of last occurrence of the sequence {{range|s_first|s_last}} in range {{range|first|last}}.

If {{range|s_first|s_last}} is empty or if no such sequence is found, {{c|last}} is returned.

===Complexity===
Given {{mathjax-or|\(\scriptsize N\)|N}} as {{c|std::distance(first, last)}} and {{mathjax-or|\(\scriptsize S\)|S}} as {{c|std::distance(s_first, s_last)}}:
@1,2@ At most {{mathjax-or|\(\scriptsize S\cdot(N-S+1)\)|S&amp;middot;(N-S+1)}} comparisons using {{c/core|1=operator==}}.
@3,4@ At most {{mathjax-or|\(\scriptsize S\cdot(N-S+1)\)|S&amp;middot;(N-S+1)}} applications of the predicate {{c|p}}.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===Possible implementation===
{{eq impl
|title1=find_end (1)|ver1=1|1=
template&lt;class ForwardIt1, class ForwardIt2&gt;
constexpr //&lt; since C++20
ForwardIt1 find_end(ForwardIt1 first, ForwardIt1 last,
                    ForwardIt2 s_first, ForwardIt2 s_last)
{
    if (s_first == s_last)
        return last;
    
    ForwardIt1 result = last;
    while (true)
    {
        ForwardIt1 new_result = std::search(first, last, s_first, s_last);
        if (new_result == last)
            break;
        else
        {
            result = new_result;
            first = result;
            ++first;
        }
    }
    return result;
}
|title2=find_end (3)|ver2=3|2=
template&lt;class ForwardIt1, class ForwardIt2, class BinaryPred&gt;
constexpr //&lt; since C++20
ForwardIt1 find_end(ForwardIt1 first, ForwardIt1 last,
                    ForwardIt2 s_first, ForwardIt2 s_last,
                    BinaryPred p)
{
    if (s_first == s_last)
        return last;
    
    ForwardIt1 result = last;
    while (true)
    {
        ForwardIt1 new_result = std::search(first, last, s_first, s_last, p);
        if (new_result == last)
            break;
        else
        {
            result = new_result;
            first = result;
            ++first;
        }
    }
    return result;
}
}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;

auto print_result = [](auto result, const auto&amp; v)
{
    result == v.end()
        ? std::cout &lt;&lt; "Sequence not found\n"
        : std::cout &lt;&lt; "Last occurrence is at: " &lt;&lt; std::distance(v.begin(), result)
                    &lt;&lt; '\n';
};

int main()
{
    const auto v = {1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4};
    
    for (auto const&amp; x : {std::array{1, 2, 3}, {4, 5, 6}&lt;!----&gt;})
    {
        auto iter = std::find_end(v.begin(), v.end(), x.begin(), x.end()); // overload (1)
        print_result(iter, v);
    }
    
    for (auto const&amp; x : {std::array{-1, -2, -3}, {-4, -5, -6}&lt;!----&gt;})
    {
        auto iter = std::find_end(v.begin(), v.end(), x.begin(), x.end(), // overload (3)
                                  [](int x, int y)
                                  {
                                      return std::abs(x) == std::abs(y);
                                  });
        print_result(iter, v);
    }
}
|output=
Last occurrence is at: 8
Sequence not found
Last occurrence is at: 8
Sequence not found
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=1205|std=C++98|before=the return value was unclear if {{range|s_first|s_last}} is empty|after=returns {{c|last}} in this case}}
{{dr list item|wg=lwg|dr=2150|std=C++98|before=the condition of “sequence occurence” was incorrect|after=corrected}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc search}}
{{dsc inc|cpp/algorithm/dsc includes}}
{{dsc inc|cpp/algorithm/dsc adjacent_find}}
{{dsc inc|cpp/algorithm/dsc find}}
{{dsc inc|cpp/algorithm/dsc find_first_of}}
{{dsc inc|cpp/algorithm/dsc search_n}}
{{dsc inc|cpp/algorithm/ranges/dsc find_end}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
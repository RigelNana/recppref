{{cpp/title|copy_backward}}
{{cpp/algorithm/navbar}}
{{ddcl|header=algorithm|notes={{mark constexpr since c++20}}|
template&lt; class BidirIt1, class BidirIt2 &gt;
BidirIt2 copy_backward( BidirIt1 first, BidirIt1 last, BidirIt2 d_last );
}}

Copies the elements from the range {{range|first|last}} to another range ending at {{c|d_last}}. The elements are copied in reverse order (the last element is copied first), but their relative order is preserved.

The behavior is undefined if {{c|d_last}} is within {{range|first|last|left=(|right=]}}. {{lc|std::copy}} must be used instead of {{tt|std::copy_backward}} in that case.

===Parameters===
{{par begin}}
{{par|first, last|the range of the elements to copy from}}
{{par|d_last|the end of the destination range}}
{{par hreq}}
{{par req named|BidirIt|BidirectionalIterator}}
{{par end}}

===Return value===
Iterator to the last element copied.

===Complexity===
Exactly {{c|std::distance(first, last)}} assignments.

===Notes===
When copying overlapping ranges, {{lc|std::copy}} is appropriate when copying to the left (beginning of the destination range is outside the source range) while {{tt|std::copy_backward}} is appropriate when copying to the right (end of the destination range is outside the source range).

===Possible implementation===
{{eq fun|1=
template&lt;class BidirIt1, class BidirIt2&gt;
BidirIt2 copy_backward(BidirIt1 first, BidirIt1 last, BidirIt2 d_last)
{
    while (first != last)
        *(--d_last) = *(--last);
    return d_last;
}
}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;int&gt; source(4);
    std::iota(source.begin(), source.end(), 1); // fills with 1, 2, 3, 4
    
    std::vector&lt;int&gt; destination(6);
    
    std::copy_backward(source.begin(), source.end(), destination.end());
    
    std::cout &lt;&lt; "destination contains: ";
    for (auto i: destination)
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
destination contains: 0 0 1 2 3 4
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=1206|std=C++98|before=1. the behavior was well-defined if {{c|1=d_last == last}}&lt;br&gt;2. the behavior was undefined if {{c|1=d_last == first}}|after=1. made undefined&lt;br&gt;2. made well-defined}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc copy}}
{{dsc inc|cpp/algorithm/ranges/dsc copy_backward}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
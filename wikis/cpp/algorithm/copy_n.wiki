{{cpp/title|copy_n}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|since=c++11|notes={{mark constexpr since c++20}}|
template&lt; class InputIt, class Size, class OutputIt &gt;
OutputIt copy_n( InputIt first, Size count, OutputIt result );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class Size, class ForwardIt2 &gt;
ForwardIt2 copy_n( ExecutionPolicy&amp;&amp; policy,
                   ForwardIt1 first, Size count, ForwardIt2 result );
}}
{{dcl end}}

@1@ Copies exactly {{c|count}} values from the range beginning at {{c|first}} to the range beginning at {{c|result}}. Formally, for each integer {{c|i}} in {{range|0|count}}, performs {{c|1=*(result + i) = *(first + i)}}.
@@ Overlap of ranges is formally permitted, but leads to unpredictable ordering of the results.

@2@ Same as {{v|1}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition}}

===Parameters===
{{par begin}}
{{par|first|the beginning of the range of elements to copy from}}
{{par|count|number of the elements to copy}}
{{par|result|the beginning of the destination range}}
{{par exec pol}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par req named|OutputIt|OutputIterator}}
{{par req named|ForwardIt1, ForwardIt2|ForwardIterator}}
{{par end}}

===Return value===
Iterator in the destination range, pointing past the last element copied if {{c|count &gt; 0}} or {{c|result}} otherwise.

===Complexity===
Zero assignments if {{c|count &lt; 0}}; {{c|count}} assignments otherwise.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=yes}}

===Possible implementation===
{{eq fun|1=
template&lt;class InputIt, class Size, class OutputIt&gt;
constexpr //&lt; since C++20
OutputIt copy_n(InputIt first, Size count, OutputIt result)
{
    if (count &gt; 0)
    {
        *result = *first;
        ++result;
        for (Size i = 1; i != count; ++i, ++result)
            *result = *++first;
    }
    
    return result;
}
}}

===Example===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;numeric&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

int main()
{
    std::string in {"1234567890"};
    std::string out;
    
    std::copy_n(in.begin(), 4, std::back_inserter(out));
    std::cout &lt;&lt; out &lt;&lt; '\n';
    
    std::vector&lt;int&gt; v_in(128);
    std::iota(v_in.begin(), v_in.end(), 1);
    std::vector&lt;int&gt; v_out(v_in.size());
    
    std::copy_n(v_in.cbegin(), 100, v_out.begin());
    std::cout &lt;&lt; std::accumulate(v_out.begin(), v_out.end(), 0) &lt;&lt; '\n';
}
|output=
1234
5050
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc copy}}
{{dsc inc|cpp/algorithm/ranges/dsc copy_n}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|search_n}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl rev begin|num=1}}
{{dcla|anchor=1|constexpr=c++20|until=c++26|
template&lt; class ForwardIt, class Size, class T &gt;
ForwardIt search_n( ForwardIt first, ForwardIt last,
                    Size count, const T&amp; value );
}}
{{dcl|since=c++26|1=
template&lt; class ForwardIt, class Size,
          class T = typename std::iterator_traits
                        &lt;ForwardIt&gt;::value_type &gt;
constexpr ForwardIt search_n( ForwardIt first, ForwardIt last,
                              Size count, const T&amp; value );
}}
{{dcl rev end}}
{{dcl rev begin|num=2}}
{{dcl|since=c++17|until=c++26|
template&lt; class ExecutionPolicy,
          class ForwardIt, class Size, class T &gt;
ForwardIt search_n( ExecutionPolicy&amp;&amp; policy,
                    ForwardIt first, ForwardIt last,
                    Size count, const T&amp; value );
}}
{{dcl|since=c++26|1=
template&lt; class ExecutionPolicy,
          class ForwardIt, class Size,
          class T = typename std::iterator_traits
                        &lt;ForwardIt&gt;::value_type &gt;
ForwardIt search_n( ExecutionPolicy&amp;&amp; policy,
                    ForwardIt first, ForwardIt last,
                    Size count, const T&amp; value );
}}
{{dcl rev end}}
{{dcl rev begin|num=3}}
{{dcla|anchor=3|constexpr=c++20|until=c++26|
template&lt; class ForwardIt, class Size, class T, class BinaryPred &gt;
ForwardIt search_n( ForwardIt first, ForwardIt last,
                    Size count, const T&amp; value, BinaryPred p );
}}
{{dcl|since=c++26|1=
template&lt; class ForwardIt, class Size,
          class T = typename std::iterator_traits
                        &lt;ForwardIt&gt;::value_type,
          class BinaryPred &gt;
constexpr ForwardIt search_n( ForwardIt first, ForwardIt last,
                    Size count, const T&amp; value, BinaryPred p );
}}
{{dcl rev end}}
{{dcl rev begin|num=4}}
{{dcl|since=c++17|until=c++26|
template&lt; class ExecutionPolicy, class ForwardIt, class Size,
          class T, class BinaryPred &gt;
ForwardIt search_n( ExecutionPolicy&amp;&amp; policy,
                    ForwardIt first, ForwardIt last,
                    Size count, const T&amp; value, BinaryPred p );
}}
{{dcl|since=c++26|1=
template&lt; class ExecutionPolicy, class ForwardIt, class Size,
          class T = typename std::iterator_traits
                        &lt;ForwardIt&gt;::value_type,
          class BinaryPred &gt;
ForwardIt search_n( ExecutionPolicy&amp;&amp; policy,
                    ForwardIt first, ForwardIt last,
                    Size count, const T&amp; value, BinaryPred p );
}}
{{dcl rev end}}
{{dcl end}}

Searches the range {{range|first|last}} for the first sequence of {{c|count}} identical elements, each equal to the given {{c|value}}.

@1@ Elements are compared using {{c/core|1=operator==}}.

@3@ Elements are compared using the given binary predicate {{c|p}}.

@2,4@ Same as {{v|1,3}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to examine}}
{{par|count|the length of the sequence to search for}}
{{par|value|the value of the elements to search for}}
{{par exec pol}}
{{par pred2 eq|p|p1=ForwardIt|t2=T}}
{{par hreq}}
{{par req named|ForwardIt|ForwardIterator}}
{{par req named|BinaryPred|BinaryPredicate}}
{{par req|{{tt|Size}} must be [[cpp/language/implicit cast|convertible]] to an [[cpp/language/type|integral type]].}}
{{par end}}

===Return value===
If {{c|count}} is positive, returns an iterator to the beginning of the first sequence found in the range {{range|first|last}}. Each iterator {{c|it}} in the sequence should satisfy the following condition:
@1,2@ {{c|1=*it == value}} is {{c|true}}.
@3,4@ {{c|1=p(*it, value) != false}} is {{c|true}}.

If no such sequence is found, {{c|last}} is returned.

If {{c|count}} is zero or negative, {{c|first}} is returned.

===Complexity===
Given {{mathjax-or|\(\scriptsize N\)|N}} as {{c|std::distance(first, last)}}:
@1,2@ At most {{mathjax-or|\(\scriptsize N\)|N}} comparisons using {{c/core|1=operator==}}.
@3,4@ At most {{mathjax-or|\(\scriptsize N\)|N}} applications of the predicate {{c|p}}.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===Possible implementation===
{{eq impl
|title1=search_n (1)|ver1=1|1=
template&lt;class ForwardIt, class Size,
         class T = typename std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;
ForwardIt search_n(ForwardIt first, ForwardIt last, Size count, const T&amp; value)
{
    if (count &lt;= 0)
        return first;
    
    for (; first != last; ++first)
    {
        if (!(*first == value))
            continue;
        
        ForwardIt candidate = first;
        
        for (Size cur_count = 1; true; ++cur_count)
        {
            if (cur_count &gt;= count)
                return candidate; // success
            
            ++first;
            if (first == last)
                return last; // exhausted the list
            
            if (!(*first == value))
                break; // too few in a row
        }
    }
    return last;
}
|title2=search_n (3)|ver2=3|2=
template&lt;class ForwardIt, class Size,
         class T = typename std::iterator_traits&lt;ForwardIt&gt;::value_type,
         class BinaryPred&gt;
ForwardIt search_n(ForwardIt first, ForwardIt last, Size count, const T&amp; value,
                   BinaryPred p)
{
    if (count &lt;= 0)
        return first;
    
    for (; first != last; ++first)
    {
        if (!p(*first, value))
            continue;
        
        ForwardIt candidate = first;
        
        for (Size cur_count = 1; true; ++cur_count)
        {
            if (cur_count &gt;= count)
                return candidate; // success
            
            ++first;
            if (first == last)
                return last; // exhausted the list
            
            if (!p(*first, value))
                break; // too few in a row
        }
    }
    return last;
}
}}

===Notes===
{{feature test macro|__cpp_lib_algorithm_default_value_type|value=202403|std=C++26|[[cpp/language/list initialization|List-initialization]] for algorithms {{vl|1-4}}}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;complex&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

template&lt;class Container, class Size, class T&gt;
constexpr bool consecutive_values(const Container&amp; c, Size count, const T&amp; v)
{
    return std::search_n(std::begin(c), std::end(c), count, v) != std::end(c);
}

int main()
{
    constexpr char sequence[] = ".0_0.000.0_0.";
    
    static_assert(consecutive_values(sequence, 3, '0'));
    
    for (int n : {4, 3, 2})
        std::cout &lt;&lt; std::boolalpha
                  &lt;&lt; "Has " &lt;&lt; n &lt;&lt; " consecutive zeros: "
                  &lt;&lt; consecutive_values(sequence, n, '0') &lt;&lt; '\n';

    std::vector&lt;std::complex&lt;double&gt;&gt; nums{{4, 2}, {4, 2}, {1, 3}};
    #ifdef __cpp_lib_algorithm_default_value_type
        auto it = std::search_n(nums.cbegin(), nums.cend(), 2, {4, 2});
    #else
        auto it = std::search_n(nums.cbegin(), nums.cend(), 2, std::complex&lt;double&gt;{4, 2});
    #endif
    assert(it == nums.begin());
}
|output=
Has 4 consecutive zeros: false
Has 3 consecutive zeros: true
Has 2 consecutive zeros: true
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=283|std=C++98|before={{tt|T}} was required to be {{named req|EqualityComparable}}, but&lt;br&gt;the value type of {{tt|InputIt}} is not always {{tt|T}}|after=removed the requirement}}
{{dr list item|wg=lwg|dr=426|std=C++98|before=the complexity upper limit was {{tt|N&amp;middot;count}},&lt;br&gt;it is negative if {{c|count}} is negative|after=the upper limit is {{c|0}}&lt;br&gt;if {{c|count}} is non-positive}}
{{dr list item|wg=lwg|dr=714|std=C++98|before=if {{c|1=count &gt; 0}}, the complexity upper limit was {{tt|N&amp;middot;count}}, but in&lt;br&gt;the worst case the number of comparisons/operations is always {{tt|N}}|after=changed the upper&lt;br&gt;limit to {{tt|N}} in this case}}
{{dr list item|wg=lwg|dr=2150|std=C++98|before=the condition of “sequence occurence” was incorrect|after=corrected}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc find_end}}
{{dsc inc|cpp/algorithm/dsc find}}
{{dsc inc|cpp/algorithm/dsc search}}
{{dsc inc|cpp/algorithm/ranges/dsc search_n}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
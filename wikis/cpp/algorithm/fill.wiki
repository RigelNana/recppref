{{cpp/title|fill}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl rev begin|num=1}}
{{dcla|anchor=1|constexpr=c++20|until=c++26|
template&lt; class ForwardIt, class T &gt;
void fill( ForwardIt first, ForwardIt last, const T&amp; value );
}}
{{dcl|since=c++26|1=
template&lt; class ForwardIt, class T = typename std::iterator_traits
                                         &lt;ForwardIt&gt;::value_type &gt;
constexpr void fill( ForwardIt first, ForwardIt last,
                     const T&amp; value );
}}
{{dcl rev end}}
{{dcl rev begin|num=2}}
{{dcl|since=c++17|until=c++26|
template&lt; class ExecutionPolicy, class ForwardIt, class T &gt;
void fill( ExecutionPolicy&amp;&amp; policy,
           ForwardIt first, ForwardIt last, const T&amp; value );
}}
{{dcl|since=c++26|1=
template&lt; class ExecutionPolicy,
          class ForwardIt, class T = typename std::iterator_traits
                                         &lt;ForwardIt&gt;::value_type &gt;
void fill( ExecutionPolicy&amp;&amp; policy,
           ForwardIt first, ForwardIt last, const T&amp; value );
}}
{{dcl rev end}}
{{dcl end}}

@1@ Assigns the given {{c|value}} to all elements in the range {{range|first|last}}.

@2@ Same as {{v|1}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition}}

If {{c|value}} is not [[cpp/iterator#Types and writability|writable]] to {{c|first}}, the program is ill-formed.

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to modify}}
{{par|value|the value to be assigned}}
{{par exec pol}}
{{par hreq}}
{{par req named|ForwardIt|ForwardIterator}}
{{par end}}

===Complexity===
Exactly {{c|std::distance(first, last)}} assignments.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=yes}}

===Possible implementation===
{{eq impl|ver1=1|title1=fill|1=
template&lt;class ForwardIt,
         class T = typename std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;
void fill(ForwardIt first, ForwardIt last, const T&amp; value)
{
    for (; first != last; ++first)
        *first = value;
}
}}

===Notes===
{{feature test macro|__cpp_lib_algorithm_default_value_type|value=202403|std=C++26|[[cpp/language/list initialization|List-initialization]] for algorithms {{vl|1,2}}}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;complex&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

void println(const auto&amp; seq)
{
    for (const auto&amp; e : seq)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::vector&lt;int&gt; v{0, 1, 2, 3, 4, 5, 6, 7, 8};
    println(v);
    
    // set all of the elements to 8
    std::fill(v.begin(), v.end(), 8);
    println(v);

    std::vector&lt;std::complex&lt;double&gt;&gt; nums{&lt;!----&gt;{1, 3}, {2, 2}, {4, 8}&lt;!----&gt;};
    println(nums);
    #ifdef __cpp_lib_algorithm_default_value_type
        std::fill(nums.begin(), nums.end(), {4, 2});
    #else
        std::fill(nums.begin(), nums.end(), std::complex&lt;double&gt;{4, 2});
    #endif
    println(nums);
}
|output=
0 1 2 3 4 5 6 7 8
8 8 8 8 8 8 8 8 8
(1,3) (2,2) (4,8) 
(4,2) (4,2) (4,2)
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=283|std=C++98|before={{tt|T}} was required to be {{named req|CopyAssignable}}, but&lt;br&gt;{{tt|T}} is not always writable to {{tt|ForwardIt}}|after=required to be writable instead}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc fill_n}}
{{dsc inc|cpp/algorithm/dsc copy}}
{{dsc inc|cpp/algorithm/dsc generate}}
{{dsc inc|cpp/algorithm/dsc transform}}
{{dsc inc|cpp/algorithm/ranges/dsc fill}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
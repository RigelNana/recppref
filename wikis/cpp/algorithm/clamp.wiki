{{cpp/title|clamp}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|since=c++17|
template&lt; class T &gt;
constexpr const T&amp; clamp( const T&amp; v, const T&amp; lo, const T&amp; hi );
}}
{{dcla|num=2|since=c++17|
template&lt; class T, class Compare &gt;
constexpr const T&amp; clamp( const T&amp; v, const T&amp; lo, const T&amp; hi,
                          Compare comp );
}}
{{dcl end}}

If the value of {{c|v}} is within {{closed range|lo|hi}}, returns {{c|v}}; otherwise returns the nearest boundary.

@1@ Uses {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} to compare the values.
@@ If {{tt|T}} is not {{named req|LessThanComparable}}, the behavior is undefined.&lt;ref&gt;If {{tt|NaN}} is avoided, {{tt|T}} can be a floating-point type.&lt;/ref&gt;

@2@ Uses the comparison function {{c|comp}} to compare the values.

If {{c|lo}} is greater than {{c|hi}}, the behavior is undefined.

&lt;references/&gt;

===Parameters===
{{par begin}}
{{par|v|the value to clamp}}
{{par|lo, hi|the boundaries to clamp {{c|v}} to}}
{{par cmp|comp|t1=T}}
{{par end}}

===Return value===
Reference to {{c|lo}} if {{c|v}} is less than {{c|lo}}, reference to {{c|hi}} if {{c|hi}} is less than {{c|v}}, otherwise reference to {{c|v}}.

===Complexity===
@1@ At most two comparisons using {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}.

@2@ At most two applications of the comparison function {{c|comp}}.

===Possible implementation===
{{eq impl
|title1=clamp (1)|ver1=1|1=
template&lt;class T&gt;
constexpr const T&amp; clamp(const T&amp; v, const T&amp; lo, const T&amp; hi)
{
    return clamp(v, lo, hi, less{});
}
|title2=clamp (2)|ver2=2|2=
template&lt;class T, class Compare&gt;
constexpr const T&amp; clamp(const T&amp; v, const T&amp; lo, const T&amp; hi, Compare comp)
{
    return comp(v, lo) ? lo : comp(hi, v) ? hi : v;
}
}}

===Notes===
{{include|cpp/algorithm/minmax_danger_note|clamp}}

If {{c|v}} compares equivalent to either bound, returns a reference to {{c|v}}, not the bound.

{{feature test macro|__cpp_lib_clamp|std=C++17|value=201603L|{{ttt|std::clamp}}}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cstdint&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; "[raw] "
                 "[" &lt;&lt; INT8_MIN &lt;&lt; ',' &lt;&lt; INT8_MAX &lt;&lt; "] "
                 "[0," &lt;&lt; UINT8_MAX &lt;&lt; "]\n";

    for (const int v : {-129, -128, -1, 0, 42, 127, 128, 255, 256})
        std::cout &lt;&lt; std::setw(4) &lt;&lt; v
                  &lt;&lt; std::setw(11) &lt;&lt; std::clamp(v, INT8_MIN, INT8_MAX)
                  &lt;&lt; std::setw(8) &lt;&lt; std::clamp(v, 0, UINT8_MAX) &lt;&lt; '\n';
}
|output=
[raw] [-128,127] [0,255]
-129       -128       0
-128       -128       0
  -1         -1       0
   0          0       0
  42         42      42
 127        127     127
 128        127     128
 255        127     255
 256        127     255
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc min}}
{{dsc inc|cpp/algorithm/dsc max}}
{{dsc inc|cpp/utility/dsc in_range}}
{{dsc inc|cpp/algorithm/ranges/dsc clamp}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|sort}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|
template&lt; class RandomIt &gt;
void sort( RandomIt first, RandomIt last );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class RandomIt &gt;
void sort( ExecutionPolicy&amp;&amp; policy,
           RandomIt first, RandomIt last );
}}
{{dcl|num=3|notes={{mark constexpr since c++20}}|
template&lt; class RandomIt, class Compare &gt;
void sort( RandomIt first, RandomIt last, Compare comp );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy, class RandomIt, class Compare &gt;
void sort( ExecutionPolicy&amp;&amp; policy,
           RandomIt first, RandomIt last, Compare comp );
}}
{{dcl end}}

Sorts the elements in the range {{range|first|last}} in non-descending order. The order of equal elements is not guaranteed to be preserved.

@1@ Elements are {{rlp|/#Requirements|sorted}} with respect to {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}.

@3@ Elements are sorted with respect to {{c|comp}}.

@2,4@ Same as {{v|1,3}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

If any of the following conditions is satisfied, the behavior is undefined:
{{rev begin}}
{{rev|until=c++11|
* The type of {{c|*first}} is not {{named req|Swappable}}.
}}
{{rev|since=c++11|
* {{tt|RandomIt}} is not {{named req|ValueSwappable}}.
* The type of {{c|*first}} is not {{named req|MoveConstructible}}.
* The type of {{c|*first}} is not {{named req|MoveAssignable}}.
}}
{{rev end}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to sort}}
{{par exec pol}}
{{par cmp ord|comp|p1=RandomIt}}
{{par hreq}}
{{par req named|RandomIt|RandomAccessIterator}}
{{par req named|Compare|Compare}}
{{par end}}

===Complexity===
Given {{mathjax-or|\(\scriptsize N\)|N}} as {{c|last - first}}:
@1,2@ {{mathjax-or|\(\scriptsize O(N \cdot \log(N))\)|O(N路log(N))}} comparisons using {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}.
@3,4@ {{mathjax-or|\(\scriptsize O(N \cdot \log(N))\)|O(N路log(N))}} applications of the comparator {{c|comp}}.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===Possible implementation===
See also the implementations in [https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L1950 libstdc++] and [https://github.com/llvm/llvm-project/blob/e7fc254875ca9e82b899d5354fae9b5b779ff485/libcxx/include/__algorithm/sort.h#L264 libc++].

===Notes===
Before {{wg21|LWG713}}, the complexity requirement allowed {{tt|sort()}} to be implemented using only {{enwiki|Quicksort}}, which may need {{mathjax-or|\(\scriptsize O(N^2)\)|O(N{{su|p=2}})}} comparisons in the worst case.

{{enwiki|Introsort}} can handle all cases with {{mathjax-or|\(\scriptsize O(N \cdot \log(N))\)|O(N路log(N))}} comparisons (without incurring additional overhead in the average case), and thus is usually used for implementing {{tt|sort()}}.

libc++ has not implemented the corrected time complexity requirement [https://reviews.llvm.org/D113413 until LLVM 14].

===Example===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

int main()
{
    std::array&lt;int, 10&gt; s{5, 7, 4, 2, 8, 6, 1, 9, 0, 3};
    
    auto print = [&amp;s](std::string_view const rem)
    {
        for (auto a : s)
            std::cout &lt;&lt; a &lt;&lt; ' ';
        std::cout &lt;&lt; ": " &lt;&lt; rem &lt;&lt; '\n';
    };
    
    std::sort(s.begin(), s.end());
    print("sorted with the default operator&lt;");
    
    std::sort(s.begin(), s.end(), std::greater&lt;int&gt;());
    print("sorted with the standard library compare function object");
    
    struct
    {
        bool operator()(int a, int b) const { return a &lt; b; }
    }
    customLess;
    
    std::sort(s.begin(), s.end(), customLess);
    print("sorted with a custom function object");
    
    std::sort(s.begin(), s.end(), [](int a, int b)
                                  {
                                      return a &gt; b;
                                  });
    print("sorted with a lambda expression");
}
|output=
0 1 2 3 4 5 6 7 8 9 : sorted with the default operator&lt;
9 8 7 6 5 4 3 2 1 0 : sorted with the standard library compare function object
0 1 2 3 4 5 6 7 8 9 : sorted with a custom function object
9 8 7 6 5 4 3 2 1 0 : sorted with a lambda expression
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=713|std=C++98|before=the {{mathjax-or|\(\scriptsize O(N \cdot \log(N))\)|O(N路log(N))}} time complexity was only required on the average|after=it is required for the worst case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc partial_sort}}
{{dsc inc|cpp/algorithm/dsc stable_sort}}
{{dsc inc|cpp/algorithm/ranges/dsc sort}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
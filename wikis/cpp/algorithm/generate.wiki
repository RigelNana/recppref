{{cpp/title|generate}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|
template&lt; class ForwardIt, class Generator &gt;
void generate( ForwardIt first, ForwardIt last, Generator g );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt, class Generator &gt;
void generate( ExecutionPolicy&amp;&amp; policy,
               ForwardIt first, ForwardIt last, Generator g );
}}
{{dcl end}}

@1@ Assigns each element in range {{range|first|last}} a value generated by the given function object {{c|g}}.

@2@ Same as {{v|1}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to generate}}
{{par exec pol}}
{{par gen|g|rp=ForwardIt}}
{{par hreq}}
{{par req named|ForwardIt|ForwardIterator}}
{{par end}}

===Complexity===
Exactly {{c|std::distance(first, last)}} invocations of {{c|g()}} and assignments.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=yes}}

===Possible implementation===
{{eq fun|1=
template&lt;class ForwardIt, class Generator&gt;
constexpr //&lt; since C++20
void generate(ForwardIt first, ForwardIt last, Generator g)
{
    for (; first != last; ++first)
        *first = g();
}
}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

void println(std::string_view fmt, const auto&amp; v)
{
    for (std::cout &lt;&lt; fmt; const auto&amp; e : v)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
};


int f()
{
    static int i;
    return ++i;
}

int main()
{
    std::vector&lt;int&gt; v(5);
    
    std::generate(v.begin(), v.end(), f);
    println("v: ", v);
    
    // Initialize with default values 0,1,2,3,4 from a lambda function
    // Equivalent to std::iota(v.begin(), v.end(), 0);
    std::generate(v.begin(), v.end(), [n = 0] () mutable { return n++; });
    println("v: ", v);
}
|output=
v: 1 2 3 4 5
v: 0 1 2 3 4
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc fill}}
{{dsc inc|cpp/algorithm/dsc generate_n}}
{{dsc inc|cpp/algorithm/dsc iota}}
{{dsc inc|cpp/algorithm/ranges/dsc generate}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
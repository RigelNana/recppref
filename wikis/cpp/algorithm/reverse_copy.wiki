{{cpp/title|reverse_copy}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|
template&lt; class BidirIt, class OutputIt &gt;
OutputIt reverse_copy( BidirIt first, BidirIt last,
                       OutputIt d_first );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class BidirIt, class ForwardIt &gt;
ForwardIt reverse_copy( ExecutionPolicy&amp;&amp; policy,
                        BidirIt first, BidirIt last,
                        ForwardIt d_first );
}}
{{dcl end}}

@1@ Given {{mathjax-or|\(\scriptsize N\)|N}} as {{c|std::distance(first, last)}}. Copies the elements from the range {{range|first|last}} (source range) to another range of {{mathjax-or|\(\scriptsize N\)|N}} elements beginning at {{c|d_first}} (destination range) in such a way that the elements in the destination range are in reverse order.
@@ Behaves as if by executing the assignment {{c|1=*(d_first + N - 1 - i) = *(first + i)}}&lt;ref name="plusminus"&gt;{{named req|OutputIterator}} is not required to support binary {{tt|+}} and {{tt|-}}. The usages of {{tt|+}} and {{tt|-}} here are exposition-only: the actual computation does not need to use them.&lt;/ref&gt; once for each integer {{c|i}} in {{range|0|N}}.
@@ If source and destination ranges overlap, the behavior is undefined.

@2@ Same as {{v|1}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to copy}}
{{par|d_first|the beginning of the destination range}}
{{par hreq}}
{{par req named|BidirIt|BidirectionalIterator}}
{{par req named|OutputIt|OutputIterator}}
{{par req named|ForwardIt|ForwardIterator}}
{{par end}}

===Return value===
Output iterator to the element past the last element copied.

===Complexity===
Exactly {{mathjax-or|\(\scriptsize N\)|N}} assignments.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=yes}}

===Possible implementation===
See also the implementations in [https://github.com/gcc-mirror/gcc/blob/14d8a5ae472ca5743016f37da2dd4770d83dea21/libstdc%2B%2B-v3/include/bits/stl_algo.h#L1170-L1190 libstdc++], [https://github.com/llvm/llvm-project/tree/134723edd5bf06ff6ec8aca7b87c56e5bd70ccae/libcxx/include/__algorithm/reverse_copy.h libc++], and [https://github.com/microsoft/STL/blob/472161105d596192194d4715ccad307c6c163b4a/stl/inc/algorithm#L4184-L4229 MSVC STL].
{{eq fun|1=
template&lt;class BidirIt, class OutputIt&gt;
constexpr // since C++20
OutputIt reverse_copy(BidirIt first, BidirIt last, OutputIt d_first)
{
    for (; first != last; ++d_first)
        *d_first = *(--last);
    return d_first;
}
}}

===Notes===
Implementations (e.g. [https://github.com/microsoft/STL/blob/main/stl/src/vector_algorithms.cpp MSVC STL]) may enable vectorization when the both iterator types satisfy {{named req|ContiguousIterator}} and have the same value type, and the value type is {{named req|TriviallyCopyable}}.

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;
 
int main()
{
    auto print = [](const std::vector&lt;int&gt;&amp; v)
    {
        for (const auto&amp; value : v)
            std::cout &lt;&lt; value &lt;&lt; ' ';
        std::cout &lt;&lt; '\n';
    };
    
    std::vector&lt;int&gt; v{1, 2, 3};
    print(v);
    
    std::vector&lt;int&gt; destination(3);
    std::reverse_copy(std::begin(v), std::end(v), std::begin(destination));
    print(destination);
    
    std::reverse_copy(std::rbegin(v), std::rend(v), std::begin(destination));
    print(destination);
}
|output=
1 2 3 
3 2 1 
1 2 3 
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2074|std=C++98|before=for each {{c|i}}, the assignment was&lt;br&gt;{{c|1=*(d_first + N - i) = *(first + i)}}&lt;ref name="plusminus" /&gt;|after=corrected to&lt;br&gt;{{c|1=*(d_first + N - 1 - i) = *(first + i)}}&lt;ref name="plusminus" /&gt;}}
{{dr list item|wg=lwg|dr=2150|std=C++98|before=only one element was required to be assigned|after=corrected the requirement}}
{{dr list end}}
&lt;references/&gt;

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc reverse}}
{{dsc inc|cpp/algorithm/ranges/dsc reverse_copy}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
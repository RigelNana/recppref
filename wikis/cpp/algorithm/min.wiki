{{cpp/title|min}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|constexpr=c++14|
template&lt; class T &gt;
const T&amp; min( const T&amp; a, const T&amp; b );
}}
{{dcla|num=2|constexpr=c++14|
template&lt; class T, class Compare &gt;
const T&amp; min( const T&amp; a, const T&amp; b, Compare comp );
}}
{{dcla|num=3|since=c++11|constexpr=c++14|
template&lt; class T &gt;
T min( std::initializer_list&lt;T&gt; ilist );
}}
{{dcla|num=4|since=c++11|constexpr=c++14|
template&lt; class T, class Compare &gt;
T min( std::initializer_list&lt;T&gt; ilist, Compare comp );
}}
{{dcl end}}

Returns the smaller of the given values.

@1,2@ Returns the smaller of {{c|a}} and {{c|b}}.
:@1@ Uses {{c/core|operator&lt;}} to compare the values.
:@@ If {{tt|T}} is not {{named req|LessThanComparable}}, the behavior is undefined.
:@2@ Use the comparison function {{c|comp}} to compare the values.

@3,4@ Returns the smallest of the values in initializer list {{c|ilist}}.
@@ If {{c|ilist.size()}} is zero, or {{tt|T}} is not {{named req|CopyConstructible}}, the behavior is undefined.
:@3@ Uses {{c/core|operator&lt;}} to compare the values.
:@@ If {{tt|T}} is not {{named req|LessThanComparable}}, the behavior is undefined.
:@4@ Use the comparison function {{c|comp}} to compare the values.

===Parameters===
{{par begin}}
{{par|a, b|the values to compare}}
{{par|ilist|initializer list with the values to compare}}
{{par cmp|cmp|t1=T|{{c|a}} is ''less'' than {{c|b}}}}
{{par end}}

===Return value===
@1,2@ The smaller of {{c|a}} and {{c|b}}. If the values are equivalent, returns {{c|a}}.

@3,4@ The smallest value in {{c|ilist}}. If several values are equivalent to the smallest, returns the leftmost such value.

===Complexity===
@1@ Exactly one comparison using {{c/core|operator&lt;}}.

@2@ Exactly one application of the comparison function {{c|comp}}.

@3,4@ Given {{mathjax-or|\(\scriptsize N\)|N}} as {{c|ilist.size()}}:
:@3@ Exactly {{mathjax-or|\(\scriptsize N-1\)|N-1}} comparisons using {{c/core|operator&lt;}}.
:@4@ Exactly {{mathjax-or|\(\scriptsize N-1\)|N-1}} applications of the comparison function {{c|comp}}.

===Possible implementation===
{{eq impl
|title1=min (1)|ver1=1|1=
template&lt;class T&gt;
const T&amp; min(const T&amp; a, const T&amp; b)
{
    return (b &lt; a) ? b : a;
}
|title2=min (2)|ver2=2|2=
template&lt;class T, class Compare&gt;
const T&amp; min(const T&amp; a, const T&amp; b, Compare comp)
{
    return (comp(b, a)) ? b : a;
}
|title3=min (3)|ver3=3|3=
template&lt;class T&gt;
T min(std::initializer_list&lt;T&gt; ilist)
{
    return *std::min_element(ilist.begin(), ilist.end());
}
|title4=min (4)|ver4=4|4=
template&lt;class T, class Compare&gt;
T min(std::initializer_list&lt;T&gt; ilist, Compare comp)
{
    return *std::min_element(ilist.begin(), ilist.end(), comp);
}
}}

===Notes===
{{cpp/algorithm/minmax danger note|min}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

int main()
{
    std::cout &lt;&lt; "smaller of 10 and 010 is " &lt;&lt; std::min(10, 010) &lt;&lt; '\n'
              &lt;&lt; "smaller of 'd' and 'b' is '" &lt;&lt; std::min('d', 'b') &lt;&lt; "'\n"
              &lt;&lt; "shortest of \"foo\", \"bar\", and \"hello\" is \""
              &lt;&lt; std::min({"foo", "bar", "hello"},
                          [](const std::string_view s1, const std::string_view s2)
                          {
                              return s1.size() &lt; s2.size();
                          }) &lt;&lt; "\"\n";
}
|output=
smaller of 10 and 010 is 8
smaller of 'd' and 'b' is 'b'
shortest of "foo", "bar", and "hello" is "foo"
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=281|std=C++98|before={{tt|T}} was required to be {{named req|CopyConstructible}} for overloads {{vl|1,2}}|after=not required}}
{{dr list item|wg=lwg|dr=2239|std=C++98&lt;br&gt;C++11|before=1. {{tt|T}} was required to be {{named req|LessThanComparable}} for&lt;br&gt;{{nbsp|4}}overloads {{vl|2}} (C++98) and {{vl|4}} (C++11)&lt;br&gt;2. the complexity requirements were missing|after=1. not required&lt;br&gt;2. added the requirements}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc max}}
{{dsc inc|cpp/algorithm/dsc minmax}}
{{dsc inc|cpp/algorithm/dsc min_element}}
{{dsc inc|cpp/algorithm/dsc clamp}}
{{dsc inc|cpp/algorithm/ranges/dsc min}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
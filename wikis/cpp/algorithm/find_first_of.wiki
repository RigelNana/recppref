{{cpp/title|find_first_of}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|notes={{mark constexpr since c++20}}|
template&lt; class InputIt, class ForwardIt &gt;
InputIt find_first_of( InputIt first, InputIt last,
                       ForwardIt s_first, ForwardIt s_last );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt1, class ForwardIt2 &gt;
ForwardIt1 find_first_of( ExecutionPolicy&amp;&amp; policy,
                          ForwardIt1 first, ForwardIt1 last,
                          ForwardIt2 s_first, ForwardIt2 s_last );
}}
{{dcla|num=3|notes={{mark constexpr since c++20}}|
template&lt; class InputIt, class ForwardIt, class BinaryPred &gt;
InputIt find_first_of( InputIt first, InputIt last,
                       ForwardIt s_first, ForwardIt s_last,
                       BinaryPred p );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2, class BinaryPred &gt;
ForwardIt1 find_first_of( ExecutionPolicy&amp;&amp; policy,
                          ForwardIt1 first, ForwardIt last,
                          ForwardIt2 s_first, ForwardIt2 s_last,
                          BinaryPred p );
}}
{{dcl end}}

Searches the range {{range|first|last}} for any of the elements in the range {{range|s_first|s_last}}.

@1@ Elements are compared using {{c/core|1=operator==}}.

@3@ Elements are compared using the given binary predicate {{c|p}}.

@2,4@ Same as {{v|1,3}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to examine}}
{{par|s_first, s_last|the range of elements to search for}}
{{par exec pol}}
{{par pred2 eq|p|p1=ForwardIt1|p2=ForwardIt2}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par req named|ForwardIt|ForwardIterator}}
{{par req named|ForwardIt1|ForwardIterator}}
{{par req named|ForwardIt2|ForwardIterator}}
{{par req named|BinaryPred|BinaryPredicate}}
{{par end}}

===Return value===
Iterator to the first element in the range {{range|first|last}} that is equal to an element from the range {{range|s_first|s_last}}.

If {{range|s_first|s_last}} is empty or if no such element is found, {{c|last}} is returned.

===Complexity===
Given {{mathjax-or|\(\scriptsize N\)|N}} as {{c|std::distance(first, last)}} and {{mathjax-or|\(\scriptsize S\)|S}} as {{c|std::distance(s_first, s_last)}}:
@1,2@ At most {{mathjax-or|\(\scriptsize N\cdot S\)|N&amp;middot;S}} comparisons using {{c/core|1=operator==}}.
@3,4@ At most {{mathjax-or|\(\scriptsize N\cdot S\)|N&amp;middot;S}} applications of the predicate {{c|p}}.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===Possible implementation===
{{eq impl
|title1=find_first_of (1)|ver1=1|1=
template&lt;class InputIt, class ForwardIt&gt;
InputIt find_first_of(InputIt first, InputIt last,
                      ForwardIt s_first, ForwardIt s_last)
{
    for (; first != last; ++first)
        for (ForwardIt it = s_first; it != s_last; ++it)
            if (*first == *it)
                return first;
    return last;
}
|title2=find_first_of (3)|ver2=3|2=
template&lt;class InputIt, class ForwardIt, class BinaryPred&gt;
InputIt find_first_of(InputIt first, InputIt last,
                      ForwardIt s_first, ForwardIt s_last,
                      BinaryPred p)
{
    for (; first != last; ++first)
        for (ForwardIt it = s_first; it != s_last; ++it)
            if (p(*first, *it))
                return first;
    return last;
}
}}

===Example===
{{example
|The following code searches for any of specified integers in a vector of integers:
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

auto print_sequence = [](const auto id, const auto&amp; seq, int pos = -1)
{
    std::cout &lt;&lt; id &lt;&lt; "{ ";
    for (int i{}; auto const&amp; e : seq)
    {
        const bool mark{i == pos};
        std::cout &lt;&lt; (i++ ? ", " : "");
        std::cout &lt;&lt; (mark ? "[ " : "") &lt;&lt; e &lt;&lt; (mark ? " ]" : "");
    }
    std::cout &lt;&lt; " }\n";
};

int main()
{
    const std::vector&lt;int&gt; v{0, 2, 3, 25, 5};
    const auto t1 = {19, 10, 3, 4};
    const auto t2 = {1, 6, 7, 9};
    
    auto find_any_of = [](const auto&amp; v, const auto&amp; t)
    {
        const auto result = std::find_first_of(v.begin(), v.end(),
                                               t.begin(), t.end());
        if (result == v.end())
        {
            std::cout &lt;&lt; "No elements of v are equal to any element of ";
            print_sequence("t = ", t);
            print_sequence("v = ", v);
        }
        else
        {
            const auto pos = std::distance(v.begin(), result);
            std::cout &lt;&lt; "Found a match (" &lt;&lt; *result &lt;&lt; ") at position " &lt;&lt; pos;
            print_sequence(", where t = ", t);
            print_sequence("v = ", v, pos);
        }
    };
    
    find_any_of(v, t1);
    find_any_of(v, t2);
}
|output=
Found a match (3) at position 2, where t = { 19, 10, 3, 4 }
v = { 0, 2, [ 3 ], 25, 5 }
No elements of v are equal to any element of t = { 1, 6, 7, 9 }
v = { 0, 2, 3, 25, 5 }
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=576|std=C++98|before={{c|first}} and {{c|last}} needed to be {{named req|ForwardIterator}}s|after=they only need to be&lt;br&gt;{{named req|InputIterator}}s}}
{{dr list item|wg=lwg|dr=1205|std=C++98|before=the return value was unclear if {{range|s_first|s_last}} is empty|after=returns {{c|last}} in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc find}}
{{dsc inc|cpp/algorithm/ranges/dsc find_first_of}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
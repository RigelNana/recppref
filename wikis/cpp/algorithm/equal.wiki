{{cpp/title|equal}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2 &gt;
bool equal( InputIt1 first1, InputIt1 last1,
            InputIt2 first2 );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt1, class ForwardIt2 &gt;
bool equal( ExecutionPolicy&amp;&amp; policy,
            ForwardIt1 first1, ForwardIt1 last1,
            ForwardIt2 first2 );
}}
{{dcla|num=3|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2, class BinaryPred &gt;
bool equal( InputIt1 first1, InputIt1 last1,
            InputIt2 first2, BinaryPred p );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2, class BinaryPred &gt;
bool equal( ExecutionPolicy&amp;&amp; policy,
            ForwardIt1 first1, ForwardIt1 last1,
            ForwardIt2 first2, BinaryPred p );
}}
{{dcla|num=5|since=c++14|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2 &gt;
bool equal( InputIt1 first1, InputIt1 last1,
            InputIt2 first2, InputIt2 last2 );
}}
{{dcl|num=6|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt1, class ForwardIt2 &gt;
bool equal( ExecutionPolicy&amp;&amp; policy,
            ForwardIt1 first1, ForwardIt1 last1,
            ForwardIt2 first2, ForwardIt2 last2 );
}}
{{dcla|num=7|since=c++14|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2, class BinaryPred &gt;
bool equal( InputIt1 first1, InputIt1 last1,
            InputIt2 first2, InputIt2 last2, BinaryPred p );
}}
{{dcl|num=8|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2, class BinaryPred &gt;
bool equal( ExecutionPolicy&amp;&amp; policy,
            ForwardIt1 first1, ForwardIt1 last1,
            ForwardIt2 first2, ForwardIt2 last2, BinaryPred p );
}}
{{dcl end}}

Checks whether {{range|first1|last1}} and a range starting from {{c|first2}} are equal:
* For overloads {{v|1-4}}, the second range has {{c|std::distance(first1, last1)}} elements.
* For overloads {{v|5-8}}, the second range is {{range|first2|last2}}.

@1,5@ Elements are compared using {{c/core|1=operator==}}.

@3,7@ Elements are compared using the given binary predicate {{c|p}}.

@2,4,6,8@ Same as {{v|1,3,5,7}}, but executed according to {{c|policy}}.
@@{{cpp/algorithm/parallel overload precondition|plural=yes}}

===Parameters===
{{par begin}}
{{par|first1, last1|the first range of the elements to compare}}
{{par|first2, last2|the second range of the elements to compare}}
{{par exec pol}}
{{par pred2 eq|p|p1=InputIt1|p2=InputIt2}}
{{par hreq}}
{{par req named|InputIt1, InputIt2|InputIterator}}
{{par req named|ForwardIt1, ForwardIt2|ForwardIterator}}
{{par req named|BinaryPred|BinaryPredicate}}
{{par end}}

===Return value===
@1-4@ If each corresponding elements in the two ranges are equal, returns {{c|true}}. Otherwise returns {{c|false}}.

@5-8@ If {{c|std::distance(first1, last1)}} and {{c|std::distance(first2, last2)}} are equal, and each corresponding elements in the two ranges are equal, returns {{c|true}}. Otherwise returns {{c|false}}.

===Complexity===
Given {{mathjax-or|\(\scriptsize N_1\)|N{{su|b=1}}}} as {{c|std::distance(first1, last1)}} and {{mathjax-or|\(\scriptsize N_2\)|N{{su|b=2}}}} as {{c|std::distance(first2, last2)}}:

@1@ At most {{mathjax-or|\(\scriptsize N_1\)|N{{su|b=1}}}} comparisons using {{c/core|1=operator==}}.

@2@ {{mathjax-or|\(\scriptsize O(N_1)\)|O(N{{su|b=1}})}} comparisons using {{c/core|1=operator==}}.

@3@ At most {{mathjax-or|\(\scriptsize N_1\)|N{{su|b=1}}}} applications of the predicate {{c|p}}.

@4@ {{mathjax-or|\(\scriptsize O(N_1)\)|O(N{{su|b=1}})}} applications of the predicate {{c|p}}.

@5-8@ If {{tt|InputIt1}} and {{tt|InputIt2}} are both {{named req|RandomAccessIterator}}, and {{c|1=last1 - first1 != last2 - first2}} is {{c|true}}, no comparison will be made.
@@ Otherwise, given {{mathjax-or|\(\scriptsize N\)|N}} as {{mathjax-or|\(\scriptsize \min(N_1,N_2)\)|min(N{{su|b=1}},N{{su|b=2}})}}:

:@5@ At most {{mathjax-or|\(\scriptsize N\)|N}} comparisons using {{c/core|1=operator==}}.

:@6@ {{mathjax-or|\(\scriptsize O(N)\)|O(N)}} comparisons using {{c/core|1=operator==}}.

:@7@ At most {{mathjax-or|\(\scriptsize N\)|N}} applications of the predicate {{c|p}}.

:@8@ {{mathjax-or|\(\scriptsize O(N)\)|O(N)}} applications of the predicate {{c|p}}.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===Possible implementation===
{{eq impl
|title1=equal (1)|ver1=1|1=
template&lt;class InputIt1, class InputIt2&gt;
constexpr //&lt; since C++20
bool equal(InputIt1 first1, InputIt1 last1, InputIt2 first2)
{
    for (; first1 != last1; ++first1, ++first2)
        if (!(*first1 == *first2))
            return false;
    
    return true;
}
|title2=equal (3)|ver2=3|2=
template&lt;class InputIt1, class InputIt2, class BinaryPred&gt;
constexpr //&lt; since C++20
bool equal(InputIt1 first1, InputIt1 last1,
           InputIt2 first2, BinaryPred p)
{
    for (; first1 != last1; ++first1, ++first2)
        if (!p(*first1, *first2))
            return false;
    
    return true;
}
|title3=equal (5)|ver3=5|3=
namespace detail
{
    // random-access iterator implementation (allows quick range size detection)
    template&lt;class RandomIt1, class RandomIt2&gt;
    constexpr //&lt; since C++20
    bool equal(RandomIt1 first1, RandomIt1 last1, RandomIt2 first2, RandomIt2 last2,
               std::random_access_iterator_tag, std::random_access_iterator_tag)
    {
        if (last1 - first1 != last2 - first2)
            return false;
        
        for (; first1 != last1; ++first1, ++first2)
            if (!(*first1 == *first2))
                return false;
        
        return true;
    }
    
    // input iterator implementation (needs to manually compare with “last2”)
    template&lt;class InputIt1, class InputIt2&gt;
    constexpr //&lt; since C++20
    bool equal(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2,
               std::input_iterator_tag, std::input_iterator_tag)
    {
        for (; first1 != last1 &amp;&amp; first2 != last2; ++first1, ++first2)
            if (!(*first1 == *first2))
                return false;
        
        return first1 == last1 &amp;&amp; first2 == last2;
    }
}

template&lt;class InputIt1, class InputIt2&gt;
constexpr //&lt; since C++20
bool equal(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2)
{
    details::equal(first1, last1, first2, last2,
                   typename std::iterator_traits&lt;InputIt1&gt;::iterator_category(),
                   typename std::iterator_traits&lt;InputIt2&gt;::iterator_category());
}
|title4=equal (7)|ver4=7|4=
namespace detail
{
    // random-access iterator implementation (allows quick range size detection)
    template&lt;class RandomIt1, class RandomIt2, class BinaryPred&gt;
    constexpr //&lt; since C++20
    bool equal(RandomIt1 first1, RandomIt1 last1,
               RandomIt2 first2, RandomIt2 last2, BinaryPred p,
               std::random_access_iterator_tag, std::random_access_iterator_tag)
    {
        if (last1 - first1 != last2 - first2)
            return false;
        
        for (; first1 != last1; ++first1, ++first2)
            if (!p(*first1, *first2))
                return false;
        
        return true;
    }
    
    // input iterator implementation (needs to manually compare with “last2”)
    template&lt;class InputIt1, class InputIt2, class BinaryPred&gt;
    constexpr //&lt; since C++20
    bool equal(InputIt1 first1, InputIt1 last1,
               InputIt2 first2, InputIt2 last2, BinaryPred p,
               std::input_iterator_tag, std::input_iterator_tag)
    {
        for (; first1 != last1 &amp;&amp; first2 != last2; ++first1, ++first2)
            if (!p(*first1, *first2))
                return false;
        
        return first1 == last1 &amp;&amp; first2 == last2;
    }
}

template&lt;class InputIt1, class InputIt2, class BinaryPred&gt;
constexpr //&lt; since C++20
bool equal(InputIt1 first1, InputIt1 last1,
           InputIt2 first2, InputIt2 last2, BinaryPred p)
{
    details::equal(first1, last1, first2, last2, p,
                   typename std::iterator_traits&lt;InputIt1&gt;::iterator_category(),
                   typename std::iterator_traits&lt;InputIt2&gt;::iterator_category());
}
}}

===Notes===
{{tt|std::equal}} should not be used to compare the ranges formed by the iterators from {{lc|std::unordered_set}}, {{lc|std::unordered_multiset}}, {{lc|std::unordered_map}}, or {{lc|std::unordered_multimap}} because the order in which the elements are stored in those containers may be different even if the two containers store the same elements.

When comparing entire containers {{rev inl|since=c++17|or string views}} for equality, {{c/core|1=operator==}} for the corresponding type are usually preferred.

Sequential {{tt|std::equal}} is not guaranteed to be short-circuit. E.g. if the first pair elements of both ranges do not compare equal, the rest of elements may also be compared. Non-short-circuit comparison may happen when the ranges are compared with {{lc|std::memcmp}} or implementation-specific vectorized algorithms.

===Example===
{{example
|The following code uses {{ttt|std::equal}} to test if a string is a palindrome.
|code=
#include &lt;algorithm&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

constexpr bool is_palindrome(const std::string_view&amp; s)
{
    return std::equal(s.cbegin(), s.cbegin() + s.size() / 2, s.crbegin());
}

void test(const std::string_view&amp; s)
{
    std::cout &lt;&lt; std::quoted(s)
              &lt;&lt; (is_palindrome(s) ? " is" : " is not")
              &lt;&lt; " a palindrome\n";
}

int main()
{
    test("radar");
    test("hello");
}
|output=
"radar" is a palindrome
"hello" is not a palindrome
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc find}}
{{dsc inc|cpp/algorithm/dsc lexicographical_compare}}
{{dsc inc|cpp/algorithm/dsc mismatch}}
{{dsc inc|cpp/algorithm/dsc search}}
{{dsc inc|cpp/algorithm/ranges/dsc equal}}
{{dsc inc|cpp/utility/functional/dsc equal_to}}
{{dsc inc|cpp/algorithm/dsc equal_range}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
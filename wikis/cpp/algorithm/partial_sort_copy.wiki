{{cpp/title|partial_sort_copy}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|
template&lt; class InputIt, class RandomIt &gt;
RandomIt partial_sort_copy( InputIt first, InputIt last,
                            RandomIt d_first, RandomIt d_last );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt, class RandomIt &gt;
RandomIt partial_sort_copy( ExecutionPolicy&amp;&amp; policy,
                            ForwardIt first, ForwardIt last,
                            RandomIt d_first, RandomIt d_last );
}}
{{dcl|num=3|notes={{mark constexpr since c++20}}|
template&lt; class InputIt, class RandomIt, class Compare &gt;
RandomIt partial_sort_copy( InputIt first, InputIt last,
                            RandomIt d_first, RandomIt d_last,
                            Compare comp );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt, class RandomIt, class Compare &gt;
RandomIt partial_sort_copy( ExecutionPolicy&amp;&amp; policy,
                            ForwardIt first, ForwardIt last,
                            RandomIt d_first, RandomIt d_last,
                            Compare comp );}}
{{dcl end}}

Sorts some of the elements in the range {{range|first|last}} in ascending order, storing the result in the range {{range|d_first|d_last}}.

At most {{c|d_last - d_first}} of the elements are placed sorted to the range {{range|d_first|d_first + n}}. {{c|n}} is the number of elements to sort ({{c|std::min(std::distance(first, last), d_last - d_first)}}). The order of equal elements is not guaranteed to be preserved.

@1@ Elements are {{rlp|/#Requirements|sorted}} with respect to {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}.

@3@ Elements are sorted with respect to {{c|comp}}.

@2,4@ Same as {{v|1,3}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

If {{c|*first}} is not [[cpp/iterator#Types and writability|writable]] to {{c|d_first}}, the program is ill-formed.

If any of the following conditions is satisfied, the behavior is undefined:
{{rev begin}}
{{rev|until=c++11|
* The type of {{c|*d_first}} is not {{named req|Swappable}}.
}}
{{rev|since=c++11|
* {{tt|RandomIt}} is not {{named req|ValueSwappable}}.
* The type of {{c|*d_first}} is not {{named req|MoveConstructible}}.
* The type of {{c|*d_first}} is not {{named req|MoveAssignable}}.
}}
{{rev end}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to sort}}
{{par|d_first, d_last|random access iterators defining the destination range}}
{{par exec pol}}
{{par cmp ord|comp|p1=RandomIt}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par req named|ForwardIt|ForwardIterator}}
{{par req named|RandomIt|RandomAccessIterator}}
{{par req named|Compare|Compare}}
{{par end}}

===Return value===
An iterator to the element defining the upper boundary of the sorted range, i.e. {{c|d_first + std::min(std::distance(first, last), d_last - d_first)}}.

===Complexity===
Given {{mathjax-or|\(\scriptsize N\)|N}} as {{c|std::distance(first, last)}}, {{mathjax-or|\(\scriptsize D\)|D}} as {{c|d_last - d_first}}:
@1,2@ Approximately {{mathjax-or|\(\scriptsize N \cdot \log(\min(N,D))\)|N·log(min(N,D))}} comparisons using {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}.
@3,4@ Approximately {{mathjax-or|\(\scriptsize N \cdot \log(\min(N,D))\)|N·log(min(N,D))}} applications of the comparator {{c|comp}}.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===Possible implementation===
See also the implementations in [https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L1669 libstdc++] and [https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L5064 libc++].

===Example===
{{example
|The following code sorts a vector of integers and copies them into a smaller and a larger vector.
|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;
#include &lt;type_traits&gt;
#include &lt;vector&gt;
 
void println(std::string_view rem, const auto&amp; v)
{
    std::cout &lt;&lt; rem;
    if constexpr (std::is_scalar_v&lt;std::decay_t&lt;decltype(v)&gt;&gt;)
        std::cout &lt;&lt; v;
    else
        for (int e : v)
            std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    const auto v0 = {4, 2, 5, 1, 3};
    std::vector&lt;int&gt; v1{10, 11, 12};
    std::vector&lt;int&gt; v2{10, 11, 12, 13, 14, 15, 16};
    std::vector&lt;int&gt;::iterator it;
    
    it = std::partial_sort_copy(v0.begin(), v0.end(), v1.begin(), v1.end());
    println("Writing to the smaller vector in ascending order gives: ", v1);
    
    if (it == v1.end())
        println("The return value is the end iterator", ' ');
    
    it = std::partial_sort_copy(v0.begin(), v0.end(), v2.begin(), v2.end(),
                                std::greater&lt;int&gt;());
    
    println("Writing to the larger vector in descending order gives: ", v2);
    println("The return value is the iterator to ", *it);
}
|output=
Writing to the smaller vector in ascending order gives: 1 2 3
The return value is the end iterator
Writing to the larger vector in descending order gives: 5 4 3 2 1 15 16
The return value is the iterator to 15
}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P0896R4|std=C++98|before={{c|*first}} was not required to be writable to {{c|d_first}}|after=the program is ill-formed if not writable}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc partial_sort}}
{{dsc inc|cpp/algorithm/dsc sort}}
{{dsc inc|cpp/algorithm/dsc stable_sort}}
{{dsc inc|cpp/algorithm/ranges/dsc partial_sort_copy}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/ranges/title|binary_search}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|Call signature}}
{{dcl rev begin|num=1}}
{{dcla|anchor=1|since=c++20|until=c++26|1=
template&lt; std::forward_iterator I, std::sentinel_for&lt;I&gt; S,
          class T, class Proj = std::identity,
          std::indirect_strict_weak_order
              &lt;const T*, std::projected&lt;I, Proj&gt;&gt; Comp = ranges::less &gt;
constexpr bool binary_search( I first, S last, const T&amp; value,
                              Comp comp = {}, Proj proj = {} );
}}
{{dcl|since=c++26|1=
template&lt; std::forward_iterator I, std::sentinel_for&lt;I&gt; S,
          class Proj = std::identity,
          class T = std::projected_value_t&lt;I, Proj&gt;,
          std::indirect_strict_weak_order
              &lt;const T*, std::projected&lt;I, Proj&gt;&gt; Comp = ranges::less &gt;
constexpr bool binary_search( I first, S last, const T&amp; value,
                              Comp comp = {}, Proj proj = {} );
}}
{{dcl rev end}}
{{dcl rev begin|num=2}}
{{dcl|since=c++20|until=c++26|1=
template&lt; ranges::forward_range R,
          class T, class Proj = std::identity,
          std::indirect_strict_weak_order
              &lt;const T*, std::projected&lt;ranges::iterator_t&lt;R&gt;,
                                        Proj&gt;&gt; Comp = ranges::less &gt;
constexpr bool binary_search( R&amp;&amp; r, const T&amp; value,
                              Comp comp = {}, Proj proj = {} );
}}
{{dcl|since=c++26|1=
template&lt; ranges::forward_range R,
          class Proj = std::identity,
          class T = std::projected_value_t&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;,
          std::indirect_strict_weak_order
              &lt;const T*, std::projected&lt;ranges::iterator_t&lt;R&gt;,
                                        Proj&gt;&gt; Comp = ranges::less &gt;
constexpr bool binary_search( R&amp;&amp; r, const T&amp; value,
                              Comp comp = {}, Proj proj = {} );
}}
{{dcl rev end}}
{{dcl end}}

@1@ Checks if a projected element equivalent to {{c|value}} appears within the range {{range|first|last}}.
@2@ Same as {{v|1}}, but uses {{c|r}} as the source range, as if using {{c|ranges::begin(r)}} as {{c|first}} and {{c|ranges::end(r)}} as {{c|last}}.

For {{tt|ranges::binary_search}} to succeed, the range {{range|first|last}} must be at least partially ordered with respect to {{c|value}}, i.e. it must satisfy all of the following requirements:
* partitioned with respect to {{c|std::invoke(comp, std::invoke(proj, element), value)}} (that is, all projected elements for which the expression is {{c|true}} precedes all elements for which the expression is {{c|false}}).
* partitioned with respect to {{c|!std::invoke(comp, value, std::invoke(proj, element))}}.
* for all elements, if {{c|std::invoke(comp, std::invoke(proj, element), value)}} is {{c|true}} then {{c|!std::invoke(comp, value, std::invoke(proj, element))}} is also {{c|true}}.

A fully-sorted range meets these criteria.

{{cpp/ranges/niebloid}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to examine}}
{{par|r|the range of elements to examine}}
{{par|value|value to compare the elements to}}
{{par|comp|comparison function to apply to the projected elements}}
{{par|proj|projection to apply to the elements}}
{{par end}}

===Return value===
{{c|true}} if an element equal to {{c|value}} is found, {{c|false}} otherwise.

===Complexity===
The number of comparisons and projections performed is logarithmic in the distance between {{c|first}} and {{c|last}} (at most {{math|log{{su|b=2}}(last - first) + O(1)}} comparisons and projections). However, for iterator-sentinel pair that does not model {{lc|std::random_access_iterator}}, number of iterator increments is linear.

===Notes===
{{tt|std::ranges::binary_search}} doesn't return an iterator to the found element when an element whose projection equals {{c|value}} is found. If an iterator is desired, {{lc|std::ranges::lower_bound}} should be used instead.

{{feature test macro|__cpp_lib_algorithm_default_value_type|value=202403|std=C++26|[[cpp/language/list initialization|List-initialization]] for algorithms {{vl|1,2}}}}

===Possible implementation===
{{eq fun|1=
struct binary_search_fn
{
    template&lt;std::forward_iterator I, std::sentinel_for&lt;I&gt; S,
             class Proj = std::identity, class T = std::projected_value_t&lt;I, Proj&gt;,
             std::indirect_strict_weak_order
                 &lt;const T*, std::projected&lt;I, Proj&gt;&gt; Comp = ranges::less&gt;
    constexpr bool operator()(I first, S last, const T&amp; value,
                              Comp comp = {}, Proj proj = {}) const
    {
        auto x = ranges::lower_bound(first, last, value, comp, proj);
        return (!(x == last) &amp;&amp; !(std::invoke(comp, value, std::invoke(proj, *x))));
    }
    
    template&lt;ranges::forward_range R, class Proj = std::identity,
             class T = std::projected_value_t&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;,
             std::indirect_strict_weak_order
                 &lt;const T*, std::projected&lt;ranges::iterator_t&lt;R&gt;,
                                           Proj&gt;&gt; Comp = ranges::less&gt;
    constexpr bool operator()(R&amp;&amp; r, const T&amp; value, Comp comp = {}, Proj proj = {}) const
    {
        return (*this)(ranges::begin(r), ranges::end(r), value,
                       std::move(comp), std::move(proj));
    }
};

inline constexpr binary_search_fn binary_search;
}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;complex&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;vector&gt;

int main()
{
    constexpr static auto haystack = {1, 3, 4, 5, 9};
    static_assert(std::ranges::is_sorted(haystack));
    
    for (const int needle : std::views::iota(1)
                          {{!}} std::views::take(3))
    {
        std::cout &lt;&lt; "Searching for " &lt;&lt; needle &lt;&lt; ": ";
        std::ranges::binary_search(haystack, needle)
            ? std::cout &lt;&lt; "found " &lt;&lt; needle &lt;&lt; '\n'
            : std::cout &lt;&lt; "no dice!\n";
    }

    using CD = std::complex&lt;double&gt;;
    std::vector&lt;CD&gt; nums{&lt;!----&gt;{1, 1}, {2, 3}, {4, 2}, {4, 3}&lt;!----&gt;};
    auto cmpz = [](CD x, CD y){ return abs(x) &lt; abs(y); };
    #ifdef __cpp_lib_algorithm_default_value_type
        assert(std::ranges::binary_search(nums, {4, 2}, cmpz));
    #else
        assert(std::ranges::binary_search(nums, CD{4, 2}, cmpz));
    #endif
}
|output=
Searching for 1: found 1
Searching for 2: no dice!
Searching for 3: found 3
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc equal_range}}
{{dsc inc|cpp/algorithm/ranges/dsc lower_bound}}
{{dsc inc|cpp/algorithm/ranges/dsc upper_bound}}
{{dsc inc|cpp/algorithm/ranges/dsc contains}}
{{dsc inc|cpp/algorithm/dsc binary_search}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/ranges/title|make_heap}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|Call signature}}
{{dcl|num=1|since=c++20|1=
template&lt; std::random_access_iterator I, std::sentinel_for&lt;I&gt; S,
          class Comp = ranges::less, class Proj = std::identity &gt;
    requires std::sortable&lt;I, Comp, Proj&gt;
constexpr I make_heap( I first, S last, Comp comp = {}, Proj proj = {} );
}}
{{dcl|num=2|since=c++20|1=
template&lt; ranges::random_access_range R,
          class Comp = ranges::less, class Proj = std::identity &gt;
    requires std::sortable&lt;ranges::iterator_t&lt;R&gt;, Comp, Proj&gt;
constexpr ranges::borrowed_iterator_t&lt;R&gt;
    make_heap( R&amp;&amp; r, Comp comp = {}, Proj proj = {} );
}}
{{dcl end}}

Constructs a [[cpp/algorithm#Heap operations|heap]] with respect to {{c|comp}} and {{c|proj}} from the elements in the specified range.

@1@ The specified range is {{range|first|last}}.

@2@ The specified range is {{c|r}}.

{{cpp/ranges/niebloid}}

===Parameters===
{{par begin}}
{{par|first, last|the iterator and sentinel designating the range of elements to modify}}
{{par|r|the range of elements to modify}}
{{par|comp|comparator to apply to the projected elements}}
{{par|proj|projection to apply to the elements}}
{{par end}}

===Return value===
@1@ {{c|last}}
@2@ {{c|ranges::end(r)}}

===Complexity===
At most {{mathjax-or|\(\scriptsize 3\cdot N\)|3·N}} applications of {{c|comp}} and {{mathjax-or|\(\scriptsize 6\cdot N\)|6·N}} applications of {{c|proj}}, where {{mathjax-or|\(\scriptsize N \)|N}} is:
@1@ {{c|ranges::distance(first, last)}}
@2@ {{c|ranges::distance(r)}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

void out(const auto&amp; what, int n = 1)
{
    while (n-- &gt; 0)
        std::cout &lt;&lt; what;
}

void print(auto rem, const auto&amp; v)
{
    out(rem);
    for (auto e : v)
        out(e), out(' ');
    out('\n');
}

void draw_heap(const auto&amp; v)
{
    auto bails = [](int n, int w)
    {
        auto b = [](int w) { out("┌"), out("─", w), out("┴"), out("─", w), out("┐"); };
        if (!(n /= 2))
            return;
        for (out(' ', w); n-- &gt; 0;)
            b(w), out(' ', w + w + 1);
        out('\n');
    };
    
    auto data = [](int n, int w, auto&amp; first, auto last)
    {
        for (out(' ', w); n-- &gt; 0 &amp;&amp; first != last; ++first)
            out(*first), out(' ', w + w + 1);
        out('\n');
    };
    
    auto tier = [&amp;](int t, int m, auto&amp; first, auto last)
    {
        const int n{1 &lt;&lt; t};
        const int w{(1 &lt;&lt; (m - t - 1)) - 1};
        bails(n, w), data(n, w, first, last);
    };
    
    const int m{static_cast&lt;int&gt;(std::ceil(std::log2(1 + v.size())))};
    auto first{v.cbegin()};
    for (int i{}; i != m; ++i)
        tier(i, m, first, v.cend());
}

int main()
{
    std::vector h{1, 6, 1, 8, 0, 3, 3, 9, 8, 8, 7, 4, 9, 8, 9};
    print("source: ", h);
    
    std::ranges::make_heap(h);
    print("\n" "max-heap: ", h);
    draw_heap(h);
    
    std::ranges::make_heap(h, std::greater{});
    print("\n" "min-heap: ", h);
    draw_heap(h);
}
|output=&lt;nowiki/&gt;
source: 1 6 1 8 0 3 3 9 8 8 7 4 9 8 9

max-heap: 9 8 9 8 8 4 9 6 1 0 7 1 3 8 3
       9
   ┌───┴───┐
   8       9
 ┌─┴─┐   ┌─┴─┐
 8   8   4   9
┌┴┐ ┌┴┐ ┌┴┐ ┌┴┐
6 1 0 7 1 3 8 3

min-heap: 0 1 1 8 6 3 3 9 8 8 7 4 9 8 9
       0
   ┌───┴───┐
   1       1
 ┌─┴─┐   ┌─┴─┐
 8   6   3   3
┌┴┐ ┌┴┐ ┌┴┐ ┌┴┐
9 8 8 7 4 9 8 9
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc is_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc is_heap_until}}
{{dsc inc|cpp/algorithm/ranges/dsc push_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc pop_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc sort_heap}}
{{dsc inc|cpp/algorithm/dsc make_heap}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
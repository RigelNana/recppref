{{cpp/ranges/title|set_intersection|set_intersection_result}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|Call signature}}
{{dcl|num=1|since=c++20|1=
template&lt; std::input_iterator I1, std::sentinel_for&lt;I1&gt; S1,
          std::input_iterator I2, std::sentinel_for&lt;I2&gt; S2,
          std::weakly_incrementable O, class Comp = ranges::less,
          class Proj1 = std::identity, class Proj2 = std::identity &gt;
requires std::mergeable&lt;I1, I2, O, Comp, Proj1, Proj2&gt;
constexpr set_intersection_result&lt;I1, I2, O&gt;
    set_intersection( I1 first1, S1 last1, I2 first2, S2 last2,
                      O result, Comp comp = {},
                      Proj1 proj1 = {}, Proj2 proj2 = {} );
}}
{{dcl|num=2|since=c++20|1=
template&lt; ranges::input_range R1, ranges::input_range R2,
          std::weakly_incrementable O, class Comp = ranges::less,
          class Proj1 = std::identity, class Proj2 = std::identity &gt;
requires std::mergeable&lt;ranges::iterator_t&lt;R1&gt;, ranges::iterator_t&lt;R2&gt;,
                        O, Comp, Proj1, Proj2&gt;
constexpr set_intersection_result&lt;ranges::borrowed_iterator_t&lt;R1&gt;,
                                  ranges::borrowed_iterator_t&lt;R2&gt;, O&gt;
    set_intersection( R1&amp;&amp; r1, R2&amp;&amp; r2, O result, Comp comp = {},
                      Proj1 proj1 = {}, Proj2 proj2 = {} );
}}
{{dcl h|Helper types}}
{{dcl|num=3|since=c++20|1=
template&lt; class I1, class I2, class O &gt;
using set_intersection_result = ranges::in_in_out_result&lt;I1, I2, O&gt;;
}}
{{dcl end}}

Constructs a sorted range beginning at {{c|result}} consisting of elements that are found in both sorted input ranges {{range|first1|last1}} and {{range|first2|last2}}. If some element is found {{tt|m}} times in {{range|first1|last1}} and {{tt|n}} times in {{range|first2|last2}}, the first {{c|min(m, n)}} elements will be copied from the first range to {{c|result}}. The order of equivalent elements is preserved.

The behavior is undefined if
* the input ranges are not sorted with respect to {{c|comp}} and {{c|proj1}} or {{c|proj2}}, respectively, or
* the resulting range overlaps with either of the input ranges.

@1@ Elements are compared using the given binary comparison function {{c|comp}}.

@2@ Same as {{v|1}}, but uses {{c|r1}} as the first range and {{c|r2}} as the second range, as if using {{c|ranges::begin(r1)}} as {{c|first1}}, {{c|ranges::end(r1)}} as {{c|last1}}, {{c|ranges::begin(r2)}} as {{c|first2}}, and {{c|ranges::end(r2)}} as {{c|last2}}.

{{cpp/ranges/niebloid}}

===Parameters===
{{par begin}}
{{par|first1, last1|iterator-sentinel pair denoting the first input sorted range}}
{{par|first2, last2|iterator-sentinel pair denoting the second input sorted range}}
{{par|r1|the first sorted input range}}
{{par|r2|the second sorted input range}}
{{par|result|the beginning of the output range}}
{{par|comp|comparison to apply to the projected elements}}
{{par|proj1|projection to apply to the elements in the first range}}
{{par|proj2|projection to apply to the elements in the second range}}
{{par end}}

===Return value===
{{c|{last1, last2, result_last} }}, where {{c|result_last}} is the end of the constructed range.

===Complexity===
At most {{mathjax-or|\(\scriptsize 2\cdot(N_1+N_2)-1\)|2&amp;middot;(N{{su|b=1}}+N{{su|b=2}})-1}} comparisons and applications of each projection, where {{mathjax-or|\(\scriptsize N_1\)|N{{su|b=1}}}} and {{mathjax-or|\(\scriptsize N_2\)|N{{su|b=2}}}} are {{c|ranges::distance(first1, last1)}} and {{c|ranges::distance(first2, last2)}}, respectively.

===Possible implementation===
{{eq fun|1=
struct set_intersection_fn
{
    template&lt;std::input_iterator I1, std::sentinel_for&lt;I1&gt; S1,
             std::input_iterator I2, std::sentinel_for&lt;I2&gt; S2,
             std::weakly_incrementable O, class Comp = ranges::less,
             class Proj1 = std::identity, class Proj2 = std::identity&gt;
    requires std::mergeable&lt;I1, I2, O, Comp, Proj1, Proj2&gt;
    constexpr ranges::set_intersection_result&lt;I1, I2, O&gt;
        operator()(I1 first1, S1 last1, I2 first2, S2 last2,
                   O result, Comp comp = {},
                   Proj1 proj1 = {}, Proj2 proj2 = {}) const
    {
        while (!(first1 == last1 or first2 == last2))
        {
            if (std::invoke(comp, std::invoke(proj1, *first1),
                                  std::invoke(proj2, *first2)))
                ++first1;
            else if (std::invoke(comp, std::invoke(proj2, *first2),
                                       std::invoke(proj1, *first1)))
                ++first2;
            else
                *result = *first1, ++first1, ++first2, ++result;
        }
        return {ranges::next(std::move(first1), std::move(last1)),
                ranges::next(std::move(first2), std::move(last2)),
                std::move(result)};
    }

    template&lt;ranges::input_range R1, ranges::input_range R2,
             std::weakly_incrementable O, class Comp = ranges::less,
             class Proj1 = std::identity, class Proj2 = std::identity&gt;
    requires std::mergeable&lt;ranges::iterator_t&lt;R1&gt;, ranges::iterator_t&lt;R2&gt;,
                            O, Comp, Proj1, Proj2&gt;
    constexpr ranges::set_intersection_result&lt;ranges::borrowed_iterator_t&lt;R1&gt;,
                                              ranges::borrowed_iterator_t&lt;R2&gt;, O&gt;
        operator()(R1&amp;&amp; r1, R2&amp;&amp; r2, O result, Comp comp = {},
                   Proj1 proj1 = {}, Proj2 proj2 = {}) const
    {
        return (*this)(ranges::begin(r1), ranges::end(r1),
                       ranges::begin(r2), ranges::end(r2),
                       std::move(result), std::move(comp),
                       std::move(proj1), std::move(proj2));
    }
};

inline constexpr set_intersection_fn set_intersection {};
}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

void print(const auto&amp; v, const auto&amp; rem)
{
    std::cout &lt;&lt; "{ ";
    for (const auto&amp; e : v)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; '}' &lt;&lt; rem;
}

int main()
{
    const auto in1 = {1, 2, 2, 3, 4, 5, 6};
    const auto in2 = {2, 2, 3, 3, 5, 7};
    std::vector&lt;int&gt; out {};

    std::ranges::set_intersection(in1, in2, std::back_inserter(out));

    print(in1, " ∩ "), print(in2, " = "), print(out, "\n");
}
|output=
{ 1 2 2 3 4 5 6 } ∩ { 2 2 3 3 5 7 } = { 2 2 3 5 }
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc set_union}}
{{dsc inc|cpp/algorithm/ranges/dsc set_difference}}
{{dsc inc|cpp/algorithm/ranges/dsc set_symmetric_difference}}
{{dsc inc|cpp/algorithm/ranges/dsc includes}}
{{dsc inc|cpp/algorithm/dsc set_intersection}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
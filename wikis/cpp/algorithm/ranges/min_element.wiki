{{cpp/ranges/title|min_element}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|Call signature}}
{{dcl|since=c++20|num=1|1=
template&lt; std::forward_iterator I, std::sentinel_for&lt;I&gt; S, class Proj = std::identity,
          std::indirect_strict_weak_order&lt;std::projected&lt;I, Proj&gt;&gt; Comp = ranges::less &gt;
constexpr I
    min_element( I first, S last, Comp comp = {}, Proj proj = {} );
}}
{{dcl|since=c++20|num=2|1=
template&lt; ranges::forward_range R, class Proj = std::identity,
          std::indirect_strict_weak_order&lt;
              std::projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt; Comp = ranges::less &gt;
constexpr ranges::borrowed_iterator_t&lt;R&gt;
    min_element( R&amp;&amp; r, Comp comp = {}, Proj proj = {} );
}}
{{dcl end}}

@1@ Finds the smallest element in the range {{range|first|last}}.
@2@ Same as {{v|1}}, but uses {{c|r}} as the source range, as if using {{c|ranges::begin(r)}} as {{c|first}} and {{c|ranges::end(r)}} as {{c|last}}.

{{cpp/ranges/niebloid}}

===Parameters===
{{par begin}}
{{par|first, last|iterator-sentinel pair denoting the range to examine}}
{{par|r|the range to examine}}
{{par|comp|comparison to apply to the projected elements}}
{{par|proj|projection to apply to the elements}}
{{par end}}

===Return value===
Iterator to the smallest element in the range {{range|first|last}}. If several elements in the range are equivalent to the smallest element, returns the iterator to the first such element. Returns {{c|last}} if the range is empty (i.e., {{c|1=first == last}}).

===Complexity===
Exactly {{math|max(N - 1, 0)}} comparisons, where {{c|1=N = ranges::distance(first, last)}}.

===Possible implementation===
{{eq fun
|1=
struct min_element_fn
{
    template&lt;std::forward_iterator I, std::sentinel_for&lt;I&gt; S, class Proj = std::identity,
             std::indirect_strict_weak_order&lt;std::projected&lt;I, Proj&gt;&gt; Comp = ranges::less&gt;
    constexpr I operator()(I first, S last, Comp comp = {}, Proj proj = {}) const
    {
        if (first == last)
            return last;
        auto smallest = first;
        while (++first != last)
            if (std::invoke(comp, std::invoke(proj, *first), std::invoke(proj, *smallest)))
                smallest = first;
        return smallest;
    }
  
    template&lt;ranges::forward_range R, class Proj = std::identity,
             std::indirect_strict_weak_order&lt;
                 std::projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt; Comp = ranges::less&gt;
    constexpr ranges::borrowed_iterator_t&lt;R&gt;
        operator()(R&amp;&amp; r, Comp comp = {}, Proj proj = {}) const
    {
        return (*this)(ranges::begin(r), ranges::end(r), std::ref(comp), std::ref(proj));
    }
};

inline constexpr min_element_fn min_element;
}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;
 
int main()
{
    namespace ranges = std::ranges;
 
    std::array v{3, 1, -13, 1, 3, 7, -13};
 
    auto iterator = ranges::min_element(v.begin(), v.end());
    auto position = ranges::distance(v.begin(), iterator);
    std::cout &lt;&lt; "min element is v[" &lt;&lt; position &lt;&lt; "] == " &lt;&lt; *iterator &lt;&lt; '\n';
 
    auto abs_compare = [](int a, int b) { return (std::abs(a) &lt; std::abs(b)); };
    iterator = ranges::min_element(v, abs_compare);
    position = ranges::distance(v.begin(), iterator);
    std::cout &lt;&lt; "{{!}}min{{!}} element is v[" &lt;&lt; position &lt;&lt; "] == " &lt;&lt; *iterator &lt;&lt; '\n';
}
|output=
min element is v[2] == -13
{{!}}min{{!}} element is v[1] == 1
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc max_element}}
{{dsc inc|cpp/algorithm/ranges/dsc minmax_element}}
{{dsc inc|cpp/algorithm/ranges/dsc max}}
{{dsc inc|cpp/algorithm/dsc min_element}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
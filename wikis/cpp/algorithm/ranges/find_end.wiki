{{cpp/ranges/title|find_end}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|Call signature}}
{{dcl|num=1|since=c++20|1=
template&lt; std::forward_iterator I1, std::sentinel_for&lt;I1&gt; S1,
          std::forward_iterator I2, std::sentinel_for&lt;I2&gt; S2,
          class Pred = ranges::equal_to,
          class Proj1 = std::identity,
          class Proj2 = std::identity &gt;
requires std::indirectly_comparable&lt;I1, I2, Pred, Proj1, Proj2&gt;
constexpr ranges::subrange&lt;I1&gt;
    find_end( I1 first1, S1 last1, I2 first2, S2 last2,
              Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {} );
}}
{{dcl|num=2|since=c++20|1=
template&lt; ranges::forward_range R1, ranges::forward_range R2,
          class Pred = ranges::equal_to,
          class Proj1 = std::identity,
          class Proj2 = std::identity &gt;
requires std::indirectly_comparable&lt;ranges::iterator_t&lt;R1&gt;,
                                    ranges::iterator_t&lt;R2&gt;,
                                    Pred, Proj1, Proj2&gt;
constexpr ranges::borrowed_subrange_t&lt;R1&gt;
    find_end( R1&amp;&amp; r1, R2&amp;&amp; r2, Pred pred = {},
              Proj1 proj1 = {}, Proj2 proj2 = {} );
}}
{{dcl end}}

@1@ Searches for the ''last'' occurrence of the sequence {{range|first2|last2}} in the range {{range|first1|last1}}, after projection with {{c|proj1}} and {{c|proj2}} respectively. The projected elements are compared using the binary predicate {{c|pred}}.

@2@ Same as {{v|1}}, but uses {{c|r1}} as the first source range and {{c|r2}} as the second source range, as if using {{c|ranges::begin(r1)}} as {{c|first1}}, {{c|ranges::end(r1)}} as {{c|last1}}, {{c|ranges::begin(r2)}} as {{c|first2}}, and {{c|ranges::end(r2)}} as {{c|last2}}.

{{cpp/ranges/niebloid}}

===Parameters===
{{par begin}}
{{par|first1, last1|the range of elements to examine (aka ''haystack'')}}
{{par|first2, last2|the range of elements to search for (aka ''needle'')}}
{{par|r1|the range of elements to examine (aka ''haystack'')}}
{{par|r2|the range of elements to search for (aka ''needle'')}}
{{par|pred|binary predicate to compare the elements}}
{{par|proj1|projection to apply to the elements in the first range}}
{{par|proj2|projection to apply to the elements in the second range}}
{{par end}}

===Return value===
@1@ {{c|ranges::subrange&lt;I1&gt;{} }} value initialized with expression {{c|1={i, i + (i == last1 ? 0 : ranges::distance(first2, last2))} }} that denotes the last occurrence of the sequence {{range|first2|last2}} in range {{range|first1|last1}} (after projections with {{c|proj1}} and {{c|proj2}}). If {{range|first2|last2}} is empty or if no such sequence is found, the return value is effectively initialized with {{c|{last1, last1}&lt;!----&gt;}}.
@2@ Same as {{v|1}}, except that the return type is {{c|ranges::borrowed_subrange_t&lt;R1&gt;}}.

===Complexity===
At most {{mathjax-or|\(\scriptsize S\cdot(N-S+1)\)|S&amp;middot;(N-S+1)}} applications of the corresponding predicate and each projection, where {{mathjax-or|\(\scriptsize S\)|S}} is {{c|ranges::distance(first2, last2)}} and {{mathjax-or|\(\scriptsize N\)|N}} is {{c|ranges::distance(first1, last1)}} for {{v|1}}, or {{mathjax-or|\(\scriptsize S\)|S}} is {{c|ranges::distance(r2)}} and {{mathjax-or|\(\scriptsize N\)|N}} is {{c|ranges::distance(r1)}} for {{v|2}}.

===Notes===
An implementation can improve efficiency of the search if the input iterators model {{c|std::bidirectional_iterator}} by searching from the end towards the begin. Modelling the {{c|std::random_access_iterator}} may improve the comparison speed. All this however does not change the theoretical complexity of the worst case.

===Possible implementation===
{{eq fun|1=
struct find_end_fn
{
    template&lt;std::forward_iterator I1, std::sentinel_for&lt;I1&gt; S1,
             std::forward_iterator I2, std::sentinel_for&lt;I2&gt; S2,
             class Pred = ranges::equal_to,
             class Proj1 = std::identity, class Proj2 = std::identity&gt;
    requires std::indirectly_comparable&lt;I1, I2, Pred, Proj1, Proj2&gt;
    constexpr ranges::subrange&lt;I1&gt;
        operator()(I1 first1, S1 last1,
                   I2 first2, S2 last2, Pred pred = {},
                   Proj1 proj1 = {}, Proj2 proj2 = {}) const
    {
        if (first2 == last2)
        {
            auto last_it = ranges::next(first1, last1);
            return {last_it, last_it};
        }
        auto result = ranges::search(
            std::move(first1), last1, first2, last2, pred, proj1, proj2);

        if (result.empty())
            return result;

        for (;;)
        {
            auto new_result = ranges::search(
                std::next(result.begin()), last1, first2, last2, pred, proj1, proj2);
            if (new_result.empty())
                return result;
            else
                result = std::move(new_result);
        }
    }

    template&lt;ranges::forward_range R1, ranges::forward_range R2,
             class Pred = ranges::equal_to,
             class Proj1 = std::identity,
             class Proj2 = std::identity&gt;
    requires std::indirectly_comparable&lt;ranges::iterator_t&lt;R1&gt;,
                                        ranges::iterator_t&lt;R2&gt;,
                                        Pred, Proj1, Proj2&gt;
    constexpr ranges::borrowed_subrange_t&lt;R1&gt;
        operator()(R1&amp;&amp; r1, R2&amp;&amp; r2, Pred pred = {},
                   Proj1 proj1 = {}, Proj2 proj2 = {}) const
    {
        return (*this)(ranges::begin(r1), ranges::end(r1),
                       ranges::begin(r2), ranges::end(r2),
                       std::move(pred),
                       std::move(proj1), std::move(proj2));
    }
};

inline constexpr find_end_fn find_end {};
}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;cctype&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string_view&gt;

void print(const auto haystack, const auto needle)
{
    const auto pos = std::distance(haystack.begin(), needle.begin());
    std::cout &lt;&lt; "In \"";
    for (const auto c : haystack)
        std::cout &lt;&lt; c;
    std::cout &lt;&lt; "\" found \"";
    for (const auto c : needle)
        std::cout &lt;&lt; c;
    std::cout &lt;&lt; "\" at position [" &lt;&lt; pos &lt;&lt; ".." &lt;&lt; pos + needle.size() &lt;&lt; ")\n"
        &lt;&lt; std::string(4 + pos, ' ') &lt;&lt; std::string(needle.size(), '^') &lt;&lt; '\n';
}

int main()
{
    using namespace std::literals;
    constexpr auto secret{"password password word..."sv};
    constexpr auto wanted{"password"sv};

    constexpr auto found1 = std::ranges::find_end(
        secret.cbegin(), secret.cend(), wanted.cbegin(), wanted.cend());
    print(secret, found1);

    constexpr auto found2 = std::ranges::find_end(secret, "word"sv);
    print(secret, found2);

    const auto found3 = std::ranges::find_end(secret, "ORD"sv,
        [](const char x, const char y) { // uses a binary predicate
            return std::tolower(x) == std::tolower(y);
        });
    print(secret, found3);

    const auto found4 = std::ranges::find_end(secret, "SWORD"sv, {}, {},
        [](char c) { return std::tolower(c); }); // projects the 2nd range
    print(secret, found4);

    static_assert(std::ranges::find_end(secret, "PASS"sv).empty()); // =&gt; not found
}
|output=
In "password password word..." found "password" at position [9..17)
             ^^^^^^^^
In "password password word..." found "word" at position [18..22)
                      ^^^^
In "password password word..." found "ord" at position [19..22)
                       ^^^
In "password password word..." found "sword" at position [12..17)
                ^^^^^
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc find_last}}
{{dsc inc|cpp/algorithm/ranges/dsc find}}
{{dsc inc|cpp/algorithm/ranges/dsc find_first_of}}
{{dsc inc|cpp/algorithm/ranges/dsc adjacent_find}}
{{dsc inc|cpp/algorithm/ranges/dsc search}}
{{dsc inc|cpp/algorithm/ranges/dsc search_n}}
{{dsc inc|cpp/algorithm/dsc find_end}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
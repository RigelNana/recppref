{{cpp/ranges/title|fold_right}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|Call signature}}
{{dcl rev begin|num=1}}
{{dcla|anchor=1|since=c++23|until=c++26|1=
template&lt; std::bidirectional_iterator I, std::sentinel_for&lt;I&gt; S, class T,
          /* indirectly-binary-right-foldable */&lt;T, I&gt; F &gt;
constexpr auto fold_right( I first, S last, T init, F f );
}}
{{dcl|since=c++26|1=
template&lt; std::bidirectional_iterator I, std::sentinel_for&lt;I&gt; S,
          class T = std::iter_value_t&lt;I&gt;,
          /* indirectly-binary-right-foldable */&lt;T, I&gt; F &gt;
constexpr auto fold_right( I first, S last, T init, F f );
}}
{{dcl rev end}}
{{dcl rev begin|num=2}}
{{dcl|since=c++23|until=c++26|1=
template&lt; ranges::bidirectional_range R, class T,
          /* indirectly-binary-right-foldable */
              &lt;T, ranges::iterator_t&lt;R&gt;&gt; F &gt;
constexpr auto fold_right( R&amp;&amp; r, T init, F f );
}}
{{dcl|since=c++26|1=
template&lt; ranges::bidirectional_range R, class T = ranges::range_value_t&lt;R&gt;,
          /* indirectly-binary-right-foldable */
              &lt;T, ranges::iterator_t&lt;R&gt;&gt; F &gt;
constexpr auto fold_right( R&amp;&amp; r, T init, F f );
}}
{{dcl rev end}}
{{dcl h|Helper concepts}}
{{dcl|num=3|notes={{mark expos}}|1=
template&lt; class F, class T, class I &gt;
concept /* indirectly-binary-left-foldable */ = /* see description */;
}}
{{dcl|num=4|notes={{mark expos}}|1=
template&lt; class F, class T, class I &gt;
concept /* indirectly-binary-right-foldable */ = /* see description */;
}}
{{dcl end}}

Right-{{enwiki|Fold (higher-order function)|folds}} the elements of given range, that is, returns the result of evaluation of the chain expression:&lt;br&gt;{{tt|f(x{{sub|1}}, f(x{{sub|2}}, ...f(x{{sub|n}}, init)))}}, where {{tt|x{{sub|1}}}}, {{tt|x{{sub|2}}}}, ..., {{tt|x{{sub|n}}}} are elements of the range.

Informally, {{tt|ranges::fold_right}} behaves like {{c|std::fold_left(ranges::reverse(r), init, /* flipped */(f))}}.

The behavior is undefined if {{range|first|last}} is not a valid range.

@1@ The range is {{range|first|last}}.

@2@ Same as {{v|1}}, except that uses {{c|r}} as the range, as if by using {{c|ranges::begin(r)}} as {{c|first}} and {{c|ranges::end(r)}} as {{c|last}}.

{{ranges_fold_algos_helper_concepts|right}}

{{cpp/ranges/niebloid}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to fold}}
{{par|r|the range of elements to fold}}
{{par|init|the initial value of the fold}}
{{par|f|the binary function object}}
{{par end}}

===Return value===
An object of type {{c|U}} that contains the result of right-{{enwiki|Fold (higher-order function)|fold}} of the given range over {{c|f}}, where {{c|U}} is equivalent to {{c|std::decay_t&lt;std::invoke_result_t&lt;F&amp;, std::iter_reference_t&lt;I&gt;, T&gt;&gt;;}}.

If the range is empty, {{c|U(std::move(init))}} is returned.

===Possible implementations===
{{eq fun|1=
struct fold_right_fn
{
    template&lt;std::bidirectional_iterator I, std::sentinel_for&lt;I&gt; S,
             class T = std::iter_value_t&lt;I&gt;,
             /* indirectly-binary-right-foldable */&lt;T, I&gt; F&gt;
    constexpr auto operator()(I first, S last, T init, F f) const
    {
        using U = std::decay_t&lt;std::invoke_result_t&lt;F&amp;, std::iter_reference_t&lt;I&gt;, T&gt;&gt;;
        if (first == last)
            return U(std::move(init));
        I tail = ranges::next(first, last);
        U accum = std::invoke(f, *--tail, std::move(init));
        while (first != tail)
            accum = std::invoke(f, *--tail, std::move(accum));
        return accum;
    }
    
    template&lt;ranges::bidirectional_range R, class T = ranges::range_value_t&lt;R&gt;,
             /* indirectly-binary-right-foldable */&lt;T, ranges::iterator_t&lt;R&gt;&gt; F&gt;
    constexpr auto operator()(R&amp;&amp; r, T init, F f) const
    {
        return (*this)(ranges::begin(r), ranges::end(r), std::move(init), std::ref(f));
    }
};

inline constexpr fold_right_fn fold_right;
}}

===Complexity===
Exactly {{c|ranges::distance(first, last)}} applications of the function object {{c|f}}.

===Notes===
{{ranges_fold_algos_table}}

{{ftm begin}}
{{ftm|__cpp_lib_ranges_fold|std=C++23|value=202207L|{{tt|std::ranges}} [[cpp/algorithm/ranges#Constrained fold operations|fold algorithms]]}}
{{ftm|__cpp_lib_algorithm_default_value_type|value=202403L|std=C++26|[[cpp/language/list initialization|List-initialization]] for algorithms {{vl|1,2}}}}
{{ftm end}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;complex&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;

using namespace std::literals;
namespace ranges = std::ranges;

int main()
{
    auto v = {1, 2, 3, 4, 5, 6, 7, 8};
    std::vector&lt;std::string&gt; vs{"A", "B", "C", "D"};
    
    auto r1 = ranges::fold_right(v.begin(), v.end(), 6, std::plus&lt;&gt;()); // (1)
    std::cout &lt;&lt; "r1: " &lt;&lt; r1 &lt;&lt; '\n';
    
    auto r2 = ranges::fold_right(vs, "!"s, std::plus&lt;&gt;()); // (2)
    std::cout &lt;&lt; "r2: " &lt;&lt; r2 &lt;&lt; '\n';
    
    // Use a program defined function object (lambda-expression):
    std::string r3 = ranges::fold_right
    (
        v, "A", [](int x, std::string s) { return s + ':' + std::to_string(x); }
    );
    std::cout &lt;&lt; "r3: " &lt;&lt; r3 &lt;&lt; '\n';
    
    // Get the product of the std::pair::second of all pairs in the vector:
    std::vector&lt;std::pair&lt;char, float&gt;&gt; data{&lt;!----&gt;{'A', 2.f}, {'B', 3.f}, {'C', 3.5f}&lt;!----&gt;};
    float r4 = ranges::fold_right
    (
        data {{!}} ranges::views::values, 2.0f, std::multiplies&lt;&gt;()
    );
    std::cout &lt;&lt; "r4: " &lt;&lt; r4 &lt;&lt; '\n';

    using CD = std::complex&lt;double&gt;;
    std::vector&lt;CD&gt; nums{&lt;!----&gt;{1, 1}, {2, 0}, {3, 0}&lt;!----&gt;};
    #ifdef __cpp_lib_algorithm_default_value_type
        auto r5 = ranges::fold_right(nums, {7, 0}, std::multiplies{});
    #else
        auto r5 = ranges::fold_right(nums, CD{7, 0}, std::multiplies{});
    #endif
    std::cout &lt;&lt; "r5: " &lt;&lt; r5 &lt;&lt; '\n';
}
|output=
r1: 42
r2: ABCD!
r3: A:8:7:6:5:4:3:2:1
r4: 42
r5: (42,42)
}}

===References===
{{ref std c++23}}
{{ref std|title=Fold|id=alg.fold|section=27.6.18}}
{{ref std end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_right_last}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_left}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_left_first}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_left_with_iter}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_left_first_with_iter}}
{{dsc inc|cpp/algorithm/dsc accumulate}}
{{dsc inc|cpp/algorithm/dsc reduce}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
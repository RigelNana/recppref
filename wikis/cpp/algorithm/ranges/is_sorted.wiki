{{cpp/ranges/title|is_sorted}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|Call signature}}
{{dcl|num=1|since=c++20|1=
template&lt; std::forward_iterator I, std::sentinel_for&lt;I&gt; S,
          class Proj = std::identity,
          std::indirect_strict_weak_order&lt;std::projected&lt;I, Proj&gt;&gt;
              Comp = ranges::less &gt;
constexpr bool
    is_sorted( I first, S last, Comp comp = {}, Proj proj = {} );
}}
{{dcl|num=2|since=c++20|1=
template&lt; ranges::forward_range R, class Proj = std::identity,
          std::indirect_strict_weak_order&lt;
              std::projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt;
                  Comp = ranges::less &gt;
constexpr bool
    is_sorted( R&amp;&amp; r, Comp comp = {}, Proj proj = {} );
}}
{{dcl end}}

Checks if the elements in range {{range|first|last}} are sorted in non-descending order.

A sequence is sorted with respect to a comparator {{c|comp}} if for any iterator {{tt|it}} pointing to the sequence and any non-negative integer {{tt|n}} such that {{tt|it + n}} is a valid iterator pointing to an element of the sequence, {{c|std::invoke(comp, std::invoke(proj, *(it + n)), std::invoke(proj, *it))}} evaluates to {{c|false}}.

@1@ Elements are compared using the given binary comparison function {{c|comp}}.
@2@ Same as {{v|1}}, but uses {{c|r}} as the source range, as if using {{c|ranges::begin(r)}} as {{c|first}} and {{c|ranges::end(r)}} as {{c|last}}.

{{cpp/ranges/niebloid}}

===Parameters===
{{par begin}}
{{par|first, last|iterator-sentinel defining the range to check if it is sorted}}
{{par|r|the range to check if it is sorted}}
{{par|comp|comparison function to apply to the projected elements}}
{{par|proj|projection to apply to the elements}}
{{par end}}

===Return value===
{{c|true}} if the elements in the range are sorted according to {{tt|comp}}.

===Complexity===
Linear in the distance between {{c|first}} and {{c|last}}.

===Possible implementation===
{{eq fun
|1=
struct is_sorted_fn
{
    template&lt;std::forward_iterator I, std::sentinel_for&lt;I&gt; S,
             class Proj = std::identity,
             std::indirect_strict_weak_order&lt;std::projected&lt;I, Proj&gt;&gt;
                 Comp = ranges::less&gt;
    constexpr bool operator()(I first, S last, Comp comp = {}, Proj proj = {}) const
    {
        return ranges::is_sorted_until(first, last, comp, proj) == last;
    }
  
    template&lt;ranges::forward_range R, class Proj = std::identity,
             std::indirect_strict_weak_order&lt;
                 std::projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt;
                     Comp = ranges::less&gt;
    constexpr bool operator()(R&amp;&amp; r, Comp comp = {}, Proj proj = {}) const
    {
        return (*this)(ranges::begin(r), ranges::end(r), std::ref(comp), std::ref(proj));
    }
};

inline constexpr is_sorted_fn is_sorted;
}}

===Notes===
{{tt|ranges::is_sorted}} returns {{c|true}} for empty ranges and ranges of length one.

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;

int main()
{
    namespace ranges = std::ranges;

    std::array digits {3, 1, 4, 1, 5};

    ranges::copy(digits, std::ostream_iterator&lt;int&gt;(std::cout, " "));
    ranges::is_sorted(digits)
        ? std::cout &lt;&lt; ": sorted\n"
        : std::cout &lt;&lt; ": not sorted\n";

    ranges::sort(digits);

    ranges::copy(digits, std::ostream_iterator&lt;int&gt;(std::cout, " "));
    ranges::is_sorted(ranges::begin(digits), ranges::end(digits))
        ? std::cout &lt;&lt; ": sorted\n"
        : std::cout &lt;&lt; ": not sorted\n";

    ranges::reverse(digits);

    ranges::copy(digits, std::ostream_iterator&lt;int&gt;(std::cout, " "));
    ranges::is_sorted(digits, ranges::greater {})
        ? std::cout &lt;&lt; ": sorted (with 'greater')\n"
        : std::cout &lt;&lt; ": not sorted\n";
}
|output=
3 1 4 1 5 : not sorted
1 1 3 4 5 : sorted
5 4 3 1 1 : sorted (with 'greater')
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc is_sorted_until}}
{{dsc inc|cpp/algorithm/dsc is_sorted}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
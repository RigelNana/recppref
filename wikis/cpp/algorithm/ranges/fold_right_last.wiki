{{cpp/ranges/title|fold_right_last}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|Call signature}}
{{dcl|num=1|since=c++23|1=
template&lt; std::bidirectional_iterator I, std::sentinel_for&lt;I&gt; S,
          /*indirectly-binary-right-foldable*/&lt;std::iter_value_t&lt;I&gt;, I&gt; F &gt;
requires std::constructible_from&lt;
             std::iter_value_t&lt;I&gt;, std::iter_reference_t&lt;I&gt;&gt;
constexpr auto
    fold_right_last( I first, S last, F f );
}}
{{dcl|num=2|since=c++23|1=
template&lt; ranges::bidirectional_range R,
          /*indirectly-binary-right-foldable*/&lt;
              ranges::range_value_t&lt;R&gt;, ranges::iterator_t&lt;R&gt;&gt; F &gt;
requires std::constructible_from&lt;
             ranges::range_value_t&lt;R&gt;, ranges::range_reference_t&lt;R&gt;&gt;
constexpr auto
    fold_right_last( R&amp;&amp; r, F f );
}}
{{dcl h|Helper concepts}}
{{dcl|num=3|notes={{mark expos}}|1=
template&lt; class F, class T, class I &gt;
concept /*indirectly-binary-left-foldable*/ = /* see description */;
}}
{{dcl|num=4|notes={{mark expos}}|1=
template&lt; class F, class T, class I &gt;
concept /*indirectly-binary-right-foldable*/ = /* see description */;
}}
{{dcl end}}

Right-{{enwiki|Fold (higher-order function)|folds}} the elements of given range, that is, returns the result of evaluation of the chain expression:&lt;br&gt;{{tt|f(x{{sub|1}}, f(x{{sub|2}}, ...f(x{{sub|n-1}}, x{{sub|n}})))}}, where {{tt|x{{sub|1}}}}, {{tt|x{{sub|2}}}}, ..., {{tt|x{{sub|n}}}} are elements of the range.

Informally, {{tt|ranges::fold_right_last}} behaves like {{c|std::fold_left(ranges::reverse(r), *--last, /*flipped*/(f))}} (assuming the range is not empty).

The behavior is undefined if {{range|first|last}} is not a valid range.

@1@ The range is {{range|first|last}}. Given {{c|U}} as {{c|decltype(ranges::fold_right(first, last, std::iter_value_t&lt;I&gt;(*first), f))}}, equivalent to:
{{source|1=
if (first == last)
    return std::optional&lt;U&gt;();
I tail = ranges::prev(ranges::next(first, std::move(last)));
return std::optional&lt;U&gt;(std::in_place, ranges::fold_right(std::move(first), tail,
    std::iter_value_t&lt;I&gt;(*tail), std::move(f)));
}}

@2@ Same as {{v|1}}, except that uses {{c|r}} as the range, as if by using {{c|ranges::begin(r)}} as {{c|first}} and {{c|ranges::end(r)}} as {{c|last}}.

{{ranges_fold_algos_helper_concepts|right}}

{{cpp/ranges/niebloid}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to fold}}
{{par|r|the range of elements to fold}}
{{par|f|the binary function object}}
{{par end}}

===Return value===
An object of type {{c|std::optional&lt;U&gt;}} that contains the result of right-{{enwiki|Fold (higher-order function)|fold}} of the given range over {{c|f}}.

If the range is empty, {{c|std::optional&lt;U&gt;()}} is returned.

===Possible implementations===
{{eq fun
|1=
struct fold_right_last_fn
{
    template&lt;std::bidirectional_iterator I, std::sentinel_for&lt;I&gt; S,
             /*indirectly-binary-right-foldable*/&lt;std::iter_value_t&lt;I&gt;, I&gt; F&gt;
    requires
        std::constructible_from&lt;std::iter_value_t&lt;I&gt;, std::iter_reference_t&lt;I&gt;&gt;
    constexpr auto operator()(I first, S last, F f) const
    {
        using U = decltype(
            ranges::fold_right(first, last, std::iter_value_t&lt;I&gt;(*first), f));

        if (first == last)
            return std::optional&lt;U&gt;();
        I tail = ranges::prev(ranges::next(first, std::move(last)));
        return std::optional&lt;U&gt;(std::in_place,
            ranges::fold_right(std::move(first), tail, std::iter_value_t&lt;I&gt;(*tail),
                               std::move(f)));
    }

    template&lt;ranges::bidirectional_range R,
             /*indirectly_binary_right_foldable*/&lt;
                 ranges::range_value_t&lt;R&gt;, ranges::iterator_t&lt;R&gt;&gt; F&gt;
    requires
        std::constructible_from&lt;ranges::range_value_t&lt;R&gt;, ranges::range_reference_t&lt;R&gt;&gt;
    constexpr auto operator()(R&amp;&amp; r, F f) const
    {
        return (*this)(ranges::begin(r), ranges::end(r), std::ref(f));
    }
};

inline constexpr fold_right_last_fn fold_right_last;
}}

===Complexity===
Exactly {{c|ranges::distance(first, last)}} applications of the function object {{c|f}}.

===Notes===
{{ranges_fold_algos_table}}

{{feature test macro|__cpp_lib_ranges_fold|std=C++23|value=202207L|{{tt|std::ranges}} [[cpp/algorithm/ranges#Constrained fold operations|fold algorithms]]}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;

int main()
{
    auto v = {1, 2, 3, 4, 5, 6, 7, 8};
    std::vector&lt;std::string&gt; vs {"A", "B", "C", "D"};

    auto r1 = std::ranges::fold_right_last(v.begin(), v.end(), std::plus&lt;&gt;()); // (1)
    std::cout &lt;&lt; "*r1: " &lt;&lt; *r1 &lt;&lt; '\n';

    auto r2 = std::ranges::fold_right_last(vs, std::plus&lt;&gt;()); // (2)
    std::cout &lt;&lt; "*r2: " &lt;&lt; *r2 &lt;&lt; '\n';

    // Use a program defined function object (lambda-expression):
    auto r3 = std::ranges::fold_right_last(v, [](int x, int y) { return x + y + 99; });
    std::cout &lt;&lt; "*r3: " &lt;&lt; *r3 &lt;&lt; '\n';

    // Get the product of the std::pair::second of all pairs in the vector:
    std::vector&lt;std::pair&lt;char, float&gt;&gt; data {{'A', 3.f}, {'B', 3.5f}, {'C', 4.f}};
    auto r4 = std::ranges::fold_right_last
    (
        data {{!}} std::ranges::views::values, std::multiplies&lt;&gt;()
    );
    std::cout &lt;&lt; "*r4: " &lt;&lt; *r4 &lt;&lt; '\n';
}
|output=
*r1: 36
*r2: ABCD
*r3: 729
*r4: 42
}}

===References===
{{ref std c++23}}
{{ref std|title=Fold|id=alg.fold|section=27.6.18}}
{{ref std end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_right}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_left}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_left_first}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_left_with_iter}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_left_first_with_iter}}
{{dsc inc|cpp/algorithm/dsc accumulate}}
{{dsc inc|cpp/algorithm/dsc reduce}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
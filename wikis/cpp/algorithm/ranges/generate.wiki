{{cpp/ranges/title|generate}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|Call signature}}
{{dcl|num=1|since=c++20|1=
template&lt; std::input_or_output_iterator O, std::sentinel_for&lt;O&gt; S,
          std::copy_constructible F &gt;
requires std::invocable&lt;F&amp;&gt; &amp;&amp; std::indirectly_writable&lt;O, std::invoke_result_t&lt;F&amp;&gt;&gt;
constexpr O
    generate( O first, S last, F gen );
}}
{{dcl|num=2|since=c++20|1=
template&lt; class R, std::copy_constructible F &gt;
requires std::invocable&lt;F&amp;&gt; &amp;&amp; ranges::output_range&lt;R, std::invoke_result_t&lt;F&amp;&gt;&gt;
constexpr ranges::borrowed_iterator_t&lt;R&gt;
    generate( R&amp;&amp; r, F gen );
}}
{{dcl end}}

@1@ Assigns the result of ''successive'' invocations of the function object {{c|gen}} to each element in the range {{range|first|last}}.

@2@ Same as {{v|1}}, but uses {{c|r}} as the range, as if using {{c|ranges::begin(r)}} as {{c|first}} and {{c|ranges::end(r)}} as {{c|last}}.

{{cpp/ranges/niebloid}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to modify}}
{{par|r|the range of elements to modify}}
{{par|gen|the generator function object}}
{{par end}}

===Return value===
An output iterator that compares equal to {{c|last}}.

===Complexity===
Exactly {{c|ranges::distance(first, last)}} invocations of {{c|gen()}} and assignments.

===Possible implementation===
{{eq fun|1=
struct generate_fn
{
    template&lt;std::input_or_output_iterator O, std::sentinel_for&lt;O&gt; S,
             std::copy_constructible F&gt;
    requires std::invocable&lt;F&amp;&gt; &amp;&amp; std::indirectly_writable&lt;O, std::invoke_result_t&lt;F&amp;&gt;&gt;
    constexpr O operator()(O first, S last, F gen) const
    {
        for (; first != last; *first = std::invoke(gen), ++first)
        {}
        return first;
    }

    template&lt;class R, std::copy_constructible F&gt;
    requires std::invocable&lt;F&amp;&gt; &amp;&amp; ranges::output_range&lt;R, std::invoke_result_t&lt;F&amp;&gt;&gt;
    constexpr ranges::borrowed_iterator_t&lt;R&gt; operator()(R&amp;&amp; r, F gen) const
    {
        return (*this)(ranges::begin(r), ranges::end(r), std::move(gen));
    }
};

inline constexpr generate_fn generate {};
}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;random&gt;
#include &lt;string_view&gt;

auto dice()
{
    static std::uniform_int_distribution&lt;int&gt; distr{1, 6};
    static std::random_device device;
    static std::mt19937 engine {device()};
    return distr(engine);
}

void iota(auto&amp; r, int init)
{
    std::ranges::generate(r, [init] mutable { return init++; });
}

void print(std::string_view comment, const auto&amp; v)
{
    for (std::cout &lt;&lt; comment; int i : v)
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::array&lt;int, 8&gt; v;

    std::ranges::generate(v.begin(), v.end(), dice);
    print("dice: ", v);
    std::ranges::generate(v, dice);
    print("dice: ", v);

    iota(v, 1);
    print("iota: ", v);
}
|p=true
|output=
dice: 4 3 1 6 6 4 5 5
dice: 4 2 5 3 6 2 6 2
iota: 1 2 3 4 5 6 7 8
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc generate_n}}
{{dsc inc|cpp/algorithm/ranges/dsc fill}}
{{dsc inc|cpp/algorithm/ranges/dsc fill_n}}
{{dsc inc|cpp/algorithm/ranges/dsc transform}}
{{dsc inc|cpp/numeric/random/ranges/dsc generate_random}}
{{dsc inc|cpp/algorithm/dsc generate}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
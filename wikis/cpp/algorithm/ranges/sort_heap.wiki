{{cpp/ranges/title|sort_heap}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|Call signature}}
{{dcl|num=1|since=c++20|1=
template&lt; std::random_access_iterator I, std::sentinel_for&lt;I&gt; S,
          class Comp = ranges::less, class Proj = std::identity &gt;
    requires std::sortable&lt;I, Comp, Proj&gt;
constexpr I sort_heap( I first, S last, Comp comp = {}, Proj proj = {} );
}}
{{dcl|num=2|since=c++20|1=
template&lt; ranges::random_access_range R,
          class Comp = ranges::less, class Proj = std::identity &gt;
    requires std::sortable&lt;ranges::iterator_t&lt;R&gt;, Comp, Proj&gt;
constexpr ranges::borrowed_iterator_t&lt;R&gt;
    sort_heap( R&amp;&amp; r, Comp comp = {}, Proj proj = {} );
}}
{{dcl end}}

[[cpp/algorithm#Requirements|Sorts]] the elements in the specified range with respect to {{c|comp}} and {{c|proj}}, where the range originally represents a [[cpp/algorithm#Heap operations|heap]] with respect to {{c|comp}} and {{c|proj}}. The sorted range no longer maintains the heap property.

@1@ The specified range is {{range|first|last}}.

@2@ The specified range is {{c|r}}.

If the specified range is not a heap with respect to {{c|comp}} and {{c|proj}}, the behavior is undefined.

{{cpp/ranges/niebloid}}

===Parameters===
{{par begin}}
{{par|first, last|the iterator and sentinel designating the range of elements to modify}}
{{par|r|the range of elements to modify}}
{{par|comp|comparator to apply to the projected elements}}
{{par|proj|projection to apply to the elements}}
{{par end}}

===Return value===
@1@ {{c|last}}
@2@ {{c|ranges::end(r)}}

===Complexity===
At most {{mathjax-or|\(\scriptsize 2N \cdot \log(N)\)|2N⋅log(N)}} applications of {{c|comp}} and {{mathjax-or|\(\scriptsize 4N \cdot \log(N)\)|4N⋅log(N)}} applications of {{c|proj}}, where {{mathjax-or|\(\scriptsize N \)|N}} is:
@1@ {{c|ranges::distance(first, last)}}
@2@ {{c|ranges::distance(r)}}

===Possible implementation===
{{eq fun|1=
struct sort_heap_fn
{
    template&lt;std::random_access_iterator I, std::sentinel_for&lt;I&gt; S,
             class Comp = ranges::less, class Proj = std::identity&gt;
        requires std::sortable&lt;I, Comp, Proj&gt;
    constexpr I operator()(I first, S last, Comp comp = {}, Proj proj = {}) const
    {
        auto ret{ranges::next(first, last)};
        for (; first != last; --last)
            ranges::pop_heap(first, last, comp, proj);
        return ret;
    }

    template&lt;ranges::random_access_range R,
             class Comp = ranges::less, class Proj = std::identity&gt;
        requires std::sortable&lt;ranges::iterator_t&lt;R&gt;, Comp, Proj&gt;
    constexpr ranges::borrowed_iterator_t&lt;R&gt;
        operator()(R&amp;&amp; r, Comp comp = {}, Proj proj = {}) const
    {
        return (*this)(ranges::begin(r), ranges::end(r), std::move(comp), std::move(proj));
    }
};

inline constexpr sort_heap_fn sort_heap{};
}}

===Example===
{{example|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;iostream&gt;

void print(auto const&amp; rem, const auto&amp; v)
{
    std::cout &lt;&lt; rem;
    for (const auto i : v)
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::array v{3, 1, 4, 1, 5, 9};
    print("original array:  ", v);
    
    std::ranges::make_heap(v);
    print("after make_heap: ", v);
    
    std::ranges::sort_heap(v);
    print("after sort_heap: ", v);
}
|output=
original array:  3 1 4 1 5 9
after make_heap: 9 5 4 1 1 3
after sort_heap: 1 1 3 4 5 9
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc is_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc is_heap_until}}
{{dsc inc|cpp/algorithm/ranges/dsc make_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc pop_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc push_heap}}
{{dsc inc|cpp/algorithm/dsc sort_heap}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
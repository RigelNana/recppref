{{cpp/ranges/title|in_fun_result}}
{{cpp/algorithm/ranges/return_types/navbar}}

{{ddcl|header=algorithm|since=c++20|
template&lt; class I, class F &gt;
struct in_fun_result;
}}

{{tt|ranges::in_fun_result}} is a class template that provides a way to store an iterator and a function object as a single unit.

{{cpp/algorithm/ranges/return_types/general_description}}

===Template parameters===
{{par begin}}
{{par|I|the type of the iterator that the {{tt|ranges::in_fun_result}} stores.}}
{{par|F|the type of the function object that the {{tt|ranges::in_fun_result}} stores.}}
{{par end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc mem obj|in|nolink=true|a value (that is supposed to be an iterator) of type {{tt|I}}.}}
{{dsc mem obj|fun|nolink=true|a value (that is supposed to be a function object) of type {{tt|F}}.}}
{{dsc end}}

All these members are declared with {{attr|no_unique_address}} attribute.

===Member functions===
{{member|{{small|std::ranges::in_fun_result::}}operator in_fun_result&lt;I2, F2&gt;|2=
{{dcl begin}}
{{dcl|num=1|1=
template&lt;class I2, class F2&gt;
requires std::convertible_to&lt;const I&amp;, I2&gt; &amp;&amp; std::convertible_to&lt;const F&amp;, F2&gt;
constexpr operator in_fun_result&lt;I2, F2&gt;() const &amp;;
}}
{{dcl|num=2|1=
template&lt;class I2, class F2&gt;
requires std::convertible_to&lt;I, I2&gt; &amp;&amp; std::convertible_to&lt;F, F2&gt;
constexpr operator in_fun_result&lt;I2, F2&gt;() &amp;&amp;;
}}
{{dcl end}}
Converts {{c|*this}} to the result by constructing every data member of the result from the corresponding member of {{c|*this}}.
@1@ Equivalent to {{c|return {in, fun};}}.
@2@ Equivalent to {{c|return {std::move(in), std::move(fun)};}}.
}}

===Standard library===
The following standard library functions use {{tt|ranges::in_fun_result}} as the return type:

{{dsc begin}}
{{dsc h2|Algorithm functions}}
{{dsc inc|cpp/algorithm/ranges/dsc for_each}}
{{dsc inc|cpp/algorithm/ranges/dsc for_each_n}}
{{dsc end}}

=== Synopsis ===
{{source|1=
namespace std::ranges
{
    template&lt;class I, class F&gt;
    struct in_fun_result
    {
        [[no_unique_address]] I in;
        [[no_unique_address]] F fun;

        template&lt;class I2, class F2&gt;
        requires std::convertible_to&lt;const I&amp;, I2&gt; &amp;&amp; std::convertible_to&lt;const F&amp;, F2&gt;
        constexpr operator in_fun_result&lt;I2, F2&gt;() const &amp;
        {
            return {in, fun};
        }

        template&lt;class I2, class F2&gt;
        requires std::convertible_to&lt;I, I2&gt; &amp;&amp; std::convertible_to&lt;F, F2&gt;
        constexpr operator in_fun_result&lt;I2, F2&gt;() &amp;&amp;
        {
            return {std::move(in), std::move(fun)};
        }
    };
}
}}

===Notes===
{{cpp/algorithm/ranges/notes return_types}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;ranges&gt;

int main()
{
    int v[]{1, 2, 3};

    const std::ranges::in_fun_result res1 = std::ranges::for_each_n(
        v, std::size(v),
        [](int&amp; x) { return x = -x; } // negating lambda
    );
    assert(res1.in == std::end(v));

    const std::ranges::in_fun_result res2 = std::ranges::for_each(
        std::begin(v),
        res1.in,
        [](int x) { std::cout &lt;&lt; x &lt;&lt; ' '; } // printing lambda
    );

    std::cout &lt;&lt; "│ ";

    std::ranges::for_each(v, res1.fun); // uses negating lambda
    std::ranges::for_each(v, res2.fun); // uses printing lambda
    std::cout &lt;&lt; '\n';
}
|output=
-1 -2 -3 │ 1 2 3
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc pair}}
{{dsc inc|cpp/utility/dsc tuple}}
{{dsc end}}

{{langlinks|cs|de|es|fr|it|ja|ko|pl|pt|ru|zh}}
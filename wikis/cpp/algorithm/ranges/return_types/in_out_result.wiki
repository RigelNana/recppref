{{cpp/ranges/title|in_out_result}}
{{cpp/algorithm/ranges/return_types/navbar}}

{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|since=c++20|1=
template&lt; class I, class O &gt;
struct in_out_result;
}}
{{dcl end}}

{{tt|ranges::in_out_result}} is a class template that provides a way to store two iterators as a single unit.

{{cpp/algorithm/ranges/return_types/general_description}}

===Template parameters===
{{par begin}}
{{par|I, O|the types of the objects that the {{tt|ranges::in_out_result}} stores.}}
{{par end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc mem obj|in|nolink=true|a value (that is supposed to be an iterator) of type {{tt|I}}.}}
{{dsc mem obj|out|nolink=true|a value (that is supposed to be an iterator) of type {{tt|O}}.}}
{{dsc end}}

All these members are declared with {{attr|no_unique_address}} attribute.

===Member functions===
{{member|{{small|std::ranges::in_out_result::}}operator in_out_result&lt;I2, O2&gt;|2=
{{dcl begin}}
{{dcl|num=1|1=
template&lt;class I2, class O2&gt;
requires std::convertible_to&lt;const I&amp;, I2&gt; &amp;&amp; std::convertible_to&lt;const O&amp;, O2&gt;
constexpr operator in_out_result&lt;I2, O2&gt;() const &amp;;
}}
{{dcl|num=2|1=
template&lt;class I2, class O2&gt;
requires std::convertible_to&lt;I, I2&gt; &amp;&amp; std::convertible_to&lt;O, O2&gt;
constexpr operator in_out_result&lt;I2, O2&gt;() &amp;&amp;;
}}
{{dcl end}}
Converts {{c|*this}} to the result by constructing every data member of the result from the corresponding member of {{c|*this}}.
@1@ Equivalent to {{c|return {in, out};}}.
@2@ Equivalent to {{c|return {std::move(in), std::move(out)};}}.
}}

===Standard library===
The following standard library functions use {{tt|ranges::in_out_result}} as the return type:

{{dsc begin}}
{{dsc h2|Algorithm functions}}
{{dsc inc|cpp/algorithm/ranges/dsc copy}}
{{dsc inc|cpp/algorithm/ranges/dsc copy_n}}
{{dsc inc|cpp/algorithm/ranges/dsc copy_backward}}
{{dsc inc|cpp/algorithm/ranges/dsc move}}
{{dsc inc|cpp/algorithm/ranges/dsc move_backward}}
{{dsc inc|cpp/algorithm/ranges/dsc transform}}
{{dsc inc|cpp/algorithm/ranges/dsc replace_copy}}
{{dsc inc|cpp/algorithm/ranges/dsc remove_copy}}
{{dsc inc|cpp/algorithm/ranges/dsc unique_copy}}
{{dsc inc|cpp/algorithm/ranges/dsc reverse_copy}}
{{dsc inc|cpp/algorithm/ranges/dsc rotate_copy}}
{{dsc inc|cpp/algorithm/ranges/dsc partial_sort_copy}}
{{dsc inc|cpp/algorithm/ranges/dsc set_difference}}
{{dsc h2|Memory functions}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_copy}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_copy_n}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_move}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_move_n}}
{{dsc end}}

=== Synopsis ===
{{source|1=
namespace std::ranges
{
    template&lt;class I, class O&gt;
    struct in_out_result
    {
        [[no_unique_address]] I in;
        [[no_unique_address]] O out;

        template&lt;class I2, class O2&gt;
        requires std::convertible_to&lt;const I&amp;, I2&gt; &amp;&amp; std::convertible_to&lt;const O&amp;, O2&gt;
        constexpr operator in_out_result&lt;I2, O2&gt;() const &amp;
        {
            return {in, out};
        }

        template&lt;class I2, class O2&gt;
        requires std::convertible_to&lt;I, I2&gt; &amp;&amp; std::convertible_to&lt;O, O2&gt;
        constexpr operator in_out_result&lt;I2, O2&gt;() &amp;&amp;
        {
            return {std::move(in), std::move(out)};
        }
    };
}
}}

===Notes===
{{cpp/algorithm/ranges/notes return_types}}

===Example===
{{example|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;cctype&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;

int main()
{
    constexpr char in[] = "transform" "\n";
    std::array&lt;char, sizeof(in)&gt; out;

    const auto result = std::ranges::transform(in, out.begin(),
        [](char c) { return std::toupper(c); });

    auto print = [](char c) { std::cout &lt;&lt; c; };
    std::ranges::for_each(std::cbegin(in), result.in, print);
    std::ranges::for_each(out.cbegin(), result.out, print);
}
|output=
transform
TRANSFORM
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc pair}}
{{dsc inc|cpp/utility/dsc tuple}}
{{dsc end}}

{{langlinks|cs|de|es|fr|it|ja|ko|pl|pt|ru|zh}}
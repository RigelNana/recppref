{{cpp/ranges/title|min_max_result}}
{{cpp/algorithm/ranges/return_types/navbar}}

{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|since=c++20|
template&lt; class T &gt;
struct min_max_result;
}}
{{dcl end}}

{{tt|ranges::min_max_result}} is a class template that provides a way to store two objects or references of the same type as a single unit.

{{cpp/algorithm/ranges/return_types/general_description}}

===Template parameters===
{{par begin}}
{{par|T|the type of the objects or references that the {{tt|ranges::min_max_result}} stores.}}
{{par end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc mem obj|min|nolink=true|may be a reference to, a copy of, or an iterator of type {{tt|T}} to a minimum element in a range.}}
{{dsc mem obj|max|nolink=true|may be a reference to, a copy of, or an iterator of type {{tt|T}} to a maximum element in a range}}
{{dsc end}}

All these members are declared with {{attr|no_unique_address}} attribute.

===Member functions===
{{member|{{small|std::ranges::min_max_result::}}operator min_max_result&lt;T2&gt;|2=
{{dcl begin}}
{{dcl|num=1|1=
template&lt;class T2&gt;
requires std::convertible_to&lt;const T&amp;, T2&gt;
constexpr operator min_max_result&lt;T2&gt;() const &amp;;
}}
{{dcl|num=2|1=
template&lt;class T2&gt;
requires std::convertible_to&lt;T, T2&gt;
constexpr operator min_max_result&lt;T2&gt;() &amp;&amp;;
}}
{{dcl end}}
Converts {{c|*this}} to the result by constructing every data member of the result from the corresponding member of {{c|*this}}.
@1@ Equivalent to {{c|return {min, max};}}.
@2@ Equivalent to {{c|return {std::move(min), std::move(max)};}}.
}}

===Standard library===
The following standard library functions use {{tt|ranges::min_max_result}} as the return type:

{{dsc begin}}
{{dsc h2|Algorithm functions}}
{{dsc inc|cpp/algorithm/ranges/dsc minmax}}
{{dsc inc|cpp/algorithm/ranges/dsc minmax_element}}
{{dsc end}}

=== Synopsis ===
{{source|1=
namespace std::ranges
{
    template&lt;class T&gt;
    struct min_max_result
    {
        [[no_unique_address]] T min;
        [[no_unique_address]] T max;
      
        template&lt;class T2&gt;
        requires std::convertible_to&lt;const T&amp;, T2&gt;
        constexpr operator min_max_result&lt;T2&gt;() const &amp;
        {
            return {min, max};
        }
      
        template&lt;class T2&gt;
        requires std::convertible_to&lt;T, T2&gt;
        constexpr operator min_max_result&lt;T2&gt;() &amp;&amp;
        {
            return {std::move(min), std::move(max)};
        }
    };
}
}}

===Notes===
{{cpp/algorithm/ranges/notes return_types}}

===Example===
{{example|code=
#include &lt;algorithm&gt;
#include &lt;ranges&gt;

int main()
{
    constexpr static auto v = {3, 1, 4, 1, 5, 9, 2};
    {
        constexpr auto result = std::ranges::minmax(v);
        static_assert(1 == result.min &amp;&amp; 9 == result.max);
    }
    {
        constexpr auto result = std::ranges::minmax_element(v);
        static_assert(1 == *result.min &amp;&amp; 9 == *result.max);
    }
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc pair}}
{{dsc inc|cpp/utility/dsc tuple}}
{{dsc end}}

{{langlinks|cs|de|es|fr|it|ja|ko|pl|pt|ru|zh}}
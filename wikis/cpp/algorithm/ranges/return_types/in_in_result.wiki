{{cpp/ranges/title|in_in_result}}
{{cpp/algorithm/ranges/return_types/navbar}}

{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|since=c++20|1=
template&lt; class I1, class I2 &gt;
struct in_in_result;
}}
{{dcl end}}

{{tt|ranges::in_in_result}} is a class template that provides a way to store two iterators as a single unit.

{{cpp/algorithm/ranges/return_types/general_description}}

===Template parameters===
{{par begin}}
{{par|I1, I2|the types of the iterators that the {{tt|ranges::in_in_result}} stores.}}
{{par end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc mem obj|in1|nolink=true|a value (that is supposed to be an iterator) of type {{tt|I1}}.}}
{{dsc mem obj|in2|nolink=true|a value (that is supposed to be an iterator) of type {{tt|I2}}.}}
{{dsc end}}

All these members are declared with {{attr|no_unique_address}} attribute.

===Member functions===
{{member|{{small|std::ranges::in_in_result::}}operator in_in_result&lt;II1, II2&gt;|2=
{{dcl begin}}
{{dcl|num=1|1=
template&lt;class II1, class II2&gt;
requires std::convertible_to&lt;const I1&amp;, II1&gt; &amp;&amp; std::convertible_to&lt;const I2&amp;, II2&gt;
constexpr operator in_in_result&lt;II1, II2&gt;() const &amp;;
}}
{{dcl|num=2|1=
template&lt;class II1, class II2&gt;
requires std::convertible_to&lt;I1, II1&gt; &amp;&amp; std::convertible_to&lt;I2, II2&gt;
constexpr operator in_in_result&lt;II1, II2&gt;() &amp;&amp;;
}}
{{dcl end}}
Converts {{c|*this}} to the result by constructing every data member of the result from the corresponding member of {{c|*this}}.
@1@ Equivalent to {{c|return {in1, in2};}}.
@2@ Equivalent to {{c|return {std::move(in1), std::move(in2)};}}.
}}

===Standard library===
The following standard library functions use {{tt|ranges::in_in_result}} as the return type:

{{dsc begin}}
{{dsc h2|Algorithm functions}}
{{dsc inc|cpp/algorithm/ranges/dsc mismatch}}
{{dsc inc|cpp/algorithm/ranges/dsc swap_ranges}}
{{dsc end}}

=== Synopsis ===
{{source|1=
namespace std::ranges
{
    template&lt;class I1, class I2&gt;
    struct in_in_result
    {
        [[no_unique_address]] I1 in1;
        [[no_unique_address]] I2 in2;

        template&lt;class II1, class II2&gt;
        requires std::convertible_to&lt;const I1&amp;, II1&gt; &amp;&amp; std::convertible_to&lt;const I2&amp;, II2&gt;
        constexpr operator in_in_result&lt;II1, II2&gt;() const &amp;
        {
            return {in1, in2};
        }

        template&lt;class II1, class II2&gt;
        requires std::convertible_to&lt;I1, II1&gt; &amp;&amp; std::convertible_to&lt;I2, II2&gt;
        constexpr operator in_in_result&lt;II1, II2&gt;() &amp;&amp;
        {
            return {std::move(in1), std::move(in2)};
        }
    };
}
}}

===Notes===
{{cpp/algorithm/ranges/notes return_types}}

===Example===
{{example|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;

int main()
{
    constexpr static auto in1 = {1, 2, 3, 4};
    constexpr static auto in2 = {1, 2, 4, 5};

    constexpr auto result {std::ranges::mismatch(in1, in2)};

    static_assert(2 == std::ranges::distance(in1.begin(), result.in1));
    static_assert(2 == std::ranges::distance(in2.begin(), result.in2));
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc pair}}
{{dsc inc|cpp/utility/dsc tuple}}
{{dsc end}}

{{langlinks|cs|de|es|fr|it|ja|ko|pl|pt|ru|zh}}
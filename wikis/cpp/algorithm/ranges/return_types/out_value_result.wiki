{{cpp/ranges/title|out_value_result}}
{{cpp/algorithm/ranges/return_types/navbar}}

{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|since=c++23|1=
template&lt; class O, class T &gt;
struct out_value_result;
}}
{{dcl end}}

{{tt|ranges::out_value_result}} is a class template that provides a way to store an iterator and a value as a single unit.

{{cpp/algorithm/ranges/return_types/general_description}}

===Template parameters===
{{par begin}}
{{par|O, T|the types of the objects that the {{tt|ranges::out_value_result}} stores.}}
{{par end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc mem obj|out|nolink=true|a value (that is supposed to be an iterator) of type {{tt|O}}.}}
{{dsc mem obj|value|nolink=true|a value (that is supposed to be a stored value) of type {{tt|T}}.}}
{{dsc end}}

All these members are declared with {{attr|no_unique_address}} attribute.

===Member functions===
{{member|{{small|std::ranges::out_value_result::}}operator out_value_result&lt;O2, T2&gt;|2=
{{dcl begin}}
{{dcl|num=1|1=
template&lt;class O2, class T2&gt;
requires convertible_to&lt;const O&amp;, O2&gt; &amp;&amp; convertible_to&lt;const T&amp;, T2&gt;
constexpr operator out_value_result&lt;O2, T2&gt;() const &amp;;
}}
{{dcl|num=2|1=
template&lt;class O2, class T2&gt;
requires convertible_to&lt;O, O2&gt; &amp;&amp; convertible_to&lt;T, T2&gt;
constexpr operator out_value_result&lt;O2, T2&gt;() &amp;&amp;;
}}
{{dcl end}}
Converts {{c|*this}} to the result by constructing every data member of the result from the corresponding member of {{c|*this}}.
@1@ Equivalent to {{c|return {out, value};}}.
@2@ Equivalent to {{c|return {std::move(out), std::move(value)};}}.
}}

===Standard library===
The following standard library functions use {{tt|ranges::out_value_result}} as the return type:

{{dsc begin}}
{{dsc h2|Algorithm functions}}
{{dsc inc|cpp/algorithm/ranges/dsc iota}}
{{dsc end}}

===Synopsis===
{{source|1=
namespace std::ranges
{
    template&lt;class O, class T&gt;
    struct out_value_result
    {
        [[no_unique_address]] O out;
        [[no_unique_address]] T value;
 
        template&lt;class O2, class T2&gt;
        requires convertible_to&lt;const O&amp;, O2&gt; &amp;&amp; convertible_to&lt;const T&amp;, T2&gt;
        constexpr operator out_value_result&lt;O2, T2&gt;() const &amp;
        {
            return {out, value};
        }
 
        template&lt;class O2, class T2&gt;
        requires convertible_to&lt;O, O2&gt; &amp;&amp; convertible_to&lt;T, T2&gt;
        constexpr operator out_value_result&lt;O2, T2&gt;() &amp;&amp;
        {
            return {std::move(out), std::move(value)};
        }
    };
}
}}

===Notes===
{{cpp/algorithm/ranges/notes return_types}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;cassert&gt;
#include &lt;numeric&gt;
#include &lt;ranges&gt;

int main()
{
    std::array&lt;int, 4&gt; a{};
    constexpr std::array expected{2, 3, 4, 5};
    const auto result = std::ranges::iota(a, 2);
    assert(std::ranges::distance(a.cbegin(), result.out) == 4);
    assert(result.value == 6);
    assert(a == expected);
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc pair}}
{{dsc inc|cpp/utility/dsc tuple}}
{{dsc end}}

{{langlinks|cs|de|es|fr|it|ja|ko|pl|pt|ru|zh}}
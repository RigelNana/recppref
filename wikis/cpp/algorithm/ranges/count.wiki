{{cpp/ranges/title|count|count_if}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|Call signature}}
{{dcl rev begin|num=1}}
{{dcla|anchor=1|since=c++20|until=c++26|1=
template&lt; std::input_iterator I, std::sentinel_for&lt;I&gt; S,
          class T, class Proj = std::identity &gt;
requires std::indirect_binary_predicate
             &lt;ranges::equal_to, std::projected&lt;I, Proj&gt;, const T*&gt;
constexpr std::iter_difference_t&lt;I&gt;
    count( I first, S last, const T&amp; value, Proj proj = {} );
}}
{{dcl|since=c++26|1=
template&lt; std::input_iterator I, std::sentinel_for&lt;I&gt; S,
          class Proj = std::identity,
          class T = std::projected_value_t&lt;I, Proj&gt; &gt;
requires std::indirect_binary_predicate
             &lt;ranges::equal_to, std::projected&lt;I, Proj&gt;, const T*&gt;
constexpr std::iter_difference_t&lt;I&gt;
    count( I first, S last, const T&amp; value, Proj proj = {} );
}}
{{dcl rev end}}
{{dcl rev begin|num=2}}
{{dcl|since=c++20|until=c++26|1=
template&lt; ranges::input_range R, class T, class Proj = std::identity &gt;
requires std::indirect_binary_predicate
             &lt;ranges::equal_to,
              std::projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;, const T*&gt;
constexpr ranges::range_difference_t&lt;R&gt;
    count( R&amp;&amp; r, const T&amp; value, Proj proj = {} );
}}
{{dcl|since=c++26|1=
template&lt; ranges::input_range R, class Proj = std::identity,
          class T = std::projected_value_t&lt;ranges::iterator_t&lt;R&gt;, Proj&gt; &gt;
requires std::indirect_binary_predicate
             &lt;ranges::equal_to,
              std::projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;, const T*&gt;
constexpr ranges::range_difference_t&lt;R&gt;
    count( R&amp;&amp; r, const T&amp; value, Proj proj = {} );
}}
{{dcl rev end}}
{{dcla|num=3|since=c++20|1=
template&lt; std::input_iterator I, std::sentinel_for&lt;I&gt; S,
          class Proj = std::identity,
          std::indirect_unary_predicate&lt;std::projected&lt;I, Proj&gt;&gt; Pred &gt;
constexpr std::iter_difference_t&lt;I&gt;
    count_if( I first, S last, Pred pred, Proj proj = {} );
}}
{{dcl|since=c++20|num=4|1=
template&lt; ranges::input_range R, class Proj = std::identity,
          std::indirect_unary_predicate&lt;
              std::projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt; Pred &gt;
constexpr ranges::range_difference_t&lt;R&gt;
    count_if( R&amp;&amp; r, Pred pred, Proj proj = {} );
}}
{{dcl end}}

Returns the number of elements in the range {{range|first|last}} satisfying specific criteria.
@1@ Counts the elements that are equal to {{c|value}}.
@3@ Counts elements for which predicate {{c|p}} returns {{c|true}}.
@2,4@ Same as {{v|1,3}}, but uses {{c|r}} as the source range, as if using {{c|ranges::begin(r)}} as {{c|first}} and {{c|ranges::end(r)}} as {{c|last}}.

{{cpp/ranges/niebloid}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to examine}}
{{par|r|the range of the elements to examine}}
{{par|value|the value to search for}}
{{par|pred|predicate to apply to the projected elements}}
{{par|proj|projection to apply to the elements}}
{{par end}}

===Return value===
Number of elements satisfying the condition.

===Complexity===
Exactly {{c|last - first}} comparisons and projection.

===Notes===
For the number of elements in the range without any additional criteria, see {{lc|std::ranges::distance}}.

{{feature test macro|__cpp_lib_algorithm_default_value_type|value=202403|std=C++26|[[cpp/language/list initialization|List-initialization]] for algorithms {{vl|1,2}}}}

===Possible implementation===
{{eq impl
|title1=count (1)|ver1=1|1=
struct count_fn
{
    template&lt;std::input_iterator I, std::sentinel_for&lt;I&gt; S,
             class Proj = std::identity, class T = std::projected_value_t&lt;I, Proj&gt;&gt;
    requires std::indirect_binary_predicate&lt;ranges::equal_to,
                                            std::projected&lt;I, Proj&gt;, const T*&gt;
    constexpr std::iter_difference_t&lt;I&gt;
        operator()(I first, S last, const T&amp; value, Proj proj = {}) const
    {
        std::iter_difference_t&lt;I&gt; counter = 0;
        for (; first != last; ++first)
            if (std::invoke(proj, *first) == value)
                ++counter;
        return counter;
    }
    
    template&lt;ranges::input_range R, class Proj = std::identity
             class T = std::projected_value_t&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt;
    requires std::indirect_binary_predicate&lt;ranges::equal_to,
                                            std::projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;,
                                            const T*&gt;
    constexpr ranges::range_difference_t&lt;R&gt;
        operator()(R&amp;&amp; r, const T&amp; value, Proj proj = {}) const
    {
        return (*this)(ranges::begin(r), ranges::end(r), value, std::ref(proj));
    }
};

inline constexpr count_fn count;
|title2=count_if (3)|ver2=3|2=
struct count_if_fn
{
    template&lt;std::input_iterator I, std::sentinel_for&lt;I&gt; S,
             class Proj = std::identity,
             std::indirect_unary_predicate&lt;std::projected&lt;I, Proj&gt;&gt; Pred&gt;
    constexpr std::iter_difference_t&lt;I&gt;
        operator()(I first, S last, Pred pred, Proj proj = {}) const
    {
        std::iter_difference_t&lt;I&gt; counter = 0;
        for (; first != last; ++first)
            if (std::invoke(pred, std::invoke(proj, *first)))
                ++counter;
        return counter;
    }
    
    template&lt;ranges::input_range R, class Proj = std::identity,
             std::indirect_unary_predicate&lt;
                 std::projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt; Pred&gt;
    constexpr ranges::range_difference_t&lt;R&gt;
        operator()(R&amp;&amp; r, Pred pred, Proj proj = {}) const
    {
        return (*this)(ranges::begin(r), ranges::end(r),
                       std::ref(pred), std::ref(proj));
    }
};

inline constexpr count_if_fn count_if;
}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;complex&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;
 
int main()
{
    std::vector&lt;int&gt; v{1, 2, 3, 4, 4, 3, 7, 8, 9, 10};
    
    namespace ranges = std::ranges;
    
    // determine how many integers in a std::vector match a target value.
    int target1 = 3;
    int target2 = 5;
    int num_items1 = ranges::count(v.begin(), v.end(), target1);
    int num_items2 = ranges::count(v, target2);
    std::cout &lt;&lt; "number: " &lt;&lt; target1 &lt;&lt; " count: " &lt;&lt; num_items1 &lt;&lt; '\n';
    std::cout &lt;&lt; "number: " &lt;&lt; target2 &lt;&lt; " count: " &lt;&lt; num_items2 &lt;&lt; '\n';
    
    // use a lambda expression to count elements divisible by 3.
    int num_items3 = ranges::count_if(v.begin(), v.end(), [](int i){ return i % 3 == 0; });
    std::cout &lt;&lt; "number divisible by three: " &lt;&lt; num_items3 &lt;&lt; '\n';
    
    // use a lambda expression to count elements divisible by 11.
    int num_items11 = ranges::count_if(v, [](int i){ return i % 11 == 0; });
    std::cout &lt;&lt; "number divisible by eleven: " &lt;&lt; num_items11 &lt;&lt; '\n';

    std::vector&lt;std::complex&lt;double&gt;&gt; nums{&lt;!----&gt;{4, 2}, {1, 3}, {4, 2}&lt;!----&gt;};
    #ifdef __cpp_lib_algorithm_default_value_type
        auto c = ranges::count(nums, {4, 2});
    #else
        auto c = ranges::count(nums, std::complex&lt;double&gt;{4, 2});
    #endif
    assert(c == 2);
}
|output=
number: 3 count: 2
number: 5 count: 0
number divisible by three: 3
number divisible by eleven: 0
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/ranges/dsc distance}}
{{dsc inc|cpp/ranges/dsc view_counted}}
{{dsc inc|cpp/ranges/dsc filter_view}}
{{dsc inc|cpp/algorithm/dsc count}}
{{dsc end}}

{{langlinks|es|ja|zh}}
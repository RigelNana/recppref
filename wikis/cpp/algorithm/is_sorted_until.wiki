{{cpp/title|is_sorted_until}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|since=c++11|notes={{mark constexpr since c++20}}|
template&lt; class ForwardIt &gt;
ForwardIt is_sorted_until( ForwardIt first, ForwardIt last );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt &gt;
ForwardIt is_sorted_until( ExecutionPolicy&amp;&amp; policy,
                           ForwardIt first, ForwardIt last );
}}
{{dcla|num=3|since=c++11|notes={{mark constexpr since c++20}}|
template&lt; class ForwardIt, class Compare &gt;
ForwardIt is_sorted_until( ForwardIt first, ForwardIt last,
                           Compare comp );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt, class Compare &gt;
ForwardIt is_sorted_until( ExecutionPolicy&amp;&amp; policy,
                           ForwardIt first, ForwardIt last,
                           Compare comp );
}}
{{dcl end}}

Examines the range {{range|first|last}} and finds the largest range beginning at {{c|first}} in which the elements are sorted in non-descending order.

@1@ Finds the largest range whether elements are {{rlp|/#Requirements|sorted}} with respect to {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}.

@3@ Finds the largest range whether elements are sorted with respect to {{c|comp}}.

@2,4@ Same as {{v|1,3}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition|plural=true}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to examine}}
{{par exec pol}}
{{par cmp ord|comp|p1=ForwardIt}}
{{par hreq}}
{{par req named|ForwardIt|ForwardIterator}}
{{par req named|Compare|Compare}}
{{par end}}

===Return value===
The upper bound of the largest range beginning at {{c|first}} in which the elements are sorted in ascending order. That is, the last iterator {{c|it}} for which range {{range|first|it}} is sorted.

Returns {{c|last}} for empty ranges and ranges of length one.

===Complexity===
Given {{mathjax-or|\(\scriptsize N\)|N}} as {{c|std::distance(first, last)}}:

@1,2@ {{mathjax-or|\(\scriptsize O(N)\)|O(N)}} comparisons using {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}.

@3,4@ {{mathjax-or|\(\scriptsize O(N)\)|O(N)}} applications of the comparator {{c|comp}}.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===Possible implementation===
See also the implementations in [https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L3211 libstdc++] and [https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L3614 libc++].
{{eq impl
|title1=is_sorted_until (1)|ver1=1|1=
template&lt;class ForwardIt&gt;
constexpr //&lt; since C++20
ForwardIt is_sorted_until(ForwardIt first, ForwardIt last)
{
    return std::is_sorted_until(first, last, std::less&lt;&gt;());
}
|title2=is_sorted_until (2)|ver2=3|2=
template&lt;class ForwardIt, class Compare&gt;
constexpr //&lt; since C++20
ForwardIt is_sorted_until(ForwardIt first, ForwardIt last, Compare comp)
{
    if (first != last)
    {
        ForwardIt next = first;
        while (++next != last)
        {
            if (comp(*next, *first))
                return next;
            first = next;
        }
    }
    return last;
}
}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;random&gt;
#include &lt;string&gt;

int main()
{
    std::random_device rd;
    std::mt19937 g(rd());
    const int N = 6;
    int nums[N] = {3, 1, 4, 1, 5, 9};
    
    const int min_sorted_size = 4;
    
    for (int sorted_size = 0; sorted_size &lt; min_sorted_size;)
    {
        std::shuffle(nums, nums + N, g);
        int *const sorted_end = std::is_sorted_until(nums, nums + N);
        sorted_size = std::distance(nums, sorted_end);
        assert(sorted_size &gt;= 1);
        
        for (const auto i : nums)
            std::cout &lt;&lt; i &lt;&lt; ' ';
        std::cout &lt;&lt; ": " &lt;&lt; sorted_size &lt;&lt; " initial sorted elements\n"
                  &lt;&lt; std::string(sorted_size * 2 - 1, '^') &lt;&lt; '\n';
    }
}
|p=true
|output=
4 1 9 5 1 3 : 1 initial sorted elements
^
4 5 9 3 1 1 : 3 initial sorted elements
^^^^^
9 3 1 4 5 1 : 1 initial sorted elements
^
1 3 5 4 1 9 : 3 initial sorted elements
^^^^^
5 9 1 1 3 4 : 2 initial sorted elements
^^^
4 9 1 5 1 3 : 2 initial sorted elements
^^^
1 1 4 9 5 3 : 4 initial sorted elements
^^^^^^^
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc is_sorted}}
{{dsc inc|cpp/algorithm/ranges/dsc is_sorted_until}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
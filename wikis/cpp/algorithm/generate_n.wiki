{{cpp/title|generate_n}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|
template&lt; class OutputIt, class Size, class Generator &gt;
OutputIt generate_n( OutputIt first, Size count, Generator g );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt, class Size, class Generator &gt;
ForwardIt generate_n( ExecutionPolicy&amp;&amp; policy,
                      ForwardIt first, Size count, Generator g );
}}
{{dcl end}}

@1@ Assigns values, generated by given function object {{c|g}}, to the first {{c|count}} elements in the range beginning at {{c|first}}, if {{c|count &gt; 0}}. Does nothing otherwise.

@2@ Same as {{v|1}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition}}

If {{tt|Size}} is not [[cpp/language/implicit cast|convertible]] to an [[cpp/language/type|integral type]], the program is ill-formed.

===Parameters===
{{par begin}}
{{par|first|the beginning of the range of elements to generate}}
{{par|count|number of the elements to generate}}
{{par exec pol}}
{{par gen|g|rp=OutputIt}}
{{par hreq}}
{{par req named|OutputIt|OutputIterator}}
{{par req named|ForwardIt|ForwardIterator}}
{{par end}}

===Return value===
Iterator one past the last element assigned if {{c|count &gt; 0}}, {{c|first}} otherwise.

===Complexity===
Exactly {{c|std::max(0, count)}} invocations of {{c|g()}} and assignments.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=yes}}

===Possible implementation===
{{eq fun|1=
template&lt;class OutputIt, class Size, class Generator&gt;
constexpr // since C++20
OutputIt generate_n(OutputIt first, Size count, Generator g)
{
    for (Size i = 0; i &lt; count; ++i, ++first)
        *first = g();
    
    return first;
}
}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;random&gt;

int main()
{
    std::mt19937 rng; // default constructed, seeded with fixed seed
    std::generate_n(std::ostream_iterator&lt;std::mt19937::result_type&gt;(std::cout, " "),
                    5, std::ref(rng));
    std::cout &lt;&lt; '\n';
}
|output=
3499211612 581869302 3890346734 3586334585 545404204
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=426|std=C++98|before=the complexity requirement was “exactly {{c|count}} invocations&lt;br&gt;or assignments”, which is broken if {{c|count}} is negative|after=no invocation or assignment&lt;br&gt;if {{c|count}} is non-positive}}
{{dr list item|wg=lwg|dr=865|std=C++98|before=the location of the first element following&lt;br&gt;the generation range was not returned|after=returned}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc fill_n}}
{{dsc inc|cpp/algorithm/dsc generate}}
{{dsc inc|cpp/algorithm/ranges/dsc generate_n}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|push_heap}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|
template&lt; class RandomIt &gt;
void push_heap( RandomIt first, RandomIt last );
}}
{{dcl|num=2|notes={{mark constexpr since c++20}}|
template&lt; class RandomIt, class Compare &gt;
void push_heap( RandomIt first, RandomIt last, Compare comp );
}}
{{dcl end}}

Inserts the element at the position {{c|last - 1}} into the {{rlp|/#Heap operations|heap}} {{range|first|last - 1}}. The heap after the insertion will be {{range|first|last}}.

@1@ The heap is with respect to {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}.
@2@ The heap is with respect to {{c|comp}}.

If any of the following conditions is satisfied, the behavior is undefined:
* {{range|first|last - 1}} is not a heap with respect to the corresponding comparator.
{{rev begin}}
{{rev|until=c++11|
* The type of {{c|*first}} is not {{named req|Swappable}}.
}}
{{rev|since=c++11|
* {{tt|RandomIt}} is not {{named req|ValueSwappable}}.
* The type of {{c|*first}} is not {{named req|MoveConstructible}}.
* The type of {{c|*first}} is not {{named req|MoveAssignable}}.
}}
{{rev end}}

===Parameters===
{{par begin}}
{{par|first, last|the range indicating the heap after the insertion}}
{{par cmp|comp|p1=RandomIt}}
{{par hreq}}
{{par req named|RandomIt|RandomAccessIterator}}
{{par req named|Compare|Compare}}
{{par end}}

===Complexity===
Given {{mathjax-or|\(\scriptsize N\)|N}} as {{c|std::distance(first, last)}}:
@1@ At most {{mathjax-or|\(\scriptsize \log(N)\)|log(N)}} comparisons using {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}.
@2@ At most {{mathjax-or|\(\scriptsize \log(N)\)|log(N)}} applications of the comparison function {{c|comp}}.

===Example===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;
#include &lt;vector&gt;

void println(std::string_view rem, const std::vector&lt;int&gt;&amp; v)
{
    std::cout &lt;&lt; rem;
    for (int e : v)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::vector&lt;int&gt; v{3, 1, 4, 1, 5, 9};
    
    std::make_heap(v.begin(), v.end());
    println("after make_heap: ", v);
    
    v.push_back(6);
    println("after push_back: ", v);
    
    std::push_heap(v.begin(), v.end());
    println("after push_heap: ", v);
}
|output=
after make_heap: 9 5 4 1 1 3
after push_back: 9 5 4 1 1 3 6
after push_heap: 9 5 6 1 1 3 4
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3032|std=C++98|before=the elements of {{range|first|last}} was not required to be swappable|after=required}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc is_heap}}
{{dsc inc|cpp/algorithm/dsc is_heap_until}}
{{dsc inc|cpp/algorithm/dsc make_heap}}
{{dsc inc|cpp/algorithm/dsc pop_heap}}
{{dsc inc|cpp/algorithm/dsc sort_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc push_heap}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
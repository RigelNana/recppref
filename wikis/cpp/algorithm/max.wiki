{{cpp/title|max}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|constexpr=c++14|
template&lt; class T &gt;
const T&amp; max( const T&amp; a, const T&amp; b );
}}
{{dcla|num=2|constexpr=c++14|
template&lt; class T, class Compare &gt;
const T&amp; max( const T&amp; a, const T&amp; b, Compare comp );
}}
{{dcla|num=3|since=c++11|constexpr=c++14|
template&lt; class T &gt;
T max( std::initializer_list&lt;T&gt; ilist );
}}
{{dcla|num=4|since=c++11|constexpr=c++14|
template&lt; class T, class Compare &gt;
T max( std::initializer_list&lt;T&gt; ilist, Compare comp );
}}
{{dcl end}}

Returns the greater of the given values.

@1,2@ Returns the greater of {{c|a}} and {{c|b}}.
:@1@ Uses {{c/core|operator&lt;}} to compare the values.
:@@ If {{tt|T}} is not {{named req|LessThanComparable}}, the behavior is undefined.
:@2@ Use the comparison function {{c|comp}} to compare the values.

@3,4@ Returns the greatest of the values in initializer list {{c|ilist}}.
@@ If {{c|ilist.size()}} is zero, or {{tt|T}} is not {{named req|CopyConstructible}}, the behavior is undefined.
:@3@ Uses {{c/core|operator&lt;}} to compare the values.
:@@ If {{tt|T}} is not {{named req|LessThanComparable}}, the behavior is undefined.
:@4@ Use the comparison function {{c|comp}} to compare the values.

===Parameters===
{{par begin}}
{{par|a, b|the values to compare}}
{{par|ilist|initializer list with the values to compare}}
{{par cmp|comp|t1=T|{{c|a}} is ''less'' than {{c|b}}}} 
{{par end}}

===Return value===
@1,2@ The greater of {{c|a}} and {{c|b}}. If they are equivalent, returns {{c|a}}.

@3,4@ The greatest value in {{c|ilist}}. If several values are equivalent to the greatest, returns the leftmost one.

===Complexity===
@1@ Exactly one comparison using {{c/core|operator&lt;}}.

@2@ Exactly one application of the comparison function {{c|comp}}.

@3,4@ Given {{mathjax-or|\(\scriptsize N\)|N}} as {{c|ilist.size()}}:
:@3@ Exactly {{mathjax-or|\(\scriptsize N-1\)|N-1}} comparisons using {{c/core|operator&lt;}}.
:@4@ Exactly {{mathjax-or|\(\scriptsize N-1\)|N-1}} applications of the comparison function {{c|comp}}.

===Possible implementation===
{{eq impl
|title1=max (1)|ver1=1|1=
template&lt;class T&gt; 
const T&amp; max(const T&amp; a, const T&amp; b)
{
    return (a &lt; b) ? b : a;
}
|title2=max (2)|ver2=2|2=
template&lt;class T, class Compare&gt; 
const T&amp; max(const T&amp; a, const T&amp; b, Compare comp)
{
    return (comp(a, b)) ? b : a;
}
|title3=max (3)|ver3=3|3=
template&lt;class T&gt;
T max(std::initializer_list&lt;T&gt; ilist)
{
    return *std::max_element(ilist.begin(), ilist.end());
}
|title4=max (4)|ver4=4|4=
template&lt;class T, class Compare&gt;
T max(std::initializer_list&lt;T&gt; ilist, Compare comp)
{
    return *std::max_element(ilist.begin(), ilist.end(), comp);
}
}}

===Notes===
{{cpp/algorithm/minmax danger note|max}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

int main()
{
    auto longest = [](const std::string_view s1, const std::string_view s2)
                   {
                       return s1.size() &lt; s2.size();
                   };
    
    std::cout &lt;&lt; "Larger of 69 and 96 is " &lt;&lt; std::max(69, 96) &lt;&lt; "\n"
                 "Larger of 'q' and 'p' is '" &lt;&lt; std::max('q', 'p') &lt;&lt; "'\n"
                 "Largest of 010, 10, 0X10, and 0B10 is "
              &lt;&lt; std::max({010, 10, 0X10, 0B10}) &lt;&lt; '\n'
              &lt;&lt; R"(Longest of "long", "short", and "int" is )"
              &lt;&lt; std::quoted(std::max({"long", "short", "int"}, longest)) &lt;&lt; '\n';
}
|output=
Larger of 69 and 96 is 96
Larger of 'q' and 'p' is 'q'
Largest of 010, 10, 0X10, and 0B10 is 16
Longest of "long", "short", and "int" is "short"
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=281|std=C++98|before={{tt|T}} was required to be {{named req|CopyConstructible}} for overloads {{vl|1,2}}|after=not required}}
{{dr list item|wg=lwg|dr=2239|std=C++98&lt;br&gt;C++11|before=1. {{tt|T}} was required to be {{named req|LessThanComparable}} for&lt;br&gt;{{nbsp|4}}overloads {{vl|2}} (C++98) and {{vl|4}} (C++11)&lt;br&gt;2. the complexity requirements were missing|after=1. not required&lt;br&gt;2. added the requirements}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc min}}
{{dsc inc|cpp/algorithm/dsc minmax}}
{{dsc inc|cpp/algorithm/dsc max_element}}
{{dsc inc|cpp/algorithm/dsc clamp}}
{{dsc inc|cpp/algorithm/ranges/dsc max}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/algorithm/execution/title|seq|par|par_unseq|unseq}}
{{cpp/algorithm/navbar}}

{{dcl begin}}
{{dcl header|execution }}
{{dcl|since=c++17|
inline constexpr
std::execution::sequenced_policy seq { /* unspecified */ };
}}
{{dcl|since=c++17|
inline constexpr
std::execution::parallel_policy par { /* unspecified */ };
}}
{{dcl|since=c++17|
inline constexpr
std::execution::parallel_unsequenced_policy par_unseq { /* unspecified */ };
}}
{{dcl|since=c++20|
inline constexpr
std::execution::unsequenced_policy unseq { /* unspecified */ };
}}
{{dcl end}}

The execution policy types
* {{lc|std::execution::sequenced_policy}},
* {{lc|std::execution::parallel_policy}},
* {{lc|std::execution::parallel_unsequenced_policy}}, and
* {{lc|std::execution::unsequenced_policy}}

have the following respective instances:

* {{tt|std::execution::seq}},
* {{tt|std::execution::par}},
* {{tt|std::execution::par_unseq}}, and
* {{tt|std::execution::unseq}}.

These instances are used to specify the execution policy of parallel algorithms, i.e., the kinds of parallelism allowed.

Additional execution policies may be provided by a standard library implementation (possible future additions may include {{tt|std::parallel::cuda}} and {{tt|std::parallel::opencl}}).

===Example===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;chrono&gt;
#include &lt;cstdint&gt;
#include &lt;iostream&gt;
#include &lt;random&gt;
#include &lt;vector&gt;

#ifdef PARALLEL
#include &lt;execution&gt;
    namespace execution = std::execution;
#else
    enum class execution { seq, unseq, par_unseq, par };
#endif

void measure([[maybe_unused]] auto policy, std::vector&lt;std::uint64_t&gt; v)
{
    const auto start = std::chrono::steady_clock::now();
#ifdef PARALLEL
    std::sort(policy, v.begin(), v.end());
#else
    std::sort(v.begin(), v.end());
#endif
    const auto finish = std::chrono::steady_clock::now();
    std::cout &lt;&lt; std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(finish - start)
              &lt;&lt; '\n';
};

int main()
{
    std::vector&lt;std::uint64_t&gt; v(1'000'000);
    std::mt19937 gen {std::random_device{}()};
    std::ranges::generate(v, gen);

    measure(execution::seq, v);
    measure(execution::unseq, v);
    measure(execution::par_unseq, v);
    measure(execution::par, v);
}
|p=true
|output=
// online GNU/gcc compiler (PARALLEL macro is not defined)
81ms
80ms
79ms
78ms

// with g++ -std=c++23 -O3 ./test.cpp -ltbb -DPARALLEL
165ms
163ms
30ms
27ms
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc execution_policy_tag_t}}
{{dsc end}}

{{langlinks|es|ja|zh}}
{{cpp/title|set_intersection}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2, class OutputIt &gt;
OutputIt set_intersection( InputIt1 first1, InputIt1 last1,
                           InputIt2 first2, InputIt2 last2,
                           OutputIt d_first );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2, class ForwardIt3 &gt;
ForwardIt3 set_intersection( ExecutionPolicy&amp;&amp; policy,
                             ForwardIt1 first1, ForwardIt1 last1,
                             ForwardIt2 first2, ForwardIt2 last2,
                             ForwardIt3 d_first );
}}
{{dcla|num=3|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2,
          class OutputIt, class Compare &gt;
OutputIt set_intersection( InputIt1 first1, InputIt1 last1,
                           InputIt2 first2, InputIt2 last2,
                           OutputIt d_first, Compare comp );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2,
          class ForwardIt3, class Compare &gt;
ForwardIt3 set_intersection( ExecutionPolicy&amp;&amp; policy,
                             ForwardIt1 first1, ForwardIt1 last1,
                             ForwardIt2 first2, ForwardIt2 last2,
                             ForwardIt3 d_first, Compare comp );
}}
{{dcl end}}

Constructs a sorted range beginning at {{c|d_first}} consisting of elements that are found in both sorted ranges {{range|first1|last1}} and {{range|first2|last2}}.

If {{range|first1|last1}} contains {{c|m}} elements that are equivalent to each other and {{range|first2|last2}} contains {{c|n}} elements that are equivalent to them, the first {{c|std::min(m, n)}} elements will be copied from {{range|first1|last1}} to the output range, preserving order.

@1@ If {{range|first1|last1}} or {{range|first2|last2}} is not {{rlp|/#Requirements|sorted}} with respect to {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}, the behavior is undefined.

@3@ If {{range|first1|last1}} or {{range|first2|last2}} is not sorted with respect to {{c|comp}}, the behavior is undefined.

@2,4@ Same as {{v|1,3}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

If the output range overlaps with {{range|first1|last1}} or {{range|first2|last2}}, the behavior is undefined.

===Parameters===
{{par begin}}
{{par|first1, last1|the first range of elements to examine}}
{{par|first2, last2|the second range of elements to examine}}
{{par|d_first|the beginning of the output range}}
{{par exec pol}}
{{par cmp ord|comp|p1=InputIt1|p2=InputIt2}} 
{{par hreq}}
{{par req named|InputIt1, InputIt2|InputIterator}}
{{par req named|OutputIt|OutputIterator}}
{{par req named|ForwardIt1, ForwardIt2, ForwardIt3|ForwardIterator}}
{{par req named|Compare|Compare}}
{{par end}}

===Return value===
Iterator past the end of the constructed range.

===Complexity===
Given {{mathjax-or|\(\scriptsize N_1\)|N{{su|b=1}}}} as {{c|std::distance(first1, last1)}} and {{mathjax-or|\(\scriptsize N_2\)|N{{su|b=2}}}} as {{c|std::distance(first2, last2)}}:

@1,2@ At most {{mathjax-or|\(\scriptsize 2 \cdot (N_1+N_2)-1\)|2⋅(N{{su|b=1}}+N{{su|b=2}})-1}} comparisons using {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}.

@3,4@ At most {{mathjax-or|\(\scriptsize 2 \cdot (N_1+N_2)-1\)|2⋅(N{{su|b=1}}+N{{su|b=2}})-1}} applications of the comparison function {{c|comp}}.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===Possible implementation===
{{eq impl
|title1=set_intersection (1)|ver1=1|1=
template&lt;class InputIt1, class InputIt2, class OutputIt&gt;
OutputIt set_intersection(InputIt1 first1, InputIt1 last1,
                          InputIt2 first2, InputIt2 last2, OutputIt d_first)
{
    while (first1 != last1 &amp;&amp; first2 != last2)
    {
        if (*first1 &lt; *first2)
            ++first1;
        else
        {
            if (!(*first2 &lt; *first1))
                *d_first++ = *first1++; // *first1 and *first2 are equivalent.
            ++first2;
        }
    }
    return d_first;
}
|title2=set_intersection (3)|ver2=3|2=
template&lt;class InputIt1, class InputIt2, class OutputIt, class Compare&gt;
OutputIt set_intersection(InputIt1 first1, InputIt1 last1,
                          InputIt2 first2, InputIt2 last2, OutputIt d_first, Compare comp)
{
    while (first1 != last1 &amp;&amp; first2 != last2)
    {
        if (comp(*first1, *first2))
            ++first1;
        else
        {
            if (!comp(*first2, *first1))
                *d_first++ = *first1++; // *first1 and *first2 are equivalent.
            ++first2;
        }
    }
    return d_first;
}
}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;int&gt; v1{7, 2, 3, 4, 5, 6, 7, 8};
    std::vector&lt;int&gt; v2{5, 7, 9, 7};
    std::sort(v1.begin(), v1.end());
    std::sort(v2.begin(), v2.end());
    
    std::vector&lt;int&gt; v_intersection;
    std::set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(),
                          std::back_inserter(v_intersection));
    
    for (int n : v_intersection)
        std::cout &lt;&lt; n &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
5 7 7
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=291|std=C++98|before=it was unspecified how to handle equivalent elements in the input ranges|after=specified}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc set_union}}
{{dsc inc|cpp/algorithm/ranges/dsc set_intersection}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
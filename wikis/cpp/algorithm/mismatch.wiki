{{cpp/title|mismatch}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2 &gt;
std::pair&lt;InputIt1, InputIt2&gt;
    mismatch( InputIt1 first1, InputIt1 last1,
              InputIt2 first2 );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt1, class ForwardIt2 &gt;
std::pair&lt;ForwardIt1, ForwardIt2&gt;
    mismatch( ExecutionPolicy&amp;&amp; policy,
              ForwardIt1 first1, ForwardIt1 last1,
              ForwardIt2 first2 );
}}
{{dcla|num=3|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2, class BinaryPred &gt;
std::pair&lt;InputIt1, InputIt2&gt;
    mismatch( InputIt1 first1, InputIt1 last1,
              InputIt2 first2, BinaryPred p );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2, class BinaryPred &gt;
std::pair&lt;ForwardIt1, ForwardIt2&gt;
    mismatch( ExecutionPolicy&amp;&amp; policy,
              ForwardIt1 first1, ForwardIt1 last1,
              ForwardIt2 first2, BinaryPred p );
}}
{{dcla|num=5|since=c++14|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2 &gt;
std::pair&lt;InputIt1, InputIt2&gt;
    mismatch( InputIt1 first1, InputIt1 last1,
              InputIt2 first2, InputIt2 last2 );
}}
{{dcl|num=6|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt1, class ForwardIt2 &gt;
std::pair&lt;ForwardIt1, ForwardIt2&gt;
    mismatch( ExecutionPolicy&amp;&amp; policy,
              ForwardIt1 first1, ForwardIt1 last1,
              ForwardIt2 first2, ForwardIt2 last2 );
}}
{{dcla|num=7|since=c++14|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2, class BinaryPred &gt;
std::pair&lt;InputIt1, InputIt2&gt;
    mismatch( InputIt1 first1, InputIt1 last1,
              InputIt2 first2, InputIt2 last2, BinaryPred p );
}}
{{dcl|num=8|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2, class BinaryPred &gt;
std::pair&lt;ForwardIt1, ForwardIt2&gt;
    mismatch( ExecutionPolicy&amp;&amp; policy,
              ForwardIt1 first1, ForwardIt1 last1,
              ForwardIt2 first2, ForwardIt2 last2, BinaryPred p );
}}
{{dcl end}}

Returns a pair of iterators to the first mismatching of elements from {{range|first1|last1}} and a range starting from {{c|first2}}:
* For overloads {{v|1-4}}, the second range has {{c|std::distance(first1, last1)}} elements.
* For overloads {{v|5-8}}, the second range is {{range|first2|last2}}.
:* If {{c|std::distance(first1, last1)}} and {{c|std::distance(first2, last2)}} are different, the comparison stops when {{c|last1}} or {{c|last2}} is reached.

@1,5@ Elements are compared using {{c/core|1=operator==}}.
@3,7@ Elements are compared using the given binary predicate {{c|p}}.

@2,4,6,8@ Same as {{v|1,3,5,7}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

===Parameters===
{{par begin}}
{{par|first1, last1|the first range of the elements}}
{{par|first2, last2|the second range of the elements}}
{{par exec pol}}
{{par pred2 eq|p|p1=InputIt1|p2=InputIt2}}
{{par hreq}}
{{par req named|InputIt1|InputIterator}}
{{par req named|InputIt2|InputIterator}}
{{par req named|ForwardIt1|ForwardIterator}}
{{par req named|ForwardIt2|ForwardIterator}}
{{par req named|BinaryPred|BinaryPredicate}}
{{par end}}

===Return value===
{{lc|std::pair}} with iterators to the first two non-equal elements.

If {{c|last1}} is reached, the second iterator in the pair is the {{c|std::distance(first1, last1)}}{{su|b=th}} iterator after {{c|first2}}.

For overloads {{v|5-8}}, if {{c|last2}} is reached, the first iterator in the pair is the {{c|std::distance(first2, last2)}}{{su|b=th}} iterator after {{c|first1}}.

===Complexity===
Given {{mathjax-or|\(\scriptsize N_1\)|N{{su|b=1}}}} as {{c|std::distance(first1, last1)}} and {{mathjax-or|\(\scriptsize N_2\)|N{{su|b=2}}}} as {{c|std::distance(first2, last2)}}:
@1,2@ At most {{mathjax-or|\(\scriptsize N_1\)|N{{su|b=1}}}} comparisons using {{c/core|1=operator==}}.
@3,4@ At most {{mathjax-or|\(\scriptsize N_1\)|N{{su|b=1}}}} applications of the predicate {{c|p}}.
@5,6@ At most {{mathjax-or|\(\scriptsize \min(N_1,N_2)\)|min(N{{su|b=1}},N{{su|b=2}})}} comparisons using {{c/core|1=operator==}}.
@7,8@ At most {{mathjax-or|\(\scriptsize \min(N_1,N_2)\)|min(N{{su|b=1}},N{{su|b=2}})}} applications of the predicate {{c|p}}.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===Possible implementation===
{{eq impl
|title1=mismatch (1)|ver1=1|1=
template&lt;class InputIt1, class InputIt2&gt;
std::pair&lt;InputIt1, InputIt2&gt;
    mismatch(InputIt1 first1, InputIt1 last1, InputIt2 first2)
{
    while (first1 != last1 &amp;&amp; *first1 == *first2)
        ++first1, ++first2;
    
    return std::make_pair(first1, first2);
}
|title2=mismatch (3)|ver2=3|2=
template&lt;class InputIt1, class InputIt2, class BinaryPred&gt;
std::pair&lt;InputIt1, InputIt2&gt;
    mismatch(InputIt1 first1, InputIt1 last1, InputIt2 first2, BinaryPred p)
{
    while (first1 != last1 &amp;&amp; p(*first1, *first2))
        ++first1, ++first2;
    
    return std::make_pair(first1, first2);
}
|title3=mismatch (5)|ver3=5|3=
template&lt;class InputIt1, class InputIt2&gt;
std::pair&lt;InputIt1, InputIt2&gt;
    mismatch(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2)
{
    while (first1 != last1 &amp;&amp; first2 != last2 &amp;&amp; *first1 == *first2)
        ++first1, ++first2;
    
    return std::make_pair(first1, first2);
}
|title4=mismatch (7)|ver4=7|4=
template&lt;class InputIt1, class InputIt2, class BinaryPred&gt;
std::pair&lt;InputIt1, InputIt2&gt;
    mismatch(InputIt1 first1, InputIt1 last1,
             InputIt2 first2, InputIt2 last2, BinaryPred p)
{
    while (first1 != last1 &amp;&amp; first2 != last2 &amp;&amp; p(*first1, *first2))
        ++first1, ++first2;
    
    return std::make_pair(first1, first2);
}
}}

===Example===
{{example
|This program determines the longest substring that is simultaneously found at the very beginning of the given string and at the very end of it, in reverse order (possibly overlapping).
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

std::string mirror_ends(const std::string&amp; in)
{
    return std::string(in.begin(),
                       std::mismatch(in.begin(), in.end(), in.rbegin()).first);
}

int main()
{
    std::cout &lt;&lt; mirror_ends("abXYZba") &lt;&lt; '\n'
              &lt;&lt; mirror_ends("abca") &lt;&lt; '\n'
              &lt;&lt; mirror_ends("aba") &lt;&lt; '\n';
}
|output=
ab
a
aba
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc equal}}
{{dsc inc|cpp/algorithm/dsc find}}
{{dsc inc|cpp/algorithm/dsc lexicographical_compare}}
{{dsc inc|cpp/algorithm/dsc search}}
{{dsc inc|cpp/algorithm/ranges/dsc mismatch}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
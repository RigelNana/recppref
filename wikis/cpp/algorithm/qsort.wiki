{{cpp/title|qsort}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|cstdlib}}
{{dcl|num=1|
void qsort( void *ptr, std::size_t count,
            std::size_t size, /* c-compare-pred */* comp );
void qsort( void *ptr, std::size_t count,
            std::size_t size, /* compare-pred */* comp );
}}
{{dcl|num=2|notes={{mark expos}}|1=
extern "C" using /* c-compare-pred */ = int(const void*, const void*);
extern "C++" using /* compare-pred */ = int(const void*, const void*);
}}
{{dcl end}}

Sorts the given array pointed to by {{c|ptr}} in ascending order. The array contains {{c|count}} elements of {{c|size}} bytes. Function pointed to by {{c|comp}} is used for object comparison.

If {{c|comp}} indicates two elements as equivalent, their order is unspecified.

If the type of the elements of the array is not a {{rev inl|until=c++11|{{named req|PODType}}}}{{rev inl|since=c++11|{{named req|TriviallyCopyable}} type}}&lt;!--LWG 3527--&gt;, the behavior is undefined.

===Parameters===
{{par begin}}
{{par|ptr|pointer to the array to sort}}
{{par|count|number of elements in the array}}
{{par|size|size of each element in the array in bytes}}
{{par ccmp|comp}}
{{par end}}

===Return value===
(none)

===Notes===
Despite the name, C++, C, and POSIX standards do not require this function to be implemented using {{enwiki|Quicksort}} or make any complexity or stability guarantees.

The two overloads provided by the C++ standard library are distinct because the types of the parameter {{c|comp}} are distinct ({{lt|cpp/language/language linkage}} is part of its type).

===Example===
{{example
|The following code sorts an array of integers using {{tt|qsort()}}:
|code=
#include &lt;array&gt;
#include &lt;climits&gt;
#include &lt;compare&gt;
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;

int main()
{
    std::array a{-2, 99, 0, -743, INT_MAX, 2, INT_MIN, 4};
    
    std::qsort
    (
        a.data(),
        a.size(),
        sizeof(decltype(a)::value_type),
        [](const void* x, const void* y)
        {
            const int arg1 = *static_cast&lt;const int*&gt;(x);
            const int arg2 = *static_cast&lt;const int*&gt;(y);
            const auto cmp = arg1 &lt;=&gt; arg2;
            if (cmp &lt; 0)
                return -1;
            if (cmp &gt; 0)
                return 1;
            return 0;
        }
    );
    
    for (int ai : a)
        std::cout &lt;&lt; ai &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
-2147483648 -743 -2 0 2 4 99 2147483647 
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=405|std=C++98|before=the elements of the array could have any type|after=limited to {{named req|PODType}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc bsearch}}
{{dsc inc|cpp/algorithm/dsc sort}}
{{dsc inc|cpp/types/dsc is_trivial}}
{{dsc see c|c/algorithm/qsort}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
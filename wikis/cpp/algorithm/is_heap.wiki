{{cpp/title|is_heap}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|since=c++11|notes={{mark constexpr since c++20}}|
template&lt; class RandomIt &gt;
bool is_heap( RandomIt first, RandomIt last );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class RandomIt &gt;
bool is_heap( ExecutionPolicy&amp;&amp; policy,
              RandomIt first, RandomIt last );
}}
{{dcl|num=3|since=c++11|notes={{mark constexpr since c++20}}|
template&lt; class RandomIt, class Compare &gt;
bool is_heap( RandomIt first, RandomIt last, Compare comp );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy, class RandomIt, class Compare &gt;
bool is_heap( ExecutionPolicy&amp;&amp; policy,
              RandomIt first, RandomIt last, Compare comp );
}}
{{dcl end}}

Checks whether {{range|first|last}} is a {{rlp|/#Heap operations|heap}}.

@1@ The heap property to be checked is with respect to {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}.

@3@ The heap property to be checked is with respect to {{c|comp}}.

@2,4@ Same as {{v|1,3}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

===Parameters===
{{par begin}}
{{par|first, last|the range to be checked}}
{{par exec pol}}
{{par cmp|comp|p1=RandomIt}}
{{par hreq}}
{{par req named|RandomIt|RandomAccessIterator}}
{{par req named|Compare|Compare}}
{{par end}}

===Return value===
{{c|true}} if the range is a heap with respect to the corresponding comparator, {{c|false}} otherwise.

===Complexity===
Given {{mathjax-or|\(\scriptsize N\)|N}} as {{c|std::distance(first, last)}}:

@1,2@ {{mathjax-or|\(\scriptsize O(N)\)|O(N)}} comparisons using {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}.

@3,4@ {{mathjax-or|\(\scriptsize O(N)\)|O(N)}} applications of the comparison function {{c|comp}}.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;bit&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;int&gt; v{3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9};
    
    std::cout &lt;&lt; "initially, v:\n";
    for (const auto&amp; i : v)
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    if (!std::is_heap(v.begin(), v.end()))
    {
        std::cout &lt;&lt; "making heap...\n";
        std::make_heap(v.begin(), v.end());
    }
    
    std::cout &lt;&lt; "after make_heap, v:\n";
    for (auto t{1U}; const auto&amp; i : v)
        std::cout &lt;&lt; i &lt;&lt; (std::has_single_bit(++t) ? " {{!}} " : " ");
    std::cout &lt;&lt; '\n';
}
|output=
initially, v:
3 1 4 1 5 9 2 6 5 3 5 8 9 7 9
making heap...
after make_heap, v:
9 {{!}} 6 9 {{!}} 5 5 9 7 {{!}} 1 1 3 5 8 3 4 2 {{!}}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc is_heap_until}}
{{dsc inc|cpp/algorithm/dsc make_heap}}
{{dsc inc|cpp/algorithm/dsc push_heap}}
{{dsc inc|cpp/algorithm/dsc pop_heap}}
{{dsc inc|cpp/algorithm/dsc sort_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc is_heap}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
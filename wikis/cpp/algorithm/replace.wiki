{{cpp/title|replace|replace_if}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl rev begin|num=1}}
{{dcla|anchor=1|constexpr=c++20|until=c++26|
template&lt; class ForwardIt, class T &gt;
void replace( ForwardIt first, ForwardIt last,
              const T&amp; old_value, const T&amp; new_value );
}}
{{dcl|since=c++26|1=
template&lt; class ForwardIt, class T = typename std::iterator_traits
                                         &lt;ForwardIt&gt;::value_type &gt;
constexpr void replace( ForwardIt first, ForwardIt last,
                        const T&amp; old_value, const T&amp; new_value );
}}
{{dcl rev end}}
{{dcl rev begin|num=2}}
{{dcl|since=c++17|until=c++26|
template&lt; class ExecutionPolicy, class ForwardIt, class T &gt;
void replace( ExecutionPolicy&amp;&amp; policy,
              ForwardIt first, ForwardIt last,
              const T&amp; old_value, const T&amp; new_value );
}}
{{dcl|since=c++26|1=
template&lt; class ExecutionPolicy, class ForwardIt,
          class T = typename std::iterator_traits
                        &lt;ForwardIt&gt;::value_type &gt;
void replace( ExecutionPolicy&amp;&amp; policy,
              ForwardIt first, ForwardIt last,
              const T&amp; old_value, const T&amp; new_value );
}}
{{dcl rev end}}
{{dcl rev begin|num=3}}
{{dcla|anchor=3|constexpr=c++20|until=c++26|
template&lt; class ForwardIt, class UnaryPred, class T &gt;
void replace_if( ForwardIt first, ForwardIt last,
                 UnaryPred p, const T&amp; new_value );
}}
{{dcl|since=c++26|1=
template&lt; class ForwardIt, class UnaryPred,
          class T = typename std::iterator_traits
                        &lt;ForwardIt&gt;::value_type&gt; &gt;
constexpr void replace_if( ForwardIt first, ForwardIt last,
                           UnaryPred p, const T&amp; new_value );
}}
{{dcl rev end}}
{{dcl rev begin|num=4}}
{{dcl|since=c++17|until=c++26|
template&lt; class ExecutionPolicy,
          class ForwardIt, class UnaryPred, class T &gt;
void replace_if( ExecutionPolicy&amp;&amp; policy,
                 ForwardIt first, ForwardIt last,
                 UnaryPred p, const T&amp; new_value );
}}
{{dcl|since=c++26|1=
template&lt; class ExecutionPolicy,
          class ForwardIt, class UnaryPred,
          class T = typename std::iterator_traits
                        &lt;ForwardIt&gt;::value_type&gt; &gt;
void replace_if( ExecutionPolicy&amp;&amp; policy,
                 ForwardIt first, ForwardIt last,
                 UnaryPred p, const T&amp; new_value );
}}
{{dcl end}}

Replaces all elements in the range {{range|first|last}} with {{c|new_value}} if they satisfy specific criteria.

@1@ Replaces all elements that are equal to {{c|old_value}} (using {{c/core|1=operator==}}).

@3@ Replaces all elements for which predicate {{c|p}} returns {{c|true}}.

@2,4@ Same as {{v|1,3}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

If {{rev inl|until=c++20|{{c|1=*first = new_value}} is invalid}}{{rev inl|since=c++20|{{c|new_value}} is not [[cpp/iterator#Types and writability|writable]] to {{c|first}}}}, the program is ill-formed.

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to process}}
{{par|old_value|the value of elements to replace}}
{{par exec pol}}
{{par pred1|p|if the element value should be replaced|p1=ForwardIt}}
{{par|new_value|the value to use as replacement}}
{{par hreq}}
{{par req named|ForwardIt|ForwardIterator}}
{{par req named|UnaryPred|Predicate}}
{{par end}}

===Return value===
(none)

===Complexity===
Given {{mathjax-or|\(\scriptsize N\)|N}} as {{c|std::distance(first, last)}}:
@1,2@ Exactly {{mathjax-or|\(\scriptsize N\)|N}} comparisons using {{c/core|1=operator==}}.
@3,4@ Exactly {{mathjax-or|\(\scriptsize N\)|N}} applications of the predicate {{c|p}}.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===Notes===
Because the algorithm takes {{c|old_value}} and {{c|new_value}} by reference, it can have unexpected behavior if either is a reference to an element of the range {{range|first|last}}.

{{feature test macro|__cpp_lib_algorithm_default_value_type|value=202403|std=C++26|[[cpp/language/list initialization|List-initialization]] for algorithms {{vl|1-4}}}}

===Possible implementation===
{{eq impl
|title1=replace|ver1=1|1=
template&lt;class ForwardIt,
         class T = typename std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;
void replace(ForwardIt first, ForwardIt last,
             const T&amp; old_value, const T&amp; new_value)
{
    for (; first != last; ++first)
        if (*first == old_value)
            *first = new_value;
}
|title2=replace_if|ver2=3|2=
template&lt;class ForwardIt, class UnaryPred,
         class T = typename std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;
void replace_if(ForwardIt first, ForwardIt last,
                UnaryPred p, const T&amp; new_value)
{
    for (; first != last; ++first)
        if (p(*first))
            *first = new_value;
}
}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;complex&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;

void println(const auto&amp; seq)
{
    for (const auto&amp; e : seq)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::array&lt;int, 10&gt; s{5, 7, 4, 2, 8, 6, 1, 9, 0, 3};
    
    // Replace all occurrences of 8 with 88.
    std::replace(s.begin(), s.end(), 8, 88);
    println(s);

    // Replace all values less than 5 with 55.
    std::replace_if(s.begin(), s.end(), 
                    std::bind(std::less&lt;int&gt;(), std::placeholders::_1, 5), 55);
    println(s);

    std::array&lt;std::complex&lt;double&gt;, 2&gt; nums{&lt;!----&gt;{&lt;!----&gt;{1, 3}, {1, 3}&lt;!----&gt;}&lt;!----&gt;};
    #ifdef __cpp_lib_algorithm_default_value_type
        std::replace(nums.begin(), nums.end(), {1, 3}, {4, 2});
    #else
        std::replace(nums.begin(), nums.end(), std::complex&lt;double&gt;{1, 3},
                                               std::complex&lt;double&gt;{4, 2});
    #endif
    println(nums);
}
|output=
5 7 4 2 88 6 1 9 0 3
5 7 55 55 88 6 55 9 55 55
(4,2), (4,2)
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=283|std=C++98|before={{tt|T}} was required to be {{named req|CopyAssignable}} (and {{named req|EqualityComparable}}&lt;br&gt;for {{tt|replace}}), but the value type of {{tt|ForwardIt}} is not&lt;br&gt;always {{tt|T}} and {{tt|T}} is not always writable to {{tt|ForwardIt}}|after=required {{c|1=*first = new_value}}&lt;br&gt;to be valid instead}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc replace_copy}}
{{dsc inc|cpp/algorithm/ranges/dsc replace}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|includes}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2 &gt;
bool includes( InputIt1 first1, InputIt1 last1,
               InputIt2 first2, InputIt2 last2 );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2 &gt;
bool includes( ExecutionPolicy&amp;&amp; policy,
               ForwardIt1 first1, ForwardIt1 last1,
               ForwardIt2 first2, ForwardIt2 last2 );
}}
{{dcla|num=3|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2, class Compare &gt;
bool includes( InputIt1 first1, InputIt1 last1,
               InputIt2 first2, InputIt2 last2, Compare comp );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2, class Compare &gt;
bool includes( ExecutionPolicy&amp;&amp; policy,
               ForwardIt1 first1, ForwardIt1 last1,
               ForwardIt2 first2, ForwardIt2 last2, Compare comp );
}}
{{dcl end}}

Returns {{c|true}} if the sorted range {{range|first2|last2}} is a {{enwiki|subsequence}} of the sorted range {{range|first1|last1}} (a subsequence need not be contiguous).

@1@ If {{range|first1|last1}} or {{range|first2|last2}} is not {{rlp|/#Requirements|sorted}} with respect to {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}, the behavior is undefined.

@3@ If {{range|first1|last1}} or {{range|first2|last2}} is not sorted with respect to {{c|comp}}, the behavior is undefined.

@2,4@ Same as {{v|1,3}}, but executed according to {{c|policy}}.
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

===Parameters===
{{par begin}}
{{par|first1, last1|the sorted range of elements to examine}}
{{par|first2, last2|the sorted range of elements to search for}}
{{par exec pol}}
{{par cmp ord|comp|p1=InputIt}}
{{par hreq}}
{{par req named|InputIt1, InputIt2|InputIterator}}
{{par req named|ForwardIt1, ForwardIt2|ForwardIterator}}
{{par req named|Compare|Compare}}
{{par end}}

===Return value===
{{c|true}} if {{range|first2|last2}} is a subsequence of {{range|first1|last1}}; otherwise {{c|false}}.

An empty sequence is a subsequence of any sequence, so {{c|true}} is returned if {{range|first2|last2}} is empty.

===Complexity===
Given {{mathjax-or|\(\scriptsize N_1\)|N{{su|b=1}}}} as {{c|std::distance(first1, last1)}} and {{mathjax-or|\(\scriptsize N_2\)|N{{su|b=2}}}} as {{c|std::distance(first2, last2)}}:

@1,2@ At most {{mathjax-or|\(\scriptsize 2 \cdot (N_1+N_2)-1\)|2⋅(N{{su|b=1}}+N{{su|b=2}})-1}} comparisons using {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}}.

@3,4@ At most {{mathjax-or|\(\scriptsize 2 \cdot (N_1+N_2)-1\)|2⋅(N{{su|b=1}}+N{{su|b=2}})-1}} applications of the comparison function {{c|comp}}.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===Possible implementation===
{{eq impl
|title1=include (1)|ver1=1|1=
template&lt;class InputIt1, class InputIt2&gt;
bool includes(InputIt1 first1, InputIt1 last1,
              InputIt2 first2, InputIt2 last2)
{
    for (; first2 != last2; ++first1)
    {
        if (first1 == last1 {{!!}} *first2 &lt; *first1)
            return false;
        if (!(*first1 &lt; *first2))
            ++first2;
    }
    return true;
}
|title2=include (3)|ver2=3|2=
template&lt;class InputIt1, class InputIt2, class Compare&gt;
bool includes(InputIt1 first1, InputIt1 last1,
              InputIt2 first2, InputIt2 last2, Compare comp)
{
    for (; first2 != last2; ++first1)
    {
        if (first1 == last1 {{!!}} comp(*first2, *first1))
            return false;
        if (!comp(*first1, *first2))
            ++first2;
    }
    return true;
}
}}

===Example===
{{example
||code=
#include &lt;algorithm&gt;
#include &lt;cctype&gt;
#include &lt;iostream&gt;

template&lt;class Os, class Co&gt;
Os&amp; operator&lt;&lt;(Os&amp; os, const Co&amp; v)
{
    for (const auto&amp; i : v)
        os &lt;&lt; i &lt;&lt; ' ';
    return os &lt;&lt; '\t';
}

int main()
{
    const auto
        v1 = {'a', 'b', 'c', 'f', 'h', 'x'},
        v2 = {'a', 'b', 'c'},
        v3 = {'a', 'c'},
        v4 = {'a', 'a', 'b'},
        v5 = {'g'},
        v6 = {'a', 'c', 'g'},
        v7 = {'A', 'B', 'C'};

    auto no_case = [](char a, char b) { return std::tolower(a) &lt; std::tolower(b); };

    std::cout
    &lt;&lt; v1 &lt;&lt; "\nincludes:\n" &lt;&lt; std::boolalpha
    &lt;&lt; v2 &lt;&lt; ": " &lt;&lt; std::includes(v1.begin(), v1.end(), v2.begin(), v2.end()) &lt;&lt; '\n'
    &lt;&lt; v3 &lt;&lt; ": " &lt;&lt; std::includes(v1.begin(), v1.end(), v3.begin(), v3.end()) &lt;&lt; '\n'
    &lt;&lt; v4 &lt;&lt; ": " &lt;&lt; std::includes(v1.begin(), v1.end(), v4.begin(), v4.end()) &lt;&lt; '\n'
    &lt;&lt; v5 &lt;&lt; ": " &lt;&lt; std::includes(v1.begin(), v1.end(), v5.begin(), v5.end()) &lt;&lt; '\n'
    &lt;&lt; v6 &lt;&lt; ": " &lt;&lt; std::includes(v1.begin(), v1.end(), v6.begin(), v6.end()) &lt;&lt; '\n'
    &lt;&lt; v7 &lt;&lt; ": " &lt;&lt; std::includes(v1.begin(), v1.end(), v7.begin(), v7.end(), no_case)
          &lt;&lt; " (case-insensitive)\n";
}
|output=
a b c f h x
includes:
a b c   : true
a c     : true
a a b   : false
g       : false
a c g   : false
A B C   : true (case-insensitive)
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=1205|std=C++98|before=the return value was unclear if {{range|first2|last2}} is empty|after=returns {{c|true}} in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc set_difference}}
{{dsc inc|cpp/algorithm/dsc search}}
{{dsc inc|cpp/algorithm/ranges/dsc includes}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
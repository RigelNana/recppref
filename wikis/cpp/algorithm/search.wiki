{{cpp/title|search}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|notes={{mark constexpr since c++20}}|
template&lt; class ForwardIt1, class ForwardIt2 &gt;
ForwardIt1 search( ForwardIt1 first, ForwardIt1 last,
                   ForwardIt2 s_first, ForwardIt2 s_last );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt1, class ForwardIt2 &gt;
ForwardIt1 search( ExecutionPolicy&amp;&amp; policy,
                   ForwardIt1 first, ForwardIt1 last,
                   ForwardIt2 s_first, ForwardIt2 s_last );
}}
{{dcla|num=3|notes={{mark constexpr since c++20}}|
template&lt; class ForwardIt1, class ForwardIt2, class BinaryPred &gt;
ForwardIt1 search( ForwardIt1 first, ForwardIt1 last,
                   ForwardIt2 s_first, ForwardIt2 s_last,
                   BinaryPred p );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2, class BinaryPred &gt;
ForwardIt1 search( ExecutionPolicy&amp;&amp; policy,
                   ForwardIt1 first, ForwardIt1 last,
                   ForwardIt2 s_first, ForwardIt2 s_last,
                   BinaryPred p );
}}
{{dcl|num=5|since=c++17|notes={{mark constexpr since c++20}}|
template&lt; class ForwardIt, class Searcher &gt;
ForwardIt search( ForwardIt first, ForwardIt last,
                  const Searcher&amp; searcher );
}}
{{dcl end}}

@1-4@ Searches for the first occurrence of the sequence of elements {{range|s_first|s_last}} in the range {{range|first|last}}.
:@1@ Elements are compared using {{c/core|1=operator==}}.
:@3@ Elements are compared using the given binary predicate {{c|p}}.
:@2,4@ Same as {{v|1,3}}, but executed according to {{c|policy}}.
:@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

@5@ Searches the range {{range|first|last}} for the pattern specified in the constructor of {{c|searcher}}.

{{rrev|since=c++17|
The standard library provides the following searchers:
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc default_searcher}}
{{dsc inc|cpp/utility/functional/dsc boyer_moore_searcher}}
{{dsc inc|cpp/utility/functional/dsc boyer_moore_horspool_searcher}}
{{dsc end}}
}}

===Parameters===
{{par begin}}
{{par|first, last|the range of elements to examine}}
{{par|s_first, s_last|the range of elements to search for}}
{{par exec pol}}
{{par|searcher|the searcher encapsulating the search algorithm and the pattern to look for}}
{{par pred2 eq|p|p1=ForwardIt1|p2=ForwardIt2}}
{{par hreq}}
{{par req named|ForwardIt1, ForwardIt2|ForwardIterator}}
{{par req named|BinaryPred|BinaryPredicate}}
{{par end}}

===Return value===
@1-4@ Iterator to the beginning of first occurrence of the sequence {{range|s_first|s_last}} in the range {{range|first|last}}. If no such occurrence is found, {{c|last}} is returned.
@@ If {{range|s_first|s_last}} is empty, {{c|first}} is returned.

@5@ {{c|searcher(first, last).first}}.

===Complexity===
@1-4@ Given {{mathjax-or|\(\scriptsize N\)|N}} as {{c|std::distance(first, last)}} and {{mathjax-or|\(\scriptsize S\)|S}} as {{c|std::distance(s_first, s_last)}}:
:@1,2@ At most {{mathjax-or|\(\scriptsize N\cdot S\)|N&amp;middot;S}} comparisons using {{c/core|1=operator==}}.
:@3,4@ At most {{mathjax-or|\(\scriptsize N\cdot S\)|N&amp;middot;S}} applications of the predicate {{c|p}}.
@5@ Depends on {{c|searcher}}.

===Exceptions===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===Possible implementation===
{{eq impl
|title1=search (1)|ver1=1|1=
template&lt;class ForwardIt1, class ForwardIt2&gt;
constexpr //&lt; since C++20
ForwardIt1 search(ForwardIt1 first, ForwardIt1 last,
                  ForwardIt2 s_first, ForwardIt2 s_last)
{
    while (true)
    {
        ForwardIt1 it = first;
        for (ForwardIt2 s_it = s_first; ; ++it, ++s_it)
        {
            if (s_it == s_last)
                return first;
            if (it == last)
                return last;
            if (!(*it == *s_it))
                break;
        }
        ++first;
    }
}
|title2=search (3)|ver2=3|2=
template&lt;class ForwardIt1, class ForwardIt2, class BinaryPred&gt;
constexpr //&lt; since C++20
ForwardIt1 search(ForwardIt1 first, ForwardIt1 last,
                  ForwardIt2 s_first, ForwardIt2 s_last, BinaryPred p)
{
    while (true)
    {
        ForwardIt1 it = first;
        for (ForwardIt2 s_it = s_first; ; ++it, ++s_it)
        {
            if (s_it == s_last)
                return first;
            if (it == last)
                return last;
            if (!p(*it, *s_it))
                break;
        }
        ++first;
    }
}
}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;functional&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string_view&gt;
#include &lt;vector&gt;

using namespace std::literals;

bool contains(const auto&amp; cont, std::string_view s)
{
    // str.find() (or str.contains(), since C++23) can be used as well
    return std::search(cont.begin(), cont.end(), s.begin(), s.end()) != cont.end();
}

int main()
{
    const auto str{"why waste time learning, when ignorance is instantaneous?"sv};
    assert(contains(str, "learning"));
    assert(not contains(str, "lemming"));
    
    const std::vector vec(str.begin(), str.end());
    assert(contains(vec, "learning"));
    assert(not contains(vec, "leaning"));
    
    // The C++17 overload with searchers demo:
    constexpr auto quote
    {
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed "
        "do eiusmod tempor incididunt ut labore et dolore magna aliqua"sv
    };
    
    for (const auto word : {"pisci"sv, "Pisci"sv})
    {
        std::cout &lt;&lt; "The string " &lt;&lt; std::quoted(word) &lt;&lt; ' ';
        const std::boyer_moore_searcher searcher(word.begin(), word.end());
        const auto it = std::search(quote.begin(), quote.end(), searcher);
        if (it == quote.end())
            std::cout &lt;&lt; "not found\n";
        else
            std::cout &lt;&lt; "found at offset " &lt;&lt; std::distance(quote.begin(), it) &lt;&lt; '\n';
    }
}
|output=
The string "pisci" found at offset 43
The string "Pisci" not found
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=1205|std=C++98|before=the return value was unclear if {{range|s_first|s_last}} is empty|after=returns {{c|first}} in this case}}
{{dr list item|wg=lwg|dr=1338|std=C++98|before=the resolution of {{lwg|1205}} was incorrectly applied,&lt;br&gt;making {{c|first}} to be returned if no occurence is found|after=returns {{c|last}} in this case}}
{{dr list item|wg=lwg|dr=2150|std=C++98|before=the condition of “sequence occurence” was incorrect|after=corrected}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc find_end}}
{{dsc inc|cpp/algorithm/dsc includes}}
{{dsc inc|cpp/algorithm/dsc equal}}
{{dsc inc|cpp/algorithm/dsc find}}
{{dsc inc|cpp/algorithm/dsc lexicographical_compare}}
{{dsc inc|cpp/algorithm/dsc mismatch}}
{{dsc inc|cpp/algorithm/dsc search_n}}
{{dsc inc|cpp/utility/functional/dsc default_searcher}}
{{dsc inc|cpp/utility/functional/dsc boyer_moore_searcher}}
{{dsc inc|cpp/utility/functional/dsc boyer_moore_horspool_searcher}}
{{dsc inc|cpp/algorithm/ranges/dsc search}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
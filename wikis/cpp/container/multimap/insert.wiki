{{cpp/container/multimap/title|insert}}
{{cpp/container/multimap/navbar}}
{{dcl begin}}
{{dcl|num=1|
iterator insert( const value_type&amp; value );
}}
{{dcl|num=2|since=c++17|
iterator insert( value_type&amp;&amp; value );
}}
{{dcl|num=3|since=c++11|
template&lt; class P &gt;
iterator insert( P&amp;&amp; value );
}}
{{dcl rev multi|num=4|until1=c++11
|dcl1=
iterator insert( iterator pos, const value_type&amp; value );
|dcl2=
iterator insert( const_iterator pos, const value_type&amp; value );
}}
{{dcl|num=5|since=c++17|
iterator insert( const_iterator pos, value_type&amp;&amp; value );
}}
{{dcl|num=6|since=c++11|
template&lt; class P &gt;
iterator insert( const_iterator pos, P&amp;&amp; value );
}}
{{dcl|num=7|
template&lt; class InputIt &gt;
void insert( InputIt first, InputIt last );
}}
{{dcl|num=8|since=c++11|
void insert( std::initializer_list&lt;value_type&gt; ilist );
}}
{{dcl|num=9|since=c++17|
iterator insert( node_type&amp;&amp; nh );
}}
{{dcl|num=10|since=c++17|
iterator insert( const_iterator pos, node_type&amp;&amp; nh );
}}
{{dcl end}}

Inserts element(s) into the container.

@1-3@ Inserts {{c|value}}. If the container has elements with equivalent key, inserts at the upper bound of that range.
@@ Overload {{v|3}} is equivalent to {{c|emplace(std::forward&lt;P&gt;(value))}} and only participates in overload resolution if {{c|1=std::is_constructible&lt;value_type, P&amp;&amp;&gt;::value == true}}.

@4-6@ Inserts {{c|value}} in the position as close as possible to the position just prior to {{c|pos}}.
@@ Overload {{v|6}} is equivalent to {{c|emplace_hint(hint, std::forward&lt;P&gt;(value))}} and only participates in overload resolution if {{c|1=std::is_constructible&lt;value_type, P&amp;&amp;&gt;::value == true}}.

@7@ Inserts elements from range {{range|first|last}}.

@8@ Inserts elements from initializer list {{c|ilist}}.

{{cpp/container/node_handle insert desc|multimap|9|10}}

{{cpp/container/note iterator invalidation|multimap|insert}}

===Parameters===
{{par begin}}
{{par|pos|iterator to the position before which the new element will be inserted}}
{{par|value|element value to insert}}
{{par|first, last|range of elements to insert}}
{{par|ilist|initializer list to insert the values from}}
{{par|nh|a compatible [[cpp/container/node_handle|node handle]]}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par end}}

===Return value===
@1-6@ An iterator to the inserted element.

@7,8@ (none)

{{cpp/container/node handle insert return|multimap|9|10}}

===Exceptions===
@1-6@ If an exception is thrown by any operation, the insertion has no effect.

@7,8@ No exception safety guarantee.

@9,10@ If an exception is thrown by any operation, the insertion has no effect.

===Complexity===
@1-3@ {{tt|O(log(size()))}}

@4-6@ Amortized constant if the insertion happens in the position just before {{c|pos}}, {{tt|O(log(size()))}} otherwise.

@7,8@ {{tt|O(N&amp;middot;log(size() + N))}}, where {{tt|N}} is the number of elements to insert.

@9@ {{tt|O(log(size()))}}

@10@ Amortized constant if the insertion happens in the position just before {{c|pos}}, {{tt|O(log(size()))}} otherwise.

===Example===
{{example
|code=
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;
#include &lt;utility&gt;

template&lt;class M&gt;
void print(const std::string_view rem, const M&amp; mmap)
{
    std::cout &lt;&lt; rem &lt;&lt; ' ';
    for (const auto&amp; e : mmap)
        std::cout &lt;&lt; '{' &lt;&lt; e.first &lt;&lt; ',' &lt;&lt; e.second &lt;&lt; "} ";
    std::cout &lt;&lt; '\n';
}

int main()
{
    // list-initialize
    std::multimap&lt;int, std::string, std::greater&lt;int&gt;&gt; mmap
        {{2, "foo"}, {2, "bar"}, {3, "baz"}, {1, "abc"}, {5, "def"}};
    print("#1", mmap);
    
    // insert using value_type
    mmap.insert(decltype(mmap)::value_type(5, "pqr"));
    print("#2", mmap);
    
    // insert using pair
    mmap.insert(std::pair{6, "uvw"});
    print("#3", mmap);
    
    mmap.insert({7, "xyz"});
    print("#4", mmap);
    
    // insert using initializer_list
    mmap.insert({{5, "one"}, {5, "two"}});
    print("#5", mmap);
    
    // insert using a pair of iterators
    mmap.clear();
    const auto il = {std::pair{1, "ä"}, {2, "ё"}, {2, "ö"}, {3, "ü"}&lt;!----&gt;};
    mmap.insert(il.begin(), il.end());
    print("#6", mmap);
}
|output=
#1 {5,def} {3,baz} {2,foo} {2,bar} {1,abc}
#2 {5,def} {5,pqr} {3,baz} {2,foo} {2,bar} {1,abc}
#3 {6,uvw} {5,def} {5,pqr} {3,baz} {2,foo} {2,bar} {1,abc}
#4 {7,xyz} {6,uvw} {5,def} {5,pqr} {3,baz} {2,foo} {2,bar} {1,abc}
#5 {7,xyz} {6,uvw} {5,def} {5,pqr} {5,one} {5,two} {3,baz} {2,foo} {2,bar} {1,abc}
#6 {3,ü} {2,ё} {2,ö} {1,ä}
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=233|std=C++98|before={{c|pos}} was just a hint, it could be totally ignored|after=the insertion is required to&lt;br&gt;be as close as possible to the&lt;br&gt;position just prior to {{c|pos}}}}
{{dr list item|wg=lwg|dr=264|std=C++98|before=the complexity of overload {{v|5}} was required to be linear if&lt;br&gt;the range {{range|first|last}} is sorted according to {{tt|Compare}}|after=removed the linear requirement&lt;br&gt;in this special case}}
{{dr list item|wg=lwg|dr=371|std=C++98|before=the order of equivalent elements&lt;br&gt;was not guaranteed to be preserved|after=required to be preserved}}
{{dr list item|wg=lwg|dr=2005|std=C++11|before=overloads {{v|3,6}} were poorly described|after=improved the description}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc emplace|multimap}}
{{dsc inc|cpp/container/dsc emplace_hint|multimap}}
{{dsc inc|cpp/iterator/dsc inserter}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
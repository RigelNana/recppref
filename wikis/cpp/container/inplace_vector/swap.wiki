{{cpp/container/inplace_vector/title|swap}}
{{cpp/container/inplace_vector/navbar}}
{{ddcl|since=c++26|
constexpr void swap( inplace_vector&amp; other ) noexcept(/* see below */);
}}

Exchanges the contents of the container with those of {{c|other}}. Does not cause iterators and references to associate with the other container.

===Parameters===
{{par begin}}
{{par|other|container to exchange the contents with}}
{{par end}}

===Return value===
(none)

===Exceptions===
{{noexcept|1=N == 0 {{!!}}
         (std::is_nothrow_swappable_v&lt;T&gt; &amp;&amp; std::is_nothrow_move_constructible_v&lt;T&gt;)
}}

===Complexity===
Linear in size of the container.

===Example===
{{example
|code=
#include &lt;inplace_vector&gt;
#include &lt;print&gt;

int main()
{
    std::inplace_vector&lt;int, 3&gt; a1{1, 2, 3}, a2{4, 5, 6};

    auto i1 = a1.begin();
    auto i2 = a2.begin();
    int&amp; r1 = a1[1];
    int&amp; r2 = a2[1];

    auto print_them_all = [&amp;](auto rem)
    {
        std::println("{}a1 = {}, a2 = {}, *i1 = {}, *i2 = {}, r1 = {}, r2 = {}",
                     rem, a1, a2, *i1, *i2, r1, r2);
    };

    print_them_all("Before swap:\n");
    a1.swap(a2);
    print_them_all("After swap:\n");

    // Note that after swap() iterators and references stay associated with their
    // original sites, e.g., i1 points to element a1[0], r1 refers to a1[1].
}
|output=
Before swap:
a1 = [1, 2, 3], a2 = [4, 5, 6], *i1 = 1, *i2 = 4, r1 = 2, r2 = 5
After swap:
a1 = [4, 5, 6], a2 = [1, 2, 3], *i1 = 4, *i2 = 1, r1 = 5, r2 = 2
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc swap2|inplace_vector}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/container/inplace_vector/title|try_emplace_back}}
{{cpp/container/inplace_vector/navbar}}
{{ddcl|since=c++26|
template&lt; class... Args &gt;
constexpr pointer try_emplace_back( Args&amp;&amp;... args );
}}

Conditionally appends an object of type {{tt|T}} to the end of the container.

If {{c|1=size() == capacity()}} is {{c|true}}, there are no effects. Otherwise, appends direct-non-list-initialized with {{c|std::forward&lt;Args&gt;(args)...}} object of type {{tt|T}}.

{{cpp/container/note iterator invalidation|inplace_vector|try_emplace_back}}

===Parameters===
{{par begin}}
{{par|args|arguments to forward to the constructor of the element}}
{{par hreq}}
{{par req|{{tt|T}} must be {{named req|EmplaceConstructible}} into {{tt|inplace_vector}} from {{c|std::forward&lt;Args&gt;(args)...}}.}}
{{par end}}

===Return value===
{{c|std::addressof(back())}} if {{c|size() &lt; capacity()}}, {{c|nullptr}} otherwise.

===Complexity===
Constant.

===Exceptions===
Any exception thrown by initialization of inserted element. {{cpp/strong exception safety guarantee|plural=no}}

===Notes===
{{todo|Explain the purpose of this API.}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;complex&gt;
#include &lt;inplace_vector&gt;

int main()
{
    using namespace std::complex_literals;
    using C = std::complex&lt;double&gt;;
    using I = std::inplace_vector&lt;C, 3&gt;;
    auto v = I{1.0 + 2.0i, 3.0 + 4.0i};

    C* c = v.try_emplace_back(5.0, 6.0);
    assert(*c == 5.0 + 6.0i);
    assert((v == I{1.0 + 2.0i, 3.0 + 4.0i, 5.0 + 6.0i}));

    c = v.try_emplace_back(7.0, 8.0); // no space =&gt; no insertion
    assert(c == nullptr);
    assert((v == I{1.0 + 2.0i, 3.0 + 4.0i, 5.0 + 6.0i}));
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc emplace_back|inplace_vector}}
{{dsc inc|cpp/container/dsc push_back|inplace_vector}}
{{dsc inc|cpp/container/dsc append_range|inplace_vector}}
{{dsc inc|cpp/container/dsc try_append_range|inplace_vector}}
{{dsc inc|cpp/container/dsc unchecked_emplace_back|inplace_vector}}
{{dsc inc|cpp/container/dsc unchecked_push_back|inplace_vector}}
{{dsc inc|cpp/container/dsc pop_back|inplace_vector}}
{{dsc inc|cpp/iterator/dsc back_inserter}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
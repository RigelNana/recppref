{{cpp/container/inplace_vector/title|emplace}}
{{cpp/container/inplace_vector/navbar}}
{{ddcl|since=c++26|
template&lt; class... Args &gt;
constexpr iterator emplace( const_iterator position, Args&amp;&amp;... args );
}}

Inserts a new element into the container directly before {{c|pos}}. Typically, the element is constructed uses placement-{{c/core|new}} to construct the element in-place at the location provided by the container. The arguments {{c|args...}} are forwarded to the constructor as {{c|std::forward&lt;Args&gt;(args)...}}.

{{cpp/container/note iterator invalidation|inplace_vector|emplace}}

===Parameters===
{{par begin}}
{{par|pos|iterator before which the new element will be constructed}}
{{par|args|arguments to forward to the constructor of the element}}
{{par hreq}}
{{par req named|T|EmplaceConstructible}}
{{par end}}

===Return value===
An iterator to the inserted element.

===Complexity===
Linear: the distance between {{c|pos}} and end of the container + {{math|1}}.

===Exceptions===
* Throws {{lc|std::bad_alloc}} if before the invocation {{c|1=size() == capacity()}}. The function has no effects ([[cpp/language/exceptions#Exception safety|strong exception safety guarantee]]).
* Any exception thrown by initialization of inserted element or by any {{named req|InputIterator}} operation. Elements in {{range|0|pos}} are not modified.

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;inplace_vector&gt;
#include &lt;new&gt;
#include &lt;utility&gt;

int main()
{
    using P = std::pair&lt;int, int&gt;;
    using I = std::inplace_vector&lt;P, 3&gt;;
    auto nums = I{&lt;!----&gt;{0, 1}, {2, 3}&lt;!----&gt;};

    auto it = nums.emplace(nums.begin() + 1, -1, -2);
    assert((*it == P{-1, -2}));
    assert((nums == I{P{0, 1}, {-1, -2}, {2, 3}&lt;!----&gt;}));

    try
    {
        nums.emplace(nums.begin(), 1, 3); // throws: no space
    }
    catch(const std::bad_alloc&amp; ex)
    {
        std::cout &lt;&lt; ex.what() &lt;&lt; '\n';
    }
}
|p=true
|output=
std::bad_alloc
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc insert|inplace_vector}}
{{dsc inc|cpp/container/dsc emplace_back|inplace_vector}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/container/inplace_vector/title|operator{{=}}}}
{{cpp/container/inplace_vector/navbar}}
{{dcl begin}}
{{dcl|since=c++26|num=1|1=
constexpr inplace_vector&amp; operator=( const inplace_vector&amp; other );
}}
{{dcl|since=c++26|num=2|1=
constexpr inplace_vector&amp; operator=( inplace_vector&amp;&amp; other )
    noexcept(/* see below */);
}}
{{dcl|since=c++26|num=3|1=
constexpr inplace_vector&amp; operator=( std::initializer_list&lt;T&gt; init );
}}
{{dcl end}}

Replaces the contents of the {{tt|inplace_vector}}.

@1@ {{ls|cpp/language/copy assignment#Copy assignment operator}}. Also a {{lsd|cpp/language/copy assignment#Trivial copy assignment operator}}, if {{c/core|std::inplace_vector&lt;T, N&gt;}} has a {{lsd|cpp/language/destructor#Trivial destructor}}, and {{c|std::is_trivially_copy_constructible_v&lt;T&gt; &amp;&amp; std::is_trivially_copy_assignable_v&lt;T&gt;}} is {{c|true}}. Replaces the contents with a copy of the contents of {{c|other}}.

@2@ {{ls|cpp/language/move assignment#Move assignment operator}}. Also a {{lsd|cpp/language/move assignment#Trivial move assignment operator}}, if {{c/core|std::inplace_vector&lt;T, N&gt;}} has a {{lsd|cpp/language/destructor#Trivial destructor}}, and {{c|std::is_trivially_move_constructible_v&lt;T&gt; &amp;&amp; std::is_trivially_move_assignable_v&lt;T&gt;}} is {{c|true}}. Replaces the contents with those of {{c|other}} using move semantics (i.e., the data in {{c|other}} is moved from {{c|other}} into this container). {{c|other}} is in a valid but unspecified state afterwards.

@3@ Replaces the contents with those identified by initializer list {{c|init}}.

===Parameters===
{{par begin}}
{{par|other|another {{tt|inplace_vector}} to be used as source to initialize the elements of the container with}}
{{par|init|initializer list to initialize the elements of the container with}}
{{par end}}

===Complexity===
@1,2@ Linear in the size of {{c|*this}} and {{c|other}}.
@3@ Linear in the size of {{c|*this}} and {{c|init}}.

===Exceptions===
@2@ {{noexcept|1=
    N == 0 {{!!}}
        (std::is_nothrow_move_assignable_v&lt;T&gt; &amp;&amp;
         std::is_nothrow_move_constructible_v&lt;T&gt;)}}
@3@ Throws {{lc|std::bad_alloc}} if {{c|init.size() &gt; N}}.

===Example===
{{example
|code=
#include &lt;initializer_list&gt;
#include &lt;inplace_vector&gt;
#include &lt;new&gt;
#include &lt;print&gt;
#include &lt;ranges&gt;
#include &lt;string&gt;

int main()
{
    std::inplace_vector&lt;int, 4&gt; x({1, 2, 3}), y;
    std::println("Initially:");
    std::println("x = {}", x);
    std::println("y = {}", y);

    std::println("Copy assignment copies data from x to y:");
    y = x; // overload (1)
    std::println("x = {}", x);
    std::println("y = {}", y);

    std::inplace_vector&lt;std::string, 3&gt; z, w{"\N{CAT}", "\N{GREEN HEART}"};
    std::println("Initially:");
    std::println("z = {}", z);
    std::println("w = {}", w);

    std::println("Move assignment moves data from w to z:");
    z = std::move(w); // overload (2)
    std::println("z = {}", z);
    std::println("w = {}", w); // w is in valid but unspecified state

    auto l = {4, 5, 6, 7};
    std::println("Assignment of initializer_list {} to x:", l);
    x = l; // overload (3)
    std::println("x = {}", x);

    std::println("Assignment of initializer_list with size bigger than N throws:");
    try
    {
        x = {1, 2, 3, 4, 5}; // throws: (initializer list size == 5) &gt; (capacity N == 4)
    }
    catch(const std::bad_alloc&amp; ex)
    {
        std::println("ex.what(): {}", ex.what());
    }
}
|p=true
|output=
Initially:
x = [1, 2, 3]
y = []
Copy assignment copies data from x to y:
x = [1, 2, 3]
y = [1, 2, 3]
Initially:
z = []
w = ["üêà", "üíö"]
Move assignment moves data from w to z:
z = ["üêà", "üíö"]
w = ["", ""]
Assignment of initializer_list [4, 5, 6, 7] to x:
x = [4, 5, 6, 7]
Assignment of initializer_list with size bigger than N throws:
ex.what(): std::bad_alloc
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc constructor|inplace_vector}}
{{dsc inc|cpp/container/dsc assign|inplace_vector}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
{{cpp/container/inplace_vector/title|insert}}
{{cpp/container/inplace_vector/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++26|
constexpr iterator insert( const_iterator pos, const T&amp; value );
}}
{{dcl|num=2|since=c++26|
constexpr iterator insert( const_iterator pos, T&amp;&amp; value );
}}
{{dcl|num=3|since=c++26|
constexpr iterator insert( const_iterator pos, size_type count, const T&amp; value );
}}
{{dcl|num=4|since=c++26|
template&lt; class InputIt &gt;
constexpr iterator insert( const_iterator pos, InputIt first, InputIt last );
}}
{{dcl|num=5|since=c++26|
constexpr iterator insert( const_iterator pos, std::initializer_list&lt;T&gt; ilist );
}}
{{dcl end}}

Inserts elements at the specified location in the container.

@1@ Inserts a copy of {{c|value}} before {{c|pos}}.
@2@ Inserts {{c|value}} before {{c|pos}}, possibly using move semantics.
@3@ Inserts {{c|count}} copies of the {{c|value}} before {{c|pos}}.
@4@ Inserts elements from range {{range|first|last}} before {{c|pos}}.
{{cpp/enable if|{{tt|InputIt}} is {{named req|InputIterator}}}} (to avoid ambiguity with the overload {{v|3}}).
@@ Each iterator in {{range|first|last}} is dereferenced once.
@@ If {{c|first}} and {{c|last}} are iterators into {{c|*this}}, the behavior is undefined.
@5@ Inserts elements from initializer list {{c|ilist}} before {{c|pos}}. Equivalent to: {{c|insert(pos, ilist.begin(), ilist.end());}}.

{{cpp/container/note iterator invalidation|inplace_vector|insert}}

===Parameters===
{{par begin}}
{{par|pos|iterator before which the content will be inserted ({{c|pos}} may be the {{rlpf|end}} iterator)}}
{{par|value|element value to insert}}
{{par|count|number of elements to insert}}
{{par|first, last|the range of elements to insert}}
{{par|ilist|{{lc|std::initializer_list}} to insert the values from}}
{{par hreq}}
{{par req named|T|CopyInsertable|overload=1}}
{{par req named|T|MoveInsertable|overload=2}}
{{par req named|T|CopyInsertable|CopyAssignable|overload=3}}
{{par req named|T|EmplaceConstructible|overloads=4,5}}
{{par end}}

===Return value===
@1,2@ Iterator pointing to the inserted {{c|value}}.
@3@ Iterator pointing to the first element inserted, or {{c|pos}} if {{c|1=count == 0}}.
@4@ Iterator pointing to the first element inserted, or {{c|pos}} if {{c|1=first == last}}.
@5@ Iterator pointing to the first element inserted, or {{c|pos}} if {{c|ilist}} is empty.

===Complexity===
Linear in the number of elements inserted plus the distance between {{c|pos}} and {{rlpf|end}} of the container.

===Exceptions===
* Throws {{lc|std::bad_alloc}} if before invocation {{c|1=size() == capacity()}}. The function has no effects ([[cpp/language/exceptions#Exception safety|strong exception safety guarantee]]).
* Any exception thrown by initialization of inserted element or by any {{named req|InputIterator}} operation. Elements in {{range|0|pos}} are not modified.

===Example===
{{example
|code=
#include &lt;initializer_list&gt;
#include &lt;inplace_vector&gt;
#include &lt;iterator&gt;
#include &lt;new&gt;
#include &lt;print&gt;

int main()
{
    std::inplace_vector&lt;int, 14&gt; v(3, 100);
    std::println("1. {}", v);

    auto pos = v.begin();
    pos = v.insert(pos, 200); // overload (1)
    std::println("2. {}", v);

    v.insert(pos, 2, 300); // overload (3)
    std::println("3. {}", v);

    int arr[] = {501, 502, 503};
    v.insert(v.begin(), arr, arr + std::size(arr)); // overload (4)
    std::println("4. {}", v);

    v.insert(v.end(), {601, 602, 603}); // overload (5)
    std::println("5. {}", v);

    const auto list = {-13, -12, -11};
    try
    {
        v.insert(v.begin(), list); // throws: no space
    }
    catch(const std::bad_alloc&amp;)
    {
        std::println("bad_alloc: v.capacity()={} &lt; v.size()={} + list.size()={}",
                     v.capacity(), v.size(), list.size());
    }
}
|output=
1. [100, 100, 100]
2. [200, 100, 100, 100]
3. [300, 300, 200, 100, 100, 100]
4. [501, 502, 503, 300, 300, 200, 100, 100, 100]
5. [501, 502, 503, 300, 300, 200, 100, 100, 100, 601, 602, 603]
bad_alloc: v.capacity()=14 &lt; v.size()=12 + list.size()=3
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc emplace|inplace_vector}}
{{dsc inc|cpp/container/dsc insert_range|inplace_vector}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
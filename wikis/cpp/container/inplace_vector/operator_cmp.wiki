{{title|1=operator==,&lt;=&gt;{{petty|(std::inplace_vector)}}}}
{{cpp/container/inplace_vector/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++26|1=
constexpr friend bool operator==( const std::inplace_vector&lt;T, N&gt;&amp; lhs,
                                  const std::inplace_vector&lt;T, N&gt;&amp; rhs );
}}
{{dcl|num=2|since=c++26|1=
constexpr friend synth-three-way-result&lt;T&gt;
    operator&lt;=&gt;( const std::inplace_vector&lt;T, N&gt;&amp; lhs,
                 const std::inplace_vector&lt;T, N&gt;&amp; rhs );
}}
{{dcl end}}

Compares the contents of two {{lc|std::inplace_vector}}s.

@1@ Checks if the contents of {{c|lhs}} and {{c|rhs}} are equal, that is, they have the same number of elements and each element in {{c|lhs}} compares equal with the element in {{c|rhs}} at the same position.

@2@ Compares the contents of {{c|lhs}} and {{c|rhs}} lexicographically. The comparison is performed as if by calling&lt;br&gt;
{{c multi|
std::lexicographical_compare_three_way(lhs.begin(), lhs.end(),|
                                       rhs.begin(), rhs.end(), synth-three-way);
}}.
@@ The return type is the return type of {{lti|cpp/standard library/synth-three-way}} (i.e., {{lti|cpp/standard library/synth-three-way|synth-three-way-result}}{{sep}}{{c/core|&lt;T&gt;}}).

@@ {{cpp/precondition|At least one of the following conditions must be satisfied:
* {{tt|T}} models {{lconcept|three_way_comparable}}.
* {{tt|&amp;lt;}} is defined for values of type (possibly const-qualified) {{tt|T}}, and {{tt|&amp;lt;}} is a total ordering relationship.
{{nbsp|2}}}}

{{cpp/note synthesized compare}}

===Parameters===
{{par begin}}
{{par|lhs, rhs|{{lc|std::inplace_vector}}s whose contents to compare}}
{{par req named|T|EqualityComparable|overloads=1}}
{{par end}}

===Return value===
@1@ {{c|true}} if the contents of the {{lc|std::inplace_vector}}s are equal, {{c|false}} otherwise.
@2@ The relative order of the first pair of non-equivalent elements in {{c|lhs}} and {{c|rhs}} if there are such elements, {{c|1=lhs.size() &lt;=&gt; rhs.size()}} otherwise.

===Complexity===
@1@ Constant if {{c|lhs}} and {{c|rhs}} are of different size, otherwise linear in the size of the {{lc|std::inplace_vector}}.
@2@ Linear in the size of the {{lc|std::inplace_vector}}.

===Notes===
The relational operators are defined in terms of {{lti|cpp/standard library/synth-three-way}}, which uses {{c/core|1=operator&lt;=&gt;}} if possible, or {{c/core|operator&lt;}} otherwise.

Notably, if the element does not itself provide {{c/core|1=operator&lt;=&gt;}}, but is implicitly convertible to a three-way comparable type, that conversion will be used instead of {{c/core|operator&lt;}}.

===Example===
{{example
|code=
#include &lt;inplace_vector&gt;

int main()
{
    constexpr std::inplace_vector&lt;int, 4&gt;
        a{1, 2, 3},
        b{1, 2, 3},
        c{7, 8, 9, 10};

    static_assert
    (""
        "Compare equal containers:" &amp;&amp;
        (a != b) == false &amp;&amp;
        (a == b) == true &amp;&amp;
        (a &lt; b) == false &amp;&amp;
        (a &lt;= b) == true &amp;&amp;
        (a &gt; b) == false &amp;&amp;
        (a &gt;= b) == true &amp;&amp;
        (a &lt;=&gt; b) &gt;= 0 &amp;&amp;
        (a &lt;=&gt; b) &lt;= 0 &amp;&amp;
        (a &lt;=&gt; b) == 0 &amp;&amp;

        "Compare non equal containers:" &amp;&amp;
        (a != c) == true &amp;&amp;
        (a == c) == false &amp;&amp;
        (a &lt; c) == true &amp;&amp;
        (a &lt;= c) == true &amp;&amp;
        (a &gt; c) == false &amp;&amp;
        (a &gt;= c) == false &amp;&amp;
        (a &lt;=&gt; c) &lt; 0 &amp;&amp;
        (a &lt;=&gt; c) != 0 &amp;&amp;
        (a &lt;=&gt; c) &lt;= 0 &amp;&amp;
    "");
}
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
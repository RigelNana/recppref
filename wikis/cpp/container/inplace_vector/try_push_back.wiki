{{cpp/container/inplace_vector/title|try_push_back}}
{{cpp/container/inplace_vector/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++26|
constexpr pointer try_push_back( const T&amp; value );
}}
{{dcl|num=2|since=c++26|
constexpr pointer try_push_back( T&amp;&amp; value );
}}
{{dcl end}}

Conditionally appends the given element {{c|value}} to the end of the container.

If {{c|1=size() == capacity()}} is {{c|true}}, there are no effects. Otherwise, appends an object of type {{tt|T}}:
@1@ The new element is initialized as a copy of {{c|value}}.
@2@ {{c|value}} is moved into the new element.

{{cpp/container/note iterator invalidation|inplace_vector|try_push_back}}

===Parameters===
{{par begin}}
{{par|value|the value of the element to append}}
{{par hreq}}
{{par req named|T|EmplaceConstructible}}
{{par end}}

===Return value===
{{c|std::addressof(back())}} if {{c|size() &lt; capacity()}}, {{c|nullptr}} otherwise.

===Complexity===
Constant.

===Exceptions===
Any exception thrown by initialization of inserted element.

{{cpp/strong exception safety guarantee|plural=yes}}

===Notes===
{{todo|Explain the purpose of this API.}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;inplace_vector&gt;
#include &lt;string&gt;

int main()
{
    std::inplace_vector&lt;std::string, 2&gt; pets;
    std::string dog{"dog"};

    std::string* p1 = pets.try_push_back("cat"); // overload (1)
    assert(*p1 == "cat" and pets.size() == 1);

    std::string* p2 = pets.try_push_back(std::move(dog)); // overload (2)
    assert(*p2 == "dog" and pets.size() == 2);

    assert(pets[0] == "cat" and pets[1] == "dog");
    assert(pets.size() == pets.capacity());

    std::string* p3 = pets.try_push_back("bug");
    assert(p3 == nullptr and pets.size() == 2);
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc push_back|inplace_vector}}
{{dsc inc|cpp/container/dsc emplace_back|inplace_vector}}
{{dsc inc|cpp/container/dsc append_range|inplace_vector}}
{{dsc inc|cpp/container/dsc try_emplace_back|inplace_vector}}
{{dsc inc|cpp/container/dsc try_append_range|inplace_vector}}
{{dsc inc|cpp/container/dsc unchecked_emplace_back|inplace_vector}}
{{dsc inc|cpp/container/dsc unchecked_push_back|inplace_vector}}
{{dsc inc|cpp/container/dsc pop_back|inplace_vector}}
{{dsc inc|cpp/iterator/dsc back_inserter}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
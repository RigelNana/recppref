{{cpp/container/array/title|swap}}
{{cpp/container/array/navbar}}
{{ddcl|since=c++11|notes={{mark constexpr since c++20}}|
void swap( array&amp; other ) noexcept(/* see below */);
}}

Exchanges the contents of the container with those of {{c|other}}. Does not cause iterators and references to associate with the other container.

===Parameters===
{{par begin}}
{{par|other|container to exchange the contents with}}
{{par end}}

===Return value===
(none)

===Exceptions===
{{rrev multi|until1=c++17|rev1=
{{noexcept|noexcept(swap(std::declval&lt;T&amp;&gt;(), std::declval&lt;T&amp;&gt;()))}} 

In the expression above, the identifier {{tt|swap}} is looked up in the same manner as the one used by the C++17 {{lc|std::is_nothrow_swappable}} trait.&lt;!--LWG 2456--&gt;
|rev2=
{{noexcept|std::is_nothrow_swappable_v&lt;T&gt;}} 
}}

For zero-sized arrays, {{noexcept}}

===Complexity===
Linear in size of the container.

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;iostream&gt;

template&lt;class Os, class V&gt; Os&amp; operator&lt;&lt;(Os&amp; os, const V&amp; v)
{
    os &lt;&lt; '{';
    for (auto i : v)
        os &lt;&lt; ' ' &lt;&lt; i;
    return os &lt;&lt; " } ";
}

int main()
{
    std::array&lt;int, 3&gt; a1{1, 2, 3}, a2{4, 5, 6};

    auto it1 = a1.begin();
    auto it2 = a2.begin();
    int&amp; ref1 = a1[1];
    int&amp; ref2 = a2[1];

    std::cout &lt;&lt; a1 &lt;&lt; a2 &lt;&lt; *it1 &lt;&lt; ' ' &lt;&lt; *it2 &lt;&lt; ' ' &lt;&lt; ref1 &lt;&lt; ' ' &lt;&lt; ref2 &lt;&lt; '\n';
    a1.swap(a2);
    std::cout &lt;&lt; a1 &lt;&lt; a2 &lt;&lt; *it1 &lt;&lt; ' ' &lt;&lt; *it2 &lt;&lt; ' ' &lt;&lt; ref1 &lt;&lt; ' ' &lt;&lt; ref2 &lt;&lt; '\n';

    // Note that after swap iterators and references stay associated with their original
    // array, e.g. `it1` still points to element a1[0], `ref1` still refers to a1[1].
}
|output=
{ 1 2 3 } { 4 5 6 } 1 4 2 5
{ 4 5 6 } { 1 2 3 } 4 1 5 2
}}

===Defect reports===
{{dr list begin}}
{{dr list item|std=C++11|wg=lwg|dr=2456|before=the {{tt|noexcept}} specification is ill-formed|after=made to work}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc swap2|array}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
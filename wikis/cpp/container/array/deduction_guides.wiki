{{title|deduction guides for {{tt|std::array}}}}
{{cpp/container/array/navbar}}
{{dcl begin}}
{{dcl header|array}}
{{dcl|since=c++17|
template&lt; class T, class... U &gt;
array( T, U... ) -&gt; array&lt;T, 1 + sizeof...(U)&gt;;
}}
{{dcl end}}

One [[cpp/language/class template argument deduction|deduction guide]] is provided for {{lc|std::array}} to provide an equivalent of {{lc|std::experimental::make_array}} for construction of {{tt|std::array}} from a [[cpp/language/pack|variadic parameter pack]].

The program is ill-formed if {{c|(std::is_same_v&lt;T, U&gt; &amp;&amp; ...)}} is not true. Note that {{c|(std::is_same_v&lt;T, U&gt; &amp;&amp; ...)}} is true when {{c|sizeof...(U)}} is zero.

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;cassert&gt;
#include &lt;type_traits&gt;

int main()
{
    const int x = 10;
    std::array a{1, 2, 3, 5, x}; // OK, creates std::array&lt;int, 5&gt;
    assert(a.back() == x);

//  std::array b{1, 2u}; // Error, all arguments must have the same type

//  std::array&lt;short&gt; c{3, 2, 1}; // Error, wrong number of template args
    std::array c{std::to_array&lt;short&gt;({3, 2, 1})}; // C++20 facility
    assert(std::ranges::equal(c, std::array{3, 2, 1}));
    static_assert(std::is_same_v&lt;short, decltype(c)::value_type&gt;);
}
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|get{{petty|(std::array)}}}}
{{cpp/container/array/navbar}}
{{dcl begin}}
{{dcl header|array}}
{{dcl|num=1|since=c++11|notes={{mark constexpr since c++14}}|
template&lt; std::size_t I, class T, std::size_t N &gt;
T&amp; get( std::array&lt;T,N&gt;&amp; a ) noexcept;
}}
{{dcl|num=2|since=c++11|notes={{mark constexpr since c++14}}|
template&lt; std::size_t I, class T, std::size_t N &gt;
T&amp;&amp; get( std::array&lt;T,N&gt;&amp;&amp; a ) noexcept;
}}
{{dcl|num=3|since=c++11|notes={{mark constexpr since c++14}}|
template&lt; std::size_t I, class T, std::size_t N &gt;
const T&amp; get( const std::array&lt;T,N&gt;&amp; a ) noexcept;
}}
{{dcl|num=4|since=c++11|notes={{mark constexpr since c++14}}|
template&lt; std::size_t I, class T, std::size_t N &gt;
const T&amp;&amp; get( const std::array&lt;T,N&gt;&amp;&amp; a ) noexcept;
}}
{{dcl end}}

Extracts the {{tt|I}}{{sup|th}} element from the array using {{lt|cpp/utility/tuple/tuple-like}} interface.

{{tt|I}} must be an integer value in range {{range plain|0|N}}. This is enforced at compile time as opposed to {{lc|at()}} or {{lc|operator[]}}.

===Parameters===
{{par begin}}
{{par|a|array whose contents to extract}}
{{par end}}

===Return value===
A reference to the {{tt|I}}{{sup|th}} element of {{c|a}}.

===Complexity===
Constant.

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;iostream&gt;

constexpr std::array v{1, 2, 3};
static_assert(get&lt;0&gt;(v) == 1 &amp;&amp; get&lt;1&gt;(v) == 2 &amp;&amp; get&lt;2&gt;(v) == 3);

int main()
{
    std::array&lt;int, 3&gt; a;
    
    // set values:
    get&lt;0&gt;(a) = 1, get&lt;1&gt;(a) = 2, get&lt;2&gt;(a) = 3;
    
    // get values:
    std::cout &lt;&lt; '(' &lt;&lt; get&lt;0&gt;(a) &lt;&lt; ',' &lt;&lt; get&lt;1&gt;(a) &lt;&lt; ',' &lt;&lt; get&lt;2&gt;(a) &lt;&lt; ")\n";
}
|output=
(1,2,3)
}}

===Defect reports===
{{dr list begin}}
{{dr list item|dr=2485|wg=lwg|std=C++11|before=there are no overloads for const array&amp;&amp;|after=the overloads are added}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/language/dsc structured binding}}
{{dsc inc|cpp/container/dsc operator_at|array}}
{{dsc inc|cpp/container/dsc at|array}}
{{dsc inc|cpp/utility/tuple/dsc get}}
{{dsc inc|cpp/utility/pair/dsc get}}
{{dsc inc|cpp/utility/variant/dsc get}}
{{dsc inc|cpp/ranges/subrange/dsc get}}
{{dsc inc|cpp/numeric/complex/dsc get}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
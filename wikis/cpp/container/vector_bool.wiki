{{cpp/title|vector&lt;bool&gt;}}
{{cpp/container/vector bool/navbar}}
{{ddcl|header=vector|
template&lt;
    class Allocator
&gt; class vector&lt;bool, Allocator&gt;;
}}

{{box/core|{{c/core|std::}}{{tt|vector}}{{c/core|&lt;bool&gt;}}}} is a possibly space-efficient specialization of {{lc|std::vector}} for the type {{c/core|bool}}.

The manner in which {{box/core|{{c/core|std::}}{{tt|vector}}{{c/core|&lt;bool&gt;}}}} is made space efficient (as well as whether it is optimized at all) is implementation defined. One potential optimization involves coalescing vector elements such that each element occupies a single bit instead of {{c|sizeof(bool)}} bytes.

{{box/core|{{c/core|std::}}{{tt|vector}}{{c/core|&lt;bool&gt;}}}} behaves similarly to {{lc|std::vector}}, but in order to be space efficient, it:

* Does not necessarily store its elements as a contiguous array.
* Exposes class {{box/core|{{c/core|std::}}{{tt|vector}}{{c/core|&lt;bool&gt;::}}{{rlt|reference}}}} as a method of accessing individual bits. In particular, objects of this class are returned by {{ltt|cpp/container/vector/operator at|operator[]}} by value.
* Does not use {{c/core|std::allocator_traits::construct}} to construct bit values.
* Does not guarantee that different elements in the same container can be modified concurrently by different threads.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc inc|cpp/container/dsc value_type|vector_bool}}
{{dsc inc|cpp/container/dsc allocator_type|vector_bool}}
{{dsc inc|cpp/container/dsc size_type|vector_bool}}
{{dsc inc|cpp/container/dsc difference_type|vector_bool}}
{{dsc class|cpp/container/vector_bool/reference|proxy class representing a reference to a single {{c/core|bool}}}}
{{dsc inc|cpp/container/dsc const_reference|vector_bool}}
{{dsc inc|cpp/container/dsc pointer|vector_bool}}
{{dsc inc|cpp/container/dsc const_pointer|vector_bool}}
{{dsc inc|cpp/container/dsc iterator|vector_bool}}
{{dsc inc|cpp/container/dsc const_iterator|vector_bool}}
{{dsc inc|cpp/container/dsc reverse_iterator|vector_bool}}
{{dsc inc|cpp/container/dsc const_reverse_iterator|vector_bool}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/container/dsc constructor|vector}}
{{dsc inc|cpp/container/dsc destructor|vector}}
{{dsc inc|cpp/container/dsc operator{{=}}|vector}}
{{dsc inc|cpp/container/dsc assign|vector}}
{{dsc inc|cpp/container/dsc assign_range|vector}}
{{dsc inc|cpp/container/dsc get_allocator|vector}}

{{dsc h2|Element access}}
{{dsc inc|cpp/container/dsc at|vector}}
{{dsc inc|cpp/container/dsc operator_at|vector}}
{{dsc inc|cpp/container/dsc front|vector}}
{{dsc inc|cpp/container/dsc back|vector}}

{{dsc h2|Iterators}}
{{dsc inc|cpp/container/dsc begin|vector}}
{{dsc inc|cpp/container/dsc end|vector}}
{{dsc inc|cpp/container/dsc rbegin|vector}}
{{dsc inc|cpp/container/dsc rend|vector}}

{{dsc h2|Capacity}}
{{dsc inc|cpp/container/dsc empty|vector}}
{{dsc inc|cpp/container/dsc size|vector}}
{{dsc inc|cpp/container/dsc max_size|vector}}
{{dsc inc|cpp/container/dsc reserve|vector}}
{{dsc inc|cpp/container/dsc capacity|vector}}

{{dsc h2|Modifiers}}
{{dsc inc|cpp/container/dsc clear|vector}}
{{dsc inc|cpp/container/dsc insert|vector}}
{{dsc inc|cpp/container/dsc insert_range|vector}}
{{dsc inc|cpp/container/dsc append_range|vector}}
{{dsc inc|cpp/container/dsc emplace|vector}}
{{dsc inc|cpp/container/dsc erase|vector}}
{{dsc inc|cpp/container/dsc push_back|vector}}
{{dsc inc|cpp/container/dsc emplace_back|vector}}
{{dsc inc|cpp/container/dsc pop_back|vector}}
{{dsc inc|cpp/container/dsc resize|vector}}
{{dsc inc|cpp/container/dsc swap|vector}}

{{dsc h2|{{tt|vector&lt;bool&gt;}} specific modifiers}}
{{dsc inc|cpp/container/vector_bool/dsc flip}}
{{dsc inc|cpp/container/vector_bool/dsc swap}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/container/dsc operator_cmp|vector}}
{{dsc inc|cpp/container/dsc swap2|vector}}
{{dsc inc|cpp/container/dsc erase seq|vector}}
{{dsc end}}

===Helper classes===
{{dsc begin}}
{{dsc inc|cpp/container/vector_bool/dsc hash}}
{{dsc end}}

===[[cpp/container/vector/deduction guides|Deduction guides]] {{mark c++17}}===

===Notes===
If the size of the bitset is known at compile time, {{lc|std::bitset}} may be used, which offers a richer set of member functions. In addition, [https://www.boost.org/doc/libs/release/libs/dynamic_bitset/dynamic_bitset.html {{tt|boost::dynamic_bitset}}] exists as an alternative to {{box/core|{{c/core|std::}}{{tt|vector}}{{c/core|&lt;bool&gt;}}}}.

Since its representation may be optimized, {{box/core|{{c/core|std::}}{{tt|vector}}{{c/core|&lt;bool&gt;}}}} does not necessarily meet all {{named req|Container}} or {{named req|SequenceContainer}} requirements. For example, because {{box/core|{{c/core|std::}}{{tt|vector}}{{c/core|&lt;bool&gt;::iterator}}}} is implementation-defined, it may not satisfy the {{named req|ForwardIterator}} requirement. Use of algorithms such as {{lc|std::search}} that require {{named req|ForwardIterator}}s may result in [https://www.boost.org/doc/libs/release/libs/dynamic_bitset/dynamic_bitset.html#rationale either compile-time or run-time errors].

The [https://www.boost.org/doc/libs/release/doc/html/boost/container/vector.html Boost.Container version of {{tt|vector}}] does not specialize for {{c/core|bool}}.

{{ftm begin}}
{{ftm|__cpp_lib_containers_ranges|value=202202L|std=C++23|Ranges construction and insertion for containers}}
{{ftm end}}

===Example===
{{example}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2187|std=C++11|before=specializations for {{c/core|bool}} lacked {{tt|emplace}} and {{tt|emplace_back}} member functions|after=added}}
{{dr list end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
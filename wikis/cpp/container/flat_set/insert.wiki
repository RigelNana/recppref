{{cpp/container/flat_set/title|insert}}
{{cpp/container/flat_set/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
std::pair&lt;iterator, bool&gt; insert( const value_type&amp; value );
}}
{{dcl|num=2|since=c++23|
std::pair&lt;iterator, bool&gt; insert( value_type&amp;&amp; value );
}}
{{dcl|num=3|since=c++23|
iterator insert( const_iterator pos, const value_type&amp; value );
}}
{{dcl|num=4|since=c++23|
iterator insert( const_iterator pos, value_type&amp;&amp; value );
}}
{{dcl|num=5|since=c++23|
template&lt; class K &gt;
iterator insert( const_iterator pos, K&amp;&amp; x );
}}
{{dcl|num=6|since=c++23|
template&lt; class InputIt &gt;
void insert( InputIt first, InputIt last );
}}
{{dcl|num=7|since=c++23|
template&lt; class K &gt;
std::pair&lt;iterator, bool&gt; insert( K&amp;&amp; x );
}}
{{dcl|num=8|since=c++23|
template&lt; class InputIt &gt;
void insert( std::sorted_unique_t, InputIt first, InputIt last );
}}
{{dcl|num=9|since=c++23|
void insert( std::initializer_list&lt;key_type&gt; ilist );
}}
{{dcl|num=10|since=c++23|
void insert( std::sorted_unique_t s, std::initializer_list&lt;key_type&gt; ilist );
}}
{{dcl end}}

Inserts element(s) into the container, if the container does not already contain an element with an equivalent key.

@1@ Inserts {{c|value}}. Equivalent to {{c|return emplace(value);}}.

@2@ Inserts {{c|value}}. Equivalent to {{c|return emplace(std::move(value));}}.

@3@ Inserts {{c|value}} in the position as close as possible to the position just prior to {{c|pos}}. Equivalent to {{c|return emplace_hint(pos, value);}}.

@4@ Inserts {{c|value}} in the position as close as possible to the position just prior to {{c|pos}}. Equivalent to {{c|return emplace_hint(pos, std::move(value));}}.

@5,7@ If {{c|*this}} already contains an element which transparently compares equivalent to {{c|x}}, does nothing. Otherwise, inserts a new element as if by:
* {{v|5}} {{c|emplace(pos, std::forward&lt;K&gt;(x))}} (in the position as close as possible to the position just prior to {{c|pos}});
* {{v|7}} {{c|emplace(std::forward&lt;K&gt;(x))}}.

@@ The conversion from {{c|x}} into {{rlpt|/#Member types|key_type}} must construct an object {{c|u}}, for which {{c|1=find(k) == find(u)}} is {{c|true}}. Otherwise, the behavior is undefined.

@@ {{cpp/enable if|
* The qualified-id {{tt|Compare::is_transparent}} is valid and denotes a type, and
* {{c|std::is_constructible_v&lt;value_type, K&gt;}} is {{c|true}},
|plural=yes}} which together allows calling this function without constructing an instance of {{tt|Key}}.

@6@ Equivalent to the sequence of operations:
# Inserts elements from range {{range|first|last}} as if by {{c|c.insert(c.end(), first, last);}}.
# Sorts the range of newly inserted elements with respect to {{rlpi|/#Member objects|compare}}.
# Merges the resulting sorted range and the sorted range of pre-existing elements into a single sorted range. (Note: the merge operation may allocate memory).
# Erases all but the first element from each group of consecutive equivalent elements.
@@ {{cpp/container/lwg2488-note}}

@8@ Inserts elements from range {{range|first|last}}. Equivalent to {{c|insert(first, last);}}.
@@ {{cpp/container/lwg2488-note}}

@9@ Inserts elements from initializer list {{c|ilist}}. Equivalent to {{c|insert(ilist.begin(), ilist.end());}}.
@@ {{cpp/container/lwg2488-note}}

@10@ Inserts elements from initializer list {{c|ilist}}. Equivalent to {{c|insert(s, ilist.begin(), ilist.end());}}.
@@ {{cpp/container/lwg2488-note}}

{{cpp/container/note iterator invalidation|flat_set|insert}}

===Parameters===
{{par begin}}
{{par|pos|iterator to the position before which the new element will be inserted}}
{{par|value|element value to insert}}
{{par|first, last|range of elements to insert}}
{{par|ilist|initializer list to insert the values from}}
{{par|x|a value of any type that can be transparently compared with a key}}
{{par|s|a [[cpp/container/sorted_unique|disambiguation tag]] indicating that the input sequence is sorted (with respect to {{rlpi|/#Member objects|compare}}) and contains only unique elements}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par end}}

===Return value===
@1,2@ {{cpp/container/return iterator pair||pair}}
@3-5@ {{cpp/container/return iterator pair}}
@6@ (none)
@7@ {{cpp/container/return iterator pair||pair}}
@8-10@ (none)

===Exceptions===
@1-5,7@ If an exception is thrown by any operation, the insertion has no effect.

{{todo|cases 6,8-10}}

===Complexity===
@1-5@ Linear in {{rlpt|size|size()}}.
@6@ {{c|N + M·log(M)}}, where {{tt|N}} is the {{rlpt|size|size()}} before the operation and {{tt|M}} is {{c|std::distance(first, last)}}.
@7@ Linear in {{rlpt|size|size()}}.
@8@ Linear in {{tt|N}}, where {{tt|N}} is {{rlpt|size|size()}} after the operation.
@9@ {{c|N + M·log(M)}}, where {{tt|N}} is the {{rlpt|size|size()}} before the operation and {{tt|M}} is {{c|ilist.size()}}.
@10@ Linear in {{tt|N}}, where {{tt|N}} is {{rlpt|size|size()}} after the operation.

{{todo|1=recheck the complexity: 1-5, 7, 9, 10. The lookup is log(N), but insertion in underlying container is N/2 on average =&gt; Linear.}}

===Notes===
{{cpp/container/hinted insert note|3-5}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;flat_set&gt;
#include &lt;iostream&gt;

int main()
{
    std::flat_set&lt;int&gt; set;

    auto result_1 = set.insert(3);
    assert(result_1.first != set.end()); // it is a valid iterator
    assert(*result_1.first == 3);
    if (result_1.second)
        std::cout &lt;&lt; "insert done\n";

    auto result_2 = set.insert(3);
    assert(result_2.first == result_1.first); // the same iterator
    assert(*result_2.first == 3);
    if (!result_2.second)
        std::cout &lt;&lt; "no insertion\n";
}
|output=
insert done
no insertion
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc emplace|flat_set}}
{{dsc inc|cpp/container/dsc emplace_hint|flat_set}}
{{dsc inc|cpp/iterator/dsc inserter}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|unordered_multiset}}
{{cpp/container/unordered_multiset/navbar}}
{{dcl begin}}
{{dcl header|unordered_set}}
{{dcl|num=1|since=c++11|1=
template&lt;
    class Key,
    class Hash = std::hash&lt;Key&gt;,
    class KeyEqual = std::equal_to&lt;Key&gt;,
    class Allocator = std::allocator&lt;Key&gt;
&gt; class unordered_multiset;
}}
{{dcl|num=2|since=c++17|1=
namespace pmr {
    template&lt;
        class Key,
        class Hash = std::hash&lt;Key&gt;,
        class Pred = std::equal_to&lt;Key&gt;
    &gt; using unordered_multiset = std::unordered_multiset&lt;Key, Hash, Pred,
                                     std::pmr::polymorphic_allocator&lt;Key&gt;&gt;;
}
}}
{{dcl end}}

{{tt|std::unordered_multiset}} is an associative container that contains set of possibly non-unique objects of type Key. Search, insertion, and removal have average constant-time complexity.

Internally, the elements are not sorted in any particular order, but organized into buckets. Which bucket an element is placed into depends entirely on the hash of its value. This allows fast access to individual elements, since once hash is computed, it refers to the exact bucket the element is placed into.

The iteration order of this container is not required to be stable (so, for example, {{lc|std::equal}} cannot be used to compare two {{tt|std::unordered_multiset}}s), except that every group of elements whose keys compare ''equivalent'' (compare equal with {{lc|key_eq()}} as the comparator) forms a contiguous subrange in the iteration order, also accessible with {{lc|equal_range()}}.

{{tt|std::unordered_multiset}} meets the requirements of {{named req|Container}}, {{named req|AllocatorAwareContainer}}, {{named req|UnorderedAssociativeContainer}}.

===Template parameters===
{{todo|Add descriptions of the template parameters.}}

===Member types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc inc|cpp/container/dsc key_type|unordered_multiset}}
{{dsc inc|cpp/container/dsc value_type|unordered_multiset}}
{{dsc inc|cpp/container/dsc size_type|unordered_multiset}}
{{dsc inc|cpp/container/dsc difference_type|unordered_multiset}}
{{dsc inc|cpp/container/dsc hasher|unordered_multiset}}
{{dsc inc|cpp/container/dsc key_equal|unordered_multiset}}
{{dsc inc|cpp/container/dsc allocator_type|unordered_multiset}}
{{dsc inc|cpp/container/dsc reference|unordered_multiset}}
{{dsc inc|cpp/container/dsc const_reference|unordered_multiset}}
{{dsc inc|cpp/container/dsc pointer|unordered_multiset}}
{{dsc inc|cpp/container/dsc const_pointer|unordered_multiset}}
{{dsc inc|cpp/container/dsc iterator|unordered_multiset}}
{{dsc inc|cpp/container/dsc const_iterator|unordered_multiset}}
{{dsc inc|cpp/container/dsc local_iterator|unordered_multiset}}
{{dsc inc|cpp/container/dsc const_local_iterator|unordered_multiset}}
{{dsc inc|cpp/container/dsc node_type|unordered_multiset}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/container/dsc constructor|unordered_multiset}}
{{dsc inc|cpp/container/dsc destructor|unordered_multiset}}
{{dsc inc|cpp/container/dsc operator{{=}}|unordered_multiset}}
{{dsc inc|cpp/container/dsc get_allocator|unordered_multiset}}

{{dsc h2|Iterators}}
{{dsc inc|cpp/container/dsc begin|unordered_multiset}}
{{dsc inc|cpp/container/dsc end|unordered_multiset}}

{{dsc h2|Capacity}}
{{dsc inc|cpp/container/dsc empty|unordered_multiset}}
{{dsc inc|cpp/container/dsc size|unordered_multiset}}
{{dsc inc|cpp/container/dsc max_size|unordered_multiset}}

{{dsc h2|Modifiers}}
{{dsc inc|cpp/container/dsc clear|unordered_multiset}}
{{dsc inc|cpp/container/dsc insert|unordered_multiset}}
{{dsc inc|cpp/container/dsc insert_range|unordered_multiset}}
{{dsc inc|cpp/container/dsc emplace|unordered_multiset}}
{{dsc inc|cpp/container/dsc emplace_hint|unordered_multiset}}
{{dsc inc|cpp/container/dsc erase|unordered_multiset}}
{{dsc inc|cpp/container/dsc swap|unordered_multiset}}
{{dsc inc|cpp/container/dsc extract|unordered_multiset}}
{{dsc inc|cpp/container/dsc merge|unordered_multiset}}

{{dsc h2|Lookup}}
{{dsc inc|cpp/container/dsc count|unordered_multiset}}
{{dsc inc|cpp/container/dsc find|unordered_multiset}}
{{dsc inc|cpp/container/dsc contains|unordered_multiset}}
{{dsc inc|cpp/container/dsc equal_range|unordered_multiset}}

{{dsc h2|Bucket interface}}
{{dsc inc|cpp/container/dsc begin(int)|unordered_multiset}}
{{dsc inc|cpp/container/dsc end(int)|unordered_multiset}}
{{dsc inc|cpp/container/dsc bucket_count|unordered_multiset}}
{{dsc inc|cpp/container/dsc max_bucket_count|unordered_multiset}}
{{dsc inc|cpp/container/dsc bucket_size|unordered_multiset}}
{{dsc inc|cpp/container/dsc bucket|unordered_multiset}}

{{dsc h2|Hash policy}}
{{dsc inc|cpp/container/dsc load_factor|unordered_multiset}}
{{dsc inc|cpp/container/dsc max_load_factor|unordered_multiset}}
{{dsc inc|cpp/container/dsc rehash|unordered_multiset}}
{{dsc inc|cpp/container/dsc reserve|unordered_multiset}}

{{dsc h2|Observers}}
{{dsc inc|cpp/container/dsc hash_function|unordered_multiset}}
{{dsc inc|cpp/container/dsc key_eq|unordered_multiset}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/container/dsc operator_cmp_unord|unordered_multiset}}
{{dsc inc|cpp/container/dsc swap2|unordered_multiset}}
{{dsc inc|cpp/container/dsc erase_if|unordered_multiset}}
{{dsc end}}

{{rrev|since=c++17|
==={{rl|deduction guides|Deduction guides}}===
}}

===Notes===
{{cpp/container/assoc note}}

{{ftm begin|std=1|comment=1}}
{{ftm|__cpp_lib_containers_ranges|value=202202L|std=C++23|Ranges construction and insertion for containers}}
{{ftm end}}

===Example===
{{example}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2050|std=C++11|before=the definitions of {{tt|reference}}, {{tt|const_reference}}, {{tt|pointer}}&lt;br&gt;and {{tt|const_pointer}} were based on {{tt|allocator_type}}|after=based on {{tt|value_type}} and&lt;br&gt;{{lc|std::allocator_traits}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc unordered_set}}
{{dsc inc|cpp/container/dsc multiset}}
{{dsc inc|cpp/container/dsc flat_multiset}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
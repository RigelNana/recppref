{{cpp/container/span/title|last}}
{{cpp/container/span/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
template&lt; std::size_t Count &gt;
constexpr std::span&lt;element_type, Count&gt; last() const;
}}
{{dcl|since=c++20|num=2|1=
constexpr std::span&lt;element_type, std::dynamic_extent&gt; last( size_type Count ) const;
}}
{{dcl end}}

Obtains a span that is a view over the last {{c|Count}} elements of this span. The program is ill-formed if {{c|Count &gt; Extent}}. The behavior is undefined if {{c|Count &gt; size()}}.

===Return value===
A span {{tt|r}} that is a view over the last {{c|Count}} elements of {{c|*this}}, such that {{c|1=r.data() == this-&gt;data() + (this-&gt;size() - Count) &amp;&amp; r.size() == Count}}.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;span&gt;
#include &lt;string_view&gt;

void println(std::string_view const title, auto const&amp; container)
{
    std::cout &lt;&lt; title &lt;&lt; '[' &lt;&lt; std::size(container) &lt;&lt; "]{ ";
    for (auto const&amp; elem : container)
        std::cout &lt;&lt; elem &lt;&lt; ", ";
    std::cout &lt;&lt; "};\n";
};

void run(std::span&lt;const int&gt; span)
{
    println("span: ", span);

    std::span&lt;const int, 3&gt; span_last = span.last&lt;3&gt;();
    println("span.last&lt;3&gt;(): ", span_last);

    std::span&lt;const int, std::dynamic_extent&gt; span_last_dynamic = span.last(2);
    println("span.last(2): ", span_last_dynamic);
}

int main()
{
    int a[8]{1, 2, 3, 4, 5, 6, 7, 8};
    println("int a", a);
    run(a);
}
|output=
int a[8]{ 1, 2, 3, 4, 5, 6, 7, 8, };
span: [8]{ 1, 2, 3, 4, 5, 6, 7, 8, };
span.last&lt;3&gt;(): [3]{ 6, 7, 8, };
span.last(2): [2]{ 7, 8, };
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/span/dsc first}}
{{dsc inc|cpp/container/span/dsc subspan}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
{{cpp/container/span/title|first}}
{{cpp/container/span/navbar}}
{{dcl begin}}
{{dcl|since=c++20|1=
template&lt; std::size_t Count &gt;
constexpr std::span&lt;element_type, Count&gt; first() const;
}}
{{dcl|since=c++20|1=
constexpr std::span&lt;element_type, std::dynamic_extent&gt; first( size_type Count ) const;
}}
{{dcl end}}

Obtains a span that is a view over the first {{tt|Count}} elements of this span. The program is ill-formed if {{c|Count &gt; Extent}}. The behavior is undefined if {{c|Count &gt; size()}}.

===Return value===
A span {{tt|r}} that is a view over the first {{tt|Count}} elements of {{c|*this}}, such that {{c|1=r.data() == this-&gt;data() &amp;&amp; r.size() == Count}}.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;span&gt;
#include &lt;string_view&gt;

void print(std::string_view const title,
           std::ranges::forward_range auto const&amp; container)
{
    auto size{std::size(container)};
    std::cout &lt;&lt; title &lt;&lt; '[' &lt;&lt; size &lt;&lt; "]{";
    for (auto const&amp; elem : container)
        std::cout &lt;&lt; elem &lt;&lt; (--size ? ", " : "");
    std::cout &lt;&lt; "};\n";
}

void run_game(std::span&lt;const int&gt; span)
{
    print("span: ", span);

    std::span&lt;const int, 5&gt; span_first = span.first&lt;5&gt;();
    print("span.first&lt;5&gt;(): ", span_first);

    std::span&lt;const int, std::dynamic_extent&gt; span_first_dynamic = span.first(4);
    print("span.first(4): ", span_first_dynamic);
}

int main()
{
    int a[8]{1, 2, 3, 4, 5, 6, 7, 8};
    print("int a", a);
    run_game(a);
}
|output=
int a[8]{1, 2, 3, 4, 5, 6, 7, 8};
span: [8]{1, 2, 3, 4, 5, 6, 7, 8};
span.first&lt;5&gt;(): [5]{1, 2, 3, 4, 5};
span.first(4): [4]{1, 2, 3, 4};
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/span/dsc last}}
{{dsc inc|cpp/container/span/dsc subspan}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
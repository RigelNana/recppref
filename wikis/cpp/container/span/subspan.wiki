{{cpp/container/span/title|subspan}}
{{cpp/container/span/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
template&lt; std::size_t Offset,
          std::size_t Count = std::dynamic_extent &gt;
constexpr std::span&lt;element_type, E /* see below */&gt;
    subspan() const;
}}
{{dcl|since=c++20|num=2|1=
constexpr std::span&lt;element_type, std::dynamic_extent&gt;
    subspan( size_type Offset,
             size_type Count = std::dynamic_extent ) const;
}}
{{dcl end}}

Obtains a span that is a view over the {{c|Count}} elements of this span starting at offset {{c|Offset}}. If {{c|Count}} is {{lc|std::dynamic_extent}}, the number of elements in the subspan is {{c|size() - offset}} (i.e., it ends at the end of {{c|*this}}).

@1@ Is ill-formed if
* {{c|Offset}} is greater than {{c|Extent}}, or
* {{c|Count}} is not {{lc|std::dynamic_extent}} and {{c|Count}} is greater than {{c|Extent - Offset}}.

The behavior is undefined if either {{c|Offset}} or {{c|Count}} is out of range. This happens if
* {{c|Offset}} is greater than {{lc|size()}}, or
* {{c|Count}} is not {{lc|std::dynamic_extent}} and {{c|Count}} is greater than {{c|size() - Offset}}.

The extent {{tt|E}} of the span returned by {{v|1}} is determined as follows:
* If {{c|Count}} is not {{lc|std::dynamic_extent}}, {{c|Count}};
* Otherwise, if {{tt|Extent}} is not {{lc|std::dynamic_extent}}, {{c|Extent - Offset}};
* Otherwise, {{lc|std::dynamic_extent}}.

===Return value===
The requested subspan {{tt|r}}, such that {{c|1=r.data() == this-&gt;data() + Offset}}. If {{c|Count}} is {{lc|std::dynamic_extent}}, {{c|1=r.size() == this-&gt;size() - Offset}}; otherwise {{c|1=r.size() == Count}}.

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cstdio&gt;
#include &lt;numeric&gt;
#include &lt;ranges&gt;
#include &lt;span&gt;

void display(std::span&lt;const char&gt; abc)
{
    const auto columns{20U};
    const auto rows{abc.size() - columns + 1};

    for (auto offset{0U}; offset &lt; rows; ++offset)
    {
        std::ranges::for_each(abc.subspan(offset, columns), std::putchar);
        std::putchar('\n');
    }
}

int main()
{
    char abc[26];
    std::iota(std::begin(abc), std::end(abc), 'A');
    display(abc);
}
|output=
ABCDEFGHIJKLMNOPQRST
BCDEFGHIJKLMNOPQRSTU
CDEFGHIJKLMNOPQRSTUV
DEFGHIJKLMNOPQRSTUVW
EFGHIJKLMNOPQRSTUVWX
FGHIJKLMNOPQRSTUVWXY
GHIJKLMNOPQRSTUVWXYZ
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/span/dsc first}}
{{dsc inc|cpp/container/span/dsc last}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
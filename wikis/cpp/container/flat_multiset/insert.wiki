{{cpp/container/flat_multiset/title|insert}}
{{cpp/container/flat_multiset/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
iterator insert( const value_type&amp; value )
}}
{{dcl|num=2|since=c++23|
iterator insert( value_type&amp;&amp; value );
}}
{{dcl|num=3|since=c++23|
iterator insert( const_iterator pos, const value_type&amp; value );
}}
{{dcl|num=4|since=c++23|
iterator insert( const_iterator pos, value_type&amp;&amp; value );
}}
{{dcl|num=5|since=c++23|
template&lt; class InputIt &gt;
void insert( InputIt first, InputIt last );
}}
{{dcl|num=6|since=c++23|
template&lt; class InputIt &gt;
void insert( std::sorted_equivalent_t, InputIt first, InputIt last );
}}
{{dcl|num=7|since=c++23|
void insert( std::initializer_list&lt;key_type&gt; ilist );
}}
{{dcl|num=8|since=c++23|
void insert( std::sorted_equivalent_t s, std::initializer_list&lt;key_type&gt; ilist );
}}
{{dcl end}}

Inserts element(s) into the container. The order of the remaining equivalent elements is preserved.

@1@ Inserts {{c|value}}. If the container has elements with equivalent key, inserts at the upper bound of that range. Equivalent to {{c|return emplace(value);}}.

@2@ Inserts {{c|value}}. If the container has elements with equivalent key, inserts at the upper bound of that range. Equivalent to {{c|return emplace(std::move(value));}}.

@3@ Inserts {{c|value}} in the position as close as possible to the position just prior to {{c|pos}}. Equivalent to {{c|return emplace_hint(pos, value);}}.

@4@ Inserts {{c|value}} in the position as close as possible to the position just prior to {{c|pos}}. Equivalent to {{c|return emplace_hint(pos, std::move(value));}}.

@5@ Inserts elements from range {{range|first|last}} as if performing the following operations sequentially:
# Adds elements to {{rlpt|/#Member objects|c}} as if by {{c|c.insert(c.end(), first, last);}}.
# Sorts the range of newly inserted elements with respect to {{rlpt|/#Member objects|compare}}.
# Merges the resulting sorted range and the sorted range of pre-existing elements into a single sorted range.
@@ May allocate memory during the in-place merge stage.

@6@ Inserts elements from range {{range|first|last}}. Equivalent to {{c|insert(first, last);}}.

@7@ Inserts elements from initializer list {{c|ilist}}. Equivalent to {{c|insert(ilist.begin(), ilist.end());}}.

@8@ Inserts elements from initializer list {{c|ilist}}. Equivalent to {{c|insert(s, ilist.begin(), ilist.end());}}.

{{cpp/container/note iterator invalidation|flat_multiset|insert}}

===Parameters===
{{par begin}}
{{par|pos|iterator to the position before which the new element will be inserted}}
{{par|value|element value to insert}}
{{par|first, last|range of elements to insert}}
{{par|ilist|initializer list to insert the values from}}
{{par|s|a disambiguation tag indicating that the input sequence is sorted (with respect to {{rlpt|/#Member objects|key_compare}})}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par end}}

===Return value===
@1-4@ An iterator to the inserted element.
@5-8@ (none)

===Exceptions===
@1-4@ Depends on underlying container. &lt;!-- sometimes {{cpp/strong exception safety guarantee}} --&gt;
@5-8@ No exception safety guarantee.

{{todo|exception guarantees 1..8}}

===Complexity===
@1-4@ Linear.
@5@ {{c|N + M·log(M)}}, where {{mathjax-or|N|N}} is the {{rlpt|size|size()}} before the operation and {{tt|M}} is {{c|std::distance(first, last)}}.
@6@ Linear.
@7@ {{c|N + M·log(M)}}, where {{mathjax-or|N|N}} is the {{rlpt|size|size()}} before the operation and {{tt|M}} is {{c|ilist.size()}}.
@8@ Linear.

{{todo|recheck the complexity: 1-4, 8}}

===Example===
{{example
|code=
|output=
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc emplace|flat_multiset}}
{{dsc inc|cpp/container/dsc emplace_hint|flat_multiset}}
{{dsc inc|cpp/iterator/dsc inserter}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
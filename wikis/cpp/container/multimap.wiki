{{cpp/title|multimap}}
{{cpp/container/multimap/navbar}}
{{dcl begin}}
{{dcl header|map}}
{{dcl|num=1|1=
template&lt;
    class Key,
    class T,
    class Compare = std::less&lt;Key&gt;,
    class Allocator = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;
&gt; class multimap;
}}
{{dcl|num=2|since=c++17|1=
namespace pmr {
    template&lt;
        class Key,
        class T,
        class Compare = std::less&lt;Key&gt;
    &gt; using multimap = std::multimap&lt;Key, T, Compare,
        std::pmr::polymorphic_allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt;;
}
}}
{{dcl end}}

{{tt|std::multimap}} is an associative container that contains a sorted list of key-value pairs, while permitting multiple entries with the same key. Sorting is done according to the comparison function {{tt|Compare}}, applied to the keys. Search, insertion, and removal operations have logarithmic complexity.

Iterators of {{tt|std::multimap}} iterate in non-descending order of keys, where non-descending is defined by the comparison that was used for construction. That is, given
* {{c|m}}, a {{tt|std::multimap}}
* {{c|it_l}} and {{c|it_r}}, dereferenceable iterators to {{c|m}}, with {{c|it_l &lt; it_r}}.
{{c|1=m.value_comp()(*it_r, *it_l) == false}} (least to greatest if using the default comparison).

{{rrev|since=c++11|
The order of the key-value pairs whose keys compare equivalent is the order of insertion and does not change.
}}

Everywhere the standard library uses the {{named req|Compare}} requirements, equivalence is determined by using the equivalence relation as described on {{named req|Compare}}. In imprecise terms, two objects {{c|a}} and {{c|b}} are considered equivalent if neither compares less than the other: {{c|!comp(a, b) &amp;&amp; !comp(b, a)}}.

{{tt|std::multimap}} meets the requirements of {{named req|Container}}, {{named req|AllocatorAwareContainer}}, {{named req|AssociativeContainer}} and {{named req|ReversibleContainer}}.

===Template parameters===
{{todo|Add descriptions of the template parameters.}}

===Member types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc inc|cpp/container/dsc key_type|multimap}}
{{dsc inc|cpp/container/dsc mapped_type|multimap}}
{{dsc inc|cpp/container/dsc value_type|multimap}}
{{dsc inc|cpp/container/dsc size_type|multimap}}
{{dsc inc|cpp/container/dsc difference_type|multimap}}
{{dsc inc|cpp/container/dsc key_compare|multimap}}
{{dsc inc|cpp/container/dsc allocator_type|multimap}}
{{dsc inc|cpp/container/dsc reference|multimap}}
{{dsc inc|cpp/container/dsc const_reference|multimap}}
{{dsc inc|cpp/container/dsc pointer|multimap}}
{{dsc inc|cpp/container/dsc const_pointer|multimap}}
{{dsc inc|cpp/container/dsc iterator|multimap}}
{{dsc inc|cpp/container/dsc const_iterator|multimap}}
{{dsc inc|cpp/container/dsc reverse_iterator|multimap}}
{{dsc inc|cpp/container/dsc const_reverse_iterator|multimap}}
{{dsc inc|cpp/container/dsc node_type|multimap}}
{{dsc end}}

===Member classes===
{{dsc begin}}
{{dsc inc|cpp/container/dsc value_compare|multimap}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/container/dsc constructor|multimap}}
{{dsc inc|cpp/container/dsc destructor|multimap}}
{{dsc inc|cpp/container/dsc operator{{=}}|multimap}}
{{dsc inc|cpp/container/dsc get_allocator|multimap}}

{{dsc h2|Iterators}}
{{dsc inc|cpp/container/dsc begin|multimap}}
{{dsc inc|cpp/container/dsc end|multimap}}
{{dsc inc|cpp/container/dsc rbegin|multimap}}
{{dsc inc|cpp/container/dsc rend|multimap}}

{{dsc h2|Capacity}}
{{dsc inc|cpp/container/dsc empty|multimap}}
{{dsc inc|cpp/container/dsc size|multimap}}
{{dsc inc|cpp/container/dsc max_size|multimap}}

{{dsc h2|Modifiers}}
{{dsc inc|cpp/container/dsc clear|multimap}}
{{dsc inc|cpp/container/dsc insert|multimap}}
{{dsc inc|cpp/container/dsc insert_range|multimap}}
{{dsc inc|cpp/container/dsc emplace|multimap}}
{{dsc inc|cpp/container/dsc emplace_hint|multimap}}
{{dsc inc|cpp/container/dsc erase|multimap}}
{{dsc inc|cpp/container/dsc swap|multimap}}
{{dsc inc|cpp/container/dsc extract|multimap}}
{{dsc inc|cpp/container/dsc merge|multimap}}

{{dsc h2|Lookup}}
{{dsc inc|cpp/container/dsc count|multimap}}
{{dsc inc|cpp/container/dsc find|multimap}}
{{dsc inc|cpp/container/dsc contains|multimap}}
{{dsc inc|cpp/container/dsc equal_range|multimap}}
{{dsc inc|cpp/container/dsc lower_bound|multimap}}
{{dsc inc|cpp/container/dsc upper_bound|multimap}}

{{dsc h2|Observers}}
{{dsc inc|cpp/container/dsc key_comp|multimap}}
{{dsc inc|cpp/container/dsc value_comp|multimap}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/container/dsc operator_cmp|multimap}}
{{dsc inc|cpp/container/dsc swap2|multimap}}
{{dsc inc|cpp/container/dsc erase_if|multimap}}
{{dsc end}}

{{rrev|since=c++17|
==={{rl|deduction guides|Deduction guides}}===
}}

===Notes===
{{ftm begin|std=1|comment=1}}
{{ftm|__cpp_lib_containers_ranges|value=202202L|std=C++23|Ranges construction and insertion for containers}}
{{ftm end}}

===Example===
{{example}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=230|std=C++98|before={{tt|Key}} was not required to be {{named req|CopyConstructible}}&lt;br&gt;(a key of type {{tt|Key}} might not be able to be constructed)|after={{tt|Key}} is also required to&lt;br&gt;be {{named req|CopyConstructible}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc map}}
{{dsc inc|cpp/container/dsc unordered_multimap}}
{{dsc inc|cpp/container/dsc flat_multimap}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja||pl|pt|ru|zh}}
{{cpp/title|layout_left_padded}}
{{cpp/container/mdspan/navbar}}
{{ddcl|header=mdspan|since=c++26|1=
template&lt; std::size_t PaddingValue = std::dynamic_extent &gt;
struct layout_left_padded;
}}

Every specialization of {{tt|layout_left_padded}} is a {{named req|LayoutMappingPolicy}} which provides a layout mapping that is similar to {{rlpt|layout_left/mapping|layout_left::mapping}} except that it has a ''padding stride''.

Every specialization of {{tt|layout_left_padded}} is {{named req|TriviallyCopyable}}, and {{c|std::is_trivially_default_constructible_v&lt;T&gt;}} is {{c|true}} for any such specialization {{tt|T}}.

Let {{c|m}} be the instance of the mapping type {{rlt|mapping|layout_left_padded::mapping}}. The padding stride of the mapping is the second stride {{c|m.stride(1)}} which is guaranteed to be at least the first extent value {{c|m.extent(0)}}, called ''extent to pad''.

===Nested class templates===
{{dsc begin}}
{{dsc inc|cpp/container/mdspan/layout_left_padded/dsc mapping}}
{{dsc end}}

===Example===
{{example
|code=
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/mdspan/dsc layout_left}}
{{dsc inc|cpp/container/mdspan/dsc layout_stride}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
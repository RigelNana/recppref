{{cpp/title|default_accessor}}
{{cpp/container/mdspan/navbar}}
{{ddcl|header=mdspan|since=c++23|1=
template&lt; class ElementType &gt;
class default_accessor;
}}

A specialization of {{tt|std::default_accessor}} class template is the default {{named req|AccessorPolicy}} used by {{lc|std::mdspan}} if no user-specified accessor policy is provided. 

Each specialization of {{tt|default_accessor}} models {{lconcept|semiregular}} and is {{named req|TriviallyCopyable}}.

===Template parameters===
{{par begin}}
{{par|ElementType|the element type. Shall be a complete object type that is neither an abstract class type nor an array type. Otherwise, the program is ill-formed}}
{{par end}}

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|offset_policy}}|{{tt|default_accessor}}}}
{{dsc|{{tt|element_type}}|{{tt|ElementType}}}}
{{dsc|{{tt|reference}}|{{tt|ElementType&amp;}}}}
{{dsc|{{tt|data_handle_type}}|{{tt|ElementType*}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|nolink=true|constructs a {{tt|default_accessor}}}}
{{dsc mem fun|access|nolink=true|returns a n&lt;sup&gt;th&lt;/sup&gt; element provided by arguments}}
{{dsc mem fun|offset|nolink=true|returns a data handle advanced by an offset value}}
{{dsc end}}

{{member|{{small|std::default_accessor::}}default_accessor|2=
{{dcl begin}}
{{dcl|num=1|1=
constexpr default_accessor() noexcept = default;
}}
{{dcl|num=2|1=
template&lt; class OtherElementType &gt;
constexpr default_accessor( default_accessor&lt;OtherElementType&gt; ) noexcept {}
}}
{{dcl end}}

@1@ Default constructs a {{tt|default_accessor}}.

@2@ Constructs a {{tt|default_accessor}} from {{c|default_accessor&lt;OtherElementType&gt;}}. The constructor has no visible effect. This overload participates in overload resolution only if {{c|std::is_convertible_v&lt;OtherElementType(*)[], element_type(*)[]&gt;}} is true.
}}

{{member|{{small|std::default_accessor::}}access|2=
{{dcl begin}}
{{dcl|1=
constexpr reference access( data_handle_type p, std::size_t i ) const noexcept;
}}
{{dcl end}}

Equivalent to {{c|return p[i];}}.
}}

{{member|{{small|std::default_accessor::}}offset|2=
{{dcl begin}}
{{dcl|1=
constexpr data_handle_type offset( data_handle_type p, std::size_t i ) const noexcept;
}}
{{dcl end}}

Equivalent to {{c|return p + i;}}.
}}

===Example===
{{example}}

{{langlinks|de|es|ja|ru|zh}}
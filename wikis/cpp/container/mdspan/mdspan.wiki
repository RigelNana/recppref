{{cpp/container/mdspan/title|mdspan}}
{{cpp/container/mdspan/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr mdspan();
}}
{{dcl|num=2|since=c++23|1=
template&lt; class... OtherIndexTypes &gt;
    constexpr explicit mdspan( data_handle_type p, OtherIndexTypes... exts );
}}
{{dcl|num=3|since=c++23|1=
template&lt; class OtherIndexType, std::size_t N &gt;
    constexpr explicit(N != rank_dynamic())
        mdspan( data_handle_type p, std::span&lt;OtherIndexType, N&gt; exts );
}}
{{dcl|num=4|since=c++23|1=
template&lt; class OtherIndexType, std::size_t N &gt;
    constexpr explicit(N != rank_dynamic())
        mdspan( data_handle_type p, const std::array&lt;OtherIndexType, N&gt;&amp; exts );
}}
{{dcl|num=5|since=c++23|1=
constexpr mdspan( data_handle_type p, const extents_type&amp; ext );
}}
{{dcl|num=6|since=c++23|1=
constexpr mdspan( data_handle_type p, const mapping_type&amp; m );
}}
{{dcl|num=7|since=c++23|1=
constexpr mdspan( data_handle_type p, const mapping_type&amp; m,
                  const accessor_type&amp; a );
}}
{{dcl|num=8|since=c++23|1=
template&lt; class OtherElementType, class OtherExtents,
          class OtherLayoutPolicy, class OtherAccessor &gt;
    constexpr explicit(/* see below */)
        mdspan( const mdspan&lt;OtherElementType, OtherExtents,
                             OtherLayoutPolicy, OtherAccessor&gt;&amp; other );
}}
{{dcl|num=9|since=c++23|1=
constexpr mdspan( const mdspan&amp; rhs ) = default;
}}
{{dcl|num=10|since=c++23|1=
constexpr mdspan( mdspan&amp;&amp; rhs ) = default;
}}
{{dcl end}}

Constructs an {{tt|mdspan}}, optionally using user-supplied data handle {{c|p}}, layout mapping {{c|m}}, and accessor {{c|a}}. If extents {{c|exts}} or {{c|ext}} are supplied, they are converted to {{c|extents_type}} and used to initialize the layout mapping.

@1@ Constructs an empty mdspan. [[cpp/language/value_initialization|Value-initializes]] {{rlpi|/#Data members|ptr_}}, {{rlpi|/#Data members|map_}}, and {{rlpi|/#Data members|acc_}}.
* The behavior is undefined if {{range plain|0|map_.required_span_size()}} is not an accessible range of {{rlpi|/#Data members|ptr_}} and {{rlpi|/#Data members|acc_}} for the values of {{rlpi|/#Data members|map_}} and {{rlpi|/#Data members|acc_}} after the invocation of this constructor.
* {{cpp/enable_if|
:* {{c|rank_dynamic() &gt; 0}} is {{c|true}},
:* {{c|std::is_default_constructible_v&lt;data_handle_type&gt;}} is {{c|true}},
:* {{c|std::is_default_constructible_v&lt;mapping_type&gt;}} is {{c|true}}, and
:* {{c|std::is_default_constructible_v&lt;accessor_type&gt;}} is {{c|true}}.}}

@2@ Constructs an mdspan over the underlying data referred by {{c|p}} with extents represented by {{tt|exts...}}. [[cpp/language/value_initialization|Value-initializes]] {{rlpi|/#Data members|acc_}}, [[cpp/language/direct_initialization|direct-non-list-initializes]] {{rlpi|/#Data members|ptr_}} with {{c|std::move(p)}} and {{rlpi|/#Data members|map_}} with {{c|extents_type(static_cast&lt;index_type&gt;(std::move(exts))...)}}.
* The behavior is undefined if {{range plain|0|map_.required_span_size()}} is not an accessible range of {{rlpi|/#Data members|ptr_}} and {{rlpi|/#Data members|acc_}} for the values of {{rlpi|/#Data members|map_}} and {{rlpi|/#Data members|acc_}} after the invocation of this constructor.
* Let {{c|N}} be {{c|sizeof...(OtherIndexTypes)}}. {{cpp/enable_if|
:* {{c|(std::is_convertible_v&lt;OtherIndexTypes, index_type&gt; &amp;&amp; ...)}} is {{c|true}},
:* {{c|(std::is_nothrow_constructible&lt;index_type, OtherIndexTypes&gt; &amp;&amp; ...)}} is {{c|true}},
:* {{c|1=N == rank() {{!!}} N == rank_dynamic()}} is {{c|true}},
:* {{c|std::is_constructible_v&lt;mapping_type, extents_type&gt;}} is {{c|true}}, and
:* {{c|std::is_default_constructible_v&lt;accessor_type&gt;}} is {{c|true}}.}}

@3,4@ Constructs an mdspan over the underlying data referred by {{c|p}} with extents represented by pack {{c|exts}}. [[cpp/language/value_initialization|Value-initializes]] {{rlpi|/#Data members|acc_}}, [[cpp/language/direct_initialization|direct-non-list-initializes]] {{rlpi|/#Data members|ptr_}} with {{c|std::move(p)}} and {{rlpi|/#Data members|map_}} with {{c|extents_type(exts)}}.
* The behavior is undefined if {{range plain|0|map_.required_span_size()}} is not an accessible range of {{rlpi|/#Data members|ptr_}} and {{rlpi|/#Data members|acc_}} for the values of {{rlpi|/#Data members|map_}} and {{rlpi|/#Data members|acc_}} after the invocation of this constructor.
* {{cpp/enable_if|
:* {{c|std::is_convertible_v&lt;const OtherIndexTypes&amp;, index_type&gt;}} is {{c|true}},
:* {{c|std::is_nothrow_constructible&lt;index_type, const OtherIndexTypes&amp;&gt;}} is {{c|true}},
:* {{c|1=N == rank() {{!!}} N == rank_dynamic()}} is {{c|true}},
:* {{c|std::is_constructible_v&lt;mapping_type, extents_type&gt;}} is {{c|true}}, and
:* {{c|std::is_default_constructible_v&lt;accessor_type&gt;}} is {{c|true}}.}}

@5@ Constructs an mdspan over the underlying data referred by {{c|p}} with extents represented by {{c|ext}}. [[cpp/language/value_initialization|Value-initializes]] {{rlpi|/#Data members|acc_}}, [[cpp/language/direct_initialization|direct-non-list-initializes]] {{rlpi|/#Data members|ptr_}} with {{c|std::move(p)}} and {{rlpi|/#Data members|map_}} with {{c|exts}}.
* The behavior is undefined if {{range plain|0|map_.required_span_size()}} is not an accessible range of {{c|p}} and {{rlpi|/#Data members|acc_}} for the values of {{rlpi|/#Data members|map_}} and {{rlpi|/#Data members|acc_}} after the invocation of this constructor.
* {{cpp/enable_if|
:* {{c|std::is_constructible_v&lt;mapping_type, const mapping_type&amp;&gt;}} is {{c|true}}, and
:* {{c|std::is_default_constructible_v&lt;accessor_type&gt;}} is {{c|true}}.}}

@6@ Constructs an mdspan over the underlying data referred by {{c|p}} with layout mapping {{c|m}}. [[cpp/language/value_initialization|Value-initializes]] {{rlpi|/#Data members|acc_}}, [[cpp/language/direct_initialization|direct-non-list-initializes]] {{rlpi|/#Data members|ptr_}} with {{c|std::move(p)}} and {{rlpi|/#Data members|map_}} with {{c|m}}.
* The behavior is undefined if {{range plain|0|m.required_span_size()}} is not an accessible range of {{c|p}} and {{rlpi|/#Data members|acc_}} for the values of {{rlpi|/#Data members|acc_}} after the invocation of this constructor.
* {{cpp/enable_if|{{c|std::is_default_constructible_v&lt;accessor_type&gt;}} is {{c|true}}}}.

@7@ Constructs an mdspan over the underlying data referred by {{c|p}} with layout mapping {{c|m}} and accessor {{c|a}}. [[cpp/language/direct_initialization|Direct-non-list-initializes]] {{rlpi|/#Data members|ptr_}} with {{c|std::move(p)}}, {{rlpi|/#Data members|map_}} with {{c|m}} and {{rlpi|/#Data members|acc_}} with {{c|a}}.
* The behavior is undefined if {{range plain|0|m.required_span_size()}} is not an accessible range of {{c|p}} and {{c|a}} after the invocation of this constructor.

@8@ Converting constructor from another mdspan. [[cpp/language/direct_initialization|Direct-non-list-initializes]] {{rlpi|/#Data members|ptr_}} with {{c|other.ptr_}}, {{rlpi|/#Data members|map_}} with {{c|other.map_}} and {{rlpi|/#Data members|acc_}} with {{c|other.acc_}}.
* The behavior is undefined if :
:* {{range plain|0|map_.required_span_size()}} is not an accessible range of {{rlpi|/#Data members|ptr_}} and {{rlpi|/#Data members|acc_}} for the values of {{rlpi|/#Data members|map_}} and {{rlpi|/#Data members|acc_}} after the invocation of this constructor, or
:* for each rank index {{tt|r}} of {{c |extents_type}}, {{c multi
|   extents_type::static_extent(r) {{==}} std::dynamic_extent
|{{!!}} extents_type::static_extent(r) {{==}} other.extent(r)}} is {{c|false}}.
* {{cpp/enable_if|
:* {{c multi|std::is_constructible_v&lt;mapping_type, const OtherLayoutPolicy​::
            |    ​template mapping&lt;OtherExtents&gt;&amp;&gt;}} is {{c|true}}, and
:* {{c|std::is_constructible_v&lt;accessor_type, const OtherAccessor&amp;&gt;}} is {{c|true}}.}}
* The program is ill-formed if:
:* {{c multi|std::is_constructible_v&lt;data_handle_type, 
            |    const OtherAccessor​::​data_handle_type&amp;&gt;}} is {{c|false}}, or
:* {{c|std::is_constructible_v&lt;extents_type, OtherExtents&gt;}} is {{c|false}}.
* The expression inside {{c/core|explicit}} is equivalent to: {{c multi
|   !std::is_convertible_v&lt;const OtherLayoutPolicy::
|       template mapping&lt;OtherExtents&gt;&amp;, mapping_type&gt;
|{{!!}} !std::is_convertible_v&lt;const OtherAccessor&amp;, accessor_type&gt;
}}

@9@ [[cpp/language/copy constructor#Implicitly-defined copy constructor|Defaulted copy constructor]].

@10@ [[cpp/language/move constructor#Implicitly-defined move constructor|Defaulted move constructor]].

===Parameters===
{{par begin}}
{{par|p|a handle to the underlying data}}
{{par|m|a layout mapping}}
{{par|a|an accessor}}
{{par|ext|a {{rlpt|extents|std::extents}} object}}
{{par|exts|represents a multi-dimensional extents}}
{{par|other|another mdspan to convert from}}
{{par|rhs|another mdspan to copy or move from}}
{{par end}}

===Example===
{{example}}

===References===
{{ref std c++23}}
{{ref std|title=Constructors|id=mdspan.mdspan.cons|section=24.7.3.6.2}}
{{ref std end}}

===See also===
{{todo}}

{{langlinks|es|ja|ru|zh}}
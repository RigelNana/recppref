{{cpp/container/mdspan/title|''mapping-traits''}}
{{cpp/container/mdspan/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr bool is_unique() const;
}}
{{dcl|num=2|since=c++23|
constexpr bool is_exhaustive() const;
}}
{{dcl|num=3|since=c++23|
constexpr bool is_strided() const;
}}
{{dcl|num=4|since=c++23|
static constexpr bool is_always_unique();
}}
{{dcl|num=5|since=c++23|
static constexpr bool is_always_exhaustive();
}}
{{dcl|num=6|since=c++23|
static constexpr bool is_always_strided();
}}
{{dcl end}}

Checks if {{v|1-3}} the underlying layout mapping {{rlpt|/#Data member|''map_''}} or {{v|4-6}} its type {{tt|mapping_type}} models the semantics of {{named req|LayoutMapping}}'s predicate mapping traits.

@1-3@ Let {{tt|''func''}} be {{v|1}} {{tt|is_unique}}, {{v|2}} {{tt|is_exhaustive}}, or {{v|3}} {{tt|is_strided}}, then it's equivalent to {{c|return map_.func();}}.

@4-6@ Let {{tt|''func''}} be {{v|4}} {{tt|is_always_unique}}, {{v|5}} {{tt|is_always_exhaustive}}, or {{v|6}} {{tt|is_always_strided}}, then it's equivalent to {{c|return mapping_type::func();}}.

===Parameters===
(none)

===Return value===
See above.

===Example===
{{example}}

===See also===
{{todo}}

{{langlinks|de|es|ja|ru|zh}}
{{cpp/container/mdspan/extents/title|extents}}
{{cpp/container/mdspan/extents/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
constexpr extents() = default;
}}
{{dcl|num=2|since=c++23|1=
template&lt; class OtherIndexType, std::size_t... OtherExtents &gt;
constexpr explicit(/*see below*/)
    extents( const std::extents&lt;OtherIndexType, OtherExtents...&gt;&amp; other ) noexcept;
}}
{{dcl|num=3|since=c++23|1=
template&lt; class... OtherIndexTypes &gt;
constexpr explicit extents( OtherIndexTypes... exts ) noexcept;
}}
{{dcl|num=4|since=c++23|1=
template&lt; class OtherIndexType, std::size_t N &gt;
constexpr explicit(N != rank_dynamic())
    extents( std::span&lt;OtherIndexType, N&gt; exts ) noexcept;
}}
{{dcl|num=5|since=c++23|1=
template&lt; class OtherIndexType, std::size_t N &gt;
constexpr explicit(N != rank_dynamic())
    extents( const std::array&lt;OtherIndexType, N&gt;&amp; exts ) noexcept;
}}
{{dcl end}}

Construct an {{tt|extents}}. One can construct {{tt|extents}} from just dynamic extents, which are all the values getting stored, or from all the extents with a precondition.

@1@ Default constructor. Initializes all dynamic extents to zero.

@2@ Conversion from another {{tt|extents}} object. After construction, {{c|1=*this == other}} is {{c/core|true}}.
* The behavior is undefined if
:* {{c|1=other.extent(r) != static_extent(r)}} for any {{c|r}} for which {{c|static_extent(r)}} represents a static extent, or
:* {{c|other.extent(r)}} is not representable as a value of type {{c|IndexType}} for any rank value {{c|r}} in {{c|other}}.
* {{cpp/enable if|
:* {{c|1=sizeof...(OtherExtents) == rank()}} is {{c/core|true}}, and
:* {{c multi
|((OtherExtents {{==}} std::dynamic_extent {{!!}} Extents {{==}} std::dynamic_extent {{!!}}
|  OtherExtents {{==}} Extents) &amp;&amp; ...)}} is {{c/core|true}}.}}
* This constructor is {{c/core|explicit}} if
:* {{c|1=((Extents != std::dynamic_extent &amp;&amp; OtherExtents == std::dynamic_extent) {{!!}} ...)}} is {{c/core|true}}, or
:* {{c|std::numeric_limits&lt;IndexType&gt;::max() &lt; std::numeric_limits&lt;OtherIndexType&gt;::max()}} is {{c/core|true}}.

@3@ Let {{c|N}} be {{c|sizeof...(exts)}} and {{c|exts_arr}} be {{c|std::array&lt;IndexType, N&gt;{static_cast&lt;IndexType&gt;(std::move(exts))...}&lt;!----&gt;}}, equivalent to {{c|extents(exts_arr)}}.
* {{cpp/enable if|
:* {{c|(std::is_convertible_v&lt;OtherIndexTypes, IndexType&gt; &amp;&amp; ...)}} is {{c/core|true}},
:* {{c|(std::is_nothrow_constructible_v&lt;IndexType, OtherIndexTypes&gt; &amp;&amp; ...)}} is {{c/core|true}}, and
:* {{c|1=N == rank_dynamic() {{!!}} N == rank()}} is {{c/core|true}}.}}
* The behavior is undefined if
:* {{c|1=N != rank_dynamic()}} and {{c|exts_arr[r]}} is not equal to {{c|static_extent(r)}} for any {{c|r}} for which {{c|static_extent(r)}} represents a static extent, or
:* an element in {{c|exts}} is negative or not representable as a value of type {{c|IndexType}}.

@4,5@ If {{c|N}} equals {{c|rank_dynamic()}}, for all {{c|d}} in {{range|0|rank_dynamic()}}, [[cpp/language/direct initialization|direct-non-list-initializes]] {{box|{{rlpi|/#Data members|dynamic-extents}}{{c/core|[d]}}}} with {{c|std::as_const(exts[d])}}. Otherwise, for all {{c|d}} in {{range|0|rank_dynamic()}}, direct-non-list-initializes {{box|{{tti|dynamic-extents}}{{c/core|[d]}}}} with {{box|{{c/core|std::as_const(exts[}}{{rlpi|dynamic-index-inv}}{{c/core|(d)])}}}}.
* {{cpp/enable if|
:* {{c|std::is_convertible_v&lt;const OtherIndexType&amp;, IndexType&gt;}} is {{c/core|true}},
:* {{c|std::is_nothrow_constructible_v&lt;IndexType, const OtherIndexType&amp;&gt;}} is {{c/core|true}}, and
:* {{c|1=N == rank_dynamic() {{!!}} N == rank()}} is {{c/core|true}}.}}
* The behavior is undefined if
:* {{c|1=N != rank_dynamic()}} and {{c|exts[r]}} is not equal to {{c|static_extent(r)}} for any {{c|r}} for which {{c|static_extent(r)}} represents a static extent, or
:* {{c|exts[r]}} is negative or not representable as a value of type {{c|IndexType}} for any rank index {{c|r}}.

===Parameters===
{{par begin}}
{{par|other|another {{tt|extents}} to convert from}}
{{par|exts|represents the extents}}
{{par end}}

===Example===
{{example
|code=
|output=
}}

===See also===
{{dsc begin}}
{{dsc todo}}
{{dsc end}}
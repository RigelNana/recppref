{{cpp/title|extents|dextents|dims}}
{{cpp/container/mdspan/extents/navbar}}
{{dcl begin}}
{{dcl header|mdspan}}
{{dcl|num=1|since=c++23|1=
template&lt; class IndexType, std::size_t... Extents &gt;
class extents;
}}
{{dcl|num=2|since=c++23|1=
template&lt; class IndexType, std::size_t Rank &gt;
using dextents = /* see below */
}}
{{dcl|num=3|since=c++26|1=
template&lt; std::size_t Rank, class IndexType = std::size_t &gt;
using dims = std::dextents&lt;IndexType, Rank&gt;;
}}
{{dcl end}}

@1@ Represents a multidimensional index space of rank equal to {{c|sizeof...(Extents)}}. 
@2@ A convenient alias template for an all-dynamic {{tt|extents}}. Let {{tt|d}} denote {{c|std::dynamic_extent}}, each specialization of it {{c|dextents&lt;IndexType, Rank&gt;}} is equivalent to {{c|extents&lt;IndexType /*, d, d, ..., d*/&gt;}} (i.e. {{tti|d}} is repeated a total of {{tt|Rank}} times).
@3@ A convenient alias template for an all-dynamic {{tt|extents}} with {{co|std::size_t}} as the default index type.

Each specialization of {{tt|extents}} models {{lconcept|regular}} and is {{named req|TriviallyCopyable}}.

===Template parameters===
{{par begin}}
{{par|IndexType|the type of each non-dynamic {{tt|Extents}}. Shall be a signed or unsigned integer type. Otherwise, the program is ill-formed}}
{{par|Extents|represents extent (size of an integer interval) for each rank index. Each element of it is either equal to {{co|std::dynamic_extent}} (in this case, it represents a ''dynamic extent'' and the extent size will be determined dynamically), or is representable as a value of type {{tt|IndexType}} (then it represents a ''static extent'' and the extent size is just the value of it), or else the program is ill-formed}}
{{par|Rank|denotes the rank of an all-dynamic {{tt|extents}}}}
{{par end}}

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|index_type}}|{{tt|IndexType}}}}
{{dsc|{{tt|size_type}}|{{c/core|std::make_unsigned_t&lt;index_type&gt;}}}}
{{dsc|{{tt|rank_type}}|{{lc|std::size_t}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc expos mem obj|private=yes|spec={{c/core|std::array&lt;index_type, rank_dynamic()&gt;}}|dynamic-extents|An array which stores the size of each dynamic extents.}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/container/mdspan/extents/dsc constructor}}

{{dsc h2|Observers}}
{{dsc inc|cpp/container/mdspan/extents/dsc rank}}
{{dsc inc|cpp/container/mdspan/extents/dsc rank_dynamic}}
{{dsc inc|cpp/container/mdspan/extents/dsc static_extent}}
{{dsc inc|cpp/container/mdspan/extents/dsc extent}}

{{dsc h2|Helpers}}
{{dsc inc|cpp/container/mdspan/extents/dsc fwd-prod-of-extents}}
{{dsc inc|cpp/container/mdspan/extents/dsc rev-prod-of-extents}}
{{dsc inc|cpp/container/mdspan/extents/dsc index-cast}}
{{dsc inc|cpp/container/mdspan/extents/dsc dynamic-index}}
{{dsc inc|cpp/container/mdspan/extents/dsc dynamic-index-inv}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/container/mdspan/extents/dsc operator{{==}}}}
{{dsc end}}

==={{rl|deduction guides|Deduction guides}}{{mark c++23}}===

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc rank}}
{{dsc inc|cpp/types/dsc extent}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
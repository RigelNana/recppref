{{cpp/container/map/title|insert}}
{{cpp/container/map/navbar}}
{{dcl begin}}
{{dcl|num=1|
std::pair&lt;iterator, bool&gt; insert( const value_type&amp; value );
}}
{{dcl|num=2|since=c++11|
template&lt; class P &gt;
std::pair&lt;iterator, bool&gt; insert( P&amp;&amp; value );
}}
{{dcl|num=3|since=c++17|
std::pair&lt;iterator, bool&gt; insert( value_type&amp;&amp; value );
}}
{{dcl rev multi|num=4|until1=c++11|
|dcl1=
iterator insert( iterator pos, const value_type&amp; value );
|dcl2=
iterator insert( const_iterator pos, const value_type&amp; value );
}}
{{dcl|num=5|since=c++11|
template&lt; class P &gt;
iterator insert( const_iterator pos, P&amp;&amp; value );
}}
{{dcl|num=6|since=c++17|
iterator insert( const_iterator pos, value_type&amp;&amp; value );
}}
{{dcl|num=7|
template&lt; class InputIt &gt;
void insert( InputIt first, InputIt last );
}}
{{dcl|num=8|since=c++11|
void insert( std::initializer_list&lt;value_type&gt; ilist );
}}
{{dcl|num=9|since=c++17|
insert_return_type insert( node_type&amp;&amp; nh );
}}
{{dcl|num=10|since=c++17|
iterator insert( const_iterator pos, node_type&amp;&amp; nh );
}}
{{dcl end}}

Inserts element(s) into the container, if the container doesn't already contain an element with an equivalent key.

@1-3@ Inserts {{c|value}}.
@@ Overload {{v|2}} is equivalent to {{c|emplace(std::forward&lt;P&gt;(value))}} and only participates in overload resolution if {{c|1=std::is_constructible&lt;value_type, P&amp;&amp;&gt;::value == true}}.

@4-6@ Inserts {{c|value}} in the position as close as possible to the position just prior to {{c|pos}}.
@@ Overload {{v|5}} is equivalent to {{c|emplace_hint(hint, std::forward&lt;P&gt;(value))}} and only participates in overload resolution if {{c|1=std::is_constructible&lt;value_type, P&amp;&amp;&gt;::value == true}}.

@7@ Inserts elements from range {{range|first|last}}. {{cpp/container/lwg2488-note}}

@8@ Inserts elements from initializer list {{c|ilist}}. {{cpp/container/lwg2488-note}}

{{cpp/container/node handle insert desc|map|9|10}}

{{cpp/container/note iterator invalidation|map|insert}}
===Parameters===
{{par begin}}
{{par|pos|iterator to the position before which the new element will be inserted}}
{{par|value|element value to insert}}
{{par|first, last|range of elements to insert}}
{{par|ilist|initializer list to insert the values from}}
{{par|nh|a compatible [[cpp/container/node_handle|node handle]]}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par end}}

===Return value===
@1-3@ {{cpp/container/return iterator pair||pair}}

@4-6@ {{cpp/container/return iterator pair}}

@7,8@ (none)

{{cpp/container/node handle insert return|map|9|10}}

===Exceptions===
@1-6@ If an exception is thrown by any operation, the insertion has no effect.

{{todo|cases 7-10}}

===Complexity===
@1-3@ Logarithmic in the size of the container, {{tt|O(log(size()))}}.

@4-6@ Amortized constant if the insertion happens in the position just {{rev inl|until=c++11|''after''}}{{rev inl|since=c++11|''before''}} {{c|pos}}, logarithmic in the size of the container otherwise.

@7,8@ {{tt|O(N&amp;middot;log(size() + N))}}, where {{tt|N}} is the number of elements to insert.

@9@ Logarithmic in the size of the container, {{tt|O(log(size()))}}.

@10@ Amortized constant if the insertion happens in the position just ''before'' {{c|pos}}, logarithmic in the size of the container otherwise.

===Notes===
{{cpp/container/hinted insert note|4-6}}

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;string&gt;
using namespace std::literals;

template&lt;typename It&gt;
void print_insertion_status(It it, bool success)
{
    std::cout &lt;&lt; "Insertion of " &lt;&lt; it-&gt;first
              &lt;&lt; (success ? " succeeded\n" : " failed\n");
}

int main()
{
    std::map&lt;std::string, float&gt; heights;
    
    // Overload 3: insert from rvalue reference
    const auto [it_hinata, success] = heights.insert({"Hinata"s, 162.8});
    print_insertion_status(it_hinata, success);
    
    {
        // Overload 1: insert from lvalue reference
        const auto [it, success2] = heights.insert(*it_hinata);
        print_insertion_status(it, success2);
    }
    {
        // Overload 2: insert via forwarding to emplace
        const auto [it, success] = heights.insert(std::pair{"Kageyama", 180.6});
        print_insertion_status(it, success);
    }
    {
        // Overload 6: insert from rvalue reference with positional hint
        const std::size_t n = std::size(heights);
        const auto it = heights.insert(it_hinata, {"Azumane"s, 184.7});
        print_insertion_status(it, std::size(heights) != n);
    }
    {
        // Overload 4: insert from lvalue reference with positional hint
        const std::size_t n = std::size(heights);
        const auto it = heights.insert(it_hinata, *it_hinata);
        print_insertion_status(it, std::size(heights) != n);
    }
    {
        // Overload 5: insert via forwarding to emplace with positional hint
        const std::size_t n = std::size(heights);
        const auto it = heights.insert(it_hinata, std::pair{"Tsukishima", 188.3});
        print_insertion_status(it, std::size(heights) != n);
    }
    
    auto node_hinata = heights.extract(it_hinata);
    std::map&lt;std::string, float&gt; heights2;
    
    // Overload 7: insert from iterator range
    heights2.insert(std::begin(heights), std::end(heights));
    
    // Overload 8: insert from initializer_list
    heights2.insert({{"Kozume"s, 169.2}, {"Kuroo", 187.7}});

    // Overload 9: insert node
    const auto status = heights2.insert(std::move(node_hinata));
    print_insertion_status(status.position, status.inserted);
    
    node_hinata = heights2.extract(status.position);
    {
        // Overload 10: insert node with positional hint
        const std::size_t n = std::size(heights2);
        const auto it = heights2.insert(std::begin(heights2), std::move(node_hinata));
        print_insertion_status(it, std::size(heights2) != n);
    }

    // Print resulting map
    std::cout &lt;&lt; std::left &lt;&lt; '\n';
    for (const auto&amp; [name, height] : heights2)
        std::cout &lt;&lt; std::setw(10) &lt;&lt; name &lt;&lt; " {{!}} " &lt;&lt; height &lt;&lt; "cm\n";
}
|output=
Insertion of Hinata succeeded
Insertion of Hinata failed
Insertion of Kageyama succeeded
Insertion of Azumane succeeded
Insertion of Hinata failed
Insertion of Tsukishima succeeded
Insertion of Hinata succeeded
Insertion of Hinata succeeded

Azumane    {{!}} 184.7cm
Hinata     {{!}} 162.8cm
Kageyama   {{!}} 180.6cm
Kozume     {{!}} 169.2cm
Kuroo      {{!}} 187.7cm
Tsukishima {{!}} 188.3cm
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=233|std=C++98|before={{c|pos}} was just a hint, it could be totally ignored|after=the insertion is required to&lt;br&gt;be as close as possible to the&lt;br&gt;position just prior to {{c|pos}}}}
{{dr list item|wg=lwg|dr=264|std=C++98|before=the complexity of overload {{v|7}} was required to be linear if&lt;br&gt;the range {{range|first|last}} is sorted according to {{tt|Compare}}|after=removed the linear requirement&lt;br&gt;in this special case}}
{{dr list item|wg=lwg|dr=316|std=C++98|before=in the return value of overload {{v|1}}, it was not specified&lt;br&gt;which {{c/core|bool}} value indicates a successful insertion|after=success is&lt;br&gt;indicated by {{c|true}}}}
{{dr list item|wg=lwg|dr=2005|std=C++11|before=overloads {{v|2,5}} were poorly described|after=improved the description}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc emplace|map}}
{{dsc inc|cpp/container/dsc emplace_hint|map}}
{{dsc inc|cpp/container/dsc insert_or_assign|map}}
{{dsc inc|cpp/iterator/dsc inserter}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
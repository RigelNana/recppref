{{cpp/container/priority_queue/title|priority_queue}}
{{cpp/container/priority_queue/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|
priority_queue() : priority_queue(Compare(), Container()) {}
}}
{{dcl|num=2|since=c++11|
explicit priority_queue( const Compare&amp; compare )
    : priority_queue(compare, Container()) {}
}}
{{dcl rev multi|num=3
|dcl1=
explicit priority_queue( const Compare&amp; compare = Compare(),
                         const Container&amp; cont = Container() );
|since2=c++11|dcl2=
priority_queue( const Compare&amp; compare, const Container&amp; cont );
}}
{{dcl|num=4|since=c++11|
priority_queue( const Compare&amp; compare, Container&amp;&amp; cont );
}}
{{dcl|num=5|
priority_queue( const priority_queue&amp; other );
}}
{{dcl|num=6|since=c++11|
priority_queue( priority_queue&amp;&amp; other );
}}
{{dcl|num=7|since=c++11|1=
template&lt; class InputIt &gt;
priority_queue( InputIt first, InputIt last,
                const Compare&amp; compare = Compare() );
}}
{{dcl rev multi|num=8
|dcl1=
template&lt; class InputIt &gt;
priority_queue( InputIt first, InputIt last,
                const Compare&amp; compare = Compare(),
                const Container&amp; cont = Container() );
|since2=c++11|dcl2=
template&lt; class InputIt &gt;
priority_queue( InputIt first, InputIt last,
                const Compare&amp; compare, const Container&amp; cont );
}}
{{dcl|num=9|since=c++11|
template&lt; class InputIt &gt;
priority_queue( InputIt first, InputIt last,
                const Compare&amp; compare, Container&amp;&amp; cont );
}}
{{dcl|num=10|since=c++11|
template&lt; class Alloc &gt;
explicit priority_queue( const Alloc&amp; alloc );
}}
{{dcl|num=11|since=c++11|
template&lt; class Alloc &gt;
priority_queue( const Compare&amp; compare, const Alloc&amp; alloc );
}}
{{dcl|num=12|since=c++11|
template&lt; class Alloc &gt;
priority_queue( const Compare&amp; compare, const Container&amp; cont,
                const Alloc&amp; alloc );
}}
{{dcl|num=13|since=c++11|
template&lt; class Alloc &gt;
priority_queue( const Compare&amp; compare, Container&amp;&amp; cont,
                const Alloc&amp; alloc );
}}
{{dcl|num=14|since=c++11|
template&lt; class Alloc &gt;
priority_queue( const priority_queue&amp; other, const Alloc&amp; alloc );
}}
{{dcl|num=15|since=c++11|
template&lt; class Alloc &gt;
priority_queue( priority_queue&amp;&amp; other, const Alloc&amp; alloc );
}}
{{dcl|num=16|since=c++11|
template&lt; class InputIt, class Alloc &gt;
priority_queue( InputIt first, InputIt last, const Alloc&amp; alloc );
}}
{{dcl|num=17|since=c++11|
template&lt; class InputIt, class Alloc &gt;
priority_queue( InputIt first, InputIt last, const Compare&amp; compare,
                const Alloc&amp; alloc );
}}
{{dcl|num=18|since=c++11|
template&lt; class InputIt, class Alloc &gt;
priority_queue( InputIt first, InputIt last, const Compare&amp; compare,
                const Container&amp; cont, const Alloc&amp; alloc );
}}
{{dcl|num=19|since=c++11|
template&lt; class InputIt, class Alloc &gt;
priority_queue( InputIt first, InputIt last, const Compare&amp; compare,
                Container&amp;&amp; cont, const Alloc&amp; alloc );
}}
{{dcla|num=20|since=c++23|1=
template&lt; container-compatible-range&lt;T&gt; R &gt;
priority_queue( std::from_range_t, R&amp;&amp; rg,
                const Compare&amp; compare = Compare() );
}}
{{dcl|num=21|since=c++23|
template&lt; container-compatible-range&lt;T&gt; R, class Alloc &gt;
priority_queue( std::from_range_t, R&amp;&amp; rg,
                const Compare&amp; compare, const Alloc&amp; alloc );
}}
{{dcl|num=22|since=c++23|
template&lt; container-compatible-range&lt;T&gt; R, class Alloc &gt;
priority_queue( std::from_range_t, R&amp;&amp; rg, const Alloc&amp; alloc );
}}
{{dcl end}}

Constructs new underlying container of the container adaptor from a variety of data sources.

@1@ Default constructor. Value-initializes the comparator and the underlying container.

@2@ Copy-constructs the comparison functor {{c|comp}} with the contents of {{c|compare}}. Value-initializes the underlying container {{c|c}}.

@3@ Copy-constructs the underlying container {{c|c}} with the contents of {{c|cont}}. Copy-constructs the comparison functor {{c|comp}} with the contents of {{c|compare}}. Calls {{c|std::make_heap(c.begin(), c.end(), comp)}}. {{rev inl|until=c++11|This is also the default constructor.}}

@4@ Move-constructs the underlying container {{c|c}} with {{c|std::move(cont)}}. Copy-constructs the comparison functor {{c|comp}} with {{c|compare}}. Calls {{c|std::make_heap(c.begin(), c.end(), comp)}}.

@5@ [[cpp/language/copy constructor|Copy constructor]]. The underlying container is copy-constructed with {{c|other.c}}. The comparison functor is copy-constructed with {{c|other.comp}}. {{mark implicit}}

@6@ [[cpp/language/move constructor|Move constructor]]. The underlying container is constructed with {{c|std::move(other.c)}}. The comparison functor is constructed with {{c|std::move(other.comp)}}. {{mark implicit}}

@7-9@ Iterator-pair constructors. {{cpp/enable_if|{{tt|InputIt}} satisfies {{named req|InputIterator}}|plural=yes}}.

@7@ Constructs {{c|c}} as if by {{c|c(first, last)}} and {{c|comp}} from {{c|compare}}. Then calls {{c|std::make_heap(c.begin(), c.end(), comp);}}.

@8@ Copy-constructs {{c|c}} from {{c|cont}} and {{c|comp}} from {{c|compare}}. Then calls {{c|c.insert(c.end(), first, last);}}, and then calls {{c|std::make_heap(c.begin(), c.end(), comp);}}.

@9@ Move-constructs {{c|c}} from {{c|std::move(cont)}} and copy-constructs {{c|comp}} from {{c|compare}}. Then calls {{c|c.insert(c.end(), first, last);}}, and then calls {{c|std::make_heap(c.begin(), c.end(), comp);}}.

@10-15@ Allocator-extended constructors. {{cpp/enable_if|{{c|std::uses_allocator&lt;container_type, Alloc&gt;::value}} is {{c|true}}, that is, if the underlying container is an allocator-aware container (true for all standard library containers)|plural=yes}}.

@10@ Constructs the underlying container using {{c|alloc}} as allocator. Effectively calls {{c|c(alloc)}}. {{c|comp}} is value-initialized.

@11@ Constructs the underlying container using {{c|alloc}} as allocator. Effectively calls {{c|c(alloc)}}. Copy-constructs {{c|comp}} from {{c|compare}}.

@12@ Constructs the underlying container with the contents of {{c|cont}} and using {{c|alloc}} as allocator, as if by {{c|c(cont, alloc)}}. Copy-constructs {{c|comp}} from {{c|compare}}. Then calls {{c|std::make_heap(c.begin(), c.end(), comp)}}.

@13@ Constructs the underlying container with the contents of {{c|cont}} using move semantics while using {{c|alloc}} as allocator, as if by {{c|c(std::move(cont), alloc)}}. Copy-constructs {{c|comp}} from {{c|compare}}. Then calls {{c|std::make_heap(c.begin(), c.end(), comp)}}.

@14@ Constructs the underlying container with the contents of {{c|other.c}} and using {{c|alloc}} as allocator. Effectively calls {{c|c(other.c, alloc)}}. Copy-constructs {{c|comp}} from {{c|other.comp}}.

@15@ Constructs the underlying container with the contents of {{c|other}} using move semantics while utilizing {{c|alloc}} as allocator. Effectively calls {{c|c(std::move(other.c), alloc)}}. Move-constructs {{c|comp}} from {{c|other.comp}}.

@16-19@ Allocator-extended iterator-pair constructors. Same as {{v|7-9}}, except that {{c|alloc}} is used for constructing the underlying container. {{cpp/enable_if|{{c|std::uses_allocator&lt;container_type, Alloc&gt;::value}} is {{c|true}} and {{c|InputIt}} satisfies {{named req|InputIterator}}|plural=yes}}.

@20@ Initializes {{c|comp}} with {{c|compare}} and {{c|c}} with {{c|ranges::to&lt;Container&gt;(std::forward&lt;R&gt;(rg))}}. Then calls {{c|std::make_heap(c.begin(), c.end(), comp)}}.
@21@ Initializes {{c|comp}} with {{c|compare}} and {{c|c}} with {{c|ranges::to&lt;Container&gt;(std::forward&lt;R&gt;(rg), alloc)}}. Then calls {{c|std::make_heap(c.begin(), c.end(), comp)}}. 
@22@ Initializes {{c|c}} with {{c|ranges::to&lt;Container&gt;(std::forward&lt;R&gt;(rg), alloc)}}. Then calls {{c|std::make_heap(c.begin(), c.end(), comp)}}.

Note that how an implementation checks whether a type satisfies {{named req|InputIterator}} is unspecified, except that integral types are required to be rejected.

===Parameters===
{{par begin}}
{{par|alloc|allocator to use for all memory allocations of the underlying container}}
{{par|other|another container adaptor to be used as source to initialize the underlying container}}
{{par|cont|container to be used as source to initialize the underlying container}}
{{par|compare|the comparison function object to initialize the underlying comparison functor}}
{{par|first, last|a range {{range|first|last}} of elements to initialize with}}
{{par|rg|a {{ls|cpp/ranges/to#container compatible range}}, that is, an {{lconcept|input_range}} whose elements are convertible to {{tt|T}}}}
{{par hreq}}
{{par req named|Alloc|Allocator}}
{{par req named|Compare|Compare}}
{{par req named|Container|Container|notes=The allocator-extended constructors are only defined if {{tt|Container}} meets the requirements of {{named req|AllocatorAwareContainer}}.}}
{{par req named|InputIt|InputIterator}}
{{par end}}

===Complexity===
@1,2@ Constant.

@3,5,12@ {{mathjax-or|\(\scriptsize \mathcal{O}{(N)}\)|O(N)}} comparisons and {{mathjax-or|\(\scriptsize \mathcal{O}{(N)}\)|O(N)}} calls to the constructor of {{tt|value_type}}, where {{mathjax-or|\(\scriptsize N\)|N}} is {{c|cont.size()}}.

@4@ {{mathjax-or|\(\scriptsize \mathcal{O}{(N)}\)|O(N)}} comparisons, where {{mathjax-or|\(\scriptsize N\)|N}} is {{c|cont.size()}}.

@6@ Constant.

@7,16,17@ {{mathjax-or|\(\scriptsize \mathcal{O}{(M)}\)|O(M)}} comparisons, where {{mathjax-or|\(\scriptsize M\)|M}} is {{c|std::distance(first, last)}}.

@8,18@ {{mathjax-or|\(\scriptsize \mathcal{O}{(N + M)}\)|O(N + M)}} comparisons and {{mathjax-or|\(\scriptsize \mathcal{O}{(N)}\)|O(N)}} calls to the constructor of {{tt|value_type}}, where {{mathjax-or|\(\scriptsize N\)|N}} is {{c|cont.size()}} and {{mathjax-or|\(\scriptsize M\)|M}} is {{c|std::distance(first, last)}}.

@9@ {{mathjax-or|\(\scriptsize \mathcal{O}{(N + M)}\)|O(N + M)}} comparisons, where {{mathjax-or|\(\scriptsize N\)|N}} is {{c|cont.size()}} and {{mathjax-or|\(\scriptsize M\)|M}} is {{c|std::distance(first, last)}}.

@10,11@ Constant.

@13@ {{mathjax-or|\(\scriptsize \mathcal{O}{(N)}\)|O(N)}} comparisons, where {{mathjax-or|\(\scriptsize N\)|N}} is {{c|cont.size()}}.

@14@ Linear in size of {{c|other}}.

@15@ Constant if {{tt|Alloc}} compares equal to the allocator of {{c|other}}. Linear in size of {{c|other}} otherwise.

@19@ {{mathjax-or|\(\scriptsize \mathcal{O}{(N + M)}\)|O(N + M)}} comparisons and possibly {{mathjax-or|\(\scriptsize \mathcal{O}{(N)}\)|O(N)}} calls to the constructor of {{tt|value_type}} (present if {{tt|Alloc}} does not compare equal to the allocator of {{c|other}}), where {{mathjax-or|\(\scriptsize N\)|N}} is {{c|cont.size()}} and {{mathjax-or|\(\scriptsize M\)|M}} is {{c|std::distance(first, last)}}.

@20@ {{mathjax-or|\(\scriptsize \mathcal{O}{(N)}\)|O(N)}} comparisons and {{mathjax-or|\(\scriptsize \mathcal{O}{(N)}\)|O(N)}} calls to the constructor of {{tt|value_type}}, where {{mathjax-or|\(\scriptsize N\)|N}} is {{c|ranges::distance(rg)}}.

@21,22@ {{todo}}

===Notes===
{{feature test macro|__cpp_lib_containers_ranges|[[cpp/ranges/to#container compatible range|Ranges-aware]] construction and insertion; overloads {{vl|20-22}}|value=202202L|std=C++23}}

===Example===
{{example
|code=
#include &lt;complex&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;queue&gt;
#include &lt;vector&gt;

int main()
{
    std::priority_queue&lt;int&gt; pq1;
    pq1.push(5);
    std::cout &lt;&lt; "pq1.size() = " &lt;&lt; pq1.size() &lt;&lt; '\n';

    std::priority_queue&lt;int&gt; pq2 {pq1};
    std::cout &lt;&lt; "pq2.size() = " &lt;&lt; pq2.size() &lt;&lt; '\n';

    std::vector&lt;int&gt; vec {3, 1, 4, 1, 5};
    std::priority_queue&lt;int&gt; pq3 {std::less&lt;int&gt;(), vec};
    std::cout &lt;&lt; "pq3.size() = " &lt;&lt; pq3.size() &lt;&lt; '\n';

    for (std::cout &lt;&lt; "pq3 : "; !pq3.empty(); pq3.pop())
        std::cout &lt;&lt; pq3.top() &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    // Demo With Custom Comparator:

    using my_value_t = std::complex&lt;double&gt;;
    using my_container_t = std::vector&lt;my_value_t&gt;;

    auto my_comp = [](const my_value_t&amp; z1, const my_value_t&amp; z2)
    {
        return z2.real() &lt; z1.real();
    };

    std::priority_queue&lt;my_value_t,
                        my_container_t,
                        decltype(my_comp)&gt; pq4{my_comp};

    using namespace std::complex_literals;
    pq4.push(5.0 + 1i);
    pq4.push(3.0 + 2i);
    pq4.push(7.0 + 3i);

    for (; !pq4.empty(); pq4.pop())
    {
        const auto&amp; z = pq4.top();
        std::cout &lt;&lt; "pq4.top() = " &lt;&lt; z &lt;&lt; '\n';
    }

    // TODO: C++23 range-aware ctors
}
|output=
pq1.size() = 1
pq2.size() = 1
pq3.size() = 5
pq3 : 5 4 3 1 1
pq4.top() = (3,2)
pq4.top() = (5,1)
pq4.top() = (7,3)
}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P0935R0|std=C++11|before=default constructor and constructor {{v|4}} were explicit|after=made implicit}}
{{dr list item|wg=lwg|dr=3506|std=C++11|before=allocator-extended iterator-pair constructors were missing|after=added}}
{{dr list item|wg=lwg|dr=3522|std=C++11|before=constraints on iterator-pair constructors were missing|after=added}}
{{dr list item|wg=lwg|dr=3529|std=C++11|before=construction from a pair of iterators called {{tt|insert}}|after=constructs the container from them}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc operator{{=}}|priority_queue}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
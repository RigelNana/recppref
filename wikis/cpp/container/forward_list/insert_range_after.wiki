{{cpp/container/forward_list/title|insert_range_after}}
{{cpp/container/forward_list/navbar}}

{{ddcl|since=c++23|
template&lt; container-compatible-range&lt;T&gt; R &gt;
iterator insert_range_after( const_iterator pos, R&amp;&amp; rg );
}}

Inserts, in non-reversing order, the copies of elements in {{c|rg}} before {{c|pos}}. Each iterator in the range {{c|rg}} is dereferenced exactly once.

{{c|pos}} must be any dereferenceable iterator in the range {{range/core|{{rlpf|begin}}|{{rlpf|end}}}} or the {{rlpf|before_begin}} iterator (thus, {{rlpf|end}} is not a valid argument for {{c|pos}}).

No iterators or references become invalidated.

The behavior is undefined if {{c|rg}} overlaps with the container.

===Parameters===
{{par begin}}
{{par|pos|an iterator after which the content will be inserted}}
{{par|rg|a {{ls|cpp/ranges/to#container compatible range}}, that is, an {{lconcept|input_range}} whose elements are convertible to {{tt|T}}}}
{{par hreq}}
{{par req|{{tt|T}} must be {{named req|EmplaceConstructible}} into {{tt|forward_list}} from {{c|*ranges::begin(rg)}}. Otherwise, the behavior is undefined.}}
{{par end}}

===Return value===
An {{rlpt|/#Member types|iterator}} that points at the copy of the last element inserted into {{tt|forward_list}} or at {{c|pos}} if {{c|rg}} is empty.

===Complexity===
Linear in size of {{c|rg}}.

===Notes===
{{feature test macro|__cpp_lib_containers_ranges|[[cpp/ranges/to#container compatible range|Ranges-aware]] construction and insertion|value=202202L|std=C++23}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;forward_list&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main()
{
    auto container = std::forward_list{1, 2, 3, 4};
    auto pos = std::next(container.cbegin());
    assert(*pos == 2);
    const auto rg = std::vector{-1, -2, -3};

#ifdef __cpp_lib_containers_ranges
    container.insert_range_after(pos, rg);
#else
    container.insert_after(pos, rg.cbegin(), rg.cend());
#endif
    
    assert(std::ranges::equal(container, std::vector{1, 2, -1, -2, -3, 3, 4}));
}
}}

===See also===
{{dsc begin}}
{{cpp/container/dsc prepend_range|forward_list}}
{{cpp/container/dsc insert_after|forward_list}}
{{cpp/container/dsc emplace_after|forward_list}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
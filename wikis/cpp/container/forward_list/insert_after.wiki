{{cpp/container/forward_list/title|insert_after}}
{{cpp/container/forward_list/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|
iterator insert_after( const_iterator pos, const T&amp; value );
}}
{{dcl|num=2|since=c++11|
iterator insert_after( const_iterator pos, T&amp;&amp; value );
}}
{{dcl|num=3|since=c++11|
iterator insert_after( const_iterator pos, size_type count, const T&amp; value );
}}
{{dcl|num=4|since=c++11|
template&lt; class InputIt &gt;
iterator insert_after( const_iterator pos, InputIt first, InputIt last );
}}
{{dcl|num=5|since=c++11|
iterator insert_after( const_iterator pos, std::initializer_list&lt;T&gt; ilist );
}}
{{dcl end}}

Inserts elements after the specified position in the container.

@1,2@ Inserts {{c|value}} after the element pointed to by {{c|pos}}.

@3@ Inserts {{c|count}} copies of the {{c|value}} after the element pointed to by {{c|pos}}.

@4@ Inserts elements from range {{range|first|last}} after the element pointed to by {{c|pos}}.
The behavior is undefined if {{c|first}} and {{c|last}} are iterators into {{c|*this}}.

@5@ Inserts elements from initializer list {{c|ilist}}.

{{cpp/container/note_iterator_invalidation|forward_list|insert_after}}

===Parameters===
{{par begin}}
{{par|pos|iterator after which the content will be inserted}}
{{par|value|element value to insert}}
{{par|count|number of copies to insert}}
{{par|first, last|the range of elements to insert}}
{{par|ilist|initializer list to insert the values from}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par end}}

===Return value===
@1,2@ Iterator to the inserted element.
@3@ Iterator to the last element inserted, or {{c|pos}} if {{c|1=count == 0}}.
@4@ Iterator to the last element inserted, or {{c|pos}} if {{c|1=first == last}}.
@5@ Iterator to the last element inserted, or {{c|pos}} if {{c|ilist}} is empty.

===Exceptions===
{{cpp/strong exception safety guarantee|plural=yes}}

===Complexity===
@1,2@ Constant.
@3@ Linear in {{c|count}}.
@4@ Linear in {{c|std::distance(first, last)}}.
@5@ Linear in {{c|ilist.size()}}.

===Example===
{{example
|code=
#include &lt;forward_list&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
                                                                                
void print(const std::forward_list&lt;int&gt;&amp; list)
{
    std::cout &lt;&lt; "list: {";
    for (char comma[3] = {'\0', ' ', '\0'}; int i : list)
    {
        std::cout &lt;&lt; comma &lt;&lt; i;
        comma[0] = ',';
    }
    std::cout &lt;&lt; "}\n";
}
                                                                                
int main()
{
    std::forward_list&lt;int&gt; ints{1, 2, 3, 4, 5};
    print(ints);
                                                                                
    // insert_after (2)
    auto beginIt = ints.begin();
    ints.insert_after(beginIt, -6);
    print(ints);

    // insert_after (3)
    auto anotherIt = beginIt;
    ++anotherIt;
    anotherIt = ints.insert_after(anotherIt, 2, -7);
    print(ints);

    // insert_after (4)
    const std::vector&lt;int&gt; v = {-8, -9, -10};
    anotherIt = ints.insert_after(anotherIt, v.cbegin(), v.cend());
    print(ints);
                       
    // insert_after (5)
    ints.insert_after(anotherIt, {-11, -12, -13, -14});
    print(ints);
}
|output=
list: {1, 2, 3, 4, 5}
list: {1, -6, 2, 3, 4, 5}
list: {1, -6, -7, -7, 2, 3, 4, 5}
list: {1, -6, -7, -7, -8, -9, -10, 2, 3, 4, 5}
list: {1, -6, -7, -7, -8, -9, -10, -11, -12, -13, -14, 2, 3, 4, 5}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc emplace after|forward_list}}
{{dsc inc|cpp/container/dsc push_front|forward_list}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
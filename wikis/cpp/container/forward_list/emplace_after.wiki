{{cpp/container/forward_list/title|emplace_after}}
{{cpp/container/forward_list/navbar}}
{{ddcl|since=c++11|
template&lt; class... Args &gt;
iterator emplace_after( const_iterator pos, Args&amp;&amp;... args );
}}

Inserts a new element into a position after the specified position in the container. The element is constructed in-place, i.e. no copy or move operations are performed. The constructor of the element is called with exactly the same arguments, as supplied to the function.

{{cpp/container/note_iterator_invalidation|forward_list|emplace_after}}

===Parameters===
{{par begin}}
{{par|pos|iterator after which the new element will be constructed}}
{{par|args|arguments to forward to the constructor of the element}}
{{par end}}

===Return value===
Iterator to the new element.

===Complexity===
Constant.

===Exceptions===
{{cpp/strong exception safety guarantee}}

===Example===
{{example
|The example demonstrates a canonical filling of a single-linked list in natural (as opposed to reverse) order.
|code=
#include &lt;forward_list&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

struct Sum
{
    std::string remark;
    int sum;

    Sum(std::string remark, int sum)
        : remark{std::move(remark)}, sum{sum} {}

    void print() const
    {
        std::cout &lt;&lt; remark &lt;&lt; " = " &lt;&lt; sum &lt;&lt; '\n';
    }
};

int main()
{
    std::forward_list&lt;Sum&gt; list;

    auto iter = list.before_begin();
    std::string str{"1"};

    for (int i{1}, sum{1}; i != 10; sum += i)
    {
        iter = list.emplace_after(iter, str, sum);
        ++i;
        str += " + " + std::to_string(i);
    }

    for (const Sum&amp; s : list)
        s.print();
}
|output=
1 = 1
1 + 2 = 3
1 + 2 + 3 = 6
1 + 2 + 3 + 4 = 10
1 + 2 + 3 + 4 + 5 = 15
1 + 2 + 3 + 4 + 5 + 6 = 21
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28
1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 = 36
1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc insert_after|forward_list}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
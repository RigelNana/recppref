{{cpp/title|multiset}}
{{cpp/container/multiset/navbar}}
{{dcl begin}}
{{dcl header|set}}
{{dcl|num=1|1=
template&lt;
    class Key,
    class Compare = std::less&lt;Key&gt;,
    class Allocator = std::allocator&lt;Key&gt;
&gt; class multiset;
}}
{{dcl|num=2|since=c++17|1=
namespace pmr {
    template&lt;
        class Key,
        class Compare = std::less&lt;Key&gt;
    &gt; using multiset = std::multiset&lt;Key, Compare, std::pmr::polymorphic_allocator&lt;Key&gt;&gt;;
}
}}
{{dcl end}}

{{tt|std::multiset}} is an associative container that contains a sorted set of objects of type Key. Unlike set, multiple keys with equivalent values are allowed. Sorting is done using the key comparison function Compare. Search, insertion, and removal operations have logarithmic complexity.

Everywhere the standard library uses the {{named req|Compare}} requirements, equivalence is determined by using the equivalence relation as described on {{named req|Compare}}. In imprecise terms, two objects {{c|a}} and {{c|b}} are considered equivalent if neither compares less than the other: {{c|!comp(a, b) &amp;&amp; !comp(b, a)}}.

{{rrev|since=c++11|
The order of the elements that compare equivalent is the order of insertion and does not change.}}

{{tt|std::multiset}} meets the requirements of {{named req|Container}}, {{named req|AllocatorAwareContainer}}, {{named req|AssociativeContainer}} and {{named req|ReversibleContainer}}.

===Template parameters===
{{todo|Add descriptions of the template parameters.}}

===Member types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc inc|cpp/container/dsc key_type|multiset}}
{{dsc inc|cpp/container/dsc value_type|multiset}}
{{dsc inc|cpp/container/dsc size_type|multiset}}
{{dsc inc|cpp/container/dsc difference_type|multiset}}
{{dsc inc|cpp/container/dsc key_compare|multiset}}
{{dsc inc|cpp/container/dsc value_compare2|multiset}}
{{dsc inc|cpp/container/dsc allocator_type|multiset}}
{{dsc inc|cpp/container/dsc reference|multiset}}
{{dsc inc|cpp/container/dsc const_reference|multiset}}
{{dsc inc|cpp/container/dsc pointer|multiset}}
{{dsc inc|cpp/container/dsc const_pointer|multiset}}
{{dsc inc|cpp/container/dsc iterator|multiset}}
{{dsc inc|cpp/container/dsc const_iterator|multiset}}
{{dsc inc|cpp/container/dsc reverse_iterator|multiset}}
{{dsc inc|cpp/container/dsc const_reverse_iterator|multiset}}
{{dsc inc|cpp/container/dsc node_type|multiset}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/container/dsc constructor|multiset}}
{{dsc inc|cpp/container/dsc destructor|multiset}}
{{dsc inc|cpp/container/dsc operator{{=}}|multiset}}
{{dsc inc|cpp/container/dsc get_allocator|multiset}}

{{dsc h2|Iterators}}
{{dsc inc|cpp/container/dsc begin|multiset}}
{{dsc inc|cpp/container/dsc end|multiset}}
{{dsc inc|cpp/container/dsc rbegin|multiset}}
{{dsc inc|cpp/container/dsc rend|multiset}}

{{dsc h2|Capacity}}
{{dsc inc|cpp/container/dsc empty|multiset}}
{{dsc inc|cpp/container/dsc size|multiset}}
{{dsc inc|cpp/container/dsc max_size|multiset}}

{{dsc h2|Modifiers}}
{{dsc inc|cpp/container/dsc clear|multiset}}
{{dsc inc|cpp/container/dsc insert|multiset}}
{{dsc inc|cpp/container/dsc insert_range|multiset}}
{{dsc inc|cpp/container/dsc emplace|multiset}}
{{dsc inc|cpp/container/dsc emplace_hint|multiset}}
{{dsc inc|cpp/container/dsc erase|multiset}}
{{dsc inc|cpp/container/dsc swap|multiset}}
{{dsc inc|cpp/container/dsc extract|multiset}}
{{dsc inc|cpp/container/dsc merge|multiset}}

{{dsc h2|Lookup}}
{{dsc inc|cpp/container/dsc count|multiset}}
{{dsc inc|cpp/container/dsc find|multiset}}
{{dsc inc|cpp/container/dsc contains|multiset}}
{{dsc inc|cpp/container/dsc equal_range|multiset}}
{{dsc inc|cpp/container/dsc lower_bound|multiset}}
{{dsc inc|cpp/container/dsc upper_bound|multiset}}

{{dsc h2|Observers}}
{{dsc inc|cpp/container/dsc key_comp|multiset}}
{{dsc inc|cpp/container/dsc value_comp|multiset}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/container/dsc operator_cmp|multiset}}
{{dsc inc|cpp/container/dsc swap2|multiset}}
{{dsc inc|cpp/container/dsc erase_if|multiset}}
{{dsc end}}

{{rrev|since=c++17|
==={{rl|deduction guides|Deduction guides}}===
}}

===Notes===
{{cpp/container/assoc_note}}

{{ftm begin|std=1|comment=1}}
{{ftm|__cpp_lib_containers_ranges|value=202202L|std=C++23|Ranges construction and insertion for containers}}
{{ftm end}}

===Example===
{{example}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=103|std=C++98|before=iterator allows modification of keys|after=iterator made constant}}
{{dr list item|wg=lwg|dr=230|std=C++98|before={{tt|Key}} was not required to be {{named req|CopyConstructible}}&lt;br&gt;(a key of type {{tt|Key}} might not be able to be constructed)|after={{tt|Key}} is also required to&lt;br&gt;be {{named req|CopyConstructible}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc set}}
{{dsc inc|cpp/container/dsc unordered_multiset}}
{{dsc inc|cpp/container/dsc flat_multiset}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
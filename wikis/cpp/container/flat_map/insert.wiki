{{cpp/container/flat_map/title|insert}}
{{cpp/container/flat_map/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
std::pair&lt;iterator, bool&gt; insert( const value_type&amp; value );
}}
{{dcl|num=2|since=c++23|
std::pair&lt;iterator, bool&gt; insert( value_type&amp;&amp; value );
}}
{{dcl|num=3|since=c++23|
iterator insert( const_iterator pos, const value_type&amp; value );
}}
{{dcl|num=4|since=c++23|
iterator insert( const_iterator pos, value_type&amp;&amp; value );
}}
{{dcl|num=5|since=c++23|
template&lt; class P &gt;
std::pair&lt;iterator, bool&gt; insert( P&amp;&amp; x );
}}
{{dcl|num=6|since=c++23|
template&lt; class P &gt;
iterator insert( const_iterator pos, P&amp;&amp; x );
}}
{{dcl|num=7|since=c++23|
template&lt; class InputIt &gt;
void insert( InputIt first, InputIt last );
}}
{{dcl|num=8|since=c++23|
template&lt; class InputIt &gt;
void insert( std::sorted_unique_t, InputIt first, InputIt last );
}}
{{dcl|num=9|since=c++23|
void insert( std::initializer_list&lt;key_type&gt; ilist );
}}
{{dcl|num=10|since=c++23|
void insert( std::sorted_unique_t s, std::initializer_list&lt;key_type&gt; ilist );
}}
{{dcl end}}

Inserts element(s) into the container, if the container does not already contain an element with an equivalent key.

@1@ Inserts {{c|value}}. Equivalent to {{c|return emplace(value);}}.

@2@ Inserts {{c|value}}. Equivalent to {{c|return emplace(std::move(value));}}.

@3@ Inserts {{c|value}} in the position as close as possible to the position just prior to {{c|pos}}. Equivalent to {{c|return emplace_hint(pos, value);}}.

@4@ Inserts {{c|value}} in the position as close as possible to the position just prior to {{c|pos}}. Equivalent to {{c|return emplace_hint(pos, std::move(value));}}.

@5@ If {{c|*this}} already contains an element which transparently compares ''equivalent'' to {{c|x}}, does nothing. Otherwise, inserts {{tt|x}} into {{c|*this}} as if by {{c|emplace(std::forward&lt;P&gt;(x));}}. {{cpp/enable if|{{c|std::is_constructible_v&lt;pair&lt;key_type, mapped_type&gt;, P&gt;}} is {{c|true}}}}.

@6@ If {{c|*this}} already contains an element which transparently compares ''equivalent'' to {{c|x}}, does nothing. Otherwise, inserts {{tt|x}} into {{c|*this}} in the position as close as possible to the position just prior to {{c|pos}}. Equivalent to {{c|return emplace_hint(position, std::forward&lt;P&gt;(x));}}. {{cpp/enable if|{{c|std::is_constructible_v&lt;pair&lt;key_type, mapped_type&gt;, P&gt;}} is {{c|true}}}}.

@7@ Inserts elements from range {{range|first|last}} as if performing the following operations sequentially:
# Adds elements to {{rlpt|/#Member objects|c}} as if by&lt;br&gt;{{c multi|
for (; first !{{=}} last; ++first)|
{|
    value_type value {{=}} *first;|
    c.keys.insert(c.keys.end(), std::move(value.first));|
    c.values.insert(c.values.end(), std::move(value.second));|
}
}}
# Sorts the range of newly inserted elements with respect to {{rlpt|value_comp}}.
# Merges the resulting sorted range and the sorted range of pre-existing elements into a single sorted range.
# Erases the duplicate elements as if by:&lt;br&gt;{{c multi|
auto zv {{=}} std::views::zip(c.keys, c.values);|
auto it {{=}} ranges::unique(zv, key_equiv(compare)).begin();|
auto dist {{=}} std::distance(zv.begin(), it);|
c.keys.erase(c.keys.begin() + dist, c.keys.end());|
c.values.erase(c.values.begin() + dist, c.values.end());
}}
@@ May allocate memory during the in-place merge operation.
@@ {{cpp/container/lwg2488-note}}

@8@ Inserts elements from range {{range|first|last}} as if performing the following operations sequentially:
# Adds elements to {{rlpt|/#Member objects|c}} as if by&lt;br&gt;{{c multi|
for (; first !{{=}} last; ++first)|
{|
    value_type value {{=}} *first;|
    c.keys.insert(c.keys.end(), std::move(value.first));|
    c.values.insert(c.values.end(), std::move(value.second));|
}
}}
# Merges the sorted range of newly added elements and the sorted range of pre-existing elements into a single sorted range.
# Erases the duplicate elements as if by:&lt;br&gt;{{c multi|
auto zv {{=}} std::views::zip(c.keys, c.values);|
auto it {{=}} ranges::unique(zv, key_equiv(compare)).begin();|
auto dist {{=}} std::distance(zv.begin(), it);|
c.keys.erase(c.keys.begin() + dist, c.keys.end());|
c.values.erase(c.values.begin() + dist, c.values.end());|
}}
@@ May allocate memory during the in-place merge operation.
@@ {{cpp/container/lwg2488-note}}

@9@ Inserts elements from initializer list {{c|ilist}}. Equivalent to {{c|insert(ilist.begin(), ilist.end());}}.
@@ {{cpp/container/lwg2488-note}}

@10@ Inserts elements from initializer list {{c|ilist}}. Equivalent to {{c|insert(s, ilist.begin(), ilist.end());}}.
@@ {{cpp/container/lwg2488-note}}

{{cpp/container/note iterator invalidation|flat_map|insert}}

===Parameters===
{{par begin}}
{{par|pos|an iterator to the position before which the new element will be inserted}}
{{par|value|an element value to insert}}
{{par|first, last|a range of elements to insert}}
{{par|ilist|an initializer list to insert the values from}}
{{par|x|a value of any type that can be transparently compared with a key}}
{{par|s|a disambiguation tag indicating that the input sequence is sorted (with respect to {{rlpt|value_comp|value_comp()}}) and contains only unique elements}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par end}}

===Return value===
@1,2@ {{cpp/container/return iterator pair||pair}}
@3,4@ {{cpp/container/return iterator pair}}
@5@ {{cpp/container/return iterator pair||pair}}
@6@ {{cpp/container/return iterator pair}}
@7-10@ (none)

===Exceptions===
@1-6@ If an exception is thrown by any operation, the insertion has no effect.

{{todo|cases 7-10}} &lt;!-- no guarantee --&gt;

===Complexity===
@1-6@ Linear in {{rlpt|size|size()}}.
@7@ {{c|N + M·log(M)}}, where {{tt|N}} is the {{rlpt|size|size()}} before the operation and {{tt|M}} is {{c|std::distance(first, last)}}.
@8@ Linear in {{rlpt|size|size()}}.
@9@ {{c|N + M·log(M)}}, where {{tt|N}} is the {{rlpt|size|size()}} before the operation and {{tt|M}} is {{c|ilist.size()}}.
@10@ Linear in {{tt|N}}, where {{tt|N}} is {{rlpt|size|size()}} after the operation.

===Notes===
{{cpp/container/hinted insert note|3,4,6}}

===Example===
{{example
|code=
|output=
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc emplace|flat_map}}
{{dsc inc|cpp/container/dsc emplace_hint|flat_map}}
{{dsc inc|cpp/container/dsc insert_or_assign|flat_map}}
{{dsc inc|cpp/iterator/dsc inserter}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
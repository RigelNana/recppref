{{cpp/container/flat_map/title|insert_or_assign}}
{{cpp/container/flat_map/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
template&lt; class M &gt;
std::pair&lt;iterator, bool&gt; insert_or_assign( const key_type&amp; k, M&amp;&amp; obj );
}}
{{dcl|num=2|since=c++23|
template&lt; class M &gt;
std::pair&lt;iterator, bool&gt; insert_or_assign( key_type&amp;&amp; k, M&amp;&amp; obj );
}}
{{dcla|num=3|since=c++23|
template&lt; class K, class M &gt;
std::pair&lt;iterator, bool&gt; insert_or_assign( K&amp;&amp; k, M&amp;&amp; obj );
}}
{{dcl|num=4|since=c++23|
template&lt; class M &gt;
iterator insert_or_assign( const_iterator hint, const key_type&amp; k, M&amp;&amp; obj );
}}
{{dcl|num=5|since=c++23|
template&lt; class M &gt;
iterator insert_or_assign( const_iterator hint, key_type&amp;&amp; k, M&amp;&amp; obj );
}}
{{dcla|num=6|since=c++23|
template&lt; class K, class M &gt;
iterator insert_or_assign( const_iterator hint, K&amp;&amp; k, M&amp;&amp; obj );
}}
{{dcl end}}

@1,2@ If a key equivalent to {{c|k}} already exists in the container, assigns {{c|std::forward&lt;M&gt;(obj)}} to the {{rlpt|/#Member types|mapped_type}} corresponding to the key {{c|k}}. If the key does not exist, inserts the new value as if by
* {{v|1,2}} {{c|try_emplace(std::forward&lt;decltype(k)&gt;(k), std::forward&lt;M&gt;(obj))}},
* {{v|4,5}} {{c|try_emplace(hint, std::forward&lt;decltype(k)&gt;(k), std::forward&lt;M&gt;(obj))}}.

@@ The program is ill-formed if either {{c|std::is_assignable_v&lt;mapped_type&amp;, M&gt;}} or {{c|std::is_constructible_v&lt;mapped_type, M&gt;}} is {{c|false}}.

@3,6@ If a key equivalent to {{c|k}} already exists in the container, assigns {{c|std::forward&lt;M&gt;(obj)}} to the {{rlpt|/#Member types|mapped_type}} corresponding to the key {{c|k}}. Otherwise, equivalent to
* {{v|3}} {{c|try_emplace(std::forward&lt;K&gt;(k), std::forward&lt;M&gt;(obj))}},
* {{v|6}} {{c|try_emplace(hint, std::forward&lt;K&gt;(k), std::forward&lt;M&gt;(obj))}}.

@@ {{cpp/precondition|1=The conversion from {{c|k}} into {{tt|key_type}} must construct an object {{c|u}}, for which {{c|1=find(k) == find(u)}} is {{c|true}}.}}

@@ {{cpp/enable if|:
* The qualified-id {{tt|Compare::is_transparent}} is valid and denotes a type.
* {{c|std::is_constructible_v&lt;key_type, K&gt;}} is {{c|true}}.
* {{c|std::is_assignable_v&lt;mapped_type&amp;, M&gt;}} is {{c|true}}.
* {{c|std::is_constructible_v&lt;mapped_type, M&gt;}} is {{c|true}}.
|plural=yes}}
&lt;!----&gt;
{{cpp/container/note iterator invalidation|flat_map|insert_or_assign}}

===Parameters===
{{par begin}}
{{par|k|the key used both to look up and to insert if not found}}
{{par|hint|iterator to the position before which the new element will be inserted}}
{{par|obj|the value to insert or assign}}
{{par end}}

===Return value===
@1-3@ The {{c/core|bool}} component is {{c|true}} if the insertion took place and {{c|false}} if the assignment took place. The iterator component is pointing at the element that was inserted or updated.
@4-6@ Iterator pointing at the element that was inserted or updated.

===Complexity===
@1-3@ Same as for {{rlpt|emplace}}.
@4-6@ Same as for {{rlpt|emplace_hint}}.

===Notes===
{{tt|insert_or_assign}} returns more information than {{rlpt|operator_at|operator}}{{c/core|[]}} and does not require default-constructibility of the mapped type.

===Example===
{{example
|code=
#include &lt;flat_map&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

void print_node(const auto&amp; node)
{
    std::cout &lt;&lt; '[' &lt;&lt; node.first &lt;&lt; "] = " &lt;&lt; node.second &lt;&lt; '\n';
}

void print_result(auto const&amp; pair)
{
    std::cout &lt;&lt; (pair.second ? "inserted: " : "assigned: ");
    print_node(*pair.first);
}

int main()
{
    std::flat_map&lt;std::string, std::string&gt; map;

    print_result(map.insert_or_assign("a", "apple"));
    print_result(map.insert_or_assign("b", "banana"));
    print_result(map.insert_or_assign("c", "cherry"));
    print_result(map.insert_or_assign("c", "clementine"));

    for (const auto&amp; node : map)
        print_node(node);
}
|output=
inserted: [a] = apple
inserted: [b] = banana
inserted: [c] = cherry
assigned: [c] = clementine
[a] = apple
[b] = banana
[c] = clementine
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc operator_at|flat_map}}
{{dsc inc|cpp/container/dsc at|flat_map}}
{{dsc inc|cpp/container/dsc insert|flat_map}}
{{dsc inc|cpp/container/dsc emplace|flat_map}}
{{dsc inc|cpp/container/dsc try_emplace|flat_map}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
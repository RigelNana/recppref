{{cpp/container/multiset/title|insert}}
{{cpp/container/multiset/navbar}}
{{dcl begin}}
{{dcl|num=1|
iterator insert( const value_type&amp; value );
}}
{{dcl|num=2|since=c++11|
iterator insert( value_type&amp;&amp; value );
}}
{{dcl rev multi|num=3|until1=c++11
|dcl1=
iterator insert( iterator pos, const value_type&amp; value );
|dcl2=
iterator insert( const_iterator pos, const value_type&amp; value );
}}
{{dcl|num=4|since=c++11|
iterator insert( const_iterator pos, value_type&amp;&amp; value );
}}
{{dcl|num=5|
template&lt; class InputIt &gt;
void insert( InputIt first, InputIt last );
}}
{{dcl|num=6|since=c++11|
void insert( std::initializer_list&lt;value_type&gt; ilist );
}}
{{dcl|num=7|since=c++17|
iterator insert( node_type&amp;&amp; nh );
}}
{{dcl|num=8|since=c++17|
iterator insert( const_iterator pos, node_type&amp;&amp; nh );
}}
{{dcl end}}

Inserts element(s) into the container. The order of the remaining equivalent elements is preserved.

@1,2@ Inserts {{c|value}}. If the container has elements with equivalent key, inserts at the upper bound of that range.

@3,4@ Inserts {{c|value}} in the position as close as possible to the position just prior to {{c|pos}}.

@5@ Inserts elements from range {{range|first|last}}.

@6@ Inserts elements from initializer list {{c|ilist}}.

{{cpp/container/node handle insert desc|multiset|7|8}}

{{cpp/container/note iterator invalidation|multiset|insert}}

===Parameters===
{{par begin}}
{{par|pos|iterator to the position before which the new element will be inserted}}
{{par|value|element value to insert}}
{{par|first, last|range of elements to insert}}
{{par|ilist|initializer list to insert the values from}}
{{par|nh|a compatible [[cpp/container/node_handle|node handle]]}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par end}}

===Return value===
@1-4@ An iterator to the inserted element.

@5,6@ (none)

{{cpp/container/node handle insert return|multiset|7|8}}

===Exceptions===
@1-4,7,8@ If an exception is thrown by any operation, the insertion has no effect.

@5,6@ No exception safety guarantee.

===Complexity===
@1,2,7@ {{tt|O(log(size()))}}

@3,4,8@ Amortized constant if the insertion happens in the position just before {{c|pos}}, {{tt|O(log(size()))}} otherwise.

@5,6@ {{tt|O(N&amp;middot;log(size() + N))}}, where {{tt|N}} is the number of elements to insert.

===Example===
{{example}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=233|std=C++98|before={{c|pos}} was just a hint, it could be totally ignored|after=the insertion is required to&lt;br&gt;be as close as possible to the&lt;br&gt;position just prior to {{c|pos}}}}
{{dr list item|wg=lwg|dr=264|std=C++98|before=the complexity of overload {{v|5}} was required to be linear if&lt;br&gt;the range {{tt|[first, last)}} is sorted according to {{tt|Compare}}|after=removed the linear requirement&lt;br&gt;in this special case}}
{{dr list item|wg=lwg|dr=371|std=C++98|before=the order of equivalent elements was not guaranteed to be preserved|after=required to be preserved}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc emplace|multiset}}
{{dsc inc|cpp/container/dsc emplace_hint|multiset}}
{{dsc inc|cpp/iterator/dsc inserter}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
{{cpp/title|queue}}
{{cpp/container/queue/navbar}}
{{ddcl|header=queue|1=
template&lt;
    class T,
    class Container = std::deque&lt;T&gt;
&gt; class queue;
}}

The {{tt|std::queue}} class template is a [[cpp/container#Container adaptors|container adaptor]] that gives the functionality of a {{enwiki|Queue (abstract data type)|queue}} - specifically, a FIFO (first-in, first-out) data structure.

The class template acts as a wrapper to the underlying container - only a specific set of functions is provided. The queue pushes the elements on the back of the underlying container and pops them from the front.

===Template parameters===
{{par begin}}
{{par|T|The type of the stored elements. The program is ill-formed if {{tt|T}} is not the same type as {{tt|Container::value_type}}.}}
{{par|Container|The type of the underlying container to use to store the elements. The container must satisfy the requirements of {{named req|SequenceContainer}}. Additionally, it must provide the following functions with the [[cpp/named req/SequenceContainer#Optional operations|usual semantics]]:
* {{tt|back()}}, e.g., {{lc|std::deque::back()}},
* {{tt|front()}}, e.g. {{lc|std::list::front()}},
* {{tt|push_back()}}, e.g., {{lc|std::deque::push_back()}},
* {{tt|pop_front()}}, e.g., {{lc|std::list::pop_front()}}.

The standard containers {{lc|std::deque}} and {{lc|std::list}} satisfy these requirements.
}}{{par end}}

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc inc|cpp/container/dsc container_type|queue}}
{{dsc inc|cpp/container/dsc value_type|queue}}
{{dsc inc|cpp/container/dsc size_type|queue}}
{{dsc inc|cpp/container/dsc reference|queue}}
{{dsc inc|cpp/container/dsc const_reference|queue}}
{{dsc end}}

===Member objects===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc inc|cpp/container/dsc c|queue}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/container/dsc constructor|queue}}
{{dsc inc|cpp/container/dsc destructor|queue}}
{{dsc inc|cpp/container/dsc operator{{=}}|queue}}

{{dsc h2|Element access}}
{{dsc inc|cpp/container/dsc front|queue}}
{{dsc inc|cpp/container/dsc back|queue}}

{{dsc h2|Capacity}}
{{dsc inc|cpp/container/dsc empty|queue}}
{{dsc inc|cpp/container/dsc size|queue}}

{{dsc h2|Modifiers}}
{{dsc inc|cpp/container/dsc push|queue}}
{{dsc inc|cpp/container/dsc push_range|queue}}
{{dsc inc|cpp/container/dsc emplace|queue}}
{{dsc inc|cpp/container/dsc pop|queue}}
{{dsc inc|cpp/container/dsc swap|queue}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/container/dsc operator_cmp|queue}}
{{dsc inc|cpp/container/dsc swap2|queue}}
{{dsc end}}

===Helper classes===
{{dsc begin}}
{{dsc inc|cpp/container/dsc uses_allocator|queue}}
{{dsc inc|cpp/container/dsc adaptor_formatter|queue}}
{{dsc end}}

{{rrev|since=c++17|
==={{rl|deduction guides|Deduction guides}}===
}}

===Notes===
{{ftm begin|std=1|comment=1}}
{{ftm|__cpp_lib_containers_ranges|value=202202L|std=C++23|Ranges construction and insertion for containers}}
{{ftm end}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;queue&gt;

int main()
{
    std::queue&lt;int&gt; q;

    q.push(0); // back pushes 0
    q.push(1); // q = 0 1
    q.push(2); // q = 0 1 2
    q.push(3); // q = 0 1 2 3

    assert(q.front() == 0);
    assert(q.back() == 3);
    assert(q.size() == 4);

    q.pop(); // removes the front element, 0
    assert(q.size() == 3);

    // Print and remove all elements. Note that std::queue does not
    // support begin()/end(), so a range-for-loop cannot be used.
    std::cout &lt;&lt; "q: ";
    for (; !q.empty(); q.pop())
        std::cout &lt;&lt; q.front() &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    assert(q.size() == 0);
}
|output=
q: 1 2 3
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=307|std=C++98|before={{tt|std::queue}} did not support containers using proxy&lt;br&gt;reference types&lt;ref&gt;Such as containers similar to {{ltt|cpp/container/vector bool|std::vector&lt;bool&gt;}} with additional support of {{tt|pop_front()}}. The resolution of this DR&lt;br&gt;added support of {{ltt|cpp/container/vector bool|std::vector&lt;bool&gt;}} for {{lc|std::stack}} and {{lc|std::priority_queue}}. The changes involving {{tt|std::queue}}&lt;br&gt;are for maintaining consistency.&lt;/ref&gt; in place of ({{tt|const}}) {{tt|value_type&amp;}}|after=supported}}
{{dr list item|wg=lwg|dr=2566|std=C++98|before=Missing the requirement for {{tt|Container::value_type}} |after=ill-formed if {{tt|T}} is not the same type as {{tt|Container::value_type}}}}
{{dr list end}}
&lt;references/&gt;

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc priority_queue}}
{{dsc inc|cpp/container/dsc deque}}
{{dsc inc|cpp/container/dsc list}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
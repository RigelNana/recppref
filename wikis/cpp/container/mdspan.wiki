{{cpp/title|mdspan}}
{{cpp/container/mdspan/navbar}}
{{ddcl|header=mdspan|since=c++23|1=
template&lt;
    class T,
    class Extents,
    class LayoutPolicy = std::layout_right,
    class AccessorPolicy = std::default_accessor&lt;T&gt;
&gt; class mdspan;
}}

{{tt|std::mdspan}} is a multidimensional array view that maps a multidimensional index to an element of the array. The mapping and element access policies are configurable, and the underlying array need not be contiguous or even exist in memory at all.

Each specialization {{tt|MDS}} of {{tt|mdspan}} models {{lconcept|copyable}} and satisfies:
:* {{c|std::is_nothrow_move_constructible_v&lt;MDS&gt;}} is {{c|true}},
:* {{c|std::is_nothrow_move_assignable_v&lt;MDS&gt;}} is {{c|true}}, and
:* {{c|std::is_nothrow_swappable_v&lt;MDS&gt;}} is {{c|true}}.
A specialization of {{tt|mdspan}} is a {{named req|TriviallyCopyable}} type if its {{tt|accessor_type}}, {{tt|mapping_type}} and {{tt|data_handle_type}} are {{named req|TriviallyCopyable}} types.

===Template parameters===
{{par begin}}
{{par|T|element type; a complete object type that is neither an abstract class type nor an array type.}}
{{par|Extents|specifies number of dimensions, their sizes, and which are known at compile time. Must be a specialization of {{lc|std::extents}}.}}
{{par|LayoutPolicy|specifies how to convert multidimensional index to underlying 1D index (column-major 3D array, symmetric triangular 2D matrix, etc). Must satisfy the requirements of {{named req|LayoutMappingPolicy}}.}}
{{par|AccessorPolicy|specifies how to convert underlying 1D index to a reference to T. Must satisfy the constraint that {{c|std::is_same_v&lt;T, typename AccessorPolicy​::​element_type&gt;}} is {{c|true}}. Must satisfy the requirements of {{named req|AccessorPolicy}}.}}
{{par end}}

===Member types===
{{dsc begin}}
{{dsc hitem|Member|Definition}}
{{dsc|{{tt|extents_type}}|{{tt|Extents}}}}
{{dsc|{{tt|layout_type}}|{{tt|LayoutPolicy}}}}
{{dsc|{{tt|accessor_type}}|{{tt|AccessorPolicy}}}}
{{dsc|{{tt|mapping_type}}|{{c/core|LayoutPolicy::mapping&lt;Extents&gt;}}}}
{{dsc|{{tt|element_type}}|{{tt|T}}}}
{{dsc|{{tt|value_type}}|{{c/core|std::remove_cv_t&lt;T&gt;}}}}
{{dsc|{{tt|index_type}}|{{c/core|Extents::index_type}}}}
{{dsc|{{tt|size_type}}|{{c/core|Extents::size_type}}}}
{{dsc|{{tt|rank_type}}|{{c/core|Extents::rank_type}}}}
{{dsc|{{tt|data_handle_type}}|{{c/core|AccessorPolicy::data_handle_type}}}}
{{dsc|{{tt|reference}}|{{c/core|AccessorPolicy::reference}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member|Description}}
{{dsc expos mem obj|spec={{tt|accessor_type}}|acc_|id=acc|private=yes|the accessor}}
{{dsc expos mem obj|spec={{tt|mapping_type}}|map_|id=map|private=yes|the layout mapping}}
{{dsc expos mem obj|spec={{tt|data_handle_type}}|ptr_|id=ptr|private=yes|the underlying data handle}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/container/mdspan/dsc constructor}}
{{dsc inc|cpp/container/mdspan/dsc operator{{=}}}}

{{dsc h2|Element access}}
{{dsc inc|cpp/container/mdspan/dsc operator_at}}

{{dsc h2|Observers}}
{{dsc inc|cpp/container/mdspan/dsc rank}}
{{dsc inc|cpp/container/mdspan/dsc rank_dynamic}}
{{dsc inc|cpp/container/mdspan/dsc static_extent}}
{{dsc inc|cpp/container/mdspan/dsc extent}}

{{dsc inc|cpp/container/mdspan/dsc size}}
{{dsc inc|cpp/container/mdspan/dsc empty}}
{{dsc inc|cpp/container/mdspan/dsc stride}}
{{dsc inc|cpp/container/mdspan/dsc extents_mfun}}&lt;!--dsc extents is for std::extents--&gt;
{{dsc inc|cpp/container/mdspan/dsc data_handle}}
{{dsc inc|cpp/container/mdspan/dsc mapping}}
{{dsc inc|cpp/container/mdspan/dsc accessor}}

{{dsc inc|cpp/container/mdspan/dsc is_unique}}
{{dsc inc|cpp/container/mdspan/dsc is_exhaustive}}
{{dsc inc|cpp/container/mdspan/dsc is_strided}}
{{dsc inc|cpp/container/mdspan/dsc is_always_unique}}
{{dsc inc|cpp/container/mdspan/dsc is_always_exhaustive}}
{{dsc inc|cpp/container/mdspan/dsc is_always_strided}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/container/mdspan/dsc swap}}
{{dsc h2|Subviews}}
{{dsc inc|cpp/container/mdspan/dsc submdspan}}
{{dsc inc|cpp/container/mdspan/dsc submdspan_extents}}
{{dsc end}}

===Helper types and templates===
{{dsc begin}}
{{dsc inc|cpp/container/mdspan/dsc extents}}
{{dsc inc|cpp/container/mdspan/dsc dextents}}
{{dsc inc|cpp/container/mdspan/dsc default_accessor}}
{{dsc inc|cpp/container/mdspan/dsc aligned_accessor}}
{{dsc h2|Layout mapping policies}}
{{dsc inc|cpp/container/mdspan/dsc layout_left}}
{{dsc inc|cpp/container/mdspan/dsc layout_right}}
{{dsc inc|cpp/container/mdspan/dsc layout_stride}}
{{dsc inc|cpp/container/mdspan/dsc layout_left_padded}}
{{dsc inc|cpp/container/mdspan/dsc layout_right_padded}}
{{dsc h2|Subviews helpers}}
{{dsc inc|cpp/container/mdspan/dsc full_extent}}
{{dsc inc|cpp/container/mdspan/dsc strided_slice}}
{{dsc inc|cpp/container/mdspan/dsc submdspan_mapping_result}}
{{dsc end}}

==={{rl|deduction guides|Deduction guides}}===

===Notes===
{{ftm begin|sort=yes}}
{{ftm|value=202207L|std=C++23|__cpp_lib_mdspan|{{tt|std::mdspan}}}}
{{ftm|value=202306L|std=C++26|__cpp_lib_submdspan|rowspan="2"|{{lc|std::submdspan}}}}
{{ftm|value=202403L|std=C++26|-|{{tt|std::mdspan}} padded layouts}}
{{ftm|value=202411L|std=C++26|__cpp_lib_aligned_accessor|{{lc|std::aligned_accessor}}}}
{{ftm end}}

===Example===
{{example
|Can be previewed on [https://godbolt.org/z/6WqGonPTn Compiler Explorer].
|code=
#include &lt;cstddef&gt;
#include &lt;mdspan&gt;
#include &lt;print&gt;
#include &lt;vector&gt;

int main()
{
    std::vector v{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};

    // View data as contiguous memory representing 2 rows of 6 ints each
    auto ms2 = std::mdspan(v.data(), 2, 6);
    // View the same data as a 3D array 2 x 3 x 2
    auto ms3 = std::mdspan(v.data(), 2, 3, 2);

    // Write data using 2D view
    for (std::size_t i = 0; i != ms2.extent(0); i++)
        for (std::size_t j = 0; j != ms2.extent(1); j++)
            ms2[i, j] = i * 1000 + j;

    // Read back using 3D view
    for (std::size_t i = 0; i != ms3.extent(0); i++)
    {
        std::println("slice @ i = {}", i);
        for (std::size_t j = 0; j != ms3.extent(1); j++)
        {
            for (std::size_t k = 0; k != ms3.extent(2); k++)
                std::print("{} ", ms3[i, j, k]);
            std::println("");
        }
    }
}
|output=
slice @ i = 0
0 1
2 3
4 5
slice @ i = 1
1000 1001
1002 1003
1004 1005
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc span}}
{{dsc inc|cpp/numeric/dsc valarray}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
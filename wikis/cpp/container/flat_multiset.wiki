{{cpp/title|flat_multiset}}
{{cpp/container/flat_multiset/navbar}}
{{ddcl|header=flat_set|since=c++23|1=
template&lt;
    class Key,
    class Compare = std::less&lt;Key&gt;,
    class KeyContainer = std::vector&lt;Key&gt;
&gt; class flat_multiset;
}}

The flat multiset is a [[cpp/container#Container adaptors|container adaptor]] that gives the functionality of an associative container that stores a sorted set of objects of type {{tt|Key}}. Unlike {{lc|std::flat_set}}, multiple keys with equivalent values are allowed. Sorting is done using the key comparison function {{tt|Compare}}.

The class template {{tt|flat_multiset}} acts as a wrapper to the underlying sorted container passed as object of type {{tt|KeyContainer}}.

Everywhere the standard library uses the {{named req|Compare}} requirements, uniqueness is determined by using the equivalence relation. Informally, two objects {{c|a}} and {{c|b}} are considered equivalent if neither compares less than the other: {{c|!comp(a, b) &amp;&amp; !comp(b, a)}}.

&lt;!--For std::multimap the following is true (what about flat_multiset?): The order of the key pairs whose keys compare equivalent is the order of insertion and does not change.--&gt;

{{tt|std::flat_multiset}} meets the requirements of {{named req|Container}}, {{named req|ReversibleContainer}}, {{lsd|cpp/named_req/Container#Optional container requirements}}, and all requirements of {{named req|AssociativeContainer}} (including logarithmic search complexity), except that:
* requirements related to nodes are not applicable,
* iterator invalidation requirements differ, &lt;!--TODO: describe iterator/pointer invalidation properties, maybe per each function --&gt;
* the complexity of insertion and erasure operations is linear.

A flat multiset supports most {{named req|AssociativeContainer}}'s operations that use equal keys.

===Iterator invalidation===
{{todo}} &lt;!-- TODO: see e.g. [[cpp/container/unordered_set#Iterator invalidation]] as a basis --&gt;

===Template parameters===
{{par begin}}
{{par|Key|The type of the stored elements. The program is ill-formed if {{tt|Key}} is not the same type as {{tt|KeyContainer::value_type}}.}}
{{par|Compare|A {{named req|Compare}} type providing a strict weak ordering.
{{par|KeyContainer|The type of the underlying {{named req|SequenceContainer}} to store the elements. The iterators of such container should satisfy {{named req|RandomAccessIterator}} or model {{lconcept|random_access_iterator}}.

The standard containers {{lc|std::vector}} and {{lc|std::deque}} satisfy these requirements.}}}}{{par end}}
&lt;!----&gt;
===Member types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc inc|cpp/container/dsc container_type|flat_multiset}}
{{dsc inc|cpp/container/dsc key_type|flat_multiset}}
{{dsc inc|cpp/container/dsc value_type|flat_multiset}}
{{dsc inc|cpp/container/dsc key_compare|flat_multiset}}
{{dsc inc|cpp/container/dsc value_compare2|flat_multiset}}
{{dsc inc|cpp/container/dsc reference|flat_multiset}}
{{dsc inc|cpp/container/dsc const_reference|flat_multiset}}
{{dsc inc|cpp/container/dsc size_type|flat_multiset}}
{{dsc inc|cpp/container/dsc difference_type|flat_multiset}}
{{dsc inc|cpp/container/dsc iterator|flat_multiset}}
{{dsc inc|cpp/container/dsc const_iterator|flat_multiset}}
{{dsc inc|cpp/container/dsc reverse_iterator|flat_multiset}}
{{dsc inc|cpp/container/dsc const_reverse_iterator|flat_multiset}}
{{dsc end}}

===Member objects===
{{dsc begin}}
{{dsc hitem|Member|Description}}
{{dsc expos mem obj|c|id=c|private=yes|spec={{tt|container_type}}|the adapted container}}
{{dsc expos mem obj|compare|id=compare|private=yes|spec={{tt|key_compare}}|the comparison function object}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/container/dsc constructor|flat_multiset}}
{{dsc mem dtor|nolink=true|notes={{mark implicit}}|destroys every element of the container adaptor}}
{{dsc inc|cpp/container/dsc operator{{=}}|flat_multiset}}

{{dsc h2|Iterators}}
{{dsc inc|cpp/container/dsc begin|flat_multiset}}
{{dsc inc|cpp/container/dsc end|flat_multiset}}
{{dsc inc|cpp/container/dsc rbegin|flat_multiset}}
{{dsc inc|cpp/container/dsc rend|flat_multiset}}

{{dsc h2|Capacity}}
{{dsc inc|cpp/container/dsc empty|flat_multiset}}
{{dsc inc|cpp/container/dsc size|flat_multiset}}
{{dsc inc|cpp/container/dsc max_size|flat_multiset}}

{{dsc h2|Modifiers}}
{{dsc inc|cpp/container/dsc emplace|flat_multiset}}
{{dsc inc|cpp/container/dsc emplace_hint|flat_multiset}}
{{dsc inc|cpp/container/dsc insert|flat_multiset}}
{{dsc inc|cpp/container/dsc insert_range|flat_multiset}}
{{dsc inc|cpp/container/dsc extract|flat_multiset}}
{{dsc inc|cpp/container/dsc replace|flat_multiset}}
{{dsc inc|cpp/container/dsc erase|flat_multiset}}
{{dsc inc|cpp/container/dsc swap|flat_multiset}}
{{dsc inc|cpp/container/dsc clear|flat_multiset}}

{{dsc h2|Lookup}}
{{dsc inc|cpp/container/dsc find|flat_multiset}}
{{dsc inc|cpp/container/dsc count|flat_multiset}}
{{dsc inc|cpp/container/dsc contains|flat_multiset}}
{{dsc inc|cpp/container/dsc lower_bound|flat_multiset}}
{{dsc inc|cpp/container/dsc upper_bound|flat_multiset}}
{{dsc inc|cpp/container/dsc equal_range|flat_multiset}}

{{dsc h2|Observers}}
{{dsc inc|cpp/container/dsc key_comp|flat_multiset}}
{{dsc inc|cpp/container/dsc value_comp|flat_multiset}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/container/dsc operator_cmp|flat_multiset}}
{{dsc inc|cpp/container/dsc swap2|flat_multiset}}
{{dsc inc|cpp/container/dsc erase_if|flat_multiset}}
{{dsc end}}

===Helper classes===
{{dsc begin}}
{{dsc inc|cpp/container/dsc uses_allocator|flat_multiset}}
{{dsc end}}

===Tags===
{{dsc begin}}
{{dsc inc|cpp/container/dsc sorted_equivalent}}
{{dsc end}}

==={{rl|deduction guides|Deduction guides}}===

===Notes===
{{cpp/container/assoc_note}}&lt;!-- TODO: is this relevant to flat_multiset? --&gt;

&lt;!-- TODO: maybe this lyrics is unnecessary:
Some advantages of flat multiset over other standard [[associative containers]] are:
* Potentially faster lookup (even though search operations have logarithmic complexity).
* Much faster iteration: {{lt|cpp/iterator/random access iterator}}s instead of {{lt|cpp/iterator/bidirectional iterator}}s.
* Less memory consumption for small objects (and for big objects if {{c|KeyContainer::shrink_to_fit()}} is available).
* Better cache performance (depending on {{tt|KeyContainer}}, keys are stored in a contiguous block(s) of memory).

Some disadvantages of flat multiset are:
* Non-stable iterators (iterators are invalidated when inserting and erasing elements).
* Non-copyable and non-movable type values can not be stored.
* Weaker exception safety (copy/move constructors can throw when shifting values in erasures and insertions).
* Slower (i.e. linear) insertion and erasure, especially for non-movable types.
--&gt;

{{ftm begin}}
{{ftm|__cpp_lib_flat_set|value=202207L|std=C++23|{{lc|std::flat_set}} and {{tt|std::flat_multiset}}}}
{{ftm end}}

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/container/dsc flat_set}}
{{dsc inc|cpp/container/dsc multiset}}
{{dsc inc|cpp/container/dsc unordered_multiset}}
{{dsc end}}

{{langlinks|cs|de|es|fr|it|ja|pl|pt|ru|zh}}

&lt;!--TODO: N4950::24.6.12 says:
TODO: add this to the "Exceptions" sections of appropriate member functions:
6. If any member function in 24.6.12.2 exits via an exception, the invariant is restored.
[Note 2 : This can result in the flat_multiset’s being emptied. — end note].
--&gt;

&lt;!--TODO: N4950::24.6.12.9 says:
TODO: add to constructors:
9. The effect of calling a constructor or member function that takes a sorted_equivalent_t argument with a range that is not sorted with respect to key_comp(), or that contains equal elements, is undefined.
--&gt;

&lt;!-- TODO: also complete [[cpp/container#Iterator invalidation]] table for flat_* adaptors --&gt;
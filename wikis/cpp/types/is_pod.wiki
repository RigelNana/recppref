{{cpp/types/traits/is|1=is_pod
|deprecated=c++20
|description=If {{tt|T}} is a [[cpp/named req/PODType|POD type]] ("plain old data type"), provides the member constant {{tt|value}} equal to {{c|true}}. For any other type, {{tt|value}} is {{c|false}}.

If {{c/core|std::remove_all_extents_t&lt;T&gt;}} is an incomplete type and not (possibly cv-qualified) {{c/core|void}}, the behavior is undefined.
|inherit_desc= {{tt|T}} is a POD type 
}}

===Example===
{{example
|code=
#include &lt;type_traits&gt;

struct A { int m; };
static_assert(std::is_pod_v&lt;A&gt; == true);

class B: public A { int m; };
static_assert(std::is_pod_v&lt;B&gt; == false);

struct C { virtual void foo(); };
static_assert(std::is_pod_v&lt;C&gt; == false);

int main() {}
|output=
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2015|std=C++11|before={{tt|T}} could be an array of incomplete&lt;br&gt;class type with unknown bound|after=the behavior is&lt;br&gt;undefined in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_standard_layout}}
{{dsc inc|cpp/types/dsc is_trivial}}
{{dsc inc|cpp/types/dsc is_scalar}}
{{dsc end}}

===External links===
{{eli|[https://stackoverflow.com/questions/48225673 Why is {{tt|std::is_pod}} deprecated in C++20?] &amp;mdash; StackOverflow}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
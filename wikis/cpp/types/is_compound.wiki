{{cpp/types/traits/is|1=is_compound
|description= 
If {{tt|T}} is a compound type (that is, array, function, object pointer, function pointer, member object pointer, member function pointer, reference, class, union, or enumeration, including any cv-qualified variants), provides the member constant {{tt|value}} equal {{c|true}}. For any other type, {{tt|value}} is {{c|false}}.
|inherit_desc={{tt|T}} is a compound type
}}

===Notes===
Compound types are the types that are constructed from fundamental types. Any C++ type is either fundamental or compound.

===Possible implementation===
{{eq fun
|1=
template&lt;class T&gt;
struct is_compound : std::integral_constant&lt;bool, !std::is_fundamental&lt;T&gt;::value&gt; {};
}}

===Example===
{{example
|code=
#include &lt;type_traits&gt;
#include &lt;iostream&gt;

static_assert(not std::is_compound_v&lt;int&gt;);
static_assert(std::is_compound_v&lt;int*&gt;);
static_assert(std::is_compound_v&lt;int&amp;&gt;);

void f();
static_assert(std::is_compound_v&lt;decltype(f)&gt;);
static_assert(std::is_compound_v&lt;decltype(&amp;f)&gt;);

static_assert(std::is_compound_v&lt;char[100]&gt;);

class C {};
static_assert(std::is_compound_v&lt;C&gt;);

union U {};
static_assert(std::is_compound_v&lt;U&gt;);

enum struct E { e };
static_assert(std::is_compound_v&lt;E&gt;);
static_assert(std::is_compound_v&lt;decltype(E::e)&gt;);

struct S
{
    int i : 8;
    int j;
    void foo();
};
static_assert(not std::is_compound_v&lt;decltype(S::i)&gt;);
static_assert(not std::is_compound_v&lt;decltype(S::j)&gt;);
static_assert(std::is_compound_v&lt;decltype(&amp;S::j)&gt;);
static_assert(std::is_compound_v&lt;decltype(&amp;S::foo)&gt;);

int main()
{
    std::cout &lt;&lt; "All checks have passed\n";
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_fundamental}}
{{dsc inc|cpp/types/dsc is_scalar}}
{{dsc inc|cpp/types/dsc is_object}}
{{dsc inc|cpp/types/dsc is_array}}

{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
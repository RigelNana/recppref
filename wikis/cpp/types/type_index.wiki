{{cpp/title|type_index}}
{{cpp/types/type_index/navbar}}

{{dcl begin}}
{{dcl header|typeindex}}
{{dcl|since=c++11|
class type_index;
}}
{{dcl end}}

The {{tt|type_index}} class is a wrapper class around a {{lc|std::type_info}} object, that can be used as index in associative and unordered associative containers. The relationship with {{tt|type_info}} object is maintained through a pointer, therefore {{tt|type_index}} is {{named req|CopyConstructible}} and {{named req|CopyAssignable}}.

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/types/type_index/dsc constructor}}
{{dsc mem dtor|nolink=true|notes={{mark implicit}}|destroys the {{tt|type_index}} object}}
{{dsc mem fun|operator{{=}}|nolink=true|notes={{mark implicit}}|assigns a {{tt|type_index}} object}}
{{dsc inc|cpp/types/type_index/dsc operator_cmp}}
{{dsc inc|cpp/types/type_index/dsc hash_code}}
{{dsc inc|cpp/types/type_index/dsc name}}
{{dsc end}}

===Helper classes===
{{dsc begin}}
{{dsc inc|cpp/types/type_index/dsc hash}}
{{dsc end}}

===Example===
{{example
|The following program is an example of an efficient type-value mapping.
|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;string&gt;
#include &lt;typeindex&gt;
#include &lt;typeinfo&gt;
#include &lt;unordered_map&gt;

struct A
{
    virtual ~A() {}
};

struct B : A {};
struct C : A {};

int main()
{
    std::unordered_map&lt;std::type_index, std::string&gt; type_names;

    type_names[std::type_index(typeid(int))] = "int";
    type_names[std::type_index(typeid(double))] = "double";
    type_names[std::type_index(typeid(A))] = "A";
    type_names[std::type_index(typeid(B))] = "B";
    type_names[std::type_index(typeid(C))] = "C";

    int i;
    double d;
    A a;

    // note that we're storing pointer to type A
    std::unique_ptr&lt;A&gt; b(new B);
    std::unique_ptr&lt;A&gt; c(new C);

    std::cout &lt;&lt; "i is " &lt;&lt; type_names[std::type_index(typeid(i))] &lt;&lt; '\n';
    std::cout &lt;&lt; "d is " &lt;&lt; type_names[std::type_index(typeid(d))] &lt;&lt; '\n';
    std::cout &lt;&lt; "a is " &lt;&lt; type_names[std::type_index(typeid(a))] &lt;&lt; '\n';
    std::cout &lt;&lt; "*b is " &lt;&lt; type_names[std::type_index(typeid(*b))] &lt;&lt; '\n';
    std::cout &lt;&lt; "*c is " &lt;&lt; type_names[std::type_index(typeid(*c))] &lt;&lt; '\n';
}
|output=
i is int
d is double
a is A
*b is B
*c is C
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc type_info}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/types/traits/is|1=is_abstract
|description= 
If {{tt|T}} is an {{lt|cpp/language/abstract class}} (that is, a non-union class that declares or inherits at least one pure virtual function), provides the member constant {{tt|value}} equal to {{c|true}}. For any other type, {{tt|value}} is {{c|false}}.

If {{tt|T}} is an incomplete non-union class type, the behavior is undefined.
|inherit_desc={{tt|T}} is an {{lt|cpp/language/abstract class}} type
}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

struct A { int m; };
static_assert(std::is_abstract_v&lt;A&gt; == false);

struct B { virtual void foo(); };
static_assert(std::is_abstract_v&lt;B&gt; == false);

struct C { virtual void foo() = 0; };
static_assert(std::is_abstract_v&lt;C&gt; == true);

struct D : C {};
static_assert(std::is_abstract_v&lt;D&gt; == true);

int main() {}
|output=
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2015|std=C++11|before=the behavior was undefined if&lt;br&gt;{{tt|T}} is an incomplete union type|after=the base characteristic is&lt;br&gt;{{lc|std::false_type}} in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_class}}
{{dsc inc|cpp/types/dsc is_polymorphic}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
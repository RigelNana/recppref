{{cpp/types/traits/is|1=is_literal_type
|deprecated=c++17
|removed=c++20
|description=
(This type trait has been deprecated&lt;ref&gt;{{User:Radix/cite_p_paper|authors=Alisdair Meredith|no=0174|revision=2|title=Deprecating Vestigial Library Parts in C++17|mailing-year=2016|extension=html|section=Deprecate the &lt;tt&gt;is_literal&lt;/tt&gt; Trait|section-id=2.3|quote=The &lt;tt&gt;is_literal&lt;/tt&gt; type trait offers negligible value to generic code, as what is really needed is the ability to know that a specific construction would produce constant initialization.}}&lt;/ref&gt; and removed&lt;ref&gt;{{User:Radix/cite_p_paper|authors=Alisdair Meredith, Stephan T. Lavavej, Tomasz Kami≈Ñski|no=0619|revision=4|title=Reviewing Deprecated Facilities of C++17 for C++20|mailing-year=2018|extension=html|section=Deprecated type traits|section-id=3.12|quote='''Strong recommendation:''' Remove the traits that can live on as zombies. [...] '''Toronto Review:''' Accept strong recommendation, strike from C++20.}}&lt;/ref&gt; as offering negligible value to generic code.)

If {{tt|T}} satisfies all requirements of {{named req|LiteralType}}, provides the member constant {{tt|value}} equal to {{c|true}}. For any other type, {{tt|value}} is {{c|false}}.

If {{c/core|std::remove_all_extents_t&lt;T&gt;}} is an incomplete type and not (possibly cv-qualified) {{c/core|void}}, the behavior is undefined.
|inherit_desc= {{tt|T}} is a literal type
}}

===Notes===
Only literal types may be used as parameters to or returned from {{ls|cpp/language/constexpr#constexpr function}}s. Only literal classes may have constexpr member functions.

===Example===
{{example
|code=
#include &lt;type_traits&gt;

struct A { int m; };
static_assert(std::is_literal_type_v&lt;A&gt; == true);

struct B { virtual ~B(); };
static_assert(std::is_literal_type_v&lt;B&gt; == false);

int main() {}
|output=
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2015|std=C++11|before={{tt|T}} could be an array of incomplete&lt;br&gt;class type with unknown bound|after=the behavior is&lt;br&gt;undefined in this case}}
{{dr list end}}

===External links===
{{eli|&lt;references/&gt;}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
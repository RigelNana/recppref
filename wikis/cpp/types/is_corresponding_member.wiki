{{cpp/title|is_corresponding_member}}
{{cpp/meta/navbar}}
{{ddcl|header=type_traits|since=c++20|
template&lt; class S1, class S2, class M1, class M2 &gt;
constexpr bool is_corresponding_member( M1 S1::* mp, M2 S2::* mq ) noexcept;
}}

Determines whether {{c|mp}} and {{c|mq}} refer corresponding members in the [[cpp/language/data members#Standard-layout|common initial sequence]] of {{tt|S1}} and {{tt|S2}}. The program is ill-formed if either {{tt|S1}} or {{tt|S2}} is an {{lsd|cpp/language/type#Incomplete type}}.

If either {{tt|S1}} or {{tt|S2}} is not a {{named req|StandardLayoutType}}, or either {{tt|M1}} or {{tt|M2}} is not an object type, or either {{c|mp}} or {{c|mq}} is equal to {{c|nullptr}}, the result is always {{c|false}}.

===Parameters===
{{par begin}}
{{par|mp, mq|pointers-to-member to detect}}
{{par end}}

===Return value===
{{c|true}} if {{c|mp}} and {{c|mq}} refer corresponding members in the common initial sequence of {{tt|S1}} and {{tt|S2}}, otherwise {{c|false}}.

===Notes===
The type of a pointer-to-member expression {{c|&amp;S::m}} is not always {{c|M S::*}}, where {{tt|m}} is of type {{tt|M}}, because {{tt|m}} may be a member inherited from a base class of {{tt|S}}. The template arguments can be specified in order to avoid potentially surprising results.

===Example===
{{example
|code=
#include &lt;type_traits&gt;

struct Foo
{
    int x;
    double d;
};

struct Bar
{
    int y;
    double z;
};

struct Baz : Foo, Bar {}; // not standard-layout

static_assert(
    std::is_same_v&lt;decltype(&amp;Baz::x), int Foo::*&gt; == true &amp;&amp;
    std::is_same_v&lt;decltype(&amp;Baz::y), int Bar::*&gt; == true &amp;&amp;
    std::is_corresponding_member(&amp;Foo::x, &amp;Bar::y) == true &amp;&amp;
    std::is_corresponding_member(&amp;Foo::d, &amp;Bar::z) == true &amp;&amp;
    std::is_corresponding_member(&amp;Baz::x, &amp;Baz::y) == true &amp;&amp;
    std::is_corresponding_member&lt;Baz, Baz, int, int&gt;(&amp;Baz::x, &amp;Baz::y) == false
);

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_standard_layout}}
{{dsc inc|cpp/types/dsc is_layout_compatible}}
{{dsc inc|cpp/types/dsc is_member_object_pointer}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
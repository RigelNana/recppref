{{cpp/types/type_info/title|hash_code}}
{{cpp/types/type_info/navbar}}
{{ddcl|since=c++11|1=
std::size_t hash_code() const noexcept;
}}

Returns an unspecified value (here denoted by ''hash code'') such that for all {{lc|std::type_info}} objects referring to the same type, their ''hash code'' is the same.

No other guarantees are given: {{lc|std::type_info}} objects referring to different types may have the same ''hash code'' (although the standard recommends that implementations avoid this as much as possible), and ''hash code'' for the same type can change between invocations of the same program.

===Parameters===
(none)

===Return value===
A value that is identical for all {{lc|std::type_info}} objects referring to the same type.

===Example===
{{example
|The following program is an example of an efficient type-value mapping without using {{lc|std::type_index}}.
|code=
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;string&gt;
#include &lt;typeinfo&gt;
#include &lt;unordered_map&gt;

struct A
{
    virtual ~A() {}
};

struct B : A {};
struct C : A {};

using TypeInfoRef = std::reference_wrapper&lt;const std::type_info&gt;;

struct Hasher
{
    std::size_t operator()(TypeInfoRef code) const
    {
        return code.get().hash_code();
    }
};

struct EqualTo
{
    bool operator()(TypeInfoRef lhs, TypeInfoRef rhs) const
    {
        return lhs.get() == rhs.get();
    }
};

int main()
{
    std::unordered_map&lt;TypeInfoRef, std::string, Hasher, EqualTo&gt; type_names;

    type_names[typeid(int)] = "int";
    type_names[typeid(double)] = "double";
    type_names[typeid(A)] = "A";
    type_names[typeid(B)] = "B";
    type_names[typeid(C)] = "C";

    int i;
    double d;
    A a;

    // note that we're storing pointer to type A
    std::unique_ptr&lt;A&gt; b(new B);
    std::unique_ptr&lt;A&gt; c(new C);

    std::cout &lt;&lt; "i is " &lt;&lt; type_names[typeid(i)] &lt;&lt; '\n';
    std::cout &lt;&lt; "d is " &lt;&lt; type_names[typeid(d)] &lt;&lt; '\n';
    std::cout &lt;&lt; "a is " &lt;&lt; type_names[typeid(a)] &lt;&lt; '\n';
    std::cout &lt;&lt; "*b is " &lt;&lt; type_names[typeid(*b)] &lt;&lt; '\n';
    std::cout &lt;&lt; "*c is " &lt;&lt; type_names[typeid(*c)] &lt;&lt; '\n';
}
|output=
i is int
d is double
a is A
*b is B
*c is C
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/type_info/dsc operator_cmp}}
{{dsc inc|cpp/types/type_info/dsc name}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
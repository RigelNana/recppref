{{cpp/types/type_info/title|name}}
{{cpp/types/type_info/navbar}}
{{dcl begin}}
{{dcla|anchor=no|noexcept=c++11|1=
const char* name() const;
}}
{{dcl end}}

Returns an implementation defined null-terminated character string containing the name of the type. No guarantees are given; in particular, the returned string can be identical for several types and change between invocations of the same program.

===Parameters===
(none)

===Return value===
{{lt|cpp/string/byte|Null-terminated character string}} containing the name of the type.

===Notes===
The lifetime of the array pointed to by the returned pointer is not specified, but in practice it persists as long as the RTTI data structure for the given type exists, which has application lifetime unless loaded from a dynamic library (that can be unloaded).

Some implementations (such as MSVC, IBM, Oracle) produce a human-readable type name. Others, most notably gcc and clang, return the mangled name, which is specified by the [https://itanium-cxx-abi.github.io/cxx-abi/abi.html#typeid Itanium C++ ABI]. The mangled name can be converted to human-readable form using implementation-specific API such as [https://gcc.gnu.org/onlinedocs/libstdc++/manual/ext_demangling.html {{tt|abi::__cxa_demangle}}] directly or through [https://www.boost.org/doc/libs/release/libs/core/doc/html/core/demangle.html {{tt|boost::core::demangle}}]. It can also be piped through the command-line utility {{c|c++filt -t}}.

===Example===
{{example
|code=
#include &lt;boost/core/demangle.hpp&gt;
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;typeinfo&gt;

struct Base { virtual ~Base() = default; };
struct Derived : Base {};

int main()
{
    Base b1;
    Derived d1;

    const Base* pb = &amp;b1;
    std::cout &lt;&lt; typeid(*pb).name() &lt;&lt; '\n';
    pb = &amp;d1;
    std::cout &lt;&lt; typeid(*pb).name() &lt;&lt; '\n';

    std::string real_name = boost::core::demangle(typeid(pb).name());
    std::cout &lt;&lt; typeid(pb).name() &lt;&lt; " =&gt; " &lt;&lt; real_name &lt;&lt; '\n';

    std::cout &lt;&lt; "c++filt =&gt; " &lt;&lt; std::flush;
    std::string s = typeid(pb).name();
    std::system(("c++filt -t " + s).data());
}
|p=true
|output=
// GCC/Clang:
4Base
7Derived
PK4Base =&gt; Base const*
c++filt =&gt; Base const*

// MSVC:
struct Base
struct Derived
struct Base const * __ptr64 =&gt; struct Base const * __ptr64
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/type_info/dsc hash_code}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
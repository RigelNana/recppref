{{cpp/types/traits/is|1=is_class
|description= 
Checks whether {{tt|T}} is a non-union class type. Provides the member constant {{c|value}} which is equal to {{c|true}}, if {{tt|T}} is a class type (but not union). Otherwise, {{c|value}} is equal to {{c|false}}.
|inherit_desc={{tt|T}} is a non-union class type
}}

===Possible implementation===
{{eq fun
|1=
namespace detail
{
    template&lt;class T&gt;
    std::integral_constant&lt;bool, !std::is_union&lt;T&gt;::value&gt; test(int T::*);

    template&lt;class&gt;
    std::false_type test(...);
}

template&lt;class T&gt;
struct is_class : decltype(detail::test&lt;T&gt;(nullptr)) {};
}}

===Example===
{{example
|code=
#include &lt;type_traits&gt;

struct A {};
static_assert(std::is_class&lt;A&gt;::value);

class B {};
static_assert(std::is_class_v&lt;B&gt;);
static_assert(not std::is_class_v&lt;B*&gt;);
static_assert(not std::is_class_v&lt;B&amp;&gt;);
static_assert(std::is_class_v&lt;const B&gt;);

enum class E {};
static_assert(not std::is_class&lt;E&gt;::value);

union U { class UC {}; };
static_assert(not std::is_class_v&lt;U&gt;);
static_assert(std::is_class_v&lt;U::UC&gt;);

static_assert(not std::is_class_v&lt;int&gt;);

static_assert(std::is_class_v&lt;struct S&gt;, "incomplete class");
static_assert(std::is_class_v&lt;class C&gt;, "incomplete class");

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_union}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
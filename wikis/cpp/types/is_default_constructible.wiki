{{cpp/title|is_default_constructible|is_trivially_default_constructible|is_nothrow_default_constructible}}
{{cpp/meta/navbar}}
{{dcl begin}}
{{dcl header|type_traits}}
{{dcl|since=c++11|num=1|
template&lt; class T &gt;
struct is_default_constructible;
}}
{{dcl|since=c++11|num=2|
template&lt; class T &gt;
struct is_trivially_default_constructible;
}}
{{dcl|since=c++11|num=3|
template&lt; class T &gt;
struct is_nothrow_default_constructible;
}}
{{dcl end}}

@1@ Provides the member constant {{tt|value}} equal to {{c|std::is_constructible&lt;T&gt;::value}}.

@2@ Provides the member constant {{tt|value}} equal to {{c|std::is_trivially_constructible&lt;T&gt;::value}}.

@3@ Provides the member constant {{tt|value}} equal to {{c|std::is_nothrow_constructible&lt;T&gt;::value}}.

{{cpp/types/cvaub}}

{{cpp/types/nospec|any}}

===Helper variable templates===
{{dcl begin}}

{{dcl|since=c++17|1=
template&lt; class T &gt;
inline constexpr bool is_default_constructible_v =
    is_default_constructible&lt;T&gt;::value;
}}

{{dcl|since=c++17|1=
template&lt; class T &gt;
inline constexpr bool is_trivially_default_constructible_v =
    is_trivially_default_constructible&lt;T&gt;::value;
}}

{{dcl|since=c++17|1=
template&lt; class T &gt;
inline constexpr bool is_nothrow_default_constructible_v =
    is_nothrow_default_constructible&lt;T&gt;::value;
}}
{{dcl end}}

{{cpp/types/integral_constant/inherit|{{tt|T}} is default-constructible}}

===Possible implementation===
{{eq fun
|1=
template&lt;class T&gt;
struct is_default_constructible : std::is_constructible&lt;T&gt; {};

template&lt;class T&gt;
struct is_trivially_default_constructible : std::is_trivially_constructible&lt;T&gt; {};

template&lt;class T&gt;
struct is_nothrow_default_constructible : std::is_nothrow_constructible&lt;T&gt; {};
}}

===Notes===
In many implementations, {{tt|std::is_nothrow_default_constructible}} also checks if the destructor throws because it is effectively {{c|noexcept(T())}}. Same applies to {{tt|std::is_trivially_default_constructible}}, which, in these implementations, also requires that the destructor is trivial: [https://gcc.gnu.org/bugzilla/show_bug.cgi?id=51452 GCC bug 51452], {{lwg|2116}}.

{{c|std::is_default_constructible&lt;T&gt;}} does not test that {{c|T x;}} would compile; it attempts [[cpp/language/direct_initialization|direct-initialization]] with an empty argument list (see {{lc|std::is_constructible}}). Thus, {{c|std::is_default_constructible_v&lt;const int&gt;}} and {{c|std::is_default_constructible_v&lt;const int[10]&gt;}} are {{c|true}}.

===Example===
{{example
|code=
#include &lt;string&gt;
#include &lt;type_traits&gt;

struct S1
{
    std::string str; // member has a non-trivial default constructor
};
static_assert(std::is_default_constructible_v&lt;S1&gt; == true);
static_assert(std::is_trivially_default_constructible_v&lt;S1&gt; == false);

struct S2
{
    int n;
    S2() = default; // trivial and non-throwing
};
static_assert(std::is_trivially_default_constructible_v&lt;S2&gt; == true);
static_assert(std::is_nothrow_default_constructible_v&lt;S2&gt; == true);

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_constructible}}
{{dsc inc|cpp/types/dsc is_copy_constructible}}
{{dsc inc|cpp/types/dsc is_move_constructible}}
{{dsc inc|cpp/concepts/dsc default_initializable}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
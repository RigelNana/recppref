{{cpp/title|bad_typeid}}
{{cpp/types/navbar}}
{{ddcl|header=typeinfo|
class bad_typeid : public std::exception;
}}

An exception of this type is thrown when a {{ltt|cpp/language/typeid}} operator is applied to a dereferenced null pointer value of a polymorphic type.

{{inheritance diagram/std-bad_typeid}}

===Member functions===
{{cpp/error/exception/member of derived|bad_typeid}}

{{cpp/error/exception/inherit}}

===Notes===
{{feature test macro|__cpp_lib_constexpr_exceptions|value=202411L|std=C++26|{{c/core|constexpr}} for exception types}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;typeinfo&gt;

struct S // The type has to be polymorphic
{
    virtual void f();
}; 

int main()
{
    S* p = nullptr;
    try
    {
        std::cout &lt;&lt; typeid(*p).name() &lt;&lt; '\n';
    }
    catch (const std::bad_typeid&amp; e)
    {
        std::cout &lt;&lt; e.what() &lt;&lt; '\n';
    }
}
|p=true
|output=
Attempted a typeid of NULL pointer!
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|remove_cv|remove_const|remove_volatile}}
{{cpp/meta/navbar}}
{{dcl begin}}
{{dcl header|type_traits}}
{{dcl|since=c++11|num=1|1=
template&lt; class T &gt;
struct remove_cv;
}}
{{dcl|since=c++11|num=2|1=
template&lt; class T &gt;
struct remove_const;
}}
{{dcl|since=c++11|num=3|1=
template&lt; class T &gt;
struct remove_volatile;
}}
{{dcl end}}

Provides the member typedef {{tt|type}} which is the same as {{tt|T}}, except that its topmost cv-qualifiers are removed.

@1@ Removes the topmost {{c|const}}, or the topmost {{c|volatile}}, or both, if present.

@2@ Removes the topmost {{c|const}}.

@3@ Removes the topmost {{c|volatile}}.

{{cpp/types/nospec|any}}

===Member types===
{{dsc begin}}
{{dsc hitem|Name|Definition}}
{{dsc|{{tt|type}}|the type {{tt|T}} without cv-qualifier}}
{{dsc end}}

===Helper types===
{{dcl begin}}
{{dcl|since=c++14|1=
template&lt; class T &gt;
using remove_cv_t = typename remove_cv&lt;T&gt;::type;
}}
{{dcl|since=c++14|1=
template&lt; class T &gt;
using remove_const_t = typename remove_const&lt;T&gt;::type;
}}
{{dcl|since=c++14|1=
template&lt; class T &gt;
using remove_volatile_t = typename remove_volatile&lt;T&gt;::type;
}}
{{dcl end}}

===Possible implementation===
{{eq fun
|1=
template&lt;class T&gt; struct remove_cv { typedef T type; };
template&lt;class T&gt; struct remove_cv&lt;const T&gt; { typedef T type; };
template&lt;class T&gt; struct remove_cv&lt;volatile T&gt; { typedef T type; };
template&lt;class T&gt; struct remove_cv&lt;const volatile T&gt; { typedef T type; };

template&lt;class T&gt; struct remove_const { typedef T type; };
template&lt;class T&gt; struct remove_const&lt;const T&gt; { typedef T type; };

template&lt;class T&gt; struct remove_volatile { typedef T type; };
template&lt;class T&gt; struct remove_volatile&lt;volatile T&gt; { typedef T type; };
}}

===Example===
{{example
|Removing const/volatile from {{c|const volatile int*}} does not modify the type, because the pointer itself is neither const nor volatile.
|code=
#include &lt;type_traits&gt;

template&lt;typename U, typename V&gt;
constexpr bool same = std::is_same_v&lt;U, V&gt;;

static_assert
(
    same&lt;std::remove_cv_t&lt;int&gt;, int&gt; &amp;&amp;
    same&lt;std::remove_cv_t&lt;const int&gt;, int&gt; &amp;&amp;
    same&lt;std::remove_cv_t&lt;volatile int&gt;, int&gt; &amp;&amp;
    same&lt;std::remove_cv_t&lt;const volatile int&gt;, int&gt; &amp;&amp;
    // remove_cv only works on types, not on pointers
    not same&lt;std::remove_cv_t&lt;const volatile int*&gt;, int*&gt; &amp;&amp;
    same&lt;std::remove_cv_t&lt;const volatile int*&gt;, const volatile int*&gt; &amp;&amp;
    same&lt;std::remove_cv_t&lt;const int* volatile&gt;, const int*&gt; &amp;&amp;
    same&lt;std::remove_cv_t&lt;int* const volatile&gt;, int*&gt;
);

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_const}}
{{dsc inc|cpp/types/dsc is_volatile}}
{{dsc inc|cpp/types/dsc add_cv}}
{{dsc inc|cpp/types/dsc remove_cvref}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
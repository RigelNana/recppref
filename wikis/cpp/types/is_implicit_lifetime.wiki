{{cpp/types/traits/is|1=is_implicit_lifetime
|std=c++23
|description=
If {{tt|T}} is an [[cpp/named req/ImplicitLifetimeType|implicit-lifetime type]], provides the member constant {{c|value}} equal to {{c|true}}. For any other type, {{c|value}} is {{c|false}}.

The behavior is undefined if {{c|T}} is an incomplete type other than an array type or (possibly cv-qualified) {{c|void}}.
|inherit_desc={{tt|T}} is an implicit-lifetime type
}}

===Notes===
{{feature test macro|__cpp_lib_is_implicit_lifetime|std=C++23|value=202302L|{{tt|std::is_implicit_lifetime}}}}

===Example===
{{example
|code=
// The following types are collectively called implicit-lifetime types:
// * scalar types:
//     * arithmetic types
//     * enumeration types
//     * pointer types
//     * pointer-to-member types
//     * std::nullptr_t
// * implicit-lifetime class types
//     * is an aggregate whose destructor is not user-provided
//     * has at least one trivial eligible constructor and a trivial,
//       non-deleted destructor
// * array types
// * cv-qualified versions of these types.
#include &lt;type_traits&gt;

static_assert(std::is_implicit_lifetime_v&lt;int&gt;); // arithmetic type is a scalar type
static_assert(std::is_implicit_lifetime_v&lt;const int&gt;); // cv-qualified a scalar type

enum E { e };
static_assert(std::is_implicit_lifetime_v&lt;E&gt;); // enumeration type is a scalar type
static_assert(std::is_implicit_lifetime_v&lt;int*&gt;); // pointer type is a scalar type
static_assert(std::is_implicit_lifetime_v&lt;std::nullptr_t&gt;); // scalar type

struct S { int x, y; };
// S is an implicit-lifetime class: an aggregate without user-provided destructor
static_assert(std::is_implicit_lifetime_v&lt;S&gt;);

static_assert(std::is_implicit_lifetime_v&lt;int S::*&gt;); // pointer-to-member

struct X { ~X() = delete; };
// X is not implicit-lifetime class due to deleted destructor
static_assert(!std::is_implicit_lifetime_v&lt;X&gt;);

static_assert(std::is_implicit_lifetime_v&lt;int[8]&gt;); // array type
static_assert(std::is_implicit_lifetime_v&lt;volatile int[8]&gt;); // cv-qualified array type

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_scalar}}
{{dsc inc|cpp/types/dsc is_array}}
{{dsc inc|cpp/types/dsc is_aggregate}}
{{dsc inc|cpp/memory/dsc start_lifetime_as}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/types/traits/is|1=has_virtual_destructor
|description= 
If {{tt|T}} is a type with a virtual destructor, the base characteristic is {{lc|std::true_type}}. For any other type, the base characteristic is {{lc|std::false_type}}.

If {{tt|T}} is an incomplete non-union class type, the behavior is undefined.
|inherit_desc={{tt|T}} has a virtual destructor
}}

===Notes===
If a class {{tt|C}} has a public virtual destructor, it can be derived from, and the derived object can be safely deleted through a pointer to the base object ([http://www.gotw.ca/publications/mill18.htm  GotW #18]). In this case, {{c|std::is_polymorphic&lt;C&gt;::value}} is {{c|true}}.

===Example===
{{example
|code=
#include &lt;type_traits&gt;

struct S {};
static_assert(!std::has_virtual_destructor_v&lt;S&gt;);

struct B { virtual ~B() {} };
static_assert(std::has_virtual_destructor_v&lt;B&gt;);

struct D : B { ~D() {} };
static_assert(std::has_virtual_destructor_v&lt;D&gt;);

int main()
{
    B* pd = new D;
    delete pd;
}
|output=
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2015|std=C++11|before=the behavior was undefined if&lt;br&gt;{{tt|T}} is an incomplete union type|after=the base characteristic is&lt;br&gt;{{lc|std::false_type}} in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_destructible}}
{{dsc inc|cpp/types/dsc is_polymorphic}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
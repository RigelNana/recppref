{{cpp/types/traits/is|1=is_trivially_copyable
|description= 
If {{tt|T}} is a [[cpp/named req/TriviallyCopyable|trivially copyable]] type, provides the member constant {{tt|value}} equal to {{c|true}}. For any other type, {{tt|value}} is {{c|false}}.

If {{c/core|std::remove_all_extents_t&lt;T&gt;}} is an incomplete type and not (possibly cv-qualified) {{c/core|void}}, the behavior is undefined.
|inherit_desc={{tt|T}} is a trivially copyable type
}}

===Notes===
Objects of trivially-copyable types that are not potentially-overlapping subobjects are the only C++ objects that may be safely copied with {{lc|std::memcpy}} or serialized to/from binary files with {{l2tf|cpp/io/basic_ostream/write||std::ofstream}} / {{l2tf|cpp/io/basic_istream/read||std::ifstream}}.

===Example===
{{example
|code=
#include &lt;type_traits&gt;

struct A { int m; };
static_assert(std::is_trivially_copyable_v&lt;A&gt; == true);

struct B { B(B const&amp;) {} };
static_assert(std::is_trivially_copyable_v&lt;B&gt; == false);

struct C { virtual void foo(); };
static_assert(std::is_trivially_copyable_v&lt;C&gt; == false);

struct D
{
    int m;
    
    D(D const&amp;) = default; // -&gt; trivially copyable
    D(int x) : m(x + 1) {}
};
static_assert(std::is_trivially_copyable_v&lt;D&gt; == true);

int main() {}
|output=
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2015|std=C++11|before={{tt|T}} could be an array of incomplete&lt;br&gt;class type with unknown bound|after=the behavior is&lt;br&gt;undefined in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_trivial}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|remove_extent}}
{{cpp/meta/navbar}}
{{dcl begin}}
{{dcl header|type_traits}}
{{dcl|since=c++11|1=
template&lt; class T &gt;
struct remove_extent;
}}
{{dcl end}}

If {{tt|T}} is an array of some type {{tt|X}}, provides the member typedef {{tt|type}} equal to {{tt|X}}, otherwise {{tt|type}} is {{tt|T}}. Note that if T is a multidimensional array, only the first dimension is removed.

{{cpp/types/nospec}}

===Member types===
{{dsc begin}}
{{dsc hitem|Name|Definition}}
{{dsc|{{tt|type}}|the type of the element of {{tt|T}}}}
{{dsc end}}

===Helper types===
{{dcl begin}}
{{dcl|since=c++14|1=
template&lt; class T &gt;
using remove_extent_t = typename remove_extent&lt;T&gt;::type;
}}
{{dcl end}}

===Possible implementation===
{{eq fun
|1=
template&lt;class T&gt;
struct remove_extent { using type = T; };

template&lt;class T&gt;
struct remove_extent&lt;T[]&gt; { using type = T; };

template&lt;class T, std::size_t N&gt;
struct remove_extent&lt;T[N]&gt; { using type = T; };
}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;type_traits&gt;

template&lt;class A&gt;
    std::enable_if_t&lt;std::rank_v&lt;A&gt; == 1&gt;
print_1d(const A&amp; a)
{
    std::copy(a, a + std::extent_v&lt;A&gt;,
        std::ostream_iterator&lt;std::remove_extent_t&lt;A&gt;&gt;(std::cout, " "));
    std::cout &lt;&lt; '\n';
}

int main()
{
    int a[][3] = {&lt;!----&gt;{1, 2, 3}, {4, 5, 6}&lt;!----&gt;};
//  print_1d(a); // compile-time error
    print_1d(a[1]);
}
|output=
4 5 6
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_array}}
{{dsc inc|cpp/types/dsc rank}}
{{dsc inc|cpp/types/dsc extent}}
{{dsc inc|cpp/types/dsc remove_all_extents}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/types/traits/is|1=is_polymorphic
|description=
If {{tt|T}} is a [[cpp/language/object#Polymorphic objects|polymorphic class]] (that is, a non-union class that declares or inherits at least one virtual function), provides the member constant {{tt|value}} equal to {{c|true}}. For any other type, {{tt|value}} is {{c|false}}.

If {{tt|T}} is an incomplete non-union class type, the behavior is undefined.
|inherit_desc={{tt|T}} is a [[cpp/language/object#Polymorphic objects|polymorphic]] class type
}}

===Possible implementation===
{{eq fun|1=
namespace detail
{
    template&lt;class T&gt;
    std::true_type detect_is_polymorphic(
        decltype(dynamic_cast&lt;const volatile void*&gt;(static_cast&lt;T*&gt;(nullptr)))
    );
    template&lt;class T&gt;
    std::false_type detect_is_polymorphic(...);
} // namespace detail

template&lt;class T&gt;
struct is_polymorphic : decltype(detail::detect_is_polymorphic&lt;T&gt;(nullptr)) {};
}}

===Example===
{{example
|code=
#include &lt;type_traits&gt;
 
struct A { int m; };
static_assert(!std::is_polymorphic_v&lt;A&gt;);

struct B { virtual void foo(); };
static_assert(std::is_polymorphic_v&lt;B&gt;);

struct C : B {};
static_assert(std::is_polymorphic_v&lt;C&gt;);
 
struct D { virtual ~D() = default; };
static_assert(std::is_polymorphic_v&lt;D&gt;);
 
// Uses inheritance, but not the virtual keyword:
struct E : A {};
static_assert(!std::is_polymorphic_v&lt;E&gt;);

struct F : virtual A {};
static_assert(!std::is_polymorphic_v&lt;F&gt;);

struct AX : A {};
struct AY : A {};
struct XY : virtual AX, virtual AY {};
static_assert(!std::is_polymorphic_v&lt;XY&gt;);
 
int main() {}
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2015|std=C++11|before=the behavior was undefined if&lt;br&gt;{{tt|T}} is an incomplete union type|after=the base characteristic is&lt;br&gt;{{lc|std::false_type}} in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_class}}
{{dsc inc|cpp/types/dsc is_abstract}}
{{dsc inc|cpp/types/dsc has_virtual_destructor}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
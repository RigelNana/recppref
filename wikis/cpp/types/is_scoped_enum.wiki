{{cpp/types/traits/is|1=is_scoped_enum
|std=c++23
|description=
Checks whether {{tt|T}} is a [[cpp/language/enum#Scoped enumerations|scoped enumeration type]]. Provides the member constant {{tt|value}} which is equal to {{c|true}}, if {{tt|T}} is a scoped enumeration type. Otherwise, {{tt|value}} is equal to {{c|false}}.
|inherit_desc={{tt|T}} is a scoped enumeration type
}}

===Notes===
{{feature test macro|__cpp_lib_is_scoped_enum|value=202011L|std=C++23|{{tt|std::is_scoped_enum}}}}

===Possible implementation===
{{eq fun|1=
template&lt;typename E&gt;
struct is_scoped_enum : std::bool_constant&lt;requires
{
    requires std::is_enum_v&lt;E&gt;;
    requires !std::is_convertible_v&lt;E, std::underlying_type_t&lt;E&gt;&gt;;
}&gt;
{};
}}

===Example===
{{example
|code=
#include &lt;type_traits&gt;

class A {};

enum E {};

enum struct Es { oz };

enum class Ec : int {};

int main()
{
    static_assert(std::is_scoped_enum_v&lt;A&gt; == false);
    static_assert(std::is_scoped_enum_v&lt;E&gt; == false);
    static_assert(std::is_scoped_enum_v&lt;Es&gt; == true);
    static_assert(std::is_scoped_enum_v&lt;Ec&gt; == true);
    static_assert(std::is_scoped_enum_v&lt;int&gt; == false);
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_integral}}
{{dsc inc|cpp/types/dsc is_arithmetic}}
{{dsc inc|cpp/types/dsc is_scalar}}
{{dsc inc|cpp/types/dsc is_enum}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/types/traits/is|1=is_integral
|description=
Checks whether {{tt|T}} is an [[cpp/language/type|integral type]]. Provides the member constant {{c|value}} which is equal to {{c|true}}, if {{tt|T}} is the type {{c/core|bool}}, {{c/core|char}}{{rev inl|since=c++20|, {{c/core|char8_t}}}}, {{c/core|char16_t}}, {{c/core|char32_t}}, {{c/core|wchar_t}}, {{c/core|short}}, {{c/core|int}}, {{c/core|long}}, {{c/core|long long}}, or any implementation-defined extended integer types, including any signed, unsigned, and cv-qualified variants. Otherwise, {{c|value}} is equal to {{c|false}}.
|inherit_desc={{tt|T}} is an integral type
}}

===Possible implementation===
{{eq fun|1=
// Note: this implementation uses C++20 facilities
template&lt;class T&gt;
struct is_integral : std::bool_constant&lt;
    requires (T t, T* p, void (*f)(T)) // T* parameter excludes reference types
    {
        reinterpret_cast&lt;T&gt;(t); // Exclude class types
        f(0); // Exclude enumeration types
        p + t; // Exclude everything not yet excluded but integral types
    }&gt; {};
}}

===Example===
{{example
|code=
#include &lt;type_traits&gt;

static_assert
(
    std::is_integral_v&lt;float&gt; == false &amp;&amp;
    std::is_integral_v&lt;int*&gt; == false &amp;&amp;
    std::is_integral_v&lt;int&gt; == true &amp;&amp;
    std::is_integral_v&lt;const int&gt; == true &amp;&amp;
    std::is_integral_v&lt;bool&gt; == true &amp;&amp;
    std::is_integral_v&lt;char&gt; == true
);

class A {};
static_assert(std::is_integral_v&lt;A&gt; == false);

struct B { int x:4; };
static_assert(std::is_integral_v&lt;B&gt; == false);
using BF = decltype(B::x); // bit-field's type
static_assert(std::is_integral_v&lt;BF&gt; == true);

enum E : int {};
static_assert(std::is_integral_v&lt;E&gt; == false);

template &lt;class T&gt;
constexpr T same(T i)
{
    static_assert(std::is_integral&lt;T&gt;::value, "Integral required.");
    return i;
}
static_assert(same('"') == 042);

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/concepts/dsc integral}}
{{dsc inc|cpp/types/numeric_limits/dsc is_integer}}
{{dsc inc|cpp/types/dsc is_floating_point}}
{{dsc inc|cpp/types/dsc is_arithmetic}}
{{dsc inc|cpp/types/dsc is_enum}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
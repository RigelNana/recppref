{{cpp/types/numeric_limits/title|max_digits10}}
{{cpp/types/numeric_limits/navbar}}

{{dcl begin}}
{{dcl|since=c++11|1=
static constexpr int max_digits10
}}
{{dcl end}}

The value of {{c|std::numeric_limits&lt;T&gt;::max_digits10}} is the number of base-10 digits that are necessary to uniquely represent all distinct values of the type {{tt|T}}, such as necessary for serialization/deserialization to text. This constant is meaningful for all floating-point types. 

===Standard specializations===
{{dsc begin}}
{{dsc hitem|{{tt|T}}|Value of {{c|std::numeric_limits&lt;T&gt;::max_digits10}}}}
{{dsc|{{c/core|/* non-specialized */}}|{{c|0}}}}
{{dsc|{{c/core|bool}}|{{c|0}}}}
{{dsc|{{c/core|char}}|{{c|0}}}}
{{dsc|{{c/core|signed char}}|{{c|0}}}}
{{dsc|{{c/core|unsigned char}}|{{c|0}}}}
{{dsc|{{c/core|wchar_t}}|{{c|0}}}}
{{dsc|{{c/core|char8_t}} {{mark since c++20}}|{{c|0}}}}
{{dsc|{{c/core|char16_t}}|{{c|0}}}}
{{dsc|{{c/core|char32_t}}|{{c|0}}}}
{{dsc|{{c/core|short}}|{{c|0}}}}
{{dsc|{{c/core|unsigned short}}|{{c|0}}}}
{{dsc|{{c/core|int}}|{{c|0}}}}
{{dsc|{{c/core|unsigned int}}|{{c|0}}}}
{{dsc|{{c/core|long}}|{{c|0}}}}
{{dsc|{{c/core|unsigned long}}|{{c|0}}}}
{{dsc|{{c/core|long long}}|{{c|0}}}}
{{dsc|{{c/core|unsigned long long}}|{{c|0}}}}
{{dsc|{{c/core|float}}|{{lc|FLT_DECIMAL_DIG}} or {{c|std::ceil(std::numeric_limits&lt;float&gt;::digits * std::log10(2) + 1)}}}}
{{dsc|{{c/core|double}}|{{lc|DBL_DECIMAL_DIG}} or {{c|std::ceil(std::numeric_limits&lt;double&gt;::digits * std::log10(2) + 1)}}}}
{{dsc|{{c/core|long double}}|{{lc|DECIMAL_DIG}} or {{lc|LDBL_DECIMAL_DIG}} or {{c|std::ceil(std::numeric_limits&lt;long double&gt;::digits * std::log10(2) + 1)}}}}
{{dsc end}}

===Notes===
Unlike most mathematical operations, the conversion of a floating-point value to text and back is ''exact'' as long as at least {{tt|max_digits10}} were used ({{c|9}} for {{c/core|float}}, {{c|17}} for {{c/core|double}}): it is guaranteed to produce the same floating-point value, even though the intermediate text representation is not exact. It may take over a hundred decimal digits to represent the precise value of a {{c/core|float}} in decimal notation.

===Example===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;sstream&gt;

int main()
{
    float value = 10.0000086;

    constexpr auto digits10 = std::numeric_limits&lt;decltype(value)&gt;::digits10;
    constexpr auto max_digits10 = std::numeric_limits&lt;decltype(value)&gt;::max_digits10;
    constexpr auto submax_digits10 = max_digits10 - 1;

    std::cout &lt;&lt; "float:\n"
                 "       digits10 is " &lt;&lt; digits10 &lt;&lt; " digits\n"
                 "   max_digits10 is " &lt;&lt; max_digits10 &lt;&lt; " digits\n"
                 "submax_digits10 is " &lt;&lt; submax_digits10 &lt;&lt; " digits\n\n";

    const auto original_precision = std::cout.precision();
    for (auto i = 0; i &lt; 5; ++i)
    {
        std::cout
            &lt;&lt; "   max_digits10: " &lt;&lt; std::setprecision(max_digits10) &lt;&lt; value &lt;&lt; "\n"
               "submax_digits10: " &lt;&lt; std::setprecision(submax_digits10) &lt;&lt; value
            &lt;&lt; "\n\n";
 
        value = std::nextafter(value, std::numeric_limits&lt;decltype(value)&gt;::max());
    }
    std::cout.precision(original_precision);
}
|output=
float:
       digits10 is 6 digits
   max_digits10 is 9 digits
submax_digits10 is 8 digits

   max_digits10: 10.0000086
submax_digits10: 10.000009

   max_digits10: 10.0000095
submax_digits10: 10.00001

   max_digits10: 10.0000105
submax_digits10: 10.00001

   max_digits10: 10.0000114
submax_digits10: 10.000011

   max_digits10: 10.0000124
submax_digits10: 10.000012
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc radix}}
{{dsc inc|cpp/types/numeric_limits/dsc digits}}
{{dsc inc|cpp/types/numeric_limits/dsc digits10}}
{{dsc inc|cpp/types/numeric_limits/dsc min_exponent}}
{{dsc inc|cpp/types/numeric_limits/dsc max_exponent}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
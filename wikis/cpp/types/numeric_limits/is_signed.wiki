{{cpp/types/numeric_limits/title|is_signed}}
{{cpp/types/numeric_limits/navbar}}
{{dcl begin}}
{{dcl rev multi
|dcl1=
static const bool is_signed;
|since2=c++11|dcl2=
static constexpr bool is_signed;
}}
{{dcl end}}

The value of {{c|std::numeric_limits&lt;T&gt;::is_signed}} is {{c|true}} for all signed arithmetic types {{tt|T}} and {{c|false}} for the unsigned types. This constant is meaningful for all specializations.

===Standard specializations===
{{dsc begin}}
{{dsc hitem | {{tt|T}} | value of {{c|std::numeric_limits&lt;T&gt;::is_signed}} }}
{{dsc | {{c/core|/* non-specialized */}} | {{c|false}} }}
{{dsc | {{c/core|bool}}              | {{c|false}} }}
{{dsc | {{c/core|char}}              | implementation-defined }}
{{dsc | {{c/core|signed char}}       | {{c|true}} }}
{{dsc | {{c/core|unsigned char}}     | {{c|false}} }}
{{dsc | {{c/core|wchar_t}}           | implementation-defined }}
{{dsc | {{c/core|char8_t}} {{mark since c++20}} | {{c|false}} }}
{{dsc | {{c/core|char16_t}} {{mark since c++11}}| {{c|false}} }}
{{dsc | {{c/core|char32_t}} {{mark since c++11}}| {{c|false}} }}
{{dsc | {{c/core|short}}             | {{c|true}} }}
{{dsc | {{c/core|unsigned short}}    | {{c|false}} }}
{{dsc | {{c/core|int}}               | {{c|true}} }}
{{dsc | {{c/core|unsigned int}}      | {{c|false}} }}
{{dsc | {{c/core|long}}              | {{c|true}} }}
{{dsc | {{c/core|unsigned long}}     | {{c|false}} }}
{{dsc | {{c/core|long long}} {{mark since c++11}}         | {{c|true}} }}
{{dsc | {{c/core|unsigned long long}} {{mark since c++11}}| {{c|false}} }}
{{dsc | {{c/core|float}}             | {{c|true}} }}
{{dsc | {{c/core|double}}            | {{c|true}} }}
{{dsc | {{c/core|long double}}       | {{c|true}} }}
{{dsc end}}

===Example===
{{example|code=
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;limits&gt;

template&lt;typename T&gt;
struct test
{
    test(const char* name, int w = 15)
    {
        std::cout
            &lt;&lt; std::left &lt;&lt; std::setw(w)
            &lt;&lt; (std::numeric_limits&lt;T&gt;::is_specialized ? name : "non-specialized")
            &lt;&lt; " : "
            &lt;&lt; (std::numeric_limits&lt;T&gt;::is_signed ? "" : "un") &lt;&lt; "signed\n";
    }
};

int main()
{
    test&lt;bool&gt;{"bool"};
    test&lt;char&gt;{"char"};
    test&lt;wchar_t&gt;{"wchar_t"};
    test&lt;char16_t&gt;{"char16_t"};
    test&lt;char32_t&gt;{"char32_t"};
    test&lt;float&gt;{"float"};
    struct delusion{};
    test&lt;delusion&gt;{"delusion"};
    test&lt;decltype(42)&gt;{"decltype(42)"};
}
|p=true
|output=
bool            : unsigned
char            : signed
wchar_t         : signed
char16_t        : unsigned
char32_t        : unsigned
float           : signed
non-specialized : unsigned
decltype(42)    : signed
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_signed}}
{{dsc inc|cpp/types/numeric_limits/dsc is_integer}}
{{dsc inc|cpp/types/numeric_limits/dsc is_exact}}
{{dsc inc|cpp/types/numeric_limits/dsc is_bounded}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
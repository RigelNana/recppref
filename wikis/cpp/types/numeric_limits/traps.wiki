{{cpp/types/numeric_limits/title|traps}}
{{cpp/types/numeric_limits/navbar}}
{{dcl begin}}
{{dcl rev multi|until1=c++11
|dcl1=
static const bool traps;
|dcl2=
static constexpr bool traps;
}}
{{dcl end}}

The value of {{c|std::numeric_limits&lt;T&gt;::traps}} is {{c|true}} for all arithmetic types {{tt|T}} that have at least one value at the start of the program that, if used as an argument to an arithmetic operation, will generate a {{enwiki|Trap (computing)|trap}}. 

===Standard specializations===
{{dsc begin}}
{{dsc hitem | {{tt|T}} | value of {{c|std::numeric_limits&lt;T&gt;::traps}} }}
{{dsc | {{c/core|/* non-specialized */}}   | {{c|false}} }}
{{dsc | {{c/core|bool}}              | {{c|false}} }}
{{dsc | {{c/core|char}}              | usually {{c|true}} }}
{{dsc | {{c/core|signed char}}       | usually {{c|true}} }}
{{dsc | {{c/core|unsigned char}}     | usually {{c|true}} }}
{{dsc | {{c/core|wchar_t}}           | usually {{c|true}} }}
{{dsc | {{c/core|char8_t}} {{mark since c++20}}  | usually {{c|true}} }}
{{dsc | {{c/core|char16_t}} {{mark since c++11}} | usually {{c|true}} }}
{{dsc | {{c/core|char32_t}} {{mark since c++11}} | usually {{c|true}} }}
{{dsc | {{c/core|short}}             | usually {{c|true}} }}
{{dsc | {{c/core|unsigned short}}    | usually {{c|true}} }}
{{dsc | {{c/core|int}}               | usually {{c|true}} }}
{{dsc | {{c/core|unsigned int}}      | usually {{c|true}} }}
{{dsc | {{c/core|long}}              | usually {{c|true}} }}
{{dsc | {{c/core|unsigned long}}     | usually {{c|true}} }}
{{dsc | {{c/core|long long}} {{mark since c++11}}          | usually {{c|true}} }}
{{dsc | {{c/core|unsigned long long}} {{mark since c++11}} | usually {{c|true}} }}
{{dsc | {{c/core|float}}             | usually {{c|false}} }}
{{dsc | {{c/core|double}}            | usually {{c|false}} }}
{{dsc | {{c/core|long double}}       | usually {{c|false}} }}
{{dsc end}}

===Notes===
On most platforms integer division by zero always traps, and {{c|std::numeric_limits&lt;T&gt;::traps}} is {{c|true}} for all integer types that support the value {{c|0}}. The exception is the type {{c/core|bool}}: even though division by {{c|false}} traps due to integral promotion from {{c/core|bool}} to {{c/core|int}}, it is the zero-valued {{c/core|int}} that traps. Zero is not a value of type {{c/core|bool}}.

On most platforms, floating-point exceptions may be turned on and off at run time (e.g. {{c|feenableexcept()}} on Linux or {{c|_controlfp}} on Windows), in which case the value of {{c|std::numeric_limits&lt;T&gt;::traps}} for floating-point types reflects the state of floating-point trapping facility at the time of program startup, which is {{c|false}} on most modern systems. An exception would be a {{enwiki|DEC Alpha}} program, where it is {{c|true}} if compiled without {{tt|-ieee}}.

===Example===
{{example
|
|code=
#include &lt;iostream&gt;
#include &lt;limits&gt;

int main()
{
    std::cout &lt;&lt; std::boolalpha
              &lt;&lt; "bool:     traps = " &lt;&lt; std::numeric_limits&lt;bool&gt;::traps &lt;&lt; '\n'
              &lt;&lt; "char:     traps = " &lt;&lt; std::numeric_limits&lt;char&gt;::traps &lt;&lt; '\n'
              &lt;&lt; "char16_t: traps = " &lt;&lt; std::numeric_limits&lt;char16_t&gt;::traps &lt;&lt; '\n'
              &lt;&lt; "long:     traps = " &lt;&lt; std::numeric_limits&lt;long&gt;::traps &lt;&lt; '\n'
              &lt;&lt; "float:    traps = " &lt;&lt; std::numeric_limits&lt;float&gt;::traps &lt;&lt; '\n';
}
|p=true
|output=
// GCC output:
bool:     traps = true
char:     traps = true
char16_t: traps = true
long:     traps = true
float:    traps = false

// Clang output:
bool:     traps = false
char:     traps = true
char16_t: traps = true
long:     traps = true
float:    traps = false
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=497|std=C++98|before=it was unclear what is returned if trapping&lt;br&gt;is enabled or disabled at runtime|after=returns the enable status&lt;br&gt;at the start of the program}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc|[[cpp/numeric/fenv|Floating-point environment]]}}
{{dsc inc|cpp/types/numeric_limits/dsc tinyness_before}}
{{dsc inc|cpp/types/numeric_limits/dsc has_denorm_loss}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
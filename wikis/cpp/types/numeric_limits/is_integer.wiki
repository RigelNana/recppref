{{cpp/types/numeric_limits/title|is_integer}}
{{cpp/types/numeric_limits/navbar}}
{{dcl begin}}
{{dcl rev multi
|dcl1=
static const bool is_integer;
|since2=c++11|dcl2=
static constexpr bool is_integer;
}}
{{dcl end}}

The value of {{c|std::numeric_limits&lt;T&gt;::is_integer}} is {{c|true}} for all integer arithmetic types {{tt|T}} and {{c|false}} otherwise. This constant is meaningful for all specializations.

===Standard specializations===
{{dsc begin}}
{{dsc hitem|{{tt|T}}|value of {{c|std::numeric_limits&lt;T&gt;::is_integer}}}}
{{dsc|{{c/core|/* non-specialized */}}|{{c|false}}}}
{{dsc|{{c/core|bool}}|{{c|true}}}}
{{dsc|{{c/core|char}}|{{c|true}}}}
{{dsc|{{c/core|signed char}}|{{c|true}}}}
{{dsc|{{c/core|unsigned char}}|{{c|true}}}}
{{dsc|{{c/core|wchar_t}}|{{c|true}}}}
{{dsc|{{c/core|char8_t}} {{mark since c++20}}|{{c|true}}}}
{{dsc|{{c/core|char16_t}} {{mark since c++11}}|{{c|true}}}}
{{dsc|{{c/core|char32_t}} {{mark since c++11}}|{{c|true}}}}
{{dsc|{{c/core|short}}|{{c|true}}}}
{{dsc|{{c/core|unsigned short}}|{{c|true}}}}
{{dsc|{{c/core|int}}|{{c|true}}}}
{{dsc|{{c/core|unsigned int}}|{{c|true}}}}
{{dsc|{{c/core|long}}|{{c|true}}}}
{{dsc|{{c/core|unsigned long}}|{{c|true}}}}
{{dsc|{{c/core|long long}} {{mark since c++11}}|{{c|true}}}}
{{dsc|{{c/core|unsigned long long}} {{mark since c++11}}|{{c|true}}}}
{{dsc|{{c/core|float}}|{{c|false}}}}
{{dsc|{{c/core|double}}|{{c|false}}}}
{{dsc|{{c/core|long double}}|{{c|false}}}}
{{dsc end}}

===Example===
{{example|code=
#include &lt;cstddef&gt;
#include &lt;cstdint&gt;
#include &lt;limits&gt;

static_assert
(
        std::numeric_limits&lt;bool&gt;::is_integer
    &amp;&amp;  std::numeric_limits&lt;std::size_t&gt;::is_integer
    &amp;&amp;  std::numeric_limits&lt;std::int32_t&gt;::is_integer
    &amp;&amp;  std::numeric_limits&lt;std::int64_t&gt;::is_integer
    &amp;&amp;  std::numeric_limits&lt;decltype(42)&gt;::is_integer
    &amp;&amp; !std::numeric_limits&lt;int*&gt;::is_integer
    &amp;&amp; !std::numeric_limits&lt;float&gt;::is_integer
    &amp;&amp; !std::numeric_limits&lt;double&gt;::is_integer
    &amp;&amp; !std::numeric_limits&lt;long double&gt;::is_integer
    &amp;&amp; !std::numeric_limits&lt;decltype([](){})&gt;::is_integer // P0315R4
);

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_integral}}
{{dsc inc|cpp/types/numeric_limits/dsc is_signed}}
{{dsc inc|cpp/types/numeric_limits/dsc is_exact}}
{{dsc inc|cpp/types/numeric_limits/dsc is_bounded}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/types/numeric_limits/title|has_infinity}}
{{cpp/types/numeric_limits/navbar}}
{{dcl begin}}
{{dcl rev begin}}
{{dcl|until=c++11|1=
static const bool has_infinity;
}}
{{dcl|since=c++11|1=
static constexpr bool has_infinity;
}}
{{dcl rev end}}
{{dcl end}}

The value of {{c|std::numeric_limits&lt;T&gt;::has_infinity}} is {{c|true}} for all types {{tt|T}} capable of representing the positive infinity as a distinct special value. This constant is meaningful for all floating-point types and is guaranteed to be {{c|true}} if {{c|1=std::numeric_limits&lt;T&gt;::is_iec559 == true}}.

===Standard specializations===
{{dsc begin}}
{{dsc hitem | {{tt|T}} | value of {{c|std::numeric_limits&lt;T&gt;::has_infinity}} }}
{{dsc | {{c/core|/* non-specialized */}}     | {{c|false}} }}
{{dsc | {{c/core|bool}}              | {{c|false}} }}
{{dsc | {{c/core|char}}              | {{c|false}} }}
{{dsc | {{c/core|signed char}}       | {{c|false}} }}
{{dsc | {{c/core|unsigned char}}     | {{c|false}} }}
{{dsc | {{c/core|wchar_t}}           | {{c|false}} }}
{{dsc | {{c/core|char8_t}} {{mark since c++20}}  | {{c|false}} }}
{{dsc | {{c/core|char16_t}} {{mark since c++11}} | {{c|false}} }}
{{dsc | {{c/core|char32_t}} {{mark since c++11}} | {{c|false}} }}
{{dsc | {{c/core|short}}             | {{c|false}} }}
{{dsc | {{c/core|unsigned short}}    | {{c|false}} }}
{{dsc | {{c/core|int}}               | {{c|false}} }}
{{dsc | {{c/core|unsigned int}}      | {{c|false}} }}
{{dsc | {{c/core|long}}              | {{c|false}} }}
{{dsc | {{c/core|unsigned long}}     | {{c|false}} }}
{{dsc | {{c/core|long long}} {{mark since c++11}}          | {{c|false}} }}
{{dsc | {{c/core|unsigned long long}} {{mark since c++11}} | {{c|false}} }}
{{dsc | {{c/core|float}}             | usually {{c|true}} }}
{{dsc | {{c/core|double}}            | usually {{c|true}} }}
{{dsc | {{c/core|long double}}       | usually {{c|true}} }}
{{dsc end}}

===Example===
{{example
|
|code=
#include &lt;iostream&gt;
#include &lt;limits&gt;

int main()
{
    std::cout &lt;&lt; std::boolalpha
              &lt;&lt; std::numeric_limits&lt;int&gt;::has_infinity &lt;&lt; '\n'
              &lt;&lt; std::numeric_limits&lt;long&gt;::has_infinity &lt;&lt; '\n'
              &lt;&lt; std::numeric_limits&lt;float&gt;::has_infinity &lt;&lt; '\n'
              &lt;&lt; std::numeric_limits&lt;double&gt;::has_infinity &lt;&lt; '\n';
}
|p=true
|output=
false
false
true
true
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc infinity}}
{{dsc inc|cpp/types/numeric_limits/dsc has_quiet_NaN}}
{{dsc inc|cpp/types/numeric_limits/dsc has_signaling_NaN}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/types/numeric_limits/title|quiet_NaN}}
{{cpp/types/numeric_limits/navbar}}
{{dcl begin}}
{{dcl rev multi|until1=c++11
|dcl1=
static T quiet_NaN() throw();
|dcl2=
static constexpr T quiet_NaN() noexcept;
}}
{{dcl end}}

Returns the special value "quiet [[enwiki:NaN|not-a-number]]", as represented by the floating-point type {{tt|T}}. Only meaningful if {{c|1=std::numeric_limits&lt;T&gt;::has_quiet_NaN == true}}. In IEEE 754, the most common binary representation of floating-point numbers, any value with all bits of the exponent set and at least one bit of the fraction set represents a NaN. It is implementation-defined which values of the fraction represent quiet or signaling NaNs, and whether the sign bit is meaningful.

===Return value===
{{dsc begin}}
{{dsc hitem | {{tt|T}} | {{c|std::numeric_limits&lt;T&gt;::quiet_NaN()}} }}
{{dsc | {{c/core|/* non-specialized */}}   | {{c|T()}} }}
{{dsc | {{c/core|bool}}              | {{c|false}} }}
{{dsc | {{c/core|char}}              | {{c|0}} }}
{{dsc | {{c/core|signed char}}       | {{c|0}} }}
{{dsc | {{c/core|unsigned char}}     | {{c|0}} }}
{{dsc | {{c/core|wchar_t}}           | {{c|0}} }}
{{dsc | {{c/core|char8_t}} {{mark since c++20}}  | {{c|0}} }}
{{dsc | {{c/core|char16_t}} {{mark since c++11}} | {{c|0}} }}
{{dsc | {{c/core|char32_t}} {{mark since c++11}} | {{c|0}} }}
{{dsc | {{c/core|short}}             | {{c|0}} }}
{{dsc | {{c/core|unsigned short}}    | {{c|0}} }}
{{dsc | {{c/core|int}}               | {{c|0}} }}
{{dsc | {{c/core|unsigned int}}      | {{c|0}} }}
{{dsc | {{c/core|long}}              | {{c|0}} }}
{{dsc | {{c/core|unsigned long}}     | {{c|0}} }}
{{dsc | {{c/core|long long}} {{mark since c++11}}          | {{c|0}} }}
{{dsc | {{c/core|unsigned long long}} {{mark since c++11}} | {{c|0}} }}
{{dsc | {{c/core|float}}             | implementation-defined (may be {{lc|NAN}}) }}
{{dsc | {{c/core|double}}            | implementation-defined }}
{{dsc | {{c/core|long double}}       | implementation-defined }}
{{dsc end}}

===Notes===
A NaN never compares equal to itself. Copying a NaN may not preserve its bit representation.

===Example===
{{example
|Several ways to generate a NaN (the output string is compiler-specific):
|code=
#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;cmath&gt;

int main()
{
    std::cout &lt;&lt; std::numeric_limits&lt;double&gt;::quiet_NaN()     &lt;&lt; ' ' // nan
              &lt;&lt; std::numeric_limits&lt;double&gt;::signaling_NaN() &lt;&lt; ' ' // nan
              &lt;&lt; std::acos(2)    &lt;&lt; ' '   // nan
              &lt;&lt; std::tgamma(-1) &lt;&lt; ' '   // nan
              &lt;&lt; std::log(-1)    &lt;&lt; ' '   // nan
              &lt;&lt; std::sqrt(-1)   &lt;&lt; ' '   // -nan
              &lt;&lt; 0 / 0.0         &lt;&lt; '\n'; // -nan
    
    std::cout &lt;&lt; "NaN == NaN? " &lt;&lt; std::boolalpha
              &lt;&lt; ( std::numeric_limits&lt;double&gt;::quiet_NaN() ==
                   std::numeric_limits&lt;double&gt;::quiet_NaN() ) &lt;&lt; '\n';
}
|p=true
|output=
nan nan nan nan nan -nan -nan
NaN == NaN? false
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc has_quiet_NaN}}
{{dsc inc|cpp/types/numeric_limits/dsc signaling_NaN}}
{{dsc inc|cpp/numeric/math/dsc fnan}}
{{dsc inc|cpp/numeric/math/dsc isnan}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
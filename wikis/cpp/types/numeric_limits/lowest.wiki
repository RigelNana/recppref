{{cpp/types/numeric_limits/title|lowest}}
{{cpp/types/numeric_limits/navbar}}
{{dcl begin}}
{{dcl|since=c++11|
static constexpr T lowest() noexcept;
}}
{{dcl end}}

Returns the lowest finite value representable by the numeric type {{tt|T}}, that is, a finite value {{c|x}} such that there is no other finite value {{c|y}} where {{c|y &lt; x}}. This is different from {{c|std::numeric_limits&lt;T&gt;::min()}} for floating-point types. Only meaningful for bounded types.

===Return value===
{{dsc begin}}
{{dsc hitem | {{tt|T}} | {{c|std::numeric_limits&lt;T&gt;::lowest()}} }}
{{dsc | {{c/core|/* non-specialized */}}    | {{c|T()}}        }}
{{dsc | {{c/core|bool}}               | {{c|false}}      }}
{{dsc | {{c/core|char}}               | {{lc|CHAR_MIN}}  }}
{{dsc | {{c/core|signed char}}        | {{lc|SCHAR_MIN}} }}
{{dsc | {{c/core|unsigned char}}      | {{c|0}}          }}
{{dsc | {{c/core|wchar_t}}            | {{lc|WCHAR_MIN}} }}
{{dsc | {{c/core|char8_t}} {{mark since c++20}}            | {{c|0}}          }}
{{dsc | {{c/core|char16_t}}           | {{c|0}}          }}
{{dsc | {{c/core|char32_t}}           | {{c|0}}          }}
{{dsc | {{c/core|short}}              | {{lc|SHRT_MIN}}  }}
{{dsc | {{c/core|unsigned short}}     | {{c|0}}          }}
{{dsc | {{c/core|int}}                | {{lc|INT_MIN}}   }}
{{dsc | {{c/core|unsigned int}}       | {{c|0}}          }}
{{dsc | {{c/core|long}}               | {{lc|LONG_MIN}}  }}
{{dsc | {{c/core|unsigned long}}      | {{c|0}}          }}
{{dsc | {{c/core|long long}}          | {{lc|LLONG_MIN}} }}
{{dsc | {{c/core|unsigned long long}} | {{c|0}}          }}
{{dsc | {{c/core|float}}              | {{c|-FLT_MAX}}   }}
{{dsc | {{c/core|double}}             | {{c|-DBL_MAX}}   }}
{{dsc | {{c/core|long double}}        | {{c|-LDBL_MAX}}  }}
{{dsc end}}

===Notes===
For every standard C++ floating-point type {{tt|T}} {{c|1=std::numeric_limits&lt;T&gt;::lowest() == -std::numeric_limits&lt;T&gt;::max()}}, but this does not necessarily have to be the case for any third-party specialization.

===Example===
{{example
|Demonstrates {{lc|min()}}, {{lc|max()}}, and {{tt|lowest()}} for floating-point types:
|code=
#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;string_view&gt;

template&lt;typename T&gt;
void print_twice(std::string_view type, T value)
{
    std::cout &lt;&lt; '\t' &lt;&lt; type &lt;&lt; ": "
              &lt;&lt; std::defaultfloat &lt;&lt; value &lt;&lt; " or "
              &lt;&lt; std::hexfloat &lt;&lt; value &lt;&lt; '\n';
}

int main()
{
    // min()
    std::cout &lt;&lt; "std::numeric_limits&lt;T&gt;::min():\n";
    print_twice("float", std::numeric_limits&lt;float&gt;::min());
    print_twice("double", std::numeric_limits&lt;double&gt;::min());
    print_twice("long double", std::numeric_limits&lt;long double&gt;::min());
    
    // lowest()
    std::cout &lt;&lt; "std::numeric_limits&lt;T&gt;::lowest():\n";
    print_twice("float", std::numeric_limits&lt;float&gt;::lowest());
    print_twice("double", std::numeric_limits&lt;double&gt;::lowest());
    print_twice("long double", std::numeric_limits&lt;long double&gt;::lowest());
    
    // max()
    std::cout &lt;&lt; "std::numeric_limits&lt;T&gt;::max():\n";
    print_twice("float", std::numeric_limits&lt;float&gt;::max());
    print_twice("double", std::numeric_limits&lt;double&gt;::max());
    print_twice("long double", std::numeric_limits&lt;long double&gt;::max());
}
|output=
std::numeric_limits&lt;T&gt;::min():
	float: 1.17549e-38 or 0x1p-126
	double: 2.22507e-308 or 0x1p-1022
	long double: 3.3621e-4932 or 0x8p-16385
std::numeric_limits&lt;T&gt;::lowest():
	float: -3.40282e+38 or -0x1.fffffep+127
	double: -1.79769e+308 or -0x1.fffffffffffffp+1023
	long double: -1.18973e+4932 or -0xf.fffffffffffffffp+16380
std::numeric_limits&lt;T&gt;::max():
	float: 3.40282e+38 or 0x1.fffffep+127
	double: 1.79769e+308 or 0x1.fffffffffffffp+1023
	long double: 1.18973e+4932 or 0xf.fffffffffffffffp+16380
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc min}}
{{dsc inc|cpp/types/numeric_limits/dsc denorm_min}}
{{dsc inc|cpp/types/numeric_limits/dsc max}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
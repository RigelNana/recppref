{{cpp/types/numeric_limits/title|signaling_NaN}}
{{cpp/types/numeric_limits/navbar}}
{{dcl begin}}
{{dcl rev multi|until1=c++11
|dcl1=
static T signaling_NaN() throw();
|dcl2=
static constexpr T signaling_NaN() noexcept;
}}
{{dcl end}}

Returns the special value "signaling [[enwiki:NaN|not-a-number]]", as represented by the floating-point type {{tt|T}}. Only meaningful if {{c|1=std::numeric_limits&lt;T&gt;::has_signaling_NaN == true}}. In IEEE 754, the most common binary representation of floating-point numbers, any value with all bits of the exponent set and at least one bit of the fraction set represents a NaN. It is implementation-defined which values of the fraction represent quiet or signaling NaNs, and whether the sign bit is meaningful.

===Return value===
{{dsc begin}}
{{dsc hitem | {{tt|T}} | {{c|std::numeric_limits&lt;T&gt;::signaling_NaN()}} }}
{{dsc | {{c/core|/* non-specialized */}}   | {{c|T()}} }}
{{dsc | {{c/core|bool}}              | {{c|false}} }}
{{dsc | {{c/core|char}}              | {{c|0}} }}
{{dsc | {{c/core|signed char}}       | {{c|0}} }}
{{dsc | {{c/core|unsigned char}}     | {{c|0}} }}
{{dsc | {{c/core|wchar_t}}           | {{c|0}} }}
{{dsc | {{c/core|char8_t}} {{mark since c++20}}  | {{c|0}} }}
{{dsc | {{c/core|char16_t}} {{mark since c++11}} | {{c|0}} }}
{{dsc | {{c/core|char32_t}} {{mark since c++11}} | {{c|0}} }}
{{dsc | {{c/core|short}}             | {{c|0}} }}
{{dsc | {{c/core|unsigned short}}    | {{c|0}} }}
{{dsc | {{c/core|int}}               | {{c|0}} }}
{{dsc | {{c/core|unsigned int}}      | {{c|0}} }}
{{dsc | {{c/core|long}}              | {{c|0}} }}
{{dsc | {{c/core|unsigned long}}     | {{c|0}} }}
{{dsc | {{c/core|long long}} {{mark since c++11}}          | {{c|0}} }}
{{dsc | {{c/core|unsigned long long}} {{mark since c++11}} | {{c|0}} }}
{{dsc | {{c/core|float}}             | implementation-defined (may be {{lc|FLT_SNAN}}&lt;!-- C23 feature --&gt;) }}
{{dsc | {{c/core|double}}            | implementation-defined (may be {{lc|DBL_SNAN}}&lt;!-- C23 feature --&gt;) }}
{{dsc | {{c/core|long double}}       | implementation-defined (may be {{lc|LDBL_SNAN}}&lt;!-- C23 feature --&gt;) }}
{{dsc end}}

===Notes===
A NaN never compares equal to itself. Copying a NaN is not required, by IEEE-754, to preserve its bit representation (sign and [[cpp/numeric/math/nan|payload]]), though most implementation do.

When a signaling NaN is used as an argument to an arithmetic expression, the appropriate floating-point exception may be raised and the NaN is "quieted", that is, the expression returns a quiet NaN.

===Example===
{{example
|Demonstrates the use of a signaling NaN to raise a floating-point exception:
|code=
#include &lt;cfenv&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;

#pragma STDC_FENV_ACCESS on

void show_fe_exceptions()
{
    int n = std::fetestexcept(FE_ALL_EXCEPT);
    
    if (n &amp; FE_INVALID)
        std::cout &lt;&lt; "FE_INVALID is raised\n";
    else if (n == 0)
        std::cout &lt;&lt; "no exceptions are raised\n";
    
    std::feclearexcept(FE_ALL_EXCEPT);
}

int main()
{
    double snan = std::numeric_limits&lt;double&gt;::signaling_NaN();
    std::cout &lt;&lt; "After sNaN was obtained, ";
    show_fe_exceptions();
    
    double qnan = snan * 2.0;
    std::cout &lt;&lt; "After sNaN was multiplied by 2, ";
    show_fe_exceptions();
    
    double qnan2 = qnan * 2.0;
    std::cout &lt;&lt; "After the quieted NaN was multiplied by 2, ";
    show_fe_exceptions();
    
    std::cout &lt;&lt; "The result is " &lt;&lt; qnan2 &lt;&lt; '\n';
}
|output=
After sNaN was obtained, no exceptions are raised
After sNaN was multiplied by 2, FE_INVALID is raised
After the quieted NaN was multiplied by 2, no exceptions are raised
The result is nan
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc has_signaling_NaN}}
{{dsc inc|cpp/types/numeric_limits/dsc quiet_NaN}}
{{dsc inc|cpp/numeric/math/dsc isnan}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
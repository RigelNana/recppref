{{cpp/title|is_layout_compatible}}
{{cpp/meta/navbar}}

{{ddcl|header=type_traits|since=c++20|1=
template&lt; class T, class U &gt;
struct is_layout_compatible;
}}

If {{tt|T}} and {{tt|U}} are [[cpp/language/data members#Standard-layout|''layout-compatible'']] types, provides the member constant {{c|value}} equal to {{c|true}}. Otherwise {{c|value}} is {{c|false}}.

Every type is layout-compatible with its any cv-qualified versions, even if it is not an object type.

{{cpp/types/cvaub|type1=T|type2=U}}

{{cpp/types/nospec|pv}}

===Helper variable template===
{{ddcl|since=c++20|1=
template&lt; class T, class U &gt;
constexpr bool is_layout_compatible_v = is_layout_compatible&lt;T, U&gt;::value;
}}
{{cpp/types/integral_constant/inherit|{{tt|T}} and {{tt|U}} are layout-compatible}}

===Notes===
A signed integer type and its unsigned counterpart are not layout-compatible. {{c/core|char}} is layout-compatible with neither {{c/core|signed char}} nor {{c/core|unsigned char}}.

[[cpp/language/reinterpret_cast#Type_aliasing|Similar types]] are not layout-compatible if they are not the same type after ignoring top-level cv-qualification.

An enumeration type and its underlying type are not layout-compatible.

Array types of layout-compatible but different element types (ignoring cv-qualification) are not layout-compatible, even if they are of equal length.

{{feature test macro|__cpp_lib_is_layout_compatible|{{tt|std::is_layout_compatible}}|value=201907L|std=C++20}}

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

struct Foo
{
    int x;
    char y;
};

struct FooNua
{
    int x;
    [[no_unique_address]] char y;
};

class Bar
{
    const int u = 42;
    volatile char v = '*';
};

enum E0 : int {};
enum class E1 : int {};

static_assert
(
    std::is_layout_compatible_v&lt;const void, volatile void&gt; == true  and
    std::is_layout_compatible_v&lt;Foo, Bar&gt;                  == true  and
    std::is_layout_compatible_v&lt;Foo[2], Bar[2]&gt;            == false and
    std::is_layout_compatible_v&lt;int, E0&gt;                   == false and
    std::is_layout_compatible_v&lt;E0, E1&gt;                    == true  and
    std::is_layout_compatible_v&lt;long, unsigned long&gt;       == false and
    std::is_layout_compatible_v&lt;char*, const char*&gt;        == false and
    std::is_layout_compatible_v&lt;char*, char* const&gt;        == true  and
    std::is_layout_compatible_v&lt;Foo, FooNua&gt;               == false // Note [1]
);

// [1] MSVC erroneously fails this assert

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_standard_layout}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
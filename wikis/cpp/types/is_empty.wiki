{{cpp/types/traits/is|1=is_empty
|description=If {{tt|T}} is an empty type (that is, a non-union class type with no non-static data members other than bit-fields of size 0, no virtual functions, no virtual base classes, and no non-empty base classes), provides the member constant {{tt|value}} equal to {{c|true}}. For any other type, {{tt|value}} is {{c|false}}.

If {{tt|T}} is an incomplete non-union class type, the behavior is undefined.
|inherit_desc= {{tt|T}} is an empty class type
}}

===Notes===
Inheriting from empty base classes usually does not increase the size of a class due to [[cpp/language/ebo|empty base optimization]].

{{tt|std::is_empty&lt;T&gt;}} and all other type traits are empty classes.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

struct A {};
static_assert(std::is_empty_v&lt;A&gt; == true);

struct B { int m; };
static_assert(std::is_empty_v&lt;B&gt; == false);

struct C { static int m; };
static_assert(std::is_empty_v&lt;C&gt; == true);

struct D { virtual ~D(); };
static_assert(std::is_empty_v&lt;D&gt; == false);

union E {};
static_assert(std::is_empty_v&lt;E&gt; == false);

struct F { [[no_unique_address]] E e; };

struct G
{
    int:0;
    // C++ standard allow "as a special case, an unnamed bit-field with a width of zero
    // specifies alignment of the next bit-field at an allocation unit boundary.
    // Only when declaring an unnamed bit-field may the width be zero."
};
static_assert(std::is_empty_v&lt;G&gt;); // holds only unnamed bit-fields of zero width

int main()
{
    std::cout &lt;&lt; std::boolalpha;
    std::cout &lt;&lt; "F: " &lt;&lt; std::is_empty_v&lt;F&gt; &lt;&lt; '\n'; // the result is ABI-dependent
}
|p=true
|output=
F: true
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2015|std=C++11|before=the behavior was undefined if&lt;br&gt;{{tt|T}} is an incomplete union type|after=the base characteristic is&lt;br&gt;{{lc|std::false_type}} in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_class}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
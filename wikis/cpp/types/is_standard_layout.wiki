{{cpp/types/traits/is|1=is_standard_layout
|description= 
If {{tt|T}} is a [[cpp/named req/StandardLayoutType|standard-layout type]], provides the member constant {{tt|value}} equal to {{c|true}}. For any other type, {{tt|value}} is {{c|false}}.

If {{c/core|std::remove_all_extents_t&lt;T&gt;}} is an incomplete type and not (possibly cv-qualified) {{c/core|void}}, the behavior is undefined.
|inherit_desc={{tt|T}} is a standard-layout type
}}

===Notes===
A pointer to a standard-layout class may be converted (with {{c/core|reinterpret_cast}}) to a pointer to its first non-static data member and vice versa.

If a standard-layout union holds two or more standard-layout structs, it is permitted to inspect the common initial part of them.

The macro {{lc|offsetof}} is only guaranteed to be usable with standard-layout classes.

===Example===
{{example
|code=
#include &lt;type_traits&gt;

struct A { int m; };
static_assert(std::is_standard_layout_v&lt;A&gt; == true);

class B: public A { int m; };
static_assert(std::is_standard_layout_v&lt;B&gt; == false);

struct C { virtual void foo(); };
static_assert(std::is_standard_layout_v&lt;C&gt; == false);

int main() {}
|output=
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2015|std=C++11|before={{tt|T}} could be an array of incomplete&lt;br&gt;class type with unknown bound|after=the behavior is&lt;br&gt;undefined in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_trivially_copyable}}
{{dsc inc|cpp/types/dsc is_pod}}
{{dsc inc|cpp/types/dsc offsetof}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
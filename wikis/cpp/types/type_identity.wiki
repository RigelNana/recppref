{{cpp/title|type_identity}}
{{cpp/meta/navbar}}
{{dcl begin}}
{{dcl header|type_traits}}
{{dcl|since=c++20|
template&lt; class T &gt;
struct type_identity;
}}
{{dcl end}}

Provides the member typedef {{tt|type}} that names {{tt|T}} (i.e., the identity transformation).

{{cpp/types/nospec}}

===Member types===
{{dsc begin}}
{{dsc hitem|Name|Definition}}
{{dsc|{{tt|type}}|{{tt|T}}}}
{{dsc end}}

===Helper types===
{{ddcl|since=c++20|1=
template&lt; class T &gt;
using type_identity_t = type_identity&lt;T&gt;::type;
}}

===Possible implementation===
{{eq fun
|1=
template&lt;class T&gt;
struct type_identity { using type = T; };
}}

=== Notes ===
{{tt|std::type_identity}} can be used to establish [[cpp/language/template argument deduction#Non-deduced contexts|non-deduced contexts]] in template argument deduction.

{{feature test macro|__cpp_lib_type_identity|{{tt|std::type_identity}}|value=201806L|std=C++20}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

template&lt;class T&gt;
T foo(T a, T b) { return a + b; }

template&lt;class T&gt;
T bar(T a, std::type_identity_t&lt;T&gt; b) { return a + b; }

int main()
{
    // foo(4.2, 1); // error, deduced conflicting types for 'T'
    std::cout &lt;&lt; bar(4.2, 1) &lt;&lt; '\n';  // OK, calls bar&lt;double&gt;
}
|p=false
|output=
5.2
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc identity}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
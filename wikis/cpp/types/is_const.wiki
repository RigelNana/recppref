{{cpp/types/traits/is|1=is_const
|description=If {{tt|T}} is a const-qualified type (that is, {{c/core|const}}, or {{c/core|const volatile}}), provides the member constant {{c|value}} equal to {{c|true}}. For any other type, {{c|value}} is {{c|false}}.
|inherit_desc= {{tt|T}} is a const-qualified type
}}

===Notes===
If {{c|T}} is a reference type then {{c|is_const&lt;T&gt;::value}} is always {{c|false}}. The proper way to check a potentially-reference type for constness is to remove the reference:
{{c|is_const&lt;typename remove_reference&lt;T&gt;::type&gt;}}.

===Possible implementation===
{{eq fun
|1=
template&lt;class T&gt; struct is_const          : std::false_type {};
template&lt;class T&gt; struct is_const&lt;const T&gt; : std::true_type {};
}}

===Example===
{{example
|code=
#include &lt;type_traits&gt;

static_assert(std::is_same_v&lt;const int*, int const*&gt;,
    "Remember, constness binds tightly inside pointers.");
static_assert(!std::is_const_v&lt;int&gt;);
static_assert(std::is_const_v&lt;const int&gt;);
static_assert(!std::is_const_v&lt;int*&gt;);
static_assert(std::is_const_v&lt;int* const&gt;,
    "Because the pointer itself can't be changed but the int pointed at can.");
static_assert(!std::is_const_v&lt;const int*&gt;,
    "Because the pointer itself can be changed but not the int pointed at.");
static_assert(!std::is_const_v&lt;const int&amp;&gt;);
static_assert(std::is_const_v&lt;std::remove_reference_t&lt;const int&amp;&gt;&gt;);

struct S
{
    void foo() const {}
    void bar() const {}
};

int main()
{
    // A const member function is const in a different way:

    static_assert(!std::is_const_v&lt;decltype(&amp;S::foo)&gt;,
        "Because &amp;S::foo is a pointer.");

    using S_mem_fun_ptr = void(S::*)() const;

    S_mem_fun_ptr sfp = &amp;S::foo;
    sfp = &amp;S::bar; // OK, can be re-pointed
    static_assert(!std::is_const_v&lt;decltype(sfp)&gt;,
        "Because sfp is the same pointer type and thus can be re-pointed.");

    const S_mem_fun_ptr csfp = &amp;S::foo;
    // csfp = &amp;S::bar; // Error
    static_assert(std::is_const_v&lt;decltype(csfp)&gt;,
        "Because csfp cannot be re-pointed.");
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_volatile}}
{{dsc inc|cpp/utility/dsc as_const}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
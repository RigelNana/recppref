{{cpp/title|remove_cvref}}
{{cpp/meta/navbar}}
{{dcl begin}}
{{dcl header|type_traits}}
{{dcl|since=c++20|1=
template&lt; class T &gt;
struct remove_cvref;
}}
{{dcl end}}

If the type {{tt|T}} is a reference type, provides the member typedef {{tt|type}} which is the type referred to by {{tt|T}} with its topmost cv-qualifiers removed. Otherwise {{tt|type}} is {{tt|T}} with its topmost cv-qualifiers removed.

{{cpp/types/nospec}}

===Member types===
{{dsc begin}}
{{dsc hitem|Name|Definition}}
{{dsc|{{tt|type}}|the type referred by {{tt|T}} or {{tt|T}} itself if it is not a reference, with top-level cv-qualifiers removed}}
{{dsc end}}

===Helper types===
{{dcl begin}}
{{dcl|since=c++20|1=
template&lt; class T &gt;
using remove_cvref_t = remove_cvref&lt;T&gt;::type;
}}
{{dcl end}}

===Possible implementation===
{{eq fun
|1=
template&lt;class T&gt;
struct remove_cvref
{
    using type = std::remove_cv_t&lt;std::remove_reference_t&lt;T&gt;&gt;;
};
}}

===Notes===
{{feature test macro|__cpp_lib_remove_cvref|{{tt|std::remove_cvref}}|value=201711L|std=C++20}}

===Example===
{{example
|code=
#include &lt;type_traits&gt;

int main()
{
    static_assert(std::is_same_v&lt;std::remove_cvref_t&lt;int&gt;, int&gt;);
    static_assert(std::is_same_v&lt;std::remove_cvref_t&lt;int&amp;&gt;, int&gt;);
    static_assert(std::is_same_v&lt;std::remove_cvref_t&lt;int&amp;&amp;&gt;, int&gt;);
    static_assert(std::is_same_v&lt;std::remove_cvref_t&lt;const int&amp;&gt;, int&gt;);
    static_assert(std::is_same_v&lt;std::remove_cvref_t&lt;const int[2]&gt;, int[2]&gt;);
    static_assert(std::is_same_v&lt;std::remove_cvref_t&lt;const int(&amp;)[2]&gt;, int[2]&gt;);
    static_assert(std::is_same_v&lt;std::remove_cvref_t&lt;int(int)&gt;, int(int)&gt;);
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc remove_cv}}
{{dsc inc|cpp/types/dsc remove_reference}}
{{dsc inc|cpp/types/dsc decay}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/title|is_copy_constructible|is_trivially_copy_constructible|is_nothrow_copy_constructible}}
{{cpp/meta/navbar}}
{{dcl begin}}
{{dcl header|type_traits}}
{{dcl|since=c++11|num=1|
template&lt; class T &gt;
struct is_copy_constructible;
}}
{{dcl|since=c++11|num=2|
template&lt; class T &gt;
struct is_trivially_copy_constructible;
}}
{{dcl|since=c++11|num=3|
template&lt; class T &gt;
struct is_nothrow_copy_constructible;
}}
{{dcl end}}

{|class="wikitable" style="text-align: center;"
!rowspan=2|{{nbsp}}Type trait{{nbsp}}
!colspan=2|The value of the member constant {{ttn|value}}
|-
!{{ttn|T}} is a [[cpp/meta#Definitions|referenceable type]]
!{{nbsp}}{{ttn|T}} is not a referenceable type{{nbsp}}
|-
|{{v|1}}
|{{c|std::is_constructible&lt;T, const T&amp;&gt;::value}}
|rowspan=3|{{c|false}}
|-
|{{v|2}}
|{{c|std::is_trivially_constructible&lt;T, const T&amp;&gt;::value}}
|-
|{{v|3}}
|{{c|std::is_nothrow_constructible&lt;T, const T&amp;&gt;::value}}
|}

{{cpp/types/cvaub}}

{{cpp/types/nospec|any}}

===Helper variable templates===
{{dcl begin}}
{{dcl|since=c++17|1=
template&lt; class T &gt;
inline constexpr bool is_copy_constructible_v =
    is_copy_constructible&lt;T&gt;::value;
}}
{{dcl|since=c++17|1=
template&lt; class T &gt;
inline constexpr bool is_trivially_copy_constructible_v =
    is_trivially_copy_constructible&lt;T&gt;::value;
}}
{{dcl|since=c++17|1=
template&lt; class T &gt;
inline constexpr bool is_nothrow_copy_constructible_v =
    is_nothrow_copy_constructible&lt;T&gt;::value;
}}
{{dcl end}}

{{cpp/types/integral_constant/inherit|{{tt|T}} is copy-constructible}}

===Possible implementation===
{{eq fun
|1=
template&lt;class T&gt;
struct is_copy_constructible :
    std::is_constructible&lt;T, typename std::add_lvalue_reference&lt;
        typename std::add_const&lt;T&gt;::type&gt;::type&gt; {};

template&lt;class T&gt;
struct is_trivially_copy_constructible :
    std::is_trivially_constructible&lt;T, typename std::add_lvalue_reference&lt;
        typename std::add_const&lt;T&gt;::type&gt;::type&gt; {};

template&lt;class T&gt;
struct is_nothrow_copy_constructible :
    std::is_nothrow_constructible&lt;T, typename std::add_lvalue_reference&lt;
        typename std::add_const&lt;T&gt;::type&gt;::type&gt; {};
}}

===Notes===
In many implementations, {{tt|is_nothrow_copy_constructible}} also checks if the destructor throws because it is effectively {{c|noexcept(T(arg))}}. Same applies to {{tt|is_trivially_copy_constructible}}, which, in these implementations, also requires that the destructor is trivial: [https://gcc.gnu.org/bugzilla/show_bug.cgi?id=51452 GCC bug 51452], {{lwg|2116}}.

===Example===
{{example
|code=
#include &lt;string&gt;
#include &lt;type_traits&gt;

struct S1
{
    std::string str; // member has a non-trivial copy constructor
};
static_assert(std::is_copy_constructible_v&lt;S1&gt;);
static_assert(!std::is_trivially_copy_constructible_v&lt;S1&gt;);

struct S2
{
    int n;
    S2(const S2&amp;) = default; // trivial and non-throwing
};
static_assert(std::is_trivially_copy_constructible_v&lt;S2&gt;);
static_assert(std::is_nothrow_copy_constructible_v&lt;S2&gt;);

struct S3
{
    S3(const S3&amp;) = delete; // explicitly deleted
};
static_assert(!std::is_copy_constructible_v&lt;S3&gt;);

struct S4
{
    S4(S4&amp;) {}; // cannot bind const, hence not a copy-constructible
};
static_assert(!std::is_copy_constructible_v&lt;S4&gt;);

int main() {}
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2196|std=C++11|before=the behavior was unclear if {{c/core|const T&amp;}} cannot be formed|after=the value produced is {{c|false}} in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_constructible}}
{{dsc inc|cpp/types/dsc is_default_constructible}}
{{dsc inc|cpp/types/dsc is_move_constructible}}
{{dsc inc|cpp/concepts/dsc copy_constructible}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
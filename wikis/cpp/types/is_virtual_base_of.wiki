{{cpp/title|is_virtual_base_of}}
{{cpp/meta/navbar}}
{{ddcl|header=type_traits|since=c++26|1=
template&lt; class Base, class Derived &gt;
struct is_virtual_base_of;
}}

{{tt|std::is_virtual_base_of}} is a {{named req|BinaryTypeTrait}}.

If {{tt|Base}} is a [[cpp/language/derived_class#Virtual base classes|virtual base class]] of {{tt|Derived}} (ignoring cv-qualification), provides the member constant {{c|value}} equal to {{c|true}}. Otherwise {{c|value}} is {{c|false}}.

If both {{tt|Base}} and {{tt|Derived}} are non-union class types (ignoring cv-qualification), {{tt|Derived}} should be a [[cpp/language/incomplete type|complete type]]; otherwise the behavior is undefined.

{{cpp/types/nospec|pv}}

===Helper variable template===
{{ddcl|since=c++26|1=
template&lt; class Base, class Derived &gt;
constexpr bool is_virtual_base_of_v = is_virtual_base_of&lt;Base, Derived&gt;::value;
}}
{{cpp/types/integral_constant/inherit|{{tt|Derived}} is derived from virtual base class {{tt|Base}} (ignoring cv-qualification)}}

===Notes===
{{c|std::is_virtual_base_of_v&lt;A, B&gt;}} is {{c|true}} even if {{tt|A}} is a private, protected, or ambiguous base class of {{tt|B}}.

If {{c|std::is_virtual_base_of_v&lt;A, B&gt;}} is {{c|true}}, then {{c|std::is_base_of_v&lt;A, B&gt;}} is also {{c|true}}. However, the converse is not always true because the check for virtual inheritance is more specific. In that case, {{c|std::is_virtual_base_of_v&lt;T, T&gt;}} is {{c|false}} even if {{tt|T}} is a non-union class type.

===Example===
{{example|code=
#include &lt;type_traits&gt;

class A {};
class B : A {};
class C : B {};
class D : virtual A {};
class E : D {};

union F {};
using I = int;

static_assert
(
    std::is_virtual_base_of_v&lt;A, A&gt; != true &amp;&amp;
    std::is_virtual_base_of_v&lt;A, B&gt; != true &amp;&amp;
    std::is_virtual_base_of_v&lt;A, D&gt; == true &amp;&amp;
    std::is_virtual_base_of_v&lt;D, E&gt; != true &amp;&amp;
    std::is_virtual_base_of_v&lt;F, F&gt; != true &amp;&amp;
    std::is_virtual_base_of_v&lt;I, I&gt; != true
);

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_base_of}}
{{dsc inc|cpp/types/dsc is_convertible}}
{{dsc inc|cpp/concepts/dsc derived_from}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
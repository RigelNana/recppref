{{cpp/types/traits/is|1=is_scalar
|description=
If {{tt|T}} is a [[cpp/named req/ScalarType|scalar type]], provides the member constant {{tt|value}} equal {{c|true}}. For any other type, {{tt|value}} is {{c|false}}.
|inherit_desc={{tt|T}} is a scalar type
}}

===Notes===
Each individual memory location in the C++ memory model, including the hidden memory locations used by language features (e.g. virtual table pointer), has scalar type (or is a sequence of adjacent bit-fields of non-zero length). Sequencing of side-effects in expression evaluation, inter-thread synchronization, and dependency ordering are all defined in terms of individual scalar objects.

===Possible implementation===
{{eq fun
|1=
template&lt;class T&gt;
struct is_scalar : std::integral_constant&lt;bool, std::is_arithmetic&lt;T&gt;::value
                                             {{!!}} std::is_enum&lt;T&gt;::value
                                             {{!!}} std::is_pointer&lt;T&gt;::value
                                             {{!!}} std::is_member_pointer&lt;T&gt;::value
                                             {{!!}} std::is_null_pointer&lt;T&gt;::value&gt;
{};
}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;type_traits&gt;
#include &lt;typeinfo&gt;
#include &lt;utility&gt;

template&lt;typename Head, typename... Tail&gt;
void are_scalars(Head&amp;&amp; head, Tail&amp;&amp;... tail)
{
    using T = std::decay_t&lt;decltype(head)&gt;;
    
    std::cout &lt;&lt; typeid(T).name() &lt;&lt; " is "
              &lt;&lt; (std::is_scalar_v&lt;T&gt; ? "" : "not ")
              &lt;&lt; "a scalar\n";
    
    if constexpr (sizeof... (Tail))
    {
        are_scalars(std::forward&lt;decltype(tail)&gt;(tail)...);
    }
}

int main()
{
    struct S { int m; } s;
    int S::* mp = &amp;S::m;
    enum class E { e };
    
    are_scalars(42, 3.14, E::e, "str", mp, nullptr, s);
}
|p=true
|output=
int is a scalar
double is a scalar
main::E is a scalar
char const* is a scalar
int main::S::* is a scalar
nullptr is a scalar
main::S is not a scalar
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_arithmetic}}
{{dsc inc|cpp/types/dsc is_enum}}
{{dsc inc|cpp/types/dsc is_pointer}}
{{dsc inc|cpp/types/dsc is_member_pointer}}

{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{title|Fixed width integer types {{mark since c++11}}}}
{{cpp/types/navbar}}

===Types===
{{dsc begin}}
{{dsc header|cstdint}}
{{dsc inc|cpp/types/dsc intN_t}}
{{dsc inc|cpp/types/dsc int_fastN_t}}
{{dsc inc|cpp/types/dsc int_leastN_t}}
{{dsc inc|cpp/types/dsc intmax_t}}
{{dsc inc|cpp/types/dsc intptr_t}}
{{dsc inc|cpp/types/dsc uintN_t}}
{{dsc inc|cpp/types/dsc uint_fastN_t}}
{{dsc inc|cpp/types/dsc uint_leastN_t}}
{{dsc inc|cpp/types/dsc uintmax_t}}
{{dsc inc|cpp/types/dsc uintptr_t}}
{{dsc end}}

The implementation may define typedef names {{tt|int''N''_t}}, {{tt|int_fast''N''_t}}, {{tt|int_least''N''_t}}, {{tt|uint''N''_t}}, {{tt|uint_fast''N''_t}}, and {{tt|uint_least''N''_t}} when ''N'' is not 8, 16, 32 or 64. Typedef names of the form {{tt|int''N''_t}} may only be defined if the implementation supports an integer type of that width with no padding. Thus, {{tt|std::uint24_t}} denotes an unsigned integer type with a width of exactly 24 bits.

Each of the macros listed in below is defined if and only if the implementation defines the corresponding typedef name. The macros {{tt|INT''N''_C}} and {{tt|UINT''N''_C}} correspond to the typedef names {{tt|int_least''N''_t}} and {{tt|uint_least''N''_t}}, respectively.

===Macro constants===
{{dsc begin}}
{{dsc header|cstdint}}
{{dsc h2|Signed integers : minimum value}}
{{dsc inc|cpp/types/dsc INTn_MIN}}
{{dsc inc|cpp/types/dsc INT_FASTn_MIN}}
{{dsc inc|cpp/types/dsc INT_LEASTn_MIN}}
{{dsc inc|cpp/types/dsc INTPTR_MIN}}
{{dsc inc|cpp/types/dsc INTMAX_MIN}}
{{dsc h2|Signed integers : maximum value|nolink=true}}
{{dsc inc|cpp/types/dsc INTn_MAX}}
{{dsc inc|cpp/types/dsc INT_FASTn_MAX}}
{{dsc inc|cpp/types/dsc INT_LEAST8_MAX}}
{{dsc inc|cpp/types/dsc INTPTR_MAX}}
{{dsc inc|cpp/types/dsc INTMAX_MAX}}
{{dsc h2|Unsigned integers : maximum value|nolink=true}}
{{dsc inc|cpp/types/dsc UINTn_MAX}}
{{dsc inc|cpp/types/dsc UINT_FASTn_MAX}}
{{dsc inc|cpp/types/dsc UINT_LEASTn_MAX}}
{{dsc inc|cpp/types/dsc UINTPTR_MAX}}
{{dsc inc|cpp/types/dsc UINTMAX_MAX}}
{{dsc end}}

===Function macros for minimum-width integer constants===
{{dsc begin}}
{{dsc inc|cpp/types/dsc INTn_C}}
{{dsc inc|cpp/types/dsc INTMAX_C}}
{{dsc inc|cpp/types/dsc UINTn_C}}
{{dsc inc|cpp/types/dsc UINTMAX_C}}
{{dsc end}}

{{source|
#include &lt;cstdint&gt;
UINT64_C(0x123) // expands to a literal of type uint_least64_t and value 0x123
}}

===Format macro constants===
{{dsc begin}}
{{dsc header|cinttypes}}
{{dsc end}}

====Format constants for the {{lc|std::fprintf}} family of functions====
Each of the {{tt|PRI}} macros listed here is defined if and only if the implementation defines the corresponding typedef name.

{| class="wikitable" style="text-align:center; font-size:85%; max-width:90em;"
|-
! rowspan=2|Equivalent&lt;br&gt;for {{c/core|int}} or&lt;br&gt;{{c/core|unsigned int}}
! rowspan=2|Description
! colspan=5|Macros for data types
|-
|&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;{{vertical|{{tt|std::int}}'''x'''{{tt|_t}}}}&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
|{{vertical|{{tt|std::int_least}}'''x'''{{lc|_t}}}}
|{{vertical|{{tt|std::int_fast}}'''x'''{{lc|_t}}}}
|{{vertical|{{tt|std::intmax_t}}}}
|{{vertical|{{tt|std::intptr_t}}}}
|-
! {{tt|d}}
|rowspan=2 style="text-align:left;"|output of a signed decimal integer value
|PRId'''x'''
|PRIdLEAST'''x'''
|PRIdFAST'''x'''
|PRIdMAX
|PRIdPTR
|-
! {{tt|i}}
|PRIi'''x'''
|PRIiLEAST'''x'''
|PRIiFAST'''x'''
|PRIiMAX
|PRIiPTR
|-
! {{tt|u}}
|style="text-align:left;"|output of an unsigned decimal integer value
|PRIu'''x'''
|PRIuLEAST'''x'''
|PRIuFAST'''x'''
|PRIuMAX
|PRIuPTR
|-
! {{tt|o}}
|style="text-align:left;"|output of an unsigned octal integer value
|PRIo'''x'''
|PRIoLEAST'''x'''
|PRIoFAST'''x'''
|PRIoMAX
|PRIoPTR
|-
! {{tt|x}}
|style="text-align:left;"|output of an unsigned lowercase hexadecimal integer value
|PRIx'''x'''
|PRIxLEAST'''x'''
|PRIxFAST'''x'''
|PRIxMAX
|PRIxPTR
|-
! {{tt|X}}
|style="text-align:left;"|output of an unsigned uppercase hexadecimal integer value
|PRIX'''x'''
|PRIXLEAST'''x'''
|PRIXFAST'''x'''
|PRIXMAX
|PRIXPTR
|}

====Format constants for the {{lc|std::fscanf}} family of functions====
Each of the {{tt|SCN}} macros listed in here is defined if and only if the implementation defines the corresponding typedef name and has a suitable {{lc|std::fscanf}} length modifier for the type.

{| class="wikitable" style="text-align:center; font-size:85%; max-width:90em;"
|-
! rowspan=2|Equivalent&lt;br&gt;for {{c/core|int}} or&lt;br&gt;{{c/core|unsigned int}}
! rowspan=2|Description
! colspan=5|Macros for data types
|-
|&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;{{vertical|{{tt|std::int}}'''x'''{{tt|_t}}}}&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
|{{vertical|{{tt|std::int_least}}'''x'''{{lc|_t}}}}
|{{vertical|{{tt|std::int_fast}}'''x'''{{lc|_t}}}}
|{{vertical|{{tt|std::intmax_t}}}}
|{{vertical|{{tt|std::intptr_t}}}}
|-
! {{tt|d}}
|style="text-align:left;"|input of a signed decimal integer value
|SCNd'''x'''
|SCNdLEAST'''x'''
|SCNdFAST'''x'''
|SCNdMAX
|SCNdPTR
|-
! {{tt|i}}
|style="text-align:left;"|input of a signed integer value
|SCNi'''x'''
|SCNiLEAST'''x'''
|SCNiFAST'''x'''
|SCNiMAX
|SCNiPTR
|-
! {{tt|u}}
|style="text-align:left;"|input of an unsigned decimal integer value
|SCNu'''x'''
|SCNuLEAST'''x'''
|SCNuFAST'''x'''
|SCNuMAX
|SCNuPTR
|-
! {{tt|o}}
|style="text-align:left;"|input of an unsigned octal integer value
|SCNo'''x'''
|SCNoLEAST'''x'''
|SCNoFAST'''x'''
|SCNoMAX
|SCNoPTR
|-
! {{tt|x}}
|style="text-align:left;"|input of an unsigned hexadecimal integer value
|SCNx'''x'''
|SCNxLEAST'''x'''
|SCNxFAST'''x'''
|SCNxMAX
|SCNxPTR
|}
&lt;!-- note: SCNX* macros listed in [c.files] of C++11 and C++14 do not exist; they were an editorial error corrected in a post-C++14 standard draft --&gt;

===Notes===
Because C++ interprets a character immediately following a string literal as a [[cpp/language/user literal|user-defined string literal]], C code such as {{c|printf("%"PRId64"\n",n);}} is invalid C++ and requires a space before {{tt|PRId64}}.

The C99 standard suggests that C++ implementations should not define the above limit, constant, or format macros unless the macros {{c|__STDC_LIMIT_MACROS}}, {{c|__STDC_CONSTANT_MACROS}} or {{c|__STDC_FORMAT_MACROS}} (respectively) are defined before including the relevant C header ({{tt|stdint.h}} or {{tt|inttypes.h}}). This recommendation was not adopted by any C++ standard and was removed in C11. However, some implementations (such as glibc 2.17) try to apply this rule, and it may be necessary to define the {{tt|__STDC}} macros; C++ compilers may try to work around this by automatically defining them in some circumstances.

{{tt|std::int8_t}} may be {{c/core|signed char}} and {{tt|std::uint8_t}} may be {{c/core|unsigned char}}, but neither can be {{c/core|char}} regardless of its signedness (because {{c/core|char}} is not considered a "signed integer type" or "unsigned integer type").

===Example===
{{example
|See also a [[cpp/language/user_literal#Notes|note]] regarding spaces before [[#Format macro constants|format macros]] used in this example.
|code=
#include &lt;cinttypes&gt;
#include &lt;cstdio&gt;

int main()
{
    std::printf("%zu\n", sizeof(std::int64_t));
    std::printf("%s\n", PRId64);
    std::printf("%+" PRId64 "\n", INT64_MIN);
    std::printf("%+" PRId64 "\n", INT64_MAX);
    
    std::int64_t n = 7;
    std::printf("%+" PRId64 "\n", n);
}
|p=true
|output=
8
lld
-9223372036854775808
+9223372036854775807
+7
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2820|std=C++11|before=the requirements for optional typedef names and macros were inconsistent with C|after=made consistent}}
{{dr list end}}

===References===
{{ref std c++23}}
{{ref std|section=17.4.1|title=Header &lt;cstdint&gt; synopsis|id=cstdint.syn}}
{{ref std|section=31.13.2|title=Header &lt;cinttypes&gt; synopsis|id=cinttypes.syn}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=17.4|title=Integer types|id=cstdint}}
{{ref std|section=29.12.2|title=Header &lt;cinttypes&gt; synopsis|id=cinttypes.syn}}
{{ref std end}}
{{ref std c++17}}
{{ref std|section=21.4|title=Integer types|id=cstdint}}
{{ref std|section=30.11.2|title=Header &lt;cinttypes&gt; synopsis|id=cinttypes.syn}}
{{ref std end}}
{{ref std c++14}}
{{ref std|section=18.4|title=Integer types|id=cstdint}}
{{ref std|section=27.9.2|title=C library files|id=c.files}}
{{ref std end}}
{{ref std c++11}}
{{ref std|section=18.4|title=Integer types|id=cstdint}}
{{ref std|section=27.9.2|title=C library files|id=c.files}}
{{ref std end}}

===See also===
* [[cpp/language/types|Fundamental types]]
{{dsc begin}}
{{dsc see c|c/types/integer|Fixed width integer types|nomono=true}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
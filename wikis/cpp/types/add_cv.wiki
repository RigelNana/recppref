{{cpp/title|add_cv|add_const|add_volatile}}
{{cpp/meta/navbar}}
{{dcl begin}}
{{dcl header | type_traits}}
{{dcl | since=c++11 | num=1 |
template&lt; class T &gt;
struct add_cv;
}}
{{dcl | since=c++11 | num=2 |
template&lt; class T &gt;
struct add_const;
}}
{{dcl | since=c++11 | num=3 |
template&lt; class T &gt;
struct add_volatile;
}}
{{dcl end}}

Provides the member typedef {{tt|type}} which is the same as {{tt|T}}, except it has a cv-qualifier added (unless {{tt|T}} is a function, a reference, or already has this cv-qualifier)

@1@ adds both {{c|const}} and {{c|volatile}}

@2@ adds {{c|const}}

@3@ adds {{c|volatile}}

{{cpp/types/nospec|any}}

===Member types===
{{dsc begin}}
{{dsc hitem | Name | Definition}}
{{dsc | {{tt|type}} | the type {{tt|T}} with the cv-qualifier }}
{{dsc end}}

===Helper types===
{{dcl begin}}
{{dcl | since=c++14 | 1=
template&lt; class T &gt;
using add_cv_t       = typename add_cv&lt;T&gt;::type;
}}
{{dcl | since=c++14 | 1=
template&lt; class T &gt;
using add_const_t    = typename add_const&lt;T&gt;::type;
}}
{{dcl | since=c++14 | 1=
template&lt; class T &gt;
using add_volatile_t = typename add_volatile&lt;T&gt;::type;
}}
{{dcl end}}

===Possible implementation===
{{eq fun
 | 1=
template&lt;class T&gt; struct add_cv { typedef const volatile T type; };

template&lt;class T&gt; struct add_const { typedef const T type; };

template&lt;class T&gt; struct add_volatile { typedef volatile T type; };
}}

===Notes===
These transformation traits can be used to establish [[cpp/language/template_argument_deduction#Non-deduced contexts|non-deduced contexts]] in template argument deduction:

{{source|1=
template&lt;class T&gt;
void f(const T&amp;, const T&amp;);

template&lt;class T&gt;
void g(const T&amp;, std::add_const_t&lt;T&gt;&amp;);

f(4.2, 0); // error, deduced conflicting types for 'T'
g(4.2, 0); // OK, calls g&lt;double&gt;
}}

===Example===
{{example
 |
 | code=
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

struct foo
{
    void m() { std::cout &lt;&lt; "Non-cv\n"; }
    void m() const { std::cout &lt;&lt; "Const\n"; }
    void m() volatile { std::cout &lt;&lt; "Volatile\n"; }
    void m() const volatile { std::cout &lt;&lt; "Const-volatile\n"; }
};

int main()
{
    foo{}.m();
    std::add_const&lt;foo&gt;::type{}.m();
    std::add_volatile&lt;foo&gt;::type{}.m();
    std::add_cv&lt;foo&gt;::type{}.m();
}
 | output=
Non-cv
Const
Volatile
Const-volatile
}}

===See also===
{{dsc begin}}
{{dsc inc | cpp/types/dsc is_const}}
{{dsc inc | cpp/types/dsc is_volatile}}
{{dsc inc | cpp/types/dsc remove_cv}}
{{dsc inc | cpp/utility/dsc as_const}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/types/traits/is|1=is_bounded_array
|std=c++20
|description=
Checks whether {{tt|T}} is an array type of known bound. Provides the member constant {{tt|value}} which is equal to {{c|true}}, if {{tt|T}} is an array type of known bound. Otherwise, {{tt|value}} is equal to {{c|false}}.
|inherit_desc={{tt|T}} is an array type of known bound
}}

===Possible implementation===
{{eq fun
|1=
template&lt;class T&gt;
struct is_bounded_array : std::false_type {};

template&lt;class T, std::size_t N&gt;
struct is_bounded_array&lt;T[N]&gt; : std::true_type {};
}}

===Notes===
{{feature test macro|__cpp_lib_bounded_array_traits|{{tt|std::is_bounded_array}}, {{lc|std::is_unbounded_array}}|value=201902L|std=C++20}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

#define OUT(...) std::cout &lt;&lt; #__VA_ARGS__ &lt;&lt; " : " &lt;&lt; __VA_ARGS__ &lt;&lt; '\n'

class A {};

int main()
{
    std::cout &lt;&lt; std::boolalpha;
    OUT(std::is_bounded_array_v&lt;A&gt;);
    OUT(std::is_bounded_array_v&lt;A[]&gt;);
    OUT(std::is_bounded_array_v&lt;A[3]&gt;);
    OUT(std::is_bounded_array_v&lt;float&gt;);
    OUT(std::is_bounded_array_v&lt;int&gt;);
    OUT(std::is_bounded_array_v&lt;int[]&gt;);
    OUT(std::is_bounded_array_v&lt;int[3]&gt;);
}
|output=
std::is_bounded_array_v&lt;A&gt; : false
std::is_bounded_array_v&lt;A[]&gt; : false
std::is_bounded_array_v&lt;A[3]&gt; : true
std::is_bounded_array_v&lt;float&gt; : false
std::is_bounded_array_v&lt;int&gt; : false
std::is_bounded_array_v&lt;int[]&gt; : false
std::is_bounded_array_v&lt;int[3]&gt; : true
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_array}}
{{dsc inc|cpp/types/dsc is_unbounded_array}}
{{dsc inc|cpp/types/dsc extent}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
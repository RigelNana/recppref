{{cpp/title|numeric_limits}}
{{cpp/types/numeric_limits/navbar}}

{{ddcl|header=limits|
template&lt; class T &gt; class numeric_limits;
}}

The {{tt|std::numeric_limits}} class template provides a standardized way to query various properties of arithmetic types (e.g. the largest possible value for type {{c/core|int}} is {{c|std::numeric_limits&lt;int&gt;::max()}}). 

This information is provided via specializations of the {{tt|std::numeric_limits}} template. The {{lt|cpp/standard library}} makes available specializations for all arithmetic types (only lists the specializations for cv-unqualified arithmetic types):
{{dcl begin}}
{{dcl header|limits}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;bool&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;char&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;signed char&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;unsigned char&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;wchar_t&gt;;
}}
{{dcl|since=c++20|
template&lt;&gt; class numeric_limits&lt;char8_t&gt;;
}}
{{dcl|since=c++11|
template&lt;&gt; class numeric_limits&lt;char16_t&gt;;
}}
{{dcl|since=c++11|
template&lt;&gt; class numeric_limits&lt;char32_t&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;short&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;unsigned short&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;int&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;unsigned int&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;long&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;unsigned long&gt;;
}}
{{dcl|since=c++11|
template&lt;&gt; class numeric_limits&lt;long long&gt;;
}}
{{dcl|since=c++11|
template&lt;&gt; class numeric_limits&lt;unsigned long long&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;float&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;double&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;long double&gt;;
}}
{{dcl end}}

The value of each member of a specialization of {{tt|std::numeric_limits}} on a cv-qualified type ''cv'' {{tt|T}} is equal to the value of the corresponding member of the specialization on the unqualified type {{tt|T}}. For example, {{c|std::numeric_limits&lt;int&gt;::digits}} is equal to {{c|std::numeric_limits&lt;const int&gt;::digits}}.

Aliases of arithmetic types (such as {{lc|std::size_t}} or {{lc|std::streamsize}}) may also be examined with the {{tt|std::numeric_limits}} type traits.

Non-arithmetic standard types, such as {{c/core|std::complex&lt;T&gt;}} or {{lc|std::nullptr_t}}, do not have specializations.

{{rrev|since=c++20|
If the implementation defines any [[cpp/iterator/weakly incrementable#Integer-like types|integer-class types]], specializations of {{tt|std::numeric_limits}} must also be provided for them.}}

Implementations may provide specializations of {{tt|std::numeric_limits}} for implementation-specific types: e.g. GCC provides {{tt|std::numeric_limits&lt;__int128&gt;}}. Non-standard libraries may [[cpp/language/extending std|add specializations]] for library-provided types, e.g. [http://openexr.com/ OpenEXR] provides {{tt|std::numeric_limits&lt;half&gt;}} for a 16-bit floating-point type.

===Template parameters===
{{par begin}}
{{par|T|a type to retrieve numeric properties for}}
{{par end}}

===Member constants===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc is_specialized}}
{{dsc inc|cpp/types/numeric_limits/dsc is_signed}}
{{dsc inc|cpp/types/numeric_limits/dsc is_integer}}
{{dsc inc|cpp/types/numeric_limits/dsc is_exact}}
{{dsc inc|cpp/types/numeric_limits/dsc has_infinity}}
{{dsc inc|cpp/types/numeric_limits/dsc has_quiet_NaN}}
{{dsc inc|cpp/types/numeric_limits/dsc has_signaling_NaN}}
{{dsc inc|cpp/types/numeric_limits/dsc has_denorm}}
{{dsc inc|cpp/types/numeric_limits/dsc has_denorm_loss}}
{{dsc inc|cpp/types/numeric_limits/dsc round_style}}
{{dsc inc|cpp/types/numeric_limits/dsc is_iec559}}
{{dsc inc|cpp/types/numeric_limits/dsc is_bounded}}
{{dsc inc|cpp/types/numeric_limits/dsc is_modulo}}
{{dsc inc|cpp/types/numeric_limits/dsc digits}}
{{dsc inc|cpp/types/numeric_limits/dsc digits10}}
{{dsc inc|cpp/types/numeric_limits/dsc max_digits10}}
{{dsc inc|cpp/types/numeric_limits/dsc radix}}
{{dsc inc|cpp/types/numeric_limits/dsc min_exponent}}
{{dsc inc|cpp/types/numeric_limits/dsc min_exponent10}}
{{dsc inc|cpp/types/numeric_limits/dsc max_exponent}}
{{dsc inc|cpp/types/numeric_limits/dsc max_exponent10}}
{{dsc inc|cpp/types/numeric_limits/dsc traps}}
{{dsc inc|cpp/types/numeric_limits/dsc tinyness_before}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc min}}
{{dsc inc|cpp/types/numeric_limits/dsc lowest}}
{{dsc inc|cpp/types/numeric_limits/dsc max}}
{{dsc inc|cpp/types/numeric_limits/dsc epsilon}}
{{dsc inc|cpp/types/numeric_limits/dsc round_error}}
{{dsc inc|cpp/types/numeric_limits/dsc infinity}}
{{dsc inc|cpp/types/numeric_limits/dsc quiet_NaN}}
{{dsc inc|cpp/types/numeric_limits/dsc signaling_NaN}}
{{dsc inc|cpp/types/numeric_limits/dsc denorm_min}}
{{dsc end}}

===Helper classes===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc float_round_style}}
{{dsc inc|cpp/types/numeric_limits/dsc float_denorm_style}}
{{dsc end}}

===Relationship with C library macro constants===
{|class="wikitable" style="font-size:95%; white-space: nowrap;"
|-
!rowspan=2|Specialization&lt;br&gt;{{tt|std::numeric_limits&lt;T&gt;}}&lt;br&gt;where {{tt|T}} is
!colspan=11|Members
|-
&lt;!----&gt;
!{{tt|min()}}
!{{tt|lowest()}}&lt;br&gt;{{mark c++11}}
!{{tt|max()}}
!{{tt|radix}}
|-
|-
|{{c/core|bool}}
|{{c|false}}
|{{c|false}}
|{{c|true}}
|{{c|2}}
|-
|{{c/core|char}}
|{{lc|CHAR_MIN}}
|{{lc|CHAR_MIN}}
|{{lc|CHAR_MAX}}
|{{c|2}}
|-
|{{c/core|signed char}}
|{{lc|SCHAR_MIN}}
|{{lc|SCHAR_MIN}}
|{{lc|SCHAR_MAX}}
|{{c|2}}
|-
|{{c/core|unsigned char}}
|{{c|0}}
|{{c|0}}
|{{lc|UCHAR_MAX}}
|{{c|2}}
|-
|{{c/core|wchar_t}}
|{{lc|WCHAR_MIN}}
|{{lc|WCHAR_MIN}}
|{{lc|WCHAR_MAX}}
|{{c|2}}
|-
|{{c/core|char8_t}}
|{{c|0}}
|{{c|0}}
|{{lc|UCHAR_MAX}}
|{{c|2}}
|-
|{{c/core|char16_t}}
|{{c|0}}
|{{c|0}}
|{{lc|UINT_LEAST16_MAX}}
|{{c|2}}
|-
|{{c/core|char32_t}}
|{{c|0}}
|{{c|0}}
|{{lc|UINT_LEAST32_MAX}}
|{{c|2}}
|-
|{{c/core|short}}
|rowspan=2|{{lc|SHRT_MIN}}
|rowspan=2|{{lc|SHRT_MIN}}
|rowspan=2|{{lc|SHRT_MAX}}
|rowspan=2|{{c|2}}
|-
|{{c/core|signed short}}
&lt;!----&gt;
&lt;!----&gt;
&lt;!----&gt;
&lt;!----&gt;
|-
|{{c/core|unsigned short}}
|{{c|0}}
|{{c|0}}
|{{lc|USHRT_MAX}}
|{{c|2}}
|-
|{{c/core|int}}
|rowspan=2|{{lc|INT_MIN}}
|rowspan=2|{{lc|INT_MIN}}
|rowspan=2|{{lc|INT_MAX}}
|rowspan=2|{{c|2}}
|-
|{{c/core|signed int}}
&lt;!----&gt;
&lt;!----&gt;
&lt;!----&gt;
&lt;!----&gt;
|-
|{{c/core|unsigned int}}
|{{c|0}}
|{{c|0}}
|{{lc|UINT_MAX}}
|{{c|2}}
|-
|{{c/core|long}}
|rowspan=2|{{lc|LONG_MIN}}
|rowspan=2|{{lc|LONG_MIN}}
|rowspan=2|{{lc|LONG_MAX}}
|rowspan=2|{{c|2}}
|-
|{{c/core|signed long}}
&lt;!----&gt;
&lt;!----&gt;
&lt;!----&gt;
&lt;!----&gt;
|-
|{{c/core|unsigned long}}
|{{c|0}}
|{{c|0}}
|{{lc|ULONG_MAX}}
|{{c|2}}
|-
|{{c/core|long long}}
|rowspan=2|{{lc|LLONG_MIN}}
|rowspan=2|{{lc|LLONG_MIN}}
|rowspan=2|{{lc|LLONG_MAX}}
|rowspan=2|{{c|2}}
|-
|{{c/core|signed long long}}
&lt;!----&gt;
&lt;!----&gt;
&lt;!----&gt;
&lt;!----&gt;
|-
|{{c/core|unsigned long long}}
|{{c|0}}
|{{c|0}}
|{{lc|ULLONG_MAX}}
|{{c|2}}
|}

{|class="wikitable" style="font-size:95%; white-space: nowrap;"
|-
!rowspan=2|Specialization&lt;br&gt;{{tt|std::numeric_limits&lt;T&gt;}}&lt;br&gt;where {{tt|T}} is
!colspan=11|Members
|-
&lt;!----&gt;
!{{tt|denorm_min()}}
!{{tt|min()}}
!{{tt|lowest()}}&lt;br&gt;{{mark c++11}}
!{{tt|max()}}
!{{tt|epsilon()}}
!{{tt|digits}}
!{{tt|digits10}}
|-
|-
|{{c/core|float}}
|{{lc|FLT_TRUE_MIN}}
|{{lc|FLT_MIN}}
|{{c|-FLT_MAX}}
|{{lc|FLT_MAX}}
|{{lc|FLT_EPSILON}}
|{{lc|FLT_MANT_DIG}}
|{{lc|FLT_DIG}}
|-
|{{c/core|double}}
|{{lc|DBL_TRUE_MIN}}
|{{lc|DBL_MIN}}
|{{c|-DBL_MAX}}
|{{lc|DBL_MAX}}
|{{lc|DBL_EPSILON}}
|{{lc|DBL_MANT_DIG}}
|{{lc|DBL_DIG}}
|-
|{{c/core|long double}}
|{{lc|LDBL_TRUE_MIN}}
|{{lc|LDBL_MIN}}
|{{c|-LDBL_MAX}}
|{{lc|LDBL_MAX}}
|{{lc|LDBL_EPSILON}}
|{{lc|LDBL_MANT_DIG}}
|{{lc|LDBL_DIG}}
|}

{|class="wikitable" style="font-size:95%; white-space: nowrap;"
|-
!rowspan=2|Specialization&lt;br&gt;{{tt|std::numeric_limits&lt;T&gt;}}&lt;br&gt;where {{tt|T}} is
!colspan=11|Members (continue)
|-
&lt;!----&gt;
!{{tt|min_exponent}}
!{{tt|min_exponent10}}
!{{tt|max_exponent}}
!{{tt|max_exponent10}}
!{{tt|radix}}
|-
|-
|{{c/core|float}}
|{{lc|FLT_MIN_EXP}}
|{{lc|FLT_MIN_10_EXP}}
|{{lc|FLT_MAX_EXP}}
|{{lc|FLT_MAX_10_EXP}}
|{{lc|FLT_RADIX}}
|-
|{{c/core|double}}
|{{lc|DBL_MIN_EXP}}
|{{lc|DBL_MIN_10_EXP}}
|{{lc|DBL_MAX_EXP}}
|{{lc|DBL_MAX_10_EXP}}
|{{lc|FLT_RADIX}}
|-
|{{c/core|long double}}
|{{lc|LDBL_MIN_EXP}}
|{{lc|LDBL_MIN_10_EXP}}
|{{lc|LDBL_MAX_EXP}}
|{{lc|LDBL_MAX_10_EXP}}
|{{lc|FLT_RADIX}}
|}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;limits&gt;

int main() 
{
    std::cout &lt;&lt; "type\t│ lowest()\t│ min()\t\t│ max()\n"
              &lt;&lt; "bool\t│ "
              &lt;&lt; std::numeric_limits&lt;bool&gt;::lowest() &lt;&lt; "\t\t│ "
              &lt;&lt; std::numeric_limits&lt;bool&gt;::min() &lt;&lt; "\t\t│ "
              &lt;&lt; std::numeric_limits&lt;bool&gt;::max() &lt;&lt; '\n'
              &lt;&lt; "uchar\t│ "
              &lt;&lt; +std::numeric_limits&lt;unsigned char&gt;::lowest() &lt;&lt; "\t\t│ "
              &lt;&lt; +std::numeric_limits&lt;unsigned char&gt;::min() &lt;&lt; "\t\t│ "
              &lt;&lt; +std::numeric_limits&lt;unsigned char&gt;::max() &lt;&lt; '\n'
              &lt;&lt; "int\t│ "
              &lt;&lt; std::numeric_limits&lt;int&gt;::lowest() &lt;&lt; "\t│ "
              &lt;&lt; std::numeric_limits&lt;int&gt;::min() &lt;&lt; "\t│ "
              &lt;&lt; std::numeric_limits&lt;int&gt;::max() &lt;&lt; '\n'
              &lt;&lt; "float\t│ "
              &lt;&lt; std::numeric_limits&lt;float&gt;::lowest() &lt;&lt; "\t│ "
              &lt;&lt; std::numeric_limits&lt;float&gt;::min() &lt;&lt; "\t│ "
              &lt;&lt; std::numeric_limits&lt;float&gt;::max() &lt;&lt; '\n'
              &lt;&lt; "double\t│ "
              &lt;&lt; std::numeric_limits&lt;double&gt;::lowest() &lt;&lt; "\t│ "
              &lt;&lt; std::numeric_limits&lt;double&gt;::min() &lt;&lt; "\t│ "
              &lt;&lt; std::numeric_limits&lt;double&gt;::max() &lt;&lt; '\n';
}
|p=true
|output=
type	│ lowest()	│ min()		│ max()
bool	│ 0		│ 0		│ 1
uchar	│ 0		│ 0		│ 255
int	│ -2147483648	│ -2147483648	│ 2147483647
float	│ -3.40282e+38	│ 1.17549e-38	│ 3.40282e+38
double	│ -1.79769e+308	│ 2.22507e-308	│ 1.79769e+308
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=201|std=C++98|before=specializations for all fundamental types need to be provided|after=excluded non-arithmetic types}}
{{dr list item|wg=lwg|dr=559|std=C++98|before=it was unclear whether the {{tt|std::numeric_limits}}&lt;br&gt;specialization for a cv-qualified type behaves as the same as&lt;br&gt;the corresponding specialization for the cv-unqualified type|after=they have the&lt;br&gt;same behavior}}
{{dr list end}}

===See also===
* {{rlp|integer|Fixed width integer types}}
* [[cpp/language/types|Arithmetic types]]
* [[cpp/language/type|C++ type system overview]]
* {{rlp|/|Type support (basic types, RTTI, type traits)}}
* {{rlp|climits|C numeric limits interface}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/types/traits/is|1=is_object
|description=
If {{tt|T}} is an [[cpp/language/type|object type]] (that is any possibly cv-qualified type other than function, reference, or {{c|void}} types), provides the member constant {{tt|value}} equal {{c|true}}. For any other type, {{tt|value}} is {{c|false}}.
|inherit_desc={{tt|T}} is an object type
}}

===Possible implementation===
{{eq fun
|1=
template&lt;class T&gt;
struct is_object : std::integral_constant&lt;bool,
                       std::is_scalar&lt;T&gt;::value {{!!}}
                       std::is_array&lt;T&gt;::value {{!!}}
                       std::is_union&lt;T&gt;::value {{!!}}
                       std::is_class&lt;T&gt;::value&gt; {};
}}

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;type_traits&gt;
 
#define IS_OBJECT(...) \
    std::cout &lt;&lt; std::boolalpha &lt;&lt; std::left &lt;&lt; std::setw(9) &lt;&lt; #__VA_ARGS__ \
              &lt;&lt; (std::is_object_v&lt;__VA_ARGS__&gt; ? " is object\n" \
                                                : " is not an object\n")

int main()
{
    class cls {};

    IS_OBJECT(void);
    IS_OBJECT(int);
    IS_OBJECT(int&amp;);
    IS_OBJECT(int*);
    IS_OBJECT(int*&amp;);
    IS_OBJECT(cls);
    IS_OBJECT(cls&amp;);
    IS_OBJECT(cls*);
    IS_OBJECT(int());
    IS_OBJECT(int(*)());
    IS_OBJECT(int(&amp;)());
}
|output=
void      is not an object
int       is object
int&amp;      is not an object
int*      is object
int*&amp;     is not an object
cls       is object
cls&amp;      is not an object
cls*      is object
int()     is not an object
int(*)()  is object
int(&amp;)()  is not an object
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_scalar}}
{{dsc inc|cpp/types/dsc is_array}}
{{dsc inc|cpp/types/dsc is_union}}
{{dsc inc|cpp/types/dsc is_class}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
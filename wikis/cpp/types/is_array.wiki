{{cpp/types/traits/is|1=is_array
|description=
Checks whether {{tt|T}} is an array type. Provides the member constant {{tt|value}} which is equal to {{c|true}}, if {{tt|T}} is an array type. Otherwise, {{tt|value}} is equal to {{c|false}}.
|inherit_desc={{tt|T}} is an array type
}}

===Possible implementation===
{{eq fun
|1=
template&lt;class T&gt;
struct is_array : std::false_type {};

template&lt;class T&gt;
struct is_array&lt;T[]&gt; : std::true_type {};

template&lt;class T, std::size_t N&gt;
struct is_array&lt;T[N]&gt; : std::true_type {};
}}

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;type_traits&gt;

class A {};
static_assert(std::is_array&lt;A&gt;::value == false);
static_assert(std::is_array&lt;A[]&gt;::value == true);
static_assert(std::is_array&lt;A[3]&gt;::value == true);

static_assert(std::is_array&lt;float&gt;::value == false);
static_assert(std::is_array&lt;int&gt;::value == false);
static_assert(std::is_array&lt;int[]&gt;::value == true);
static_assert(std::is_array&lt;int[3]&gt;::value == true);
static_assert(std::is_array&lt;std::array&lt;int, 3&gt;&gt;::value == false);

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_bounded_array}}
{{dsc inc|cpp/types/dsc is_unbounded_array}}
{{dsc inc|cpp/types/dsc rank}}
{{dsc inc|cpp/types/dsc extent}}
{{dsc inc|cpp/types/dsc remove_extent}}
{{dsc inc|cpp/types/dsc remove_all_extents}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
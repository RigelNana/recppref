{{title|FLT_EVAL_METHOD}}
{{cpp/types/climits/navbar}}
{{ddcl|header=cfloat|since=c++11|
#define FLT_EVAL_METHOD /* implementation-defined */
}}

Specifies the precision in which all floating-point arithmetic operations other than assignment and cast are done.

{{dsc begin}}
{{dsc hitem|Value|Explanation}}
{{dsc|negative values except {{c|-1}}|implementation-defined behavior}}
{{dsc|{{c|-1}}|the default precision is not known}}
{{dsc|{{c|0}}|all operations and constants evaluate in the range and precision of the type used. Additionally, {{c/core|float_t}} and {{c/core|double_t}} are equivalent to {{c/core|float}} and {{c/core|double}} respectively}}
{{dsc|{{c|1}}|all operations and constants evaluate in the range and precision of {{c/core|double}}. Additionally, both {{c/core|float_t}} and {{c/core|double_t}} are equivalent to {{c/core|double}}}}
{{dsc|{{c|2}}|all operations and constants evaluate in the range and precision of {{c/core|long double}}. Additionally, both {{c/core|float_t}} and {{c/core|double_t}} are equivalent to {{c/core|long double}}}}
{{dsc end}}

===Notes===
Regardless of the value of {{c|FLT_EVAL_METHOD}}, any floating-point expression may be ''contracted'', that is, calculated as if all intermediate results have infinite range and precision (unless {{ltt|cpp/preprocessor/impl|#pragma}} {{c|STDC FP_CONTRACT}} is off).

Cast and assignment strip away any extraneous range and precision: this models the action of storing a value from an extended-precision FPU register into a standard-sized memory location.

===See also===
{{dsc begin}}
{{dsc see c|c/types/limits/FLT_EVAL_METHOD}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
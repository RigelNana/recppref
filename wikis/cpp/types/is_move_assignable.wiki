{{cpp/title|is_move_assignable|is_trivially_move_assignable|is_nothrow_move_assignable}}
{{cpp/meta/navbar}}
{{dcl begin}}
{{dcl header|type_traits}}
{{dcl|since=c++11|num=1|
template&lt; class T &gt;
struct is_move_assignable;
}}
{{dcl|since=c++11|num=2|
template&lt; class T &gt;
struct is_trivially_move_assignable;
}}
{{dcl|since=c++11|num=3|
template&lt; class T &gt;
struct is_nothrow_move_assignable;
}}
{{dcl end}}

{|class="wikitable" style="text-align: center;"
!rowspan=2|{{nbsp}}Type trait{{nbsp}}
!colspan=2|The value of the member constant {{ttn|value}}
|-
!{{ttn|T}} is a [[cpp/meta#Definitions|referenceable type]]
!{{nbsp}}{{ttn|T}} is not a referenceable type{{nbsp}}
|-
|{{v|1}}
|{{c|std::is_assignable&lt;T&amp;, T&amp;&amp;&gt;::value}}
|rowspan=3|{{c|false}}
|-
|{{v|2}}
|{{c|std::is_trivially_assignable&lt;T&amp;, T&amp;&amp;&gt;::value}}
|-
|{{v|3}}
|{{c|std::is_nothrow_assignable&lt;T&amp;, T&amp;&amp;&gt;::value}}
|}

{{cpp/types/cvaub}}

{{cpp/types/nospec|any}}

===Helper variable templates===
{{dcl begin}}
{{dcl|since=c++17|1=
template&lt; class T &gt;
inline constexpr bool is_move_assignable_v =
    is_move_assignable&lt;T&gt;::value;
}}
{{dcl|since=c++17|1=
template&lt; class T &gt;
inline constexpr bool is_trivially_move_assignable_v =
    is_trivially_move_assignable&lt;T&gt;::value;
}}
{{dcl|since=c++17|1=
template&lt; class T &gt;
inline constexpr bool is_nothrow_move_assignable_v =
    is_nothrow_move_assignable&lt;T&gt;::value;
}}
{{dcl end}}

{{cpp/types/integral_constant/inherit|{{tt|T}} is move-assignable}}

===Possible implementation===
{{eq fun
|1=
template&lt;class T&gt;
struct is_move_assignable
    : std::is_assignable&lt;typename std::add_lvalue_reference&lt;T&gt;::type,
                         typename std::add_rvalue_reference&lt;T&gt;::type&gt; {};

template&lt;class T&gt;
struct is_trivially_move_assignable
    : std::is_trivially_assignable&lt;typename std::add_lvalue_reference&lt;T&gt;::type,
                                   typename std::add_rvalue_reference&lt;T&gt;::type&gt; {};

template&lt;class T&gt;
struct is_nothrow_move_assignable
    : std::is_nothrow_assignable&lt;typename std::add_lvalue_reference&lt;T&gt;::type,
                                 typename std::add_rvalue_reference&lt;T&gt;::type&gt; {};
}}

===Notes===
The trait {{tt|std::is_move_assignable}} is less strict than {{named req|MoveAssignable}} because it does not check the type of the result of the assignment (which, for a {{named req|MoveAssignable}} type, must be {{tt|T&amp;}}), nor the semantic requirement that the target's value after the assignment is equivalent to the source's value before the assignment.

The type does not have to implement a [[cpp/language/move assignment|move assignment operator]] in order to satisfy this trait; see {{named req|MoveAssignable}} for details.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;type_traits&gt;

struct Foo { int n; };

struct NoMove
{
    // prevents implicit declaration of default move assignment operator
    // however, the class is still move-assignable because its
    // copy assignment operator can bind to an rvalue argument
    NoMove&amp; operator=(const NoMove&amp;) { return *this; }
};

int main()
{
    std::cout &lt;&lt; std::boolalpha
              &lt;&lt; "std::string is nothrow move-assignable? "
              &lt;&lt; std::is_nothrow_move_assignable&lt;std::string&gt;::value &lt;&lt; '\n'
              &lt;&lt; "int[2] is move-assignable? "
              &lt;&lt; std::is_move_assignable&lt;int[2]&gt;::value &lt;&lt; '\n'
              &lt;&lt; "Foo is trivially move-assignable? "
              &lt;&lt; std::is_trivially_move_assignable&lt;Foo&gt;::value &lt;&lt; '\n'
              &lt;&lt; "NoMove is move-assignable? "
              &lt;&lt; std::is_move_assignable&lt;NoMove&gt;::value &lt;&lt; '\n'
              &lt;&lt; "NoMove is nothrow move-assignable? "
              &lt;&lt; std::is_nothrow_move_assignable&lt;NoMove&gt;::value &lt;&lt; '\n';
}
|output=
std::string is nothrow move-assignable? true
int[2] is move-assignable? false
Foo is trivially move-assignable? true
NoMove is move-assignable? true
NoMove is nothrow move-assignable? false
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2196|std=C++11|before=the behavior was unclear if {{c/core|T&amp;&amp;}} cannot be formed|after=the value produced is {{c|false}} in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_assignable}}
{{dsc inc|cpp/types/dsc is_copy_assignable}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/types/traits/is|1=is_signed
|description=
Checks whether {{tt|T}} is a signed arithmetic type.
* If {{c|std::is_arithmetic&lt;T&gt;::value}} is {{c|true}}, provides the member constant {{tt|value}} equal to {{c|T(-1) &lt; T(0)}}.
* Otherwise, provides the member constant {{tt|value}} equal to {{c|false}}.
|inherit_desc={{tt|T}} is a signed arithmetic type
}}

===Possible implementation===
{{eq fun|1=
namespace detail
{
    template&lt;typename T, bool = std::is_arithmetic&lt;T&gt;::value&gt;
    struct is_signed : std::integral_constant&lt;bool, T(-1) &lt; T(0)&gt; {};
    
    template&lt;typename T&gt;
    struct is_signed&lt;T, false&gt; : std::false_type {};
}

template&lt;typename T&gt;
struct is_signed : detail::is_signed&lt;T&gt;::type {};
}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

class A {};
static_assert(std::is_signed_v&lt;A&gt; == false);

class B { int i; };
static_assert(std::is_signed_v&lt;B&gt; == false);

enum C : int {};
static_assert(std::is_signed_v&lt;C&gt; == false);

enum class D : int {};
static_assert(std::is_signed_v&lt;D&gt; == false);

static_assert
(
    std::is_signed&lt;signed int&gt;::value == true and // C++11
    std::is_signed&lt;signed int&gt;() == true and      // C++11
    std::is_signed&lt;signed int&gt;{} == true and      // C++11
    std::is_signed_v&lt;signed int&gt; == true and      // C++17
    std::is_signed_v&lt;unsigned int&gt; == false and
    std::is_signed_v&lt;float&gt; == true and
    std::is_signed_v&lt;bool&gt; == false and
    std::is_signed_v&lt;signed char&gt; == true and
    std::is_signed_v&lt;unsigned char&gt; == false
);

int main()
{
    // signedness of char is implementation-defined:
    std::cout &lt;&lt; std::boolalpha &lt;&lt; std::is_signed_v&lt;char&gt; &lt;&lt; '\n';
}
|p=true
|output=
true
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2197|std=C++11|before={{tt|value}} could be {{c|true}} even if {{tt|T}} is not an arithmetic type|after=can only be {{c|false}} in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_unsigned}}
{{dsc inc|cpp/types/numeric_limits/dsc is_signed}}
{{dsc inc|cpp/types/dsc is_arithmetic}}
{{dsc inc|cpp/types/dsc make_signed}}
{{dsc inc|cpp/types/dsc make_unsigned}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
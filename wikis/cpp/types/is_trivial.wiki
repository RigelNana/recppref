{{cpp/types/traits/is|1=is_trivial
|description= 
If {{tt|T}} is a [[cpp/named req/TrivialType|trivial type]], provides the member constant {{tt|value}} equal to {{c|true}}. For any other type, {{tt|value}} is {{c|false}}.

If {{c/core|std::remove_all_extents_t&lt;T&gt;}} is an incomplete type and not (possibly cv-qualified) {{c/core|void}}, the behavior is undefined.
|inherit_desc={{tt|T}} is a trivial type
|deprecated=c++26
}}

===Example===
{{example
|code=
#include &lt;type_traits&gt;

struct A { int m; };
static_assert(std::is_trivial_v&lt;A&gt; == true);

struct B { B() {} };
static_assert(std::is_trivial_v&lt;B&gt; == false);

// The following class shows why std::is_trivial(_v) may be a pitfall.
class C
{
private:
    C() = default;
};

static_assert(std::is_trivial_v&lt;C&gt; == true);
static_assert(std::is_trivially_default_constructible_v&lt;C&gt; == false);

int main() {}
|output=
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2015|std=C++11|before={{tt|T}} could be an array of incomplete&lt;br&gt;class type with unknown bound|after=the behavior is&lt;br&gt;undefined in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_trivially_copyable}}
{{dsc inc|cpp/types/dsc is_default_constructible}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
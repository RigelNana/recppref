{{cpp/title|endian}}
{{cpp/utility/bit/navbar}}
{{ddcl|header=bit|since=c++20|1=
enum class endian
{
    little = /* implementation-defined */,
    big    = /* implementation-defined */,
    native = /* implementation-defined */,
};
}}

Indicates the {{enwiki|Endianness#Overview|endianness}} of all [[cpp/language/type|scalar types]]:
* If all scalar types are little-endian, {{c|std::endian::native}} equals {{c|std::endian::little}}.
* If all scalar types are big-endian, {{c|std::endian::native}} equals {{c|std::endian::big}}.

Corner case platforms are also supported:
* If all scalar types have {{tt|sizeof}} equal to {{c|1}}, endianness does not matter and all three values, {{c|std::endian::little}}, {{c|std::endian::big}}, and {{c|std::endian::native}} are the same.
* If the platform uses mixed endian, {{c|std::endian::native}} equals neither {{c|std::endian::big}} nor {{c|std::endian::little}}.

===Possible implementation===
{{source|1=
enum class endian
{
#if defined(_MSC_VER) &amp;&amp; !defined(__clang__)
    little = 0,
    big    = 1,
    native = little
#else
    little = __ORDER_LITTLE_ENDIAN__,
    big    = __ORDER_BIG_ENDIAN__,
    native = __BYTE_ORDER__
#endif
};
}}

===Notes===
{{feature test macro|__cpp_lib_endian|std=C++20|value=201907L|{{c|std::endian}}}}

===Example===
{{example
|code=
#include &lt;bit&gt;
#include &lt;iostream&gt;

int main()
{
    if constexpr (std::endian::native == std::endian::big)
        std::cout &lt;&lt; "big-endian\n";
    else if constexpr (std::endian::native == std::endian::little)
        std::cout &lt;&lt; "little-endian\n";
    else
        std::cout &lt;&lt; "mixed-endian\n";
}
|p=true
|output=
mixed-endian
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/numeric/dsc byteswap}}
{{dsc see c|c/numeric/endian}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
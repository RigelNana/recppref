{{cpp/title|remove_pointer}}
{{cpp/meta/navbar}}
{{dcl begin}}
{{dcl header|type_traits}}
{{dcl|since=c++11|1=
template&lt; class T &gt;
struct remove_pointer;
}}
{{dcl end}}

Provides the member typedef {{tt|type}} which is the type pointed to by {{tt|T}}, or, if {{tt|T}} is not a pointer, then {{tt|type}} is the same as {{tt|T}}.

{{cpp/types/nospec}}

===Member types===
{{dsc begin}}
{{dsc hitem|Name|Definition}}
{{dsc|{{tt|type}}|the type pointed to by {{tt|T}} or {{tt|T}} if it's not a pointer}}
{{dsc end}}

===Helper types===
{{dcl begin}}
{{dcl|since=c++14|1=
template&lt; class T &gt;
using remove_pointer_t = typename remove_pointer&lt;T&gt;::type;
}}
{{dcl end}}

===Possible implementation===
{{eq fun
|1=
template&lt;class T&gt; struct remove_pointer { typedef T type; };
template&lt;class T&gt; struct remove_pointer&lt;T*&gt; { typedef T type; };
template&lt;class T&gt; struct remove_pointer&lt;T* const&gt; { typedef T type; };
template&lt;class T&gt; struct remove_pointer&lt;T* volatile&gt; { typedef T type; };
template&lt;class T&gt; struct remove_pointer&lt;T* const volatile&gt; { typedef T type; };
}}

===Example===
{{example
|code=
#include &lt;type_traits&gt;

static_assert
(
    std::is_same_v&lt;int, int&gt; == true &amp;&amp;
    std::is_same_v&lt;int, int*&gt; == false &amp;&amp;
    std::is_same_v&lt;int, int**&gt; == false &amp;&amp;
    std::is_same_v&lt;int, std::remove_pointer_t&lt;int&gt;&gt; == true &amp;&amp;
    std::is_same_v&lt;int, std::remove_pointer_t&lt;int*&gt;&gt; == true &amp;&amp;
    std::is_same_v&lt;int, std::remove_pointer_t&lt;int**&gt;&gt; == false &amp;&amp;
    std::is_same_v&lt;int, std::remove_pointer_t&lt;int* const&gt;&gt; == true &amp;&amp;
    std::is_same_v&lt;int, std::remove_pointer_t&lt;int* volatile&gt;&gt; == true &amp;&amp;
    std::is_same_v&lt;int, std::remove_pointer_t&lt;int* const volatile&gt;&gt; == true
);

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_pointer}}
{{dsc inc|cpp/types/dsc add_pointer}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
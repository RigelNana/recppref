{{cpp/title|alignment_of}}
{{cpp/meta/navbar}}
{{ddcl|header=type_traits|since=c++11|
template&lt; class T &gt;
struct alignment_of;
}}

Provides the member constant {{c|value}} equal to the [[cpp/language/object#Alignment|alignment requirement]] of the type {{tt|T}}, as if obtained by an {{ltt|cpp/language/alignof}} expression. If {{tt|T}} is an array type, returns the alignment requirements of the element type. If {{tt|T}} is a reference type, returns the alignment requirements of the type referred to.

If {{c|alignof(T)}} is not a valid expression, the behavior is undefined.

{{cpp/types/nospec|v}}

=== Helper variable template ===
{{ddcl|since=c++17|1=
template&lt; class T &gt;
constexpr std::size_t alignment_of_v = alignment_of&lt;T&gt;::value;
}}
{{cpp/types/integral_constant/inherit2|{{c|alignof(T)}}|std::size_t}}

===Possible implementation===
{{eq fun
|1=
template&lt;class T&gt;
struct alignment_of : std::integral_constant&lt;std::size_t, alignof(T)&gt; {};
}}

===Notes===
This type trait predates the {{ltt|cpp/language/alignof}} keyword, which can be used to obtain the same value with less verbosity.

===Example===
{{example
|code=
#include &lt;cstdint&gt;
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

struct A {};
struct B
{
    std::int8_t p;
    std::int16_t q;
};

int main()
{
    std::cout &lt;&lt; std::alignment_of&lt;A&gt;::value &lt;&lt; ' ';
    std::cout &lt;&lt; std::alignment_of&lt;B&gt;::value &lt;&lt; ' ';
    std::cout &lt;&lt; std::alignment_of&lt;int&gt;() &lt;&lt; ' '; // alt syntax
    std::cout &lt;&lt; std::alignment_of_v&lt;double&gt; &lt;&lt; '\n'; // c++17 alt syntax
}
|p=true
|output=
1 2 4 8
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/language/dsc alignof}}
{{dsc inc|cpp/language/dsc alignas}}
{{dsc inc|cpp/types/dsc aligned_storage}}
{{dsc inc|cpp/types/dsc aligned_union}}
{{dsc inc|cpp/types/dsc max_align_t}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
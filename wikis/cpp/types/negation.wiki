{{cpp/title|negation}}
{{cpp/meta/navbar}}
{{dcl begin}}
{{dcl header|type_traits}}
{{dcl|since=c++17|1=
template&lt; class B &gt;
struct negation;
}}
{{dcl end}}

Forms the [[enwiki:Negation|logical negation]] of the type trait {{c|B}}.

The type {{c|std::negation&lt;B&gt;}} is a {{named req|UnaryTypeTrait}} with a base characteristic of {{c|std::bool_constant&lt;!bool(B::value)&gt;}}.

{{cpp/types/nospec|pv}}

===Template parameters===
{{par begin}}
{{par|B|any type such that the expression {{c|bool(B::value)}} is a valid constant expression }}
{{par end}}

===Helper variable template===
{{ddcl|since=c++17|1=
template&lt; class B &gt;
constexpr bool negation_v = negation&lt;B&gt;::value;
}}

{{cpp/types/integral_constant/inherit|{{tt|B}} has a member {{c|::value}} that is {{c|false}} when explicitly converted to {{c|bool}}}}

===Possible implementation===
{{eq fun
|1=
template&lt;class B&gt;
struct negation : std::bool_constant&lt;!bool(B::value)&gt; { };
}}

===Notes===
{{feature test macro|__cpp_lib_logical_traits|std=C++17|value=201510L|[[cpp/meta#Operations on traits|Logical operator type traits]]}}

===Example===
{{example
|code=
#include &lt;type_traits&gt;

static_assert(
    std::is_same&lt;
        std::bool_constant&lt;false&gt;,
        typename std::negation&lt;std::bool_constant&lt;true&gt;&gt;::type&gt;::value,
    "");
static_assert(
    std::is_same&lt;
        std::bool_constant&lt;true&gt;,
        typename std::negation&lt;std::bool_constant&lt;false&gt;&gt;::type&gt;::value,
    "");

static_assert(std::negation_v&lt;std::bool_constant&lt;true&gt;&gt; == false);
static_assert(std::negation_v&lt;std::bool_constant&lt;false&gt;&gt; == true);

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc conjunction}}
{{dsc inc|cpp/types/dsc disjunction}}
{{dsc inc|cpp/types/dsc integral_constant}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
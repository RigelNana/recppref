{{cpp/types/traits/is|1=is_fundamental
|description=
If {{tt|T}} is a [[cpp/language/types|fundamental type]] (that is, arithmetic type, {{c/core|void}}, or {{c/core|nullptr_t}}), provides the member constant {{c|value}} equal {{c|true}}. For any other type, {{c|value}} is {{c|false}}.
|inherit_desc={{tt|T}} is a fundamental type
}}

===Possible implementation===
{{eq fun
|1=
template&lt;class T&gt;
struct is_fundamental
    : std::integral_constant&lt;
        bool,
        std::is_arithmetic&lt;T&gt;::value {{!!}}
        std::is_void&lt;T&gt;::value {{!!}}
        std::is_same&lt;std::nullptr_t, typename std::remove_cv&lt;T&gt;::type&gt;::value
        // you can also use 'std::is_null_pointer&lt;T&gt;::value' instead in C++14
&gt; {};
}}

===Example===
{{example
|code=
#include &lt;type_traits&gt;

static_assert(std::is_fundamental_v&lt;int&gt; == true);
static_assert(std::is_fundamental_v&lt;int&amp;&gt; == false);
static_assert(std::is_fundamental_v&lt;int*&gt; == false);
static_assert(std::is_fundamental_v&lt;void&gt; == true);
static_assert(std::is_fundamental_v&lt;void*&gt; == false);
static_assert(std::is_fundamental_v&lt;float&gt; == true);
static_assert(std::is_fundamental_v&lt;float&amp;&gt; == false);
static_assert(std::is_fundamental_v&lt;float*&gt; == false);
static_assert(std::is_fundamental_v&lt;std::nullptr_t&gt; == true);
static_assert(std::is_fundamental_v&lt;std::is_fundamental&lt;int&gt;&gt; == false);

class A {};
static_assert(std::is_fundamental_v&lt;A&gt; == false);
static_assert(std::is_fundamental_v&lt;std::is_fundamental&lt;A&gt;::value_type&gt;);

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_compound}}
{{dsc inc|cpp/types/dsc is_arithmetic}}
{{dsc inc|cpp/types/dsc is_void}}
{{dsc inc|cpp/types/dsc is_null_pointer}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/error/system_error/title|system_error}}
{{cpp/error/system_error/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|
system_error( std::error_code ec );
}}
{{dcl|num=2|since=c++11|
system_error( std::error_code ec, const std::string&amp; what_arg );
}}
{{dcl|num=2|since=c++11|
system_error( std::error_code ec, const char* what_arg );
}}
{{dcl|num=3|since=c++11|
system_error( int ev, const std::error_category&amp; ecat );
}}
{{dcl|num=4|since=c++11|
system_error( int ev, const std::error_category&amp; ecat,
              const std::string&amp; what_arg );
}}
{{dcl|num=4|since=c++11|
system_error( int ev, const std::error_category&amp; ecat,
              const char* what_arg );
}}
{{dcl|num=5|since=c++11|
system_error( const system_error&amp; other ) noexcept;
}}
{{dcl end}}

Constructs new system error object.

@1@ Constructs with error code {{c|ec}}.
@2@ Constructs with error code {{c|ec}} and explanation string {{c|what_arg}}. The string returned by {{lc|what()}} is guaranteed to contain {{c|what_arg}} as a substring.
@3@ Constructs with underlying error code {{c|ev}} and associated error category {{c|ecat}}.
@4@ Constructs with underlying error code {{c|ev}}, associated error category {{c|ecat}} and explanatory string {{c|what_arg}}. The string returned by {{lc|what()}} is guaranteed to contain {{c|what_arg}} as a substring (assuming that it doesn't contain an embedded null character&lt;!--LWG 3112--&gt;).
@5@ Copy constructor. Initializes the contents with those of {{c|other}}. If {{c|*this}} and {{c|other}} both have dynamic type {{tt|std::system_error}} then {{c|1=std::strcmp(what(), other.what()) == 0}}.

===Parameters===
{{par begin}}
{{par|ec|error code}}
{{par|ev|underlying error code in the enumeration associated with {{c|ecat}}}}
{{par|ecat|the category of error}}
{{par|what_arg|explanatory string}}
{{par|other|another {{tt|system_error}} to copy}}
{{par end}}

===Example===
{{example
|Demonstrates how to create a {{tt|system_error}} exception from an {{lc|errno}} value.
|code=
#include &lt;iostream&gt;
#include &lt;system_error&gt;

int main()
{
    try
    {
        throw std::system_error(EDOM, std::generic_category(), "FIX ME");
    }
    catch (const std::system_error&amp; ex)
    {
        std::cout &lt;&lt; "code:    [" &lt;&lt; ex.code() &lt;&lt; "]\n"
                     "message: [" &lt;&lt; ex.code().message() &lt;&lt; "]\n"
                     "what:    [" &lt;&lt; ex.what() &lt;&lt; "]\n";
    }
}
|p=true
|output=
code:    [generic:33]
message: [Numerical argument out of domain]
what:    [FIX ME: Numerical argument out of domain]
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
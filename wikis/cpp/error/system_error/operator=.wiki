{{cpp/error/system_error/title|operator{{=}}}}
{{cpp/error/system_error/navbar}}
{{ddcl|since=c++11|1=
system_error&amp; operator=( const system_error&amp; other ) noexcept;
}}

Assigns the contents with those of {{c|other}}. If {{c|*this}} and {{c|other}} both have dynamic type {{tt|std::system_error}} then {{c|1=std::strcmp(what(), other.what()) == 0}} after assignment.

===Parameters===
{{par begin}}
{{par|other|another {{tt|system_error}} object to assign with}}
{{par end}}

===Return value===
{{c|*this}}

===Example===
{{example|code=
#include &lt;cassert&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;system_error&gt;

void print(const std::system_error&amp; e)
{
    std::cout &lt;&lt; "code:    [" &lt;&lt; e.code() &lt;&lt; "]\n"
                 "message: [" &lt;&lt; e.code().message() &lt;&lt; "]\n"
                 "what:    [" &lt;&lt; e.what() &lt;&lt; "]\n\n";
}
 
int main()
{
    std::system_error e1(EDOM, std::generic_category(), "Error info #1");
    print(e1);

    std::system_error e2(EIO, std::system_category(), "Error info #2");
    print(e2);

    e1 = e2;
    assert(std::strcmp(e1.what(), e2.what()) == 0);
    print(e1);
}
|p=true
|output=
code:    [generic:33]
message: [Numerical argument out of domain]
what:    [Error info #1: Numerical argument out of domain]

code:    [system:5]
message: [Input/output error]
what:    [Error info #2: Input/output error]

code:    [system:5]
message: [Input/output error]
what:    [Error info #2: Input/output error]
}}

{{langlinks|es|ja|ru|zh}}
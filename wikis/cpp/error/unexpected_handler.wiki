{{cpp/title|unexpected_handler}}
{{cpp/error/navbar}}
{{ddcl|header=exception|deprecated=c++11|until=c++17|
typedef void ( *unexpected_handler )();
}}

{{tt|std::unexpected_handler}} is the function pointer type (pointer to function that takes no arguments and returns void), which is installed and queried by the functions {{lc|std::set_unexpected}} and {{lc|std::get_unexpected}} and called by {{lc|std::unexpected}}.

The C++ implementation provides a default {{tt|std::unexpected_handler}} function, which calls {{lc|std::terminate()}}. If the null pointer value is installed (by means of {{lc|std::set_unexpected}}), the implementation may restore the default handler instead.

A user-defined {{tt|std::unexpected_handler}} is expected to either terminate the program or throw an exception. If it throws an exception, one of the following three situations may be encountered:

1) the exception thrown by {{tt|std::unexpected_handler}} satisfies the dynamic exception specification that was violated earlier. The new exception is allowed to escape the function and stack unwinding continues.

2) the exception thrown by {{tt|std::unexpected_handler}} still violates the exception specification:

2a) however, the exception specification allows {{lc|std::bad_exception}}: the thrown exception object is destroyed, and {{lc|std::bad_exception}} is constructed by the C++ runtime and thrown instead.

2b) the exception specification does not allow {{lc|std::bad_exception}}: {{lc|std::terminate()}} is called.

===See also===
{{dsc begin}}
{{dsc inc|cpp/error/dsc unexpected}}
{{dsc inc|cpp/error/dsc set_unexpected}}
{{dsc inc|cpp/error/dsc get_unexpected}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
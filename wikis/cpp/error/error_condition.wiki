{{cpp/title|error_condition}}
{{cpp/error/error_condition/navbar}}
{{ddcl|header=system_error|since=c++11|1=
class error_condition;
}}

{{tt|std::error_condition}} holds a platform-independent value identifying an error condition. Like {{lc|std::error_code}}, it is uniquely identified by an integer value and a {{lc|std::error_category}}, but unlike {{lc|std::error_code}}, the value is not platform-dependent.

A typical implementation holds one integer data member (the value) and a pointer to an {{lc|std::error_category}}.
 
===Member functions===
{{dsc begin}}
{{dsc inc|cpp/error/error_condition/dsc constructor}}
{{dsc inc|cpp/error/error_condition/dsc operator{{=}}}}
{{dsc inc|cpp/error/error_condition/dsc assign}}
{{dsc inc|cpp/error/error_condition/dsc clear}}
{{dsc inc|cpp/error/error_condition/dsc value}}
{{dsc inc|cpp/error/error_condition/dsc category}}
{{dsc inc|cpp/error/error_condition/dsc message}}
{{dsc inc|cpp/error/error_condition/dsc operator bool}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/error/error_condition/dsc operator_cmp}}
{{dsc end}}

===Helper classes===
{{dsc begin}}
{{dsc inc|cpp/error/error_condition/dsc is_error_condition_enum}}
{{dsc inc|cpp/error/error_condition/dsc hash}}
{{dsc end}}

===Notes===
The [[cpp/error/error_condition/operator_cmp|comparison]] between a {{lc|std::error_code}} and a {{tt|std::error_condition}} is defined by their error categories. Notably, an error condition of {{lc|std::generic_category}} may compare equal to an error code of a specific category (e.g. {{lc|std::system_category}}), if they represent the same kind of error.

A {{lc|std::errc}} value can be compared to an error code via implicit conversion to {{tt|std::error_condition}}.

{{example
|code=
#include &lt;cerrno&gt;
#include &lt;iostream&gt;
#include &lt;system_error&gt;
#include &lt;Windows.h&gt;

int main()
{
    std::error_code ec{ERROR_FILE_EXISTS, std::system_category()};
    std::error_condition econd{EEXIST, std::generic_category()};

    std::cout.setf(std::ios::boolalpha);
    std::cout &lt;&lt; (ec == econd) &lt;&lt; '\n'; // typically true&lt;!-- false with libc++, because libc++ treats generic_category() and system_category() as being equivalent, even on windows. See also https://github.com/llvm/llvm-project/pull/93101 --&gt;
    std::cout &lt;&lt; (ec == std::errc::file_exists) &lt;&lt; '\n'; // ditto
    std::cout &lt;&lt; (ec == make_error_code(std::errc::file_exists)) &lt;&lt; '\n'; // false:
                                                                     // different category
}
|p=true
|output=
true
true
false
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/error/dsc error_code}}
{{dsc inc|cpp/error/dsc error_category}}
{{dsc inc|cpp/error/errc/dsc make_error_condition}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
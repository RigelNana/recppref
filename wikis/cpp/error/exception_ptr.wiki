{{cpp/title|exception_ptr}}
{{cpp/error/navbar}}
{{ddcl|header=exception|since=c++11|1=
using exception_ptr = /*unspecified*/
}}

{{tt|std::exception_ptr}} is a nullable pointer-like type that manages an exception object which has been thrown and captured with {{lc|std::current_exception}}. An instance of {{tt|std::exception_ptr}} may be passed to another function, possibly on another thread, where the exception may be rethrown and handled with a {{c/core|catch}} clause.

A default-constructed {{tt|std::exception_ptr}} is a null pointer; it does not point to an exception object.

Two instances of {{tt|std::exception_ptr}} compare equal only if they are both null or both point at the same exception object.

{{tt|std::exception_ptr}} is not implicitly convertible to any arithmetic, enumeration, or pointer type. It is contextually convertible to {{c/core|bool}}, and will evaluate to {{c|false}} if it is null, {{c|true}} otherwise.

The exception object referenced by an {{tt|std::exception_ptr}} remains valid as long as there remains at least one {{tt|std::exception_ptr}} that is referencing it: {{tt|std::exception_ptr}} is a shared-ownership smart pointer (note: this is in addition to the usual [[cpp/language/throw#The exception object|exception object lifetime rules]]).

{{tt|std::exception_ptr}} meets the requirements of {{named req|NullablePointer}}.

===Example===
{{include|cpp/error/example exception_ptr}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/error/dsc make_exception_ptr}}
{{dsc inc|cpp/error/dsc current_exception}}
{{dsc inc|cpp/error/dsc rethrow_exception}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
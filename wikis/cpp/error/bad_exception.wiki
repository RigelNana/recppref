{{cpp/title|bad_exception}}
{{cpp/error/bad_exception/navbar}}
{{ddcl|header=exception|
class bad_exception;
}}

{{tt|std::bad_exception}} is the type of the exception thrown by the C++ runtime in the following situations:

{{rev begin}}
{{rev|since=c++11|
* If {{lc|std::exception_ptr}} stores a copy of the caught exception and if the copy constructor of the exception object caught by {{lc|std::current_exception}} throws an exception, the captured exception is an instance of {{tt|std::bad_exception}}.
}}
{{rev|until=c++17|
* If a [[cpp/language/except spec|dynamic exception specification]] is violated and {{lc|std::unexpected}} throws or rethrows an exception that still violates the exception specification, but the exception specification allows {{tt|std::bad_exception}}, {{tt|std::bad_exception}} is thrown.
}}
{{rev end}}

{{inheritance diagram/std-bad_exception}}

{{rrev|since=c++26|All member functions of {{tt|std::bad_exception}} are {{c/core|constexpr}}.}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/error/bad_exception/bad_exception|constructs the {{tt|bad_exception}} object}}
{{dsc mem fun|cpp/error/bad_exception/operator{{=}}|copies the object}}
{{dsc mem vfun|cpp/error/bad_exception/what|returns the explanatory string}}
{{dsc end}}

{{cpp/error/exception/inherit}}

===Notes===
{{ftm begin}}
{{ftm|__cpp_lib_constexpr_exceptions|value=202411L|std=C++26|{{c/core|constexpr}} for exception types}}
{{ftm end}}

===Example===
{{example
|Compiles only in C++14 or earlier modes (may issue warnings).
|code=
#include &lt;exception&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;

void my_unexp()
{
    throw;
}

void test()
    throw(std::bad_exception) // Dynamic exception specifications
                              // are deprecated in C++11
{
    throw std::runtime_error("test");
}

int main()
{
    std::set_unexpected(my_unexp); // Deprecated in C++11, removed in C++17

    try
    {
        test();
    }
    catch (const std::bad_exception&amp; e)
    {
        std::cerr &lt;&lt; "Caught " &lt;&lt; e.what() &lt;&lt; '\n';
    }
}
|p=true
|output=
Caught std::bad_exception
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
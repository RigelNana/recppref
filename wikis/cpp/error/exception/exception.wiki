{{cpp/error/exception/title|exception}}
{{cpp/error/exception/navbar}}
{{dcl begin}}
{{dcl rev multi|num=1|until1=c++11|dcl1=
exception() throw();
|notes2={{mark constexpr since c++26}}
|dcl2=
exception() noexcept;
}}
{{dcl rev multi|num=2|until1=c++11|dcl1=
exception( const exception&amp; other ) throw();
|notes2={{mark constexpr since c++26}}
|dcl2=
exception( const exception&amp; other ) noexcept;
}}
{{dcl end}}

Constructs new exception object.

@1@ Default constructor. {{lc|what()}} returns an implementation-defined string.

@2@ Copy constructor. Initializes the contents with those of {{c|other}}. If {{c|*this}} and {{c|other}} both have dynamic type {{tt|std::exception}} then {{c|1=std::strcmp(what(), other.what()) == 0}}.

===Parameters===
{{par begin}}
{{par|other|another exception to assign the contents of}}
{{par end}}

===Notes===
Because copying {{tt|std::exception}} is not permitted to throw exceptions, when derived classes (such as {{lc|std::runtime_error}}) have to manage a user-defined diagnostic message, it is typically implemented as a copy-on-write string.

The Microsoft implementation includes non-standard constructors taking strings thus allowing instances to be thrown directly with a meaningful error message. The nearest standard equivalents are {{lc|std::runtime_error}} or {{lc|std::logic_error}}.

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=471|std=C++98|before=there is no requirement on {{lc|what()}} of the exception copy|after=added}}
{{dr list end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
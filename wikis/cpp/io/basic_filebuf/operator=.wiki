{{cpp/io/basic_filebuf/title|operator{{=}}}}
{{cpp/io/basic_filebuf/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1=
std::basic_filebuf&amp; operator=( std::basic_filebuf&amp;&amp; rhs );
}}
{{dcl|num=2|1=
std::basic_filebuf&amp; operator=( const std::basic_filebuf&amp; rhs ) = delete;
}}
{{dcl end}}

Assigns another {{tt|basic_filebuf}} object.

@1@ First calls {{lc|close()}} to close the associated file, then moves the contents of {{c|rhs}} into {{c|*this}}: the put and get buffers, the associated file, the locale, the openmode, the is_open flag, and any other state. After the move, {{c|rhs}} is not associated with a file and {{c|1=rhs.is_open() == false}}.

@2@ The copy assignment operator is deleted; {{tt|basic_filebuf}} is not {{named req|CopyAssignable}}.

===Parameters===
{{par begin}}
{{par|rhs|another {{tt|basic_filebuf}} that will be moved from}}
{{par end}}

===Return value===
{{c|*this}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::ofstream{"test.in"} &lt;&lt; "test\n"; // writes via a temporary object
    std::ifstream fin("test.in"); // read-only stream
    std::ofstream fout("test.out"); // write-only stream

    std::string s;
    std::getline(fin, s);
    std::cout &lt;&lt; "s = [" &lt;&lt; s &lt;&lt; "]\n"; // s contains "test"

    assert(fout.is_open());
    *fin.rdbuf() = std::move(*fout.rdbuf());
    assert(!fout.is_open());

    std::getline(fin, s);
    std::cout &lt;&lt; "s = [" &lt;&lt; s &lt;&lt; "]\n"; // s is empty input
}
|output=
s = [test]
s = []
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_filebuf/dsc basic_filebuf}}
{{dsc inc|cpp/io/basic_filebuf/dsc swap}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
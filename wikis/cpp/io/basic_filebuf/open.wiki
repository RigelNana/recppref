{{cpp/io/basic_filebuf/title|open}}
{{cpp/io/basic_filebuf/navbar}}
{{dcl begin}}
{{dcl|num=1|
basic_filebuf* open( const char* s, std::ios_base::openmode mode );
}}
{{dcl|num=2|since=c++11|
basic_filebuf* open( const std::string&amp; str, std::ios_base::openmode mode ); 
}}
{{dcl|num=3|since=c++17|
basic_filebuf* open( const std::filesystem::path&amp; p,
                     std::ios_base::openmode mode );
}}
{{dcl|num=4|since=c++17|
basic_filebuf* open( const std::filesystem::path::value_type* s,
                     std::ios_base::openmode mode );
}}
{{dcl end}}

If the associated file was already open ({{c|1=is_open() != false}}), returns a null pointer right away.

Otherwise, opens the file with the given name ({{c|s}}{{rev inl|since=c++17|, {{c|p.c_str()}}}} or {{c|str.c_str()}}, depending on the overload). {{lc|std::ios_base::openmode}} values may be written as, e.g., {{c|std::ios_base::out {{!}} std::ios_base::app}}.

{{rrev|since=c++17|Overload {{v|4}} is only provided if {{tt|std::filesystem::path::value_type}} is not {{c/core|char}}.}}

The file is opened as if by calling {{lc|std::fopen}} with the second argument (file access mode) determined by the result of {{c|mode &amp; ~std::ios_base::ate}} as follows, {{tt|open()}} fails if the result is not some combination of flags shown in the table:
{| class="wikitable"
|-
!colspan="6"|{{c|mode &amp; ~std::ios_base::ate}}
!rowspan="2"|{{sep}}{{lc|std::fopen}}{{sep}}&lt;br&gt;access&lt;br&gt;mode
!rowspan="2"|Action if file already exists
!rowspan="2"|Action if file does not exist
|-style="text-align:center"
|style="width: 68px;"|{{ltt|cpp/io/ios_base/openmode|binary}}
|style="width: 68px;"|{{ltt|cpp/io/ios_base/openmode|in}}
|style="width: 68px;"|{{ltt|cpp/io/ios_base/openmode|out}}
|style="width: 68px;"|{{ltt|cpp/io/ios_base/openmode|trunc}}
|style="width: 68px;"|{{ltt|cpp/io/ios_base/openmode|app}}
|{{ltt|cpp/io/ios_base/openmode|noreplace}}&lt;br&gt;{{mark since c++23}}
|-
|{{no|-}}
|{{yes|+}}
|{{no|-}}
|{{no|-}}
|{{no|-}}
|{{no|-}}
|{{c|"r"}}
|rowspan="4"|Read from start
|rowspan="2"|Failure to open
|-
|{{yes|+}}
|{{yes|+}}
|{{no|-}}
|{{no|-}}
|{{no|-}}
|{{no|-}}
|{{c|"rb"}}
|-
|{{no|-}}
|{{yes|+}}
|{{yes|+}}
|{{no|-}}
|{{no|-}}
|{{no|-}}
|{{c|"r+"}}
|rowspan="2"|Error
|-
|{{yes|+}}
|{{yes|+}}
|{{yes|+}}
|{{no|-}}
|{{no|-}}
|{{no|-}}
|{{c|"r+b"}}
|-
|{{no|-}}
|{{no|-}}
|{{yes|+}}
|{{no|-}}
|{{no|-}}
|{{no|-}}
|rowspan="2"|{{c|"w"}}
|rowspan="6"|Destroy contents
|rowspan="6"|Create new
|-
|{{no|-}}
|{{no|-}}
|{{yes|+}}
|{{yes|+}}
|{{no|-}}
|{{no|-}}
|-
|{{yes|+}}
|{{no|-}}
|{{yes|+}}
|{{no|-}}
|{{no|-}}
|{{no|-}}
|rowspan="2"|{{c|"wb"}}
|-
|{{yes|+}}
|{{no|-}}
|{{yes|+}}
|{{yes|+}}
|{{no|-}}
|{{no|-}}
|-
|{{no|-}}
|{{yes|+}}
|{{yes|+}}
|{{yes|+}}
|{{no|-}}
|{{no|-}}
|{{c|"w+"}}
|-
|{{yes|+}}
|{{yes|+}}
|{{yes|+}}
|{{yes|+}}
|{{no|-}}
|{{no|-}}
|{{c|"w+b"}}
|-
|{{no|-}}
|{{no|-}}
|{{yes|+}}
|{{no|-}}
|{{no|-}}
|{{yes|+}}
|rowspan="2"|{{c|"wx"}}
|rowspan="6"|Failure to open
|rowspan="6"|Create new
|-
|{{no|-}}
|{{no|-}}
|{{yes|+}}
|{{yes|+}}
|{{no|-}}
|{{yes|+}}
|-
|{{yes|+}}
|{{no|-}}
|{{yes|+}}
|{{no|-}}
|{{no|-}}
|{{yes|+}}
|rowspan="2"|{{c|"wbx"}}
|-
|{{yes|+}}
|{{no|-}}
|{{yes|+}}
|{{yes|+}}
|{{no|-}}
|{{yes|+}}
|-
|{{no|-}}
|{{yes|+}}
|{{yes|+}}
|{{yes|+}}
|{{no|-}}
|{{yes|+}}
|{{c|"w+x"}}
|-
|{{yes|+}}
|{{yes|+}}
|{{yes|+}}
|{{yes|+}}
|{{no|-}}
|{{yes|+}}
|{{c|"w+bx"}}
|-
|{{no|-}}
|{{no|-}}
|{{yes|+}}
|{{no|-}}
|{{yes|+}}
|{{no|-}}
|rowspan="2"|{{c|"a"}}
|rowspan="8"|Write to end
|rowspan="8"|Create new
|-
|{{no|-}}
|{{no|-}}
|{{no|-}}
|{{no|-}}
|{{yes|+}}
|{{no|-}}
|-
|{{yes|+}}
|{{no|-}}
|{{yes|+}}
|{{no|-}}
|{{yes|+}}
|{{no|-}}
|rowspan="2"|{{c|"ab"}}
|-
|{{yes|+}}
|{{no|-}}
|{{no|-}}
|{{no|-}}
|{{yes|+}}
|{{no|-}}
|-
|{{no|-}}
|{{yes|+}}
|{{yes|+}}
|{{no|-}}
|{{yes|+}}
|{{no|-}}
|rowspan="2"|{{c|"a+"}}
|-
|{{no|-}}
|{{yes|+}}
|{{no|-}}
|{{no|-}}
|{{yes|+}}
|{{no|-}}
|-
|{{yes|+}}
|{{yes|+}}
|{{yes|+}}
|{{no|-}}
|{{yes|+}}
|{{no|-}}
|rowspan="2"|{{c|"a+b"}}
|-
|{{yes|+}}
|{{yes|+}}
|{{no|-}}
|{{no|-}}
|{{yes|+}}
|{{no|-}}
|}

If the open operation succeeds and {{c|1=(openmode &amp; std::ios_base::ate) != 0}} (the {{tt|ate}} bit is set), repositions the file position to the end of file, as if by calling {{c|std::fseek(file, 0, SEEK_END)}}, where {{c|file}} is the pointer returned by calling {{lc|std::fopen}}. If the repositioning fails, calls {{lc|close()}} and returns a null pointer to indicate failure.

===Parameters===
{{par begin}}
{{par|s, str, p|the file name to open; {{c|s}} must point to a null-terminated string}}
{{par|openmode|the file opening mode, a binary OR of the {{lc|std::ios_base::openmode}} modes}}
{{par end}}

===Return value===
{{c|this}} on success, a null pointer on failure.

===Notes===
{{tt|open()}} is typically called through the constructor or the {{tt|open()}} member function of {{lc|std::basic_fstream}}.

===Example===
{{example
|
|code=
#include &lt;fstream&gt;
#include &lt;iostream&gt;

int main()
{
    std::string filename = "Test.b";
    std::filebuf fb;
    
    // prepare a file to read
    double d = 3.14;
    if (!fb.open(filename, std::ios::binary {{!}} std::ios::out))
    {
        std::cout &lt;&lt; "Open file " &lt;&lt; filename &lt;&lt; " for write failed\n";
        return 1;
    } 
    fb.sputn(reinterpret_cast&lt;char*&gt;(&amp;d), sizeof d);
    fb.close();
    
    // open file for reading
    double d2 = 0.0;
    if (!fb.open(filename, std::ios::binary {{!}} std::ios::in))
    {
        std::cout &lt;&lt; "Open file " &lt;&lt; filename &lt;&lt; " for read failed\n";
        return 1;
    }
    
    auto got = fb.sgetn(reinterpret_cast&lt;char*&gt;(&amp;d2), sizeof d2);
    if (sizeof(d2) != got)
        std::cout &lt;&lt; "Read of " &lt;&lt; filename &lt;&lt; " failed\n";
    else
        std::cout &lt;&lt; "Read back from file: " &lt;&lt; d2 &lt;&lt; '\n';
}
|output=
Read back from file: 3.14
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=596|std=C++98|before={{tt|open()}} could not open files in append mode|after=can open in append mode}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_filebuf/dsc is_open}}
{{dsc inc|cpp/io/basic_filebuf/dsc close}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
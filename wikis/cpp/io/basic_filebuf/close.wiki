{{cpp/io/basic_filebuf/title|close}}
{{cpp/io/basic_filebuf/navbar}}
{{ddcl|
std::basic_filebuf&lt;CharT, Traits&gt;* close();
}}

If a put area exist (e.g. file was opened for writing), first calls {{c|overflow(Traits::eof())}} to write all pending output to the file, including any unshift sequences.

If the most recently called function, out of {{rlpf|underflow}}, {{rlpf|overflow}}, {{rlpf|seekpos}}, and {{rlpf|seekoff}}, was {{rlpf|overflow}}, then calls {{l2tf std|cpp/locale/codecvt/unshift}}, perhaps multiple times, to determine the unshift sequence according to the imbued locale, and writes that sequence to file with {{c|overflow(Traits::eof())}}.

Then, closes the file as if by calling {{lc|std::fclose()}}, regardless of whether any of the preceding calls succeeded or failed.

If any of the function calls made, including the call to {{lc|std::fclose()}}, fails, returns a null pointer. If any of the function calls made throws an exception, the exception is caught and rethrown after closing the file. If the file is already closed, returns a null pointer right away.

In any case, updates the private member variable that is accessed by {{lc|is_open()}}.

===Parameters===
(none)

===Return value===
{{c|this}} on success, a null pointer on failure.

===Notes===
{{tt|close()}} is typically called through the destructor of {{lc|std::basic_filebuf}} (which, in turn, is typically called by the destructor of {{lc|std::basic_fstream}}.

===Example===
{{example
|
|code=
|output=
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=443|std=C++98|before=the file was written using {{c|overflow(EOF)}}|after=changed to {{c|overflow(Traits::eof())}}}}
{{dr list item|wg=lwg|dr=622|std=C++98|before=it was unclear how to handle the&lt;br&gt;exception thrown during closing|after=it is rethrown after closing the file}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_filebuf/dsc is_open}}
{{dsc inc|cpp/io/basic_filebuf/dsc ~basic_filebuf}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
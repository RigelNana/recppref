{{cpp/io/basic_ios/title|tie}}
{{cpp/io/basic_ios/navbar}}
{{dcl begin}}
{{dcl|num=1|
std::basic_ostream&lt;CharT, Traits&gt;* tie() const;
}}
{{dcl|num=2|
std::basic_ostream&lt;CharT, Traits&gt;* tie( std::basic_ostream&lt;CharT, Traits&gt;* str );
}}
{{dcl end}}

Manages the tied stream. A tied stream is an output stream which is synchronized with the sequence controlled by the stream buffer ({{lc|rdbuf()}}), that is, {{c|flush()}} is called on the tied stream before any input/output operation on {{c|*this}}.

@1@ Returns the current tied stream. If there is no tied stream, a null pointer is returned.

@2@ Sets the current tied stream to {{c|str}}. Returns the tied stream before the operation. If there is no tied stream, a null pointer is returned. If {{c|str}} is not null and {{c|tie()}}&lt;!-- LWG 835's resolutions says 'str', it is possibly another defect --&gt; is reachable by traversing the linked list of tied stream objects starting from {{c|str-&gt;tie()}}, the behavior is undefined.

===Parameters===
{{par begin}}
{{par|str|an output stream to set as the tied stream}}
{{par end}}

===Return value===
The tied stream, or a null pointer if there was no tied stream.

{{cpp/impldef exception}}

===Notes===
By default, the standard stream {{lc|std::cout}} is tied to {{lc|std::cin}} and {{lc|std::cerr}}. Similarly, its wide counterpart {{lc|std::wcout}} is tied to {{lc|std::wcin}} and {{lc|std::wcerr}}.

===Example===
{{example|
|code=
#include &lt;fstream&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::ofstream os("test.txt");
    std::ifstream is("test.txt");
    std::string value("0");
    
    os &lt;&lt; "Hello";
    is &gt;&gt; value;
    
    std::cout &lt;&lt; "Result before tie(): " &lt;&lt; std::quoted(value) &lt;&lt; "\n";
    is.clear();
    is.tie(&amp;os);
    
    is &gt;&gt; value;
    
    std::cout &lt;&lt; "Result after tie(): " &lt;&lt; std::quoted(value) &lt;&lt; "\n";
}
|output=
Result before tie(): "0"
Result after tie(): "Hello"
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=835|std=C++98|before=two streams could be tied to each other&lt;ref&gt;{{l2tf std|cpp/io/basic_ostream/flush}} is an {{named req|UnformattedOutputFunction}}, so it creates a sentry object while being called. When {{tt|flush()}} is called on a stream object, the [[cpp/io/basic_ostream/sentry|constructor of the sentry object]] will call {{tt|flush()}} on its tied stream, and that {{tt|flush()}} will construct another sentry object and its constructor will call {{tt|flush()}} on the tied stream of that stream and so on. Therefore, if streams {{c|a}} and {{c|b}} are (directly or indirectly) tied to each other, calling {{c|a.flush()}} will eventually call {{c|b.flush()}}, which will eventually call {{c|a.flush()}}, and will result in an infinite loop.&lt;/ref&gt;&lt;br&gt;(either directly or through another intermediate stream object)|after=the behavior is undefined in this case}}
{{dr list end}}
&lt;references/&gt;

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
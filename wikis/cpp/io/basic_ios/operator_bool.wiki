{{cpp/io/basic_ios/title|operator bool}}
{{cpp/io/basic_ios/navbar}}
{{dcl begin}}
{{dcl|num=1|until=c++11|
operator /* unspecified-boolean-type */() const;
}}
{{dcl|num=2|since=c++11|
explicit operator bool() const;
}}
{{dcl end}}

Checks whether the stream has no errors. 

@1@ Returns a value that evaluates to {{c|false}} in a boolean context if {{c|fail()}} returns {{c|true}}, otherwise returns a value that evaluates to {{c|true}} in a boolean context.

@2@ Returns {{c|true}} if the stream has no errors and is ready for I/O operations. Specifically, returns {{c|!fail()}}. 

This operator makes it possible to use streams and functions that return references to streams as loop conditions, resulting in the idiomatic C++ input loops such as {{c|while (stream &gt;&gt; value) {...}&lt;!----&gt;}} or {{c|while (std::getline(stream, string)) {...}&lt;!----&gt;}}. Such loops execute the loop's body only if the input operation succeeded.

===Parameters===
(none)

===Return value===
@1@ A value that evaluates to {{c|true}} in a boolean context if the stream has no errors, a value that evaluates to {{c|false}} in a boolean context otherwise.

@2@ {{c|true}} if the stream has no errors, {{c|false}} otherwise.

===Notes===
This conversion can be used in contexts where a {{c/core|bool}} is expected (e.g. an [[cpp/language/if|if condition]]). However, [[cpp/language/implicit conversion|implicit conversions]] (e.g. to {{c/core|int}}) that can occur with {{c/core|bool}} are not allowed.

In C++98, {{c/core|operator bool}} could not be provided directly due to [[cpp/language/implicit conversion|the safe bool problem]]. The initial solution in C++98 is to provide {{c/core|operator void*}}, which returns a null pointer if {{c|fail()}} returns {{c|true}} or a non-null pointer otherwise. It is replaced by the resolution of {{lwg|468}}, which allows [https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Safe_bool Safe Bool idiom] to be applied.

Since C++11, conversion functions can be {{ltt|cpp/language/explicit}}. The resolution of {{lwg|1094}} introduced the explicit {{c/core|operator bool}} and the boolean conversion is now safe.

===Example===
{{example
|
|code=
#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
{
    std::istringstream s("1 2 3 error");
    int n;
    
    std::cout &lt;&lt; std::boolalpha &lt;&lt; "s is " &lt;&lt; static_cast&lt;bool&gt;(s) &lt;&lt; '\n';
    while (s &gt;&gt; n)
        std::cout &lt;&lt; n &lt;&lt; '\n';
    std::cout &lt;&lt; "s is " &lt;&lt; static_cast&lt;bool&gt;(s) &lt;&lt; '\n';
}
|output=
s is true
1
2
3
s is false
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=468|std=C++98|before={{c/core|operator void*}} was provided|after=a conversion function to an unspecified boolean type is provided instead}}
{{dr list end}}

===See also===
{{cpp/io/basic ios/iostate accessors}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
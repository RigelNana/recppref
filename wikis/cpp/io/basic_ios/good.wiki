{{cpp/io/basic_ios/title|good}}
{{cpp/io/basic_ios/navbar}}
{{dcl begin}}
{{dcl|1=
bool good() const;
}}
{{dcl end}}

Returns {{c|true}} if the most recent I/O operation on the stream completed successfully. Specifically, returns result of {{c|rdstate() {{==}} 0}}. 

See {{l2tt|cpp/io/ios_base/iostate}} for the list of conditions that set the stream status bits.

===Parameters===
(none)

===Return value===
{{c|true}} if the stream error flags are all false, {{c|false}} otherwise.

===Example===
{{example
|code=
#include &lt;cstdlib&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;

int main()
{
    const char* fname = "/tmp/test.txt";
    std::ofstream ofile{fname};
    ofile &lt;&lt; "10 " &lt;&lt; "11 " &lt;&lt; "12 " &lt;&lt; "non-int";
    ofile.close();

    std::ifstream file{fname};
    if (!file.good())  
    {  
        std::cout &lt;&lt; "#1. Opening file test.txt failed - "
                     "one of the error flags is true\n";
        return EXIT_FAILURE;
    }

    // typical C++ I/O loop uses the return value of the I/O function
    // as the loop controlling condition, operator bool() is used here
    for (int n; file &gt;&gt; n;)
        std::cout &lt;&lt; n &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    if (file.bad()) 
    {
        std::cout &lt;&lt; "#2. I/O error while reading - badbit is true\n";
        return EXIT_FAILURE;
    } 
    else if (file.eof())
        std::cout &lt;&lt; "#3. End of file reached successfully - eofbit is true\n"
            "This is fine even though file.good() is false\n"; 
    else if (file.fail())
        std::cout &lt;&lt; "#4. Non-integer data encountered - failbit is true\n";
}
|p=true
|output=
10 11 12 
#4. Non-integer data encountered - failbit is true
}}

===See also===
{{cpp/io/basic ios/iostate accessors}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
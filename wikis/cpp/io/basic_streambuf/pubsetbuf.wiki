{{cpp/io/basic_streambuf/title|pubsetbuf|setbuf}}
{{cpp/io/basic_streambuf/navbar}}
{{dcl begin}}
{{dcl|num=1|1=
public:
basic_streambuf&lt;CharT, Traits&gt;* pubsetbuf( char_type* s, std::streamsize n )
}}
{{dcl|num=2|1=
protected:
virtual basic_streambuf&lt;CharT, Traits&gt;* setbuf( char_type* s, std::streamsize n )
}}
{{dcl end}}

@1@ Calls {{c|setbuf(s, n)}} of the most derived class.

@2@ The base class version of this function has no effect. The derived classes may override this function to allow removal or replacement of the controlled character sequence (the buffer) with a user-provided array, or for any other implementation-specific purpose.

===Parameters===
{{par begin}}
{{par|s|pointer to the first {{tt|CharT}} in the user-provided buffer}}
{{par|n|the number of {{tt|CharT}} elements in the user-provided buffer}}
{{par end}}

===Return value===
@1@ The return value of {{c|setbuf(s, n)}}.
@2@ {{c|this}}

===Example===
{{example
|Provides a 10k buffer for reading. On linux, the strace utility may be used to observe the actual number of bytes read.
|code=
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    int cnt = 0;
    std::ifstream file;
    char buf[1024 * 10 + 1];
    
    file.rdbuf()-&gt;pubsetbuf(buf, sizeof buf);
    
    file.open("/usr/share/dict/words");
    
    for (std::string line; getline(file, line);)
        ++cnt;
    
    std::cout &lt;&lt; cnt &lt;&lt; '\n';
}
|p=true
|output=
356010
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=158|std=C++98|before=the default behavior of {{tt|setbuf}} was only specified&lt;br&gt;if {{lc|gptr()}} is not null and not equal to {{lc|egptr()}}|after=specified as no-op&lt;br&gt;for all cases}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_stringbuf/dsc setbuf}}
{{dsc inc|cpp/io/basic_filebuf/dsc setbuf}}
{{dsc inc|cpp/io/strstreambuf/dsc setbuf}}
{{dsc inc|cpp/io/c/dsc setbuf}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
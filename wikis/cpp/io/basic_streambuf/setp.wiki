{{cpp/io/basic_streambuf/title|setp}}
{{cpp/io/basic_streambuf/navbar}}
{{ddcl|1=
protected:
void setp( char_type* pbeg, char_type* pend );
}}

Sets the values of the pointers defining the put area.

After the call, {{c|1=pbase() == pbeg}}, {{c|1=pptr() == pbeg}} and {{c|1=epptr() == pend}} are all {{c|true}}.

If any of {{range|pbeg|pend}} is not a [[cpp/iterator#Ranges|valid range]], the behavior is undefined.

===Parameters===
{{par begin}}
{{par|pbeg|pointer to the new beginning of the put area}}
{{par|pend|pointer to the new end of the put area}}
{{par end}}

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;cstddef&gt;
#include &lt;iostream&gt;

// Buffer for std::ostream implemented by std::array
template&lt;std::size_t size, class CharT = char&gt;
struct ArrayedStreamBuffer : std::basic_streambuf&lt;CharT&gt;
{
    using Base = std::basic_streambuf&lt;CharT&gt;;
    using char_type = typename Base::char_type;
    
    ArrayedStreamBuffer()
    {
        // put area pointers to work with “buffer”
        Base::setp(buffer.data(), buffer.data() + size);
    }
    
    void print_buffer()
    {
        for (char_type i : buffer)
        {
            if (i == 0)
                std::cout &lt;&lt; "\\0";
            else
                std::cout &lt;&lt; i;
            std::cout &lt;&lt; ' ';
        }
        std::cout &lt;&lt; '\n';
    }
    
private:
    std::array&lt;char_type, size&gt; buffer{}; // value-initialize “buffer”
};

int main()
{
    ArrayedStreamBuffer&lt;10&gt; streambuf;
    std::ostream stream(&amp;streambuf);
    
    stream &lt;&lt; "hello";
    stream &lt;&lt; ",";
    
    streambuf.print_buffer();
}
|output=
h e l l o , \0 \0 \0 \0
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=4023|std=C++98|before={{tt|setp}} did not require the output sequence to be a valid range|after=requires}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_streambuf/dsc setg}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/io/basic_streambuf/title|pbump}}
{{cpp/io/basic_streambuf/navbar}}
{{ddcl|1=
protected:
void pbump( int count );
}}

Repositions the ''put pointer'' ({{lc|pptr()}}) by {{c|count}} characters, where {{c|count}} may be positive or negative. No checks are done for moving the pointer outside the put area {{range|pbase()|epptr()}}.

If the pointer is advanced and then {{lc|overflow()}} is called to flush the put area to the associated character sequence, the effect is that extra {{c|count}} characters with undefined values are output.

===Parameters===
{{par begin}}
{{par|count|number to add to the put pointer}}
{{par end}}

===Return value===
(none)

===Notes===
Because this function takes an {{c|int}}, it cannot manipulate buffers larger than {{c|std::numeric_limits&lt;int&gt;::max()}} characters ({{lwg|255}}).

===Example===
{{example
|code=
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

struct showput_streambuf : std::filebuf
{
    using std::filebuf::pbump; // expose protected
    std::string showput() const
    {
        return std::string(pbase(), pptr());
    }
};

int main()
{
    showput_streambuf mybuf;
    mybuf.open("test.txt", std::ios_base::out);
    std::ostream str(&amp;mybuf);
    str &lt;&lt; "This is a test" &lt;&lt; std::flush &lt;&lt; "1234";
    std::cout &lt;&lt; "The put area contains: " &lt;&lt; mybuf.showput() &lt;&lt; '\n';
    mybuf.pbump(10);
    std::cout &lt;&lt; "after pbump(10), it contains " &lt;&lt; mybuf.showput() &lt;&lt; '\n';
}
|output=
The put area contains: 1234
after pbump(10), it contains 1234 is a test
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_streambuf/dsc gbump}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
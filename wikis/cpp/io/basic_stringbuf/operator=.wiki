{{cpp/io/basic_stringbuf/title|operator{{=}}}}
{{cpp/io/basic_stringbuf/navbar}}
{{dcl begin}}
{{dcl|since=c++11|num=1|1=
std::basic_stringbuf&amp; operator=( std::basic_stringbuf&amp;&amp; rhs );
}}
{{dcl|num=2|1=
std::basic_stringbuf&amp; operator=( const std::basic_stringbuf&amp; rhs ) = delete;
}}
{{dcl end}}

@1@ Move assignment operator: Moves the contents of {{c|rhs}} into {{c|*this}}. After the move, {{c|*this}} has the associated string, the open mode, the locale, and all other state formerly held by {{c|rhs}}. The six pointers of {{lc|std::basic_streambuf}} in {{c|*this}} are guaranteed to be different from the corresponding pointers in the moved-from {{c|rhs}} unless null.
@2@ The copy assignment operator is deleted; {{tt|basic_stringbuf}} is not {{named req|CopyAssignable}}.

===Parameters===
{{par begin}}
{{par|rhs|another {{tt|basic_stringbuf}} that will be moved from}}
{{par end}}

===Return value===
{{c|*this}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;

int main()
{
    std::istringstream one("one");
    std::ostringstream two("two");

    std::cout &lt;&lt; "Before move, one = \"" &lt;&lt; one.str() &lt;&lt; '"'
              &lt;&lt; " two = \"" &lt;&lt; two.str() &lt;&lt; "\"\n";

    *one.rdbuf() = std::move(*two.rdbuf());

    std::cout &lt;&lt; "After move, one = \"" &lt;&lt; one.str() &lt;&lt; '"'
              &lt;&lt; " two = \"" &lt;&lt; two.str() &lt;&lt; "\"\n";
}
|output=
Before move, one = "one" two = "two"
After move, one = "two" two = ""
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_stringbuf/dsc constructor}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
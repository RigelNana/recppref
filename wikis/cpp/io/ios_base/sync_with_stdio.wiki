{{cpp/io/ios_base/title|sync_with_stdio}}
{{cpp/io/ios_base/navbar}}
{{ddcl|1=
static bool sync_with_stdio( bool sync = true );
}}

Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation. 

The standard C++ streams are the following: {{lc|std::cin}}, {{lc|std::cout}}, {{lc|std::cerr}}, {{lc|std::clog}}, {{lc|std::wcin}}, {{lc|std::wcout}}, {{lc|std::wcerr}} and {{lc|std::wclog}}.

The standard C streams are the following: {{lc|stdin}}, {{lc|stdout}} and {{lc|stderr}}.

For a standard stream {{c|str}}, synchronized with the C stream {{c|f}}, the following pairs of functions have identical effect:
@1@ {{c|std::fputc(f, c)}} and {{c|str.rdbuf()-&gt;sputc(c)}}.
@2@ {{c|std::fgetc(f)}} and {{c|str.rdbuf()-&gt;sbumpc()}}.
@3@ {{c|std::ungetc(c, f)}} and {{c|str.rdbuf()-&gt;sputbackc(c)}}.

In practice, this means that the synchronized C++ streams are unbuffered, and each I/O operation on a C++ stream is immediately applied to the corresponding C stream's buffer. This makes it possible to freely mix C++ and C I/O.

In addition, synchronized C++ streams are guaranteed to be thread-safe (individual characters output from multiple threads may interleave, but no data races occur).

If the synchronization is turned off, the C++ standard streams are allowed to buffer their I/O independently, which may be considerably faster in some cases. 

By default, all eight standard C++ streams are synchronized with their respective C streams.

If this function is called after I/O has occurred on the standard stream, the behavior is implementation-defined: implementations range from no effect to destroying the read buffer.

===Parameters===
{{par begin}}
{{par|sync|the new synchronization setting}}
{{par end}}

===Return value===
Synchronization state before the call to the function.

===Example===
{{example
|code=
#include &lt;cstdio&gt;
#include &lt;iostream&gt;

int main()
{
    std::ios::sync_with_stdio(false);
    std::cout &lt;&lt; "a\n";
    std::printf("b\n");
    std::cout &lt;&lt; "c\n";
}
|p=true
|output=
b&lt;!--bac, acb, and abc seen with different compilers/libraries; using bac here as it demonstrates an implementation that actually buffers the C++ I/O streams--&gt;
a
c
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=49|std=C++98|before=it was unspecified (1) which state is actually returned and&lt;br&gt;(2) what does 'synchronized' between standard C and C++ streams mean|after=both specified}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/dsc cout}}
{{dsc inc|cpp/io/dsc cerr}}
{{dsc inc|cpp/io/dsc clog}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
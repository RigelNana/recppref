{{cpp/io/ios_base/title|width}}
{{cpp/io/ios_base/navbar}}
{{dcl begin}}
{{dcl|num=1|
streamsize width() const;
}}
{{dcl|num=2|
streamsize width( streamsize new_width );
}}
{{dcl end}}

Manages the minimum number of characters to generate on certain output operations and the maximum number of characters to generate on certain input operations.

@1@ Returns the current field width.

@2@ Sets the field width to the given one. Returns the previous field width.

===Parameters===
{{par begin}}
{{par|new_width|new field width setting}}
{{par end}}

===Return value===
The field width before the call to the function.

===Notes===
Some I/O functions call {{c|width(0)}} before returning, see {{lc|std::setw}} (this results in this field having effect on the next I/O function only, and not on any subsequent I/O).

The exact effects this modifier has on the input and output vary between the individual I/O functions and are described at each {{tt|operator&lt;&lt;}} and {{tt|operator&gt;&gt;}} overload page individually.

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;span&gt;
#include &lt;string_view&gt;
using namespace std::string_view_literals;

constexpr std::array table_header =
{
    "Language"sv, "Author"sv, "Birthdate"sv, "RIP date"sv
};

using row_t = std::array&lt;std::string_view, table_header.size()&gt;;
using widths_t = std::array&lt;std::size_t, table_header.size()&gt;;

constexpr std::array table_body = std::to_array&lt;row_t&gt;
({
    {"C", "Dennis Ritchie", "1941-09-09", "2011-10-12"},
    {"C++", "Bjarne Stroustrup", "1950-12-30"},
    {"C#", "Anders Hejlsberg", "1960-12-02"},
    {"Python", "Guido van Rossum", "1956-01-31"},
    {"Javascript", "Brendan Eich", "1961-07-04"}
});

constexpr widths_t calculate_column_widths(std::span&lt;const row_t&gt; table)
{
    widths_t widths{};
    for (const row_t&amp; row : table)
        for (size_t i = 0; i != row.size(); ++i)
            widths[i] = std::max(widths[i], row[i].size());
    return widths;
}

void print_row(const row_t&amp; row, const widths_t&amp; widths)
{
    std::cout &lt;&lt; '{{!}}';
    for (size_t i = 0; i != row.size(); ++i)
    {
        std::cout &lt;&lt; ' ';
        std::cout.width(widths[i]);
        std::cout &lt;&lt; row[i] &lt;&lt; " {{!}}";
    }
    std::cout &lt;&lt; '\n';
};

void print_break(const widths_t&amp; widths)
{
    const std::size_t margin = 1;
    std::cout.put('+').fill('-');
    for (std::size_t w : widths)
    {
        std::cout.width(w + margin * 2);
        std::cout &lt;&lt; '-' &lt;&lt; '+';
    }
    std::cout.put('\n').fill(' ');
};

int main()
{
    constexpr widths_t widths = calculate_column_widths(table_body);
 
    std::cout.setf(std::ios::left, std::ios::adjustfield);
    print_break(widths);
    print_row(table_header, widths);
    print_break(widths);
    for (const row_t&amp; row : table_body)
        print_row(row, widths);
    print_break(widths);
}
|output=
+------------+-------------------+------------+------------+
{{!}} Language   {{!}} Author            {{!}} Birthdate  {{!}} RIP date   {{!}}
+------------+-------------------+------------+------------+
{{!}} C          {{!}} Dennis Ritchie    {{!}} 1941-09-09 {{!}} 2011-10-12 {{!}}
{{!}} C++        {{!}} Bjarne Stroustrup {{!}} 1950-12-30 {{!}}            {{!}}
{{!}} C#         {{!}} Anders Hejlsberg  {{!}} 1960-12-02 {{!}}            {{!}}
{{!}} Python     {{!}} Guido van Rossum  {{!}} 1956-01-31 {{!}}            {{!}}
{{!}} Javascript {{!}} Brendan Eich      {{!}} 1961-07-04 {{!}}            {{!}}
+------------+-------------------+------------+------------+
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/ios_base/dsc precision}}
{{dsc inc|cpp/io/manip/dsc setw}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/io/ios_base/title|register_callback}}
{{cpp/io/ios_base/navbar}}
{{ddcl|
void register_callback( event_callback function, int index );
}}

Registers a user-defined function which will be called by {{lc|imbue()}}, {{lc|std::basic_ios::copyfmt()}} and {{lc|~ios_base()}}. Every registered callback is called every time: the event type (a value of type {{lc|event}}) is passed as its first argument, and may be used to distinguish between the callers.

The callbacks are called in the reverse order of registration (in other words, {{tt|register_callback()}} pushes a callback pair on the callback stack). If {{tt|register_callback()}} is called from within a callback function to add a new callback, the new callback is only called on the next event.

The user-defined callback function is not allowed to throw exceptions.

===Parameters===
{{par begin}}
{{par|function|the function which will be called on event, supplied as a function pointer of type {{rlp|event_callback}}}}
{{par|index|custom parameter which will be passed to the function}}
{{par end}}

===Return value===
(none)

===Notes===
Once registered, a callback cannot be deregistered: it remains a part of the stream object for the rest of its lifetime. If the behavior of a callback needs to change, it may be controlled through {{lc|iword()}} or {{lc|pword()}}.

If the same function is registered multiple times, it is called multiple times.

The integer value that is stored together with the callback is typically an index obtained from {{lc|xalloc()}}.

===Example===
{{example
|Demonstrates the use of {{tt|register_callback}} to update locale-dependent cached values that are used by a custom output operator.
|code=
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;

// Cached locale-specific message and its hash
typedef std::pair&lt;std::string, std::size_t&gt; cache_t;

// Populate the cached message and its hash from the locale
void update_cache(cache_t&amp; cache, std::locale loc)
{
    auto&amp; fct = std::use_facet&lt; std::messages&lt;char&gt; &gt;(loc);
    std::messages_base::catalog cat = fct.open("sed", loc);
    cache.first = cat &lt; 0 ? "" : fct.get(cat, 0, 0, "Memory exhausted");
    cache.second = std::hash&lt;std::string&gt;()(cache.first);
}

// Update the cache if the locale changed
void true_callback(std::ios_base::event evt, std::ios_base&amp; str, int idx)
{
    if (evt == std::ios_base::imbue_event) 
    {
        cache_t* ptr = static_cast&lt;cache_t*&gt;(str.pword(idx));
        update_cache(*ptr, str.getloc());
    }
}

// Registers the cache in pword() and sets up the callback
struct CacheSetup
{
    CacheSetup(std::ostream&amp; os, std::ios_base::event_callback f, cache_t* cache)
    {
        int index = std::ostream::xalloc();
        os.pword(index) = cache; // Store pointer to cache in the stream
        os.register_callback(f, index); // Store callback and the index to the pointer
        update_cache(*cache, os.getloc()); // Initialize cache
    };
};

// Some custom class 
struct S {};
// Some custom class's operator&lt;&lt; that needs fast access to hashed message
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const S&amp;)
{
    static cache_t cache;
    static CacheSetup setup(os, true_callback, &amp;cache);
    return os &lt;&lt; cache.first &lt;&lt; " : " &lt;&lt; cache.second;
}

int main()
{
    std::locale loc("en_US.utf8");
    
    S s;
    std::cout.imbue(loc);
    std::cout &lt;&lt; s &lt;&lt; '\n';
    
    std::cout.imbue(std::locale(loc, new std::messages_byname&lt;char&gt;("de_DE.utf8")));
    std::cout &lt;&lt; s &lt;&lt; '\n';

    std::cout.imbue(std::locale(loc, new std::messages_byname&lt;char&gt;("ja_JP.utf8")));
    std::cout &lt;&lt; s &lt;&lt; '\n';

    std::cout.imbue(std::locale(loc, new std::messages_byname&lt;char&gt;("ru_RU.utf8")));
    std::cout &lt;&lt; s &lt;&lt; '\n';
}
|output=
Memory exhausted : 2,295,079,096
Speicher erschöpft : 3,139,423,551
メモリーが足りません : 3,837,351,114
Память исчерпана : 3,742,732,851
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
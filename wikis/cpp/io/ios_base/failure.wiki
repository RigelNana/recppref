{{cpp/io/ios_base/title|failure}}
{{cpp/io/ios_base/navbar}}
{{ddcl|header=ios| 
class failure;
}}

The class {{tt|std::ios_base::failure}} defines an exception object that is thrown on failure by the functions in the Input/Output library.

{{rrev|since=c++17|
{{tt|std::ios_base::failure}} may be defined either as a member class of {{lc|std::ios_base}} or as a synonym (typedef) for another class with equivalent functionality.
}}

{{rrev multi|until1=c++11
|rev1=
{{inheritance diagram/std-ios_base-failure-2003}}
|rev2=
{{inheritance diagram/std-ios_base-failure}}
}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|nolink=true|constructs a new {{tt|failure}} object with the given message}}
{{dsc mem fun|operator{{=}}|nolink=true|replaces the {{tt|failure}} object}}
{{dsc mem fun|what|nolink=true|returns the explanatory string}}
{{dsc end}}

{{member|{{small|std::ios_base::failure::}}failure|
{{dcl begin}}
{{dcl rev multi|num=1|until1=c++11
|dcl1=
explicit failure( const std::string&amp; message );
|dcl2=
explicit failure( const std::string&amp; message, 
                  const std::error_code&amp; ec = std::io_errc::stream );
}}
{{dcl|num=2|since=c++11|1=
explicit failure( const char* message,
                  const std::error_code&amp; ec = std::io_errc::stream );
}}
{{dcl rev multi|num=3|until1=c++11
|dcl1=
failure( const failure&amp; other );
|dcl2=
failure( const failure&amp; other ) noexcept;
}}
{{dcl end}}

@1,2@ Constructs the exception object using {{c|message}} as explanation string which can later be retrieved using {{ltf|cpp/error/exception/what}}. {{rev inl|since=c++11|{{c|ec}} is used to identify the specific reason for the failure.}}
@3@ Copy constructor. Initialize the contents with those of {{c|other}}. {{rev inl|since=c++11|If {{c|*this}} and {{c|other}} both have dynamic type {{tt|std::ios_base::failure}} then {{c|1=std::strcmp(what(), other.what()) == 0}}.&lt;!--LWG 471--&gt;}}

===Parameters===
{{par begin}}
{{par|message|explanatory string}}
{{par|ec|error code to identify the specific reason for the failure}}
{{par|other|another {{tt|failure}} to copy}}
{{par end}}

===Notes===
Because copying {{tt|std::ios_base::failure}} is not permitted to throw exceptions, this message is typically stored internally as a separately-allocated reference-counted string. This is also why there is no constructor taking {{c/core|std::string&amp;&amp;}}: it would have to copy the content anyway.
}}

{{cpp/error/exception/member assignment what|ios_base::failure}}

{{cpp/error/system_error/inherit}}
{{cpp/error/runtime_error/inherit}}
{{cpp/error/exception/inherit}}

===Notes===
Before the resolution of {{lwg|331}}, {{tt|std::ios_base::failure}} declared a destructor without {{c/core|throw()}}, where {{ltt|cpp/error/exception/~exception|std::exception::~exception()}} was declared with {{c/core|throw()}}&lt;ref&gt;The non-throwing exception specification is now applied [[cpp/standard library#Guarantees|globally across the standard library]], so the destructors of standard library classes are not declared with {{c/core|throw()}} or {{c/core|noexcept}}.&lt;/ref&gt;. This means the {{tt|std::ios_base::failure::~failure()}} had a weaker exception specification. The resolution is to remove that declaration so that the non-throwing exception specification is kept.

{{lwg|363}} targets the same defect and its resolution is to add {{c/core|throw()}} to the declaration of {{tt|std::ios_base::failure::~failure()}}. That resolution was not applied due to the conflict between the two resolutions.

&lt;references/&gt;

===Example===
{{example
|code=
#include &lt;fstream&gt;
#include &lt;iostream&gt;

int main()
{
    std::ifstream f("doesn't exist");
    
    try
    {
        f.exceptions(f.failbit);
    }
    catch (const std::ios_base::failure&amp; e)
    {
        std::cout &lt;&lt; "Caught an ios_base::failure.\n"
                  &lt;&lt; "Explanatory string: " &lt;&lt; e.what() &lt;&lt; '\n'
                  &lt;&lt; "Error code: " &lt;&lt; e.code() &lt;&lt; '\n';
    }
}
|p=true
|output=
Caught an ios_base::failure.
Explanatory string: ios_base::clear: unspecified iostream_category error
Error code: iostream:1
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=48|std=C++98|before=the constructor overload (1) initialized the base class {{lc|std::exception}}&lt;br&gt;with {{c|msg}}, but the base class does not have a matching constructor|after=corresponding&lt;br&gt;description removed}}
{{dr list item|wg=lwg|dr=331|std=C++98|before={{tt|std::ios_base::failure}} declared a destructor without {{c/core|throw()}}|after=removed the destructor declaration}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/dsc io_errc}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
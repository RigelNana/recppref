{{cpp/title|print}}
{{cpp/io/print/navbar}}

{{dcl begin}}
{{dcl header|print}}
{{dcl|num=1|since=c++23|
template&lt; class... Args &gt;
void print( std::format_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl|num=2|since=c++23|
template&lt; class... Args &gt;
void print( std::FILE* stream,
            std::format_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl end}}

Format {{c|args}} according to the format string {{c|fmt}}, and print the result to an output stream.

@1@ Equivalent to {{c|std::print(stdout, fmt, std::forward&lt;Args&gt;(args)...)}}.

@2@ If the [[cpp/language/charset#Code unit and literal encoding|ordinary literal encoding]] is UTF-8, equivalent to {{c multi
|(std::enable_nonlocking_formatter_optimization&lt;std::remove_cvref_t&lt;Args&gt;&gt; &amp;&amp; ...)
|    ? std::vprint_unicode(stream, fmt.str, std::make_format_args(args...))
|    : std::vprint_unicode_buffered(stream, fmt.str, std::make_format_args(args...));}}.
@@ Otherwise, equivalent to {{c multi
|(std::enable_nonlocking_formatter_optimization&lt;std::remove_cvref_t&lt;Args&gt;&gt; &amp;&amp; ...)
|    ? std::vprint_nonunicode(stream, fmt.str, std::make_format_args(args...))
|    : std::vprint_nonunicode_buffered(stream, fmt.str, std::make_format_args(args...));}}.

If {{c/core|std::formatter&lt;Ti, char&gt;}} does not meet the {{named req|BasicFormatter}} requirements for any {{tt|Ti}} in {{tt|Args}} (as required by {{lc|std::make_format_args}}), the behavior is undefined.

===Parameters===
{{par begin}}
{{par|stream|output file stream to write to}}
{{par|fmt|{{include|cpp/utility/format/format string}}}}
{{par|args...|arguments to be formatted}}
{{par end}}

===Exceptions===
{{std print exceptions}}

===Notes===
{{ftm begin|std=1|value=1|comment=1}}
{{ftm|__cpp_lib_print|Formatted output|value=202207L|std=C++23|rowspan=3}}
{{ftm|-|Unbuffered formatted output|value=202403L|std=C++26|dr=23}}
{{ftm|-|Enabling unbuffered formatted output for more formattable types|value=202406L|std=C++26|dr=23}}
{{ftm|__cpp_lib_format|Exposing {{lc|std::basic_format_string}}|value=202207L|std=C++23}}
{{ftm end}}

===Example===
{{example
|code=
#include &lt;cstdio&gt;
#include &lt;filesystem&gt;
#include &lt;print&gt;

int main()
{
    std::print("{0} {2}{1}!\n", "Hello", 23, "C++");  // overload (1)
    
    const auto tmp {std::filesystem::temp_directory_path() / "test.txt"};
    
    if (std::FILE* stream{std::fopen(tmp.c_str(), "w")})
    {
        std::print(stream, "File: {}", tmp.string()); // overload (2)
        std::fclose(stream);
    }
}
|output=
Hello C++23!
}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P3107R5|std=C++23|before=only buffered printing operations can be performed|after=can perform unbuffered printing operations}}
{{dr list item|paper=P3235R3|std=C++23|before=the names of the functions added&lt;br&gt;by {{stddoc|P3107R5}} were misleading|after=changed the function names}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/dsc println}}
{{dsc inc|cpp/io/basic_ostream/dsc print}}
{{dsc inc|cpp/utility/format/dsc format}}
{{dsc inc|cpp/utility/format/dsc format_to}}
{{dsc inc|cpp/io/c/dsc fprintf}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
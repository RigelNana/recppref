{{cpp/title|basic_ifstream}}
{{cpp/io/basic_ifstream/navbar}}
{{ddcl|header=fstream|1=
template&lt; 
    class CharT, 
    class Traits = std::char_traits&lt;CharT&gt;
&gt; class basic_ifstream : public std::basic_istream&lt;CharT, Traits&gt;
}}

The class template {{tt|basic_ifstream}} implements high-level input operations on file-based streams. It interfaces a file-based streambuffer ({{lc|std::basic_filebuf}}) with the high-level interface of ({{lc|std::basic_istream}}).

A typical implementation of {{tt|std::basic_ifstream}} holds only one non-derived data member: an instance of {{c/core|std::basic_filebuf&lt;CharT, Traits&gt;}}.

{{inheritance diagram/std-basic_ifstream}}

{{cpp/basic char typedefs|ifstream|fstream}}

{{cpp/io/member types|ifstream}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/io/basic_fstream/dsc constructor|basic_ifstream}}
{{dsc inc|cpp/io/basic_fstream/dsc destructor|basic_ifstream}}
{{dsc inc|cpp/io/basic_fstream/dsc operator{{=}}|basic_ifstream}}
{{dsc inc|cpp/io/basic_fstream/dsc swap|basic_ifstream}}
{{dsc inc|cpp/io/basic_fstream/dsc rdbuf|basic_ifstream}}
{{dsc inc|cpp/io/basic_ifstream/dsc native_handle}}

{{dsc h2|File operations}}
{{dsc inc|cpp/io/basic_fstream/dsc is_open|basic_ifstream}}
{{dsc inc|cpp/io/basic_fstream/dsc open|basic_ifstream}}
{{dsc inc|cpp/io/basic_fstream/dsc close|basic_ifstream}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/io/basic_fstream/dsc swap2|basic_ifstream}}
{{dsc end}}

{{cpp/io/basic_istream/inherit}}
{{cpp/io/basic_ios/inherit}}
{{cpp/io/ios_base/inherit}}

===Notes===
{{feature test macro|__cpp_lib_fstream_native_handle|std=C++26|value=202306L|native handles support}}

===Example===
{{example
|code=
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::string filename = "Test.b";
    
    // prepare a file to read
    double d = 3.14;
    std::ofstream(filename, std::ios::binary)
        .write(reinterpret_cast&lt;char*&gt;(&amp;d), sizeof d) &lt;&lt; 123 &lt;&lt; "abc";
    
    // open file for reading
    std::ifstream istrm(filename, std::ios::binary);
    if (!istrm.is_open())
        std::cout &lt;&lt; "failed to open " &lt;&lt; filename &lt;&lt; '\n';
    else
    {
        double d;
        istrm.read(reinterpret_cast&lt;char*&gt;(&amp;d), sizeof d); // binary input
        int n;
        std::string s;
        if (istrm &gt;&gt; n &gt;&gt; s)                               // text input
            std::cout &lt;&lt; "read back from file: " &lt;&lt; d &lt;&lt; ' ' &lt;&lt; n &lt;&lt; ' ' &lt;&lt; s &lt;&lt; '\n';
    }
}
|output=
read back from file: 3.14 123 abc
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/io/ostrstream/title|ostrstream}}
{{cpp/io/ostrstream/navbar}}
{{dcl begin}}
{{dcl|num=1|deprecated=c++98|removed=c++26|1=
ostrstream();
}}
{{dcl|num=2|deprecated=c++98|removed=c++26|1=
ostrstream( char* s, int n, std::ios_base::openmode mode = std::ios_base::out );
}}
{{dcl end}}

Constructs new output strstream and its underlying {{lc|std::strstreambuf}}.

@1@ Default-constructs the underlying {{lc|std::strstreambuf}}, which creates a dynamically growing buffer, and initializes the base class with the address of the {{tt|strstreambuf}} member.

@2@ Initialized the base class with the address of the underlying {{lc|std::strstreambuf}} member, which is initialized in one of the two possible ways, both of which write to user-provided fixed-size array:
:@a@ if the {{tt|app}} bit is not set in {{c|mode}}, constructs the buffer by calling {{c|strstreambuf(s, n, s)}}. The behavior is undefined if there are less than {{c|n}} elements in the array whose first element is pointed to by {{c|s}}
:@b@ if the {{tt|app}} bit is set in {{c|mode}}, constructs the buffer by calling {{c|strstreambuf(s, n, s + std::strlen(s))}}. The behavior is undefined if there are less than {{c|n}} elements in the array whose first element is pointed to by {{c|s}} or if the array does not contain a valid null-terminated character sequence.

===Parameters===
{{par begin}}
{{par|s|char array to use as the output buffer}}
{{par|n|size of the array to be used as the output buffer}}
{{par|mode|specifies stream open mode. It is a bitmask type, the following constants are defined (although only {{tt|app}} is used):
{{cpp/io/ios_base/openmode consts}}}}
{{par end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;strstream&gt;

int main()
{
    std::ostrstream s1; // dynamic buffer
    s1 &lt;&lt; 1 &lt;&lt; ' ' &lt;&lt; 3.14 &lt;&lt; " example\n" &lt;&lt; std::ends;
    std::cout &lt;&lt; s1.str();
    s1.freeze(false);

    char arr[15] = "Hello";

    std::ostrstream s2(arr, sizeof arr, std::ios_base::app);
    s2 &lt;&lt; ", world!" &lt;&lt; std::ends;
    std::cout &lt;&lt; s2.str() &lt;&lt; '\n';
    std::cout &lt;&lt; arr &lt;&lt; '\n'; // streams use the provided arrays
}
|output=
1 3.14 example
Hello, world!
Hello, world!
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/strstreambuf/dsc strstreambuf}}
{{dsc inc|cpp/io/strstream/dsc constructor|istrstream}}
{{dsc inc|cpp/io/strstream/dsc constructor|strstream}}
{{dsc end}}

{{langlinks|ja|zh}}
{{cpp/io/basic_osyncstream/title|emit}}
{{cpp/io/basic_osyncstream/navbar}}
{{dcl begin}}
{{dcl|1=
void emit();
}}
{{dcl end}}

Emits all buffered output and executes any pending flushes, by calling {{ltt|cpp/io/basic_syncbuf/emit|emit()}} on the underlying {{ltt|cpp/io/basic_syncbuf|std::basic_syncbuf}}.
 
===Parameters===
(none)

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;syncstream&gt;

int main()
{
    {
        std::osyncstream bout(std::cout);
        bout &lt;&lt; "Hello," &lt;&lt; '\n'; // no flush
        bout.emit(); // characters transferred; cout not flushed
        bout &lt;&lt; "World!" &lt;&lt; std::endl; // flush noted; cout not flushed
        bout.emit(); // characters transferred; cout flushed
        bout &lt;&lt; "Greetings." &lt;&lt; '\n'; // no flush
    } // destructor calls emit(): characters transferred; cout not flushed

    // emit can be used for local exception-handling on the wrapped stream
    std::osyncstream bout(std::cout);
    bout &lt;&lt; "Hello, " &lt;&lt; "World!" &lt;&lt; '\n';
    try
    {
        bout.emit();
    }
    catch (...)
    {
        // handle exceptions
    }
}|output=
Hello,
World!
Greetings.
Hello, World!
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_osyncstream/dsc destructor}}
{{dsc inc|cpp/io/basic_syncbuf/dsc emit}}
{{dsc end}}

{{langlinks|es|ja|zh}}
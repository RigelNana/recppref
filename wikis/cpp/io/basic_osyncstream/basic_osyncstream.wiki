{{cpp/io/basic_osyncstream/title|basic_osyncstream}}
{{cpp/io/basic_osyncstream/navbar}}
{{dcl begin}}
{{dcl|num=1|1=
basic_osyncstream( streambuf_type* buf, const Allocator&amp; a );
}}
{{dcl|num=2|1=
explicit basic_osyncstream( streambuf_type* buf );
}}
{{dcl|num=3|1=
basic_osyncstream( std::basic_ostream&lt;CharT, Traits&gt;&amp; os, const Allocator&amp; a );
}}
{{dcl|num=4|1=
explicit basic_osyncstream( std::basic_ostream&lt;CharT, Traits&gt;&amp; os );
}}
{{dcl|num=5|1=
basic_osyncstream( std::basic_osyncstream&amp;&amp; other ) noexcept;
}}
{{dcl end}}

Constructs new synchronized output stream.

@1-4@ Constructs the private member {{c|std::basic_syncbuf}} using the buffer and the allocator provided, and initializes the base class with a pointer to the member {{c|std::basic_streambuf}}.
@5@ Move constructor. Move-constructs the {{c|std::basic_ostream}} base and the std::basic_syncbuf member from the corresponding subobjects of {{c|other}}, then calls {{ltt|cpp/io/basic_ios/set_rdbuf|set_rdbuf}} with the pointer to the newly-constructed underlying {{c|std::basic_syncbuf}} to complete the initialization of the base. After this move constructor, {{c|other.get_wrapped()}} returns {{c|nullptr}} and destruction of {{c|other}} produces no output.
 
===Parameters===
{{par begin}}
{{par|buf|pointer to the {{lc|std::basic_streambuf}} that will be wrapped}}
{{par|os|reference to a {{lc|std::basic_ostream}}, whose rdbuf() will be wrapped}}
{{par|a|the allocator to pass to the constructor of the member {{lc|std::basic_syncbuf}}}}
{{par|other|another osyncstream to move from}}
{{par end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string_view&gt;
#include &lt;syncstream&gt;
#include &lt;thread&gt;

void worker(const int id, std::ostream &amp;os)
{
    std::string_view block;
    switch (id)
    {
        default: [[fallthrough]];
        case 0: block = "██";
                break;
        case 1: block = "▓▓";
                break;
        case 2: block = "▒▒";
                break;
        case 3: block = "░░";
                break;
    }
    for (int i = 1; i &lt;= 50; ++i)
        os &lt;&lt; block &lt;&lt; std::flush;
    os &lt;&lt; std::endl;
}

int main()
{
    std::cout &lt;&lt; "Synchronized output should not cause any interference:" &lt;&lt; std::endl;
    {
        auto scout1 = std::osyncstream{std::cout};
        auto scout2 = std::osyncstream{std::cout};
        auto scout3 = std::osyncstream{std::cout};
        auto scout4 = std::osyncstream{std::cout};
        auto w1 = std::jthread{worker, 0, std::ref(scout1)};
        auto w2 = std::jthread{worker, 1, std::ref(scout2)};
        auto w3 = std::jthread{worker, 2, std::ref(scout3)};
        auto w4 = std::jthread{worker, 3, std::ref(scout4)};
    }

    std::cout &lt;&lt; "\nLack of synchronization may cause some interference on output:"
              &lt;&lt; std::endl;
    {
        auto w1 = std::jthread{worker, 0, std::ref(std::cout)};
        auto w2 = std::jthread{worker, 1, std::ref(std::cout)};
        auto w3 = std::jthread{worker, 2, std::ref(std::cout)};
        auto w4 = std::jthread{worker, 3, std::ref(std::cout)};
    }
}
|p=true
|output=
Synchronized output should not cause any interference:
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
████████████████████████████████████████████████████████████████████████████████████████████████████

Lack of synchronization may cause some interference on output:
████▓▓██▒▒▒▒▓▓██░░▒▒██░░▒▒░░░░▒▒░░▓▓▒▒██░░████████████▓▓██████▓▓▒▒▓▓██░░████▓▓▓▓██▒▒░░░░░░░░▓▓░░▓▓██▒▒▒▒▒▒▒▒▓▓██▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒░░▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒▒▒▒▒██░░░░░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████████▓▓▓▓▓▓▓▓▓▓▓▓░░▓▓▓▓
▒▒▒▒██░░██████████████████████████░░░░░░░░░░░░░░██░░▒▒░░░░░░██████████████████
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒
░░░░░░
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_syncbuf/dsc constructor}}
{{dsc end}}

{{langlinks|es|ja|zh}}
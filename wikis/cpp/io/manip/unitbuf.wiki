{{cpp/title|unitbuf|nounitbuf}}
{{cpp/io/manip/navbar}}
{{dcl begin}}
{{dcl header|ios}}
{{dcl|num=1|
std::ios_base&amp; unitbuf( std::ios_base&amp; str );
}}
{{dcl|num=2|
std::ios_base&amp; nounitbuf( std::ios_base&amp; str );
}}
{{dcl end}}

Enables or disables automatic flushing of the output stream after any output operation. Has no effect on input.

@1@ Enables the {{tt|unitbuf}} flag in the stream {{c|str}} as if by calling {{c|str.setf(std::ios_base::unitbuf)}}.

@2@ Disables the {{tt|unitbuf}} flag in the stream {{c|str}} as if by calling {{c|str.unsetf(std::ios_base::unitbuf)}}.

This is an I/O manipulator, it may be called with an expression such as {{c|out &lt;&lt; std::unitbuf}} for any {{tt|out}} of type {{lc|std::basic_ostream}} or with an expression such as {{c|in &gt;&gt; std::unitbuf}} for any {{tt|in}} of type {{lc|std::basic_istream}}.

===Notes===
Flushing is performed in the destructor of the {{lc|std::basic_ostream::sentry}} object, which calls {{c|str.rdbuf()-&gt;pubsync()}} if {{c|str.flags() &amp; std::ios_base::unitbuf}} is {{c|true}}.

The standard output objects {{lc|std::cerr}} and {{lc|std::wcerr}} have their {{tt|unitbuf}} bit set by default.

===Parameters===
{{par begin}}
{{par|str|reference to I/O stream}}
{{par end}}

===Return value===
{{c|str}} (reference to the stream after manipulation).

===Example===
{{example
|Without {{tt|std::unitbuf}} or another explicit flush, the output is the same, but does not appear in real time.
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

template&lt;typename Diff&gt;
void log_progress(Diff d)
{
    std::cout &lt;&lt; std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(d)
              &lt;&lt; " ... ";
}

int main()
{
    volatile int sink = 0;
    std::cout &lt;&lt; std::unitbuf; // enable automatic flushing

    const auto start = std::chrono::high_resolution_clock::now();
    for (int j = 0; j &lt; 5; ++j)
    {
        for (int n = 0; n &lt; 10000; ++n)
            for (int m = 0; m &lt; 20000; ++m)
                sink += m * n; // do some work
        log_progress(std::chrono::high_resolution_clock::now() - start);
    }
    std::cout &lt;&lt; '\n';
}
|output=
571ms ... 1146ms ... 1722ms ... 2294ms ... 2865ms ...
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/manip/dsc flush}}
{{dsc inc|cpp/io/manip/dsc endl}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
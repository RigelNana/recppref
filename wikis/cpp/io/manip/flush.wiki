{{cpp/title|flush}}
{{cpp/io/manip/navbar}}
{{ddcl|header=ostream|
template&lt; class CharT, class Traits &gt;
std::basic_ostream&lt;CharT, Traits&gt;&amp; flush( std::basic_ostream&lt;CharT, Traits&gt;&amp; os );
}}

Flushes the output sequence {{c|os}} as if by calling {{c|os.flush()}}. 

This is an output-only I/O manipulator, it may be called with an expression such as {{c|out &lt;&lt; std::flush}} for any {{tt|out}} of type {{lc|std::basic_ostream}}.

===Notes===
This manipulator may be used to produce an incomplete line of output immediately, e.g. when displaying output from a long-running process, logging activity of multiple threads or logging activity of a program that may crash unexpectedly. An explicit flush of {{lc|std::cout}} is also necessary before a call to {{lc|std::system}}, if the spawned process performs any screen I/O (a common example is {{c|std::system("pause")}} on Windows). In most other usual interactive I/O scenarios, {{lc|std::endl}} is redundant when used with {{lc|std::cout}} because any input from {{lc|std::cin}}, output to {{lc|std::cerr}}, or program termination forces a call to {{c|std::cout.flush()}}. 

When a complete line of output needs to be flushed, the {{lc|std::endl}} manipulator may be used.

When every output operation needs to be flushed, the {{lc|std::unitbuf}} manipulator may be used.

===Parameters===
{{par begin}}
{{par|os|reference to output stream}}
{{par end}}

===Return value===
{{c|os}} (reference to the stream after manipulation).

===Example===
{{example
|Without {{tt|std::flush}}, the output would be the same, but may not appear in real time.
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

template&lt;typename Diff&gt;
void log_progress(Diff d)
{
    std::cout &lt;&lt; std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(d) &lt;&lt; " ... "
              &lt;&lt; std::flush;
}

int main()
{
    volatile int sink = 0;

    auto t1 = std::chrono::high_resolution_clock::now();
    for (int j = 0; j &lt; 5; ++j)
    {
        for (int n = 0; n &lt; 10000; ++n)
            for (int m = 0; m &lt; 20000; ++m)
                sink += m * n; // do some work
        auto now = std::chrono::high_resolution_clock::now();
        log_progress(now - t1);
    }
    std::cout &lt;&lt; '\n';
}
|p=true
|output=
567ms ... 1137ms ... 1707ms ... 2269ms ... 2842ms ...
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/manip/dsc unitbuf}}
{{dsc inc|cpp/io/manip/dsc endl}}
{{dsc inc|cpp/io/basic_ostream/dsc flush}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
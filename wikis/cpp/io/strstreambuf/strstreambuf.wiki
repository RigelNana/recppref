{{cpp/io/strstreambuf/title|strstreambuf}}
{{cpp/io/strstreambuf/navbar}}
{{dcl begin}}
{{dcl rev multi|num=1|notes1={{mark deprecated c++98}}&lt;br&gt;{{mark until c++11}}|dcl1=
explicit strstreambuf( std::streamsize alsize = 0 );
|notes2={{mark life|since=c++11|removed=c++26}}|dcl2=
strstreambuf() : strstreambuf(0) {}
explicit strstreambuf( std::streamsize alsize );
}}
{{dcl|num=2|deprecated=c++98|removed=c++26|1=
strstreambuf( void* (*palloc)(std::size_t), void (*pfree)(void*) );
}}
{{dcl|num=3|deprecated=c++98|removed=c++26|1=
strstreambuf( char* gnext, std::streamsize n, char* pbeg = 0 );
}}
{{dcl|num=4|deprecated=c++98|removed=c++26|1=
strstreambuf( signed char* gnext, std::streamsize n, signed char* pbeg = 0 );
}}
{{dcl|num=5|deprecated=c++98|removed=c++26|1=
strstreambuf( unsigned char* gnext, std::streamsize n, unsigned char* pbeg = 0 );
}}
{{dcl|num=6|deprecated=c++98|removed=c++26|1=
strstreambuf( const char* gnext, std::streamsize n );
}}
{{dcl|num=7|deprecated=c++98|removed=c++26|1=
strstreambuf( const signed char* gnext, std::streamsize n );
}}
{{dcl|num=8|deprecated=c++98|removed=c++26|1=
strstreambuf( const unsigned char* gnext, std::streamsize n );
}}
{{dcl end}}

@1@ Constructs a {{tt|std::strstreambuf}} object: initializes the base class by calling the default constructor of {{lc|std::streambuf}}, initializes the buffer state to "dynamic" (the buffer will be allocated as needed), initializes allocated size to the provided {{c|alsize}}, initializes the allocation and the deallocation functions to null (will use {{c/core|new[]}} and {{c/core|delete[]}}).

@2@ Constructs a {{tt|std::strstreambuf}} object: initializes the base class by calling the default constructor of {{lc|std::streambuf}}, initializes the buffer state to "dynamic" (the buffer will be allocated as needed), initializes allocated size to unspecified value, initializes the allocation function to {{c|palloc}} and the deallocation function to {{c|pfree}}.

@3-5@ Constructs a {{tt|std::strstreambuf}} object in following steps:
:@a@ Initializes the base class by calling the default constructor of {{lc|std::streambuf}}.
:@b@ Initializes the buffer state to "constant" (the buffer is a user-provided fixed-size buffer).
:@c@ Determines the number of elements in the user-provided array as follows: if {{c|n}} is greater than zero, {{c|n}} is used. If {{c|n}} is zero, {{c|std::strlen(gnext)}} is executed to determine the buffer size. If {{c|n}} is negative, {{lc|INT_MAX}} is used.
:@d@ Configures the {{lc|std::basic_streambuf}} pointers as follows: If {{c|pbeg}} is a null pointer, calls {{c|setg(gnext, gnext, gnext + N)}}. If {{c|pbeg}} is not a null pointer, executes {{c|setg(gnext, gnext, pbeg)}} and {{c|setp(pbeg, pbeg + N)}}, where N is the number of elements in the array as determined earlier.

@6-8@ Same as {{c|strstreambuf((char*)gnext, n)}}, except the "constant" bit is set in the buffer state bitmask (output to this buffer is not allowed).

===Parameters===
{{par begin}}
{{par|alsize|the initial size of the dynamically allocated buffer}}
{{par|palloc|pointer to user-provided allocation function}}
{{par|pfree|pointer to user-provided deallocation function}}
{{par|gnext|pointer to the start of the get area in the user-provided array}}
{{par|pbeg|pointer to the start of the put area in the user-provided array}}
{{par|n|the number of bytes in the get area (if pbeg is null) or in the put area (if pbeg is not null) of the user-provided array}}
{{par end}}

===Notes===
These constructors are typically called by the constructors of {{c|std::strstream}}.

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P0935R0|std=C++11|before=default constructor was explicit|after=made implicit}}
{{dr list end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;strstream&gt;

int main()
{
    std::strstreambuf dyn; // dynamic
    std::strstream dyn_s; // equivalent stream
    dyn_s &lt;&lt; 1.23 &lt;&lt; std::ends;
    std::cout &lt;&lt; dyn_s.str() &lt;&lt; '\n';
    dyn_s.freeze(false);

    char buf[10];
    std::strstreambuf user(buf, 10, buf); // user-provided output buffer
    std::ostrstream user_s(buf, 10); // equivalent stream
    user_s &lt;&lt; 1.23 &lt;&lt; std::ends;
    std::cout &lt;&lt; buf &lt;&lt; '\n';

    std::strstreambuf lit("1 2 3", 5); // constant
    std::istrstream lit_s("1 2 3"); // equivalent stream
    int i, j, k;
    lit_s &gt;&gt; i &gt;&gt; j &gt;&gt; k;
    std::cout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; j &lt;&lt; ' ' &lt;&lt; k &lt;&lt; '\n';
}
|output=
1.23
1.23
1 2 3
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/strstream/dsc constructor|strstream}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
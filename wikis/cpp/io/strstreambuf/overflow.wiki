{{cpp/io/strstreambuf/title|overflow}}
{{cpp/io/strstreambuf/navbar}}
{{ddcl|deprecated=c++98|removed=c++26|1=
protected:
virtual int_type overflow( int_type c = EOF );
}}

Appends the character {{c|c}} to the put area of the buffer, reallocating if possible.

@1@ If {{c|1=c == EOF}}, does nothing.
@2@ Otherwise, if the put area has a write position available ({{c|pptr() &lt; epptr()}}), stores the character as if by {{c|1=*pptr()++ = c}}.
@3@ Otherwise, if the stream buffer mode is not dynamic or the stream buffer is currently frozen, the function fails and returns {{c|EOF}}.
@4@ Otherwise, the function reallocates (or initially allocates) a dynamic array large enough to hold the contents of the current dynamic array (if any) plus at least one additional write position. If a pointer to the allocating function {{tt|palloc}} was used in the constructor, that function is called with {{c|(*palloc)(n)}} where {{tt|n}} is the number of bytes to allocate, otherwise {{c|new char[n]}} is used. If a pointer to the deallocating function {{tt|pfree}} was used in the constructor, that function is called with {{c|(*pfree)(p)}} to deallocate the previous array, if needed, otherwise {{c|delete[] p}} is used. If allocation fails, the function fails and returns {{c|EOF}}. 

===Parameters===
{{par begin}}
{{par|c|the character to store in the put area}}
{{par end}}

===Return value===
If {{c|1=c == EOF}}, returns some value other than {{c|EOF}}. Otherwise, returns {{c|(unsigned char)(c)}} on success, {{lc|EOF}} on failure.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;strstream&gt;

struct mybuf : std::strstreambuf
{
    int_type overflow(int_type c) 
    {
        std::cout &lt;&lt; "Before overflow(): size of the put area is " &lt;&lt; epptr()-pbase()
                  &lt;&lt; " with " &lt;&lt; epptr()-pptr() &lt;&lt; " write positions available\n";
        int_type rc = std::strstreambuf::overflow(c);
        std::cout &lt;&lt; "After overflow(): size of the put area is " &lt;&lt; epptr()-pbase()
                  &lt;&lt; " with " &lt;&lt; epptr()-pptr() &lt;&lt; " write positions available\n";
        return rc;
    }
};

int main()
{
    mybuf sbuf; // read-write dynamic strstreambuf
    std::iostream stream(&amp;sbuf);

    stream &lt;&lt; "Sufficiently long string to overflow the initial allocation, at least "
           &lt;&lt; " on some systems.";
}
|p=true
|output=
Before overflow(): size of the put area is 16 with 0 write positions available
After overflow(): size of the put area is 32 with 15 write positions available
Before overflow(): size of the put area is 32 with 0 write positions available
After overflow(): size of the put area is 64 with 31 write positions available
Before overflow(): size of the put area is 64 with 0 write positions available
After overflow(): size of the put area is 128 with 63 write positions available
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_streambuf/dsc overflow}}
{{dsc inc|cpp/io/basic_stringbuf/dsc overflow}}
{{dsc inc|cpp/io/basic_filebuf/dsc overflow}}
{{dsc inc|cpp/io/basic_streambuf/dsc sputc}}
{{dsc inc|cpp/io/basic_ostream/dsc put}}
{{dsc end}}

{{langlinks|ja|zh}}
{{cpp/io/strstreambuf/title|~strstreambuf}}
{{cpp/io/strstreambuf/navbar}}
{{ddcl|deprecated=c++98|removed=c++26|1=
virtual ~strstreambuf();
}}

Destroys a {{tt|std::strstreambuf}} object. if the object is managing a dynamically-allocated buffer (the buffer state is "allocated") and if the object is not frozen, then deallocates the buffer using the deallocation function provided at construction or {{c/core|delete[]}} if none was provided.

===Parameters===
(none)

===Notes===
This destructor is typically called by the destructor of {{lc|std::strstream}}.

If {{lc|str()}} was called on a dynamic {{tt|strstream}} and {{rlpt|freeze|freeze(false)}} was not called after that, this destructor leaks memory.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;strstream&gt;

void* my_alloc(size_t n)
{
    std::cout &lt;&lt; "my_alloc(" &lt;&lt; n &lt;&lt; ") called\n";
    return new char[n];
}

void my_free(void* p)
{
    std::cout &lt;&lt; "my_free() called\n";
    delete[] (char*)p;
}

int main()
{
    {
        std::strstreambuf buf(my_alloc, my_free);
        std::ostream s(&amp;buf);
        s &lt;&lt; 1.23 &lt;&lt; std::ends;
        std::cout &lt;&lt; buf.str() &lt;&lt; '\n';
        buf.freeze(false);
    } // destructor called here, buffer deallocated

    {
        std::strstreambuf buf(my_alloc, my_free);
        std::ostream s(&amp;buf);
        s &lt;&lt; 1.23 &lt;&lt; std::ends;
        std::cout &lt;&lt; buf.str() &lt;&lt; '\n';
//      buf.freeze(false);
    } // destructor called here, memory leak!
}
|output=
my_alloc(4096) called
1.23
my_free() called
my_alloc(4096) called
1.23
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/io/basic_istream/title|sync}}
{{cpp/io/basic_istream/navbar}}
{{ddcl|
int sync();
}}

Synchronizes the input buffer with the associated data source.

Behaves as {{named req|UnformattedInputFunction}}, except that {{lc|gcount()}} is not affected. After constructing and checking the sentry object,

If {{lc|rdbuf()}} is a null pointer, returns {{c|-1}}.

Otherwise, calls {{c|rdbuf()-&gt;pubsync()}}. If that function returns {{c|-1}}, calls {{c|setstate(badbit)}} and returns {{c|-1}}. Otherwise, returns {{c|0}}.

===Parameters===
(none)

===Return value===
{{c|0}} on success, {{c|-1}} on failure or if the stream does not support this operation (is unbuffered).

===Notes===
As with {{lc|readsome()}}, it is implementation-defined whether this function does anything with library-supplied streams. The intent is typically for the next read operation to pick up any changes that may have been made to the associated input sequence after the stream buffer last filled its get area. To achieve that, {{tt|sync()}} may empty the get area, or it may refill it, or it may do nothing. A notable exception is Visual Studio, where this operation discards the unprocessed input when called with a standard input stream.

===Example===
{{example
|Demonstrates the use of input stream {{tt|sync()}} with file input. Note that output here is implementation-defined, since calls to {{ltt|cpp/io/basic_filebuf/sync|std::basic_filebuf::sync}} are implementation-defined for reads.
|code=
#include &lt;fstream&gt;
#include &lt;iostream&gt;

void file_abc()
{
    std::ofstream f("test.txt");
    f &lt;&lt; "abc\n";
}

void file_123()
{
    std::ofstream f("test.txt");
    f &lt;&lt; "123\n";
}

int main()
{
    file_abc(); // file now contains "abc"
    std::ifstream f("test.txt");
    std::cout &lt;&lt; "Reading from the file\n";
    char c;
    f &gt;&gt; c;
    std::cout &lt;&lt; c;
    file_123(); // file now contains "123"
    f &gt;&gt; c;
    std::cout &lt;&lt; c;
    f &gt;&gt; c;
    std::cout &lt;&lt; c &lt;&lt; '\n';
    f.close();

    file_abc(); // file now contains "abc"
    f.open("test.txt");
    std::cout &lt;&lt; "Reading from the file, with sync()\n";
    f &gt;&gt; c;
    std::cout &lt;&lt; c;
    file_123(); // file now contains "123"
    f.sync();
    f &gt;&gt; c;
    std::cout &lt;&lt; c;
    f &gt;&gt; c;
    std::cout &lt;&lt; c &lt;&lt; '\n';
}
|p=true
|output=&lt;!--Note: output as seen on Sun and IBM, but the Linux/gcc that was tested printed "abc" both times--&gt;
Reading from the file
abc
Reading from the file, with sync()
a23
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=62|std=C++98|before={{tt|sync()}} returned {{c|traits::eof()}} if {{c|rdbuf()-&gt;pubsync()}} returns {{c|-1}}|after=returns {{c|-1}} in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_streambuf/dsc sync}}
{{dsc inc|cpp/io/basic_ostream/dsc flush}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/io/basic_istream/title|readsome}}
{{cpp/io/basic_istream/navbar}}
{{ddcl|
std::streamsize readsome( char_type* s, std::streamsize count );
}}

Extracts up to {{c|count}} immediately available characters from the input stream. The extracted characters are stored into the character array pointed to by {{c|s}}. 

Behaves as {{named req|UnformattedInputFunction}}. After constructing and checking the sentry object, 

* If {{c|1=rdbuf()-&gt;in_avail() == -1}}, calls {{c|setstate(eofbit)}} and extracts no characters.

* If {{c|1=rdbuf()-&gt;in_avail() == 0}}, extracts no characters.

* If {{c|1=rdbuf()-&gt;in_avail() &gt; 0}}, extracts {{c|std::min(rdbuf()-&gt;in_avail(), count)}} characters and stores them into successive locations of the character array whose first element is pointed to by {{c|s}}.

===Parameters===
{{par begin}}
{{par|s|pointer to the character array to store the characters to}}
{{par|count|maximum number of characters to read}}
{{par end}}

===Return value===
The number of characters actually extracted.

===Exceptions===
{{include|cpp/io/stream_exceptions}}

===Notes===
The behavior of this function is highly implementation-specific. For example, using {{tt|readsome()}} with {{lc|std::ifstream}} leads to significant, implementation-specific outcomes. Some library implementations fill the underlying {{tt|filebuf}} with data as soon as {{lc|std::ifstream}} opens a file, which means {{tt|readsome()}} always reads data and could even read the entire file.  With other implementations, {{lc|std::ifstream}} only reads from a file when an input operation is invoked, which means calling {{tt|readsome()}} immediately after opening the file never extracts any characters. Similarly, calling {{c|std::cin.readsome()}} may return all pending, unprocessed console input or may always return zero and extract no characters.

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
{
    char c[10] = "*********"; // c[9] == '\0'

    // std::stringbuf makes its entire buffer available for unblocking read
    std::istringstream input("This is sample text.");

    auto r = input.readsome(c, 5); // reads 'This ' and stores in c[0] .. c[4]
    assert(r == 5);
    std::cout &lt;&lt; c &lt;&lt; '\n';

    r = input.readsome(c, 9); // reads 'is sample' and stores in c[0] .. c[8]
    assert(r == 9);
    std::cout &lt;&lt; c &lt;&lt; '\n';
}
|output=
This ****
is sample
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_istream/dsc read}}
{{dsc inc|cpp/io/basic_streambuf/dsc in_avail}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{title|operator&gt;&gt;{{small|(std::basic_istream)}}}}
{{cpp/io/basic_istream/navbar}}
{{dcl begin}}
{{dcl header|istream}}
{{dcl|num=1|
template&lt; class CharT, class Traits &gt;
basic_istream&lt;CharT, Traits&gt;&amp;
    operator&gt;&gt;( basic_istream&lt;CharT, Traits&gt;&amp; st, CharT&amp; ch );

template&lt; class Traits &gt;
basic_istream&lt;char, Traits&gt;&amp;
    operator&gt;&gt;( basic_istream&lt;char, Traits&gt;&amp; st, signed char&amp; ch );

template&lt; class Traits &gt;
basic_istream&lt;char, Traits&gt;&amp;
    operator&gt;&gt;( basic_istream&lt;char, Traits&gt;&amp; st, unsigned char&amp; ch );
}}
{{dcl rev begin|num=2}}
{{dcl|until=c++20|
template&lt; class CharT, class Traits&gt;
basic_istream&lt;CharT, Traits&gt;&amp;
    operator&gt;&gt;( basic_istream&lt;CharT, Traits&gt;&amp; st, CharT* s );

template&lt; class Traits &gt;
basic_istream&lt;char, Traits&gt;&amp;
    operator&gt;&gt;( basic_istream&lt;char, Traits&gt;&amp; st, signed char* s );

template&lt; class Traits &gt;
basic_istream&lt;char, Traits&gt;&amp;
    operator&gt;&gt;( basic_istream&lt;char, Traits&gt;&amp; st, unsigned char* s );
}}
{{dcl|since=c++20|
template&lt; class CharT, class Traits, std::size_t N &gt;
basic_istream&lt;CharT, Traits&gt;&amp;
    operator&gt;&gt;( basic_istream&lt;CharT, Traits&gt;&amp; st, CharT (&amp;s)[N] );

template&lt; class Traits, std::size_t N &gt;
basic_istream&lt;char, Traits&gt;&amp;
    operator&gt;&gt;( basic_istream&lt;char, Traits&gt;&amp; st, signed char (&amp;s)[N] );

template&lt; class Traits, std::size_t N &gt;
basic_istream&lt;char, Traits&gt;&amp;
    operator&gt;&gt;( basic_istream&lt;char, Traits&gt;&amp; st, unsigned char (&amp;s)[N] );
}}
{{dcl rev end}}
{{dcl|num=3|since=c++11|
template&lt; class Istream, class T &gt;
Istream&amp;&amp;
    operator&gt;&gt;( Istream&amp;&amp; st, T&amp;&amp; value );
}}
{{dcl end}}

@1,2@ Performs character input operations.

@1@ Behaves as a {{named req|FormattedInputFunction}}. After constructing and checking the sentry object, which may skip leading whitespace, extracts a character and stores it to {{tt|ch}}. If no character is available, sets {{ltt|cpp/io/ios_base/iostate|failbit}} (in addition to {{ltt|cpp/io/ios_base/iostate|eofbit}} that is set as required of a {{named req|FormattedInputFunction}}).

@2@ Behaves as a {{named req|FormattedInputFunction}}. After constructing and checking the sentry object, which may skip leading whitespace, extracts successive characters and stores them at successive locations of {{rev inl|until=c++20|a character array whose first element is pointed to by}} {{tt|s}}. The extraction stops if any of the following conditions is met:
* A whitespace character (as determined by the {{ltt|cpp/locale/ctype|ctype&lt;CharT&gt;}} facet) is found. The whitespace character is not extracted.
{{rrev multi|until1=c++20|rev1=
* If {{c|st.width()}} is greater than zero, {{c|st.width() - 1}} characters are stored.
|rev2=
* {{c|n - 1}} characters are stored, where {{c|n}} is defined as follows:
:* If {{c|st.width()}} is greater than zero, {{c|std::min(std::size_t(st.width()), N)}};
:* otherwise, {{c|n}} is {{c|N}}.
}}
* End of file occurs in the input sequence (this also sets {{ltt|cpp/io/ios_base/iostate|eofbit}}).
In either case, an additional null character value {{c|CharT()}} is stored at the end of the output. If no characters were extracted, sets {{ltt|cpp/io/ios_base/iostate|failbit}} (the null character is still written, to the first position in the output). Finally, calls {{c|st.width(0)}} to cancel the effects of {{lc|std::setw}}, if any.

@3@ Calls the appropriate extraction operator, given an rvalue reference to an input stream object (equivalent to {{c|st &gt;&gt; std::forward&lt;T&gt;(value)}}). {{cpp/enable_if|{{c|st &gt;&gt; std::forward&lt;T&gt;(value)}} is well-formed and {{tt|Istream}} is a class type publicly and unambiguously derived from {{lc|std::ios_base}}}}.

===Notes===
Extracting a single character that is the last character of the stream does not set {{tt|eofbit}}: this is different from other formatted input functions, such as extracting the last integer with {{c|operator&gt;&gt;}}, but this behavior matches the behavior of {{lc|std::scanf}} with {{c|"%c"}} format specifier.

===Parameters===
{{par begin}}
{{par|st|input stream to extract the data from}}
{{par|ch|reference to a character to store the extracted character to}}
{{par|s|{{rev inl|until=c++20|pointer to}} a character array to store the extracted characters to}}
{{par end}}

===Return value===
@1,2@ {{c|st}}
@3@ {{c|std::move(st)}}

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
{
    std::string input = "n greetings";
    std::istringstream stream(input);
    
    char c;
    const int MAX = 6;
    char cstr[MAX];
    
    stream &gt;&gt; c &gt;&gt; std::setw(MAX) &gt;&gt; cstr;
    std::cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; '\n'
              &lt;&lt; "cstr = " &lt;&lt; cstr &lt;&lt; '\n';
    
    double f;
    std::istringstream("1.23") &gt;&gt; f; // rvalue stream extraction
    std::cout &lt;&lt; "f = " &lt;&lt; f &lt;&lt; '\n';
}
|output=
c = n
cstr = greet
f = 1.23
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=13|std=C++98|before=the definition of {{c|n}} mentioned a non-existing name {{c|eos}}|after=replaced with {{c|CharT()}}}}
{{dr list item|wg=lwg|dr=68|std=C++98|before=no null characters were stored at the end of the output for overload (2)|after=stores a null character}}
{{dr list item|wg=lwg|dr=1203|std=C++98|before=overload for rvalue stream returned lvalue reference to the base class|after=returns rvalue reference&lt;br&gt;to the derived class}}
{{dr list item|wg=lwg|dr=2328|std=C++98|before=overload for rvalue stream required another argument to be lvalue|after=made to accept rvalue}}
{{dr list item|wg=lwg|dr=2534|std=C++98|before=overload for rvalue stream was not constrained|after=constrained}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_istream/dsc operator_gtgt}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
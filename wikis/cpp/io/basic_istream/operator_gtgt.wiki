{{cpp/io/basic_istream/title|operator&gt;&gt;}}
{{cpp/io/basic_istream/navbar}}
{{dcl begin}}
{{dcl|num=1|
basic_istream&amp; operator&gt;&gt;( unsigned short&amp; value );
}}
{{dcl|num=2|
basic_istream&amp; operator&gt;&gt;( unsigned int&amp; value );
}}
{{dcl|num=3|
basic_istream&amp; operator&gt;&gt;( long&amp; value );
}}
{{dcl|num=4|
basic_istream&amp; operator&gt;&gt;( unsigned long&amp; value );
}}
{{dcl|num=5|since=c++11|
basic_istream&amp; operator&gt;&gt;( long long&amp; value );
}}
{{dcl|num=6|since=c++11|
basic_istream&amp; operator&gt;&gt;( unsigned long long&amp; value );
}}
{{dcl|num=7|
basic_istream&amp; operator&gt;&gt;( float&amp; value );
}}
{{dcl|num=8|
basic_istream&amp; operator&gt;&gt;( double&amp; value );
}}
{{dcl|num=9|
basic_istream&amp; operator&gt;&gt;( long double&amp; value );
}}
{{dcl|num=10| 
basic_istream&amp; operator&gt;&gt;( bool&amp; value );
}}
{{dcl|num=11|
basic_istream&amp; operator&gt;&gt;( void*&amp; value );
}}
{{dcl|num=12|
basic_istream&amp; operator&gt;&gt;( short&amp; value );
}}
{{dcl|num=13|
basic_istream&amp; operator&gt;&gt;( int&amp; value );
}}
{{dcla|num=14|since=c++23|
basic_istream&amp; operator&gt;&gt;( /* extended-floating-point-type */&amp; value );
}}
{{dcl|num=15|
basic_istream&amp; operator&gt;&gt;( std::ios_base&amp; (*func)(std::ios_base&amp;) );
}}
{{dcl|num=16|
basic_istream&amp; operator&gt;&gt;( std::basic_ios&lt;CharT, Traits&gt;&amp; 
                               (*func)(std::basic_ios&lt;CharT, Traits&gt;&amp;) );
}}
{{dcl|num=17|
basic_istream&amp; operator&gt;&gt;( basic_istream&amp; (*func)(basic_istream&amp;) );
}}
{{dcl|num=18|
basic_istream&amp; operator&gt;&gt;( std::basic_streambuf&lt;CharT, Traits&gt;* sb );
}}
{{dcl end}}

Extracts values from an input stream.

@1-11@ Extracts a value potentially skipping preceding whitespace. The value is stored to a given reference {{c|value}}.

@@ This function behaves as a {{named req|FormattedInputFunction}}. After constructing and checking the sentry object, which may skip leading whitespace, extracts a value by calling {{l2tf std|cpp/locale/num_get/get}}.

@12@ Extracts a {{c/core|short}} value potentially skipping preceding whitespace. The value is stored to a given reference {{c|value}}.

@@ This function behaves as a {{named req|FormattedInputFunction}}. After constructing and checking the sentry object, which may skip leading whitespace, extracts a {{c/core|long}} value {{c|lval}} by calling {{l2tf std|cpp/locale/num_get/get}}. After that:
* If {{c|lval &lt; std::numeric_limits&lt;short&gt;::min()}}, sets {{tt|failbit}} and stores {{c|std::numeric_limits&lt;short&gt;::min()}} to {{c|val}}.
* Otherwise, if {{c|std::numeric_limits&lt;short&gt;::max() &lt; lval}}, sets {{tt|failbit}} and stores {{c|std::numeric_limits&lt;short&gt;::max()}} to {{c|val}}.
* Otherwise, stores {{c|static_cast&lt;short&gt;(lval)}} to {{c|val}}.

@13@ Extracts an {{c/core|int}} value potentially skipping preceding whitespace. The value is stored to a given reference {{c|value}}.

@@ This function behaves as a {{named req|FormattedInputFunction}}. After constructing and checking the sentry object, which may skip leading whitespace, extracts a {{c/core|long}} value {{c|lval}} by calling {{l2tf std|cpp/locale/num_get/get}}. After that:
* If {{c|lval &lt; std::numeric_limits&lt;int&gt;::min()}}, sets {{tt|failbit}} and stores {{c|std::numeric_limits&lt;int&gt;::min()}} to {{c|val}}.
* Otherwise, if {{c|std::numeric_limits&lt;int&gt;::max() &lt; lval}}, sets {{tt|failbit}} and stores {{c|std::numeric_limits&lt;int&gt;::max()}} to {{c|val}}.
* Otherwise, stores {{c|static_cast&lt;int&gt;(lval)}} to {{c|val}}.

@14@ Extracts an extended floating-point value potentially skipping preceding whitespace. The value is stored to a given reference {{c|value}}. The library provides overloads for all cv-unqualified [[cpp/language/types#Extended floating-point types|extended floating-point types]] as the referenced type of the parameter {{c|value}}.

@@ Determines the standard floating-point type {{tt|FP}} as follows:
* If the [[cpp/language/usual arithmetic conversions#Floating-point conversion rank|floating-point conversion rank]] of {{c/core|/* extended-floating-point-type */}} is less than or equal to that of {{c/core|float}}, then {{tt|FP}} is {{c/core|float}}.
* Otherwise, if the floating-point conversion rank of {{c/core|/* extended-floating-point-type */}} is less than or equal to that of {{c/core|double}}, then {{tt|FP}} is {{c/core|double}}.
* Otherwise, {{tt|FP}} is {{c/core|long double}}.

@@ This function behaves as a {{named req|FormattedInputFunction}}. After constructing and checking the sentry object, which may skip leading whitespace, extracts an {{tt|FP}} value {{c|fval}} by calling {{l2tf std|cpp/locale/num_get/get}}. After that:
* If {{c|fval &lt; -std::numeric_limits&lt;/* extended-floating-point-type */&gt;::max()}}, sets {{tt|failbit}} and stores {{c|-std::numeric_limits&lt;/* extended-floating-point-type */&gt;::max()}} to {{c|val}}.
* Otherwise, if {{c|std::numeric_limits&lt;/* extended-floating-point-type */&gt;::max() &lt; fval}}, sets {{tt|failbit}} and stores {{c|std::numeric_limits&lt;/* extended-floating-point-type */&gt;::max()}} to {{c|val}}.
* Otherwise, stores {{c|static_cast&lt;/* extended-floating-point-type */&gt;(fval)}} to {{c|val}}.

@15-17@ Calls {{c|func(*this)}}, where {{c|func}} is an I/O manipulator.

@18@ Behaves as an {{named req|UnformattedInputFunction}}. After constructing and checking the sentry object, extracts all data from {{c|*this}} and stores it to {{c|sb}}. The extraction stops if one of the following conditions are met:
:* end-of-file occurs on the input sequence;
:* inserting in the output sequence fails (in which case the character to be inserted is not extracted);
:* an exception occurs (in which case the exception is caught, and only rethrown if it inserted no characters and {{tt|failbit}} is enabled in {{tt|exceptions()}}).
In either case, stores the number of characters extracted in the member variable accessed by subsequent calls to {{lc|gcount()}}. If {{c|sb}} is a null pointer or if no characters were inserted into {{c|sb}}, calls {{c|setstate(failbit)}} (which may throw {{lc|std::ios_base::failure}} if enabled).

If extraction fails (e.g. if a letter was entered where a digit is expected), zero is written to {{c|value}} and {{tt|failbit}} is set. For signed integers, if extraction results in the value too large or too small to fit in {{c|value}}, {{c|std::numeric_limits&lt;T&gt;::max()}} or {{c|std::numeric_limits&lt;T&gt;::min()}} (respectively) is written and {{tt|failbit}} flag is set. For unsigned integers, if extraction results in the value too large or too small to fit in {{c|value}}, {{c|std::numeric_limits&lt;T&gt;::max()}} is written and {{tt|failbit}} flag is set.

===Parameters===
{{par begin}}
{{par|value|reference to an integer or floating-point value to store the extracted value to}}
{{par|func|pointer to I/O manipulator function}}
{{par|sb|pointer to the stream buffer to write all the data to}}
{{par end}}

===Return value===
@1-16,18@ {{c|*this}}
@17@ {{c|func(*this)}}

===Notes===
For overload {{v|14|14}}, when the extended floating-point type has a floating-point conversion rank that is not equal to the rank of any standard floating-point type, then double rounding during the conversion can result in inaccurate results. {{ltf std|cpp/utility/from_chars}} can be used in situations where maximum accuracy is important.

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
{
    std::string input = "41 3.14 false hello world";
    std::istringstream stream(input);
    
    int n;
    double f;
    bool b;
    
    stream &gt;&gt; n &gt;&gt; f &gt;&gt; std::boolalpha &gt;&gt; b;
    std::cout &lt;&lt; "n = " &lt;&lt; n &lt;&lt; '\n'
              &lt;&lt; "f = " &lt;&lt; f &lt;&lt; '\n'
              &lt;&lt; "b = " &lt;&lt; std::boolalpha &lt;&lt; b &lt;&lt; '\n';
    
    // extract the rest using the streambuf overload
    stream &gt;&gt; std::cout.rdbuf();
    std::cout &lt;&lt; '\n';
}
|output=
n = 41
f = 3.14
b = false
hello world
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=64|std=C++98|before=it was unclear whether overload {{v|18}} can only rethrow the&lt;br&gt;{{lc|std::ios_base::failure}} thrown by calling {{c|setstate(failbit)}}|after=all exceptions caught&lt;br&gt;can be rethrown}}
{{dr list item|wg=lwg|dr=118|std=C++98|before=overload {{v|12,13}} delegated the extraction to {{l2tt|cpp/locale/num_get/get}},&lt;br&gt;but it does not have overloads for {{c/core|short}} and {{c/core|int}}|after=a {{c/core|long}} value is extracted&lt;br&gt;instead of {{c/core|short}} or {{c/core|int}}}}
{{dr list item|wg=lwg|dr=413|std=C++98|before=overload {{v|18}} only rethrew exceptions thrown while extracting&lt;br&gt;characters from {{c|sb}}, but characters are extracted from {{c|*this}}|after=corrected {{c|sb}} to {{c|*this}}}}
{{dr list item|wg=lwg|dr=567|std=C++98|before=overload {{v|18}} behaved as a {{named req|FormattedInputFunction}}&lt;br&gt;because of the resolution of {{lwg|60}}|after=it behaves as an&lt;br&gt;{{named req|UnformattedInputFunction}}}}
{{dr list item|wg=lwg|dr=661|std=C++98|before=overloads {{v|12,13}} did not store the extracted number&lt;br&gt;to {{c|value}} due to the resolution of {{lwg|118}}|after=stores the number if&lt;br&gt;no overflow occurs}}
{{dr list item|wg=lwg|dr=696|std=C++98|before={{c|value}} was unchanged on extraction failure|after=set to zero or minimum/&lt;br&gt;maximum values}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_istream/dsc operator gtgt2}}
{{dsc inc|cpp/string/basic_string/dsc operator ltltgtgt}}
{{dsc inc|cpp/utility/bitset/dsc operator ltltgtgt2}}
{{dsc inc|cpp/numeric/complex/dsc operator ltltgtgt}}
{{dsc inc|cpp/numeric/random/engine/dsc operator ltltgtgt|linear_congruential_engine}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator ltltgtgt|uniform_int_distribution}}
{{dsc inc|cpp/io/basic_istream/dsc read}}
{{dsc inc|cpp/io/basic_istream/dsc readsome}}
{{dsc inc|cpp/io/basic_istream/dsc get}}
{{dsc inc|cpp/io/basic_istream/dsc getline}}
{{dsc inc|cpp/utility/dsc from_chars}} 
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
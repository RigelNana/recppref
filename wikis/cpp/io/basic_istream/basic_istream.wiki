{{cpp/io/basic_istream/title|basic_istream}}
{{cpp/io/basic_istream/navbar}}
{{dcl begin}}
{{dcl|num=1|1=
explicit basic_istream( std::basic_streambuf&lt;CharT, Traits&gt;* sb );
}}
{{dcl|num=2|since=c++11|1=
protected:
basic_istream( const basic_istream&amp; rhs ) = delete;
}}
{{dcl|num=3|since=c++11|1=
protected:
basic_istream( basic_istream&amp;&amp; rhs );
}}
{{dcl end}}

1) Constructs the {{tt|basic_istream}} object, assigning initial values to the base class by calling {{c|basic_ios::init(sb)}}. The value of {{tt|gcount()}} is initialized to zero.

2) The copy constructor is protected, and is deleted. Input streams are not copyable.

3) The move constructor copies the value of {{tt|gcount()}} from {{c|rhs}}, sets the gcount() value of {{c|rhs}} to zero, and uses {{c|basic_ios&lt;CharT, Traits&gt;::move(rhs)}} to move all basic_ios members, except for the {{tt|rdbuf()}}, from {{c|rhs}} into {{c|*this}}. This move constructor is protected: it is called by the move constructors of movable input stream classes {{lc|std::basic_ifstream}} and {{lc|std::basic_istringstream}}, which know how to correctly move the associated stream buffer.

===Parameters===
{{par begin}}
{{par|sb|streambuffer to use as underlying device}}
{{par end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
{
    std::istringstream s1("hello");
    std::istream s2(s1.rdbuf()); // OK: s2 shares the buffer with s1

//  std::istream s3(std::istringstream("test")); // ERROR: move constructor is protected
//  std::istream s4(s2);                         // ERROR: copy constructor is deleted
    std::istringstream s5(std::istringstream("world")); // OK: move ctor called
                                                        //     by derived class

    std::cout &lt;&lt; s2.rdbuf() &lt;&lt; ' ' &lt;&lt; s5.rdbuf() &lt;&lt; '\n';
}
|output=
hello world
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/io/basic_istream/title|sentry}}
{{cpp/io/basic_istream/navbar}}
{{dcl begin}}
{{dcl|1=
class sentry;
}}
{{dcl end}}

An object of class {{tt|basic_istream::sentry}} is constructed in local scope at the beginning of each member function of {{lc|std::basic_istream}} that performs input (both formatted and unformatted). Its constructor prepares the input stream: checks if the stream is already in a failed state, flushes the tie()'d output streams, skips leading whitespace unless {{c|noskipws}} flag is set, and performs other implementation-defined tasks if necessary. All cleanup, if necessary, is performed in the destructor, so that it is guaranteed to happen if exceptions are thrown during input.

===Member types===
{{dsc begin}}
{{dsc|{{tt|traits_type}}|{{tt|Traits}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/io/basic_istream/sentry/dsc constructor}}
{{dsc inc|cpp/io/basic_istream/sentry/dsc destructor}}
{{dsc mem fun|operator{{=}}|nolink=true|notes={{cmark deleted}}|not copy assignable}}
{{dsc inc|cpp/io/basic_istream/sentry/dsc operator bool}}
{{dsc end}}

{{member|{{small|std::basic_istream::sentry::}}sentry|2=
{{ddcl|1=
explicit sentry( std::basic_istream&lt;CharT, Traits&gt;&amp; is, bool noskipws = false );
}}

Prepares the stream for formatted input.

If {{c|is.good()}} is {{c|false}}, calls {{c|is.setstate(std::ios_base::failbit)}} and returns. Otherwise, if {{c|is.tie()}} is not a null pointer, calls {{c|is.tie()-&gt;flush()}} to synchronize the output sequence with external streams. This call can be suppressed if the put area of {{c|is.tie()}} is empty. The implementation may defer the call to {{c|flush()}} until a call of {{c|is.rdbuf()-&gt;underflow()}} occurs. If no such call occurs before the sentry object is destroyed, it may be eliminated entirely.

If {{c|noskipws}} is zero and {{c|is.flags() &amp; std::ios_base::skipws}} is nonzero, the function extracts and discards all whitespace characters until the next available character is not a whitespace character (as determined by the currently imbued locale in {{c|is}}). If {{c|is.rdbuf()-&gt;sbumpc()}} or {{c|is.rdbuf()-&gt;sgetc()}} returns {{c|traits::eof()}}, the function calls {{c|setstate(std::ios_base::failbit {{!}} std::ios_base::eofbit)}} (which may throw {{lc|std::ios_base::failure}}).

Additional implementation-defined preparation may take place, which may call {{c|setstate(std::ios_base::failbit)}} (which may throw {{lc|std::ios_base::failure}}).

If after preparation is completed, {{c|1=is.good() == true}}, then any subsequent calls to {{c/core|operator bool}} will return {{c|true}}.

===Parameters===
{{par begin}}
{{par|is|input stream to prepare}}
{{par|noskipws|{{c|true}} if whitespace should not be skipped}}
{{par end}}

===Exceptions===
{{lc|std::ios_base::failure}} if the end of file condition occurs when skipping whitespace.
}}

{{member|{{small|std::basic_istream::sentry::}}~sentry|2=
{{ddcl|1=
~sentry();
}}
Does nothing.
}}

{{member|{{small|std::basic_istream::sentry::}}operator bool|2=
{{ddcl|1=
explicit operator bool() const;
}}
Checks whether the preparation of the input stream was successful.

===Parameters===
(none)

===Return value===
{{c|true}} if the initialization of the input stream was successful, {{c|false}} otherwise.
}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;sstream&gt;

struct Foo
{
    char n[5];
};

std::istream&amp; operator&gt;&gt;(std::istream&amp; is, Foo&amp; f)
{
    std::istream::sentry s(is);
    if (s)
        is.read(f.n, 5);
    return is;
}

int main()
{
    std::string input = "   abcde";
    std::istringstream stream(input);
    Foo f;
    stream &gt;&gt; f;
    std::cout.write(f.n, 5);
    std::cout &lt;&lt; '\n';
}
|output=
abcde
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=195|std=C++98|before=it was unclear whether the constructor would set {{tt|eofbit}}|after=made clear}}
{{dr list item|wg=lwg|dr=419|std=C++98|before=the constructor did not set {{tt|failbit}} if {{tt|eofbit}} has been set|after=sets {{tt|failbit}} in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_istream/dsc operator_gtgt}}
{{dsc inc|cpp/io/basic_istream/dsc operator_gtgt2}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
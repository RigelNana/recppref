{{cpp/title|cout|wcout}}
{{cpp/io/basic_ostream/navbar}}
{{dcl begin}}
{{dcl header|iostream}}
{{dcl|num=1|1=
extern std::ostream cout;
}}
{{dcl|num=2|1=
extern std::wostream wcout;
}}
{{dcl end}}

The global objects {{tt|std::cout}} and {{tt|std::wcout}} control output to a stream buffer of implementation-defined type (derived from {{lc|std::streambuf}}), associated with the standard C output stream {{lc|stdout}}.

These objects are guaranteed to be initialized during or before the first time an object of type {{lc|std::ios_base::Init}} is constructed and are available for use in the constructors and destructors of static objects with [[cpp/language/initialization#Non-local_variables|ordered initialization]] (as long as {{header|iostream}} is included before the object is defined).

Unless {{c|std::ios_base::sync_with_stdio(false)}} has been issued, it is safe to concurrently access these objects from multiple threads for both formatted and unformatted output.

By specification of {{lc|std::cin}}, {{c|std::cin.tie()}} returns {{c|&amp;std::cout}}. This means that any input operation on {{tt|std::cin}} executes {{c|std::cout.flush()}} (via {{lc|std::basic_istream::sentry}}'s constructor). Similarly, {{c|std::wcin.tie()}} returns {{c|&amp;std::wcout}}.

By specification of {{lc|std::cerr}}, {{c|std::cerr.tie()}} returns {{c|&amp;std::cout}}. This means that any output operation on {{tt|std::cerr}} executes {{c|std::cout.flush()}} (via {{lc|std::basic_ostream::sentry}}'s constructor). Similarly, {{c|std::wcerr.tie()}} returns {{c|&amp;std::wcout}}. {{mark since c++11}}

===Notes===
The 'c' in the name refers to "character" ([https://www.stroustrup.com/bs_faq2.html#cout stroustrup.com FAQ]); {{tt|cout}} means "character output" and {{tt|wcout}} means "wide character output".

Because [[cpp/language/initialization#Dynamic_initialization|dynamic initialization]] of [[cpp/language/templates#Templated_entity|templated]] variables are unordered, it is not guaranteed that {{tt|std::cout}} has been initialized to a usable state before the initialization of such variables begins, unless an object of type {{lc|std::ios_base::Init}} has been constructed.

===Example===
{{example
|code=
#include &lt;iostream&gt;

struct Foo
{
    int n;
    Foo()
    {
        std::cout &lt;&lt; "static constructor\n";
    }
    ~Foo()
    {
        std::cout &lt;&lt; "static destructor\n";
    }
};

Foo f; // static object

int main()
{
    std::cout &lt;&lt; "main function\n";
}
|output=
static constructor
main function
static destructor
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/ios_base/dsc Init}}
{{dsc inc|cpp/io/dsc cerr}}
{{dsc inc|cpp/io/dsc clog}}
{{dsc inc|cpp/io/c/dsc std streams}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
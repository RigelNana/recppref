{{title|stdin, stdout, stderr}}
{{cpp/io/c/navbar}}
{{dcl begin}}
{{dcl header|cstdio}}
{{dcl|num=1|
#define stdin  /* implementation-defined */
}}
{{dcl|num=2|
#define stdout /* implementation-defined */
}}
{{dcl|num=3|
#define stderr /* implementation-defined */
}}
{{dcl end}}

Three text streams are predefined. These streams are implicitly opened and unoriented at program startup.

@1@ Associated with the ''standard input'' stream, used for reading conventional input. At program startup, the stream is fully buffered if and only if the stream can be determined not to refer to an interactive device.
@2@ Associated with the ''standard output'' stream, used for writing conventional output. At program startup, the stream is fully buffered if and only if the stream can be determined not to refer to an interactive device.
@3@ Associated with the ''standard error'' stream, used for writing diagnostic output. At program startup, the stream is not fully buffered.

What constitutes an interactive device is implementation-defined.

These macros are expanded to expressions of type {{c|std::FILE*}}.

===Notes===
Although not mandated by POSIX, the UNIX convention is that {{tt|stdin}} and {{tt|stdout}} are line-buffered if associated with a terminal and {{tt|stderr}} is unbuffered.

These macros may be expanded to modifiable lvalues. If any of these {{c|std::FILE*}} lvalue is modified, subsequent operations on the corresponding stream result in unspecified or undefined behavior.

===Example===
{{example
|This example shows a function similar to {{lc|std::printf}}.
|code=
#include &lt;concepts&gt;
#include &lt;cstdio&gt;
#include &lt;type_traits&gt;

template&lt;typename T&gt;
concept IsPrintable = std::integral&lt;T&gt; or std::floating_point&lt;T&gt; or std::is_pointer_v&lt;T&gt;;

int my_printf(char const* const format, IsPrintable auto const ... arguments)
{
    return std::fprintf(stdout, format, arguments...);
}

int main(int argv, char*[])
{
    my_printf("Strings and chars:\t%s %c\n", "hello", 'x');
    my_printf("Rounding:\t\t%f %.0f %.32f\n", 1.5, 1.5, 1.3);
    my_printf("Padding:\t\t%05.2f %.2f %5.2f\n", 1.5, 1.5, 1.5);
    my_printf("Scientific:\t\t%E %e\n", 1.5, 1.5);
    my_printf("Hexadecimal:\t\t%a %A 0x%X\n", 1.5, 1.5, &amp;argv);
}
|p=true
|output=
Strings and chars:  hello x
Rounding:           1.500000 2 1.30000000000000004440892098500626
Padding:            01.50 1.50  1.50
Scientific:         1.500000E+00 1.500000e+00
Hexadecimal:        0x1.8p+0 0X1.8P+0 0x2CFB41BC
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/dsc cin}}
{{dsc inc|cpp/io/dsc cout}}
{{dsc inc|cpp/io/dsc cerr}}
{{dsc inc|cpp/io/dsc clog}}
{{dsc inc|cpp/io/c/dsc fprintf}}
{{dsc inc|cpp/io/c/dsc FILE}}
{{dsc see c|c/io/std streams|stdin|stdout|stderr}}
{{dsc end}}

{{langlinks|es|ja|zh}}
{{cpp/title|ftell}}
{{cpp/io/c/navbar}}
{{ddcl|header=cstdio|
long ftell( std::FILE* stream );
}}

Returns the current value of the file position indicator for the file stream {{tt|stream}}.

If the stream is open in binary mode, the value obtained by this function is the number of bytes from the beginning of the file.

If the stream is open in text mode, the value returned by this function is unspecified and is only meaningful as the input to {{lc|std::fseek}}.

===Parameters===
{{par begin}}
{{par|stream|file stream to examine}}
{{par end}}

===Return value===
File position indicator on success or {{c|-1L}} if failure occurs. Also sets {{lc|errno}} on failure.

===Notes===
{{windows IO-extensions note}}

===Example===
{{example
|Demonstrates {{tt|std::ftell()}} with error checking. Writes then reads a few floating-point (FP) values to/from a file.
|code=
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;

// If the condition is not met then exit the program with error message.
void check(bool condition, const char* func, int line)
{
    if (condition)
        return;
    std::perror(func);
    std::cerr &lt;&lt; func &lt;&lt; " failed in file " &lt;&lt; __FILE__ &lt;&lt; " at line # " &lt;&lt; line - 1
              &lt;&lt; '\n';
    std::exit(EXIT_FAILURE);
}

int main()
{
    // Prepare an array of FP values.
    constexpr int SIZE {5};
    double A[SIZE] = {1.1, 2.2, 3.3, 4.4, 5.5};

    // Write array to a file.
    const char* fname = "/tmp/test.bin";
    FILE* file = std::fopen(fname, "wb");
    check(file != NULL, "fopen()", __LINE__);

    const int write_count = std::fwrite(A, sizeof(double), SIZE, file);
    check(write_count == SIZE, "fwrite()", __LINE__);

    std::fclose(file);

    // Read the FP values into array B.
    double B[SIZE];
    file = std::fopen(fname, "rb");
    check(file != NULL, "fopen()", __LINE__);

    long pos = std::ftell(file); // position indicator at start of file
    check(pos != -1L, "ftell()", __LINE__);
    std::cout &lt;&lt; "pos: " &lt;&lt; pos &lt;&lt; '\n';

    const int read_count = std::fread(B, sizeof(double), 1, file); // read one FP value
    check(read_count == 1, "fread()", __LINE__);

    pos = std::ftell(file); // position indicator after reading one FP value
    check(pos != -1L, "ftell()", __LINE__);
    std::cout &lt;&lt; "pos: " &lt;&lt; pos &lt;&lt; '\n';
    std::cout &lt;&lt; "B[0]: " &lt;&lt; B[0] &lt;&lt; '\n'; // print one FP value

    return EXIT_SUCCESS;
}
|p=true
|output=
pos: 0
pos: 8
B[0]: 1.1
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/c/dsc fgetpos}}
{{dsc inc|cpp/io/c/dsc fseek}}
{{dsc inc|cpp/io/c/dsc fsetpos}}
{{dsc inc|cpp/io/basic_istream/dsc tellg}}
{{dsc inc|cpp/io/basic_ostream/dsc tellp}}
{{dsc see c|c/io/ftell}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
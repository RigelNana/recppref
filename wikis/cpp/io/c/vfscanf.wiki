{{cpp/title|vscanf|vfscanf|vsscanf}}
{{cpp/io/c/navbar}}
{{dcl begin}}
{{dcl header|cstdio}}
{{dcl|num=1|since=c++11|
int vscanf( const char* format, std::va_list vlist );
}}
{{dcl|num=2|since=c++11|
int vfscanf( std::FILE* stream, const char* format, std::va_list vlist );
}}
{{dcl|num=3|since=c++11|
int vsscanf( const char* buffer, const char* format, std::va_list vlist );
}}
{{dcl end}}

Reads data from a variety of sources, interprets it according to {{c|format}} and stores the results into locations defined by {{c|vlist}}.

@1@ Reads the data from {{lc|stdin}}.
@2@ Reads the data from file stream {{c|stream}}.
@3@ Reads the data from null-terminated character string {{c|buffer}}.

===Parameters===
{{par begin}}
{{par|stream|input file stream to read from}}
{{par|buffer|pointer to a null-terminated character string to read from}}
{{par|format|pointer to a null-terminated character string specifying how to read the input}}
{{par|vlist|variable argument list containing the receiving arguments.}}
{{par end}}


{{cpp/io/c/scanf format}}

===Return value===
Number of arguments successfully read, or {{lc|EOF}} if failure occurs.

===Notes===
All these functions invoke {{lc|va_arg}} at least once, the value of {{tt|arg}} is indeterminate after the return. These functions to not invoke {{lc|va_end}}, and it must be done by the caller.

===Example===
{{example
|code=
#include &lt;cstdarg&gt;
#include &lt;cstdio&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;

void checked_sscanf(int count, const char* buf, const char *fmt, ...)
{
    std::va_list ap;
    va_start(ap, fmt);
    if (std::vsscanf(buf, fmt, ap) != count)
        throw std::runtime_error("parsing error");
    va_end(ap);
}

int main()
{
    try
    {
        int n, m;
        std::cout &lt;&lt; "Parsing '1 2'... ";
        checked_sscanf(2, "1 2", "%d %d", &amp;n, &amp;m);
        std::cout &lt;&lt; "success\n";
        std::cout &lt;&lt; "Parsing '1 a'... ";
        checked_sscanf(2, "1 a", "%d %d", &amp;n, &amp;m);
        std::cout &lt;&lt; "success\n";
    }
    catch (const std::exception&amp; e)
    {
        std::cout &lt;&lt; e.what() &lt;&lt; '\n';
    }
}
|output=
Parsing '1 2'... success
Parsing '1 a'... parsing error
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/c/dsc fscanf}}
{{dsc inc|cpp/io/c/dsc vfprintf}}
{{dsc see c|c/io/vfscanf|vscanf|vfscanf|vsscanf}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
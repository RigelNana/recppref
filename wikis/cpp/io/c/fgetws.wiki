{{cpp/title|fgetws}}
{{cpp/io/c/navbar}}
{{ddcl|header=cwchar|
wchar_t* fgetws( wchar_t* str, int count, std::FILE* stream );
}}

Reads at most {{c|count - 1}} wide characters from the given file stream and stores them in {{c|str}}. The produced wide string is always null-terminated. Parsing stops if end-of-file occurs or a newline wide character is found, in which case {{c|str}} will contain that wide newline character.

===Parameters===
{{par begin}}
{{par|str|wide string to read the characters to}}
{{par|count|the length of {{c|str}}}}
{{par|stream|file stream to read the data from}}
{{par end}}

===Return value===
{{c|str}} on success, a null pointer on an error.

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;clocale&gt;
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cwchar&gt;
#include &lt;cwctype&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;span&gt;
#include &lt;string&gt;

void dump(std::span&lt;const wchar_t&gt; sp, std::size_t width = 14)
{
    for (wchar_t wc : sp)
        std::wcout &lt;&lt; (std::iswprint(wc) ? wc : L'.');
    std::wcout &lt;&lt; std::wstring(width &gt; sp.size() ? width - sp.size() : 1, L' ')
               &lt;&lt; std::hex &lt;&lt; std::uppercase &lt;&lt; std::setfill(L'0');
    for (wchar_t wc : sp)
        std::wcout &lt;&lt; std::setw(sizeof wc) &lt;&lt; static_cast&lt;unsigned&gt;(wc) &lt;&lt; ' ';
    std::wcout &lt;&lt; '\n';
}

int main()
{
    // Create temp file that contains wide characters
    std::setlocale(LC_ALL, "en_US.utf8");
    std::FILE* tmpf = std::tmpfile();
 
    for (const wchar_t* text : {
        L"Tétraèdre"    L"\n",
        L"Cube"         L"\n",
        L"Octaèdre"     L"\n",
        L"Icosaèdre"    L"\n",
        L"Dodécaèdre"   L"\n"
        })
        if (int rc = std::fputws(text, tmpf); rc == EOF)
        {
            std::perror("fputws()"); // POSIX requires that errno is set
            return EXIT_FAILURE;
        }

    std::rewind(tmpf);

    std::array&lt;wchar_t, 12&gt; buf;
    while (std::fgetws(buf.data(), buf.size(), tmpf) != nullptr)
        dump(std::span(buf.data(), buf.size()));

    return EXIT_SUCCESS;
}
|p=true
|output=
Tétraèdre...  0054 00E9 0074 0072 0061 00E8 0064 0072 0065 000A 0000 0000 
Cube..dre...  0043 0075 0062 0065 000A 0000 0064 0072 0065 000A 0000 0000 
Octaèdre....  004F 0063 0074 0061 00E8 0064 0072 0065 000A 0000 0000 0000 
Icosaèdre...  0049 0063 006F 0073 0061 00E8 0064 0072 0065 000A 0000 0000 
Dodécaèdre..  0044 006F 0064 00E9 0063 0061 00E8 0064 0072 0065 000A 0000
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/c/dsc fwscanf}}
{{dsc inc|cpp/io/c/dsc fgetwc}}
{{dsc inc|cpp/io/c/dsc fputws}}
{{dsc see c|c/io/fgetws}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
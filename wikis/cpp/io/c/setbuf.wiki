{{cpp/title|setbuf}}
{{cpp/io/c/navbar}}
{{ddcl|header=cstdio|
void setbuf( std::FILE* stream, char* buffer );
}}

Sets the internal buffer to use for I/O operations performed on the C stream {{c|stream}}.

If {{c|buffer}} is not null, equivalent to {{c|std::setvbuf(stream, buffer, _IOFBF, BUFSIZ)}}.

If {{c|buffer}} is null, equivalent to {{c|std::setvbuf(stream, nullptr, _IONBF, 0)}}, which turns off buffering.

===Parameters===
{{par begin}}
{{par|stream|the file stream to set the buffer to}}
{{par|buffer|pointer to a buffer for the stream to use. If a null pointer is supplied, the buffering is turned off. If not null, must be able to hold at least {{tt|BUFSIZ}} characters}}
{{par end}}

===Return value===
(none)

===Notes===
If {{lc|BUFSIZ}} is not the appropriate buffer size, {{lc|std::setvbuf}} can be used to change it.

{{lc|std::setvbuf}} should also be used to detect errors, since {{tt|std::setbuf}} does not indicate success or failure.

This function may only be used after {{c|stream}} has been associated with an open file, but before any other operation (other than a failed call to {{tt|std::setbuf}}/{{lc|std::setvbuf}}).

A common error is setting the buffer of {{lc|stdin}} or {{lc|stdout}} to an array whose lifetime ends before the program terminates:
{{source|1=
int main()
{
    char buf[BUFSIZ];
    std::setbuf(stdin, buf);
} // lifetime of buf ends, undefined behavior
}}

===Example===
{{example
|{{tt|std::setbuf}} may be used to disable buffering on streams that require immediate output.
|code=
#include &lt;chrono&gt;
#include &lt;cstdio&gt;
#include &lt;thread&gt;

int main()
{
    using namespace std::chrono_literals;

    std::setbuf(stdout, nullptr); // unbuffered stdout
    std::putchar('a'); // appears immediately on unbuffered stream
    std::this_thread::sleep_for(1s);
    std::putchar('b');
}
|output=
ab
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/c/dsc setvbuf}}
{{dsc see c|c/io/setbuf}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
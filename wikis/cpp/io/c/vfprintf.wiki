{{cpp/title|vprintf|vfprintf|vsprintf|vsnprintf}}
{{cpp/io/c/navbar}}
{{dcl begin}}
{{dcl header|cstdio}}
{{dcl|num=1|
int vprintf( const char* format, std::va_list vlist );
}}
{{dcl|num=2|
int vfprintf( std::FILE* stream, const char* format, std::va_list vlist );
}}
{{dcl|num=3|
int vsprintf( char* buffer, const char* format, std::va_list vlist );
}}
{{dcl|num=4|since=c++11|
int vsnprintf( char* buffer, std::size_t buf_size, const char* format, std::va_list vlist );
}}
{{dcl end}}

Loads the data from the locations, defined by {{c|vlist}}, converts them to character string equivalents and writes the results to a variety of sinks.

@1@ Writes the results to {{lc|stdout}}.
@2@ Writes the results to a file stream {{c|stream}}.
@3@ Writes the results to a character string {{c|buffer}}.
@4@ Writes the results to a character string {{c|buffer}}. At most {{c|buf_size - 1}} characters are written. The resulting character string will be terminated with a null character, unless {{c|buf_size}} is zero. If {{c|buf_size}} is zero, nothing is written and {{c|buffer}} may be a null pointer, however the return value (number of bytes that would be written not including the null terminator) is still calculated and returned.

===Parameters===
{{par begin}}
{{par|stream|output file stream to write to}}
{{par|buffer|pointer to a character string to write to}}
{{par|buf_size|maximum number of characters to write}}
{{par|format|pointer to a null-terminated character string specifying how to interpret the data}}
{{par|vlist|variable argument list containing the data to print}}
{{par end}}

{{cpp/io/c/printf format}}

===Return value===
@1-3@ Number of characters written if successful or negative value if an error occurred.

@4@ Number of characters written if successful or negative value if an error occurred. If the resulting string gets truncated due to {{c|buf_size}} limit, function returns the total number of characters (not including the terminating null-byte) which would have been written, if the limit was not imposed.

===Notes===
All these functions invoke {{lc|va_arg}} at least once, the value of {{tt|arg}} is indeterminate after the return. These functions do not invoke {{lc|va_end}}, and it must be done by the caller.

===Example===
{{example
|code=
#include &lt;cstdarg&gt;
#include &lt;cstdio&gt;
#include &lt;ctime&gt;
#include &lt;vector&gt;

void debug_log(const char *fmt, ...)
{
    std::time_t t = std::time(nullptr);
    char time_buf[100];
    std::strftime(time_buf, sizeof time_buf, "%D %T", std::gmtime(&amp;t));
    std::va_list args1;
    va_start(args1, fmt);
    std::va_list args2;
    va_copy(args2, args1);
    std::vector&lt;char&gt; buf(1 + std::vsnprintf(nullptr, 0, fmt, args1));
    va_end(args1);
    std::vsnprintf(buf.data(), buf.size(), fmt, args2);
    va_end(args2);
    std::printf("%s [debug]: %s\n", time_buf, buf.data());
}

int main()
{
    debug_log("Logging, %d, %d, %d", 1, 2, 3);
}
|output=
04/13/15 15:09:18 [debug]: Logging, 1, 2, 3
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/c/dsc fprintf}}
{{dsc inc|cpp/io/c/dsc vfscanf}}
{{dsc inc|cpp/io/dsc vprint_unicode}}
{{dsc inc|cpp/io/dsc vprint_nonunicode}}
{{dsc see c|c/io/vfprintf|vprintf|vfprintf|vsprintf|vsnprintf}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|wprintf|fwprintf|swprintf}}
{{cpp/io/c/navbar}}
{{dcl begin}}
{{dcl header|cwchar}}
{{dcl|num=1|
int wprintf( const wchar_t* format, ... );
}}
{{dcl|num=2|
int fwprintf( std::FILE* stream, const wchar_t* format, ... );
}}
{{dcl|num=3|
int swprintf( wchar_t* buffer, std::size_t size, const wchar_t* format, ... );
}}
{{dcl end}}

Loads the data from the given locations, converts them to wide string equivalents and writes the results to a variety of sinks.

@1@ Writes the results to {{lc|stdout}}.
@2@ Writes the results to a file stream {{c|stream}}.
@3@ Writes the results to a wide string {{c|buffer}}. At most {{c|size - 1}} wide characters are written followed by null wide character.

===Parameters===
{{par begin}}
{{par|stream|output file stream to write to}}
{{par|buffer|pointer to a wide character string to write to}}
{{par|size|up to {{c|size - 1}} characters may be written, plus the null terminator}}
{{par|format|pointer to a null-terminated wide string specifying how to interpret the data}}
{{par|...|arguments specifying data to print. If any argument after [[cpp/language/variadic_arguments#Default_conversions|default conversions]] is not the type expected by the corresponding conversion specifier, or if there are fewer arguments than required by {{c|format}}, the behavior is undefined. If there are more arguments than required by {{c|format}}, the extraneous arguments are evaluated and ignored}}
{{par end}}

{{cpp/io/c/printf format|wcs=true}}

===Return value===
@1,2@ Number of wide characters written if successful or negative value if an error occurred.
@3@ Number of wide characters written (not counting the terminating null wide character) if successful or negative value if an encoding error occurred or if the number of characters to be generated was equal or greater than {{c|size}} (including when {{c|size}} is zero).

===Notes===
While narrow strings provide {{lc|std::snprintf}}, which makes it possible to determine the required output buffer size, there is no equivalent for wide strings, and in order to determine the buffer size, the program may need to call {{tt|std::swprintf}}, check the result value, and reallocate a larger buffer, trying again until successful.

===Example===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cwchar&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;

int main()
{
    char narrow_str[] = "z\u00df\u6c34\U0001f34c";
                  // or "z√üÊ∞¥üçå";
                  // or "\x7a\xc3\x9f\xe6\xb0\xb4\xf0\x9f\x8d\x8c";
    wchar_t warr[29]; // the expected string is 28 characters plus 1 null terminator
    std::setlocale(LC_ALL, "en_US.utf8");

    std::swprintf(warr, sizeof warr/sizeof *warr,
                  L"Converted from UTF-8: '%s'", narrow_str);

    std::wcout.imbue(std::locale("en_US.utf8"));
    std::wcout &lt;&lt; warr &lt;&lt; '\n';
}
|output=
Converted from UTF-8: 'z√üÊ∞¥üçå'
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/c/dsc fprintf}}
{{dsc inc|cpp/io/c/dsc vfwprintf}}
{{dsc inc|cpp/io/c/dsc fputws}}
{{dsc see c|c/io/fwprintf|wprintf|fwprintf|swprintf}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
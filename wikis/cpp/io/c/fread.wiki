{{cpp/title|fread}}
{{cpp/io/c/navbar}}
{{ddcl|header=cstdio|
std::size_t fread( void* buffer, std::size_t size, std::size_t count, std::FILE* stream );
}}

Reads up to {{c|count}} objects into the array {{c|buffer}} from the given input stream {{c|stream}} as if by calling {{lc|std::fgetc}} {{c|size}} times for each object, and storing the results, in the order obtained, into the successive positions of {{c|buffer}}, which is reinterpreted as an array of {{c|unsigned char}}. The file position indicator for the stream is advanced by the number of characters read.

If the objects are not {{named req|TriviallyCopyable}}, the behavior is undefined.

If an error occurs, the resulting value of the file position indicator for the stream is
indeterminate. If a partial element is read, its value is indeterminate.

===Parameters===
{{par begin}}
{{par|buffer|pointer to the first object in the array to be read}}
{{par|size|size of each object in bytes}}
{{par|count|the number of the objects to be read}}
{{par|stream|input file stream to read from}}
{{par end}}

===Return value===
Number of objects read successfully, which may be less than {{c|count}} if an error or end-of-file condition occurs.

If {{c|size}} or {{c|count}} is zero, {{tt|fread}} returns zero and performs no other action.

{{tt|fread}} does not distinguish between end-of-file and error, and callers must use {{lc|std::feof}} and {{lc|std::ferror}} to determine which occurred.

===Example===
{{example
|code=
#include &lt;cstddef&gt;
#include &lt;cstdio&gt;
#include &lt;fstream&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

int main()
{
    // Prepare file
    std::ofstream("test.txt") &lt;&lt; 1 &lt;&lt; ' ' &lt;&lt; 2 &lt;&lt; '\n';
    std::FILE* f = std::fopen("test.txt", "r");

    std::vector&lt;char&gt; buf(4); // char is trivially copyable
    const std::size_t n = std::fread(&amp;buf[0], sizeof buf[0], buf.size(), f);

    std::cout &lt;&lt; "Read " &lt;&lt; n &lt;&lt; " object" &lt;&lt; (n &gt; 1 ? "s" : "") &lt;&lt; ": "
              &lt;&lt; std::hex &lt;&lt; std::uppercase &lt;&lt; std::setfill('0');
    for (char n : buf)
        std::cout &lt;&lt; "0x" &lt;&lt; std::setw(2) &lt;&lt; static_cast&lt;short&gt;(n) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    std::vector&lt;std::string&gt; buf2; // string is not trivially copyable
//  This would result in undefined behavior:
//  std::fread(&amp;buf2[0], sizeof buf2[0], buf2.size(), f);
}
|p=true
|output=
Read 4 objects: 0x31 0x20 0x32 0x0A
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/c/dsc fscanf}}
{{dsc inc|cpp/io/c/dsc fgets}}
{{dsc inc|cpp/io/c/dsc fwrite}}
{{dsc see c|c/io/fread}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
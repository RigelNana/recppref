{{cpp/title|print{{small|(std::ostream)}}}}
{{cpp/io/basic_ostream/navbar}}
{{dcl begin}}
{{dcl header|ostream}}
{{dcl|since=c++23|1=
template&lt; class... Args &gt;
void print( std::ostream&amp; os, std::format_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl end}}

Formats {{c|args}} according to the format string {{c|fmt}}, and inserts the result into {{c|os}} stream.

If the [[cpp/language/charset#Code unit and literal encoding|ordinary literal encoding]] is UTF-8, equivalent to:
* {{box|{{ltt|cpp/io/basic_ostream/vprint_unicode|std::vprint_unicode}}{{c/core|(os, fmt.get(), std::make_format_args(args...));}}}}. Otherwise,
* {{box|{{ltt|cpp/io/basic_ostream/vprint_nonunicode|std::vprint_nonunicode}}{{c/core|(os, fmt.get(), std::make_format_args(args...));}}}}.

The behavior is undefined if {{c|std::formatter&lt;Ti, char&gt;}} does not meet the {{named req|BasicFormatter}} requirements for any {{tt|Ti}} in {{tt|Args}} (as required by {{c|std::make_format_args}}).

===Parameters===
{{par begin}}
{{par|os|output stream to insert data into}}
{{par|fmt|{{include|cpp/utility/format/format string}}}}
{{par|args...|arguments to be formatted}}
{{par end}}

===Return value===
(none)

===Exceptions===
{{std print ostream exceptions}}

===Notes===
{{ftm begin|std=1|value=1|comment=1}}
{{ftm|std=C++23|value=202207L|__cpp_lib_print|Formatted output}}
{{ftm|std=C++23|value=202207L|__cpp_lib_format|Exposing {{lc|std::basic_format_string}}}}
{{ftm end}}

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;cctype&gt;
#include &lt;cstdio&gt;
#include &lt;format&gt;
#include &lt;numbers&gt;
#include &lt;ranges&gt;
#include &lt;sstream&gt;

int main()
{
    std::array&lt;char, 24&gt; buf;
    std::format_to(buf.begin(), "{:.15f}", std::numbers::sqrt2);

    unsigned num{}, sum{};

    auto v = buf
           {{!}} std::views::filter(isdigit)
           {{!}} std::views::transform([](char x) { return x - '0'; })
           {{!}} std::views::take_while([&amp;sum](char) { return sum &lt; 42; });

    for (auto n : v)
        sum += n, ++num;

    std::stringstream stream;

#ifdef __cpp_lib_print
    std::print(stream,
#else
    stream &lt;&lt; std::format(
#endif
        "√2 = {}...\n"
        "The sum of its first {} digits is {}{}",
        std::numbers::sqrt2, num, sum, '.'
    );

    std::puts(stream.str().data());
}
|output=
√2 = 1.4142135623730951...
The sum of its first 13 digits is 42.
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_ostream/dsc println}}
{{dsc inc|cpp/io/dsc print}}
{{dsc inc|cpp/utility/format/dsc format}}
{{dsc end}}

{{langlinks|de|es|fr|ja|ru|zh}}
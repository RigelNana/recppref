{{title|operator&lt;&lt;{{small|(std::basic_ostream)}}}}
{{cpp/io/basic_ostream/navbar}}
{{dcl begin}}
{{dcl header|ostream}}
{{dcl h|basic_ostream and character}}
{{dcl rev begin|num=1}}
{{dcl| 
template&lt; class CharT, class Traits &gt;
basic_ostream&lt;CharT, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;CharT, Traits&gt;&amp; os, CharT ch );
}}
{{dcl|
template&lt; class CharT, class Traits &gt;
basic_ostream&lt;CharT, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;CharT, Traits&gt;&amp; os, char ch );
}}
{{dcl|
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, char ch );
}}
{{dcl|
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, signed char ch );
}}
{{dcl|
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, unsigned char ch );
}}
{{dcl rev end}}
{{dcl h|basic_ostream and character array}}
{{dcl rev begin|num=2}}
{{dcl|
template&lt; class CharT, class Traits &gt;
basic_ostream&lt;CharT, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;CharT, Traits&gt;&amp; os, const CharT* s );
}}
{{dcl|
template&lt; class CharT, class Traits &gt;
basic_ostream&lt;CharT, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;CharT, Traits&gt;&amp; os, const char* s );
}}
{{dcl|
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, const char* s );
}}
{{dcl|
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, const signed char* s );
}}
{{dcl|
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, const unsigned char* s );
}}
{{dcl rev end}}
{{dcl h|basic_ostream rvalue}}
{{dcl|num=3|since=c++11|
template&lt; class Ostream, class T &gt;
Ostream&amp;&amp; operator&lt;&lt;( Ostream&amp;&amp; os, const T&amp; value );
}}
{{dcl h|deleted overloads for basic_ostream and UTF character/array}}
{{dcl rev begin|num=4|since=c++20}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, wchar_t ch ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, char8_t ch ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, char16_t ch ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, char32_t ch ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;wchar_t, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;wchar_t, Traits&gt;&amp; os, char8_t ch ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;wchar_t, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;wchar_t, Traits&gt;&amp; os, char16_t ch ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;wchar_t, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;wchar_t, Traits&gt;&amp; os, char32_t ch ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, const wchar_t* s ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, const char8_t* s ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, const char16_t* s ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, const char32_t* s ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;wchar_t, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;wchar_t, Traits&gt;&amp; os, const char8_t* s ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;wchar_t, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;wchar_t, Traits&gt;&amp; os, const char16_t* s ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;wchar_t, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;wchar_t, Traits&gt;&amp; os, const char32_t* s ) = delete;
}}
{{dcl rev end}}
{{dcl end}}

Inserts a character or a character string.

@1@ Behaves as a {{named req|FormattedOutputFunction}}. After constructing and checking the {{rlp|sentry}} object, inserts the character {{c|ch}}. If {{c|ch}} has type {{c/core|char}} and the [[cpp/string|character container type]] of {{c|os}} is not {{c/core|char}}, {{c|os.widen(ch)}} will be inserted instead.
@@ Padding is determined as follows:
* If {{c|os.width() &gt; 1}}, then {{c|os.width() - 1}} copies of {{c|os.fill()}} are added to the output character to form the output character sequence.
* If {{c|1=(out.flags() &amp; std::ios_base::adjustfield) == std::ios_base::left}}, the fill characters are placed after the output character, otherwise before.
@@ After insertion, {{c|os.width(0)}} is called to cancel the effects of {{lc|std::setw}}, if any.

@2@ Behaves as a {{named req|FormattedOutputFunction}}. After constructing and checking the sentry object, inserts successive characters from the character array whose first element is pointed to by {{c|s}}.
* For the first and third overloads (where {{tt|CharT}} matches the type of {{c|ch}}), exactly {{c|traits::length(s)}} characters are inserted.
* For the second overload, exactly {{c|std::char_traits&lt;char&gt;::length(s)}} characters are inserted.
* For the last two overloads, exactly {{c|traits::length(reinterpret_cast&lt;const char*&gt;(s))}} are inserted. 
@@ Before insertion, first, all characters are widened using {{c|os.widen()}}, then padding is determined as follows:
* If the number of characters to insert is less than {{c|os.width()}}, then enough copies of {{c|os.fill()}} are added to the character sequence to make its length equal {{c|os.width()}}.
* If {{c|1=(out.flags() &amp; std::ios_base::adjustfield) == std::ios_base::left}}, the fill characters are added at the end of the output sequence, otherwise they are added before the output sequence.
@@ After insertion, {{c|os.width(0)}} is called to cancel the effects of {{lc|std::setw}}, if any.
@@ If {{c|s}} is a null pointer, the behavior is undefined.

@3@ Calls the appropriate insertion operator, given an rvalue reference to an output stream object (equivalent to {{c|os &lt;&lt; value}}). {{cpp/enable if|the expression {{c|os &lt;&lt; value}} is well-formed and {{tt|Ostream}} is a class type publicly and unambiguously derived from {{lc|std::ios_base}}}}.

@4@ Overloads that accept {{c/core|char16_t}}, {{c/core|char32_t}} etc (or null terminated sequence thereof) are deleted: {{c|std::cout &lt;&lt; u'X'}} is not allowed. Previously, these would print an integer or pointer value.

===Parameters===
{{par begin}}
{{par|os|output stream to insert data to}}
{{par|ch|reference to a character to insert}}
{{par|s|pointer to a character string to insert}}
{{par end}}

===Return value===
@1,2@ {{c|os}}
@3@ {{c|std::move(os)}}

===Notes===
Before {{lwg|1203}}, code such as {{c|(std::ostringstream() &lt;&lt; 1.2).str()}} does not compile.

===Example===
{{example 
|code=
#include &lt;fstream&gt;
#include &lt;iostream&gt;

void foo()
{
    // error: operator&lt;&lt; (basic_ostream&lt;char, _Traits&gt;&amp;, char8_t) is deleted
//  std::cout &lt;&lt; u8'z' &lt;&lt; '\n';
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, char8_t const&amp; ch)
{
    return os &lt;&lt; static_cast&lt;char&gt;(ch);
}

int main()
{
    std::cout &lt;&lt; "Hello, world" // uses `const char*` overload
              &lt;&lt; '\n';          // uses `char` overload
    std::ofstream{"test.txt"} &lt;&lt; 1.2; // uses rvalue overload
    
    std::cout &lt;&lt; u8'!' &lt;&lt; '\n'; // uses program-defined operator&lt;&lt;(os, char8_t const&amp;)
}
|output=
Hello, world
!
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=167|std=C++98|before=the number of characters inserted for all&lt;br&gt;overloads in {{v|2}} was {{c|traits::length(s)}}|after=updated the numbers for the overloads&lt;br&gt;where {{tt|CharT}} does not match the type of {{c|ch}}}}
{{dr list item|wg=lwg|dr=1203|std=C++11|before=overload for rvalue stream returned&lt;br&gt;lvalue reference to the base class|after=returns rvalue reference&lt;br&gt;to the derived class}}
{{dr list item|wg=lwg|dr=2011|std=C++98|before=padding was determined by {{lc|std::num_put::do_put()}}|after=determined by the operator itself}}
{{dr list item|wg=lwg|dr=2534|std=C++11|before=overload for rvalue stream was not constrained|after=constrained}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_ostream/dsc operator_ltlt}}
{{dsc inc|cpp/io/basic_ostream/dsc print}}
{{dsc inc|cpp/io/basic_ios/dsc widen}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
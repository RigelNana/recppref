{{cpp/io/basic_ostream/title|operator{{=}}}}
{{cpp/io/basic_ostream/navbar}}
{{dcl begin}}
{{dcl|num=1|1=
protected:
basic_ostream&amp; operator=( const basic_ostream&amp; rhs ) = delete;
}}
{{dcl|num=2|since=c++11|1=
protected:
basic_ostream&amp; operator=( basic_ostream&amp;&amp; rhs );
}}
{{dcl end}}

@1@ The copy assignment operator is protected, and is deleted. Output streams are not {{named req|CopyAssignable}}.

@2@ The move assignment operator exchanges all data members of the base class, except for {{ltf|cpp/io/basic_ios/rdbuf}}, with {{c|rhs}}, as if by calling {{c|swap(*rhs)}}. This move assignment operator is protected: it is only called by the move assignment operators of the derived movable output stream classes {{lc|std::basic_ofstream}} and {{lc|std::basic_ostringstream}}, which know how to correctly move-assign the associated streambuffers.

===Parameters===
{{par begin}}
{{par|rhs|the {{tt|basic_ostream}} object from which to assign to {{c|*this}}}}
{{par end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;utility&gt;

int main()
{
    std::ostringstream s;
//  std::cout = s;            // ERROR: copy assignment operator is deleted
//  std::cout = std::move(s); // ERROR: move assignment operator is protected
    s = std::move(std::ostringstream() &lt;&lt; 42); // OK, moved through derived
    std::cout &lt;&lt; s.str() &lt;&lt; '\n';
}
|output=
42
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2067|std=C++11|before=1. the parameter type of overload {{v|1}} was {{tt|basic_ostream&amp;}}&lt;br&gt;2. the parameter type of overload {{v|2}} was {{c/core|const basic_ostream&amp;&amp;}}|after=1. added {{c/core|const}}&lt;br&gt;2. removed {{c/core|const}}}}
{{dr list end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/io/basic_ostream/title|operator&lt;&lt;}}
{{cpp/io/basic_ostream/navbar}}
{{dcl begin}}
{{dcl|num=1|
basic_ostream&amp; operator&lt;&lt;( bool value );
}}
{{dcla|num=2|
basic_ostream&amp; operator&lt;&lt;( long value );
}}
{{dcl|num=3|
basic_ostream&amp; operator&lt;&lt;( unsigned long value );
}}
{{dcl|num=4|since=c++11|
basic_ostream&amp; operator&lt;&lt;( long long value );
}}
{{dcl|num=5|since=c++11|
basic_ostream&amp; operator&lt;&lt;( unsigned long long value );
}}
{{dcl|num=6|
basic_ostream&amp; operator&lt;&lt;( double value );
}}
{{dcl|num=7|
basic_ostream&amp; operator&lt;&lt;( long double value );
}}
{{dcla|num=8|
basic_ostream&amp; operator&lt;&lt;( const void* value );
}}
{{dcl|num=9|since=c++23|
basic_ostream&amp; operator&lt;&lt;( const volatile void* value );
}}
{{dcl|num=10|since=c++17|
basic_ostream&amp; operator&lt;&lt;( std::nullptr_t );
}}
{{dcla|num=11|
basic_ostream&amp; operator&lt;&lt;( short value );
}}
{{dcl|num=12|
basic_ostream&amp; operator&lt;&lt;( int value );
}}
{{dcl|num=13|
basic_ostream&amp; operator&lt;&lt;( unsigned short value );
}}
{{dcl|num=14|
basic_ostream&amp; operator&lt;&lt;( unsigned int value );
}}
{{dcl|num=15|
basic_ostream&amp; operator&lt;&lt;( float value );
}}
{{dcl|num=16|since=c++23|
basic_ostream&amp; operator&lt;&lt;( /* extended-floating-point-type */ value );
}}
{{dcl|num=17|
basic_ostream&amp; operator&lt;&lt;( std::basic_streambuf&lt;CharT, Traits&gt;* sb );
}}
{{dcla|num=18|
basic_ostream&amp; operator&lt;&lt;(
    std::ios_base&amp; (*func)(std::ios_base&amp;) );
}}
{{dcl|num=19|
basic_ostream&amp; operator&lt;&lt;(
    std::basic_ios&lt;CharT, Traits&gt;&amp; (*func)(std::basic_ios&lt;CharT, Traits&gt;&amp;) );
}}
{{dcl|num=20|
basic_ostream&amp; operator&lt;&lt;(
    std::basic_ostream&lt;CharT, Traits&gt;&amp; (*func)
        (std::basic_ostream&lt;CharT, Traits&gt;&amp;) );
}}
{{dcl end}}

Inserts data into the stream.

@1-8@ Inserts {{c|value}}.

@@ This function behaves as a {{named req|FormattedOutputFunction}}. After constructing and checking the sentry object, inserts a value by calling {{l2tf std|cpp/locale/num_put/put}}. If the end of file condition was encountered during output ({{c|1=put().failed() == true}}), sets {{tt|badbit}}.

@9@ Equivalent to {{c|return operator&lt;&lt;(const_cast&lt;const void*&gt;(p));}}.

@10@ Equivalent to {{c|return *this &lt;&lt; s;}}, where {{c|s}} is an implementation-defined null-terminated character type string.

@11@ Inserts a value from {{c/core|short}} {{c|value}}.

@@ This function behaves as a {{named req|FormattedOutputFunction}}. After constructing and checking the sentry object, inserts a {{c/core|long}} value {{c|lval}} as in {{v|2}}, where {{c|lval}} is
* {{c|static_cast&lt;long&gt;(static_cast&lt;unsigned short&gt;(value))}}, if {{c|flags() &amp; std::ios_base::basefield}} is {{lc|std::ios_base::oct}} or {{lc|std::ios_base::hex}}, or
* {{c|static_cast&lt;long&gt;(value)}} otherwise.

@12@ Inserts a value from {{c/core|int}} {{c|value}}.

@@ This function behaves as a {{named req|FormattedOutputFunction}}. After constructing and checking the sentry object, inserts a {{c/core|long}} value {{c|lval}} as in {{v|2}}, where {{c|lval}} is
* {{c|static_cast&lt;long&gt;(static_cast&lt;unsigned int&gt;(value))}}, if {{c|flags() &amp; std::ios_base::basefield}} is {{lc|std::ios_base::oct}} or {{lc|std::ios_base::hex}}, or
* {{c|static_cast&lt;long&gt;(value)}} otherwise.

@13,14@ Inserts a value from {{c/core|unsigned short}} or {{c/core|unsigned int}} {{c|value}}.

@@ This function behaves as a {{named req|FormattedOutputFunction}}. After constructing and checking the sentry object, inserts {{c|static_cast&lt;unsigned long&gt;(value)}} as in {{v|3}}.

@15@ Inserts a value from {{c/core|float}} {{c|value}}.

@@ This function behaves as a {{named req|FormattedOutputFunction}}. After constructing and checking the sentry object, inserts {{c|static_cast&lt;double&gt;(value)}} as in {{v|6}}.

@16@ Inserts a value from {{c|value}}. The library provides overloads for all cv-unqualified [[cpp/language/types#Extended floating-point types|extended floating-point types]] as the type of the parameter value.

@@ This function behaves as a {{named req|FormattedOutputFunction}}. After constructing and checking the sentry object, checks the [[cpp/language/usual arithmetic conversions#Floating-point conversion rank|floating-point conversion rank]] of {{c/core|/* extended-floating-point-type */}}:
* If the rank is less than or equal to that of {{c/core|double}}, inserts {{c|static_cast&lt;double&gt;(value)}} as in {{v|6}}.
* Otherwise, if the rank is less than or equal to that of {{c/core|long double}}, inserts {{c|static_cast&lt;long double&gt;(value)}} as in {{v|7}}.
* Otherwise, an invocation of this overload is conditionally supported with implementation-defined semantics.

@17@ This function behaves as an {{named req|UnformattedOutputFunction}}. After constructing and checking the sentry object, checks if {{c|sb}} is a null pointer. If it is, executes {{c|setstate(badbit)}} and exits. Otherwise, extracts characters from the input sequence controlled by {{c|sb}} and inserts them into {{c|*this}} until one of the following conditions are met:
:* end-of-file occurs on the input sequence;
:* inserting in the output sequence fails (in which case the character to be inserted is not extracted);
:* an exception occurs (in which case the exception is caught).
If no characters were inserted, executes {{c|setstate(failbit)}}. If an exception was thrown while extracting, sets {{tt|failbit}} and, if {{tt|failbit}} is set in {{lc|exceptions()}}, rethrows the exception.

@18-20@ Calls {{c|func(*this)}}. These overloads are used to implement output I/O manipulators such as {{lc|std::endl}}.

===Parameters===
{{par begin}}
{{par|value|integer, floating-point, boolean, or pointer value to insert}}
{{par|func|function to call}}
{{par|sb|pointer to the stream buffer to read the data from}}
{{par end}}

===Return value===
@1-19@ {{c|*this}}
@20@ {{c|func(*this)}}

===Notes===
There are no overloads for pointers to non-static members{{rev inl|until=c++23|, pointers to volatiles,}} or function pointers (other than the ones with signatures accepted by the {{v|18-20|18}} overloads).
* Attempting to output such objects invokes implicit conversion to {{c/core|bool}}, and, for any non-null pointer value, the value {{c|1}} is printed (unless {{tt|boolalpha}} was set, in which case {{c|true}} is printed).

Character and character string arguments (e.g., of type {{c/core|char}} or {{c/core|const char*}}) are handled by the {{rlp|operator ltlt2|non-member overloads}} of {{c/core|operator&lt;&lt;}}.
* Attempting to output a character using the member function call syntax (e.g., {{c|std::cout.operator&lt;&lt;('c');}}) will call one of the overloads in {{v|2-5|2}} or {{v|11-14|11}} and output the numerical value.
* Attempting to output a character string using the member function call syntax will call overload {{v|8}} and print the pointer value instead.

Overload {{v|10}} was added by the resolution of {{lwg|2221}}, but it is never implemented in any standard library implementation under C++11/14 modes.

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;

int fun() { return 42; }

int main()
{
    std::istringstream input(" \"Some text.\" ");
    double f = 3.14;
    bool b = true;
    
    std::cout
        &lt;&lt; fun()          // int overload (12)
        &lt;&lt; ' '            // non-member overload
        &lt;&lt; std::boolalpha // function overload (18)
        &lt;&lt; b              // bool overload (1)
        &lt;&lt; " "            // non-member overload
        &lt;&lt; std::fixed     // function overload (18) again
        &lt;&lt; f              // double overload (6)
        &lt;&lt; input.rdbuf()  // streambuf overload
        &lt;&lt; fun            // bool overload (1): there's no overload for int(*)()
        &lt;&lt; std::endl;     // function overload (18) again
    
    int x = 0;
    int* p1 = &amp;x;
    volatile int* p2 = &amp;x;
    std::cout
        &lt;&lt; "p1: " &lt;&lt; p1 &lt;&lt; '\n'  // `const void*` overload, prints address
        &lt;&lt; "p2: " &lt;&lt; p2 &lt;&lt; '\n'; // before C++23 (P1147): bool overload :), because
            // operator&lt;&lt;(const void*) is not a match, as it discards the `volatile`
            // qualifier. To fix this, C++23 adds `const volatile void*` overload (9),
            // that prints the address as expected.
}
|p=true
|output=
42 true 3.140000 "Some text." true
p1: 0x7ffcea766600
p2: 0x7ffcea766600
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=117|std=C++98|before=overloads {{v|1-8,11-15}} delegated the insertion to&lt;br&gt;{{l2tt|cpp/locale/num_put/put}}, but it does not have overloads for {{c/core|short}},&lt;br&gt;{{c/core|unsigned short}}, {{c/core|int}}, {{c/core|unsigned int}}, and {{c/core|float}}|after=they are converted&lt;br&gt;before being passed&lt;br&gt;to {{tt|num_put::put}}}}
{{dr list item|wg=lwg|dr=567|std=C++98|before=overload {{v|17}} behaved as a {{named req|FormattedOutputFunction}}&lt;br&gt;because of the resolution of {{lwg|60}}|after=it behaves as an&lt;br&gt;{{named req|UnformattedOutputFunction}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_ostream/dsc operator ltlt2}}
{{dsc inc|cpp/string/basic_string/dsc operator ltltgtgt}}
{{dsc inc|cpp/string/basic_string_view/dsc operator ltlt}}
{{dsc inc|cpp/utility/bitset/dsc operator ltltgtgt2}}
{{dsc inc|cpp/numeric/complex/dsc operator ltltgtgt}}
{{dsc inc|cpp/numeric/random/engine/dsc operator ltltgtgt|linear_congruential_engine}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator ltltgtgt|uniform_int_distribution}}
{{dsc inc|cpp/io/basic_ostream/dsc put}}
{{dsc inc|cpp/io/basic_ostream/dsc write}}
{{dsc inc|cpp/utility/dsc to_chars}} 
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
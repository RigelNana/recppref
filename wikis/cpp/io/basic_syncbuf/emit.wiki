{{cpp/io/basic_syncbuf/title | emit}}
{{cpp/io/basic_syncbuf/navbar}}
{{dcl begin}}
{{dcl |1=
bool emit();
}}
{{dcl end}}

Atomically transmits all pending output to the wrapped stream.

All {{c|emit()}} calls transferring characters to the same wrapped stream buffer object appear to execute in a total order, where each {{c|emit()}} call [[cpp/atomic/memory_order|synchronizes-with]] subsequent {{c|emit()}} calls in that total order, even if these calls are made through difference instances of {{lc|std::basic_syncbuf}}/{{lc|std::basic_osyncstream}}. In practice, this means that emit() takes a lock uniquely associated with the wrapped stream object: for example, it could be held in a static hash map where the address of the wrapped stream is used as the key.

If a call had been made to {{ltt|cpp/io/basic_syncbuf/sync|sync}} since the last call to {{c|emit()}}, then also flushes the wrapped stream by calling {{ltt|cpp/io/basic_streambuf/pubsync|pubsync()}} on it.

===Parameters===
(none)

===Return value===
{{c|true}} if all of the following is true:
* there is a wrapped stream (the wrapped streambuf pointer is not null)
* all characters from the temporary storage were successfully sent into the wrapped stream
* the call to {{ltt|cpp/io/basic_streambuf/pubsync|pubsync()}}, if requested, also completed successfully.

Returns {{c|false}} otherwise.

===Notes===
Normally called by the destructor or move assignment of the owning {{lc|std::basic_osyncstream}}, or by {{ltt|cpp/io/basic_osyncstream/emit|std::basic_osyncstream::emit}}.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc | cpp/io/basic_osyncstream/dsc destructor}}
{{dsc inc | cpp/io/basic_osyncstream/dsc emit}}
{{dsc inc | cpp/io/basic_syncbuf/dsc constructor}}
{{dsc end}}

{{langlinks|es|ja|zh}}
{{cpp/io/basic_syncbuf/title|basic_syncbuf}}
{{cpp/io/basic_syncbuf/navbar}}
{{dcl begin}}
{{dcl|num=1|1=
basic_syncbuf()
    : basic_syncbuf( nullptr )
}}
{{dcl|num=2|1=
explicit basic_syncbuf( streambuf_type* obuf )
    : basic_syncbuf( obuf, Allocator() ) {}
}}
{{dcl|num=3|1=
basic_syncbuf( streambuf_type* obuf, const Allocator&amp; a );
}}
{{dcl|num=4|1=
basic_syncbuf( basic_syncbuf&amp;&amp; rhs );
}}
{{dcl end}}

@1@ Default constructor: creates an instance of {{tt|std::basic_syncbuf}} with emit-on-sync policy set to {{c|false}}, wrapped streambuffer set to {{c|nullptr}}, and using default-constructed {{tt|Allocator}} as the allocator for temporary storage.
@2,3@ Creates an instance of {{tt|std::basic_syncbuf}} with emit-on-sync policy set to {{c|false}}, wrapped streambuffer set to {{c|obuf}}, and using {{c|a}} as the allocator for temporary storage.
@4@ Move constructor: move-constructs a {{tt|std::basic_syncbuf}} object by moving all contents from another {{tt|std::basic_syncbuf}} object {{c|rhs}}, including the temporary storage, the wrapped stream pointer, policy, and all other state (such as the mutex pointer). After move, {{c|rhs}} is not associated with a stream, and {{c|1=rhs.get_wrapped() == nullptr}}. The put area member pointers of the base class {{lc|std::basic_streambuf}} of {{c|rhs}} are guaranteed to be null. Destroying a moved-from {{c|rhs}} will not produce any output.

===Parameters===
{{par begin}}
{{par|obuf|pointer to the {{lc|std::basic_streambuf}} to wrap}}
{{par|a|the allocator to use for temporary storage}}
{{par|rhs|another {{tt|std::basic_syncbuf}} to move from}}
{{par end}}

===Exceptions===
@2,3@ May throw {{lc|std::bad_alloc}} from the constructor of the internal temporary storage or {{lc|std::system_error}} from the mutex construction.

===Notes===
Typically called by the appropriate constructors of {{lc|std::basic_osyncstream}}.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_streambuf/dsc sync}}
{{dsc inc|cpp/io/basic_syncbuf/dsc emit}}
{{dsc end}}

{{langlinks|es|ja|zh}}
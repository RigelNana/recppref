{{cpp/title|cin|wcin}}
{{cpp/io/basic_istream/navbar}}
{{dcl begin}}
{{dcl header|iostream}}
{{dcl|num=1|1=
extern std::istream cin;
}}
{{dcl|num=2|1=
extern std::wistream wcin;
}}
{{dcl end}}

The global objects {{tt|std::cin}} and {{tt|std::wcin}} control input from a stream buffer of implementation-defined type (derived from {{lc|std::streambuf}}), associated with the standard C input stream {{lc|stdin}}.

These objects are guaranteed to be initialized during or before the first time an object of type {{lc|std::ios_base::Init}} is constructed and are available for use in the constructors and destructors of static objects with [[cpp/language/initialization#Non-local_variables|ordered initialization]] (as long as {{tt|&lt;iostream&gt;}} is included before the object is defined).

Unless {{c|sync_with_stdio(false)}} has been issued, it is safe to concurrently access these objects from multiple threads for both formatted and unformatted input.

Once {{tt|std::cin}} is constructed, {{c|std::cin.tie()}} returns {{c|&amp;std::cout}}, and likewise, {{c|std::wcin.tie()}} returns {{c|&amp;std::wcout}}. This means that any formatted input operation on {{tt|std::cin}} forces a call to {{c|std::cout.flush()}} if any characters are pending for output.

===Notes===
The 'c' in the name refers to "character" ([https://www.stroustrup.com/bs_faq2.html#cout stroustrup.com FAQ]); {{tt|cin}} means "character input" and {{tt|wcin}} means "wide character input".

===Example===
{{example
|code=
#include &lt;iostream&gt;

struct Foo
{
    int n;
    Foo()
    {
        std::cout &lt;&lt; "Enter n: "; // no flush needed
        std::cin &gt;&gt; n;
    }
};

Foo f; // static object

int main()
{
    std::cout &lt;&lt; "f.n is " &lt;&lt; f.n &lt;&lt; '\n';
}
|p=true
|input=10
|output=
Enter n: 10
f.n is 10
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/ios_base/dsc Init}}
{{dsc inc|cpp/io/dsc cout}}
{{dsc inc|cpp/io/c/dsc std streams}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
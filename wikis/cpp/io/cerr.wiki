{{cpp/title|cerr|wcerr}}
{{cpp/io/basic_ostream/navbar}}
{{dcl begin}}
{{dcl header|iostream}}
{{dcl|num=1|1=
extern std::ostream cerr;
}}
{{dcl|num=2|1=
extern std::wostream wcerr;
}}
{{dcl end}}

The global objects {{tt|std::cerr}} and {{tt|std::wcerr}} control output to a stream buffer of implementation-defined type (derived from {{lc|std::streambuf}} and {{lc|std::wstreambuf}}, respectively), associated with the standard C error output stream {{lc|stderr}}.

These objects are guaranteed to be initialized during or before the first time an object of type {{lc|std::ios_base::Init}} is constructed and are available for use in the constructors and destructors of static objects with [[cpp/language/initialization#Non-local_variables|ordered initialization]] (as long as {{header|iostream}} is included before the object is defined).

Unless {{c|std::ios_base::sync_with_stdio(false)}} has been issued, it is safe to concurrently access these objects from multiple threads for both formatted and unformatted output.

Once initialized, {{c|1=(std::cerr.flags() &amp; unitbuf) != 0}} (same for {{tt|std::wcerr}}) meaning that any output sent to these stream objects is immediately flushed to the OS (via {{lc|std::basic_ostream::sentry}}'s destructor).

In addition, {{c|std::cerr.tie()}} returns {{c|&amp;std::cout}} (same for {{tt|std::wcerr}} and {{lc|std::wcout}}), meaning that any output operation on {{tt|std::cerr}} first executes {{c|std::cout.flush()}} (via {{lc|std::basic_ostream::sentry}}'s constructor).

===Notes===
The 'c' in the name refers to "character" ([https://www.stroustrup.com/bs_faq2.html#cout stroustrup.com FAQ]); {{tt|cerr}} means "character error (stream)" and {{tt|wcerr}} means "wide character error (stream)".

===Example===
{{example
|Output to {{lc|stderr}} via {{tt|std::cerr}} flushes out the pending output on {{lc|std::cout}}, while output to {{lc|stderr}} via {{lc|std::clog}} does not.
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;thread&gt;
using namespace std::chrono_literals;

void f()
{
    std::cout &lt;&lt; "Output from thread...";
    std::this_thread::sleep_for(2s);
    std::cout &lt;&lt; "...thread calls flush()" &lt;&lt; std::endl;
}

int main()
{
    std::jthread t1{f};
    std::this_thread::sleep_for(1000ms);
    std::clog &lt;&lt; "This output from main is not tie()'d to cout\n";
    std::cerr &lt;&lt; "This output is tie()'d to cout\n";
}
|p=true
|output=
This output from main is not tie()'d to cout
Output from thread...This output is tie()'d to cout
...thread calls flush()
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=455|std=C++98|before={{c|std::cerr.tie()}} and&lt;br&gt;{{c|std::wcerr.tie()}} returned null pointers|after=they return {{c|&amp;std::cout}} and&lt;br&gt;{{c|&amp;std::wcout}} respectively}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/ios_base/dsc Init}}
{{dsc inc|cpp/io/dsc clog}}
{{dsc inc|cpp/io/dsc cout}}
{{dsc inc|cpp/io/c/dsc std streams}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
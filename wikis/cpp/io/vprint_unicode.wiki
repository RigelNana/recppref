{{cpp/title|vprint_unicode|vprint_unicode_buffered}}
{{cpp/io/print/navbar}}

{{dcl begin}}
{{dcl header|print}}
{{dcl|num=1|since=c++23|
void vprint_unicode( std::FILE* stream,
                     std::string_view fmt, std::format_args args );
}}
{{dcl|num=2|since=c++23|
void vprint_unicode_buffered( std::FILE* stream,
                              std::string_view fmt, std::format_args args );
}}
{{dcl|num=3|since=c++23|
void vprint_unicode_buffered( std::string_view fmt, std::format_args args );
}}
{{dcl end}}

Format {{c|args}} according to the format string {{c|fmt}}, and writes the result to the output stream.

@1@ Performs the following operations in order:
# Locks {{c|stream}}.
# Let {{c|out}} denote the character representation of formatting arguments provided by {{c|args}} formatted according to specifications given in {{c|fmt}}.
# Writes {{c|out}} to {{c|stream}}:
:* If {{c|stream}} refers to a terminal that is only capable of displaying Unicode via a [[#Notes|native Unicode API]], flushes {{c|stream}} and writes {{c|out}} to the terminal using the native Unicode API.
:* Otherwise, writes unmodified {{c|out}} to the {{c|stream}}.
@@ Unconditionally unlocks {{c|stream}} on function exit.
@@ If any of the following conditions is satisfied, the behavior is undefined:
* {{c|stream}} is not a valid pointer to an output C stream.
* {{c|out}} contains invalid Unicode {{enwiki|Character encoding#Terminology|code units}} when the native Unicode API is used.

@2@ Equivalent to {{c multi
|1=std::string out = std::vformat(fmt, args);
|2=std::vprint_unicode(stream, "{}", std::make_format_args(out));}}.

@3@ Equivalent to {{c|std::vprint_unicode_buffered(stdout, fmt, args)}}.

===Parameters===
{{par begin}}
{{par|stream|output file stream to write to}}
{{par|fmt|{{include|cpp/utility/format/format string}}}}
{{par|args|arguments to be formatted}}
{{par end}}

===Exceptions===
{{std print exceptions}}

===Notes===
The C++ standard encourages the implementers to produce a diagnostic message if {{c|out}} contains invalid Unicode code units.

On POSIX, writing to a terminal is done using the usual standard I/O functions, so there is no need to treat a terminal differently to any other file stream.

On Windows, the stream refers to a terminal if {{c|GetConsoleMode(_get_osfhandle(_fileno(stream)))}} returns nonzero (see Windows documentation for [https://docs.microsoft.com/en-us/windows/console/getconsolemode {{tt|GetConsoleMode}}], [https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/get-osfhandle {{tt|_get_osfhandle}}], and [https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/fileno {{tt|_fileno}}]). The native Unicode API on Windows is [https://docs.microsoft.com/en-us/windows/console/writeconsole {{tt|WriteConsoleW}}].

If invoking the native Unicode API requires transcoding, the invalid code units are substituted with {{tt|U+FFFD}} REPLACEMENT CHARACTER (see "The Unicode Standard - Core Specification", [[#External links|Chapter 3.9]]).

{{ftm begin|sort=yes}}
{{ftm|__cpp_lib_print|Formatted output|value=202207L|std=C++23|rowspan=3}}
{{ftm|-|Unbuffered formatted output|value=202403L|std=C++26|dr=23}}
{{ftm|-|Enabling unbuffered formatted output for more formattable types|value=202406L|std=C++26|dr=23}}
{{ftm|__cpp_lib_format|Exposing {{lc|std::basic_format_string}}|value=202207L|std=C++23}}
{{ftm end}}

===Example===
{{example
|code=
&lt;!--
#include &lt;print&gt;

int main()
{
}
--&gt;
|output=
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=4044|std=C++23|before=the native Unicode API was always used if the&lt;br&gt;terminal referred to by {{c|stream}} can display Unicode|after=only used if the terminal can only use&lt;br&gt;the native Unicode API to display Unicode}}
{{dr list item|paper=P3107R5|std=C++23|before=printing operations were always buffered|after=provides unbuffered printing operations}}
{{dr list item|paper=P3235R3|std=C++23|before=the names of the functions added&lt;br&gt;by {{stddoc|P3107R5}} were misleading|after=changed the function names}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/dsc vprint_nonunicode}}
{{dsc inc|cpp/io/basic_ostream/dsc vprint_unicode}}
{{dsc inc|cpp/io/dsc print}}
{{dsc inc|cpp/utility/format/dsc format}}
{{dsc end}}

===External links===
{{elink begin}}
{{elink|{{enwiki|Unicode}}}}
{{elink|[https://www.unicode.org/versions/Unicode14.0.0/UnicodeStandard-14.0.pdf The Unicode Standard Version 14.0 - Core Specification]}}
{{elink end}}

{{langlinks|de|es|fr|ja|pl|ru|zh}}
{{cpp/title|clog|wclog}}
{{cpp/io/basic_ostream/navbar}}
{{dcl begin}}
{{dcl header|iostream}}
{{dcl|num=1|1=
extern std::ostream clog;
}}
{{dcl|num=2|1=
extern std::wostream wclog;
}}
{{dcl end}}

The global objects {{tt|std::clog}} and {{tt|std::wclog}} control output to a stream buffer of implementation-defined type (derived from {{lc|std::streambuf}}), associated with the standard C output stream {{lc|stderr}}, but, unlike {{lc|std::cerr}}/{{lc|std::wcerr}}, these streams are not automatically flushed and cout is not automatically tie()'d with these streams.

These objects are guaranteed to be initialized during or before the first time an object of type {{lc|std::ios_base::Init}} is constructed and are available for use in the constructors and destructors of static objects with [[cpp/language/initialization#Non-local_variables|ordered initialization]] (as long as {{header|iostream}} is included before the object is defined).

Unless {{c|std::ios_base::sync_with_stdio(false)}} has been issued, it is safe to concurrently access these objects from multiple threads for both formatted and unformatted output.

===Notes===
The 'c' in the name refers to "character" ([https://www.stroustrup.com/bs_faq2.html#cout stroustrup.com FAQ]); {{tt|clog}} means "character log" and {{tt|wclog}} means "wide character log".

===Example===
{{example
|code=
#include &lt;iostream&gt;

struct Foo
{
    int n;
    Foo()
    {
        std::clog &lt;&lt; "static constructor\n";
    }
    ~Foo()
    {
        std::clog &lt;&lt; "static destructor\n";
    }
};

Foo f; // static object

int main()
{
    std::clog &lt;&lt; "main function\n";
}
|output=
static constructor
main function
static destructor
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/ios_base/dsc Init}}
{{dsc inc|cpp/io/dsc cerr}}
{{dsc inc|cpp/io/dsc cout}}
{{dsc inc|cpp/io/c/dsc std streams}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
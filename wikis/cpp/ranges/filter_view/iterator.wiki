{{cpp/ranges/title|n=filter_view&lt;V,Pred&gt;::|''iterator''}}
{{cpp/ranges/filter_view/navbar}}
{{ddcl|since=c++20|notes={{mark expos}}|
class /*iterator*/;
}}

The return type of {{ltt|cpp/ranges/filter_view|filter_view::begin}}.

This is a {{lconcept|bidirectional_iterator}} if {{c|V}} models {{lconcept|bidirectional_range}}, a {{lconcept|forward_iterator}} if {{c|V}} models {{lconcept|forward_range}}, and {{lconcept|input_iterator}} otherwise.

Modification of the element denoted by this iterator is permitted, but results in undefined behavior if the resulting value does not satisfy the filter's predicate.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|iterator_concept}}|
* {{lc|std::bidirectional_iterator_tag}}, if {{c|V}} models {{lconcept|bidirectional_range}},
* {{lc|std::forward_iterator_tag}}, if {{c|V}} models {{lconcept|forward_iterator}},
* {{lc|std::input_iterator_tag}} otherwise.
}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{mark cond present}}|
Defined if and only if {{c|V}} models {{lconcept|forward_range}}.
Let {{c|C}} be the type {{c|std::iterator_traits&lt;ranges::iterator_t&lt;V&gt;&gt;::iterator_category}}.
* {{lc|std::bidirectional_iterator_tag}}, if {{c|C}} models {{c|std::derived_from&lt;std::bidirectional_iterator_tag&gt;}},
* {{lc|std::forward_iterator_tag}}, if {{c|C}} models {{c|std::derived_from&lt;std::forward_iterator_tag&gt;}},
* {{c|C}} otherwise.
}}
{{dsc|{{tt|value_type}}|{{c|ranges::range_value_t&lt;V&gt;}}}}
{{dsc|{{tt|difference_type}}|{{c|ranges::range_difference_t&lt;V&gt;}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc expos mem obj|current_|private=yes|An iterator of type {{c|ranges::iterator_t&lt;V&gt;}} into the underlying {{lconcept|view}}.}}
{{dsc expos mem obj|parent_|private=yes|A pointer of type {{c|ranges::filter_view&lt;V, Pred&gt;*}} to the parent {{tt|filter_view}} object.}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|{{PAGENAME}}#ctor|constructs an iterator}}
{{dsc mem fun|{{PAGENAME}}#base|title=base|returns the underlying iterator}}
{{dsc mem fun|{{PAGENAME}}#dereference|title=operator*&lt;br&gt;operator-&gt;|forwards to the underlying iterator}}
{{dsc mem fun|{{PAGENAME}}#increment|title=operator++&lt;br&gt;operator++{{dsc small|(int)}}|advances the iterator}}
{{dsc mem fun|{{PAGENAME}}#decrement|title=operator--&lt;br&gt;operator--{{dsc small|(int)}}|decrements the iterator}}
{{dsc end}}

{{anchor|ctor}}
{{member|{{small|std::ranges::filter_view::''iterator''::}}''iterator''|2=
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
/*iterator*/()
    requires std::default_initializable&lt;ranges::iterator_t&lt;V&gt;&gt; = default;&lt;!-- P2325R3 --&gt;
}}
{{dcl|since=c++20|num=2|1=
constexpr /*iterator*/( filter_view&amp; parent,
                        ranges::iterator_t&lt;V&gt; current );
}}
{{dcl end}}

@1@ Initializes {{tti|current_}} and {{tti|parent_}} with their default member initializers, which are {{c|1== ranges::iterator_t&lt;V&gt;()}} and {{c|1== nullptr}} respectively.
@2@ Initializes {{tti|current_}} with {{c|std::move(current)}} and {{tti|parent_}} with {{c|std::addressof(parent)}}.
}}

{{anchor|base}}
{{member|{{small|std::ranges::filter_view::''iterator''::}}base|2=
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
constexpr const ranges::iterator_t&lt;V&gt;&amp; base() const &amp; noexcept;
}}
{{dcl|since=c++20|num=2|1=
constexpr ranges::iterator_t&lt;V&gt; base() &amp;&amp;;
}}
{{dcl end}}

@1@ Equivalent to {{c|return current_;}}.
@2@ Equivalent to {{c|return std::move(current_);}}.
}}

{{anchor|dereference}}
{{member|{{small|std::ranges::filter_view::''iterator''::}}operator*,-&gt;|2=
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
constexpr ranges::range_reference_t&lt;V&gt; operator*() const;
}}
{{dcl|since=c++20|num=2|1=
constexpr ranges::iterator_t&lt;V&gt; operator-&gt;() const
    requires /*has-arrow*/&lt;ranges::iterator_t&lt;V&gt;&gt; &amp;&amp;
             std::copyable&lt;ranges::iterator_t&lt;V&gt;&gt;;
}}
{{dcl end}}

@1@ Equivalent to {{c|return *current_;}}.
@2@ Equivalent to {{c|return current_;}}.&lt;br&gt;
For a type {{tt|I}}, {{c|/*has-arrow*/&lt;I&gt;}} is modeled or satisfied, if and only if {{tt|I}} models or satisfies {{lconcept|input_iterator}} respectively, and either {{tt|I}} is a pointer type or {{c|requires(I i){ i.operator-&gt;();}}} is {{c|true}}.
}}

{{anchor|increment}}
{{member|{{small|std::ranges::filter_view::''iterator''::}}operator++|2=
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
constexpr /*iterator*/&amp; operator++();
}}
{{dcl|since=c++20|num=2|1=
constexpr void operator++( int );
}}
{{dcl|since=c++20|num=3|1=
constexpr /*iterator*/ operator++( int )
    requires ranges::forward_range&lt;V&gt;;
}}
{{dcl end}}

@1@ Equivalent to&lt;br&gt;{{c multi
|current_ {{=}} ranges::find_if(std::move(++current_), ranges::end(parent_-&gt;base_),
|                           std::ref(*parent_-&gt;pred_));
|return *this;
}}.

@2@ Equivalent to {{c|++*this;}}.

@3@ Equivalent to {{c|1=auto tmp = *this; ++*this; return tmp;}}.
}}

{{anchor|decrement}}
{{member|{{small|std::ranges::filter_view::''iterator''::}}operator--|2=
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
constexpr /*iterator*/&amp; operator--()
    requires ranges::bidirectional_range&lt;V&gt;;
}}
{{dcl|since=c++20|num=2|1=
constexpr /*iterator*/ operator--( int )
    requires ranges::bidirectional_range&lt;V&gt;;
}}
{{dcl end}}

@1@ Equivalent to&lt;br&gt;{{c multi
|do
|    --current_;
|while (!std::invoke(*parent_-&gt;pred_, *current_));
|return *this;
}}.

@2@ Equivalent to {{c|1=auto tmp = *this; --*this; return tmp;}}.
}}

===Non-member functions===
{{dsc begin}}
{{dsc fun|{{PAGENAME}}#compare|title=operator{{==}}|compares the underlying iterators|notes={{mark c++20}}}}
{{dsc fun|{{PAGENAME}}#move|title=iter_move|casts the result of dereferencing the underlying iterator to its associated rvalue reference type|notes={{mark c++20}}}}
{{dsc fun|{{PAGENAME}}#swap|title=iter_swap|swaps the objects pointed to by two underlying iterators|notes={{mark c++20}}}}
{{dsc end}}

{{anchor|compare}}
{{member|1= operator=={{small|(std::ranges::filter_view::''iterator'')}}|2=
{{ddcl|since=c++20|1=
friend constexpr bool operator==( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    requires std::equality_comparable&lt;ranges::iterator_t&lt;V&gt;&gt;;
}}

Equivalent to {{c|1=return x.current_ == y.current_;}}.

{{cpp/note synthesized eq}}

{{cpp/hidden friend|plural=no|{{tt|std::ranges::filter_view::''iterator''}}}}
}}

{{anchor|move}}
{{member|1= iter_move{{small|(std::ranges::filter_view::''iterator'')}}|2=
{{ddcl|since=c++20|1=
friend constexpr ranges::range_rvalue_reference_t&lt;V&gt;
iter_move( const /*iterator*/&amp; i )
    noexcept(noexcept(ranges::iter_move(i.current_)));
}}

Equivalent to {{c|1=return ranges::iter_move(i.current_);}}.

{{cpp/hidden friend|plural=no|{{tt|std::ranges::filter_view::''iterator''}}}}
}}

{{anchor|swap}}
{{member|1= iter_swap{{small|(std::ranges::filter_view::''iterator'')}}|2=
{{ddcl|since=c++20|1=
friend constexpr void iter_swap( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    noexcept(noexcept(ranges::iter_swap(x.current_, y.current_)))
        requires std::indirectly_swappable&lt;ranges::iterator_t&lt;V&gt;&gt;;
}}

Equivalent to {{c|1=ranges::iter_swap(x.current_, y.current_)}}.

{{cpp/hidden friend|plural=no|{{tt|std::ranges::filter_view::''iterator''}}}}
}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P2259R1|std=C++20|before=member type {{tt|iterator_category}} was always defined|after=defined only if {{tt|V}} is a {{lconcept|forward_range}}}}
{{dr list item|wg=lwg|dr=3533|std=C++20|before=the {{c|const&amp;}} overload of {{tt|base}} copied the underlying iterator|after=returns a reference to it}}
{{dr list item|wg=lwg|dr=3593|std=C++20|before=the {{c|const&amp;}} overload of {{tt|base}} might not be noexcept|after=made noexcept}}
{{dr list end}}

{{langlinks|de|es|ja|ru|zh}}
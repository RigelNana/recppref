{{cpp/ranges/title|cdata}}
{{cpp/ranges/navbar}}
{{dcl begin}}
{{dcl header|ranges}}
{{dcl header|iterator}}
{{dcl|notes={{mark custpt}}|since=c++20|1=
inline namespace /*unspecified*/ {
    inline constexpr /*unspecified*/ cdata = /*unspecified*/;
}
}}
{{dcl h|Call signature}}
{{dcl|since=c++20|1=
template&lt; class T &gt;
    requires /* see below */
constexpr /* see below */ cdata( T&amp;&amp; t );
}}
{{dcl end}}

Returns a pointer to the first element {{rev inl|since=c++23|of constant type}} of a contiguous range denoted by a {{rev inl|until=c++23|const-qualified}} argument.

{{rrev|until=c++23|
Let {{tt|CT}} be
* {{c|const std::remove_reference_t&lt;T&gt;&amp;}} if the argument is an lvalue (i.e. {{tt|T}} is an lvalue reference type),
* {{c|const T}} otherwise.
A call to {{tt|ranges::cdata}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to {{c|ranges::data(static_cast&lt;CT&amp;&amp;&gt;(t))}}.

The return type is equivalent to {{c|std::remove_reference_t&lt;ranges::range_reference_t&lt;CT&gt;&gt;*}}.
}}

{{rrev|since=c++23|
If the argument is an lvalue or {{c|ranges::enable_borrowed_range&lt;std::remove_cv_t&lt;T&gt;&gt;}} is {{c|true}}, then a call to {{tt|ranges::cdata}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to:
* {{box|{{rlpsi|/#as-const-pointer}}{{c/core|(ranges::data(}}{{rlpsi|/#possibly-const-range}}{{c/core|(t)))}}}}.

The return type is equivalent to {{c|std::remove_reference_t&lt;ranges::range_const_reference_t&lt;T&gt;&gt;*}}.

In all other cases, a call to {{tt|ranges::cdata}} is ill-formed, which can result in [[cpp/language/sfinae|substitution failure]] when the call appears in the immediate context of a template instantiation.
}}

If {{c|ranges::cdata(t)}} is valid, then it returns a pointer to an object {{rev inl|since=c++23|of constant type}}.

{{cpp/ranges/cpo}}

===Example===
{{example
|code=
#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string&gt;

int main()
{
    std::string src {"hello world!\n"};

//  std::ranges::cdata(src)[0] = 'H'; // error, src.data() is treated as read-only
    std::ranges::data(src)[0] = 'H'; // OK, src.data() is a non-const storage

    char dst[20]; // storage for a C-style string
    std::strcpy(dst, std::ranges::cdata(src));
    // [data(src), data(src) + size(src)] is guaranteed to be an NTBS

    std::cout &lt;&lt; dst;
}
|output=
Hello world!
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc data}}
{{dsc inc|cpp/iterator/dsc data}}
{{dsc end}}

{{langlinks|es|ja|zh}}
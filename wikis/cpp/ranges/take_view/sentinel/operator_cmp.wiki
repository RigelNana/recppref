{{title|1= operator=={{small|(std::ranges::take_view::''sentinel''&lt;Const&gt;)}}}}
{{cpp/ranges/take_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++20|1=
friend constexpr bool
    operator==( const std::counted_iterator&lt;ranges::iterator_t&lt;Base&gt;&gt;&amp; y,
                const /*sentinel*/&amp; x );
}}
{{dcl|num=2|since=c++20|1=
template&lt; bool OtherC = !Const &gt;
    requires std::sentinel_for&lt;ranges::sentinel_t&lt;Base&gt;,
                               ranges::iterator_t&lt;/*add-const-if*/&lt;OtherC, V&gt;&gt;&gt;
friend constexpr bool
    operator==( const std::counted_iterator&lt;
                          ranges::iterator_t&lt;/*add-const-if*/&lt;OtherC, V&gt;&gt;&gt;&amp; y,
                const /*sentinel*/&amp; x );
}}
{{dcl end}}

Compares a {{c|take_view::/*sentinel*/}} with a {{lc|std::counted_iterator}} (typically obtained from a call to {{ltt|cpp/ranges/take_view/begin|take_view::begin}}).

Returns {{c|true}} if {{c|y}} points past the N{{sup|th}} element (where N is the number passed to the [[cpp/ranges/take_view/take_view|constructor of {{tt|take_view}}]]), or if end of underlying view is reached.

The exposition-only alias template {{c/core|/*add-const-if*/}} is defined as&lt;br&gt;
{{c multi
|template&lt;bool C, class T&gt;
|using /*add-const-if*/ {{=}} std::conditional_t&lt;C, const T, T&gt;;
}}.

{{cpp/hidden friend|plural=yes|{{tt|std::ranges::take_view::''sentinel''&lt;Const&gt;}}}}

{{cpp/note synthesized eq}}

===Parameters===
{{par begin}}
{{par|y|{{lc|std::counted_iterator}} to compare}}
{{par|x|sentinel to compare}}
{{par end}}

===Return value===
{{c|1= y.count() == 0 {{!!}} y.base() == x.end_}}, where {{tti|end_}} denotes the underlying sentinel.

===Example===
{{example
|code=
|output=
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3449|std=C++20|before=comparison between the iterator and the sentinel of&lt;br&gt;differently const-qualified {{tt|take_view}} was unsupported|after=made supported when possible}}
{{dr list end}}

{{langlinks|es|ja|ru|zh}}
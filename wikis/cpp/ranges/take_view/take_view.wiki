{{cpp/ranges/take_view/title|take_view}}
{{cpp/ranges/take_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
take_view() requires std::default_initializable&lt;V&gt; = default;&lt;!-- P2325R3 --&gt;
}}
{{dcl|num=2|since=c++20|1=
constexpr explicit take_view( V base, ranges::range_difference_t&lt;V&gt; count );
}}
{{dcl end}}

Constructs a {{tt|take_view}}.

@1@ Default constructor. [[cpp/language/value initialization|Value-initializes]] the underlying view {{rlpi|/#Data members|base_}} and initializes the {{rlpi|/#Data members|count_}} to {{c|0}}. After construction, {{rlpf|base}} returns a copy of {{c|V()}} and {{rlpf|size}} returns {{c|0}}.

@2@ Initializes the underlying view {{tti|base_}} with {{c|std::move(base)}} and the {{tti|count_}} with {{c|count}}. After construction, {{rlpf|base}} returns a copy of {{c|base}} and {{rlpf|size}} returns the smaller of {{c|count}} and {{c|ranges::size(base)}}.

===Parameters===
{{par begin}}
{{par|base|the underlying view}}
{{par|count|number of elements to take}}
{{par end}}

===Example===
{{example
|Prints first {{c|n}} prime numbers that are generated using {{enwiki|Sieve of Eratosthenes}} method.
|code=
#include &lt;bit&gt;
#include &lt;bitset&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;ranges&gt;

constexpr unsigned clog2(auto x) // ≈ ⌈ log₂(x) ⌉
{
    return std::numeric_limits&lt;decltype(x)&gt;::digits - std::countl_zero(x);
}

template&lt;unsigned Count&gt;
struct FirstPrimes
{
    static constexpr int count = Count;
    
    constexpr bool operator()(int n) // is prime?
    {
        return n &lt; 2 ? false :
               n == 2 ? true :
               n % 2 == 0 or bits_.test(n / 2) ? false : true;
    }
private:
    consteval static auto init()
    {
        std::bitset&lt;size_ / 2 + 1&gt; bits;
        for (int n{3}; n &lt; size_; n += 2)
            for (int i{n}, j{3}, k{}; (k = i * j) &lt; size_; j += 2)
                bits.set(k / 2);
        return bits;
    }
    
    // Keep only odd numbers; 0 means it is a prime
    constexpr static auto bits_ { init() };
    
    // a(n) &lt;= n * (log(n) + log(log(n)))
    static constexpr int size_ = Count * (clog2(Count) + clog2(clog2(Count)));
};

int main()
{
    constexpr FirstPrimes&lt;42&gt; primes;
    
    auto primes_view = std::ranges::take_view{ std::views::iota(1)
                                             {{!}} std::views::filter(primes)
                                             , primes.count };
    
    std::cout &lt;&lt; "First " &lt;&lt; primes.count &lt;&lt; " prime numbers are:\n";
    for (int new_line{1}; const int prime : primes_view)
        std::cout &lt;&lt; std::setw(3) &lt;&lt; prime &lt;&lt; (new_line++ % 7 ? ' ' : '\n');
}
|output=
First 42 prime numbers are:
  2   3   5   7  11  13  17
 19  23  29  31  37  41  43
 47  53  59  61  67  71  73
 79  83  89  97 101 103 107
109 113 127 131 137 139 149
151 157 163 167 173 179 181
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3714|paper=P2711R1|std=C++20|before=the multi-parameter constructor was not explicit|after=made explicit}}
{{dr list end}}

{{langlinks|es|ja|ru|zh}}
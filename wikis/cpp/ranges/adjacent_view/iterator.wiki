{{cpp/ranges/adjacent_view/title|''iterator''}}
{{cpp/ranges/adjacent_view/navbar}}

{{ddcl|since=c++23|notes={{mark expos}}|
template&lt; bool Const &gt;
class /*iterator*/
}}

The return type of {{rlpt|begin|adjacent_view::begin}}, and of {{rlpt|end|adjacent_view::end}} when the underlying view {{tt|V}} is a {{lconcept|common_range}}.

The type {{c|/*iterator*/&lt;true&gt;}} is returned by the const-qualified overloads. The type {{c|/*iterator*/&lt;false&gt;}} is returned by the non-const-qualified overloads.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc expos mem type|Base|private=yes|{{c|const V}} if {{c|Const}} is {{c|true}}, otherwise {{c|V}}.}}
{{dsc|{{tt|iterator_category}}|{{c|std::input_iterator_tag}}}}
{{dsc|{{tt|iterator_concept}}|
* {{c|std::random_access_iterator_tag}}, if {{tti|Base}} models {{lconcept|random_access_range}}. Otherwise,
* {{c|std::bidirectional_iterator_tag}}, if {{tti|Base}} models {{lconcept|bidirectional_range}}. Otherwise,
* {{c|std::forward_iterator_tag}}.}}
{{dsc|{{tt|value_type}}|{{c|std::tuple&lt;/*REPEAT*/(ranges::range_value_t&lt;Base&gt;, N)...&gt;;}}}}
{{dsc|{{tt|difference_type}}|{{c|ranges::range_difference_t&lt;Base&gt;}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member object|Definition}}
{{dsc expos mem obj|current_|private=yes|{{c|std::array&lt;ranges::iterator_t&lt;Base&gt;, N&gt;}}.}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/adjacent_view/iterator/iterator|constructs an iterator}}
{{dsc mem fun|cpp/ranges/adjacent_view/iterator/operator*|accesses the element}}
{{dsc mem fun|cpp/ranges/adjacent_view/iterator/operator_at|title=operator[]|accesses an element by index}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|adjacent_view}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc fun|cpp/ranges/adjacent_view/iterator/operator_cmp|title=operator==&lt;br&gt;operator&lt;&lt;br&gt;operator&gt;&lt;br&gt;operator&lt;=&lt;br&gt;operator&gt;=&lt;br&gt;operator&lt;=&gt;|compares the underlying iterators|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/adjacent_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|performs iterator arithmetic|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/adjacent_view/iterator/iter_move|casts the result of dereferencing the underlying iterator to its associated rvalue reference type|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/adjacent_view/iterator/iter_swap|swaps the objects pointed to by two underlying iterators|notes={{mark c++23}}}}
{{dsc end}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;concepts&gt;
#include &lt;list&gt;
#include &lt;ranges&gt;
#include &lt;tuple&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;

int main()
{
    auto v = std::vector{0, 1, 2, 3, 4, 5};
    auto i = (v {{!}} std::views::adjacent&lt;3&gt;).begin();
    using I = decltype(i);
    static_assert(std::same_as&lt;I::value_type, std::tuple&lt;int, int, int&gt;&gt;);
    static_assert(std::same_as&lt;I::iterator_concept, std::random_access_iterator_tag&gt;);
    // some of available operators:
    ++i; i++; --i; i--; i += 2; i -= 2;
    assert(i[2] == std::tuple(2, 3, 4));
    using DI = decltype(*i);
    static_assert(std::same_as&lt;DI, std::tuple&lt;int&amp;, int&amp;, int&amp;&gt;&gt;);
    std::get&lt;1&gt;(*i) = 42; // modifies v[1] via iterator i
    assert(v[1] == 42);

    auto l = std::list{0, 1, 2, 3, 4, 5};
    auto j = (l {{!}} std::views::adjacent&lt;3&gt;).begin();
    using J = decltype(j);
    static_assert(std::same_as&lt;J::value_type, std::tuple&lt;int, int, int&gt;&gt;);
    static_assert(std::same_as&lt;J::iterator_concept, std::bidirectional_iterator_tag&gt;);
    ++j; --j; j++; j--; // some of available operators
    // j += 2; j -= 2;       // error: these operator are not available
    // std::ignore() = j[1]; //        for bidirectional iterator
}
}}

===References===
{{ref std c++23}}
{{ref std|title=Class template adjacent_view::iterator|id=range.adjacent.iterator|section=26.7.25.3}}
{{ref std end}}

===See also===
{{dsc begin}}
&lt;!--
{{dsc inc|cpp/ranges/adjacent_transform_view/dsc iterator}}
--&gt;
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
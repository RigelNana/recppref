{{cpp/ranges/adjacent_view/title|size}}
{{cpp/ranges/adjacent_view/navbar}}

{{dcl begin}}
{{dcl|since=c++23|
constexpr auto size() requires ranges::sized_range&lt;V&gt;;
}}
{{dcl|since=c++23|
constexpr auto size() const requires ranges::sized_range&lt;const V&gt;;
}}
{{dcl end}}

Returns the number of elements.

Let {{rlpi|/#Data members|base_}} be the underlying view. Equivalent to:
{{source|1=
using SizeType = decltype(ranges::size(base_));
using CommonType = ranges::common_type_t&lt;SizeType, std::size_t&gt;;
auto size = static_cast&lt;CommonType&gt;(ranges::size(base_));
size -= std::min&lt;CommonType&gt;(size, N - 1);
return static_cast&lt;SizeType&gt;(size);
}}

===Parameters===
(none)

===Return value===
The number of elements, may be {{c|0}} if {{c|ranges::size(base_)}} is less than {{c|N}}.

===Example===
{{example
|code=
#include &lt;ranges&gt;

int main()
{
    constexpr static auto v = {1, 2, 3, 4, 5, 6};

    constexpr int width1 {4};
    constexpr auto view1 {std::views::adjacent&lt;width1&gt;(v)};
    static_assert(view1.size() == 3);
    static_assert(view1.size() == (v.size() - width1 + 1));

    constexpr int width2 {8};
    constexpr auto view2 {std::views::adjacent&lt;width2&gt;(v)};
    // window is too wide, so view2 has no elements:
    static_assert(view2.size() == 0);
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc size}}
{{dsc inc|cpp/ranges/dsc ssize}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
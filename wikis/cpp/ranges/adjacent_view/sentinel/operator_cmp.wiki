{{title|1= operator=={{small|(ranges::adjacent_view::''iterator'', ranges::adjacent_view::''sentinel'')}}}}
{{cpp/ranges/adjacent_view/navbar}}

{{dcl begin}}
{{dcl|since=c++23|1=
template&lt; bool OtherConst &gt;
    requires std::sentinel_for&lt;ranges::sentinel_t&lt;Base&gt;,
                               ranges::iterator_t&lt;/*maybe-const*/&lt;OtherConst, V&gt;&gt;&gt;
friend constexpr bool operator==( const /*iterator*/&lt;OtherConst&gt;&amp; x,
                                  const /*sentinel*/&amp; y );
}}
{{dcl end}}

Compares the underlying iterator of {{c|x}} with the underlying sentinel of {{c|y}}.

Equivalent to: {{c|1=return x.current_.back() == y.end_}}, where {{lti|cpp/ranges/adjacent_view/iterator#Data members|current_}} is underlying array of iterators in {{c|x}}, and {{rlpi|/#Data members|end_}} is the underlying sentinel in {{c|y}}.

{{cpp/hidden friend|{{tt|adjacent_view::''sentinel''&lt;Const&gt;}}}}

{{cpp/note synthesized eq}}

===Parameters===
{{par begin}}
{{par|x|[[cpp/ranges/adjacent_view/iterator|iterator]] to compare}}
{{par|y|{{rlp|/|sentinel}} to compare}}
{{par end}}

===Return value===
{{c|true}} if the underlying iterator stored in {{c|x}} is the end iterator.

===Example===
{{example
|code=
|output=
}}

{{langlinks|de|es|ja|ru|zh}}
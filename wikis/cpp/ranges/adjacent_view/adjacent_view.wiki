{{cpp/ranges/adjacent_view/title|adjacent_view}}
{{cpp/ranges/adjacent_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|1=
adjacent_view() requires std::default_initializable&lt;V&gt; = default;&lt;!--P2325R3--&gt;
}}
{{dcl|num=2|since=c++23|1=
constexpr explicit adjacent_view( V base );
}}
{{dcl end}}

Constructs an {{rlpt|/|adjacent_view}}.

@1@ Default constructor. [[cpp/language/value initialization|Value-initializes]] the underlying view.

@2@ Initializes the underlying view {{rlpi|/#Data members|base_}} with {{c|std::move(base)}}.

===Parameters===
{{par begin}}
{{par|base|the underlying view}}
{{par end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string&gt;
#include &lt;tuple&gt;

template&lt;class... Ts&gt;
void print(std::tuple&lt;Ts...&gt; const&amp; tuple)
{
    std::apply([&amp;](auto&amp;&amp; arg, auto&amp;&amp;... args)
    {
        std::cout &lt;&lt; arg;
        ((std::cout &lt;&lt; args), ...);
    }, tuple);
    std::cout &lt;&lt; '\n';
}

int main()
{
    const std::string v{"ABCDEF"};
    constexpr int window_size{4};

    std::cout &lt;&lt; "v: " &lt;&lt; v &lt;&lt; '\n';

    auto view = std::views::adjacent&lt;window_size&gt;(v); // overload (2)

    for (auto const&amp; tuple : view)
        print(tuple);
}
|output=
v: ABCDEF
ABCD
BCDE
CDEF
}}

{{langlinks|es|ja|ru|zh}}
{{title|iter_swap{{small|(ranges::adjacent_view::''iterator'')}}}}
{{cpp/ranges/adjacent_view/navbar}}

{{dcl begin}}
{{dcl|since=c++23|
friend constexpr void iter_swap( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    noexcept( /*see below*/ )
        requires std::indirectly_swappable&lt;ranges::iterator_t&lt;Base&gt;&gt;;
}}
{{dcl end}}

Swaps the objects pointed to by two underlying arrays of iterators (denoted as {{rlpi|/#Data members|current_}}).

Equivalent to: 
{{source|1=
for (std::size_t i{}; i != N; ++i)
{
    std::ranges::iter_swap(x.current_[i], y.current_[i]);
}
}}

The behavior is undefined if before the operation none of the iterators in {{c|x.current_}} is equal to an iterator in {{c|y.current_}}.

{{cpp/hidden friend|{{tt|adjacent_view::''iterator''&lt;Const&gt;}}}}

===Parameters===
{{par begin}}
{{par|x, y|iterators}}
{{par end}}

===Return value===
(none)

===Exceptions===
{{noexcept|std::ranges::iter_swap(declval&lt;ranges::iterator_t&lt;Base&gt;&gt;(),
                                declval&lt;ranges::iterator_t&lt;Base&gt;&gt;())}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/ranges/dsc iter swap}}
{{dsc inc|cpp/algorithm/dsc iter swap}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
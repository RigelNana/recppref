{{title|iter_move{{small|(ranges::adjacent_view::''iterator'')}}}}
{{cpp/ranges/adjacent_view/navbar}}

{{dcl begin}}
{{dcl|since=c++23|
friend constexpr auto iter_move( const /*iterator*/&amp; i )
    noexcept(/* see description */);
}}
{{dcl end}}

Returns the result of applying {{lc|ranges::iter_move}} to the underlying iterators.

Equivalent to: {{c|return /*tuple-transform*/(ranges::iter_move, i.current_);}}, where {{rlpi|/#Data members|current_}} is an underlying array of iterators.

{{cpp/hidden friend|{{tt|adjacent_view::''iterator''&lt;Const&gt;}}}}

===Parameters===
{{par begin}}
{{par|i|iterator}}
{{par end}}

===Return value===
The result of applying {{lc|ranges::iter_move}} to the underlying iterators.

===Exceptions===
{{noexcept|
  noexcept(ranges::iter_move(declval&lt;const ranges::iterator_t&lt;Base&gt;&amp;&gt;()))
  &amp;&amp;
  std::is_nothrow_move_constructible_v&lt;ranges::range_rvalue_reference_t&lt;Base&gt;&gt;
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/ranges/dsc iter move}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
{{cpp/ranges/adjacent_view/iterator/title|1=operator++,--,+=,-=}}
{{cpp/ranges/adjacent_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr /*iterator*/&amp; operator++();
}}
{{dcl|num=2|since=c++23|
constexpr /*iterator*/ operator++( int );
}}
{{dcl|num=3|since=c++23|
constexpr /*iterator*/&amp; operator--()
    requires ranges::bidirectional_range&lt;Base&gt;;
}}
{{dcl|num=4|since=c++23|
constexpr /*iterator*/ operator--( int )
    requires ranges::bidirectional_range&lt;Base&gt;;
}}
{{dcl|num=5|since=c++23|1=
constexpr /*iterator*/&amp; operator+=( difference_type n )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=6|since=c++23|1=
constexpr /*iterator*/&amp; operator-=( difference_type n )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl end}}

Increments or decrements the iterator.

Let {{rlpi|/#Data members|current_}} be an underlying array of iterators.

@1@ Equivalent to:
{{source|1=
for (auto&amp; i : current_)
    i = std::ranges::next(i);
return *this;
}}
The behavior is undefined if before the call the {{c|current_.back()}} is not incrementable.

@2@ Equivalent to:
{{source|1=
auto tmp = *this;
++*this;
return tmp;
}}

@3@ Equivalent to:
{{source|1=
for (auto&amp; i : current_)
    i = std::ranges::prev(i);
return *this;
}}
The behavior is undefined if before the call the {{c|current_.front()}} is not decrementable.

@4@ Equivalent to:
{{source|1=
auto tmp = *this;
--*this;
return tmp;
}}

@5@ Equivalent to:
{{source|1=
for (auto&amp; i : current_)
    i = i + n;
return *this;
}}
The behavior is undefined if before the call the {{c|current_.back() + n}} does not have well-defined behavior.

@6@ Equivalent to:
{{source|1=
for (auto&amp; i : current_)
    i = i - n;
return *this;
}}
The behavior is undefined if before the call the {{c|current_.front() - n}} does not have well-defined behavior.

===Parameters===
{{par begin}}
{{par|n|position relative to current location}}
{{par end}}

===Return value===
@1,3,5,6@ {{c|*this}}
@2,4@ A copy of {{c|*this}} that was made before the change.

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;list&gt;
#include &lt;ranges&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;

int main()
{
    {
        auto v = std::vector{0, 1, 2, 3, 4, 5};
        auto i = (v {{!}} std::views::pairwise).begin();
        assert((*i == std::pair{0, 1}));
        ++i;                            // overload (1)
        assert((*i == std::pair{1, 2}));
        --i;                            // overload (3)
        assert((*i == std::pair{0, 1}));
        i += 2;                         // overload (5)
        assert((*i == std::pair{2, 3}));
        i -= 2;                         // overload (6)
        assert((*i == std::pair{0, 1}));
    }
    {
        auto v = std::list{0, 1, 2, 3, 4, 5};
        auto i = (v {{!}} std::views::pairwise).begin();
        assert((*i == std::pair{0, 1}));
        ++i;                            // overload (1)
        assert((*i == std::pair{1, 2}));
        --i;                            // overload (3)
        assert((*i == std::pair{0, 1}));
//      i += 2; // Error: v is not a random_access_range; overload (5)
//      i -= 2; // Error: v is not a random_access_range; overload (6)
    }
}
}}

===See also===
{{dsc begin}}
{{dsc mem fun|cpp/ranges/adjacent_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|performs iterator arithmetic|notes={{mark c++23}}}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
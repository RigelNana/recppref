{{cpp/ranges/title|data}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl header|iterator}}
{{dcl|notes={{mark custpt}}|since=c++20|1=
inline namespace /* unspecified */ {
    inline constexpr /* unspecified */ data = /* unspecified */;
}
}}

{{dcl h|Call signature}}
{{dcl|since=c++20|1=
template&lt; class T &gt;
    requires /* see below */
constexpr std::remove_reference_t&lt;
    ranges::range_reference_t&lt;T&gt;&gt;* data( T&amp;&amp; t );
}}
{{dcl end}}

Returns a pointer to the first element of a contiguous range.

If {{tt|T}} is an array type and {{c/core|std::remove_all_extents_t&lt;std::remove_reference_t&lt;T&gt;&gt;}} is incomplete, then the call to {{tt|ranges::data}} is ill-formed, no diagnostic required.

If the argument is an lvalue or {{c|ranges::enable_borrowed_range&lt;std::remove_cv_t&lt;T&gt;&gt;}} is {{c|true}}, a call to {{tt|ranges::data}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to:
# {{rev inl|until=c++23|{{box|{{lti|cpp/standard library/decay-copy}}{{c/core|(t.data())}}}}}}{{rev inl|since=c++23|{{c|auto(t.data())}}}}, if that expression is valid and its type is a pointer to an object type.
# Otherwise, {{c|std::to_address(ranges::begin(t))}}, if the expression {{c|ranges::begin(t)}} is valid and its type models {{lc|std::contiguous_iterator}}.

In all other cases, a call to {{tt|ranges::data}} is ill-formed, which can result in [[cpp/language/sfinae|substitution failure]] when {{c|ranges::data(e)}} appears in the immediate context of a template instantiation.

{{cpp/ranges/cpo}}

===Notes===
If the argument is an rvalue (i.e. {{tt|T}} is an object type) and {{c|ranges::enable_borrowed_range&lt;std::remove_cv_t&lt;T&gt;&gt;}} is {{c|false}}, the call to {{tt|ranges::data}} is ill-formed, which also results in substitution failure.

If {{c|ranges::data(e)}} is valid for an expression {{c|e}}, then it returns a pointer to an object.

{{cpp/ranges/prv}}

===Example===
{{example
|code=
#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string&gt;

int main()
{
    std::string s{"Hello world!\n"};
    
    char a[20]; // storage for a C-style string
    std::strcpy(a, std::ranges::data(s));
    // [data(s), data(s) + size(s)] is guaranteed to be an NTBS
    
    std::cout &lt;&lt; a;
}
|output=
Hello world!
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc cdata}}
{{dsc inc|cpp/ranges/dsc begin}}
{{dsc inc|cpp/iterator/dsc data}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
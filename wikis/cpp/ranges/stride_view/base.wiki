{{cpp/ranges/stride_view/title|base}}
{{cpp/ranges/stride_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr V base() const&amp; requires std::copy_constructible&lt;V&gt;;
}}
{{dcl|num=2|since=c++23|
constexpr V base() &amp;&amp;;
}}
{{dcl end}}

Returns a copy of the underlying view {{rlpi|/#Data members|base_}}.

@1@ Copy constructs the result from the underlying view. Equivalent to: {{c|return base_;}}
@2@ Move constructs the result from the underlying view. Equivalent to: {{c|return std::move(base_);}}

===Parameters===
(none)

===Return value===
A copy of the underlying view.

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;

void print(std::ranges::viewable_range auto&amp;&amp; v)
{
    std::ranges::for_each(v, [](auto x) { std::cout &lt;&lt; ' ' &lt;&lt; x; }).fun('\n');
};

int main()
{
    const auto source = {1, 2, 3, 4, 5};

    auto view1 = std::views::stride(source, 1337);
    print(view1.base());

    auto view2 = source {{!}} std::views::reverse {{!}} std::views::stride(42);
    print(view2.base());
}
|output=&lt;nowiki/&gt;
 1 2 3 4 5
 5 4 3 2 1
}}

{{langlinks|es|ja|ru|zh}}
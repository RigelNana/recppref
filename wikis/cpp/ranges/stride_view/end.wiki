{{cpp/ranges/stride_view/title|end}}
{{cpp/ranges/stride_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
constexpr auto end() requires (!/*simple-view*/&lt;V&gt;);
}}
{{dcl|num=2|since=c++23|1=
constexpr auto end() const requires ranges::range&lt;const V&gt;
}}
{{dcl end}}

Returns an {{rlp|iterator}} or a {{rlp|sentinel}} representing the end of the {{rlpt|/|stride_view}}.

Let {{rlpi|/#Data members|base_}} and {{rlpi|/#Data members|stride_}} be the underlying data members.

@1@ Let {{c|Const}} be defined as {{c|1=using Const = false;}} and {{c|Base}} as {{c|1=using Base = V;}}.
@2@ Let {{c|Const}} be defined as {{c|1=using Const = true;}} and {{c|Base}} as {{c|1=using Base = const V;}}.

Equivalent to:
{{source|1=
if constexpr (ranges::common_range&lt;Base&gt; &amp;&amp;
              ranges::sized_range&lt;Base&gt; &amp;&amp;
              ranges::forward_range&lt;Base&gt;)
{
    auto missing = (stride_ - ranges::distance(base_) % stride_) % stride_;
    return iterator&lt;Const&gt;(this, ranges::end(base_), missing);
}
else if constexpr (ranges::common_range&lt;Base&gt; &amp;&amp;
                   !ranges::bidirectional_range&lt;Base&gt;)
{
    return iterator&lt;Const&gt;(this, ranges::end(base_));
}
else
{
    return std::default_sentinel;
}
}}

===Parameters===
(none)

===Return value===
An {{rlp|iterator}} to the element following the last element, if the underlying view {{c|V}} models {{lconcept|common_range}}. Otherwise, the {{lc|std::default_sentinel}} which compares equal to the end iterator.

===Notes===
{{c|stride_view&lt;V&gt;}} models {{lconcept|common_range}} whenever the underlying view {{c|V}} does.

===Example===
{{example
|code=
|output=
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|stride_view}}
{{dsc inc|cpp/ranges/dsc end}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
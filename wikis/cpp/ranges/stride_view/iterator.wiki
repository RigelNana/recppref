{{cpp/ranges/stride_view/title|''iterator''}}
{{cpp/ranges/stride_view/navbar}}

{{ddcl|since=c++23|notes={{mark expos}}|
template&lt; bool Const &gt;
class /*iterator*/
}}

The return type of {{rlpt|begin|stride_view::begin}}, and of {{rlpt|end|stride_view::end}} when the underlying view {{tt|V}} is a {{lconcept|common_range}}.

The type {{c|/*iterator*/&lt;true&gt;}} is returned by the const-qualified overloads. The type {{c|/*iterator*/&lt;false&gt;}} is returned by the non-const-qualified overloads.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc expos mem type|Parent|private=yes|{{cpp/ranges/maybe-const|ranges::stride_view}}}}
{{dsc expos mem type|Base|private=yes|{{cpp/ranges/maybe-const|V}}}}
{{dsc|{{tt|difference_type}}|{{c/core|ranges::range_difference_t&lt;Base&gt;}}}}
{{dsc|{{tt|value_type}}|{{c/core|ranges::range_value_t&lt;Base&gt;}}}}
{{dsc|{{tt|iterator_concept}}|
* {{lc|std::random_access_iterator_tag}}, if {{tti|Base}} models {{lconcept|random_access_range}}. Otherwise,
* {{lc|std::bidirectional_iterator_tag}}, if {{tti|Base}} models {{lconcept|bidirectional_range}}. Otherwise,
* {{lc|std::forward_iterator_tag}}, if {{tti|Base}} models {{lconcept|forward_range}}. Otherwise,
* {{lc|std::input_iterator_tag}}.}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{small|(present only if {{tti|Base}} models&lt;br&gt;{{lconcept|forward_range}})}}|Let {{tti|C}} denote the type {{c/core|iterator_traits&lt;iterator_t&lt;Base&gt;&gt;::iterator_category}}.
* {{lc|std::random_access_iterator_tag}}, if {{tti|C}} models {{c/core|std::derived_from&lt;std::random_access_iterator_tag&gt;}}.
* {{tti|C}} otherwise.}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member object|Definition}}
{{dsc expos mem obj|current_|private=yes|{{c|ranges::iterator_t&lt;Base&gt;}}, holds an iterator to the current element.}}
{{dsc expos mem obj|end_|private=yes|{{c|ranges::sentinel_t&lt;Base&gt;}}, holds a sentinel to the end.}}
{{dsc expos mem obj|stride_|private=yes|{{c|ranges::range_difference_t&lt;Base&gt;}}, holds the stride value.}}
{{dsc expos mem obj|missing_|private=yes|{{c|ranges::range_difference_t&lt;Base&gt;}}, usually holds the result of {{c|ranges::advance(current_, stride_, end_)}}.}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/stride_view/iterator/iterator|constructs an iterator}}
{{dsc mem fun|cpp/ranges/stride_view/iterator/base|returns an iterator to current element}}
{{dsc mem fun|cpp/ranges/stride_view/iterator/operator*|accesses the element}}
{{dsc mem fun|cpp/ranges/stride_view/iterator/operator_at|title=operator[]|accesses an element by index}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|stride_view}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc fun|cpp/ranges/stride_view/iterator/operator_cmp|title=operator==&lt;br&gt;operator&lt;&lt;br&gt;operator&gt;&lt;br&gt;operator&lt;=&lt;br&gt;operator&gt;=&lt;br&gt;operator&lt;=&gt;|compares the underlying iterators|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/stride_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|performs iterator arithmetic|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/stride_view/iterator/iter_move|casts the result of dereferencing the underlying iterator to its associated rvalue reference type|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/stride_view/iterator/iter_swap|swaps underlying pointed-to elements|notes={{mark c++23}}}}
{{dsc end}}

===Example===
{{example}}

===References===
{{ref std c++23}}
{{ref std|title=Class template stride_view::iterator|id=range.stride.iterator|section=26.7.31.3}}
{{ref std end}}

===See also===
{{dsc begin}}&lt;!--
{{dsc inc|cpp/ranges/slide_view/dsc iterator}}--&gt;
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
{{cpp/ranges/stride_view/title|begin}}
{{cpp/ranges/stride_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr auto begin() requires (!__simple_view&lt;V&gt;);
}}
{{dcl|num=2|since=c++23|
constexpr auto begin() const requires ranges::range&lt;const V&gt;;
}}
{{dcl end}}

Returns an {{rlp|iterator}} to the first element of the {{tt|stride_view}}.

@1@ Equivalent to {{c|return iterator&lt;false&gt;(this, ranges::begin(base_));}}.
@2@ Equivalent to {{c|return iterator&lt;true&gt;(this, ranges::begin(base_));}}.

Overload {{v|1}} does not participate in overload resolution if {{c|V}} is a [[cpp/ranges#Helper_concepts|simple view]] (that is, if {{c|V}} and {{c|const V}} are views with the same iterator and sentinel types).

===Parameters===
(none)

===Return value===
{{rlp|Iterator}} to the first element of the view.

===Example===
{{example
|A link to test: [https://godbolt.org/z/36zTEETx1 Compiler Explorer].
|code=
#include &lt;print&gt;
#include &lt;ranges&gt;

int main()
{
    constexpr auto v = {'A', 'B', 'C'};
    const auto x = v {{!}} std::views::stride(2);
    const auto y = v {{!}} std::views::reverse {{!}} std::views::stride(2);
    const auto z = v {{!}} std::views::stride(2) {{!}} std::views::reverse;
    std::println("{} {} {}", *x.begin(), *y.begin(), *z.begin());
}
|output=A C C
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc end|stride_view}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
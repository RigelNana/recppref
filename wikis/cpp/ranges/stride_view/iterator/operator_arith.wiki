{{cpp/ranges/stride_view/iterator/title|1=operator++,--,+=,-=}}
{{cpp/ranges/stride_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr /*iterator*/&amp; operator++();
}}
{{dcl|num=2|since=c++23|
constexpr void operator++( int );
}}
{{dcl|num=3|since=c++23|
constexpr /*iterator*/ operator++( int )
    requires ranges::forward_range&lt;Base&gt;;
}}
{{dcl|num=4|since=c++23|
constexpr /*iterator*/&amp; operator--()
    requires ranges::bidirectional_range&lt;Base&gt;;
}}
{{dcl|num=5|since=c++23|
constexpr /*iterator*/ operator--( int )
    requires ranges::bidirectional_range&lt;Base&gt;;
}}
{{dcl|num=6|since=c++23|1=
constexpr /*iterator*/&amp; operator+=( difference_type n )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=7|since=c++23|1=
constexpr /*iterator*/&amp; operator-=( difference_type n )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl end}}

Increments or decrements the {{rlp|iterator}}.

Let {{rlpi|/#Data members|current_}}, {{rlpi|/#Data members|end_}}, {{rlpi|/#Data members|stride_}}, and {{rlpi|/#Data members|missing_}} be the data members of the {{rlp|iterator}}.

@1@ Equivalent to
{{source|1=
missing_ = ranges::advance(current_, stride_, end_);
return *this
}}
&lt;!----&gt;
Before the call {{rlpi|/#Data members|current_}} should not be equal to {{rlpi|/#Data members|end_}}.

@2@ Equivalent to {{c|++*this;}}.

@3@ Equivalent to {{c|1=auto tmp = *this; ++*this; return tmp;}}.

@4@ Equivalent to
{{source|1=
ranges::advance(current_, missing_ - stride_);
missing_ = 0;
return *this;
}}

@5@ Equivalent to {{c|1=auto tmp = *this; --*this; return tmp;}}.

@6@ Equivalent to
{{source|1=
if (n &gt; 0)
{
    ranges::advance(current_, stride_ * (n - 1));
    missing_ = ranges::advance(current_, stride_, end_);
}
else if (n &lt; 0)
{
    ranges::advance(current_, stride_ * n + missing_);
    missing_ = 0;
}

return *this;
}}
&lt;!----&gt;
If {{c|n &gt; 0}}, then before the call to this function the {{c|ranges::distance(current_, end_)}} must be greater than {{c|stride_ * (n - 1)}}.
&lt;!----&gt;
Note that if {{c|n &lt; 0}}, the {{c|ranges::distance(current_, end_)}} is always greater than (non-positive) {{c|stride_ * (n - 1)}}.

@7@ Equivalent to {{c|1=return *this += -n;}}

===Parameters===
{{par begin}}
{{par|n|position relative to current location}}
{{par end}}

===Return value===
@1,4,6,7@ {{c|*this}}
@2@ (none)
@3,5@ a copy of {{c|*this}} that was made before the change

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc fun|cpp/ranges/stride_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|performs iterator arithmetic|notes={{mark c++23}}}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
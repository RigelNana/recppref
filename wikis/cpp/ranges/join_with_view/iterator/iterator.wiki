{{cpp/ranges/join_with_view/iterator/title|''iterator''}}
{{cpp/ranges/join_with_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|1=
/*iterator*/() = default;
}}
{{dcl|num=2|since=c++23|
constexpr /*iterator*/( /*iterator*/&lt;!Const&gt; i )
    requires Const &amp;&amp;
        std::convertible_to&lt;ranges::iterator_t&lt;V&gt;, /*OuterIter*/&gt; &amp;&amp;
        std::convertible_to&lt;ranges::iterator_t&lt;/*InnerRng*/&gt;,
                            /*InnerIter*/&gt; &amp;&amp;
        std::convertible_to&lt;ranges::iterator_t&lt;Pattern&gt;, /*PatternIter*/&gt;;
}}
{{dcla|num=3|since=c++23|expos=yes|
constexpr /*iterator*/( /*Parent*/&amp; parent, /*OuterIter*/ outer )
    requires std::forward_range&lt;/*Base*/&gt;;
}}
{{dcla|num=4|since=c++23|expos=yes|
constexpr explicit /*iterator*/( /*Parent*/ parent )
    requires (!std::forward_range&lt;/*Base*/&gt;);
}}
{{dcl end}}

Construct an iterator. Overloads {{v|3,4}} are called by {{ltf|cpp/ranges/join_with_view/begin}} and {{ltf|cpp/ranges/join_with_view/end}} of {{lc|ranges::join_with_view}}.

{|class="wikitable" style="text-align: center;"
!rowspan=2|{{nbsp}}Overload{{nbsp}}
!colspan=3|{{rlps|/#Data members}}
|-
!style="font-weight: normal;"|{{tti|parent_}}
!style="font-weight: normal;"|{{tti|outer_it_}}
!style="font-weight: normal;"|{{tti|inner_it_}}
|-
|{{v|1}}
|initialized with {{c|nullptr}}
|[[cpp/language/value initialization|value-initialized]]&lt;br&gt;{{small|(only if {{rlpsi|/#Base}} models {{lconcept|forward_range}})}}
|rowspan=4|{{nbsp}}[[cpp/language/default initialization|default-initialized]]{{nbsp}}
|-
|{{v|2}}
|initialized with {{box|{{c/core|i.}}{{rlpsi|/#parent_}}}}
|{{nbsp}}initialized with {{box|{{c/core|std::move(i.}}{{rlpsi|/#outer_it_}}}}{{nbsp}}&lt;br&gt;{{small|(only if {{rlpsi|/#Base}} models {{lconcept|forward_range}})}}
|-
|{{v|3}}
|rowspan=2|initialized with&lt;br&gt;{{nbsp}}{{c|std::addressof(parent)}}{{nbsp}}
|initialized with {{c|std::move(outer)}}
|-
|{{v|4}}
|{{n/a}}
|}

@2@ After initializing the data members, equivalent to {{box|
{{c/core|if (i.}}{{rlpsi|/#inner_it_}}{{sep}}{{c/core|1=.index() == 0)}}&lt;br&gt;
{{nbspt|4}}{{rlpsi|/#inner_it_}}{{sep}}{{c/core|.template emplace&lt;0&gt;(std::get&lt;0&gt;(std::move(i.}}{{rlpsi|/#inner_it_}}{{sep}}{{c/core|)));}}&lt;br&gt;
{{c/core|else}}&lt;br&gt;
{{nbspt|4}}{{rlpsi|/#inner_it_}}{{sep}}{{c/core|.template emplace&lt;1&gt;(std::get&lt;1&gt;(std::move(i.}}{{rlpsi|/#inner_it_}}{{sep}}{{c/core|)));}}
}}.

@3,4@ After initializing the data members, adjust the {{rlp|/|outer iterator}} as if the {{rlp|/|inner iterator}} was incremented by {{rlpf|operator arith|operator++}}.

===Parameters===
{{par begin}}
{{par|i|a mutable iterator}}
{{par|parent|a {{lc|std::ranges::join_with_view}} object}}
{{par|outer|an iterator into the underlying range of {{c|parent}}}}
{{par end}}

===Example===
{{example}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
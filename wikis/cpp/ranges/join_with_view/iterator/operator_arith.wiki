{{cpp/ranges/join_with_view/iterator/title|operator++,--}}
{{cpp/ranges/join_with_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr /*iterator*/&amp; operator++();
}}
{{dcl|num=2|since=c++23|
constexpr void operator++( int );
}}
{{dcl|num=3|since=c++23|
constexpr /*iterator*/ operator++( int )
    requires std::is_reference_v&lt;/*InnerBase*/&gt; &amp;&amp;
             ranges::forward_range&lt;/*Base*/&gt; &amp;&amp;
             ranges::forward_range&lt;/*InnerBase*/&gt;;
}}
{{dcl|num=4|since=c++23|
constexpr /*iterator*/&amp; operator--()
    requires std::is_reference_v&lt;/*InnerBase*/&gt; &amp;&amp;
             ranges::bidirectional_range&lt;/*Base*/&gt; &amp;&amp;
             ranges::bidirectional_range&lt;/*InnerBase*/&gt; &amp;&amp;
             ranges::common_range&lt;/*InnerBase*/&gt; &amp;&amp;
             ranges::bidirectional_range&lt;/*PatternBase*/&gt; &amp;&amp;
             ranges::common_range&lt;/*PatternBase*/&gt;;
}}
{{dcl|num=5|since=c++23|
constexpr /*iterator*/ operator--( int )
    requires std::is_reference_v&lt;/*InnerBase*/&gt; &amp;&amp;
             ranges::bidirectional_range&lt;/*Base*/&gt; &amp;&amp;
             ranges::bidirectional_range&lt;/*InnerBase*/&gt; &amp;&amp;
             ranges::common_range&lt;/*InnerBase*/&gt; &amp;&amp;
             ranges::bidirectional_range&lt;/*PatternBase*/&gt; &amp;&amp;
             ranges::common_range&lt;/*PatternBase*/&gt;;
}}
{{dcl end}}

Increments or decrements the iterator.

@1@ Increments the {{rlp|/|inner iterator}} as if by {{box|{{c/core|std::visit([](auto&amp; it){ ++it; },}}{{nbspt}}{{rlpsi|/#inner_it_}}{{sep}}{{c/core|);}}}}.
@@ After that, adjusts the inner and outer iterators as follows:
* If the incremented inner iterator is the past-the-end iterator of the pattern range, it is set to an iterator to the beginning of the next inner range.
* If the incremented inner iterator is the past-the-end iterator of an inner range, the outer iterator is incremented. Then:
:* If the incremented outer iterator is not the past-the-end iterator of the outer range, the inner iterator is set to an iterator to the beginning of the pattern range.
:* Otherwise, if {{box|{{c/core|std::is_reference_v&lt;}}{{rlpsi|/#InnerBase}}{{sep}}{{c/core|ï»¿&gt;}}}} is {{c|true}}, the inner iterator is set to a pattern iterator holding a [[cpp/iterator#Dereferenceability and validity|singular value]].
* Repeats the operations above until either the inner iterator is not a past-the-end iterator, or the outer iterator is a past-the-end iterator.

@2@ Equivalent to {{c|++*this;}}.

@3@ Equivalent to {{c multi|1=auto tmp = *this;|2=++*this;|3=return tmp;}}.

@4@ If the outer iterator is the past-the-end iterator of the outer range, decrements it and sets the inner iterator to the past-the-end iterator of the last inner range, otherwise do nothing.
@@ After that, adjusts the inner and outer iterators as follows:
* If the inner iterator refers to the beginning of an inner range, it is set to the past-the-end iterator of the pattern range.
* If the inner iterator refers to the beginning of the pattern range, the outer iterator is decremented, and the inner iterator is set to the past-the-end iterator of the previous inner range.
* Repeats the operations above until the inner iterator does not refer to the beginning of any range.
@@ Finally, decrements the inner iterator as if by {{box|{{c/core|std::visit([](auto&amp; it){ --it; },}}{{nbspt}}{{rlpsi|/#inner_it_}}{{sep}}{{c/core|);}}}}.

@5@ Equivalent to {{c multi|1=auto tmp = *this;|2=--*this;|3=return tmp;}}.

===Return value===
@1,4@ {{c|*this}}
@3,5@ A copy of {{c|*this}} that was made before the change.

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/ranges/join_with_view/title|''iterator''}}
{{cpp/ranges/join_with_view/navbar}}

{{dcl begin}}
{{dcla|expos=yes|
template&lt; bool Const &gt;
class /*iterator*/
}}
{{dcl end}}

{{c/core|ranges::join_with_view&lt;V, Pattern&gt;::}}{{tti|iterator}} is the type of the iterators returned by {{rlpf|begin}} and {{rlpf|end}} of {{c/core|ranges::join_with_view&lt;V, Pattern&gt;}}.

The state of an iterator of this class is managed as if there are two nested iterators:
* an ''outer iterator'' into the parent range {{box|{{c/core|*}}{{lsi|#parent_}}}}
:* If {{tti|Base}} models {{lconcept|forward_range}}, it is {{box|{{lsi|#outer_it_}}}}.
:* Otherwise, it is {{box|{{lsi|#parent_}}{{sep}}{{c/core|-&gt;}}{{rlpsi|/#outer_it_}}}}.
* an ''inner iterator'' {{box|{{lsi|#inner_it_}}}} into the pattern range {{box|{{lsi|#parent_}}{{sep}}{{c/core|-&gt;}}{{rlpsi|/#pattern_}}}} or into a child range of the parent range

This iterator class has the invariant that the inner iterator is always dereferenceable unless the outer iterator is not dereferenceable. When an iterator is constructed, incremented or decremented, its outer iterator might be adjusted to hold the invariant.

===Template parameters===
{{par begin}}
{{par|Const|whether the iterator is a constant iterator}}
{{par end}}

===Nested types===
{{dsc begin}}
{{dsc h2|Exposition-only types}}
{{dsc hitem|Type|Definition}}
{{dsc expos mem type|Parent|id=Parent|{{cpp/ranges/maybe-const|ranges::join_with_view&lt;V, Pattern&gt;}}}}
{{dsc expos mem type|Base|id=Base|{{cpp/ranges/maybe-const|V}}}}
{{dsc expos mem type|InnerBase|id=InnerBase|{{c/core|ranges::range_reference_t&lt;}}{{tti|Base}}{{sep}}{{c/core|&gt;}}}}
{{dsc expos mem type|PatternBase|id=PatternBase|{{cpp/ranges/maybe-const|Pattern}}}}
{{dsc expos mem type|OuterIter|id=OuterIter|{{c/core|ranges::iterator_t&lt;}}{{tti|Base}}{{sep}}{{c/core|&gt;}}}}
{{dsc expos mem type|InnerIter|id=InnerIter|{{c/core|ranges::iterator_t&lt;}}{{tti|InnerBase}}{{sep}}{{c/core|&gt;}}}}
{{dsc expos mem type|PatternIter|id=PatternIter|{{c/core|ranges::iterator_t&lt;}}{{tti|PatternBase}}{{sep}}{{c/core|&gt;}}}}
{{dsc h2|Iterator property types}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|iterator_concept}}|an [[cpp/iterator/iterator tags|iterator tag]], [[#Determining the iterator concept|see below]]}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{mark cond present}}|an iterator tag, [[#Determining the iterator category|see below]]}}
{{dsc|{{tt|value_type}}|
{{c/core|std::common_type_t&lt;ranges::range_value_t&lt;}}{{tti|InnerBase}}{{sep}}{{c/core|&gt;,}}&lt;br&gt;
{{nbspt|19}}{{c/core|ranges::range_value_t&lt;}}{{tti|PatternBase}}{{sep}}{{c/core|&gt;&gt;}}}}
{{dsc|{{tt|difference_type}}|
{{c/core|std::common_type_t&lt;ranges::range_difference_t&lt;}}{{tti|Base}}{{sep}}{{c/core|&gt;,}}&lt;br&gt;
{{nbspt|19}}{{c/core|ranges::range_difference_t&lt;}}{{tti|InnerBase}}{{sep}}{{c/core|&gt;,}}&lt;br&gt;
{{nbspt|19}}{{c/core|ranges::range_difference_t&lt;}}{{tti|PatternBase}}{{sep}}{{c/core|&gt;&gt;}}}}
{{dsc end}}

====Determining the iterator concept====
{{tt|iterator_concept}} is defined as follows:
* If all following conditions are satisfied, {{tt|iterator_concept}} denotes {{lc|std::bidirectional_iterator_tag}}:
** {{box|{{c/core|std::is_reference_v&lt;}}{{tti|InnerBase}}{{sep}}{{c/core|&gt;}}}} is {{c|true}}.
** {{tti|Base}} models {{lconcept|bidirectional_range}}.
** {{tti|InnerBase}} and {{tti|PatternBase}} each model {{lconcept|common_range}}.
* Otherwise, if all following conditions are satisfied, {{tt|iterator_concept}} denotes {{lc|std::forward_iterator_tag}}:
** {{box|{{c/core|std::is_reference_v&lt;}}{{tti|InnerBase}}{{sep}}{{c/core|&gt;}}}} is {{c|true}}.
** {{tti|Base}} and {{tti|InnerBase}} each model {{lconcept|forward_range}}.
* Otherwise, {{tt|iterator_concept}} denotes {{lc|std::input_iterator_tag}}.

====Determining the iterator category====
Given the following types:
* Let {{tt|OuterC}} be {{c/core|std::iterator_traits&lt;}}{{tti|OuterIter}}{{sep}}{{c/core|&gt;::iterator_category}}.
* Let {{tt|InnerC}} be {{c/core|std::iterator_traits&lt;}}{{tti|InnerIter}}{{sep}}{{c/core|&gt;::iterator_category}}.
* Let {{tt|PatternC}} be {{c/core|std::iterator_traits&lt;}}{{tti|PatternIter}}{{sep}}{{c/core|&gt;::iterator_category}}.

{{tt|iterator_category}} is defined if and only if {{box|{{c/core|std::is_reference_v&lt;}}{{tti|InnerBase}}{{sep}}{{c/core|&gt;}}}} is {{c|true}}, and {{tti|Base}} and {{tti|InnerBase}} each model {{lconcept|forward_range}}. In this case, it is defined as follows:
* If {{box|{{c/core|std::is_reference_v&lt;std::common_reference_t&lt;ranges::range_reference_t&lt;}}{{tti|InnerBase}}{{sep}}{{c/core|&gt;,}}&lt;br&gt;{{nbspt|44}}{{c/core|ranges::range_reference_t&lt;}}{{tti|PatternBase}}{{sep}}{{c/core|&gt;&gt;}}}} is {{c|false}}, {{tt|iterator_category}} denotes {{lc|std::input_iterator_tag}}.
* Otherwise, if all following conditions are satisfied, {{tt|iterator_category}} denotes {{lc|std::bidirectional_iterator_tag}}:
** {{tt|OuterC}}, {{tt|InnerC}}, and {{tt|PatternC}} each model {{c|std::derived_from&lt;std::bidirectional_iterator_tag&gt;}}.
** {{tti|InnerBase}} and {{tti|PatternBase}} each model {{lconcept|common_range}}.
* Otherwise, if {{tt|OuterC}}, {{tt|InnerC}}, and {{tt|PatternC}} each model {{c|std::derived_from&lt;std::forward_iterator_tag&gt;}}, {{tt|iterator_category}} denotes {{lc|std::forward_iterator_tag}}.
* Otherwise, {{tt|iterator_category}} denotes {{lc|std::input_iterator_tag}}.

===Data members===
{{dsc begin}}
{{dsc hitem|Member|Description}}
{{dsc expos mem obj|spec={{tti|Parent}}{{sep}}{{c/core|*}}|parent_|id=parent|the pointer to the parent {{rlpt|/|join_with_view}}}}
{{dsc expos mem obj|spec={{tti|OuterIter}}|outer_it_|id=outer_it|maybe=(present only if {{tti|Base}} models {{lconcept|forward_range}})|the outer iterator}}
{{dsc expos mem obj|spec={{c/core|std::variant&lt;}}{{tti|PatternIter}}{{sep}}{{c/core|,}}{{nbspt}}{{tti|InnerIter}}{{sep}}{{c/core|&gt;}}|inner_it_|id=inner_it|the inner iterator}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/join_with_view/iterator/iterator|constructs an iterator}}
{{dsc mem fun|cpp/ranges/join_with_view/iterator/operator*|title=operator*|accesses the element}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|join_with_view}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc fun|cpp/ranges/join_with_view/iterator/operator cmp|title=operator==|compares the underlying iterators|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/join_with_view/iterator/iter_move|casts the result of dereferencing the underlying iterator to its associated rvalue reference type|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/join_with_view/iterator/iter_swap|swaps the objects pointed to by two underlying iterators|notes={{mark c++23}}}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/ranges/title|rbegin}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl header|iterator}}
{{dcl|notes={{mark custpt}}|since=c++20|1=
inline namespace /* unspecified */ {
    inline constexpr /* unspecified */ rbegin = /* unspecified */;
}
}}
{{dcl h|Call signature}}
{{dcl|since=c++20|1=
template&lt; class T &gt;
    requires /* see below */
constexpr std::input_or_output_iterator auto rbegin( T&amp;&amp; t );
}}
{{dcl end}}

Returns an iterator to the last element of the argument.

{{image|range-rbegin-rend.svg}}

If {{tt|T}} is an array type and {{c/core|std::remove_all_extents_t&lt;std::remove_reference_t&lt;T&gt;&gt;}} is incomplete, then the call to {{tt|ranges::rbegin}} is ill-formed, no diagnostic required.

If the argument is an lvalue or {{c|ranges::enable_borrowed_range&lt;std::remove_cv_t&lt;T&gt;&gt;}} is {{c|true}}, then a call to {{tt|ranges::rbegin}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to:
# {{rev inl|until=c++23|{{box|{{lti|cpp/standard library/decay-copy}}{{c/core|(t.rbegin())}}}}}}{{rev inl|since=c++23|{{c|auto(t.rbegin())}}}}, if that expression is valid and its type models {{lc|std::input_or_output_iterator}}.
# Otherwise, {{rev inl|until=c++23|{{box|{{lti|cpp/standard library/decay-copy}}{{c/core|(rbegin(t))}}}}}}{{rev inl|since=c++23|{{c|auto(rbegin(t))}}}}, if {{tt|T}} is a class or enumeration type, that expression is valid and its type models {{lc|std::input_or_output_iterator}}, where the meaning of {{tt|rbegin}} is established as if by performing [[cpp/language/adl|argument-dependent lookup]] only.
# Otherwise, {{c|std::make_reverse_iterator(ranges::end(t))}} if both {{c|ranges::begin(t)}} and {{c|ranges::end(t)}} are valid expressions, have the same type, and that type models {{lc|std::bidirectional_iterator}}.

In all other cases, a call to {{tt|ranges::rbegin}} is ill-formed, which can result in [[cpp/language/sfinae|substitution failure]] when {{c|ranges::rbegin(t)}} appears in the immediate context of a template instantiation.

{{cpp/ranges/cpo}}

===Notes===
If the argument is an rvalue (i.e. {{tt|T}} is an object type) and {{c|ranges::enable_borrowed_range&lt;std::remove_cv_t&lt;T&gt;&gt;}} is {{c|false}}, the call to {{tt|ranges::rbegin}} is ill-formed, which also results in substitution failure.

The return type models {{lc|std::input_or_output_iterator}} in all cases.

{{cpp/ranges/prv}}

===Example===
{{example
|
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;span&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;int&gt; v = {3, 1, 4};
    auto vi = std::ranges::rbegin(v);
    std::cout &lt;&lt; *vi &lt;&lt; '\n';
    *vi = 42; // OK
    
    int a[] = {-5, 10, 15};
    auto ai = std::ranges::rbegin(a);
    std::cout &lt;&lt; *ai &lt;&lt; '\n';
    *ai = 42; // OK
    
    // auto x_x = std::ranges::rbegin(std::vector{6, 6, 6});
    // ill-formed: the argument is an rvalue (see Notes â†‘)
    
    auto si = std::ranges::rbegin(std::span{a}); // OK
    static_assert(std::ranges::enable_borrowed_range&lt;
        std::remove_cv_t&lt;decltype(std::span{a})&gt;&gt;);
    *si = 42; // OK
}
|output=
4
15
}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P2602R2|std=C++20|before=there's machinery to prohibit certain non-member {{tt|rbegin}} found by [[cpp/language/adl|ADL]]|after=removed such machinery}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc crbegin}}
{{dsc inc|cpp/iterator/dsc rbegin}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
{{title|operator+,-{{small|(ranges::elements_view::''iterator'')}}}}
{{cpp/ranges/elements_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++20|1=
friend constexpr /*iterator*/ operator+( const /*iterator*/&amp; i, difference_type n )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=2|since=c++20|1=
friend constexpr /*iterator*/ operator+( difference_type n, const /*iterator*/&amp; i )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=3|since=c++20|1=
friend constexpr /*iterator*/ operator-( const /*iterator*/&amp; i, difference_type n )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=4|since=c++20|1=
friend constexpr difference_type operator-( const /*iterator*/&amp; x,
                                            const /*iterator*/&amp; y )
    requires std::sized_sentinel_for&lt;ranges::iterator_t&lt;Base&gt;, ranges::iterator_t&lt;Base&gt;&gt;;
}}
{{dcl end}}

@1,2@ Returns the iterator {{c|i}} incremented by {{c|n}}.
@3@ Returns the iterator {{c|i}} decremented by {{c|n}}.
@4@ Returns the distance between {{c|x}} and {{c|y}}.

{{cpp/hidden friend|{{tt|elements_view::''iterator''&lt;Const&gt;}}|plural=yes}}

===Parameters===
{{par begin}}
{{par|i, x, y|the iterators}}
{{par|n|position relative to current location}}
{{par end}}

===Return value===
@1,2@ {{c|1=[&amp;]{ auto j = i; j += n; return j; }()}}
@3@ {{c|1=[&amp;]{ auto j = i; j -= n; return j; }()}}
@4@ {{c|x.base() - y.base()}}

===Example===
{{example}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3483|std=C++20|before={{tt|elements_view::iterator}}'s difference is overconstrained|after=requirement is relaxed}}
{{dr list end}}

{{langlinks|de|es|ja|ru|zh}}
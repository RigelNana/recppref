{{cpp/ranges/elements_view/iterator/title|operator[]}}
{{cpp/ranges/elements_view/navbar}}
{{ddcl|since=c++20|1=
constexpr decltype(auto) operator[]( difference_type n ) const
    requires ranges::random_access_range&lt;Base&gt;;
}}

Returns an element at specified relative location, as if by {{c|/*get-element*/(this-&gt;base() + n)}}, {{elements_view_iterator_get_element}}

===Parameters===
{{par begin}}
{{par|n|position relative to current location}}
{{par end}}

===Return value===
The element at displacement {{c|n}} relative to the current location.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string_view&gt;
#include &lt;tuple&gt;

int main()
{
    using T = std::tuple&lt;int, char, std::string_view&gt;;

    const auto il =
    {
        T{1, 'A', "α"},
        T{2, 'B', "β"},
        T{3, 'C', "γ"},
    };

    std::cout &lt;&lt; std::views::elements&lt;0&gt;(il)[1] &lt;&lt; ' '   // 2
              &lt;&lt; std::views::elements&lt;1&gt;(il)[1] &lt;&lt; ' '   // B
              &lt;&lt; std::views::elements&lt;2&gt;(il)[1] &lt;&lt; '\n'; // β
}
|output= 2 B β
}}

===See also===
{{dsc begin}}
{{dsc mem fun|cpp/ranges/elements_view/iterator/operator*|accesses the {{petty|{{tt|N}}{{sup|th}}}} tuple element|notes={{mark c++20}}}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
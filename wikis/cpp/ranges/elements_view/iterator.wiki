{{cpp/ranges/elements_view/title|''iterator''}}
{{cpp/ranges/elements_view/navbar}}
{{ddcl|notes={{mark expos}}|
template&lt; bool Const &gt;
class /*iterator*/;
}}

The return type of {{rlpt|begin|elements_view::begin}}, and of {{rlpt|end|elements_view::end}} when the underlying view is a {{lconcept|common_range}}.

The type {{c|/*iterator*/&lt;true&gt;}} is returned by the const-qualified overloads. The type {{c|/*iterator*/&lt;false&gt;}} is returned by the non-const-qualified overloads.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc expos mem type|Base|private=yes|{{c|const V}} if {{tt|Const}} is {{c|true}}, otherwise {{tt|V}}.}}
{{dsc|{{tt|iterator_concept}}|Denotes:
* {{lc|std::random_access_iterator_tag}}, if {{tti|Base}} models {{lconcept|random_access_range}}. Otherwise,
* {{lc|std::bidirectional_iterator_tag}}, if {{tti|Base}} models {{lconcept|bidirectional_range}}. Otherwise,
* {{lc|std::forward_iterator_tag}}, if {{tti|Base}} models {{lconcept|forward_range}}. Otherwise,
* {{lc|std::input_iterator_tag}}.}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{mark cond present}}|Not defined, if {{tti|Base}} does not model {{lconcept|forward_range}}. Otherwise,
* {{lc|std::input_iterator_tag}}, if {{c|std::get&lt;N&gt;(*current_)}} is an rvalue. Otherwise, let {{tti|C}} be the type {{c|std::iterator_traits&lt;std::iterator_t&lt;Base&gt;&gt;::iterator_category}}.
* {{lc|std::random_access_iterator_tag}}, if {{tti|C}} models {{c|std::derived_from&lt;std::random_access_iterator_tag&gt;}}. Otherwise,
* {{tti|C}}.}}
{{dsc|{{tt|value_type}}|{{c|std::remove_cvref_t&lt;std::tuple_element_t&lt;N, ranges::range_value_t&lt;Base&gt;&gt;&gt;}}}}
{{dsc|{{tt|difference_type}}|{{c|ranges::range_difference_t&lt;Base&gt;}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member object|Definition}}
{{dsc expos mem obj|current_|private=yes|An iterator of type {{c|ranges::iterator_t&lt;Base&gt;}} to current element of underlying sequence.}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/elements_view/iterator/iterator|constructs an iterator}}
{{dsc mem fun|cpp/ranges/elements_view/iterator/base|returns the underlying iterator}}
{{dsc mem fun|cpp/ranges/elements_view/iterator/operator*|accesses the N{{sup|th}} tuple element}}
{{dsc mem fun|cpp/ranges/elements_view/iterator/operator_at|title=operator[]|accesses an element by index}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|elements_view}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc fun|cpp/ranges/elements_view/iterator/operator_cmp|title=operator==&lt;br&gt;operator&lt;&lt;br&gt;operator&gt;&lt;br&gt;operator&lt;=&lt;br&gt;operator&gt;=&lt;br&gt;operator&lt;=&gt;|compares the underlying iterators|notes={{mark c++20}}}}
{{dsc fun|cpp/ranges/elements_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|performs iterator arithmetic|notes={{mark c++20}}}}
{{dsc end}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P2259R1|std=C++20|before=member {{tt|iterator_category}} is always defined|after=defined only if {{tti|Base}} models {{lconcept|forward_range}}}}
{{dr list item|wg=lwg|dr=3555|std=C++20|before=the definition of {{tt|iterator_concept}} ignores const|after=made to consider}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/transform_view/dsc iterator}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
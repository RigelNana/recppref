{{cpp/ranges/title|view_interface}}
{{cpp/ranges/view_interface/navbar}}
{{ddcl|header=ranges|since=c++20|1=
template&lt; class D &gt;
    requires std::is_class_v&lt;D&gt; &amp;&amp; std::same_as&lt;D, std::remove_cv_t&lt;D&gt;&gt;
class view_interface;
}}

{{tt|std::ranges::view_interface}} is a helper class template for defining a view interface.

{{tt|view_interface}} is typically used with [[cpp/language/crtp|CRTP]]:
{{source|1=
class my_view : public std::ranges::view_interface&lt;my_view&gt;
{
public:
    auto begin() const { /*...*/ }
    auto end() const { /*...*/ }
    // empty() is provided if begin() returns a forward iterator
    // and end() returns a sentinel for it.
};
}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/ranges/view_interface/dsc empty}}
{{dsc inc|cpp/ranges/view_interface/dsc cbegin}}
{{dsc inc|cpp/ranges/view_interface/dsc cend}}
{{dsc inc|cpp/ranges/view_interface/dsc operator bool}}
{{dsc inc|cpp/ranges/view_interface/dsc data}}
{{dsc inc|cpp/ranges/view_interface/dsc size}}
{{dsc inc|cpp/ranges/view_interface/dsc front}}
{{dsc inc|cpp/ranges/view_interface/dsc back}}
{{dsc inc|cpp/ranges/view_interface/dsc operator at}}
{{dsc end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;vector&gt;

template&lt;class T, class A&gt;
class VectorView : public std::ranges::view_interface&lt;VectorView&lt;T, A&gt;&gt;
{
public:
    VectorView() = default;

    VectorView(const std::vector&lt;T, A&gt;&amp; vec) :
        m_begin(vec.cbegin()), m_end(vec.cend())
    {}

    auto begin() const { return m_begin; }

    auto end() const { return m_end; }

private:
    typename std::vector&lt;T, A&gt;::const_iterator m_begin{}, m_end{};
};

int main()
{
    std::vector&lt;int&gt; v = {1, 4, 9, 16};

    VectorView view_over_v{v};

    // We can iterate with begin() and end().
    for (int n : view_over_v)
        std::cout &lt;&lt; n &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    // We get operator[] for free when inheriting from view_interface
    // since we satisfy the random_access_range concept.
    for (std::ptrdiff_t i = 0; i != view_over_v.size(); ++i)
        std::cout &lt;&lt; "v[" &lt;&lt; i &lt;&lt; "] = " &lt;&lt; view_over_v[i] &lt;&lt; '\n';
}
|output=
1 4 9 16
v[0] = 1
v[1] = 4
v[2] = 9
v[3] = 16
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3549|std=C++20|before={{tt|view_interface}} was required to be derived from {{tt|view_base}},&lt;br&gt;which sometimes required multiple {{tt|view_base}} subobjects in a view|after=inheritance removed}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc subrange}}
{{dsc end}}

{{langlinks|cs|de|es|fr|it|ja|ko|pl|pt|ru|zh}}
{{cpp/ranges/title|end}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl header|iterator}}
{{dcl|notes={{mark custpt}}|since=c++20|1=
inline namespace /* unspecified */ {
    inline constexpr /* unspecified */ end = /* unspecified */;
}
}}
{{dcl h|Call signature}}
{{dcl|since=c++20|1=
template&lt; class T &gt;
    requires /* see below */
constexpr std::sentinel_for&lt;ranges::iterator_t&lt;T&gt;&gt; auto end( T&amp;&amp; t );
}}
{{dcl end}}

Returns a sentinel indicating the end of a range.

{{image|range-begin-end.svg}}

If the argument is an lvalue or {{c|ranges::enable_borrowed_range&lt;std::remove_cv_t&lt;T&gt;&gt;}} is {{c|true}}, then a call to {{tt|ranges::end}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to:
# {{c|t + std::extent_v&lt;T&gt;}} if {{c|t}} has an array type of known bound.
#* If {{c/core|std::remove_all_extents_t&lt;std::remove_reference_t&lt;T&gt;&gt;}} is incomplete, then the call to {{tt|ranges::end}} is ill-formed, [[cpp/language/ndr|no diagnostic required]].
# Otherwise, {{rev inl|until=c++23|{{box|{{lti|cpp/standard library/decay-copy}}{{c/core|(t.end())}}}}}}{{rev inl|since=c++23|{{c|auto(t.end())}}}}, if that expression is valid, and its type models {{c|std::sentinel_for&lt;ranges::iterator_t&lt;T&gt;&gt;}}.
# Otherwise, {{rev inl|until=c++23|{{box|{{lti|cpp/standard library/decay-copy}}{{c/core|(end(t))}}}}}}{{rev inl|since=c++23|{{c|auto(end(t))}}}}, if {{tt|T}} is a class or enumeration type, that expression is valid and its converted type models {{c|std::sentinel_for&lt;ranges::iterator_t&lt;T&gt;&gt;}}, where the meaning of {{tt|end}} is established as if by performing [[cpp/language/adl|argument-dependent lookup]] only.

In all other cases, a call to {{tt|ranges::end}} is ill-formed, which can result in [[cpp/language/sfinae|substitution failure]] when the call to {{tt|ranges::end}} appears in the immediate context of a template instantiation.

{{cpp/ranges/cpo}}

===Notes===
If the argument is an rvalue (i.e. {{tt|T}} is an object type) and {{c|ranges::enable_borrowed_range&lt;std::remove_cv_t&lt;T&gt;&gt;}} is {{c|false}}, or if it is of an array type of unknown bound, the call to {{tt|ranges::end}} is ill-formed, which also results in substitution failure.

If {{c|ranges::end(std::forward&lt;T&gt;(t))}} is valid, then {{c/core|decltype(ranges::end(std::forward&lt;T&gt;(t)))}} and {{c/core|decltype(ranges::begin(std::forward&lt;T&gt;(t)))}} model {{lc|std::sentinel_for}} in all cases, while {{tt|T}} models {{lc|std::ranges::range}}.

{{cpp/ranges/prv}}

===Example===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;int&gt; vec{3, 1, 4};
    if (std::ranges::find(vec, 5) != std::ranges::end(vec))
        std::cout &lt;&lt; "found a 5 in vector vec!\n";
    
    int arr[]{5, 10, 15};
    if (std::ranges::find(arr, 5) != std::ranges::end(arr))
        std::cout &lt;&lt; "found a 5 in array arr!\n";
}
|output=
found a 5 in array arr!
}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P2602R2|std=C++20|before=there's machinery to prohibit certain non-member {{tt|end}} found by [[cpp/language/adl|ADL]]|after=removed such machinery}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc cend}}
{{dsc inc|cpp/ranges/dsc begin}}
{{dsc inc|cpp/iterator/dsc end}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
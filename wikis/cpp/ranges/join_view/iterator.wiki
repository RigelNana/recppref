{{cpp/ranges/join_view/title|''iterator''}}
{{cpp/ranges/join_view/navbar}}

{{ddcl|since=c++20|notes={{mark expos}}|
template&lt; bool Const &gt;
class /*iterator*/
}}

The return type of {{rlpt|begin|join_view::begin}}, and of {{rlpt|end|join_view::end}} when both the outer range {{tt|V}} and the inner range {{c/core|ranges::range_reference_t&lt;V&gt;}} satisfy {{lconcept|common_range}} and the parent {{tt|join_view}} is a {{lconcept|forward_range}}.

If {{tt|V}} is not a [[cpp/ranges#Helper concepts|simple view]] (e.g. if {{c/core|ranges::iterator_t&lt;const V&gt;}} is invalid or different from {{c/core|ranges::iterator_t&lt;V&gt;}}), {{tt|Const}} is true for iterators returned from the const overloads, and false otherwise. If {{tt|V}} is a simple view, {{tt|Const}} is true if and only if {{c/core|ranges::range_reference_t&lt;V&gt;}} is a reference.

===Member types===
{{dsc begin}}
{{dsc hitem|Member|Definition}}
{{dsc expos mem type|Parent|{{cpp/ranges/maybe-const|ranges::join_view&lt;V&gt;}}}}
{{dsc expos mem type|Base|{{cpp/ranges/maybe-const|V}}}}
{{dsc expos mem type|OuterIter|{{c/core|ranges::iterator_t&lt;Base&gt;}}}}
{{dsc expos mem type|InnerIter|{{c/core|ranges::iterator_t&lt;ranges::range_reference_t&lt;Base&gt;&gt;}}}}
{{dsc|{{tt|iterator_concept}}|
* {{lc|std::bidirectional_iterator_tag}}, if {{c/core|ranges::range_reference_t&lt;Base&gt;}} is a reference type, and {{tti|Base}} and {{c/core|ranges::range_reference_t&lt;Base&gt;}} each model {{lconcept|bidirectional_range}};&lt;br&gt;
* {{lc|std::forward_iterator_tag}}, if {{c/core|ranges::range_reference_t&lt;Base&gt;}} is a reference type, and {{tti|Base}} and {{c/core|ranges::range_reference_t&lt;Base&gt;}} each model {{lconcept|forward_range}};&lt;br&gt;
* {{lc|std::input_iterator_tag}} otherwise.}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{mark cond present}}|Defined only if {{tt|iterator::iterator_concept}} (see above) denotes {{lc|std::forward_iterator_tag}}.&lt;br&gt;
Let {{tti|OUTERC}} be {{c/core|std::iterator_traits&lt;ranges::iterator_t&lt;Base&gt;&gt;::iterator_category}}, and let {{tti|INNERC}} be {{c multi
|std::iterator_traits&lt;ranges::iterator_t&lt;ranges::range_reference_t&lt;Base&gt;&gt;&gt;::
|    iterator_category}}.&lt;br&gt;
* {{lc|std::bidirectional_iterator_tag}}, if {{tti|OUTERC}} and {{tti|INNERC}} each model {{c/core|std::derived_from&lt;std::bidirectional_iterator_tag&gt;}};&lt;br&gt;
* {{lc|std::forward_iterator_tag}}, if {{tti|OUTERC}} and {{tti|INNERC}} each model {{c/core|std::derived_from&lt;std::forward_iterator_tag&gt;}};&lt;br&gt;
* {{lc|std::input_iterator_tag}} otherwise.}}
{{dsc|{{tt|value_type}}|{{c/core|ranges::range_value_t&lt;ranges::range_reference_t&lt;Base&gt;&gt;}}}}
{{dsc|{{tt|difference_type}}|{{c multi
|std::common_type_t&lt;ranges::range_difference_t&lt;Base&gt;,
|                   ranges::range_difference_t&lt;ranges::range_reference_t&lt;Base&gt;&gt;&gt;}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member|Definition}}
{{dsc expos mem obj|outer_|private=yes|spec={{tti|OuterIter}}|An outer iterator}}
{{dsc expos mem obj|inner_|private=yes|spec={{tti|InnerIter}}|An inner iterator}}
{{dsc expos mem obj|parent_|private=yes|spec={{tti|Parent*}}|A pointer to the parent object}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/join_view/iterator/iterator|constructs an iterator}}
{{dsc mem fun|cpp/ranges/join_view/iterator/operator*|title=operator*&lt;br&gt;operator-&gt;|accesses the element}}
{{dsc mem fun|cpp/ranges/join_view/iterator/operator_arith|title=operator++&lt;br&gt;operator++{{small|(int)}}&lt;br&gt;operator--&lt;br&gt;operator--{{small|(int)}}|advances or decrements the underlying iterators}}
{{dsc expos mem fun|cpp/ranges/join_view/iterator/satisfy|skips over empty inner ranges}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc fun|cpp/ranges/join_view/iterator/operator_cmp|title=operator==|compares the underlying iterators|notes={{mark c++20}}}}
{{dsc fun|cpp/ranges/join_view/iterator/iter_move|casts the result of dereferencing the underlying iterator to its associated rvalue reference type|notes={{mark c++20}}}}
{{dsc fun|cpp/ranges/join_view/iterator/iter_swap|swaps the objects pointed to by two underlying iterators|notes={{mark c++20}}}}
{{dsc end}}

&lt;!--
===Defect reports===
{{dr list begin}}
{{dr list item|paper=P2259R1|std=C++20|before=member {{tt|iterator_category}} is always defined|after=defined only if {{tt|Base}} models {{lconcept|forward_range}}}}
{{dr list end}}
--&gt;

{{langlinks|es|ja|ru|zh}}
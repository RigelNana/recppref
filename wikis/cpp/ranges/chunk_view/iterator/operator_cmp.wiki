{{title|1=operator==,&lt;,&gt;,&lt;=,&gt;=,&lt;=&gt;{{small|(ranges::chunk_view::''iterator'')}}}}
{{cpp/ranges/chunk_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|1=
friend constexpr bool operator==( const /*iterator*/&amp; x, const /*iterator*/&amp; y );
}}
{{dcl|num=2|since=c++23|1=
friend constexpr bool operator==( const /*iterator*/&amp; x, std::default_sentinel_t );
}}
{{dcl|num=3|since=c++23|1=
friend constexpr bool operator&lt;( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=4|since=c++23|1=
friend constexpr bool operator&gt;( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=5|since=c++23|1=
friend constexpr bool operator&lt;=( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=6|since=c++23|1=
friend constexpr bool operator&gt;=( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=7|since=c++23|1=
friend constexpr auto operator&lt;=&gt;( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    requires ranges::random_access_range&lt;Base&gt; &amp;&amp;
             std::three_way_comparable&lt;ranges::iterator_t&lt;Base&gt;&gt;;
}}
{{dcl end}}

Compares the underlying iterators (or the underlying iterator and the default sentinel {{v|2}}).

Let {{tti|current_}} and {{tti|end_}} be the underlying {{rlp|/#Data members|data members}}.

Equivalent to:
@1@ {{c|1=return x.current_ == y.current_;}}.
@2@ {{c|1=return x.current_ == x.end_;}}.
@3@ {{c|return x.current_ &lt; y.current_;}}.
@4@ {{c|return y &lt; x;}}.
@5@ {{c|return !(y &lt; x);}}.
@6@ {{c|return !(x &lt; y);}}.
@7@ {{c|1=return x.current_ &lt;=&gt; y.current_;}}.

{{cpp/hidden friend|{{tt|std::ranges::chunk_view::''iterator''&lt;Const&gt;}}|plural=yes}}

{{cpp/note synthesized eq}}

===Parameters===
{{par begin}}
{{par|x, y|the {{rlp|/#Data members|iterators}} to compare}}
{{par end}}

===Return value===
The result of comparison.

===Example===
{{example}}

===See also===
{{dsc begin}}&lt;!--
{{dsc inc|cpp/ranges/adaptor/outer_iterator/dsc operator cmp|chunk_view}}--&gt;
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
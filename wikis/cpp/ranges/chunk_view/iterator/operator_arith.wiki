{{cpp/ranges/chunk_view/iterator/title|1=operator++,--,+=,-=}}
{{cpp/ranges/chunk_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr /*iterator*/&amp; operator++();
}}
{{dcl|num=2|since=c++23|
constexpr /*iterator*/ operator++( int );
}}
{{dcl|num=3|since=c++23|
constexpr /*iterator*/&amp; operator--()
    requires ranges::bidirectional_range&lt;Base&gt;;
}}
{{dcl|num=4|since=c++23|
constexpr /*iterator*/ operator--( int )
    requires ranges::bidirectional_range&lt;Base&gt;;
}}
{{dcl|num=5|since=c++23|1=
constexpr /*iterator*/&amp; operator+=( difference_type x )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=6|since=c++23|1=
constexpr /*iterator*/&amp; operator-=( difference_type x )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl end}}

Advances or decrements the {{rlp|iterator}}.

Let {{tti|current_}}, {{tti|end_}}, and {{tti|n_}} be the underlying {{rlp|/#Data members|data members}} of {{rlpt|/|chunk_view::iterator}}.

@1@ Equivalent to:
{{source|1=
missing_ = ranges::advance(current_, n_, end_);
return *this;
}}
Before the invocation the expression {{c|1=current_ != end_}} must be {{c|true}}, otherwise the behavior is undefined.

@2@ Equivalent to: {{c|1=auto tmp = *this; ++*this; return tmp;}}.

@3@ Equivalent to:
{{source|1=
ranges::advance(current_, missing_ - n_);
missing_ = 0;
return *this;
}}

@4@ Equivalent to: {{c|1=auto tmp = *this; --*this; return tmp;}}.

@5@ Equivalent to:
{{source|1=
if (x &gt; 0)
{
    ranges::advance(current_, n_ * (x - 1));
    missing_ = ranges::advance(current_, n_, end_);
}
else if (x &lt; 0)
{
    ranges::advance(current_, n_ * x + missing_);
    missing_ = 0;
}
return *this;
}}
If {{c|x}} is positive, then before the invocation the expression {{c|ranges::distance(current_, end_) &gt; n_ * (x - 1)}} must be {{c/core|true}} (i.e., informally, the requested chunk should be "inside" the underlying sequence). If {{c|x}} is negative, this precondition is always met.

@6@ Equivalent to: {{c|1=return *this += -x;}}.

===Parameters===
{{par begin}}
{{par|x|a position relative to current location}}
{{par end}}

===Return value===
@1,3,5,6@ {{c|*this}}
@2,4@ a copy of {{c|*this}} that was made before the change

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc fun|cpp/ranges/chunk_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|performs iterator arithmetic|notes={{mark c++23}}}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
{{cpp/ranges/view title|as_const}}
{{cpp/ranges/navbar}}
{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++23|1=
template&lt; ranges::view V &gt;
    requires ranges::input_range&lt;V&gt;
class as_const_view
    : public ranges::view_interface&lt;as_const_view&lt;V&gt;&gt;
}}
{{dcl|num=2|since=c++23|1=
namespace views {
    inline constexpr /* unspecified */ as_const = /* unspecified */;
}
}}
{{dcl h|Call signature}}
{{dcl|since=c++23|1=
template&lt; ranges::viewable_range R &gt;
    requires /* see below */
constexpr ranges::view auto as_const( R&amp;&amp; r );
}}
{{dcl end}}

@1@ A range adaptor that represents a view of underlying {{lconcept|view}} that is also a {{lconcept|constant_range}}. An {{tt|as_const_view}} always has read-only elements (if not empty).

@2@ {{named req|RangeAdaptorObject}}. Let {{c|e}} be a subexpression, let {{c|T}} be {{c|decltype((e))}}, and let {{c|U}} be {{c|std::remove_cvref_t&lt;T&gt;}}. Then the expression {{c|views::as_const(e)}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to:
* {{c|views::all(e)}}, if it is a well-formed expression and {{c|views::all_t&lt;T&gt;}} models {{lconcept|constant_range}};
* otherwise, {{c|std::span&lt;const X, Extent&gt;(e)}} for some type {{tt|X}} and some extent {{tt|Extent}} if {{tt|U}} denotes {{c|std::span&lt;X, Extent&gt;}};
* otherwise, {{c|ranges::ref_view(static_cast&lt;const X&amp;&gt;(e.base()))}} if {{tt|U}} denotes {{c|ranges::ref_view&lt;X&gt;}} for some type {{tt|X}} and {{c|const X}} models {{lconcept|constant_range}};
* otherwise, {{c|ranges::ref_view(static_cast&lt;const U&amp;&gt;(e))}} if {{tt|e}} is an lvalue, {{c|const U}} models {{lconcept|constant_range}}, and {{tt|U}} does not model {{lconcept|view}}.
* otherwise, {{c|as_const_view{e} }}.

{{tt|as_const_view}} always models {{lconcept|constant_range}}, and it models the {{lconcept|contiguous_range}}, {{lconcept|random_access_range}}, {{lconcept|bidirectional_range}}, {{lconcept|forward_range}}, {{lconcept|borrowed_range}}, {{lconcept|common_range}}, and {{lconcept|sized_range}} when the underlying view {{tt|V}} models respective concepts.

===Data members===
{{dsc begin}}
{{dsc hitem|Member object|Definition}}
{{dsc expos mem obj|base_|private=yes|The underlying view of type {{tt|V}}.}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|{{PAGENAME}}#ctor|constructs an {{tt|as_const_view}}}}
{{dsc mem fun|{{PAGENAME}}#base|title=base|returns the underlying view {{tt|V}}}}
{{dsc mem fun|{{PAGENAME}}#begin|title=begin|returns the beginning iterator of the {{tt|as_const_view}}}}
{{dsc mem fun|{{PAGENAME}}#end|title=end|returns the end iterator of the {{tt|as_const_view}}}}
{{dsc mem fun|{{PAGENAME}}#size|title=size|returns the size of the view if it is bounded}}

{{cpp/ranges/view_interface/inherit|embedded=yes|size=yes}}
{{dsc end}}

{{anchor|ctor}}
{{member|{{small|std::ranges::as_const_view::}}as_const_view|
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
as_const_view() requires std::default_initializable&lt;V&gt; = default;
}}
{{dcl|num=2|since=c++23|
constexpr explicit as_const_view( V base );
}}
{{dcl end}}

@1@ Value-initializes {{tti|base_}} via its default member initializer ({{c|1== V()}}).
@2@ Initializes {{tti|base_}} with {{c|std::move(base)}}.

===Parameters===
{{par begin}}
{{par|base|a view}}
{{par end}}
}}

{{anchor|base}}
{{member|{{small|std::ranges::as_const_view::}}base|
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr V base() const&amp; requires std::copy_constructible&lt;V&gt;;
}}
{{dcl|num=2|since=c++23|
constexpr V base() &amp;&amp;;
}}
{{dcl end}}

Returns the underlying view.
@1@ Copy-constructs the result from the underlying view. Equivalent to {{c|return base_;}}.
@2@ Move-constructs the result from the underlying view. Equivalent to {{c|return std::move(base_);}}.
}}

{{anchor|begin}}
{{member|{{small|std::ranges::as_const_view::}}begin|
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr auto begin() requires (!__simple_view&lt;V&gt;);
}}
{{dcl|num=2|since=c++23|
constexpr auto begin() const requires ranges::range&lt;const V&gt;;
}}
{{dcl end}}
Returns the constant iterator of the view.

@1,2@ Equivalent to {{c|return ranges::cbegin(base_);}}
}}

{{anchor|end}}
{{member|{{small|std::ranges::as_const_view::}}end|
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr auto end() requires (!__simple_view&lt;V&gt;);
}}
{{dcl|num=2|since=c++23|
constexpr auto end() const requires ranges::range&lt;const V&gt;;
}}
{{dcl end}}
Returns the constant sentinel of the view.

@1,2@ Equivalent to {{c|return ranges::cend(base_);}}
}}

{{anchor|size}}
{{member|{{small|std::ranges::as_const_view::}}size|
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr auto size() requires ranges::sized_range&lt;V&gt;;
}}
{{dcl|num=2|since=c++23|
constexpr auto size() const requires ranges::sized_range&lt;const V&gt;;
}}
{{dcl end}}
Returns the size of the view if the view is bounded.

@1,2@ Equivalent to {{c|return ranges::size(base_);}}
}}

===Deduction guides===
{{ddcl|since=c++23|
template&lt; class R &gt;
as_const_view( R&amp;&amp; ) -&gt; as_const_view&lt;views::all_t&lt;R&gt;&gt;;
}}

===Helper templates===
{{ddcl|since=c++23|1=
template&lt; class T &gt;
constexpr bool enable_borrowed_range&lt;std::ranges::as_const_view&lt;T&gt;&gt; =
    ranges::enable_borrowed_range&lt;T&gt;;
}}
This specialization of {{ltt|cpp/ranges/borrowed_range|std::ranges::enable_borrowed_range}} makes {{tt|as_const_view}} satisfy {{lconcept|borrowed_range}} when the underlying view satisfies it.

===Notes===
{{feature_test_macro|__cpp_lib_ranges_as_const|value=202207L|std=C++23|{{tt|ranges::as_const_view}}, {{c/core|std::const_iterator}}}}

===Example===
{{example|code=
#include &lt;cassert&gt;
#include &lt;ranges&gt;

int main()
{
    int x[]{1, 2, 3, 4, 5};

    auto v1 = x {{!}} std::views::drop(2);
    assert(v1.back() == 5);
    v1[0]++; // OK, can modify non-const element

    auto v2 = x {{!}} std::views::drop(2) {{!}} std::views::as_const;
    assert(v2.back() == 5);
    // v2[0]++; // Compile-time error, cannot modify read-only element
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc as_rvalue_view}}
{{dsc inc|cpp/ranges/dsc cbegin}}
{{dsc inc|cpp/ranges/dsc cend}}
{{dsc inc|cpp/utility/dsc as_const}}
{{dsc inc|cpp/iterator/dsc basic_const_iterator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
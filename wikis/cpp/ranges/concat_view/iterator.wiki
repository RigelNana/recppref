{{cpp/ranges/concat_view/title|''iterator''}}
{{cpp/ranges/concat_view/navbar}}

{{dcl begin}}
{{dcla|num=1|expos=yes|
template&lt; bool Const &gt;
class /*iterator*/
}}
{{dcl h|Helper concepts}}
{{dcla|num=2|expos=yes|anchor=concat-is-random-access|1=
template&lt; bool Const, class... Rs &gt;
concept /*concat-is-random-access*/ = /* see description */;
}}
{{dcla|num=3|expos=yes|anchor=concat-is-bidirectional|1=
template&lt; bool Const, class... Rs &gt;
concept /*concat-is-bidirectional*/ = /* see description */;
}}
{{dcl end}}

@1@ {{c/core|ranges::concat_view&lt;Views...&gt;::}}{{tti|iterator}} is the type of the iterators returned by {{rlpf|begin}} and {{rlpf|end}} of {{c/core|ranges::concat_view&lt;Views...&gt;}}.

@2@ Let {{tt|Fs}} be the pack that consists of all elements of {{tt|Rs}} except the last element. Equivalent to
@@ {{box|
{{c/core|template&lt;bool Const, class... Rs&gt;}}&lt;br&gt;
{{c/core|concept}}{{nbspt}}{{tti|concat-is-random-access}}{{nbspt}}{{c/core|1== // exposition only}}&lt;br&gt;
{{nbspt|4}}{{lsi|cpp/ranges#all-random-access}}{{sep}}{{c/core|&lt;Const, Rs...&gt; &amp;&amp;}}&lt;br&gt;
{{nbspt|4}}{{c/core|(ranges::common_range&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Fs&gt;&gt; &amp;&amp; ...);}}
}}.

@3@ Let {{tt|Fs}} be the pack that consists of all elements of {{tt|Rs}} except the last element. Equivalent to
@@ {{box|
{{c/core|template&lt;bool Const, class... Rs&gt;}}&lt;br&gt;
{{c/core|concept}}{{nbspt}}{{tti|concat-is-bidirectional}}{{nbspt}}{{c/core|1== // exposition only}}&lt;br&gt;
{{nbspt|4}}{{lsi|cpp/ranges#all-bidirectional}}{{sep}}{{c/core|&lt;Const, Rs...&gt; &amp;&amp;}}&lt;br&gt;
{{nbspt|4}}{{c/core|(ranges::common_range&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Fs&gt;&gt; &amp;&amp; ...);}}
}}.

===Template parameters===
{{par begin}}
{{par|Const|whether the iterator is a constant iterator}}
{{par end}}

===Nested types===
{{dsc begin}}
{{dsc h2|Exposition-only types}}
{{dsc hitem|Type|Definition}}
{{dsc expos mem type|base-iter|id=base-iter|{{c/core|std::variant&lt;ranges::iterator_t&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Views&gt;&gt;...&gt;}}}}
{{dsc h2|Iterator property types}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|iterator_concept}}|an [[cpp/iterator/iterator tags|iterator tag]], [[#Determining the iterator concept|see below]]}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{mark cond present}}|an iterator tag, [[#Determining the iterator category|see below]]}}
{{dsc|{{tt|value_type}}|{{rlpsi|/#concat-value-t}}{{sep}}{{c/core|&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Views&gt;...&gt;}}}}
{{dsc|{{tt|difference_type}}|
{{c/core|std::common_type_t&lt;ranges::range_difference_t&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Views&gt;&gt;...&gt;}}}}
{{dsc end}}

====Determining the iterator concept====
{{tt|iterator_concept}} is defined as follows:
* If {{box|{{lsi|#concat-is-random-access}}{{sep}}{{c/core|&lt;Const, Views...&gt;}}}} is modeled, {{tt|iterator_concept}} denotes {{lc|std::random_access_iterator_tag}}.
* Otherwise, if {{box|{{lsi|#concat-is-bidirectional}}{{sep}}{{c/core|&lt;Const, Views...&gt;}}}} is modeled, {{tt|iterator_concept}} denotes {{lc|std::bidirectional_iterator_tag}}.
* Otherwise, if {{box|{{lsi|cpp/ranges#all-forward}}{{sep}}{{c/core|&lt;Const, Views...&gt;}}}} is modeled, {{tt|iterator_concept}} denotes {{lc|std::forward_iterator_tag}}.
* Otherwise, {{tt|iterator_concept}} denotes {{lc|std::input_iterator_tag}}.

====Determining the iterator category====
{{tt|iterator_category}} is defined if and only if {{box|{{lsi|cpp/ranges#all-forward}}{{sep}}{{c/core|&lt;Const, Views...&gt;}}}} is modeled. In this case, it is defined as follows:
* If {{box|{{c/core|std::is_reference_v&lt;}}{{rlpsi|/#concat-reference-t}}{{sep}}{{c/core|&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Views&gt;...&gt;&gt;}}}} is {{c|false}}, {{tt|iterator_category}} denotes {{lc|std::input_iterator_tag}}.
* Otherwise, let {{tt|Cs}} denote the pack of types {{box/core|{{c/core|std::iterator_traits&lt;ranges::iterator_t&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Views&gt;&gt;&gt;::iterator_category...}}}}:
** If {{box|({{c/core|std::derived_from&lt;Cs, std::random_access_iterator_tag&gt; &amp;&amp; ...) &amp;&amp;}}&lt;br&gt;{{nbspt|4}}{{lsi|#concat-is-random-access}}{{sep}}{{c/core|&lt;Const, Views...&gt;}}}} is {{c|true}}, {{tt|iterator_category}} denotes {{lc|std::random_access_iterator_tag}}.
** Otherwise, if {{box|({{c/core|std::derived_from&lt;Cs, std::bidirectional_iterator_tag&gt; &amp;&amp; ...) &amp;&amp;}}&lt;br&gt;{{nbspt|4}}{{lsi|#concat-is-bidirectional}}{{sep}}{{c/core|&lt;Const, Views...&gt;}}}} is {{c|true}}, {{tt|iterator_category}} denotes {{lc|std::bidirectional_iterator_tag}}.
** Otherwise, if {{c|(std::derived_from&lt;Cs, std::forward_iterator_tag&gt; &amp;&amp; ...)}} is {{c|true}}, {{tt|iterator_category}} denotes {{lc|std::forward_iterator_tag}}.
** Otherwise, {{tt|iterator_category}} denotes {{lc|std::input_iterator_tag}}.

===Data members===
{{dsc begin}}
{{dsc hitem|Member|Definition}}
{{dsc expos mem obj|spec={{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, ranges::concat_view&gt;*}}|parent_|id=parent|a pointer to the parent {{rlpt|/|concat_view}}}}
{{dsc expos mem obj|spec={{tti|base-iter}}|it_|id=it|an iterator into the current view}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/concat_view/iterator/iterator|constructs an iterator}}
{{dsc mem fun|cpp/ranges/concat_view/iterator/operator*|accesses the element}}
{{dsc mem fun|cpp/ranges/concat_view/iterator/operator_at|title=operator[]|accesses an element by index}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|concat_view}}
{{dsc h2|Exposition-only function templates}}
{{dsc expos mem fun|cpp/ranges/concat_view/iterator/helpers#satisfy|title=''satisfy''|replaces {{tti|it_}} with the beginning of the next view, if {{tti|it_}} is the end of current view}}
{{dsc expos mem fun|cpp/ranges/concat_view/iterator/helpers#prev|title=''prev''|decrements {{tti|it_}} such that it points to the previous position}}
{{dsc expos mem fun|cpp/ranges/concat_view/iterator/helpers#advance-fwd|title=''advance-fwd''|advances the current position on given offset}}
{{dsc expos mem fun|cpp/ranges/concat_view/iterator/helpers#advance-bwd|title=''advance-bwd''|decrements the current position on given value}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc fun|cpp/ranges/concat_view/iterator/operator cmp|title=operator==&lt;br&gt;operator&lt;&lt;br&gt;operator&gt;&lt;br&gt;operator&lt;=&lt;br&gt;operator&gt;=&lt;br&gt;operator&lt;=&gt;|compares the underlying iterators|notes={{mark c++26}}}}
{{dsc fun|cpp/ranges/concat_view/iterator/operator arith2|title=operator+&lt;br&gt;operator-|performs iterator arithmetic|notes={{mark c++26}}}}
{{dsc fun|cpp/ranges/concat_view/iterator/iter_move|casts the result of dereferencing the underlying iterator to its associated rvalue reference type|notes={{mark c++26}}}}
{{dsc fun|cpp/ranges/concat_view/iterator/iter_swap|swaps the objects pointed to by two underlying iterators|notes={{mark c++26}}}}
{{dsc end}}

===Example===
{{example
|The preliminary version can be checked out on [https://godbolt.org/z/TGv8v84xz Compiler Explorer].
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;ranges&gt;

int main()
{
    namespace views = std::views;
    static constexpr int p[]{1, 2, 3};
    static constexpr auto e = {4, 5};
    auto t = views::iota(6, 9);
    auto cat = views::concat(p, e, t);
    auto dog = views::concat(cat, cat);
    for (auto i{dog.begin()}; i != std::default_sentinel; ++i)
        std::cout &lt;&lt; *i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8
}}

===References===
{{ref std c++26}}
{{ref std|title=Class template {{tt|concat_view::iterator}}|id=range.concat.iterator|section=26.7.18.3}}
{{ref std end}}

{{langlinks|de|es|ja|ru|zh}}
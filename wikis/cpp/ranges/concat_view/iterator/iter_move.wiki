{{title|iter_move{{small|(ranges::concat_view::''iterator'')}}}}
{{cpp/ranges/concat_view/navbar}}
{{ddcl|since=c++26|
friend constexpr decltype(auto)
    iter_move( const /*iterator*/&amp; it ) noexcept(/* see description */);
}}

Returns the result of applying {{lc|ranges::iter_move}} to the underlying iterator contained in {{rlpsi|/#it_}}{{sep}}.

Let {{tt|Ref}} be {{lsi|cpp/ranges/concat_view#concat-rvalue-reference-t}}{{sep}}{{c/core|&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Views&gt;...&gt;}}. Equivalent to {{box|{{c/core|return std::visit([](const auto&amp; i) -&gt; Ref { return ranges::iter_move(i); }, it.}}{{rlpsi|/#it_}}{{sep}}{{c/core|);}}}}.

If {{box|{{tt|it.}}{{rlpsi|/#it_}}{{c/core|.valueless_by_exception()}}}} is {{c|true}}, the behavior is undefined.

{{cpp/hidden friend|{{c/core|concat_view::}}{{tti|iterator}}{{sep}}{{c/core|&lt;Const&gt;}}}}

===Parameters===
{{par begin}}
{{par|it|iterator}}
{{par end}}

===Return value===
The result of applying {{lc|ranges::iter_move}} to the underlying iterator.

===Exceptions===
{{noexcept|
    ((std::is_nothrow_invocable_v
          &lt;decltype(ranges::iter_move),
           const ranges::iterator_t&lt;/*maybe-const*/&lt;Const, Views&gt;&gt;&amp;&gt; &amp;&amp;
      std::is_nothrow_convertible_v&lt;ranges::range_rvalue_reference_t
                                        &lt;/*maybe-const*/&lt;Const, Views&gt;&gt;, Ref&gt;) &amp;&amp; ...)
}}

{{langlinks|de|es|fr|ja|ru|zh}}
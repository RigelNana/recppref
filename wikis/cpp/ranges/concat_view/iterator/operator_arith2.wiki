{{title|operator+,-{{small|(ranges::concat_view::''iterator'')}}}}
{{cpp/ranges/concat_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++26|
friend constexpr /*iterator*/
    operator+( const /*iterator*/&amp; it, difference_type n )
        requires /*concat-is-random-access*/&lt;Const, Views...&gt;;
}}
{{dcl|num=2|since=c++26|
friend constexpr /*iterator*/
    operator+( difference_type n, const /*iterator*/&amp; it )
        requires /*concat-is-random-access*/&lt;Const, Views...&gt;;
}}
{{dcl|num=3|since=c++26|
friend constexpr /*iterator*/
    operator-( const /*iterator*/&amp; it, difference_type n )
        requires /*concat-is-random-access*/&lt;Const, Views...&gt;;
}}
{{dcl|num=4|since=c++26|
friend constexpr difference_type
    operator-( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
        requires /*concat-is-random-access*/&lt;Const, Views...&gt;;
}}
{{dcl|num=5|since=c++26|
friend constexpr difference_type
    operator-( const /*iterator*/&amp; x, std::default_sentinel_t )
        requires /* see description */;
}}
{{dcl|num=6|since=c++26|
friend constexpr difference_type
    operator-( std::default_sentinel_t, const /*iterator*/&amp; x )
        requires /* see description */;
}}
{{dcl end}}

Increments or decrements the {{rlp|iterator}}.

@1@ Equivalent to {{c|1=auto t = it; t += n; return t;}}.

@2@ Equivalent to {{c|1=return it + n;}}.

@3@ Equivalent to {{c|1=auto t = it; t -= n; return t;}}.

@4@ Let {{c|Ix}} be {{box|{{c/core|x.}}{{rlpsi|/#it_}}{{sep}}{{c/core|.index()}}}} and {{c|Iy}} be {{box|{{c/core|y.}}{{rlpsi|/#it_}}{{sep}}{{c/core|.index()}}}}:
* If {{c|Ix &gt; Iy}} is {{c|true}}, equivalent to {{box|{{c/core|1=difference_type result = ranges::distance(y.}}{{rlpsi|helpers#get-iter}}{{sep}}{{c/core|&lt;Iy&gt;(), y.}}{{rlpsi|helpers#get-end}}{{sep}}{{c/core|&lt;Iy&gt;());}}&lt;br&gt;{{c/core|1=for (std::size_t I = Iy + 1; I &lt; Ix; I++)}}&lt;br&gt;{{nbspt|4}}{{c/core|1=result += ranges::distance(x.}}{{rlpsi|helpers#get-view}}{{sep}}{{c/core|&lt;I&gt;());}}&lt;br&gt;{{c/core|return result + ranges::distance(x.}}{{rlpsi|helpers#get-begin}}{{sep}}{{c/core|&lt;Ix&gt;(), x.}}{{rlpsi|helpers#get-iter}}{{sep}}{{c/core|&lt;Ix&gt;());}}}}.
* Otherwise, if {{c|Ix &lt; Iy}} is {{c|true}}, equivalent to {{c|return -(y - x);}}.
* Otherwise, equivalent to {{box|{{c/core|return x.}}{{rlpsi|helpers#get-iter}}{{sep}}{{c/core|&lt;Ix&gt;() - y.}}{{rlpsi|helpers#get-iter}}{{sep}}{{c/core|&lt;Iy&gt;();}}}}.
@@ If {{box|{{c/core|x.}}{{rlpsi|/#it_}}{{sep}}{{c/core|.valueless_by_exception() {{!!}} y.}}{{rlpsi|/#it_}}{{sep}}{{c/core|.valueless_by_exception()}}}} is {{c|true}}, the behavior is undefined.

@5@ Let {{c|Ix}} be {{box|{{c/core|x.}}{{rlpsi|/#it_}}{{sep}}{{c/core|.index()}}}}, equivalent to {{box|{{c/core|1=difference_type result = ranges::distance(x.}}{{rlpsi|helpers#get-iter}}{{sep}}{{c/core|&lt;Ix&gt;(), x.}}{{rlpsi|helpers#get-end}}{{sep}}{{c/core|&lt;Ix&gt;());}}&lt;br&gt;{{c/core|1=for (std::size_t I = Ix + 1, count = sizeof...(Views); I &lt; count; I++)}}&lt;br&gt;{{nbspt|4}}{{c/core|1=result += ranges::distance(x.}}{{rlpsi|helpers#get-view}}{{sep}}{{c/core|&lt;I&gt;());}}&lt;br&gt;{{c/core|return -result;}}}}.
@@ Let {{tt|Fs}} be the pack that consists of all elements of {{tt|Views}} except the first element, the expression in the {{c/core|requires}} clause is equivalent to {{box|
{{c/core|(std::sized_sentinel_for&lt;ranges::sentinel_t&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Views&gt;&gt;,}}&lt;br&gt;
{{nbspt|25}}{{c/core|ranges::iterator_t&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Views&gt;&gt;&gt; &amp;&amp; ...) &amp;&amp;}}&lt;br&gt;
{{nbspt|4}}{{c/core|(ranges::sized_range&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Fs&gt;&gt; &amp;&amp; ...)}}
}}.
@@ If {{box|{{c/core|x.}}{{rlpsi|/#it_}}{{sep}}{{c/core|.valueless_by_exception()}}}} is {{c|true}}, the behavior is undefined.

@6@ Equivalent to {{c|return -(x - std::default_sentinel);}}.
@@ Let {{tt|Fs}} be the pack that consists of all elements of {{tt|Views}} except the first element, the expression in the {{c/core|requires}} clause is equivalent to {{box|
{{c/core|(std::sized_sentinel_for&lt;ranges::sentinel_t&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Views&gt;&gt;,}}&lt;br&gt;
{{nbspt|25}}{{c/core|ranges::iterator_t&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Views&gt;&gt;&gt; &amp;&amp; ...) &amp;&amp;}}&lt;br&gt;
{{nbspt|4}}{{c/core|(ranges::sized_range&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Fs&gt;&gt; &amp;&amp; ...)}}
}}.
@@ If {{box|{{c/core|x.}}{{rlpsi|/#it_}}{{sep}}{{c/core|.valueless_by_exception()}}}} is {{c|true}}, the behavior is undefined.

{{cpp/hidden friend|{{tt|concat_view::''iterator''{{sep}}&lt;Const&gt;}}|plural=yes}}

===Parameters===
{{par begin}}
{{par|it, x, y|the {{rlp|/|iterator}}s}}
{{par|n|a position relative to current location}}
{{par end}}

===Return value===
As described above.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|concat_view}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
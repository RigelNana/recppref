{{cpp/ranges/concat_view/iterator/title|''satisfy'', ''prev'', ''advance-fwd'', ''advance-bwd''}}
{{cpp/ranges/concat_view/navbar}}

The following exposition-only member function templates simplify the description.

Each helper function template has a non-type template parameter of type {{lc|std::size_t}}.
* If the name of the template parameter is {{c|N}}, the template argument is always {{box|{{rlpsi|/#it_}}{{sep}}{{c/core|.index()}}}}.
* If the name of the template parameter is {{c|I}}, the template argument can be any {{lc|std::size_t}} value in {{range|0|sizeof...(Views)}}.

However, the template argument might not be a compile-time constant, therefore the actual effect of {{box|{{tti|helper}}{{sep}}{{c/core|&lt;non_const&gt;(/* arguments */)}}}} is similar to {{box|
{{c/core|1=if (non_const == 0)}}&lt;br&gt;
{{nbspt|4}}{{tti|helper}}{{sep}}{{c/core|&lt;0&gt;(/* arguments */);}}&lt;br&gt;
{{c/core|1=else if (non_const == 1)}}&lt;br&gt;
{{nbspt|4}}{{tti|helper}}{{sep}}{{c/core|&lt;1&gt;(/* arguments */);}}&lt;br&gt;
{{c/core|/* other indices */}}&lt;br&gt;
{{c/core|1=else if (non_const == (sizeof...(Views) - 1))}}&lt;br&gt;
{{nbspt|4}}{{tti|helper}}{{sep}}{{c/core|&lt;sizeof...(Views) - 1&gt;(/* arguments */);}}&lt;br&gt;
}}.

===Helper templates===
{{member|Mini helper templates|2=
{{dcl begin}}
{{dcla|num=1|anchor=get-iter|expos=yes|
template&lt; std::size_t N &gt;
constexpr auto /*get-iter*/();
}}
{{dcla|num=2|anchor=get-view|expos=yes|
template&lt; std::size_t I &gt;
constexpr auto /*get-view*/();
}}
{{dcla|num=3|anchor=get-begin|expos=yes|
template&lt; std::size_t I &gt;
constexpr auto /*get-begin*/();
}}
{{dcla|num=4|anchor=get-end|expos=yes|
template&lt; std::size_t I &gt;
constexpr auto /*get-end*/();
}}
{{dcla|num=5|anchor=to-underlying-diff-type|expos=yes|
template&lt; std::size_t N &gt;
constexpr auto /*to-underlying-diff-type*/( difference_type value );
}}
{{dcl end}}

The mini helper templates simplify the description of the main helper templates and member functions. They are not included in the C++ standard documents.

@1@ Obtains the underlying iterator contained in {{rlpsi|/#it_}}{{sep}}.
@@ Returns {{box|{{ltt std|cpp/utility/variant/get}}{{c/core|&lt;N&gt;(}}{{rlpsi|/#it_}}{{sep}}{{c/core|)}}}}.

@2@ Obtains the {{c|I}}th view in the parent {{tt|concat_view}}.
@@ Returns {{box|{{ltt std|cpp/utility/tuple/get}}{{c/core|&lt;I&gt;(}}{{rlpsi|/#parent_}}{{sep}}{{c/core|-&gt;}}{{lsi|cpp/ranges/concat_view#views_}}{{sep}}{{c/core|)}}}}.

@3@ Obtains an iterator to the beginning of the {{c|I}}th view in the parent {{tt|concat_view}}.
@@ Returns {{box|{{c/core|ranges::begin(}}{{tti|get-view}}{{sep}}{{c/core|&lt;I&gt;())}}}}.

@4@ Obtains a past-the-end iterator or a sentinel of the {{c|I}}th view in the parent {{tt|concat_view}}.
@@ Returns {{box|{{c/core|ranges::end(}}{{tti|get-view}}{{sep}}{{c/core|&lt;I&gt;())}}}}.

@5@ Converts {{c|value}} to the underlying difference type of the underlying iterator contained in {{rlpsi|/#it_}}{{sep}}.
@@ Returns {{box|{{c/core|static_cast&lt;std::iter_difference_t&lt;std::variant_alternative_t&lt;N,}}{{nbspt}}{{rlpsi|/#base-iter}}{{sep}}{{c/core|&gt;&gt;&gt;(value)}}}}.
}}

{{anchor|satisfy}}
{{member|{{small|std::ranges::concat_view::''iterator''::}}''satisfy''&lt;N&gt;|2=
{{dcl begin}}
{{dcla|expos=yes|
template&lt; std::size_t N &gt;
constexpr void /*satisfy*/();
}}
{{dcl end}}

Adjusts the current (global) position of {{rlpsi|/#it_}}{{sep}}.
* If {{c|N}} is {{c|sizeof...(Views) - 1}}, does nothing.
* Otherwise, equivalent to {{box|{{c/core|if (}}{{lsi|#get-iter}}{{sep}}{{c/core|1=&lt;N&gt;() ==}}{{nbspt}}{{lsi|#get-end}}{{sep}}{{c/core|&lt;N&gt;())}}&lt;br&gt;{{c/core|{}}&lt;br&gt;{{nbspt|4}}{{rlpsi|/#it_}}{{sep}}{{c/core|.template emplace&lt;N + 1&gt;(}}{{lsi|#get-begin}}{{sep}}{{c/core|&lt;N + 1&gt;());}}&lt;br&gt;{{nbspt|4}}{{tti|satisfy}}{{sep}}{{c/core|&lt;N + 1&gt;();}}&lt;br&gt;{{c/core|}&lt;!----&gt;}}}}.
}}

{{anchor|prev}}
{{member|{{small|std::ranges::concat_view::''iterator''::}}''prev''&lt;N&gt;|2=
{{dcl begin}}
{{dcla|expos=yes|
template&lt; size_t N &gt;
constexpr void /*prev*/();
}}
{{dcl end}}

Moves {{rlpsi|/#it_}} to the previous (global) position.
* If {{c|N}} is {{c|0}}, equivalent to {{box|{{c/core|--}}{{lsi|#get-iter}}{{sep}}{{c/core|&lt;0&gt;();}}}}.
* Otherwise, equivalent to {{box|{{c/core|if (}}{{lsi|#get-iter}}{{sep}}{{c/core|1=&lt;N&gt;() ==}}{{nbspt}}{{lsi|#get-begin}}{{sep}}{{c/core|&lt;N&gt;())}}&lt;br&gt;{{c/core|{}}&lt;br&gt;{{nbspt|4}}{{rlpsi|/#it_}}{{sep}}{{c/core|.template emplace&lt;N - 1&gt;(}}{{lsi|#get-end}}{{sep}}{{c/core|&lt;N - 1&gt;());}}&lt;br&gt;{{nbspt|4}}{{tti|prev}}{{sep}}{{c/core|&lt;N - 1&gt;();}}&lt;br&gt;{{c/core|}&lt;!----&gt;}}&lt;br&gt;{{c/core|else}}&lt;br&gt;{{nbspt|4}}{{c/core|--}}{{lsi|#get-iter}}{{sep}}{{c/core|&lt;0&gt;();}}}}.
}}

{{anchor|advance-fwd}}
{{member|{{small|std::ranges::concat_view::''iterator''::}}''advance-fwd''&lt;N&gt;|2=
{{dcl begin}}
{{dcla|expos=yes|
template&lt; size_t N &gt;
constexpr void /*advance-fwd*/( difference_type offset,
                                difference_type steps );
}}
{{dcl end}}

Advances the current (global) position {{c|step}} steps forward.
* If {{c|N}} is {{c|sizeof...(Views) - 1}}, equivalent to {{box|{{lsi|#get-iter}}{{sep}}{{c/core|1=&lt;N&gt;() +=}}{{nbspt}}{{lsi|#to-underlying-diff-type}}{{sep}}{{c/core|(steps);}}}}.
* Otherwise, equivalent to {{box|{{c/core|1=auto n_size = ranges::distance(}}{{lsi|#get-view}}{{sep}}{{c/core|&lt;N&gt;()));}}&lt;br&gt;{{c/core|if (offset + steps &lt; n_size)}}&lt;br&gt;{{nbspt|4}}{{lsi|#get-iter}}{{sep}}{{c/core|1=&lt;N&gt;() +=}}{{nbspt}}{{lsi|#to-underlying-diff-type}}{{sep}}{{c/core|(steps);}}&lt;br&gt;{{c/core|else}}&lt;br&gt;{{c/core|{}}&lt;br&gt;{{nbspt|4}}{{rlpsi|/#it_}}{{sep}}{{c/core|.template emplace&lt;N + 1&gt;(}}{{lsi|#get-begin}}{{sep}}{{c/core|&lt;N + 1&gt;());}}&lt;br&gt;{{nbspt|4}}{{tti|advance-fwd}}{{sep}}{{c/core|&lt;N + 1&gt;(0, offset + steps - n_size);}}&lt;br&gt;{{c/core|}&lt;!----&gt;}}}}.

===Parameters===
{{par begin}}
{{par|offset|the offset of the current (global) position from the beginning of range {{rlpsi|/#it_}} currently refers into}}
{{par|steps|the number of steps to advance forward}}
{{par end}}
}}

{{anchor|advance-bwd}}
{{member|{{small|std::ranges::concat_view::''iterator''::}}''advance-bwd''&lt;N&gt;|2=
{{dcl begin}}
{{dcla|expos=yes|
template&lt; size_t N &gt;
constexpr void /*advance-bwd*/( difference_type offset,
                                difference_type steps );
}}
{{dcl end}}

Advances the current (global) position {{c|steps}} steps backward.
* If {{c|N}} is {{c|0}}, equivalent to {{box|{{lsi|#get-iter}}{{sep}}{{c/core|1=&lt;N&gt;() -=}}{{nbspt}}{{lsi|#to-underlying-diff-type}}{{sep}}{{c/core|(steps);}}}}.
* Otherwise, equivalent to {{box|{{c/core|1=if (offset &gt;= steps)}}&lt;br&gt;{{nbspt|4}}{{lsi|#get-iter}}{{sep}}{{c/core|1=&lt;N&gt;() -=}}{{nbspt}}{{lsi|#to-underlying-diff-type}}{{sep}}{{c/core|(steps);}}&lt;br&gt;{{c/core|else}}&lt;br&gt;{{c/core|{}}&lt;br&gt;{{nbspt|4}}{{c/core|1=auto prev_size = ranges::distance(}}{{lsi|#get-view}}{{sep}}{{c/core|&lt;N - 1&gt;());}}&lt;br&gt;{{nbspt|4}}{{rlpsi|/#it_}}{{sep}}{{c/core|.template emplace&lt;N - 1&gt;(}}{{lsi|#get-end}}{{sep}}{{c/core|&lt;N - 1&gt;());}}&lt;br&gt;{{nbspt|4}}{{tti|advance-bwd}}{{sep}}{{c/core|&lt;N - 1&gt;(prev_size, steps - offset);}}&lt;br&gt;{{c/core|}&lt;!----&gt;}}}}.

===Parameters===
{{par begin}}
{{par|offset|the offset of the current (global) position from the beginning of range {{rlpsi|/#it_}} currently refers into}}
{{par|steps|the number of steps to advance backward}}
{{par end}}
}}

{{langlinks|de|es|ja|ru|zh}}
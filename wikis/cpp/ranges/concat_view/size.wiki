{{cpp/ranges/concat_view/title|size}}
{{cpp/ranges/concat_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++26|
constexpr auto size()
    requires(sized_range&lt;Views&gt; &amp;&amp; ...);
}}
{{dcl|num=2|since=c++26|
constexpr auto size() const
    requires(sized_range&lt;const Views&gt; &amp;&amp; ...);
}}
{{dcl end}}

Returns the number of elements.

Equivalent to {{box|
{{c/core|return std::apply}}&lt;br&gt;{{nbspt|7}}{{c/core|(}}&lt;br&gt;{{nbspt|11}}{{c/core|[](auto... sizes)}}&lt;br&gt;{{nbspt|11}}{{c/core|{}}&lt;br&gt;{{nbspt|15}}{{c/core|1=using CT = ranges::common_type_t&lt;decltype(sizes)...&gt;;}}&lt;br&gt;{{nbspt|15}}{{c/core|return (}}{{lsi|cpp/ranges#make-unsigned-like-t}}{{sep}}{{c/core|&lt;CT&gt;(sizes) + ...);}}&lt;br&gt;{{nbspt|11}}{{c/core|},}}&lt;br&gt;{{nbspt|11}}{{lsi|cpp/ranges#tuple-transform}}{{sep}}{{c/core|(ranges::size,}}{{nbspt}}{{rlpsi|/#views_}}{{sep}}{{c/core|)}}&lt;br&gt;{{nbspt|7}}{{c/core|);}}
}}.

===Return value===
As described above.

===Complexity===
Constant.

===Notes===
The complexity of {{rlpt|/|concat_view}} is constant time (even though in some cases it is a linear function of the number of ranges it concatenates which is a statically known parameter of this view) because time complexity as required by the ranges concepts are formally expressed with respect to the total number of elements (the size) of a given range, and not to the statically known parameters of that range.

===Example===
{{example
|The preliminary version can be checked out on [https://godbolt.org/z/KccTnacPe Compiler Explorer].
|code=
#include &lt;cassert&gt;
#include &lt;forward_list&gt;
#include &lt;list&gt;
#include &lt;ranges&gt;

int main()
{
    constexpr static auto a = {1, 2};
    constexpr static auto b = {1, 2, 3};
    constexpr static auto c = {1, 2, 3, 4};
    
    constexpr auto con{std::views::concat(a, b, c)};
    static_assert(std::ranges::sized_range&lt;decltype(con)&gt;);
    static_assert(con.size() == 2 + 3 + 4);
    
    std::forward_list d = b;
    static_assert(not std::ranges::sized_range&lt;std::forward_list&lt;int&gt;&gt;);
    const auto cat{std::views::concat(b, c, d)};
    static_assert(not std::ranges::sized_range&lt;decltype(cat)&gt;);
//  auto x = cat.size(); // error: cat is not sized_range because of d
    
    std::list e = c;
    const auto dog{std::views::concat(a, b, e)};
    static_assert(std::ranges::sized_range&lt;decltype(dog)&gt;);
    assert(dog.size() == 2 + 3 + 4);
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc size}}
{{dsc inc|cpp/ranges/dsc ssize}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
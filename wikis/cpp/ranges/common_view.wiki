{{cpp/ranges/view title|common}}
{{cpp/ranges/common_view/navbar}}
{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++20|1=
template&lt; ranges::view V &gt;
    requires (not ranges::common_range&lt;V&gt; and
              std::copyable&lt;ranges::iterator_t&lt;V&gt;&gt;)
class common_view
    : public ranges::view_interface&lt;common_view&lt;V&gt;&gt;
}}
{{dcl|num=2|since=c++20|1=
namespace views {
    inline constexpr /* unspecified */ common = /* unspecified */;
}
}}
{{dcl h|Call signature}}
{{dcl|since=c++20|1=
template&lt; ranges::viewable_range R &gt;
    requires /* see below */
constexpr ranges::view auto common( R&amp;&amp; r );
}}
{{dcl end}}

@1@ Adapts a given {{lconcept|view}} with different types for iterator/sentinel pair into a {{lconcept|view}} that is also a {{lconcept|common_range}}. A {{tt|common_view}} always has the same iterator/sentinel type.

@2@ {{named req|RangeAdaptorObject}}. Let {{c|e}} be a subexpression. Then the expression {{c|views::common(e)}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to:
* {{c|views::all(e)}}, if it is a well-formed expression and {{c|decltype((e))}} models {{lconcept|common_range}};
* {{c|common_view{e}&lt;!----&gt;}} otherwise.

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc expos mem obj|base_|private=yes|The underlying view of type {{tt|V}}.}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc constructor|common_view}}
{{dsc inc|cpp/ranges/adaptor/dsc base|common_view}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|common_view}}
{{dsc inc|cpp/ranges/adaptor/dsc end|common_view}}
{{dsc inc|cpp/ranges/adaptor/dsc size|common_view}}
{{cpp/ranges/view_interface/inherit|embedded=yes|size=yes}}
{{dsc end}}

==={{rl|deduction guides|Deduction guides}}===

===Helper templates===
{{ddcl|since=c++20|1=
template&lt; class T &gt;
constexpr bool enable_borrowed_range&lt;std::ranges::common_view&lt;T&gt;&gt; =
    ranges::enable_borrowed_range&lt;T&gt;;
}}
This specialization of {{c/core|std::ranges::enable_borrowed_range}} makes {{tt|common_view}} satisfy {{lconcept|borrowed_range}} when the underlying view satisfies it.

===Notes===
{{tt|common_view}} can be useful for working with legacy algorithms that expect the iterator and sentinel are of the same type.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;list&gt;
#include &lt;numeric&gt;
#include &lt;ranges&gt;

int main()
{
    auto v1 = {1, 2, 3, 4, 5};
    auto i1 = std::counted_iterator{v1.begin(), std::ssize(v1)};
    auto r1 = std::ranges::subrange{i1, std::default_sentinel};
//  auto e1 = std::accumulate(r1.begin(), r1.end(), 0); // error: "common range" required
    auto c1 = std::ranges::common_view{r1};
    std::cout &lt;&lt; "accumulate: " &lt;&lt; std::accumulate(c1.begin(), c1.end(), 0) &lt;&lt; '\n';

    // inherited from ranges::view_interface:
    std::cout &lt;&lt; "c1.front(): " &lt;&lt; c1.front() &lt;&lt; '\n';
    std::cout &lt;&lt; "c1.back(): " &lt;&lt; c1.back() &lt;&lt; '\n';
    std::cout &lt;&lt; "c1.data(): " &lt;&lt; c1.data() &lt;&lt; '\n';
    std::cout &lt;&lt; "c1[0]: " &lt;&lt; c1[0] &lt;&lt; '\n';

    auto v2 = std::list{1, 2, 3, 4, 5};
    auto i2 = std::counted_iterator{v2.begin(), std::ssize(v2)};
    auto r2 = std::ranges::subrange{i2, std::default_sentinel};
//  auto e2 = std::accumulate(r2.begin(), r2.end(), 0); // error: "common range" required
    auto c2 = std::ranges::common_view{ r2 };
    std::cout &lt;&lt; "accumulate: " &lt;&lt; std::accumulate(c2.begin(), c2.end(), 0) &lt;&lt; '\n';

    // inherited from ranges::view_interface:
    std::cout &lt;&lt; "c2.front(): " &lt;&lt; c2.front() &lt;&lt; '\n';
//  auto e3 = c2.back(); // error: "bidirectional range" required
//  auto e4 = c2.data(); // error: "contiguous range" required
//  auto e5 = c2[0];     // error: "random access range" required
}
|p=true
|output=
accumulate: 15
c1.front(): 1
c1.back(): 5
c1.data(): 0x7f19937f00d0
c1[0]: 1
accumulate: 15
c2.front(): 1
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3494|std=c++20|before={{tt|common_view}} was never a {{tt|borrowed_range}}|after=it is a {{tt|borrowed_range}} if its underlying view is}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc common_range}}
{{dsc inc|cpp/iterator/dsc common_iterator}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
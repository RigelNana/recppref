{{cpp/ranges/title|iterator_t|const_iterator_t|sentinel_t|const_sentinel_t}}
{{cpp/ranges/navbar}}
{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++20|1=
template&lt; class T &gt;
using iterator_t = decltype(ranges::begin(std::declval&lt;T&amp;&gt;()));
}}
{{dcl|num=2|since=c++23|1=
template&lt; ranges::range R &gt;
using const_iterator_t = decltype(ranges::cbegin(std::declval&lt;R&amp;&gt;()));
}}
{{dcl|num=3|since=c++20|1=
template&lt; ranges::range R &gt;
using sentinel_t = decltype(ranges::end(std::declval&lt;R&amp;&gt;()));
}}
{{dcl|num=4|since=c++23|1=
template&lt; ranges::range R &gt;
using const_sentinel_t = decltype(ranges::cend(std::declval&lt;R&amp;&gt;()));
}}
{{dcl end}}

@1@ Used to obtain the iterator type of the type {{tt|T}}.
@2@ Used to obtain the constant iterator type of the {{lconcept|range}} type {{tt|R}}.
@3@ Used to obtain the sentinel type of the range type {{tt|R}}.
@4@ Used to obtain the constant sentinel type of the range type {{tt|R}}.

===Template parameters===
{{par begin}}
{{par|T|a type that can be used in {{lc|std::ranges::begin}}}}
{{par|R|a {{lconcept|range}} type or a {{lconcept|sized_range}} type}}
{{par end}}

===Notes===
{{tt|iterator_t}} can be applied to non-range types, e.g. arrays with unknown bound.

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3946|std=C++23|before={{tt|const_iterator_t}} and {{tt|const_sentinel_t}} were inconsistent&lt;br&gt;with the result of {{tt|ranges::cbegin}} and {{tt|ranges::cend}} respectively|after=tweaked}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc iter_t}}
{{dsc inc|cpp/ranges/dsc range_size_t}}
{{dsc inc|cpp/ranges/dsc range_reference_t}}
{{dsc end}}

{{langlinks|es|ja|zh}}
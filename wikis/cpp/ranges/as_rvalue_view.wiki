{{cpp/ranges/view title|as_rvalue}}
{{cpp/ranges/navbar}}
{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++23|1=
template&lt; ranges::view V &gt;
    requires ranges::input_range&lt;V&gt;
class as_rvalue_view
    : public ranges::view_interface&lt;as_rvalue_view&lt;V&gt;&gt;
}}
{{dcl|num=2|since=c++23|1=
namespace views {
    inline constexpr /* unspecified */ as_rvalue = /* unspecified */;
}
}}
{{dcl h|Call signature}}
{{dcl|since=c++23|1=
template&lt; ranges::viewable_range R &gt;
    requires /* see below */
constexpr ranges::view auto as_rvalue( R&amp;&amp; r );
}}
{{dcl end}}

@1@ A range adaptor that represents a view of underlying {{lconcept|view}} whose elements are rvalues.

@2@ {{named req|RangeAdaptorObject}}. Let {{c|e}} be a subexpression and let {{c|T}} be {{c|decltype((e))}}. Then the expression {{c|views::as_rvalue(e)}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to:
* {{c|views::all(e)}}, if it is a well-formed expression, {{c|T}} models {{lconcept|input_range}}, and {{c|std::same_as&lt;ranges::range_rvalue_reference_t&lt;T&gt;, ranges::range_reference_t&lt;T&gt;&gt;}} is {{c|true}};
* {{c|as_rvalue_view{e}&lt;!----&gt;}} otherwise.

===Data members===
{{dsc begin}}
{{dsc hitem|Member object|Definition}}
{{dsc expos mem obj|base_|private=yes|The underlying view of type {{tt|V}}.}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|{{PAGENAME}}#ctor|constructs an {{tt|as_rvalue_view}}}}
{{dsc mem fun|{{PAGENAME}}#base|title=base|returns the underlying view {{tt|V}}}}
{{dsc mem fun|{{PAGENAME}}#begin|title=begin|returns the beginning iterator of the {{tt|as_rvalue_view}}}}
{{dsc mem fun|{{PAGENAME}}#end|title=end|returns the end iterator of the {{tt|as_rvalue_view}}}}
{{dsc mem fun|{{PAGENAME}}#size|title=size|returns the size of the view if it is bounded}}

{{cpp/ranges/view_interface/inherit|embedded=yes|size=yes|data=invalid}}
{{dsc end}}

{{anchor|ctor}}
{{member|{{small|std::ranges::as_rvalue_view::}}as_rvalue_view|
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
as_rvalue_view() requires std::default_initializable&lt;V&gt; = default;
}}
{{dcl|num=2|since=c++23|
constexpr explicit as_rvalue_view( V base );
}}
{{dcl end}}

@1@ Value-initializes {{tti|base_}} via its default member initializer ({{c|1== V()}}).
@2@ Initializes {{tti|base_}} with {{c|std::move(base)}}.

===Parameters===
{{par begin}}
{{par|base|a view}}
{{par end}}
}}

{{anchor|base}}
{{member|{{small|std::ranges::as_rvalue_view::}}base|
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr V base() const&amp; requires std::copy_constructible&lt;V&gt;;
}}
{{dcl|num=2|since=c++23|
constexpr V base() &amp;&amp;;
}}
{{dcl end}}

Returns the underlying view.
@1@ Copy-constructs the result from the underlying view. Equivalent to {{c|return base_;}}.
@2@ Move-constructs the result from the underlying view. Equivalent to {{c|return std::move(base_);}}.
}}

{{anchor|begin}}
{{member|{{small|std::ranges::as_rvalue_view::}}begin|
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr auto begin() requires (!/*simple-view*/&lt;V&gt;);
}}
{{dcl|num=2|since=c++23|
constexpr auto begin() const requires ranges::range&lt;const V&gt;;
}}
{{dcl end}}

@1,2@ Returns {{c|std::move_iterator(ranges::begin(base_))}}.
}}

{{anchor|end}}
{{member|{{small|std::ranges::as_rvalue_view::}}end|
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr auto end() requires (!/*simple-view*/&lt;V&gt;);
}}
{{dcl|num=2|since=c++23|
constexpr auto end() const requires ranges::range&lt;const V&gt;;
}}
{{dcl end}}

@1@ Returns {{c|std::move_iterator(ranges::end(base_))}} if {{tt|V}} models {{lconcept|common_range}}, otherwise {{c|std::move_sentinel(ranges::end(base_))}}.
@2@ Returns {{c|std::move_iterator(ranges::end(base_))}} if {{tt|const V}} models {{lconcept|common_range}}, otherwise {{c|std::move_sentinel(ranges::end(base_))}}.
}}

{{anchor|size}}
{{member|{{small|std::ranges::as_rvalue_view::}}size|
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr auto size() requires ranges::sized_range&lt;V&gt;;
}}
{{dcl|num=2|since=c++23|
constexpr auto size() const requires ranges::sized_range&lt;const V&gt;;
}}
{{dcl end}}

Returns the size of the view if the view is bounded.

@1,2@ Equivalent to {{c|return ranges::size(base_);}}
}}

===Deduction guides===
{{ddcl|since=c++23|
template&lt; class R &gt;
as_rvalue_view( R&amp;&amp; ) -&gt; as_rvalue_view&lt;views::all_t&lt;R&gt;&gt;;
}}

===Helper templates===
{{ddcl|since=c++23|1=
template&lt; class T &gt;
constexpr bool enable_borrowed_range&lt;std::ranges::as_rvalue_view&lt;T&gt;&gt; =
    ranges::enable_borrowed_range&lt;T&gt;;
}}
This specialization of {{ltt|cpp/ranges/borrowed_range|std::ranges::enable_borrowed_range}} makes {{tt|as_rvalue_view}} satisfy {{lconcept|borrowed_range}} when the underlying view satisfies it.

===Notes===
{{feature test macro|__cpp_lib_ranges_as_rvalue|{{tt|std::ranges::as_rvalue_view}}|value=202207L|std=C++23}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;std::string&gt; words =
        {"the", "quick", "brown", "\N{FOX FACE}", "ate", "an", "archeopteryx"};
    std::vector&lt;std::string&gt; new_words;

    std::ranges::copy(
        words {{!}} std::views::as_rvalue,
        std::back_inserter(new_words)); // move string from words into new_words

    auto quoted = std::views::transform([](auto&amp;&amp; s) { return "‚Äú" + s + "‚Äù"; });

    std::cout &lt;&lt; "Words: ";
    for (auto&amp;&amp; word : words {{!}} std::views::as_rvalue {{!}} quoted)
        std::cout &lt;&lt; word &lt;&lt; ' ';

    std::cout &lt;&lt; "\nNew words: ";
    for (auto&amp;&amp; word : new_words {{!}} std::views::as_rvalue {{!}} quoted)
        std::cout &lt;&lt; word &lt;&lt; ' ';
}
|p=true
|output=
Words: ‚Äú‚Äù ‚Äú‚Äù ‚Äú‚Äù ‚Äú‚Äù ‚Äú‚Äù ‚Äú‚Äù ‚Äú‚Äù 
New words: ‚Äúthe‚Äù ‚Äúquick‚Äù ‚Äúbrown‚Äù ‚Äúü¶ä‚Äù ‚Äúate‚Äù ‚Äúan‚Äù ‚Äúarcheopteryx‚Äù
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=4083|std=C++23|before={{c|views::as_rvalue}} used to accept non-input ranges|after=made rejected}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/ranges/dsc iter_move}}
{{dsc inc|cpp/iterator/dsc move_iterator}}
{{dsc inc|cpp/iterator/dsc move_sentinel}}
{{dsc inc|cpp/ranges/dsc as_const_view}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
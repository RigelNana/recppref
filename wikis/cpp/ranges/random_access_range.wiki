{{cpp/ranges/title|random_access_range}}
{{cpp/ranges/navbar}}

{{ddcl|header = ranges|since=c++20|1=
template&lt; class T &gt;
concept random_access_range =
    ranges::bidirectional_range&lt;T&gt; &amp;&amp; std::random_access_iterator&lt;ranges::iterator_t&lt;T&gt;&gt;;
}}

The {{tt|random_access_range}} concept is a refinement of {{lconcept|range}} for which {{lc|ranges::begin}} returns a model of {{lconcept|random_access_iterator}}.

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;deque&gt;
#include &lt;list&gt;
#include &lt;ranges&gt;
#include &lt;set&gt;
#include &lt;valarray&gt;
#include &lt;vector&gt;

template&lt;typename T&gt; concept RAR = std::ranges::random_access_range&lt;T&gt;;

int main()
{
    int a[4];
    static_assert(
            RAR&lt;std::vector&lt;int&gt;&gt; and
            RAR&lt;std::vector&lt;bool&gt;&gt; and
            RAR&lt;std::deque&lt;int&gt;&gt; and
            RAR&lt;std::valarray&lt;int&gt;&gt; and
            RAR&lt;decltype(a)&gt; and
        not RAR&lt;std::list&lt;int&gt;&gt; and
        not RAR&lt;std::set&lt;int&gt;&gt; and
            RAR&lt;std::array&lt;std::list&lt;int&gt;,42&gt;&gt;
    );
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc sized_range}}
{{dsc inc|cpp/ranges/dsc contiguous_range}}
{{dsc end}}

{{langlinks|es|ja|zh}}
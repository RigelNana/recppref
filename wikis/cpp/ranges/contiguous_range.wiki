{{cpp/ranges/title|contiguous_range}}
{{cpp/ranges/navbar}}

{{ddcl|header = ranges|since=c++20|1=
template&lt; class T &gt;
concept contiguous_range =
    ranges::random_access_range&lt;T&gt; &amp;&amp;
    std::contiguous_iterator&lt;ranges::iterator_t&lt;T&gt;&gt; &amp;&amp;
    requires(T&amp; t) {
        { ranges::data(t) } -&gt;
            std::same_as&lt;std::add_pointer_t&lt;ranges::range_reference_t&lt;T&gt;&gt;&gt;;
    };
}}

The {{tt|contiguous_range}} concept is a refinement of {{lconcept|range}} for which {{lc|ranges::begin}} returns a model of {{lconcept|contiguous_iterator}} and the customization point {{lc|ranges::data}} is usable.

===Semantic requirements===
{{tt|T}} models {{tt|contiguous_range}} only if given an expression {{tt|e}} such that {{c|decltype((e))}} is {{c|T&amp;}}, {{c|1=std::to_address(ranges::begin(e)) == ranges::data(e)}}.

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;deque&gt;
#include &lt;list&gt;
#include &lt;mdspan&gt;
#include &lt;ranges&gt;
#include &lt;set&gt;
#include &lt;span&gt;
#include &lt;string_view&gt;
#include &lt;valarray&gt;
#include &lt;vector&gt;

template&lt;typename T&gt;
concept CR = std::ranges::contiguous_range&lt;T&gt;;

// zstring being a ranges::contiguous_range doesn't have to be a ranges::sized_range
struct zstring
{
    struct sentinel
    {
        friend constexpr bool operator==(const char* str, sentinel) noexcept
        { return *str == '\0'; }
    };

    const char* str;

    const char* begin() const noexcept { return str; }
    sentinel end() const noexcept { return {}; }
};

int main()
{
    int a[4];
    static_assert(
            CR&lt;std::vector&lt;int&gt;&gt; and
        not CR&lt;std::vector&lt;bool&gt;&gt; and
        not CR&lt;std::deque&lt;int&gt;&gt; and
            CR&lt;std::valarray&lt;int&gt;&gt; and
            CR&lt;decltype(a)&gt; and
        not CR&lt;std::list&lt;int&gt;&gt; and
        not CR&lt;std::set&lt;int&gt;&gt; and
            CR&lt;std::array&lt;std::list&lt;int&gt;,42&gt;&gt; and
            CR&lt;std::string_view&gt; and
            CR&lt;zstring&gt; and
            CR&lt;std::span&lt;const int&gt;&gt; and
        not CR&lt;std::mdspan&lt;int, std::dims&lt;1&gt;&gt;&gt;
    );
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc sized_range}}
{{dsc inc|cpp/ranges/dsc random_access_range}}
{{dsc end}}

{{langlinks|es|ja|zh}}
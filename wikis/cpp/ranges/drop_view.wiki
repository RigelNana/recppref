{{cpp/ranges/view title|drop}}
{{cpp/ranges/drop_view/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++20|1=
template&lt; ranges::view V &gt;
class drop_view
    : public ranges::view_interface&lt;drop_view&lt;V&gt;&gt;
}}
{{dcl|num=2|since=c++20|1=
namespace views {
    inline constexpr /* unspecified */ drop = /* unspecified */;
}
}}
{{dcl h|Call signature}}
{{dcl|since=c++20|1=
template&lt; ranges::viewable_range R &gt;
    requires /* see below */
constexpr ranges::view auto
    drop( R&amp;&amp; r, ranges::range_difference_t&lt;R&gt; count );
}}
{{dcl|since=c++20|1=
template&lt; class DifferenceType &gt;
constexpr /* range adaptor closure */ drop( DifferenceType&amp;&amp; count );
}}
{{dcl end}}

@1@ A range adaptor consisting of elements of the underlying sequence, skipping the first ''N'' elements.

@2@ {{named req|RangeAdaptorObject}}. Given {{tt|T}} is {{c/core|std::remove_cvref_t&lt;decltype((e))&gt;}} and {{tt|D}} is {{c/core|ranges::range_difference_t&lt;decltype((e))&gt;}}), the expression {{c|views::drop(e, f)}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to:
&lt;!----&gt;
* {{box|{{c/core|((void)f,}}{{nbspt}}{{lti|cpp/standard library/decay-copy}}{{c/core|(e))}}}}, if {{tt|T}} is a {{l2tt|cpp/ranges/empty_view}}, except that the evaluations of {{c|e}} and {{c|f}} are indeterminately sequenced;&lt;!-- LWG 3524 --&gt;
* otherwise, {{c multi|
T(ranges::begin(e) + inc, ranges::end(e),|
    /*to-unsigned-like*/(ranges::distance(e) - inc))
}}, if {{tt|T}} is a specialization of {{c/core|ranges::subrange}} that models both {{lconcept|random_access_range}} and {{lconcept|sized_range}}, and {{tt|T}} needs to store the size (see {{l2tf|cpp/ranges/subrange/subrange|subrange|ranges::subrange}} for details), where {{c|inc}} is {{c|std::min&lt;D&gt;(ranges::distance(e), f)}};
* otherwise, {{c|U(ranges::begin(e) + inc, ranges::end(e))}}, if {{tt|T}} is a specialization of {{c/core|std::span}}, {{lc|std::basic_string_view}}, {{c/core|ranges::iota_view}}, or {{c/core|ranges::subrange}} that models both {{lconcept|random_access_range}} and {{lconcept|sized_range}}, where {{tt|U}} is
:* {{c/core|std::span&lt;typename T::element_type&gt;}}, if {{tt|T}} is a specialization of {{c/core|std::span}};
:* {{tt|T}} otherwise;
{{rrev|since=c++23|
* otherwise, if {{tt|T}} is a specialization of {{l2tt|cpp/ranges/repeat_view}}:
:* {{c|views::repeat(*e.value_, ranges::distance(e) - inc)}}, if {{tt|T}} models {{lconcept|sized_range}}; in such case {{c|e}} is evaluated only once;
:* {{c|((void)e, auto(f))}} otherwise, except that the evaluations of {{c|e}} and {{c|f}} are indeterminately sequenced;
}}
* otherwise, {{c|drop_view(e, f)}}.
&lt;!----&gt;
In all cases, {{c/core|decltype((f))}} must model {{c|std::convertible_to&lt;D&gt;}}.

{{tt|drop_view}} models the concepts {{lconcept|contiguous_range}}, {{lconcept|random_access_range}}, {{lconcept|bidirectional_range}}, {{lconcept|forward_range}}, {{lconcept|input_range}}, {{lconcept|common_range}}, and {{lconcept|sized_range}} when the underlying view {{tt|V}} models respective concepts.

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc expos mem obj|base_|private=yes|the underlying (adapted) {{lconcept|view}} of type {{tt|V}}}}
{{dsc expos mem obj|count_|private=yes|the number of elements to skip, of type {{c/core|ranges::range_difference_t&lt;V&gt;}}}}
{{dsc expos mem obj|cache_|private=yes|TODO: mention L4$ &lt;!-- like this: If V is not a random_access_range or a sized_range, in order to provide the amortized constant time complexity required by the range concept, the overload (1) caches the result within the drop_view object for use on subsequent calls.--&gt;|maybe=yes}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc constructor|drop_view}}
{{dsc inc|cpp/ranges/adaptor/dsc base|drop_view}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|drop_view}}
{{dsc inc|cpp/ranges/adaptor/dsc end|drop_view}}
{{dsc inc|cpp/ranges/adaptor/dsc size|drop_view}}

{{cpp/ranges/view_interface/inherit|embedded=yes|size=yes}}
{{dsc end}}

==={{rl|deduction guides|Deduction guides}}===

===Helper templates===
{{ddcl|since=c++20|1=
template&lt; class T &gt;
constexpr bool enable_borrowed_range&lt;std::ranges::drop_view&lt;T&gt;&gt; =
    ranges::enable_borrowed_range&lt;T&gt;;
}}
This specialization of {{c/core|ranges::enable_borrowed_range}} makes {{tt|drop_view}} satisfy {{lconcept|borrowed_range}} when the underlying view satisfies it.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;

int main()
{
    const auto nums = {1, 2, 3, 4, 5, 6, 7};

    std::cout &lt;&lt; "drop " &lt;&lt; 2 &lt;&lt; ": ";
    for (int i : std::ranges::drop_view{nums, 2})
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    std::cout &lt;&lt; "drop " &lt;&lt; 3 &lt;&lt; ": ";
    for (int i : nums {{!}} std::views::drop(3))
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    std::cout &lt;&lt; "drop " &lt;&lt; 4 &lt;&lt; ": ";
    for (int i : std::views::iota(1, 8) {{!}} std::views::drop(4))
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    // Note that dropping more than the number of elements is OK:
    for (int dp : {5, 6, 7, 890, 100500})
    {
        std::cout &lt;&lt; "drop " &lt;&lt; dp &lt;&lt; ": ";
        for (int i : std::views::iota(1, 8) {{!}} std::views::drop(dp))
            std::cout &lt;&lt; i &lt;&lt; ' ';
        std::cout &lt;&lt; '\n';
    }
}
|output=
drop 2: 3 4 5 6 7
drop 3: 4 5 6 7
drop 4: 5 6 7
drop 5: 6 7
drop 6: 7
drop 7:
drop 890: 
drop 100500:
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3407|std=C++20|before={{tt|views::drop}} sometimes fails to&lt;br&gt;construct a sized random access range|after=the construction is adjusted&lt;br&gt;so that it is always valid}}
{{dr list item|wg=lwg|dr=3494|std=c++20|before={{tt|drop_view}} was never a {{tt|borrowed_range}}|after=it is a {{tt|borrowed_range}} if its underlying view is}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc drop_while_view}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
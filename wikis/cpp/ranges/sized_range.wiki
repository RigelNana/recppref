{{cpp/ranges/title|sized_range|disable_sized_range}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++20|1=
template&lt; class T &gt;
concept sized_range = ranges::range&lt;T&gt; &amp;&amp;
    requires(T&amp; t) {
        ranges::size(t);
    };
}}
{{dcl|num=2|since=c++20|1=
template&lt; class &gt;
constexpr bool disable_sized_range = false;
}}
{{dcl end}}

@1@ The {{tt|sized_range}} concept specifies the requirements of a {{lconcept|range}} type that knows its size in constant time with the {{tt|size}} function.

@2@ The {{tt|disable_sized_range}} exists to allow use of range types that provide a {{tt|size}} function (either as a member or as a non-member) but do not in fact model {{tt|sized_range}}. Users may specialize {{tt|disable_sized_range}} for cv-unqualified program-defined types. Such specializations shall be usable in {{lt|cpp/language/constant expression}}s and have type {{c/core|const bool}}.

===Semantic requirements===
@1@ Given an lvalue {{tt|t}} of type {{c|std::remove_reference_t&lt;T&gt;}}, {{tt|T}} models {{tt|sized_range}} only if
* {{c|ranges::size(t)}}
:* has amortized constant-time complexity,
:* does not alter the value of {{tt|t}} in a manner observable to [[cpp/concepts#Equality preservation|equality-preserving]] expressions, and
:* is equal to {{c|ranges::distance(ranges::begin(t), ranges::end(t))}}&lt;!-- LWG 3559 --&gt;, and
* if {{c|ranges::iterator_t&lt;T&gt;}} models {{lconcept|forward_iterator}}, {{c|ranges::size(t)}} is well-defined regardless of the evaluation of {{c|ranges::begin(t)}} (in other words, a single-pass sized range may support a call to size only before the first call to begin, but a forward range must support size at all times).

===Notes===
{{tt|disable_sized_range}} cannot be used to opt-out a range whose iterator and sentinel satisfy {{lconcept|sized_sentinel_for}}; {{lc|std::disable_sized_sentinel_for}} must be used instead.

{{tt|disable_sized_range}} cannot be specialized for array types or reference types.

===Example===
{{example
|code=
#include &lt;forward_list&gt;
#include &lt;list&gt;
#include &lt;ranges&gt;

static_assert
(
    std::ranges::sized_range&lt;std::list&lt;int&gt;&gt; and
    not std::ranges::sized_range&lt;std::forward_list&lt;int&gt;&gt;
);

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc random_access_range}}
{{dsc inc|cpp/ranges/dsc contiguous_range}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
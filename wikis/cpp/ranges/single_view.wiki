{{cpp/ranges/view title|single}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl rev multi|num=1|since1=c++20|dcl1=
template&lt; std::copy_constructible T &gt;
    requires std::is_object_v&lt;T&gt;
class single_view
    : public ranges::view_interface&lt;single_view&lt;T&gt;&gt;
|since2=c++23|dcl2=
template&lt; std::move_constructible T &gt;
    requires std::is_object_v&lt;T&gt;
class single_view
    : public ranges::view_interface&lt;single_view&lt;T&gt;&gt;
}}
{{dcl|num=2|since=c++20|1=
namespace views {
    inline constexpr /* unspecified */ single = /* unspecified */;
}
}}
{{dcl h|Call signature}}
{{dcl|since=c++20|1=
template&lt; class T &gt;
    requires /* see below */
constexpr /* see below */ single( T&amp;&amp; t );
}}
{{dcl end}}

@1@ Produces a {{lconcept|view}} that contains exactly one element of a specified value.
@2@ The expression {{c|views::single(e)}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to {{c|single_view&lt;std::decay_t&lt;decltype((e))&gt;&gt;(e)}} for any suitable subexpression {{c|e}}.

The lifetime of the element is bound to the parent {{tt|single_view}}. Copying {{tt|single_view}} makes a copy of the element.

{{cpp/ranges/cpo|views|single}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member|Definition}}
{{dsc expos mem obj|spec={{rlpi|copyable_wrapper|copyable-box}}{{sep}}{{tt|&lt;T&gt;}}|value_|the single element of the view|notes={{mark until c++23}}}}
{{dsc expos mem obj|spec={{rlpi|copyable_wrapper|movable-box}}{{sep}}{{tt|&lt;T&gt;}}|value_|the single element of the view|notes={{mark since c++23}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|{{PAGENAME}}#ctor|constructs a {{tt|single_view}}}}
{{dsc mem fun|{{PAGENAME}}#begin|title=begin|returns a pointer to the element}}
{{dsc mem fun|{{PAGENAME}}#end|title=end|returns a pointer past the element}}
{{dsc mem sfun|{{PAGENAME}}#empty|title=empty|returns {{c|false}}}}
{{dsc mem sfun|{{PAGENAME}}#size|title=size|returns {{c|1}}}}
{{dsc mem fun|{{PAGENAME}}#data|title=data|returns a pointer to the element}}

{{cpp/ranges/view_interface/inherit|embedded=yes|data=yes|empty=invalid|size=invalid}}
{{dsc end}}

{{anchor|ctor}}
{{member|{{small|std::ranges::single_view::}}single_view|
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
single_view() requires std::default_initializable&lt;T&gt; = default;
}}
{{dcl rev multi|num=2|since1=c++20|dcl1=
constexpr explicit single_view( const T&amp; t );
|since2=c++23|dcl2=
constexpr explicit single_view( const T&amp; t )
    requires std::copy_constructible&lt;T&gt;;
}}
{{dcl|num=3|since=c++20|1=
constexpr explicit single_view( T&amp;&amp; t );
}}
{{dcl|num=4|since=c++20|1=
template&lt; class... Args &gt;
    requires std::constructible_from&lt;T, Args...&gt;
constexpr explicit single_view( std::in_place_t, Args&amp;&amp;... args );
}}
{{dcl end}}

Constructs a {{tt|single_view}}.

@1@ Default initializes {{tti|value_}}, which value-initializes its contained value.
@2@ Initializes {{tti|value_}} with {{c|t}}.
@3@ Initializes {{tti|value_}} with {{c|std::move(t)}}.
@4@ Initializes {{tti|value_}} as if by {{box|{{tti|value_}}{{c/core|{std::in_place, std::forward&lt;Args&gt;(args)...}&lt;!----&gt;}}}}.
}}

{{anchor|begin}}
{{member|{{small|std::ranges::single_view::}}begin|
{{ddcl|since=c++20|
constexpr T* begin() noexcept;
constexpr const T* begin() const noexcept;
}}

Equivalent to {{c|return data();}}.
}}

{{anchor|end}}
{{member|{{small|std::ranges::single_view::}}end|
{{ddcl|since=c++20|
constexpr T* end() noexcept;
constexpr const T* end() const noexcept;
}}

Equivalent to {{c|return data() + 1;}}.
}}

{{anchor|empty}}
{{member|{{small|std::ranges::single_view::}}empty|
{{ddcl|since=c++20|
static constexpr bool empty() noexcept;
}}

Equivalent to {{c|return false;}}.
}}

{{anchor|size}}
{{member|{{small|std::ranges::single_view::}}size|
{{ddcl|since=c++20|
static constexpr std::size_t size() noexcept;
}}

Equivalent to {{c|return 1;}}.

Makes {{tt|single_view}} model {{c/core|/*tiny-range*/}} as required by {{rlpt|split_view}}.
}}

{{anchor|data}}
{{member|{{small|std::ranges::single_view::}}data|
{{ddcl|since=c++20|
constexpr T* data() noexcept;
constexpr const T* data() const noexcept;
}}

Returns a pointer to the contained value of {{tti|value_}}. The behavior is undefined if {{tti|value_}} does not contains a value.
}}

===Deduction guides===
{{ddcl|since=c++20|1=
template&lt; class T &gt;
single_view( T ) -&gt; single_view&lt;T&gt;;
}}

===Notes===
For a {{ttt|single_view}}, the inherited {{tt|empty}} member function always returns {{c|false}}, and the inherited {{c|operator bool}} conversion function always returns {{c|true}}.

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string&gt;
#include &lt;tuple&gt;

int main()
{
    constexpr std::ranges::single_view sv1{3.1415}; // uses (const T&amp;) constructor
    static_assert(sv1);
    static_assert(not sv1.empty());
    
    std::cout &lt;&lt; "1) *sv1.data(): " &lt;&lt; *sv1.data() &lt;&lt; '\n'
              &lt;&lt; "2) *sv1.begin(): " &lt;&lt; *sv1.begin() &lt;&lt; '\n'
              &lt;&lt; "3)  sv1.size(): " &lt;&lt; sv1.size() &lt;&lt; '\n'
              &lt;&lt; "4)  distance: " &lt;&lt; std::distance(sv1.begin(), sv1.end()) &lt;&lt; '\n';
    
    std::string str{"C++20"};
    std::cout &lt;&lt; "5)  str = " &lt;&lt; std::quoted(str) &lt;&lt; '\n';
    std::ranges::single_view sv2{std::move(str)}; // uses (T&amp;&amp;) constructor
    std::cout &lt;&lt; "6) *sv2.data(): " &lt;&lt; std::quoted(*sv2.data()) &lt;&lt; '\n'
              &lt;&lt; "7)  str = " &lt;&lt; std::quoted(str) &lt;&lt; '\n';
    
    std::ranges::single_view&lt;std::tuple&lt;int, double, std::string&gt;&gt;
        sv3{std::in_place, 42, 3.14, "ðŸ˜„"}; // uses (std::in_place_t, Args&amp;&amp;... args)
    
    std::cout &lt;&lt; "8)  sv3 holds a tuple: { "
              &lt;&lt; std::get&lt;0&gt;(sv3[0]) &lt;&lt; ", "
              &lt;&lt; std::get&lt;1&gt;(sv3[0]) &lt;&lt; ", "
              &lt;&lt; std::get&lt;2&gt;(sv3[0]) &lt;&lt; " }\n";
}
|output=
1) *sv1.data(): 3.1415
2) *sv1.begin(): 3.1415
3)  sv1.size(): 1
4)  distance: 1
5)  str = "C++20"
6) *sv2.data(): "C++20"
7)  str = ""
8)  sv3 holds a tuple: { 42, 3.14, ðŸ˜„ }
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3428|std=C++20|before={{tt|single_view}} was convertible from {{lc|std::in_place_t}}|after=the constructor is made explicit}}
{{dr list item|wg=lwg|dr=4035|std=C++20|before={{tt|single_view}} did not provide the member function {{tt|empty()}}|after=provides {{tt|empty()}}}}
{{dr list item|paper=P2367R0|std=C++20|before=deduction guides for {{tt|single_view}} failed to decay the argument;&lt;br&gt;{{tt|views::single}} copied but not wrapped a {{tt|single_view}}|after=a decaying guide provided;&lt;br&gt;made always wrapping}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc optional}}
{{dsc inc|cpp/ranges/dsc empty_view}}
{{dsc inc|cpp/ranges/dsc split_view}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
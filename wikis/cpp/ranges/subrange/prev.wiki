{{cpp/ranges/subrange/title|prev}}
{{cpp/ranges/subrange/navbar}}
{{ddcl|since=c++20|1=
constexpr subrange prev( std::iter_difference_t&lt;I&gt; n = 1 ) const
    requires std::bidirectional_iterator&lt;I&gt;;
}}

Returns a copy of {{c|*this}} whose {{rlpsi|/#begin_}} is decremented (or incremented if {{c|n}} is negative). The actual decrement (or increment) operation is performed by {{rlpf|advance}}.

Equivalent to:{{c multi
|1=auto tmp = *this;
|2=tmp.advance(-n);
|3=return tmp;
}}.

===Parameters===
{{par begin}}
{{par|n|number of decrements of the iterator}}
{{par end}}

===Return value===
As described above.

===Notes===
The difference between this function and {{rlpf|advance}} is that the latter performs the decrement (or increment) in place.

===Example===
{{example
|code=
#include &lt;iterator&gt;
#include &lt;list&gt;
#include &lt;print&gt;
#include &lt;ranges&gt;

int main()
{
    std::list list{1, 2, 3, 4, 5};
    std::ranges::subrange sub{std::next(list.begin(), 2), std::prev(list.end(), 2)};
    std::println("{} {} {}", sub, sub.prev(), sub.prev(2));
}
|output=
[3] [2, 3] [1, 2, 3]
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/subrange/dsc next}}
{{dsc inc|cpp/ranges/subrange/dsc advance}}
{{dsc inc|cpp/iterator/dsc prev}}
{{dsc inc|cpp/iterator/ranges/dsc prev}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/ranges/subrange/title|advance}}
{{cpp/ranges/subrange/navbar}}
{{ddcl|since=c++20|
constexpr subrange&amp; advance( std::iter_difference_t&lt;I&gt; n );
}}

Increments or decrements {{rlpsi|/#begin_}}{{sep}}:
* If {{tt|I}} models {{lconcept|bidirectional_iterator}} and {{c|n &lt; 0}} is {{c|true}}, decrements {{rlpsi|/#begin_}} by {{c|-n}} elements.
: Equivalent to: {{box|{{c/core|ranges::advance(}}{{rlpsi|/#begin_}}{{sep}}{{c/core|, n);}}&lt;br&gt;{{c/core|if constexpr (}}{{rlpsi|/#StoreSize}}{{sep}}{{c/core|)}}&lt;br&gt;{{nbspt|4}}{{rlpsi|/#size_}}{{nbspt}}{{c/core|1=+=}}{{nbspt}}{{lsi|cpp/ranges#to-unsigned-like}}{{sep}}{{c/core|(-n);}}&lt;br&gt;{{c/core|return *this;}}}}.
* Otherwise, increments {{rlpsi|/#begin_}} by {{c|n}} elements, or until {{rlpsi|/#end_}} is reached.
: Equivalent to: {{box|{{c/core|1=auto d = n - ranges::advance(}}{{rlpsi|/#begin_}}{{sep}}{{c/core|, n,}}{{nbspt}}{{rlpsi|/#end_}}{{sep}}{{c/core|);}}&lt;br&gt;{{c/core|if constexpr (}}{{rlpsi|/#StoreSize}}{{sep}}{{c/core|)}}&lt;br&gt;{{nbspt|4}}{{rlpsi|/#size_}}{{nbspt}}{{c/core|1=-=}}{{nbspt}}{{lsi|cpp/ranges#to-unsigned-like}}{{sep}}{{c/core|(d);}}&lt;br&gt;{{c/core|return *this;}}}}.


According to the preconditions of {{lc|ranges::advance}}, if {{c|n &lt; 0}} is {{c|true}} and {{rlpsi|/#begin_}} cannot be decremented by {{c|-n}} elements, the behavior is undefined.

===Parameters===
{{par begin}}
{{par|n|number of maximal increments of the iterator}}
{{par end}}

===Return value===
{{c|*this}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;ranges&gt;

void print(auto name, auto const sub)
{
    std::cout &lt;&lt; name &lt;&lt; ".size() == " &lt;&lt; sub.size() &lt;&lt; "; { ";
    std::ranges::for_each(sub, [](int x) { std::cout &lt;&lt; x &lt;&lt; ' '; });
    std::cout &lt;&lt; "}\n";
};

int main()
{
    std::array arr{1, 2, 3, 4, 5, 6, 7};
    std::ranges::subrange sub{std::next(arr.begin()), std::prev(arr.end())};
    print("1) sub", sub);
    print("2) sub", sub.advance(3));
    print("3) sub", sub.advance(-2));
}
|output=
1) sub.size() == 5; { 2 3 4 5 6 }
2) sub.size() == 2; { 5 6 }
3) sub.size() == 4; { 3 4 5 6 }
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3433|std=C++20|before=the behavior was undefined if {{c|n &lt; 0}}|after=made well-defined if {{tti|begin_}} can be decremented}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/subrange/dsc next}}
{{dsc inc|cpp/ranges/subrange/dsc prev}}
{{dsc inc|cpp/iterator/dsc advance}}
{{dsc inc|cpp/iterator/ranges/dsc advance}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
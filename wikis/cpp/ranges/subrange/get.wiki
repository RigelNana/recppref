{{cpp/ranges/title|get{{petty|(std::ranges::subrange)}}}}
{{cpp/ranges/subrange/navbar}}
{{dcl begin}}
{{dcl header|ranges}}
{{dcla|num=1|since=c++20|1=
template&lt; std::size_t N, class I, class S, ranges::subrange_kind K &gt;
    requires ((N == 0 &amp;&amp; std::copyable&lt;I&gt;) {{!!}} N == 1)
constexpr auto get( const ranges::subrange&lt;I, S, K&gt;&amp; r );
}}
{{dcl|num=2|since=c++20|
template&lt; std::size_t N, class I, class S, ranges::subrange_kind K &gt;
    requires (N &lt; 2)
constexpr auto get( ranges::subrange&lt;I, S, K&gt;&amp;&amp; r );
}}
{{dcl|num=3|since=c++20|
namespace std { using ranges::get; }
}}
{{dcl end}}

Provides {{lt|cpp/language/structured binding}} support.

@1@ Obtains the iterator or sentinel from a {{tt|subrange}} lvalue (or a const rvalue) when {{c|1=N == 0}} or {{c|1=N == 1}}, respectively.

@2@ Same as {{v|1}}, except that it takes a non-const {{tt|subrange}} rvalue.

@3@ Overloads {{v|1,2}} are imported into namespace {{tt|std}}, which simplifies their usage and makes every {{tt|subrange}} with a copyable iterator a [[cpp/utility/tuple/tuple-like|pair-like]] type.

===Parameters===
{{par begin}}
{{par|r|a {{tt|subrange}}}}
{{par end}}

===Return value===
@1,2@ If {{c|N}} is {{c|0}}, returns {{c|r.begin()}}. Otherwise ({{c|N}} is {{c|1}}), returns {{c|r.end()}}.

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;ranges&gt;

int main()
{
    std::array a{1, -2, 3, -4};
    
    std::ranges::subrange sub_a{std::next(a.begin()), std::prev(a.end())};
    std::cout &lt;&lt; *std::ranges::get&lt;0&gt;(sub_a) &lt;&lt; ' '   // == *(begin(a) + 1)
              &lt;&lt; *std::ranges::get&lt;1&gt;(sub_a) &lt;&lt; '\n'; // == *(end(a) - 1)
    
    *std::get&lt;0&gt;(sub_a) = 42; // OK
//  *std::get&lt;2&gt;(sub_a) = 13; // Error: index can only be 0 or 1
}
|output=-2 -4
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3589|std=C++20|before=overload {{vl|1}} copies {{rlpsi|/#begin_}} if {{c|N}} is {{c|0}}, but {{tt|I}} might not model {{lconcept|copyable}}|after=added constraints}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/language/dsc structured binding}}
{{dsc inc|cpp/utility/tuple/dsc get}}
{{dsc inc|cpp/utility/pair/dsc get}}
{{dsc inc|cpp/container/array/dsc get}}
{{dsc inc|cpp/utility/variant/dsc get}}
{{dsc inc|cpp/numeric/complex/dsc get}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
{{cpp/ranges/subrange/title|next}}
{{cpp/ranges/subrange/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr subrange next( std::iter_difference_t&lt;I&gt; n = 1 ) const&amp;
    requires std::forward_iterator&lt;I&gt;;
}}
{{dcla|num=2|since=c++20|1=
constexpr subrange next( std::iter_difference_t&lt;I&gt; n = 1 ) &amp;&amp;;
}}
{{dcl end}}

Returns a {{rlpt|/|subrange}} whose {{rlpsi|/#begin_}} is incremented (or decremented if {{c|n}} is negative). The actual increment (or decrement) operation is performed by {{rlpf|advance}}.

@1@ Returns a copy of {{c|*this}}.
@@ Equivalent to: {{c multi
|1=auto tmp = *this;
|2=tmp.advance(n);
|3=return tmp;
}}.

@2@ Returns a {{tt|subrange}} moved from {{c|*this}}.
@@ Equivalent to: {{c multi
|1=advance(n);
|2=return std::move(*this);
}}.

===Parameter===
{{par begin}}
{{par|n|number of maximal increments of the iterator}}
{{par end}}

===Return value===
As described above.

===Notes===
The difference between this function and {{rlpf|advance}} is that the latter performs the increment (or decrement) in place.

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;iterator&gt;
#include &lt;print&gt;
#include &lt;ranges&gt;

int main()
{
    std::array arr{1, 2, 3, 4, 5, 6, 7};
    std::ranges::subrange sub{std::next(arr.begin(), 2), std::prev(arr.end(), 2)};
    std::println("1) sub: {}", sub);
    std::println("2) sub: {}", sub.next());
    std::println("3) sub: {}", sub.next(2));
}
|output=
1) sub: [3, 4, 5]
2) sub: [4, 5]
3) sub: [5]
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/subrange/dsc prev}}
{{dsc inc|cpp/ranges/subrange/dsc advance}}
{{dsc inc|cpp/iterator/dsc next}}
{{dsc inc|cpp/iterator/ranges/dsc next}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
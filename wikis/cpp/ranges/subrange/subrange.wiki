{{cpp/ranges/subrange/title|subrange}}
{{cpp/ranges/subrange/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++20|1=
subrange() requires std::default_initializable&lt;I&gt; = default;
}}
{{dcl|num=2|since=c++20|
constexpr subrange( /*convertible-to-non-slicing*/&lt;I&gt; auto i, S s )
    requires (!/*StoreSize*/);
}}
{{dcl|num=3|since=c++20|1=
constexpr subrange( /*convertible-to-non-slicing*/&lt;I&gt; auto i, S s,
                    /*make-unsigned-like-t*/&lt;std::iter_difference_t&lt;I&gt;&gt; n )
    requires (K == ranges::subrange_kind::sized);
}}
{{dcla|num=4|since=c++20|
template&lt; /*different-from*/&lt;subrange&gt; R &gt;
    requires ranges::borrowed_range&lt;R&gt; &amp;&amp;
             /*convertible-to-non-slicing*/&lt;ranges::iterator_t&lt;R&gt;, I&gt; &amp;&amp;
             std::convertible_to&lt;ranges::sentinel_t&lt;R&gt;, S&gt;
constexpr subrange( R&amp;&amp; r )
    requires (!/*StoreSize*/ {{!!}} ranges::sized_range&lt;R&gt;);
}}
{{dcl|num=5|since=c++20|1=
template&lt; ranges::borrowed_range R&gt;
    requires /*convertible-to-non-slicing*/&lt;ranges::iterator_t&lt;R&gt;, I&gt; &amp;&amp;
           std::convertible_to&lt;ranges::sentinel_t&lt;R&gt;, S&gt;
constexpr subrange( R&amp;&amp; r,
                    /*make-unsigned-like-t*/&lt;std::iter_difference_t&lt;I&gt;&gt; n )
    requires (K == ranges::subrange_kind::sized)
    : subrange{ranges::begin(r), ranges::end(r), n} {}
}}
{{dcl end}}

Constructs a {{tt|subrange}}.

For the definitions of {{c/core|/*make-unsigned-like-t*/}} and {{c/core|/*different-from*/}}, see {{lsi|cpp/ranges#make-unsigned-like-t}} and {{lsi|cpp/ranges#different-from}} respectively.

{|class="wikitable" style="text-align: center;"
!rowspan=2|{{nbsp}}Overload{{nbsp}}
!colspan=3|{{rlps|/#Data members}}
|-
!style="font-weight: normal;"|{{tti|begin_}}
!style="font-weight: normal;"|{{tti|end_}}
!style="font-weight: normal;"|{{tti|size_}}&lt;br&gt;{{small|(only if {{box|{{rlpsi|/#StoreSize}}}} is {{c|true}})}}
|-
|{{v|1}}
|[[cpp/language/value initialization|value-initialized]]
|[[cpp/language/value initialization|value-initialized]]
|initialized with {{c|0}}
|-
|-
|{{v|2}}
|rowspan=2|initialized with {{c|std::move(i)}}
|rowspan=2|initialized with {{c|s}}
|{{n/a}}
|-
|{{v|3}}
|initialized with {{c|n}}
|-
|{{v|4}}
|rowspan=2|initialized with {{c|std::move(ranges::begin(r))}}
|rowspan=2|initialized with {{c|ranges::end(r)}}
|initialized with &lt;span style="text-align: left"&gt;{{box|{{c/core|static_cast&lt;decltype(}}{{rlpsi|/#size_}}{{sep}}{{c/core|)&gt;}}&lt;br&gt;{{nbspt|4}}{{c/core|(ranges::size(r))}}}}&lt;/span&gt;
|-
|{{v|5}}
|initialized with {{c|n}}
|}

@2@ If {{range|i|s}} is not a [[cpp/iterator#Ranges|valid range]], the behavior is undefined.

@3@ If any of the following conditions is satisfied, the behavior is undefined:
* {{range|i|s}} is not a valid range.
* {{box|{{c/core|1=n ==}}{{nbspt}}{{lsi|cpp/ranges#to-unsigned-like}}{{sep}}{{c/core|(ranges::distance(i, s))}}}} is {{c|false}}.

===Parameters===
{{par begin}}
{{par|i|iterator that denotes the beginning of the range}}
{{par|s|sentinel that denotes the end of the range}}
{{par|r|range}}
{{par|n|size hint, must be equal to the size of the range}}
{{par end}}

===Example===
{{example}}

===Defect reports===
{{dr list begin}}
{{dr list item|paper=P2393R1|std=C++20|before=for overload {{vl|4}}, {{box|{{rlpsi|/#size_}}}} might be initialized with {{c|ranges::size(r)}}, but it is&lt;br&gt;not always implicitly convertible to the corresponding {{lt|cpp/iterator/is-integer-like#Integer-like type|''unsigned-integer-like''}} type|after=made the&lt;br&gt;conversion explicit}}
{{dr list end}}

{{langlinks|de|es|ja|ru|zh}}
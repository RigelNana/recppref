{{cpp/ranges/transform_view/iterator/title | base}}
{{cpp/ranges/transform_view/navbar}}

{{dcl begin}}
{{dcl | num=1 | since=c++20 |
constexpr const ranges::iterator_t&lt;Base&gt;&amp; base() const &amp; noexcept;
}}
{{dcl | num=2 | since=c++20 |
constexpr ranges::iterator_t&lt;Base&gt; base() &amp;&amp;;
}}
{{dcl end}}

Returns the underlying iterator.

@1@ Returns a reference to the underlying iterator.
@2@ Move constructs the result from the underlying iterator.

===Parameters===
(none)

===Return value===
@1@ A reference to the underlying iterator.
@2@ An iterator move constructed from the underlying iterator.

===Example===
{{example
| code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;ranges&gt;

int main()
{
    const auto v = { 0, 1, 2, 3, 4 };
    auto x2 = [](int x) { return x &lt;&lt; 1; };
    std::ranges::transform_view tv{ v, x2 };
    std::ostream_iterator&lt;int&gt; ostr{ std::cout, " " };

    std::ranges::copy(v, ostr), std::cout &lt;&lt; '\n';
    std::ranges::copy(tv.base(), ostr), std::cout &lt;&lt; '\n';
    std::ranges::copy(tv, ostr), std::cout &lt;&lt; '\n';
}
| output=
0 1 2 3 4
0 1 2 3 4
0 2 4 6 8
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3533|std=C++20|before=the {{c|const&amp;}} overload of {{tt|base}} returns a copy of the underlying iterator|after=returns a reference}}
{{dr list item|wg=lwg|dr=3593|std=C++20|before=the {{c|const&amp;}} overload of {{tt|base}} might not be noexcept|after=made noexcept}}
{{dr list end}}

{{langlinks|de|es|ja|ru|zh}}
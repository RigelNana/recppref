{{title|iter_move{{small|(ranges::transform_view::''iterator'')}}}}
{{cpp/ranges/transform_view/navbar}}

{{ddcl|since=c++20|
friend constexpr decltype(auto) iter_move( const /*iterator*/&amp; i )
    noexcept(/* see below */);
}}

If {{c|*i}} is an lvalue reference, returns {{box|{{ltt std|cpp/utility/move}}{{c/core|(*i)}}}}; otherwise returns {{c|*i}}.

{{cpp/hidden friend|{{tt|transform_view::''iterator''&lt;Const&gt;}}}}

===Parameters===
{{par begin}}
{{par|i|{{rlp|/|iterator}}}}
{{par end}}

===Return value===
{{c|std::move(*i)}} if {{c|*i}} is an lvalue reference, otherwise {{c|*i}}

===Exceptions===
{{noexcept|noexcept(std::invoke(*i.parent_-&gt;fun_, *i.current_))}} where {{c|*i.parent_-&gt;fun_}} denotes the transformation function, {{c|i.current_}} denotes the underlying iterator.

{{langlinks|es|ja|zh}}
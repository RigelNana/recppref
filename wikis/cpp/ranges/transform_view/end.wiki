{{cpp/ranges/transform_view/title|end}}
{{cpp/ranges/transform_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr /*sentinel*/&lt;false&gt; end();
}}
{{dcl|num=2|since=c++20|1=
constexpr /*iterator*/&lt;false&gt; end() requires ranges::common_range&lt;V&gt;;
}}
{{dcl|num=3|since=c++20|1=
constexpr /*sentinel*/&lt;true&gt; end() const
    requires ranges::range&lt;const V&gt; &amp;&amp;
             std::regular_invocable&lt;const F&amp;, ranges::range_reference_t&lt;const V&gt;&gt;;
}}
{{dcl|num=4|since=c++20|1=
constexpr /*iterator*/&lt;true&gt; end() const
    requires ranges::common_range&lt;const V&gt; &amp;&amp;
             std::regular_invocable&lt;const F&amp;, ranges::range_reference_t&lt;const V&gt;&gt;;
}}
{{dcl end}}

Returns a {{rlp|sentinel}} or an {{rlp|iterator}} representing the end of the {{tt|transform_view}}.

Let {{rlpi|/#Data members|base_}} be the underlying view. Equivalent to:
@1@ {{c|return /*sentinel*/&lt;false&gt;{ranges::end(base_)};}}.
@2@ {{c|return /*iterator*/&lt;false&gt;{*this, ranges::end(base_)};}}.
@3@ {{c|return /*sentinel*/&lt;true&gt;{ranges::end(base_)};}}.
@4@ {{c|return /*iterator*/&lt;true&gt;{*this, ranges::end(base_)};}}.

===Parameters===
(none)

===Return value===
@1,3@ sentinel which compares equal to the end iterator
@2,4@ iterator to the element following the last element

===Notes===
{{tt|end()}} returns an iterator if and only if the underlying view is a {{lconcept|common_range}}: {{c/core|transform_view&lt;V,F&gt;}} models {{lconcept|common_range}} whenever {{tt|V}} does.

===Example===
{{example
|code=
|output=
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|transform_view}}
{{dsc inc|cpp/ranges/dsc end}}
{{dsc end}}

{{langlinks|es|ja|zh}}
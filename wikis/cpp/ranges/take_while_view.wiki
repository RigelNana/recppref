{{cpp/ranges/view title|take_while}}
{{cpp/ranges/take_while_view/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++20|1=
template&lt; ranges::view V, class Pred &gt;
    requires ranges::input_range&lt;V&gt; &amp;&amp;
             std::is_object_v&lt;Pred&gt; &amp;&amp;
             std::indirect_unary_predicate&lt;const Pred, ranges::iterator_t&lt;V&gt;&gt;
class take_while_view
    : public ranges::view_interface&lt;take_while_view&lt;V, Pred&gt;&gt;
}}
{{dcl|num=2|since=c++20|1=
namespace views {
    inline constexpr /*unspecified*/ take_while = /*unspecified*/;
}
}}
{{dcl h|Call signature}}
{{dcl|since=c++20|1=
template&lt; ranges::viewable_range R, class Pred &gt;
    requires /* see below */
constexpr ranges::view auto take_while( R&amp;&amp; r, Pred&amp;&amp; pred );
}}
{{dcl|since=c++20|1=
template&lt; class Pred &gt;
constexpr /*range adaptor closure*/ take_while( Pred&amp;&amp; pred );
}}
{{dcl end}}

@1@ A range adaptor that represents {{lconcept|view}} of the elements from an underlying sequence, starting at the beginning and ending at the first element for which the predicate returns {{c|false}}.
@2@ {{named req|RangeAdaptorObject}}. The expression {{c|views::take_while(e, f)}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to {{c|take_while_view(e, f)}}&lt;!--LWG 3524--&gt; for any suitable subexpressions {{c|e}} and {{c|f}}.

{{tt|take_while_view}} models the concepts {{lconcept|contiguous_range}}, {{lconcept|random_access_range}}, {{lconcept|bidirectional_range}}, {{lconcept|forward_range}}, and {{lconcept|input_range}} when the underlying view {{tt|V}} models respective concepts.

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc expos mem obj|base_|private=yes|the underlying {{lconcept|view}} of type {{tt|V}}}}
{{dsc expos mem obj|pred_|private=yes|the underlying function object of type {{rev inl|until=c++23|{{rlpi|copyable_wrapper|copyable-box&lt;!--P2325R3--&gt;}}{{tt|&lt;Pred&gt;}}}}{{rev inl|since=c++23|{{rlpi|copyable_wrapper|movable-box}}{{tt|&lt;Pred&gt;}}}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc constructor|take_while_view}}
{{dsc inc|cpp/ranges/adaptor/dsc base|take_while_view}}
{{dsc inc|cpp/ranges/adaptor/dsc pred|take_while_view}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|take_while_view}}
{{dsc inc|cpp/ranges/adaptor/dsc end|take_while_view}}

{{cpp/ranges/view_interface/inherit|embedded=yes|size=invalid|back=invalid}}
{{dsc end}}

==={{rl|deduction guides|Deduction guides}}===

===Nested classes===
{{dsc begin}}
{{dsc expos mem tclass|cpp/ranges/take_while_view/sentinel|the sentinel type}}
{{dsc end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;

int main()
{
    for (int year : std::views::iota(2020)
                  {{!}} std::views::take_while([](int y){ return y &lt; 2026; }))
        std::cout &lt;&lt; year &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    const char note[]{"Today is yesterday's tomorrow!..."};
    auto not_dot = [](char c){ return c != '.'; };
    for (char x : std::ranges::take_while_view(note, not_dot))
        std::cout &lt;&lt; x;
    std::cout &lt;&lt; '\n';
}
|output=
2020 2021 2022 2023 2024 2025
Today is yesterday's tomorrow!
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc take_view}}
{{dsc inc|cpp/ranges/dsc drop_while_view}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
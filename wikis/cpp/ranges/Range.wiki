{{cpp/ranges/title|range}}
{{cpp/ranges/navbar}}
{{ddcl|header=ranges|since=c++20|1=
template&lt; class T &gt;
concept range = requires( T&amp; t ) {
    ranges::begin(t); // equality-preserving for forward iterators
    ranges::end (t);
};
}}

The {{tt|range}} concept defines the requirements of a type that allows iteration over its elements by providing an iterator and sentinel that denote the elements of the range.

===Semantic requirements===
Given an expression {{c|E}} such that {{c/core|decltype((E))}} is {{tt|T}}, {{tt|T}} models {{tt|range}} only if
* {{range|ranges::begin(E)|ranges::end(E)}} denotes a [[cpp/iterator#Ranges|range]], and
* both {{c|ranges::begin(E)}} and {{c|ranges::end(E)}} are amortized constant time and do not alter the value of {{c|E}} in a manner observable to [[cpp/concepts#Equality preservation|equality-preserving]] expressions, and
* if the type of {{c|ranges::begin(E)}} models {{lconcept|forward_iterator}}, {{c|ranges::begin(E)}} is [[cpp/concepts#Equality preservation|equality-preserving]] (in other words, forward iterators support multi-pass algorithms).

===Notes===
A typical {{tt|range}} class only needs to provide two functions:

# A member function {{tt|begin()}} whose return type models {{lconcept|input_or_output_iterator}}.
# A member function {{tt|end()}} whose return type models {{lconcept|sentinel_for}}{{tt|&lt;It&gt;}}, where {{tt|It}} is the return type of {{tt|begin()}}.

Alternatively, they can be non-member functions, to be found by [[cpp/language/adl|argument-dependent lookup]].

===Example===
{{example
|code=
#include &lt;ranges&gt;

// A minimum range
struct SimpleRange
{
    int* begin();
    int* end();
};
static_assert(std::ranges::range&lt;SimpleRange&gt;);

// Not a range: no begin/end
struct NotRange
{
    int t {};
};
static_assert(!std::ranges::range&lt;NotRange&gt;);

// Not a range: begin does not return an input_or_output_iterator
struct NotRange2
{
    void* begin();
    int* end();
};
static_assert(!std::ranges::range&lt;NotRange2&gt;);

int main() {}
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3915|std=C++20|before={{c|ranges::begin(t)}} and {{c|ranges::end(t)}}&lt;br&gt;did not require implicit expression variations|after=removed the&lt;br&gt;redundant description}}
{{dr list end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/ranges/title|n=split_view&lt;V,Pattern&gt;::|''iterator''}}
{{cpp/ranges/split_view/navbar}}
{{ddcla|since=c++20|expos=yes|
class /*iterator*/;
}}

The return type of {{ltt|cpp/ranges/split_view|split_view::begin}}. This is a {{lconcept|forward_iterator}}, so it is expected that {{tt|V}} models at least {{lconcept|forward_range}}.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|iterator_concept}}|{{lc|std::forward_iterator_tag}}}}
{{dsc|{{tt|iterator_category}}|{{lc|std::input_iterator_tag}}}}
{{dsc|{{tt|value_type}}|{{c/core|ranges::subrange&lt;ranges::iterator_t&lt;V&gt;&gt;}}}}
{{dsc|{{tt|difference_type}}|{{c/core|ranges::range_difference_t&lt;V&gt;}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member|Description}}
{{dsc expos mem obj|parent_|id=parent|private=yes|spec={{c/core|ranges::split_view&lt;V, Pattern&gt;*}}|a pointer to the parent {{lc|ranges::split_view|split_view}} object}}
{{dsc expos mem obj|cur_|id=cur|private=yes|spec={{c/core|ranges::iterator_t&lt;V&gt;}}|an iterator into the underlying {{lconcept|view}} that points to the begin of a current subrange}}
{{dsc expos mem obj|next_|id=next|private=yes|spec={{c/core|ranges::subrange&lt;ranges::iterator_t&lt;V&gt;&gt;}}|a subrange to the position of the pattern next to the current subrange}}
{{dsc expos mem obj|trailing_empty_|id=trailing_empty|private=yes|spec={{c/core|bool}}|a flag that indicates whether an empty trailing subrange (if any) was reached}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|nolink=true|inlinemem=true|constructs an iterator|notes={{mark c++20}}}}
{{dsc mem fun|nolink=true|inlinemem=true|base|returns the underlying iterator|notes={{mark c++20}}}}
{{dsc mem fun|nolink=true|inlinemem=true|operator*|returns the current subrange|notes={{mark c++20}}}}
{{dsc mem fun|nolink=true|inlinemem=true|operator++&lt;br&gt;operator++{{dsc small|(int)}}|advances the iterator|notes={{mark c++20}}}}
{{dsc end}}

{{member|{{small|std::ranges::split_view::''iterator''::}}''iterator''|2=
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
/*iterator*/() = default;
}}
{{dcl|since=c++20|num=2|1=
constexpr /*iterator*/( split_view&amp; parent, ranges::iterator_t&lt;V&gt; current,
                        ranges::subrange&lt;ranges::iterator_t&lt;V&gt;&gt; next );
}}
{{dcl end}}

@1@ Value-initializes non-static data members with their default member initializers, that is
* {{c|1=ranges::split_view* parent_ = nullptr;}},
* {{c|1=ranges::iterator_t&lt;V&gt; cur_ = ranges::iterator_t&lt;V&gt;();}},
* {{c|1=ranges::subrange&lt;ranges::iterator_t&lt;V&gt;&gt; next_ = ranges::subrange&lt;ranges::iterator_t&lt;V&gt;&gt;();}}, and
* {{c|1=bool trailing_empty_ = false;}}.

@2@ Initializes non-static data members:
* {{c|1=ranges::split_view* parent_ = std::addressof(parent);}},
* {{c|1=ranges::iterator_t&lt;V&gt; cur_ = std::move(current);}},
* {{c|1=ranges::subrange&lt;ranges::iterator_t&lt;V&gt;&gt; next_ = std::move(next);}}, and
* {{c|1=bool trailing_empty_ = false;}}.
}}

{{member|{{small|std::ranges::split_view::''iterator''::}}base|2=

{{dcl begin}}
{{dcl|since=c++20|1=
constexpr const ranges::iterator_t&lt;V&gt; base() const;
}}
{{dcl end}}

Equivalent to {{c|return cur_;}}.
}}

{{member|{{small|std::ranges::split_view::''iterator''::}}operator*|2=
{{dcl begin}}
{{dcl|since=c++20|1=
constexpr value_type operator*() const;
}}
{{dcl end}}

Equivalent to {{c|1=return {cur_, next_.begin()};}}.
}}

{{member|{{small|std::ranges::split_view::''iterator''::}}operator++|2=
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
constexpr /*iterator*/&amp; operator++();
}}
{{dcl|since=c++20|num=2|1=
constexpr void operator++( int );
}}
{{dcl end}}

@1@ Equivalent to&lt;br&gt;{{c|1=
cur_ = next_.begin();
if (cur_ != ranges::end(parent_-&gt;base_))
{
    if (cur_ = next_.end(); cur_ == ranges::end(parent_-&gt;base_))
    {
        trailing_empty_ = true;
        next_ = {cur_, cur_};
    }
    else
        next_ = parent_-&gt;find_next(cur_);
}
else
    trailing_empty_ = false;

return *this;
}}

@2@ Equivalent to {{c|1=auto tmp = *this; ++*this; return tmp;}}.
}}

===Non-member functions===
{{dsc begin}}
{{dsc fun|nolink=true|operator{{==}}|compares the underlying iterators|notes={{mark c++20}}}}
{{dsc end}}

{{member|1=operator=={{small|(std::ranges::split_view::''iterator'', std::ranges::split_view::''iterator'')}}|2=
{{ddcl|since=c++20|1=
friend constexpr bool operator==( const /*iterator*/&amp; x, const /*iterator*/&amp; y );
}}

Equivalent to {{c|1=return x.cur_ == y.cur_ and x.trailing_empty_ == y.trailing_empty_;}}.

{{cpp/note synthesized eq}}

{{cpp/hidden friend|plural=no|{{tt|std::ranges::split_view::''iterator''}}}}
}}

{{langlinks|es|ja|ru|zh}}
{{cpp/ranges/split_view/title|base}}
{{cpp/ranges/split_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr V base() const&amp; requires std::copy_constructible&lt;V&gt;;
}}
{{dcl|num=2|since=c++20|
constexpr V base() &amp;&amp;;
}}
{{dcl end}}

Returns a copy of the underlying view {{rlpsi|/#base_}}.

@1@ Copy constructs the result from the underlying view.
@2@ Move constructs the result from the underlying view.

===Return value===
@1@ A copy of the underlying view.
@2@ A view move-constructed from the underlying view.

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string_view&gt;

int main()
{
    constexpr std::string_view keywords{"this throw true try typedef typeid"};
    std::ranges::split_view split_view{keywords, ' '};
    std::cout &lt;&lt; "base() = " &lt;&lt; std::quoted(split_view.base()) &lt;&lt; "\n"
                 "substrings: ";
    for (auto split : split_view)
        std::cout &lt;&lt; std::quoted(std::string_view{split}) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
base() = "this throw true try typedef typeid"
substrings: "this" "throw" "true" "try" "typedef" "typeid"
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3590|std=C++20|before=the {{c|const&amp;}} overload additionally required validity of copy-assignment|after=constraints relaxed}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc base|lazy_split_view}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
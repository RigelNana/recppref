{{title|Non-propagating cache {{mark c++20}}}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl|since=c++20|notes={{mark expos}}|
template&lt; class T &gt;
    requires std::is_object_v&lt;T&gt;
class /*non-propagating-cache*/;
}}
{{dcl end}}

Some range adaptors such as {{l2tt|cpp/ranges/join_view}} and {{l2tt|cpp/ranges/lazy_split_view}} conditionally store value (e.g. an iterator) which is specified in terms of an exposition-only class template {{tti|non-propagating-cache}}.

The wrapper behaves exactly like {{c/core|std::optional&lt;T&gt;}}, except that:
* it does not copy the value of the source when it is copy constructed or assigned to,
* it resets the value of the source when it is moved-from, 
* it resets its value when it is assigned from, and
* it additionally provides a member function template to enable an input view to temporarily cache values as it is iterated over.

The wrapper encapsulates a cache containing a value. Clearing cache is an operation equivalent to resetting a contained value. Such operation is performed when copying or moving a wrapper. 

===Template parameters===
{{par begin}}
{{par|T|the type of the contained value, must be an object type}}
{{par end}}

===Member functions===
{{member|Copy and move constructors|
{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr /*non-propagating-cache*/
    ( const /*non-propagating-cache*/&amp; ) noexcept {}
}}
{{dcl|num=2|since=c++20|
constexpr /*non-propagating-cache*/
    ( /*non-propagating-cache*/&amp;&amp; other ) noexcept { other.reset(); }
}}
{{dcl end}}

@1@ The copy constructor has no effect.
@2@ The move constructor clears the cache of {{c|other}}.
}}

{{member|Copy and move assignment operators|
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr /*non-propagating-cache*/&amp;
    operator=( const /*non-propagating-cache*/&amp; other ) noexcept
{ 
    if (std::addressof(other) != this)
        reset();
    return *this;
}
}}
{{dcl|num=2|since=c++20|1=
constexpr /*non-propagating-cache*/&amp;
    operator=( /*non-propagating-cache*/&amp;&amp; other ) noexcept
{
    reset();
    other.reset();
    return *this;
}
}}
{{dcl end}}

@1@ The copy assignment operator clears the cache of {{c|*this}}.
@2@ The move assignment operator clears caches of both {{c|*this}} and {{c|other}}.
}}

{{member|{{tt|{{small|''non-propagating-cache''&lt;T&gt;::}}''emplace-deref''}}|
{{dcl begin}}
{{dcl|since=c++20|notes={{mark expos}}|1=
template&lt; class I &gt;
constexpr T&amp; /*emplace-deref*/( const I&amp; i );
}}
{{dcl end}}

Initializes the contained value by [[cpp/language/direct initialization|direct-initializing]] (but not direct-list-initializing) with {{c|*i}}. If {{c|*this}} already contains a value before the call, {{c|reset()}} is called.

Returns a reference to the new contained value.

The program is ill-formed unless the declaration {{c|T t(*i);}} is well-formed for some invented variable {{c|t}}. If {{c|*i}} is a prvalue of possibly cv-qualified {{tt|T}}, then it is not required to be movable.
}}

{{identical|{{small|std::}}optional|
2=&lt;!--
===Nested types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|value_type}}|{{tt|T}}}}
{{dsc end}}
--&gt;
===Member functions===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc constructor}}
{{dsc inc|cpp/utility/optional/dsc destructor}}
{{dsc inc|cpp/utility/optional/dsc operator{{=}}}}

{{dsc h2|Observers}}
{{dsc inc|cpp/utility/optional/dsc operator*}}
{{dsc inc|cpp/utility/optional/dsc operator bool}}
&lt;!--{{dsc inc|cpp/utility/optional/dsc value}}
{{dsc inc|cpp/utility/optional/dsc value_or}}--&gt;

{{dsc h2|Modifiers}}
&lt;!--{{dsc inc|cpp/utility/optional/dsc swap}}--&gt;
{{dsc inc|cpp/utility/optional/dsc reset}}
{{dsc inc|cpp/utility/optional/dsc emplace}}
{{dsc end}}
}}

===Notes===
{{tti|non-propagating-cache}} is used in implementations to cache the result of {{c|begin()}} to provide an amortized constant time complexity of the method.

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc join_view}}
{{dsc inc|cpp/ranges/dsc join_with_view}}
{{dsc inc|cpp/ranges/dsc split_view}}
{{dsc inc|cpp/ranges/dsc lazy_split_view}}
{{dsc inc|cpp/ranges/dsc chunk_view}}
{{dsc end}}

{{langlinks|ar|cs|de|es|fr|it|ja|ko|pl|pt|ru|tr|zh}}
{{cpp/ranges/title|{{small|repeat_view&lt;W, Bound&gt;::}}''iterator''}}
{{cpp/ranges/repeat_view/navbar}}
{{dcl begin}}
{{dcla|expos=yes|
struct /*iterator*/;
}}
{{dcl end}}

{{c/core|ranges::repeat_view&lt;W, Bound&gt;::}}{{tti|iterator}} is the type of the iterators returned by {{rlpt|/#begin|begin()}} and {{rlpt|/#end|end()}} of {{c/core|ranges::repeat_view&lt;W, Bound&gt;}}.

===Nested types===
{{dsc begin}}
{{dsc h2|Exposition-only types}}
{{dsc hitem|Type|Definition}}
{{dsc expos mem type|index-type|{{c/core|std::conditional_t&lt;std::same_as&lt;Bound, std::unreachable_sentinel_t&gt;,}}&lt;br&gt;{{nbspt|19}}{{c/core|std::ptrdiff_t, Bound&gt;}}}}
{{dsc h2|Iterator property types}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|iterator_concept}}|{{lc|std::random_access_iterator_tag}}}}
{{dsc|{{tt|iterator_category}}|{{lc|std::random_access_iterator_tag}}}}
{{dsc|{{tt|value_type}}|{{tt|W}}}}
{{dsc|{{tt|difference_type}}{{anchor|difference_type}}|{{c/core|std::conditional_t&lt;}}{{lti|cpp/iterator/is-integer-like|is-signed-integer-like}}{{sep}}{{c/core|&lt;}}{{tti|index-type}}{{sep}}{{c/core|&gt;,}}&lt;br&gt;{{nbspt|19}}{{tti|index-type}}{{sep}}{{c/core|,}}{{nbspt}}{{lti|cpp/ranges/iota_view/iterator|iota-diff-t}}{{sep}}{{c/core|&lt;}}{{tti|index-type}}{{sep}}{{c/core|&gt;&gt;}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member|Definition}}
{{dsc expos mem obj|spec={{c/core|const W*}}|value_|id=value|a pointer to the value to repeat}}
{{dsc expos mem obj|spec={{tti|index-type}}|current_|id=current|the current position}}
{{dsc end}}

===Member functions===
{{member|{{small|std::ranges::repeat_view::''iterator''::}}''iterator''|2=
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
/*iterator*/() = default;
}}
{{dcla|num=2|since=c++23|expos=yes|1=
constexpr explicit /*iterator*/
    ( const W* value, /*index-type*/ b = /*index-type*/() );
}}
{{dcl end}}

Constructs an iterator. Overload {{v|2}} is called by {{rlpt|/#begin|begin()}} and {{rlpt|/#end|end()}} of {{rlpt|/|ranges::repeat_view}}.

@1@ Initializes {{lsi|#value_}} with {{c|nullptr}} and value-initializes {{lsi|#current_}}{{sep}}.

@2@ Initializes {{lsi|#value_}} with {{c|value}} and {{lsi|#current_}} with {{c|b}}.
@@ If {{tt|Bound}} is not {{lc|std::unreachable_sentinel_t}} and {{c|b}} is negative, the behavior is undefined.
}}

{{member|{{small|std::ranges::repeat_view::''iterator''::}}operator*|2=
{{ddcl|since=c++23|
constexpr const W&amp; operator*() const noexcept;
}}

Returns {{box|{{c/core|*}}{{lsi|#value_}}}}.
}}

{{member|{{small|std::ranges::repeat_view::''iterator''::}}operator[]|2=
{{ddcl|since=c++23|
constexpr const W&amp; operator[]( difference_type n ) const noexcept;
}}

Returns {{c|*(*this + n)}}.
}}

{{member|{{small|std::ranges::repeat_view::''iterator''::}}operator++|2=
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr /*iterator*/&amp; operator++();
}}
{{dcl|num=2|since=c++23|
constexpr void operator++(int);
}}
{{dcl end}}

@1@ Equivalent to {{box|{{c/core|++}}{{lsi|#current_}}{{sep}}{{c/core|; return *this;}}}}.

@2@ Equivalent to {{c|1=auto tmp = *this; ++*this; return tmp;}}.
}}

{{member|{{small|std::ranges::repeat_view::''iterator''::}}operator--|2=
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr /*iterator*/&amp; operator--();
}}
{{dcl|num=2|since=c++23|
constexpr /*iterator*/ operator--(int);
}}
{{dcl end}}

@1@ Equivalent to {{box|{{c/core|--}}{{lsi|#current_}}{{sep}}{{c/core|; return *this;}}}}.
@@ If {{tt|Bound}} is not {{lc|std::unreachable_sentinel_t}} and {{box|{{lsi|#current_}}}} is non-positive, the behavior is undefined.

@2@ Equivalent to {{c|1=auto tmp = *this; --*this; return tmp;}}.
}}

{{member|1={{small|std::ranges::repeat_view::''iterator''::}}operator+=|2=
{{ddcl|since=c++23|1=
constexpr /*iterator*/&amp; operator+=( difference_type n );
}}

Equivalent to {{box|{{lsi|#current_}}{{nbspt}}{{c/core|1=+= n; return *this;}}}}.

If {{tt|Bound}} is not {{lc|std::unreachable_sentinel_t}} and {{box|{{lsi|#current_}}{{nbspt}}{{c/core|+ n}}}} is negative, the behavior is undefined.
}}

{{member|1={{small|std::ranges::repeat_view::''iterator''::}}operator-=|2=
{{ddcl|since=c++23|1=
constexpr /*iterator*/&amp; operator-=( difference_type n );
}}

Equivalent to {{box|{{lsi|#current_}}{{nbspt}}{{c/core|1=-= n; return *this;}}}}.

If {{tt|Bound}} is not {{lc|std::unreachable_sentinel_t}} and {{box|{{lsi|#current_}}{{nbspt}}{{c/core|- n}}}} is negative, the behavior is undefined.
}}

===Non-member functions===
{{member|1=operator==, &lt;=&gt;{{small|(std::ranges::repeat_view::''iterator'')}}|2=
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
friend constexpr bool operator==
    ( const /*iterator*/&amp; x, const /*iterator*/&amp; y );
}}
{{dcl|num=2|since=c++23|1=
friend constexpr auto operator&lt;=&gt;
    ( const /*iterator*/&amp; x, const /*iterator*/&amp; y );
}}
{{dcl end}}

@1@ Returns {{box|{{c/core|x.}}{{lsi|#current_}}{{nbspt}}{{c/core|1=== y.}}{{lsi|#current_}}}}.

@2@ Returns {{box|{{c/core|x.}}{{lsi|#current_}}{{nbspt}}{{c/core|1=&lt;=&gt; y.}}{{lsi|#current_}}}}.

{{cpp/note synthesized eq}}

{{cpp/hidden friend|{{tt|''iterator''}}|plural=yes}}
}}

{{member|1=operator+{{small|(std::ranges::repeat_view::''iterator'')}}|2=
{{dcl begin}}
{{dcl|num=1|since=c++23|
friend constexpr /*iterator*/ operator+
    ( /*iterator*/ i, difference_type n );
}}
{{dcl|num=2|since=c++23|
friend constexpr /*iterator*/ operator+
    ( difference_type n, /*iterator*/ i );
}}
{{dcl end}}

Equivalent to {{c|1=i += n; return i;}}.

{{cpp/hidden friend|{{tt|''iterator''}}|plural=yes}}
}}

{{member|1=operator-{{small|(std::ranges::repeat_view::''iterator'')}}|2=
{{dcl begin}}
{{dcl|num=1|since=c++23|
friend constexpr /*iterator*/ operator-
    ( /*iterator*/ i, difference_type n );
}}
{{dcl|num=2|since=c++23|
friend constexpr difference_type operator-
    ( const /*iterator*/&amp; x, const /*iterator*/&amp; y );
}}
{{dcl end}}

@1@ Equivalent to {{c|1=i -= n; return i;}}.

@2@ Returns {{box|{{c/core|static_cast&lt;}}{{lst|#difference_type}}{{c/core|&gt;(x.}}{{lsi|#current_}}{{sep}}{{c/core|) -}}&lt;br&gt;{{nbspt|4}}{{c/core|static_cast&lt;}}{{lst|#difference_type}}{{c/core|&gt;(y.}}{{lsi|#current_}}{{sep}}{{c/core|)}}}}.

{{cpp/hidden friend|{{tt|''iterator''}}|plural=yes}}
}}

===Notes===
{{tti|iterator}} is always {{lconcept|random_access_iterator}}.

{{langlinks|de|es|ja|ru|zh}}
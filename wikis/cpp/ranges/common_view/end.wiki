{{cpp/ranges/common_view/title|end}}
{{cpp/ranges/common_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr auto end() requires (!/*simple-view*/&lt;V&gt;);
}}
{{dcl|num=2|since=c++20|
constexpr auto end() const requires ranges::range&lt;const V&gt;;
}}
{{dcl end}}

@1@ Returns an iterator representing the end of the {{tt|common_view}}, that is:
* {{c|ranges::begin(base_) + ranges::distance(base_)}}, if both {{c|ranges::random_access_range&lt;V&gt;}} and {{c|ranges::sized_range&lt;V&gt;}} are satisfied,
* {{c|std::common_iterator&lt;ranges::iterator_t&lt;V&gt;, ranges::sentinel_t&lt;V&gt;&gt;(ranges::end(base_))}} otherwise.
Here {{tti|base_}} (the name is for exposition purposes only) is the underlying view.

@2@ Same as {{v|1}}, but {{tt|V}} is const-qualified.

===Parameters===
(none)

===Return value===
An iterator representing the end of the underlying view.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;ranges&gt;

int main()
{
    constexpr int n{4};

    constexpr auto v1 = std::views::iota(1)
                      {{!}} std::views::take(n)
                      {{!}} std::views::common
                      ;
    constexpr auto v2 = std::views::iota(2)
                      {{!}} std::views::take(n)
                      ;
    const int product = std::inner_product(v1.begin(), v1.end(),
                                           v2.begin(),
                                           0);
    std::cout &lt;&lt; product &lt;&lt; '\n';
}
|output=40
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=4012|std=C++20|before=non-const overload missed simple-view check|after=added}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|common_view}}
{{dsc inc|cpp/ranges/dsc begin}}
{{dsc inc|cpp/ranges/dsc end}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/ranges/common_view/title|begin}}
{{cpp/ranges/common_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr auto begin() requires (!__simple_view&lt;V&gt;);
}}
{{dcl|num=2|since=c++20|
constexpr auto begin() const requires range&lt;const V&gt;;
}}
{{dcl end}}

@1@ Returns an iterator to the first element of the {{tt|common_view}}, that is:
* {{c|ranges::begin(base_)}}, if both {{c|ranges::random_access_range&lt;V&gt;}} and {{c|ranges::sized_range&lt;V&gt;}} are satisfied,
* {{c|std::common_iterator&lt;ranges::iterator_t&lt;V&gt;, ranges::sentinel_t&lt;V&gt;&gt;(ranges::begin(base_)) }} otherwise.
Here {{tt|''base_''}} (the name is for exposition only purposes) is the underlying view.

@2@ Same as {{v|1}}, but {{tt|V}} is const-qualified.

===Parameters===
(none)

===Return value===
An iterator to the beginning of the underlying view.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;ranges&gt;
#include &lt;string_view&gt;

int main()
{
    constexpr auto common = std::views::iota(1)
                          {{!}} std::views::take(3)
                          {{!}} std::views::common
                          ;

    for (int i{}; int e : common)
        std::cout &lt;&lt; (i++ ? " + " : "") &lt;&lt; e;

    std::cout &lt;&lt; " = " &lt;&lt; std::accumulate(common.begin(), common.end(), 0) &lt;&lt; '\n';
}
|output = 1 + 2 + 3 = 6
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=4012|std=C++20|before=non-const overload missed simple-view check|after=added}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc end|common_view}}
{{dsc inc|cpp/ranges/dsc begin}}
{{dsc inc|cpp/ranges/dsc end}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{title|operator+,-{{small|(ranges::adjacent_transform_view::''iterator'')}}}}
{{cpp/ranges/adjacent_transform_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|
friend constexpr /*iterator*/ operator+( const /*iterator*/&amp; i, difference_type n )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=2|since=c++23|
friend constexpr /*iterator*/ operator+( difference_type n, const /*iterator*/&amp; i )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=3|since=c++23|
friend constexpr iterator operator-( const /*iterator*/&amp; i, difference_type n )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=4|since=c++23|
friend constexpr difference_type operator-( const /*iterator*/&amp; i,
                                            const /*iterator*/&amp; j )
    requires std::sized_sentinel_for&lt;/*inner-iterator*/&lt;Const&gt;,
                                     /*inner-iterator*/&lt;Const&gt;&gt;;
}}
{{dcl end}}

Let {{rlpi|/#Data members|parent_}} and {{rlpi|/#Data members|inner_}} be the data members of the {{rlp|/|iterator}}.

@1,2@ Equivalent to {{c|return /*iterator*/(*i.parent_, i.inner_ + n);}}.

@3@ Equivalent to {{c|return /*iterator*/(*i.parent_, i.inner_ - n);}}.

@4@ Equivalent to {{c|return i.inner_ - j.inner_;}}.

{{cpp/hidden friend|{{tt|adjacent_transform_view::''iterator''&lt;Const&gt;}}|plural=yes}}

===Parameters===
{{par begin}}
{{par|i, j|the {{rlp|/|iterators}}}}
{{par|n|a position relative to current location}}
{{par end}}

===Return value===
@1,2@ An incremented iterator.
@3@ A decremented iterator.
@4@ A distance between given iterators.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|adjacent_transform_view}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
{{cpp/ranges/adjacent_transform_view/iterator/title|1=operator++,--,+=,-=}}
{{cpp/ranges/adjacent_transform_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr /*iterator*/&amp; operator++();
}}
{{dcl|num=2|since=c++23|
constexpr /*iterator*/ operator++(int);
}}
{{dcl|num=3|since=c++23|
constexpr /*iterator*/&amp; operator--()
    requires ranges::bidirectional_range&lt;Base&gt;;
}}
{{dcl|num=4|since=c++23|
constexpr /*iterator*/ operator--( int )
    requires ranges::bidirectional_range&lt;Base&gt;;
}}
{{dcl|num=5|since=c++23|1=
constexpr /*iterator*/&amp; operator+=( difference_type n )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=6|since=c++23|1=
constexpr /*iterator*/&amp; operator-=( difference_type n )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl end}}

Increments or decrements the {{rlp|/|iterator}}.

Let {{rlpi|/#Data members|inner_}} be the underlying iterator and {{rlpi|/#Member types|Base}} be the exposition-only member type.

Equivalent to:
@1@ {{c|++inner_; return *this;}}
@2@ {{c|1=auto tmp = *this; ++*this; return tmp;}}
@3@ {{c|--inner_; return *this;}}
@4@ {{c|1=auto tmp = *this; --*this; return tmp;}}
@5@ {{c|1=inner_ += n; return *this;}}
@6@ {{c|1=inner_ -= n; return *this;}}

===Parameters===
{{par begin}}
{{par|n|position relative to current location}}
{{par end}}

===Return value===
@1,3,5,6@ {{c|*this}}
@2,4@ a copy of {{c|*this}} that was made before the change

===Example===
{{example
|code=
|output=
}}

===See also===
{{dsc begin}}&lt;!--
{{dsc inc|cpp/ranges/adaptor/iterator/dsc_operator_arith2|adjacent_transform_view}}--&gt;
{{dsc end}}

{{langlinks|de|es|fr|ja|ru|zh}}
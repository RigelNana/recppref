{{cpp/ranges/adjacent_transform_view/title|''iterator''}}
{{cpp/ranges/adjacent_transform_view/navbar}}

{{ddcl|since=c++23|notes={{mark expos}}|
template&lt; bool Const &gt;
class /*iterator*/
}}

The return type of {{rlpt|begin|adjacent_transform_view::begin}}, and of {{rlpt|end|adjacent_transform_view::end}} when the underlying view {{tt|V}} is a {{lconcept|common_range}}.

The type {{c|/*iterator*/&lt;true&gt;}} is returned by the const-qualified overloads. The type {{c|/*iterator*/&lt;false&gt;}} is returned by the non-const-qualified overloads.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc expos mem type|Parent|private=yes|{{c|const ranges::adjacent_transform_view}}, if {{tt|Const}} is {{c|true}}. Otherwise, {{c|ranges::adjacent_transform_view}}.}}
{{dsc expos mem type|Base|private=yes|{{c|const V}}, if {{tt|Const}} is {{c|true}}. Otherwise, {{c|V}}.}}
{{dsc|{{tt|iterator_category}}|
* {{lc|std::input_iterator_tag}}, if
: {{c multi
|std::invoke_result_t&lt;/*maybe-const*/&lt;Const, F&gt;&amp;,
|                     /*REPEAT*/(ranges::range_reference_t&lt;Base&gt;, N)...&gt;}}
: is not a reference. Otherwise,
* let {{tti|C}} denote the type {{c|std::iterator_traits&lt;iterator_t&lt;Base&gt;&gt;::iterator_category}}.
** {{lc|std::random_access_iterator_tag}}, if &lt;br&gt;{{c|std::derived_from&lt;C, std::random_access_iterator_tag&gt;}} is {{c|true}}. Otherwise,
** {{lc|std::bidirectional_iterator_tag}}, if &lt;br&gt;{{c|std::derived_from&lt;C, std::bidirectional_iterator_tag&gt;}} is {{c|true}}. Otherwise,
** {{lc|std::forward_iterator_tag}}, if &lt;br&gt;{{c|std::derived_from&lt;C, std::forward_iterator_tag&gt;}} is {{c|true}}. Otherwise,
** {{lc|std::input_iterator_tag}}.}}
{{dsc|{{tt|iterator_concept}}|{{c|typename /*inner-iterator*/&lt;Const&gt;::iterator_concept;}}.}}
{{dsc|{{tt|value_type}}|
{{c multi
|std::remove_cvref_t&lt;std::invoke_result_t&lt;/*maybe-const*/&lt;Const, F&gt;&amp;,
|                    /*REPEAT*/(ranges::range_reference_t&lt;Base&gt;, N)...&gt;&gt;;
}}}}
{{dsc|{{tt|difference_type}}|{{c|ranges::range_difference_t&lt;Base&gt;}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc expos mem obj|parent_|private=yes|A pointer of type [[#Member types|{{tti|Parent*}}]].}}
{{dsc expos mem obj|inner_|private=yes|An iterator of type {{rlpi|/#Member types|inner_iterator}}.}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/adjacent_transform_view/iterator/iterator|constructs an iterator}}
{{dsc mem fun|cpp/ranges/adjacent_transform_view/iterator/operator*|accesses the element}}
{{dsc mem fun|cpp/ranges/adjacent_transform_view/iterator/operator_at|title=operator[]|accesses an element by index}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|adjacent_transform_view}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc fun|cpp/ranges/adjacent_transform_view/iterator/operator_cmp|title=operator==&lt;br&gt;operator&lt;&lt;br&gt;operator&gt;&lt;br&gt;operator&lt;=&lt;br&gt;operator&gt;=&lt;br&gt;operator&lt;=&gt;|compares the underlying iterators|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/adjacent_transform_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|performs iterator arithmetic|notes={{mark c++23}}}}
{{dsc end}}

===Example===
{{example}}

===References===
{{ref std c++23}}
{{ref std|title=Class template adjacent_transform_view::''iterator''|id=range.adjacent_transform.iterator|section=26.7.27.3}}
{{ref std end}}

===See also===
{{dsc begin}}&lt;!--
{{dsc inc|cpp/ranges/zip_transform_view/dsc iterator}}--&gt;
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
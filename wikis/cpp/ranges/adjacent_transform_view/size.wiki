{{cpp/ranges/adjacent_transform_view/title|size}}
{{cpp/ranges/adjacent_transform_view/navbar}}

{{dcl begin}}
{{dcl|since=c++23|
constexpr auto size() requires ranges::sized_range&lt;InnerView&gt;;
}}
{{dcl|since=c++23|
constexpr auto size() const requires ranges::sized_range&lt;const InnerView&gt;;
}}
{{dcl end}}

Returns the number of elements.

Let {{rlpi|/#Data members|inner_}} be the underlying object of type {{rlpi|/#Member types|InnerView}} (that is the {{c|ranges::adjacent_view&lt;V,N&gt;}}).

@1,2@ Equivalent to {{c|return inner_.size();}}.

===Parameters===
(none)

===Return value===
The number of elements, may be {{c|0}} if the size of the underlying view {{c|V}} is less than {{c|N}}.

===Example===
{{example
|code=
#include &lt;ranges&gt;

int main()
{
    constexpr static auto v = {1, 2, 3, 4, 5, 6};

    auto f = [](auto...) { return 0; }; // dummy

    constexpr int width1 {4};
    constexpr auto view1 = v {{!}} std::views::adjacent_transform&lt;width1&gt;(f);
    static_assert(view1.size() == 3);
    static_assert(view1.size() == (v.size() - width1 + 1));

    constexpr int width2 {8};
    constexpr auto view2 = v {{!}} std::views::adjacent_transform&lt;width2&gt;(f);
    // window is too wide, so view2 has no elements:
    static_assert(view2.size() == 0);
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc size}}
{{dsc inc|cpp/ranges/dsc ssize}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/ranges/view title|reverse}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++20|1=
template&lt; ranges::view V &gt;
    requires ranges::bidirectional_range&lt;V&gt;
class reverse_view
    : public ranges::view_interface&lt;reverse_view&lt;V&gt;&gt;
}}
{{dcl|num=2|since=c++20|1=
namespace views {
    inline constexpr /* unspecified */ reverse = /* unspecified */;
}
}}
{{dcl h|Call signature}}
{{dcl|since=c++20|1=
template&lt; ranges::viewable_range R &gt;
    requires /* see below */
constexpr ranges::view auto reverse( R&amp;&amp; r );
}}
{{dcl end}}

@1@ A range adaptor that represents a view of underlying {{lconcept|view}} with reversed order.
@2@ {{named req|RangeAdaptorObject}}. The expression {{c|views::reverse(e)}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to one of the following expressions, except that {{c|e}} is evaluated only once:
* {{c|e.base()}}, if the type of {{tt|e}} is a (possibly cv-qualified) specialization of {{tt|reverse_view}};
* otherwise, if the type of {{c|e}} is (possibly cv-qualified) {{c|ranges::subrange&lt;std::reverse_iterator&lt;I&gt;, std::reverse_iterator&lt;I&gt;, K&gt;}} for some iterator type {{tt|I}} and value {{tt|K}} of type {{tt|ranges::subrange_kind}}:
:* {{c|ranges::subrange&lt;I, I, K&gt;(e.end().base(), e.begin().base(), e.size())}}, if {{tt|K}} is {{tt|ranges::subrange_kind::sized}};
:* otherwise {{c|ranges::subrange&lt;I, I, K&gt;(e.end().base(), e.begin().base())}};
* otherwise {{c|ranges::reverse_view{e}&lt;!----&gt;}}.
In other words, {{tt|views::reverse}} unwraps reversed views if possible.

A {{tt|reverse_view}} always models {{lconcept|bidirectional_range}} and {{lconcept|common_range}}, and it models {{lconcept|borrowed_range}}, {{lconcept|sized_range}}, or {{lconcept|random_access_range}} if the underlying view type {{tt|V}} models the corresponding concept.

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc expos mem obj|base_|private=yes|The underlying view of type {{tt|V}}.}}
{{dsc expos mem obj|cached_end_|private=yes|An [[cpp/ranges#Non-propagating cache|optional-like]] cache object that holds either no value or the end iterator/position of the underlying view, which exists only if the underlying view type {{tt|V}} does not model {{lconcept|common_range}}.}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|{{PAGENAME}}#constructor|constructs a {{tt|reverse_view}}}}
{{dsc mem fun|{{PAGENAME}}#base|title=base|returns the underlying view {{tt|V}}}}
{{dsc mem fun|{{PAGENAME}}#begin|title=begin|returns the beginning iterator of the {{tt|reverse_view}}}}
{{dsc mem fun|{{PAGENAME}}#end|title=end|returns the end iterator of the {{tt|reverse_view}}}}
{{dsc mem fun|{{PAGENAME}}#size|title=size|returns the size of the view if it is bounded}}

{{cpp/ranges/view_interface/inherit|embedded=yes|size=yes|data=invalid}}
{{dsc end}}

{{anchor|constructor}}
{{member|{{small|std::ranges::reverse_view::}}reverse_view|
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
reverse_view() requires std::default_initializable&lt;V&gt; = default;&lt;!--P2325R3--&gt;
}}
{{dcl|num=2|since=c++20|
constexpr reverse_view( V r );
}}
{{dcl end}}

@1@ Value-initializes {{tti|base_}} via its default member initializer ({{c|1== V()}}).
@2@ Initializes {{tti|base_}} with {{c|std::move(r)}}.

===Parameters===
{{par begin}}
{{par|r|range to reverse}}
{{par end}}
}}

{{anchor|base}}
{{member|{{small|std::ranges::reverse_view::}}base|
{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr V base() const&amp; requires std::copy_constructible&lt;V&gt;;
}}
{{dcl|num=2|since=c++20|
constexpr V base() &amp;&amp;;
}}
{{dcl end}}

Returns the underlying view.
@1@ Copy-constructs the result from the underlying view. Equivalent to {{c|return base_;}}.
@2@ Move-constructs the result from the underlying view. Equivalent to {{c|return std::move(base_);}}.
}}

{{anchor|begin}}
{{member|{{small|std::ranges::reverse_view::}}begin|
{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr std::reverse_iterator&lt;ranges::iterator_t&lt;V&gt;&gt; begin();
}}
{{dcl|num=2|since=c++20|
constexpr std::reverse_iterator&lt;ranges::iterator_t&lt;V&gt;&gt; begin()
    requires ranges::common_range&lt;V&gt;;
}}
{{dcl|num=3|since=c++20|
constexpr auto begin() const requires ranges::common_range&lt;const V&gt;;
}}
{{dcl end}}

@1@ Returns {{c|std::make_reverse_iterator(ranges::next(ranges::begin(base_), ranges::end(base_)))}}. In order to provide the amortized constant time complexity required by the {{lconcept|range}} concept, this function caches the result within the cache object for use on subsequent calls.
@2,3@ Equivalent to {{c|return std::make_reverse_iterator(ranges::end(base_));}}.
}}

{{anchor|end}}
{{member|{{small|std::ranges::reverse_view::}}end|
{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr std::reverse_iterator&lt;ranges::iterator_t&lt;V&gt;&gt; end();
}}
{{dcl|num=2|since=c++20|
constexpr auto end() const requires ranges::common_range&lt;const V&gt;;
}}
{{dcl end}}
Equivalent to {{c|return std::make_reverse_iterator(ranges::begin(base_));}}.
}}

{{anchor|size}}
{{member|{{small|std::ranges::reverse_view::}}size|
{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr auto size() requires ranges::sized_range&lt;V&gt;;
}}
{{dcl|num=2|since=c++20|
constexpr auto size() const requires ranges::sized_range&lt;const V&gt;;
}}
{{dcl end}}

Returns the size of the view if the view is bounded.

@1,2@ Equivalent to {{c|return ranges::size(base_);}}.
}}

===Deduction guides===
{{ddcl|since=c++20|
template&lt; class R &gt;
reverse_view( R&amp;&amp; ) -&gt; reverse_view&lt;views::all_t&lt;R&gt;&gt;;
}}

===Helper templates===
{{ddcl|since=c++20|1=
template&lt; class T &gt;
constexpr bool enable_borrowed_range&lt;std::ranges::reverse_view&lt;T&gt;&gt; =
    ranges::enable_borrowed_range&lt;T&gt;;
}}
This specialization of {{ltt|cpp/ranges/borrowed_range|std::ranges::enable_borrowed_range}} makes {{tt|reverse_view}} satisfy {{lconcept|borrowed_range}} when the underlying view satisfies it.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;

int main()
{
    static constexpr auto il = {3, 1, 4, 1, 5, 9};

    std::ranges::reverse_view rv{il};
    for (int i : rv)
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    for (int i : il {{!}} std::views::reverse)
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    // operator[] is inherited from std::view_interface
    for (auto i{0U}; i != rv.size(); ++i)
        std::cout &lt;&lt; rv[i] &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
9 5 1 4 1 3
9 5 1 4 1 3
9 5 1 4 1 3
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3494|std=c++20|before={{tt|reverse_view}} was never a {{tt|borrowed_range}}|after=it is a {{tt|borrowed_range}} if its underlying view is}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc reverse_iterator}}
{{dsc inc|cpp/algorithm/ranges/dsc reverse}}
{{dsc inc|cpp/algorithm/ranges/dsc reverse_copy}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
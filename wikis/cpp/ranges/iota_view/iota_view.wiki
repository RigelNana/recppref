{{cpp/ranges/iota_view/title|iota_view}}
{{cpp/ranges/iota_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++20|1=
iota_view() requires std::default_initializable&lt;W&gt; = default;
}}
{{dcl|num=2|since=c++20|
constexpr explicit iota_view( W value );
}}
{{dcla|num=3|since=c++20|
constexpr explicit iota_view( std::type_identity_t&lt;W&gt; value,
                              std::type_identity_t&lt;Bound&gt; bound );
}}
{{dcla|num=4|since=c++20|
constexpr explicit iota_view( /*iterator*/ first, /* see below */ last );
}}
{{dcl end}}

Constructs an {{rlpt|/|iota_view}}.

{|class="wikitable" style="text-align: center;"
!rowspan=2|{{nbsp}}Overload{{nbsp}}
!colspan=2|{{rlps|/#Data members}}
|-
!{{ttni|value_}}
!{{ttni|bound_}}
|-
|{{v|1}}
|[[cpp/language/value initialization|value-initialized]]
|rowspan=2|[[cpp/language/value initialization|value-initialized]]
|-
|{{v|2}}
|rowspan=2|initialized with {{c|value}}
|-
|{{v|3}}
|{{nbsp}}initialized with {{c|bound}}{{nbsp}}
|-
|{{v|4}}
|{{nbsp}}initialized with {{box|{{c/core|first.}}{{rlpsi|iterator#value_}}}}{{nbsp}}
|see below
|}

@2,3@ If any of the following conditions is satisfied, the behavior is undefined:
* {{c|Bound()}} is unreachable from {{c|value}}, unless {{tt|Bound}} denotes {{lc|std::unreachable_sentinel_t}}.
* {{tt|W}} and {{tt|Bound}} model {{lconcept|totally_ordered_with}}, and {{c|1=bool(value &lt;= bound)}} is {{c|false}}.

@4@ If any of the following conditions is satisfied, the behavior is undefined:
* {{c|Bound()}} is unreachable from {{c|value}}, unless {{tt|Bound}} denotes {{lc|std::unreachable_sentinel_t}}.
* {{tt|W}} and {{tt|Bound}} model {{lconcept|totally_ordered_with}}, and {{box|{{c/core|bool(first.}}{{rlpsi|iterator#value_}}{{nbspt}}{{c/core|1=&lt;= bound)}}}} is {{c|false}}.
@@ The type of {{c|last}} and the method of initializing {{rlpsi|/#bound_}} are determined by the type {{tt|Bound}} denotes:
{|class="wikitable" style="text-align: center;"
!The type {{ttn|Bound}} denotes
!{{nbsp}}The type of {{normal|{{c|last}}}}{{nbsp}}
!{{normal|{{rlpsi|/#bound_}}}}
|-
|{{tt|W}}
|{{rlpi|iterator}}
|{{nbsp}}initialized with {{box|{{c/core|last.}}{{rlpsi|iterator#value_}}}}{{nbsp}}
|-
|{{nbsp}}{{lc|std::unreachable_sentinel_t}}{{nbsp}}
|{{tt|Bound}}
|initialized with {{c|last}}
|-
|any other type
|{{rlpi|sentinel}}
|initialized with {{box|{{c/core|last.}}{{rlpsi|sentinel#bound_}}}}
|}

===Parameters===
{{par begin}}
{{par|value|the starting value}}
{{par|bound|the bound}}
{{par|first|the iterator denoting the starting value}}
{{par|last|the iterator or sentinel denoting the bound}}
{{par end}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;ranges&gt;

int main()
{
    const auto l = {1, 2, 3, 4};
    
    auto i1 = std::ranges::iota_view&lt;int, int&gt;(); // overload (1)
    assert(i1.empty() and i1.size() == 0);
    
    auto i2 = std::ranges::iota_view(1); // overload (2)
    assert(not i2.empty() and i2.front() == 1);
    for (std::cout &lt;&lt; "1) "; auto e : i2 {{!}} std::views::take(3))
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    auto i3 = std::ranges::iota_view(std::begin(l)); // overload (2)
    assert(not i3.empty() and i3.front() == l.begin());
    for (std::cout &lt;&lt; "2) "; auto e : i3 {{!}} std::views::take(4))
        std::cout &lt;&lt; *e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    auto i4 = std::ranges::iota_view(1, 8); // overload (3)
    assert(not i4.empty() and i4.front() == 1 and i4.back() == 7);
    for (std::cout &lt;&lt; "3) "; auto e : i4)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    auto i5 = std::ranges::iota_view(l.begin(), l.end()); // overload (4)
    for (std::cout &lt;&lt; "4) "; auto e : i5)
        std::cout &lt;&lt; *e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    auto i6 = std::ranges::iota_view(l.begin(), std::unreachable_sentinel); // (4)
    for (std::cout &lt;&lt; "5) "; auto e : i6 {{!}} std::views::take(3))
        std::cout &lt;&lt; *e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
1) 1 2 3
2) 1 2 3 4
3) 1 2 3 4 5 6 7
4) 1 2 3 4
5) 1 2 3
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3523|std=C++20|before=overload {{v|4}} might use wrong sentinel type|after=corrected}}
{{dr list item|paper=P2711R1|std=C++20|before=overloads {{v|3,4}} were not explicit|after=made explicit}}
{{dr list end}}

{{langlinks|de|es|ja|ru|zh}}
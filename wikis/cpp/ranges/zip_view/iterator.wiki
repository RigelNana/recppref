{{cpp/ranges/zip_view/title|''iterator''}}
{{cpp/ranges/zip_view/navbar}}
{{dcl begin}}
{{dcla|anchor=no|expos=yes|
template&lt; bool Const &gt;
class /*iterator*/;
}}
{{dcl end}}

The iterator type of a possibly const-qualified {{tt|zip_view}}, returned by {{rlpt|begin|zip_view::begin}} and in certain cases by {{rlpt|end|zip_view::end}}.

The type {{c|/*iterator*/&lt;true&gt;}} or {{c|/*iterator*/&lt;false&gt;}} treats the underlying views as const-qualified or non-const-qualified respectively.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|iterator_concept}}|
* {{lc|std::random_access_iterator_tag}} if {{box|{{lsi|cpp/ranges#all-random-access}}{{c/core|&lt;Const, Views...&gt;}}}} is {{c|true}}, otherwise
* {{lc|std::bidirectional_iterator_tag}} if {{box|{{lsi|cpp/ranges#all-bidirectional}}{{c/core|&lt;Const, Views...&gt;}}}} is {{c|true}}, otherwise
* {{lc|std::forward_iterator_tag}} if {{box|{{lsi|cpp/ranges#all-forward}}{{c/core|&lt;Const, Views...&gt;}}}} is {{c|true}}, otherwise
* {{lc|std::input_iterator_tag}}.}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{mark cond present}}|
* {{lc|std::input_iterator_tag}} if {{box|{{lsi|cpp/ranges#all-forward}}{{c/core|&lt;Const, Views...&gt;}}}} is {{c|true}},
* not defined otherwise.}}
{{dsc|{{tt|value_type}}|
* {{c|std::tuple&lt;ranges::range_value_t&lt;Views&gt;...&gt;}} if {{tt|Const}} is {{c|false}},
* {{c|std::tuple&lt;ranges::range_value_t&lt;const Views&gt;...&gt;}} otherwise.}}
{{dsc|{{tt|difference_type}}|
* {{c|std::common_type_t&lt;ranges::range_difference_t&lt;Views&gt;...&gt;}} if {{tt|Const}} is {{c|false}},
* {{c|std::common_type_t&lt;ranges::range_difference_t&lt;const Views&gt;...&gt;}} otherwise.}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc expos mem obj|current_|private=yes|
* {{c|std::tuple&lt;ranges::iterator_t&lt;Views&gt;...&gt;}} if {{tt|Const}} is {{c|false}}, or
* {{c|std::tuple&lt;ranges::iterator_t&lt;const Views&gt;...&gt;}} otherwise.}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/zip_view/iterator/iterator|constructs an iterator}}
{{dsc mem fun|cpp/ranges/zip_view/iterator/operator*|obtains a tuple-like value that consists of underlying pointed-to elements}}
{{dsc mem fun|cpp/ranges/zip_view/iterator/operator_at|title=operator[]|obtains a tuple-like value that consists of underlying elements at given offset}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|zip_view}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc fun|cpp/ranges/zip_view/iterator/operator_cmp|title=operator==&lt;br&gt;operator&lt;&lt;br&gt;operator&gt;&lt;br&gt;operator&lt;=&lt;br&gt;operator&gt;=&lt;br&gt;operator&lt;=&gt;|compares the underlying iterators|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/zip_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|performs iterator arithmetic on underlying iterators|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/zip_view/iterator/iter_move|obtains a tuple-like value that denotes underlying pointed-to elements to be moved|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/zip_view/iterator/iter_swap|swaps underlying pointed-to elements|notes={{mark c++23}}}}
{{dsc end}}

===Example===
{{example}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
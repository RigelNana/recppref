{{title|1= operator=={{small|(ranges::zip_view::''iterator'', ranges::zip_view::''sentinel'')}}}}
{{cpp/ranges/zip_view/navbar}}

{{dcl begin}}
{{dcl|since=c++23|1=
template&lt; bool OtherConst &gt;
    requires (std::sentinel_for&lt;
        ranges::sentinel_t&lt;/*maybe-const*/&lt;Const, Views&gt;&gt;,
        ranges::iterator_t&lt;/*maybe-const*/&lt;OtherConst, Views&gt;&gt;&gt; &amp;&amp; ...)
friend constexpr bool operator==( const /*iterator*/&lt;OtherConst&gt;&amp; x,
                                  const /*sentinel*/&amp; y  );
}}
{{dcl end}}

Compares the underlying tuple of iterators of {{c|x}} with the underlying tuple of sentinels of {{c|y}}.

{{cpp/hidden friend|{{tt|zip_view::''sentinel''&lt;Const&gt;}}}}

{{cpp/note synthesized eq}}

===Parameters===
{{par begin}}
{{par|x|{{lt|cpp/ranges/zip_view/iterator}} to compare}}
{{par|y|{{lt|cpp/ranges/zip_view/sentinel}} to compare}}
{{par end}}

===Return value===
Let {{c|x.current_}} denote the underlying tuple of iterators, and {{c|y.end_}} denote the underlying tuple of sentinels.

Returns
* {{c|true}} if at least one underlying iterator, obtained by expression equivalent to {{c|std::get&lt;i&gt;(x.current_)}}, evaluates equal (using an appropriate {{c|1= operator==}}) to some underlying sentinel, obtained by expression equivalent to {{c|std::get&lt;i&gt;(y.end_)}}, for some index {{tt|i}} in ranges {{tt|1= 0 &lt;= i &lt; sizeof...(Views)}},
* {{c|false}} otherwise.

===Example===
{{example
|code=
|output=
}}

{{langlinks|es|ja|ru|zh}}
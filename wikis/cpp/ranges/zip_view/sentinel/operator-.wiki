{{title|operator-{{small|(ranges::zip_view::''sentinel'')}}}}
{{cpp/ranges/zip_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|
template&lt; bool OtherConst &gt;
    requires (std::sized_sentinel_for&lt;
                ranges::sentinel_t&lt;/*maybe-const*/&lt;Const, Views&gt;&gt;,
                ranges::iterator_t&lt;/*maybe-const*/&lt;OtherConst, Views&gt;&gt;&gt; &amp;&amp; ...)
friend constexpr
    std::common_type_t&lt;ranges::range_difference_t&lt;/*maybe-const*/&lt;OtherConst, Views&gt;&gt;...&gt;
operator-( const iterator&lt;OtherConst&gt;&amp; x, const sentinel&amp; y );
}}
{{dcl|num=2|since=c++23|
template&lt; bool OtherConst &gt;
    requires (std::sized_sentinel_for&lt;
                ranges::sentinel_t&lt;/*maybe-const*/&lt;Const, Views&gt;&gt;,
                ranges::iterator_t&lt;/*maybe-const*/&lt;OtherConst, Views&gt;&gt;&gt; &amp;&amp; ...)
friend constexpr
    std::common_type_t&lt;ranges::range_difference_t&lt;/*maybe-const*/&lt;OtherConst, Views&gt;&gt;...&gt;
operator-( const sentinel&amp; y, const iterator&lt;OtherConst&gt;&amp; x );
}}
{{dcl end}}

Computes the minimal distance between the underlying tuple of iterators of {{c|x}} and the underlying tuple of sentinels of {{c|y}}.

{{cpp/hidden friend|{{tt|zip_view::''sentinel''&lt;Const&gt;}}|plural=yes}}

===Parameters===
{{par begin}}
{{par|x|an {{lt|cpp/ranges/zip_view/iterator}}}}
{{par|y|a {{lt|cpp/ranges/zip_view/sentinel}}}}
{{par end}}

===Return value===
Let {{tti|current_}} denote the underlying tuple of iterators of {{c|x}}, and {{tti|end_}} denote the underlying tuple of sentinels of {{c|y}}.

Let {{tt|''DIST''(x, y, i)}} be a distance calculated by expression equivalent to {{c|std::get&lt;i&gt;(x.current_) - std::get&lt;i&gt;(y.end_)}} for some integer {{tt|i}}.

@1@ the value with the smallest absolute value among {{tt|''DIST''(x, y, i)}} of all {{tt|i}} in range {{tt|0 â‰¤ i &lt; sizeof...(Views)}}
@2@ {{c|1= -(x - y)}}.

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;deque&gt;
#include &lt;list&gt;
#include &lt;ranges&gt;
#include &lt;vector&gt;

int main()
{
    auto x = std::vector{1, 2, 3, 4};
    auto y = std::deque{'a', 'b', 'c'};
    auto z = {1.1, 2.2};
    auto w = std::list{1, 2, 3};

    auto p = std::views::zip(x, y, z);
    assert(p.begin() - p.end() == +2);
    assert(p.end() - p.begin() == -2);

    [[maybe_unused]]
    auto q = std::views::zip(x, y, w);

    // The following code fires a compile-time error because std::list::iterator
    // does not support operator- that is needed to calculate the distance:
    // auto e = q.begin() - q.end();
}
}}

{{langlinks|de|es|ja|ru|zh}}
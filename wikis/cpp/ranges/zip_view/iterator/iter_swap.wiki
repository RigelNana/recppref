{{title|iter_swap{{small|(ranges::zip_view::''iterator'')}}}}
{{cpp/ranges/zip_view/navbar}}
{{ddcl|since=c++23|
friend constexpr void iter_swap( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    noexcept(/* see below */)
        requires (std::indirectly_swappable&lt;ranges::iterator_t&lt;
            /*maybe-const*/&lt;Const, Views&gt;&gt;&gt; &amp;&amp; ...);
}}

Performs {{c|ranges::iter_swap(std::get&lt;i&gt;(x.current_), std::get&lt;i&gt;(y.current_))}} for every integer {{tt|i}} in {{range|0|sizeof...(Views)}}, where {{tti|current_}} denotes the underlying tuple-like object that holds iterators to elements of adapted views.

{{cpp/hidden friend|{{tt|zip_view::''iterator''&lt;Const&gt;}}}}

===Parameters===
{{par begin}}
{{par|x, y|iterators to the elements to swap}}
{{par end}}

===Return value===
(none)

===Exceptions===
{{noexcept|
  (noexcept(ranges::iter_swap(
    declval&lt;const ranges::iterator_t&lt;/*maybe-const*/&lt;Const, Views&gt;&gt;&amp;&gt;(),
    declval&lt;const ranges::iterator_t&lt;/*maybe-const*/&lt;Const, Views&gt;&gt;&amp;&gt;())) &amp;&amp;...)}}

{{langlinks|de|es|fr|ja|ru|zh}}
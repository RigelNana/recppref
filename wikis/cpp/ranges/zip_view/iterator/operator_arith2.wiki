{{title|operator+,-{{small|(ranges::zip_view::''iterator'')}}}}
{{cpp/ranges/zip_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|1=
friend constexpr /*iterator*/ operator+( const /*iterator*/&amp; i, difference_type n )
    requires /*all-random-access*/&lt;Const, Views...&gt;;
}}
{{dcl|num=2|since=c++23|1=
friend constexpr /*iterator*/ operator+( difference_type n, const /*iterator*/&amp; i )
    requires /*all-random-access*/&lt;Const, Views...&gt;;
}}
{{dcl|num=3|since=c++23|1=
friend constexpr /*iterator*/ operator-( const /*iterator*/&amp; i, difference_type n )
    requires /*all-random-access*/&lt;Const, Views...&gt;;
}}
{{dcl|num=4|since=c++23|1=
friend constexpr difference_type operator-( const /*iterator*/&amp; i,
                                            const /*iterator*/&amp; j )
    requires (std::sized_sentinel_for&lt;
                  ranges::iterator_t&lt;/*maybe-const*/&lt;Const, Views&gt;&gt;,
                  ranges::iterator_t&lt;/*maybe-const*/&lt;Const, Views&gt;&gt;&gt;
                  and ...);
}}
{{dcl end}}

Let {{tti|current_}} denote the underlying ''tuple-like'' object of iterators to elements of adapted views.

@1,2@ Returns the iterator {{c|i}} incremented by {{c|n}}. Equivalent to:
{{c|1= auto r = i; r += n; return r;}}.
@3@ Returns the iterator {{c|i}} decremented by {{c|n}}. Equivalent to:
{{c|1= auto r = i; r -= n; return r;}}.
@4@ Let {{tti|DIST(k)}} be {{c|1=difference_type(std::get&lt;k&gt;(i.current_) - std::get&lt;k&gt;(j.current_))}}. Returns the smallest absolute value among {{tti|DIST(n)}} for all integers {{c|1=0 &lt;= n &lt; sizeof...(Views)}}.

{{cpp/hidden friend|{{tt|zip_view::''iterator''&lt;Const&gt;}}|plural=yes}}

===Parameters===
{{par begin}}
{{par|i, j|the iterators.}}
{{par|n|position relative to current location.}}
{{par end}}

===Return value===
@1,2@ a copy of {{c|i}} that is advanced by {{c|n}}
@3@ a copy of {{c|i}} that is advanced by {{c|-n}}
@4@ the distance between {{c|i}} and {{c|j}}

===Example===
{{example
|code=
|output=
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|zip_view}}
{{dsc end}}

{{langlinks|de|es|fr|ja|ru|zh}}
{{title|iter_move{{small|(ranges::zip_view::''iterator'')}}}}
{{cpp/ranges/zip_view/navbar}}
{{ddcl|since=c++23|
friend constexpr auto iter_move( const iterator&amp; i ) noexcept(/* see below */);
}}

Equivalent to: {{c|return /*tuple-transform*/(ranges::iter_move, i.current_);}}, where {{rlpi|/#Data members|current_}} denotes the underlying tuple-like object that holds iterators to elements of adapted views.

{{cpp/hidden friend|{{tt|zip_view::''iterator''&lt;Const&gt;}}}}

===Parameters===
{{par begin}}
{{par|i|iterator}}
{{par end}}

===Return value===
{{c|std::move(*i)}} if {{c|*i}} is an lvalue reference, otherwise {{c|*i}}

===Exceptions===
{{noexcept|
    (
        noexcept
        (
            ranges::iter_move
            (
                declval&lt;const ranges::iterator_t&lt;/*maybe-const*/&lt;Const, Views&gt;&gt;&amp;&gt;()
            )
        )
        and ...
    )
    and
    (
        std::is_nothrow_move_constructible_v
        &lt;
            ranges::range_rvalue_reference_t&lt;/*maybe-const*/&lt;Const, Views&gt;&gt;
        &gt;
        and ...
    )
}}

{{langlinks|de|es|fr|ja|ru|zh}}
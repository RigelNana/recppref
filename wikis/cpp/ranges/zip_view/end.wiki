{{cpp/ranges/zip_view/title|end}}
{{cpp/ranges/zip_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
constexpr auto end()
    requires (!(/*simple-view*/&lt;Views&gt; &amp;&amp; ...);
}}
{{dcl|num=2|since=c++23|1=
constexpr auto end() const
    requires (ranges::range&lt;const Views&gt; &amp;&amp; ...);
}}
{{dcl|num=3|notes={{mark expos}}|1=
template&lt; class... Rs &gt;
concept /*zip-is-common*/ =
    (sizeof...(Rs) == 1 &amp;&amp; (ranges::common_range&lt;Rs&gt; &amp;&amp; ...))
    {{!!}}
    (!(ranges::bidirectional_range&lt;Rs&gt; &amp;&amp; ...) &amp;&amp; (ranges::common_range&lt;Rs&gt; &amp;&amp; ...))
    {{!!}}
    ((ranges::random_access_range&lt;Rs&gt; &amp;&amp; ...) &amp;&amp; (ranges::sized_range&lt;Rs&gt; &amp;&amp; ...));
}}
{{dcl end}}

Returns an {{rlp|iterator}} or a {{rlp|sentinel}} that compares equal to the end iterator of the {{rlpt|/|zip_view}}.

Let {{rlpi|/#Data members|views_}} denote the underlying tuple of views.

@1@ Equivalent to:
* {{c|return /*sentinel*/&lt;false&gt;(/*tuple-transform*/(ranges::end, views_));}},
: if {{c|/*zip-is-common*/&lt;Views...&gt;}} evaluates to {{c|false}}. Otherwise,
* {{c|return begin() + std::iter_difference_t&lt;/*iterator*/&lt;false&gt;&gt;(size());}},
: if {{c|(ranges::random_access_range&lt;Views&gt; &amp;&amp; ...)}} evaluates to {{c|true}}. Otherwise,
* {{c|return /*iterator*/&lt;false&gt;(/*tuple-transform*/(ranges::end, views_));}}.
    
@2@ Equivalent to:
* {{c|return /*sentinel*/&lt;true&gt;(/*tuple-transform*/(ranges::end, views_));}},
: if {{c|/*zip-is-common*/&lt;const Views...&gt;}} evaluates to {{c|false}}. Otherwise,
* {{c|return begin() + std::iter_difference_t&lt;/*iterator*/&lt;true&gt;&gt;(size());}},
: if {{c|ranges::random_access_range&lt;const Views&gt; &amp;&amp; ...}} evaluates to {{c|true}}. Otherwise,
* {{c|return /*iterator*/&lt;true&gt;(/*tuple-transform*/(ranges::end, views_));}}.

===Parameters===
(none)

===Return value===
An iterator or sentinel representing the end of the {{tt|zip_view}}, as described above.

===Notes===
{{c|ranges::range&lt;const ranges::zip_view&lt;Views...&gt;&gt;}} is modeled if and only if for every type {{tt|Vi}} in {{tt|Views...}}, {{c|const Vi}} models {{lconcept|range}}.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|zip_view}}
{{dsc inc|cpp/ranges/dsc end}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/ranges/view title|repeat}}
{{cpp/ranges/repeat_view/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++23|1=
template&lt; std::move_constructible W,
          std::semiregular Bound = std::unreachable_sentinel_t &gt;
    requires (std::is_object_v&lt;W&gt; &amp;&amp; std::same_as&lt;W, std::remove_cv_t&lt;W&gt;&gt; &amp;&amp;
             (/*integer-like-with-usable-difference-type*/&lt;Bound&gt; {{!!}}
              std::same_as&lt;Bound, std::unreachable_sentinel_t&gt;))
class repeat_view : public ranges::view_interface&lt;repeat_view&lt;W, Bound&gt;&gt;
}}
{{dcl|num=2|since=c++23|1=
namespace views {
    inline constexpr /* unspecified */ repeat = /* unspecified */;
}
}}
{{dcl h|Call signature}}
{{dcl|since=c++23|
template&lt; class W &gt;
    requires /* see below */
constexpr /* see below */ repeat( W&amp;&amp; value );
}}
{{dcl|since=c++23|
template&lt; class W, class Bound &gt;
    requires /* see below */
constexpr /* see below */ repeat( W&amp;&amp; value, Bound&amp;&amp; bound );
}}
{{dcl h|Helper concepts}}
{{dcla|num=3|expos=yes|1=
concept /*integer-like-with-usable-difference-type*/ =
    /*is-signed-integer-like*/&lt;T&gt; {{!!}}
    (/*is-integer-like*/ &lt;T&gt; &amp;&amp; std::weakly_incrementable&lt;T&gt;)
}}
{{dcl end}}

@1@ A range factory that generates a sequence of elements by repeatedly producing the same value. Can be either bounded or unbounded (infinite).

@2@ {{c|views::repeat(e)}} and {{c|views::repeat(e, f)}} are [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to {{c|repeat_view&lt;std::decay_t&lt;decltype((E))&gt;&gt;(e)}} and {{c|repeat_view(e, f)}} respectively for any suitable subexpressions {{c|e}} and {{c|f}}.

@3@ Determines whether a type is [[cpp/iterator/is-integer-like|integer-like]] and has a usable [[cpp/iterator#Types and writability|difference type]].

{{tt|repeat_view}} models {{lconcept|random_access_range}}. If {{tt|Bound}} is not {{lc|std::unreachable_sentinel_t}}, {{tt|repeat_view}} also models {{lconcept|sized_range}} and {{lconcept|common_range}}.

{{cpp/ranges/cpo|views|repeat}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member|Definition}}
{{dsc expos mem obj|spec={{rlpi|copyable_wrapper|movable-box}}{{sep}}{{c/core|&lt;W&gt;}}|value_|id=value|the repeating element of the view}}
{{dsc expos mem obj|spec={{tt|Bound}}|bound_|id=bound|the sentinel value}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|{{PAGENAME}}#ctor|creates a {{tt|repeat_view}}}}
{{dsc mem fun|title=begin|{{PAGENAME}}#begin|obtains the beginning iterator of a {{ttt|repeat_view}}}}
{{dsc mem fun|title=end|{{PAGENAME}}#end|obtains the sentinel denoting the end of a {{ttt|repeat_view}}}}
{{dsc mem fun|title=size|{{PAGENAME}}#size|obtains the size of a {{ttt|repeat_view}} if it is sized}}

{{cpp/ranges/view_interface/inherit|embedded=yes|data=invalid|size=yes}}
{{dsc end}}

{{anchor|ctor}}
{{member|{{small|std::ranges::repeat_view::}}repeat_view|2=
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
repeat_view() requires std::default_initializable&lt;W&gt; = default;
}}
{{dcl|num=2|since=c++23|1=
constexpr explicit repeat_view( const W&amp; value, Bound bound = Bound() );
}}
{{dcl|num=3|since=c++23|1=
constexpr explicit repeat_view( W&amp;&amp; value, Bound bound = Bound() );
}}
{{dcl|num=4|since=c++23|1=
template &lt; class... WArgs, class... BoundArgs &gt;
    requires std::constructible_from&lt;W, WArgs...&gt;
          &amp;&amp; std::constructible_from&lt;Bound, BoundArgs...&gt;
constexpr explicit
    repeat( std::piecewise_construct_t, std::tuple&lt;WArgs...&gt; value_args,
            std::tuple&lt;BoundArgs...&gt; bound_args = std::tuple&lt;&gt;{} );
}}
{{dcl end}}

@1@ Default-initializes {{lsi|#value_}} and value-initializes {{lsi|#bound_}}{{sep}}.

@2@ Initializes {{lsi|#value_}} with {{c|value}} and initializes {{lsi|#bound_}} with {{c|bound}}.
@@ If {{tt|Bound}} is not {{lc|std::unreachable_sentinel_t}} and {{c|1=bool(bound &gt;= 0)}} is {{c|false}}, the behavior is undefined.

@3@ Initializes {{lsi|#value_}} with {{c|std::move(value)}} and initializes {{lsi|#bound_}} with {{c|bound}}.
@@ If {{tt|Bound}} is not {{lc|std::unreachable_sentinel_t}} and {{c|1=bool(bound &gt;= 0)}} is {{c|false}}, the behavior is undefined.

@4@ Initializes {{lsi|#value_}} with {{c|std::make_from_tuple&lt;T&gt;(std::move(value_args))}} and {{lsi|#bound_}} with {{c|std::make_from_tuple&lt;Bound&gt;(std::move(bound_args))}}.
@@ If {{tt|Bound}} is not {{lc|std::unreachable_sentinel_t}} and {{c|1=bool(bound &gt;= 0)}} is {{c|false}}, the behavior is undefined.

===Parameters===
{{par begin}}
{{par|value|the value to be repeatedly produced}}
{{par|bound|the bound}}
{{par|value_args|the tuple containing the initializers of {{lsi|#value_}}}}
{{par|bound_args|the tuple containing the initializers of {{lsi|#bound_}}}}
{{par end}}
}}

{{anchor|begin}}
{{member|{{small|std::ranges::repeat_view::}}begin|2=
{{ddcl|since=c++23|
constexpr /*iterator*/ begin() const;
}}

Returns {{box|{{rli|iterator}}{{sep}}{{c/core|(std::addressof(*}}{{lsi|#value_}}{{sep}}{{c/core|))}}}}.
}}

{{anchor|end}}
{{member|{{small|std::ranges::repeat_view::}}end|2=
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr /*iterator*/ end() const
    requires (!std::same_as&lt;Bound, std::unreachable_sentinel_t&gt;);
}}
{{dcl|num=2|since=c++23|
constexpr std::unreachable_sentinel_t end() const;
}}
{{dcl end}}

@1@ Returns {{box|{{rli|iterator}}{{sep}}{{c/core|(std::addressof(*}}{{lsi|#value_}}{{sep}}{{c/core|),}}{{nbspt}}{{lsi|#bound_}}{{sep}}{{c/core|)}}}}.

@2@ Returns {{c|std::unreachable_sentinel}}.
}}

{{anchor|size}}
{{member|{{small|std::ranges::repeat_view::}}size|2=
{{ddcl|since=c++23|
constexpr auto size() const
    requires (!std::same_as&lt;Bound, std::unreachable_sentinel_t&gt;);
}}

Returns {{box|{{rlpsi|/#to-unsigned-like}}{{sep}}{{c/core|(}}{{lsi|#bound_}}{{sep}}{{c/core|)}}}}.
}}

===Deduction guides===
{{dcl begin}}
{{dcl|since=c++23|1=
template&lt; class W, class Bound = std::unreachable_sentinel_t &gt;
repeat_view( W, Bound = Bound() ) -&gt; repeat_view&lt;W, Bound&gt;;
}}
{{dcl end}}

===Nested classes===
{{dsc begin}}
{{dsc expos mem class|cpp/ranges/repeat_view/iterator|the iterator type}}
{{dsc end}}

===Notes===
{{feature test macro|__cpp_lib_ranges_repeat|std=C++23|value=202207L|{{ttt|std::ranges::repeat_view}}}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string_view&gt;
using namespace std::literals;

int main()
{
    // bounded overload
    for (auto s : std::views::repeat("C++"sv, 3))
        std::cout &lt;&lt; s &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    // unbounded overload
    for (auto s : std::views::repeat("I know that you know that"sv)
                {{!}} std::views::take(3))
        std::cout &lt;&lt; s &lt;&lt; ' ';
    std::cout &lt;&lt; "...\n";
}
|output=
C++ C++ C++
I know that you know that I know that you know that I know that you know that ...
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=4053|std=C++20|before=unary calls to {{tt|views::repeat}} did not decay the argument|after=decay the argument}}
{{dr list item|wg=lwg|dr=4054|std=C++20|before=calling {{tt|views::repeat}} with a {{tt|repeat_view}}&lt;br&gt;did not create a nested {{tt|repeat_view}}|after=creates a nested&lt;br&gt;{{tt|repeat_view}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc iota_view}}
{{dsc end}}

{{langlinks|es|de|ja|ru|zh}}
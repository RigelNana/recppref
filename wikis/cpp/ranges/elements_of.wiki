{{cpp/ranges/title|elements_of}}
{{cpp/ranges/navbar}}

{{ddcl|header=ranges|since=c++23|1=
template&lt; ranges::range R, class Allocator = std::allocator&lt;std::byte&gt; &gt;
struct elements_of;
}}

Encapsulates a {{lconcept|range}}. Specializations of {{tt|elements_of}} act as a tag in overload sets to disambiguate when a range should be treated as a sequence rather than a single value.

===Template parameters===
{{par begin}}
{{par|R|a type that satisfies {{lconcept|range}}}}
{{par|Allocator|an allocator type that meets the requirements of {{named req|Allocator}}}}
{{par end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc mem obj|range|nolink=true|a range of type {{tt|R}}}}
{{dsc mem obj|allocator|nolink=true|an allocator of type {{tt|Allocator}}. It has default member initializer that value initializes itself}}
{{dsc end}}

All these members are declared with {{attr|no_unique_address}} attribute.

===Deduction guide===
{{ddcl|since=c++23|1=
template&lt; class R, class Allocator = std::allocator&lt;std::byte&gt; &gt;
elements_of( R&amp;&amp;, Allocator = Allocator() ) -&gt; elements_of&lt;R&amp;&amp;, Allocator&gt;;
}}

===Example===
{{example
|code=
#include &lt;any&gt;
#include &lt;generator&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string_view&gt;

template&lt;bool Elementwise&gt;
std::generator&lt;std::any&gt; gen(std::ranges::input_range auto&amp;&amp; r)
{
    if constexpr (Elementwise)
        co_yield std::ranges::elements_of(r); // yield each element of r
    else
        co_yield r;                           // yield r as a single value
}

int main()
{
    auto test = std::string_view{"test"};

    for (std::any a : gen&lt;true&gt;(test))
        std::cout &lt;&lt; '[' &lt;&lt; std::any_cast&lt;char&gt;(a) &lt;&lt; "] ";
    std::cout &lt;&lt; '\n';

    for (std::any a : gen&lt;false&gt;(test))
        std::cout &lt;&lt; '[' &lt;&lt; std::any_cast&lt;std::string_view&gt;(a) &lt;&lt; "] ";
    std::cout &lt;&lt; '\n';
}
|output=
[t] [e] [s] [t] 
[test]
}}

===References===
{{ref std c++23}}
{{ref std|title=Class template elements_of|id=range.elementsof|section=26.5.6}}
{{ref std end}}
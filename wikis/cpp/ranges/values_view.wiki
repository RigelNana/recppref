{{cpp/ranges/view title|values}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++20|1=
template&lt; class R &gt;
using values_view = ranges::elements_view&lt;R, 1&gt;;
}}
{{dcl|num=2|since=c++20|1=
namespace views {
    inline constexpr auto values = ranges::elements&lt;1&gt;;
}
}}
{{dcl end}}

Takes a {{lconcept|view}} of ''tuple-like'' values (e.g. {{lc|std::tuple}} or {{lc|std::pair}}), and produces a view with a ''value-type'' of the ''second'' element of the adapted view's value-type.

@1@ An alias for {{c|ranges::elements_view&lt;R, 1&gt;}}.

@2@ {{named req|RangeAdaptorObject}} (and also {{named req|RangeAdaptorClosureObject}}). The expression {{c|views::values(e)}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to {{c|values_view&lt;views::all_t&lt;decltype((e))&gt;&gt;{e} }} for any suitable subexpression {{c|e}}.

===Notes===
{{lc|values_view}} can be useful for extracting ''values'' from associative containers, e.g.
{{source|1=
std::map&lt;int, std::string&gt; map{{1, "alpha"}, {2, "beta"}};
for (auto const&amp; value : std::views::values(map))
    std::cout &lt;&lt; value &lt;&lt; ' ';
// prints: alpha beta
}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;ranges&gt;

int main()
{
    const auto list = {std::pair{1, 11.1}, {2, 22.2}, {3, 33.3}&lt;!----&gt;};
    std::cout &lt;&lt; "pair::second values in the list: ";
    for (double value : list {{!}} std::views::values)
        std::cout &lt;&lt; value &lt;&lt; ' ';

    std::map&lt;char, int&gt; map{&lt;!----&gt;{'A', 1}, {'B', 2}, {'C', 3}, {'D', 4}, {'E', 5}&lt;!----&gt;};
    auto odd = [](int x) { return 0 != (x &amp; 1); };
    std::cout &lt;&lt; "\nodd values in the map: ";
    for (int value : map {{!}} std::views::values {{!}} std::views::filter(odd))
        std::cout &lt;&lt; value &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
pair::second values in the list: 11.1 22.2 33.3
odd values in the map: 1 3 5
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3563|std=C++20|before={{tt|keys_view}} is unable to participate in CTAD due to its use of {{lc|views::all_t}}|after={{lc|views::all_t}} removed}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc keys_view}}
{{dsc inc|cpp/ranges/dsc elements_view}}
{{dsc inc|cpp/numeric/valarray/dsc slice}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
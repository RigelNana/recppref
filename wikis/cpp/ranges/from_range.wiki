{{cpp/title|from_range|from_range_t}}
{{cpp/ranges/navbar}}
{{dcl begin}}
{{dcl header|ranges}}
{{dcl|since=c++23|1=
struct from_range_t { explicit from_range_t() = default; };
}}
{{dcl|since=c++23|1=
inline constexpr std::from_range_t from_range {};
}}
{{dcl end}}

{{tt|std::from_range}} is a disambiguation tag that can be passed to the constructors of the suitable containers to indicate that the contained member is range constructed.

The corresponding type {{tt|std::from_range_t}} can be used in the constructor's parameter list to match the intended tag.

===Standard library===
The following standard library types use {{tt|std::from_range_t}} type in their constructors:

{{dsc begin}}
{{dsc h2|Containers library}}

{{dsc mem ctor|cpp/container/vector/vector|constructs the {{tt|vector}} from a range|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/inplace_vector/inplace_vector|constructs the {{tt|inplace_vector}} from a range|notes={{mark c++26}}}}
{{dsc mem ctor|cpp/container/deque/deque|constructs the {{tt|deque}} from a range|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/forward_list/forward_list|constructs the {{tt|forward_list}} from a range|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/list/list|constructs the {{tt|list}} from a range|notes={{mark c++23}}}}

{{dsc mem ctor|cpp/container/set/set|constructs the {{tt|set}} from a range|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/map/map|constructs the {{tt|map}} from a range|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/multiset/multiset|constructs the {{tt|multiset}} from a range|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/multimap/multimap|constructs the {{tt|multimap}} from a range|notes={{mark c++23}}}}

{{dsc mem ctor|cpp/container/unordered_set/unordered_set|constructs the {{tt|unordered_set}} from a range|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/unordered_map/unordered_map|constructs the {{tt|unordered_map}} from a range|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/unordered_multiset/unordered_multiset|constructs the {{tt|unordered_multiset}} from a range|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/unordered_multimap/unordered_multimap|constructs the {{tt|unordered_multimap}} from a range|notes={{mark c++23}}}}

{{dsc mem ctor|cpp/container/priority_queue/priority_queue|constructs the {{tt|priority_queue}} from a range|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/queue/queue|constructs the {{tt|queue}} from a range|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/stack/stack|constructs the {{tt|stack}} from a range|notes={{mark c++23}}}}

{{dsc mem ctor|cpp/container/flat_set/flat_set|constructs the {{tt|flat_set}} from a range|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/flat_map/flat_map|constructs the {{tt|flat_map}} from a range|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/flat_multiset/flat_multiset|constructs the {{tt|flat_multiset}} from a range|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/flat_multimap/flat_multimap|constructs the {{tt|flat_multimap}} from a range|notes={{mark c++23}}}}

{{dsc h2|Strings library}}
{{dsc mem ctor|cpp/string/basic_string/basic_string|constructs the {{tt|basic_string}} from a range|notes={{mark c++23}}}}
{{dsc end}}

===Notes===
{{feature test macro|__cpp_lib_containers_ranges|value=202202L|std=C++23|Tagged constructors to construct from {{ls|cpp/ranges/to#container compatible range}}}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;string&gt;

int main()
{
#ifdef __cpp_lib_containers_ranges
    auto const range = {0x43, 43, 43};
    std::string str{std::from_range, range}; // uses tagged constructor
    assert(str == "C++");
#endif
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc in_place}}
{{dsc inc|cpp/container/dsc sorted_equivalent}}
{{dsc inc|cpp/container/dsc sorted_unique}}
{{dsc inc|cpp/ranges/dsc to}}
{{dsc end}}
{{cpp/ranges/title|ssize}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl header|iterator}}
{{dcl|since=c++20|notes={{mark custpt}}|1=
inline namespace /* unspecified */ {
    inline constexpr /* unspecified */ ssize = /* unspecified */;
}
}}

{{dcl h|Call signature}}
{{dcl|since=c++20|
template&lt; class T &gt;
    requires /* see below */
constexpr auto ssize( T&amp;&amp; t );
}}
{{dcl end}}

Calculates the number of elements in {{c|t}} in constant time, and converts the result to a signed type.

Given the [[cpp/language/expressions#Full-expressions|subexpression]] of which {{c|t}} denotes the (possibly [[cpp/language/implicit conversion#Temporary materialization|materialized]]) result object as {{c|E}}:
* If {{c|ranges::size(t)}} is ill-formed, {{c|ranges::ssize(E)}} is also ill-formed.
* Otherwise, let {{tt|Signed}} be {{lsi|cpp/ranges#make-signed-like-t}}{{sep}}{{c/core|&lt;decltype(ranges::size(t))&gt;}}:
** If {{lc|std::ptrdiff_t}} is wider than {{tt|Signed}}, {{c|ranges::ssize(E)}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to {{c|static_cast&lt;std::ptrdiff_t&gt;(ranges::size(t))}}.
** Otherwise, {{c|ranges::ssize(E)}} is expression-equivalent to {{c|static_cast&lt;Signed&gt;(ranges::size(t))}}.

{{cpp/ranges/cpo}}

===Notes===
If {{c|ranges::ssize(e)}} is valid for an expression {{c|e}}, the return type is a [[cpp/iterator/is-integer-like|signed-integer-like type]].

===Example===
{{example|code=
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;type_traits&gt;

int main()
{
    std::array arr{1, 2, 3, 4, 5};
    auto s = std::ranges::ssize(arr);
    
    std::cout &lt;&lt; "ranges::ssize(arr) = " &lt;&lt; s &lt;&lt; '\n'
              &lt;&lt; "ranges::ssize is "
              &lt;&lt; (std::is_signed_v&lt;decltype(s)&gt; ? "signed" : "unsigned")
              &lt;&lt; '\n';
    
    std::cout &lt;&lt; "reversed arr: ";
    
    for (--s; s &gt;= 0; --s)
        std::cout &lt;&lt; arr[s] &lt;&lt; ' ';
    
    std::cout &lt;&lt; "\n" "s = " &lt;&lt; s &lt;&lt; '\n';
}
|output=
ranges::ssize(arr) = 5
ranges::ssize is signed
reversed arr: 5 4 3 2 1
s = -1
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3403|std=C++20|before={{tt|ranges::size}} worked for some non-range types but {{tt|ranges::ssize}} did not|after=made work}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc size}}
{{dsc inc|cpp/ranges/dsc sized_range}}
{{dsc inc|cpp/iterator/ranges/dsc distance}}
{{dsc inc|cpp/iterator/dsc size}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
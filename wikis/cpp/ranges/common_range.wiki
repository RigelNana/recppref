{{cpp/ranges/title|common_range}}
{{cpp/ranges/navbar}}

{{ddcl|header=ranges|since=c++20|1=
template&lt; class T &gt;
concept common_range =
    ranges::range&lt;T&gt; &amp;&amp; std::same_as&lt;ranges::iterator_t&lt;T&gt;, ranges::sentinel_t&lt;T&gt;&gt;;
}}

The {{tt|common_range}} concept is a refinement of {{lconcept|range}} for which {{lc|std::ranges::begin()}} and {{lc|std::ranges::end()}} return the same type (e.g. all standard library containers).

===Example===
{{example
|code=
#include &lt;ranges&gt;

struct A
{
    char* begin();
    char* end();
};
static_assert( std::ranges::common_range&lt;A&gt; );

struct B
{
    char* begin();
    bool end();
};  // not a common_range: begin/end have different types
static_assert( not std::ranges::common_range&lt;B&gt; );

struct C
{
    char* begin();
};  // not a common_range, not even a range: has no end()
static_assert( not std::ranges::common_range&lt;C&gt; );

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc common_view}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
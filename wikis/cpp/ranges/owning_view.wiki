{{cpp/ranges/title|owning_view}}
{{cpp/ranges/navbar}}

{{ddcl|header=ranges|since=c++20|
template&lt; ranges::range R &gt;
    requires std::movable&lt;R&gt; &amp;&amp; (!/*is-initializer-list*/&lt;R&gt;)
class owning_view
    : public ranges::view_interface&lt;owning_view&lt;R&gt;&gt;
}}

{{tt|owning_view}} is a {{lconcept|view}} that has unique ownership of a {{lconcept|range}}. It is move-only and stores that {{tt|range}} within it.

The constant {{c|/*is-initializer-list*/&lt;R&gt;}} in the requires-clause is {{c|true}} if and only if {{c|std::remove_cvref_t&lt;R&gt;}} is a specialization of {{lc|std::initializer_list}}.

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc expos mem obj|r_|private=yes|The underlying range of type {{tt|R}}.}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|{{PAGENAME}}#ctor|constructs an {{tt|owning_view}} by value-initializing or move-constructing the stored range}}
{{dsc mem fun|title=operator{{=}}|{{PAGENAME}}#assign|move-assigns the stored range}}
{{dsc mem fun|title=base|{{PAGENAME}}#base|returns a reference to the stored range}}
{{dsc mem fun|title=begin|{{PAGENAME}}#begin|returns the beginning iterator of the stored range}}
{{dsc mem fun|title=end|{{PAGENAME}}#end|returns the sentinel of the stored range}}
{{dsc mem fun|title=empty|{{PAGENAME}}#empty|checks whether the stored range is empty}}
{{dsc mem fun|title=size|{{PAGENAME}}#size|returns the size of the stored {{lconcept|sized_range}}}}
{{dsc mem fun|title=data|{{PAGENAME}}#data|returns the pointer to the beginning of the stored {{lconcept|contiguous_range}}}}

{{cpp/ranges/view_interface/inherit|embedded=yes|empty=yes|size=yes|data=yes}}
{{dsc end}}

{{anchor|ctor}}
{{member|{{small|std::ranges::owning_view::}}owning_view|2=
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
owning_view() requires std::default_initializable&lt;R&gt; = default;
}}
{{dcl|num=2|since=c++20|1=
owning_view( owning_view&amp;&amp; other ) = default;
}}
{{dcl|num=3|since=c++20|1=
constexpr owning_view( R&amp;&amp; t );
}}
{{dcl|num=4|since=c++20|1=
owning_view( const owning_view&amp; ) = delete;
}}
{{dcl end}}

@1@ Default constructor. Value-initializes the stored range by its default member initializer ({{c|1== R()}}).

@2@ Move constructor. Move constructs the stored range from that of {{c|other}}.

@3@ Move constructs the stored range from {{c|t}}.

@4@ Copy constructor is deleted. {{tt|owning_view}} is move-only.

===Parameters===
{{par begin}}
{{par|other|another {{tt|owning_view}} to move from}}
{{par|t|range to move from}}
{{par end}}
}}

{{anchor|assign}}
{{member|{{small|std::ranges::owning_view::}}operator{{=}}|
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
owning_view&amp; operator=( owning_view&amp;&amp; other ) = default;
}}
{{dcl|num=2|since=c++20|1=
owning_view&amp; operator=( const owning_view&amp; ) = delete;
}}
{{dcl end}}

@1@ Move assignment operator. Move assigns the stored range from that of {{c|other}}.

@2@ Copy assignment operator is deleted. {{tt|owning_view}} is move-only.

===Parameters===
{{par begin}}
{{par|other|another {{tt|owning_view}} to move from}}
{{par end}}

===Return value===
{{c|*this}}
}}

{{anchor|base}}
{{member|{{small|std::ranges::owning_view::}}base|
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr R&amp; base() &amp; noexcept;
}}
{{dcl|num=2|since=c++20|1=
constexpr const R&amp; base() const &amp; noexcept;
}}
{{dcl|num=3|since=c++20|1=
constexpr R&amp;&amp; base() &amp;&amp; noexcept;
}}
{{dcl|num=4|since=c++20|1=
constexpr const R&amp;&amp; base() const &amp;&amp; noexcept;
}}
{{dcl end}}
Returns a reference to the stored range, keeping value category and const-qualification.

@1,2@ Equivalent to {{c|return r_;}}.

@3,4@ Equivalent to {{c|return std::move(r_);}}.
}}

{{anchor|begin}}
{{member|{{small|std::ranges::owning_view::}}begin|
{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr ranges::iterator_t&lt;R&gt; begin();
}}
{{dcl|num=2|since=c++20|
constexpr auto begin() const requires ranges::range&lt;const R&gt;;
}}
{{dcl end}}

Equivalent to {{c|return ranges::begin(r_);}}.
}}

{{anchor|end}}
{{member|{{small|std::ranges::owning_view::}}end|
{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr ranges::sentinel_t&lt;R&gt; end();
}}
{{dcl|num=2|since=c++20|
constexpr auto end() const requires ranges::range&lt;const R&gt;;
}}
{{dcl end}}

Equivalent to {{c|return ranges::end(r_);}}.
}}

{{anchor|empty}}
{{member|{{small|std::ranges::owning_view::}}empty|
{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr bool empty() requires requires { ranges::empty(r_); };
}}
{{dcl|num=2|since=c++20|
constexpr bool empty() const requires requires { ranges::empty(r_); };
}}
{{dcl end}}

Equivalent to {{c|return ranges::empty(r_);}}.
}}

{{anchor|size}}
{{member|{{small|std::ranges::owning_view::}}size|
{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr auto size() requires ranges::sized_range&lt;R&gt;;
}}
{{dcl|num=2|since=c++20|
constexpr auto size() const requires ranges::sized_range&lt;const R&gt;;
}}
{{dcl end}}

Equivalent to {{c|return ranges::size(r_);}}.
}}

{{anchor|data}}
{{member|{{small|std::ranges::owning_view::}}data|
{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr auto data() requires ranges::contiguous_range&lt;R&gt;;
}}
{{dcl|num=2|since=c++20|
constexpr auto data() const requires ranges::contiguous_range&lt;const R&gt;;
}}
{{dcl end}}

Equivalent to {{c|return ranges::data(r_);}}.
}}

===Helper templates===
{{ddcl|since=c++20|1=
template&lt; class T &gt;
constexpr bool enable_borrowed_range&lt;std::ranges::owning_view&lt;T&gt;&gt; =
    ranges::enable_borrowed_range&lt;T&gt;;
}}

This specialization of {{c/core|ranges::enable_borrowed_range}} makes {{tt|owning_view}} satisfy {{lconcept|borrowed_range}} when the underlying range satisfies it.

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string&gt;

int main()
{
    using namespace std::literals;
    std::ranges::owning_view ov{"cosmos"s}; // the deduced type of R is std::string;
                                            // `ov` is the only owner of this string
    assert(
        ov.empty() == false &amp;&amp;
        ov.size() == 6 &amp;&amp;
        ov.size() == ov.base().size() &amp;&amp;
        ov.front() == 'c' &amp;&amp;
        ov.front() == *ov.begin() &amp;&amp;
        ov.back() == 's' &amp;&amp;
        ov.back() == *(ov.end() - 1) &amp;&amp;
        ov.data() == ov.base()
    );

    std::cout &lt;&lt; "sizeof(ov): " &lt;&lt; sizeof ov &lt;&lt; '\n' // typically equal to sizeof(R)
              &lt;&lt; "range-for: ";
    for (const char ch : ov)
        std::cout &lt;&lt; ch;
    std::cout &lt;&lt; '\n';

    std::ranges::owning_view&lt;std::string&gt; ov2;
    assert(ov2.empty());
//  ov2 = ov; // compile-time error: copy assignment operator is deleted
    ov2 = std::move(ov); // OK
    assert(ov2.size() == 6);
}
|p=true
|output=
sizeof(ov): 32
range-for: cosmos
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc ref_view}}
{{dsc inc|cpp/ranges/dsc all_view}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
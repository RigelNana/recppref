{{cpp/ranges/slide_view/iterator/title|1=operator++,--,+=,-=}}
{{cpp/ranges/slide_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr /*iterator*/&amp; operator++();
}}
{{dcl|num=2|since=c++23|
constexpr /*iterator*/ operator++( int );
}}
{{dcl|num=3|since=c++23|
constexpr /*iterator*/&amp; operator--()
    requires ranges::bidirectional_range&lt;Base&gt;;
}}
{{dcl|num=4|since=c++23|
constexpr /*iterator*/ operator--( int )
    requires ranges::bidirectional_range&lt;Base&gt;;
}}
{{dcl|num=5|since=c++23|1=
constexpr /*iterator*/&amp; operator+=( difference_type n )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=6|since=c++23|1=
constexpr /*iterator*/&amp; operator-=( difference_type n )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl end}}

Advances or decrements the {{rlp|iterator}}.

Let {{rlpi|/#Data members|current_}} and {{rlpi|/#Data members|last_ele_}} be the underlying iterators to the begin and end of the sliding window.

@1@ Equivalent to:
{{source|1=
current_ = ranges::next(current_);
last_ele_ = ranges::next(last_ele_); // if last_ele_ is present
return *this;
}}
Before the invocation, the {{tti|current_}} and {{tti|last_ele_}} (if present) must be incrementable.

@2@ Equivalent to: {{c|1=auto tmp = *this; ++*this; return tmp;}}

@3@ Equivalent to:
{{source|1=
current_ = ranges::prev(current_);
last_ele_ = ranges::prev(last_ele_); // if last_ele_ is present
return *this;
}}
Before the invocation, the {{tti|current_}} and {{tti|last_ele_}} (if present) must be decrementable.

@4@ Equivalent to: {{c|1=auto tmp = *this; --*this; return tmp;}}

@5@ Equivalent to:
{{source|1=
current_ = current_ + n;
last_ele_ = last_ele_ + n; // if last_ele_ is present
return *this;
}}
Before the invocation, the expressions {{c|current_ + n}} and {{c|last_ele_ + n}} (if {{tti|last_ele_}} is present) must have well-defined behavior.

@6@ Equivalent to:
{{source|1=
current_ = current_ - n;
last_ele_ = last_ele_ - n; // if last_ele_ is present
return *this;
}}
Before the invocation, the expressions {{c|current_ - n}} and {{c|last_ele_ - n}} (if {{tti|last_ele_}} is present) must have well-defined behavior.

===Parameters===
{{par begin}}
{{par|n|position relative to current location}}
{{par end}}

===Return value===
@1,3,5,6@ {{c|*this}}
@2,4@ a copy of {{c|*this}} that was made before the change

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc fun|cpp/ranges/slide_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|performs iterator arithmetic|notes={{mark c++23}}}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
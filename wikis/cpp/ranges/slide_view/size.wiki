{{cpp/ranges/slide_view/title|size}}
{{cpp/ranges/slide_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr auto size()
  requires ranges::sized_range&lt;V&gt;;
}}
{{dcl|num=2|since=c++23|
constexpr auto size() const
  requires ranges::sized_range&lt;const V&gt;;
}}
{{dcl end}}

Returns the number of elements.

Let {{rlpi|/#Data members|base_}} and {{rlpi|/#Data members|n_}} be the underlying view and "window size" respectively.

Equivalent to:
{{source|1=
auto sz = ranges::distance(base_) - n_ + 1;
if (sz &lt; 0)
    sz = 0;
return /*to-unsigned-like*/(sz);
}}

===Parameters===
(none)

===Return value===
The number of elements. Equals to {{c|0}}, if the number of elements ({{c|ranges::size(base_)}}) in underlying view {{rlpi|/#Data members|base_}} is less than "window size" {{rlpi|/#Data members|n_}}.

===Example===
{{example
|code=
#include &lt;forward_list&gt;
#include &lt;iostream&gt;
#include &lt;list&gt;
#include &lt;ranges&gt;

int main()
{
    constexpr static auto v = {1, 2, 3, 4, 5, 6};

    constexpr int width1{4};
    constexpr auto view1{std::views::slide(v, width1)};
    static_assert(view1.size() == 3);
    static_assert(view1.size() == (v.size() - width1 + 1));

    constexpr int width2{8};
    constexpr auto view2{std::views::slide(v, width2)};
    // window is too wide, so view2 has no elements:
    static_assert(view2.size() == 0);

    std::forward_list forward_list = v;
    const auto view3{std::views::slide(forward_list, width1)};
//  auto x = view3.size(); // error: sized_range constraint is not satisfied

    std::list list = v;
    const auto view4{std::views::slide(list, width1)};
    std::cout &lt;&lt; view4.size() &lt;&lt; '\n'; // prints 3
}
|output=
3
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc size}}
{{dsc inc|cpp/ranges/dsc ssize}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
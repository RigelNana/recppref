{{cpp/ranges/slide_view/title|''iterator''}}
{{cpp/ranges/slide_view/navbar}}

{{ddcl|since=c++23|notes={{mark expos}}|
template&lt; bool Const &gt;
class /*iterator*/
}}

The return type of {{rlpt|begin|slide_view::begin}}, and of {{rlpt|end|slide_view::end}} when the underlying view {{tt|V}} is a {{lconcept|common_range}}.

The type {{c|/*iterator*/&lt;true&gt;}} is returned by the const-qualified overloads. The type {{c|/*iterator*/&lt;false&gt;}} is returned by the non-const-qualified overloads.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc expos mem type|Base|private=yes|{{c|const V}} if {{tt|Const}} is {{c|true}}, otherwise {{c|V}}.}}
{{dsc|{{tt|iterator_category}}|{{c|std::input_iterator_tag}}}}
{{dsc|{{tt|iterator_concept}}|
* {{c|std::random_access_iterator_tag}}, if {{tti|Base}} models {{lconcept|random_access_range}}. Otherwise,
* {{c|std::bidirectional_iterator_tag}}, if {{tti|Base}} models {{lconcept|bidirectional_range}}. Otherwise,
* {{c|std::forward_iterator_tag}}.}}
{{dsc|{{tt|value_type}}|{{c|decltype(views::counted(current_, n_))}}}}
{{dsc|{{tt|difference_type}}|{{c|ranges::range_difference_t&lt;Base&gt;}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc expos mem obj|current_|private=yes|{{c|ranges::iterator_t&lt;Base&gt;}}, holds an iterator to the first underlying element of the current window in {{rlpt|/|slide_view}}}}
{{dsc expos mem obj|last_ele_|private=yes|maybe=yes|{{c|ranges::iterator_t&lt;Base&gt;}}, holds an iterator to the one-past-end underlying element of the current window in {{rlpt|/|slide_view}}. Present only if [[#Member types|{{tti|Base}}]] models {{c|/*slide-caches-first*/}}.}}
{{dsc expos mem obj|n_|private=yes|{{c|ranges::range_difference_t&lt;Base&gt;}}, holds the window width of {{rlpt|/|slide_view}}.}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/slide_view/iterator/iterator|constructs an iterator}}
{{dsc mem fun|cpp/ranges/slide_view/iterator/operator*|accesses the element}}
{{dsc mem fun|cpp/ranges/slide_view/iterator/operator_at|title=operator[]|accesses an element by index}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|slide_view}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc fun|cpp/ranges/slide_view/iterator/operator_cmp|title=operator==&lt;br&gt;operator&lt;&lt;br&gt;operator&gt;&lt;br&gt;operator&lt;=&lt;br&gt;operator&gt;=&lt;br&gt;operator&lt;=&gt;|compares the underlying iterators|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/slide_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|performs iterator arithmetic|notes={{mark c++23}}}}
{{dsc end}}

===Example===
{{example}}

===References===
{{ref std c++23}}
{{ref std|title=Class template {{tt|slide_view::iterator}}|id=range.slide.iterator|section=26.7.29.3}}
{{ref std end}}

===See also===
{{dsc begin}}
&lt;!--
{{dsc inc|cpp/ranges/slide_view/dsc sentinel}}
--&gt;
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
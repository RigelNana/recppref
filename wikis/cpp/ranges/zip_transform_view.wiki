{{cpp/ranges/view title|zip_transform}}
{{cpp/ranges/zip_transform_view/navbar}}
{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++23|1=
template&lt; std::move_constructible F, ranges::input_range... Views &gt;
    requires (ranges::view&lt;Views&gt; &amp;&amp; ...) &amp;&amp; (sizeof...(Views) &gt; 0) &amp;&amp;
              std::is_object_v&lt;F&gt; &amp;&amp; std::regular_invocable&lt;
                  F&amp;, ranges::range_reference_t&lt;Views&gt;...&gt; &amp;&amp;
              /*can-reference*/&lt;std::invoke_result_t&lt;
                  F&amp;, ranges::range_reference_t&lt;Views&gt;...&gt;&gt;
class zip_transform_view
     : public ranges::view_interface&lt;zip_transform_view&lt;F, Views...&gt;&gt;
}}
{{dcl|num=2|since=c++23|1=
namespace views {
    inline constexpr /*unspecified*/ zip_transform = /*unspecified*/;
}
}}
{{dcl h|Call signature}}
{{dcl|since=c++23|1=
template&lt; class F, ranges::viewable_range... Rs &gt;
    requires /* see below */
constexpr auto zip_transform( F&amp;&amp; f, Rs&amp;&amp;... rs );
}}
{{dcl end}}

@1@ {{tt|zip_transform_view}} is a range adaptor that takes an invocable object and one or more {{lconcept|view}}s, and produces a {{lconcept|view}} whose {{tti|i}}{{sup|''th''}} element is the result of applying the invocable object to the {{tti|i}}{{sup|''th''}} elements of all views.&lt;br&gt;
A type {{tt|T}} models the exposition-only concept {{c|/*can-reference*/}} if and only if {{tt|T&amp;}} is a valid type.

@2@ {{tt|views::zip_transform}} is a customization point object.
When calling with one argument {{c|f}}, let {{tt|FD}} be {{c|std::decay_t&lt;decltype(f)&gt;}}, if:
* {{tt|FD}} models {{lconcept|copy_constructible}},
* {{c|FD&amp;}} models {{lconcept|regular_invocable}}, and
* {{c|std::invoke_result_t&lt;FD&amp;&gt;}} is an object type,
then {{c|views::zip_transform(f)}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to {{c|((void)f, auto(views::empty&lt;std::decay_t&lt;std::invoke_result_t&lt;FD&amp;&gt;&gt;&gt;))}}. Otherwise, the call to {{tt|views::zip_transform}} is ill-formed.
When calling with more than one arguments {{c|f}} and {{c|rs...}}, {{c|views::zip_transform(f, rs...)}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to {{c|ranges::zip_transform_view(f, rs...)}}.

{{tt|zip_transform_view}} models the concepts {{lconcept|random_access_range}}, {{lconcept|bidirectional_range}}, {{lconcept|forward_range}}, {{lconcept|input_range}}, {{lconcept|common_range}}, and {{lconcept|sized_range}} when the underlying {{c|ranges::zip_view&lt;Views...&gt;}} models respective concepts.

{{cpp/ranges/cpo|views|zip_transform}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc constructor|zip_transform_view}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|zip_transform_view}}
{{dsc inc|cpp/ranges/adaptor/dsc end|zip_transform_view}}
{{dsc inc|cpp/ranges/adaptor/dsc size|zip_transform_view}}
{{cpp/ranges/view_interface/inherit|embedded=yes|size=yes|data=invalid}}
{{dsc end}}

==={{rl|deduction guides|Deduction guides}}===

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc expos mem type|InnerView|private=yes|{{c|ranges::zip_view&lt;Views...&gt;}}.}}
{{dsc expos mem type|ziperator|private=yes|
* {{c|ranges::iterator_t&lt;const InnerView&gt;}} if {{c|Const}} is {{c|true}}, otherwise
* {{c|ranges::iterator_t&lt;InnerView&gt;}}.}}
{{dsc expos mem type|zentinel|private=yes|
* {{c|ranges::sentinel_t&lt;const InnerView&gt;}} if {{c|Const}} is {{c|true}}, otherwise
* {{c|ranges::sentinel_t&lt;InnerView&gt;}}.}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member object|Definition}}
{{dsc expos mem obj|zip_|private=yes|An underlying view object of type {{tti|InnerView}}}}
{{dsc expos mem obj|fun_|private=yes|A wrapped invocable object of type {{box|{{ltt|cpp/ranges/copyable_wrapper|''movable-box''}}{{tt|&lt;F&gt;}}}}}}
{{dsc end}}

===Nested classes===
{{dsc begin}}
{{dsc expos mem tclass|cpp/ranges/zip_transform_view/iterator|the iterator type}}
{{dsc expos mem tclass|cpp/ranges/zip_transform_view/sentinel|the sentinel type used when the underlying {{tt|zip_view}} is not a {{lconcept|common_range}}}}
{{dsc end}}

===Notes===
{{feature test macro|__cpp_lib_ranges_zip|std=C++23|value=202110L|{{c/core|ranges::zip_view}},&lt;br&gt;{{tt|std::ranges::zip_transform_view}},&lt;br&gt;{{c/core|ranges::adjacent_view}},&lt;br&gt;{{c/core|ranges::adjacent_transform_view}}}}

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;list&gt;
#include &lt;ranges&gt;
#include &lt;vector&gt;

void print(auto const rem, auto const&amp; r)
{
    std::cout &lt;&lt; rem &lt;&lt; '{'; 
    for (char o[]{0,' ',0}; auto const&amp; e : r)
        std::cout &lt;&lt; o &lt;&lt; e, *o = ',';
    std::cout &lt;&lt; "}\n";
}

int main()
{
    auto v1 = std::vector&lt;float&gt;{1, 2, 3};
    auto v2 = std::list&lt;short&gt;{1, 2, 3, 4};
    auto v3 = std::to_array({1, 2, 3, 4, 5});

    auto add = [](auto a, auto b, auto c) { return a + b + c; };

    auto sum = std::views::zip_transform(add, v1, v2, v3);

    print("v1:  ", v1);
    print("v2:  ", v2);
    print("v3:  ", v3);
    print("sum: ", sum);
}
|output=
v1:  {1, 2, 3}
v2:  {1, 2, 3, 4}
v3:  {1, 2, 3, 4, 5}
sum: {3, 6, 9}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc zip_view}}
{{dsc inc|cpp/ranges/dsc transform_view}}
{{dsc inc|cpp/ranges/dsc elements_view}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
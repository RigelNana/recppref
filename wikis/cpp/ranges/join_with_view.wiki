{{cpp/ranges/view title|join_with}}
{{cpp/ranges/join_with_view/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++23|
template&lt; ranges::input_range V, ranges::forward_range Pattern &gt;
  requires ranges::view&lt;V&gt; &amp;&amp;
           ranges::input_range&lt;ranges::range_reference_t&lt;V&gt;&gt; &amp;&amp;
           ranges::view&lt;Pattern&gt; &amp;&amp;
           /*concatable*/&lt;ranges::range_reference_t&lt;V&gt;, Pattern&gt;
class join_with_view : 
    ranges::view_interface&lt;join_with_view&lt;V, Pattern&gt;&gt;
}}
{{dcl|num=2|since=c++23|1=
namespace views {
    inline constexpr /* unspecified */ join_with = /* unspecified */;
}
}}
{{dcl h|Call signature}}
{{dcl|since=c++23|1=
template&lt; ranges::viewable_range R, class Pattern &gt;
    requires /* see below */
constexpr ranges::view auto join_with( R&amp;&amp; r, Pattern&amp;&amp; pattern );
}}
{{dcl|since=c++23|1=
template&lt; class Pattern &gt;
constexpr /* range adaptor closure */ join_with( Pattern&amp;&amp; pattern );
}}
{{dcl end}}

@1@ A range adaptor that represents {{lconcept|view}} consisting of the sequence obtained from flattening a view of ranges, with every element of the delimiter inserted in between elements of the view. The delimiter can be a single element or a view of elements.
@@ For the definition of {{c/core|/*concatable*/}}, see {{l2tt std|cpp/ranges/concat_view}}.

@2@ {{named req|RangeAdaptorObject}}. The expression {{c|views::join_with(e, f)}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to {{c|join_with_view(e, f)}} for any suitable subexpressions {{c|e}} and {{c|f}}.

{{tt|join_with_view}} models {{lconcept|input_range}}.

{{tt|join_with_view}} models {{lconcept|forward_range}} when:
* {{c/core|ranges::range_reference_t&lt;V&gt;}} is a reference, and
* {{tt|V}} and {{c/core|ranges::range_reference_t&lt;V&gt;}} each model {{lconcept|forward_range}}.

{{tt|join_with_view}} models {{lconcept|bidirectional_range}} when:
* {{c/core|ranges::range_reference_t&lt;V&gt;}} is a reference,
* {{tt|V}}, {{c/core|ranges::range_reference_t&lt;V&gt;}}, and {{tt|Pattern}} each models {{lconcept|bidirectional_range}}, and
* {{c/core|ranges::range_reference_t&lt;V&gt;}} and {{tt|Pattern}} each model {{lconcept|common_range}}.

{{tt|join_with_view}} models {{lconcept|common_range}} when:
* {{c/core|ranges::range_reference_t&lt;V&gt;}} is a reference, and
* {{tt|V}} and {{c/core|ranges::range_reference_t&lt;V&gt;}} each model {{lconcept|forward_range}} and {{lconcept|common_range}}.

===Nested types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc expos mem type|InnerRng|id=InnerRng|{{c/core|ranges::range_reference_t&lt;V&gt;}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member|Definition}}
{{dsc expos mem obj|spec={{tt|V}}|base_|id=base|the underlying (adapted) view}}
{{dsc expos mem obj|spec={{tt|Pattern}}|pattern_|id=pattern|the pattern object}}
{{dsc expos mem obj|spec={{rlpi|non-propagating-cache}}{{sep}}{{c/core|&lt;ranges::iterator_t&lt;V&gt;&gt;}}|outer_it_|id=outer_it|maybe=(present only if {{tt|V}} does not model {{lconcept|forward_range}})|the cache of the outer iterator}}
{{dsc expos mem obj|spec={{rlpi|non-propagating-cache}}{{sep}}{{c/core|&lt;std::remove_cv_t&lt;}}{{tti|InnerRng}}{{sep}}{{c/core|&gt;&gt;}}|inner_|id=inner|maybe=(present only if {{box|{{c/core|std::is_reference_v&lt;}}{{tti|InnerRng}}{{sep}}{{c/core|&gt;}}}} is {{c|false}})|the cache of the inner range}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc constructor|join_with_view}}
{{dsc inc|cpp/ranges/adaptor/dsc base|join_with_view}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|join_with_view}}
{{dsc inc|cpp/ranges/adaptor/dsc end|join_with_view}}

{{cpp/ranges/view_interface/inherit|embedded=yes|data=invalid|size=invalid|operator[]=invalid}}
{{dsc end}}

==={{rl|deduction guides|Deduction guides}}===

===Nested classes===
{{dsc begin}}
{{dsc expos mem tclass|cpp/ranges/join_with_view/iterator|the iterator type}}
{{dsc expos mem tclass|cpp/ranges/join_with_view/sentinel|the sentinel type}}
{{dsc end}}

===Notes===
{{ftm begin}}
{{ftm|__cpp_lib_ranges_join_with|value=202202L|std=C++23|{{tt|std::ranges::join_with_view}}}}
{{ftm end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string_view&gt;
#include &lt;vector&gt;

int main()
{
    using namespace std::literals;
    
    std::vector v{"This"sv, "is"sv, "a"sv, "test."sv};
    auto joined = v {{!}} std::views::join_with(' ');
    
    for (auto c : joined)
        std::cout &lt;&lt; c;
    std::cout &lt;&lt; '\n';
}
|output=
This is a test.
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=4074|std=C++23|before={{tt|join_with_view}} was underconstrained|after=updated the constraints}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc join_view}}
{{dsc inc|cpp/ranges/dsc concat_view}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
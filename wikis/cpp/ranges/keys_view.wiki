{{cpp/ranges/view title|keys}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++20|1=
template&lt; class R &gt;
using keys_view = ranges::elements_view&lt;R, 0&gt;;
}}
{{dcl|num=2|since=c++20|1=
namespace views {
    inline constexpr auto keys = ranges::elements&lt;0&gt;;
}
}}
{{dcl end}}

Takes a {{lconcept|view}} of ''tuple-like'' values (e.g. {{lc|std::tuple}} or {{lc|std::pair}}), and produces a view with a ''value-type'' of the ''first'' element of the adapted view's value-type.

@1@ An alias for {{c|ranges::elements_view&lt;R, 0&gt;}}.

@2@ {{named req|RangeAdaptorObject}} (and also {{named req|RangeAdaptorClosureObject}}). The expression {{c|views::keys(e)}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to {{c|keys_view&lt;views::all_t&lt;decltype((e))&gt;&gt;{e} }} for any suitable subexpression {{c|e}}.

===Notes===
{{lc|keys_view}} can be useful for extracting ''keys'' from associative containers, e.g.
{{source|1=
std::map&lt;std::string, int&gt; map{{"one", 1}, {"two", 2}};

for (auto const&amp; key : std::views::keys(map))
    std::cout &lt;&lt; key &lt;&lt; ' ';
// prints: one two
}}

===Example===
{{example
|Displays values for each type of {{enwiki|quark}} in particle physics.
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;ranges&gt;
#include &lt;string&gt;
#include &lt;tuple&gt;
#include &lt;vector&gt;

int main()
{
    const std::vector&lt;std::tuple&lt;std::string, double, bool&gt;&gt; quark_mass_charge
    {
        // name, MeV/c², has positive electric-charge:
        {"up", 2.3, true}, {"down", 4.8, false},
        {"charm", 1275, true}, {"strange", 95, false},
        {"top", 173'210, true}, {"bottom", 4'180, false},
    };

    std::cout.imbue(std::locale("en_US.utf8"));
    std::cout &lt;&lt; "Quark name:  │ ";
    for (std::string const&amp; name : std::views::keys(quark_mass_charge))
        std::cout &lt;&lt; std::setw(9) &lt;&lt; name &lt;&lt; " │ ";

    std::cout &lt;&lt; "\n" "Mass MeV/c²: │ ";
    for (const double mass : std::views::values(quark_mass_charge))
        std::cout &lt;&lt; std::setw(9) &lt;&lt; mass &lt;&lt; " │ ";

    std::cout &lt;&lt; "\n" "E-charge:    │ ";
    for (const bool pos : std::views::elements&lt;2&gt;(quark_mass_charge))
        std::cout &lt;&lt; std::setw(9) &lt;&lt; (pos ? "+2/3" : "-1/3") &lt;&lt; " │ ";
    std::cout &lt;&lt; '\n';
}
|output=
Quark name:  │        up │      down │     charm │   strange │       top │    bottom │
Mass MeV/c²: │       2.3 │       4.8 │     1,275 │        95 │   173,210 │     4,180 │
E-charge:    │      +2/3 │      -1/3 │      +2/3 │      -1/3 │      +2/3 │      -1/3 │
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3563|std=C++20|before={{tt|keys_view}} is unable to participate in CTAD due to its use of {{lc|views::all_t}}|after={{lc|views::all_t}} removed}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc values_view}}
{{dsc inc|cpp/ranges/dsc elements_view}}
{{dsc inc|cpp/numeric/valarray/dsc slice}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
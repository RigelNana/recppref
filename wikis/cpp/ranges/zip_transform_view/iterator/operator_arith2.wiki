{{title|operator+,-{{small|(ranges::zip_transform_view::''iterator'')}}}}
{{cpp/ranges/zip_transform_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|1=
friend constexpr /*iterator*/ operator+( const /*iterator*/&amp; i, difference_type n )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=2|since=c++23|1=
friend constexpr /*iterator*/ operator+( difference_type n, const /*iterator*/&amp; i )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=3|since=c++23|1=
friend constexpr /*iterator*/ operator-( const /*iterator*/&amp; i, difference_type n )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=4|since=c++23|1=
friend constexpr difference_type operator-( const /*iterator*/&amp; i, 
                                            const /*iterator*/&amp; j )
    requires std::sized_sentinel_for&lt;/*ziperator*/&lt;Const&gt;, /*ziperator*/&lt;Const&gt;&gt;;
}}
{{dcl end}}

Let {{rlpi|/#Data members|inner_}} denote the underlying iterator.

@1,2@ Returns the iterator {{c|i}} incremented by {{c|n}}. Equivalent to: {{c|1=return /*iterator*/(*i.parent_, i.inner_ + n);}}.
@3@ Returns the iterator {{tt|i}} decremented by {{c|n}}. Equivalent to: {{c|1=return /*iterator*/(*i.parent_, i.inner_ - n);}}.
@4@ Calculates the ''distance'' between {{c|i}} and {{c|j}}. Equivalent to {{c|return i.inner_ - j.inner_;}}.

{{cpp/hidden friend|{{tt|zip_transform_view::''iterator''&lt;Const&gt;|plural=yes}}}}

===Parameters===
{{par begin}}
{{par|i, j|the iterators}}
{{par|n|position relative to current location}}
{{par end}}

===Return value===
@1,2@ {{c|/*iterator*/{ inner_ + n }&lt;!----&gt;}}
@3@ {{c|/*iterator*/{ inner_ - n }&lt;!----&gt;}}
@4@ {{c|i.inner_ - j.inner_}}

===Example===
{{example
|code=
|output=
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|zip_transform_view}}
{{dsc end}}

{{langlinks|de|es|fr|ja|ru|zh}}
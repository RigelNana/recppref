{{cpp/ranges/zip_transform_view/title|size}}
{{cpp/ranges/zip_transform_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
constexpr auto size()
    requires ranges::sized_range&lt;/*InnerView*/&gt;;
}}
{{dcl|num=2|since=c++23|1=
constexpr auto size() const
    requires ranges::sized_range&lt;const /*InnerView*/&gt;
}}
{{dcl end}}

Returns the number of elements in the {{lc|std::zip_transform_view|zip_transform_view}}. Provided only if each underlying (adapted) range satisfies {{lconcept|sized_range}}.

@1,2@ Equivalent to: {{box|{{c/core|return}}{{nbspt}}{{rlpi|/#Data members|zip_}}{{c/core|.size();}}}}.

===Parameters===
(none)

===Return value===
The number of elements, which is the minimum size among all sizes of adapted {{lconcept|view}}s.

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;deque&gt;
#include &lt;forward_list&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;vector&gt;

int main()
{
    auto x = std::vector{1, 2, 3, 4, 5};
    auto y = std::deque&lt;short&gt;{10, 20, 30};
    auto z = std::forward_list{100., 200.};

    auto v1 = std::views::zip_transform(std::plus{}, x, y);
    assert(v1.size() == std::min(x.size(), y.size()));
    assert(v1.size() == 3);
    for (int i : v1)
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    [[maybe_unused]] auto v2 = std::views::zip_transform(std::plus{}, x, z);
//  auto sz = v2.size(); // Error: z doesn't have size(), so neither does v2
    static_assert(not std::ranges::sized_range&lt;decltype(z)&gt;);
}
|output=
11 22 33
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc size}}
{{dsc inc|cpp/ranges/dsc ssize}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
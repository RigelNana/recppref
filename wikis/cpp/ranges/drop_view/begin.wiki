{{cpp/ranges/drop_view/title|begin}}
{{cpp/ranges/drop_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr auto begin()
    requires (!(/*simple-view*/&lt;V&gt; &amp;&amp;
                 ranges::random_access_range&lt;const V&gt; &amp;&amp;
                 ranges::sized_range&lt;const V&gt;));
}}
{{dcl|num=2|since=c++20|1=
constexpr auto begin() const
    requires ranges::random_access_range&lt;const V&gt; &amp;&amp;
             ranges::sized_range&lt;const V&gt;;
}}
{{dcl end}}

Returns an iterator to the first element of the {{tt|drop_view}}, that is, an iterator to the ''N''{{sup|''th''}} element of the underlying view, or to the end of the underlying view if it has less than ''N'' elements.

If {{tt|V}} is not a {{lconcept|random_access_range}} or a {{lconcept|sized_range}}, in order to provide the amortized constant time complexity required by the {{lconcept|range}} concept, the overload {{v|1}} caches the result within the {{tt|drop_view}} object for use on subsequent calls.

===Parameters===
(none)

===Return value===
{{c|ranges::next(ranges::begin(base_), count_, ranges::end(base_))}}, where {{rlpi|/#Data members|base_}} is the underlying view, and {{rlpi|/#Data members|count_}} is the number of elements to skip.

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;concepts&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;ranges&gt;

void println(std::ranges::range auto const&amp; range)
{
    for (auto const&amp; elem : range)
        std::cout &lt;&lt; elem;
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::array hi{'H', 'e', 'l', 'l', 'o', ',', ' ', 'C', '+', '+', '2', '0', '!'};
    println(hi);

    const auto pos = std::distance(hi.begin(), std::ranges::find(hi, 'C'));
    auto cxx = std::ranges::drop_view{hi, pos};
    std::cout &lt;&lt; "*drop_view::begin() == '" &lt;&lt; *cxx.begin() &lt;&lt; "'\n";
//  *cxx.begin() = 'c'; // undefined: 'views' are to be used as observers
    println(cxx);
}
|output=
Hello, C++20!
*drop_view::begin() == 'C'
C++20!
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3482|std=C++20|before=the const overload can be called with unsized ranges|after=the const overload requires {{tt|sized_range}}}} 
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc end|drop_view}}
{{dsc inc|cpp/ranges/dsc begin}}
{{dsc inc|cpp/ranges/dsc end}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
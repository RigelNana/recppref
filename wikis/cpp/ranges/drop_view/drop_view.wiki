{{cpp/ranges/drop_view/title|drop_view}}
{{cpp/ranges/drop_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++20|1=
drop_view() requires std::default_initializable&lt;V&gt; = default;&lt;!-- P2325R3 --&gt;
}}
{{dcl|num=2|since=c++20|
constexpr explicit drop_view( V base, ranges::range_difference_t&lt;V&gt; count );
}}
{{dcl end}}

Constructs a {{tt|drop_view}}.

@1@ Default constructor. [[cpp/language/value initialization|Value-initializes]] the underlying view {{rlpi|/#Data members|base_}} and initializes the count {{rlpi|/#Data members|count_}} to {{c|0}}. After construction, {{rlpf|base}} returns a copy of {{c|V()}} and {{rlpf|size}} equals to the size of the underlying view.

@2@ Initializes the underlying view {{tti|base_}} with {{c|std::move(base)}} and the count {{tti|count_}} with {{c|count}}. After construction, {{rlpf|base}} returns a copy of {{c|base}} and {{rlpf|size}} returns {{c|ranges::size(base) - count}} if the size of {{c|base}} is not less than {{c|count}}, or {{c|0}} otherwise.

===Parameters===
{{par begin}}
{{par|base|the underlying view}}
{{par|count|number of elements to skip}}
{{par end}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;ranges&gt;

int main()
{
    constexpr std::array hi{'H', 'e', 'l', 'l', 'o', ',',
                            ' ', 'C', '+', '+', '2', '0'};
    
    std::ranges::for_each(hi, [](const char c){ std::cout &lt;&lt; c; });
    std::cout &lt;&lt; '\n';
    
    constexpr auto n = std::distance(hi.cbegin(), std::ranges::find(hi, 'C'));
    
    auto cxx = std::ranges::drop_view{hi, n};
    
    std::ranges::for_each(cxx, [](const char c){ std::cout &lt;&lt; c; });
    std::cout &lt;&lt; '\n';
}
|output=
Hello, C++20
C++20
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3714|paper=P2711R1|std=C++20|before=the multi-parameter constructor was not explicit|after=made explicit}}
{{dr list end}}

{{langlinks|de|es|ja|ru|zh}}
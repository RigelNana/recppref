{{cpp/ranges/drop_view/title|size}}
{{cpp/ranges/drop_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr auto size() requires ranges::sized_range&lt;V&gt;;
}}
{{dcl|num=2|since=c++20|
constexpr auto size() const requires ranges::sized_range&lt;const V&gt;;
}}
{{dcl end}}

Returns the number of elements.

Let {{rlpi|/#Data members|base_}} be the underlying view, {{rlpi|/#Data members|count_}} be the stored count (the number passed to the constructor, or {{c|0}} if {{c|*this}} is default constructed). Equivalent to:
{{source|1=
const auto s = ranges::size(base_);
const auto c = static_cast&lt;decltype(s)&gt;(count_);
return s &lt; c ? 0 : s - c;
}}

===Parameters===
(none)

===Return value===
The number of elements.

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;ranges&gt;

int main()
{
    constexpr std::array a{42, 43, 44};
    static_assert(std::ranges::drop_view{std::views::all(a), 0}.size() == 3);
    static_assert(std::ranges::drop_view{std::views::all(a), 1}.size() == 2);
    static_assert(std::ranges::drop_view{std::views::all(a), 2}.size() == 1);
    static_assert(std::ranges::drop_view{std::views::all(a), 3}.size() == 0);
    static_assert(std::ranges::drop_view{std::views::all(a), 4}.size() == 0);
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc size}}
{{dsc inc|cpp/ranges/dsc ssize}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
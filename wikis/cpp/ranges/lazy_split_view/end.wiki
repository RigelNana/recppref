{{cpp/ranges/lazy_split_view/title|end}}
{{cpp/ranges/lazy_split_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr auto end() requires ranges::forward_range&lt;V&gt; &amp;&amp; ranges::common_range&lt;V&gt;;
}}
{{dcl|num=2|since=c++20|1=
constexpr auto end() const;
}}
{{dcl end}}

Returns an iterator or sometimes a sentinel representing the end of the {{lconcept|view}}. Let {{rlpsi|/#base_}} be the underlying view.

@1@ Returns an iterator. Equivalent to:
{{c|return /*outer_iterator*/&lt;/*simple_view*/&lt;V&gt;&gt;{*this, ranges::end(base_)};}}.

@2@ Returns an {{rlpi|outer_iterator}} or a {{lc|std::default_sentinel}}.
Equivalent to:
{{source|1=
if constexpr (ranges::forward_range&lt;V&gt; &amp;&amp; ranges::forward_range&lt;const V&gt; &amp;&amp;
              ranges::common_range&lt;const V&gt;)
    return /*outer_iterator*/&lt;true&gt;{*this, ranges::end(base_)};
else
    return std::default_sentinel;
}}

===Return value===
An {{rlpi|outer_iterator}} or a {{lc|std::default_sentinel}} representing the end of the {{lconcept|view}}.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string_view&gt;

int main()
{
    constexpr std::string_view keywords{"false float for friend"};
    std::ranges::lazy_split_view kw{keywords, ' '};
    const auto count = std::ranges::distance(kw.begin(), kw.end());
    std::cout &lt;&lt; "Words count: " &lt;&lt; count &lt;&lt; '\n';
}
|output=Words count: 4
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|lazy_split_view}}
{{dsc inc|cpp/ranges/adaptor/dsc end|split_view}}
{{dsc inc|cpp/ranges/dsc begin}}
{{dsc inc|cpp/ranges/dsc end}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/ranges/title|cend}}
{{cpp/ranges/navbar}}
{{dcl begin}}
{{dcl header|ranges}}
{{dcl header|iterator}}
{{dcl|notes={{mark custpt}}|since=c++20|1=
inline namespace /* unspecified */ {
    inline constexpr /* unspecified */ cend = /* unspecified */;
}
}}
{{dcl h|Call signature}}
{{dcl|since=c++20|1=
template&lt; class T &gt;
    requires /* see below */
constexpr /* see below */ auto cend( T&amp;&amp; t );
}}
{{dcl end}}

Returns a sentinel{{rev inl|since=c++23| for the constant iterator}} indicating the end of a {{rev inl|until=c++23|const-qualified}} range.

{{image|range-begin-end.svg}}

{{rrev multi|until1=c++23
|rev1=
Let {{tt|CT}} be
* {{c|const std::remove_reference_t&lt;T&gt;&amp;}} if the argument is an lvalue (i.e. {{tt|T}} is an lvalue reference type),
* {{c|const T}} otherwise.
A call to {{tt|ranges::cend}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to {{c|ranges::end(static_cast&lt;CT&amp;&amp;&gt;(t))}}.
|rev2=
If the argument is an lvalue or {{c|ranges::enable_borrowed_range&lt;std::remove_cv_t&lt;T&gt;&gt;}} is {{c|true}}, then a call to {{tt|ranges::cend}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to:
* {{c|std::const_sentinel&lt;decltype(U)&gt;(U)}} for some expression {{c|U}} equivalent to {{box|{{c/core|ranges::end(}}{{rlpsi|/#possibly-const-range}}{{c/core|(t))}}}}.

In all other cases, a call to {{tt|ranges::cend}} is ill-formed, which can result in [[cpp/language/sfinae|substitution failure]] when the call appears in the immediate context of a template instantiation.
}}

If {{c|ranges::cend(e)}} is valid for an expression {{c|e}}, where {{c|decltype((e))}} is {{tt|T}}, then {{rev inl|until=c++23|{{tt|CT}} models {{lc|std::ranges::range}}, and}} {{c|std::sentinel_for&lt;S, I&gt;}} is {{c|true}} in all cases, where {{tt|S}} is {{c|decltype(ranges::cend(e))}}, and {{tt|I}} is {{c|decltype(ranges::cbegin(e))}}. {{rev inl|since=c++23|Additionally, {{tt|S}} models {{rlpi|constant_range|constant-iterator}} if it models {{lconcept|input_iterator}}.}}

{{cpp/ranges/cpo}}

===Example===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;ranges&gt;
#include &lt;vector&gt;

int main()
{
    std::vector vec{3, 1, 4};
    int arr[]{5, 10, 15};

    assert(std::ranges::find(vec, 5) == std::ranges::cend(vec));
    assert(std::ranges::find(arr, 5) != std::ranges::cend(arr));
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc end}}
{{dsc inc|cpp/iterator/dsc end}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
{{cpp/ranges/view title|transform}}
{{cpp/ranges/transform_view/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl rev multi|num=1|since1=c++20|dcl1=
template&lt; ranges::input_range V,
          std::copy_constructible F &gt;
    requires ranges::view&lt;V&gt; &amp;&amp;
             std::is_object_v&lt;F&gt; &amp;&amp;
             std::regular_invocable&lt;F&amp;, ranges::range_reference_t&lt;V&gt;&gt; &amp;&amp;
             /* invoke_result_t&lt;F&amp;, range_reference_t&lt;V&gt;&gt;&amp; is a valid type */
class transform_view
    : public ranges::view_interface&lt;transform_view&lt;V, F&gt;&gt;
|since2=c++23|dcl2=
template&lt; ranges::input_range V,
          std::move_constructible F &gt;
    requires ranges::view&lt;V&gt; &amp;&amp;
             std::is_object_v&lt;F&gt; &amp;&amp;
             std::regular_invocable&lt;F&amp;, ranges::range_reference_t&lt;V&gt;&gt; &amp;&amp;
             /* invoke_result_t&lt;F&amp;, range_reference_t&lt;V&gt;&gt;&amp; is a valid type */
class transform_view
    : public ranges::view_interface&lt;transform_view&lt;V, F&gt;&gt;
}}
{{dcl|num=2|since=c++20|1=
namespace views {
    inline constexpr /*unspecified*/ transform = /*unspecified*/;
}
}}
{{dcl h|Call signature}}
{{dcl|since=c++20|
template&lt; ranges::viewable_range R, class F &gt;
    requires /* see below */
constexpr ranges::view auto transform( R&amp;&amp; r, F&amp;&amp; fun );
}}
{{dcl|since=c++20|
template&lt; class F &gt;
constexpr /*range adaptor closure*/ transform( F&amp;&amp; fun );
}}
{{dcl end}}

@1@ A range adaptor that represents {{lconcept|view}} of an underlying sequence after applying a transformation function to each element.
@2@ {{named req|RangeAdaptorObject}}. The expression {{c|views::transform(e, f)}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to {{c|transform_view(e, f)}} for any suitable subexpressions {{c|e}} and {{c|f}}.

{{tt|transform_view}} models the concepts {{lconcept|random_access_range}}, {{lconcept|bidirectional_range}}, {{lconcept|forward_range}}, {{lconcept|input_range}}, {{lconcept|common_range}}, and {{lconcept|sized_range}} when the underlying view {{tt|V}} models respective concepts.

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc expos mem obj|base_|private=yes|the underlying {{lconcept|view}} of type {{tt|V}}}}
{{dsc expos mem obj|fun_|private=yes|the underlying function object of type {{rev inl|until=c++23|{{rlpi|copyable_wrapper|copyable-box&lt;!--P2325R3--&gt;}}{{tt|&lt;F&gt;}}}}{{rev inl|since=c++23|{{rlpi|copyable_wrapper|movable-box}}{{tt|&lt;F&gt;}}}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc constructor|transform_view}}
{{dsc inc|cpp/ranges/adaptor/dsc base|transform_view}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|transform_view}}
{{dsc inc|cpp/ranges/adaptor/dsc end|transform_view}}
{{dsc inc|cpp/ranges/adaptor/dsc size|transform_view}}

{{cpp/ranges/view_interface/inherit|embedded=yes|size=yes|data=invalid}}
{{dsc end}}

==={{rl|deduction guides|Deduction guides}}===

===Nested classes===
{{dsc begin}}
{{dsc expos mem tclass|cpp/ranges/transform_view/iterator|the iterator type}}
{{dsc expos mem tclass|cpp/ranges/transform_view/sentinel|the sentinel type}}
{{dsc end}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cstdio&gt;
#include &lt;iterator&gt;
#include &lt;ranges&gt;
#include &lt;string&gt;
 
char rot13a(const char x, const char a)
{
    return a + (x - a + 13) % 26;
}

char rot13(const char x)
{
    if ('Z' &gt;= x and x &gt;= 'A')
        return rot13a(x, 'A');

    if ('z' &gt;= x and x &gt;= 'a')
        return rot13a(x, 'a');

    return x;
}
 
int main()
{
    auto show = [](const unsigned char x) { std::putchar(x); };
 
    std::string in{"cppreference.com\n"};
    std::ranges::for_each(in, show);
    std::ranges::for_each(in {{!}} std::views::transform(rot13), show);
 
    std::string out;
    std::ranges::copy(std::views::transform(in, rot13), std::back_inserter(out));
    std::ranges::for_each(out, show);
    std::ranges::for_each(out {{!}} std::views::transform(rot13), show);
}
|output=
cppreference.com
pccersrerapr.pbz
pccersrerapr.pbz
cppreference.com
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc transform}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/ranges/view title|empty}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++20|1=
template&lt;class T&gt;
    requires std::is_object_v&lt;T&gt;
class empty_view : public ranges::view_interface&lt;empty_view&lt;T&gt;&gt;
}}
{{dcl|num=2|since=c++20|1=
namespace views {
    template&lt;class T&gt;
    constexpr empty_view&lt;T&gt; empty{};
}
}}
{{dcl end}}

@1@ A range factory that produces a {{lconcept|view}} of no elements of a particular type.
@2@ Variable template for {{tt|empty_view}}.

===Member functions===
{{dsc begin}}
{{dsc mem sfun|begin|nolink=true|returns {{c|nullptr}}}}
{{dsc mem sfun|end|nolink=true|returns {{c|nullptr}}}}
{{dsc mem sfun|data|nolink=true|returns {{c|nullptr}}}}
{{dsc mem sfun|size|nolink=true|returns {{c|0}}}}
{{dsc mem sfun|empty|nolink=true|returns {{c|true}}}}

{{cpp/ranges/view_interface/inherit|embedded=yes|empty=yes|data=yes|size=yes}}
{{dsc end}}

{{member|{{small|std::ranges::empty_view::}}begin|
{{ddcl|since=c++20|
static constexpr T* begin() noexcept { return nullptr; }
}}

{{tt|empty_view}} does not reference any element.
}}

{{member|{{small|std::ranges::empty_view::}}end|
{{ddcl|since=c++20|
static constexpr T* end() noexcept { return nullptr; }
}}

{{tt|empty_view}} does not reference any element.
}}

{{member|{{small|std::ranges::empty_view::}}data|
{{ddcl|since=c++20|
static constexpr T* data() noexcept { return nullptr; }
}}

{{tt|empty_view}} does not reference any element.
}}

{{member|{{small|std::ranges::empty_view::}}size|
{{ddcl|since=c++20|
static constexpr std::size_t size() noexcept { return 0; }
}}

{{tt|empty_view}} is always empty.
}}

{{member|{{small|std::ranges::empty_view::}}empty|
{{ddcl|since=c++20|
static constexpr bool empty() noexcept { return true; }
}}

{{tt|empty_view}} is always empty.
}}

===Helper templates===
{{ddcl|since=c++20|1=
template&lt;class T&gt;
constexpr bool ranges::enable_borrowed_range&lt;ranges::empty_view&lt;T&gt;&gt; = true;
}}
This specialization of {{c/core|ranges::enable_borrowed_range}} makes {{tt|empty_view}} satisfy {{lconcept|borrowed_range}}.

===Notes===
Although {{tt|empty_view}} obtains {{tt|front}}, {{tt|back}}, and {{c|operator[]}} member functions from {{tt|view_interface}}, calls to them always result in undefined behavior since an {{tt|empty_view}} is always empty.

The inherited {{c|operator bool}} conversion function always returns {{c|false}}.

===Example===
{{example
|code=
#include &lt;ranges&gt;

int main()
{
    namespace ranges = std::ranges;

    ranges::empty_view&lt;long&gt; e;
    static_assert(ranges::empty(e)); // uses operator bool
    static_assert(0 == e.size());
    static_assert(nullptr == e.data());
    static_assert(nullptr == e.begin());
    static_assert(nullptr == e.end());
    static_assert(nullptr == e.cbegin());
    static_assert(nullptr == e.cend());
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc optional}}
{{dsc inc|cpp/ranges/dsc single_view}}
{{dsc inc|cpp/ranges/dsc all_view}}
{{dsc inc|cpp/ranges/dsc ref_view}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
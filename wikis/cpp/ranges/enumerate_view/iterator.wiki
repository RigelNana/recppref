{{cpp/ranges/enumerate_view/title|''iterator''}}
{{cpp/ranges/enumerate_view/navbar}}

{{ddcl|since=c++23|notes={{mark expos}}|
template&lt; bool Const &gt;
class /*iterator*/
}}

The return type of {{rlpt|begin|enumerate_view::begin}}, and of {{rlpt|end|enumerate_view::end}} when the underlying view {{tt|V}} is a {{lconcept|common_range}}.

The type {{c/core|/*iterator*/&lt;true&gt;}} is returned by the const-qualified overloads. The type {{c/core|/*iterator*/&lt;false&gt;}} is returned by the non-const-qualified overloads.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc expos mem type|Base|private=yes|{{c|const V}} if {{tt|Const}} is {{c|true}}, otherwise {{tt|V}}.}}
{{dsc|{{tt|iterator_category}}|{{lc|std::input_iterator_tag}}}}
{{dsc|{{tt|iterator_concept}}|
* {{lc|std::random_access_iterator_tag}}, if {{tti|Base}} models {{lconcept|random_access_range}}. Otherwise,
* {{lc|std::bidirectional_iterator_tag}}, if {{tti|Base}} models {{lconcept|bidirectional_range}}. Otherwise,
* {{lc|std::forward_iterator_tag}}, if {{tti|Base}} models {{lconcept|forward_range}}. Otherwise,
* {{lc|std::input_iterator_tag}}.}}
{{dsc|{{tt|difference_type}}|{{c/core|ranges::range_difference_t&lt;Base&gt;}}}}
{{dsc|{{tt|value_type}}|{{c/core|std::tuple&lt;difference_type, ranges::range_value_t&lt;Base&gt;&gt;}}}}
{{dsc expos mem type|reference-type|private=yes|{{c/core|std::tuple&lt;difference_type, ranges::range_reference_t&lt;Base&gt;&gt;}}}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member name|Definition}}
{{dsc expos mem obj|current_|private=yes|An iterator to the current element of type {{c/core|ranges::iterator_t&lt;Base&gt;}}}}
{{dsc expos mem obj|pos_|private=yes|A current index of type {{tt|difference_type}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/enumerate_view/iterator/iterator|constructs an iterator}}
{{dsc mem fun|cpp/ranges/enumerate_view/iterator/base|returns an iterator to current element}}
{{dsc mem fun|cpp/ranges/enumerate_view/iterator/index|returns current index}}
{{dsc mem fun|cpp/ranges/enumerate_view/iterator/operator*|accesses the element}}
{{dsc mem fun|cpp/ranges/enumerate_view/iterator/operator at|title=operator[]|accesses an element by index}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|enumerate_view}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc fun|cpp/ranges/enumerate_view/iterator/operator cmp|title=operator==&lt;br&gt;operator&lt;=&gt;|compares the underlying iterators|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/enumerate_view/iterator/operator arith2|title=operator+&lt;br&gt;operator-|performs iterator arithmetic|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/enumerate_view/iterator/iter_move|casts the result of dereferencing the underlying iterator to its associated rvalue reference type|notes={{mark c++23}}}}
{{dsc end}}

===Example===
{{example}}

===References===
{{ref std c++23}}
{{ref std|title=Class template {{tt|enumerate_view::iterator}}|id=range.enumerate.iterator|section=26.7.23.3}}
{{ref std end}}

&lt;!--===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/elements_view/dsc iterator}}
{{dsc end}}--&gt;

{{langlinks|de|es|ja|ru|zh}}
{{title|iter_move{{small|(ranges::enumerate_view::''iterator'')}}}}
{{cpp/ranges/enumerate_view/navbar}}
{{ddcl|since=c++23|
friend constexpr auto iter_move( const /*iterator*/&amp; i ) noexcept(/* see below */)
}}

Let {{rlpi|/#Data members|current_}} be the underlying iterator, {{rlpi|/#Data members|pos_}} be the underlying index, and {{rlpi|/#Member types|Base}} be the (possibly cv-qualified) type of the underlying sequence.

Equivalent to:
{{source|1=
template&lt;class D, class B&gt;
using tuple = std::tuple&lt;D, ranges::range_rvalue_reference_t&lt;B&gt;&gt;;

return tuple&lt;difference_type, Base&gt;(i.pos_, ranges::iter_move(i.current_));
}}

{{cpp/hidden friend|{{tt|enumerate_view::''iterator''&lt;Const&gt;}}}}

===Parameters===
{{par begin}}
{{par|i|iterator}}
{{par end}}

===Return value===
A tuple that contains an index and the result of applying {{c|ranges::iter_move}} to the stored iterator.

===Exceptions===
{{noexcept|
    noexcept(ranges::iter_move(i.current_)) and
        std::is_nothrow_move_constructible_v&lt;
            ranges::range_rvalue_reference_t&lt;Base&gt;&gt;
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/ranges/dsc iter_move}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
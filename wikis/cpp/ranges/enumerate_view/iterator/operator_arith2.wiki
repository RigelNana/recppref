{{title|operator+,-{{small|(ranges::enumerate_view::''iterator'')}}}}
{{cpp/ranges/enumerate_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
friend constexpr /* iterator */
    operator+( const /* iterator */&amp; i, difference_type n )
    requires ranges::random_access_range&lt;/* Base */&gt;;
}}
{{dcl|num=2|since=c++23|
friend constexpr /* iterator */
    operator+( difference_type n, const /* iterator */&amp; i )
    requires ranges::random_access_range&lt;/* Base */&gt;;
}}
{{dcl|num=3|since=c++23|
friend constexpr /* iterator */
    operator-( const /* iterator */&amp; i, difference_type n )
    requires ranges::random_access_range&lt;/* Base */&gt;;
}}
{{dcl|num=4|since=c++23|
friend constexpr difference_type
    operator-( const /* iterator */&amp; i, const /* iterator */&amp; j ) noexcept;
}}
{{dcl end}}

Performs {{rlp|/|iterator}} arithmetic or calculates the distance.

{{rlpi|/#Data members|pos_}} is the underlying index, and {{rlpi|/#Member types|Base}} is the (possibly const-qualified) type of underlying view.

Equivalent to:
@1@ {{c|1=auto temp = i; temp += n; return temp;}}
@2@ {{c|1=return i + n;}}
@3@ {{c|1=auto temp = i; temp -= n; return temp;}}
@4@ {{c|1=return i.pos_ - j.pos_;}}

{{cpp/hidden friend|{{tt|enumerate_view::''iterator''&lt;Const&gt;}}|plural=yes}}

===Parameters===
{{par begin}}
{{par|i, j|the iterators}}
{{par|n|position relative to current location}}
{{par end}}

===Return value===
@1,2@ An incremented iterator.
@3@ A decremented iterator.
@4@ A distance between given iterators.

===Example===
{{example}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3912|std=C++23|before=overload {{v|4}} was not {{c/core|noexcept}}|after=it is {{c/core|noexcept}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|enumerate_view}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
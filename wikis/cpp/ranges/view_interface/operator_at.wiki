{{cpp/ranges/view_interface/title|operator[]}}
{{cpp/ranges/view_interface/navbar}}
{{dcl begin}}
{{dcl | num=1 | since=c++20 | 1=
template&lt;ranges::random_access_range R = D&gt;
constexpr decltype(auto) operator[]( ranges::range_difference_t&lt;R&gt; n );
}}
{{dcl | num=2 | since=c++20 | 1=
template&lt;ranges::random_access_range R = const D&gt;
constexpr decltype(auto) operator[]( ranges::range_difference_t&lt;R&gt; n ) const;
}}
{{dcl end}}

The default implementation of {{c|operator[]}} member function obtains the element at the specified offset relative to the beginning iterator, reusing the {{c|operator[]}} of the iterator type.

@1@ Let {{tt|derived}} be {{c|static_cast&lt;D&amp;&gt;(*this)}}. Equivalent to {{c|return ranges::begin(derived)[n];}}.

@2@ Same as {{v|1}}, except that {{tt|derived}} is {{c|static_cast&lt;const D&amp;&gt;(*this)}}.

===Parameters===
{{par begin}}
{{par | n | position of the element to return}}
{{par end}}

===Return value===
The element at offset {{tt|n}} relative to the beginning iterator.

===Notes===
In C++20, no type derived from {{lc|ranges::view_interface|std::ranges::view_interface}} in the standard library provides their own {{c|operator[]}} member function.

However, following derived types cannot use the default implementations, as they never satisfy {{lconcept|random_access_range}}:
* {{lc|ranges::basic_istream_view|std::ranges::basic_istream_view}}
* {{lc|std::ranges::filter_view}}
* {{lc|     ranges::join_view|std::ranges::join_view}}
* {{lc|     ranges::lazy_split_view|std::ranges::lazy_split_view}}
* {{lc|     ranges::split_view|std::ranges::split_view}}

The inherited {{c|operator[]}} member function is available for {{lc|std::ranges::empty_view}}, but a call to it always results in undefined behavior.

===Example===
{{example}}

{{langlinks|es|ja|ru|zh}}
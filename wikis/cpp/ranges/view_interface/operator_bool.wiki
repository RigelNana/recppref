{{cpp/ranges/view_interface/title|operator bool}}
{{cpp/ranges/view_interface/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr explicit operator bool() requires /* see below */;
}}
{{dcl|num=2|since=c++20|
constexpr explicit operator bool() const requires /* see below */;
}}
{{dcl end}}

The default implementation of {{c|operator bool}} member function checks whether the view is non-empty. It makes the derived type [[cpp/language/implicit conversion#Contextual conversions|contextually convertible to {{c|bool}}]].

@1@ Let {{tt|derived}} be {{c|static_cast&lt;D&amp;&gt;(*this)}}. The expression in the requires-clause is equal to {{c|requires { ranges::empty(derived); }&lt;!----&gt;}}, and the function body is equivalent to {{c|return !ranges::empty(derived);}}.

@2@ Same as {{v|1}}, except that {{tt|derived}} is {{c|static_cast&lt;const D&amp;&gt;(*this)}}.

===Parameters===
(none)

===Return value===
{{c|false}} if the value of the derived type is empty (determined by {{lc|ranges::empty|std::ranges::empty}}), {{c|true}} otherwise.

===Notes===
In C++20, no type derived from {{lc|ranges::view_interface|std::ranges::view_interface}} in the standard library provides their own {{c|operator bool}}. Almost all of these types use the default implementation.

A notable exception is {{lc|ranges::basic_istream_view|std::ranges::basic_istream_view}}. For its iterator type never satisfies {{lconcept|forward_iterator}}, the view cannot use the inherited {{c|operator bool}}.

===Example===
{{example|code=
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;

int main()
{
    const std::array ints {0, 1, 2, 3, 4};
    auto odds = ints {{!}} std::views::filter([](int i) { return 0 != i % 2; });
    auto negs = ints {{!}} std::views::filter([](int i) { return i &lt; 0; });
    std::cout &lt;&lt; std::boolalpha
              &lt;&lt; "Has odd numbers: " &lt;&lt; (!!odds) &lt;&lt; ' ' &lt;&lt; '\n'
              &lt;&lt; "Has negative numbers: " &lt;&lt; (!!negs) &lt;&lt; ' ' &lt;&lt; '\n';
}
|output=
Has odd numbers: true
Has negative numbers: false
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc empty}}
{{dsc inc|cpp/ranges/view_interface/dsc empty}}
{{dsc inc|cpp/iterator/dsc empty}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
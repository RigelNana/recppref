{{cpp/ranges/view_interface/title|empty}}
{{cpp/ranges/view_interface/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr bool empty()
    requires ranges::sized_range&lt;D&gt; {{!!}} ranges::forward_range&lt;D&gt;;
}}
{{dcl|num=2|since=c++20|1=
constexpr bool empty() const
    requires ranges::sized_range&lt;const D&gt; {{!!}} ranges::forward_range&lt;const D&gt;;
}}
{{dcl end}}

The default implementation of {{tt|empty()}} member function checks whether the object of the derived type's size is {{c|0}} (if valid), or whether the beginning iterator and the sentinel compare equal.

@1@ Let {{c|derived}} be a reference bound to {{c|static_cast&lt;D&amp;&gt;(*this)}}. Equivalent to {{c|1=return ranges::size(derived) == 0;}} if {{tt|D}} satisfies {{lconcept|sized_range}}. Otherwise, equivalent to {{c|1=return ranges::begin(derived) == ranges::end(derived);}}.

@2@ Same as {{v|1}}, except that {{c|derived}} is {{c|static_cast&lt;const D&amp;&gt;(*this)}}.

===Parameters===
(none)

===Return value===
{{c|true}} if the size of the object of the derived type is {{c|0}} (if {{tt|D}} satisfies {{lc|std::ranges::sized_range}}), or its beginning iterator and the sentinel compare equal, {{c|false}} otherwise.

===Notes===
Following derived types may use the default implementation of {{tt|empty}}:
* {{ltt|cpp/ranges/common_view|std::ranges::common_view}}
* {{ltt|cpp/ranges/drop_view|std::ranges::drop_view}}
* {{ltt|cpp/ranges/drop_while_view|std::ranges::drop_while_view}}
* {{ltt|cpp/ranges/elements_view|std::ranges::elements_view}}
* {{ltt|cpp/ranges/filter_view|std::ranges::filter_view}}
* {{ltt|cpp/ranges/join_view|std::ranges::join_view}}
* {{ltt|cpp/ranges/lazy_split_view|std::ranges::lazy_split_view}}
* {{ltt|cpp/ranges/reverse_view|std::ranges::reverse_view}}
* {{ltt|cpp/ranges/single_view|std::ranges::single_view}}
* {{ltt|cpp/ranges/split_view|std::ranges::split_view}}
* {{ltt|cpp/ranges/take_view|std::ranges::take_view}}
* {{ltt|cpp/ranges/take_while_view|std::ranges::take_while_view}}
* {{ltt|cpp/ranges/transform_view|std::ranges::transform_view}}
{{rrev|since=c++23|
* {{ltt|cpp/ranges/adjacent_transform_view|std::ranges::adjacent_transform_view}}
* {{ltt|cpp/ranges/adjacent_view|std::ranges::adjacent_view}}
* {{ltt|cpp/ranges/as_const_view|std::ranges::as_const_view}}
* {{ltt|cpp/ranges/as_rvalue_view|std::ranges::as_rvalue_view}}
* {{ltt|cpp/ranges/cartesian_product_view|std::ranges::cartesian_product_view}}
* {{ltt|cpp/ranges/chunk_view|std::ranges::chunk_view}}
* {{ltt|cpp/ranges/chunk_by_view|std::ranges::chunk_by_view}}
* {{ltt|cpp/ranges/join_with_view|std::ranges::join_with_view}}
* {{ltt|cpp/ranges/repeat_view|std::ranges::repeat_view}}
* {{ltt|cpp/ranges/slide_view|std::ranges::slide_view}}
* {{ltt|cpp/ranges/stride_view|std::ranges::stride_view}}
* {{ltt|cpp/ranges/zip_view|std::ranges::zip_view}}
* {{ltt|cpp/ranges/zip_transform_view|std::ranges::zip_transform_view}}
}}

Although {{lc|ranges::basic_istream_view|std::ranges::basic_istream_view}} inherits from {{lc|ranges::view_interface|std::ranges::view_interface}} and does not declare the {{tt|empty()}} member function, it cannot use the default implementation, because it never satisfies neither {{lc|std::ranges::sized_range}} nor {{lc|std::ranges::forward_range}}.

===Example===
{{example|code=
#include &lt;array&gt;
#include &lt;ranges&gt;

int main()
{
    constexpr std::array a{0, 1, 2, 3, 4};
    static_assert(!std::ranges::single_view(a).empty());
    static_assert((a {{!}} std::views::take(0)).empty());
    static_assert(!(a {{!}} std::views::take(5)).empty());
    static_assert((a {{!}} std::views::drop(5)).empty());
    static_assert(!(a {{!}} std::views::drop(3)).empty());
    static_assert(std::views::iota(0,0).empty());
    static_assert(!std::views::iota(0).empty());
}
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3715|std=C++20|before={{tt|empty()}} only supported {{lconcept|forward_range}} types|after={{lconcept|sized_range}}-only types are also supported}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc empty}}
{{dsc inc|cpp/ranges/dsc empty}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
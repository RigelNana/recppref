{{cpp/ranges/view_interface/title|front}}
{{cpp/ranges/view_interface/navbar}}
{{dcl begin}}
{{dcl | num=1 | since=c++20 | 1=
constexpr decltype(auto) front()
    requires ranges::forward_range&lt;D&gt;;
}}
{{dcl | num=2 | since=c++20 | 1=
constexpr decltype(auto) front() const
    requires ranges::forward_range&lt;const D&gt;;
}}
{{dcl end}}

The default implementation of {{tt|front()}} member function returns the first element in the view of the derived type. Whether the element is returned by value or by reference depends on the {{c|operator*}} of the iterator type.

@1@ Let {{tt|derived}} be {{c|static_cast&lt;D&amp;&gt;(*this)}}. Equivalent to {{c|return *ranges::begin(derived);}}. The behavior is undefined if {{rlpt|empty|empty()}} is {{c|true}} (i.e. the beginning iterator compares equal to the sentinel), even if the iterator obtained in the same way is dereferenceable.

@2@ Same as {{v|1}}, except that {{tt|derived}} is {{c|static_cast&lt;const D&amp;&gt;(*this)}}.

===Parameters===
(none)

===Return value===
The first element in the view.

===Notes===
In C++20, no type derived from {{lc|ranges::view_interface|std::ranges::view_interface}} in the standard library provides their own {{tt|front()}} member function. Almost all of these types use the default implementation.

A notable exception is {{lc|ranges::basic_istream_view|std::ranges::basic_istream_view}}. For it never satisfies {{lconcept|forward_range}}, the view cannot use the inherited {{tt|front()}}.

The inherited {{tt|front()}} member function is available for {{lc|std::ranges::empty_view}}, but a call to it always results in undefined behavior.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc | cpp/iterator/dsc begin}}
{{dsc inc | cpp/ranges/dsc begin}}
{{dsc inc | cpp/ranges/dsc cbegin}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
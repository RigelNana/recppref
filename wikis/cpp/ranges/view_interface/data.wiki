{{cpp/ranges/view_interface/title|data}}
{{cpp/ranges/view_interface/navbar}}
{{dcl begin}}
{{dcl | num=1 | since=c++20 | 1=
constexpr auto data()
    requires std::contiguous_iterator&lt;ranges::iterator_t&lt;D&gt;&gt;;
}}
{{dcl | num=2 | since=c++20 | 1=
constexpr auto data() const
    requires ranges::range&lt;const D&gt; &amp;&amp; 
        std::contiguous_iterator&lt;ranges::iterator_t&lt;const D&gt;&gt;;
}}
{{dcl end}}

The default implementation of {{tt|data()}} member function obtains the address denoted by the beginning iterator via {{lc|std::to_address}}, which is also the lowest address of the contiguous storage (implied by {{lconcept|contiguous_iterator}}) referenced by the view of the derived type when the view is not empty.

@1@ Let {{tt|derived}} be {{c|static_cast&lt;D&amp;&gt;(*this)}}. Equivalent to {{c|return std::to_address(ranges::begin(derived));}}.

@2@ Same as {{v|1}}, except that {{tt|derived}} is {{c|static_cast&lt;const D&amp;&gt;(*this)}}.

===Parameters===
(none)

===Return value===
The address denoted by the beginning iterator.

===Notes===
Following derived types may use the default implementation of {{tt|data()}}:
* {{lc|     ranges::common_view|std::ranges::common_view}}
* {{lc|std::ranges::drop_view}}
* {{lc|std::ranges::drop_while_view}}
* {{lc|std::ranges::ref_view}}
* {{lc|std::ranges::subrange}}
* {{lc|std::ranges::take_view}}
* {{lc|std::ranges::take_while_view}}

Following types are derived from {{lc|ranges::view_interface|std::ranges::view_interface}} and do not declare their own {{tt|data()}} member function, but they cannot use the default implementation, because their iterator types never satisfy {{lconcept|contiguous_iterator}}:
* {{lc|ranges::basic_istream_view|std::ranges::basic_istream_view}}
* {{lc|     ranges::elements_view|std::ranges::elements_view}}
* {{lc|std::ranges::filter_view}}
* {{lc|std::ranges::iota_view}}
* {{lc|     ranges::join_view|std::ranges::join_view}}
* {{lc|     ranges::lazy_split_view|std::ranges::lazy_split_view}}
* {{lc|std::ranges::reverse_view}}
* {{lc|     ranges::split_view|std::ranges::split_view}}
* {{lc|std::ranges::transform_view}}
&lt;!--* {{lc|std::ranges::zip_view}}--&gt;

===Example===
{{example|code=
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string_view&gt;

int main() {
    constexpr std::string_view str { "Hello, C++20!" };
    std::cout &lt;&lt; (str {{!}} std::views::drop(7)).data() &lt;&lt; '\n';
    constexpr static std::array a { 1,2,3,4,5 };
    constexpr auto v { a {{!}} std::views::take(3) };
    static_assert( &amp;a[0] == v.data() );
}
| output=C++20!
}}

===See also===
{{dsc begin}}
{{dsc inc | cpp/iterator/dsc data}}
{{dsc inc | cpp/ranges/dsc data}}
{{dsc inc | cpp/ranges/dsc cdata}}
{{dsc inc | cpp/memory/dsc to_address}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
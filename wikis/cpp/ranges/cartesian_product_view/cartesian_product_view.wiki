{{cpp/ranges/cartesian_product_view/title|cartesian_product_view}}
{{cpp/ranges/cartesian_product_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
constexpr cartesian_product_view() = default;
}}
{{dcl|num=2|since=c++23|1=
constexpr explicit cartesian_product_view( First first_base, Vs... bases );
}}
{{dcl end}}

Constructs an {{rlpt|/|cartesian_product_view}}.

@1@ Default constructor. [[cpp/language/default_initialization|Default-initializes]] the underlying data member {{rlpi|/#Data members|base_}}.

@2@ Move constructs the underlying {{rlpi|/#Data members|base_}} by initializing it with {{c|std::move(first_base), std::move(bases)...}}.

===Parameters===
{{par begin}}
{{par|first_base|the first view object to adapt}}
{{par|bases|the pack of views objects to adapt}}
{{par end}}

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;format&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;vector&gt;

int main()
{
    auto x = std::array{'A', 'B'};
    auto y = std::vector{1, 2, 3};
    auto z = std::vector{-1, -2, -3};

    auto v = std::ranges::cartesian_product_view(x, y, z); // overload (2)

    for (int i{1}; auto const&amp; [rx, ry, rz] : v)
        std::cout &lt;&lt; std::format("({} {} {}){}", rx, ry, rz, (i++ % 3) ? ' ' : '\n');
}
|output=
(A 1 -1) (A 1 -2) (A 1 -3)
(A 2 -1) (A 2 -2) (A 2 -3)
(A 3 -1) (A 3 -2) (A 3 -3)
(B 1 -1) (B 1 -2) (B 1 -3)
(B 2 -1) (B 2 -2) (B 2 -3)
(B 3 -1) (B 3 -2) (B 3 -3)
}}

{{langlinks|es|ja|ru|zh}}
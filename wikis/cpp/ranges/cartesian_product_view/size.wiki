{{cpp/ranges/cartesian_product_view/title|size}}
{{cpp/ranges/cartesian_product_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr /* see description */ size()
    requires /*cartesian-product-is-sized*/&lt;First, Vs...&gt;;
}}
{{dcl|num=2|since=c++23|
constexpr /* see description */ size() const
    requires /*cartesian-product-is-sized*/&lt;const First, const Vs...&gt;;
}}
{{dcl end}}

Returns the number of elements. The return type is an implementation-defined {{c/core|/*unsigned-integer-like*/}} type {{c|U}}.

Let {{rlpi|/#Data members|bases_}} be the underlying tuple of views, and {{c|prod}} be the product of the sizes of all the ranges in {{tti|bases_}}.

@1,2@ Returns {{c|prod}}. The behavior is undefined if {{c|prod}} cannot be represented by the return type {{c|U}}.
Equivalent to:
{{source|1=
return [&amp;]&lt;std::size_t... Is&gt;(std::index_sequence&lt;Is...&gt;)
{
    auto prod = static_cast&lt;U&gt;(1);
    prod = (static_cast&lt;U&gt;(ranges::size(std::get&lt;Is&gt;(bases_))) * ...);
    return prod;
}
(std::make_index_sequence&lt;1U + sizeof...(Vs)&gt;{});
}}

===Parameters===
(none)

===Return value===
The number of elements, that is, the product of the sizes of all the underlying ranges.

===Notes===
The return type is the smallest {{c/core|/*unsigned-integer-like*/}} type that is sufficiently wide to store the product of the maximum sizes of all the underlying ranges, if such a type exists.

===Example===
{{example
|code=
#include &lt;ranges&gt;

int main()
{
    constexpr static auto w = {1};
    constexpr static auto x = {2, 3};
    constexpr static auto y = {4, 5, 6};
    constexpr static auto z = {7, 8, 9, 10, 11, 12, 13};
    constexpr auto v = std::ranges::cartesian_product_view(w, x, y, z);
    static_assert(v.size() == w.size() * x.size() * y.size() * z.size() and v.size() == 42);
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc size}}
{{dsc inc|cpp/ranges/dsc ssize}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{title|1=operator==,&lt;=&gt;{{small|(ranges::cartesian_product_view::''iterator'')}}}}
{{cpp/ranges/cartesian_product_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|1=
friend constexpr bool operator==( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    requires std::equality_comparable&lt;ranges::iterator_t&lt;/*maybe-const*/&lt;Const, First&gt;&gt;&gt;;
}}
{{dcl|num=2|since=c++23|1=
friend constexpr bool operator==( const /*iterator*/&amp; x, std::default_sentinel_t );
}}
{{dcl|num=2|since=c++23|1=
friend constexpr auto operator&lt;=&gt;( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    requires /*all-random-access*/&lt;Const, First, Vs...&gt;;
}}
{{dcl end}}

Compares two {{rlp|/|iterators}} or an iterator and a sentinel.

Let {{rlpi|/#Data members|current_}} denote the underlying tuple of iterators.

@1@ Equivalent to: {{c|1=return x.current_ == y.current_;}}

@2@ Returns {{c|true}} if {{c|1=std::get&lt;i&gt;(x.current_) == ranges::end(std::get&lt;i&gt;(x.parent_-&gt;bases_))}} is {{c|true}} for any integer {{c|0 ≤ i ≤ sizeof...(Vs)}}. Otherwise, returns {{c|false}}.

@3@ Equivalent to: {{c|1=return x.current_ &lt;=&gt; y.current_;}}

{{cpp/hidden friend|{{tt|std::ranges::cartesian_product_view::''iterator''&lt;Const&gt;}}|plural=yes}}

{{cpp/note synthesized eq}}

===Parameters===
{{par begin}}
{{par|x, y|iterators or sentinels to compare}}
{{par end}}

===Return value===
The result of comparison.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/sentinel/dsc operator cmp|cartesian_product_view}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
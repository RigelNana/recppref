{{title|iter_swap{{small|(ranges::cartesian_product_view::''iterator'')}}}}
{{cpp/ranges/cartesian_product_view/navbar}}

{{ddcl|since=c++23|
friend constexpr void iter_swap( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    noexcept (/* see description */)
    requires (std::indirectly_swappable&lt;
        ranges::iterator_t&lt;/*maybe-const*/&lt;Const, First&gt;&gt;&gt; and ... and
            std::indirectly_swappable&lt;ranges::iterator_t&lt;/*maybe-const*/&lt;Const, Vs&gt;&gt;&gt;);
}}

Applies {{c|ranges::iter_swap}} to the stored underlying iterators. Formally, for every integer {{c|1=0 ≤ i ≤ sizeof...(Vs)}}, performs {{c|ranges::iter_swap(std::get&lt;i&gt;(x.current_), std::get&lt;i&gt;(y.current_))}}, where {{rlpi|/#Data members|current_}} is the underlying tuple of iterators.

{{cpp/hidden friend|{{tt|cartesian_product_view::''iterator''&lt;Const&gt;}}}}

===Parameters===
{{par begin}}
{{par|x, y|iterators to the elements to swap}}
{{par end}}

===Return value===
(none)

===Exceptions===
The exception specification is equivalent to the logical AND of the expression {{c|noexcept(ranges::iter_swap(std::get&lt;i&gt;(x.current_), std::get&lt;i&gt;(y.current_)))}} for every integer {{c|0 ≤ i ≤ sizeof...(Vs)}}.

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/ranges/dsc iter swap}}
{{dsc inc|cpp/algorithm/dsc iter swap}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
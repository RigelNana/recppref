{{cpp/ranges/cartesian_product_view/iterator/title|1=operator++,--,+=,-=}}
{{cpp/ranges/cartesian_product_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr /*iterator*/&amp; operator++();
}}
{{dcl|num=2|since=c++23|
constexpr void operator++( int );
}}
{{dcl|num=3|since=c++23|
constexpr /*iterator*/ operator++( int )
    requires ranges::forward_range&lt;/*maybe-const*/&lt;Const, First&gt;&gt;;
}}
{{dcl|num=4|since=c++23|
constexpr /*iterator*/&amp; operator--()
    requires /*cartesian-product-is-bidirectional*/&lt;Const, First, Vs...&gt;;
}}
{{dcl|num=5|since=c++23|
constexpr /*iterator*/ operator--( int )
    requires /*cartesian-product-is-bidirectional*/&lt;Const, First, Vs...&gt;;
}}
{{dcl|num=6|since=c++23|1=
constexpr /*iterator*/&amp; operator+=( difference_type n )
    requires /*cartesian-product-is-random-access*/&lt;Const, First, Vs...&gt;;
}}
{{dcl|num=7|since=c++23|1=
constexpr /*iterator*/&amp; operator-=( difference_type n )
    requires /*cartesian-product-is-random-access*/&lt;Const, First, Vs...&gt;;
}}
{{dcl end}}

Increments or decrements the {{rlp|iterator}}.

Let {{rlpi|/#Data members|current_}} denote the underlying tuple of iterators and {{rlpi|/#Data members|parent_}} denote the underlying pointer to {{tt|cartesian_product_view}}.

@1@ Equivalent to {{box|{{rlpi|helpers#next|next}}{{c/core|();}}{{nbspt}}{{c/core|return *this;}}}}
@2@ Equivalent to {{c|++*this;}}
@3@ Equivalent to {{c|1=auto tmp = *this; ++*this; return tmp;}}
@4@ Equivalent to {{box|{{rlpi|helpers#prev|prev}}{{c/core|();}}{{nbspt}}{{c/core|return *this;}}}}
@5@ Equivalent to {{c|1=auto tmp = *this; --*this; return tmp;}}
@6@ Sets the value of {{c|*this}} to {{tti|ret}}, where {{tti|ret}} is:
* if {{c|n &gt; 0}}, the value of {{c|*this}} provided that {{rlpi|helpers#next|next}} been called {{c|n}} times. Otherwise,
* if {{c|n &lt; 0}}, the value of {{c|*this}} provided that {{rlpi|helpers#prev|prev}} been called {{c|-n}} times. Otherwise,
* the value of {{c|*this}} before the call.
The behavior is undefined if {{c|n}} is not in the range {{range|ranges::distance(*this, ranges::begin(*parent_))|ranges::distance(*this, ranges::end(*parent_))|]}}.
@7@ Equivalent to {{c|1=*this += -n; return *this;}}.

===Parameters===
{{par begin}}
{{par|n|position relative to current location}}
{{par end}}

===Return value===
@1,4,6,7@ {{c|*this}}
@2@ (none)
@3,5@ a copy of {{c|*this}} that was made before the change.

===Complexity===
@6@ Constant.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc fun|cpp/ranges/cartesian_product_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|performs iterator arithmetic|notes={{mark c++23}}}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
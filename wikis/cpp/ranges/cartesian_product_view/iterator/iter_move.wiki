{{title|iter_move{{small|(ranges::cartesian_product_view::''iterator'')}}}}
{{cpp/ranges/cartesian_product_view/navbar}}
{{ddcl|since=c++23|
friend constexpr auto iter_move( const /*iterator*/&amp; i ) noexcept(/* see below */)
}}

Let {{rlpi|/#Data members|current_}} be the underlying tuple of iterators.

Equivalent to: {{c|return /*tuple-transform*/(ranges::iter_move, i.current_);}}

{{cpp/hidden friend|{{tt|cartesian_product_view::''iterator''&lt;Const&gt;}}}}

===Parameters===
{{par begin}}
{{par|i|iterator}}
{{par end}}

===Return value===
A tuple that contains the result of applying {{c|ranges::iter_move}} to the stored underlying iterators converted to the return type, as described above.

===Exceptions===
The exception specification is equivalent to the logical AND of the following expressions:
* {{c|noexcept(ranges::iter_move(std::get&lt;N&gt;(i.current_)))}} for every integer {{c|1=0 ≤ N ≤ sizeof...(Vs)}},
* {{c|std::is_nothrow_move_constructible_v&lt;ranges::range_rvalue_reference_t&lt;/*maybe-const*/&lt;Const, T&gt;&gt;&gt;}} for every type {{tt|T}} in {{tt|First, Vs...}}.

===See also===
{{dsc begin}}
{{dsc inc|cpp/iterator/ranges/dsc iter_move}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
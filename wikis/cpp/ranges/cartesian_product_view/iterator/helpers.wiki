{{cpp/ranges/cartesian_product_view/iterator/title|''next''|''prev''|''distance_from''}}
{{cpp/ranges/cartesian_product_view/navbar}}

{{anchor|next}}
{{member|{{small|std::ranges::cartesian_product_view::''iterator''::}}''next''|2=
{{ddcl|since=c++23|notes={{mark expos}}|1=
template&lt; std::size_t N = sizeof...(Vs) &gt;
constexpr void /*next*/();
}}

If called with default template parameter, recursively generates the next element (the tuple of iterators) in {{tt|cartesian_product_view}}.

Let {{rlpi|/#Data members|current_}} denote the underlying tuple of iterators. Equivalent to:
{{source|1=
auto&amp; it = std::get&lt;N&gt;(current_);
++it;
if constexpr (N &gt; 0)
{
    if (it == ranges::end(std::get&lt;N&gt;(parent_-&gt;bases_)))
    {
        it = ranges::begin(std::get&lt;N&gt;(parent_-&gt;bases_));
        next&lt;N - 1&gt;();
    }
}
}}

Used in the following non-static member functions:
* {{c/core|ranges::cartesian_product_view::}}{{rlpt|operator_arith|operator+}}
}}

{{anchor|prev}}
{{member|{{small|std::ranges::cartesian_product_view::''iterator''::}}''prev''|2=
{{ddcl|since=c++23|notes={{mark expos}}|1=
template&lt; std::size_t N = sizeof...(Vs) &gt;
constexpr void /*prev*/();
}}

If called with default template parameter, recursively generates the previous element (the tuple of iterators) in {{tt|cartesian_product_view}}.

Let {{rlpi|/#Data members|current_}} denote the underlying tuple of iterators. Equivalent to:
{{source|1=
auto&amp; it = std::get&lt;N&gt;(current_);
if constexpr (N &gt; 0)
{
    if (it == ranges::begin(std::get&lt;N&gt;(parent_-&gt;bases_)))
    {
        it = /*cartesian-common-arg-end*/(std::get&lt;N&gt;(parent_-&gt;bases_));
        prev&lt;N - 1&gt;();
    }
}
--it;
}}

Used in the following non-static member functions:
* {{c/core|ranges::cartesian_product_view::}}{{rlpt|operator_arith|operator-}}
}}

{{anchor|distance from}}
{{member|{{small|std::ranges::cartesian_product_view::''iterator''::}}''distance_from''|2=
{{ddcl|since=c++23|notes={{mark expos}}|1=
template&lt; class Tuple &gt;
constexpr difference_type
    /*distance-from*/( const Tuple&amp; t ) const;
}}

Returns the "distance" (i.e., number of "hops") between two {{rlp|/|iterators}}.

Let:
* {{rlpt|/#Data members|''parent_''}} be the underlying pointer to {{tt|cartesian_product_view}}
* {{c|/*scaled-size*/(N)}} be:
** the product of {{c|static_cast&lt;difference_type&gt;(ranges::size(std::get&lt;N&gt;(parent_-&gt;bases_)))}} and {{c|/*scaled-size*/(N + 1)}} if {{c|N ≤ sizeof...(Vs)}}, otherwise
** {{c|static_cast&lt;difference_type&gt;(1);}}
* {{c|/*scaled-distance*/(N)}} be the product of {{c|static_cast&lt;difference_type&gt;(std::get&lt;N&gt;(current_) - std::get&lt;N&gt;(t))}} and {{c|/*scaled-size*/(N + 1);}}
* {{c|/*scaled-sum*/}} be the sum of {{c|/*scaled-distance*/(N)}} for every integer {{c|0 ≤ N ≤ sizeof...(Vs)}}.

Returns: {{c|/*scaled-sum*/}}.

The behavior is undefined if {{c|/*scaled-sum*/}} cannot be represented by {{tt|difference_type}}.

Used in the following functions:
* {{rlpt|operator_arith2|operator-}}{{c/core|(const /*iterator*/&amp;, const /*iterator*/&amp;)}}
* {{rlpt|operator_arith2|operator-}}{{c/core|(const /*iterator*/&amp;, std::default_sentinel_t)}}

===Parameters===
{{par begin}}
{{par|t|a tuple of iterators to find the distance to}}
{{par end}}

}}

{{langlinks|de|es|ja|ru|zh}}
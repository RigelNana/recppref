{{cpp/ranges/cartesian_product_view/title|end}}
{{cpp/ranges/cartesian_product_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
constexpr iterator&lt;false&gt; end()
    requires ((!/*simple-view*/&lt;First&gt; {{!!}} ... {{!!}} !/*simple-view*/&lt;Vs&gt;) &amp;&amp;
        /*cartesian-product-is-common*/&lt;First, Vs...&gt;);
}}
{{dcl|num=2|since=c++23|1=
constexpr iterator&lt;true&gt; end() const
    requires /*cartesian-product-is-common*/&lt;const First, const Vs...&gt;;
}}
{{dcl|num=3|since=c++23|1=
constexpr std::default_sentinel_t end() const noexcept;
}}
{{dcl end}}

Returns an {{rlp|iterator}} or a sentinel representing the end of the {{rlpt|/|cartesian_product_view}}.

Let {{rlpi|/#Data members|bases_}} be the underlying tuple of views.

@1,2@ Equivalent to
@@ {{c multi
|1=auto check = [](auto&amp; rng) { return __begin_or_first_end(rng); };
|2=return iterator&lt;__is_const&gt;(/*tuple-transform*/(check, bases_));
}},
@@ where:
* {{c|__is_const}} is {{c|true}} for the ''const-qualified'' overload, and {{c|false}} otherwise.
* {{c|__is_empty}} is {{c|true}} if the expression {{c|ranges::empty(rng)}} is {{c|true}} for any {{c|rng}} among the underlying ranges except the first one and {{c|false}} otherwise.
* {{c|__begin_or_first_end(rng)}} is [[cpp/language/expressions#Expression-equivalence|expression-equivalent]] to {{c|__is_empty ? ranges::begin(rng) : /*cartesian-common-arg-end*/(rng)}} if {{c|rng}} is the first underlying range and {{c|ranges::begin(rng)}} otherwise.

@3@ Equivalent to: {{c|return std::default_sentinel;}}.

===Parameters===
(none)

===Return value===
An {{rlp|iterator}} to the element following the last element, or a sentinel which compares equal to the end iterator.

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;format&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string_view&gt;
#include &lt;tuple&gt;
using namespace std::literals;

int main()
{
    constexpr auto a = std::array{ "bool"sv, "goto"sv, "extern"sv, "long"sv }; /*
                                       ^         ^           ^         ^        */
    constexpr auto v = std::ranges::cartesian_product_view(a[0], a[1], a[2], a[3]);

    constexpr std::tuple&lt;char const&amp;,
                         char const&amp;,
                         char const&amp;,
                         char const&amp;&gt; last{*(v.end() - 1)};

    std::cout &lt;&lt; std::format("{}{}{}{}{}",
                             std::get&lt;0&gt;(last),
                             std::get&lt;1&gt;(last),
                             std::get&lt;2&gt;(last),
                             std::get&lt;3&gt;(last), '\n');
}
|output=long
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|cartesian_product_view}}
{{dsc inc|cpp/ranges/dsc end}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/ranges/cartesian_product_view/title|''iterator''}}
{{cpp/ranges/cartesian_product_view/navbar}}

{{ddcl|since=c++23|notes={{mark expos}}|
template&lt; bool Const &gt;
class /*iterator*/
}}

The return type of {{rlpt|begin|cartesian_product_view::begin}}, and of {{rlpt|end|cartesian_product_view::end}} when the underlying view {{tt|V}} is a {{lconcept|common_range}}.

The type {{c|/*iterator*/&lt;true&gt;}} is returned by the const-qualified overloads. The type {{c|/*iterator*/&lt;false&gt;}} is returned by the non-const-qualified overloads.

===Member types===
{{dsc begin}}
{{dsc hitem|Member|Definition}}
{{dsc expos mem type|Parent|private=yes|{{cpp/ranges/maybe-const|ranges::cartesian_product_view&gt;}}}}
{{dsc|{{tt|iterator_category}}|{{c/core|std::input_iterator_tag}}}}
{{dsc|{{tt|iterator_concept}}|
* {{lc|std::random_access_iterator_tag}}, if {{c/core|/*cartesian-product-is-random-access*/&lt;Const, First, Vs...&gt;}} is modeled,
* {{lc|std::bidirectional_iterator_tag}}, if {{c/core|/*cartesian-product-is-bidirectional*/&lt;Const, First, Vs...&gt;}} is modeled,
* {{lc|std::forward_iterator_tag}}, if {{cpp/ranges/maybe-const|First}} models {{lconcept|forward_range}},
* {{lc|std::input_iterator_tag}}, otherwise.}}
{{dsc|{{tt|value_type}}|{{cc multi
|std::tuple&lt;ranges::range_value_t&lt;/*maybe-const*/&lt;Const, First&gt;&gt;,
|           ranges::range_value_t&lt;/*maybe-const*/&lt;Const, Vs&gt;&gt;...&gt;;}}
}}
{{dsc|{{tt|reference}}|{{cc multi
|std::tuple&lt;ranges::range_reference_t&lt;/*maybe-const*/&lt;Const, First&gt;&gt;,
|           ranges::range_reference_t&lt;/*maybe-const*/&lt;Const, Vs&gt;&gt;...&gt;;}}
}}
{{dsc|{{tt|difference_type}}|An implementation-defined ''signed-integer-like'' type (maybe the smallest of such types), which is sufficiently wide to store the product of the maximum sizes of all underlying ranges, if such type exists.}}
{{dsc end}}

===Data members===
{{dsc begin}}
{{dsc hitem|Member|Definition}}
{{dsc expos mem obj|parent_|private=yes|spec={{tti|Parent*}}|A pointer to the parent object {{rlpt|cartesian_product_view}}}}
{{dsc expos mem obj|current_|private=yes|A tuple of iterators to the current underlying elements of type {{cc multi
|std::tuple&lt;ranges::iterator_t&lt;/*maybe-const*/&lt;Const, First&gt;&gt;,
|           ranges::iterator_t&lt;/*maybe-const*/&lt;Const, Vs&gt;&gt;...&gt;}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/cartesian_product_view/iterator/iterator|constructs an iterator}}
{{dsc mem fun|cpp/ranges/cartesian_product_view/iterator/operator*|accesses the element}}
{{dsc mem fun|cpp/ranges/cartesian_product_view/iterator/operator_at|title=operator[]|accesses an element by index}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|cartesian_product_view}}
{{dsc expos mem fun|cpp/ranges/cartesian_product_view/iterator/helpers#next|title=''next''|advances the iterator}}
{{dsc expos mem fun|cpp/ranges/cartesian_product_view/iterator/helpers#prev|title=''prev''|decrements the iterator}}
{{dsc expos mem fun|cpp/ranges/cartesian_product_view/iterator/helpers#distance_from|title=''distance_from''|returns the distance between two iterators}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc fun|cpp/ranges/cartesian_product_view/iterator/operator_cmp|title=operator==&lt;br&gt;operator&lt;=&gt;|compares the underlying iterators|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/cartesian_product_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|performs iterator arithmetic|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/cartesian_product_view/iterator/iter_move|casts the result of dereferencing the underlying iterator to its associated rvalue reference type|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/cartesian_product_view/iterator/iter_swap|swaps underlying pointed-to elements|notes={{mark c++23}}}}
{{dsc end}}

===Example===
{{example}}

===References===
{{ref std c++23}}
{{ref std|title=Class template {{tt|cartesian_product_view::iterator}}|id=range.cartesian.iterator|section=26.7.32.3}}
{{ref std end}}

===See also===
{{dsc begin}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
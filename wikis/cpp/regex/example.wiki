{{example
|1={{{1|}}}
|lang={{{lang|}}}
|code=
#include &lt;iostream&gt;
#include &lt;regex&gt;

// TODO: Convert to wide-accepting
// std::match_results&lt;std::basic_string&lt;_ch&gt;::const_iterator&gt; m; does not work.
void show_matches(const std::string&amp; in, const std::string&amp; re)
{
    std::smatch m;
    std::regex_search(in, m, std::regex(re));
    if(m.empty()) {
        std::cout &lt;&lt; "input=[" &lt;&lt; in &lt;&lt; "], regex=[" &lt;&lt; re &lt;&lt; "]: NO MATCH\n";
    } else {
        std::cout &lt;&lt; "input=[" &lt;&lt; in &lt;&lt; "], regex=[" &lt;&lt; re &lt;&lt; "]: ";
        std::cout &lt;&lt; "prefix=[" &lt;&lt; m.prefix() &lt;&lt; "] ";
        for(std::size_t n = 0; n &lt; m.size(); ++n)
            std::cout &lt;&lt; " m[" &lt;&lt; n &lt;&lt; "]=[" &lt;&lt; m[n] &lt;&lt; "] ";
        std::cout &lt;&lt; "suffix=[" &lt;&lt; m.suffix() &lt;&lt; "]\n";
    }
}

{{{code|/* TODO */}}}
| p={{{p|}}}
| std={{{std|}}}
| output={{{output|}}}}}&lt;noinclude&gt;
{{documentation|content=This is a wrapper for [[Template:example]] used for the regex pages. It auto-includes a show_matches function. All other parameters are equivalent. Just call &lt;code&gt;&lt;nowiki&gt;{{:cpp/regex/example}}&lt;/nowiki&gt;&lt;/code&gt; instead.}}
&lt;/noinclude&gt;
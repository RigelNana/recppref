{{cpp/regex/regex_token_iterator/title|operator{{==}}, operator!{{=}}}}
{{cpp/regex/regex_token_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1=
bool operator==( const regex_token_iterator&amp; other ) const;
}}
{{dcl|num=2|since=c++11|until=c++20|1=
bool operator!=( const regex_token_iterator&amp; other ) const;
}}
{{dcl end}}

Checks whether {{c|*this}} and {{c|other}} are equivalent.

Two regex token iterators are equal if:

@a@ They are both end-of-sequence iterators.

@b@ They are both suffix iterators and the suffixes are equal.

@c@ Neither of them is end-of-sequence or suffix iterator and:

::* {{c|1=position == other.position}}
::* {{c|1=N == other.N}}
::* {{c|1=subs == other.subs}}


@1@ Checks whether {{c|*this}} is ''equal to'' {{c|other}}.

@2@ Checks whether {{c|*this}} is ''not equal to'' {{c|other}}.

{{rrev|since=c++20|
{{cpp/note synthesized eq}}
}}

{{todo|Explain better. For example, {{tt|subs}} is an exposition-only vector of matched sub-expressions.}}

===Parameters===
{{par begin}}
{{par|other|another regex token iterator to compare to}}
{{par end}}

===Return value===
@1@ {{c|true}} if {{c|*this}} is ''equal to'' {{c|other}}, {{c|false}} otherwise.

@2@ {{c|true}} if {{c|*this}} is ''not equal to'' {{c|other}}, {{c|false}} otherwise.

{{langlinks|de|es|ja|ru|zh}}
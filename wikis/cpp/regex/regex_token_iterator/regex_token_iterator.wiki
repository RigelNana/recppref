{{cpp/regex/regex_token_iterator/title|regex_token_iterator}}
{{cpp/regex/regex_token_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1= 
regex_token_iterator();
}}
{{dcl|num=2|since=c++11|1= 
regex_token_iterator( BidirIt a, BidirIt b,
                      const regex_type&amp; re,
                      int submatch = 0,
                      std::regex_constants::match_flag_type m =
                          std::regex_constants::match_default );
}}
{{dcl|num=3|since=c++11|1= 
regex_token_iterator( BidirIt a, BidirIt b,
                      const regex_type&amp; re,
                      const std::vector&lt;int&gt;&amp; submatches,
                      std::regex_constants::match_flag_type m =
                          std::regex_constants::match_default );
}}
{{dcl|num=4|since=c++11|1= 
regex_token_iterator( BidirIt a, BidirIt b,
                      const regex_type&amp; re,
                      std::initializer_list&lt;int&gt; submatches,
                      std::regex_constants::match_flag_type m =
                          std::regex_constants::match_default );
}}
{{dcl|num=5|since=c++11|1= 
template&lt; std::size_t N &gt;
regex_token_iterator( BidirIt a, BidirIt b,
                      const regex_type&amp; re,
                      const int (&amp;submatches)[N],
                      std::regex_constants::match_flag_type m =
                          std::regex_constants::match_default );
}}
{{dcl|num=6|since=c++11|1= 
regex_token_iterator( const regex_token_iterator&amp; other );
}}
{{dcl|num=7|since=c++11|1= 
regex_token_iterator( BidirIt a, BidirIt b,
                      const regex_type&amp;&amp; re,
                      int submatch = 0,
                      std::regex_constants::match_flag_type m =
                          std::regex_constants::match_default ) = delete;
}}
{{dcl|num=8|since=c++11|1= 
regex_token_iterator( BidirIt a, BidirIt b,
                      const regex_type&amp;&amp; re,
                      const std::vector&lt;int&gt;&amp; submatches,
                      std::regex_constants::match_flag_type m =
                          std::regex_constants::match_default ) = delete;
}}
{{dcl|num=9|since=c++11|1= 
regex_token_iterator( BidirIt a, BidirIt b,
                      const regex_type&amp;&amp; re,
                      std::initializer_list&lt;int&gt; submatches,
                      std::regex_constants::match_flag_type m =
                          std::regex_constants::match_default ) = delete;
}}
{{dcl|num=10|since=c++11|1= 
template&lt; std::size_t N &gt;
regex_token_iterator( BidirIt a, BidirIt b,
                      const regex_type&amp;&amp; re,
                      const int (&amp;submatches)[N],
                      std::regex_constants::match_flag_type m =
                          std::regex_constants::match_default ) = delete;
}}
{{dcl end}}

Constructs a new {{tt|regex_token_iterator}}:

@1@ Default constructor. Constructs the end-of-sequence iterator.

@2-5@ First, copies the list of the requested submatch out of the {{c|submatches}} or {{c|submatch}} argument into the member list stored in the iterator and constructs the member {{lc|std::regex_iterator}} by passing {{c|a}}, {{c|b}}, {{c|re}}, and {{c|m}} to its four-argument constructor (that constructor performs the initial call to {{lc|std::regex_search}}) and sets the internal counter of {{c|submatches}} to zero.
* If, after construction, the member {{tt|regex_iterator}} is not an end-of-sequence iterator, sets the member pointer to the address of the current {{lc|std::sub_match}}.
* Otherwise (if the member {{tt|regex_iterator}} is an end-of-sequence iterator), but the value {{c|-1}} is one of the values in {{c|submatches}}/{{c|submatch}}, turns {{c|*this}} into a ''suffix iterator'' pointing at the range {{range|a|b}} (the entire string is the non-matched suffix).
* Otherwise (if {{c|-1}} is not in the list of {{c|submatches}}), turns {{c|*this}} into the end-of-sequence iterator.

The behavior is undefined if any value in {{c|submatches}} is less than {{c|-1}}.

@6@ Copy constructor: performs member-wise copy (including making a copy of the member {{tt|regex_iterator}} and the member pointer to current {{lc|sub_match}}).

@7-10@ The overloads {{v|2-5}} are prohibited from being called with a temporary regex since otherwise the returned iterator would be immediately invalidated.

===Parameters===
{{par begin}}
{{par|a|{{named req|BidirectionalIterator}} to the beginning of the target character sequence}}
{{par|b|{{named req|BidirectionalIterator}} to the end of the target character sequence}}
{{par|re|regular expression used to search the target character sequence}}
{{par|submatch|the index of the submatch that should be returned. "0" represents the entire match, and "-1" represents the parts that are not matched (e.g, the stuff between matches)}}
{{par|submatches|the sequence of submatch indices that should be iterated over within each match, may include the special value {{c|-1}} for the non-matched fragments}}
{{par|m|flags that govern the behavior of {{c|re}}}}
{{par end}}

===Example===
{{example
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2332|std=C++11|before=a {{tt|regex_token_iterator}} constructed from a&lt;br&gt;temporary {{tt|basic_regex}} became invalid immediately|after=such construction is disallowed via deleted overloads}}
{{dr list end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
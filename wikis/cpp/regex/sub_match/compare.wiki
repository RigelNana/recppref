{{cpp/regex/sub_match/title|compare}}
{{cpp/regex/sub_match/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|
int compare( const sub_match&amp; m ) const;
}}
{{dcl|num=2|since=c++11|
int compare( const string_type&amp; s ) const;
}}
{{dcl|num=3|since=c++11|
int compare( const value_type* c ) const;
}}
{{dcl end}}

@1@ Compares two {{tt|sub_match}}es directly by comparing their underlying character sequences. Equivalent to {{c|str().compare(m.str())}}.

@2@ Compares a {{tt|sub_match}} with a {{lc|std::basic_string}}. Equivalent to {{c|str().compare(s)}}.

@3@ Compares a {{tt|sub_match}} with a null-terminated sequence of the underlying character type pointed to by {{c|s}}. Equivalent to {{c|str().compare(c)}}.

===Parameters===
{{par begin}}
{{par|m|a reference to another sub_match}}
{{par|s|a reference to a string to compare to}}
{{par|c|a pointer to a null-terminated character sequence of the underlying {{tt|value_type}} to compare to}}
{{par end}}

===Return value===
A value less than zero if this {{tt|sub_match}} is ''less'' than the other character sequence, zero if the both underlying character sequences are equal, greater than zero if this {{tt|sub_match}} is ''greater'' than the other character sequence.

===Notes===
This function is infrequently used directly by application code. Instead, one of the non-member comparison operators is used.

===Example===
{{example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc compare}}
{{dsc inc|cpp/regex/sub_match/dsc str}}
{{dsc inc|cpp/regex/sub_match/dsc operator_cmp}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
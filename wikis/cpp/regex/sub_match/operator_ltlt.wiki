{{title|operator&lt;&lt;{{small|(std::sub_match)}}}}
{{cpp/regex/sub_match/navbar}}
{{dcl begin}}
{{dcl|since=c++11|
template&lt; class CharT, class Traits, class BidirIt &gt;
std::basic_ostream&lt;CharT,Traits&gt;&amp;
    operator&lt;&lt;( std::basic_ostream&lt;CharT,Traits&gt;&amp; os, const sub_match&lt;BidirIt&gt;&amp; m );
}}
{{dcl end}}

Writes the representation of the matched subsequence {{c|m}} to the output stream {{c|os}}. 
Equivalent to {{c|os &lt;&lt; m.str()}}.

===Parameters===
{{par begin}}
{{par|os|output stream to write the representation to}}
{{par|m|a sub-match object to output}}
{{par end}}

===Return value===
{{c|os}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;regex&gt;
#include &lt;string&gt;

int main()
{
    std::string sentence{"Quick red fox jumped over a lazy hare."};
    const std::regex re{"([A-z]+) ([a-z]+) ([a-z]+)"};
    std::smatch words;
    std::regex_search(sentence, words, re);
    for (const auto&amp; m : words)
        // m has type `const std::sub_match&lt;std::string::const_iterator&gt;&amp;`
        std::cout &lt;&lt; '[' &lt;&lt; m &lt;&lt; "] ";
    std::cout &lt;&lt; '\n';
}
|output=
[Quick red fox] [Quick] [red] [fox]
}}

{{langlinks|de|es|ja|ru|zh}}
{{cpp/title|n=regex_constants::|match_flag_type}}
{{cpp/regex/navbar}}
{{dcl begin}}
{{dcl header|regex}}
{{dcl|num=1|since=c++11|1=
using match_flag_type = /* implementation-defined */;
}}
{{dcl|num=2|since=c++11|notes={{mark|inline since C++17}}|1=
constexpr match_flag_type match_default =     {};
constexpr match_flag_type match_not_bol =     /* unspecified */;
constexpr match_flag_type match_not_eol =     /* unspecified */;
constexpr match_flag_type match_not_bow =     /* unspecified */;
constexpr match_flag_type match_not_eow =     /* unspecified */;
constexpr match_flag_type match_any =         /* unspecified */;
constexpr match_flag_type match_not_null =    /* unspecified */;
constexpr match_flag_type match_continuous =  /* unspecified */;
constexpr match_flag_type match_prev_avail =  /* unspecified */;
constexpr match_flag_type format_default =    {};
constexpr match_flag_type format_sed =        /* unspecified */;
constexpr match_flag_type format_no_copy =    /* unspecified */;
constexpr match_flag_type format_first_only = /* unspecified */;
}}
{{dcl end}}

@1@ {{tt|match_flag_type}} is a {{named req|BitmaskType}} that specifies additional regular expression matching options.

===Constants===
Note: {{range|first|last}} refers to the character sequence being matched.

{{dsc begin}}
{{dsc hitem|Name|Explanation}}
{{dsc|{{tt|match_not_bol}}|The first character in {{range|first|last}} will be treated as if it is '''not''' at the beginning of a line&lt;br&gt;(i.e. {{tt|^}} will not match {{range|first|first}}).}}
{{dsc|{{tt|match_not_eol}}|The last character in {{range|first|last}} will be treated as if it is '''not''' at the end of a line&lt;br&gt;(i.e. {{tt|$}} will not match {{range|last|last}}).}}
{{dsc|{{tt|match_not_bow}}|{{tt|\b}} will not match {{range|first|first}}.}}
{{dsc|{{tt|match_not_eow}}|{{tt|\b}} will not match {{range|last|last}}.}}
{{dsc|{{tt|match_any}}|If more than one match is possible, then any match is an acceptable result.}}
{{dsc|{{tt|match_not_null}}|Do not match empty sequences.}}
{{dsc|{{tt|match_continuous}}|Only match a sub-sequence that begins at {{c|first}}.}}
{{dsc|{{tt|match_prev_avail}}|{{c|--first}} is a valid iterator position.&lt;br&gt;When set, causes {{tt|match_not_bol}} and {{tt|match_not_bow}} to be ignored.}}
{{dsc|{{tt|format_default}}|Use ECMAScript rules to construct strings in {{lc|std::regex_replace}} ([https://ecma-international.org/ecma-262/5.1/#sec-15.5.4.11 syntax documentation]).}}
{{dsc|{{tt|format_sed}}|Use POSIX ''sed'' utility rules in {{lc|std::regex_replace}} ([https://pubs.opengroup.org/onlinepubs/9699919799/utilities/sed.html#tag_20_116_13_03 syntax documentation]).}}
{{dsc|{{tt|format_no_copy}}|Do not copy un-matched strings to the output in {{lc|std::regex_replace}}.}}
{{dsc|{{tt|format_first_only}}|Only replace the first match in {{lc|std::regex_replace}}.}}
{{dsc end}}

All constants, except for {{tt|match_default}} and {{tt|format_default}}, are bitmask elements. The {{tt|match_default}} and {{tt|format_default}} constants are empty bitmasks.

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2053|std=C++11|before=1. the constants were declared {{c/core|static}}&lt;br&gt;2. {{tt|match_default}} and {{tt|format_default}} were initialized from {{c|0}}|after=1. removed the {{c/core|static}} specifier&lt;br&gt;2. initialized from {{c|{}&lt;!----&gt;}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/regex/dsc regex_match}}
{{dsc inc|cpp/regex/dsc syntax_option_type}}
{{dsc inc|cpp/regex/dsc error_type}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
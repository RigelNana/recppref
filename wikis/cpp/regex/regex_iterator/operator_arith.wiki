{{cpp/regex/regex_iterator/title|operator++, operator++{{small|(int)}}}}
{{cpp/regex/regex_iterator/navbar}}
{{dcl begin}}
{{dcl|since=c++11|1=
regex_iterator&amp; operator++();
}}
{{dcl|since=c++11|1=
regex_iterator operator++( int );
}}
{{dcl end}}

Advances the iterator on the next match.

{{todo|explain better}}

At first, a local variable of type {{tt|BidirIt}} is constructed with the value of {{c|match[0].second}}. 

If the iterator holds a zero-length match and {{c|start {{==}} end}}, {{c|*this}} is set to end-of-sequence iterator and the function returns.

Otherwise, if the iterator holds a zero-length match the operator invokes the following:

{{cc|regex_search(start, end, match, *pregex, 
             flags {{!}} regex_constants::match_not_null {{!}} 
                     regex_constants::match_continuous);}} 

If the call returns {{c|true}}, the function returns.

Otherwise the operator increments {{tt|start}} and continues as if the most recent match was not a zero-length match.

If the most recent match was not a zero-length match, the operator sets {{tt|flags}} to {{c|flags {{!}} regex_constants::match_prev_avail}} and invokes the following: 

{{cc|regex_search(start, end, match, *pregex, flags);}}

If the call returns {{c|false}}, the iterator sets {{c|*this}} to the end-of-sequence iterator, the function returns.

In all cases in which the call to {{c|regex_search}} returns {{c|true}}, {{c|match.prefix().first}} will be equal to the previous value of {{c|match[0].second}} and for each index i in the range {{range|0|match.size()}} for which {{c|match[i].matched}} is {{c|true}}, {{c|match[i].position()}} will return {{c|distance(begin, match[i].first)}}.

This means that {{c|match[i].position()}} gives the offset from the beginning of the target sequence, which is often not the same as the offset from the sequence passed in the call to {{c|regex_search}}.

It is unspecified how the implementation makes these adjustments. This means that a compiler may call an implementation-specific search function, in which case a user-defined specialization of {{c|regex_search}} will not be called.

The behavior is undefined if the iterator is end-of-sequence iterator.

===Parameters===
(none)

===Return value===
@1@ {{c|*this}}

@2@ The previous value of the iterator.

{{langlinks|de|es|ja|ru|zh}}
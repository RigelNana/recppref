{{cpp/regex/match_results/title|format}}
{{cpp/regex/match_results/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1=
template&lt; class OutputIt &gt;
OutputIt format( OutputIt out,
                 const char_type* fmt_first, const char_type* fmt_last,
                 std::regex_constants::match_flag_type flags =
                     std::regex_constants::format_default ) const;
}}
{{dcl|num=2|since=c++11|1=
template&lt; class OutputIt, class ST, class SA &gt;
OutputIt format( OutputIt out,
                 const basic_string&lt;char_type,ST,SA&gt;&amp; fmt,
                 std::regex_constants::match_flag_type flags =
                     std::regex_constants::format_default ) const;
}}
{{dcl|num=3|since=c++11|1=
template&lt; class ST, class SA &gt;
std::basic_string&lt;char_type,ST,SA&gt; 
    format( const std::basic_string&lt;char_type,ST,SA&gt;&amp; fmt,
            std::regex_constants::match_flag_type flags =
                std::regex_constants::format_default ) const;
}}
{{dcl|num=4|since=c++11|1=
string_type format( const char_type* fmt_s,
                    std::regex_constants::match_flag_type flags =
                        std::regex_constants::format_default ) const;
}}
{{dcl end}}

{{tt|format}} outputs a format string, replacing any format specifiers or escape sequences in that string with match data from {{c|*this}}.

@1@ The format character sequence is defined by the range {{range|fmt_first|fmt_last}}. The resulting character sequence is copied to {{c|out}}.
@2@ The format character sequence is defined by the characters in {{c|fmt}}. The resulting character sequence is copied to {{c|out}}.
@3,4@ The format character sequence is defined by the characters in {{c|fmt}} and {{c|fmt_s}} respectively. The resulting character sequence is copied to a newly constructed {{lc|std::basic_string}}, which is returned.

The {{c|flags}} bitmask determines which format specifiers and escape sequences are recognized.

The behavior of {{tt|format}} is undefined if {{c|1=ready() != true}}.

===Parameters===
{{par begin}}
{{par|fmt_begin, fmt_end|pointers to a range of characters defining the format character sequence}}
{{par|fmt|{{lc|std::basic_string}} defining the format character sequence}}
{{par|fmt_s|pointer to a null-terminated character string defining the format character sequence}}
{{par|out|iterator that the resulting character sequence is copied to}}
{{par|flags|{{lc|std::regex_constants::match_flag_type}} bitmask specifying which format specifiers and escape sequences are recognized}}
{{par hreq}}
{{par req named|OutputIt|OutputIterator}}
{{par end}}

===Return value===
@1,2@ {{c|out}}
@3,4@ The newly constructed string containing resulting character sequence.

{{cpp/impldef exception}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;regex&gt;
#include &lt;string&gt;

int main()
{
    std::string s = "for a good time, call 867-5309";
    std::regex phone_regex("\\d{3}-\\d{4}");
    std::smatch phone_match;

    if (std::regex_search(s, phone_match, phone_regex))
    {
        std::string fmt_s = phone_match.format(
            "$`"   // $` means characters before the match
            "[$&amp;]" // $&amp; means the matched characters
            "$'"); // $' means characters following the match
        std::cout &lt;&lt; fmt_s &lt;&lt; '\n';
    }   
}
|output=
for a good time, call [867-5309]
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/regex/dsc regex_replace}}
{{dsc inc|cpp/regex/dsc match_flag_type}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
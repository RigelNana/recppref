{{cpp/regex/basic_regex/title|mark_count}}
{{cpp/regex/basic_regex/navbar}}
{{ddcl|since=c++11|
unsigned mark_count() const;
}}

Returns the number of marked sub-expressions (also known as capture groups) within the regular expression.

===Parameters===
(none)

===Return value===
The number of marked sub-expressions within the regular expression.

{{cpp/impldef exception}}

===Example===
{{example
|code= 
#include &lt;iostream&gt;
#include &lt;regex&gt;

int main()
{    
    std::regex r1{"abcde"};
    std::cout &lt;&lt; "r1 has " &lt;&lt; r1.mark_count() &lt;&lt; " subexpressions" &lt;&lt; '\n';
    // Expected: 0
    
    std::regex r2{"ab(c)de"};
    std::cout &lt;&lt; "r2 has " &lt;&lt; r2.mark_count() &lt;&lt; " subexpressions" &lt;&lt; '\n';
    // Expected: 1
    
    std::regex r3{"a(bc)d(e)"}; 
    std::cout &lt;&lt; "r3 has " &lt;&lt; r3.mark_count() &lt;&lt; " subexpressions" &lt;&lt; '\n';
    // Expected: 2
    
    // Nested sub-expressions
    std::regex r4{"abc(de(fg))"};
    std::cout &lt;&lt; "r4 has " &lt;&lt; r4.mark_count() &lt;&lt; " subexpressions" &lt;&lt; '\n';
    // Expected: 2
    
    // Escaped parentheses
    std::regex r5{"a(bc\\(\\)de)"};
    std::cout &lt;&lt; "r5 has " &lt;&lt; r5.mark_count() &lt;&lt; " subexpressions" &lt;&lt; '\n';
    // Expected: 1
    
    // Using nosubs flag
    std::regex r6{"ab(c)de", std::regex_constants::nosubs};
    std::cout &lt;&lt; "r6 has " &lt;&lt; r6.mark_count() &lt;&lt; " subexpressions" &lt;&lt; '\n';
    // Expected: 0
}
|output=
r1 has 0 subexpressions
r2 has 1 subexpressions
r3 has 2 subexpressions
r4 has 2 subexpressions
r5 has 1 subexpressions
r6 has 0 subexpressions
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
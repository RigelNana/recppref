{{cpp/chrono/title|zoned_time}}
{{cpp/chrono/zoned_time/navbar}}
{{dcl begin}}
{{dcl header|chrono}}
{{dcl|since=c++20|1=
template&lt;
    class Duration,
    class TimeZonePtr = const std::chrono::time_zone*
&gt; class zoned_time;
}}
{{dcl|since=c++20|1=
using zoned_seconds = std::chrono::zoned_time&lt;std::chrono::seconds&gt;;
}}
{{dcl end}}

The class {{tt|zoned_time}} represents a logical pairing of a time zone and a {{lc|std::chrono::time_point}} whose resolution is {{tt|Duration}}.

An invariant of {{tt|zoned_time}} is that it always refers to a valid time zone and represents an existing and unambiguous time point in that time zone. Consistent with this invariant, {{tt|zoned_time}} has no move constructor or move assignment operator; attempts to move a {{tt|zoned_time}} will perform a copy.

The program is ill-formed if {{tt|Duration}} is not a specialization of {{lc|std::chrono::duration}}.

The template parameter {{tt|TimeZonePtr}} allows users to supply their own time zone pointer types and further customize the behavior of {{tt|zoned_time}} via {{lc|std::chrono::zoned_traits}}. Custom time zone types need not support all the operations supported by {{lc|std::chrono::time_zone}}, only those used by the functions actually called on the {{tt|zoned_time}}.

{{tt|TimeZonePtr}} must be {{named req|MoveConstructible}}. Move-only {{tt|TimeZonePtr}}s are allowed but difficult to use, as the {{tt|zoned_time}} will be immovable and it is not possible to access the stored {{tt|TimeZonePtr}}.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|duration}}|{{c/core|std::common_type_t&lt;Duration, std::chrono::seconds&gt;}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/chrono/zoned_time/dsc constructor}}
{{dsc inc|1=cpp/chrono/zoned_time/dsc operator=}}
{{dsc inc|cpp/chrono/zoned_time/dsc get_time_zone}}
{{dsc inc|cpp/chrono/zoned_time/dsc get_local_time}}
{{dsc inc|cpp/chrono/zoned_time/dsc get_sys_time}}
{{dsc inc|cpp/chrono/zoned_time/dsc get_info}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/chrono/zoned_time/dsc operator cmp}}
{{dsc inc|cpp/chrono/zoned_time/dsc operator ltlt}}
{{dsc end}}

===Helper classes===
{{dsc begin}}
{{dsc inc|cpp/chrono/dsc formatter|zoned_time}}
{{dsc hash|cpp/chrono/zoned_time|nested=true|notes={{mark c++26}}}}
{{dsc end}}

===Helper specializations===
{{dcl begin}}
{{dcl|since=c++23|1=
template&lt; class Duration &gt;
constexpr bool enable_nonlocking_formatter_optimization
  &lt;chrono::zoned_time&lt;Duration, const chrono::time_zone*&gt;&gt; = true;
}}
{{dcl end}}
This specialization of {{ltt std|cpp/utility/format/enable_nonlocking_formatter_optimization}} enables efficient implementation of {{ltt std|cpp/io/print}} and {{ltt std|cpp/io/println}} for printing a {{tt|chrono::zoned_time}} object.

==={{rl|deduction guides|Deduction guides}}===

===Example===
{{example|code=
#include &lt;algorithm&gt;
#include &lt;chrono&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
#include &lt;string_view&gt;

int main()
{
    constexpr std::string_view locations[] =
    {
        "Africa/Casablanca",   "America/Argentina/Buenos_Aires",
        "America/Barbados",    "America/Indiana/Petersburg",
        "America/Tarasco_Bar", "Antarctica/Casey",
        "Antarctica/Vostok",   "Asia/Magadan",
        "Asia/Manila",         "Asia/Shanghai",
        "Asia/Tokyo",          "Atlantic/Bermuda",
        "Australia/Darwin",    "Europe/Isle_of_Man",
        "Europe/Laputa",       "Indian/Christmas",
        "Indian/Cocos",        "Pacific/Galapagos",
    };
    
    constexpr auto width = std::ranges::max_element(locations, {},
        [](const auto&amp; s){ return s.length(); })-&gt;length();
    
    for (const auto location : locations)
        try
        {
            // may throw if 'location' is not in the time zone database
            const std::chrono::zoned_time zt{location, std::chrono::system_clock::now()};
            std::cout &lt;&lt; std::setw(width) &lt;&lt; location &lt;&lt; " - Zoned Time: " &lt;&lt; zt &lt;&lt; '\n';
        }
        catch (std::runtime_error&amp; ex)
        {
            std::cout &lt;&lt; "Error: " &lt;&lt; ex.what() &lt;&lt; '\n';
        }
}
|p=true
|output=&lt;nowiki/&gt;
             Africa/Casablanca - Zoned Time: 2023-06-29 20:58:34.697449319 +01
America/Argentina/Buenos_Aires - Zoned Time: 2023-06-29 16:58:34.709957354 -03
              America/Barbados - Zoned Time: 2023-06-29 15:58:34.709977888 AST
    America/Indiana/Petersburg - Zoned Time: 2023-06-29 15:58:34.709998072 EDT
Error: tzdb: cannot locate zone: America/Tarasco_Bar
              Antarctica/Casey - Zoned Time: 2023-06-30 06:58:34.710093685 +11
             Antarctica/Vostok - Zoned Time: 2023-06-30 01:58:34.710107932 +06
                  Asia/Magadan - Zoned Time: 2023-06-30 06:58:34.710121831 +11
                   Asia/Manila - Zoned Time: 2023-06-30 03:58:34.710134751 PST
                 Asia/Shanghai - Zoned Time: 2023-06-30 03:58:34.710153259 CST
                    Asia/Tokyo - Zoned Time: 2023-06-30 04:58:34.710172815 JST
              Atlantic/Bermuda - Zoned Time: 2023-06-29 16:58:34.710191043 ADT
              Australia/Darwin - Zoned Time: 2023-06-30 05:28:34.710236720 ACST
            Europe/Isle_of_Man - Zoned Time: 2023-06-29 20:58:34.710256834 BST
Error: tzdb: cannot locate zone: Europe/Laputa
              Indian/Christmas - Zoned Time: 2023-06-30 02:58:34.710360409 +07
                  Indian/Cocos - Zoned Time: 2023-06-30 02:28:34.710377520 +0630
             Pacific/Galapagos - Zoned Time: 2023-06-29 13:58:34.710389952 -06
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/dsc time_zone}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
{{cpp/chrono/title|nonexistent_local_time}}
{{cpp/chrono/navbar}}
{{ddcl|header=chrono|since=c++20|
class nonexistent_local_time;
}}

Defines a type of object to be thrown as exception to report that an attempt was made to convert a nonexistent {{lc|std::chrono::local_time}} to a {{lc|std::chrono::sys_time}} without specifying a {{lc|std::chrono::choose}} (such as {{tt|choose::earliest}} or {{tt|choose::latest}}).

This exception is thrown by {{lc|std::chrono::time_zone::to_sys}} and functions that call it (such as the constructors of {{lc|std::chrono::zoned_time}} that take a {{lc|std::chrono::local_time}}).

{{inheritance diagram/std-chrono-nonexistent_local_time}}

===Member functions===
{{dsc begin}}
{{dsc mem ctor|nolink=true|constructs the exception object}}
{{dsc mem fun|operator{{=}}|nolink=true|replaces the exception object}}
{{dsc mem fun|what|nolink=true|returns the explanatory string}}
{{dsc end}}

{{member|{{small|std::chrono::nonexistent_local_time::}}nonexistent_local_time|2=
{{dcl begin}}
{{dcl|num=1|since=c++20|
template&lt; class Duration &gt;
nonexistent_local_time( const std::chrono::local_time&lt;Duration&gt;&amp; tp,
                        const std::chrono::local_info&amp; i );
}}
{{dcl|num=2|since=c++20|
nonexistent_local_time( const nonexistent_local_time&amp; other ) noexcept;
}}
{{dcl end}}
Constructs the exception object.

@1@ The explanatory string returned by {{tt|what()}} is equivalent to that produced by {{tt|os.str()}} after the following code:

{{source|
std::ostringstream os;
os &lt;&lt; tp &lt;&lt; " is in a gap between\n"
   &lt;&lt; std::chrono::local_seconds(i.first.end.time_since_epoch()) + i.first.offset
   &lt;&lt; ' ' &lt;&lt; i.first.abbrev &lt;&lt; " and\n"
   &lt;&lt; std::chrono::local_seconds(i.second.begin.time_since_epoch()) + i.second.offset
   &lt;&lt; ' ' &lt;&lt; i.second.abbrev
   &lt;&lt; " which are both equivalent to\n"
   &lt;&lt; i.first.end &lt;&lt; " UTC";
}}
@@ The behavior is undefined if {{c|1=i.result != std::chrono::local_info::nonexistent}}.

@2@ Copy constructor. If {{c|*this}} and {{c|other}} both have dynamic type {{tt|std::chrono::nonexistent_local_time}} then {{c|1=std::strcmp(what(), other.what()) == 0}}.

===Parameters===
{{par begin}}
{{par|tp|the time point for which conversion was attempted}}
{{par|i|a {{lc|std::chrono::local_info}} describing the result of the conversion attempt}}
{{par|other|another {{tt|nonexistent_local_time}} to copy}}
{{par end}}

===Exceptions===
May throw {{lc|std::bad_alloc}}

===Notes===
Because copying a standard library class derived from {{tt|std::exception}} is not permitted to throw exceptions, this message is typically stored internally as a separately-allocated reference-counted string.
}}

{{cpp/error/exception/member assignment what|chrono::nonexistent_locale_time|std=c++20}}

{{cpp/error/runtime_error/inherit}}

{{cpp/error/exception/inherit}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/dsc ambiguous_local_time}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/chrono/duration/title|duration}}
{{cpp/chrono/duration/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1=
constexpr duration() = default;
}}
{{dcl|num=2|since=c++11|1=
duration( const duration&amp; ) = default;
}}
{{dcl|num=3|since=c++11|
template&lt; class Rep2 &gt;
constexpr explicit duration( const Rep2&amp; r );
}}
{{dcl|num=4|since=c++11|
template&lt; class Rep2, class Period2 &gt;
constexpr duration( const duration&lt;Rep2, Period2&gt;&amp; d );
}}
{{dcl end}}

Constructs a new {{tt|duration}} from one of several optional data sources.

@1@ The default constructor.

@2@ The copy constructor.

@3@ Constructs a duration with {{c|r}} ticks.
@@ {{cpp/enable if|all following conditions are satisfied}}:
* {{c|is_convertible&lt;const Rep2&amp;, Rep&gt;::value}} is {{c|true}}.
* Any of the following conditions is satisfied:&lt;ref&gt;That is, a duration with an integer tick count cannot be constructed from a floating-point value, but a duration with a floating-point tick count can be constructed from an integer value.&lt;/ref&gt;
:* {{c|std::chrono::treat_as_floating_point&lt;Rep&gt;::value}} is {{c|true}}.
:* {{c|std::chrono::treat_as_floating_point&lt;Rep2&gt;::value}} is {{c|false}}.

@4@ Constructs a duration by converting {{c|d}} to an appropriate period and tick count, as if by {{c|std::chrono::duration_cast&lt;duration&gt;(d).count()}}.
@@ {{cpp/enable if|no overflow is induced in the conversion, and any of the following conditions is satisfied}}:&lt;ref&gt;That is, either the duration uses floating-point ticks, or {{tt|Period2}} is exactly divisible by {{tt|Period}}.&lt;/ref&gt;
* {{c|std::chrono::treat_as_floating_point&lt;Rep&gt;::value}} is {{c|true}}.
* All following conditions are satisfied:
:* {{c|std::ratio_divide&lt;Period2, Period&gt;::den}} is {{c|1}}.
:* {{c|std::chrono::treat_as_floating_point&lt;Rep2&gt;::value}} is {{c|false}}.

&lt;references/&gt;

===Parameters===
{{par begin}}
{{par|r|a tick count}}
{{par|d|a duration to copy from}}
{{par end}}

===Example===
{{example
|The following code shows several examples (both valid and invalid) of how to construct durations:
|code=
#include &lt;chrono&gt;

int main()
{
    std::chrono::hours h(1); // one hour
    std::chrono::milliseconds ms{3}; // 3 milliseconds
    std::chrono::duration&lt;int, std::kilo&gt; ks(3); // 3000 seconds
    
    // error: treat_as_floating_point&lt;int&gt;::value == false,
    // This duration allows whole tick counts only
//  std::chrono::duration&lt;int, std::kilo&gt; d3(3.5);
    
    // 30Hz clock using fractional ticks
    std::chrono::duration&lt;double, std::ratio&lt;1, 30&gt;&gt; hz30(3.5);
    
    // 3000 microseconds constructed from 3 milliseconds
    std::chrono::microseconds us = ms;
    // error: 1/1000000 is not divisible by 1/1000
//  std::chrono::milliseconds ms2 = us
    std::chrono::duration&lt;double, std::milli&gt; ms2 = us; // 3.0 milliseconds
}
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2094|std=C++11|before=for overload {{v|4}}, {{c|std::ratio_divide&lt;Period2, period&gt;::num}}&lt;br&gt;might overflow when evaluating&lt;br&gt;{{c|std::ratio_divide&lt;Period2, period&gt;::den}}|after=overload {{v|4}} does not&lt;br&gt;participate in overload&lt;br&gt;resolution in this case}}
{{dr list item|wg=lwg|dr=3050|std=C++11|before=convertibility constraint used non-const xvalue|after=use const lvalues instead}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/duration/dsc operator{{=}}}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
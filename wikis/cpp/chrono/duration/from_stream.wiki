{{cpp/chrono/title|from_stream {{small|(std::chrono::duration)}}}}
{{cpp/chrono/duration/navbar}}
{{dcl begin}}
{{dcl header|chrono}}
{{dcl|since=c++20|1=
template&lt; class CharT, class Traits, class Rep, class Period,
          class Alloc = std::allocator&lt;CharT&gt; &gt;
std::basic_istream&lt;CharT, Traits&gt;&amp;
    from_stream( std::basic_istream&lt;CharT, Traits&gt;&amp; is, const CharT* fmt,
                 std::chrono::duration&lt;Rep, Period&gt;&amp; d,
                 std::basic_string&lt;CharT, Traits, Alloc&gt;* abbrev = nullptr,
                 std::chrono::minutes* offset = nullptr );
}}
{{dcl end}}

Attempts to parse the input stream {{c|is}} into the {{lc|std::chrono::duration}} {{c|d}}, interpreted as the time of day since midnight, according to the format string {{c|fmt}}.

Behaves as an {{named req|UnformattedInputFunction}}, except that it has an unspecified effect on {{c|is.gcount()}}. After constructing and checking the sentry object, attempts to parse the input stream {{tt|is}} into {{tt|d}} according to the format string {{c|fmt}}. If the parse fails to decode a valid {{tt|duration}}, {{c|is.setstate(std::ios_base::failbit)}} is called and {{c|d}} is not modified.

If the format specifier {{tt|%Z}} is used and successfully parsed, the parsed value is assigned to {{c|*abbrev}} if {{c|abbrev}} is not null. If the format specifier {{tt|%z}} or a modified variant is used and successfully parsed, the parsed value is assigned to {{c|*offset}} if {{c|offset}} is not null.

===Parameters===
{{par begin}}
{{par|is|an input stream}}
{{par|fmt|a format string (see below)}}
{{par|d|{{lc|std::chrono::duration}} object to hold the parse result}}
{{par|abbrev|if not null, pointer to an object that will hold the time zone abbreviation or name corresponding to the {{tt|%Z}} specifier}}
{{par|offset|if not null, pointer to an object that will hold the offset from UTC corresponding to the {{tt|%z}} specifier}}
{{par end}}

===Format string===
{{cpp/chrono/from_stream format}}

===Return value===
{{c|is}}

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;sstream&gt;

int main()
{
    std::istringstream is{"16:14:34"};
    is.imbue(std::locale("en_US.utf-8"));
    std::chrono::hours hh;
    is &gt;&gt; std::chrono::from_stream("%H:%M:%S", hh);
    is.fail() ? std::cout &lt;&lt; "Parse failed!\n" : std::cout &lt;&lt; hh.count() &lt;&lt; '\n';
}
|p=true
|output=
16
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/dsc parse}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
{{title|1=operator+,-,*,/,%{{small|(std::chrono::duration)}}}}
{{cpp/chrono/duration/navbar}}
{{dcl begin}}
{{dcl|since=c++11|num=1|1=
template&lt; class Rep1, class Period1, class Rep2, class Period2 &gt;
typename std::common_type&lt;duration&lt;Rep1,Period1&gt;, duration&lt;Rep2,Period2&gt;&gt;::type
    constexpr operator+( const duration&lt;Rep1,Period1&gt;&amp; lhs,
                         const duration&lt;Rep2,Period2&gt;&amp; rhs );
}}
{{dcl|since=c++11|num=2|1=
template&lt; class Rep1, class Period1, class Rep2, class Period2 &gt;
typename std::common_type&lt;duration&lt;Rep1,Period1&gt;, duration&lt;Rep2,Period2&gt;&gt;::type
    constexpr operator-( const duration&lt;Rep1,Period1&gt;&amp; lhs,
                         const duration&lt;Rep2,Period2&gt;&amp; rhs );
}}
{{dcl|since=c++11|num=3|1=
template&lt; class Rep1, class Period, class Rep2 &gt;
duration&lt;typename std::common_type&lt;Rep1,Rep2&gt;::type, Period&gt;
    constexpr operator*( const duration&lt;Rep1,Period&gt;&amp; d,
                         const Rep2&amp; s );
}}
{{dcl|since=c++11|num=4|1=
template&lt; class Rep1, class Rep2, class Period &gt;
duration&lt;typename std::common_type&lt;Rep1,Rep2&gt;::type, Period&gt;
    constexpr operator*( const Rep1&amp; s,
                         const duration&lt;Rep2,Period&gt;&amp; d );
}}
{{dcl|since=c++11|num=5|1=
template&lt; class Rep1, class Period, class Rep2 &gt;
duration&lt;typename std::common_type&lt;Rep1,Rep2&gt;::type, Period&gt;
    constexpr operator/( const duration&lt;Rep1,Period&gt;&amp; d,
                         const Rep2&amp; s );
}}
{{dcl|since=c++11|num=6|1=
template&lt; class Rep1, class Period1, class Rep2, class Period2 &gt;
typename std::common_type&lt;Rep1,Rep2&gt;::type
    constexpr operator/( const duration&lt;Rep1,Period1&gt;&amp; lhs,
                         const duration&lt;Rep2,Period2&gt;&amp; rhs );
}}
{{dcl|since=c++11|num=7|1=
template&lt; class Rep1, class Period, class Rep2 &gt;
duration&lt;typename std::common_type&lt;Rep1,Rep2&gt;::type, Period&gt;
    constexpr operator%( const duration&lt;Rep1, Period&gt;&amp; d,
                         const Rep2&amp; s );
}}
{{dcl|since=c++11|num=8|1=
template&lt; class Rep1, class Period1, class Rep2, class Period2 &gt;
typename std::common_type&lt;duration&lt;Rep1,Period1&gt;, duration&lt;Rep2,Period2&gt;&gt;::type
    constexpr operator%( const duration&lt;Rep1,Period1&gt;&amp; lhs,
                         const duration&lt;Rep2,Period2&gt;&amp; rhs );
}}
{{dcl end}}

Performs basic arithmetic operations between two durations or between a duration and a tick count.

@1@ Converts the two durations to their common type and creates a duration whose tick count is the sum of the tick counts after conversion.

@2@ Converts the two durations to their common type and creates a duration whose tick count is the {{c|rhs}} number of ticks subtracted from the {{c|lhs}} number of ticks after conversion.

@3,4@ Converts the duration {{c|d}} to one whose {{tt|rep}} is the common type between {{tt|Rep1}} and {{tt|Rep2}}, and multiples the number of ticks after conversion by {{c|s}}.
{{cpp/enable_if|{{c|s}} is convertible to {{c|typename std::common_type&lt;Rep1, Rep2&gt;::type}}|plural=yes}}.

@5@ Converts the duration {{c|d}} to one whose {{tt|rep}} is the common type between {{tt|Rep1}} and {{tt|Rep2}}, and divides the number of ticks after conversion by {{c|s}}. {{cpp/enable_if|{{c|s}} is convertible to {{c|typename std::common_type&lt;Rep1, Rep2&gt;::type}} and {{tt|Rep2}} is not a specialization of {{tt|duration}}}}.

@6@ Converts the two durations to their common type and divides the tick count of {{c|lhs}} after conversion by the tick count of {{c|rhs}} after conversion. Note that the return value of this operator is not a duration.

@7@ Converts the duration {{c|d}} to one whose {{tt|rep}} is the common type between {{tt|Rep1}} and {{tt|Rep2}}, and creates a duration whose tick count is the remainder of the division of the tick count, after conversion, by {{c|s}}. {{cpp/enable_if|{{c|s}} is convertible to {{c|typename std::common_type&lt;Rep1, Rep2&gt;::type}} and {{tt|Rep2}} is not a specialization of {{tt|duration}}}}.

@8@ Converts the two durations to their common type and creates a duration whose tick count is the remainder of the tick counts after conversion.

===Parameters===
{{par begin}}
{{par|lhs|duration on the left-hand side of the operator}}
{{par|rhs|duration on the right-hand side of the operator}}
{{par|d|the duration argument for mixed-argument operators}}
{{par|s|non-duration argument for mixed-argument operators}}
{{par end}}

===Return value===
Assuming that {{c|CD}} is the function return type and {{c|CD&lt;A, B&gt; {{=}} std::common_type&lt;A, B&gt;::type}}, then:

@1@ {{c|CD(CD(lhs).count() + CD(rhs).count())}}
@2@ {{c|CD(CD(lhs).count() - CD(rhs).count())}}
@3,4@ {{c|CD(CD(d).count() * s)}}
@5@ {{c|CD(CD(d).count() / s)}}
@6@ {{c|CD(lhs).count() / CD(rhs).count()}} (the return type of this operator is not a duration)
@7@ {{c|CD(CD(d).count() % s)}}
@8@ {{c|CD(CD(lhs).count() % CD(rhs).count())}}

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    // Simple arithmetic:
    std::chrono::seconds s = std::chrono::hours(1)
                           + 2 * std::chrono::minutes(10)
                           + std::chrono::seconds(70) / 10;
    std::cout &lt;&lt; "1 hour + 2*10 min + 70/10 sec = " &lt;&lt; s &lt;&lt; " (seconds)\n";

    using namespace std::chrono_literals;

    // Difference between dividing a duration by a number
    // and dividing a duration by another duration:
    std::cout &lt;&lt; "Dividing that by 2 minutes gives "
              &lt;&lt; s / 2min &lt;&lt; '\n'
              &lt;&lt; "Dividing that by 2 gives "
              &lt;&lt; (s / 2).count() &lt;&lt; " seconds\n";

    // The remainder operator is useful in determining where
    // in a time frame is this particular duration, e.g. to
    // break it down into hours, minutes, and seconds:
    std::cout &lt;&lt; s &lt;&lt; " (seconds) = "
              &lt;&lt; std::chrono::duration_cast&lt;std::chrono::hours&gt;(
                 s) &lt;&lt; " (hour) + "
              &lt;&lt; std::chrono::duration_cast&lt;std::chrono::minutes&gt;(
                 s % 1h) &lt;&lt; " (minutes) + "
              &lt;&lt; std::chrono::duration_cast&lt;std::chrono::seconds&gt;(
                 s % 1min) &lt;&lt; " (seconds)\n";

    constexpr auto sun_earth_distance{150'000'000ULL}; // km
    constexpr auto speed_of_light{300000ULL}; // km/sec
    std::chrono::seconds t(sun_earth_distance / speed_of_light); // sec
    std::cout &lt;&lt; "A photon flies from the Sun to the Earth in "
              &lt;&lt; t / 1min &lt;&lt; " minutes " &lt;&lt; t % 1min &lt;&lt; " (seconds)\n";
}
|output=
1 hour + 2*10 min + 70/10 sec = 4807s (seconds)
Dividing that by 2 minutes gives 40
Dividing that by 2 gives 2403 seconds
4807s (seconds) = 1h (hour) + 20min (minutes) + 7s (seconds)
A photon flies from the Sun to the Earth in 8 minutes 20s (seconds)
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|std=C++11|dr=3050|before=convertibility constraint used non-const xvalue|after=use const lvalues instead}}
{{dr list end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
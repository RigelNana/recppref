{{title|1=operator==,!=,&lt;,&lt;=,&gt;,&gt;=,&lt;=&gt;{{small|(std::chrono::duration)}}}}
{{cpp/chrono/duration/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1=
template&lt; class Rep1, class Period1, class Rep2, class Period2 &gt;
constexpr bool operator==( const std::chrono::duration&lt;Rep1, Period1&gt;&amp; lhs,
                           const std::chrono::duration&lt;Rep2, Period2&gt;&amp; rhs );
}}
{{dcl|num=2|since=c++11|until=c++20|1=
template&lt; class Rep1, class Period1, class Rep2, class Period2 &gt;
constexpr bool operator!=( const std::chrono::duration&lt;Rep1, Period1&gt;&amp; lhs,
                           const std::chrono::duration&lt;Rep2, Period2&gt;&amp; rhs );
}}
{{dcl|num=3|since=c++11|1=
template&lt; class Rep1, class Period1, class Rep2, class Period2 &gt;
constexpr bool operator&lt;( const std::chrono::duration&lt;Rep1, Period1&gt;&amp; lhs,
                          const std::chrono::duration&lt;Rep2, Period2&gt;&amp; rhs );
}}
{{dcl|num=4|since=c++11|1=
template&lt; class Rep1, class Period1, class Rep2, class Period2 &gt;
constexpr bool operator&lt;=( const std::chrono::duration&lt;Rep1, Period1&gt;&amp; lhs,
                           const std::chrono::duration&lt;Rep2, Period2&gt;&amp; rhs );
}}
{{dcl|num=5|since=c++11|1=
template&lt; class Rep1, class Period1, class Rep2, class Period2 &gt;
constexpr bool operator&gt;( const std::chrono::duration&lt;Rep1, Period1&gt;&amp; lhs,
                          const std::chrono::duration&lt;Rep2, Period2&gt;&amp; rhs );
}}
{{dcl|num=6|since=c++11|1=
template&lt; class Rep1, class Period1, class Rep2, class Period2 &gt;
constexpr bool operator&gt;=( const std::chrono::duration&lt;Rep1, Period1&gt;&amp; lhs,
                           const std::chrono::duration&lt;Rep2, Period2&gt;&amp; rhs );
}}
{{dcl|num=7|since=c++20|1=
template&lt; class Rep1, class Period1, class Rep2, class Period2 &gt;
    requires std::three_way_comparable&lt;std::common_type_t&lt;Rep1, Rep2&gt;&gt;
constexpr auto operator&lt;=&gt;( const std::chrono::duration&lt;Rep1, Period1&gt;&amp; lhs,
                            const std::chrono::duration&lt;Rep2, Period2&gt;&amp; rhs );
}}
{{dcl end}}

Compares two durations. Let {{tt|CT}} be {{c|std::common_type&lt;std::chrono::duration&lt;Rep1, Period1&gt;, std::chrono::duration&lt;Rep2, Period2&gt;&gt;::type}}:

@1,2@ Checks if {{c|lhs}} and {{c|rhs}} are equal, i.e. the number of ticks for the type common to both durations are equal.

@3-6@ Compares {{c|lhs}} to {{c|rhs}}, i.e. compares the number of ticks for the type common to both durations.

@7@ Compares {{c|lhs}} to {{c|rhs}}, i.e. compares the number of ticks for the type common to both durations. The return type is deduced from {{c|1=CT(lhs).count() &lt;=&gt; CT(rhs).count()}}.

{{rrev|since=c++20|1=
{{cpp/note synthesized eq}}
}}

===Parameters===
{{par begin}}
{{par|lhs|duration on the left-hand side of the operator}}
{{par|rhs|duration on the right-hand side of the operator}}
{{par end}}

===Return value===
@1@ {{c|1=CT(lhs).count() == CT(rhs).count()}}

@2@ {{c|1=!(lhs == rhs)}}

@3@ {{c|CT(lhs).count() &lt; CT(rhs).count()}}

@4@ {{c|!(rhs &lt; lhs)}}

@5@ {{c|rhs &lt; lhs}}

@6@ {{c|!(lhs &lt; rhs)}}

@7@ {{c|1=CT(lhs).count() &lt;=&gt; CT(rhs).count()}}

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    constexpr auto t1 = std::chrono::seconds(2);
    constexpr auto t2 = std::chrono::milliseconds(2000);

    if constexpr (t1 == t2)
        std::cout &lt;&lt; t1 &lt;&lt; " == " &lt;&lt; t2 &lt;&lt; '\n';
    else
        std::cout &lt;&lt; t1 &lt;&lt; " != " &lt;&lt; t2 &lt;&lt; '\n';

    constexpr auto t3 = std::chrono::seconds(61);
    constexpr auto t4 = std::chrono::minutes(1);

    if constexpr (t3 &gt; t4)
        std::cout &lt;&lt; t3 &lt;&lt; " &gt; " &lt;&lt; t4 &lt;&lt; '\n';
    else
        std::cout &lt;&lt; t3 &lt;&lt; " &lt;= " &lt;&lt; t4 &lt;&lt; '\n';

    using namespace std::chrono_literals;

    static_assert(1h == 60min);
    static_assert(1min == 60s);
    static_assert(1s == 1'000ms);
    static_assert(1ms == 1'000us);
    static_assert(1us == 1'000ns);
}
|output=
2s == 2000ms
61s &gt; 1min
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
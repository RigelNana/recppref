{{cpp/chrono/title|round{{small|(std::chrono::duration)}}}}
{{cpp/chrono/duration/navbar}}
{{ddcl|since=c++17|header=chrono|
template&lt; class ToDuration, class Rep, class Period &gt;
constexpr ToDuration round( const std::chrono::duration&lt;Rep, Period&gt;&amp; d );
}}

Returns the value {{tt|t}} representable in {{tt|ToDuration}} that is the closest to {{c|d}}. If there are two such values, returns the even value (that is, the value {{tt|t}} such that {{c|1=t % 2 == 0}}).

The function does not participate in the overload resolution unless {{tt|ToDuration}} is a specialization of {{lc|std::chrono::duration}} and {{c|std::chrono::treat_as_floating_point_v&lt;typename ToDuration::rep&gt;}} is {{c|false}}.

===Parameters===
{{par begin}}
{{par|d|duration to convert}}
{{par end}}

===Return value===
{{c|d}} rounded to the nearest duration of type {{tt|ToDuration}}, rounding to even in halfway cases.

===Possible implementation===
{{eq fun|1=
namespace detail
{
    template&lt;class&gt; inline constexpr bool is_duration_v = false;
    template&lt;class Rep, class Period&gt; inline constexpr bool is_duration_v&lt;
        std::chrono::duration&lt;Rep, Period&gt;&gt; = true;
}

template&lt;class To, class Rep, class Period,
         class = std::enable_if_t&lt;detail::is_duration_v&lt;To&gt; &amp;&amp;
                !std::chrono::treat_as_floating_point_v&lt;typename To::rep&gt;&gt;&gt;
constexpr To round(const std::chrono::duration&lt;Rep, Period&gt;&amp; d)
{
    To t0 = std::chrono::floor&lt;To&gt;(d);
    To t1 = t0 + To{1};
    auto diff0 = d - t0;
    auto diff1 = t1 - d;
    if (diff0 == diff1)
    {
        if (t0.count() &amp; 1)
            return t1;
        return t0;
    }
    else if (diff0 &lt; diff1)
        return t0;
    return t1;
}
}}

===Example===
{{chrono_duration_floor_round_ceil_example}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/duration/dsc duration_cast}}
{{dsc inc|cpp/chrono/duration/dsc floor}}
{{dsc inc|cpp/chrono/duration/dsc ceil}}
{{dsc inc|cpp/chrono/time_point/dsc round}}
{{dsc inc|cpp/numeric/math/dsc round}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/chrono/duration/title|operator+{{=}}, -{{=}}, *{{=}}, /{{=}}, %{{=}}}}
{{cpp/chrono/duration/navbar}}
{{dcl begin}}
{{dcl rev begin|num=1}}
{{dcl|since=c++11|notes={{mark constexpr since c++17}}|1=
duration&amp; operator+=( const duration&amp; d );
}}
{{dcl rev end}}
{{dcl rev begin|num=2}}
{{dcl|since=c++11|notes={{mark constexpr since c++17}}|1=
duration&amp; operator-=( const duration&amp; d );
}}
{{dcl rev end}}
{{dcl rev begin|num=3}}
{{dcl|since=c++11|notes={{mark constexpr since c++17}}|1=
duration&amp; operator*=( const rep&amp; rhs );
}}
{{dcl rev end}}
{{dcl rev begin|num=4}}
{{dcl|since=c++11|notes={{mark constexpr since c++17}}|1=
duration&amp; operator/=( const rep&amp; rhs );
}}
{{dcl rev end}}
{{dcl rev begin|num=5}}
{{dcl|since=c++11|notes={{mark constexpr since c++17}}|1=
duration&amp; operator%=( const rep&amp; rhs );
}}
{{dcl rev end}}
{{dcl rev begin|num=6}}
{{dcl|since=c++11|notes={{mark constexpr since c++17}}|1=
duration&amp; operator%=( const duration&amp; rhs );
}}
{{dcl rev end}}
{{dcl end}}

Performs compound assignments between two durations with the same period or between a duration and a tick count value.

If {{tt|rep_}} is the member variable holding the number of ticks in this duration object,
@1@ Equivalent to {{c|rep_ +{{=}} d.count(); return *this;}}.
@2@ Equivalent to {{c|rep_ -{{=}} d.count(); return *this;}}.
@3@ Equivalent to {{c|rep_ *{{=}} rhs; return *this;}}.
@4@ Equivalent to {{c|rep_ /{{=}} rhs; return *this;}}.
@5@ Equivalent to {{c|rep_ %{{=}} rhs; return *this;}}.
@6@ Equivalent to {{c|rep_ %{{=}} d.count(); return *this;}}.

===Parameters===
{{par begin}}
{{par|d|duration on the right-hand side of the operator}}
{{par|rhs|number of ticks on the right-hand side of the operator}}
{{par end}}

===Return value===
A reference to this duration after modification.

===Example===
{{example 
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    std::chrono::minutes m(11);
    m *= 2;
    m += std::chrono::hours(10); // hours implicitly convert to minutes
    std::cout &lt;&lt; m.count() &lt;&lt; " minutes equals "
              &lt;&lt; std::chrono::duration_cast&lt;std::chrono::hours&gt;(m).count() 
              &lt;&lt; " hours and ";
    m %= std::chrono::hours(1);
    std::cout &lt;&lt; m.count() &lt;&lt; " minutes\n";
}
|output=
622 minutes equals 10 hours and 22 minutes
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/duration/dsc operator_arith2}}
{{dsc inc|cpp/chrono/duration/dsc operator_arith4}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/chrono/title|abs{{small|(std::chrono::duration)}}}}
{{cpp/chrono/duration/navbar}}
{{ddcl|since=c++17|header=chrono|
template&lt; class Rep, class Period &gt;
constexpr std::chrono::duration&lt;Rep, Period&gt; abs( std::chrono::duration&lt;Rep, Period&gt; d );
}}

Returns the absolute value of the duration {{c|d}}. Specifically, if {{c|1=d &gt;= d.zero()}}, return {{c|d}}, otherwise return {{c|-d}}.

The function does not participate in the overload resolution unless {{c|std::numeric_limits&lt;Rep&gt;::is_signed}} is {{c|true}}.

===Parameters===
{{par begin}}
{{par|d|duration}}
{{par end}}

===Return value===
Absolute value of {{c|d}}.

===Possible implementation===
{{eq fun|1=
template&lt;class Rep, class Period,
    class = std::enable_if_t&lt;std::numeric_limits&lt;Rep&gt;::is_signed&gt;&gt;
constexpr std::chrono::duration&lt;Rep, Period&gt; abs(std::chrono::duration&lt;Rep, Period&gt; d)
{
    return d &gt;= d.zero() ? +d : -d;
}
}}

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    using namespace std::chrono;

    static_assert(abs(-42s) == std::chrono::abs(42s));

    std::cout &lt;&lt; "abs(+3min) = " &lt;&lt; abs(3min).count() &lt;&lt; '\n'
              &lt;&lt; "abs(-3min) = " &lt;&lt; abs(-3min).count() &lt;&lt; '\n';
}
|output=
abs(+3min) = 3
abs(-3min) = 3
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/duration/dsc operator_arith}}
{{dsc inc|cpp/numeric/math/dsc abs}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
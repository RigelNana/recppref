{{cpp/chrono/duration/title|operator{{=}}}}
{{cpp/chrono/duration/navbar}}
{{dcl begin}}
{{dcl|since=c++11|1=
duration&amp; operator{{=}}( const duration &amp;other ) {{=}} default;
}}
{{dcl end}}

Assigns the contents of one {{tt|duration}} to another.

===Parameters===
{{par begin}}
{{par|other|{{tt|duration}} to copy from}}
{{par end}}

===Example===
{{example|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    using namespace std::chrono_literals;

    std::chrono::hours z_hours{};
    std::chrono::seconds z_seconds{};

    z_hours = 2h; // ok, no conversion needed

    z_seconds = z_hours;
    // First, the converting ctor is used to create a temporary object of `lhs`s type.
    // This ctor implicitly invokes the casting function
    // chrono::duration_cast&lt;std::seconds&gt;(z_hours). The resulting `rhs` rvalue
    // has the same type as `lhs`, and the `operator=` finally performs the assignment.

    std::cout &lt;&lt; "hours: " &lt;&lt; z_hours.count() &lt;&lt; '\n';
    std::cout &lt;&lt; "seconds: " &lt;&lt; z_seconds.count() &lt;&lt; '\n';

    z_seconds -= 42s;

//  z_hours = z_seconds; // compile-time error (which is good): incompatible types.
    // The library avoids the implicit cast to prevent a potential precision loss.

    z_hours = std::chrono::duration_cast&lt;std::chrono::hours&gt;(z_seconds); // ok
    z_hours = std::chrono::duration_cast&lt;decltype(z_hours)&gt;(z_seconds);  // ditto

    std::cout &lt;&lt; "hours: " &lt;&lt; z_hours.count() &lt;&lt; '\n';
    std::cout &lt;&lt; "seconds: " &lt;&lt; z_seconds.count() &lt;&lt; '\n';

    std::chrono::duration&lt;double, std::ratio&lt;3600&gt;&gt; z2_hours{};

    z2_hours = z_seconds; // ok, no truncation, implicit cast

    std::cout &lt;&lt; "hours: " &lt;&lt; z2_hours.count() &lt;&lt; '\n';
}
|output=
hours: 2
seconds: 7200
hours: 1
seconds: 7158
hours: 1.98833
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/duration/dsc constructor}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
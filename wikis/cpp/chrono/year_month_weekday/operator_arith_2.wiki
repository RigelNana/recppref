{{cpp/chrono/title|operator+|operator- {{small|(std::chrono::year_month_weekday)}}}}
{{cpp/chrono/year_month_weekday/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|
constexpr std::chrono::year_month_weekday 
    operator+( const std::chrono::year_month_weekday&amp; ymwd,
               const std::chrono::months&amp; dm ) noexcept;
}}
{{dcl|since=c++20|num=2|
constexpr std::chrono::year_month_weekday 
    operator+( const std::chrono::months&amp; dm,
               const std::chrono::year_month_weekday&amp; ymwd ) noexcept;
}}
{{dcl|since=c++20|num=3|
constexpr std::chrono::year_month_weekday 
    operator+( const std::chrono::year_month_weekday&amp; ymwd,
               const std::chrono::years&amp; dy ) noexcept;
}}
{{dcl|since=c++20|num=4|
constexpr std::chrono::year_month_weekday 
    operator+( const std::chrono::years&amp; dy,
               const std::chrono::year_month_weekday&amp; ymwd ) noexcept;
}}
{{dcl|since=c++20|num=5|
constexpr std::chrono::year_month_weekday
    operator-( const std::chrono::year_month_weekday&amp; ymwd,
               const std::chrono::months&amp; dm ) noexcept;
}}
{{dcl|since=c++20|num=6|
constexpr std::chrono::year_month_weekday 
    operator-( const std::chrono::year_month_weekday&amp; ymwd,
               const std::chrono::years&amp; dy ) noexcept;
}}
{{dcl end}}

@1,2@ Adds {{c|dm.count()}} months to the date represented by {{c|ymwd}}. The result has the same {{rlpf|accessors|year}} and {{rlpf|accessors|month}} as {{c|std::chrono::year_month(ymwd.year(), ymwd.month()) + dm}} and the same {{rlpf|accessors|weekday}} and {{rlpf|accessors|index}} as {{c|ymwd}}.
@3,4@ Adds {{c|dy.count()}} years to the date represented by {{c|ymwd}}. The result is equivalent to {{c|std::chrono::year_month_weekday(ymwd.year() + dy, ymwd.month(), ymwd.weekday_indexed())}}.
@5@ Subtracts {{c|dm.count()}} months from the date represented by {{c|ymwd}}. Equivalent to {{c|ymwd + -dm}}.
@6@ Subtracts {{c|dy.count()}} years from the date represented by {{c|ymwd}}. Equivalent to {{c|ymwd + -dy}}.

For durations that are convertible to both {{lc|std::chrono::years}} and {{lc|std::chrono::months}}, the {{tt|years}} overloads {{v|3,4,6}} are preferred if the call would otherwise be ambiguous.

===Notes===
Even if {{c|ymwd.ok()}} is {{c|true}}, the resulting {{tt|year_month_weekday}} may not represent a valid date if {{c|ymwd.index()}} is {{c|5}}.

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    auto ymwdi{1/std::chrono::Wednesday[1]/2021};
    std::cout &lt;&lt; ymwdi &lt;&lt; '\n';

    ymwdi = std::chrono::years(5) + ymwdi;
    // First Wednesday in January, 2026
    std::cout &lt;&lt; ymwdi &lt;&lt; '\n';
    assert(static_cast&lt;std::chrono::year_month_day&gt;(ymwdi) ==
           std::chrono::January/7/2026);

    ymwdi = ymwdi - std::chrono::months(6);
    // First Wednesday in July, 2025
    std::cout &lt;&lt; ymwdi &lt;&lt; '\n';
    assert(static_cast&lt;std::chrono::year_month_day&gt;(ymwdi) ==
           std::chrono::July/2/2025);
}
|output=
2021/Jan/Wed[1]
2026/Jan/Wed[1]
2025/Jul/Wed[1]
}}

{{langlinks|es|ja|ru|zh}}
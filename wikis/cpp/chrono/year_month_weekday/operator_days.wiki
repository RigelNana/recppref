{{cpp/chrono/year_month_weekday/title|operator sys_days|operator local_days}}
{{cpp/chrono/year_month_weekday/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|
constexpr operator std::chrono::sys_days() const noexcept;
}}
{{dcl|since=c++20|num=2|
constexpr explicit operator std::chrono::local_days() const noexcept;
}}
{{dcl end}}

Converts {{c|*this}} to a {{lc|std::chrono::time_point}} representing the same date as this {{tt|year_month_weekday}}.

@1@ If {{c|year().ok() &amp;&amp; month().ok() &amp;&amp; weekday().ok()}}:
:* If {{c|1=index() == 0}}, returns a {{tt|sys_days}} that represents the date 7 days prior to the first {{rlpf|accessors|weekday}} of the year and month. 
:* Else, returns a {{tt|sys_days}} that represents the date {{c|(index() - 1) * 7}} days after the first {{lc|weekday()}} of the year and month. 
@@ Otherwise, the returned value is unspecified.

@2@ Same as {{v|1}}, but returns {{tt|local_days}} instead of {{tt|sys_days}}. Equivalent to {{c|local_days(sys_days(*this).time_since_epoch())}}.

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
using namespace std::chrono;

int main()
{
    constexpr auto ymwd{Tuesday[2]/11/2021};
    std::cout &lt;&lt; ymwd &lt;&lt; '\n';
    // convert from field-based to serial-based to add hours
    constexpr auto sd = sys_days{ymwd} + 24h;
    std::cout &lt;&lt; sd &lt;&lt; '\n';
    constexpr auto ymd = floor&lt;days&gt;(sd);
    static_assert(ymd == November/10/2021);
}
|output=
2021/Nov/Tue[2]
2021-11-10 00:00:00
}}

{{langlinks|es|ja|ru|zh}}
{{cpp/chrono/title|operator+|operator- {{small|(std::chrono::month)}}}}
{{cpp/chrono/month/navbar}}
{{dcl begin}}
{{dcl header|chrono}}
{{dcl|since=c++20|num=1|1=
constexpr std::chrono::month operator+( const std::chrono::month&amp; m,
                                        const std::chrono::months&amp; ms ) noexcept;
}}
{{dcl|since=c++20|num=2|1=
constexpr std::chrono::month operator+( const std::chrono::months&amp; ms,
                                        const std::chrono::month&amp; m ) noexcept;
}}
{{dcl|since=c++20|num=3|1=
constexpr std::chrono::month operator-( const std::chrono::month&amp; m, 
                                        const std::chrono::months&amp; ms ) noexcept;
}}
{{dcl|since=c++20|num=4|1=
constexpr std::chrono::months operator-( const std::chrono::month&amp; m1, 
                                         const std::chrono::month&amp; m2 ) noexcept;
}}
{{dcl end}}

@1,2@ Adds {{c|ms.count()}} months to {{c|m}}. The month value held in the result is computed by first evaluating {{c|static_cast&lt;long long&gt;(unsigned(m)) + (ms.count() - 1)}}, reducing it modulo 12 to an integer in the range {{closed range|0|11}}, and then adding 1.
@3@ Subtracts {{c|ms.count()}} months from {{c|m}} and returns the result. Equivalent to {{c|return m + -ms;}}.
@4@ If {{c|1=m1.ok()}} and {{c|1=m2.ok()}} are both {{c|true}}, returns a {{lc|std::chrono::months}} value {{c|m}} such that {{c|m.count()}} is in the range {{closed range|0|11}} and {{c|1=m2 + m == m1}}. Otherwise the returned value is unspecified.

===Return value===
@1-3@ A {{lc|std::chrono::month}} holding a month value calculated as described above.
@4@ A {{lc|std::chrono::months}} representing the distance between {{c|m1}} and {{c|m2}}.

===Notes===
As long as the computation doesn't overflow, {{v|1-3}} always return a valid month even if {{c|m.ok()}} is {{c|false}}.

The result of subtracting two {{tt|month}} values is a duration of type {{lc|std::chrono::months}}. That duration unit represents the length of the average Gregorian month, and the resulting duration bears no relationship to the number of days in the particular months represented by the operands. For example, {{c|std::chrono::seconds(std::chrono::April - std::chrono::March)}} is not the number of seconds in March ({{c|2678400s}}), but {{c|2629746s}} (30.436875 days).

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;chrono&gt;

int main()
{
    std::chrono::month m{6};

    m = m + std::chrono::months(2);
    assert(m == std::chrono::month(8));

    m = m - std::chrono::months(3);
    assert(m == std::chrono::month(5));
 
    constexpr std::chrono::months ms = std::chrono::month(8) - std::chrono::month(6);
    static_assert(ms == std::chrono::months(2));
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/month/dsc operator_inc dec}}
{{dsc inc|cpp/chrono/month/dsc operator_arith}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
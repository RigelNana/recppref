{{cpp/chrono/zoned_time/title|zoned_time}}
{{cpp/chrono/zoned_time/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|
zoned_time();
}}
{{dcl|since=c++20|num=2|
zoned_time( const std::chrono::sys_time&lt;Duration&gt;&amp; st );
}}
{{dcl|since=c++20|num=3|1=
zoned_time( const zoned_time&amp; other ) = default;
}}
{{dcl|since=c++20|num=4|
template&lt; class Duration2 &gt;
zoned_time( const std::chrono::zoned_time&lt;Duration2, TimeZonePtr&gt;&amp; other );
}}
{{dcl|since=c++20|num=5|
explicit zoned_time( TimeZonePtr z );
}}
{{dcl|since=c++20|num=6|
explicit zoned_time( std::string_view name );
}}
{{dcl|since=c++20|num=7|
zoned_time( TimeZonePtr z, const std::chrono::sys_time&lt;Duration&gt;&amp; st );
}}
{{dcl|since=c++20|num=8|
zoned_time( std::string_view name, const std::chrono::sys_time&lt;Duration&gt;&amp; st );
}}
{{dcl|since=c++20|num=9|
zoned_time( TimeZonePtr z, const std::chrono::local_time&lt;Duration&gt;&amp; tp );
}}
{{dcl|since=c++20|num=10|
zoned_time( std::string_view name, const std::chrono::local_time&lt;Duration&gt;&amp; tp );
}}
{{dcl|since=c++20|num=11|
zoned_time( TimeZonePtr z, const std::chrono::local_time&lt;Duration&gt;&amp; tp,
            std::chrono::choose c );
}}
{{dcl|since=c++20|num=12|
zoned_time( std::string_view name,
            const std::chrono::local_time&lt;Duration&gt;&amp; tp, std::chrono::choose c );
}}
{{dcl|since=c++20|num=13|
template&lt; class Duration2, class TimeZonePtr2 &gt;
zoned_time( TimeZonePtr z,
            const std::chrono::zoned_time&lt;Duration2, TimeZonePtr2&gt;&amp; zt );
}}
{{dcl|since=c++20|num=14|
template&lt; class Duration2, class TimeZonePtr2 &gt;
zoned_time( TimeZonePtr z,
            const std::chrono::zoned_time&lt;Duration2, TimeZonePtr2&gt;&amp; zt,
            std::chrono::choose );
}}
{{dcl|since=c++20|num=15|
template&lt; class Duration2, class TimeZonePtr2 &gt;
zoned_time( std::string_view name,
            const std::chrono::zoned_time&lt;Duration2, TimeZonePtr2&gt;&amp; zt );
}}
{{dcl|since=c++20|num=16|
template&lt; class Duration2, class TimeZonePtr2 &gt;
zoned_time( std::string_view name,
            const std::chrono::zoned_time&lt;Duration2, TimeZonePtr2&gt;&amp; zt,
            std::chrono::choose );
}}
{{dcl end}}

Constructs a {{tt|zoned_time}} object, initializing the stored time zone pointer and time point according to the following table, where {{tt|traits}} is {{c|std::chrono::zoned_traits&lt;TimeZonePtr&gt;}}:

{|class="wikitable" style="font-size:85%; max-width:90em;"
|-
!Overload
!Time zone pointer (denoted {{tt|zone}})
!Time point (a {{c|std::chrono::sys_time&lt;duration&gt;}})
!Notes
|-
|{{v|1}}
|rowspan="2"|{{c|traits::default_zone()}}
|default constructed
|rowspan="2"|{{v|a}}
|-
|{{v|2}}
|{{tt|st}}
|-
|{{v|3}}
|{{c|other.get_time_zone()}}
|{{c|other.get_sys_time()}}
|{{v|b}}
|-
|{{v|4}}
|{{c|other.get_time_zone()}}
|{{c|other.get_sys_time()}}
|{{v|e}}
|-
|{{v|5}}
|{{c|std::move(z)}}
|rowspan="2"|default constructed
|
|-
|{{v|6}}
|{{c|traits::locate_zone(name)}}
|{{v|c}}
|-
|{{v|7}}
|{{c|std::move(z)}}
|rowspan="2"|{{tt|st}}
| 
|-
|{{v|8}}
|{{c|traits::locate_zone(name)}}
|{{v|c}}
|-
|{{v|9}}
|{{c|std::move(z)}}
|rowspan="2"|{{c|zone-&gt;to_sys(tp)}}
|{{v|d}}
|-
|{{v|10}}
|{{c|traits::locate_zone(name)}}
|{{v|c,d}}
|-
|{{v|11}}
|{{c|std::move(z)}}
|rowspan="2"|{{c|zone-&gt;to_sys(tp, c)}}
|{{v|d}}
|-
|{{v|12}}
|{{c|traits::locate_zone(name)}}
|{{v|c,d}}
|-
|{{v|13,14}}
|{{c|std::move(z)}}
|rowspan="2"|{{c|zt.get_sys_time()}}
|{{v|e}}
|-
|{{v|15,16}}
|{{c|traits::locate_zone(name)}}
|{{v|c,e}}
|}
@a@ Constructors specified to call {{c|traits::default_zone()}} {{v|1,2}} do not participate in overload resolution if that expression is not well-formed.
@b@ The defaulted copy constructor {{v|3}} is defined as deleted if {{c|std::is_copy_constructible_v&lt;TimeZonePtr&gt;}} is false.
@c@ Constructors with a {{lc|std::string_view}} parameter {{tt|name}} {{v|6,8,10,12,15,16}} do not participate in overload resolution if {{c|traits::locate_zone(name)}} is not well-formed or if that expression is not convertible to {{tt|TimeZonePtr}}.
@d@ Constructors specified to call {{c|zone-&gt;to_sys}} {{v|9-12}} do not participate in overload resolution if that call expression is not well-formed or if the result is not convertible to {{c|std::chrono::sys_time&lt;duration&gt;}}.
@e@ Constructors with a template parameter {{tt|Duration2}} {{v|4,13-16}} do not participate in overload resolution if {{tt|Duration2}} is not convertible to {{tt|Duration}}.

The behavior is undefined if the time zone pointer (initialized as described above) does not refer to a time zone.

===Notes===
{{tt|zoned_time}} does not have a move constructor and attempting to move one will perform a copy instead using the defaulted copy constructor {{v|3}}. Thus, when {{tt|TimeZonePtr}} is a move-only type, {{tt|zoned_time}} is immovable: it can be neither moved nor copied.

The constructors {{v|14,16}} accept a {{lc|std::chrono::choose}} parameter, but that parameter has no effect.

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

int main()
{
    using std::chrono_literals::operator""y;
    using std::operator""sv;

    std::cout &lt;&lt; std::chrono::zoned_time{} &lt;&lt; " : default\n";

    constexpr std::string_view location1{"America/Phoenix"sv};
    std::cout &lt;&lt; std::chrono::zoned_time{location1} &lt;&lt; " : " &lt;&lt; location1 &lt;&lt; '\n';

    const std::chrono::time_zone* timeZonePtr = std::chrono::locate_zone("UTC");
    std::cout &lt;&lt; std::chrono::zoned_time{timeZonePtr} &lt;&lt; " : UTC time zone\n";

    constexpr auto location2{"Europe/Rome"sv};
    std::cout &lt;&lt; std::chrono::zoned_time{location2, std::chrono::local_days{2021y/12/31}&lt;!----&gt;}
              &lt;&lt; " : " &lt;&lt; location2 &lt;&lt; '\n';

    constexpr auto location3{"Europe/Rome"sv};
    constexpr auto some_date = std::chrono::sys_time&lt;std::chrono::days&gt;{2021y/12/31};
    std::cout &lt;&lt; std::chrono::zoned_time{location3, some_date}
              &lt;&lt; " : " &lt;&lt; location3 &lt;&lt; '\n';

    const auto now =
        std::chrono::floor&lt;std::chrono::minutes&gt;(std::chrono::system_clock::now());
    constexpr auto location4{"Europe/Rome"sv};
    std::cout &lt;&lt; std::chrono::zoned_time{location4, now} &lt;&lt; " : " &lt;&lt; location4 &lt;&lt; '\n';

    constexpr auto NewYork{"America/New_York"sv};
    constexpr auto Tokyo{"Asia/Tokyo"sv};
    const std::chrono::zoned_time tz_Tokyo{Tokyo, now};
    const std::chrono::zoned_time tz_NewYork{NewYork, now};
    std::cout &lt;&lt; std::chrono::zoned_time{Tokyo, tz_NewYork} &lt;&lt; " : " &lt;&lt; Tokyo &lt;&lt; '\n';
    std::cout &lt;&lt; std::chrono::zoned_time{NewYork, tz_Tokyo} &lt;&lt; " : " &lt;&lt; NewYork &lt;&lt; '\n';
}
|p=true
|output=
1970-01-01 00:00:00 UTC : default
1969-12-31 17:00:00 MST : America/Phoenix
1970-01-01 00:00:00 UTC : UTC time zone
2021-12-31 00:00:00 CET : Europe/Rome
2021-12-31 01:00:00 CET : Europe/Rome
2021-09-20 23:04:00 CEST : Europe/Rome
2021-09-21 06:04:00 JST : Asia/Tokyo
2021-09-20 17:04:00 EDT : America/New_York
}}

{{langlinks|de|es|ja|ru|zh}}
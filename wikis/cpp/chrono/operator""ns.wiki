{{cpp/title|n=literals::chrono_literals::|operator""ns}}
{{cpp/chrono/duration/navbar}}
{{dcl begin}}
{{dcl header|chrono}}
{{dcl|num=1|since=c++14|
constexpr std::chrono::nanoseconds
    operator""ns( unsigned long long nsec );
}}
{{dcl|num=2|since=c++14|
constexpr std::chrono::duration&lt;/*unspecified*/, std::nano&gt;
    operator""ns( long double nsec );
}}
{{dcl end}}

Forms a {{lc|std::chrono::duration}} literal representing nanoseconds.

@1@ Integer literal, returns exactly {{c|std::chrono::nanoseconds(nsec)}}.
@2@ Floating-point literal, returns a floating-point duration equivalent to {{lc|std::chrono::nanoseconds}}.

===Parameters===
{{par begin}}
{{par|nsec|the number of nanoseconds}}
{{par end}}

===Return value===
The {{lc|std::chrono::duration}} literal.

===Possible implementation===
{{eq fun
|1=
constexpr std::chrono::nanoseconds operator""ns(unsigned long long ns)
{
    return std::chrono::nanoseconds(ns);
}
constexpr std::chrono::duration&lt;long double, std::nano&gt; operator""ns(long double ns)
{
    return std::chrono::duration&lt;long double, std::nano&gt;(ns);
}
}}

===Notes===
{{cpp/chrono/chrono_literals_namespace}}

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    using namespace std::chrono_literals;
    auto d1{250ns};
    std::chrono::nanoseconds d2{1us};
    std::cout &lt;&lt; d1 &lt;&lt; " = " &lt;&lt; d1.count() &lt;&lt; " nanoseconds\n"
              &lt;&lt; d2 &lt;&lt; " = " &lt;&lt; d2.count() &lt;&lt; " nanoseconds\n";
}
|output=
250ns = 250 nanoseconds
1000ns = 1000 nanoseconds
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/duration/dsc constructor}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{include page|cpp/chrono/year_and_month operator arith|year_month_day}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    constexpr auto monthsInYear{12};
    auto ymd{std::chrono::day(1)/std::chrono::July/2020};
    std::cout &lt;&lt; "#1 " &lt;&lt; ymd &lt;&lt; '\n';

    ymd -= std::chrono::years(10);
    std::cout &lt;&lt; "#2 " &lt;&lt; ymd &lt;&lt; '\n';
    assert(ymd.month() == std::chrono::July);
    assert(ymd.year() == std::chrono::year(2010));

    ymd += std::chrono::months(10 * monthsInYear + 11);
    std::cout &lt;&lt; "#3 " &lt;&lt; ymd &lt;&lt; '\n';
    assert(ymd.month() == std::chrono::month(6));
    assert(ymd.year() == std::chrono::year(2021));

    // Handling the ymd += months "overflow" case.
    ymd = std::chrono::May/31/2021; // ok
    std::cout &lt;&lt; "#4 " &lt;&lt; ymd &lt;&lt; '\n';
    assert(ymd.ok());

    ymd += std::chrono::months{1}; // bad date: June has only 30 days
    std::cout &lt;&lt; "#5 " &lt;&lt; ymd &lt;&lt; '\n';
    assert(not ymd.ok());
    assert(ymd == std::chrono::June/31/2021);

    // Snap to the last day of the month, June 30:
    const auto ymd1 = ymd.year()/ymd.month()/std::chrono::last;
    std::cout &lt;&lt; "#6 " &lt;&lt; ymd1 &lt;&lt; '\n';
    assert(ymd1.ok());
    assert(ymd1 == std::chrono::June/30/2021);

    // Overflow into the next month, July 1 (via converting to/from sys_days):
    const std::chrono::year_month_day ymd2 = std::chrono::sys_days{ymd};
    std::cout &lt;&lt; "#7 " &lt;&lt; ymd2 &lt;&lt; '\n';
    assert(ymd2.ok());
    assert(ymd2 == std::chrono::July/1/2021);
}
|output=
#1 2020-07-01
#2 2010-07-01
#3 2021-06-01
#4 2021-05-31
#5 2021-06-31 is not a valid date
#6 2021/Jun/last
#7 2021-07-01
}}

===See also===
{{dsc begin}}
{{dsc inc|{{BASEPAGENAMEE}}/dsc operator arith 2}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
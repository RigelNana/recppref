{{cpp/chrono/year_month_day/title|year_month_day}}
{{cpp/chrono/year_month_day/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
year_month_day() = default;
}}
{{dcl|since=c++20|num=2|
constexpr year_month_day( const std::chrono::year&amp; y,
                          const std::chrono::month&amp; m,
                          const std::chrono::day&amp; d ) noexcept;
}}
{{dcl|since=c++20|num=3|
constexpr year_month_day( const std::chrono::year_month_day_last&amp; ymdl ) noexcept;
}}
{{dcl|since=c++20|num=4|
constexpr year_month_day( const std::chrono::sys_days&amp; dp ) noexcept;
}}
{{dcl|since=c++20|num=5|
constexpr explicit year_month_day( const std::chrono::local_days&amp; dp ) noexcept;
}}
{{dcl end}}

Constructs a {{tt|year_month_day}} object.
@1@ Default constructor leaves the date uninitialized.
@2@ Constructs a {{tt|year_month_day}} object that stores the year {{c|y}}, month {{c|m}} and day {{c|d}}.
@3@ Constructs a {{tt|year_month_day}} object that stores the year {{c|ymdl.year()}}, month {{c|ymdl.month()}} and day {{c|ymdl.day()}}.
@4@ Constructs a {{tt|year_month_day}} object that represent the same date as the one represented by {{c|dp}}. 
@5@ Constructs a {{tt|year_month_day}} object that represent the same date as the one represented by {{c|dp}}, as if by {{c|year_month_day(sys_days(dp.time_since_epoch()))}}.

Constructors {{v|3,4}} define implicit conversions from {{lc|std::chrono::year_month_day_last}} and {{lc|std::chrono::sys_days}}, respectively. 

For any {{tt|year_month_day}} object {{tt|ymd}} representing a valid date ({{c|ymd.ok() {{==}} true}}), converting {{tt|ymd}} to {{lc|std::chrono::sys_days|sys_days}} and back yields the same value.

===Notes===
A {{tt|year_month_day}} can also be created by combining one of the partial-date types {{lc|std::chrono::year_month}} and {{lc|std::chrono::month_day}} with the missing component (day and year, respectively) using {{c|operator/}}.

===Example===
{{example|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    using namespace std::chrono;

    constexpr auto ymd2 = std::chrono::year_month_day(
        2020y, std::chrono::January, 31d // overload (2)
    );
    std::cout &lt;&lt; "ymd2: " &lt;&lt; ymd2 &lt;&lt; '\n';

    constexpr auto ymd3 = std::chrono::year_month_day(
        std::chrono::April / std::chrono::Monday[last] / 2023y // overload (3)
    );
    std::cout &lt;&lt; "ymd3: " &lt;&lt; ymd3 &lt;&lt; '\n';

    const auto now = std::chrono::system_clock::now();
    const auto ymd4 = std::chrono::year_month_day(
        std::chrono::floor&lt;std::chrono::days&gt;(now) // overload (4)
    );
    std::cout &lt;&lt; "ymd4: " &lt;&lt; ymd4 &lt;&lt; '\n';
}
|p=true
|output=
ymd2: 2020-01-31
ymd3: 2023-04-24
ymd4: 2023-08-30
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/dsc operator/}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
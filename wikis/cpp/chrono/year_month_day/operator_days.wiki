{{cpp/chrono/year_month_day/title|operator sys_days|operator local_days}}
{{cpp/chrono/year_month_day/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
constexpr operator std::chrono::sys_days() const noexcept;
}}
{{dcl|since=c++20|num=2|1=
constexpr explicit operator std::chrono::local_days() const noexcept;
}}
{{dcl end}}

Converts {{c|*this}} to a {{lc|std::chrono::time_point}} representing the same date as this {{rlpt|../year_month_day|year_month_day}}. 

@1@ If {{lc|ok()}} is {{c|true}}, the return value holds a count of days from the {{lc|std::chrono::system_clock}} epoch (1970-01-01) to {{c|*this}}. The result is negative if {{c|*this}} represent a date prior to it.

@@ Otherwise, if the stored year and month are valid ({{c|year().ok() &amp;&amp; month().ok()}} is {{c|true}}), then the returned value is {{c|sys_days(year()/month()/1d) + (day() - 1d)}}. 

@@ Otherwise (if {{c|year().ok() &amp;&amp; month().ok()}} is {{c|false}}), the return value is unspecified.

@@ A {{lc|std::chrono::sys_days}} in the range {{c|[std::chrono::days{-12687428}, std::chrono::days{11248737}]}}, when converted to {{rlpt|../year_month_day|year_month_day}} and back, yields the same value.

@2@ Same as {{v|1}} but returns {{lc|std::chrono::local_days|local_days}} instead. Equivalent to {{c|return local_days(sys_days(*this).time_since_epoch());}}.

===Notes===
Converting to {{lc|std::chrono::sys_days}} and back can be used to normalize a {{rlpt|../year_month_day|year_month_day}} that contains an invalid day but a valid year and month:
{{source|1=
using namespace std::chrono;
auto ymd = 2017y/January/0;
ymd = sys_days{ymd};
// ymd is now 2016y/December/31
}}

Normalizing the year and month can be done by adding (or subtracting) zero {{lc|std::chrono::months}}:
{{source|1=
using namespace std::chrono;
constexpr year_month_day normalize(year_month_day ymd)
{
    ymd += months{0}; // normalizes year and month
    return sys_days{ymd}; // normalizes day
}
static_assert(normalize(2017y/33/59) == 2019y/10/29);
}}

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    using namespace std::chrono;
    const auto today = sys_days{std::chrono::floor&lt;days&gt;(system_clock::now())};
    for (const year_month_day ymd : {&lt;!----&gt;{November/15/2020}, {November/15/2120}, today})
    {
        std::cout &lt;&lt; ymd;
        const auto delta = (sys_days{ymd} - today).count();
        (delta &lt; 0) ? std::cout &lt;&lt; " was " &lt;&lt; -delta &lt;&lt; " day(s) ago\n" :
        (delta &gt; 0) ? std::cout &lt;&lt; " is " &lt;&lt; delta &lt;&lt; " day(s) from now\n"
                    : std::cout &lt;&lt; " is today!\n";
    }
}
|p=true
|output=
2020-11-15 was 1014 day(s) ago
2120-11-15 is 35510 day(s) from now
2023-08-26 is today!
}}

{{langlinks|es|ja|ru|zh}}
{{cpp/chrono/time_point/title|max}}
{{cpp/chrono/time_point/navbar}}
{{dcl begin}}
{{dcl rev multi|until1=c++20|dcl1=
static constexpr time_point max();
|dcl2=
static constexpr time_point max() noexcept;
}}
{{dcl end}}
Returns a {{tt|time_point}} with the largest possible duration, i.e. {{c|time_point(duration::max())}}.

===Parameters===
(none)

===Return value===
The largest possible {{tt|time_point}}.

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

int main() 
{
    std::chrono::time_point&lt;std::chrono::system_clock&gt; now =
        std::chrono::system_clock::now();
    std::vector&lt;std::chrono::time_point&lt;std::chrono::system_clock&gt;&gt; times
    {
        now - std::chrono::hours(24),
        now - std::chrono::hours(48),
        now + std::chrono::hours(24)
    };  
  
    std::chrono::time_point&lt;std::chrono::system_clock&gt; earliest =
        std::chrono::time_point&lt;std::chrono::system_clock&gt;::max();

    std::cout &lt;&lt; "all times:\n";
    for (const auto&amp; time : times)
    {
        std::time_t t = std::chrono::system_clock::to_time_t(time);
        std::cout &lt;&lt; std::ctime(&amp;t);
    
        if (time &lt; earliest)
            earliest = time;
    }

    std::time_t t = std::chrono::system_clock::to_time_t(earliest);
    std::cout &lt;&lt; "earliest:\n" &lt;&lt; std::ctime(&amp;t);
}
|p=true
|output=
all times:
Sun Oct  7 19:06:48 2012
Sat Oct  6 19:06:48 2012
Tue Oct  9 19:06:48 2012
earliest:
Sat Oct  6 19:06:48 2012
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
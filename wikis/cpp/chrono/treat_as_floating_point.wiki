{{cpp/chrono/title|treat_as_floating_point}}
{{cpp/chrono/duration/navbar}}
{{dcl begin}}
{{dcl header|chrono}}
{{dcl|since=c++11|1=
template&lt; class Rep &gt; 
struct treat_as_floating_point : std::is_floating_point&lt;Rep&gt; {};
}}
{{dcl end}}

The {{tt|std::chrono::treat_as_floating_point}} trait helps determine if a duration can be converted to another duration with a different tick period.

Implicit conversions between two durations normally depends on the tick period of the durations.  However, implicit conversions can happen regardless of tick period if {{c|std::chrono::treat_as_floating_point&lt;Rep&gt;::value}} is {{c|true}}.

===Helper variable template===
{{ddcl|since=c++17|1=
template&lt; class Rep &gt;
constexpr bool treat_as_floating_point_v = treat_as_floating_point&lt;Rep&gt;::value;
}}

===Specializations===
{{tt|std::chrono::treat_as_floating_point}} may be specialized for program-defined types.

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;thread&gt;

void timed_piece_of_code() 
{
    std::chrono::milliseconds simulated_work(2);
    std::this_thread::sleep_for(simulated_work);
}

int main() 
{
    auto start = std::chrono::high_resolution_clock::now();

    std::cout &lt;&lt; "Running some timed piece of code...\n";
    timed_piece_of_code();

    auto stop = std::chrono::high_resolution_clock::now();

    // A floating point milliseconds type
    using FpMilliseconds = 
        std::chrono::duration&lt;float, std::chrono::milliseconds::period&gt;;

    static_assert(std::chrono::treat_as_floating_point&lt;FpMilliseconds::rep&gt;::value, 
                  "Rep required to be floating point");

    // Note that implicit conversion is not allowed here    
    auto i_ms = std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(stop - start);

    // Note that implicit conversion is allowed here
    auto f_ms = FpMilliseconds(stop - start);

    std::cout &lt;&lt; "Timing stats:\n";

    std::cout &lt;&lt; "  Time in milliseconds, using default rep: "
              &lt;&lt; i_ms.count() &lt;&lt; '\n';

    std::cout &lt;&lt; "  Time in milliseconds, using floating point rep: "
              &lt;&lt; f_ms.count() &lt;&lt; '\n';
}
|output=
Running some timed piece of code...
Timing stats:
  Time in milliseconds, using default rep: 2
  Time in milliseconds, using floating point rep: 2.57307
|p=true
}}

===See also===
{{dsc begin}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/chrono/title|time_point}}
{{cpp/chrono/time_point/navbar}}
{{dcl begin}}
{{dcl header|chrono}}
{{dcl|since=c++11|1=
template&lt;
    class Clock,
    class Duration = typename Clock::duration
&gt; class time_point;
}}
{{dcl end}}

Class template {{tt|std::chrono::time_point}} represents a point in time. It is implemented as if it stores a value of type {{tt|Duration}} indicating the time interval from the start of the {{tt|Clock}}'s epoch.

{{rrev|until=c++23|{{tt|Clock}} must meet the requirements for {{named req|Clock}} {{rev inl|since=c++20|or be {{lc|std::chrono::local_t}}}}.}}

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|clock}}|{{tt|Clock}}, the clock on which this time point is measured}}
{{dsc|{{tt|duration}}|{{tt|Duration}}, a {{lc|std::chrono::duration}} type used to measure the time since epoch}}
{{dsc|{{tt|rep}}|{{tt|Rep}}, an arithmetic type representing the number of ticks of the duration}}
{{dsc|{{tt|period}}|{{tt|Period}}, a {{lc|std::ratio}} type representing the tick period of the duration}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/chrono/time_point/dsc constructor}}
{{dsc inc|cpp/chrono/time_poind/dsc time_since_epoch}}
{{dsc inc|cpp/chrono/time_point/dsc operator_arith}}
{{dsc inc|cpp/chrono/time_point/dsc operator_inc_dec}}
{{dsc inc|cpp/chrono/time_point/dsc min}}
{{dsc inc|cpp/chrono/time_point/dsc max}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/chrono/time_point/dsc operator_arith2}}
{{dsc inc|cpp/chrono/time_point/dsc operator_cmp}}
{{dsc inc|cpp/chrono/time_point/dsc time_point_cast}}
{{dsc inc|cpp/chrono/time_point/dsc floor}}
{{dsc inc|cpp/chrono/time_point/dsc ceil}}
{{dsc inc|cpp/chrono/time_point/dsc round}}
{{dsc end}}

===Helper classes===
{{dsc begin}}
{{dsc inc|cpp/chrono/time_point/dsc common_type}}
{{dsc hash|cpp/chrono/time_point|nested=true|notes={{mark c++26}}}}
{{dsc end}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;chrono&gt;
#include &lt;ctime&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;

void slow_motion()
{
    static int a[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
    // Generate Γ(13) == 12! permutations:
    while (std::ranges::next_permutation(a).found) {}
}

int main()
{
    using namespace std::literals; // enables literal suffixes, e.g. 24h, 1ms, 1s.

    const std::chrono::time_point&lt;std::chrono::system_clock&gt; now =
        std::chrono::system_clock::now();
    
    const std::time_t t_c = std::chrono::system_clock::to_time_t(now - 24h);
    std::cout &lt;&lt; "24 hours ago, the time was "
              &lt;&lt; std::put_time(std::localtime(&amp;t_c), "%F %T.\n") &lt;&lt; std::flush;
    
    const std::chrono::time_point&lt;std::chrono::steady_clock&gt; start =
        std::chrono::steady_clock::now();
    
    std::cout &lt;&lt; "Different clocks are not comparable: \n"
                 "  System time: " &lt;&lt; now.time_since_epoch() &lt;&lt; "\n"
                 "  Steady time: " &lt;&lt; start.time_since_epoch() &lt;&lt; '\n';
    
    slow_motion();
    
    const auto end = std::chrono::steady_clock::now();
    std::cout
        &lt;&lt; "Slow calculations took "
        &lt;&lt; std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(end - start) &lt;&lt; " ≈ "
        &lt;&lt; (end - start) / 1ms &lt;&lt; "ms ≈ " // almost equivalent form of the above, but
        &lt;&lt; (end - start) / 1s &lt;&lt; "s.\n";  // using milliseconds and seconds accordingly
}
|p=true
|output=
24 hours ago, the time was 2021-02-15 18:28:52.
Different clocks are not comparable:
  System time: 1666497022681282572ns
  Steady time: 413668317434475ns
Slow calculations took 2090448µs ≈ 2090ms ≈ 2s.
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/dsc duration}}
{{dsc inc|cpp/chrono/dsc year_month_day}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
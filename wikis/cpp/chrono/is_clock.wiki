{{cpp/chrono/title|is_clock}}
{{cpp/chrono/navbar}}
{{ddcl|header=chrono|since=c++20|
template&lt; class T &gt;
struct is_clock;
}}

If {{tt|T}} satisfies the {{named req|Clock}} requirements, provides the member constant {{c|value}} equal {{c|true}}. For any other type, {{c|value}} is {{c|false}}.

For the purpose of this trait, the extent to which an implementation determines that a type cannot meet the {{named req|Clock}} requirements is unspecified, except that a minimum {{tt|T}} shall not qualify as a {{named req|Clock}} unless it meets all following conditions:
* Each of the following {{lsd|cpp/language/identifiers#Qualified identifiers}} is valid and denotes a type:
:* {{tt|T::rep}}
:* {{tt|T::period}}
:* {{tt|T::duration}}
:* {{tt|T::time_point}}
* Each of the following expressions is well-formed when treated as an [[cpp/language/expressions#Potentially-evaluated expressions|unevaluated operand]]:
:* {{tt|T::is_steady}}
:* {{tt|T::now()}}

{{cpp/types/nospec|pv}}

===Template parameters===
{{par begin}}
{{par|T|a type to check}}
{{par end}}

===Helper variable template===
{{ddcl|since=c++20|1=
template&lt; class T &gt;
constexpr bool is_clock_v = is_clock&lt;T&gt;::value;
}}

{{cpp/types/integral_constant/inherit|{{tt|T}} satisfies the {{named req|Clock}} requirements}}

===Possible implementation===
{{eq fun|
template&lt;class&gt;
struct is_clock : std::false_type {};

template&lt;class T&gt;
    requires
        requires
        {
            typename T::rep;
            typename T::period;
            typename T::duration;
            typename T::time_point;
            T::is_steady; // type is not checked
            T::now();     // return type is not checked
        }
struct is_clock&lt;T&gt; : std::true_type {};
}}

===Notes===
If {{tt|T}} otherwise meets the {{named req|Clock}} requirements, but {{tt|T::is_steady}} is not of type {{c/core|const bool}}, or {{tt|T::now()}} is not of type {{c/core|T::time_point}}, the result of {{tt|is_clock_v&lt;T&gt;}} is unspecified.

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;ratio&gt;

static_assert
(
    std::chrono::is_clock_v&lt;std::chrono::utc_clock&gt; and
    not std::chrono::is_clock_v&lt;std::chrono::duration&lt;int, std::exa&gt;&gt;
);

int main() {}
}}

{{langlinks|es|ja|ru|zh}}
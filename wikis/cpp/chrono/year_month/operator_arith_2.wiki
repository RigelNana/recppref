{{cpp/chrono/title|operator+|operator- {{small|(std::chrono::year_month)}}}}
{{cpp/chrono/year_month/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
constexpr std::chrono::year_month operator+( const std::chrono::year_month&amp; ym,
                                             const std::chrono::years&amp; dy ) noexcept;
}}
{{dcl|since=c++20|num=2|1=
constexpr std::chrono::year_month operator+( const std::chrono::years&amp; dy,
                                             const std::chrono::year_month&amp; ym ) noexcept;
}}
{{dcl|since=c++20|num=3|1=
constexpr std::chrono::year_month operator+( const std::chrono::year_month&amp; ym,
                                             const std::chrono::months&amp; dm ) noexcept;
}}
{{dcl|since=c++20|num=4|1=
constexpr std::chrono::year_month operator+( const std::chrono::months&amp; dm,
                                             const std::chrono::year_month&amp; ym ) noexcept;
}}
{{dcl|since=c++20|num=5|1=
constexpr std::chrono::year_month operator-( const std::chrono::year_month&amp; ym,
                                             const std::chrono::years&amp; dy ) noexcept;
}}
{{dcl|since=c++20|num=6|1=
constexpr std::chrono::year_month operator-( const std::chrono::year_month&amp; ym,
                                             const std::chrono::months&amp; dm ) noexcept;
}}
{{dcl|since=c++20|num=7|1=
constexpr std::chrono::months operator-( const std::chrono::year_month&amp; ym1,
                                         const std::chrono::year_month&amp; ym2 ) noexcept;
}}
{{dcl end}}

@1,2@ Adds {{c|dy.count()}} years to {{c|ym}}.
@3,4@ Adds {{c|dm.count()}} months to {{c|ym}}.
@5@ Subtracts {{c|dy.count()}} years from {{c|ym}}.
@6@ Subtracts {{c|dm.count()}} months from {{c|ym}}.
@7@ Returns the difference in months between the two time points represented by {{c|ym1}} and {{c|ym2}}.

For durations that are convertible to both {{lc|std::chrono::years}} and {{lc|std::chrono::months}}, the {{tt|years}} overloads {{v|1,2,5}} are preferred if the call would otherwise be ambiguous.

===Return value===
@1,2@ {{c|std::chrono::year_month(ym.year() + dy, ym.month())}}
@3,4@ A {{tt|year_month}} value {{tt|z}} such that {{c|1=z - ym == dm}} and {{c|1=z.ok() == true}}.
@5@ {{c|ym + -dy}}
@6@ {{c|ym + -dm}}
@7@ &lt;br&gt;{{cc|1=
ym1.year() - ym2.year() + std::chrono::months(int(unsigned(ym1.month())) -
int(unsigned(ym2.month())))
}}

===Notes===
The result of subtracting two {{tt|year_month}} values is a duration of type {{lc|std::chrono::months}}. This duration unit represents the length of the average Gregorian month (30.436875 days), and the resulting duration bears no relationship to the actual number of days in the time period at issue. For example, the result of {{c|2017y/3 - 2017y/2}} is {{c|std::chrono::months(1)}}, even though February 2017 only contains 28 days.

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;chrono&gt;
 
int main()
{
    auto ym{std::chrono::year(2021)/std::chrono::July};

    ym = ym + std::chrono::months(14);
    assert(ym.month() == std::chrono::September);
    assert(ym.year() == std::chrono::year(2022));

    ym = ym - std::chrono::years(3);
    assert(ym.month() == std::chrono::month(9));
    assert(ym.year() == std::chrono::year(2019));

    ym = ym + (std::chrono::September - std::chrono::month(2));
    assert(ym.month() == std::chrono::April);
    assert(ym.year() == std::chrono::year(2020));
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/year_month/dsc operator_arith}}
{{dsc end}}

{{langlinks|ja|ru|zh}}
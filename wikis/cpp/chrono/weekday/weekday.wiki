{{cpp/chrono/weekday/title|1=weekday}}
{{cpp/chrono/weekday/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
weekday() = default;
}}
{{dcl|since=c++20|num=2|
constexpr explicit weekday( unsigned wd ) noexcept;
}}
{{dcl|since=c++20|num=3|
constexpr weekday( const std::chrono::sys_days&amp; sd ) noexcept;
}}
{{dcl|since=c++20|num=4|
constexpr explicit weekday( const std::chrono::local_days&amp; ld ) noexcept;
}}
{{dcl end}}

Constructs a {{tt|weekday}} object.

@1@ Default constructor leaves the weekday value uninitialized.
@2@ Constructs a {{tt|weekday}} object holding the weekday value {{c|wd}}. If {{c|1=wd == 7}}, the value held is {{c|0}}. If {{c|wd &gt; 255}}, the value held is unspecified.
@3@ Constructs a {{tt|weekday}} object representing the day of the week {{c|sd}} corresponds to. This constructor defines an implicit conversion from {{lc|std::chrono::sys_days}} to {{tt|weekday}}.
@4@ Constructs a {{tt|weekday}} object representing the day of the week {{c|ld}} corresponds to, as if by {{c|weekday(std::chrono::sys_days(ld.time_since_epoch()))}}.

===Parameters===
{{par begin}}
{{par|wd|a weekday value}}
{{par|sd|a system days object}}
{{par|ld|a local days object}}
{{par end}}

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;

int main()
{
    constexpr std::chrono::weekday friday{5}; // uses overload (2)
    static_assert(friday == std::chrono::Friday);

    for (int y{2020}; y &lt;= 2024; ++y)
    {
        const std::chrono::year cur_year{y};
        for (int cur_month{1}; cur_month != 13; ++cur_month)
        {
            const std::chrono::year_month_day ymd{cur_year/cur_month/13};
            const std::chrono::weekday cur_weekday{std::chrono::sys_days(ymd)}; // (3)
            if (cur_weekday == friday)
                std::cout &lt;&lt; ymd &lt;&lt; " is " &lt;&lt; friday &lt;&lt; '\n';
        }
    }
}
|output=
2020-03-13 is Fri
2020-11-13 is Fri
2021-08-13 is Fri
2022-05-13 is Fri
2023-01-13 is Fri
2023-10-13 is Fri
2024-09-13 is Fri
2024-12-13 is Fri
}}

{{langlinks|es|ja|ru|zh}}
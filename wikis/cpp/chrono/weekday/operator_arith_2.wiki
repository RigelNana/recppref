{{cpp/chrono/title|operator+|operator- {{small|(std::chrono::weekday)}}}}
{{cpp/chrono/weekday/navbar}}
{{dcl begin}}
{{dcl header|chrono}}
{{dcl|since=c++20|num=1|
constexpr std::chrono::weekday operator+( const std::chrono::weekday&amp; wd,
                                          const std::chrono::days&amp; d ) noexcept;
}}
{{dcl|since=c++20|num=2|
constexpr std::chrono::weekday operator+( const std::chrono::days&amp; d,
                                          const std::chrono::weekday&amp; wd ) noexcept;
}}
{{dcl|since=c++20|num=3|
constexpr std::chrono::weekday operator-( const std::chrono::weekday&amp; wd,
                                          const std::chrono::days&amp; d ) noexcept;
}}
{{dcl|since=c++20|num=4|
constexpr std::chrono::days operator-( const std::chrono::weekday&amp; wd1,
                                       const std::chrono::weekday&amp; wd2 ) noexcept;
}}
{{dcl end}}

@1,2@ Adds {{c|d.count()}} days to {{c|wd}}. The weekday value held in the result is computed by first evaluating {{c|static_cast&lt;long long&gt;(wd.c_encoding()) + d.count()}} and reducing it modulo 7 to an integer in the range {{closed range|0|6}}.
@3@ Subtracts {{c|d.count()}} days from {{c|wd}}. Equivalent to {{c|return wd + -d;}}.
@4@ If {{c|1=wd1.ok()}} and {{c|1=wd2.ok()}} are both {{c|true}}, returns a {{lc|std::chrono::days}} value {{c|d}} such that {{c|d.count()}} is in the range {{closed range|0|6}} and {{c|1=wd2 + d == wd1}}. Otherwise the returned value is unspecified.

===Return value===
@1-3@ A {{lc|std::chrono::weekday}} holding a weekday value calculated as described above.
@4@ A {{lc|std::chrono::days}} representing the distance between {{c|wd1}} and {{c|wd2}}.

===Notes===
As long as the computation doesn't overflow, {{v|1-3}} always return a valid {{tt|weekday}} even if {{c|wd.ok()}} is {{c|false}}.

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
 
int main()
{
    std::cout &lt;&lt; std::boolalpha;
 
    std::chrono::weekday wd{4};
    wd = wd + std::chrono::days(2);
    std::cout &lt;&lt; (wd == std::chrono::weekday(6)) &lt;&lt; ' '
              &lt;&lt; (wd == std::chrono::Saturday) &lt;&lt; ' ';
 
    wd = wd - std::chrono::days(3);
    std::cout &lt;&lt; (wd == std::chrono::weekday(3)) &lt;&lt; ' '
              &lt;&lt; (wd == std::chrono::Wednesday) &lt;&lt; ' ';
 
    wd = std::chrono::Tuesday;
    wd = wd + std::chrono::days{8}; // (((2 + 8) == 10) % 7) == 3;
    std::cout &lt;&lt; (wd == std::chrono::Wednesday) &lt;&lt; ' ';
 
    wd = wd + (std::chrono::Sunday - std::chrono::Thursday); // (3 + 3) == 6
    std::cout &lt;&lt; (wd == std::chrono::Saturday) &lt;&lt; '\n';
}
|output=
true true true true true true
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/weekday/dsc operator_inc dec}}
{{dsc inc|cpp/chrono/weekday/dsc operator_arith}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
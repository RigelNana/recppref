{{cpp/chrono/weekday/title|operator++|operator--}}
{{cpp/chrono/weekday/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|
constexpr std::chrono::weekday&amp; operator++() noexcept;
}}
{{dcl|since=c++20|num=2|
constexpr std::chrono::weekday operator++( int ) noexcept;
}}
{{dcl|since=c++20|num=3|
constexpr std::chrono::weekday&amp; operator--() noexcept;
}}
{{dcl|since=c++20|num=4|
constexpr std::chrono::weekday operator--( int ) noexcept;
}}
{{dcl end}}

Adds or subtracts {{c|1}} from the weekday value, reducing the result modulo {{c/core|7}} to an integer in the range {{closed range|0|6}}.
@1,2@ Performs {{c|1=*this += std::chrono::days{1};}}.
@3,4@ Performs {{c|1=*this -= std::chrono::days{1};}}.

===Parameters===
(none)

===Return value===
@1,3@ A reference to this {{tt|weekday}} after modification.
@2,4@ A copy of the {{tt|weekday}} made before modification.

===Notes===
After a call to one of these functions, {{rlpf|ok}} is always {{c|true}}.

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; std::boolalpha;

    std::chrono::weekday wd{0}; // Sunday is 0 or 7

    --wd;
    std::cout &lt;&lt; (wd == std::chrono::Saturday) &lt;&lt; ' ';

    ++wd;
    std::cout &lt;&lt; (wd == std::chrono::Sunday) &lt;&lt; '\n';

    wd = std::chrono::weekday{13};
    assert(!wd.ok());
    wd++;
    assert(wd.ok());
}
|output=
true true
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/weekday/dsc operator_arith}}
{{dsc inc|cpp/chrono/weekday/dsc operator_arith 2}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
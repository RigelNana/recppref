{{cpp/chrono/year_month_weekday_last/title|operator sys_days|operator local_days}}
{{cpp/chrono/year_month_weekday_last/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|
constexpr operator std::chrono::sys_days() const noexcept;
}}
{{dcl|since=c++20|num=2|
constexpr explicit operator std::chrono::local_days() const noexcept;
}}
{{dcl end}}
Converts {{c|*this}} to a {{lc|std::chrono::time_point}} representing the same date as this {{tt|year_month_weekday_last}}.

@1@ If {{rlpf|ok}} is {{c|true}}, returns a {{tt|sys_days}} that represents the last {{rlpf|accessors|weekday}} of the {{rlpf|accessors|year}} and {{rlpf|accessors|month}}. Otherwise, the returned value is unspecified.

@2@ Same as {{v|1}}, but returns {{tt|local_days}} instead of {{tt|sys_days}}. Equivalent to {{c|local_days(sys_days(*this).time_since_epoch())}}.

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
using namespace std::chrono;

int main()
{
    constexpr auto ymwdl{Tuesday[last]/11/2021};
    static_assert(static_cast&lt;local_days&gt;(ymwdl) ==
                  static_cast&lt;local_days&gt;(November/30/2021));
    // convert from field-based to serial-based to add days
    constexpr auto sd = static_cast&lt;sys_days&gt;(ymwdl);
    constexpr year_month_day ymd{sd + days(42)};
    std::cout &lt;&lt; ymd &lt;&lt; '\n';
}
|output=
2022-01-11
}}

{{langlinks|es|ja|ru|zh}}
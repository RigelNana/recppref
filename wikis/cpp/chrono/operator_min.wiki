{{cpp/title|n=literals::chrono_literals::|operator""min}}
{{cpp/chrono/duration/navbar}}
{{dcl begin}}
{{dcl header|chrono}}
{{dcl|num=1|since=c++14|
constexpr chrono::minutes
    operator""min( unsigned long long mins );
}}
{{dcl|num=2|since=c++14|
constexpr chrono::duration&lt;/*unspecified*/, ratio&lt;60,1&gt;&gt;
    operator""min( long double mins );
}}
{{dcl end}}

Forms a {{lc|std::chrono::duration}} literal representing minutes.

@1@ Integer literal, returns exactly {{c|std::chrono::minutes(mins)}}.
@2@ Floating-point literal, returns a floating-point duration equivalent to {{lc|std::chrono::minutes}}.

===Parameters===
{{par begin}}
{{par|mins|the number of minutes}}
{{par end}}

===Return value===
The {{lc|std::chrono::duration}} literal.

===Possible implementation===
{{eq fun
|1=
constexpr std::chrono::minutes operator""min(unsigned long long m)
{
    return std::chrono::minutes(m);
}
constexpr std::chrono::duration&lt;long double,
                                std::ratio&lt;60,1&gt;&gt; operator""min(long double m)
{
    return std::chrono::duration&lt;long double, ratio&lt;60,1&gt;&gt; (m);
}
}}

===Notes===
{{cpp/chrono/chrono_literals_namespace}}

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    using namespace std::chrono_literals;
    auto lesson = 45min;
    auto halfmin = 0.5min;
    std::cout &lt;&lt; "One lesson is " &lt;&lt; lesson.count() &lt;&lt; " minutes"
                 " (" &lt;&lt; lesson &lt;&lt; ")\n"
              &lt;&lt; "Half a minute is " &lt;&lt; halfmin.count() &lt;&lt; " minutes"
                 " (" &lt;&lt; halfmin &lt;&lt; ")\n";
}
|output=
One lesson is 45 minutes (45min)
Half a minute is 0.5 minutes (0.5min)
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/duration/dsc constructor}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
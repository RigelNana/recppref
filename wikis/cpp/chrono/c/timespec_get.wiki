{{cpp/title|timespec_get}}
{{cpp/chrono/c/navbar}}
{{dcl begin}}
{{dcl header|ctime}}
{{dcl|num=1|since=c++17|
int timespec_get( std::timespec* ts, int base );
}}
{{dcl|num=2|since=c++17|
#define TIME_UTC /* implementation-defined */
}}
{{dcl end}}

@1@ Modifies the {{lc|std::timespec}} object pointed to by {{c|ts}} to hold the current calendar time in the time base {{c|base}}.
@2@ Expands to a value suitable for use as the {{c|base}} argument of {{tt|std::timespec_get}}.

Other macro constants beginning with {{tt|TIME_}} may be provided by the implementation to indicate additional time bases.

If {{c|base}} is {{tt|TIME_UTC}}, then
* {{c|ts-&gt;tv_sec}} is set to the number of seconds since an implementation defined epoch, truncated to a whole value,
* {{c|ts-&gt;tv_nsec}} member is set to the integral number of nanoseconds, rounded to the resolution of the system clock.

===Parameters===
{{par begin}}
{{par|ts|pointer to an object of type {{lc|std::timespec}}}}
{{par|base|{{tt|TIME_UTC}} or another nonzero integer value indicating the time base}}
{{par end}}

===Return value===
The value of {{c|base}} if successful, zero otherwise.

===Notes===
The POSIX function [https://pubs.opengroup.org/onlinepubs/9699919799/functions/clock_getres.html {{tt|clock_gettime(CLOCK_REALTIME, ts)}}] may also be used to populate a {{tt|std::timespec}} with the time since the Epoch.

===Example===
{{example
|code=
#include &lt;ctime&gt;
#include &lt;iostream&gt;

int main()
{
    std::timespec ts;
    std::timespec_get(&amp;ts, TIME_UTC);
    char buf[100];
    std::strftime(buf, sizeof buf, "%D %T", std::gmtime(&amp;ts.tv_sec));
    std::cout &lt;&lt; "Current time: " &lt;&lt; buf &lt;&lt; '.' &lt;&lt; ts.tv_nsec &lt;&lt; " UTC\n";
}
|p=true
|output=
Current time: 06/24/16 20:07:42.949494132 UTC
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/c/dsc timespec}}
{{dsc inc|cpp/chrono/c/dsc time}}
{{dsc see c|c/chrono/timespec_get}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
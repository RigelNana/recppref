{{cpp/title|ctime}}
{{cpp/chrono/c/navbar}}
{{ddcl|header=ctime|
char* ctime( const std::time_t* time );
}}

Converts given time since epoch to a calendar local time and then to a textual representation, as if by calling {{c|std::asctime(std::localtime(time))}}. The resulting string has the following format:

{{source|Www Mmm dd hh:mm:ss yyyy\n}}

* {{tt|Www}} - the day of the week (one of {{tt|Mon}}, {{tt|Tue}}, {{tt|Wed}}, {{tt|Thu}}, {{tt|Fri}}, {{tt|Sat}}, {{tt|Sun}}).
* {{tt|Mmm}} - the month (one of {{tt|Jan}}, {{tt|Feb}}, {{tt|Mar}}, {{tt|Apr}}, {{tt|May}}, {{tt|Jun}}, {{tt|Jul}}, {{tt|Aug}}, {{tt|Sep}}, {{tt|Oct}}, {{tt|Nov}}, {{tt|Dec}}).
* {{tt|dd}} - the day of the month.
* {{tt|hh}} - hours.
* {{tt|mm}} - minutes.
* {{tt|ss}} - seconds.
* {{tt|yyyy}} - years.

The function does not support localization.

===Parameters===
{{par begin}}
{{par|time|pointer to a {{lc|std::time_t}} object specifying the time to print}}
{{par end}}

===Return value===
Pointer to a static null-terminated character string holding the textual representation of date and time. The string may be shared between {{lc|std::asctime}} and {{tt|std::ctime}}, and may be overwritten on each invocation of any of those functions.

===Notes===
This function returns a pointer to static data and is not thread-safe. In addition, it modifies the static {{lc|std::tm}} object which may be shared with {{lc|std::gmtime}} and {{lc|std::localtime}}. POSIX marks this function obsolete and recommends {{lc|std::strftime}} instead.

The behavior may be undefined for the values of {{lc|std::time_t}} that result in the string longer than 25 characters (e.g. year 10000).

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;cstring&gt;
#include &lt;ctime&gt;
#include &lt;iostream&gt;
 
int main()
{
    std::time_t result = std::time(nullptr);
    std::cout &lt;&lt; std::ctime(&amp;result);

    char buffer[32];
    std::strncpy(buffer, std::ctime(&amp;result), 26);
    assert('\n' == buffer[std::strlen(buffer) - 1]);
    std::cout &lt;&lt; buffer;
}
|p=true
|output=
Mon Oct 11 17:10:55 2021
Mon Oct 11 17:10:55 2021
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/c/dsc asctime}}
{{dsc inc|cpp/chrono/c/dsc strftime}}
{{dsc inc|cpp/io/manip/dsc put_time}}
{{dsc see c|c/chrono/ctime}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
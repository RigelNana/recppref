{{cpp/title|gmtime}}
{{cpp/chrono/c/navbar}}
{{ddcl|header=ctime|
std::tm* gmtime( const std::time_t* time );
}}

Converts given time since epoch as {{lc|std::time_t}} value into calendar time, expressed in Coordinated Universal Time (UTC). 

===Parameters===
{{par begin}}
{{par|time|pointer to a time_t object to convert}}
{{par end}}

===Return value===
Pointer to a static internal {{lc|std::tm}} object on success, or null pointer otherwise. The structure may be shared between {{lc|std::gmtime}}, {{lc|std::localtime}}, and {{lc|std::ctime}} and may be overwritten on each invocation.

===Notes===
This function may not be thread-safe.

POSIX requires that this function sets {{lc|errno}} to {{lc|EOVERFLOW}} if it fails because the argument is too large.

===Example===
{{example
|code=
#include &lt;ctime&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
 
int main()
{
    setenv("TZ", "/usr/share/zoneinfo/Europe/London", 1); // POSIX-specific
 
    std::tm tm{}; // get_time does not set all fields hence {}
    tm.tm_year = 2020 - 1900; // 2020
    tm.tm_mon = 7 - 1; // July
    tm.tm_mday = 15; // 15th
    tm.tm_hour = 10;
    tm.tm_min = 15;
    tm.tm_isdst = 1; // Daylight saving in London
    std::time_t t = std::mktime(&amp;tm); 
 
    std::cout &lt;&lt; "UTC:   " &lt;&lt; std::put_time(std::gmtime(&amp;t), "%c %Z") &lt;&lt; '\n';
    std::cout &lt;&lt; "local: " &lt;&lt; std::put_time(std::localtime(&amp;t), "%c %Z") &lt;&lt; '\n';
}
|p=true
|output=
UTC:   Wed Jul 15 09:15:00 2020 GMT
local: Wed Jul 15 10:15:00 2020 BST
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/c/dsc localtime}}
{{dsc see c|c/chrono/gmtime}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/chrono/title|operator+|operator- {{small|(std::chrono::year)}}}}
{{cpp/chrono/year/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|
constexpr std::chrono::year operator+( const std::chrono::year&amp; y,
                                       const std::chrono::years&amp; ys ) noexcept;
}}
{{dcl|since=c++20|num=2|
constexpr std::chrono::year operator+( const std::chrono::years&amp; ys,
                                       const std::chrono::year&amp; y ) noexcept;
}}
{{dcl|since=c++20|num=3|
constexpr std::chrono::year operator-( const std::chrono::year&amp; y,
                                       const std::chrono::years&amp; ys ) noexcept;
}}
{{dcl|since=c++20|num=4|
constexpr std::chrono::years operator-( const std::chrono::year&amp; y1, 
                                        const std::chrono::year&amp; y2 ) noexcept;
}}
{{dcl end}}

@1,2@ Adds {{c|ys.count()}} years to {{c|y}}. 
@3@ Subtracts {{c|ys.count()}} years from {{c|y}}.
@4@ Returns the difference in years between {{c|y1}} and {{c|y2}}.

===Return value===
@1,2@ {{c|std::chrono::year(int(y) + ys.count())}}
@3@ {{c|std::chrono::year(int(y) - ys.count())}}
@4@ {{c|std::chrono::years(int(y1) - int(y2))}}

===Notes===
If the resulting year value for {{v|1-3}} is outside the range {{closed range|-32767|32767}}, the actual value stored is unspecified.

The result of subtracting two {{tt|year}} values is a duration of type {{lc|std::chrono::years}}. This duration unit represents the length of the average Gregorian year, and the resulting duration bears no relationship to the number of days in the particular years represented by the operands. For example, the result of {{c|2018y - 2017y}} is {{c|std::chrono::years(1)}}, which represents 365.2425 days, not 365 days.

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;chrono&gt;

int main()
{
    std::chrono::year y{2020};

    y = std::chrono::years(12) + y; // overload (2): duration + time point
    assert(y == std::chrono::year(2032));

    y = y - std::chrono::years(33); // overload (3): time point - duration
    assert(y == std::chrono::year(1999));

    // y = std::chrono::years(33) - y; // not supported: duration - time point

    using namespace std::chrono;
    constexpr std::chrono::years ys = 2025y - 2020y; // overload (4)
    static_assert(ys == std::chrono::years(5));
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/month/dsc operator_inc dec}}
{{dsc inc|cpp/chrono/month/dsc operator_arith}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
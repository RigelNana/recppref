{{cpp/chrono/year/title|1=ok}}
{{cpp/chrono/year/navbar}}
{{ddcl|since=c++20|1=
constexpr bool ok() const noexcept;
}}

Checks if the year value stored in {{c|*this}} is in the valid range, i.e., {{closed range|-32767|32767}}.

===Return value===
{{c|true}} if the year value stored in {{c|*this}} is in the range {{closed range|-32767|32767}}. Otherwise {{c|false}}.

===Possible implementation===
See the implementations in
[https://github.com/gcc-mirror/gcc/blob/919858077f4b768c8472f29b977edf0aa6e0f1e5/libstdc%2B%2B-v3/include/std/chrono#L1606 libstdc++],
[https://github.com/llvm-mirror/libcxx/blob/78d6a7767ed57b50122a161b91f59f19c9bd0d19/include/chrono#L1832 libc++],
and Howard Hinnant's
[https://github.com/HowardHinnant/date/blob/0b72599bd43f72d8935e507e25e4f0063f9bb34e/include/date/date.h#L1630 date.h].
{{eq fun
|1=
class Year
{
    short year_;   // exposition-only

public:

    bool ok() const noexcept { return year_ != std::numeric_limits&lt;short&gt;::min(); }

    /*...*/
};
}}

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
 
int main()
{
    std::cout &lt;&lt; "input year │ internal value │ ok()\n" &lt;&lt; std::boolalpha;

    for (const int i : {2020, 0x8000, 0x8001, 0xFFFF, 0x18000})
    {
        const std::chrono::year y{i};
        std::cout &lt;&lt; std::setw(10) &lt;&lt; i &lt;&lt; " │ "
                  &lt;&lt; std::setw(14) &lt;&lt; static_cast&lt;int&gt;(y) &lt;&lt; " │ "
                  &lt;&lt; y.ok() &lt;&lt; '\n';
    }
}
|p=true &lt;!-- out of range values are not specified --&gt;
|output=
input year │ internal value │ ok()
      2020 │           2020 │ true
     32768 │         -32768 │ false
     32769 │         -32767 │ true
     65535 │             -1 │ true
     98304 │         -32768 │ false
}}

{{langlinks|es|ja|ru|zh}}
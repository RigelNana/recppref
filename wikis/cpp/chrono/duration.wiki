{{cpp/chrono/title|duration}}
{{cpp/chrono/duration/navbar}}
{{ddcl|header=chrono|since=c++11|1=
template&lt;
    class Rep,
    class Period = std::ratio&lt;1&gt;
&gt; class duration;
}}

Class template {{tt|std::chrono::duration}} represents a time interval.

It consists of a count of ticks of type {{tt|Rep}} and a tick period, where the tick period is a compile-time rational {{ltt|cpp/numeric/ratio/ratio|fraction}} representing the time in seconds from one tick to the next.

The only data stored in a {{tt|duration}} is a tick count of type {{tt|Rep}}.&lt;!--per N2661, not actually in the standard wording--&gt; If {{tt|Rep}} is floating point, then the {{tt|duration}} can represent fractions of ticks. {{tt|Period}} is included as part of the duration's type, and is only used when converting between different durations.

===Member types===
{{dsc begin}}
{{dsc hitem|Member type|Definition}}
{{dsc|{{tt|rep}}|{{tt|Rep}}, an arithmetic type, or a class emulating an arithmetic type, representing the number of ticks}}
{{dsc|{{tt|period}}|{{rev inl|until=c++17|{{tt|Period}}}}{{rev inl|since=c++17|{{c/core|typename Period::type}}}}, a {{lc|std::ratio}} representing the tick period (i.e. the number of second's fractions per tick)}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc inc|cpp/chrono/duration/dsc constructor}}
{{dsc inc|cpp/chrono/duration/dsc operator{{=}}}}
{{dsc inc|cpp/chrono/duration/dsc count}}
{{dsc inc|cpp/chrono/duration/dsc zero}}
{{dsc inc|cpp/chrono/duration/dsc min}}
{{dsc inc|cpp/chrono/duration/dsc max}}
{{dsc inc|cpp/chrono/duration/dsc operator arith}}
{{dsc inc|cpp/chrono/duration/dsc operator arith2}}
{{dsc inc|cpp/chrono/duration/dsc operator arith3}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/chrono/duration/dsc operator arith4}}
{{dsc inc|cpp/chrono/duration/dsc operator cmp}}
{{dsc inc|cpp/chrono/duration/dsc duration cast}}
{{dsc inc|cpp/chrono/duration/dsc floor}}
{{dsc inc|cpp/chrono/duration/dsc ceil}}
{{dsc inc|cpp/chrono/duration/dsc round}}
{{dsc inc|cpp/chrono/duration/dsc abs}}
{{dsc inc|cpp/chrono/duration/dsc operator ltlt}}
{{dsc inc|cpp/chrono/duration/dsc from_stream}}
{{dsc end}}

===Helper types===
A type {{c/core|/* intXX */}} used in the table below means a signed integer type of at least XX bits.
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{ttb|std::chrono::nanoseconds}}|{{c/core|std::chrono::duration&lt;/* int64 */, std::nano&gt;}}}}
{{dsc|{{ttb|std::chrono::microseconds}}|{{c/core|std::chrono::duration&lt;/* int55 */, std::micro&gt;}}}}
{{dsc|{{ttb|std::chrono::milliseconds}}|{{c/core|std::chrono::duration&lt;/* int45 */, std::milli&gt;}}}}
{{dsc|{{ttb|std::chrono::seconds}}|{{c/core|std::chrono::duration&lt;/* int35 */&gt;}}}}
{{dsc|{{ttb|std::chrono::minutes}}|{{c/core|std::chrono::duration&lt;/* int29 */, std::ratio&lt;60&gt;&gt;}}}}
{{dsc|{{ttb|std::chrono::hours}}|{{c/core|std::chrono::duration&lt;/* int23 */, std::ratio&lt;3600&gt;&gt;}}}}
{{dsc|{{ttb|std::chrono::days}} {{mark since c++20}}|{{c/core|std::chrono::duration&lt;/* int25 */, std::ratio&lt;86400&gt;&gt;}}}}
{{dsc|{{ttb|std::chrono::weeks}} {{mark since c++20}}|{{c/core|std::chrono::duration&lt;/* int22 */, std::ratio&lt;604800&gt;&gt;}}}}
{{dsc|{{ttb|std::chrono::months}} {{mark since c++20}}|{{c/core|std::chrono::duration&lt;/* int20 */, std::ratio&lt;2629746&gt;&gt;}}}}
{{dsc|{{ttb|std::chrono::years}} {{mark since c++20}}|{{c/core|std::chrono::duration&lt;/* int17 */, std::ratio&lt;31556952&gt;&gt;}}}}
{{dsc end}}
Note: each of the predefined duration types up to {{tt|hours}} covers a range of at least ±292 years.

{{rrev|since=c++20|Each of the predefined duration types {{tt|days}}, {{tt|weeks}}, {{tt|months}} and {{tt|years}} covers a range of at least ±40000 years. {{tt|years}} is equal to 365.2425 {{tt|days}} (the average length of a Gregorian year). {{tt|months}} is equal to 30.436875 {{tt|days}} (exactly 1/12 of {{tt|years}}).}}

===Helper classes===
{{dsc begin}}
{{dsc inc|cpp/chrono/duration/dsc common_type}}
{{dsc inc|cpp/chrono/dsc treat_as_floating_point}}
{{dsc inc|cpp/chrono/dsc duration_values}}
{{dsc inc|cpp/chrono/dsc formatter|duration}}
{{dsc hash|cpp/chrono/duration|nested=true|notes={{mark c++26}}}}
{{dsc end}}

===Helper specializations===
{{dcl begin}}
{{dcl|since=c++23|1=
template&lt; class Rep, class Period &gt;
constexpr bool enable_nonlocking_formatter_optimization&lt;chrono::duration&lt;Rep, Period&gt;&gt; 
    = enable_nonlocking_formatter_optimization&lt;Rep&gt;;
}}
{{dcl end}}
This specialization of {{ltt std|cpp/utility/format/enable_nonlocking_formatter_optimization}} enables efficient implementation of {{ltt std|cpp/io/print}} and {{ltt std|cpp/io/println}} for printing a {{tt|chrono::duration}} object when the template parameter {{tt|Rep}} enables it.

===Literals===
{{dsc begin}}
{{dsc namespace|std::literals::chrono_literals|inline=true}}
{{dsc inc|cpp/chrono/dsc operator""h}}
{{dsc inc|cpp/chrono/dsc operator""min}}
{{dsc inc|cpp/chrono/dsc operator""s}}
{{dsc inc|cpp/chrono/dsc operator""ms}}
{{dsc inc|cpp/chrono/dsc operator""us}}
{{dsc inc|cpp/chrono/dsc operator""ns}}
{{dsc end}}

{{rrev|since=c++20|
Note: the literal suffixes {{tt|d}} and {{tt|y}} do not refer to {{tt|days}} and {{tt|years}} but to {{ltt|cpp/chrono/day}} and {{ltt|cpp/chrono/year}}, respectively.
}}

===Notes===
The actual time interval (in seconds) that is held by a duration object {{c|d}} is roughly equal to {{c|1=d.count() * D::period::num / D::period::den}}, where {{tt|D}} is of type {{tt|chrono::duration&lt;&gt;}} and {{c|d}} is an object of such type.

{{feature test macro|__cpp_lib_chrono_udls|value=201304L|std=C++14|[[#Literals|User-defined literals for time types]]}}

===Example===
{{example
|This example shows how to define several custom duration types and convert between types:
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

using namespace std::chrono_literals;

template&lt;typename T1, typename T2&gt;
using mul = std::ratio_multiply&lt;T1, T2&gt;;

int main()
{
    using microfortnights = std::chrono::duration&lt;float,
        mul&lt;mul&lt;std::ratio&lt;2&gt;, std::chrono::weeks::period&gt;, std::micro&gt;&gt;;
    using nanocenturies = std::chrono::duration&lt;float,
        mul&lt;mul&lt;std::hecto, std::chrono::years::period&gt;, std::nano&gt;&gt;;
    using fps_24 = std::chrono::duration&lt;double, std::ratio&lt;1, 24&gt;&gt;;
    
    std::cout &lt;&lt; "1 second is:\n";
    
    // integer scale conversion with no precision loss: no cast
    std::cout &lt;&lt; std::chrono::milliseconds(1s).count() &lt;&lt; " milliseconds\n"
              &lt;&lt; std::chrono::microseconds(1s).count() &lt;&lt; " microseconds\n"
              &lt;&lt; std::chrono::nanoseconds(1s).count() &lt;&lt; " nanoseconds\n";
    
    // integer scale conversion with precision loss: requires a cast
    std::cout &lt;&lt; std::chrono::duration_cast&lt;std::chrono::minutes&gt;(1s).count()
              &lt;&lt; " minutes\n";
    // alternative to duration_cast:
    std::cout &lt;&lt; 1s / 1min &lt;&lt; " minutes\n";
    
    // floating-point scale conversion: no cast
    std::cout &lt;&lt; microfortnights(1s).count() &lt;&lt; " microfortnights\n"
              &lt;&lt; nanocenturies(1s).count() &lt;&lt; " nanocenturies\n"
              &lt;&lt; fps_24(1s).count() &lt;&lt; " frames at 24fps\n";
}
|output=
1 second is:
1000 milliseconds
1000000 microseconds
1000000000 nanoseconds
0 minutes
0 minutes
0.82672 microfortnights
0.316887 nanocenturies
24 frames at 24fps
}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
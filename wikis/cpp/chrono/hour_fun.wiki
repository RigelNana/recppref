{{cpp/chrono/title|is_am|is_pm|make12|make24}}
{{cpp/chrono/navbar}}
{{dcl begin}}
{{dcl header|chrono}}
{{dcl|num=1|since=c++20|
constexpr bool is_am( const std::chrono::hours&amp; h ) noexcept;
}}
{{dcl|num=2|since=c++20|
constexpr bool is_pm( const std::chrono::hours&amp; h ) noexcept;
}}
{{dcl|num=3|since=c++20|
constexpr std::chrono::hours make12( const std::chrono::hours&amp; h ) noexcept;
}}
{{dcl|num=4|since=c++20|
constexpr std::chrono::hours make24( const std::chrono::hours&amp; h,
                                     bool is_pm ) noexcept;
}}
{{dcl end}}

These functions aid in translating between a 12-hour format time of day, and a 24-hour format time of day.

@1@ Detects whether the 24-hour format time is a.m. (''ante meridiem'', before midday).

@2@ Detects whether the 24-hour format time is p.m. (''post meridiem'', after midday).

@3@ Returns the 12-hour equivalent of a 24-hour format time.

@4@ Returns the 24-hour equivalent of a 12-hour format time {{c|h}}, where {{c|is_pm}} determines whether the time is p.m.

===Parameters===
{{par begin}}
{{par|h|12-hour or 24-hour format time to detect}}
{{par|is_pm|whether the 12-hour format time is p.m.}}
{{par end}}

===Return value===
@1@ {{c|1=0h &lt;= h &amp;&amp; h &lt;= 11h}}
@2@ {{c|1=12h &lt;= h &amp;&amp; h &lt;= 23h}}
@3@ If {{c|h}} is in range {{closed range|0h|23h}}, returns the 12-hour equivalent in range {{closed range|1h|12h}}. Otherwise, the return value is unspecified.
@4@ If {{c|h}} is in range {{closed range|1h|12h}}, returns the 24-hour equivalent in range {{closed range|0h|11h}} if {{c|is_pm}} is {{c|false}}, or in range {{closed range|12h|23h}} otherwise. Otherwise, the return value is unspecified.

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;utility&gt;
 
int main()
{
    using namespace std::chrono;

    static_assert(
        is_am(10h) &amp;&amp;  is_am(11h) &amp;&amp; !is_am(12h) &amp;&amp; !is_am(23h) &amp;&amp;
       !is_pm(10h) &amp;&amp; !is_pm(11h) &amp;&amp;  is_pm(12h) &amp;&amp;  is_pm(23h)
    );

    std::cout &lt;&lt; "make12():\n";

    for (const hours hh : {0h, 1h, 11h, 12h, 13h, 23h})
    {
        const hours am{make12(hh)};
        std::cout &lt;&lt; std::setw(2) &lt;&lt; hh.count() &lt;&lt; "h == "
                  &lt;&lt; std::setw(2) &lt;&lt; am.count() &lt;&lt; (is_am(hh) ? "h a.m.\n" : "h p.m.\n");
    }

    std::cout &lt;&lt; "\nmake24():\n";

    using p = std::pair&lt;hours, bool&gt;;

    for (const auto&amp; [hh, pm] : {p{1h, 0}, p{12h, 0}, p{1h, 1}, p{12h, 1}&lt;!----&gt;})
    {
        std::cout &lt;&lt; std::setw(2) &lt;&lt; hh.count()
                  &lt;&lt; (pm ? "h p.m." : "h a.m.")
                  &lt;&lt; " == " &lt;&lt; std::setw(2)
                  &lt;&lt; make24(hh, pm).count() &lt;&lt; "h\n";
    }
}
|output=
make12():
 0h == 12h a.m.
 1h ==  1h a.m.
11h == 11h a.m.
12h == 12h p.m.
13h ==  1h p.m.
23h == 11h p.m.

make24():
 1h a.m. ==  1h
12h a.m. ==  0h
 1h p.m. == 13h
12h p.m. == 12h
}}

{{langlinks|es|ja|ru|zh}}
{{cpp/chrono/year_month_day_last/title|operator sys_days|operator local_days}}
{{cpp/chrono/year_month_day_last/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|
constexpr operator std::chrono::sys_days() const noexcept;
}}
{{dcl|since=c++20|num=2|
constexpr explicit operator std::chrono::local_days() const noexcept;
}}
{{dcl end}}

Converts {{c|*this}} to a {{lc|std::chrono::time_point}} representing the same date as this {{tt|year_month_day_last}}. This is equivalent to composing a {{tt|year_month_day}} from {{tt|year()}}, {{tt|month()}} and {{tt|day()}} and converting that {{tt|year_month_day}} to the destination type.

@1@ Equivalent to {{c|std::chrono::sys_days(year()/month()/day())}}.
@2@ Equivalent to {{c|std::chrono::local_days(year()/month()/day())}}.

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;
using namespace std::chrono;
using namespace std::literals;

int main()
{
    constexpr std::chrono::year y{2023y};
    constexpr std::array quarters{"1st"sv, "2nd"sv, "3rd"sv, "4th"sv};
    constexpr auto mq{12 / 4}; // months per quarter        

    std::cout &lt;&lt; "In year " &lt;&lt; static_cast&lt;int&gt;(y) &lt;&lt; '\n';
    for (auto q = 1; q &lt; 5; ++q)
    {
        const auto ls = y / std::chrono::month(q * mq) / Sunday[last];
        const auto ld = y / std::chrono::month(q * mq) / last;
        // subtract last Sunday from last day for day of week
        const auto index = (sys_days(ld) - sys_days(ls)).count();
        std::cout &lt;&lt; "The " &lt;&lt; quarters[q - 1] &lt;&lt; " quarter ends on a "  
                  &lt;&lt; std::chrono::weekday(index) &lt;&lt; '\n';
    }
}
|output=
In year 2023
The 1st quarter ends on a Fri
The 2nd quarter ends on a Fri
The 3rd quarter ends on a Sat
The 4th quarter ends on a Sun
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/year_month_day/dsc operator days}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
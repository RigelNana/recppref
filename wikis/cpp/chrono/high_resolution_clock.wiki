{{cpp/title|n=chrono::|high_resolution_clock}}
{{cpp/chrono/high_resolution_clock/navbar}}
{{ddcl|header=chrono|since=c++11|
class high_resolution_clock;
}}

Class {{tt|std::chrono::high_resolution_clock}} represents the clock with the smallest tick period provided by the implementation. It may be an alias of {{lc|std::chrono::system_clock}} or {{lc|std::chrono::steady_clock}}, or a third, independent clock.

{{tt|std::chrono::high_resolution_clock}} meets the requirements of {{named req|TrivialClock}}.

===Member types===
{{dsc begin}}
{{dsc hitem|Type|Definition}}
{{dsc|{{tt|rep}}|arithmetic type representing the number of ticks in the clock's duration}}
{{dsc|{{tt|period}}|a {{lc|std::ratio}} type representing the tick period of the clock, in seconds}}
{{dsc|{{tt|duration}}|{{c/core|std::chrono::duration&lt;rep, period&gt;}}}}
{{dsc|{{tt|time_point}}|{{c/core|std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt;}}}}
{{dsc end}}

===Member constants===
{{dsc begin}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr bool}} is_steady|{{c|true}} if the time between ticks is always constant, i.e. calls to {{ltf|cpp/chrono/high_resolution_clock/now}} return values that increase monotonically even in case of some external clock adjustment, otherwise {{c|false}}}}
{{dsc end}}

===Member functions===
{{dsc begin}}
{{dsc mem sfun|cpp/chrono/high_resolution_clock/now|returns a {{lc|std::chrono::time_point}} representing the current value of the clock}}
{{dsc end}}

===Notes===
There has been some controversy around the use of {{tt|high_resolution_clock}}. Howard Hinnant, who claims to have introduced {{tt|high_resolution_clock}} to the language, stated in 2016 on the [https://lists.isocpp.org/mailman/listinfo.cgi/std-discussion ISO C++ Standard - Discussion mailing list] that he was in favor of deprecating it. His rationale was that, because the standard allows for it to be an alias for {{lc|std::chrono::steady_clock}} or {{lc|std::chrono::system_clock}}, its use adds uncertainty to a program without benefit. However, other participants in the thread spoke out its favor, for instance on the basis that, because neither {{lc|std::chrono::steady_clock}} nor {{lc|std::chrono::system_clock}} come with any particular resolution guarantees, {{tt|high_resolution_clock}} serves a useful role by giving the vendor an opportunity to supply the platform's highest-resolution clock, when neither its {{lc|std::chrono::steady_clock}} nor its {{lc|std::chrono::system_clock}} would be that.

It is often just an alias for {{lc|std::chrono::steady_clock}} or {{lc|std::chrono::system_clock}}, but which one it is depends on the library or configuration. When it is a {{tt|system_clock}}, it is not monotonic (e.g., the time can go backwards). For example, as of 2023, libstdc++ has it aliased to {{tt|system_clock}} "until higher-than-nanosecond definitions become feasible"&lt;ref&gt;[https://github.com/gcc-mirror/gcc/blob/63663e4e69527b308687c63bacb0cc038b386593/libstdc%2B%2B-v3/include/bits/chrono.h#L1285 libstdc++ {{tt|&lt;chrono.h&gt;}}]&lt;/ref&gt;, MSVC has it as {{tt|steady_clock}}&lt;ref&gt;[https://learn.microsoft.com/en-us/cpp/standard-library/high-resolution-clock-struct?view=msvc-170 MSVC {{tt|high_resolution_clock}}]&lt;/ref&gt;, and libc++ uses {{tt|steady_clock}} when the C++ standard library implementation supports a monotonic clock and {{tt|system_clock}} otherwise&lt;ref&gt;[https://github.com/llvm/llvm-project/blob/aa97f6b4947e599e17e900aebd511d8d497c3be9/libcxx/include/__chrono/high_resolution_clock.h#L26 libc++ {{tt|&lt;high_resolution_clock.h&gt;}}]&lt;/ref&gt;.

===See also===
{{dsc begin}}
{{dsc class|cpp/chrono/system_clock|wall clock time from the system-wide realtime clock|notes={{mark c++11}}}}
{{dsc class|cpp/chrono/steady_clock|monotonic clock that will never be adjusted|notes={{mark c++11}}}}
{{dsc end}}

===External links===
{{eli|&lt;references/&gt;}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
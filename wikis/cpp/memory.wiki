{{title|Memory management library}}
{{cpp/memory/navbar}}

{{anchor|Smart pointers}}
===Smart pointers {{mark since c++11}}===
Smart pointers enable automatic, exception-safe, object lifetime management.

{{dsc begin}}
{{dsc header|memory}}
{{dsc h2|Pointer categories}}
{{dsc inc|cpp/memory/dsc unique_ptr}}
{{dsc inc|cpp/memory/dsc shared_ptr}}
{{dsc inc|cpp/memory/dsc weak_ptr}}
{{dsc inc|cpp/memory/dsc auto_ptr}}
{{dsc h2|Helper classes}}
{{dsc inc|cpp/memory/dsc owner_less}}
{{dsc inc|cpp/memory/dsc owner_hash}}
{{dsc inc|cpp/memory/dsc owner_equal}}
{{dsc inc|cpp/memory/dsc enable_shared_from_this}}
{{dsc inc|cpp/memory/dsc bad_weak_ptr}}
{{dsc inc|cpp/memory/dsc default_delete}}
{{anchor|Smart pointer adaptors}}
{{dsc h2|Smart pointer adaptors {{mark since c++23}}}}
{{dsc inc|cpp/memory/dsc out_ptr_t}}
{{dsc inc|cpp/memory/out_ptr_t/dsc out_ptr}}
{{dsc inc|cpp/memory/dsc inout_ptr_t}}
{{dsc inc|cpp/memory/inout_ptr_t/dsc inout_ptr}}
{{dsc end}}

===Allocators===
Allocators are class templates encapsulating memory allocation strategy. This allows generic containers to decouple memory management from the data itself.

{{dsc begin}}
{{dsc header|memory}}
{{dsc inc|cpp/memory/dsc allocator}}
{{dsc inc|cpp/memory/dsc allocator_traits}}
{{dsc inc|cpp/memory/dsc allocation_result}}
{{dsc inc|cpp/memory/dsc allocator_arg}}
{{dsc inc|cpp/memory/dsc uses_allocator}}
{{dsc inc|cpp/memory/dsc uses_allocator_construction_args}}
{{dsc inc|cpp/memory/dsc make_obj_using_allocator}}
{{dsc inc|cpp/memory/dsc uninitialized_construct_using_allocator}}
{{dsc header|scoped_allocator}}
{{dsc inc|cpp/memory/dsc scoped_allocator_adaptor}}
{{dsc header|memory_resource}}
{{dsc namespace|std::pmr}}
{{dsc inc|cpp/memory/dsc polymorphic_allocator}}
{{dsc end}}

{{anchor|Memory_resources}}
===Memory resources {{mark since c++17}}===
Memory resources implement memory allocation strategies that can be used by {{lc|std::pmr::polymorphic_allocator}}.

{{dsc begin}}
{{dsc header|memory_resource}}
{{dsc namespace|std::pmr}}
{{dsc inc|cpp/memory/dsc memory_resource}}
{{dsc inc|cpp/memory/dsc new_delete_resource}}
{{dsc inc|cpp/memory/dsc null_memory_resource}}
{{dsc inc|cpp/memory/dsc get_default_resource}}
{{dsc inc|cpp/memory/dsc set_default_resource}}
{{dsc inc|cpp/memory/dsc pool_options}}
{{dsc inc|cpp/memory/dsc synchronized_pool_resource}}
{{dsc inc|cpp/memory/dsc unsynchronized_pool_resource}}
{{dsc inc|cpp/memory/dsc monotonic_buffer_resource}}
{{dsc end}}

{{anchor|Uninitialized storage}}
===Uninitialized storage {{mark until c++17}}===
Several utilities are provided to create and access raw storage.
{{dsc begin}}
{{dsc header|memory}}
{{dsc inc|cpp/memory/dsc raw_storage_iterator}}
{{dsc inc|cpp/memory/dsc get_temporary_buffer}}
{{dsc inc|cpp/memory/dsc return_temporary_buffer}}
{{dsc end}}

===Uninitialized memory algorithms===
{{dsc begin}}
{{dsc header|memory}}
{{dsc inc|cpp/memory/dsc uninitialized_copy}}
{{dsc inc|cpp/memory/dsc uninitialized_copy_n}}
{{dsc inc|cpp/memory/dsc uninitialized_fill}}
{{dsc inc|cpp/memory/dsc uninitialized_fill_n}}
{{dsc inc|cpp/memory/dsc uninitialized_move}}
{{dsc inc|cpp/memory/dsc uninitialized_move_n}}
{{dsc inc|cpp/memory/dsc uninitialized_default_construct}}
{{dsc inc|cpp/memory/dsc uninitialized_default_construct_n}}
{{dsc inc|cpp/memory/dsc uninitialized_value_construct}}
{{dsc inc|cpp/memory/dsc uninitialized_value_construct_n}}
{{dsc inc|cpp/memory/dsc destroy_at}}
{{dsc inc|cpp/memory/dsc destroy}}
{{dsc inc|cpp/memory/dsc destroy_n}}
{{dsc inc|cpp/memory/dsc construct_at}}
{{dsc end}}

{{anchor|Constrained uninitialized memory algorithms}}
===Constrained uninitialized memory algorithms {{mark since c++20}}===
C++20 provides [[cpp/language/constraints|constrained]] uninitialized memory algorithms that accept range arguments or iterator-sentinel pairs.

{{dsc begin}}
{{dsc header|memory}}
{{dsc namespace|std::ranges}}
{{dsc expos concept|cpp/memory/ranges/nothrow concepts|title=no-throw-input-iterator&lt;br&gt;no-throw-forward-iterator&lt;br&gt;no-throw-sentinel-for&lt;br&gt;no-throw-input-range&lt;br&gt;no-throw-forward-range|notes={{mark c++20}}|specifies some operations on iterators, sentinels and ranges are non-throwing}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_copy}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_copy_n}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_fill}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_fill_n}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_move}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_move_n}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_default_construct}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_default_construct_n}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_value_construct}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_value_construct_n}}
{{dsc inc|cpp/memory/ranges/dsc destroy_at}}
{{dsc inc|cpp/memory/ranges/dsc destroy}}
{{dsc inc|cpp/memory/ranges/dsc destroy_n}}
{{dsc inc|cpp/memory/ranges/dsc construct_at}}
{{dsc end}}

{{anchor|Garbage collector support}}
===Garbage collector support {{mark until c++23}}===
{{dsc begin}}
{{dsc header|memory}}
{{dsc inc|cpp/memory/gc/dsc declare_reachable}}
{{dsc inc|cpp/memory/gc/dsc undeclare_reachable}}
{{dsc inc|cpp/memory/gc/dsc declare_no_pointers}}
{{dsc inc|cpp/memory/gc/dsc undeclare_no_pointers}}
{{dsc inc|cpp/memory/gc/dsc pointer_safety}}
{{dsc inc|cpp/memory/gc/dsc get_pointer_safety}}
{{dsc end}}

{{anchor|Explicit lifetime management}}
===Explicit lifetime management {{mark since c++23}}===
{{dsc begin}}
{{dsc header|memory}}
{{dsc inc|cpp/memory/dsc start_lifetime_as}}
{{dsc end}}

===Miscellaneous===
{{dsc begin}}
{{dsc header|memory}}
{{dsc inc|cpp/memory/dsc pointer_traits}}
{{dsc inc|cpp/memory/dsc to_address}}
{{dsc inc|cpp/memory/dsc addressof}}
{{dsc inc|cpp/memory/dsc align}}
{{dsc inc|cpp/memory/dsc assume_aligned}}
{{dsc inc|cpp/memory/dsc is_sufficiently_aligned}}
{{dsc end}}

===[[cpp/memory/new|Low level memory management]]===
Includes e.g. {{lc|operator new}}, {{lc|operator delete}}, {{lc|std::set_new_handler}}.
{{dsc begin}}
{{dsc header|new}}
{{dsc end}}

===[[cpp/memory/c|C-style memory management]]===
Includes e.g. {{lc|std::malloc}}, {{lc|std::free}}.
{{dsc begin}}
{{dsc header|cstdlib}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
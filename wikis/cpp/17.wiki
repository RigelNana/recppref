{{title|C++17}}
{{cpp/version/navbar}}

C++17 is a major version that follows the minor version C++14 and introduces new language and library features. The standard was published in December 2017.

The following features were merged into C++17:
* From the [[cpp/experimental/fs|File System TS]]: the [[cpp/filesystem|filesystem library]].
* From the [[cpp/experimental/lib_extensions|Library fundamentals v1 TS]]: features, including {{lc|std::any}}, {{lc|std::optional}}, {{lc|std::string_view}}, {{lc|std::apply}}, [[cpp/memory#Allocators|polymorphic allocators]], {{lsd|cpp/utility/functional#Searchers}}.
* From [[cpp/experimental/lib_extensions_2|Library fundamentals v2 TS]]: {{lc|std::void_t}}, {{lc|std::conjunction}}, {{lc|std::disjunction}}, {{lc|std::negation}}, {{lc|std::not_fn}}, {{lc|std::gcd}}, {{lc|std::lcm}}.
* From [[cpp/experimental/parallelism|Parallelism v1 TS]]: features, including [[cpp/algorithm/execution_policy_tag_t|execution policies]], {{lc|std::reduce}}, {{lc|std::inclusive_scan}}, {{lc|std::exclusive_scan}}, but removing {{tt|exception_list}}.
* From [[cpp/experimental/special_functions|Mathematical special functions IS]]: [[cpp/numeric/special_functions|mathematical special functions]].
* From C11: {{lc|std::aligned_alloc}}, {{lc|std::timespec_get}}.

{{todo}}

==Obsolete features==

=====Removed features=====
* {{lc|std::auto_ptr}},
* [[cpp/utility/functional#Old binders and adaptors|deprecated function objects]],
* {{lc|std::random_shuffle}},
* {{lc|std::unexpected}},
* the [[cpp/io/ios_base#Deprecated member types|obsolete {{tt|iostream}}s aliases]],
* [[cpp/language/operator alternative#Trigraphs_.28removed_in_C.2B.2B17.29|trigraphs]],
* the {{ltt|cpp/keyword/register}} keyword,
* [[cpp/language/operator_incdec|{{tt|bool}} increment]],
* [[cpp/language/except_spec|dynamic exception specification]]

=====Deprecated features=====
* {{lc|std::iterator}}, 
* {{lc|std::raw_storage_iterator}}, 
* {{lc|std::get_temporary_buffer}}, 
* {{lc|std::is_literal_type}}, 
* {{lc|std::result_of}}, 
* all of {{header|codecvt}}

==New language features==

* [[cpp/language/character literal|{{tt|u8}} character literal]]
* made {{ltt|cpp/language/noexcept_spec|noexcept}} part of type system
* new [[cpp/language/eval order|order of evaluation]] rules
* [[cpp/language/lambda#Lambda capture|lambda capture of {{c|*this}}]]

* '''{{ltt|cpp/keyword/constexpr|constexpr}}'''
*: compile-time {{ltt|cpp/language/if|if constexpr}}
*: [[cpp/language/lambda|constexpr lambda]]

* '''Variables'''
*: [[cpp/language/inline|inline variables]]
*: [[cpp/language/structured binding|structured bindings]]
*: initializers for {{ltt|cpp/language/if}} and {{ltt|cpp/language/switch}}
*: guaranteed [[cpp/language/copy elision|copy elision]]
*: {{lsd|cpp/language/implicit conversion#Temporary materialization}}

* '''Templates'''
*: [[cpp/language/fold|fold-expressions]] {{c|( ... )}}
*: [[cpp/language/class template argument deduction|class template argument deduction]] {{c|tuple t(4, 3, 2.5)}}
*: non-type [[cpp/language/template parameters|template parameters]] declared with {{tt|auto}}

* '''[[cpp/language/namespace|Namespaces]]'''
*: simplified nested namespaces
*: {{tt|using}}-declaration declaring multiple names
*: [[cpp/language/attributes|attribute namespaces]] don't have to repeat
* '''new [[cpp/language/attributes|attributes]]''':
** {{attr|fallthrough}}
** {{attr|maybe_unused}}
** {{attr|nodiscard}}
* {{ltt|cpp/preprocessor/include|__has_include}}

==New headers==

* {{header|any}}
* {{header|charconv}}
* {{header|execution}}
* {{header|filesystem}}
* {{header|memory_resource}}
* {{header|optional}}
* {{header|string_view}}
* {{header|variant}}

==New library features==

===Utility types===
* {{lc|std::tuple}}:
** {{lc|std::apply}}
** {{lc|std::make_from_tuple}}
** [[cpp/utility/tuple/deduction_guides|deduction guides]]
* {{lc|std::any}}
* {{lc|std::optional}}
* {{lc|std::variant}}
* {{lsd|cpp/utility/functional#Searchers}}
* {{lc|std::as_const}}
* {{lc|std::not_fn}}

===Memory management===
* uninitialized memory algorithms
** {{lc|std::destroy_at}}
** {{lc|std::destroy}}
** {{lc|std::destroy_n}}
** {{lc|std::uninitialized_move}}
** {{lc|std::uninitialized_value_construct}}
* {{ltt|cpp/memory/enable_shared_from_this/weak_from_this}}
* {{lc|std::pmr::memory_resource}} and {{lc|std::polymorphic_allocator}}
* {{lc|std::aligned_alloc}}
* transparent {{lc|std::owner_less}}
* array support for {{lc|std::shared_ptr}}
* [[cpp/memory/new/operator_new|allocation functions]] with explicit alignment

===Compile-time programming===
* {{ltt|cpp/types/byte|std::byte}}
* {{lc|std::conjunction}}/{{lc|std::disjunction}}/{{lc|std::negation}}
* [[cpp/types|type trait]] variable templates ({{tt|''xxx''_+v}})
* {{lc|std::is_swappable}}
* {{ltt std|cpp/types/is_invocable}}
* {{ltt std|cpp/types/is_aggregate}}
* {{lc|std::has_unique_object_representations}}

===Algorithms===
* {{lc|std::clamp}}
* parallel algorithms and [[cpp/algorithm/execution_policy_tag_t|execution policies]]
* {{lc|std::inclusive_scan}}
* {{lc|std::exclusive_scan}}
* {{lc|std::gcd}}
* {{lc|std::lcm}}
* {{lc|std::reduce}}

===Iterators and containers===
* map/set {{ltt|cpp/container/map/extract}} and map/set {{ltt|cpp/container/map/merge}}
* map/unordered_map {{ltt|cpp/container/map/try_emplace|try_emplace}} and {{ltt|cpp/container/map/insert_or_assign|insert_or_assign}}
* contiguous iterators ({{named req|ContiguousIterator}})
* non-member {{lc|std::size}}/{{lc|std::empty}}/{{lc|std::data}}

===Numerics===
* [[cpp/numeric/special_functions|mathematical special functions]]
* 3D {{lc|std::hypot}}

===Others===
* [[cpp/thread/hardware_destructive_interference_size|cache line interface]]
* {{lc|std::launder}}
* {{lc|std::uncaught_exceptions}}
* {{ltt|cpp/utility/to_chars|std::to_chars}}/{{ltt|cpp/utility/from_chars|std::from_chars}}
* {{ltt|cpp/atomic/atomic/is_always_lock_free|std::atomic&lt;T&gt;::is_always_lock_free}}
* {{ltt|cpp/thread/scoped_lock|std::scoped_lock}}
* {{lc|std::timespec_get}}
* rounding functions for {{lc|std::chrono::duration}} and {{lc|std::chrono::time_point}}

==Defect reports==

{{cpp/language/history/DR17}}

==Compiler support==
{{cpp/compiler support/17}}
{{cpp/compiler support/note}}

===External links===
{{elink begin}}
{{elink|{{enwiki|C++17}} - Wikipedia}}
{{elink|[https://github.com/makelinux/examples/blob/HEAD/cpp/17.cpp Working C++17 examples]}}
{{elink end}}

{{langlinks|de|es|ja|ru|zh}}
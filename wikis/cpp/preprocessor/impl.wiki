{{title|Implementation defined behavior control}}
{{cpp/preprocessor/navbar}}
Implementation defined behavior is controlled by {{c/core|#pragma}} directive.

===Syntax===
{{sdsc begin}}
{{sdsc|num=1|{{ttb|#pragma}} {{spar|pragma-params}}}}
{{sdsc|num=2|notes={{mark since c++11}}|{{ttb|_Pragma(}} {{spar|string-literal}} {{ttb|)}}}}
{{sdsc end}}
@1@ Behaves in implementation-defined manner.
@2@ Removes the {{tt|L}} prefix (if any), the outer quotes, and leading/trailing whitespace from {{spar|string-literal}}, replaces each {{c|\"}} with {{c|"}} and each {{c|\\}} with {{c|\}}, then tokenizes the result (as in [[cpp/language/translation phases#Phase 3|translation phase 3]]), and then uses the result as if the input to {{c/core|#pragma}} in {{v|1}}.

===Explanation===
Pragma directive controls implementation-specific behavior of the compiler, such as disabling compiler warnings or changing alignment requirements. Any pragma that is not recognized is ignored.

===Non-standard pragmas===
The ISO C++ language standard does not require the compilers to support any pragmas. However, several non-standard pragmas are supported by multiple implementations:

===={{c/core|#pragma STDC}}====
ISO C language standard requires that C compilers support the following three pragmas, and some C++ compiler vendors support them, to varying degrees, in their C++ frontends:

{{sdsc begin}}
{{sdsc|num=1|{{ttb|#pragma STDC FENV_ACCESS }}{{spar|arg}}}}
{{sdsc|num=2|{{ttb|#pragma STDC FP_CONTRACT }}{{spar|arg}}}}
{{sdsc|num=3|{{ttb|#pragma STDC CX_LIMITED_RANGE }}{{spar|arg}}}}
{{sdsc end}}

where {{spar|arg}} is either {{ttb|ON}}, {{ttb|OFF}}, or {{ttb|DEFAULT}}. 

@1@ If set to {{ttb|ON}}, informs the compiler that the program will access or modify [[cpp/numeric/fenv|floating-point environment]], which means that optimizations that could subvert flag tests and mode changes (e.g., global common subexpression elimination, code motion, and constant folding) are prohibited. The default value is implementation-defined, usually {{ttb|OFF}}.
@2@ Allows ''contracting'' of floating-point expressions, that is optimizations that omit rounding errors and floating-point exceptions that would be observed if the expression was evaluated exactly as written. For example, allows the implementation of {{c|(x * y) + z}} with a single fused multiply-add CPU instruction. The default value is implementation-defined, usually {{ttb|ON}}.
@3@ Informs the compiler that multiplication, division, and absolute value of complex numbers may use simplified mathematical formulas {{math|1= (x+iy)Ã—(u+iv) = (xu-yv)+i(yu+xv)}}, {{math|1= (x+iy)/(u+iv) = [(xu+yv)+i(yu-xv)]/(u{{su|p=2}}+v{{su|p=2}})}}, and {{math|1= {{!}}x+iy{{!}} = {{mrad|x{{su|p=2}}+y{{su|p=2}}}}}}, despite the possibility of intermediate overflow. In other words, the programmer guarantees that the range of the values that will be passed to those function is limited. The default value is {{ttb|OFF}}.

The behavior of the program is undefined if any of the three pragmas above appear in any context other than outside all external declarations or preceding all explicit declarations and statements inside a compound statement.

Note: compilers that do not support these pragmas may provide equivalent compile-time options, such as gcc's {{tt|-fcx-limited-range}} and {{tt|-ffp-contract}}.

===={{c/core|#pragma once}}====
{{cpp/preprocessor/pragma once}}

===={{c/core|#pragma pack}}====
{{cpp/preprocessor/pragma pack}}

===References===
{{ref std c++23}}
{{ref std|section=15.9|title=Pragma directive|id=cpp.pragma}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=15.9|title=Pragma directive|id=cpp.pragma}}
{{ref std end}}
{{ref std c++17}}
{{ref std|section=19.6|title=Pragma directive|id=cpp.pragma}}
{{ref std end}}
{{ref std c++14}}
{{ref std|section=16.6|title=Pragma directive|id=cpp.pragma}}
{{ref std end}}
{{ref std c++11}}
{{ref std|section=16.6|title=Pragma directive|id=cpp.pragma}}
{{ref std end}}
{{ref std c++98}}
{{ref std|section=16.6|title=Pragma directive|id=cpp.pragma}}
{{ref std end}}

===See also===
{{dsc begin}}
{{dsc see c|c/preprocessor/impl|Implementation defined behavior control|nomono=true}}
{{dsc end}}

===External links===
{{elink begin}}
{{elink|[https://docs.microsoft.com/en-us/cpp/preprocessor/pragma-directives-and-the-pragma-keyword C++ pragmas in Visual Studio]}}
{{elink|[https://gcc.gnu.org/onlinedocs/gcc/Pragmas.html Pragmas] accepted by GCC}}
{{elink|[https://www.ibm.com/support/knowledgecenter/en/SSGH3R_16.1.0/com.ibm.xlcpp161.aix.doc/compiler_ref/pragma_descriptions.html Individual pragma descriptions] and [https://www.ibm.com/support/knowledgecenter/en/SSGH3R_16.1.0/com.ibm.xlcpp161.aix.doc/language_ref/std_pragmas.html Standard pragmas] in IBM AIX XL C 16.1}}
{{elink|[https://download.oracle.com/docs/cd/E19422-01/819-3690/Pragmas_App.html#73499 Appendix B. Pragmas] in Sun Studio 11 C++ User's Guide}}
{{elink|[https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/pragmas.html Intel C++ compiler pragmas]}}
{{elink|1=[https://h20565.www2.hpe.com/hpsc/doc/public/display?sp4ts.oid=4268164&amp;docLocale=en_US&amp;docId=emr_na-c02653979 Release nodes (includes pragmas)] for HP aCC A.06.25}}
{{elink end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
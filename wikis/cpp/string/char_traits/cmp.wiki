{{cpp/string/char_traits/title|eq/lt}}
{{cpp/string/char_traits/navbar}}
{{dcl begin}}
{{dcl|num=1|notes={{mark constexpr since c++11}}&lt;br&gt;{{mark noexcept since c++11}}|
static bool eq( char_type a, char_type b );
}}
{{dcl|num=2|notes={{mark constexpr since c++11}}&lt;br&gt;{{mark noexcept since c++11}}|
static bool lt( char_type a, char_type b );
}}
{{dcl end}}

Compares two characters.

@1@ Compares {{c|a}} and {{c|b}} for equality, behaves identically to
* {{c|1=static_cast&lt;unsigned char&gt;(a) == static_cast&lt;unsigned char&gt;(b)}}, if {{tt|char_type}} is {{c/core|char}},
* {{c|1=a == b}} otherwise.

@2@ Compares {{c|a}} and {{c|b}} in such a way that they are totally ordered, behaves identically to
* {{c|static_cast&lt;unsigned char&gt;(a) &lt; static_cast&lt;unsigned char&gt;(b)}}, if {{tt|char_type}} is {{c/core|char}},
* {{c|a &lt; b}} otherwise.

See {{named req|CharTraits}} for the general requirements on character traits for {{tt|X::eq}} and {{tt|X::lt}}.

===Parameters===
{{par begin}}
{{par|a, b|character values to compare}}
{{par end}}

===Return value===
@1@ {{c|true}} if {{c|a}} and {{c|b}} are equal, {{c|false}} otherwise.
@2@ {{c|true}} if {{c|a}} is less than {{c|b}}, {{c|false}} otherwise.

===Complexity===
Constant.

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=467|std=C++98|before=for {{c/core|std::char_traits&lt;char&gt;}}, the semantics of {{tt|eq()}} and {{tt|lt()}}&lt;br&gt;are the same as the built-in {{c|1===}} and {{c|&lt;}} on {{c/core|char}} respectively&lt;ref&gt;Most implementations call {{lc|std::memcmp()}} for efficiency, which interprets the data as arrays of {{c/core|unsigned char}}. If {{c/core|char}} [[cpp/language/types#Character types|is signed]] on such implementations, {{c/core|std::char_traits&lt;char&gt;}} fails to satisfy the requirements of {{named req|CharTraits}}.&lt;/ref&gt;|after=changed to built-in {{c|1===}} and&lt;br&gt;{{c|&lt;}} on {{c/core|unsigned char}}}}
{{dr list end}}
&lt;references/&gt;

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
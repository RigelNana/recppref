{{cpp/title|wmemcpy}}
{{cpp/string/wide/navbar}}
{{ddcl|header=cwchar|
wchar_t* wmemcpy( wchar_t* dest, const wchar_t* src, std::size_t count );
}}

Copies exactly {{c|count}} successive wide characters from the wide character array pointed to by {{c|src}} to the wide character array pointed to by {{c|dest}}. If the objects overlap, the behavior is undefined. If {{c|count}} is zero, the function does nothing.

===Parameters===
{{par begin}}
{{par|dest|pointer to the wide character array to copy to}}
{{par|src|pointer to the wide character array to copy from}}
{{par|count|number of wide characters to copy}}
{{par end}}

===Return value===
{{c|dest}}

===Notes===
This function's analog for byte strings is {{lc|std::strncpy}}, not {{lc|std::strcpy}}.

This function is not locale-sensitive and pays no attention to the values of the {{c|wchar_t}} objects it copies: nulls as well as invalid characters are copied too.

===Example===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cwchar&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;locale&gt;

int main(void)
{
    const wchar_t from1[] = L"नमस्ते";
    const wchar_t from2[] = L"Բարև";
    const std::size_t sz1 = std::size(from1);
    const std::size_t sz2 = std::size(from2);
    wchar_t to[sz1 + sz2];

    std::wmemcpy(to, from1, sz1); // copy from1, along with its null terminator
    std::wmemcpy(to + sz1, from2, sz2); // append from2, along with its null terminator

    std::setlocale(LC_ALL, "en_US.utf8");
    std::wcout.imbue(std::locale("en_US.utf8"));
    std::wcout &lt;&lt; L"Wide array contains: ";
    for (std::size_t n = 0; n &lt; std::size(to); ++n)
        if (to[n])
            std::wcout &lt;&lt; to[n];
        else
            std::wcout &lt;&lt; L"\\0";
    std::wcout &lt;&lt; L'\n';
}
|p=true
|output=
Wide array contains: नमस्ते\0Բարև\0
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc strncpy}}
{{dsc inc|cpp/string/wide/dsc wmemmove}}
{{dsc see c|c/string/wide/wmemcpy}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
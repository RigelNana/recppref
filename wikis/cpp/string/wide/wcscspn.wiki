{{cpp/title| wcscspn}}
{{cpp/string/wide/navbar}}
{{ddcl|header=cwchar|
std::size_t wcscspn( const wchar_t* dest, const wchar_t* src );
}}

Returns the length of the maximum initial segment of the wide string pointed to by {{c|dest}}, that consists of only the characters ''not'' found in wide string pointed to by {{c|src}}.

===Parameters===
{{par begin}}
{{par|dest|pointer to the null-terminated wide string to be analyzed}}
{{par|src|pointer to the null-terminated wide string that contains the characters to search for}}
{{par end}}

===Return value===
The length of the maximum initial segment that contains only characters not found in the character string pointed to by {{c|src}}.

===Example===
{{example
|The output below was obtained using clang (libc++).
|code=
#include &lt;cwchar&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;

int main()
{
    wchar_t dest[] = L"白猫 黑狗 甲虫";
    //                      └───┐
    const wchar_t* src = L"甲虫,黑狗";

    const std::size_t len = std::wcscspn(dest, src);
    dest[len] = L'\0'; // terminates the segment to print it out

    std::wcout.imbue(std::locale("en_US.utf8"));
    std::wcout &lt;&lt; L"The length of maximum initial segment is " &lt;&lt; len &lt;&lt; L".\n";
    std::wcout &lt;&lt; L"The segment is \"" &lt;&lt; dest &lt;&lt; L"\".\n";
}
|p=true&lt;!--gcc may not print hieroglyphs, while clang does--&gt;
|output=
The length of maximum initial segment is 3.
The segment is "白猫 ".
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/wide/dsc wcsspn}}
{{dsc inc|cpp/string/wide/dsc wcspbrk}}
{{dsc see c|c/string/wide/wcscspn}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|wmemmove}}
{{cpp/string/wide/navbar}}
{{ddcl|header=cwchar|
wchar_t* wmemmove( wchar_t* dest, const wchar_t* src, std::size_t count );
}}

Copies exactly {{c|count}} successive wide characters from the wide character array pointed to by {{c|src}} to the wide character array pointed to by {{c|dest}}.

If {{c|count}} is zero, the function does nothing.

The arrays may overlap: copying takes place as if the wide characters were copied to a temporary wide character array and then copied from the temporary array to {{c|dest}}.

===Parameters===
{{par begin}}
{{par|dest|pointer to the wide character array to copy to}}
{{par|src|pointer to the wide character array to copy from}}
{{par|count|number of wide characters to copy}}
{{par end}}

===Return value===
Returns a copy of {{c|dest}}.

===Notes===
This function is not locale-sensitive and pays no attention to the values of the {{c|wchar_t}} objects it copies: nulls as well as invalid characters are copied too.

===Example===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cwchar&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;

int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    std::wcout.imbue(std::locale("en_US.utf8"));

    wchar_t str[] = L"αβγδεζηθικλμνξοπρστυφχψω";
    std::wcout &lt;&lt; str &lt;&lt; '\n';
    std::wmemmove(str + 4, str + 3, 3); // copy from [δεζ] to [εζη]
    std::wcout &lt;&lt; str &lt;&lt; '\n';
}
|p=true
|output=
αβγδεζηθικλμνξοπρστυφχψω
αβγδδεζθικλμνξοπρστυφχψω
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/wide/dsc wmemcpy}}
{{dsc inc|cpp/string/byte/dsc memmove}}
{{dsc inc|cpp/algorithm/dsc copy}}
{{dsc inc|cpp/algorithm/dsc copy_backward}}
{{dsc see c|c/string/wide/wmemmove}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
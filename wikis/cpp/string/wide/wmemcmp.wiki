{{cpp/title|wmemcmp}}
{{cpp/string/wide/navbar}}
{{ddcl|header=cwchar|
int wmemcmp( const wchar_t* lhs, const wchar_t* rhs, std::size_t count );
}}

Compares the first {{c|count}} wide characters of the wide character arrays pointed to by {{c|lhs}} and {{c|rhs}}. The comparison is done lexicographically.

The sign of the result is the sign of the difference between the values of the first pair of wide characters that differ in the arrays being compared.

If {{c|count}} is zero, the function does nothing.

===Parameters===
{{par begin}}
{{par|lhs, rhs|pointers to the wide character arrays to compare}}
{{par|count|number of wide characters to examine}}
{{par end}}

===Return value===
Negative value if the value of the first differing wide character in {{c|lhs}} is less than the value of the corresponding wide character in {{c|rhs}}: {{c|lhs}} precedes {{c|rhs}} in lexicographical order.

{{c|0}} if all {{c|count}} wide characters of {{c|lhs}} and {{c|rhs}} are equal.

Positive value if the value of the first differing wide character in {{c|lhs}} is greater than the value of the corresponding wide character in {{c|rhs}}: {{c|rhs}} precedes {{c|lhs}} in lexicographical order.

===Notes===
This function is not locale-sensitive and pays no attention to the values of the {{c|wchar_t}} objects it examines: nulls as well as invalid wide characters are compared too.

===Example===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cwchar&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;string&gt;

void demo(const wchar_t* lhs, const wchar_t* rhs, std::size_t sz)
{
    std::wcout &lt;&lt; std::wstring(lhs, sz);
    int rc = std::wmemcmp(lhs, rhs, sz);
    if (rc == 0)
        std::wcout &lt;&lt; " compares equal to ";
    else if (rc &lt; 0)
        std::wcout &lt;&lt; " precedes ";
    else if (rc &gt; 0)
        std::wcout &lt;&lt; " follows ";
    std::wcout &lt;&lt; std::wstring(rhs, sz) &lt;&lt; " in lexicographical order\n";
}

int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    std::wcout.imbue(std::locale("en_US.utf8"));

    wchar_t a1[] = {L'α',L'β',L'γ'};
    constexpr std::size_t sz = sizeof a1 / sizeof *a1;
    wchar_t a2[sz] = {L'α',L'β',L'δ'};

    demo(a1, a2, sz);
    demo(a2, a1, sz);
    demo(a1, a1, sz);
}
|p=true
|output=
αβγ precedes αβδ in lexicographical order
αβδ follows αβγ in lexicographical order
αβγ compares equal to αβγ in lexicographical order
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/wide/dsc wcscmp}}
{{dsc inc|cpp/string/byte/dsc memcmp}}
{{dsc inc|cpp/string/wide/dsc wcsncmp}}
{{dsc see c|c/string/wide/wmemcmp}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
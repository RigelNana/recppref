{{cpp/title|iswgraph}}
{{cpp/string/wide/navbar}}
{{ddcl|header=cwctype|
int iswgraph( std::wint_t ch );
}}

Checks if the given wide character has a graphical representation, i.e. it is either a number ({{tt|0123456789}}), an uppercase letter ({{tt|ABCDEFGHIJKLMNOPQRSTUVWXYZ}}), a lowercase letter ({{tt|abcdefghijklmnopqrstuvwxyz}}), a punctuation character ({{tt|&lt;nowiki&gt;!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~&lt;/nowiki&gt;}}) or any graphical character specific to the current C locale.

{{cpp/string/wide/wint_t args}}

===Parameters===
{{par begin}}
{{par|ch|wide character}}
{{par end}}

===Return value===
Non-zero value if the wide character has a graphical representation character, zero otherwise.

===Notes===
[https://www.open-std.org/JTC1/SC35/WG5/docs/30112d10.pdf ISO 30112] specifies which Unicode characters are include in POSIX graph category.

===Example===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cwctype&gt;
#include &lt;iostream&gt;

int main()
{
    wchar_t c = L'\u2602'; // the Unicode character Umbrella ('â˜‚')

    std::cout &lt;&lt; std::hex &lt;&lt; std::showbase &lt;&lt; std::boolalpha
              &lt;&lt; "in the default locale, iswgraph("
              &lt;&lt; static_cast&lt;std::wint_t&gt;(c) &lt;&lt; ") = "
              &lt;&lt; static_cast&lt;bool&gt;(std::iswgraph(c)) &lt;&lt; '\n';

    std::setlocale(LC_ALL, "en_US.utf8");
    std::cout &lt;&lt; "in Unicode locale, iswgraph("
              &lt;&lt; static_cast&lt;std::wint_t&gt;(c) &lt;&lt; ") = "
              &lt;&lt; static_cast&lt;bool&gt;(std::iswgraph(c)) &lt;&lt; '\n';
}
|output=
in the default locale, iswgraph(0x2602) = false
in Unicode locale, iswgraph(0x2602) = true
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc isgraph}}
{{dsc inc|cpp/string/byte/dsc isgraph}}
{{dsc see c|c/string/wide/iswgraph}}
{{dsc end}}
{{cpp/string/character classes}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
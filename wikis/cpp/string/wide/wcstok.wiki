{{cpp/title|wcstok}}
{{cpp/string/wide/navbar}}
{{dcl begin}}
{{dcl header|cwchar}}
{{dcl|1=
wchar_t* wcstok( wchar_t* str, const wchar_t* delim, wchar_t ** ptr);
}}
{{dcl end}}

Finds the next token in a null-terminated wide string pointed to by {{c|str}}. The separator characters are identified by null-terminated wide string pointed to by {{c|delim}}.

@@ This function is designed to be called multiples times to obtain successive tokens from the same string.

:* If {{c|str !{{=}} nullptr}}, the call is treated as the first call to {{tt|std::wcstok}} for this particular wide string. The function searches for the first wide character which is ''not'' contained in {{c|delim}}.
::* If no such wide character was found, there are no tokens in {{c|str}} at all, and the function returns a null pointer. 
::* If such wide character was found, it is the ''beginning of the token''. The function then searches from that point on for the first wide character that ''is'' contained in {{c|delim}}. 
:::* If no such wide character was found, {{c|str}} has only one token, and future calls to {{tt|std::wcstok}} will return a null pointer.
:::* If such wide character was found, it is ''replaced'' by the null wide character {{c|L'\0'}} and the parser state (typically a pointer to the following wide character) is stored in the user-provided location {{c|*ptr}}.
::* The function then returns the pointer to the beginning of the token.
:* If {{c|str {{==}} nullptr}}, the call is treated as a subsequent calls to {{tt|std::wcstok}}: the function continues from where it left in previous invocation with the same {{c|*ptr}}. The behavior is the same as if the pointer to the wide character that follows the last detected token is passed as {{c|str}}.

===Parameters===
{{par begin}}
{{par|str|pointer to the null-terminated wide string to tokenize}}
{{par|delim|pointer to the null-terminated wide string identifying delimiters}}
{{par|ptr|pointer to an object of type {{c|wchar_t*}}, which is used by wcstok to store its internal state}}
{{par end}}

===Return value===
Pointer to the beginning of the next token or null pointer if there are no more tokens.

===Note===
This function is destructive: it writes the {{c|L'\0'}} characters in the elements of the string {{c|str}}. In particular, a wide string literal cannot be used as the first argument of {{tt|std::wcstok}}.

Unlike {{lc|std::strtok}}, this function does not update static storage: it stores the parser state in the user-provided location.

Unlike most other tokenizers, the delimiters in {{tt|std::wcstok}} can be different for each subsequent token, and can even depend on the contents of the previous tokens.

===Example===
{{example
|code=
#include &lt;cwchar&gt;
#include &lt;iostream&gt;

int main()
{
    wchar_t input[100] = L"A bird came down the walk";
    wchar_t* buffer;
    wchar_t* token = std::wcstok(input, L" ", &amp;buffer);
    while (token)
    {
        std::wcout &lt;&lt; token &lt;&lt; '\n';
        token = std::wcstok(nullptr, L" ", &amp;buffer);
    }
}
|output=
A
bird
came
down
the
walk
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc strtok}}
{{dsc see c|c/string/wide/wcstok}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
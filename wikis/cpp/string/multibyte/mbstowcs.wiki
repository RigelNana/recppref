{{cpp/title|mbstowcs}}
{{cpp/string/multibyte/navbar}}
{{ddcl|header=cstdlib|
std::size_t mbstowcs( wchar_t* dst, const char* src, std::size_t len );
}}

Converts a multibyte character string from the array whose first element is pointed to by {{c|src}} to its wide character representation. Converted characters are stored in the successive elements of the array pointed to by {{c|dst}}. No more than {{c|len}} wide characters are written to the destination array.

Each character is converted as if by a call to {{lc|std::mbtowc}}, except that the mbtowc conversion state is unaffected. The conversion stops if:
* The multibyte null character was converted and stored.
* An invalid (in the current C locale) multibyte character was encountered.
* The next wide character to be stored would exceed {{c|len}}.

===Notes===
In most implementations, this function updates a global static object of type {{lc|std::mbstate_t}} as it processes through the string, and cannot be called simultaneously by two threads, {{lc|std::mbsrtowcs}} should be used in such cases.

POSIX specifies a common extension: if {{c|dst}} is a null pointer, this function returns the number of wide characters that would be written to {{c|dst}}, if converted. Similar behavior is standard for {{lc|std::mbsrtowcs}}.

===Parameters===
{{par begin}}
{{par|dst|pointer to wide character array where the wide string will be stored}}
{{par|src|pointer to the first element of a null-terminated multibyte string to convert}}
{{par|len|number of wide characters available in the array pointed to by dst}}
{{par end}}

===Return value===
On success, returns the number of wide characters, excluding the terminating {{c|L'\0'}}, written to the destination array.

On conversion error (if invalid multibyte character was encountered), returns {{c|static_cast&lt;std::size_t&gt; (-1)}}.

===Example===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;

int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    std::wcout.imbue(std::locale("en_US.utf8"));
    const char* mbstr = "z\u00df\u6c34\U0001f34c"; // or u8"z√üÊ∞¥üçå"
                        // or "\x7a\xc3\x9f\xe6\xb0\xb4\xf0\x9f\x8d\x8c";
    wchar_t wstr[5];
    std::mbstowcs(wstr, mbstr, 5);
    std::wcout &lt;&lt; "wide string: " &lt;&lt; wstr &lt;&lt; '\n';
}
|output=
wide string: z√üÊ∞¥üçå
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/multibyte/dsc mbsrtowcs}}
{{dsc inc|cpp/string/multibyte/dsc wcstombs}}
{{dsc inc|cpp/locale/codecvt/dsc do_in}}
{{dsc see c|c/string/multibyte/mbstowcs}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
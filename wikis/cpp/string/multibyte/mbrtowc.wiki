{{cpp/title|mbrtowc}}
{{cpp/string/multibyte/navbar}}
{{ddcl|header=cwchar|
std::size_t mbrtowc( wchar_t* pwc,
                     const char* s,
                     std::size_t n,
                     std::mbstate_t* ps );
}}

Converts a narrow multibyte character to a wide character.

If {{c|s}} is not a null pointer, inspects at most {{c|n}} bytes of the multibyte character string, beginning with the byte pointed to by {{c|s}} to determine the number of bytes necessary to complete the next multibyte character (including any shift sequences). If the function determines that the next multibyte character in {{c|s}} is complete and valid, converts it to the corresponding wide character and stores it in {{c|*pwc}} (if {{c|pwc}} is not null).

If {{c|s}} is a null pointer, the values of {{c|n}} and {{c|pwc}} are ignored and call is equivalent to {{c|std::mbrtowc(nullptr, "", 1, ps)}}.

If the wide character produced is the null character, the conversion state stored in {{c|*ps}} is the initial shift state.

===Parameters===
{{par begin}}
{{par|pwc|pointer to the location where the resulting wide character will be written}}
{{par|s|pointer to the multibyte character string used as input}}
{{par|n|limit on the number of bytes in s that can be examined}}
{{par|ps|pointer to the conversion state used when interpreting the multibyte string}}
{{par end}}

===Return value===
The first of the following that applies:
* {{c|0}} if the character converted from {{c|s}} (and stored in {{c|pwc}} if non-null) was the null character.
* the number of bytes {{c|[1...n]}} of the multibyte character successfully converted from {{c|s}}.
* {{c|static_cast&lt;std::size_t&gt;(-2)}} if the next {{c|n}} bytes constitute an incomplete, but so far valid, multibyte character. Nothing is written to {{c|*pwc}}.
* {{c|static_cast&lt;std::size_t&gt;(-1)}} if encoding error occurs. Nothing is written to {{c|*pwc}}, the value {{lc|EILSEQ}} is stored in {{lc|errno}} and the value of {{c|*ps}} is left unspecified.

===Example===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cstring&gt;
#include &lt;cwchar&gt;
#include &lt;iostream&gt;
 
void print_mb(const char* ptr)
{
    std::mbstate_t state = std::mbstate_t(); // initial state
    const char* end = ptr + std::strlen(ptr);
    int len;
    wchar_t wc;
    while ((len = std::mbrtowc(&amp;wc, ptr, end-ptr, &amp;state)) &gt; 0)
    {
        std::wcout &lt;&lt; "Next " &lt;&lt; len &lt;&lt; " bytes are the character " &lt;&lt; wc &lt;&lt; '\n';
        ptr += len;
    }
}

int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    // UTF-8 narrow multibyte encoding
    const char* str = "z\u00df\u6c34\U0001d10b"; // or u8"z√üÊ∞¥ùÑã"
                      // or "\x7a\xc3\x9f\xe6\xb0\xb4\xf0\x9d\x84\x8b";
    print_mb(str);
}
|output=
Next 1 bytes are the character z
Next 2 bytes are the character √ü
Next 3 bytes are the character Ê∞¥
Next 4 bytes are the character ùÑã
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/multibyte/dsc mbtowc}}
{{dsc inc|cpp/string/multibyte/dsc wcrtomb}}
{{dsc inc|cpp/locale/codecvt/dsc do_in}}
{{dsc see c|c/string/multibyte/mbrtowc}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
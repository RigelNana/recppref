{{cpp/title|wcstombs}}
{{cpp/string/multibyte/navbar}}
{{ddcl|header=cstdlib|
std::size_t wcstombs( char* dst, const wchar_t* src, std::size_t len );
}}

Converts a sequence of wide characters from the array whose first element is pointed to by {{c|src}} to its narrow multibyte representation that begins in the initial shift state. Converted characters are stored in the successive elements of the char array pointed to by {{c|dst}}. No more than {{c|len}} bytes are written to the destination array.

Each character is converted as if by a call to {{lc|std::wctomb}}, except that the wctomb's conversion state is unaffected. The conversion stops if:
* The null character was converted and stored.
* A {{c|wchar_t}} was found that does not correspond to a valid character in the current C locale.
* The next multibyte character to be stored would exceed {{c|len}}.

===Notes===
In most implementations, this function updates a global static object of type {{lc|std::mbstate_t}} as it processes through the string, and cannot be called simultaneously by two threads, {{c|std::wcsrtombs}} should be used in such cases.

POSIX specifies a common extension: if {{c|dst}} is a null pointer, this function returns the number of bytes that would be written to {{c|dst}}, if converted. Similar behavior is standard for {{c|std::wcsrtombs}}.

===Parameters===
{{par begin}}
{{par|dst|pointer to narrow character array where the multibyte character will be stored}}
{{par|src|pointer to the first element of a null-terminated wide string to convert}}
{{par|len|number of byte available in the array pointed to by dst}}
{{par end}}

===Return value===
On success, returns the number of bytes (including any shift sequences, but excluding the terminating {{c|'\0'}}) written to the character array whose first element is pointed to by {{c|dst}}.

On conversion error (if invalid wide character was encountered), returns {{c|static_cast&lt;std::size_t&gt;(-1)}}.

===Example===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;

int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    // UTF-8 narrow multibyte encoding
    const wchar_t* wstr = L"z\u00df\u6c34\U0001d10b"; // or L"z√üÊ∞¥ùÑã"
    char mbstr[11];
    std::wcstombs(mbstr, wstr, 11);
    std::cout &lt;&lt; "multibyte string: " &lt;&lt; mbstr &lt;&lt; '\n';
}
|output=
multibyte string: z√üÊ∞¥ùÑã
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/multibyte/dsc wcsrtombs}}
{{dsc inc|cpp/string/multibyte/dsc mbstowcs}}
{{dsc inc|cpp/locale/codecvt/dsc do_out}}
{{dsc see c|c/string/multibyte/wcstombs}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
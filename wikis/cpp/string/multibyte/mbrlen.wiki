{{cpp/title|mbrlen}}
{{cpp/string/multibyte/navbar}}
{{ddcl|header=cwchar|
std::size_t mbrlen( const char* s, std::size_t n, std::mbstate_t* ps);
}}

Determines the size, in bytes, of the remainder of the multibyte character whose first byte is pointed to by {{c|s}}, given the current conversion state {{c|ps}}.

This function is equivalent to the call {{c|std::mbrtowc(nullptr, s, n, ps ? ps : &amp;internal)}} for some hidden object {{c|internal}} of type {{lc|std::mbstate_t}}, except that the expression {{c|ps}} is evaluated only once.

===Parameters===
{{par begin}}
{{par|s|pointer to an element of a multibyte character string}}
{{par|n|limit on the number of bytes in s that can be examined}}
{{par|ps|pointer to the variable holding the conversion state}}
{{par end}}

===Return value===
* {{c|0}} if the next {{c|n}} or fewer bytes complete the null character.
* The number of bytes (between {{c|1}} and {{c|n}}) that complete a valid multibyte character.
* {{c|std::size_t(-1)}} if encoding error occurs.
* {{c|std::size_t(-2)}} if the next {{c|n}} bytes are part of a possibly valid multibyte character, which is still incomplete after examining all {{c|n}} bytes.

===Example===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cwchar&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    // allow mbrlen() to work with UTF-8 multibyte encoding
    std::setlocale(LC_ALL, "en_US.utf8");

    // UTF-8 narrow multibyte encoding
    std::string str = "水"; // or u8"\u6c34" or "\xe6\xb0\xb4"
    std::mbstate_t mb = std::mbstate_t();

    // simple use: length of a complete multibyte character
    const std::size_t len = std::mbrlen(&amp;str[0], str.size(), &amp;mb);
    std::cout &lt;&lt; "The length of " &lt;&lt; str &lt;&lt; " is " &lt;&lt; len &lt;&lt; " bytes\n";

    // advanced use: restarting in the middle of a multibyte character
    const std::size_t len1 = std::mbrlen(&amp;str[0], 1, &amp;mb);
    if (len1 == std::size_t(-2))
        std::cout &lt;&lt; "The first 1 byte of " &lt;&lt; str
                  &lt;&lt; " is an incomplete multibyte char (mbrlen returns -2)\n";

    const std::size_t len2 = std::mbrlen(&amp;str[1], str.size() - 1, &amp;mb);
    std::cout &lt;&lt; "The remaining " &lt;&lt; str.size() - 1 &lt;&lt; " bytes of " &lt;&lt; str
              &lt;&lt; " hold " &lt;&lt; len2 &lt;&lt; " bytes of the multibyte character\n";

    // error case:
    std::cout &lt;&lt; "Attempting to call mbrlen() in the middle of " &lt;&lt; str
              &lt;&lt; " while in initial shift state returns "
              &lt;&lt; (int)mbrlen(&amp;str[1], str.size(), &amp;mb) &lt;&lt; '\n';
}
|output=
The length of 水 is 3 bytes.
The first 1 byte of 水 is an incomplete multibyte char (mbrlen returns -2)
The remaining 2 bytes of 水 hold 2 bytes of the multibyte character
Attempting to call mbrlen() in the middle of 水 while in initial shift state returns -1
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/multibyte/dsc mbrtowc}}
{{dsc inc|cpp/string/multibyte/dsc mblen}}
{{dsc inc|cpp/locale/codecvt/dsc do_length}}
{{dsc see c|c/string/multibyte/mbrlen}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|wcrtomb}}
{{cpp/string/multibyte/navbar}}
{{ddcl|header=cwchar|
std::size_t wcrtomb( char* s, wchar_t wc, std::mbstate_t* ps );
}}

Converts a wide character to its narrow multibyte representation.

If {{c|s}} is not a null pointer, the function determines the number of bytes necessary to store the multibyte character representation of {{c|wc}} (including any shift sequences, and taking into account the current multibyte conversion state {{c|*ps}}), and stores the multibyte character representation in the character array whose first element is pointed to by {{c|s}}, updating {{c|*ps}} as necessary. At most {{c|MB_CUR_MAX}} bytes can be written by this function.

If {{c|s}} is a null pointer, the call is equivalent to {{c|std::wcrtomb(buf, L'\0', ps)}} for some internal buffer {{tt|buf}}.

If wc is the null wide character {{c|L'\0'}}, a null byte is stored, preceded by any shift sequence necessary to restore the initial shift state and the conversion state parameter {{c|*ps}} is updated to represent the initial shift state.

===Parameters===
{{par begin}}
{{par|s|pointer to narrow character array where the multibyte character will be stored}}
{{par|wc|the wide character to convert}}
{{par|ps|pointer to the conversion state object used when interpreting the multibyte string}}
{{par end}}

===Return value===
On success, returns the number of bytes (including any shift sequences) written to the character array whose first element is pointed to by {{c|s}}. 

On failure (if {{c|wc}} is not a valid wide character), returns {{c|static_cast&lt;std::size_t&gt;(-1)}}, stores {{lc|EILSEQ}} in {{lc|errno}}, and leaves {{c|*ps}} in unspecified state.

===Example===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cwchar&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

void print_wide(const std::wstring&amp; wstr)
{
    std::mbstate_t state{};
    for (wchar_t wc : wstr)
    {
        std::string mb(MB_CUR_MAX, '\0');
        std::size_t ret = std::wcrtomb(&amp;mb[0], wc, &amp;state);
        std::cout &lt;&lt; "multibyte char " &lt;&lt; mb &lt;&lt; " is " &lt;&lt; ret &lt;&lt; " bytes\n";
    }
}

int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    std::wstring wstr = L"z\u00df\u6c34\U0001f34c"; // or L"z√üÊ∞¥üçå"
    print_wide(wstr);
}
|output=
multibyte char z is 1 bytes
multibyte char √ü is 2 bytes
multibyte char Ê∞¥ is 3 bytes
multibyte char üçå is 4 bytes
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/multibyte/dsc wctomb}}
{{dsc inc|cpp/string/multibyte/dsc mbrtowc}}
{{dsc inc|cpp/locale/codecvt/dsc do_out}}
{{dsc see c|c/string/multibyte/wcrtomb}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
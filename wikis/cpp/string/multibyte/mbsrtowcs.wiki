{{cpp/title|mbsrtowcs}}
{{cpp/string/multibyte/navbar}}
{{ddcl|header=cwchar|
std::size_t mbsrtowcs( wchar_t* dst,
                       const char** src,
                       std::size_t len,
                       std::mbstate_t* ps );
}}

Converts a null-terminated multibyte character sequence, which begins in the conversion state described by {{c|*ps}}, from the array whose first element is pointed to by {{c|*src}} to its wide character representation. If {{c|dst}} is not null, converted characters are stored in the successive elements of the wchar_t array pointed to by {{c|dst}}. No more than {{c|len}} wide characters are written to the destination array.

Each multibyte character is converted as if by a call to {{lc|std::mbrtowc}}. The conversion stops if:
* The multibyte null character was converted and stored. {{c|src}} is set to a null pointer and {{tt|*ps}} represents the initial shift state.
* An invalid multibyte character (according to the current C locale) was encountered. {{c|src}} is set to point at the beginning  of the first unconverted multibyte character.
* The next wide character to be stored would exceed {{c|len}}. {{c|src}} is set to point at the beginning of the first unconverted multibyte character. This condition is not checked if {{c|dst}} is a null pointer.

===Parameters===
{{par begin}}
{{par|dst|pointer to wide character array where the results will be stored}}
{{par|src|pointer to pointer to the first element of a null-terminated multibyte string}}
{{par|len|number of wide characters available in the array pointed to by dst}}
{{par|ps|pointer to the conversion state object}}
{{par end}}

===Return value===
On success, returns the number of wide characters, excluding the terminating {{c|L'\0'}}, written to the character array. If {{c|dst}} is a null pointer, returns the number of wide characters that would have been written given unlimited length.

On conversion error (if invalid multibyte character was encountered), returns {{c|static_cast&lt;std::size_t&gt;(-1)}}, stores {{lc|EILSEQ}} in {{lc|errno}}, and leaves {{c|*ps}} in unspecified state.

===Notes===
This function moves the {{c|src}} pointer to the end of the converted multibyte string. This doesn't happen if {{c|dst}} is a null pointer.

===Example===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cwchar&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

void print_as_wide(const char* mbstr)
{
    std::mbstate_t state = std::mbstate_t();
    std::size_t len = 1 + std::mbsrtowcs(nullptr, &amp;mbstr, 0, &amp;state);
    std::vector&lt;wchar_t&gt; wstr(len);
    std::mbsrtowcs(&amp;wstr[0], &amp;mbstr, wstr.size(), &amp;state);
    std::wcout &lt;&lt; "Wide string: " &lt;&lt; &amp;wstr[0] &lt;&lt; '\n'
               &lt;&lt; "The length, including '\\0': " &lt;&lt; wstr.size() &lt;&lt; '\n';
}

int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    const char* mbstr = "z\u00df\u6c34\U0001f34c"; // or u8"z√üÊ∞¥üçå"
    print_as_wide(mbstr);
}
|output=
Wide string: z√üÊ∞¥üçå
The length, including '\0': 5
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/multibyte/dsc mbrtowc}}
{{dsc inc|cpp/string/multibyte/dsc wcsrtombs}}
{{dsc inc|cpp/locale/codecvt/dsc do_in}}
{{dsc see c|c/string/multibyte/mbsrtowcs}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
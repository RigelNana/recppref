{{cpp/title|mbtowc}}
{{cpp/string/multibyte/navbar}}
{{ddcl|header=cstdlib|
int mbtowc( wchar_t* pwc, const char* s, std::size_t n );
}}

Converts a multibyte character whose first byte is pointed to by {{c|s}} to a wide character, written to {{c|*pwc}} if {{c|pwc}} is not null.

If {{c|s}} is a null pointer, resets the global conversion state and determines whether shift sequences are used.

===Parameters===
{{par begin}}
{{par|s|pointer to the multibyte character}}
{{par|n|limit on the number of bytes in s that can be examined}}
{{par|pwc|pointer to the wide character for output}}
{{par end}}

===Return value===
If {{c|s}} is not a null pointer, returns the number of bytes that are contained in the multibyte character or {{c|-1}} if the first bytes pointed to by {{c|s}} do not form a valid multibyte character or {{c|0}} if {{c|s}} is pointing at the null character {{c|'\0'}}.

If {{c|s}} is a null pointer, resets its internal conversion state to represent the initial shift state and returns {{c|0}} if the current multibyte encoding is not state-dependent (does not use shift sequences) or a non-zero value if the current multibyte encoding is state-dependent (uses shift sequences).

===Notes===
Each call to {{tt|mbtowc}} updates the internal global conversion state (a static object of type {{lc|std::mbstate_t}}, only known to this function). If the multibyte encoding uses shift states, care must be taken to avoid backtracking or multiple scans. In any case, multiple threads should not call {{tt|mbtowc}} without synchronization: {{lc|std::mbrtowc}} may be used instead.

===Example===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;

int print_mb(const char* ptr)
{
    std::mbtowc(nullptr, 0, 0); // reset the conversion state
    const char* end = ptr + std::strlen(ptr);
    int ret{};
    for (wchar_t wc; (ret = std::mbtowc(&amp;wc, ptr, end - ptr)) &gt; 0; ptr += ret)
        std::wcout &lt;&lt; wc;
    std::wcout &lt;&lt; '\n';
    return ret;
}

int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    // UTF-8 narrow multibyte encoding
    const char* str = "z\u00df\u6c34\U0001d10b"; // or "z√üÊ∞¥ùÑã"
                      // or "\x7a\xc3\x9f\xe6\xb0\xb4\xf0\x9d\x84\x8b";
    print_mb(str);
}
|output=
z√üÊ∞¥ùÑã
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/multibyte/dsc mbrtowc}}
{{dsc inc|cpp/string/multibyte/dsc mblen}}
{{dsc inc|cpp/locale/codecvt/dsc do_in}}
{{dsc see c|c/string/multibyte/mbtowc}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
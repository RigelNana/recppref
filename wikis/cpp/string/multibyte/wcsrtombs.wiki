{{cpp/title|wcsrtombs}}
{{cpp/string/multibyte/navbar}}
{{ddcl|header=cwchar|
std::size_t wcsrtombs( char* dst,
                       const wchar_t** src,
                       std::size_t len,
                       std::mbstate_t* ps );
}}

Converts a sequence of wide characters from the array whose first element is pointed to by {{c|*src}} to its narrow multibyte representation that begins in the conversion state described by {{c|*ps}}. If {{c|dst}} is not null, converted characters are stored in the successive elements of the char array pointed to by {{c|dst}}. No more than {{c|len}} bytes are written to the destination array.

Each character is converted as if by a call to {{lc|std::wcrtomb}}. The conversion stops if:
* The null character was converted and stored. {{c|src}} is set to a null pointer and {{c|*ps}} represents the initial shift state.
* A {{c|wchar_t}} was found that does not correspond to a valid character in the current C locale. {{c|src}} is set to point at the first unconverted wide character.
* The next multibyte character to be stored would exceed {{c|len}}. {{c|src}} is set to point at the first unconverted wide character. This condition is not checked if {{c|dst}} is a null pointer.

===Parameters===
{{par begin}}
{{par|dst|pointer to narrow character array where the multibyte characters will be stored}}
{{par|src|pointer to pointer to the first element of a null-terminated wide string}}
{{par|len|number of bytes available in the array pointed to by dst}}
{{par|ps|pointer to the conversion state object}}
{{par end}}

===Return value===
On success, returns the number of bytes (including any shift sequences, but excluding the terminating {{c|'\0'}}) written to the character array whose first element is pointed to by {{c|dst}}. If {{c|dst}} is a null pointer, returns the number of bytes that would have been written (again, excluding the terminating null character {{c|'\0'}}).

On conversion error (if invalid wide character was encountered), returns {{c|static_cast&lt;std::size_t&gt;(-1)}}, stores {{lc|EILSEQ}} in {{lc|errno}}, and leaves {{c|*ps}} in unspecified state.

===Example===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cwchar&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

void print_wide(const wchar_t* wstr)
{
    std::mbstate_t state = std::mbstate_t();
    std::size_t len = 1 + std::wcsrtombs(nullptr, &amp;wstr, 0, &amp;state);
    std::vector&lt;char&gt; mbstr(len);
    std::wcsrtombs(&amp;mbstr[0], &amp;wstr, mbstr.size(), &amp;state);
    std::cout &lt;&lt; "multibyte string: " &lt;&lt; &amp;mbstr[0] &lt;&lt; '\n'
              &lt;&lt; "Length, including '\\0': " &lt;&lt; mbstr.size() &lt;&lt; '\n';
}

int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    // UTF-8 narrow multibyte encoding
    const wchar_t* wstr = L"z\u00df\u6c34\U0001d10b"; // or L"z√üÊ∞¥ùÑã"
    print_wide(wstr);
}
|output=
multibyte string: z√üÊ∞¥ùÑã
Length, including '\0': 11
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/multibyte/dsc wcrtomb}}
{{dsc inc|cpp/string/multibyte/dsc mbsrtowcs}}
{{dsc inc|cpp/locale/codecvt/dsc do_out}}
{{dsc see c|c/string/multibyte/wcsrtombs}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
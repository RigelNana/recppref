{{cpp/title|c32rtomb}}
{{cpp/string/multibyte/navbar}}
{{ddcl|header=cuchar|since=c++11|
std::size_t c32rtomb( char* s, char32_t c32, std::mbstate_t* ps );
}}

Converts a UTF-32 character to its narrow multibyte representation.

If {{c|s}} is not a null pointer, the function determines the number of bytes necessary to store the multibyte character representation of {{c|c32}} (including any shift sequences, and taking into account the current multibyte conversion state {{c|*ps}}), and stores the multibyte character representation in the character array whose first element is pointed to by {{c|s}}, updating {{c|*ps}} as necessary. At most {{c|MB_CUR_MAX}} bytes can be written by this function.

If {{c|s}} is a null pointer, the call is equivalent to {{c|std::c32rtomb(buf, U'\0', ps)}} for some internal buffer {{tt|buf}}.

If {{c|c32}} is the null wide character {{c|U'\0'}}, a null byte is stored, preceded by any shift sequence necessary to restore the initial shift state and the conversion state parameter {{c|*ps}} is updated to represent the initial shift state.

The multibyte encoding used by this function is specified by the currently active C locale.

===Parameters===
{{par begin}}
{{par|s|pointer to narrow character array where the multibyte character will be stored}}
{{par|c32|the 32-bit character to convert}}
{{par|ps|pointer to the conversion state object used when interpreting the multibyte string}}
{{par end}}

===Return value===
On success, returns the number of bytes (including any shift sequences) written to the character array whose first element is pointed to by {{c|s}}. This value may be {{c|0}}, e.g. when processing the first {{c/core|char32_t}} in multi-{{c/core|char32_t}}-character sequence (does not occur in UTF-32).

On failure (if {{c|c32}} is not a valid 32-bit character), returns {{c|-1}}, stores {{lc|EILSEQ}} in {{lc|errno}}, and leaves {{c|*ps}} in unspecified state.

===Example===
{{example
|code=
#include &lt;climits&gt;
#include &lt;clocale&gt;
#include &lt;cuchar&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    std::u32string_view strv = U"z√üÊ∞¥üçå"; // or z\u00df\u6c34\U0001F34C
    std::cout &lt;&lt; "Processing " &lt;&lt; strv.size() &lt;&lt; " UTF-32 code units: [ ";
    for (char32_t c : strv)
        std::cout &lt;&lt; std::showbase &lt;&lt; std::hex &lt;&lt; static_cast&lt;int&gt;(c) &lt;&lt; ' ';
    std::cout &lt;&lt; "]\n";

    std::mbstate_t state{};
    char out[MB_LEN_MAX]{};
    for (char32_t c : strv)
    {
        std::size_t rc = std::c32rtomb(out, c, &amp;state);
        std::cout &lt;&lt; static_cast&lt;int&gt;(c) &lt;&lt; " converted to [ ";
        if (rc != (std::size_t) - 1)
            for (unsigned char c8 : std::string_view{out, rc})
                std::cout &lt;&lt; +c8 &lt;&lt; ' ';
        std::cout &lt;&lt; "]\n";
    }
}
|output=
Processing 4 UTF-32 code units: [ 0x7a 0xdf 0x6c34 0x1f34c ]
0x7a converted to [ 0x7a ]
0xdf converted to [ 0xc3 0x9f ]
0x6c34 converted to [ 0xe6 0xb0 0xb4 ]
0x1f34c converted to [ 0xf0 0x9f 0x8d 0x8c ]
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/multibyte/dsc mbrtoc32}}
{{dsc inc|cpp/locale/codecvt/dsc do_out|mem=std::codecvt&lt;char32_t, char, std::mbstate_t&gt;}}
{{dsc see c|c/string/multibyte/c32rtomb}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
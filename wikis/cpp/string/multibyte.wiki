{{title|Null-terminated multibyte strings}}
{{cpp/string/multibyte/navbar}}

A null-terminated multibyte string (NTMBS), or "multibyte string", is a sequence of nonzero bytes followed by a byte with value zero (the terminating null character).

Each character stored in the string may occupy more than one byte. The encoding used to represent characters in a multibyte character string is locale-specific: it may be UTF-8, GB18030, EUC-JP, Shift-JIS, etc. For example, the char array {{c|{'\xe4','\xbd','\xa0','\xe5','\xa5','\xbd','\0'}&lt;!----&gt;}} is an NTMBS holding the string {{c|"你好"}} in UTF-8 multibyte encoding: the first three bytes encode the character 你, the next three bytes encode the character 好. The same string encoded in GB18030 is the char array {{c|{'\xc4', '\xe3', '\xba', '\xc3', '\0'}&lt;!----&gt;}}, where each of the two characters is encoded as a two-byte sequence.

In some multibyte encodings, any given multibyte character sequence may represent different characters depending on the previous byte sequences, known as "shift sequences". Such encodings are known as state-dependent: knowledge of the current shift state is required to interpret each character. An NTMBS is only valid if it begins and ends in the initial shift state: if a shift sequence was used, the corresponding unshift sequence has to be present before the terminating null character. Examples of such encodings are the 7-bit JIS, BOCU-1 and [https://www.unicode.org/reports/tr6 SCSU].

A multibyte character string is layout-compatible with null-terminated byte string (NTBS), that is, can be stored, copied, and examined using the same facilities, except for calculating the number of characters. If the correct locale is in effect, I/O functions also handle multibyte strings. Multibyte strings can be converted to and from wide strings using the {{lc|std::codecvt}} member functions, {{lc|std::wstring_convert}}, or the following locale-dependent conversion functions:

===Functions===
{{dsc begin}}
{{dsc h2|Multibyte/wide character conversions}}
{{dsc header|cstdlib}}
{{dsc inc|cpp/string/multibyte/dsc mblen}}
{{dsc inc|cpp/string/multibyte/dsc mbtowc}}
{{dsc inc|cpp/string/multibyte/dsc wctomb}}
{{dsc inc|cpp/string/multibyte/dsc mbstowcs}}
{{dsc inc|cpp/string/multibyte/dsc wcstombs}}
{{dsc header|cwchar}}
{{dsc inc|cpp/string/multibyte/dsc mbrlen}}
{{dsc inc|cpp/string/multibyte/dsc mbsinit}}
{{dsc inc|cpp/string/multibyte/dsc btowc}}
{{dsc inc|cpp/string/multibyte/dsc wctob}}
{{dsc inc|cpp/string/multibyte/dsc mbrtowc}}
{{dsc inc|cpp/string/multibyte/dsc wcrtomb}}
{{dsc inc|cpp/string/multibyte/dsc mbsrtowcs}}
{{dsc inc|cpp/string/multibyte/dsc wcsrtombs}}
{{dsc header|cuchar}}
{{dsc inc|cpp/string/multibyte/dsc mbrtoc8}}
{{dsc inc|cpp/string/multibyte/dsc c8rtomb}}
{{dsc inc|cpp/string/multibyte/dsc mbrtoc16}}
{{dsc inc|cpp/string/multibyte/dsc c16rtomb}}
{{dsc inc|cpp/string/multibyte/dsc mbrtoc32}}
{{dsc inc|cpp/string/multibyte/dsc c32rtomb}}
{{dsc end}}

===Types===
{{dsc begin}}
{{dsc header|cwchar}}
{{dsc inc|cpp/string/multibyte/dsc mbstate_t}}
{{dsc end}}

===Macros===
{{dsc begin}}
{{dsc header|climits}}
{{dsc inc|cpp/string/multibyte/dsc MB_LEN_MAX}}
{{dsc header|cstdlib}}
{{dsc inc|cpp/string/multibyte/dsc MB_CUR_MAX}}
{{dsc header|cuchar}}
{{dsc macro const|__STDC_UTF_16__|notes={{mark c++11}}|nolink=true|indicates that UTF-16 encoding is used by mbrtoc16 and c16rtomb}}
{{dsc macro const|__STDC_UTF_32__|notes={{mark c++11}}|nolink=true|indicates that UTF-32 encoding is used by mbrtoc32 and c32rtomb}}
{{dsc end}}

===See also===
{{dsc begin}}
{{dsc see c|c/string/multibyte|Null-terminated multibyte strings}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/string/basic_string/title|append}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|num=1|constexpr=c++20|
basic_string&amp; append( size_type count, CharT ch );
}}
{{dcla|num=2|constexpr=c++20|
basic_string&amp; append( const CharT* s, size_type count );
}}
{{dcla|num=3|constexpr=c++20|
basic_string&amp; append( const CharT* s );
}}
{{dcla|num=4|since=c++17|constexpr=c++20|
template&lt; class SV &gt;
basic_string&amp; append( const SV&amp; t );
}}
{{dcla|num=5|since=c++17|constexpr=c++20|1=
template&lt; class SV &gt;
basic_string&amp; append( const SV&amp; t, size_type pos,
                      size_type count = npos );
}}
{{dcla|num=6|constexpr=c++20|
basic_string&amp; append( const basic_string&amp; str );
}}
{{dcl rev begin|num=7}}
{{dcl|until=c++14|
basic_string&amp; append( const basic_string&amp; str,
                      size_type pos, size_type count );
}}
{{dcla|since=c++14|constexpr=c++20|1=
basic_string&amp; append( const basic_string&amp; str,
                      size_type pos, size_type count = npos );
}}
{{dcl rev end}}
{{dcla|num=8|constexpr=c++20|
template&lt; class InputIt &gt;
basic_string&amp; append( InputIt first, InputIt last );
}}
{{dcla|num=9|since=c++11|constexpr=c++20|
basic_string&amp; append( std::initializer_list&lt;CharT&gt; ilist );
}}
{{dcl end}}

Appends additional characters to the string.

@1@ Appends {{c|count}} copies of character {{c|ch}}.

@2@ Appends characters in the range {{range|s|s + count}}.
@@ If {{range|s|s + count}} is not a [[cpp/iterator#Ranges|valid range]], the behavior is undefined.

@3@ Equivalent to {{c|return append(s, Traits::length(s));}}.

@4,5@ Appends characters in a string view {{c|sv}} constructed from {{c|t}}.
* If only {{c|t}} is provided, all characters in {{c|sv}} are appended.
* If {{c|pos}} is also provided:
** If {{c|count}} is {{box|{{rlpt|/#Data members|npos}}}}, all characters in {{c|sv}} starting from {{c|pos}} are appended.
** Otherwise, the {{c|std::min(count, sv.size() - pos)}} characters in {{c|sv}} starting from {{c|pos}} are appended.
@@ {{cpp/enable if|plural=yes|all following conditions are satisfied}}:
* {{c|std::is_convertible_v&lt;const SV&amp;, std::basic_string_view&lt;CharT, Traits&gt;&gt;}} is {{c|true}}.
* {{c|std::is_convertible_v&lt;const SV&amp;, const CharT*&gt;}} is {{c|false}}.
:@4@ Equivalent to {{c multi|std::basic_string_view&lt;CharT, Traits&gt; sv {{=}} t;|return append(sv.data(), sv.size());}}.
:@5@ Equivalent to {{c multi|std::basic_string_view&lt;CharT, Traits&gt; sv {{=}} t;|return append(sv.substr(pos, count));}}.

@6,7@ Appends characters in another string {{c|str}}.
* If only {{c|str}} is provided, all characters in it are appended.
* If {{c|pos}} is also provided:
** If {{c|count}} is {{box|{{rlpt|/#Data members|npos}}}}, all characters in {{c|str}} starting from {{c|pos}} are appended.
** Otherwise, the {{c|std::min(count, str.size() - pos)}} characters in {{c|str}} starting from {{c|pos}} are appended.
:@6@ Equivalent to {{c|return append(str.data(), str.size());}}.

{{rrev|since=c++20|
:@7@ Equivalent to {{c multi|return append(std::basic_string_view&lt;CharT, Traits&gt;|                  (str).substr(pos, count));}}.
}}

@8@ Equivalent to {{c|return append(basic_string(first, last, get_allocator()));}}.
{{rev begin}}
{{rev|until=c++11|
This overload has the same effect as overload {{v|1}} if {{tt|InputIt}} is an integral type.
}}
{{rev|since=c++11|
{{cpp/enable if|{{tt|InputIt}} satisfies the requirements of {{named req|InputIterator}}}}.
}}
{{rev end}}

@9@ Equivalent to {{c|return append(ilist.begin(), ilist.size());}}.

===Parameters===
{{par begin}}
{{par|count|number of characters to append}}
{{par|ch|character value to append}}
{{par|s|pointer to the character string to append}}
{{par|t|object convertible to {{lc|std::basic_string_view}} with the characters to append}}
{{par|pos|the index of the first character to append}}
{{par|str|string to append}}
{{par|first, last|range of characters to append}}
{{par|ilist|initializer list with the characters to append}}
{{par end}} 

===Return value===
{{c|*this}}

===Complexity===
There are no standard complexity guarantees, typical implementations behave similar to {{l2tf std|cpp/container/vector/insert}}.

===Exceptions===
{{cpp/string/basic_string/length error note}}

@5@ If {{c|pos &gt; sv.size()}} is {{c|true}}, throws {{lc|std::out_of_range}}.

@7@ If {{c|pos &gt; str.size()}} is {{c|true}}, throws {{lc|std::out_of_range}}.

{{cpp/strong exception safety guarantee}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;string&gt;

int main()
{
    std::string str = "std::string";
    const char* cptr = "C-string";
    const char carr[] = "range";

    std::string result;

    // 1) Append a char 3 times.
    // Note: This is the only overload accepting “CharT”s.
    result.append(3, '*');
    assert(result == "***");

    // 2) Append a fixed-length C-string
    result.append(cptr, 5);
    assert(result == "***C-str");

    // 3) Append a null-terminated C-string
    // Note: Because “append” returns *this, we can chain calls together.
    result.append(1, ' ').append(cptr);
    assert(result == "***C-str C-string");

    // 6) Append a whole string
    result.append(1, ' ').append(str);
    assert(result == "***C-str C-string std::string");

    // 7) Append part of a string
    result.append(str, 3, 2);
    assert(result == "***C-str C-string std::string::");

    // 8) Append range
    result.append(&amp;carr[2], &amp;carr[3]);
    assert(result == "***C-str C-string std::string::n");

    // 9) Append initializer list
    result.append({'p', 'o', 's'});
    assert(result == "***C-str C-string std::string::npos");
}
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=there was no exception safety guarantee|after=added strong exception safety guarantee}}
{{dr list item|wg=lwg|dr=2250|std=C++98|before=the behavior of overload {{v|7}} was&lt;br&gt;undefined if {{c|pos &gt; str.size()}} is {{c|true}}|after=always throws an exception in this case}}
{{dr list item|wg=lwg|dr=2788|std=C++98|before=overload {{v|8}} used a default constructed&lt;br&gt;allocator to construct the temporary string|after=obtains the allocator&lt;br&gt;from {{lc|get_allocator()}}}}
{{dr list item|wg=lwg|dr=2946|std=C++17|before=overload {{v|4}} causes ambiguity in some cases|after=avoided by making it a template}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc append_range}}
{{dsc inc|cpp/string/basic_string/dsc operator+{{=}}}}
{{dsc inc|cpp/string/byte/dsc strcat}}
{{dsc inc|cpp/string/byte/dsc strncat}}
{{dsc inc|cpp/string/wide/dsc wcscat}}
{{dsc inc|cpp/string/wide/dsc wcsncat}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
{{cpp/string/basic_string/title|assign_range}}
{{cpp/string/basic_string/navbar}}
{{ddcl|since=c++23|1=
template&lt; container-compatible-range&lt;CharT&gt; R &gt;
constexpr std::basic_string&amp; assign_range( R&amp;&amp; rg );
}}

Replaces the contents of the string with the values in the range {{c|rg}}.

Equivalent to 
{{source|1=
return assign(
    std::basic_string(
        std::from_range,
        std​::​forward&lt;R&gt;(rg),
        get_allocator())
);
}}

===Parameters===
{{par begin}}
{{par|rg|a {{ls|cpp/ranges/to#container compatible range}}}}
{{par end}}

===Return value===
{{c|*this}}

===Complexity===
Linear in size of {{c|rg}}.

===Exceptions===
{{cpp/string/basic_string/length error note}}

{{cpp/strong exception safety guarantee}}

===Notes===
{{feature test macro|__cpp_lib_containers_ranges|value=202202L|std=C++23|member functions that accept {{ls|cpp/ranges/to#container compatible range}}}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;string&gt;

int main()
{
    const auto source = {'s', 'o', 'u', 'r', 'c', 'e'};
    std::string destination{"destination"};

#ifdef __cpp_lib_containers_ranges
    destination.assign_range(source);
#else
    destination.assign(source.begin(), source.end());
#endif

    assert(destination == "source");
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc assign}}
{{dsc inc|cpp/string/basic_string/dsc operator{{=}}}}
{{dsc inc|cpp/string/basic_string/dsc constructor}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
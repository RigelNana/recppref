{{title|1=operator==,!=,&lt;,&lt;=,&gt;,&gt;=,&lt;=&gt;{{small|(std::basic_string)}}}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl header|string}}
{{dcl h|Compare two {{tt|basic_string}} objects}}
{{dcl|num=1|notes={{mark noexcept since c++11}}&lt;br&gt;{{mark constexpr since c++20}}|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator==( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=2|until=c++20|notes={{mark noexcept since c++11}}|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator!=( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=3|until=c++20|notes={{mark noexcept since c++11}}|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&lt;( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=4|until=c++20|notes={{mark noexcept since c++11}}|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&lt;=( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=5|until=c++20|notes={{mark noexcept since c++11}}|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&gt;( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=6|until=c++20|notes={{mark noexcept since c++11}}|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&gt;=( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=7|since=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
constexpr /*comp-cat*/
    operator&lt;=&gt;( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs ) noexcept;
}}
{{dcl h|Compare a {{tt|basic_string}} object and null-terminated array of {{tt|T}}}}
{{dcl|num=8|notes={{mark constexpr since c++20}}|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator==( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const CharT* rhs );
}}
{{dcl|num=9|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator==( const CharT* lhs,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=10|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator!=( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const CharT* rhs );
}}
{{dcl|num=11|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator!=( const CharT* lhs,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=12|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&lt;( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                const CharT* rhs );
}}
{{dcl|num=13|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&lt;( const CharT* lhs,
                const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=14|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&lt;=( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const CharT* rhs );
}}
{{dcl|num=15|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&lt;=( const CharT* lhs,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=16|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&gt;( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                const CharT* rhs );
}}
{{dcl|num=17|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&gt;( const CharT* lhs,
                const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=18|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&gt;=( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const CharT* rhs );
}}
{{dcl|num=19|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&gt;=( const CharT* lhs,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=20|since=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
constexpr /*comp-cat*/
    operator&lt;=&gt;( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const CharT* rhs );
}}
{{dcl end}}

Compares the contents of a string with another string or a null-terminated array of {{tt|CharT}}.

All comparisons are done via the {{lc|compare()}} member function (which itself is defined in terms of {{tt|Traits::compare()}}):

* Two strings are equal if both the size of {{c|lhs}} and {{c|rhs}} are equal and each character in {{c|lhs}} has equivalent character in {{c|rhs}} at the same position.

* The ordering comparisons are done lexicographically &amp;ndash; the comparison is performed by a function equivalent to {{lc|std::lexicographical_compare}}{{rev inl|since=c++20|or {{lc|std::lexicographical_compare_three_way}}}}.

@1-7@ Compares two {{tt|basic_string}} objects.

@8-20@ Compares a {{tt|basic_string}} object and a null-terminated array of {{tt|CharT}}.

{{rrev|since=c++20|
The return type of three-way comparison operators ({{c|/*comp-cat*/}}) is {{c|Traits::comparison_category}} if that qualified-id exists and denotes a type, {{lc|std::weak_ordering}} otherwise. If {{c|/*comp-cat*/}} is not a comparison category type, the program is ill-formed.

{{cpp/note synthesized compare}}
}}

===Parameters===
{{par begin}}
{{par|lhs, rhs|strings whose contents to compare}}
{{par end}}

===Return value===
@1-6,8-19@ {{c|true}} if the corresponding comparison holds, {{c|false}} otherwise.
@7,20@ {{c|1=static_cast&lt;/*comp-cat*/&gt;(lhs.compare(rhs) &lt;=&gt; 0)}}.

===Complexity===
Linear in the size of the strings.

===Notes===
{{rrev|since=c++20|
If at least one parameter is of type {{lc|std::string}}, {{lc|std::wstring}}, {{lc|std::u8string}}, {{lc|std::u16string}}, or {{lc|std::u32string}}, the return type of {{tt|1=operator&lt;=&gt;}} is {{lc|std::strong_ordering}}.
}}

===Example===
{{example
|code=
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2064|std=C++11|before=whether overloads taking two {{tt|basic_string}}s are noexcept was inconsistent;&lt;br&gt;overloads taking a {{tt|CharT*}} were noexcept but might raise UB|after=made consistent;&lt;br&gt;noexcept removed}}
{{dr list item|wg=lwg|dr=3432|std=C++20|before=the return type of {{tt|1=operator&lt;=&gt;}} was not required to be a comparison category type|after=required}}
{{dr list end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
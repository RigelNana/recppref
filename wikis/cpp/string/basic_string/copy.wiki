{{cpp/string/basic_string/title|copy}}
{{cpp/string/basic_string/navbar}}
{{ddcl|notes={{mark constexpr since c++20}}|1=
size_type copy( CharT* dest, size_type count, size_type pos = 0 ) const;
}}

Copies a substring {{range|pos|pos + count}} to character string pointed to by {{c|dest}}. If the requested substring lasts past the end of the string, or if {{c|1=count == npos}}, the copied substring is {{range/core|{{c|pos}}|{{rlpf|size}}}}.

The resulting character string is not null-terminated.

===Parameters===
{{par begin}}
{{par|dest|pointer to the destination character string}}
{{par|count|length of the substring}}
{{par|pos|position of the first character to include}}
{{par end}}

===Return value===
Number of characters copied.

===Exceptions===
{{lc|std::out_of_range}} if {{c|pos &gt; size()}}.

{{cpp/strong exception safety guarantee}}

===Complexity===
Linear in {{c|count}}.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::string foo("WINE");
    
    // brace-initialization initializes all characters to 0,
    // providing a null-terminator
    char bar[4]{};
    
    // do not copy the last char, to guarantee null-termination
    foo.copy(bar, sizeof bar - 1);
    
    std::cout &lt;&lt; bar &lt;&lt; '\n'; // requires bar to be null-terminated
}
|output=
WIN
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=there was no exception safety guarantee|after=added strong exception safety guarantee}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc substr}}
{{dsc inc|cpp/string/basic_string_view/dsc copy}}
{{dsc inc|cpp/algorithm/dsc copy}}
{{dsc inc|cpp/string/byte/dsc memcpy}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
{{cpp/title|stoi|stol|stoll}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl header|string}}
{{dcl|num=1|since=c++11|1=
int       stoi ( const std::string&amp; str,
                 std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl|num=2|since=c++11|1=
int       stoi ( const std::wstring&amp; str,
                 std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl|num=3|since=c++11|1=
long      stol ( const std::string&amp; str,
                 std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl|num=4|since=c++11|1=
long      stol ( const std::wstring&amp; str,
                 std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl|num=5|since=c++11|1=
long long stoll( const std::string&amp; str,
                 std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl|num=6|since=c++11|1=
long long stoll( const std::wstring&amp; str,
                 std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl end}}

Interprets a signed integer value in the string {{c|str}}.

Let {{c|ptr}} be an internal (to the conversion functions) pointer of type {{c/core|char*}} {{v|1,3,5}} or {{c/core|wchar_t*}} {{v|2,4,6}}, accordingly.

@1@ Calls {{c|std::strtol(str.c_str(), &amp;ptr, base)}}.
@2@ Calls {{c|std::wcstol(str.c_str(), &amp;ptr, base)}}.
@3@ Calls {{c|std::strtol(str.c_str(), &amp;ptr, base)}}.
@4@ Calls {{c|std::wcstol(str.c_str(), &amp;ptr, base)}}.
@5@ Calls {{c|std::strtoll(str.c_str(), &amp;ptr, base)}}.
@6@ Calls {{c|std::wcstoll(str.c_str(), &amp;ptr, base)}}.

{{cpp/string/cvt str2int base|base={{c|base}}}}

If {{c|pos}} is not a null pointer, then {{c|ptr}} will receive an address of the first unconverted character in {{c|str.c_str()}}, and the index of that character will be calculated and stored in {{c|*pos}}, giving the number of characters that were processed by the conversion.

===Parameters===
{{par begin}}
{{par|str|the string to convert}}
{{par|pos|address of an integer to store the number of characters processed}}
{{par|base|the number base}}
{{par end}}

===Return value===
Integer value corresponding to the content of {{c|str}}.

===Exceptions===
* {{lc|std::invalid_argument}} if no conversion could be performed.
* {{lc|std::out_of_range}} if the converted value would fall out of the range of the result type or if the underlying function ({{lc|std::strtol}} or {{lc|std::strtoll}}) sets {{lc|errno}} to {{lc|ERANGE}}.

===Example===
{{example|
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;
#include &lt;utility&gt;

int main()
{
    const auto data =
    {
        "45",
        "+45",
        " -45",
        "3.14159",
        "31337 with words",
        "words and 2",
        "12345678901",
    };
    
    for (const std::string s : data)
    {
        std::size_t pos{};
        try
        {
            std::cout &lt;&lt; "std::stoi(" &lt;&lt; std::quoted(s) &lt;&lt; "): ";
            const int i{std::stoi(s, &amp;pos)};
            std::cout &lt;&lt; i &lt;&lt; "; pos: " &lt;&lt; pos &lt;&lt; '\n';
        }
        catch (std::invalid_argument const&amp; ex)
        {
            std::cout &lt;&lt; "std::invalid_argument::what(): " &lt;&lt; ex.what() &lt;&lt; '\n';
        }
        catch (std::out_of_range const&amp; ex)
        {
            std::cout &lt;&lt; "std::out_of_range::what(): " &lt;&lt; ex.what() &lt;&lt; '\n';
            const long long ll{std::stoll(s, &amp;pos)};
            std::cout &lt;&lt; "std::stoll(" &lt;&lt; std::quoted(s) &lt;&lt; "): " &lt;&lt; ll
                      &lt;&lt; "; pos: " &lt;&lt; pos &lt;&lt; '\n';
        }
    }
    
    std::cout &lt;&lt; "\nCalling with different radixes:\n";
    for (const auto&amp; [s, base] : {std::pair&lt;const char*, int&gt;
        {"11",  2}, {"22",  3}, {"33",  4}, {"77",  8},
        {"99", 10}, {"FF", 16}, {"jJ", 20}, {"Zz", 36}&lt;!----&gt;})
    {
        const int i{std::stoi(s, nullptr, base)};
        std::cout &lt;&lt; "std::stoi(" &lt;&lt; std::quoted(s)
                  &lt;&lt; ", nullptr, " &lt;&lt; base &lt;&lt; "): " &lt;&lt; i &lt;&lt; '\n';
    }
}
|p=true
|output=
std::stoi("45"): 45; pos: 2
std::stoi("+45"): 45; pos: 3
std::stoi(" -45"): -45; pos: 4
std::stoi("3.14159"): 3; pos: 1
std::stoi("31337 with words"): 31337; pos: 5
std::stoi("words and 2"): std::invalid_argument::what(): stoi
std::stoi("12345678901"): std::out_of_range::what(): stoi
std::stoll("12345678901"): 12345678901; pos: 11

Calling with different radixes:
std::stoi("11", nullptr, 2): 3
std::stoi("22", nullptr, 3): 8
std::stoi("33", nullptr, 4): 15
std::stoi("77", nullptr, 8): 63
std::stoi("99", nullptr, 10): 99
std::stoi("FF", nullptr, 16): 255
std::stoi("jJ", nullptr, 20): 399
std::stoi("Zz", nullptr, 36): 1295
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2009|std=C++11|before={{lc|std::out_of_range}} would not be thrown if&lt;br&gt;{{lc|std::strtol}} or {{lc|std::strtoll}} sets {{lc|errno}} to {{lc|ERANGE}}|after=will throw}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc stoul}}
{{dsc inc|cpp/string/basic_string/dsc stof}}
{{dsc inc|cpp/string/byte/dsc strtol}}
{{dsc inc|cpp/string/byte/dsc strtoul}}
{{dsc inc|cpp/string/byte/dsc strtoimax}}
{{dsc inc|cpp/utility/dsc from_chars}}
{{dsc inc|cpp/string/byte/dsc atoi}}
{{dsc inc|cpp/string/basic_string/dsc to_string}}
{{dsc inc|cpp/string/basic_string/dsc to_wstring}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/string/basic_string/title|operator basic_string_view}}
{{cpp/string/basic_string/navbar}}
{{ddcl|since=c++17|notes={{mark constexpr since c++20}}|
operator std::basic_string_view&lt;CharT, Traits&gt;() const noexcept;
}}

Returns a {{lc|std::basic_string_view}}, constructed as if by {{c|std::basic_string_view&lt;CharT, Traits&gt;(data(), size())}}.

===Parameters===
(none)

===Return value===
A string view representing the entire contents of the string.

===Notes===
It is the programmer's responsibility to ensure that the resulting string view does not outlive the string.

{{source|1=
std::string get_string();
int f(std::string_view sv);

int x = f(get_string()); // OK
std::string_view sv = get_string(); // Bad: holds a dangling pointer
}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;

void show_wstring_size(std::wstring_view wcstr_v)
{
    std::cout &lt;&lt; wcstr_v.size() &lt;&lt; " code points\n";
}

int main()
{
    std::string cppstr = "ラーメン";   // narrow string
    std::wstring wcstr = L"ラーメン";  // wide string

    // Implicit conversion from string to string_view
    // via std::string::operator string_view:
    std::string_view cppstr_v = cppstr;

    std::cout &lt;&lt; cppstr_v &lt;&lt; '\n'
              &lt;&lt; cppstr_v.size() &lt;&lt; " code units\n";

    // Implicit conversion from wstring to wstring_view
    // via std::wstring::operator wstring_view:
    show_wstring_size(wcstr);
}
|output=
ラーメン
12 code units
4 code points
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc constructor}}
{{dsc end}}

{{langlinks|es|fr|ja|ru|zh}}
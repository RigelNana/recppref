{{cpp/title|to_string}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl header|string}}
{{dcl|num=1|since=c++11|
std::string to_string( int value );
}}
{{dcl|num=2|since=c++11|
std::string to_string( long value );
}}
{{dcl|num=3|since=c++11|
std::string to_string( long long value );
}}
{{dcl|num=4|since=c++11|
std::string to_string( unsigned value );
}}
{{dcl|num=5|since=c++11|
std::string to_string( unsigned long value );
}}
{{dcl|num=6|since=c++11|
std::string to_string( unsigned long long value );
}}
{{dcl|num=7|since=c++11|
std::string to_string( float value );
}}
{{dcl|num=8|since=c++11|
std::string to_string( double value );
}}
{{dcl|num=9|since=c++11|
std::string to_string( long double value );
}}
{{dcl end}}

Converts a numeric value to {{lc|std::string}}.

{{rrev multi|until1=c++26
|rev1=
Let {{tti|buf}} be an internal to the conversion functions buffer, sufficiently large to contain the result of conversion.

@1@ Converts a signed integer to a string as if by {{c|std::sprintf(buf, "%d", value)}}.
@2@ Converts a signed integer to a string as if by {{c|std::sprintf(buf, "%ld", value)}}.
@3@ Converts a signed integer to a string as if by {{c|std::sprintf(buf, "%lld", value)}}.
@4@ Converts an unsigned integer to a string as if by {{c|std::sprintf(buf, "%u", value)}}.
@5@ Converts an unsigned integer to a string as if by {{c|std::sprintf(buf, "%lu", value)}}.
@6@ Converts an unsigned integer to a string as if by {{c|std::sprintf(buf, "%llu", value)}}.
@7,8@ Converts a floating point value to a string as if by {{c|std::sprintf(buf, "%f", value)}}.
@9@ Converts a floating point value to a string as if by {{c|std::sprintf(buf, "%Lf", value)}}.
|rev2=
@1-9@ Converts a numeric value to a string as if by {{c|std::format("{}", value)}}.
}}

===Parameters===
{{par begin}}
{{par|value|a numeric value to convert}}
{{par end}}

===Return value===
A string holding the converted value.

===Exceptions===
May throw {{lc|std::bad_alloc}} from the {{lc|std::string}} constructor.

===Notes===
* With floating point types {{tt|std::to_string}} may yield unexpected results as the number of significant digits in the returned string can be zero, see the example.
* The return value may differ significantly from what {{tt|std::cout}} prints by default, see the example.
{{rrev|until=c++26|
* {{tt|std::to_string}} relies on the current C locale for formatting purposes, and therefore concurrent calls to {{tt|std::to_string}} from multiple threads may result in partial serialization of calls.
** The results of overloads for integer types do not rely on the current C locale, and thus implementations generally avoid access to the current C locale in these overloads for both correctness and performance. However, such avoidance is not guaranteed by the standard.
}}

C++17 provides {{ltt|cpp/utility/to_chars|std::to_chars}} as a higher-performance locale-independent alternative.

{{feature test macro|__cpp_lib_to_string|Redefining {{tt|std::to_string}} in terms of {{lc|std::format}}|std=C++26|value=202306L}}

===Example===
{{example
|code=
#include &lt;cstdio&gt;
#include &lt;format&gt;
#include &lt;initializer_list&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

#if __cpp_lib_to_string &gt;= 202306L
constexpr auto revision() { return " (post C++26)"; }
#else
constexpr auto revision() { return " (pre C++26)"; }
#endif

int main()
{
    for (const double f : {1.23456789555555, 23.43, 1e-9, 1e40, 1e-40, 123456789.0})
    {
        std::cout &lt;&lt; "to_string:\t" &lt;&lt; std::to_string(f) &lt;&lt; revision() &lt;&lt; '\n';

        // Before C++26, the output of std::to_string matches std::printf.
        std::printf("printf:\t\t%f\n", f);

        // As of C++26, the output of std::to_string matches std::format.
        std::cout &lt;&lt; std::format("format:\t\t{}\n", f);

        std::cout &lt;&lt; "std::cout:\t" &lt;&lt; f &lt;&lt; "\n\n";
    }
}
|p=true
|output=
to_string:      1.234568 (pre C++26)
printf:         1.234568
format:         1.23456789555555
std::cout:      1.23457

to_string:      23.430000 (pre C++26)
printf:         23.430000
format:         23.43
std::cout:      23.43

to_string:      0.000000 (pre C++26)
printf:         0.000000
format:         1e-09
std::cout:      1e-09

to_string:      10000000000000000303786028427003666890752.000000 (pre C++26)
printf:         10000000000000000303786028427003666890752.000000
format:         1e+40
std::cout:      1e+40

to_string:      0.000000 (pre C++26)
printf:         0.000000
format:         1e-40
std::cout:      1e-40

to_string:      123456789.000000 (pre C++26)
printf:         123456789.000000
format:         123456789
std::cout:      1.23457e+08
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc to_wstring}}
{{dsc inc|cpp/string/basic_string/dsc stoul}}
{{dsc inc|cpp/string/basic_string/dsc stol}}
{{dsc inc|cpp/string/basic_string/dsc stof}}
{{dsc inc|cpp/utility/dsc to_chars}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
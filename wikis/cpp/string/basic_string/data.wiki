{{cpp/string/basic_string/title|data}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl|num=1|notes={{mark noexcept since c++11}}&lt;br&gt;{{mark constexpr since c++20}}|
const CharT* data() const;
}}
{{dcl|num=2|notes={{mark constexpr since c++20}}|since=c++17|
CharT* data() noexcept;
}}
{{dcl end}}

Returns a pointer to the underlying array serving as character storage. The pointer is such that the range

{{rrev multi|until1=c++11
|rev1=
{{range|data()|data() + size()}}
|rev2=
{{closed range|data()|data() + size()}}
}}

is valid and the values in it correspond to the values stored in the string.

{{rrev multi|until1=c++11|rev1=
The returned array is not required to be null-terminated.

If {{lc|empty()}} returns {{c|true}}, the pointer is a non-null pointer that should not be dereferenced.
|rev2=
The returned array is null-terminated, that is, {{tt|data()}} and {{lc|c_str()}} perform the same function.

If {{lc|empty()}} returns {{c|true}}, the pointer points to a single null character.
}}

The pointer obtained from {{tt|data()}} may be invalidated by:
* Passing a non-const reference to the string to any standard library function, or
* Calling non-const member functions on the string, excluding {{rlpt|operator_at|operator[]()}}, {{lc|at()}}, {{lc|front()}}, {{lc|back()}}, {{lc|begin()}}, {{lc|end()}}, {{lc|rbegin()}}, {{lc|rend()}}.

@1@ Modifying the character array accessed through the const overload of {{tt|data}} has undefined behavior.
@2@ Modifying the past-the-end null terminator stored at {{tt|data() + }}{{lc|size()}} to any value other than {{tt|CharT()}} has undefined behavior.

===Parameters===
(none)

===Return value===
A pointer to the underlying character storage.

{{rrev multi|until1=c++11|rev1=
{{c|1=data()[i] == operator[](i)}} for every {{tt|i}} in {{range|0|size()}}.
|rev2=
{{c|1=data() + i == std::addressof(operator[](i))}} for every {{tt|i}} in {{closed range|0|size()}}.
}}

===Complexity===
Constant.

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;cstring&gt;
#include &lt;string&gt;

int main()
{
    std::string const s("Emplary");
    assert(s.size() == std::strlen(s.data()));
    assert(std::equal(s.begin(), s.end(), s.data()));
    assert(std::equal(s.data(), s.data() + s.size(), s.begin()));
    assert('\0' == *(s.data() + s.size()));
}
|output=
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc front}}
{{dsc inc|cpp/string/basic_string/dsc back}}
{{dsc inc|cpp/string/basic_string/dsc c_str}}
{{dsc inc|cpp/string/basic_string_view/dsc {{SUBPAGENAMEE}}}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
{{cpp/string/basic_string/title|find}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|anchor=no|num=1|noexcept=c++11|constexpr=c++20|1=
size_type find( const basic_string&amp; str, size_type pos = 0 ) const;
}}
{{dcla|anchor=no|num=2|constexpr=c++20|1=
size_type find( const CharT* s, size_type pos, size_type count ) const;
}}
{{dcla|anchor=no|num=3|constexpr=c++20|1=
size_type find( const CharT* s, size_type pos = 0 ) const;
}}
{{dcla|anchor=no|num=4|noexcept=c++11|constexpr=c++20|1=
size_type find( CharT ch, size_type pos = 0 ) const;
}}
{{dcla|anchor=no|num=5|since=c++17|constexpr=c++20|1=
template&lt; class StringViewLike &gt;
size_type find( const StringViewLike&amp; t,
                size_type pos = 0 ) const noexcept(/* see below */);
}}
{{dcl end}}

Finds the first substring equal to the given character sequence. Search begins at {{c|pos}}, i.e. the found substring must not begin in a position preceding {{c|pos}}.

@1@ Finds the first substring equal to {{c|str}}.

@2@ Finds the first substring equal to the range {{range|s|s + count}}. This range may contain null characters.

@@ If {{range|s|s + count}} is not a [[cpp/iterator#Ranges|valid range]], the behavior is undefined.

@3@ Finds the first substring equal to the character string pointed to by {{c|s}}. The length of the string is determined by the first null character using {{c|Traits::length(s)}}.

@@ If {{range|s|s + Traits::length(s)}} is not a [[cpp/iterator#Ranges|valid range]], the behavior is undefined.

@4@ Finds the first character {{c|ch}} (treated as a single-character substring by the formal rules below).

@5@ {{cpp/string/sv hack|finds the first substring equal to {{c|sv}}}}

Formally, a substring {{c|str}} is said to be ''found'' at position {{c|xpos}} if all of the following are {{c|true}}:
* {{c|1=xpos &gt;= pos}}
* {{c|1=xpos + str.size() &lt;= size()}}
* for all positions {{c|n}} in {{c|str}}, {{c|Traits::eq(at(xpos + n), str.at(n))}}.

In particular, this implies that
* a substring can be found only if {{c|1=pos &lt;= size() - str.size()}}
* an empty substring is found at {{c|pos}} if and only if {{c|1=pos &lt;= size()}}
* for a non-empty substring, if {{c|1=pos &gt;= size()}}, the function always returns {{lc|npos}}.

===Parameters===
{{par begin}}
{{par|str|string to search for}}
{{par|pos|position at which to start the search}}
{{par|count|length of substring to search for}}
{{par|s|pointer to a character string to search for}}
{{par|ch|character to search for}}
{{par|t|object (convertible to {{lc|std::basic_string_view}}) to search for}}
{{par end}}

===Return value===
Position of the first character of the found substring or {{lc|npos}} if no such substring is found.

===Exceptions===
@1,4@ Throws nothing.
@5@ {{noexcept|std::is_nothrow_convertible_v&lt;const T&amp;, std::basic_string_view&lt;CharT, Traits&gt;&gt;}}

{{cpp/strong exception safety guarantee}}

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

void print(int id, std::string::size_type n, std::string const&amp; s)
{
    std::cout &lt;&lt; id &lt;&lt; ") ";
    if (std::string::npos == n)
        std::cout &lt;&lt; "not found! n == npos\n";
    else
        std::cout &lt;&lt; "found @ n = " &lt;&lt; n &lt;&lt; ", substr(" &lt;&lt; n &lt;&lt; ") = "
                  &lt;&lt; std::quoted(s.substr(n)) &lt;&lt; '\n';
}

int main()
{
    std::string::size_type n;
    std::string const s = "This is a string"; /*
                             ^  ^  ^
                             1  2  3          */
    
    // search from beginning of string
    n = s.find("is");
    print(1, n, s);
    
    // search from position 5
    n = s.find("is", 5);
    print(2, n, s);
    
    // find a single character
    n = s.find('a');
    print(3, n, s);
    
    // find a single character
    n = s.find('q');
    print(4, n, s);
}
|output=
1) found @ n = 2, substr(2) = "is is a string"
2) found @ n = 5, substr(5) = "is a string"
3) found @ n = 8, substr(8) = "a string"
4) not found! n == npos
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=there was no exception safety guarantee|after=added strong exception safety guarantee}}
{{dr list item|wg=lwg|dr=2064|std=C++11|before=overloads {{v|3,4}} were noexcept|after=removed}}
{{dr list item|wg=lwg|dr=2946|std=C++17|before=overload {{v|5}} caused ambiguity in some cases|after=avoided by making it a template}}
{{dr list item|paper=P1148R0|std=C++11&lt;br&gt;C++17|before=noexcept for overloads {{v|4,5}} were&lt;br&gt;accidently dropped by LWG2064/LWG2946|after=restored}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc strstr}}
{{dsc inc|cpp/string/wide/dsc wcsstr}}
{{dsc inc|cpp/string/byte/dsc strchr}}
{{dsc inc|cpp/string/wide/dsc wcschr}}
{{dsc inc|cpp/string/basic_string/dsc rfind}}
{{dsc inc|cpp/string/basic_string/dsc find_first_of}}
{{dsc inc|cpp/string/basic_string/dsc find_first_not_of}}
{{dsc inc|cpp/string/basic_string/dsc find_last_of}}
{{dsc inc|cpp/string/basic_string/dsc find_last_not_of}}
{{dsc inc|cpp/string/basic_string_view/dsc find}}
{{dsc inc|cpp/algorithm/dsc search}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
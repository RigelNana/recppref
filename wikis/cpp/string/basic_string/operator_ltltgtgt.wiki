{{title|operator&lt;&lt;,&gt;&gt;{{small|(std::basic_string)}}}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl header|string}}
{{dcl|num=1|
template&lt; class CharT, class Traits, class Allocator &gt;
std::basic_ostream&lt;CharT, Traits&gt;&amp; 
    operator&lt;&lt;( std::basic_ostream&lt;CharT, Traits&gt;&amp; os, 
                const std::basic_string&lt;CharT, Traits, Allocator&gt;&amp; str );
}}
{{dcl|num=2|
template&lt; class CharT, class Traits, class Allocator &gt;
std::basic_istream&lt;CharT, Traits&gt;&amp; 
    operator&gt;&gt;( std::basic_istream&lt;CharT, Traits&gt;&amp; is, 
                std::basic_string&lt;CharT, Traits, Allocator&gt;&amp; str );
}}
{{dcl end}}

@1@ Behaves as a {{named req|FormattedOutputFunction}}. After constructing and checking the sentry object, [[cpp/named req/FormattedOutputFunction#Padding|determines the output format padding]].
&lt;!----&gt;
Then inserts each character from the resulting sequence {{c|seq}} (the contents of {{c|str}} plus padding) to the output stream {{c|os}} as if by calling {{c|os.rdbuf()-&gt;sputn(seq, n)}}, where {{c|n}} is {{c|std::max(os.width(), str.size())}}
&lt;!----&gt;
Finally, calls {{c|os.width(0)}} to cancel the effects of {{lc|std::setw}}, if any.
&lt;!----&gt;
{{rrev|since=c++17|
Equivalent to {{c|return os &lt;&lt; std::basic_string_view&lt;CharT, Traits&gt;(str);}}.
}}

@2@ Behaves as a {{named req|FormattedInputFunction}}. After constructing and checking the sentry object, which may skip leading whitespace, first clears {{c|str}} with {{c|str.erase()}}, then reads characters from {{c|is}} and appends them to {{c|str}} as if by {{c|str.append(1, c)}}, until one of the following conditions becomes true:
* {{tt|N}} characters are read, where {{tt|N}} is {{c|is.width()}} if {{c|is.width() &gt; 0}}, otherwise {{tt|N}} is {{c|str.max_size()}},
* the end-of-file condition occurs in the stream {{c|is}}, or
* {{c|std::isspace(c, is.getloc())}} is {{c|true}} for the next character {{c|c}} in {{c|is}} (this whitespace character remains in the input stream).
&lt;!----&gt;
If no characters are extracted then {{lc|std::ios::failbit}} is set on {{c|is}}, which may throw {{lc|std::ios_base::failure}}.
&lt;!----&gt;
Finally, calls {{c|is.width(0)}} to cancel the effects of {{lc|std::setw}}, if any. 

===Exceptions===
@1@ May throw {{lc|std::ios_base::failure}} if an exception is thrown during output.

@2@ May throw {{lc|std::ios_base::failure}} if no characters are extracted from {{c|is}} (e.g. the stream is at end of file, or consists of whitespace only), or if an exception is thrown during input.

===Parameters===
{{par begin}}
{{par|os|a character output stream}}
{{par|is|a character input stream}}
{{par|str|the string to be inserted or extracted}}
{{par end}}

===Return value===
@1@ {{c|os}}
@2@ {{c|is}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;

int main()
{
    std::string greeting = "Hello, whirled!";
    std::istringstream iss(greeting);
    
    std::string hello_comma, whirled, word;
    
    iss &gt;&gt; hello_comma;
    iss &gt;&gt; whirled;
    
    std::cout &lt;&lt; greeting &lt;&lt; '\n'
              &lt;&lt; hello_comma &lt;&lt; '\n' &lt;&lt; whirled &lt;&lt; '\n';
    
    // Reset the stream
    iss.clear();
    iss.seekg(0);
    
    while (iss &gt;&gt; word)
        std::cout &lt;&lt; '+' &lt;&lt; word &lt;&lt; '\n';
}
|output=
Hello, whirled!
Hello,
whirled!
+Hello,
+whirled!
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=25|std=C++98|before={{c|n}} was the smaller of {{c|os.width()}} and {{c|str.size()}}|after={{c|n}} is the larger of them}}
{{dr list item|wg=lwg|dr=90|std=C++98|before={{c|std::isspace(c, getloc())}} was used to check&lt;br&gt;for spaces, but {{tt|getloc}} is not declared in {{ltt|cpp/header/string|&lt;string&gt;}}|after=replaced {{c|getloc()}}&lt;br&gt;with {{c|is.getloc()}}}}
{{dr list item|wg=lwg|dr=91|std=C++98|before={{tt|operator&gt;&gt;}} did not behave&lt;br&gt;as a {{named req|FormattedInputFunction}}|after=behaves as a&lt;br&gt;{{named req|FormattedInputFunction}}}}
{{dr list item|wg=lwg|dr=211|std=C++98|before={{tt|operator&gt;&gt;}} did not set {{tt|failbit}} if no character is extracted|after=sets {{tt|failbit}}}}
{{dr list item|wg=lwg|dr=435|std=C++98|before=characters were inserted by {{c|os.rdbuf()-&gt;sputn(str.data(), n)}},&lt;br&gt;and the resolution of {{lwg|25}} made the behavior&lt;br&gt;undefined if {{c|os.width()}} is larger than {{c|str.size()}}|after=determines the padding&lt;br&gt;first and inserts the padded&lt;br&gt;character sequence instead}}
{{dr list item|wg=lwg|dr=586|std=C++98|before={{tt|operator&lt;&lt;}} did not behave&lt;br&gt;as a {{named req|FormattedOutputFunction}}|after=behaves as a&lt;br&gt;{{named req|FormattedOutputFunction}}}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc operator ltlt}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
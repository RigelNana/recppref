{{cpp/string/basic_string/title|rfind}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|anchor=no|num=1|noexcept=c++11|constexpr=c++20|1=
size_type rfind( const basic_string&amp; str, size_type pos = npos ) const;
}}
{{dcla|anchor=no|num=2|constexpr=c++20|1=
size_type rfind( const CharT* s, size_type pos, size_type count ) const;
}}
{{dcla|anchor=no|num=3|constexpr=c++20|1=
size_type rfind( const CharT* s, size_type pos = npos ) const;
}}
{{dcla|anchor=no|num=4|noexcept=c++11|constexpr=c++20|1=
size_type rfind( CharT ch, size_type pos = npos ) const;
}}
{{dcla|anchor=no|num=5|since=c++17|constexpr=c++20|1=
template&lt; class StringViewLike &gt;
size_type rfind( const StringViewLike&amp; t,
                 size_type pos = npos ) const noexcept(/* see below */);
}}
{{dcl end}}

Finds the last substring that is equal to the given character sequence. The search begins at {{c|pos}} and proceeds from right to left (thus, the found substring, if any, cannot begin in a position following {{c|pos}}). If {{lc|npos}} or any value not smaller than {{box|{{lc|size()}}{{c/core| - 1}}}} is passed as {{c|pos}}, the whole string will be searched.

@1@ Finds the last substring equal to {{c|str}}.

@2@ Finds the last substring equal to the range {{range|s|s + count}}. This range can include null characters.

@@ If {{range|s|s + count}} is not a [[cpp/iterator#Ranges|valid range]], the behavior is undefined.

@3@ Finds the last substring equal to the character string pointed to by {{c|s}}. The length of the string is determined by the first null character using {{c|Traits::length(s)}}.

@@ If {{range|s|s + Traits::length(s)}} is not a [[cpp/iterator#Ranges|valid range]], the behavior is undefined.

@4@ Finds the last character equal to {{c|ch}}.

@5@ {{cpp/string/sv hack|finds the last substring equal to the contents of {{c|sv}}}}

In all cases, equality is checked by calling {{ltt|cpp/string/char_traits/cmp|Traits::eq}}.

===Parameters===
{{par begin}}
{{par|str|string to search for}}
{{par|pos|position at which to begin searching}}
{{par|count|length of substring to search for}}
{{par|s|pointer to a character string to search for}}
{{par|ch|character to search for}}
{{par|t|object (convertible to {{lc|std::basic_string_view}}) to search for}}
{{par end}}

===Return value===
Position of the first character of the found substring or {{lc|npos}} if no such substring is found. Note that this is an offset from the start of the string, not the end.

If searching for an empty string (i.e., {{c|str.size()}}, {{c|count}}, or {{c|Traits::length(s)}} is zero), the empty string is found immediately and {{tt|rfind}} returns:
* {{c|pos}}, if {{c|pos &lt; size()}};
* {{c|size()}} otherwise, including the case where {{c|1=pos == npos}}.

Otherwise, if {{lc|size()}} is zero, {{lc|npos}} is always returned.

===Exceptions===
@1,4@ Throws nothing.
@5@ {{noexcept|std::is_nothrow_convertible_v&lt;const T&amp;, std::basic_string_view&lt;CharT, Traits&gt;&gt;}}

{{cpp/strong exception safety guarantee}}

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
 
void print(std::string::size_type n,
           std::string::size_type len,
           std::string const &amp;s)
{
    if (n == std::string::npos)
        std::cout &lt;&lt; "not found\n";
    else
        std::cout &lt;&lt; "found: " &lt;&lt; std::quoted(s.substr(n, len)) &lt;&lt; " at " &lt;&lt; n &lt;&lt; '\n';
}
 
int main()
{
    std::string::size_type n;
    std::string const s = "This is a string";
    
    // search backwards from end of string
    n = s.rfind("is");
    print(n, 2, s);
    
    // search backwards from position 4
    n = s.rfind("is", 4);
    print(n, 2, s);
    
    // find a single character
    n = s.rfind('s');
    print(n, 1, s);
    
    // find a single character
    n = s.rfind('q');
    print(n, 1, s);
    
    // find the prefix (see also s.starts_with("This"))
    n = s.rfind("This", 0);
    print(n, 4, s);
}
|output=
found: "is" at 5
found: "is" at 2
found: "s" at 10
not found
found: "This" at 0
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=there was no exception safety guarantee|after=added strong exception safety guarantee}}
{{dr list item|wg=lwg|dr=2064|std=C++11|before=overloads {{v|3,4}} were noexcept|after=removed}}
{{dr list item|wg=lwg|dr=2946|std=C++17|before=overload {{v|5}} caused ambiguity in some cases|after=avoided by making it a template}}
{{dr list item|paper=P1148R0|std=C++11&lt;br&gt;C++17|before=noexcept for overloads {{v|4,5}} were&lt;br&gt;accidently dropped by LWG2064/LWG2946|after=restored}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc find}}
{{dsc inc|cpp/string/basic_string/dsc find_first_of}}
{{dsc inc|cpp/string/basic_string/dsc find_first_not_of}}
{{dsc inc|cpp/string/basic_string/dsc find_last_of}}
{{dsc inc|cpp/string/basic_string/dsc find_last_not_of}}
{{dsc inc|cpp/string/basic_string_view/dsc rfind}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
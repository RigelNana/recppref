{{cpp/string/basic_string/title|assign}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|num=1|constexpr=c++20|
basic_string&amp; assign( const basic_string&amp; str );
}}
{{dcla|num=2|since=c++11|constexpr=c++20|
basic_string&amp; assign( basic_string&amp;&amp; str ) noexcept(/* see below */);
}}
{{dcla|num=3|constexpr=c++20|
basic_string&amp; assign( size_type count, CharT ch );
}}
{{dcla|num=4|constexpr=c++20|
basic_string&amp; assign( const CharT* s, size_type count );
}}
{{dcla|num=5|constexpr=c++20|
basic_string&amp; assign( const CharT* s );
}}
{{dcla|num=6|since=c++17|constexpr=c++20|
template&lt; class SV &gt;
basic_string&amp; assign( const SV&amp; t );
}}
{{dcla|num=7|since=c++17|constexpr=c++20|1=
template&lt; class SV &gt;
basic_string&amp; assign( const SV&amp; t,
                      size_type pos, size_type count = npos);
}}
{{dcl rev begin|num=8}}
{{dcl|until=c++14|
basic_string&amp; assign( const basic_string&amp; str,
                      size_type pos, size_type count );
}}
{{dcla|anchor=Version_8|since=c++14|constexpr=c++20|1=
basic_string&amp; assign( const basic_string&amp; str,
                      size_type pos, size_type count = npos);
}}
{{dcl rev end}}
{{dcla|num=9|constexpr=c++20|
template&lt; class InputIt &gt;
basic_string&amp; assign( InputIt first, InputIt last );
}}
{{dcla|num=10|since=c++11|constexpr=c++20|
basic_string&amp; assign( std::initializer_list&lt;CharT&gt; ilist );
}}
{{dcl end}}

Replaces the contents of the string.

@1@ Equivalent to {{c|1=return *this = str;}}.

@2@ Equivalent to {{c|1=return *this = std::move(str);}}.

@3@ Replaces the contents with {{c|count}} copies of character {{c|ch}}.
@@ Equivalent to {{c|clear(); resize(n, c); return *this;}}.

@4@ Replaces the contents with copies of the characters in the range {{range|s|s + count}}.
@@ If {{range|s|s + count}} is not a [[cpp/iterator#Ranges|valid range]], the behavior is undefined.

@5@ Equivalent to {{c|return assign(s, Traits::length(s));}}.

@6,7@ Replaces the contents with characters in a string view {{c|sv}} constructed from {{c|t}}.
* If only {{c|t}} is provided, replaces the contents with all characters in {{c|sv}}.
* If {{c|pos}} is also provided:
** If {{c|count}} is {{box|{{rlpt|/#Data members|npos}}}}, replaces the contents with all characters in {{c|sv}} starting from {{c|pos}}.
** Otherwise, replaces the contents with the {{c|std::min(count, sv.size() - pos)}} characters in {{c|sv}} starting from {{c|pos}}.
@@ {{cpp/enable if|plural=yes|all following conditions are satisfied}}:
* {{c|std::is_convertible_v&lt;const SV&amp;, std::basic_string_view&lt;CharT, Traits&gt;&gt;}} is {{c|true}}.
* {{c|std::is_convertible_v&lt;const SV&amp;, const CharT*&gt;}} is {{c|false}}.
:@6@ Equivalent to {{c multi|std::basic_string_view&lt;CharT, Traits&gt; sv {{=}} t;|return assign(sv.data(), sv.size());}}.
:@7@ Equivalent to {{c multi|std::basic_string_view&lt;CharT, Traits&gt; sv {{=}} t;|return assign(sv.substr(pos, count));}}.

@8@ Replaces the contents with characters in {{c|str}}.
* If {{c|count}} is {{box|{{rlpt|/#Data members|npos}}}}, replaces the contents with all characters in {{c|str}} starting from {{c|pos}}.
* Otherwise, replaces the contents with the {{c|std::min(count, str.size() - pos)}} characters in {{c|str}} starting from {{c|pos}}.

{{rrev|since=c++20|
@@ Equivalent to {{c multi|return assign(std::basic_string_view&lt;CharT, Traits&gt;|                  (str).substr(pos, count));}}.
}}

@9@ Equivalent to {{c|return assign(basic_string(first, last, get_allocator()));}}.
{{rrev|since=c++11|
{{cpp/enable if|{{tt|InputIt}} satisfies the requirements of {{named req|InputIterator}}}}.
}}

@10@ Equivalent to {{c|return assign(ilist.begin(), ilist.size());}}.

===Parameters===
{{par begin}}
{{par|str|string to be used as source to initialize the characters with}}
{{par|count|size of the resulting string}}
{{par|ch|value to initialize characters of the string with}}
{{par|s|pointer to a character string to use as source to initialize the string with}}
{{par|t|object (convertible to {{lc|std::basic_string_view}}) to initialize the characters of the string with}}
{{par|pos|index of the first character to take}}
{{par|first, last|range to copy the characters from}}
{{par|ilist|{{lc|std::initializer_list}} to initialize the characters of the string with}}
{{par end}}

===Return value===
{{c|*this}}

===Exceptions===
@2@ {{noexcept|std::allocator_traits&lt;Allocator&gt;::
             propagate_on_container_move_assignment::value {{!!}}
         std::allocator_traits&lt;Allocator&gt;::is_always_equal::value}}

{{cpp/string/basic_string/length error note}}

@7@ If {{c|pos &gt; sv.size()}} is {{c|true}}, throws {{lc|std::out_of_range}}.

@8@ If {{c|pos &gt; str.size()}} is {{c|true}}, throws {{lc|std::out_of_range}}.

{{cpp/strong exception safety guarantee}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;

int main()
{
    std::string s;
    // assign(size_type count, CharT ch)
    s.assign(4, '=');
    std::cout &lt;&lt; s &lt;&lt; '\n'; // "===="
    
    std::string const c("Exemplary");
    // assign(const basic_string&amp; str)
    s.assign(c);
    std::cout &lt;&lt; c &lt;&lt; " == " &lt;&lt; s &lt;&lt; '\n'; // "Exemplary == Exemplary"
    
    // assign(const basic_string&amp; str, size_type pos, size_type count)
    s.assign(c, 0, c.length() - 1);
    std::cout &lt;&lt; s &lt;&lt; '\n'; // "Exemplar";
    
    // assign(basic_string&amp;&amp; str)
    s.assign(std::string("C++ by ") + "example");
    std::cout &lt;&lt; s &lt;&lt; '\n'; // "C++ by example"
    
    // assign(const CharT* s, size_type count)
    s.assign("C-style string", 7);
    std::cout &lt;&lt; s &lt;&lt; '\n'; // "C-style"
    
    // assign(const CharT* s)
    s.assign("C-style\0string");
    std::cout &lt;&lt; s &lt;&lt; '\n'; // "C-style"
    
    char mutable_c_str[] = "C-style string";
    // assign(InputIt first, InputIt last)
    s.assign(std::begin(mutable_c_str), std::end(mutable_c_str) - 1);
    std::cout &lt;&lt; s &lt;&lt; '\n'; // "C-style string"
    
    // assign(std::initializer_list&lt;CharT&gt; ilist)
    s.assign({'C', '-', 's', 't', 'y', 'l', 'e'});
    std::cout &lt;&lt; s &lt;&lt; '\n'; // "C-style"
}
|output=
====
Exemplary == Exemplary
Exemplar
C++ by example
C-style
C-style
C-style string
C-style
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=there was no exception safety guarantee|after=added strong exception safety guarantee}}
{{dr list item|wg=lwg|dr=2063|std=C++11|before=non-normative note stated that overload {{vl|2}}&lt;br&gt;can be implemented by swapping|after=corrected to require move assignment}}
{{dr list item|wg=lwg|dr=2250|std=C++98|before=the behavior of overload {{vl|8}} was&lt;br&gt;undefined if {{c|pos &gt; str.size()}} is {{c|true}}|after=always throws an exception in this case}}
{{dr list item|wg=lwg|dr=2579|std=C++98|before=overload {{vl|1}} and the copy assignment&lt;br&gt;operator had different effects|after=they have the same effect}}
{{dr list item|wg=lwg|dr=2946|std=C++17|before=overload {{vl|6}} caused ambiguity in some cases|after=avoided by making it a template}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc assign_range}}
{{dsc inc|cpp/string/basic_string/dsc constructor}}
{{dsc inc|cpp/string/basic_string/dsc operator{{=}}}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
{{cpp/string/basic_string/title|find_last_not_of}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|anchor=no|num=1|noexcept=c++11|constexpr=c++20|1=
size_type find_last_not_of( const basic_string&amp; str,
                            size_type pos = npos ) const;
}}
{{dcla|anchor=no|num=2|constexpr=c++20|1=
size_type find_last_not_of( const CharT* s,
                            size_type pos, size_type count ) const;
}}
{{dcla|anchor=no|num=3|constexpr=c++20|1=
size_type find_last_not_of( const CharT* s, size_type pos = npos ) const;
}}
{{dcla|anchor=no|num=4|noexcept=c++11|constexpr=c++20|1=
size_type find_last_not_of( CharT ch, size_type pos = npos ) const;
}}
{{dcla|anchor=no|num=5|since=c++17|constexpr=c++20|1=
template&lt; class StringViewLike &gt;
size_type
    find_last_not_of( const StringViewLike&amp; t,
                      size_type pos = npos ) const noexcept(/* see below */);
}}
{{dcl end}}

Finds the last character equal to none of the characters in the given character sequence. The search considers only the range {{closed range|0|pos}}. If all characters in the range can be found in the given character sequence, {{lc|npos}} will be returned.

@1@ Finds the last character equal to none of characters in {{c|str}}.

@2@ Finds the last character equal to none of characters in the range {{range|s|s + count}}. This range can include null characters.

@@ If {{range|s|s + count}} is not a [[cpp/iterator#Ranges|valid range]], the behavior is undefined.

@3@ Finds the last character equal to none of characters in character string pointed to by {{c|s}}. The length of the string is determined by the first null character using {{c|Traits::length(s)}}.

@@ If {{range|s|s + Traits::length(s)}} is not a [[cpp/iterator#Ranges|valid range]], the behavior is undefined.

@4@ Finds the last character not equal to {{c|ch}}.

@5@ {{cpp/string/sv hack|finds the last character equal to none of characters in {{c|sv}}}}

In all cases, equality is checked by calling {{l2tt|cpp/string/char_traits/cmp|eq|Traits}}.

===Parameters===
{{par begin}}
{{par|str|string identifying characters to search for}}
{{par|pos|position at which to end search}}
{{par|count|length of character string identifying characters to search for}}
{{par|s|pointer to a character string identifying characters to search for}}
{{par|ch|character identifying characters to search for}}
{{par|t|object (convertible to {{lc|std::basic_string_view}}) identifying characters to search for}}
{{par end}}

===Return value===
Position of the found character or {{lc|npos}} if no such character is found.

===Exceptions===
@1,4@ Throws nothing.
@5@ {{noexcept|std::is_nothrow_convertible_v&lt;
    const T&amp;, std::basic_string_view&lt;CharT, Traits&gt;&gt;}}

{{cpp/strong exception safety guarantee}}

===Example===
{{example|
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;

void show_pos(const std::string&amp; str, std::string::size_type found)
{
    if (found != std::string::npos)
        std::cout &lt;&lt; '[' &lt;&lt; found &lt;&lt; "] = \'" &lt;&lt; str[found] &lt;&lt; "\'\n";
    else
        std::cout &lt;&lt; "not found\n";
}

int main()
{
    std::string str{"abc_123"};
    char const* skip_set{"0123456789"};
    std::string::size_type str_last_pos{std::string::npos};
    
    show_pos(str, str.find_last_not_of(skip_set)); // [3] = '_'
    
    str_last_pos = 2;
    show_pos(str, str.find_last_not_of(skip_set, str_last_pos)); // [2] = 'c'
    
    str_last_pos = 2;
    show_pos(str, str.find_last_not_of('c', str_last_pos)); // [1] = 'b'
    
    const char arr[]{'3', '4', '5'};
    show_pos(str, str.find_last_not_of(arr)); // [5] = '2'
    
    str_last_pos = 2;
    std::string::size_type skip_set_size{4};
    show_pos(str, str.find_last_not_of(skip_set,
                                       str_last_pos,
                                       skip_set_size)); // [2] = 'c'
    
    show_pos(str, str.find_last_not_of("abc")); // [6] = '3'
    
    str_last_pos = 2;
    show_pos(str, str.find_last_not_of("abc", str_last_pos)); // not found
}
|output=
[3] = '_'
[2] = 'c'
[1] = 'b'
[5] = '2'
[2] = 'c'
[6] = '3'
not found
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=141|std=C++98|before=overload (1) could only return {{lc|npos}} if {{c|1=pos &gt;= size()}}|after=the search range is&lt;br&gt;{{range|0|size()}} in this case}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=there was no exception safety guarantee|after=added strong exception safety guarantee}}
{{dr list item|wg=lwg|dr=2064|std=C++11|before=overloads {{v|3,4}} were noexcept|after=removed}}
{{dr list item|wg=lwg|dr=2946|std=C++17|before=overload {{v|5}} caused ambiguity in some cases|after=avoided by making it a template}}
{{dr list item|paper=P1148R0|std=C++11&lt;br&gt;C++17|before=noexcept for overloads {{v|4,5}} were&lt;br&gt;accidentally dropped by LWG2064/LWG2946|after=restored}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc find}}
{{dsc inc|cpp/string/basic_string/dsc rfind}}
{{dsc inc|cpp/string/basic_string/dsc find_first_of}}
{{dsc inc|cpp/string/basic_string/dsc find_first_not_of}}
{{dsc inc|cpp/string/basic_string/dsc find_last_of}}
{{dsc inc|cpp/string/basic_string_view/dsc {{SUBPAGENAMEE}}}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
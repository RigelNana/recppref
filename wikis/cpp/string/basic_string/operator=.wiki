{{cpp/string/basic_string/title|operator{{=}}}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|anchor=no|num=1|constexpr=c++20|1=
basic_string&amp; operator=( const basic_string&amp; str );
}}
{{dcla|anchor=no|num=2|since=c++11|constexpr=c++20|1=
basic_string&amp; operator=( basic_string&amp;&amp; str )
    noexcept(/* see below */);
}}
{{dcla|anchor=no|num=3|constexpr=c++20|1=
basic_string&amp; operator=( const CharT* s );
}}
{{dcla|anchor=no|num=4|constexpr=c++20|1=
basic_string&amp; operator=( CharT ch );
}}
{{dcla|anchor=no|num=5|since=c++11|constexpr=c++20|1=
basic_string&amp; operator=( std::initializer_list&lt;CharT&gt; ilist );
}}
{{dcla|num=6|since=c++17|constexpr=c++20|1=
template&lt;class StringViewLike&gt;
basic_string&amp; operator=( const StringViewLike&amp; t );
}}
{{dcl|num=7|since=c++23|1=
basic_string&amp; operator=( std::nullptr_t ) = delete;
}}
{{dcl end}}

Replaces the contents of the string.

@1@ Replaces the contents with a copy of {{c|str}}. If {{c|*this}} and {{c|str}} are the same object, this function has no effect.

@2@ Replaces the contents with those of {{c|str}} using {{named req|SequenceContainer}}'s move assignment semantics.
@@ Unlike other sequence container move assignments, references, pointers, and iterators to elements of {{c|str}} may be invalidated.
@3@ Replaces the contents with those of null-terminated character string pointed to by {{c|s}} as if by {{c|assign(s, Traits::length(s))}}.
@4@ Replaces the contents with character {{c|ch}} as if by {{c|assign(std::addressof(ch), 1)}}.
@5@ Replaces the contents with those of the initializer list {{c|ilist}} as if by {{c|assign(ilist.begin(), ilist.size())}}.
@6@ {{cpp/string/sv hack|replaces the contents with those of the {{c|sv}} as if by {{c|assign(sv)}}}}
@7@ {{tt|std::basic_string}} cannot be assigned from {{c|nullptr}}.

===Parameters===
{{par begin}}
{{par|ch|value to initialize characters of the string with}}
{{par|str|string to be used as source to initialize the string with}}
{{par|s|pointer to a null-terminated character string to use as source to initialize the string with}}
{{par|ilist|{{lc|std::initializer_list}} to initialize the string with}}
{{par|t|object convertible to {{lc|std::basic_string_view}} to initialize the string with}}
{{par end}} 

===Return value===
{{c|*this}}

===Complexity===
@1@ Linear in size of {{c|str}}.

@2@ Linear in the size of {{c|*this}} (formally, each {{tt|CharT}} has to be destroyed). If allocators do not compare equal and do not propagate, then also linear in the size of {{c|str}} (copy must be made).

@3@ Linear in size of {{c|s}}.

@4@ Constant.

@5@ Linear in size of {{c|ilist}}.

@6@ Linear in size of {{c|t}}.

===Exceptions===
@2@ {{noexcept|std::allocator_traits&lt;Allocator&gt;::
             propagate_on_container_move_assignment::value {{!!}}
         std::allocator_traits&lt;Allocator&gt;::is_always_equal::value}}

{{cpp/string/basic_string/length error note}}

{{cpp/strong exception safety guarantee}}

===Example===
{{example|
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::string str1;
    std::string str2{"alpha"};
    
    // (1) operator=(const basic_string&amp;);
    str1 = str2;
    std::cout &lt;&lt; std::quoted(str1) &lt;&lt; ' '   // "alpha"
              &lt;&lt; std::quoted(str2) &lt;&lt; '\n'; // "alpha"
    
    // (2) operator=(basic_string&amp;&amp;);
    str1 = std::move(str2);
    std::cout &lt;&lt; std::quoted(str1) &lt;&lt; ' '   // "alpha"
              &lt;&lt; std::quoted(str2) &lt;&lt; '\n'; // "" or "alpha" (unspecified)
    
    // (3) operator=(const CharT*);
    str1 = "beta";
    std::cout &lt;&lt; std::quoted(str1) &lt;&lt; '\n'; // "beta"
    
    // (4) operator=(CharT);
    str1 = '!'; 
    std::cout &lt;&lt; std::quoted(str1) &lt;&lt; '\n'; // "!"
    
    // (5) operator=(std::initializer_list&lt;CharT&gt;);
    str1 = {'g', 'a', 'm', 'm', 'a'};
    std::cout &lt;&lt; std::quoted(str1) &lt;&lt; '\n'; // "gamma"
    
    // (6) operator=(const T&amp;);
    str1 = 35U; // equivalent to str1 = static_cast&lt;char&gt;(35U);
    std::cout &lt;&lt; std::quoted(str1) &lt;&lt; '\n'; // "#" (ASCII = 35)
}
|p=true
|output=
"alpha" "alpha"
"alpha" ""
"beta"
"!"
"gamma"
"#"
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=there was no exception safety guarantee|after=added strong exception safety guarantee}}
{{dr list item|wg=lwg|dr=2063|std=C++11|before=the move assignment operator did not follow&lt;br&gt;{{named req|SequenceContainer}}'s semantic requirement|after=follows}}
{{dr list item|wg=lwg|dr=2946|std=C++17|before=overload {{vl|6}} caused ambiguity in some cases|after=avoided by making it a template}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc constructor}}
{{dsc inc|cpp/string/basic_string/dsc assign}}
{{dsc inc|cpp/string/basic_string_view/dsc operator{{=}}}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
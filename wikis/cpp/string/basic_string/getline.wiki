{{cpp/title|getline}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl header|string}}
{{dcl|num=1|1=
template&lt; class CharT, class Traits, class Allocator &gt;
std::basic_istream&lt;CharT, Traits&gt;&amp;
    getline( std::basic_istream&lt;CharT, Traits&gt;&amp; input,
             std::basic_string&lt;CharT, Traits, Allocator&gt;&amp; str, CharT delim );
}}
{{dcl|since=c++11|num=2|1=
template&lt; class CharT, class Traits, class Allocator &gt;
std::basic_istream&lt;CharT, Traits&gt;&amp;
    getline( std::basic_istream&lt;CharT, Traits&gt;&amp;&amp; input,
             std::basic_string&lt;CharT, Traits, Allocator&gt;&amp; str, CharT delim );
}}
{{dcl|num=3|1=
template&lt; class CharT, class Traits, class Allocator &gt;
std::basic_istream&lt;CharT, Traits&gt;&amp;
    getline( std::basic_istream&lt;CharT, Traits&gt;&amp; input,
             std::basic_string&lt;CharT, Traits, Allocator&gt;&amp; str );
}}
{{dcl|since=c++11|num=4|1=
template&lt; class CharT, class Traits, class Allocator &gt;
std::basic_istream&lt;CharT, Traits&gt;&amp;
    getline( std::basic_istream&lt;CharT, Traits&gt;&amp;&amp; input,
             std::basic_string&lt;CharT, Traits, Allocator&gt;&amp; str );
}}
{{dcl end}}

{{tt|getline}} reads characters from an input stream and places them into a string:

@1,2@ Behaves as {{named req|UnformattedInputFunction}}, except that {{c|input.gcount()}} is not affected. After constructing and checking the sentry object, performs the following:
:@1@ Calls {{c|str.erase()}}.
:@2@ Extracts characters from {{c|input}} and appends them to {{c|str}} until one of the following occurs (checked in the order listed)
::@a@ end-of-file condition on {{c|input}}, in which case, {{tt|getline}} sets {{ltt|cpp/io/ios_base/iostate|eofbit}}.
::@b@ the next available input character is {{c|delim}}, as tested by {{c|Traits::eq(c, delim)}}, in which case the delimiter character is extracted from {{c|input}}, but is not appended to {{c|str}}.
::@c@ {{c|str.max_size()}} characters have been stored, in which case {{tt|getline}} sets {{ltt|cpp/io/ios_base/iostate|failbit}} and returns.
:@3@ If no characters were extracted for whatever reason (not even the discarded delimiter), {{tt|getline}} sets {{ltt|cpp/io/ios_base/iostate|failbit}} and returns.

@3,4@ Same as {{c|getline(input, str, input.widen('\n'))}}, that is, the default delimiter is the endline character.

===Parameters===
{{par begin}}
{{par|input|the stream to get data from}}
{{par|str|the string to put the data into}}
{{par|delim|the delimiter character}}
{{par end}}

===Return value===
{{c|input}}

===Notes===
When consuming whitespace-delimited input (e.g. {{c|int n; std::cin &gt;&gt; n;}}) any whitespace that follows, including a newline character, will be left on the input stream. Then when switching to line-oriented input, the first line retrieved with {{tt|getline}} will be just that whitespace. In the likely case that this is unwanted behaviour, possible solutions include:
* An explicit extraneous initial call to {{tt|getline}}.
* Removing consecutive whitespace with {{c|std::cin &gt;&gt; std::ws}}.
* Ignoring all leftover characters on the line of input with {{c|cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n');}}.

===Example===
{{example
|p=true
|The following example demonstrates how to use the {{tt|getline}} function to read user input, and to process a stream line by line, or by parts of a line using the {{c|delim}} parameter.
|code=
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;

int main()
{
    // greet the user
    std::string name;
    std::cout &lt;&lt; "What is your name? ";
    std::getline(std::cin, name);
    std::cout &lt;&lt; "Hello " &lt;&lt; name &lt;&lt; ", nice to meet you.\n";

    // read file line by line
    std::istringstream input;
    input.str("1\n2\n3\n4\n5\n6\n7\n");
    int sum = 0;
    for (std::string line; std::getline(input, line);)
        sum += std::stoi(line);
    std::cout &lt;&lt; "\nThe sum is " &lt;&lt; sum &lt;&lt; ".\n\n";

    // use separator to read parts of the line
    std::istringstream input2;
    input2.str("a;b;c;d");
    for (std::string line; std::getline(input2, line, ';');)
        std::cout &lt;&lt; line &lt;&lt; '\n';
}
|p=true
|output=
What is your name? John Q. Public
Hello John Q. Public, nice to meet you.

The sum is 28.

a
b
c
d
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=91|std=C++98|before={{tt|getline}} did not behave as an unformatted input function|after=behaves as an unformatted input function}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/io/basic_istream/dsc getline}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
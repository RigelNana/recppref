{{cpp/string/basic_string/title|max_size}}
{{cpp/string/basic_string/navbar}}
{{ddcla|noexcept=c++11|constexpr=c++20|
size_type max_size() const;
}}

Returns the maximum number of elements the string is able to hold due to system or library implementation limitations, i.e. {{c|std::distance(begin(), end())}} for the largest string.

===Parameters===
(none)

===Return value===
Maximum number of characters.

===Complexity===
Constant.

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;climits&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;string&gt;
#include &lt;typeinfo&gt;

#include &lt;boost/core/demangle.hpp&gt;

template&lt;typename T&gt;
void print_basic_string_max_size()
{
    std::basic_string&lt;T&gt; s;
    auto max_size = s.max_size();
    std::cout.imbue(std::locale("en_US.UTF-8"));
    std::cout &lt;&lt; "basic_string&lt;" &lt;&lt; boost::core::demangle(typeid(T).name())
              &lt;&lt; "&gt;:\n\t" &lt;&lt; max_size &lt;&lt; " = ";
    std::cout &lt;&lt; std::setprecision(3) &lt;&lt; (double) max_size &lt;&lt; " = ";
    std::cout.imbue(std::locale("C"));
    std::cout &lt;&lt; std::hex &lt;&lt; std::setfill('0') &lt;&lt; "0x"
              &lt;&lt; std::setw(sizeof(typename decltype(s)::size_type) &lt;&lt; 1)
              &lt;&lt; max_size &lt;&lt; '\n' &lt;&lt; std::dec;
};

int main()
{
    std::cout &lt;&lt; "Pointer size: " &lt;&lt; CHAR_BIT * sizeof(void*) &lt;&lt; " bits\n"
                 "Maximum sizes:\n";

    print_basic_string_max_size&lt;char&gt;();
    print_basic_string_max_size&lt;char16_t&gt;();
    print_basic_string_max_size&lt;char32_t&gt;();
    print_basic_string_max_size&lt;wchar_t&gt;();
    print_basic_string_max_size&lt;long&gt;();

    using CharT = std::array&lt;char, 01232&gt;;
    print_basic_string_max_size&lt;CharT&gt;();
}
|p=true
|output=
Pointer size: 64 bits
Maximum sizes:
basic_string&lt;char&gt;:
        9,223,372,036,854,775,807 = 9.22e+18 = 0x7fffffffffffffff
basic_string&lt;char16_t&gt;:
        4,611,686,018,427,387,903 = 4.61e+18 = 0x3fffffffffffffff
basic_string&lt;char32_t&gt;:
        2,305,843,009,213,693,951 = 2.31e+18 = 0x1fffffffffffffff
basic_string&lt;wchar_t&gt;:
        2,305,843,009,213,693,951 = 2.31e+18 = 0x1fffffffffffffff
basic_string&lt;long&gt;:
        1,152,921,504,606,846,975 = 1.15e+18 = 0x0fffffffffffffff
basic_string&lt;std::array&lt;char, 666ul&gt;&gt;:
        13,848,906,962,244,407 = 1.38e+16 = 0x00313381ec031337
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc size}}
{{dsc inc|cpp/string/basic_string_view/dsc size}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
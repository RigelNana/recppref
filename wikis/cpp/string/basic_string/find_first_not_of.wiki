{{cpp/string/basic_string/title|find_first_not_of}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|anchor=no|num=1|noexcept=c++11|constexpr=c++20|1=
size_type find_first_not_of( const basic_string&amp; str,
                             size_type pos = 0 ) const;
}}
{{dcla|anchor=no|num=2|constexpr=c++20|1=
size_type find_first_not_of( const CharT* s,
                             size_type pos, size_type count ) const;
}}
{{dcla|anchor=no|num=3|constexpr=c++20|1=
size_type find_first_not_of( const CharT* s,
                             size_type pos = 0 ) const;
}}
{{dcla|anchor=no|num=4|noexcept=c++11|constexpr=c++20|1=
size_type find_first_not_of( CharT ch, size_type pos = 0 ) const;
}}
{{dcla|anchor=no|num=5|since=c++17|constexpr=c++20|1=
template&lt; class StringViewLike &gt;
size_type
    find_first_not_of( const StringViewLike&amp; t,
                       size_type pos = 0 ) const noexcept(/* see below */);
}}
{{dcl end}}

Finds the first character equal to none of the characters in the given character sequence. The search considers only the range {{range/core|{{c|pos}}|{{lc|size()}}}}. If all characters in the range can be found in the given character sequence, {{lc|npos}} will be returned.

@1@ Finds the first character equal to none of characters in {{c|str}}.

@2@ Finds the first character equal to none of characters in range {{range|s|s + count}}. This range can include null characters.

@@ If {{range|s|s + count}} is not a [[cpp/iterator#Ranges|valid range]], the behavior is undefined.

@3@ Finds the first character equal to none of characters in character string pointed to by {{c|s}}. The length of the string is determined by the first null character using {{tt|Traits::length(s)}}.

@@ If {{range|s|s + Traits::length(s)}} is not a [[cpp/iterator#Ranges|valid range]], the behavior is undefined.

@4@ Finds the first character not equal to {{c|ch}}.

@5@ {{cpp/string/sv hack|finds the first character equal to none of characters in {{c|sv}}}}

In all cases, equality is checked by calling {{ltt|cpp/string/char_traits/cmp|Traits::eq}}.

===Parameters===
{{par begin}}
{{par|str|string identifying characters to search for}}
{{par|pos|position for the search to start from}}
{{par|count|length of character string identifying characters to search for}}
{{par|s|pointer to a character string identifying characters to search for}}
{{par|ch|character identifying characters to search for}}
{{par|t|object (convertible to {{lc|std::basic_string_view}}) identifying characters to search for}}
{{par end}}

===Return value===
Position of the found character or {{lc|std::string::npos}} if no such character is found.

===Exceptions===
@1,4@ Throws nothing.
@5@ {{noexcept|std::is_nothrow_convertible_v&lt;const T&amp;, std::basic_string_view&lt;CharT, Traits&gt;&gt;}}

{{cpp/strong exception safety guarantee}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    // Permit uppercase letters, lowercase letters and numbers in macro names
    const char* pattern = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                          "abcdefghijklmnopqrstuvwxyz"
                          "0123456789";

    std::string data = "1) %FIX, 2) %HACK, and 3) %TODO";
    const std::string replacement = "%DONE%";

    std::cout &lt;&lt; "Before: " &lt;&lt; data &lt;&lt; '\n';

    for (std::string::size_type first{}, last{};
        (first = data.find('%', first)) != std::string::npos;
        first += replacement.size())
    {
        last = data.find_first_not_of(pattern, first + 1);
        if (last == std::string::npos)
            last = data.length();

        // Now first at '%' and last is one past end of the found substring
        data.replace(first, last - first, replacement);
    }

    std::cout &lt;&lt; "After: " &lt;&lt; data &lt;&lt; '\n';
}
|output=
Before: 1) %FIX, 2) %HACK, and 3) %TODO
After: 1) %DONE%, 2) %DONE%, and 3) %DONE%
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=there was no exception safety guarantee|after=added strong exception safety guarantee}}
{{dr list item|wg=lwg|dr=2064|std=C++11|before=overloads {{v|3,4}} were noexcept|after=removed}}
{{dr list item|wg=lwg|dr=2946|std=C++17|before=overload {{v|5}} caused ambiguity in some cases|after=avoided by making it a template}}
{{dr list item|paper=P1148R0|std=C++11&lt;br&gt;C++17|before=noexcept for overloads {{v|4,5}} were&lt;br&gt;accidentally dropped by LWG2064/LWG2946|after=restored}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc find}}
{{dsc inc|cpp/string/basic_string/dsc rfind}}
{{dsc inc|cpp/string/basic_string/dsc find_first_of}}
{{dsc inc|cpp/string/basic_string/dsc find_last_of}}
{{dsc inc|cpp/string/basic_string/dsc find_last_not_of}}
{{dsc inc|cpp/string/basic_string_view/dsc find_first_not_of}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/string/basic_string/title|operator+{{=}}}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|1=
basic_string&amp; operator+=( const basic_string&amp; str );
}}
{{dcl|num=2|notes={{mark constexpr since c++20}}|1=
basic_string&amp; operator+=( CharT ch );
}}
{{dcl|num=3|notes={{mark constexpr since c++20}}|1=
basic_string&amp; operator+=( const CharT* s );
}}
{{dcl|num=4|notes={{mark constexpr since c++20}}|since=c++11|1=
basic_string&amp; operator+=( std::initializer_list&lt;CharT&gt; ilist );
}}
{{dcl|num=5|notes={{mark constexpr since c++20}}|since=c++17|1=
template&lt; class StringViewLike &gt;
basic_string&amp; operator+=( const StringViewLike&amp; t );
}}
{{dcl end}}

Appends additional characters to the string.

@1@ Appends string {{c|str}}.

@2@ Appends character {{c|ch}}.

@3@ Appends the null-terminated character string pointed to by {{c|s}}. 

@4@ Appends characters in the initializer list {{c|ilist}}.

@5@ {{cpp/string/sv hack|appends characters in the string view {{c|sv}} as if by {{c|append(sv)}}}}

===Parameters===
{{par begin}}
{{par|str|string to append}}
{{par|ch|character value to append}}
{{par|s|pointer to a null-terminated character string to append}}
{{par|ilist|{{lc|std::initializer_list}} with the characters to append}}
{{par|t|object (convertible to {{lc|std::basic_string_view}}) with the characters to append}}
{{par end}} 

===Return value===
{{c|*this}}

===Complexity===
There are no standard complexity guarantees, typical implementations behave similar to {{l2tf std|cpp/container/vector/insert}}.

===Exceptions===
{{cpp/string/basic_string/length error note}}

{{cpp/strong exception safety guarantee}}

===Notes===
Overload {{v|2}} can accept any types that are implicitly convertible to {{tt|CharT}}. For {{tt|std::string}}, where {{tt|CharT}} is {{c/core|char}}, the set of acceptable types includes all arithmetic types. This may have unintended effects.

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::string str;

    // reserve sufficient storage space to avoid memory reallocation
    str.reserve(50);

    std::cout &lt;&lt; std::quoted(str) &lt;&lt; '\n'; // empty string
    
    str += "This";
    std::cout &lt;&lt; std::quoted(str) &lt;&lt; '\n';
    
    str += std::string(" is ");
    std::cout &lt;&lt; std::quoted(str) &lt;&lt; '\n';
    
    str += 'a';
    std::cout &lt;&lt; std::quoted(str) &lt;&lt; '\n';
    
    str += {' ', 's', 't', 'r', 'i', 'n', 'g', '.'};
    std::cout &lt;&lt; std::quoted(str) &lt;&lt; '\n';
    
    str += 69.96; // Equivalent to str += static_cast&lt;char&gt;(69.96);
                  // 'E' (ASCII code 69) is appended by overload (2),
                  // which might not be the intent.

    // To add a numeric value, consider std::to_string():
    str += std::to_string(1729);

    std::cout &lt;&lt; std::quoted(str) &lt;&lt; '\n';
}
|output=
""
"This"
"This is "
"This is a"
"This is a string."
"This is a string.E1729"
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=there was no exception safety guarantee|after=added strong exception safety guarantee}}
{{dr list item|wg=lwg|dr=2946|std=C++17|before=overload {{v|5}} caused ambiguity in some cases|after=avoided by making it a template}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc append}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
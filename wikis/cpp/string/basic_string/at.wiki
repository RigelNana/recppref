{{cpp/string/basic_string/title|at}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|anchor=no|num=1|constexpr=c++20|
CharT&amp; at( size_type pos );
}}
{{dcla|anchor=no|num=2|constexpr=c++20|
const CharT&amp; at( size_type pos ) const;
}}
{{dcl end}}

Returns a reference to the character at specified location {{c|pos}}. Bounds checking is performed, exception of type {{lc|std::out_of_range}} will be thrown on invalid access.

===Parameters===
{{par begin}}
{{par|pos|position of the character to return}}
{{par end}}

===Return value===
Reference to the requested character.

===Exceptions===
Throws {{lc|std::out_of_range}} if {{c|1=pos &gt;= size()}}.

{{cpp/strong exception safety guarantee|plural=yes}}

===Complexity===
Constant.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;

int main()
{
    std::string s("message"); // for capacity
    
    s = "abc";
    s.at(2) = 'x'; // OK
    std::cout &lt;&lt; s &lt;&lt; '\n';
    
    std::cout &lt;&lt; "string size = " &lt;&lt; s.size() &lt;&lt; '\n';
    std::cout &lt;&lt; "string capacity = " &lt;&lt; s.capacity() &lt;&lt; '\n';
    
    try
    {
        // This will throw since the requested offset is greater than the current size.
        s.at(3) = 'x';
    }
    catch (std::out_of_range const&amp; exc)
    {
        std::cout &lt;&lt; exc.what() &lt;&lt; '\n';
    }
}
|p=true
|output=
abx
string size = 3
string capacity = 7
basic_string::at
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=there was no exception safety guarantee|after=added strong exception safety guarantee}}
{{dr list item|wg=lwg|dr=2207|std=C++98|before=the behavior was undefined if {{c|1=pos &gt;= size()}} is {{c|true}}|after=always throws an exception in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc operator_at}}
{{dsc inc|cpp/string/basic_string_view/dsc {{SUBPAGENAMEE}}}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
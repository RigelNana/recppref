{{cpp/title|n=literals::string_literals::|operator""s}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl header|string}}
{{dcla|num=1|since=c++14|constexpr=c++20|
std::string operator""s( const char* str, std::size_t len );
}}
{{dcl|num=2|since=c++20|
constexpr std::u8string operator""s( const char8_t* str,
                                     std::size_t len );
}}
{{dcla|num=3|since=c++14|constexpr=c++20|
std::u16string operator""s( const char16_t* str, std::size_t len );
}}
{{dcla|num=4|since=c++14|constexpr=c++20|
std::u32string operator""s( const char32_t* str, std::size_t len );
}}
{{dcla|num=5|since=c++14|constexpr=c++20|
std::wstring operator""s( const wchar_t* str, std::size_t len );
}}
{{dcl end}}

Forms a string literal of the desired type.

@1@ Returns {{c|std::string{str, len} }}.
@2@ Returns {{c|std::u8string{str, len} }}.
@3@ Returns {{c|std::u16string{str, len} }}.
@4@ Returns {{c|std::u32string{str, len} }}.
@5@ Returns {{c|std::wstring{str, len} }}.

===Parameters===
{{par begin}}
{{par|str|pointer to the beginning of the raw character array literal}}
{{par|len|length of the raw character array literal}}
{{par end}}

===Return value===
The string literal.

===Notes===
These operators are declared in the namespace {{c|std::literals::string_literals}}, where both {{tt|literals}} and {{tt|string_literals}} are inline namespaces. Access to these operators can be gained with any of the following {{c/core|using}} directives:
* {{c|using namespace std::literals}}
* {{c|using namespace std::string_literals}}
* {{c|using namespace std::literals::string_literals}}

{{lc|std::chrono::duration}} also defines {{ltt|cpp/chrono/operator""s}} to represent literal seconds, but it is an arithmetic literal: {{c|10.0s}} and {{c|10s}} are ten seconds, but {{c|"10"s}} is a string.

{{feature test macro|__cpp_lib_string_udls|User-defined literals for string types|value=201304L|std=C++14}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;

void print_with_zeros(const auto note, const std::string&amp; s)
{
    std::cout &lt;&lt; note;
    for (const char c : s)
        c ? std::cout &lt;&lt; c : std::cout &lt;&lt; "₀";
    std::cout &lt;&lt; " (size = " &lt;&lt; s.size() &lt;&lt; ")\n";
}

int main()
{
    using namespace std::string_literals;
    
    std::string s1 = "abc\0\0def";
    std::string s2 = "abc\0\0def"s;
    print_with_zeros("s1: ", s1);
    print_with_zeros("s2: ", s2);
    
    std::cout &lt;&lt; "abcdef"s.substr(1,4) &lt;&lt; '\n';
}
|output=
s1: abc (size = 3)
s2: abc₀₀def (size = 8)
bcde
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc constructor}}
{{dsc inc|cpp/string/basic_string_view/dsc operator""sv}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
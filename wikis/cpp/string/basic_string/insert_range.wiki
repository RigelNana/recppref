{{cpp/string/basic_string/title|insert_range}}
{{cpp/string/basic_string/navbar}}
{{ddcl|since=c++23|1=
template&lt; container-compatible-range&lt;CharT&gt; R &gt;
constexpr iterator insert_range( const_iterator pos, R&amp;&amp; rg );
}}

Inserts characters from the range {{c|rg}} before the element (if any) pointed by {{c|pos}}.

Equivalent to 
{{source|1=
return insert(pos - begin(),
    std::basic_string(
        std::from_range,
        std​::​forward&lt;R&gt;(rg),
        get_allocator())
);
}}

If {{c|pos}} is not a valid iterator on {{c|*this}}, the behavior is undefined. 

===Parameters===
{{par begin}}
{{par|pos|iterator before which the characters will be inserted}}
{{par|rg|a {{ls|cpp/ranges/to#container compatible range}}}}
{{par end}}

===Return value===
An iterator which refers to the first inserted character, or {{c|pos}} if no characters were inserted because {{c|rg}} was empty.

===Complexity===
Linear in size of {{c|rg}}.

===Exceptions===
If {{c/core|std::allocator_traits&lt;Allocator&gt;::allocate}} throws an exception, it is rethrown.

{{cpp/string/basic_string/length error note}}

{{cpp/strong exception safety guarantee}}

===Notes===
{{feature test macro|__cpp_lib_containers_ranges|value=202202L|std=C++23|member functions that accept {{ls|cpp/ranges/to#container compatible range}}}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;

int main()
{
    const auto source = {'l', 'i', 'b', '_'};
    std::string target{"__cpp_containers_ranges"};
    //                        ^insertion will occur
    //                         before this position

    const auto pos = target.find("container");
    assert(pos != target.npos);
    auto iter = std::next(target.begin(), pos);

#ifdef __cpp_lib_containers_ranges
    target.insert_range(iter, source);
#else
    target.insert(iter, source.begin(), source.end());
#endif

    assert(target == "__cpp_lib_containers_ranges");
    //                      ^^^^
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc insert}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
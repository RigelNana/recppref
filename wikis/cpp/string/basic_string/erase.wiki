{{cpp/string/basic_string/title|erase}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|1=
basic_string&amp; erase( size_type index = 0, size_type count = npos );
}}
{{dcl rev multi|num=2|anchor=2
|until1=c++11|dcl1=
iterator erase( iterator position );
|notes2={{mark constexpr since c++20}}|dcl2=
iterator erase( const_iterator position );
}}
{{dcl rev multi|num=3|anchor=3
|until1=c++11|dcl1=
iterator erase( iterator first, iterator last );
|notes2={{mark constexpr since c++20}}|dcl2=
iterator erase( const_iterator first, const_iterator last );
}}
{{dcl end}}

Removes specified characters from the string. 

@1@ Removes {{c|std::min(count, size() - index)}} characters starting at {{c|index}}.

@2@ Removes the character at {{c|position}}.

@@ If {{c|position}} is not a [[cpp/iterator#Dereferenceability and validity|dereferenceable iterator]] on {{c|*this}}, the behavior is undefined.

@3@ Removes the characters in the range {{range|first|last}}.

@@ If {{c|first}} or {{c|last}} is not a [[cpp/iterator#Dereferenceability and validity|valid iterator]] on {{c|*this}}, or {{range|first|last}} is not a [[cpp/iterator#Ranges|valid range]], the behavior is undefined.

===Parameters===
{{par begin}}
{{par|index|first character to remove}}
{{par|count|number of characters to remove}}
{{par|position|iterator to the character to remove}}
{{par|first, last|range of the characters to remove}}
{{par end}} 

===Return value===
@1@ {{c|*this}}

@2@ Iterator pointing to the character immediately following the character erased, or {{lc|end()}} if no such character exists.

@3@ Iterator pointing to the character {{c|last}} pointed to before the erase, or {{lc|end()}} if no such character exists.

===Exceptions===
@1@ {{lc|std::out_of_range}} if {{c|index &gt; size()}}.
@2,3@ Throws nothing.

{{cpp/strong exception safety guarantee}}

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;

int main()
{
    std::string s = "This Is An Example";
    std::cout &lt;&lt; "1) " &lt;&lt; s &lt;&lt; '\n';
    
    s.erase(7, 3); // erases " An" using overload (1)
    std::cout &lt;&lt; "2) " &lt;&lt; s &lt;&lt; '\n';
    
    s.erase(std::find(s.begin(), s.end(), ' ')); // erases first ' '; overload (2)
    std::cout &lt;&lt; "3) " &lt;&lt; s &lt;&lt; '\n';
    
    s.erase(s.find(' ')); // trims from ' ' to the end of the string; overload (1)
    std::cout &lt;&lt; "4) " &lt;&lt; s &lt;&lt; '\n';
    
    auto it = std::next(s.begin(), s.find('s')); // obtains iterator to the first 's'
    s.erase(it, std::next(it, 2)); // erases "sI"; overload (3)
    std::cout &lt;&lt; "5) " &lt;&lt; s &lt;&lt; '\n';
}
|output=
1) This Is An Example
2) This Is Example
3) ThisIs Example
4) ThisIs
5) This
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=27|std=C++98|before=overload {{v|3|3}} did not erase the character {{c|last}} pointed to, but it returned&lt;br&gt;the iterator pointing to the character immediately following that character|after=returns an iterator&lt;br&gt;pointing to that character}}
{{dr list item|wg=lwg|dr=428|std=C++98|before=overload {{v|2|2}} explicitly required {{c|position}} to be valid, but&lt;br&gt;{{named req|SequenceContainer}} requires it to be dereferenceable (stricter)|after=removed the&lt;br&gt;explicit requirement}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=there was no exception safety guarantee|after=added strong exception&lt;br&gt;safety guarantee}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc clear}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
{{cpp/string/basic_string/title|contains}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
constexpr bool
    contains( std::basic_string_view&lt;CharT,Traits&gt; sv ) const noexcept;
}}
{{dcl|num=2|since=c++23|1=
constexpr bool
    contains( CharT ch ) const noexcept;
}}
{{dcl|num=3|since=c++23|1=
constexpr bool
    contains( const CharT* s ) const;
}}
{{dcl end}}

Checks if the string contains the given substring. The substring may be one of the following:

@1@ A string view {{c|sv}} (which may be a result of implicit conversion from another {{tt|std::basic_string}}).
@2@ A single character {{c|ch}}.
@3@ A null-terminated character string {{c|s}}.

All three overloads are equivalent to {{c|1=return find(x) != npos;}}, where {{tt|x}} is the parameter.

===Parameters===
{{par begin}}
{{par|sv|a string view which may be a result of implicit conversion from another {{tt|std::basic_string}}}}
{{par|ch|a single character}}
{{par|s|a null-terminated character string}}
{{par end}}

===Return value===
{{c|true}} if the string contains the provided substring, {{c|false}} otherwise.

===Notes===
{{feature test macro|__cpp_lib_string_contains|{{tt|contains}} functions|std=C++23|value=202011L}}

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;
#include &lt;type_traits&gt;

template&lt;typename SubstrType&gt;
void test_substring(const std::string&amp; str, SubstrType subs)
{
    constexpr char delim = std::is_scalar_v&lt;SubstrType&gt; ? '\'' : '\"';
    std::cout &lt;&lt; std::quoted(str)
              &lt;&lt; (str.contains(subs) ? " contains "
                                     : " does not contain ")
              &lt;&lt; std::quoted(std::string{subs}, delim) &lt;&lt; '\n';
}

int main()
{
    using namespace std::literals;

    auto helloWorld = "hello world"s;

    test_substring(helloWorld, "hello"sv);
    test_substring(helloWorld, "goodbye"sv);
    test_substring(helloWorld, 'w');
    test_substring(helloWorld, 'x');
}
|output=
"hello world" contains "hello"
"hello world" does not contain "goodbye"
"hello world" contains 'w'
"hello world" does not contain 'x'
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc starts_with}}
{{dsc inc|cpp/string/basic_string/dsc ends_with}}
{{dsc inc|cpp/string/basic_string/dsc find}}
{{dsc inc|cpp/string/basic_string/dsc substr}}
{{dsc inc|cpp/string/basic_string_view/dsc {{SUBPAGENAMEE}}}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
{{cpp/string/basic_string/title|substr}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl rev multi|num=1|until1=c++23|notes1={{mark constexpr since c++20}}|dcl1=
basic_string substr( size_type pos = 0, size_type count = npos ) const;
|dcl2=
constexpr basic_string
    substr( size_type pos = 0, size_type count = npos ) const&amp;;
}}
{{dcl|num=2|since=c++23|1=
constexpr basic_string substr( size_type pos = 0, size_type count = npos ) &amp;&amp;;
}}
{{dcl end}}

Returns a substring {{range|pos|pos + count}}. If the requested substring extends past the end of the string, i.e. the {{c|count}} is greater than {{c|size() - pos}} (e.g. if {{c|1=count == npos}}), the returned substring is {{range/core|{{c|pos}}|{{rlpf|size}}}}.

@1@ Equivalent to {{c|return basic_string(*this, pos, count);}}.

@2@ Equivalent to {{c|return basic_string(std::move(*this), pos, count);}}.

===Parameters===
{{par begin}}
{{par|pos|position of the first character to include}}
{{par|count|length of the substring}}
{{par end}}

===Return value===
String containing the substring {{range|pos|pos + count}} or {{range/core|{{c|pos}}|{{rlpf|size}}}}.

===Exceptions===
{{lc|std::out_of_range}} if {{c|pos &gt; size()}}.

{{cpp/strong exception safety guarantee|plural=yes}}

===Complexity===
Linear in {{c|count}}.

===Notes===
The allocator of the returned string is default-constructed: the new allocator might ''not'' be a copy of {{rlpf|get_allocator}}.

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
 
int main()
{
    std::string a = "0123456789abcdefghij";
 
    // count is npos, returns [pos, size())
    std::string sub1 = a.substr(10);
    std::cout &lt;&lt; sub1 &lt;&lt; '\n';
    
    // both pos and pos + count are within bounds, returns [pos, pos + count)
    std::string sub2 = a.substr(5, 3);
    std::cout &lt;&lt; sub2 &lt;&lt; '\n';
    
    // pos is within bounds, pos + count is not, returns [pos, size())
    std::string sub4 = a.substr(a.size() - 3, 50);
    // this is effectively equivalent to
    // std::string sub4 = a.substr(17, 3);
    // since a.size() == 20, pos == a.size() - 3 == 17, and a.size() - pos == 3
    
    std::cout &lt;&lt; sub4 &lt;&lt; '\n';

    try
    {
        // pos is out of bounds, throws
        std::string sub5 = a.substr(a.size() + 3, 50);
        std::cout &lt;&lt; sub5 &lt;&lt; '\n';
    }
    catch (const std::out_of_range&amp; ex)
    {
        std::cout &lt;&lt; ex.what() &lt;&lt; '\n';
    }
}
|p=true
|output=
abcdefghij
567
hij
basic_string::substr: __pos (which is 23) &gt; this-&gt;size() (which is 20)
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=there was no exception safety guarantee|after=added strong exception safety guarantee}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc copy}}
{{dsc inc|cpp/string/basic_string/dsc size}}
{{dsc inc|cpp/string/basic_string/dsc find}}
{{dsc inc|cpp/string/basic_string/dsc npos}}
{{dsc inc|cpp/string/basic_string_view/dsc {{SUBPAGENAMEE}}}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
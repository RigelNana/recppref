{{cpp/string/basic_string/title|resize}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|num=1|constexpr=c++20|
void resize( size_type count );
}}
{{dcla|num=2|constexpr=c++20|
void resize( size_type count, CharT ch );
}}
{{dcl end}}

Resizes the string to contain {{c|count}} characters.

If the current size is less than {{c|count}}, additional characters are appended:

@1@ Initializes appended characters to {{c|CharT()}} ({{c|'\0'}} if {{tt|CharT}} is {{c/core|char}}).
@2@ Initializes appended characters to {{c|ch}}.

If the current size is greater than {{c|count}}, the string is reduced to its first {{c|count}} elements.

===Parameters===
{{par begin}}
{{par|count|new size of the string}}
{{par|ch|character to initialize the new characters with}}
{{par end}}

===Exceptions===
{{lc|std::length_error}} if {{c|count &gt; max_size()}} is {{c|true}}.
Any exceptions thrown by corresponding {{tt|Allocator}}.

{{cpp/strong exception safety guarantee}}

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;

int main()
{
    const unsigned desired_length{8};
    std::string long_string("Where is the end?");
    std::string short_string("H");
    
    std::cout &lt;&lt; "Basic functionality:\n"
              &lt;&lt; "Shorten:\n"
              &lt;&lt; "1. Before: " &lt;&lt; std::quoted(long_string) &lt;&lt; '\n';
    long_string.resize(desired_length);
    std::cout &lt;&lt; "2. After:  " &lt;&lt; std::quoted(long_string) &lt;&lt; '\n';
    
    std::cout &lt;&lt; "Lengthen with a given value 'a':\n"
              &lt;&lt; "3. Before: " &lt;&lt; std::quoted(short_string) &lt;&lt; '\n';
    short_string.resize(desired_length, 'a');
    std::cout &lt;&lt; "4. After:  " &lt;&lt; std::quoted(short_string) &lt;&lt; '\n';
    
    std::cout &lt;&lt; "Lengthen with char() == " &lt;&lt; static_cast&lt;int&gt;(char()) &lt;&lt; '\n'
              &lt;&lt; "5. Before: " &lt;&lt; std::quoted(short_string) &lt;&lt; '\n';
    short_string.resize(desired_length + 3);
    std::cout &lt;&lt; "6. After:  \"";
    for (char c : short_string)
        std::cout &lt;&lt; (c == char() ? '@' : c);
    std::cout &lt;&lt; "\"\n\n";
    
    std::cout &lt;&lt; "Errors:\n";
    std::string s;
    
    try
    {
        // size is OK, no length_error
        // (may throw bad_alloc)
        s.resize(s.max_size() - 1, 'x');
    }
    catch (const std::bad_alloc&amp; ex)
    {
        std::cout &lt;&lt; "1. Exception: " &lt;&lt; ex.what() &lt;&lt; '\n';
    }
    
    try
    {
        // size is OK, no length_error
        // (may throw bad_alloc)
        s.resize(s.max_size(), 'x');
    }
    catch (const std::bad_alloc&amp; ex)
    {
        std::cout &lt;&lt; "2. Exception: " &lt;&lt; ex.what() &lt;&lt; '\n';
    }
    
    try
    {
        // size is BAD, throw length_error
        s.resize(s.max_size() + 1, 'x');
    }
    catch (const std::length_error&amp; ex)
    {
        std::cout &lt;&lt; "3. Length error: " &lt;&lt; ex.what() &lt;&lt; '\n';
    }
}
|p=true
|output=
Basic functionality:
Shorten:
1. Before: "Where is the end?"
2. After:  "Where is"
Lengthen with a given value 'a':
3. Before: "H"
4. After:  "Haaaaaaa"
Lengthen with char() == 0
5. Before: "Haaaaaaa"
6. After:  "Haaaaaaa@@@"

Errors:
1. Exception: std::bad_alloc
2. Exception: std::bad_alloc
3. Length error: basic_string::_M_replace_aux
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=there was no exception safety guarantee|after=added strong exception safety guarantee}}
{{dr list item|wg=lwg|dr=2250|std=C++98|before=the behavior was undefined if&lt;br&gt;{{c|count &gt; max_size()}} is {{c|true}}|after=always throws an exception in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc size}}
{{dsc inc|cpp/string/basic_string/dsc reserve}}
{{dsc inc|cpp/string/basic_string/dsc shrink_to_fit}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
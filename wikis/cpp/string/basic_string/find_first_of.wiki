{{cpp/string/basic_string/title|find_first_of}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|anchor=no|num=1|noexcept=c++11|constexpr=c++20|1=
size_type find_first_of( const basic_string&amp; str, size_type pos = 0 ) const;
}}
{{dcla|anchor=no|num=2|constexpr=c++20|1=
size_type find_first_of( const CharT* s,
                         size_type pos, size_type count ) const;
}}
{{dcla|anchor=no|num=3|constexpr=c++20|1=
size_type find_first_of( const CharT* s, size_type pos = 0 ) const;
}}
{{dcla|anchor=no|num=4|noexcept=c++11|constexpr=c++20|1=
size_type find_first_of( CharT ch, size_type pos = 0 ) const;
}}
{{dcla|anchor=no|num=5|since=c++17|constexpr=c++20|1=
template&lt; class StringViewLike &gt;
size_type
    find_first_of( const StringViewLike&amp; t,
                   size_type pos = 0 ) const noexcept(/* see below */);
}}
{{dcl end}}

Finds the first character equal to one of the characters in the given character sequence. The search considers only the range {{range/core|{{c|pos}}|{{lc|size()}}}}. If none of the characters in the given character sequence is present in the range, {{lc|npos}} will be returned.

@1@ Finds the first character equal to one of the characters in {{c|str}}.

@2@ Finds the first character equal to one of the characters in the range {{range|s|s + count}}. This range can include null characters.

@@ If {{range|s|s + count}} is not a [[cpp/iterator#Ranges|valid range]], the behavior is undefined.

@3@ Finds the first character equal to one of the characters in character string pointed to by {{c|s}}. The length of the string is determined by the first null character using {{c|Traits::length(s)}}.

@@ If {{range|s|s + Traits::length(s)}} is not a [[cpp/iterator#Ranges|valid range]], the behavior is undefined.

@4@ Finds the first character equal to {{c|ch}}.

@5@ {{cpp/string/sv hack|finds the first character equal to one of the characters in {{c|sv}}}}

===Parameters===
{{par begin}}
{{par|str|string identifying characters to search for}}
{{par|pos|position at which to begin searching}}
{{par|count|length of character string identifying characters to search for}}
{{par|s|pointer to a character string identifying characters to search for}}
{{par|ch|character to search for}}
{{par|t|object (convertible to {{lc|std::basic_string_view}}) identifying characters to search for}}
{{par end}}

===Return value===
Position of the found character or {{lc|npos}} if no such character is found.

===Exceptions===
@1,4@ Throws nothing.
@5@ {{noexcept|std::is_nothrow_convertible_v&lt;const T&amp;, std::basic_string_view&lt;CharT, Traits&gt;&gt;}}

{{cpp/strong exception safety guarantee}}

===Notes===
{{c|Traits::eq()}} is used to perform the comparison.

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;

int main()
{
    using namespace std::literals;
    std::string::size_type sz;

    // (1)
    sz = "alignas"s.find_first_of("klmn"s);
    //     └────────────────────────┘
    assert(sz == 1);

    sz = "alignof"s.find_first_of("wxyz"s);
    // no match
    assert(sz == std::string::npos);

    // (2)
    sz = "consteval"s.find_first_of("xyzabc", 0, 3);
    // no match (× are not targets)     ×××
    assert(sz == std::string::npos);

    sz = "consteval"s.find_first_of("xyzabc", 0, 6);
    //    └───────────────────────────────┘
    assert(sz == 0);

    // (3)
    sz = "decltype"s.find_first_of("xyzabc");
    //      └────────────────────────────┘
    assert(sz == 2);

    // (4)
    sz = "co_await"s.find_first_of('a');
    //       └──────────────────────┘
    assert(sz == 3);

    // (5)
    sz = "constinit"s.find_first_of("int"sv);
    //      └─────────────────────────┘
    assert(sz == 2);

    std::cout &lt;&lt; "All tests passed.\n";
}
|output=
All tests passed.
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=there was no exception safety guarantee|after=added strong exception safety guarantee}}
{{dr list item|wg=lwg|dr=2064|std=C++11|before=overloads {{v|3,4}} were noexcept|after=removed}}
{{dr list item|wg=lwg|dr=2946|std=C++17|before=overload {{v|5}} caused ambiguity in some cases|after=avoided by making it a template}}
{{dr list item|paper=P1148R0|std=C++11&lt;br&gt;C++17|before=noexcept for overloads {{v|4,5}} were&lt;br&gt;accidentally dropped by LWG2064/LWG2946|after=restored}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc find}}
{{dsc inc|cpp/string/basic_string/dsc rfind}}
{{dsc inc|cpp/string/basic_string/dsc find_first_not_of}}
{{dsc inc|cpp/string/basic_string/dsc find_last_of}}
{{dsc inc|cpp/string/basic_string/dsc find_last_not_of}}
{{dsc inc|cpp/string/basic_string_view/dsc find_first_of}}
{{dsc inc|cpp/string/byte/dsc strspn}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
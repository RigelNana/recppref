{{cpp/string/basic_string/title|size|length}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl|num=1|notes={{mark noexcept since c++11}}&lt;br&gt;{{mark constexpr since c++20}}|
size_type size() const;
}}
{{dcl|num=2|notes={{mark noexcept since c++11}}&lt;br&gt;{{mark constexpr since c++20}}|
size_type length() const;
}}
{{dcl end}}

Returns the number of {{tt|CharT}} elements in the string, i.e. {{c|std::distance(begin(), end())}}.

===Parameters===
(none)

===Return value===
The number of {{tt|CharT}} elements in the string.

===Complexity===
{{rrev multi|until1=c++11
|rev1=Unspecified
|rev2=Constant
}}

===Notes===
For {{lc|std::string}}, the elements are bytes (objects of type {{c/core|char}}), which are not the same as characters if a multibyte encoding such as UTF-8 is used.

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;

int main()
{
    std::string s("Exemplar");
    assert(8 == s.size());
    assert(s.size() == s.length());
    assert(s.size() == static_cast&lt;std::string::size_type&gt;(
        std::distance(s.begin(), s.end())));

    std::u32string a(U"ハロー・ワールド"); // 8 code points
    assert(8 == a.size()); // 8 code units in UTF-32

    std::u16string b(u"ハロー・ワールド"); // 8 code points
    assert(8 == b.size()); // 8 code units in UTF-16

    std::string c("ハロー・ワールド"); // 8 code points
    assert(24 == c.size()); // 24 code units in UTF-8

    #if __cpp_lib_char8_t &gt;= 201907L
    std::u8string d(u8"ハロー・ワールド"); // 8 code points
    assert(24 == d.size()); // 24 code units in UTF-8
    #endif
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc empty}}
{{dsc inc|cpp/string/basic_string/dsc max_size}}
{{dsc inc|cpp/string/basic_string_view/dsc size}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
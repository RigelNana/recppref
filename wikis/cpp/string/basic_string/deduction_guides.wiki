{{title|deduction guides for {{tt|std::basic_string}}}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl header|string}}
{{dcl|since=c++17|num=1|1=
template&lt; class InputIt, class Alloc = std::allocator&lt;
                             typename std::iterator_traits&lt;InputIt&gt;::value_type&gt; &gt;
basic_string( InputIt, InputIt, Alloc = Alloc() )
    -&gt; basic_string&lt;typename std::iterator_traits&lt;InputIt&gt;::value_type,
                    std::char_traits&lt;
                        typename std::iterator_traits&lt;InputIt&gt;::value_type&gt;, Alloc&gt;;
}}
{{dcla|since=c++17|num=2|1=
template&lt; class CharT,
          class Traits,
          class Alloc = std::allocator&lt;CharT&gt; &gt;
explicit basic_string( std::basic_string_view&lt;CharT, Traits&gt;, const Alloc&amp; = Alloc() )
    -&gt; basic_string&lt;CharT, Traits, Alloc&gt;;
}}
{{dcl|since=c++17|num=3|1=
template&lt; class CharT,
          class Traits,
          class Alloc = std::allocator&lt;CharT&gt;&gt; &gt;
basic_string( std::basic_string_view&lt;CharT, Traits&gt;,
              typename /* see below */::size_type,
              typename /* see below */::size_type,
              const Alloc&amp; = Alloc() )
    -&gt; basic_string&lt;CharT, Traits, Alloc&gt;;
}}
{{dcla|since=c++23|num=4|1=
template&lt; ranges::input_range R,
          class Alloc = std::allocator&lt;ranges::range_value_t&lt;R&gt;&gt; &gt;
basic_string( std::from_range_t, R&amp;&amp;, Alloc = Alloc() )
    -&gt; basic_string&lt;ranges::range_value_t&lt;R&gt;,
                       std::char_traits&lt;ranges::range_value_t&lt;R&gt;&gt;, Alloc&gt;;
}}
{{dcl end}}

@1@ This [[cpp/language/class template argument deduction|deduction guide]] is provided for {{lc|std::basic_string}} to allow deduction from an iterator range. {{cpp/enable_if|{{tt|InputIt}} satisfies {{named req|InputIterator}} and {{tt|Alloc}} satisfies {{named req|Allocator}}}}.

@2,3@ These deduction guides are provided for {{lc|std::basic_string}} to allow deduction from a {{lc|std::basic_string_view}}. The {{c|size_type}} parameter type in {{v|3}} refers to the {{c|size_type}} member type of the type deduced by the deduction guide. {{cpp/enable_if|{{tt|Alloc}} satisfies {{named req|Allocator}}|plural=yes}}.

@4@ This deduction guide is provided for {{lc|std::basic_string}} to allow deduction from a {{ltt|cpp/ranges/from_range|std::from_range_t}} tag and an {{lconcept|input_range}}.

{{cpp/container/inputit_allocator_detection}}

===Notes===
Guides {{vl|2,3}} are needed because the {{lc|std::basic_string}} constructors for {{lc|std::basic_string_view}}s are made templates to avoid causing ambiguities in existing code, and those templates do not support class template argument deduction.

===Notes===
{{ftm begin|std=yes|comment=yes}}
{{ftm|__cpp_lib_containers_ranges|[[cpp/ranges/to#container compatible range|Ranges-aware]] construction and insertion; overload {{vl|4}}|value=202202L|std=C++23}}
{{ftm end}}

===Example===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;char&gt; v = {'a', 'b', 'c'};
    std::basic_string s1(v.begin(), v.end()); // uses deduction guide (1)
    assert(s1 == "abc");

#if __cpp_lib_containers_ranges &gt;= 202202L
    std::vector&lt;wchar_t&gt; v4{0x43, 43, 053, 0x32, 0x33};
    std::basic_string s4(std::from_range, v4); // uses deduction guide (4)
    assert(s4 == L"C++23");
#endif
}
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3075|std=c++17|before=deduction from {{tt|basic_string_view}} was unsupported (exacerbated by {{lwg|2946}})|after=deduction guides added}}
{{dr list end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|stoul|stoull}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl header|string}}
{{dcl|num=1|since=c++11|1=
unsigned long      stoul ( const std::string&amp; str,
                           std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl|num=2|since=c++11|1=
unsigned long      stoul ( const std::wstring&amp; str,
                           std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl|num=3|since=c++11|1=
unsigned long long stoull( const std::string&amp; str,
                           std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl|num=4|since=c++11|1=
unsigned long long stoull( const std::wstring&amp; str,
                           std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl end}}

Interprets an unsigned integer value in the string {{c|str}}.

Let {{c|ptr}} be an internal (to the conversion functions) pointer of type {{c/core|char*}} {{v|1,3}} or {{c/core|wchar_t*}} {{v|2,4}}, accordingly.

@1@ Calls {{c|std::strtoul(str.c_str(), &amp;ptr, base)}}.
@2@ Calls {{c|std::wcstoul(str.c_str(), &amp;ptr, base)}}.
@3@ Calls {{c|std::strtoull(str.c_str(), &amp;ptr, base)}}.
@4@ Calls {{c|std::wcstoull(str.c_str(), &amp;ptr, base)}}.

{{cpp/string/cvt str2int base|base={{c|base}}|u=true}}

If {{c|pos}} is not a null pointer, then {{c|ptr}} will receive the address of the first unconverted character in {{c|str.c_str()}}, and the index of that character will be calculated and stored in {{c|*pos}}, giving the number of characters that were processed by the conversion.

===Parameters===
{{par begin}}
{{par|str|the string to convert}}
{{par|pos|address of an integer to store the number of characters processed}}
{{par|base|the number base}}
{{par end}}

===Return value===
The string converted to the specified unsigned integer type.

===Exceptions===
* {{lc|std::invalid_argument}} if no conversion could be performed.
* {{lc|std::out_of_range}} if the converted value would fall out of the range of the result type or if the underlying function ({{lc|std::strtoul}} or {{lc|std::strtoull}}) sets {{lc|errno}} to {{lc|ERANGE}}.

===Example===
{{example}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2009|std=C++11|before={{lc|std::out_of_range}} would not be thrown if&lt;br&gt;{{lc|std::strtoul}} or {{lc|std::strtoull}} sets {{lc|errno}} to {{lc|ERANGE}}|after=will throw}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc stol}}
{{dsc inc|cpp/string/basic_string/dsc stof}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/string/basic_string/title|swap}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl rev multi
|until1=c++17|dcl1=
void swap( basic_string&amp; other );
|notes2={{mark constexpr since c++20}}|dcl2=
void swap( basic_string&amp; other ) noexcept(/* see below */);
}}
{{dcl end}}

Exchanges the contents of the string with those of {{c|other}}. All iterators and references may be invalidated.

{{rrev|since=c++11|
If {{c multi|std::allocator_traits&lt;Allocator&gt;::|    propagate_on_container_swap::value &amp;&amp;|get_allocator() {{==}} s.get_allocator()}} is {{c|false}}, the behavior is undefined.
}}

===Parameters===
{{par begin}}
{{par|other|string to exchange the contents with}}
{{par end}}

===Complexity===
Constant.

===Exceptions===
{{rev begin}}
{{rev|until=c++11|
No exception is thrown.
}}
{{rev|since=c++11|
No exception is thrown, unless the behavior is undefined.

{{cpp/strong exception safety guarantee}}
}}
{{rev end}}


{{rrev|since=c++17|
{{noexcept|std::allocator_traits&lt;Allocator&gt;::propagate_on_container_swap::value {{!!}}
         std::allocator_traits&lt;Allocator&gt;::is_always_equal::value}}
}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;

int main() 
{
    std::string a = "AAA";
    std::string b = "BBBB";
    
    std::cout &lt;&lt; "Before swap:\n"
                 "a = " &lt;&lt; a &lt;&lt; "\n"
                 "b = " &lt;&lt; b &lt;&lt; "\n\n";
    
    a.swap(b);
    
    std::cout &lt;&lt; "After swap:\n"
                 "a = " &lt;&lt; a &lt;&lt; "\n"
                 "b = " &lt;&lt; b &lt;&lt; '\n';
}
|output=
Before swap:
a = AAA
b = BBBB

After swap:
a = BBBB
b = AAA
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=403|std=C++98|before={{tt|swap()}} might throw an exception|after=no exception is thrown}}
{{dr list item|wg=lwg|dr=535|std=C++98|before=swapping strings did not preserve the character orders|after=orders are also preserved}}
{{dr list item|wg=lwg|dr=2151|paper=P1148R0|std=C++11|before=no exception was thrown in the case&lt;br&gt;of unequal non-propagating allocators|after=the behavior is&lt;br&gt;undefined in this case}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc swap}}
{{dsc inc|cpp/algorithm/dsc swap_ranges}}
{{dsc inc|cpp/string/basic_string_view/dsc {{SUBPAGENAMEE}}}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
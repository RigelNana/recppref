{{cpp/string/basic_string_view/title|contains}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
constexpr bool contains( basic_string_view sv ) const noexcept;
}}
{{dcl|num=2|since=c++23|1=
constexpr bool contains( CharT c ) const noexcept;
}}
{{dcl|num=3|since=c++23|1=
constexpr bool contains( const CharT* s ) const;
}}
{{dcl end}}

Checks if the string view contains the given substring, where 
@1@ the substring is a string view.
@2@ the substring is a single character.
@3@ the substring is a null-terminated character string.

All three overloads are equivalent to {{c|1=return find(x) != npos;}}, where {{tt|x}} is the parameter.

===Parameters===
{{par begin}}
{{par|sv|a string view}}
{{par|c|a single character}}
{{par|s|a null-terminated character string}}
{{par end}} 

===Return value===
{{c|true}} if the string view contains the provided substring, {{c|false}} otherwise.

===Notes===
{{feature test macro|__cpp_lib_string_contains|{{tt|contains}} functions|std=C++23|value=202011L}}

===Example===
{{example
|code=
#include &lt;string_view&gt;
using namespace std::literals;

static_assert
(
    // bool contains(basic_string_view x) const noexcept;
    "https://cppreference.com"sv.contains("cpp"sv) == true and
    "https://cppreference.com"sv.contains("php"sv) == false and

    // bool contains(CharT x) const noexcept;
    "C++23"sv.contains('+') == true and
    "C++23"sv.contains('-') == false and

    // bool contains(const CharT* x) const;
    std::string_view("basic_string_view").contains("string") == true and
    std::string_view("basic_string_view").contains("String") == false
);

int main() {}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc starts_with}}
{{dsc inc|cpp/string/basic_string_view/dsc ends_with}}
{{dsc inc|cpp/string/basic_string_view/dsc find}}
{{dsc inc|cpp/string/basic_string_view/dsc substr}}
{{dsc inc|cpp/string/basic_string/dsc {{SUBPAGENAMEE}}}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
{{cpp/string/basic_string_view/title|data}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl|since=c++17|
constexpr const_pointer data() const noexcept;
}}
{{dcl end}}

Returns a pointer to the underlying character array. The pointer is such that the range {{range|data()|data() + size()}} is valid and the values in it correspond to the values of the view.

===Parameters===
(none)

===Return value===
A pointer to the underlying character array.

===Complexity===
Constant.

===Notes===
Unlike {{lc|std::basic_string::data()}} and string literals, {{tt|std::basic_string_view::data()}} returns a pointer to a buffer that is not necessarily null-terminated, for example a substring view (e.g. from {{rlpt|remove_suffix}}). Therefore, it is typically a mistake to pass {{tt|data()}} to a routine that takes just a {{c|const CharT*}} and expects a null-terminated string.

===Example===
{{example
|code=
#include &lt;cstring&gt;
#include &lt;cwchar&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;

int main()
{
    std::wstring_view wcstr_v = L"xyzzy";
    std::cout &lt;&lt; std::wcslen(wcstr_v.data()) &lt;&lt; '\n';
    // OK: the underlying character array is null-terminated

    char array[3] = {'B', 'a', 'r'};
    std::string_view array_v(array, sizeof array);
    // std::cout &lt;&lt; std::strlen(array_v.data()) &lt;&lt; '\n';
    // error: the underlying character array is not null-terminated

    std::string str(array_v.data(), array_v.size()); // OK
    std::cout &lt;&lt; std::strlen(str.data()) &lt;&lt; '\n';
    // OK: the underlying character array of a std::string is always null-terminated
}
|output=
5
3
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc front}}
{{dsc inc|cpp/string/basic_string_view/dsc back}}
{{dsc inc|cpp/string/basic_string/dsc {{SUBPAGENAMEE}}}}
{{dsc end}}

{{langlinks|es|ja|zh}}
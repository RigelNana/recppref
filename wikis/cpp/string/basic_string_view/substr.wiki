{{cpp/string/basic_string_view/title|substr}}
{{cpp/string/basic_string_view/navbar}}
{{ddcl|since=c++17|1=
constexpr basic_string_view substr( size_type pos = 0,
                                    size_type count = npos ) const;
}}

Returns a view of the substring {{range|pos|pos + rlen}}, where {{tt|rlen}} is the smaller of {{c|count}} and {{c|size() - pos}}.

===Parameters===
{{par begin}}
{{par|pos|position of the first character}}
{{par|count|requested length}}
{{par end}} 

===Return value===
View of the substring {{range|pos|pos + rlen}}.

===Exceptions===
{{lc|std::out_of_range}} if {{c|pos &gt; size()}}.

===Complexity===
Constant.

===Example===
{{example|code=
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
#include &lt;string_view&gt;

int main()
{
    typedef std::size_t count_t, pos_t;

    constexpr std::string_view data{"ABCDEF"};

    std::cout &lt;&lt; data.substr() &lt;&lt; '\n'; // ABCDEF, i.e. data[0, 5] that is [0, 6)
    std::cout &lt;&lt; data.substr(pos_t(1)) &lt;&lt; '\n'; // BCDEF, i.e. [1, 6)
    std::cout &lt;&lt; data.substr(pos_t(2), count_t(3)) &lt;&lt; '\n'; // CDE, i.e. [2, 2 + 3)
    std::cout &lt;&lt; data.substr(pos_t(4), count_t(42)) &lt;&lt; '\n'; // EF, i.e. [4, 6)

    try
    {
        [[maybe_unused]]
        auto sub = data.substr(pos_t(666), count_t(1)); // throws: pos &gt; size()
    }
    catch (std::out_of_range const&amp; ex)
    {
        std::cout &lt;&lt; ex.what() &lt;&lt; '\n';
    }
}
|p=true
|output=
ABCDEF
BCDEF
CDE
EF
basic_string_view::substr: __pos (which is 666) &gt; __size (which is 6)
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc copy}}
{{dsc inc|cpp/string/basic_string_view/dsc find}}
{{dsc inc|cpp/string/basic_string/dsc {{SUBPAGENAMEE}}}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}


{{cpp/string/basic_string_view/title|basic_string_view}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|
constexpr basic_string_view() noexcept;
}}
{{dcl|num=2|since=c++17|1=
constexpr basic_string_view( const basic_string_view&amp; other ) noexcept = default;
}}
{{dcl|num=3|since=c++17|
constexpr basic_string_view( const CharT* s, size_type count );
}}
{{dcl|num=4|since=c++17|
constexpr basic_string_view( const CharT* s );
}}
{{dcl|num=5|since=c++20|
template&lt; class It, class End &gt;
constexpr basic_string_view( It first, End last );
}}
{{dcl|num=6|since=c++23|
template&lt; class R &gt;
constexpr explicit basic_string_view( R&amp;&amp; r );
}}
{{dcl|num=7|since=c++23|1=
constexpr basic_string_view( std::nullptr_t ) = delete;
}}
{{dcl end}}

@1@ Default constructor. Constructs an empty {{tt|std::basic_string_view}}. After construction, {{lc|data()}} is equal to {{c|nullptr}}, and {{lc|size()}} is equal to {{c|0}}.
@2@ Copy constructor. Constructs a view of the same content as {{c|other}}. After construction, {{lc|data()}} is equal to {{c|other.data()}}, and {{lc|size()}} is equal to {{c|other.size()}}.
@3@ Constructs a view of the first {{c|count}} characters of the character array starting with the element pointed by {{c|s}}. {{c|s}} can contain null characters. The behavior is undefined if {{range|s|s + count}} is not a valid range (even though the constructor may not access any of the elements of this range). After construction, {{lc|data()}} is equal to {{c|s}}, and {{lc|size()}} is equal to {{c|count}}.
@4@ Constructs a view of the null-terminated character string pointed to by {{c|s}}, not including the terminating null character. The length of the view is determined as if by {{c|Traits::length(s)}}. The behavior is undefined if {{range|s|s + Traits::length(s)}} is not a valid range. After construction, {{lc|data()}} is equal to {{c|s}}, and {{lc|size()}} is equal to {{c|Traits::length(s)}}.
@5@ Constructs a {{tt|std::basic_string_view}} over the range {{range|first|last}}. The behavior is undefined if {{range|first|last}} is not a valid range, if {{tt|It}} does not actually model {{lconcept|contiguous_iterator}}, or if {{tt|End}} does not actually model {{lconcept|sized_sentinel_for}} for {{tt|It}}. After construction, {{lc|data()}} is equal to {{c|std::to_address(first)}}, and {{lc|size()}} is equal to {{c|last - first}}.
{{cpp/enable if|all following conditions are satisfied}}:
:* {{tt|It}} satisfies {{lconcept|contiguous_iterator}},
:* {{tt|End}} satisfies {{lconcept|sized_sentinel_for}} for {{tt|It}},
:* {{c/core|std::iter_value_t&lt;It&gt;}} and {{tt|CharT}} are the same type, and
:* {{tt|End}} is not convertible to {{lc|std::size_t}}.

@6@ Constructs a {{tt|std::basic_string_view}} over the range {{c|r}}. After construction, {{lc|data()}} is equal to {{c|ranges::data(r)}}, and {{lc|size()}} is equal to {{c|ranges::size(r)}}.
{{cpp/enable if|all following conditions are satisfied}}:
:* {{c/core|std::remove_cvref_t&lt;R&gt;}} is not the same type as {{tt|std::basic_string_view}},
:* {{tt|R}} models {{lconcept|contiguous_range}} and {{lconcept|sized_range}},
:* {{c/core|ranges::range_value_t&lt;R&gt;}} and {{tt|CharT}} are the same type,
:* {{tt|R}} is not convertible to {{c/core|const CharT*}}, and
:* Let {{c|d}} be an lvalue of type {{c/core|std::remove_cvref_t&lt;R&gt;}}, {{c|d.operator ::std::basic_string_view&lt;CharT, Traits&gt;()}} is not a valid expression.
@7@ {{tt|std::basic_string_view}} cannot be constructed from {{c|nullptr}}.

===Parameters===
{{par begin}}
{{par|other|another view to initialize the view with}}
{{par|s|pointer to a character array or a C string to initialize the view with}}
{{par|count|number of characters to include in the view}}
{{par|first|iterator to the first character of the sequence}}
{{par|last|iterator past the last character of the sequence or another sentinel}}
{{par|r|a contiguous range that contains the sequence}}
{{par end}} 

===Complexity===
@1-3,5,6@ Constant.
@4@ Linear in length of {{c|s}}.

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;

int main()
{
    std::string cppstr = "Foo";
    std::string_view cppstr_v(cppstr); // overload (2), after
                                       // std::string::operator string_view
    std::cout &lt;&lt; "1) cppstr_v: " &lt;&lt; std::quoted(cppstr_v) &lt;&lt; '\n';
    
    char array[3] = {'B', 'a', 'r'};
    std::string_view array_v(array, std::size(array)); // overload (3)
    std::cout &lt;&lt; "2) array_v: " &lt;&lt; std::quoted(array_v) &lt;&lt; '\n';
    
    const char* one_0_two = "One\0Two";
    
    std::string_view one_two_v{one_0_two, 7}; // overload (3)
    std::cout &lt;&lt; "3) one_two_v: \"";
    for (char c : one_two_v)
        std::cout &lt;&lt; (c != '\0' ? c : '?');
    std::cout &lt;&lt; "\", one_two_v.size(): " &lt;&lt; one_two_v.size() &lt;&lt; '\n';
    
    std::string_view one_v{one_0_two}; // overload (4)
    std::cout &lt;&lt; "4) one_v: " &lt;&lt; std::quoted(one_v) &lt;&lt; ", one_v.size(): " 
              &lt;&lt; one_v.size() &lt;&lt; '\n';
    
    constexpr std::wstring_view wcstr_v = L"xyzzy"; // overload (4)
    std::cout &lt;&lt; "5) wcstr_v.size(): " &lt;&lt; wcstr_v.size() &lt;&lt; '\n';
    
    std::array ar = {'P', 'u', 'b'};
    std::string_view ar_v(ar.begin(), ar.end()); // overload (5), C++20
    std::cout &lt;&lt; "6) ar_v: " &lt;&lt; std::quoted(ar_v) &lt;&lt; '\n';
    
//  std::string_view ar_v2{ar}; // overload (6), OK in C++23
//  std::cout &lt;&lt; "ar_v2: " &lt;&lt; std::quoted(ar_v2) &lt;&lt; '\n'; // ar_v2: "Pub"

    [[maybe_unused]] auto zero = [] { /* ... */ return nullptr; };
//  std::string_view s{zero()}; // overload (7), won't compile since C++23
}
|output=
1) cppstr_v: "Foo"
2) array_v: "Bar"
3) one_two_v: "One?Two", one_two_v.size(): 7
4) one_v: "One", one_v.size(): 3
5) wcstr_v.size(): 5
6) ar_v: "Pub"
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc operator{{=}}}}
{{dsc inc|cpp/string/basic_string/dsc constructor}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
{{title|operator&lt;&lt;{{small|(std::basic_string_view)}}}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl header|string_view}}
{{dcl|since=c++17|
template&lt; class CharT, class Traits &gt;
std::basic_ostream&lt;CharT, Traits&gt;&amp;
    operator&lt;&lt;( std::basic_ostream&lt;CharT, Traits&gt;&amp; os, 
                std::basic_string_view&lt;CharT, Traits&gt; v );
}}
{{dcl end}}

Behaves as a {{named req|FormattedOutputFunction}}. After constructing and checking the sentry object, [[cpp/named req/FormattedOutputFunction#Padding|determines the output format padding]].

Then stores each character from the resulting sequence {{c|seq}} (the contents of {{c|v}} with padding) to the output stream {{c|os}} as if by calling {{c|os.rdbuf()-&gt;sputn(seq, n)}}, where {{c|n}} is {{c|std::max(os.width(), str.size())}}.

Finally, calls {{c|os.width(0)}} to cancel the effects of {{lc|std::setw}}, if any.

===Exceptions===
May throw {{lc|std::ios_base::failure}} if an exception is thrown during output.

===Parameters===
{{par begin}}
{{par|os|a character output stream}}
{{par|v|the view to be inserted}}
{{par end}}

===Return value===
{{c|os}}

===Example===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

int main()
{
    constexpr std::string_view s{"abc"};
    constexpr int width{5};

    // fill/left/right properties are kept until changed
    std::cout &lt;&lt; std::setfill('-');
    std::cout &lt;&lt; std::left;

    std::cout &lt;&lt; '[' &lt;&lt; std::setw(width) &lt;&lt; s &lt;&lt; "]\n";
    std::cout &lt;&lt; '[' &lt;&lt; std::setw(width) &lt;&lt; s &lt;&lt; "]\n";

    std::cout &lt;&lt; std::right;
    std::cout &lt;&lt; '[' &lt;&lt; std::setw(width) &lt;&lt; s &lt;&lt; "]\n";

    // width is reset after each call
    std::cout &lt;&lt; '[' &lt;&lt; s &lt;&lt; "]\n";
}
|output=
[abc--]
[abc--]
[--abc]
[abc]
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc operator ltltgtgt}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
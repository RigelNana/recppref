{{cpp/string/basic_string_view/title|copy}}
{{cpp/string/basic_string_view/navbar}}
{{ddcl|since=c++17|notes={{mark constexpr since c++20}}|1=
size_type copy( CharT* dest, size_type count, size_type pos = 0 ) const;
}}

Copies the substring {{range|pos|pos + rcount}} to the character array pointed to by {{c|dest}}, where {{tt|rcount}} is the smaller of {{c|count}} and {{c|size() - pos}}.

Equivalent to {{c|Traits::copy(dest, data() + pos, rcount)}}.

===Parameters===
{{par begin}}
{{par|dest|pointer to the destination character string}}
{{par|count|requested substring length}}
{{par|pos|position of the first character}}
{{par end}} 

===Return value===
Number of characters copied.

===Exceptions===
{{lc|std::out_of_range}} if {{c|1=pos &gt; size()}}.

===Complexity===
Linear in {{tt|rcount}}.

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
#include &lt;string_view&gt;

int main()
{
    constexpr std::basic_string_view&lt;char&gt; source{"ABCDEF"};
    std::array&lt;char, 8&gt; dest;
    std::size_t count{}, pos{};

    dest.fill('\0');
    source.copy(dest.data(), count = 4); // pos = 0
    std::cout &lt;&lt; dest.data() &lt;&lt; '\n'; // ABCD

    dest.fill('\0');
    source.copy(dest.data(), count = 4, pos = 1);
    std::cout &lt;&lt; dest.data() &lt;&lt; '\n'; // BCDE

    dest.fill('\0');
    source.copy(dest.data(), count = 42, pos = 2); // ok, count -&gt; 4
    std::cout &lt;&lt; dest.data() &lt;&lt; '\n'; // CDEF

    try
    {
        source.copy(dest.data(), count = 1, pos = 666); // throws: pos &gt; size()
    }
    catch (std::out_of_range const&amp; ex)
    {
        std::cout &lt;&lt; ex.what() &lt;&lt; '\n';
    }
}
|output=
ABCD
BCDE
CDEF
basic_string_view::copy: __pos (which is 666) &gt; __size (which is 6)
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc substr}}
{{dsc inc|cpp/string/basic_string/dsc copy}}
{{dsc inc|cpp/algorithm/dsc copy}}
{{dsc inc|cpp/string/byte/dsc memcpy}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
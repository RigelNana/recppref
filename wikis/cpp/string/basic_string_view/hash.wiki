{{cpp/title|hash{{small|&lt;std::string_view&gt;}}|hash{{small|&lt;std::wstring_view&gt;}}|hash{{small|&lt;std::u8string_view&gt;}}|hash{{small|&lt;std::u16string_view&gt;}}|hash{{small|&lt;std::u32string_view&gt;}}}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl header|string_view}}
{{dcl|since=c++17|
template&lt;&gt; struct hash&lt;std::string_view&gt;;
}}
{{dcl|since=c++17|
template&lt;&gt; struct hash&lt;std::wstring_view&gt;;
}}
{{dcl|since=c++20|
template&lt;&gt; struct hash&lt;std::u8string_view&gt;;
}}
{{dcl|since=c++17|
template&lt;&gt; struct hash&lt;std::u16string_view&gt;;
}}
{{dcl|since=c++17|
template&lt;&gt; struct hash&lt;std::u32string_view&gt;;
}}
{{dcl end}}

Template specializations of {{lc|std::hash}} for the various view classes for hashing views.

These hashes equal the hashes of corresponding {{lc|std::basic_string}} classes: If S is one of the standard basic_string types, SV is the corresponding string view type, and s is an object of type S, then {{c|std::hash&lt;S&gt;()(s) {{==}} std::hash&lt;SV&gt;()(SV(s))}}.

===Example===
{{example|code=
#include &lt;iostream&gt;
#include &lt;string_view&gt;
#include &lt;unordered_set&gt;
using namespace std::literals;

int main()
{
    std::cout &lt;&lt; "\"A\"   #: " &lt;&lt; std::hash&lt;std::string_view&gt;{}("A"sv) &lt;&lt; '\n';
    std::cout &lt;&lt; "L\"B\"  #: " &lt;&lt; std::hash&lt;std::wstring_view&gt;{}(L"B"sv) &lt;&lt; '\n';
    std::cout &lt;&lt; "u8\"C\" #: " &lt;&lt; std::hash&lt;std::u8string_view&gt;{}(u8"C"sv) &lt;&lt; '\n';
    std::cout &lt;&lt; "u\"D\"  #: " &lt;&lt; std::hash&lt;std::u16string_view&gt;{}(u"D"sv) &lt;&lt; '\n';
    std::cout &lt;&lt; "U\"E\"  #: " &lt;&lt; std::hash&lt;std::u32string_view&gt;{}(U"E"sv) &lt;&lt; '\n';

    // std::hash for string_view family makes it possible to keep these view-types
    // in unordered_* associative containers, such as unordered_set. But ensure
    // the lifespan of referenced strings is no less than lifespan of the container,
    // i.e. no dangling references occurred.

    std::unordered_set stars{"Rigel"sv, "Capella"sv, "Vega"sv, "Arcturus"sv};

    for (std::string_view const&amp; s : stars)
        std::cout &lt;&lt; s &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|p=true
|output=
"A"   #: 6919333181322027406
L"B"  #: 11959850520494268278
u8"C" #: 12432341034569643010
u"D"  #: 312659256970442235
U"E"  #: 18073225910249204957
Arcturus Vega Capella Rigel
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc hash}}
{{dsc end}}
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc hash}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
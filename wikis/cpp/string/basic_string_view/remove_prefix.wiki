{{cpp/string/basic_string_view/title|remove_prefix}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl|since=c++17|
constexpr void remove_prefix( size_type n );
}}
{{dcl end}}

Moves the start of the view forward by {{c|n}} characters.

The behavior is undefined if {{c|n &gt; size()}}.

===Parameters===
{{par begin}}
{{par|n|number of characters to remove from the start of the view}}
{{par end}}

===Return value===
(none)

===Complexity===
Constant.

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

using namespace std::literals;

[[nodiscard("a pure function")]]
constexpr std::size_t count_substrings(std::string_view hive, std::string_view const bee)
{
    if (hive.empty() {{!!}} bee.empty())
        return 0U;

    std::size_t buzz{};
    while (bee.size() &lt;= hive.size())
    {
        const auto pos = hive.find(bee);
        if (pos == hive.npos)
            break;
        ++buzz;
        hive.remove_prefix(pos + bee.size());
    }
    return buzz;
}

int main()
{
    std::string str = "   trim me";
    std::string_view v = str;
    v.remove_prefix(std::min(v.find_first_not_of(" "), v.size()));
    std::cout &lt;&lt; "String: '" &lt;&lt; str &lt;&lt; "'\n"
              &lt;&lt; "View  : '" &lt;&lt; v &lt;&lt; "'\n";

    constexpr auto hive{"bee buzz bee buzz bee"};
    std::cout &lt;&lt; "There are " &lt;&lt; count_substrings(hive, "bee") &lt;&lt; " bees in this hive.\n";
}
|output=
String: '   trim me'
View  : 'trim me'
There are 3 bees in this hive.
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc remove_suffix}}
{{dsc end}}

{{langlinks|es|ja|zh}}
{{title|deduction guides for {{tt|std::basic_string_view}}}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl header|string_view}}
{{dcl|num=1|since=c++20|
template&lt; class It, class End &gt;
basic_string_view( It, End ) -&gt; basic_string_view&lt;std::iter_value_t&lt;It&gt;&gt;;
}}
{{dcl|num=2|since=c++23|
template&lt; class R &gt;
basic_string_view( R&amp;&amp; ) -&gt; basic_string_view&lt;ranges::range_value_t&lt;R&gt;&gt;;
}}
{{dcl end}}

These [[cpp/language/class template argument deduction|deduction guides]] are provided for {{lc|std::basic_string_view}}.

@1@ This deduction guide allow the character type to be deduced from the iterator-sentinel pair. {{cpp/enable_if|{{tt|It}} satisfies {{lconcept|contiguous_iterator}} and {{tt|End}} satisfies {{lconcept|sized_sentinel_for}} for {{tt|It}}}}.

@2@ This deduction guide allow the character type to be deduced from the range. {{cpp/enable_if|{{tt|R}} satisfies {{lconcept|contiguous_range}}}}.

===Example===
{{example
|code=
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

int main()
{
    std::array a1{'n', 'u', 'c', 'l', 'e', 'o', 'n', 's', ':', '\n'};
    std::basic_string_view s1(a1.cbegin(), a1.cend()); // deduction: CharT -&gt; char
    static_assert(std::is_same_v&lt;decltype(s1)::value_type, char&gt;);
    std::cout &lt;&lt; s1;

    std::array a2{L'p', L'r', L'o', L't', L'o', L'n', L's', L'\n'};
    std::basic_string_view s2(a2.cbegin(), a2.cend()); // deduction: CharT -&gt; wchar_t
    static_assert(std::is_same_v&lt;decltype(s2)::value_type, wchar_t&gt;);
    std::wcout &lt;&lt; s2;

    std::array&lt;long, 9&gt; a3{'n', 'e', 'u', 't', 'r', 'o', 'n', 's', '\n'};
    std::basic_string_view s3(a3.cbegin(), a3.cend()); // deduction: CharT -&gt; long
    static_assert(std::is_same_v&lt;decltype(s3)::value_type, long&gt;);
    for (const auto e : s3)
        std::cout &lt;&lt; static_cast&lt;char&gt;(e);
}
|output=
nucleons:
protons
neutrons
}}

{{langlinks|es|ja|ru|zh}}
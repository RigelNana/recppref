{{cpp/string/basic_string_view/title|compare}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|
constexpr int compare( basic_string_view v ) const noexcept;
}}
{{dcl|num=2|since=c++17|
constexpr int compare( size_type pos1, size_type count1,
                       basic_string_view v ) const;
}}
{{dcl|num=3|since=c++17|
constexpr int compare( size_type pos1, size_type count1, basic_string_view v,
                       size_type pos2, size_type count2 ) const;
}}
{{dcl|num=4|since=c++17|
constexpr int compare( const CharT* s ) const;
}}
{{dcl|num=5|since=c++17|
constexpr int compare( size_type pos1, size_type count1,
                       const CharT* s ) const;
}}
{{dcl|num=6|since=c++17|
constexpr int compare( size_type pos1, size_type count1,
                       const CharT* s, size_type count2 ) const;
}}
{{dcl end}}

Compares two character sequences.

@1@ The length {{tt|rlen}} of the sequences to compare is the smaller of {{c|size()}} and {{c|v.size()}}. The function compares the two views by calling {{c|traits::compare(data(), v.data(), rlen)}}, and returns a value according to the following table:

{|class="wikitable" style="text-align:center;"
!colspan=2|Condition
!Result
!Return value
|-
|colspan=2 style="text-align:left;"|{{tt|Traits::compare(data(), v.data(), {{spar|rlen}}) &lt; 0}}
|{{tt|this}} is ''less'' than {{tt|v}}
|{{c|&lt; 0}}
|-
|rowspan=3|{{tt|1=Traits::compare(data(), v.data(), {{spar|rlen}}) == 0}}
|{{tt|size() &lt; v.size()}}
|{{tt|this}} is ''less'' than {{tt|v}}
|{{c|&lt; 0}}
|-
&lt;!-- --&gt;
|{{tt|1=size() == v.size()}}
|{{tt|this}} is ''equal'' to {{tt|v}}
|{{c|0}}
|-
&lt;!-- --&gt;
|{{tt|size() &gt; v.size()}}
|{{tt|this}} is ''greater'' than {{tt|v}}
|{{c|&gt; 0}}
|-
|colspan=2 style="text-align:left;"|{{tt|Traits::compare(data(), v.data(), {{spar|rlen}}) &gt; 0}}
|{{tt|this}} is ''greater'' than {{tt|v}}
|{{c|&gt; 0}}
|}

@2@ Equivalent to {{c|substr(pos1, count1).compare(v)}}.
@3@ Equivalent to {{c|substr(pos1, count1).compare(v.substr(pos2, count2))}}.
@4@ Equivalent to {{c|compare(basic_string_view(s))}}.
@5@ Equivalent to {{c|substr(pos1, count1).compare(basic_string_view(s))}}.
@6@ Equivalent to {{c|substr(pos1, count1).compare(basic_string_view(s, count2))}}.

===Parameters===
{{par begin}}
{{par|v|view to compare}}
{{par|s|pointer to the character string to compare to}}
{{par|count1|number of characters of this view to compare}}
{{par|pos1|position of the first character in this view to compare}}
{{par|count2|number of characters of the given view to compare}}
{{par|pos2|position of the first character of the given view to compare}}
{{par end}} 

===Return value===
Negative value if this view is less than the other character sequence, zero if the both character sequences are equal, positive value if this view is greater than the other character sequence.

===Complexity===
1) Linear in the number of characters compared.

===Example===
{{example|code=
#include &lt;string_view&gt;

int main()
{
    using std::operator""sv;
    static_assert("abc"sv.compare("abcd"sv) &lt; 0);
    static_assert("abcd"sv.compare("abc"sv) &gt; 0);
    static_assert("abc"sv.compare("abc"sv) == 0);
    static_assert(""sv.compare(""sv) == 0);
}
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc {{SUBPAGENAMEE}}}}
{{dsc inc|cpp/string/basic_string_view/dsc operator_cmp}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
{{cpp/string/basic_string_view/title|max_size}}
{{cpp/string/basic_string_view/navbar}}
{{ddcl|since=c++17|
constexpr size_type max_size() const noexcept;
}}

The largest possible number of char-like objects that can be referred to by a {{tt|basic_string_view}}.

===Parameters===
(none)

===Return value===
Maximum number of characters.

===Complexity===
Constant.

===Example===
{{example
|code=
#include &lt;cstdint&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;string_view&gt;

int main()
{
    std::cout &lt;&lt; std::numeric_limits&lt;std::int64_t&gt;::max()
              &lt;&lt; " &lt;- numeric_limits&lt;int64_t&gt;::max()\n"
              &lt;&lt; std::string_view{}.max_size()
              &lt;&lt; " &lt;- string_view::max_size()\n"
              &lt;&lt; std::basic_string_view&lt;char&gt;{}.max_size()
              &lt;&lt; " &lt;- basic_string_view&lt;char&gt;::max_size()\n"
              &lt;&lt; std::basic_string_view&lt;char16_t&gt;{}.max_size()
              &lt;&lt; " &lt;- basic_string_view&lt;char16_t&gt;::max_size()\n"
              &lt;&lt; std::wstring_view{}.max_size()
              &lt;&lt; " &lt;- wstring_view::max_size()\n"
              &lt;&lt; std::basic_string_view&lt;char32_t&gt;{}.max_size()
              &lt;&lt; " &lt;- basic_string_view&lt;char32_t&gt;::max_size()\n";
}
|p=true
|output=
9223372036854775807 &lt;- numeric_limits&lt;int64_t&gt;::max()
4611686018427387899 &lt;- string_view::max_size()
4611686018427387899 &lt;- basic_string_view&lt;char&gt;::max_size()
2305843009213693949 &lt;- basic_string_view&lt;char16_t&gt;::max_size()
1152921504606846974 &lt;- wstring_view::max_size()
1152921504606846974 &lt;- basic_string_view&lt;char32_t&gt;::max_size()
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc size}}
{{dsc inc|cpp/string/basic_string_view/dsc empty}}
{{dsc inc|cpp/string/basic_string/dsc max_size}}
{{dsc end}}

{{langlinks|es|ja|ru|zh}}
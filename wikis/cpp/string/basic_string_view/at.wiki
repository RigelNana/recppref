{{cpp/string/basic_string_view/title|at}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl|since=c++17|
constexpr const_reference at( size_type pos ) const;
}}
{{dcl end}}

Returns a {{tt|const}} reference to the character at specified location {{c|pos}}. Bounds checking is performed, exception of type {{lc|std::out_of_range}} will be thrown on invalid access.

===Parameters===
{{par begin}}
{{par|pos|position of the character to return}}
{{par end}}

===Return value===
{{tt|Const}} reference to the requested character.

===Exceptions===
Throws {{lc|std::out_of_range}} if {{c|1=pos &gt;= size()}}.

===Complexity===
Constant.

===Example===
{{example
|p=true
|code=
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
#include &lt;string_view&gt;

int main()
{
    std::string_view str_view("abcdef");

    try
    {
        for (std::size_t i = 0; true; ++i)
            std::cout &lt;&lt; i &lt;&lt; ": " &lt;&lt; str_view.at(i) &lt;&lt; '\n';
    }
    catch (const std::out_of_range&amp; e)
    {
        std::cout &lt;&lt; "Whooops. Index is out of range.\n";
        std::cout &lt;&lt; e.what() &lt;&lt; '\n';
    }
}
|output=
0: a
1: b
2: c
3: d
4: e
5: f
6: Whooops. Index is out of range.
basic_string_view::at: __pos (which is 6) &gt;= this-&gt;size() (which is 6)
}}

===See also===

{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc operator_at}}
{{dsc inc|cpp/string/basic_string/dsc {{SUBPAGENAMEE}}}}
{{dsc end}}

{{langlinks|es|ja|zh}}
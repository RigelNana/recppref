{{cpp/title|atoi|atol|atoll}}
{{cpp/string/byte/navbar}}
{{dcl begin}}
{{dcl header|cstdlib}}
{{dcl|num=1|
int       atoi( const char* str );
}}
{{dcl|num=2|
long      atol( const char* str );
}}
{{dcl|num=3|since=c++11|
long long atoll( const char* str );
}}
{{dcl end}}

Interprets an integer value in a byte string pointed to by {{c|str}}. The implied radix is always 10.

{{cpp/string/cvt str2int}}

===Parameters===
{{par begin}}
{{par|str|pointer to the null-terminated byte string to be interpreted}}
{{par end}}

===Return value===

Integer value corresponding to the contents of {{c|str}} on success.

If no conversion can be performed, {{c|0}} is returned.

===Possible implementation===
{{eq fun|1=
template&lt;typename T&gt;
T atoi_impl(const char* str)
{
    while (std::isspace(static_cast&lt;unsigned char&gt;(*str)))
        ++str;

    bool negative = false;

    if (*str == '+')
        ++str;
    else if (*str == '-')
    {
        ++str;
        negative = true;
    }

    T result = 0;
    for (; std::isdigit(static_cast&lt;unsigned char&gt;(*str)); ++str)
    {
        int digit = *str - '0';
        result *= 10;
        result -= digit; // calculate in negatives to support INT_MIN, LONG_MIN,..
    }

    return negative ? result : -result;
}

int atoi(const char* str)
{
    return atoi_impl&lt;int&gt;(str);
}

long atol(const char* str)
{
    return atoi_impl&lt;long&gt;(str);
}

long long atoll(const char* str)
{
    return atoi_impl&lt;long long&gt;(str);
}
}}

Actual C++ library implementations fall back to C library implementations of {{tt|atoi}}, {{tt|atoil}}, and {{tt|atoll}}, which either implement it directly (as in [https://github.com/bminor/musl/blob/master/src/stdlib/atoi.c MUSL libc]) or delegate to {{lc|std::strtol|strtol}}/{{lc|std::strtoll|strtoll}} (as in [https://github.com/bminor/glibc/blob/master/stdlib/atoi.c GNU libc]).

===Example===
{{example
|code=
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;

int main()
{
    const auto data =
    {
        "42",
        "0x2A", // treated as "0" and junk "x2A", not as hexadecimal
        "3.14159",
        "31337 with words",
        "words and 2",
        "-012345",
        "10000000000" // note: out of int32_t range
    };

    for (const char* s : data)
    {
        const int i{std::atoi(s)};
        std::cout &lt;&lt; "std::atoi('" &lt;&lt; s &lt;&lt; "') is " &lt;&lt; i &lt;&lt; '\n';
        if (const long long ll{std::atoll(s)}; i != ll)
            std::cout &lt;&lt; "std::atoll('" &lt;&lt; s &lt;&lt; "') is " &lt;&lt; ll &lt;&lt; '\n';
    }
}
|p=true
|output=
std::atoi('42') is 42
std::atoi('0x2A') is 0
std::atoi('3.14159') is 3
std::atoi('31337 with words') is 31337
std::atoi('words and 2') is 0
std::atoi('-012345') is -12345
std::atoi('10000000000') is 1410065408
std::atoll('10000000000') is 10000000000
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc stol}}
{{dsc inc|cpp/string/basic_string/dsc stoul}}
{{dsc inc|cpp/string/byte/dsc strtol}}
{{dsc inc|cpp/string/byte/dsc strtoul}}
{{dsc inc|cpp/string/byte/dsc strtoimax}}
{{dsc inc|cpp/utility/dsc from_chars}}
{{dsc see c|c/string/byte/atoi|atoi|atol|atoll}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
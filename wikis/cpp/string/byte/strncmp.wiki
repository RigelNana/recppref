{{cpp/title|strncmp}}
{{cpp/string/byte/navbar}}
{{ddcl|header=cstring|
int strncmp( const char* lhs, const char* rhs, std::size_t count );
}}

Compares at most {{c|count}} characters of two possibly null-terminated arrays. The comparison is done lexicographically. Characters following the null character are not compared.

The sign of the result is the sign of the difference between the values of the first pair of characters (both interpreted as {{c|unsigned char}}) that differ in the arrays being compared.

The behavior is undefined when access occurs past the end of either array {{c|lhs}} or {{c|rhs}}. The behavior is undefined when either {{c|lhs}} or {{c|rhs}} is the null pointer.

===Parameters===
{{par begin}}
{{par|lhs, rhs|pointers to the possibly null-terminated arrays to compare}}
{{par|count|maximum number of characters to compare}}
{{par end}}

===Return value===
Negative value if {{c|lhs}} appears before {{c|rhs}} in lexicographical order.

Zero if {{c|lhs}} and {{c|rhs}} compare equal, or if {{c|count}} is zero.

Positive value if {{c|lhs}} appears after {{c|rhs}} in lexicographical order.

===Notes===
This function is not locale-sensitive, unlike {{lc|std::strcoll}} and {{lc|std::strxfrm}}.

===Example===
{{example
|code=
#include &lt;cstring&gt;
#include &lt;iostream&gt;

void demo(const char* lhs, const char* rhs, int sz)
{
    const int rc = std::strncmp(lhs, rhs, sz);
    if (rc &lt; 0)
        std::cout &lt;&lt; "First " &lt;&lt; sz &lt;&lt; " chars of ["
                  &lt;&lt; lhs &lt;&lt; "] precede [" &lt;&lt; rhs &lt;&lt; "]\n";
    else if (rc &gt; 0)
        std::cout &lt;&lt; "First " &lt;&lt; sz &lt;&lt; " chars of ["
                  &lt;&lt; lhs &lt;&lt; "] follow [" &lt;&lt; rhs &lt;&lt; "]\n";
    else
        std::cout &lt;&lt; "First " &lt;&lt; sz &lt;&lt; " chars of ["
                  &lt;&lt; lhs &lt;&lt; "] equal [" &lt;&lt; rhs &lt;&lt; "]\n";
}

int main()
{
    demo("Hello, world!", "Hello, everybody!", 13);
    demo("Hello, everybody!", "Hello, world!", 13);
    demo("Hello, everybody!", "Hello, world!", 7);
    demo("Hello, everybody!" + 12, "Hello, somebody!" + 11, 5);
}
|output=
First 13 chars of [Hello, world!] follow [Hello, everybody!]
First 13 chars of [Hello, everybody!] precede [Hello, world!]
First 7 chars of [Hello, everybody!] equal [Hello, world!]
First 5 chars of [body!] equal [body!]
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc strcmp}}
{{dsc inc|cpp/string/wide/dsc wcsncmp}}
{{dsc inc|cpp/string/byte/dsc memcmp}}
{{dsc inc|cpp/string/byte/dsc strcoll}}
{{dsc see c|c/string/byte/strncmp}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|zh}}
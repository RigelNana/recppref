{{cpp/title|strcmp}}
{{cpp/string/byte/navbar}}
{{ddcl|header=cstring|
int strcmp( const char* lhs, const char* rhs );
}}

Compares two null-terminated byte strings lexicographically.

The sign of the result is the sign of the difference between the values of the first pair of characters (both interpreted as {{c|unsigned char}}) that differ in the strings being compared.

The behavior is undefined if {{c|lhs}} or {{c|rhs}} are not pointers to null-terminated strings.

===Parameters===
{{par begin}}
{{par|lhs, rhs|pointers to the null-terminated byte strings to compare}}
{{par end}}

===Return value===
Negative value if {{c|lhs}} appears before {{c|rhs}} in lexicographical order.

Zero if {{c|lhs}} and {{c|rhs}} compare equal.

Positive value if {{c|lhs}} appears after {{c|rhs}} in lexicographical order.

===Example===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

int main() 
{
    std::vector&lt;const char*&gt; cats{"Heathcliff", "Snagglepuss", "Hobbes", "Garfield"};
    std::sort(cats.begin(), cats.end(), [](const char* strA, const char* strB)
    {
        return std::strcmp(strA, strB) &lt; 0;
    }); 

    for (const char* cat : cats)
        std::cout &lt;&lt; cat &lt;&lt; '\n';
}
|output=
Garfield
Heathcliff
Hobbes
Snagglepuss
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc strncmp}}
{{dsc inc|cpp/string/wide/dsc wcscmp}}
{{dsc inc|cpp/string/byte/dsc memcmp}}
{{dsc inc|cpp/string/byte/dsc strcoll}}
{{dsc see c|c/string/byte/strcmp}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/title|memset}}
{{cpp/string/byte/navbar}}
{{ddcl|header=cstring|
void* memset( void* dest, int ch, std::size_t count );
}}

Copies the value {{c|static_cast&lt;unsigned char&gt;(ch)}} into each of the first {{c|count}} characters of the object pointed to by {{c|dest}}. If the object is a [[cpp/language/object#Subobjects|potentially-overlapping subobject]] or is not {{named req|TriviallyCopyable}} (e.g., scalar, C-compatible struct, or an array of trivially copyable type), the behavior is undefined. If {{c|count}} is greater than the size of the object pointed to by {{c|dest}}, the behavior is undefined.

===Parameters===
{{par begin}}
{{par|dest|pointer to the object to fill}}
{{par|ch|fill byte}}
{{par|count|number of bytes to fill}}
{{par end}}

===Return value===
{{c|dest}}

===Notes===
{{tt|std::memset}} may be optimized away (under the [[cpp/language/as if|as-if]] rules) if the object modified by this function is not accessed again for the rest of its lifetime (e.g., [https://gcc.gnu.org/bugzilla/show_bug.cgi?id=8537 gcc bug 8537]). For that reason, this function cannot be used to scrub memory (e.g., to fill an array that stored a password with zeroes).

Solutions for that include {{ltt|cpp/algorithm/fill|std::fill}} with volatile pointers, {{mark c23}} {{ltf|c/string/byte/memset|memset_explicit}}, {{mark c11}} {{ltt|c/string/byte/memset|memset_s}}, FreeBSD [https://www.freebsd.org/cgi/man.cgi?query=explicit_bzero explicit_bzero] or Microsoft [https://msdn.microsoft.com/en-us/library/windows/desktop/aa366877.aspx {{tt|SecureZeroMemory}}].

===Example===
{{example
|code=
#include &lt;bitset&gt;
#include &lt;climits&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;

int main()
{
    int a[4];
    using bits = std::bitset&lt;sizeof(int) * CHAR_BIT&gt;;
    std::memset(a, 0b1111'0000'0011, sizeof a);
    for (int ai : a)
        std::cout &lt;&lt; bits(ai) &lt;&lt; '\n';
}
|output=
00000011000000110000001100000011
00000011000000110000001100000011
00000011000000110000001100000011
00000011000000110000001100000011
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc memcpy}}
{{dsc inc|cpp/string/byte/dsc memmove}}
{{dsc inc|cpp/string/wide/dsc wmemset}}
{{dsc inc|cpp/algorithm/dsc fill}}
{{dsc inc|cpp/algorithm/dsc fill_n}}
{{dsc inc|cpp/types/dsc is_trivially_copyable}}
{{dsc see c|c/string/byte/memset}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
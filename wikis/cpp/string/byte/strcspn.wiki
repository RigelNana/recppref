{{cpp/title|strcspn}}
{{cpp/string/byte/navbar}}
{{ddcl|header=cstring|
std::size_t strcspn( const char *dest, const char *src );
}}

Returns the length of the maximum initial segment of the byte string pointed to by {{c|dest}}, that consists of only the characters ''not'' found in byte string pointed to by {{c|src}}.

The function name stands for "complementary span".

===Parameters===
{{par begin}}
{{par|dest|pointer to the null-terminated byte string to be analyzed}}
{{par|src|pointer to the null-terminated byte string that contains the characters to search for}}
{{par end}}

===Return value===
The length of the maximum initial segment that contains only characters not found in the byte string pointed to by {{c|src}}.

===Example===
{{example
|code=
#include &lt;cstddef&gt;
#include &lt;cstring&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::string s = "abcde312$#@";
    const char* invalid = "*$#";

    const std::size_t valid_len = std::strcspn(s.c_str(), invalid);
    if (valid_len != s.size())
    {
        std::cout &lt;&lt; std::quoted(s)
                  &lt;&lt; " contains invalid chars starting at position "
                  &lt;&lt; valid_len &lt;&lt; '\n'
                  &lt;&lt; std::string(valid_len + 1, '-') &lt;&lt; "^\n";
    }
}
|output=
"abcde312$#@" contains invalid chars starting at position 8
---------^
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc strspn}}
{{dsc inc|cpp/string/wide/dsc wcscspn}}
{{dsc inc|cpp/string/byte/dsc strpbrk}}
{{dsc inc|cpp/string/basic_string/dsc find_first_of}}
{{dsc see c|c/string/byte/strcspn}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
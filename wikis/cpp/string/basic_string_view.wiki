{{cpp/title|basic_string_view}}
{{cpp/string/basic_string_view/navbar}}
{{ddcl|header=string_view|since=c++17|1=
template&lt;
    class CharT,
    class Traits = std::char_traits&lt;CharT&gt;
&gt; class basic_string_view;
}}

The class template {{tt|basic_string_view}} describes an object that can refer to a constant contiguous sequence of {{tt|CharT}} with the first element of the sequence at position zero.

For a {{tt|basic_string_view}} {{c|str}}, pointers, iterators, and references to elements of {{c|str}} are invalidated when an operation invalidates a pointer in the range {{range|str.data()|str.data() + str.size()}}.

{{rrev|since=c++23|
Every specialization of {{tt|std::basic_string_view}} is a {{named req|TriviallyCopyable}} type.
}}

A typical implementation holds only two members: a pointer to constant {{tt|CharT}} and a size.

Several typedefs for common character types are provided:
{{dsc begin}}
{{dsc header|string_view}}
{{dsc hitem|Type|Definition}}
{{dsc|{{lc|std::string_view}} {{mark c++17}}|{{co|std::basic_string_view&lt;char&gt;}}}}
{{dsc|{{lc|std::wstring_view}} {{mark c++17}}|{{co|std::basic_string_view&lt;wchar_t&gt;}}}}
{{dsc|{{lc|std::u8string_view}} {{mark c++20}}|{{co|std::basic_string_view&lt;char8_t&gt;}}}}
{{dsc|{{lc|std::u16string_view}} {{mark c++17}}|{{co|std::basic_string_view&lt;char16_t&gt;}}}}
{{dsc|{{lc|std::u32string_view}} {{mark c++17}}|{{co|std::basic_string_view&lt;char32_t&gt;}}}}
{{dsc end}}

===Template parameters===
{{par begin}}
{{par|CharT|character type}}
{{par|Traits|{{named req|CharTraits}} class specifying the operations on the character type. Like for {{lc|std::basic_string}}, {{tt|Traits::char_type}} must name the same type as {{tt|CharT}} or the program is ill-formed.}}
{{par end}}

===Member types===
{{dsc begin}}
{{dsc hitem|Nested type|Definition}}
{{dsc|{{tt|traits_type}}|{{tt|Traits}}}}
{{dsc|{{tt|value_type}}|{{tt|CharT}}}}
{{dsc|{{tt|pointer}}|{{co|CharT*}}}}
{{dsc|{{tt|const_pointer}}|{{co|const CharT*}}}}
{{dsc|{{tt|reference}}|{{co|CharT&amp;}}}}
{{dsc|{{tt|const_reference}}|{{co|const CharT&amp;}}}}
{{dsc|{{tt|const_iterator}}|implementation-defined constant {{named req|RandomAccessIterator}},&lt;br&gt;
{{rev begin|noborder=false}}
{{rev|until=c++20|and {{named req|ContiguousIterator}}}}
{{rev|since=c++20|{{named req|ConstexprIterator}}, and {{lconcept|contiguous_iterator}}}}
{{rev end}}
whose {{tt|value_type}} is {{tt|CharT}}}}
{{dsc|{{tt|iterator}}|{{tt|const_iterator}}}}
{{dsc|{{tt|const_reverse_iterator}}|{{co|std::reverse_iterator&lt;const_iterator&gt;}}}}
{{dsc|{{tt|reverse_iterator}}|{{tt|const_reverse_iterator}}}}
{{dsc|{{tt|size_type}}|{{lc|std::size_t}}}}
{{dsc|{{tt|difference_type}}|{{lc|std::ptrdiff_t}}}}
{{dsc end}}

Note: {{tt|iterator}} and {{tt|const_iterator}} are the same type because string views are views into constant character sequences.

All requirements on the iterator types of a {{named req|Container}} applies to the {{tt|iterator}} and {{tt|const_iterator}} types of {{tt|basic_string_view}} as well.

===Member functions===
{{dsc begin}}
{{dsc h2|Constructors and assignment}}
{{dsc inc|cpp/string/basic_string_view/dsc constructor}}
{{dsc inc|cpp/string/basic_string_view/dsc operator{{=}}}}

{{dsc h2|Iterators}}
{{dsc inc|cpp/string/basic_string_view/dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc end}}
{{dsc inc|cpp/string/basic_string_view/dsc rbegin}}
{{dsc inc|cpp/string/basic_string_view/dsc rend}}

{{dsc h2|Element access}}
{{dsc inc|cpp/string/basic_string_view/dsc operator_at}}
{{dsc inc|cpp/string/basic_string_view/dsc at}}
{{dsc inc|cpp/string/basic_string_view/dsc front}}
{{dsc inc|cpp/string/basic_string_view/dsc back}}
{{dsc inc|cpp/string/basic_string_view/dsc data}}

{{dsc h2|Capacity}}
{{dsc inc|cpp/string/basic_string_view/dsc size}}
{{dsc inc|cpp/string/basic_string_view/dsc max_size}}
{{dsc inc|cpp/string/basic_string_view/dsc empty}}

{{dsc h2|Modifiers}}
{{dsc inc|cpp/string/basic_string_view/dsc remove_prefix}}
{{dsc inc|cpp/string/basic_string_view/dsc remove_suffix}}
{{dsc inc|cpp/string/basic_string_view/dsc swap}}

{{dsc h2|Operations}}
{{dsc inc|cpp/string/basic_string_view/dsc copy}}
{{dsc inc|cpp/string/basic_string_view/dsc substr}}
{{dsc inc|cpp/string/basic_string_view/dsc compare}}
{{dsc inc|cpp/string/basic_string_view/dsc starts_with}}
{{dsc inc|cpp/string/basic_string_view/dsc ends_with}}
{{dsc inc|cpp/string/basic_string_view/dsc contains}}
{{dsc inc|cpp/string/basic_string_view/dsc find}}
{{dsc inc|cpp/string/basic_string_view/dsc rfind}}
{{dsc inc|cpp/string/basic_string_view/dsc find_first_of}}
{{dsc inc|cpp/string/basic_string_view/dsc find_last_of}}
{{dsc inc|cpp/string/basic_string_view/dsc find_first_not_of}}
{{dsc inc|cpp/string/basic_string_view/dsc find_last_not_of}}

{{dsc h1|Constants}}
{{dsc inc|cpp/string/basic_string_view/dsc npos}}
{{dsc end}}

===Non-member functions===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc operator cmp}}
{{dsc h2|Input/output}}
{{dsc inc|cpp/string/basic_string_view/dsc operator ltlt}}
{{dsc end}}

===Literals===
{{dsc begin}}
{{dsc namespace|[[cpp/header/string_view#Synopsis|std::literals::string_view_literals]]|inline=true}}
{{dsc inc|cpp/string/basic_string_view/dsc operator""sv}}
{{dsc end}}

===Helper classes===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc hash}}
{{dsc end}}

===Helper templates===
{{ddcl|since=c++20|1=
template&lt; class CharT, class Traits &gt;
inline constexpr bool
    ranges::enable_borrowed_range&lt;std::basic_string_view&lt;CharT, Traits&gt;&gt; = true;
}}
This specialization of {{ltt|cpp/ranges/borrowed_range|ranges::enable_borrowed_range}} makes {{tt|basic_string_view}} satisfy {{lconcept|borrowed_range}}.

{{ddcl|since=c++20|1=
template&lt; class CharT, class Traits &gt;
inline constexpr bool
    ranges::enable_view&lt;std::basic_string_view&lt;CharT, Traits&gt;&gt; = true;
}}

This specialization of {{lc|ranges::enable_view}} makes {{tt|basic_string_view}} satisfy {{lconcept|view}}.

{{rrev|since=c++20|
==={{rl|deduction guides|Deduction guides}}===
}}

===Notes===
It is the programmer's responsibility to ensure that {{tt|std::string_view}} does not outlive the  pointed-to character array:
{{source|1=
std::string_view good{"a string literal"};
    // "Good" case: `good` points to a static array.
    // String literals reside in persistent data storage.

std::string_view bad{"a temporary string"s};
    // "Bad" case: `bad` holds a dangling pointer since the std::string temporary,
    // created by std::operator""s, will be destroyed at the end of the statement.
}}

Specializations of {{tt|std::basic_string_view}} are already trivially copyable types in all existing implementations, even before the formal requirement introduced in C++23.

{{ftm begin|std=1|comment=1}}
{{ftm|std=C++17|value=201606L|__cpp_lib_string_view|rowspan="2"|[[#Top|{{tt|std::string_view}}]]}}
{{ftm|std=C++20|value=201803L|-|{{named req|ConstexprIterator}}}}
{{ftm|std=C++23|value=202011L|__cpp_lib_string_contains|{{rlt|contains}}}}
{{ftm end}}

===Example===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string_view&gt;

int main()
{
    constexpr std::string_view unicode[]{"▀▄─", "▄▀─", "▀─▄", "▄─▀"};

    for (int y{}, p{}; y != 6; ++y, p = ((p + 1) % 4))
    {
        for (int x{}; x != 16; ++x)
            std::cout &lt;&lt; unicode[p];
        std::cout &lt;&lt; '\n';
    }
}
|output=
▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─
▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─
▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄
▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀
▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─
▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─
}}

===Defect reports===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3203|std=C++17|before=only pointers, iterators, and references&lt;br&gt;returned from the member functions of&lt;br&gt;{{tt|basic_string_view}} might be invalidated|after=all pointers, iterators, and references&lt;br&gt;to elements of {{tt|basic_string_view}}&lt;br&gt;may be invalidated}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/string/dsc basic_string}}
{{dsc inc|cpp/string/basic_string/dsc operator+}}
{{dsc inc|cpp/container/dsc span}}
{{dsc inc|cpp/utility/dsc initializer_list}}
{{dsc end}}

{{langlinks|de|es|ja|ru|zh}}
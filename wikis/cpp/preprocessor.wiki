{{title|Preprocessor}}
{{cpp/preprocessor/navbar}}
The preprocessor is executed at [[cpp/language/translation phases#Phase 4|translation phase 4]], before the compilation. The result of preprocessing is a single file which is then passed to the actual compiler.

===Directives===
The preprocessing directives control the behavior of the preprocessor. Each directive occupies one line and has the following format:

* the {{c|#}} character.
* a sequence of:
:* a standard-defined directive name (listed [[#Capabilities|below]]) followed by the corresponding arguments, or
:* one or more [[cpp/language/translation phases#Phase 3|preprocessing tokens]] where the beginning token is not a standard-defined directive name, in this case the directive is conditionally-supported with implementation-defined semantics{{rev inl|until=c++23| (e.g. a common non-standard extension is the directive {{c|#warning}} which emits a user-defined message during compilation)}}, or
:* nothing, in this case the directive has no effect.
* a line break.

{{rrev|since=c++20|
The [[cpp/language/modules|module and import directives]] are also preprocessing directives.
}}

Preprocessing directives must not come from macro expansion.
{{source|1=
#define EMPTY
EMPTY   #   include &lt;file.h&gt; // not a preprocessing directive
}}

===Capabilities===
The preprocessor has the source file translation capabilities:

* '''{{rl|conditional|conditionally}}''' compile parts of source file (controlled by directive {{c|#if}}, {{c|#ifdef}}, {{c|#ifndef}}, {{c|#else}}, {{c|#elif}}{{rev inl|since=c++23|, {{c|#elifdef}}, {{c|#elifndef}}}}, and {{c|#endif}}).
* '''{{rl|replace}}''' text macros while possibly concatenating or quoting identifiers (controlled by directives {{c|#define}} and {{c|#undef}}, and operators {{c|#}} and {{c|##}}).
* '''{{rl|include}}''' other files (controlled by directive {{c|#include}} {{rev inl|since=c++17|and checked with {{c|__has_include}}}}).
* cause an '''{{rl|error}}''' {{rev inl|since=c++23|or '''{{rl|error|warning}}'''}} (controlled by directive {{c|#error}}{{rev inl|since=c++23| or {{c|#warning}} respectively}}).

The following aspects of the preprocessor can be controlled:
* '''{{rl|impl|implementation-defined}}''' behavior (controlled by directive {{c|#pragma}} {{rev inl|since=c++11|and operator {{c|_Pragma}}}}). In addition, some compilers support (to varying degrees) the operator {{c|__pragma}} as a ''non-standard'' extension.
* '''{{rl|line|file name and line information}}''' available to the preprocessor (controlled by directive {{c|#line}}).

===Defect reports===
{{dr list begin}}
{{dr list item|wg=cwg|dr=2001|std=C++98|before=the behavior of using non-standard-defined directives was not clear|after=made conditionally-supported}}
{{dr list end}}

===See also===
{{dsc begin}}
{{dsc see cpp|cpp/preprocessor/replace#Predefined macros|Predefined Macro Symbols|nomono=true}}
{{dsc see cpp|cpp/symbol index/macro|Macro Symbol Index|nomono=true}}
{{dsc see c|c/preprocessor|nomono=true}}
{{dsc end}}

{{langlinks|ar|cs|de|es|fr|it|ja|ko|pl|pt|ru|tr|zh}}
---
// src/components/Mark.astro
interface Props {
  status: 'since' | 'deprecated' | 'removed' | 'lifecycle' | 'constexpr' | 'exposition-only';
  version?: string;
  since?: string;
  deprecated?: string;
  removed?: string;
}

const { status, version, since, deprecated, removed } = Astro.props;

let text = '';

switch (status) {
  case 'since':
    text = `(since C++${version})`;
    break;
  case 'deprecated':
    text = `(deprecated in C++${version})`;
    break;
  case 'removed':
    text = `(removed in C++${version})`;
    break;
  case 'constexpr':
    text = `constexpr`;
    break;
  case 'exposition-only':
    text = `exposition only`;
    break;
  case 'lifecycle':
    const parts = [];
    if (since) parts.push(`since: C++${since}`);
    if (deprecated) parts.push(`deprecated: C++${deprecated}`);
    if (removed) parts.push(`removed: C++${removed}`);
    text = parts.join(' / ');
    break;
}
---

<span data-status={status}>
  {text}
</span>
<style>
  span {
    font-size: 0.75rem;
    font-weight: 500;
    padding: 0.25rem 0.625rem;
    border-radius: 9999px;
  }

  [data-status="since"] {
    --bg-color: rgba(16, 185, 129, 0.1);
    --text-color: #34d399;
  }
  [data-status="deprecated"] {
    --bg-color: rgba(245, 158, 11, 0.1);
    --text-color: #f59e0b;
  }
  [data-status="removed"] {
    --bg-color: rgba(239, 68, 68, 0.1);
    --text-color: #ef4444;
  }
  [data-status="constexpr"] {
    --bg-color: rgba(139, 92, 246, 0.1);
    --text-color: #8b5cf6;
  }
  [data-status="exposition-only"] {
    --bg-color: rgba(107, 114, 128, 0.1);
    --text-color: #9ca3af;
  }
  [data-status="lifecycle"] {
    --bg-color: rgba(59, 130, 246, 0.1);
    --text-color: #3b82f6;
  }

  span {
    background-color: var(--bg-color);
    color: var(--text-color);
  }
</style>

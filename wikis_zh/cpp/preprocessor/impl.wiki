{{title|实现定义的行为控制}}
{{cpp/preprocessor/navbar}}
实现定义的行为受 {{c/core|#pragma}} 指令控制。

===语法===
{{sdsc begin}}
{{sdsc|num=1|{{ttb|#pragma}} {{spar|语用形参}}}}
{{sdsc|num=2|notes={{mark since c++11}}|{{ttb|_Pragma(}} {{spar|字符串字面量}} {{ttb|)}}}}
{{sdsc end}}
@1@ 具有由实现定义的行为方式。
@2@ 从 {{spar|字符串字面量}} 移除 {{tt|L}} 前缀（如果存在），外层引号，及前导/尾随空白符，将每个 {{c|\"}} 替换为 {{c|"}}、将每个 {{c|\\}} 替换为 {{c|\}}，然后将结果记号化（像[[cpp/language/translation phases#阶段 3|翻译阶段 3]] 中一样），再如同将结果作为 {{v|1}} 中的输入来使用。

===解释===
语用指令控制编译器的特定于实现的行为，如禁用编译器警告或更改对齐要求。无法识别的语用会被忽略。

===非标准语用===
ISO C++ 语言标准并不要求编译器支持任何语用。不过，多种实现都支持几种非标准的语用：

===={{c/core|#pragma STDC}}====
ISO C 语言标准要求 C 编译器支持下列三种语用，一些 C++ 编译器供应商在它们的 C++ 前端中以不同的程度支持它们：

{{sdsc begin}}
{{sdsc|num=1|{{ttb|#pragma STDC FENV_ACCESS }}{{spar|实参}}}}
{{sdsc|num=2|{{ttb|#pragma STDC FP_CONTRACT }}{{spar|实参}}}}
{{sdsc|num=3|{{ttb|#pragma STDC CX_LIMITED_RANGE }}{{spar|实参}}}}
{{sdsc end}}

其中 {{spar|实参}} 是 {{ttb|ON}}、{{ttb|OFF}} 和 {{ttb|DEFAULT}} 之一。

@1@ 如果设为 {{ttb|ON}}，就会告知编译器程序将访问或修改[[c/numeric/fenv|浮点环境]]，这意味着可能推翻标志测试和模式更改（例如，全局共用子表达式删除，代码移动，及常量折叠）的优化将被禁用。默认值由实现定义，通常是 {{ttb|OFF}}。
@2@ 允许浮点表达式的''缩略（contracting）''行为，即一种优化，表达式严格按书面求值时可被观察到的一些舍入错误和浮点异常将被忽略。例如，允许 {{c|(x * y) + z}} 使用单条融合乘加 CPU 指令实现。默认值由实现定义，通常是 {{ttb|ON}}。
@3@ 告知编译器，复数的乘法、除法和绝对值可以使用简化的数学公式 {{math|1=(x+iy)×(u+iv) = (xu-yv)+i(yu+xv)}} {{math|1=(x+iy)/(u+iv) = [(xu+yv)+i(yu-xv)]/(u{{su|p=2}}+v{{su|p=2}})}}，和 {{math|1={{!}}x+iy{{!}} = {{mrad|x{{su|p=2}}+y{{su|p=2}}}}}}，而不考虑中间溢出的可能性。换言之，程序员保证传递给这些函数的值范围是受限的。默认值为 {{ttb|OFF}}。

上述三种语用只能在所有外部声明之外，或在所有显式声明或复合语句中的所有语句之前出现，否则程序的行为未定义。

注意：不支持这些语用的编译器可能会提供等价的编译时选项，例如 gcc 的 {{tt|-fcx-limited-range}} 和 {{tt|-ffp-contract}}。

===={{c/core|#pragma once}}====
{{cpp/preprocessor/pragma once}}

===={{c/core|#pragma pack}}====
{{cpp/preprocessor/pragma pack}}

===引用===
{{ref std c++23}}
{{ref std|section=15.9|title=Pragma directive|id=cpp.pragma}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=15.9|title=Pragma directive|id=cpp.pragma}}
{{ref std end}}
{{ref std c++17}}
{{ref std|section=19.6|title=Pragma directive|id=cpp.pragma}}
{{ref std end}}
{{ref std c++14}}
{{ref std|section=16.6|title=Pragma directive|id=cpp.pragma}}
{{ref std end}}
{{ref std c++11}}
{{ref std|section=16.6|title=Pragma directive|id=cpp.pragma}}
{{ref std end}}
{{ref std c++98}}
{{ref std|section=16.6|title=Pragma directive|id=cpp.pragma}}
{{ref std end}}

===参阅===
{{dsc begin}}
{{dsc see c|c/preprocessor/impl|实现定义行为控制|nomono=true}}
{{dsc end}}

===外部链接===
{{elink begin}}
{{elink|[https://docs.microsoft.com/en-us/cpp/preprocessor/pragma-directives-and-the-pragma-keyword Visual Studio 的 C++ 语用]}}
{{elink|GCC 接受的 [https://gcc.gnu.org/onlinedocs/gcc/Pragmas.html 语用]}}
{{elink|IBM AIX XL C 16.1 的[https://www.ibm.com/support/knowledgecenter/en/SSGH3R_16.1.0/com.ibm.xlcpp161.aix.doc/compiler_ref/pragma_descriptions.html 各条语用描述]及[https://www.ibm.com/support/knowledgecenter/en/SSGH3R_16.1.0/com.ibm.xlcpp161.aix.doc/language_ref/std_pragmas.html 标准语用]}}
{{elink|Sun Studio 11 C++ 用户指南中的 [http://download.oracle.com/docs/cd/E19422-01/819-3690/Pragmas_App.html#73499 附录 B 语用]}}
{{elink|[https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/pragmas.html Intel C++ 编译器语用]}}
{{elink|1=HP aCC A.06.25 的[https://h20565.www2.hpe.com/hpsc/doc/public/display?sp4ts.oid=4268164&amp;docLocale=en_US&amp;docId=emr_na-c02653979 发行注记（包括语用）]}}
{{elink end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
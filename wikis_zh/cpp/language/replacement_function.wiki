{{title|替换函数}}
{{cpp/language/functions/navbar}}

特定函数的实现由实现提供，这些函数是''可替换函数''。C++ 程序可以提供具有可替换函数的{{rlp|function#函数签名|签名}}的定义，它被称为''替换函数''。使用可替换函数时会用替换函数（如果有提供）替换由实现提供的默认版本。此类替换会在程序启动前发生。

如果替换函数的声明不满足以下任意条件，那么程序非良构，不要求诊断：
* 它不是{{rlp|inline|内联}}的。
* 它{{rlp|modules#模块所有权|附着于}}全局模块。
* 它具有 C++ {{rlp|language linkage|语言链接}}。
* 它的返回类型与可替换函数相同。
* 如果可替换函数在[[cpp/header|标准库标头]]中声明，那么它在该标头中作为的该声明的重声明时合法。

{{rrev|since=c++26|
===核心语言===
由实现定义{{rlps|contracts#约定违背处理函数}} {{c|::handle_contract_violation}} 是否可替换。
}}

===标准库===
以下标准库函数均可替换，并且对函数语义的描述同时适用于 C++ 标准库定义的默认版本和程序定义的替换函数：

{{dsc begin}}
{{dsc inc|cpp/memory/new/dsc operator new}}
{{dsc inc|cpp/memory/new/dsc operator delete}}
{{dsc inc|cpp/utility/dsc is_debugger_present}}
{{dsc end}}

===示例===
{{example
|使用替换分配函数：
|code=
#include &lt;cstddef&gt;
#include &lt;new&gt;
#include &lt;print&gt;

// 替换函数
void* operator new(std::size_t count)
{
    std::print("已替换！");
    return nullptr;
}

int main()
{
    int* ptr = new int; // 调用程序定义的替换版本
}
|output=
已替换！
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
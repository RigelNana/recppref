{{title|字符字面量}}
{{cpp/language/expressions/navbar}}

===语法===
{{sdsc begin}}
{{sdsc|num=1|{{ttb|'}}{{spar sep|c字符}}{{ttb|'}}}}
{{sdsc|num=2|notes={{mark since c++17}}|{{ttb|u8'}}{{spar sep|c字符}}{{ttb|'}}}}
{{sdsc|num=3|notes={{mark since c++11}}|{{ttb|u'}}{{spar sep|c字符}}{{ttb|'}}}}
{{sdsc|num=4|notes={{mark since c++11}}|{{ttb|U'}}{{spar sep|c字符}}{{ttb|'}}}}
{{sdsc|num=5|{{ttb|L'}}{{spar sep|c字符}}{{ttb|'}}}}
{{sdsc|num=6|{{ttb|'}}{{spar sep|c字符序列}}{{ttb|'}}}}
{{sdsc|num=7|notes={{mark until c++23}}|{{ttb|L'}}{{spar sep|c字符序列}}{{ttb|'}}}}
{{sdsc end}}

{{par begin}}
{{par|{{spar|c字符}}|下列之一：}}
* 一个{{spar|基本c字符}}
* 一个转义序列，定义见{{rlp|escape|转义序列}}
* 一个通用字符名，定义见{{rlp|escape|转义序列}}
{{par|{{spar|基本c字符}}|来自{{rev inl|until=c++23|{{rlp|charset#基本源字符集|基本源字符集}}}}{{rev inl|since=c++23|{{rlp|charset#翻译字符集|翻译字符集}}}}去掉单引号（{{ttb|'}}）、反斜杠（{{ttb|\}}）和换行符后的字符}}
{{par|{{spar|c字符序列}}|两个或更多个{{spar|c字符}}}}
{{par end}}

===解释===
@1@ 普通字符字面量，例如 {{c|'a'}} 或 {{c|'\n'}} 或 {{c|'\13'}}。这种字面量具有 {{c/core|char}} 类型，且它的值等于{{rev inl|until=c++23|{{spar sep|c字符}}在{{rlp|charset#执行字符集（旧定义）|执行字符集}}中的表示}}{{rev inl|since=c++23|来自{{rlp|charset#代码单元与字面量编码|普通字面量编码}}的对应代码单元}}。

@2@ UTF-8 字符字面量，例如 {{c|u8'a'}}。这种字面量具有 {{rev inl|until=c++20|{{c/core|char}}}}{{rev inl|since=c++20|{{c/core|char8_t}}}} 类型，且它的值等于{{spar sep|c字符}}的 [https://www.iso.org/standard/76835.html ISO/IEC 10646] 码位值，只要码位值能以单个 UTF-8 代码单元表示（即{{spar sep|c字符}}处于范围 0x0-0x7F（含边界）内）。

@3@ UTF-16 字符字面量，例如 {{c|u'猫'}}，但不是 {{c|u'🍌'}}（{{c|u'\U0001f34c'}}）。这种字面量具有 {{c/core|char16_t}} 类型，且它的值等于{{spar sep|c字符}}的 [https://www.iso.org/standard/76835.html ISO/IEC 10646] 码位值，只要该值能以单个 UTF-16 代码单元表示（即{{spar sep|c字符}}处于范围 0x0-0xFFFF（含边界）内）。

@4@ UTF-32 字符字面量，例如 {{c|U'猫'}} 或 {{c|U'🍌'}}。这种字面量具有 {{c/core|char32_t}} 类型，且它的值等于{{spar sep|c字符}}的 [https://www.iso.org/standard/76835.html ISO/IEC 10646] 码位值。

@5@ 宽字符字面量，例如 {{c|L'β'}} 或 {{c|L'猫'}}。这种字面量具有 {{c/core|wchar_t}} 类型，且它的值等于{{rev inl|until=c++23|{{spar sep|c字符}}在执行宽字符集中的表示}}{{rev inl|since=c++23|来自{{rlp|charset#代码单元与字面量编码|宽字面量编码}}的对应代码单元}}。

@6@ {{rev inl|until=c++23|普通多字符字面量}}{{rev inl|since=c++23|多字符字面量}}（条件性支持），例如 {{c|'AB'}}，具有 {{c/core|int}} 类型和实现定义的值。

@7@ 宽多字符字面量（条件性支持），例如 {{c|L'AB'}}，具有 {{c/core|wchar_t}} 类型和实现定义的值。

====不可编码字符====
@1-5@ 在{{spar sep|c字符}}不是数值转义序列（见下文）的情况下，如果{{spar sep|c字符}}无法在字面量对应的编码中表示，或者无法在该编码中表示为单个代码单元（例如在 {{c/core|wchar_t}} 是 16 位的 Windows 上的非 BMP 值），那么程序非良构。

@6@ 如果{{spar sep|c字符序列}}中有任何{{spar sep|c字符}}无法在{{rlp|charset#代码单元与字面量编码|普通字面量编码}}中表示为单个代码单元，那么程序非良构。

&lt;!-- 以下部分从未写入标准，它只是描述在 C++23 前的模式中宽多字符字面量关于不可编码的语义。 --&gt;
{{rrev|until=c++23|
@7@ 如果{{spar sep|c字符序列}}中有任何{{spar sep|c字符}}无法在{{rlp|charset#代码单元与字面量编码|宽字面量编码}}中表示为单个代码单元，那么程序非良构。
}}

====数值转义序列====
数值（八进制与十六进制）转义序列能用于指定字符的值。

{{rrev|since=c++23|
如果字符字面量只包含一个数值转义序列，且该转义序列指定的值能以它的类型的无符号版本表示，那么字符字面量拥有与指定值（可能在转换到字符类型后）相同的值。

UTF-''N'' 字符字面量能拥有它的类型可表示的任意值。即使该值对应的码位在 Unicode 中不合法或在 UTF-''N'' 中无法以单个代码单元表示，该值的数值转义序列依然可以指定它。例如 {{c|u8'\xff'}} 良构并等于 {{c|char8_t(0xFF)}}。
}}
&lt;br&gt;
{{rrev multi
|rev1=
如果一个普通或宽字符字面量中用来指定值的数值转义序列指定了一个无法分别以 {{c/core|char}} 或 {{c/core|wchar_t}} 表示的值，那么该字符字面量的值由实现定义。
|since2=c++23|rev2=
如果一个有单个{{spar sep|c字符}}的普通或宽字符字面量中用来指定值的数值转义序列所指定的值能分别以 {{c/core|char}} 或 {{c/core|wchar_t}} 的底层类型的无符号版本表示，那么该字面量的值是转换到字面量类型的有该无符号整数类型与指定值的整数值。否则程序非良构。
}}
&lt;br&gt;
{{rrev|since=c++11|
如果一个 UTF-''N'' 字符字面量中用来指定值的数值转义序列所指定的值不能以对应的 {{tt|char''N''_t}} 表示，那么{{rev inl|until=c++17|字符字面量的值由实现定义}}{{rev inl|since=c++17|程序非良构}}。
}}

===注解===
{{cpp/language/multichar-literal-note|cpp}}

在 C 中，诸如 {{c|'a'}} 或 {{c|'\n'}} 之类的字符常量具有 {{c/core|int}} 类型，而不是 {{c/core|char}}。

===示例===
{{example|code=
#include &lt;cstdint&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

template&lt;typename CharT&gt;
void dump(std::string_view s, const CharT c)
{
    const uint8_t* data{reinterpret_cast&lt;const uint8_t*&gt;(&amp;c)};
    
    std::cout &lt;&lt; s &lt;&lt; " \t" &lt;&lt; std::hex
              &lt;&lt; std::uppercase &lt;&lt; std::setfill('0');
    
    for (auto i{0U}; i != sizeof(CharT); ++i)
        std::cout &lt;&lt; std::setw(2) &lt;&lt; static_cast&lt;unsigned&gt;(data[i]) &lt;&lt; ' ';
    
    std::cout &lt;&lt; '\n';
}

void print(std::string_view str = "") { std::cout &lt;&lt; str &lt;&lt; '\n'; }

int main()
{
    print("普通字符字面量：");
    char c1 = 'a'; dump("'a'", c1);
    char c2 = '\x2a'; dump("'*'", c2);
 
    print("\n" "普通多字符字面量：");
    int mc1 = 'ab'; dump("'ab'", mc1);       // 由实现定义
    int mc2 = 'abc'; dump("'abc'", mc2);     // 由实现定义
 
    print("\n" "UTF-8 字符字面量：");
    char8_t C1 = u8'a'; dump("u8'a'", C1);
//  char8_t C2 = u8'¢'; dump("u8'¢'", C2);   // 错误：¢ 会映射到两个 UTF-8 代码单元
//  char8_t C3 = u8'猫'; dump("u8'猫'", C3); // 错误：猫 会映射到三个 UTF-8 代码单元
//  char8_t C4 = u8'🍌'; dump("u8'🍌'", C4); // 错误：🍌 会映射到四个 UTF-8 代码单元
 
    print("\n" "UTF-16 字符字面量：");
    char16_t uc1 = u'a'; dump("u'a'", uc1);
    char16_t uc2 = u'¢'; dump("u'¢'", uc2);
    char16_t uc3 = u'猫'; dump("u'猫'", uc3);
//  char16_t uc4 = u'🍌'; dump("u'🍌'", uc4); // 错误：🍌 会映射到两个 UTF-16 代码单元
 
    print("\n" "UTF-32 字符字面量：");
    char32_t Uc1 = U'a'; dump("U'a'", Uc1);
    char32_t Uc2 = U'¢'; dump("U'¢'", Uc2);
    char32_t Uc3 = U'猫'; dump("U'猫'", Uc3);
    char32_t Uc4 = U'🍌'; dump("U'🍌'", Uc4);
 
    print("\n" "宽字符字面量：");
    wchar_t wc1 = L'a'; dump("L'a'", wc1);
    wchar_t wc2 = L'¢'; dump("L'¢'", wc2);
    wchar_t wc3 = L'猫'; dump("L'猫'", wc3);
    wchar_t wc4 = L'🍌'; dump("L'🍌'", wc4);  // 从 C++23 开始在 Windows 上不支持
}
|p=true
|output=
普通字符字面量：
'a' 	61 
'*' 	2A 

普通多字符字面量：
'ab' 	62 61 00 00 
'abc' 	63 62 61 00 

UTF-8 字符字面量：
u8'a' 	61 

UTF-16 字符字面量：
u'a' 	61 00 
u'¢' 	A2 00 
u'猫' 	2B 73 

UTF-32 字符字面量：
U'a' 	61 00 00 00 
U'¢' 	A2 00 00 00 
U'猫' 	2B 73 00 00 
U'🍌' 	4C F3 01 00 

宽字符字面量：
L'a' 	61 00 00 00 
L'¢' 	A2 00 00 00 
L'猫' 	2B 73 00 00 
L'🍌' 	4C F3 01 00
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=cwg|dr=912|std=C++98|before=未指明不可编码的通常字符字面量|after=指定为条件性支持}}
{{dr list item|wg=cwg|dr=1024|std=C++98|before=要求支持多字符字面量|after=改为条件性支持}}
{{dr list item|wg=cwg|dr=1656|std=C++98|before=字符字面量中的数值转义序列的含义不明确|after=已指定}}
{{dr list item|paper=P1854R4|std=C++98|before=包含不可编码字符的字符字面量受条件性支持|after=程序非良构}}
{{dr list end}}

===引用===
{{ref std c++23}}
{{ref std| section=5.13.3|title=Character literals|id=lex.ccon}}
{{ref std end}}
{{ref std c++20}}
{{ref std| section=5.13.3|title=Character literals|id=lex.ccon}}
{{ref std end}}
{{ref std c++17}}
{{ref std| section=5.13.3|title=Character literals|id=lex.ccon}}
{{ref std end}}
{{ref std c++14}}
{{ref std| section=2.14.3|title=Character literals|id=lex.ccon}}
{{ref std end}}
{{ref std c++11}}
{{ref std| section=2.14.3|title=Character literals|id=lex.ccon}}
{{ref std end}}
{{ref std c++03}}
{{ref std| section=2.13.2|title=Character literals|id=lex.ccon}}
{{ref std end}}
{{ref std c++98}}
{{ref std| section=2.13.2|title=Character literals|id=lex.ccon}}
{{ref std end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/language/dsc user_literal}}
{{dsc see c|c/language/character_constant|字符常量|nomono=true}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{title|浮点数字面量}}
{{cpp/language/expressions/navbar}}

浮点数字面量定义一种编译时常量，其值于源文件中指定。

===语法===
{{sdsc begin}}
{{sdsc|num=1| {{spar|数字序列}} {{spar|十进制指数}} {{spar optional|后缀}}}}
{{sdsc|num=2| {{spar|数字序列}} {{ttb|.}} {{spar optional|十进制指数}} {{spar optional|后缀}}}}
{{sdsc|num=3| {{spar optional|数字序列}} {{ttb|.}} {{spar|数字序列}} {{spar optional|十进制指数}} {{spar optional|后缀}}}}
{{sdsc|num=4|notes={{mark since c++17}}|{{ttb|0x}} {{!}} {{ttb|0X}} {{spar|十六进制数字序列}} {{spar|十六进制指数}} {{spar optional|后缀}}}}
{{sdsc|num=5|notes={{mark since c++17}}|{{ttb|0x}} {{!}} {{ttb|0X}} {{spar|十六进制数字序列}} {{ttb|.}} {{spar|十六进制指数}} {{spar optional|后缀}}}}
{{sdsc|num=6|notes={{mark since c++17}}|{{ttb|0x}} {{!}} {{ttb|0X}} {{spar optional|十六进制数字序列}} {{ttb|.}} {{spar|十六进制数字序列}} {{spar|十六进制指数}} {{spar optional|后缀}}}}
{{sdsc end}}
@1@ {{spar|数字序列}} 表示无小数点的整数，此时指数不是可选的：{{c|1e10}}、{{c|1e-5L}}
@2@ {{spar|数字序列}} 表示带小数点的整数，此时指数是可选的：{{c|1.}}、{{c|1.e-2}}
@3@ {{spar|数字序列}} 表示小数。指数是可选的：{{c|3.14}}、{{c|.1f}}、{{c|0.1e-1L}}
@4@ 十六进制 {{spar|数字序列}} 表示无基底分隔符的整数。十六进制浮点数字面量的指数总是必选的：{{c|0x1ffp10}}、{{c|0X0p-1}}
@5@ 十六进制 {{spar|数字序列}} 表示带基底分隔符的整数。十六进制浮点数字面量的指数总是必选的：{{c|0x1.p0}}、{{c|0xf.p-1}}
@6@ 十六进制 {{spar|数字序列}} 表示带基底分隔符的小数。十六进制浮点数字面量的指数总是必选的：{{c|0x0.123p-1}}、{{c|0xa.bp10l}}

{{spar|十进制指数}} 拥有下列形式
{{sdsc begin}}
{{sdsc|{{ttb|e}} {{!}} {{ttb|E}} {{spar optional|指数正负号}} {{spar|数字序列}}}}
{{sdsc end}}

{{spar|十六进制指数}} 拥有下列形式
{{sdsc begin}}
{{sdsc|{{ttb|p}} {{!}} {{ttb|P}} {{spar optional|指数正负号}} {{spar|数字序列}}|notes={{mark since c++17}}}}
{{sdsc end}}

{{spar|指数正负号}} 若存在则为 {{ttb|+}} 或 {{ttb|-}}。

{{spar|后缀}} 若存在，则为 {{ttb|f}}、{{ttb|F}}、{{ttb|l}}、{{ttb|L}}{{rev inl|since=c++23|、{{ttb|f16}}、{{ttb|f32}}、{{ttb|f64}}、{{ttb|f128}}、{{ttb|bf16}}、{{ttb|F16}}、{{ttb|F32}}、{{ttb|F64}}、{{ttb|F128}}、{{ttb|BF16}}}} 之一。后缀决定浮点数字面量的类型：
:* （无后缀）定义 {{c/core|double}}
:* {{ttb|f F}} 定义 {{c/core|float}}
:* {{ttb|l L}} 定义 {{c/core|long double}}
{{rrev|since=c++23|
:* {{ttb|f16 F16}} 定义 {{lc|std::float16_t}}
:* {{ttb|f32 F32}} 定义 {{lc|std::float32_t}}
:* {{ttb|f64 F64}} 定义 {{lc|std::float64_t}}
:* {{ttb|f128 F128}} 定义 {{lc|std::float128_t}}
:* {{ttb|bf16 BF16}} 定义 {{lc|std::bfloat16_t}}
}}

{{anchor|单引号}}
{{rrev|since=c++14|
数字间可插入作为分隔符的单引号（{{c/core|'}}），在确定字面量的值时将忽略它们。
}}

===解释===
使用十进制科学计数法，表示浮点数字面量的值是有效数字乘以 10 的 {{spar|十进制指数}} 次幂。例如 {{c|123e4}} 的数学含义是 ''123×10&lt;sup&gt;4&lt;/sup&gt;''。

{{rrev|since=c++17|
若浮点数字面量以字符序列 {{tt|0x}} 或 {{tt|0X}} 开始，则该浮点数字面量是''十六进制浮点数字面量''。否则，它是''十进制浮点数字面量''。

对于''十六进制浮点数字面量''，其有效数字被解释为十六进制有理数，而指数的 {{spar|数字序列}} 被解释成有效数字所要乘的 2 的幂的（十进制）整数指数。

{{cc|1=double d = 0x1.4p3;}}{{tt|// 十六进制分数 1.4（十进制 1.25）的 2{{sup|3}}，即 10.0}}
}}

===注解===
虽然十六进制浮点数字面量直到 C++17 才成为（标准）C++ 的一部分，但是从 C++11 开始它们已经可以通过输入/输出函数被解析和打印：开启 {{c|std::hexfloat}} 的 C++ 输入/输出流和 C 输入/输出流：{{lc|std::printf}}，{{lc|std::scanf}} 等。格式描述请参考 {{lc|std::strtof}}。

{{feature test macro|value=201603L|std=C++17|__cpp_hex_float|十六进制浮点数字面量}}

===示例===
{{example|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;typeinfo&gt;

#define OUT(x) '\n' &lt;&lt; std::setw(16) &lt;&lt; #x &lt;&lt; x

int main()
{
    std::cout
        &lt;&lt; "字面量" "\t" "打印值" &lt;&lt; std::left
        &lt;&lt; OUT( 58.            ) // double
        &lt;&lt; OUT( 4e2            ) // double
        &lt;&lt; OUT( 123.456e-67    ) // double
        &lt;&lt; OUT( 123.456e-67f   ) // float, 向零截断
        &lt;&lt; OUT( .1E4f          ) // float
        &lt;&lt; OUT( 0x10.1p0       ) // double
        &lt;&lt; OUT( 0x1p5          ) // double
        &lt;&lt; OUT( 0x1e5          ) // 整数字面量，非浮点数
        &lt;&lt; OUT( 3.14'15'92     ) // double, 忽略单引号 (C++14)
        &lt;&lt; OUT( 1.18e-4932l    ) // long double
        &lt;&lt; std::setprecision(39)
        &lt;&lt; OUT( 3.4028234e38f  ) // float
        &lt;&lt; OUT( 3.4028234e38   ) // double
        &lt;&lt; OUT( 3.4028234e38l  ) // long double
        &lt;&lt; '\n';

    static_assert(3.4028234e38f == std::numeric_limits&lt;float&gt;::max());

    static_assert(3.4028234e38f ==  // 结尾为 4
                  3.4028235e38f);   // 结尾为 5

    static_assert(3.4028234e38 !=   // 结尾为 4
                  3.4028235e38);    // 结尾为 5

    // 以下浮点数常量均为 3.4028234e38
    static_assert(3.4028234e38f !=  // float（然后提升为 double）
                  3.4028234e38);    // double
}
|p=true
|output=
字面量          打印值
58.             58
4e2             400
123.456e-67     1.23456e-65
123.456e-67f    0
.1E4f           1000
0x10.1p0        16.0625
0x1p5           32
0x1e5           485
3.14'15'92      3.14159
1.18e-4932l     1.18e-4932
3.4028234e38f   340282346638528859811704183484516925440
3.4028234e38    340282339999999992395853996843190976512
3.4028234e38l   340282339999999999995912555211526242304
}}

===引用===
{{ref std c++23}}
{{ref std| section = 5.13.4| title=Floating-point literals| id= lex.fcon}}
{{ref std end}}
{{ref std c++20}}
{{ref std| section = 5.13.4| title=Floating-point literals| id= lex.fcon}}
{{ref std end}}
{{ref std c++17}}
{{ref std| section = 5.13.4| title=Floating literals| id= lex.fcon}}
{{ref std end}}
{{ref std c++14}}
{{ref std| section = 2.14.4| title=Floating literals| id= lex.fcon}}
{{ref std end}}
{{ref std c++11}}
{{ref std| section = 2.14.4| title=Floating literals| id= lex.fcon}}
{{ref std end}}
&lt;!--{{ref std c++03}}
{{ref std| section = 2.13.3| title=Floating literals| id= lex.fcon}}
{{ref std end}}N1804--&gt;
{{ref std c++98}}
{{ref std| section = 2.13.3| title=Floating literals| id= lex.fcon}}
{{ref std end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/language/dsc user_literal}}
{{dsc see c|c/language/floating_constant|浮点数常量|nomono=true}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
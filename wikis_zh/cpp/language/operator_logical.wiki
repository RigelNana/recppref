{{title|逻辑运算符}}
{{cpp/language/expressions/navbar}}
返回布尔运算的结果。

{| class="wikitable" style="font-size:85%;"
|-
! rowspan="2" | 运算符名
! rowspan="2" | 语法
! rowspan="2" | {{rlp|operators|可重载}}
! colspan="2" | 原型示例（对于类 {{c|class T}} ）
|-
! 类内定义
! 类外定义
|-
| 非
| {{c|not a}}
{{tt|!a}}
| {{yes}}
| {{c|bool T::operator!() const;}}
| {{c|bool operator!(const T &amp;a);}}
|-
| 与
| {{c|a and b}}
{{tt|a&amp;nbsp;&amp;&amp;&amp;nbsp;b}}
| {{yes}}
| {{c|bool T::operator&amp;&amp;(const T2 &amp;b) const;}}
| {{c|bool operator&amp;&amp;(const T &amp;a, const T2 &amp;b);}}
|-
| 同或
| {{c|a or b}}
{{tt|&lt;nowiki&gt;a&amp;nbsp;||&amp;nbsp;b&lt;/nowiki&gt;}}
| {{yes}}
| {{c|bool T::operator{{!!}}(const T2 &amp;b) const;}}
| {{c|bool operator{{!!}}(const T &amp;a, const T2 &amp;b);}}
|-
| colspan="5" |
:'''注解'''&lt;br&gt;
* 关键词形式（{{c|and}}、{{c|or}}、{{c|not}}）和符号形式（{{c|&amp;&amp;}}、{{c|{{!!}}}}、{{c|!}}）的使用可以互相代替（见{{rlp|operator_alternative|代用表示}}）
* 所有内建运算符都返回 {{c|bool}}，而大多数{{rlp|operators|用户定义重载}}亦返回 {{c|bool}}，以使用户定义运算符可以与内建版本相同的方式使用。然而，用户定义重载中能以任何类型为返回类型（包括 {{c|void}}）。
* 内建运算符 {{ttb|&amp;&amp;}} 和 {{ttb|{{!!}}}} 进行短路求值（若在求值第一个操作数后结果已知，则不求值第二个），但重载的运算符表现类似函数调用，并始终对两个操作数都进行求值。
|}

===解释===
逻辑运算符的形式为

{{sdsc begin}}
{{sdsc | num=1 | {{ttb|!}} {{spar|操作数}} }}
{{sdsc | num=2 | {{spar|左操作数}} {{ttb|&amp;&amp;}} {{spar|右操作数}} }}
{{sdsc | num=3 | {{spar|左操作数}} {{ttb|&lt;nowiki&gt;||&lt;/nowiki&gt;}} {{spar|右操作数}} }}
{{sdsc end}}
@1@ 逻辑非（NOT）
@2@ 逻辑与（AND）
@3@ 逻辑或（inclusive OR）

若操作数并非 {{c|bool}}，则用{{rlp|implicit_conversion|按语境转换为 bool}} 规则将它转换为 {{c|bool}}：仅当对某个虚构的临时量 {{tt|t}}，声明 {{tt|bool t(arg)}} 良构时，它才是良构的。

其结果是 {{c|bool}} 纯右值。

对于内建的逻辑非运算符，若操作数为 {{c|false}} 则结果为 {{c|true}}。否则结果为 {{c|false}}。

对于内建的逻辑与运算符，若两个运算数都是 {{c|true}} 则结果为 {{c|true}}。否则结果为 {{c|false}}。此运算符[[enwiki:Short-circuit_evaluation|短路求值]]：若第一操作数为 {{c|false}}，则不求值第二操作数。

对于内建的逻辑或运算符，若第一或第二操作数之一（或两者同）为 {{c|true}}，则结果为 {{c|true}}。此运算符短路求值：若第一操作数为 {{c|true}}，则不求值第二操作数。

注意{{rlp|operator_arithmetic|逐位逻辑运算符}}不进行短路求值。

===结果===
{|table class=wikitable
!{{c|a}}
|{{c|true}}
|{{c|false}}
|-
!{{c|!a}}
|{{c|false}}
|{{c|true}}
|}
{|table class=wikitable
!colspan=2 rowspan=2|{{c|and}}
!colspan=2|{{c|a}}
|-
|{{c|true}} &lt;!--a--&gt;
|{{c|false}} &lt;!--a--&gt;
|-
!rowspan=2|{{c|b}}
|{{c|true}} &lt;!--b--&gt;
|{{c|true}} &lt;!--true&amp;&amp;true--&gt;
|{{c|false}}&lt;!--true&amp;&amp;false--&gt;
|-
|{{c|false}}&lt;!--b--&gt;
|{{c|false}}&lt;!--true&amp;&amp;false--&gt;
|{{c|false}}&lt;!--false&amp;&amp;false--&gt;
|}
{|table class=wikitable
!colspan=2 rowspan=2|{{c|or}}
!colspan=2|{{c|a}}
|-
|{{c|true}} &lt;!--a--&gt;
|{{c|false}}&lt;!--a--&gt;
|-
!rowspan=2|{{c|b}}
|{{c|true}}&lt;!--b--&gt;
|{{c|true}}&lt;!--true||true--&gt;
|{{c|true}}&lt;!--true||false--&gt;
|-
|{{c|false}}&lt;!--b--&gt;
|{{c|true}}&lt;!--false||true--&gt;
|{{c|false}}&lt;!--false||false--&gt;
|}

在{{rlp|overload_resolution#调用重载运算符|面对用户定义运算符的重载决议}}中，下列内建函数签名参与重载决议：
{{dcl begin}}
{{dcl |bool operator!(bool)}}
{{dcl |bool operator&amp;&amp;(bool, bool)}}
{{dcl |bool operator{{!!}}(bool, bool)}}
{{dcl end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;

int main()
{
    int n = 2;
    int* p = &amp;n;
    // 指针可以转换为 bool
    if (    p &amp;&amp; *p == 2  // "p &amp;&amp;" 后可安全使用 "*p"
        {{!!}} !p &amp;&amp;  n != 2) // {{!!}} 的优先级低于 &amp;&amp;
        std::cout &lt;&lt; "true\n";

    // 流也可以转换为 bool
    cin &lt;&lt; "3...\n" &lt;&lt; "2...\n" &lt;&lt; "1...\n" &lt;&lt; "退出";
    std::cout &lt;&lt; "输入 'quit' 以退出。\n";
    for (std::string line;    std::cout &lt;&lt; "&gt; "
                           &amp;&amp; std::getline(std::cin, line)
                           &amp;&amp; line != "quit"; )
        std::cout &lt;&lt; line &lt;&lt; '\n';
}
|output=
true
输入 'quit' 以退出。
&gt; 3...
&gt; 2...
&gt; 1...
&gt;
}}

===标准库===
因为 {{tt|operator&amp;&amp;}} 和 {{tt|operator{{!!}}}} 的短路求值性质对重载不适用，又因为有布尔语义的类型不常见，故只有二个标准库类重载了这些运算符：

{{dsc begin}}
{{dsc mem fun | cpp/numeric/valarray/operator_arith | title=operator! |对 valarray 的每个元素应用一元算术运算符}}
{{dsc tfun | cpp/numeric/valarray/operator_arith3 | title=operator&amp;&amp;&lt;br&gt;operator&lt;nowiki&gt;||&lt;/nowiki&gt; |对两个 valarray 的每个元素，或一个 valarray 的每个元素和一个值应用二元运算符}}
{{dsc inc | cpp/io/basic_ios/dsc operator!}}
{{dsc end}}

===参阅===
{{rlp|operator precedence|运算符优先级}}

{{rlp|operators|运算符重载}}

{{cpp/language/operators}}
{{dsc begin}}
{{dsc see c | c/language/operator_logical |逻辑运算符|nomono=true}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
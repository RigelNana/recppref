{{title|零初始化}}
{{cpp/language/initialization/navbar}}
将一个对象的初始值设为零。

===语法===
注意零初始化在语言中没有专用语法，因此下列语法不是零初始化语法。这些是可能会进行零初始化的其他初始化的例子。

{{sdsc begin}}
{{sdsc|num=1|{{ttb|static}} {{spar|T}} {{spar|对象}} {{ttb|;}}}}
{{sdsc|num=2|
{{spar|T}} {{ttb|()}} {{ttb|;}}

{{spar|T}} {{spar|t}} {{ttb|{{=}}}} {{ttb|{}&lt;!-- --&gt;}} {{ttb|;}}

{{spar|T}} {{ttb|{}&lt;!-- --&gt;}} {{ttb|;}} {{mark since c++11}}
}}
{{sdsc|num=3|{{spar|CharT}} {{spar|数组}} {{ttb|[}} {{spar|n}} {{ttb|]}} {{ttb|{{=}} "}} {{spar|短序列}} {{ttb|";}}}}
{{sdsc end}}

===解释===
在下列情形进行零初始化：
@1@ 在所有其他初始化前，对每个具有静态{{rev inl|since=c++11|或线程局部}}{{rlp|storage duration|存储期}}的，不进行{{rlp|constant initialization|常量初始化}}的具名变量。
@2@ 作为非类类型变量，和被值初始化的无构造函数的类类型的成员的{{rlp|value initialization|值初始化}}序列的一部分，包括未提供初始化式的{{rlp|aggregate initialization|聚合体}}元素的值初始化。
@3@ 以不够长的{{rlp|aggregate initialization#字符数组|字符串字面量初始化}}任何{{rlp|types#字符类型|字符类型}}数组时，零初始化数组的剩余部分。

零初始化的效果是：
* 如果 {{tt|T}} 是标量类型，那么对象的初始值是将整数字面量 {{c|0}} {{rlp|explicit cast|显式转换}}到 {{tt|T}} 的值。 
* 如果 {{tt|T}} 是非联合体类类型，那么：
:* 初始化所有{{rlp|object#对象表示与值表示|填充位}}为零位，
:* 零初始化所有非静态{{rlp|data members|数据成员}}，
:* 零初始化所有非虚基类{{rlp|object#子对象|子对象}}，并且
:* 如果对象不是基类子对象，那么也零初始化所有{{rlp|derived class#虚基类|虚基类}}子对象。
* 如果 {{tt|T}} 是联合体类型，那么：
:* 初始化所有填充位为零位，
:* 零初始化对象的首个非静态具名数据成员。
* 如果 {{tt|T}} 是数组类型，那么零初始化每个元素。
* 如果 {{tt|T}} 是引用类型，那么不做任何事。

===注解===
如{{rlp|initialization#非局部变量|非局部初始化}}中所述，在进行任何其他初始化前，零初始化所有未被常量初始化的静态{{rev inl|since=c++11|和线程局部}}变量。如果非类类型非局部变量的定义没有初始化式，那么默认初始化不做任何事，不修改先前零初始化的结果。

零初始化的指针是其类型的空指针值，即使空指针的值并非整数零。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;

struct A
{
    int a, b, c;
};

double f[3];   // 零初始化为三个 0.0

int* p;        // 零初始化为空指针值（即使该值可能不是整数 0）

std::string s; // 零初始化为不确定值
               // 再通过 std::string 的默认构造函数默认初始化为 ""

int main(int argc, char* argv[])
{
    delete p; // 可以安全删除空指针
    
    static int n = argc; // 零初始化为 0，然后复制初始化为 argc
    std::cout &lt;&lt; "n = " &lt;&lt; n &lt;&lt; '\n';
    
    A a = A(); // 效果等同于 A a{}; 或 A a = {};
    std::cout &lt;&lt; "a = {" &lt;&lt; a.a &lt;&lt; ' ' &lt;&lt; a.b &lt;&lt; ' ' &lt;&lt; a.c &lt;&lt; "}\n";
}
|p=true &lt;!-- argc --&gt;
|output=
n = 1
a = {0 0 0}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=cwg|dr=277|std=C++98|before=指针可能会以值为 0 的非常量表达式进行&lt;br&gt;初始化，但后者不是空指针常量|after=必须以值为 0 的整数&lt;br&gt;常量表达式进行初始化}}
{{dr list item|wg=cwg|dr=694|std=C++98|before=零初始化类类型对象时不会处理填充位|after=填充位会被置零}}
{{dr list item|wg=cwg|dr=903|std=C++98|before=零初始化标量类型对象时会将初始值设为&lt;br&gt;从值为 0 的整数常量表达式转换而来的值|after=将该对象初始化为从整数&lt;br&gt;字面量 {{c|0}} 转换而来的值}}
{{dr list item|wg=cwg|dr=2026|std=C++98|before=始终首先进行零初始化，甚至先于常量初始化|after=适用常量初始化时不进行零初始化}}
{{dr list item|wg=cwg|dr=2196|std=C++98|before=零初始化类类型对象时不会考虑基类子对象|after=它们也会被零初始化}}
{{dr list item|wg=cwg|dr=2253|std=C++98|before=不明确无名位域是否适用零初始化|after=适用（初始化所有填充位为零位）}}
{{dr list end}}

===参阅===
* {{rlp|constructor|构造函数}}
* {{rlp|copy assignment|复制赋值}}
* {{rlp|default constructor|默认构造函数}}
* {{rlp|initialization|初始化}}
** {{rlp|aggregate initialization|聚合初始化}}
** {{rlp|constant initialization|常量初始化}}
** {{rlp|copy initialization|复制初始化}}
** {{rlp|default initialization|默认初始化}}
** {{rlp|direct initialization|直接初始化}}
** {{rlp|list initialization|列表初始化}}
** {{rlp|value initialization|值初始化}}
* {{rlp|move assignment|移动赋值}}
* {{rlpt|new}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
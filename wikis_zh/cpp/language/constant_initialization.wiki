{{title|常量初始化}}
{{cpp/language/initialization/navbar}}
设置{{rlp|storage duration|静态}}变量的初值为编译时常量。

===解释===
在以下情况下会进行''常量初始化''：
{{rev begin}}
{{rev|until=c++11|
* 以{{rlp|constant expression|常量表达式}}初始化具有{{rlps|storage duration#静态存储期}}的引用。

* 以常量表达式初始化具有静态存储期的{{rlps|type#简旧数据类型}}对象。
}}

{{rev|since=c++11|until=c++17|
* 在满足以下所有条件的情况下初始化具有{{rlp|storage duration#静态存储期|静态}}或{{rlp|storage duration#线程存储期|线程}}存储期的引用：
:* 初始化器中出现的每个{{rlps|expressions#完整表达式}}（包括隐式转换）都是{{rlp|constant expression|常量表达式}}。
:* 引用被绑定到以下实体之一：
::* 表示具有静态存储期的对象的左值
::* 临时对象
::* 临时对象的{{rlps|object#子对象}}&lt;!-- LWG 1834 --&gt;
::* 函数

* 在满足以下任一条件的情况下初始化具有静态或线程存储期的对象：
:* 如果对象通过调用构造函数来初始化，那么该初始化的完整表达式是一个常量表达式，但它也可以为该对象和它的子对象调用 {{rlp|constexpr#constexpr 构造函数|{{c/core|constexpr}} 构造函数}}（即使这些对象具有非{{rlp|constant expression#字面类型|字面}}类类型）。
:* 否则，要么该对象被{{rlp|value initialization|值初始化}}，要么初始化器中出现的每个完整表达式都是常量表达式。
}}

{{rev|since=c++17|until=c++20|
* 以{{rlps|expressions#完整表达式}}是{{rlp|constant expression|常量表达式}}的初始化器初始化具有{{rlp|storage duration#静态存储期|静态}}或{{rlp|storage duration#线程存储期|线程}}存储期的变量或临时对象，但在初始化的实体是对象时，初始化器也可以为该对象和它的{{rlps|object#子对象}}调用 {{rlp|constexpr#constexpr 构造函数|{{c/core|constexpr}} 构造函数}}（即使这些对象具有非{{rlp|constant expression#字面类型|字面}}类类型）。
}}

{{rev|since=c++20|
* {{rlp|constant expression#以常量初始化的实体|以常量初始化}}具有{{rlp|storage duration#静态存储期|静态}}或{{rlp|storage duration#线程存储期|线程}}存储期的变量{{rev inl|until=c++26|或临时对象}}。
}}
{{rev end}}

常量初始化的效果与其所对应的初始化的效果相同，但保证它在任何其他静态{{rev inl|since=c++11|或线程局部}}对象的初始化前完成。

===注解===
编译器也可以对其他的静态{{rev inl|since=c++11|及线程局部}}对象进行常量初始化，前提是它可以保证它们的值与遵循初始化的标准顺序时的结果相同。

常量初始化在实践中通常在程序被加载到内存时进行，作为程序运行环境的初始化的一部分。

===示例===
{{example
|
|code=
#include &lt;iostream&gt;
#include &lt;array&gt;

struct S
{
    static const int c;
};

const int d = 10 * S::c; // 非常量表达式：此 S::c 前没有初始化器，此初始化在常量初始化之后发生
const int S::c = 5;      // 常量初始化，保证首先发生

int main()
{
    std::cout &lt;&lt; "d = " &lt;&lt; d &lt;&lt; '\n';
    std::array&lt;int, S::c&gt; a1; // OK：S::c 是常量表达式
//  std::array&lt;int, d&gt; a2;    // 错误：d 不是常量表达式
}
|output=
d = 50
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=cwg|dr=441|std=C++98|before=不能常量初始化引用|after=使得可常量初始化}}
{{dr list item|wg=cwg|dr=1489|std=C++11|before=不明确对象的值初始化是否可以是常量初始化|after=可以是}}
{{dr list item|wg=cwg|dr=1747|std=C++11|before=绑定引用到函数不是常量初始化|after=可以是}}
{{dr list item|wg=cwg|dr=1834|std=C++11|before=绑定引用到亡值不是常量初始化|after=可以是}}
{{dr list end}}

===参阅===
* {{rlpt|constinit}}
* {{rlpt|constexpr}}
* {{rlp|constructor|构造函数}}
* {{rlp|converting constructor|转换构造函数}}
* {{rlp|copy constructor|复制构造函数}}
* {{rlp|default constructor|默认构造函数}}
* {{rlp|explicit}}
* {{rlp|initialization|初始化}}
** {{rlp|aggregate initialization|聚合初始化}}
** {{rlp|copy initialization|复制初始化}}
** {{rlp|default initialization|默认初始化}}
** {{rlp|direct initialization|直接初始化}}
** {{rlp|list initialization|列表初始化}}
** {{rlp|reference initialization|引用初始化}}
** {{rlp|value initialization|值初始化}}
** {{rlp|zero initialization|零初始化}}
* {{rlp|move constructor|移动构造函数}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
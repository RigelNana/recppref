{{title|转换构造函数}}
{{cpp/language/classes/navbar}}

不以说明符 {{rlp|explicit}} 声明{{rev inl|until=c++11|且可以用单个参数调用}}的构造函数被称为''转换构造函数（converting constructor）''。

与只在{{rlp|direct initialization|直接初始化}}（包括如 {{rlp|static_cast}} 这样的{{rlp|explicit cast|显式转换}}）中被考虑的显式构造函数不同，转换构造函数也会作为{{rlp|implicit conversion|用户定义的转换序列}}中的一部分而在{{rlp|copy initialization|复制初始化}}的考虑范围内。

通常说法是转换构造函数指定了一个从它的各实参类型（如果存在）到它的类类型的隐式转换。注意非显式的{{rlp|cast operator|用户定义转换函数}}也指定了一个隐式转换。

隐式声明的及用户定义的非显式{{rlp|copy constructor|复制构造函数}}与{{rlp|move constructor|移动构造函数}}也是转换构造函数。

===示例===
{{example|code=
struct A
{
    A() { }         // 转换构造函数 (C++11 起)  
    A(int) { }      // 转换构造函数
    A(int, int) { } // 转换构造函数 (C++11 起)
};

struct B
{
    explicit B() { }
    explicit B(int) { }
    explicit B(int, int) { }
};

int main()
{
    A a1 = 1;      // OK：复制初始化选择 A::A(int)
    A a2(2);       // OK：直接初始化选择 A::A(int)
    A a3{4, 5};    // OK：直接列表初始化选择 A::A(int, int)
    A a4 = {4, 5}; // OK：复制列表初始化选择 A::A(int, int)
    A a5 = (A)1;   // OK：进行 static_cast 显式转换，是直接初始化

//  B b1 = 1;      // 错误：复制初始化不考虑 B::B(int)
    B b2(2);       // OK：直接初始化选择 B::B(int)
    B b3{4, 5};    // OK：直接列表初始化选择 B::B(int, int)
//  B b4 = {4, 5}; // 错误：复制列表初始化选择了显式构造函数 B::B(int, int)
    B b5 = (B)1;   // OK：进行 static_cast 显式转换，是直接初始化
    B b6;          // OK：默认初始化
    B b7{};        // OK：直接列表初始化
//  B b8 = {};     // 错误：复制列表初始化选择了显式构造函数 B::B()

    [](...){}(a1, a4, a4, a5, b5); // 可能会抑制 "未使用的变量" 警告
}
}}

===参阅===
* {{rlp | copy elision | 复制消除}}
* {{rlp | copy assignment | 复制赋值}}
* {{rlp | copy constructor | 复制构造函数}}
* {{rlp | default constructor | 默认构造函数}}
* {{rlp | destructor | 析构函数}}
* {{rlp | explicit}}
* {{rlp | initialization | 初始化}}
** {{rlp | aggregate initialization | 聚合初始化}}
** {{rlp | constant initialization | 常量初始化}}
** {{rlp | copy initialization | 复制初始化}}
** {{rlp | default initialization | 默认初始化}}
** {{rlp | direct initialization | 直接初始化}}
** {{rlp | initializer list | 成员初始化式列表}}
** {{rlp | list initialization | 列表初始化}}
** {{rlp | reference initialization | 引用初始化}}
** {{rlp | value initialization | 值初始化}}
** {{rlp | zero initialization | 零初始化}}
* {{rlp | move assignment | 移动赋值}}
* {{rlp | move constructor | 移动构造函数}}
* {{rlp | new}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
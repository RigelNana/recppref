{{title|属性说明符序列 {{mark since c++11}}}}
{{cpp/language/attributes/navbar}}

为类型、对象、代码等引入由实现定义的属性。

===语法===
{{sdsc begin}}
{{sdsc|notes={{mark since c++11}}|1=
{{ttb|[&lt;!----&gt;[}} {{spar|属性列表}} {{ttb|]&lt;!----&gt;]}}
}}
{{sdsc|notes={{mark since c++17}}|1=
{{ttb|[&lt;!----&gt;[}} {{ttb|using}} {{spar|属性命名空间}} {{ttb|:}} {{spar|属性列表}} {{ttb|]&lt;!----&gt;]}}
}}
{{sdsc end}}
其中{{spar sep|属性列表}}是由逗号分隔的零或更多个{{spar sep|属性}}的序列（可以以指示{{rlp|parameter pack|包展开}}的省略号 {{ttb|...}} 结束） 
{{sdsc begin}}
{{sdsc|{{spar|标识符}}}}
{{sdsc|{{spar|属性命名空间}} {{ttb|::}} {{spar|标识符}}}}
{{sdsc|{{spar|标识符}} {{ttb|(}} {{spar optional|实参列表}} {{ttb|)}}}}
{{sdsc|{{spar|属性命名空间}} {{ttb|::}} {{spar|标识符}} {{ttb|(}} {{spar optional|实参列表}} {{ttb|)}}}}
{{sdsc end}}
其中{{spar|属性命名空间}}为一个{{spar|标识符}}，而{{spar|实参列表}}为其中圆括号、方括号和花括号平衡出现的记号序列（{{spar|平衡记号序列}}）。
@1@ 简单属性，例如 {{c|[[noreturn]]}}。
@2@ 有命名空间的属性，例如 {{c|[[gnu::unused]]}}。
@3@ 有实参的属性，例如 {{c|[[deprecated("原因")]]}}。
@4@ 既有命名空间又有实参列表的属性。

{{rrev|since=c++17|
如果 {{tt|using namespace:}} 出现在属性列表开头，那么属性列表中的其他属性均无法指定命名空间：由 using 所指定的命名空间会应用到所有这些属性：
{{source|1=
[[using CC: opt(1), debug]] // 同 [[CC::opt(1), CC::debug]]
[[using CC: CC::opt(1)]] // 错误：不能结合 using 和有作用域属性
}}
}}

===解释===
属性为各种由实现定义的语言扩展（例如 GNU 与 IBM 的语言扩展 {{tt|__attribute__((...))}}，微软的语言扩展 {{tt|__declspec()}} 等）提供了统一的语法。

属性可用在 C++ 程序中的几乎所有位置，而且可应用于几乎所有事物：类型、变量、函数、名字、代码块、整个翻译单元，不过每个特定的属性都只在实现允许范围内有效：{{attr/core|expect_true}} 可能是只能与 {{c/core|if}}，而非与类声明一同使用的属性，{{attr/core|omp::parallel()}} 可能是应用到代码块或 {{c/core|for}} 循环，而非到类型 {{c/core|int}} 等的属性。（请注意以上两个属性只是虚构的例子，有关标准与一些非标准属性请见下文。）

在声明中，属性既可以在整个声明之前出现，也可以直接跟在被声明实体的名字之后，这些情况下它们被组合起来。大多数其他情形中，属性应用于直接位于其之前的实体。

虽然 {{rlp|alignas|{{c/core|alignas}} 说明符}}拥有不同的语法，但它是属性序列说明符的一部分。它可以在 {{tt|[&lt;nowiki/&gt;[...]]}} 属性出现的地方出现，并可以和它们混合（假设此处允许使用 {{c/core|alignas}}）。

两个连续的方括号记号（{{tt|[&lt;!----&gt;[}}）只能出现于引入属性说明符之处，或在属性实参之内。

{{source|1=
void f()
{
    int y[3];
    y[&lt;!----&gt;[] { return 0; }()] = 1; // 错误
    int i [[cats::meow([[]])]]; // OK
}
}}

除了以下所列出的标准属性之外，实现还可能支持拥有由实现定义的行为的任意非标准属性。{{rev inl|since=c++17|所有实现所未知的属性均被忽略，且不产生错误。}}

{{rrev|since=c++20|
无{{spar sep|属性命名空间}}的属性与名字以 {{tt|std}} 或 {{tt|std}} 后随一或多个数字的{{spar sep|属性命名空间}}为未来标准化保留。即每个非标准属性都在实现提供的 {{spar|属性命名空间}} 中，例如 {{attr/core|gnu::may_alias}}、{{attr/core|clang::trivial_abi}} 和 {{attr/core|msvc::noop_dtor}}。
}}

===标准属性===
C++ 标准定义了下列属性。

标准属性不能在语法上被忽略：它们不能包含语法错误，必须应用到正确的目标，并且实参中的实体都会被 {{rlps|definition#ODR 使用}}。

标准属性也不能在语义上被忽略：程序在去掉某个标准属性的所有实例的情况下的行为必须是该程序在保留该属性的情况下遵守标准要求的行为。

{{dsc begin}}
{{dsc inc|cpp/language/attributes/dsc noreturn}}
{{dsc inc|cpp/language/attributes/dsc carries_dependency}}
{{dsc inc|cpp/language/attributes/dsc deprecated}}
{{dsc inc|cpp/language/attributes/dsc fallthrough}}
{{dsc inc|cpp/language/attributes/dsc maybe_unused}}
{{dsc inc|cpp/language/attributes/dsc nodiscard}}
{{dsc inc|cpp/language/attributes/dsc likely}}
{{dsc inc|cpp/language/attributes/dsc no_unique_address}}
{{dsc inc|cpp/language/attributes/dsc assume}}
{{dsc inc|cpp/language/attributes/dsc indeterminate}}
{{dsc inc|cpp/language/attributes/dsc optimize_for_synchronized}}
{{dsc end}}

===注解===
预处理宏 [[cpp/feature test#属性|{{tt|__has_cpp_attribute}}]] 可以检查平台是否实现某个单独属性。
{{ftm begin|core=yes|sort=yes}}
{{ftm|std=C++11|value=200809L|__cpp_attributes|属性}}
{{ftm|std=C++17|value=201411L|__cpp_namespace_attributes|可将属性应用到{{rlp|namespace|命名空间}}}}
{{ftm end}}

===示例===
{{example
|code=
[[gnu::always_inline]] [[gnu::hot]] [[gnu::const]] [[nodiscard]]
inline int f(); // 声明 f 带四个属性

[[gnu::always_inline, gnu::const, gnu::hot, nodiscard]]
int f(); // 同上，但使用含有四个属性的单个属性说明符

// C++17:
[[using gnu : const, always_inline, hot]] [[nodiscard]]
int f[[gnu::always_inline]](); // 属性可出现于多个说明符中

int f() { return 0; }

int main() {}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=cwg|dr=2079|std=C++11|before={{tt|[&lt;!----&gt;[}} 不能在属性实参之内出现|after=可以出现}}
{{dr list item|wg=cwg|dr=2538|std=C++11|before=不明确标准属性是否能在语法上被忽略|after=禁止忽略}}
{{dr list item|wg=cwg|dr=2695|std=C++11|before=不明确标准属性是否能在语义上被忽略|after=禁止忽略}}
{{dr list item|paper=P2156R1|std=C++11|before=每个标准属性在一个{{spar sep|属性列表}}中最多只能出现一次|after=不限制次数}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc|[[cpp/feature test#属性|{{ttb|__has_cpp_attribute}}]] - 检查某个属性是否存在}}
{{dsc see c|c/language/attributes|属性说明符序列|nomono=true}}
{{dsc end}}

===外部链接===
{{elink begin}}
{{elink|1=[https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html#Attribute-Syntax GCC 中的属性]。这些属性可用作 {{attr/core|gnu::...}}，见 [https://stackoverflow.com/questions/54639524/which-gnu-attributes-have-c11-syntax#comment96071307_54639524 SO 帖子]。}}
{{elink|1=[https://clang.llvm.org/docs/AttributeReference.html Clang 中的属性]。}}
{{elink|1=[https://learn.microsoft.com/en-us/cpp/cpp/attributes#microsoft-specific-attributes MSVC 中的属性]。}}
{{elink end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
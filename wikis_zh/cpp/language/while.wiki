{{title|{{tt|while}} 循环}}
{{cpp/language/statements/navbar}}
有条件地重复执行某条语句。

===语法===
{{sdsc begin}}
{{sdsc|{{spar optional|属性}} {{ttb|while (}} {{spar|条件}} {{ttb|)}} {{spar|语句}}}}
{{sdsc end}}

{{par begin}}
{{par|{{spar|属性}}|{{mark since c++11}} 任意数量的{{rlp|attributes|属性}}}}
{{par|{{spar|条件}}|[[#条件|条件]]}}
{{par|{{spar|语句}}|任意{{rlp|statements|语句}}（典型情况下是复合语句）}}
{{par end}}

{{cpp/language/condition|usage=确定是否会执行{{spar|语句}}|bool=yes}}

===解释===
{{c/core|while}} 语句等价于

{{sdsc begin}}
{{sdsc|
{{c/core|/* 标号 */}} {{ttb|:}}&lt;br&gt;
{{ttb|{}}&lt;br&gt;
:{{ttb|if (}} {{spar|条件}} {{ttb|)}}&lt;br&gt;
:{{ttb|{}}&lt;br&gt;
::{{spar|语句}}&lt;br&gt;
::{{ttb|goto}} {{c/core|/* 标号 */}} {{ttb|;}}&lt;br&gt;
:{{ttb|}&lt;!----&gt;}}&lt;br&gt;
{{ttb|}&lt;!----&gt;}}
}}
{{sdsc end}}

如果{{spar sep|条件}}是声明，那么它声明的变量会在循环的每次迭代中都被销毁和创建。

如果需要在{{spar sep|语句}}中结束循环，那么可以使用 {{rlp|break|{{c/core|break}} 语句}}作为终止语句。

如果需要在{{spar sep|语句}}中结束当前迭代，那么可以使用 {{rlp|continue|{{c/core|continue}} 语句}}作为快捷方式。

===注解===
无论{{spar sep|语句}}是否为复合语句，它始终都会引入一个{{rlp|scope|块作用域}}。换言之在其中声明的变量仅在循环体内可见。
{{source|1=
while (--x &gt;= 0)
    int i;
// i 离开作用域
}}
与下面的相同
{{source|1=
while (--x &gt;= 0)
{
    int i;
} // i 离开作用域
}}

{{cpp/language/process guarantee note}}

===关键词===
{{ltt|cpp/keyword/while}}

===示例===
{{example
|code=
#include &lt;iostream&gt;

int main()
{
    // 带单语句的 while 循环
    int i = 0;
    while (i &lt; 10)
         i++;
    std::cout &lt;&lt; i &lt;&lt; '\n';
    
    // 带复合语句的 while 循环
    int j = 2;
    while (j &lt; 9)
    {
        std::cout &lt;&lt; j &lt;&lt; ' ';
        j += 2;
    }
    std::cout &lt;&lt; '\n';
    
    // 带声明条件的 while 循环
    char cstr[] = "Hello";
    int k = 0;
    while (char c = cstr[k++])
        std::cout &lt;&lt; c;
    std::cout &lt;&lt; '\n';
}
|output=
10
2 4 6 8 
Hello
}}

===参阅===
{{dsc begin}}
{{dsc see c|c/language/while}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
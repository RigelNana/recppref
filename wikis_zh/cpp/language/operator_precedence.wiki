{{title|C++ 运算符优先级}}
{{cpp/language/expressions/navbar}}

下表列出 C++ 运算符的优先级和结合性。各个运算符以优先级的降序从上至下列出。{{c|a}}、{{c|b}} 和 {{c|c}} 都是操作数。

{| class="wikitable"
|-
! style="text-align: left" | 优先级
! style="text-align: left" | 运算符
! style="text-align: left" | 描述
! style="text-align: left" | 结合性
|-
! 1
|{{c|a::b}}
| {{rlp|identifiers#有限定的标识符|作用域解析}}
| style="vertical-align: top" rowspan="6" | 从左到右 →
|-
! rowspan=5| 2
|style="border-bottom-style: none"|{{c|a++}}{{nbsp}}{{c|a--}}
| style="border-bottom-style: none" | 后缀{{rlp|operator incdec|自增与自减}}
|-
|style="border-bottom-style: none; border-top-style: none"|{{box|{{tt|''type''}}{{c/core|(a)}}}}{{nbsp}}{{box|{{tt|''type''}}{{c/core|{a}&lt;!----&gt;}}}}
| style="border-bottom-style: none; border-top-style: none" | {{rlp|explicit cast|函数风格转换}}
|-
| style="border-bottom-style: none; border-top-style: none" | {{c|a()}}
| style="border-bottom-style: none; border-top-style: none" | {{rlp|operator other#内建的函数调用运算符|函数调用}}
|-
| style="border-bottom-style: none; border-top-style: none" | {{c|a[]}}
| style="border-bottom-style: none; border-top-style: none" | {{rlp|operator member access#内建的下标运算符|下标}}
|-
|style="border-bottom-style: none; border-top-style: none"|{{c|a.b}}{{nbsp}}{{c|a-&gt;b}}
| style="border-bottom-style: none; border-top-style: none" | {{rlp|operator member access#内建的成员访问运算符|成员访问}}
|-
! rowspan=10 | 3
|style="border-bottom-style: none"|{{c|++a}}{{nbsp}}{{c|--a}}
| style="border-bottom-style: none" | 前缀{{rlp|operator incdec|自增与自减}}
| style="vertical-align: top" rowspan="10" | 从右到左 ←
|-
|style="border-bottom-style: none; border-top-style: none"|{{c|+a}}{{nbsp}}{{c|-a}}
| style="border-bottom-style: none; border-top-style: none" | 一元{{rlp|operator arithmetic#一元算术运算符|加与减}}
|-
|style="border-bottom-style: none; border-top-style: none"|{{c|!a}}{{nbsp}}{{c|~a}}
| style="border-bottom-style: none; border-top-style: none" | {{rlp|operator logical|逻辑非}}和{{rlp|operator arithmetic#按位逻辑运算符|逐位非}}
|-
|style="border-bottom-style: none; border-top-style: none"|{{box|{{c/core|(}}{{tt|''type''}}{{c/core|)a}}}}
| style="border-bottom-style: none; border-top-style: none" | {{rlp|explicit cast|C 风格转换}}
|-
|style="border-bottom-style: none; border-top-style: none"|{{c|*a}}
| style="border-bottom-style: none; border-top-style: none" | {{rlp|operator member access#内建的间接运算符|间接}}（解引用）
|-
|style="border-bottom-style: none; border-top-style: none"|{{c|&amp;a}}
| style="border-bottom-style: none; border-top-style: none" | {{rlp|operator member access#内建的取地址运算符|取址}}
|-
| style="border-bottom-style: none; border-top-style: none" | {{rlpt|sizeof}}
| style="border-bottom-style: none; border-top-style: none" | {{rlp|sizeof|取大小}}&lt;ref group="注"&gt;{{tt|sizeof}} 的操作数不能是 C 风格转换：表达式 {{c|sizeof (int) * p}} 无歧义地分析为 {{c|(sizeof(int)) * p}}，而非 {{c|sizeof((int)*p)}}。&lt;/ref&gt;
|-
| style="border-bottom-style: none; border-top-style: none" | {{ltt|cpp/keyword/co_await}}
| style="border-bottom-style: none; border-top-style: none" | {{rlp|coroutines|await 表达式}} {{mark c++20}}
|-
|style="border-bottom-style: none; border-top-style: none"|{{rlpt|new}}{{nbsp}}&amp;ndash;{{nbsp}}{{rlpt|new|new[]}}
| style="border-bottom-style: none; border-top-style: none" | {{rlp|new|动态内存分配}}
|-
|style="border-top-style: none"|{{rlpt|delete}}{{nbsp}}&amp;ndash;{{nbsp}}{{rlpt|delete|delete[]}}
| style="border-top-style: none" | {{rlp|delete|动态内存释放}}
|-
! 4
|{{c|a.*b}}{{nbsp}}{{c|a-&gt;*b}}
| {{rlp|operator member access#内建的成员指针访问运算符|成员指针}}
| style="vertical-align: top" rowspan="12" | 从左到右 →
|-
! 5
|{{c|a * b}}{{nbsp}}{{c|a / b}}{{nbsp}}{{c|a % b}}
| {{rlp|operator arithmetic#乘法性运算符|乘法、除法与余数}}
|-
! 6
|{{c|a + b}}{{nbsp}}{{c|a - b}}
| {{rlp|operator arithmetic#加法性运算符|加法与减法}}
|-
! 7
|{{c|a &lt;&lt; b}}{{nbsp}}{{c|a &gt;&gt; b}}
| 逐位{{rlp|operator arithmetic#移位运算符|左移与右移}}
|-
! 8
|{{c|1=a &lt;=&gt; b}}
| {{rlp|operator comparison#三路比较|三路比较运算符}}{{mark since c++20}}
|-
! 9
|{{c|a &lt; b}}{{nbsp}}{{c|1=a &lt;= b}}{{nbsp}}{{c|a &gt; b}}{{nbsp}}{{c|1=a &gt;= b}}
| style="border-bottom-style: none" | 分别为 {{ttb|&lt;}} 与 {{ttb|1=&lt;=}} 与 {{ttb|1=&gt;}} 与 {{ttb|1=&gt;=}} 的{{rlp|operator comparison|关系运算符}}
|-
! 10
|{{c|1=a == b}}{{nbsp}}{{c|1=a != b}}
| 分别为 {{ttb|1==}} 与 {{ttb|1=!=}} 的{{rlp|operator comparison|相等性运算符}}
|-
! 11
|{{c|a &amp; b}}
| {{rlp|operator arithmetic#按位逻辑运算符|逐位与}}
|-
! 12
|{{c|a ^ b}}
| {{rlp|operator arithmetic#按位逻辑运算符|逐位异或}}（互斥或）
|-
! 13
|{{c|a {{!}} b}}
| {{rlp|operator arithmetic#按位逻辑运算符|逐位或}}（可兼或）
|-
! 14
|{{c|a &amp;&amp; b}}
| {{rlp|operator logical|逻辑与}}
|-
! 15
|{{c|a {{!!}} b}}
| {{rlp|operator logical|逻辑或}}
|-
! rowspan=8 | 16
| style="border-bottom-style: none" | {{tt|a?b:c}}
| style="border-bottom-style: none" | {{rlp|operator_other#条件运算符|三元条件}}&lt;ref group="注"&gt;条件运算符中部（{{ttb|?}} 与 {{ttb|:}} 之间）的表达式分析为如同其带有括号：忽略其相对于 {{tt|?:}} 的优先级。&lt;/ref&gt;
| style="vertical-align: top" rowspan="8" | 从右到左 ←
|-
| style="border-bottom-style: none; border-top-style: none" | {{rlpt|throw}}
| style="border-bottom-style: none; border-top-style: none" | {{rlp|throw|throw 运算符}}
|-
| style="border-bottom-style: none; border-top-style: none" | {{ltt|cpp/keyword/co_yield}}
| style="border-bottom-style: none; border-top-style: none" | {{rlp|coroutines|yield 表达式}} {{mark c++20}}
|-
|style="border-bottom-style: none; border-top-style: none"|{{c|1=a = b}}
| style="border-bottom-style: none; border-top-style: none" | {{rlp|operator assignment#内建的直接赋值|直接赋值}}（C++ 类默认提供）
|-
|style="border-bottom-style: none; border-top-style: none"|{{c|1=a += b}}{{nbsp}}{{c|1=a -= b}}
| style="border-bottom-style: none; border-top-style: none" | 以和及差{{rlp|operator assignment#内建的复合赋值|复合赋值}}
|-
|style="border-bottom-style: none; border-top-style: none"|{{c|1=a *= b}}{{nbsp}}{{c|1=a /= b}}{{nbsp}}{{c|1=a %= b}}
| style="border-bottom-style: none; border-top-style: none" | 以积、商及余数{{rlp|operator assignment#内建的复合赋值|复合赋值}}
|-
|style="border-bottom-style: none; border-top-style: none"|{{c|1=a &lt;&lt;= b}}{{nbsp}}{{c|1=a &gt;&gt;= b}}
| style="border-bottom-style: none; border-top-style: none" | 以逐位左移及右移{{rlp|operator assignment#内建的复合赋值|复合赋值}}
|-
|style="border-top-style: none"|{{c|1=a &amp;= b}}{{nbsp}}{{c|1=a ^= b}}{{nbsp}}{{c|1=a {{!}}= b}}
| style="border-top-style: none" | 以逐位与、异或及或{{rlp|operator assignment#内建的复合赋值|复合赋值}}
|-
! 17 
|{{c|a, b}}
| {{rlp|operator other#内建的逗号运算符|逗号}}
| 从左到右 →
|}
&lt;references group="注" /&gt;

分析表达式时，运算符的优先级与结合性影响表达式中运算对象组合的方式。


对于优先级不同的运算符：

列于上面表中某行的运算符，将比列于低于它的行中拥有较低优先级的任何运算符，更紧密地与其实参相绑定（如同用了括号）。例如，表达式 {{c|std::cout &lt;&lt; a &amp; b}} 和 {{c|*p++}} 会被分析为 {{c|(std::cout &lt;&lt; a) &amp; b}} 和 {{c|*(p++)}}，而非 {{c|std::cout &lt;&lt; (a &amp; b)}} 或 {{c|(*p)++}}。


对于优先级相同的运算符：

拥有相同优先级的运算符以其结合性的方向与各参数绑定。例如表达式 {{c|1=a = b = c}} 会被分析为 {{c|1=a = (b = c)}} 而非 {{c|1=(a = b) = c}}，因为赋值具有从右到左结合性，但 {{c|a + b - c}} 会被分析为 {{c|(a + b) - c}} 而非 {{c|a + (b - c)}}，因为加法和减法具有从左到右结合性。


结合性规定对于一元运算符是冗余的，只为完备而给出：

一元前缀运算符始终从右到左结合（{{c|delete ++*p}} 为 {{c|delete(++(*p))}}）

而一元后缀运算符始终从左到右结合（{{c|a[1][2]++}} 为 {{c|((a[1])[2])++}}）。

要注意，结合性对成员访问运算符是有意义的，即使在它们与一元后缀运算符组合时也是如此：{{c|a.b++}} 会被分析为 {{c|(a.b)++}} 而非 {{c|a.(b++)}}。


运算符优先级不受{{rlp|operators|运算符重载}}影响。

例如，{{c|std::cout &lt;&lt; a ? b : c;}} 会被分析为 {{c|(std::cout &lt;&lt; a) ? b : c;}}，因为算术左移的优先级高于条件运算符。

===注解===
优先级和结合性是编译时概念，与{{rlp|eval order|求值顺序}}无关，后者是运行时概念。

标准自身不指定优先级。它们是从文法导出的。

表中并未包括 {{rlpt|const_cast}}、{{rlpt|static_cast}}、{{rlpt|dynamic_cast}}、{{rlpt|reinterpret_cast}}、{{rlpt|typeid}}、{{rlpt|sizeof...}}、{{rlpt|noexcept}} 及 {{rlpt|alignof}}，因为它们决不会有歧义。

一些运算符拥有{{rlp|operator alternative|代用写法}}（例如，{{c/core|&amp;&amp;}} 可为 {{c/core|and}}、{{c/core|{{!!}}}} 可为 {{c/core|or}}、{{c/core|!}} 可为 {{c/core|not}} 等）。

C 中，三元条件运算符拥有高于赋值运算符的优先级。因此，表达式 {{c|1=e = a &lt; d ? a++ : a = d}} 在 C++ 中分析为 {{c|1=e = ((a &lt; d) ? (a++) : (a = d))}}，但在 C 中会由于 C 的语法或语义制约而编译失败。细节见对应的 C 页面。

===参阅===
{{cpp/language/operators}}
{{dsc begin}}
{{dsc see c|c/language/operator precedence|C 运算符优先级|nomono=true}}
{{dsc end}}

{{langlinks|ar|cs|de|en|es|fr|it|ja|ko|pt|ru|tr}}
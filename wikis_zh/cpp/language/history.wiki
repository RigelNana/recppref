{{title|C++ 的历史}}
{{cpp/language/navbar}}

==早期 C++==
* 1979：首次实现“带类的 C（C with Classes）”
# 新特性：{{rlp|classes|类}}，{{rlp|member functions|成员函数}}，{{rlp|derived class|派生类}}，分离编译，{{rlp|access|公开与私有访问控制}}，{{rlp|friend|友元}}，函数实参的类型检查，{{rlp|default arguments|默认实参}}，{{rlp|inline|内联函数}}，{{rlp|copy assignment|重载赋值运算符}}，{{rlp|initializer list|构造函数}}，{{rlp|destructor|析构函数}}，{{c|f()}} 与 {{c|f(void)}} 相同，调用的函数与返回的函数（同步特性，不在 C++ 中）
# 库：并发任务库（不在 C++ 中）
* 1982：出版 C with Classes 参考手册
* 1984：实现 C84，出版参考手册
* 1985：Cfront 1.0
# 新特性：{{rlp|virtual|虚函数}}，函数与{{rlp|operators|运算符的重载}}，{{rlp|reference|引用}}， {{ltt|cpp/memory/new/operator_new|new}} 和 {{ltt|cpp/memory/new/operator_delete|delete}} 运算符， {{rlp|cv|{{tt|const}} 关键词}}，作用域解析运算符
# 库添加：[[cpp/numeric/complex|复数]]，{{tt|string}}（AT&amp;T 版本），[[cpp/header/iostream|输入/输出流]]
* 1985：《C++ 程序设计语言》（The C++ Programming Language），第1版
* 1986："whatis?" 提案将剩余的设计目标写入文档，包含多继承，异常处理和模板。
* 1987：GCC 1.15.3 中加入 C++ 支持
* 1989：Cfront 2.0
# 新特性：{{rlp|derived class|多继承}}，{{rlp|pointer|成员指针}}，{{rlp|access|受保护访问}}，类型安全的连接，{{rlp|abstract class|抽象类}}，{{rlp|static#静态成员函数|静态}}和 {{rlp|member_functions#const、volatile 及引用限定的成员函数|const 限定}}的成员函数，类特有的 {{ltt|cpp/memory/new/operator_new#类特有的重载|new}} 和 {{ltt|cpp/memory/new/operator_delete#类特有的重载|delete}}
# 库添加：[[cpp/io/manip|输入/输出操纵符]]
* 1990：《带标注的 C++ 参考手册》（The Annotated C++ Reference Manual）
此书按设计描述语言，包含一些仍未实现的特性。它在 ISO 标准前作为事实标准。
# 新特性：{{rlp|namespace|命名空间}}，{{rlp|exceptions|异常处理}}，{{rlp|nested types|嵌套类}}，{{rlp|templates|模板}}
* 1991：Cfront 3.0
* 1991：《C++ 程序设计语言》（The C++ Programming Language），第2版

==标准 C++==
* 1990：ANSI C++ 委员会成立
* 1991：ISO C++ 委员会成立
* 1992：[https://www.rrsd.com/software_development/stl/stl/ STL] 以 C++ 实现

===C++98/03 时期===
* 1998：{{ttb|C++98}} (ISO/IEC 14882:1998)
# 新特性：RTTI（{{rlpt|dynamic_cast}}、{{rlpt|typeid}}），{{rlp|virtual#协变返回类型|协变返回类型}}，{{rlp|cast operator|转型运算符}}，{{rlpt|cv|mutable}}，{{rlpt|types#布尔类型|bool}}，条件中的声明，{{rlp|templates|模板实例化}}，{{rlp|member template|成员模板}}，export
# 库添加：[[cpp/locale|本地环境]]，{{ltt|cpp/utility/bitset}}，{{ltt|cpp/numeric/valarray}}，{{ltt|cpp/memory/auto_ptr}}，以及模板化的[[cpp/string/basic_string|字符串]]，[[cpp/header/iostream|输入/输出流]]和[[cpp/numeric/complex|复数]]。
# 基于 STL：[[cpp/container|容器]]，[[cpp/algorithm|算法]]，[[cpp/iterator|迭代器]]，[[cpp/utility/functional|函数对象]]
* 1998：《C++ 程序设计语言》（The C++ Programming Language），第3版
* 1999：委员会成员成立 [http://www.boost.org Boost] 以为标准产生高质量的候选库。
* 2003：{{ttb|C++03}}（ISO/IEC 14882:2003）
这是一个次要版本，有意稍多于一个技术更正版本
# 新特性：{{rlp|value initialization|值初始化}}
{{cpp/language/history/DR03}}
* 2006：性能 TR（ISO/IEC TR 18015:2006）（[https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=43351 ISO 商店]）（[http://www.open-std.org/jtc1/sc22/wg21/docs/TR18015.pdf 2006 草案]）
此 TR 讨论各种 C++ 抽象的成本，提供实现指引，讨论 C++ 在嵌入式系统中的使用，并引入到 C 的 ISO/IEC TR 18037:2008 {{tt|&lt;iohw.h&gt;}} 的 {{tt|&lt;hardware&gt;}} 接口。
* 2007：库扩展 TR1（ISO/IEC TR 19768:2007）（[https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=43289 ISO 商店]）（{{stddoc|n1745|2005 草案}}）。
此 TR 是 C++ 标准库扩展，它添加下列内容到 C++ 标准库：
# 来自 Boost：[[cpp/utility/functional/reference_wrapper|引用包装器]]，[[cpp/memory#智能指针|智能指针]]，[[cpp/utility/functional/mem_fn|成员函数]]，{{ltt|cpp/types/result_of}}，{{ltt|cpp/utility/functional/bind}}，{{ltt|cpp/utility/functional/function}}，[[cpp/types|类型特征]]，[[cpp/numeric/random|随机数]]，数学特殊函数，{{ltt|cpp/utility/tuple}}，{{ltt|cpp/container/array}}，[[cpp/container#无序关联容器|无序容器]]（包含 {{ltt|cpp/utility/hash}}），和[[cpp/regex|正则表达式]]。
# 来自 C99：C99 中新的来自 [[c/numeric/math|{{tt|&lt;math.h&gt;}}]] 的数学函数，[[cpp/string/byte/isblank|空白字符类]]，[[cpp/numeric/fenv|浮点环境]]，{{ltt|cpp/io/manip/fixed|hexfloat}} I/O 操纵符，[[cpp/types/integer|固定大小整型类型]]，{{rlpt|types#修饰符|long long}} 类型，{{lc|va_copy}}，{{ltf|cpp/io/c/snprintf}} 和 {{ltf|cpp/io/c/vfscanf}} 函数族，及 {{ltf|cpp/io/c/printf}} 和 {{ltf|cpp/io/c/scanf}} 函数族的 C99 转换指定。 
除了特殊函数之外的所有 TR1 功能都被包含于 C++11 中，有少量更改。
* 2010：数学特殊函数（ISO/IEC 29124:2010）（[https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=50511 ISO 商店]）（{{stddoc|n3060|2010 草案}}）
此国际标准是 C++ 标准库扩展，它添加了曾为 TR1 的一部分，但未包含于 C++11 的特殊函数：椭圆积分，指数积分，拉盖尔多项式，勒让德多项式，埃尔米特多项式，贝塞尔函数，诺依曼函数，beta 函数以及黎曼 zeta 函数。此标准被并入 C++17。

===C++11 时期===
* 2011：{{ttb|C++11}}（ISO/IEC 14882:2011）（[https://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=50372 ISO 商店]）（{{stddoc|n3337|2012 出版后草案}}）。

[[cpp/11|主条目：C++11]]

其中引入了大量更改，以标准化既存实践，并改进 C++ 程序员可用的抽象

* 2011：十进制浮点 TR（ISO/IEC TR 24733:2011）（[https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=38843 ISO 商店]）（{{stddoc|n2849|2009 草案}}）
此 TR 实现来自 IEEE 754-2008 《浮点算术标准》的十进制浮点类型：{{tt|std::decimal::decimal32}}、{{tt|std::decimal::decimal64}} 及 {{tt|std::decimal::decimal128}}。
* 2012：[https://isocpp.org 标准 C++ 基金会]成立
* 2013：《C++ 程序设计语言》（The C++ Programming Language），第4版

===C++14 时期===
* 2014：{{ttb|C++14}}（[https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=64029 ISO 商店]）（[https://webstore.ansi.org/RecordDetail.aspx?sku=INCITS%2fISO%2fIEC+14882%3a2014+(2016) ANSI 商店]）（ [https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf?raw=true 2014 最终草案]）

[[cpp/14|主条目：C++14]]

C++ 标准的次要版本

*2015：文件系统库 TS（ISO/IEC TS 18822:2015）（[https://www.iso.org/iso/catalogue_detail.htm?csnumber=63483 ISO 商店]）（{{stddoc|n4100|2014 草案}}）
此 TS 是实验性 C++ 库扩展，它指定基于 boost.filesystem V3 的文件系统库（有一些修改和扩充）。此 TS 被并入 C++17。
*2015：并行扩展 TS（ISO/IEC TS 19570:2015）（[https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=65241 ISO 商店]）（{{stddoc|n4507|2015 草案}}）
此 TS 为所有标准库算法标准化了并行和向量并行 API，还添加了新算法，例如 {{tt|reduce}}、{{tt|transform_reduce}} 和 {{tt|exclusive_scan}}。此 TS 被并入 C++17。
*2015：事务性内存扩展 TS（ISO/IEC TS 19841:2015）（[https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=66343 ISO 商店]）（{{stddoc|n4514|2015 草案}}）
此 TS 扩展了 C++ 核心语言，添加同步和原子块以及事务安全函数，以实现事务性内存语义。
*2015：库基础扩展 TS（ISO/IEC TS 19568:2015）（[https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=65238 ISO 商店]）（{{stddoc|n4480|2015 草案}}）
此 TS 添加数个新组件到 C++ 标准库：{{ltt|cpp/experimental/optional|optional}}，{{ltt|cpp/experimental/any|any}}，{{ltt|cpp/experimental/basic_string_view|string_view}}，{{ltt|cpp/experimental/sample|sample}}，{{ltt|cpp/experimental/search|search}}，{{ltt|cpp/experimental/apply|apply}}，[[cpp/experimental/lib_extensions#类型擦除及多态分配器|多态分配器]]，和类型特征的[[cpp/experimental/lib_extensions|变量模板]]。此 TS 被并入 C++17。
*2015：概念扩展 TS（ISO/IEC TS 19217:2015）（[https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=64031 ISO 商店]）（{{stddoc|n4553|2015 草案}}）
此 TS 扩展了 C++ 核心语言，添加概念（具名类型要求）和制约（模板、函数和变量声明中对允许的类型施加的限制），这有助于元编程并简化模板实例化诊断，见[[cpp/experimental/constraints|概念]]。此 TS 已并入 C++20，并有所省略。
*2016：并发扩展 TS（ISO/IEC TS 19571:2016）（[https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=65242 ISO 商店]）（{{stddoc|p0159r0|2015 草案}}）
此 TS 扩展 C++ 库以包含针对 {{lc|std::future}}，{{lc|std::latch|闩}}与{{lc|std::barrier|屏障}}，以及原子智能指针的[[cpp/experimental/concurrency|数个扩展]]。

===C++17 时期===
* 2017：{{ttb|C++17}}（[https://www.iso.org/standard/68564.html ISO 商店]）（[https://webstore.ansi.org/RecordDetail.aspx?sku=INCITS%2fISO%2fIEC+14882%3a2017+(2018) ANSI 商店]）（{{stddoc|n4659|n4659 2017-03-21 最终草案}}）

[[cpp/17|主条目：C++17]]

C++ 标准继 C++11 之后的主要版本

* 2017：范围扩展 TS（ISO/IEC TS 21425:2017）（[https://www.iso.org/standard/70910.html ISO 商店]）（{{stddoc|n4685|2017 草案}}）
此 TS 扩展 C++ 库，以包含[[cpp/experimental/ranges|范围]]——一个新的、更有力的取代迭代器对的抽象，以及范围视图，哨位范围，用于就地变换的投影，新的迭代器适配器及算法。此扩展最终使得能以 {{c|sort(v);}} 排序 vector。
* 2017：协程扩展 TS（ISO/IEC TS 22277:2017）（[https://www.iso.org/standard/73008.html ISO 商店]）（{{stddoc|n4680|2017 草案}}）
此 TS 扩展 C++ 核心语言及标准库，以包含无栈协程（可恢复函数）。它添加了关键词 {{ltt|cpp/keyword/co_await}}、{{ltt|cpp/keyword/co_yield}} 及 {{ltt|cpp/keyword/co_return}}。
* 2018：网络扩展 TS（ISO/IEC TS 19216:2018）（[https://www.iso.org/standard/64030.html ISO 商店]）（{{stddoc|n4734|2017 草案}}）
此 TS 扩展 C++ 库，以包含基于 [https://www.boost.org/doc/libs/1_67_0/doc/html/boost_asio.html boost.asio] 的 TCP/IP 网络。
* 2018：模块扩展 TS（ISO/IEC TS 21544:2018）（[https://www.iso.org/standard/71051.html ISO 商店]）（{{stddoc|n4720|2018 草案}}）
此 TS 扩展 C++ 核心语言以包含模块。它添加了特殊标识符 {{ltt|cpp/identifier_with_special_meaning/module}}、{{ltt|cpp/identifier_with_special_meaning/import}}，并重新引入带新含义的关键词 {{ltt|cpp/keyword/export}}。
* 2018：并行扩展版本 2 TS（ISO/IEC TS 19570:2018）（[https://www.iso.org/standard/70588.html ISO 商店]）（{{stddoc|n4773|2018 草案}}）
此 TS 扩展 C++ 库，使之包含二个新执行策略（{{c|unseq}} 与 {{c|vec}}），添加 {{c|reduction_plus}} 或 {{c|for_loop_strided}} 之类的并行算法，分支合并式并行任务的任务块，SIMD 类型及这些类型上的操作。

===C++20 时期===
* 2020：'''C++20''' （[https://www.iso.org/standard/79358.html ISO 商店]）（{{stddoc|n4860|n4860 2020-03-31}} 最终草案）

[[cpp/20|主条目：C++20]]

C++ 标准继 C++17 后的主要版本

* 2021：反射 TS（ISO/IEC TS 23619:2021）（[https://www.iso.org/standard/76425.html ISO 商店]）（{{stddoc|n4856|2020 草案}}）
此 TS 扩展 C++ 加入一些设施，用于检查程序实体信息：变量，枚举，类及其成员，lambda 及其捕获，等等

===未来发展===
* [[cpp/experimental|实验性技术规范]]
* 20{{stdinfo next version number}}：'''{{stdinfo next version}}''' 最新草案 {{stddoc latest draft|{{stdinfo latest draft docnum}} ({{stdinfo latest draft docdate}})}}

[[cpp/23|主条目：C++23]]

C++ 标准的下个主要版本。

===参阅===
{{dsc begin}}
{{dsc see c|c/language/history|C 的历史|nomono=true}}
{{dsc end}}

===外部链接===
{{elink begin}}
{{elink|[https://www.stroustrup.com/hopl2.pdf C++ 的历史：1979-1991]}}
{{elink|[https://www.stroustrup.com/hopl-almost-final.pdf 语言在真实世界中为之演化：C++ 1991-2006]，[https://blog.csdn.net/overcomeunicom990702?type{{=}}blog&amp;year{{=}}2008&amp;month{{=}}03 中文翻译（共分为七篇博文）]，[https://groups.google.com/g/pongba/c/NYBfQ5cC4n0 中文翻译 PDF 下载]}}
{{elink|[https://www.stroustrup.com/hopl20main-p5-p-bfc9cd4--final.pdf 在拥挤和变化的世界中茁壮成长：C++ 2006-2020]，[https://github.com/Cpp-Club/Cxx_HOPL4_zh 中文翻译]}}
{{elink|[https://isocpp.org 标准 C++ 基金会]}}
{{elink|{{enwiki|C++#History|维基百科上的 C++}}}}
{{elink|[https://www.open-std.org/jtc1/sc22/wg21/ C++ 标准委员会]}}
{{elink end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
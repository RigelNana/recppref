{{title|异常}}
{{cpp/language/exceptions/navbar}}
异常处理提供了一种可以使程序从执行的某点将控制流和信息转移到与执行先前经过的某点相关联的处理代码的方法（换言之，异常处理将控制权沿调用栈向上转移）。

求值 {{rlp|throw#throw 表达式|{{c/core|throw}} 表达式}}会抛出异常。异常也可以在{{rlp|throw|其他语境}}下抛出。

为捕获异常，{{c/core|throw}} 表达式必须在 {{rlp|try|{{c/core|try}} 块}}中，而且必须有与异常对象的类型相匹配的{{rlp|catch|处理块}}。

在声明函数时，可以提供以下说明以限制函数能够抛出的异常类型：
{{rrev|until=c++17|* {{rlp|except spec|动态异常说明}}}}
{{rrev|since=c++11|* {{rlp|noexcept spec|noexcept 说明}}}}

异常处理过程中发生的错误由 {{lc|std::terminate}}{{rev inl|until=c++17| 和 {{lc|std::unexpected}}}} 处理。

===用法===
尽管 {{c/core|throw}} 表达式转移控制到执行栈上方的任意代码块时没有条件限制（类似 {{lc|std::longjmp}}），但它的预期用途还是进行错误处理。 

====错误处理====
异常的抛出用于从函数中为错误发信号，其中“错误”通常仅限于以下内容&lt;ref&gt;H. Sutter (2004) [http://www.drdobbs.com/when-and-how-to-use-exceptions/184401836 “何时及如何使用异常”]于 Dr. Dobb's&lt;/ref&gt;&lt;ref&gt;H.Sutter, A. Alexandrescu (2004)，“C++ 编码标准”，第 70 条&lt;/ref&gt;&lt;ref&gt;C++ 核心指导方针
[https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#i10-use-exceptions-to-signal-a-failure-to-perform-a-required-task I.10]&lt;/ref&gt;：
# 无法满足后置条件，例如不能产生有效的返回值对象。
# 无法满足另一个必须调用的函数的前置条件。
# （对于非私有成员函数）无法（再）建立类不变式。

这意味着构造函数（参阅 {{rlp|raii|RAII}}）和大多数运算符应该通过抛出异常来报告程序错误。

另外，所谓''宽契约''{{sep}}函数用异常来指示非法输入，例如，{{lc|std::basic_string::at}} 没有前置条件，但它会抛出异常以指示下标越界。

====异常安全====
在函数报告了错误状态后，可以提供附加保证以保障程序的状态。以下是四个被广泛认可的异常保证等级&lt;ref&gt;B. Stroustrup (2000)，“C++ 程序语言” [http://stroustrup.com/3rd_safe.pdf “附录 E”]&lt;/ref&gt;&lt;ref&gt;H. Sutter (2000) “Exceptional C++”&lt;/ref&gt;&lt;ref&gt;D. Abrahams (2001) [http://www.boost.org/community/exception_safety.html “泛型组件中的异常安全”]&lt;/ref&gt;，每个是另一个的严格超集：

# ''不抛出（或不失败）异常保证''——函数始终不会抛出异常。{{rlp|destructor|析构函数}}和其他可能在栈回溯中调用的函数被期待为不会抛出（以其他方式报告或隐瞒错误）。{{rev inl|since=c++11|{{rlp|destructor|析构函数}}默认为 {{rlp|noexcept}}。}}交换函数，{{rlp|move constructor|移动构造函数}}，及为提供强异常保证所使用的其他函数，都被期待为不会失败（函数总是成功）。
# ''强异常保证''——如果函数抛出异常，那么程序的状态会恰好被回滚到该函数调用前的状态。（例如 {{lc|std::vector::push_back}}）。
# ''基本异常保证''——如果函数抛出异常，那么程序处于某个有效状态。不泄漏任何资源，且所有对象的不变式都保持完好。
# ''无异常保证''——如果函数抛出异常，那么程序可能不会处于有效的状态：可能已经发生了资源泄漏、内存损坏，或其他摧毁不变式的错误。

此外，泛型组件还可以提供''异常中性保证''：如果从某个模板形参（例如从 {{lc|std::sort}} 的 {{tt|Compare}} 函数对象，或从 {{lc|std::make_shared}} 中 {{tt|T}} 的构造函数）抛出异常，那么它会被无修改地传播给调用方。

===异常对象===
虽然任意完整类型和指向 {{c/core|void}} 的 cv 指针都能作为异常对象抛出，但所有标准库函数都以值抛出无名对象，而且这些对象的类型都（直接或间接）派生于 {{lc|std::exception}}。用户定义的异常通常遵循此模式。&lt;ref&gt;D. Abrahams (2001) [http://www.boost.org/community/error_handling.html “错误与异常处理”]&lt;/ref&gt;&lt;ref&gt;isocpp.org Super-FAQ [https://isocpp.org/wiki/faq/exceptions#what-to-throw “我应该抛出什么？”]&lt;/ref&gt;&lt;ref&gt;C++ 核心指导方针 [https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#e14-use-purpose-designed-user-defined-types-as-exceptions-not-built-in-types E.14]&lt;/ref&gt;

为避免不必要的异常对象复制和对象切片，处理块在实践中最好以引用捕获。&lt;ref&gt;C++ 核心指导方针 [https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#e15-catch-exceptions-from-a-hierarchy-by-reference E.15]&lt;/ref&gt;&lt;ref&gt;S. Meyers (1996) “More Effective C++” 第 13 条&lt;/ref&gt;&lt;ref&gt;isocpp.org 超级 FAQ [https://isocpp.org/wiki/faq/exceptions#what-to-catch “我应该捕获什么？”]&lt;/ref&gt;&lt;ref&gt;H.Sutter, A. Alexandrescu (2004) “C++ 编码标准” 第 73 条&lt;/ref&gt;

===注解===
{{feature test macro|std=C++26|value=202411L|__cpp_constexpr_exceptions|{{c/core|constexpr}} 异常}}

===外部链接===
{{eli|&lt;references/&gt;}}

{{langlinks|en|es|ja|ru}}
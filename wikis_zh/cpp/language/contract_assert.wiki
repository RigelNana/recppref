{{title|{{tt|contract_assert}} 语句 {{mark since c++26}}}}
{{cpp/language/statements/navbar}}
{{c/core|contract_assert}} 语句是一种契约断言，它可以作为函数或 lambda 表达式体中的语句，用以验证某项内部条件。它确保该条件在执行期间成立，在调试构建中当调条件求值为 {{c|false}}，或者求值由于异常退出时触发违例（如终止程序），并可以在发布构建中为性能而将之忽略。

===语法===
{{sdsc begin}}
{{sdsc|{{ttb|contract_assert}} {{spar optional|属性}} {{ttb|(}} {{spar|谓词}} {{ttb|)}} {{ttb|;}}}}
{{sdsc end}}

{{par begin}}
{{par|{{spar|属性}}|任意数量的{{rlp|attributes|属性}}}}
{{par|{{spar|谓词}}|应当求值为 {{c|true}} 的布尔表达式}}
{{par end}}

===关键词===
{{ltt|cpp/keyword/contract_assert}}

===注解===
{{ftm begin|core=true}}
{{ftm|std=C++26|value=202502L|__cpp_contracts|[[cpp/language/contracts|契约]]}}
{{ftm end}}

===示例===
{{c/core|contract_assert}} 确保 vector 范数为正，且为[[cpp/numeric/math/FP_categories|规范或不规范]]值。
{{source|1=
template &lt;std::floating_point T&gt;
constexpr auto normalize(std::array&lt;T, 3&gt; vector) noexcept
    pre(/* is_normalizable(vector) */)
    post(/* vector: is_normalized(vector) */)
{
    auto&amp; [x, y, z]{vector};
    const auto norm{std::hypot(x, y, z)};

    // 调试检查正规化安全性
    contract_assert(std::isfinite(norm) &amp;&amp; norm &gt; T(0));

    x /= norm, y /= norm, z /= norm;

    return vector;
}
}}

===支持状态===
{{compiler support|std=c++26|hide=yes|nocollapse=yes|
{{cpp/compiler_support/26/contracts}}
}}

===引用===
{{ref std c++26}}
{{ref std|section=8.(7+{{i|c}})|title=Assertion statement|id=stmt.contract.assert}}
{{ref std end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/error/dsc assert}}
{{dsc inc|cpp/language/dsc contracts}}
{{dsc inc|cpp/language/dsc static_assert}}
{{dsc inc|cpp/language/functions/dsc function_contract_specifiers}}
{{dsc inc|cpp/language/attributes/dsc assume}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
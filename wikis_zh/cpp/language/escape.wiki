{{title|转义序列}}
{{cpp/language/expressions/navbar}}
转义序列用于在{{rlp|string literal|字符串字面量}}和{{rlp|character literal|字符字面量}}中表示某些特殊字符(无法直接输入或显示的字符)。

可以使用下列转义序列：

{| class="wikitable"
|-
! 转义序列
! 描述
! 表示
|-
! colspan="3" | 简单转义序列
|-
| {{ttb|&lt;nowiki&gt;\'&lt;/nowiki&gt;}} 
| 单引号
| ASCII 编码中为字节 {{tt|0x27}}
|-
| {{ttb|\"}}
| 双引号
| ASCII 编码中为字节 {{tt|0x22}}
|-
| {{ttb|\?}} 
| 问号
| ASCII 编码中为字节 {{tt|0x3f}}
|-
| {{ttb|\\}} 
| 反斜杠
| ASCII 编码中为字节 {{tt|0x5c}}
|-
| {{ttb|\a}} 
| 响铃
| ASCII 编码中为字节 {{tt|0x07}}
|-
| {{ttb|\b}} 
| 退格
| ASCII 编码中为字节 {{tt|0x08}}
|-
| {{ttb|\f}} 
| 换页
| ASCII 编码中为字节 {{tt|0x0c}}
|-
| {{ttb|\n}} 
| 换行
| ASCII 编码中为字节 {{tt|0x0a}}
|-
| {{ttb|\r}} 
| 回车
| ASCII 编码中为字节 {{tt|0x0d}}
|-
| {{ttb|\t}} 
| 水平制表
| ASCII 编码中为字节 {{tt|0x09}}
|-
| {{ttb|\v}} 
| 垂直制表
| ASCII 编码中为字节 {{tt|0x0b}}
|-
! colspan="3" | 数值转义序列
|-
| {{ttb|\{{small|''nnn''}}}} 
| rowspan="2" | 任意八进制值
| 代码单元 {{tt|''nnn''}}（1~3 位八进制数位）
|-
| {{ttb|\o{&lt;!-- --&gt;{{small|''n...''}}&lt;!-- --&gt;}&lt;!-- --&gt;}} {{mark since c++23}} 
| 代码单元 {{tt|''n...''}}（任意位数的八进制数位）
|-
| {{ttb|\x{{small|''n...''}}}} 
| rowspan="2" | 任意十六进制值
| rowspan="2" | 代码单元 {{tt|''n...''}}（任意位数的十六进制数位）
|-
| {{ttb|\x{&lt;!-- --&gt;{{small|''n...''}}&lt;!-- --&gt;}&lt;!-- --&gt;}} {{mark since c++23}} 
|-
! colspan="3" | 条件转义序列&lt;ref&gt;条件转义序列受条件性支持。每个条件转义序列中的字符 {{ttb|{{small|''c''}}}} 都是{{rev inl|until=c++23|{{rlp|charset#基本源字符集|基本源字符集}}}}{{rev inl|since=c++23|{{rlp|charset#基本字符集|基本字符集}}}}中的成员，且不是任何其他转义序列中跟在 {{ttb|\}} 之后的字符。&lt;/ref&gt;
|-
| {{ttb|\{{small|''c''}}}}
| 实现定义
| 实现定义
|-
! colspan="3" | 通用字符名
|-
| {{ttb|\u{{small|''nnnn''}}}}
| rowspan="3" | 任意 {{enwiki|Unicode}} 值：&lt;br&gt;可能生成多个代码单元
| 代码点 {{tt|U+''nnnn''}}（4位十六进制数位）
|-
| {{ttb|\u{&lt;!-- --&gt;{{small|''n...''}}&lt;!-- --&gt;}&lt;!-- --&gt;}} {{mark since c++23}} 
| 代码点 {{tt|U+''n...''}}（任意位数的十六进制数位）
|-
| {{ttb|\U{{small|''nnnnnnnn''}}}}
| 代码点 {{tt|U+''nnnnnnnn''}}（8 位十六进制数位）
|-
| {{ttb|\N{&lt;!-- --&gt;{{small|''NAME''}}&lt;!-- --&gt;}&lt;!-- --&gt;}} {{mark since c++23}}
| 任意 Unicode 字符
| 以 {{tt|''NAME''}} 命名的字符（见[[#具名通用字符转义|下文]])
|}
&lt;references/&gt;

===通用字符名的范围===
{{rrev multi
|rev1=
如果有一个通用字符名对应了一个小于 0xA0 且不是 0x24（{{tt|$}}）、0x40（{{tt|@}}）或 0x60（{{tt|`}}）的代码点，那么程序非良构。换言之，通用字符名不能表达{{rlp|charset#基础源字符集|基础源字符集}}的成员与控制字符（范围为 0x0-0x1F 及 0x7F-0x9F）。
|since2=c++11|rev2=
如果在{{rlp|character literal|字符}}和{{rlp|string literal|字符串字面量}}以外有一个通用字符名对应了一个{{rlp|charset#基础源字符集|基础源字符集}}的成员或控制字符的代码点，那么程序非良构。

如果有一个通用字符名对应了一个代理代码点（范围 0xD800-0xDFFF，含两端），那么程序非良构。

如果有一个用于 UTF-16/32 {{rlp|string literal|字符串字面量}}的通用字符名不对应 ISO/IEC 10646 中的任何代码点（范围 0x0-0x10FFFF，含两端）那么程序非良构。
|since3=c++20|rev3=
如果在{{rlp|character literal|字符}}和{{rlp|string literal|字符串字面量}}以外有一个通用字符名对应了一个{{rlp|charset#基础源字符集|基础源字符集}}的成员或控制字符的代码点，那么程序非良构。

如果有一个通用字符名不对应 [https://www.iso.org/standard/76835.html ISO/IEC 10646] 中的任何代码点（范围 0x0-0x10FFFF，含两端）或对应了一个代理代码点（范围 0xD800-0xDFFF，含两端），那么程序非良构。
|since4=c++23|rev4=
如果在{{rlp|character literal|字符}}和{{rlp|string literal|字符串字面量}}以外有一个通用字符名对应了一个{{rlp|charset#基础字符集|基础字符集}}的字符或控制字符的标量值，那么程序非良构。

如果有一个通用字符名不对应{{rlp|charset#翻译字符集|翻译字符集}}中的任何字符的标量值，那么程序非良构。
}}


{{rrev|since=c++23|
====具名通用字符转义====
{{sdsc begin}}
{{sdsc|1=
{{ttb|\N{}} {{spar|n字符序列}} {{ttb|}&lt;!-- --&gt;}}
}}
{{sdsc end}}

{{par begin}}
{{par|{{spar|n字符序列}}|一个或多个 {{spar|n字符}}}}
{{par|{{spar|n字符}}|来自{{rlp|charset#翻译字符集|翻译字符集}}去掉右花括号 {{c|}&lt;!----&gt;}} 和换行符后的字符}}
{{par end}}

具有以上语法的通用字符名是 ''具名通用字符''。它在以下情况下表示 [https://www.unicode.org/versions/latest/ Unicode 标准]（[https://www.unicode.org/versions/latest/ch04.pdf 第 4.8 章 名称]）中的对应字符：
* {{spar|n字符序列}} 与该字符的名称相等
* {{spar|n字符序列}} 与该字符的别名之中类型是 “control”，“correction” 或 “alternate” &lt;!-- 此处不翻译类型，因为需要与下面提到的 NameAliases.txt 原文档保持一致 --&gt;其中之一的某个别名相等
在其他情况下程序非良构。

这些别名在 [https://www.unicode.org/reports/tr44/ Unicode 字符数据库]的 [https://www.unicode.org/Public/UCD/latest/ucd/NameAliases.txt NameAliases.txt] 列出。这些名字和别名都不会以空格开始或结束。

有效的 {{spar|n字符序列}} 必须只包含大写拉丁字母 A 到 Z，数字，空格，以及连字符/减号。Unicode 字符名称中从不会出现其他字符，它们一旦在 {{spar|n字符序列}} 中出现就总是使程序非良构。
}}

===注解===
{{c|\0}} 是最常用的八进制转义序列，因为它表示[[cpp/string#空终止字符串|空终止字符串]]中的空终止字符。

换行字符 {{c|\n}} 在用于[[cpp/io/c|文本模式 I/O]] 时有特殊含义：它被转换为操作系统指定的换行表示，通常是一个字节或字节序列。某些系统转而用长度字段标记文本行。

八进制转义序列具有三个八进制位的长度限制，但如果遇到首个不是合法八进制位的字符，那么就会在此处提前终止。

十六进制转义序列无长度限制，并在首个不是合法十六进制位的字符处终止。如果单个十六进制转义序列所表示的值不适于此字符串字面量或字符常量中使用的字符类型（{{c/core|char}}{{rev inl|since=c++20|、{{c/core|char8_t}}}}{{rev inl|since=c++11|、{{c/core|char16_t}}、{{c/core|char32_t}}}} 或 {{c/core|wchar_t}}），那么结果未指明。

{{rrev|since=c++11|
窄字符串字面量或 16 位字符串字面量中的通用字符名可能映射到多于一个代码单元，例如 {{c|\U0001f34c}} 在 UTF-8 中是 4 个 {{c/core|char}} 代码单元（{{c|\xF0\x9F\x8D\x8C}}），而在 UTF-16 中是 2 个 {{c/core|char16_t}} 代码单元（{{c|\xD83C\xDF4C}}）。
}}

问号转义序列 {{c|\?}} 用于阻止在字符串字面量内判读{{rlp|operator_alternative|三标符}}：如 {{c|"??/"}} 的字符串被编译成 {{c|"\"}}，但如果在 {{c|"?\?/"}} 中转义第二个问号，那么它会变成 {{c|"??/"}}。{{rev inl|since=c++17|由于三标符已从 C++ 移除，不再需要使用问号转义序列。它因为需要与 C++14 （及之前标准版本）及 C 的兼容而保留。}}
{{feature test macro|std=C++23|value=202207L|__cpp_named_character_escapes|具名通用字符转义}}

===示例===
{{example
|code=
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; "这\n是\n一个\n测试\n\n";
    std::cout &lt;&lt; "She said, \"Sells she seashells on the seashore?\"\n";
}
|output=
这
是
一个
测试

She said, "Sells she seashells on the seashore?"
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=cwg|dr=505|std=C++98|before=当反斜杠后面的字符不是表格中指定的字符之一时，行为未定义|after=改为受条件性支持（此时语义由实现定义）}}
{{dr list end}}

===参阅===
* {{rlp|ascii|ASCII 码表}}
{{dsc begin}}
{{dsc see c|c/language/escape|转义序列|nomono=true}}
{{dsc end}}

{{langlinks|ar|cs|de|en|es|fr|it|ja|ko|pl|pt|ru|tr}}
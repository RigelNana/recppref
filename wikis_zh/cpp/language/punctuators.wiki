{{title|标点}}
{{cpp/language/basics/navbar}}

这些是 C++ 中的标点符号。每个符号的含义在链接的页面中详述。

===预处理运算符===
[[cpp/preprocessor|预处理器]]会识别预处理运算符。

===={{c|#}}（包括 {{c|%:}}）====
* 引入[[cpp/preprocessor|预处理指令]]。
* [[cpp/preprocessor/replace## 与 ## 运算符|字符串化的预处理运算符]]。

===={{c|##}}（包括 {{c|%:%:}}）====
* [[cpp/preprocessor/replace## 与 ## 运算符|粘贴记号的预处理运算符]]。

===单字符运算符和标点符号===
===={{c|{}} 和 {{c|}&lt;!----&gt;}}（包括 {{c|&lt;%}} 和 {{c|%&gt;}}）====
* 在{{rlp|class|类}}定义中分隔{{rlps|class#成员说明}}。
* 在{{rlp|enum|枚举}}定义中分隔枚举项列表。
* 分隔{{rlps|statements#复合语句}}。复合语句可能是下列构造的一部分：
:* {{rlps|function#函数定义}}
:* {{rlp|try|{{c/core|try}} 块}}
{{rrev|since=c++11|
:* {{rlp|lambda|lambda 表达式}}
}}
* {{rlp|initialization|初始化器}}的{{rev inl|until=c++11|{{rlp|aggregate initialization|聚合初始化}}}}{{rev inl|since=c++11|{{rlp|list initialization|列表初始化}}}}语法的一部分。
* 在{{rlp|namespace|命名空间定义}}中分隔命名空间体。
* 在{{rlp|language linkage|语言链接说明}}中分隔声明。
{{rrev|since=c++20|
* 在 {{rlp|constraints#requires 表达式|{{c/core|requires}} 表达式}}中分隔要求。
* 在{{rlps|constraints#复合要求}}中分隔表达式。
* 在{{rlp|modules|导出声明}}中分隔声明。
}}

===={{c|[}} 和 {{c|]}}（包括 {{c|&lt;:}} 和 {{c|:&gt;}}）====
* {{rlp|operator member access#内建的下标运算符|下标运算符}}；{{rlp|operators#数组下标运算符|运算符重载}}中 {{c|operator[]}} 的一部分。
* {{rlp|declarations|声明}}或{{rlp|type#类型的命名|类型标识}}（例如在 {{rlp|new|{{c/core|new}} 表达式}}中）中{{rlp|declarations#声明符|数组声明符}}的一部分。
* [[cpp/memory/new/operator new|运算符重载（分配函数）]]中 {{c|new[]}} 运算符的一部分。
* {{rlp|delete|delete 表达式}}及[[cpp/memory/new/operator delete|运算符重载（解分配函数）]]中 {{c|delete[]}} 运算符的一部分。
{{rev begin}}
{{rev|since=c++11|
* 在 {{rlp|lambda|lambda 表达式}}中分隔{{rlps|lambda#Lambda 捕获}}。
* 在{{rlp|attributes|属性说明符}}中分隔属性。
}}
{{rev|since=c++17|
* 在{{rlp|structured binding|结构化绑定声明}}中分隔标识符列表。
}}
{{rev|since=c++26|
* 在{{rlp|pack indexing|包索引}}中分隔表示索引的{{rlp|constant expression|经转换常量表达式}}。
}}
{{rev end}}

===={{c|(}} 和 {{c|)}}====
* 在表达式中{{rlp|expressions#初等表达式|指示分组}}。
* {{rlp|operator_other#内建的函数调用运算符|函数调用运算符}}；{{rlp|operators#函数调用运算符|运算符重载}}中 {{c|operator()}} 的一部分。
* 在{{rlp|explicit_cast|函数风格转换}}中分隔表达式/初始化器。
* 在 {{rlpt|static_cast}}、{{rlpt|const_cast}}、{{rlpt|reinterpret_cast}} 或 {{rlpt|dynamic_cast}} 中分隔表达式。
* 分隔以下运算符的操作数：
:* {{rlpt|typeid}}
:* {{rlpt|sizeof}}
{{rrev|since=c++11|
:* {{rlpt|sizeof...}}
:* {{rlpt|alignof}}
:* {{rlpt|noexcept}}
}}
* 在{{rlp|new|布置 {{c/core|new}} 表达式}}中分隔布置实参。
* 在 {{rlp|new|{{c/core|new}} 表达式}}中可选地分隔类型标识。
* 在 {{rlp|new|{{c/core|new}} 表达式}}中分隔初始化器。
* 在 {{rlp|explicit_cast|C 风格转换}}中分隔类型标识。
* 在{{rlp|declarations|声明}}或{{rlp|type#类型的命名|类型标识}}中指示分组。
* 在下列构造中分隔形参列表：
:* {{rlp|function|函数声明符}}（在{{rlp|declarations|声明}}或{{rlp|type#类型的命名|类型标识}}中）
{{rev begin}}
{{rev|since=c++11|
:* {{rlp|lambda|lambda 表达式}}
}}
{{rev|since=c++17|
:* {{rlp|class template argument deduction|用户定义推导指引}}
}}
{{rev|since=c++20|
:* {{rlps|constraints#requires 表达式|{{c/core|requires}} 表达式}}
}}
{{rev end}}
* {{rlp|initialization|初始化器}}的{{rlp|direct initialization|直接初始化}}语法的一部分。
* 在 {{rlp|asm|asm 声明}}中分隔字符串字面量。
* 在{{rlp|initializer list|成员初始化器列表}}中分隔属于基类或成员的初始化器。
* 在以下选择语句和循环语句中分隔控制子句：
:* {{rlpt|if}}{{rev inl|since=c++23|（除 {{rlpsd|if#Consteval if}} 外）}}
:* {{rlpt|switch}}
:* {{rlpt|while}}
:* {{rlpt|do|do-while}}
:* {{rlpt|for}}
{{rrev|since=c++11|
:* {{rlp|range-for|基于范围的 {{tt|for}}}}
}}
* 在{{rlp|catch|处理块}}中分隔形参声明。
* 在[[cpp/preprocessor/replace#仿函数宏|仿函数宏定义]]中分隔宏形参。
* 在[[cpp/preprocessor/replace|仿函数宏调用]]中分隔宏实参，或者防止逗号被视为实参分隔符。
* {{tt|defined}} {{rev inl|since=c++17|、{{tt|__has_include}}}}{{rev inl|since=c++20|、{{tt|__has_cpp_attribute}}}} 预处理运算符的一部分。
{{rev begin}}
{{rev|since=c++11|
* 在 {{rlpt|static_assert}} 声明中分隔操作数。
* 分隔以下说明符的操作数：
:* {{rlpt|decltype}}
:* {{rlpt|noexcept spec|noexcept}}
:* {{rlpt|alignas}}
{{rrev|since=c++20|
:* {{rlpt|explicit}}
}}
* 在{{rlp|attributes|属性}}中分隔属性实参。
}}
{{rev|since=c++14|
* {{rlpt|decltype|decltype(auto)}} 说明符的一部分。
}}
{{rev|since=c++17|
* 分隔{{rlp|fold|折叠表达式}}。
}}
{{rev|since=c++20|
* 变参数宏定义中 {{ltt|cpp/preprocessor/replace|__VA_OPT__}} 替换的一部分。
}}
{{rev end}}

===={{c|;}}====
* 指示以下构造的末尾：
:* {{rlp|statements|语句}}
:* {{rlp|declarations|声明}}或{{rlps|class#成员说明}}
{{rrev|since=c++20|
:* {{rlp|modules|模块声明}}、导入声明、全局模块片段器引入或私有模块片段引入器
:* {{rlp|constraints#requires 表达式|要求}}
}}
* 分隔 {{rlp|for|for 语句}}的{{spar sep|条件}}与{{spar|表达式}}。

===={{c|:}}====
* {{rlps|operator other#条件运算符}}的一部分。
* {{rlp|statements#标号|标号声明}}的一部分。
* 在{{rlp|class|类定义}}的{{spar sep|基类子句}}中引入{{rlp|derived class|基类}}。
* 成员说明中{{rlp|access|访问说明符}}的一部分。
* {{rlp|bit field|位域成员声明}}中引入宽度。
* {{rlp|constructor|构造函数}}定义中引入成员初始化器列表。
{{rev begin}}
{{rev|since=c++11|
* {{rlp|range-for|基于范围的 {{c/core|for}}}} 语句中分隔范围声明与范围初始化器。
* 在{{rlp|enum|枚举声明}}的{{spar sep|枚举基}}中引入底层类型。
}}
{{rev|since=c++17|
* 在{{rlp|attributes|属性说明符}}中分隔属性 using 前缀与属性列表。
}}
{{rev|since=c++20|
* 在{{rlp|modules|模块声明}}或模块划分的导入声明中引入模块划分名。
* {{rlps|modules#私有模块片段}}引入器（{{c|module :private;}}）的一部分。
}}
{{rev end}}

===={{c|?}}====
* {{rlps|operator other#条件运算符}}的一部分。

===={{c|.}}====
* {{rlp|operator member access#内建的成员访问运算符|成员访问运算符}}。
{{rrev|since=c++20|
* 在{{rlp|aggregate initialization|聚合初始化}}中引入指派符。
* {{rlp|modules|模块名或模块划分名}}的一部分。
}}

===={{c|~}}（包括 {{c|compl}}）====
* {{rlp|operator arithmetic#逐位逻辑运算符|一元补运算符（又称逐位非运算符）}}；{{rlp|operators|运算符重载}}中 {{c|operator~}} 的一部分。
* 指名{{rlp|destructor|析构函数}}或伪析构函数的{{rlp|identifiers|标识符表达式}}的一部分。

===={{c|!}}（包括 {{c|not}}）====
* {{rlp|operator logical|逻辑非运算符}}；{{rlp|operators|运算符重载}}中 {{c|operator!}} 的一部分。
{{rrev|since=c++23|
* {{rlpsd|if#consteval if}} 语句的一部分。
}}

===={{c|+}}====
* {{rlp|operator arithmetic#一元算术运算符|一元加运算符}}；{{rlp|operators|运算符重载}}中 {{c|operator+}} 的一部分。
* {{rlp|operator arithmetic#加性运算符|二元加运算符}}；{{rlp|operators|运算符重载}}中 {{c|operator+}} 的一部分。

===={{c|-}}====
* {{rlp|operator arithmetic#一元算术运算符|一元减运算符}}；{{rlp|operators|运算符重载}}中 {{c|operator-}} 的一部分。
* {{rlp|operator arithmetic#加性运算符|二元减运算符}}；{{rlp|operators|运算符重载}}中 {{c|operator-}} 的一部分。

===={{c|*}}====
* {{rlp|operator member access#内建的间接运算符|间接运算符}}；{{rlp|operators|运算符重载}}中 {{c|operator*}} 的一部分。
* {{rlp|operator arithmetic#乘性运算符|乘运算符}}；{{rlp|operators|运算符重载}}中 {{c|operator*}} 的一部分。
* {{rlp|declarations#声明符|声明符}}中或{{rlp|type#类型的命名|类型标识}}中的指针运算符或成员指针运算符
{{rrev|since=c++17|
* {{rlps|lambda#lambda 捕获}}列表中 {{c|*this}} 的一部分，以按复制捕获当前对象。
}}

===={{c|/}}====
* {{rlp|operator arithmetic#乘性运算符|除运算符}}；{{rlp|operators|运算符重载}}中 {{c|operator/}} 的一部分。

===={{c|%}}====
* {{rlp|operator arithmetic#乘性运算符|模运算符}}；{{rlp|operators|运算符重载}}中 {{c|operator%}} 的一部分。

===={{c|^}}（包括 {{c|xor}}）====
* {{rlp|operator arithmetic#逐位逻辑运算符|逐位异或运算符}}；{{rlp|operators|运算符重载}}中 {{c|operator^}} 的一部分。

===={{c|&amp;}}（包括 {{c|bitand}}）====
* {{rlp|operator member access#内建的取地址运算符|取地址运算符}}；{{rlp|operators#罕有重载的运算符|运算符重载}}中 {{c|operator&amp;}} 的一部分。
* {{rlp|operator arithmetic#逐位逻辑运算符|逐位与运算符}}；{{rlp|operators|运算符重载}}中 {{c|operator&amp;}} 的一部分。
* {{rlp|declarations#声明符|声明符}}中或{{rlp|type#类型的命名|类型标识}}中的左值引用运算符。
{{rrev|since=c++11|
* 在 {{rlps|lambda#lambda 捕获}}中指示按引用捕获。
* {{rlp|member functions|成员函数声明}}中的{{rlp|member functions#引用限定的成员函数|引用限定符}}。
}}

===={{c|{{!}}}}（包括 {{c|bitor}}）====
* {{rlp|operator arithmetic#逐位逻辑运算符|逐位或运算符}}；{{rlp|operators|运算符重载}}中 {{c|operator{{!}}}} 的一部分。

===={{c|1==}}====
* {{rlp|operator assignment|简单赋值运算符}}；{{rlp|operators#赋值运算符|运算符重载}}中 {{c|1=operator=}} 的一部分，它可能是特殊成员函数（{{rlp|copy assignment|复制赋值运算符}}{{rev inl|since=c++11|或{{rlp|move assignment|移动赋值运算符}}}}）。
* {{rlp|initialization|初始化器}}的{{rlp|copy initialization|复制初始化}}和{{rev inl|until=c++11|{{rlp|aggregate initialization|聚合初始化}}}}{{rev inl|since=c++11|{{rlp|list initialization|复制列表初始化}}}}语法的一部分。
* 在{{rlp|function|函数声明}}中引入{{rlp|default arguments|默认实参}}。
* 在{{rlp|template parameters|模板形参列表}}中引入{{rlps|template parameters#默认模板实参}}。
* 在{{rlp|namespace alias|命名空间别名定义}}中分隔别名与别名指代的命名空间。
* 在{{rlp|enum|枚举定义}}中引入枚举项的值。
* {{rlp|abstract class|纯虚函数声明}}中{{spar sep|纯说明符}}的一部分。
{{rev begin}}
{{rev|since=c++11|
* {{rlps|lambda#lambda 捕获}}中的捕获预置符，指示按复制捕获。
* {{rlp|function#函数定义|函数定义}}中的预置定义（{{c|1== default;}}）或被弃置定义（{{c|1== delete;}}）。
* 在{{rlp|type alias|类型别名声明}}中分隔别名与别名指代的类型。
}}
{{rev|since=c++20|
* 在{{rlp|constraints|概念定义}}中分隔概念名与约束表达式。
}}
{{rev end}}

===={{c|&lt;}}====
* {{rlp|operator comparison|小于运算符}}；{{rlp|operators#比较运算符|运算符重载}}中 {{c|operator&lt;}} 的一部分。
* 在 {{rlpt|static_cast}}、{{rlpt|const_cast}}、{{rlpt|reinterpret_cast}} 或 {{rlpt|dynamic_cast}} 中引入类型标识。
* 引入{{rlp|template parameters#模板实参|模板实参列表}}。
* 在以下构造中引入{{rlp|template parameters|模板形参列表}}
:* {{rlp|templates|模板声明}}
:* {{rlp|partial specialization|部分特化}}
{{rrev|since=c++20|
:* {{rlp|lambda|lambda 表达式}}
}}
* {{rlp|template specialization|模板特化声明}}中 {{c|template&lt;&gt;}} 的一部分。
* 指示下列构造中的头文件名：
:* [[cpp/preprocessor/include|{{c/core|#include}} 指令]]
{{rev begin}}
{{rev|since=c++17|
:* [[cpp/preprocessor/include|{{c/core|__has_include}} 预处理表达式]]
}}
{{rev|since=c++20|
:* {{rlp|modules|{{c/core|import}} 声明}}
}}
{{rev end}}

===={{c|&gt;}}====
* {{rlp|operator comparison|大于运算符}}；{{rlp|operators#比较运算符|运算符重载}}中 {{c|operator&gt;}} 的一部分。
* 在 {{rlpt|static_cast}}、{{rlpt|const_cast}}、{{rlpt|reinterpret_cast}} 或 {{rlpt|dynamic_cast}} 中指示类型标识的末尾。
* 指示{{rlp|template parameters#模板实参|模板实参列表}}的末尾。
* 在以下构造中指示{{rlp|template parameters|模板形参列表}}的末尾
:* {{rlp|templates|模板声明}}
:* {{rlp|partial specialization|部分特化}}
{{rrev|since=c++20|
:* {{rlp|lambda|lambda 表达式}}
}}
* {{rlp|template specialization|模板特化声明}}中 {{c|template&lt;&gt;}} 的一部分。
* 指示下列构造中头文件名的末尾：
:* [[cpp/preprocessor/include|{{c/core|#include}} 指令]]
{{rev begin}}
{{rev|since=c++17|
:* [[cpp/preprocessor/include|{{c/core|__has_include}} 预处理表达式]]
}}
{{rev|since=c++20|
:* {{rlp|modules|{{c/core|import}} 声明}}
}}
{{rev end}}

===={{c|,}}====
* {{rlp|operator other#内建的逗号运算符|逗号运算符}}；{{rlp|operators#罕有重载的运算符|运算符重载}}中 {{c|operator,}} 的一部分。
* 下列构造中的列表分隔符：
:* {{rlp|declarations|声明}}中的声明符列表
:* {{rlp|initialization|初始化}}中的初始化器列表
:* {{rlp|new|布置 new}} 中的布置实参列表
:* {{rlp|operator other#函数调用运算符|函数调用表达式}}中的实参列表
:* {{rlp|enum|枚举}}声明中的枚举项列表
:* {{rlp|class|类}}声明中的{{rlp|derived class|基类}}列表
:* {{rlp|constructor|构造函数}}定义中的成员初始化器列表
:* {{rlp|function#形参列表|函数形参列表}}
:* {{rlp|template parameters|模板形参列表}}
:* {{rlp|template parameters#模板实参|模板实参列表}}
{{rev begin}}
{{rev|since=c++11|
:* {{rlps|lambda#lambda 捕获}}列表
:* {{rlp|attributes|属性}}列表
}}
{{rev|since=c++17|
:* {{rlps|namespace#using 声明}} 中的声明符列表
:* {{rlp|structured binding|结构化绑定}}声明中的标识符列表
}}
{{rev|since=c++23|
:* {{rlp|operator member access#内建的下标运算符|多实参下标表达式}}中的实参列表
}}
{{rev end}}
:* [[cpp/preprocessor/replace|仿函数宏定义]]中的宏形参列表
:* [[cpp/preprocessor/replace|仿函数宏调用]]中的宏实参列表，除非被实参中的括号包围
{{rrev|since=c++11|
* 在 {{rlpt|static_assert}} 声明中分隔参数。
}}

===多字符运算符和标点符号===
===={{c|...}}====
* 函数声明符{{rev inl|since=c++11|或 lambda 表达式}}{{rev inl|since=c++17|或用户定义推导指引}}中{{rlps|function#形参列表}}的一部分，标识{{rlp|variadic arguments|变参数函数}}。
* 在{{rlp|catch|处理块}}中标识全捕获。
{{rev begin}}
{{rev|since=c++11|
* 在[[cpp/preprocessor/replace|宏定义]]中标识变参数宏。
* 指示{{rlp|parameter pack|包}}声明与展开。
}}
{{rev|since=c++26|
* 在{{rlp|pack indexing#语法|包索引}}表达式和说明符中。
}}
{{rev end}}

===={{c|::}}====
* 下列构造中的作用域解析运算符：
:* {{rlp|qualified lookup|有限定名字}}
:* {{rlp|pointer#成员指针|成员指针声明}}
:* {{rlpt|new}} 或 {{rlpt|delete}} 表达式，指示仅查找全局分配或解分配函数
{{rev begin}}
{{rev|since=c++11|
* 在{{rlp|attributes|属性}}中指示属性作用域。
}}
{{rev|since=c++17|
* {{rlp|namespace|嵌套命名空间定义}}的一部分。
}}
{{rev end}}

===={{c|.*}}====
* {{rlp|operator member access#内建的成员指针访问运算符|成员指针访问运算符}}。

===={{c|-&gt;}}====
* {{rlp|operator member access#内建的成员访问运算符|成员访问运算符}}；{{rlp|operators|运算符重载}}中 {{c|operator-&gt;}} 的一部分。
{{rev begin}}
{{rev|since=c++11|
* 在{{rlp|function|函数声明符}}或 {{rlp|lambda|lambda 表达式}}中引入尾随返回类型。
}}
{{rev|since=c++17|
* 在{{rlp|class template argument deduction|用户定义推导指引}}中引入结果类型。
}}
{{rev|since=c++20|
* 在{{rlps|constraints#复合要求}}中引入返回类型要求。
}}
{{rev end}}

===={{c|-&gt;*}}====
* {{rlp|operator member access#内建的成员指针访问运算符|成员指针访问运算符}}；{{rlp|operators#罕有重载的运算符|运算符重载}}中 {{c|operator-&gt;*}} 的一部分。

===={{c|1=+=}}====
* {{rlp|operator assignment|复合赋值运算符}}；{{rlp|operators|运算符重载}}中 {{c|1=operator+=}} 的一部分。

===={{c|1=-=}}====
* {{rlp|operator assignment|复合赋值运算符}}；{{rlp|operators|运算符重载}}中 {{c|1=operator-=}} 的一部分。

===={{c|1=*=}}====
* {{rlp|operator assignment|复合赋值运算符}}；{{rlp|operators|运算符重载}}中 {{c|1=operator*=}} 的一部分。

===={{c|1=/=}}====
* {{rlp|operator assignment|复合赋值运算符}}；{{rlp|operators|运算符重载}}中 {{c|1=operator/=}} 的一部分。

===={{c|1=%=}}====
* {{rlp|operator assignment|复合赋值运算符}}；{{rlp|operators|运算符重载}}中 {{c|1=operator%=}} 的一部分。

===={{c|1=^=}}（包括 {{c|xor_eq}}）====
* {{rlp|operator assignment|复合赋值运算符}}；{{rlp|operators|运算符重载}}中 {{c|1=operator^=}} 的一部分。

===={{c|1=&amp;=}}（包括 {{c|and_eq}}）====
* {{rlp|operator assignment|复合赋值运算符}}；{{rlp|operators|运算符重载}}中 {{c|1=operator&amp;=}} 的一部分。

===={{c|{{!=}}}}（包括 {{c|or_eq}}）====
* {{rlp|operator assignment|复合赋值运算符}}；{{rlp|operators|运算符重载}}中 {{c|operator{{!=}}}} 的一部分。

===={{c|1===}}====
* {{rlp|operator comparison|相等运算符}}；{{rlp|operators#比较运算符|运算符重载}}中 {{c|1=operator==}} 的一部分。

===={{c|1=!=}}（包括 {{c|not_eq}}）====
* {{rlp|operator comparison|不相等运算符}}；{{rlp|operators#比较运算符|运算符重载}}中 {{c|1=operator!=}} 的一部分。

===={{c|1=&lt;=}}====
* {{rlp|operator comparison|小于或等于运算符}}；{{rlp|operators#比较运算符|运算符重载}}中 {{c|1=operator&lt;=}} 的一部分。

===={{c|1=&gt;=}}====
* {{rlp|operator comparison|大于或等于运算符}}；{{rlp|operators#比较运算符|运算符重载}}中 {{c|1=operator&gt;=}} 的一部分。

{{rrev|since=c++20|
===={{c|1=&lt;=&gt;}}====
* {{rlp|operator comparison#三路比较|三路比较（飞船）运算符}}；{{rlp|operators#比较运算符|运算符重载}}中 {{c|1=operator&lt;=&gt;}} 的一部分。
}}

===={{c|&amp;&amp;}}（包括 {{c|and}}）====
* {{rlp|operator logical|逻辑与运算符}}；{{rlp|operators#罕有重载的运算符|运算符重载}}中 {{c|operator&amp;&amp;}} 的一部分。
* {{rlp|declarations#声明符|声明符}}中或{{rlp|type#类型的命名|类型标识}}中的右值引用运算符。{{mark since c++11}}
* {{rlp|member functions|成员函数声明}}中的{{rlp|member functions#引用限定的成员函数|引用限定符}}。{{mark since c++11}}

===={{c|{{!!}}}}（包括 {{c|or}}）====
* {{rlp|operator logical|逻辑或运算符}}；{{rlp|operators#罕有重载的运算符|运算符重载}}中 {{c|operator{{!!}}}} 的一部分。

===={{c|&lt;&lt;}}====
* {{rlps|operator arithmetic#移位运算符}}；运算符重载（{{rlp|operators#逐位算术运算符|逐位运算符}}或{{rlp|operators#流的提取与插入|流插入运算符}}）中 {{c|operator&lt;&lt;}} 的一部分。

===={{c|&gt;&gt;}}====
* {{rlps|operator arithmetic#移位运算符}}；运算符重载（{{rlp|operators#逐位算术运算符|逐位运算符}}或{{rlp|operators#流的提取与插入|流提取运算符}}）中 {{c|operator&gt;&gt;}} 的一部分。

===={{c|1=&lt;&lt;=}}====
* {{rlp|operator assignment|复合赋值运算符}}；{{rlp|operators|运算符重载}}中 {{c|1=operator&lt;&lt;=}} 的一部分。

===={{c|1=&gt;&gt;=}}====
* {{rlp|operator assignment|复合赋值运算符}}；{{rlp|operators|运算符重载}}中 {{c|1=operator&gt;&gt;=}} 的一部分。

===={{c|++}}====
* {{rlp|operator incdec|自增运算符}}；{{rlp|operators|运算符重载}}中 {{c|operator++}} 的一部分。

===={{c|--}}====
* {{rlp|operator incdec|自减运算符}}；{{rlp|operators|运算符重载}}中 {{c|operator--}} 的一部分。

===引用===
{{ref std c++23}}
{{ref std|section=5.12|title=Operators and punctuators|id=lex.operators}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=5.12|title=Operators and punctuators|id=lex.operators}}
{{ref std end}}
{{ref std c++17}}
{{ref std|section=5.12|title=Operators and punctuators|id=lex.operators}}
{{ref std end}}
{{ref std c++14}}
{{ref std|section=2.13|title=Operators and punctuators|id=lex.operators}}
{{ref std end}}
{{ref std c++11}}
{{ref std|section=2.13|title=Operators and punctuators|id=lex.operators}}
{{ref std end}}
{{ref std c++03}}
{{ref std|section=2.12|title=Operators and punctuators|id=lex.operators}}
{{ref std end}}
{{ref std c++98}}
{{ref std|section=2.12|title=Operators and punctuators|id=lex.operators}}
{{ref std end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/language/dsc operator alternative}}
{{dsc see c|c/language/punctuators|标点|nomono=true}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
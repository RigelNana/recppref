{{title|内存模型}}
{{cpp/language/basics/navbar}}
为 C++ 抽象机器的目的定义了计算机内存存储的语义。

可为 C++ 程序所用的内存是''字节''{{sep}}的一或多个连续序列。内存中的每个字节拥有唯一的''地址''。

===字节===
''字节''{{sep}}是最小的可寻址内存单元。它被定义为相接的位序列，该序列大到足以保有
* 任何 {{tt|UTF-8}} 编码单元（256 个相异值）和
{{rrev multi
|rev1=
* {{rlps|charset#基础执行字符集}}的任何成员。
|since2=c++23|rev2=
* {{rlps|charset#基本字面量字符集}}的任何成员的普通字面量编码。
}}
与 C 相似，C++ 也支持 8 位或更大的字节。

{{c/core|char}}、{{c/core|unsigned char}} 和 {{c/core|signed char}} {{rlp|types|类型}}把一个字节用于存储和{{rlp|object#对象表示与值表示|值表示}}。字节中的位数可作为 {{lc|CHAR_BIT}} 或 {{c|std::numeric_limits&lt;unsigned char&gt;::digits}} 访问。

===内存位置===
一个''内存位置''{{sep}}是一个{{rlp|type|标量类型}}非{{rlp|bit field|位域}}对象或非零长位域的最大相接序列的{{rlp|object#对象表示与值表示|对象表示}}占据的存储。

注意：语言的各种功能特性，例如{{rlp|reference|引用}}和{{rlp|virtual|虚函数}}，可能涉及到程序不可访问，但为实现所管理的额外内存位置。

{{source|
struct S
{
    char a;     // 内存位置 #1
    int b : 5;  // 内存位置 #2
    int c : 11, // 内存位置 #2（延续）
          : 0,
        d : 8;  // 内存位置 #3
    struct
    {
        int ee : 8; // 内存位置 #4
    } e;
} obj; // 对象 “obj” 由 4 个分离的内存位置组成
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=cwg|dr=1953|std=C++98|before=占据相同存储的多个对象会被视为不同的内存位置|after=内存位置现在指代存储}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc see c|c/language/memory model|内存模型|nomono=true}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
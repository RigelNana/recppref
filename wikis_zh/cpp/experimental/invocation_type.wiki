{{cpp/experimental/title|invocation_type|raw_invocation_type}}
{{cpp/experimental/lib_extensions/navbar}}

{{dcl begin}}
{{dcl header|experimental/type_traits}}
{{dcl|since=libfund_ts|num=1|
template&lt; class &gt;
struct raw_invocation_type; // 未定义

template&lt; class Fn, class... ArgTypes &gt;
struct raw_invocation_type&lt;Fn(ArgTypes...)&gt;;
}}
{{dcl|since=libfund_ts|num=2|
template&lt; class &gt;
struct invocation_type; // 未定义

template&lt; class Fn, class... ArgTypes &gt;
struct invocation_type&lt;Fn(ArgTypes...)&gt;;
}}
{{dcl end}}

在以实参 {{tt|ArgTypes...}} 调用 {{tt|Fn}}，如在 {{c|INVOKE(std::declval&lt;Fn&gt;(), std::declval&lt;ArgTypes&gt;()...)}} 中时计算''调用形参''，其中 {{c|INVOKE}} 是 {{named req|Callable}} 中定义的操作。

表达式 {{c|INVOKE(f, t1, t2, ..., tN)}} 的''调用形参''定义如下，其中 {{tt|T1}} 是（可有 cv 限定的） {{tt|t1}} 的类型，而若 {{tt|t1}} 为左值则 {{tt|U1}} 为 {{tt|T1&amp;}}，否则为 {{tt|T1&amp;&amp;}}：

* 若 {{tt|f}} 是指向类 {{tt|T}} 成员函数的指针，则调用形参是 {{tt|U1}} 后随 {{tt|t2, ..., tN}} 所匹配的 {{tt|f}} 的形参。
* 若 {{tt|N {{==}} 1}} 且 {{tt|f}} 为指向类 {{tt|T}} 数据成员的指针，则调用形参为 {{tt|U1}}。
* 若 {{tt|f}} 为类类型对象，则调用形参为在 {{tt|f}} 的代理调用函数和函数调用运算符间，实参 {{tt|t1, ..., tN}} 的最佳可达函数的匹配 {{tt|t1, ..., tN}} 的形参。
* 所有其他情况下，调用形参是匹配 {{tt|t1, ..., tN}} 的 {{tt|f}} 的形参。

若实参 {{tt|tI}} 匹配函数形参列表中的省略号，则对应的调用形参是对 {{tt|tI}} 应用默认实参提升的结果。

{{tt|Fn}} 和 {{tt|ArgTypes}} 中的所有类型能为完整类型、未知边界数组或（可有 cv 限定的）{{tt|void}}。

===成员类型===
{{dsc begin}}
{{dsc hitem |成员类型|定义}}
{{dsc | {{c|raw_invocation_type&lt;Fn(ArgTypes...)&gt;::type}} | {{c|R(T1, T2, ...)}}，其中：
* {{tt|R}} 为 {{c|std::result_of_t&lt;Fn(ArgTypes...)&gt;}}。
* {{tt|T1, T2, ...}} 为定义于上的 {{c|INVOKE(std::declval&lt;Fn&gt;(), std::declval&lt;ArgTypes&gt;()...)}} 的''调用形参''。
仅若能在不求值语境中以 {{tt|ArgTypes...}} 调用 {{tt|Fn}} 才定义。}}
{{dsc | {{c|invocation_type&lt;Fn(ArgTypes...)&gt;::type}} | {{c|R(U1, U2, ...)}}，其中
* {{tt|R}} 为 {{c|std::result_of_t&lt;Fn(ArgTypes...)&gt;}}。
* {{tt|T1, T2, ...}} 为定义如上的 {{c|INVOKE(std::declval&lt;Fn&gt;(), std::declval&lt;ArgTypes&gt;()...)}} 的''调用形参''。
* {{tt|A1, A2, ...}} 代表 {{tt|ArgTypes...}}
* 若 {{c|std::declval&lt;Ai&gt;()}} 为右值则 {{tt|Ui}} 为 {{c|std::decay_t&lt;Ai&gt;}}，否则为 {{tt|Ti}}。

仅若能在不求值语境中以 {{tt|ArgTypes...}} 调用 {{tt|Fn}} 才定义。}}
{{dsc end}}

===辅助类型===
{{dcl begin}}
{{dcl|since=libfund_ts|1=
template&lt; class T &gt;
using raw_invocation_type_t = typename raw_invocation_type&lt;T&gt;::type;
}}
{{dcl|since=libfund_ts|1=
template&lt; class T &gt;
using invocation_type_t = typename invocation_type&lt;T&gt;::type;
}}
{{dcl end}}

===示例===
{{example
|code=
|output=
}}

===参阅===
{{dsc begin}}
{{dsc see cpp | cpp/experimental/reflect | 反射 TS | nomono=true}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/experimental/title|barrier}}
{{cpp/experimental/concurrency/barrier/navbar}}
{{fmbox | class=noprint | style=font-size: 0.8em | text='''并入 ISO C++''' 此页面上描述的功能自 2019 年 7 月起已并入主线 ISO C++ 标准；见 {{ltt|cpp/thread/barrier|std::barrier}} {{mark since c++20}} }}
{{dcl begin}}
{{dcl header|experimental/barrier}}
{{dcl | since=concurrency |
class barrier;
}}
{{dcl end}}

类 {{tt|std::experimental::barrier}} 提供一种线程协调机制，它允许参与线程阻塞直至操作完成。不同于 {{lc|std::experimental::latch}}，屏障可以重用；一旦从屏障的同步点释放参与线程，线程就能重用同一屏障。

屏障拥有完成阶段，一旦参与线程集合中的所有线程均到达同步点，则由参与线程之一执行完成阶段。{{tt|arrive_and_wait}} 和 {{tt|arrive_and_drop}} 的调用[[cpp/atomic/memory_order|同步于]]完成阶段的开始；完成阶段的结束同步于从阻塞于其完成的所有调用的返回。

对于 {{tt|std::experimental::barrier}}，完成阶段为空。{{lc|std::experimental::flex_barrier}} 允许用户以一个函数对象控制其完成阶段。

为 {{tt|num_threads}} 个线程构造的 {{tt|barrier}} 的参与线程集合，是在构造后首先到达其同步点的 {{tt|num_threads}} 个线程。同一线程集合（除了调用了 {{rlt|arrive_and_drop|arrive_and_drop()}} 的线程）必须在每轮都到达此 {{tt|barrier}}。

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/experimental/barrier/dsc constructor}}
{{dsc inc|cpp/experimental/barrier/dsc destructor}}
{{dsc inc|cpp/experimental/barrier/dsc operator{{=}}}}

{{dsc inc|cpp/experimental/barrier/dsc arrive_and_wait}}
{{dsc inc|cpp/experimental/barrier/dsc arrive_and_drop}}
{{dsc end}}

{{langlinks|en|ja}}
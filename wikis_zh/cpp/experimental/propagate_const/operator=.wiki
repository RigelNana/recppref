{{cpp/experimental/propagate_const/title|operator{{=}}}}
{{cpp/experimental/lib extensions 2/propagate_const/navbar}}

{{dcl begin}}
{{dcl|num=1|since=libfund_ts_2|1= 
constexpr propagate_const&amp; operator=( propagate_const&amp;&amp; p ) = default;
}}
{{dcl|num=2|since=libfund_ts_2|1= 
template&lt; class U &gt;
constexpr propagate_const&amp; operator=( propagate_const&lt;U&gt;&amp;&amp; pu );
}}
{{dcl|num=3|since=libfund_ts_2|1= 
template&lt; class U &gt;
constexpr propagate_const&amp; operator=( U&amp;&amp; u );
}}
{{dcl|num=4|since=libfund_ts_2|1= 
propagate_const&amp; operator=( const propagate_const&amp; ) = delete;
}}
{{dcl end}}

令 {{tt|t_}} 指代私有数据成员，即被包装的指针式对象。

@1@ 显式预置的移动赋值运算符，它从 {{c|p.t_}} 移动赋值给 {{c|this-&gt;t_}}。

@2@ 赋值 {{c|std::move(pu.t_)}} 给 {{c|this-&gt;t_}}。&lt;br&gt;&lt;!--
--&gt;{{cpp/enable_if| {{tt|U}} 可隐式转换为 {{tt|T}} }}。

@3@ 赋值 {{c|std::forward&lt;U&gt;(u)}} 给 {{c|this-&gt;t_}}。&lt;br&gt;&lt;!--
--&gt;{{cpp/enable_if| {{tt|U}} 可隐式转换为 {{tt|T}} 且 {{c|std::decay_t&lt;U&gt;}} 不是 {{tt|propagate_const}} 的特化}}。

@4@ 复制赋值运算符被显式弃置。{{tt|propagate_const}} 不可复制。

===参数===
{{par begin}}
{{par | p  | 要移动的另一 {{tt|propagate_const}} 对象}}
{{par | pu | 要移动的另一不同特化的 {{tt|propagate_const}} 对象}}
{{par | u  | 赋值给所含指针的另一对象}}
{{par end}}

=== 返回值 ===
{{c|*this}}。

{{langlinks|de|en|es|ja|ru}}
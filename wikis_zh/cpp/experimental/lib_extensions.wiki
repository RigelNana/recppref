{{title|C++ 标准库扩展}}
{{cpp/experimental/lib_extensions/navbar}}

C++ 库基础扩展之版本 1 (The C++ Extensions for Library Fundamentals)，ISO/IEC TS 19568:2015 为 C++ 标准库定义下列新组件：

==未选择包含于 C++17 中的部分==
C++17 未选择包含 ISO/IEC TS 19568:2015 的下列组件。

==== 支持类型擦除分配器的既存类修改版本 ====
{{dsc begin}}
{{dsc header | experimental/functional}}
{{dsc tclass | cpp/experimental/function |带有类型擦除分配器支持的 {{lc|std::function}} 修改版本}}
{{dsc header | experimental/future}}
{{dsc tclass | cpp/experimental/lib extensions/promise |带有类型擦除分配器支持的 {{lc|std::promise}} 修改版本}}
{{dsc tclass | cpp/experimental/lib extensions/packaged_task |带有类型擦除分配器支持的 {{lc|std::packaged_task}} 修改版本}}
{{dsc end}}

====内存资源适配器====
{{dsc begin}}
{{dsc talias | cpp/experimental/resource_adaptor | 将分配器适配到 {{lc|memory_resource}}}}
{{dsc end}}

===通用工具===
{{dsc begin}}
{{dsc header | experimental/utility }}
{{dsc class | cpp/experimental/erased_type |类型擦除的占位符类型，例如在分配器中}}
{{dsc header | experimental/type_traits }}
{{dsc tclass | cpp/experimental/invocation_type| title=invocation_type&lt;br/&gt;raw_invocation_type |推导以给定实参类型调用可调用对象时蕴含的函数类型}}
{{dsc end}}

===特性测试宏===
{{dsc begin}}
{{dsc header | experimental/optional }}
{{dsc macro const | __cpp_lib_experimental_optional | nolink=true |至少为 {{c|201411}} 的值，指示支持 optional 类型}}
{{dsc header | experimental/any }}
{{dsc macro const | __cpp_lib_experimental_any | nolink=true |至少为 {{c|201411}} 的值，指示支持 any 类型}}
{{dsc header | experimental/string_view }}
{{dsc macro const | __cpp_lib_experimental_string_view | nolink=true |至少为 {{c|201411}} 的值，指示支持 basic_string_view 模板}}
{{dsc header | experimental/tuple }}
{{dsc macro const | __cpp_lib_experimental_apply | nolink=true |至少为 {{c|201402}} 的值，指示支持 tuple 的 apply() 函数}}
{{dsc header | experimental/type_traits }}
{{dsc macro const | __cpp_lib_experimental_type_trait_variable_templates | nolink=true |至少为 {{c|201402}} 的值，指示支持类型特征的变量模板}}
{{dsc macro const | __cpp_lib_experimental_invocation_type | nolink=true |至少为 {{c|201406}} 的值，指示支持调用类型特征}}
{{dsc header | experimental/functional }}
{{dsc macro const | __cpp_lib_experimental_boyer_moore_searching | nolink=true |至少为 {{c|201411}} 的值，指示支持附加搜索算法}}
{{dsc macro const | __cpp_lib_experimental_function_erased_allocator | nolink=true |至少为 {{c|201406}} 的值，指示支持 std::function 的类型擦除分配器}}
{{dsc header | experimental/future }}
{{dsc macro const | __cpp_lib_experimental_promise_erased_allocator | nolink=true |至少为 {{c|201406}} 的值，指示支持 std::promise 的类型擦除分配器}}
{{dsc macro const | __cpp_lib_experimental_packaged_task_erased_allocator | nolink=true |至少为 {{c|201406}} 的值，指示支持 std::packaged_task 的类型擦除分配器}}
{{dsc header | experimental/memory }}
{{dsc macro const | __cpp_lib_experimental_shared_ptr_arrays | nolink=true |至少为 {{c|201406}} 的值，指示 shared_ptr 支持数组}}
{{dsc header | experimental/memory_resource }}
{{dsc macro const | __cpp_lib_experimental_memory_resources | nolink=true |至少为 {{c|201402}} 的值，指示支持多态内存资源}}
{{dsc header | experimental/algorithm }}
{{dsc macro const | __cpp_lib_experimental_sample | nolink=true |至少为 {{c|201402}} 的值，指示支持采样算法}}
{{dsc end}}

==已并入 C++17==
ISO/IEC TS 19568:2015 的下列组件已包含于 C++17。

===可选对象===
{{dsc begin}}
{{dsc header | experimental/optional }}
{{dsc tclass | cpp/experimental/optional |表示''可选对象''的类模板}}
{{dsc end}}

=== 类 {{tt|any}} ===
{{dsc begin}}
{{dsc header | experimental/any }}
{{dsc class | cpp/experimental/any |任何类型单个值的类型安全容器}}
{{dsc end}}

=== {{tt|string_view}} ===
{{dsc begin}}
{{dsc header | experimental/string_view }}
{{dsc tclass | cpp/experimental/basic_string_view |到字符串的非占有引用}}
{{dsc end}}

=== 类型擦除及多态分配器 ===

==== 多态分配器与内存资源 ====
此节中的实体声明于 {{lc|std::experimental::pmr}} 命名空间。

{{dsc begin}}
{{dsc header | experimental/memory_resource}}
{{dsc class | cpp/experimental/memory_resource | 封装内存资源的类的抽象接口}} 
{{dsc inc|cpp/experimental/pmr/dsc synchronized_pool_resource}}
{{dsc inc|cpp/experimental/pmr/dsc unsynchronized_pool_resource}}
{{dsc class | cpp/experimental/monotonic_buffer_resource |特殊用途的 {{lc|memory_resource}}，它仅在销毁资源时释放分配的内存}}
{{dsc tclass | cpp/experimental/polymorphic_allocator |支持运行时多态的分配器，多态基于构造所用的 {{lc|memory_resource}}}}
{{dsc inc | cpp/experimental/pmr/dsc new_delete_resource}}
{{dsc inc | cpp/experimental/pmr/dsc null_memory_resource}}
{{dsc inc | cpp/experimental/pmr/dsc get_default_resource}}
{{dsc inc | cpp/experimental/pmr/dsc set_default_resource}}
{{dsc end}}

==== 使用多态分配器的容器的便利别名 ====
{{tt|std::experimental::pmr}} 命名空间中为标准库中的下列类模板提供[[cpp/experimental/lib extensions/pmr_container|便利别名和别名模板]]：
{{collapse top |提供了便利别名的容器模板列表}}
{{div col|3}}
* {{lc|std::vector}}
* {{lc|std::deque}}
* {{lc|std::forward_list}}
* {{lc|std::list}}
* {{lc|std::basic_string}}
* {{lc|std::map}}
* {{lc|std::multimap}}
* {{lc|std::set}}
* {{lc|std::multiset}}
* {{lc|std::match_results}}
* {{lc|std::unordered_map}}
* {{lc|std::unordered_multimap}}
* {{lc|std::unordered_set}}
* {{lc|std::unordered_multiset}}
{{div col end}}
{{collapse bottom}}

=== {{tt|shared_ptr}} 的数组支持===
{{dsc begin}}
{{dsc header | experimental/memory}}
{{dsc hitem |类|描述}}
{{dsc tclass | cpp/experimental/shared_ptr |支持数组的 {{lc|std::shared_ptr}} 修改版本}} 
{{dsc tclass | cpp/experimental/weak_ptr|支持数组的 {{lc|std::weak_ptr}} 修改版本}} 
{{dsc end}}

===采样和搜索算法===
{{dsc begin}}
{{dsc header | experimental/algorithm }}
{{dsc tfun | cpp/experimental/sample |从序列中选择 n 个随机元素}}
{{dsc tfun | cpp/experimental/search |应用搜索器 (Searcher) 到序列}}
{{dsc header | experimental/functional }}
{{dsc tclass | cpp/experimental/default_searcher |标准 C++ 库搜索算法实现}}
{{dsc tfun | cpp/experimental/default_searcher | title=make_default_searcher |创建 default_searcher 的辅助函数}}
{{dsc tclass | cpp/experimental/boyer_moore_searcher | Boyer-Moore 搜索算法实现}}
{{dsc tfun | cpp/experimental/boyer_moore_searcher | title=make_boyer_moore_searcher |创建 boyer_moore_searcher 的辅助函数}}
{{dsc tclass | cpp/experimental/boyer_moore_horspool_searcher | Boyer-Moore-Horspool 搜索算法实现}}
{{dsc tfun | cpp/experimental/boyer_moore_horspool_searcher | title= make_boyer_moore_horspool_searcher |创建 boyer_moore_horspool_searcher 的辅助函数}}
{{dsc end}}

===通用工具===
{{dsc begin}}
{{dsc header | experimental/tuple }}
{{dsc tfun | cpp/experimental/apply |以实参的 tuple 调用函数}}
{{dsc end}}

另外，该 TS 为标准库中的类型特性和其他类模板提供[[cpp/experimental/type_trait_variable_templates|大量 {{tt|constexpr}} 变量模板]]：
{{collapse top|提供了变量模板的类型特性和其他类模板}}
{{div col|2}}
* {{lc|std::is_void}}
* {{lc|std::is_null_pointer}}
* {{lc|std::is_integral}}
* {{lc|std::is_floating_point}}
* {{lc|std::is_array}}
* {{lc|std::is_pointer}}
* {{lc|std::is_lvalue_reference}}
* {{lc|std::is_rvalue_reference}}
* {{lc|std::is_member_object_pointer}}
* {{lc|std::is_member_function_pointer}}
* {{lc|std::is_enum}}
* {{lc|std::is_union}}
* {{lc|std::is_class}}
* {{lc|std::is_function}}
* {{lc|std::is_reference}}
* {{lc|std::is_arithmetic}}
* {{lc|std::is_fundamental}}
* {{lc|std::is_object}}
* {{lc|std::is_scalar}}
* {{lc|std::is_compound}}
* {{lc|std::is_member_pointer}}
* {{lc|std::is_const}}
* {{lc|std::is_volatile}}
* {{lc|std::is_trivial}}
* {{lc|std::is_trivially_copyable}}
* {{lc|std::is_standard_layout}}
* {{lc|std::is_pod}}
* {{lc|std::is_literal_type}}
* {{lc|std::is_empty}}
* {{lc|std::is_polymorphic}}
* {{lc|std::is_abstract}}
* {{lc|std::is_final}}
* {{lc|std::is_signed}}
* {{lc|std::is_unsigned}}
* {{lc|std::is_constructible}}
* {{lc|std::is_trivially_constructible}}
* {{lc|std::is_nothrow_constructible}}
* {{lc|std::is_default_constructible}}
* {{lc|std::is_trivially_default_constructible}}
* {{lc|std::is_nothrow_default_constructible}}
* {{lc|std::is_copy_constructible}}
* {{lc|std::is_trivially_copy_constructible}}
* {{lc|std::is_nothrow_copy_constructible}}
* {{lc|std::is_move_constructible}}
* {{lc|std::is_trivially_move_constructible}}
* {{lc|std::is_nothrow_move_constructible}}
* {{lc|std::is_assignable}}
* {{lc|std::is_trivially_assignable}}
* {{lc|std::is_nothrow_assignable}}
* {{lc|std::is_copy_assignable}}
* {{lc|std::is_trivially_copy_assignable}}
* {{lc|std::is_nothrow_copy_assignable}}
* {{lc|std::is_move_assignable}}
* {{lc|std::is_trivially_move_assignable}}
* {{lc|std::is_nothrow_move_assignable}}
* {{lc|std::is_destructible}}
* {{lc|std::is_trivially_destructible}}
* {{lc|std::is_nothrow_destructible}}
* {{lc|std::has_virtual_destructor}}
* {{lc|std::alignment_of}}
* {{lc|std::rank}}
* {{lc|std::extent}}
* {{lc|std::is_same}}
* {{lc|std::is_base_of}}
* {{lc|std::is_convertible}}
* {{lc|std::ratio_equal}}
* {{lc|std::ratio_not_equal}}
* {{lc|std::ratio_less}}
* {{lc|std::ratio_less_equal}}
* {{lc|std::ratio_greater}}
* {{lc|std::ratio_greater_equal}}
* {{lc|std::tuple_size}}
* {{lc|std::chrono::treat_as_floating_point}}
* {{lc|std::is_error_code_enum}}
* {{lc|std::is_error_condition_enum}}
* {{lc|std::is_bind_expression}}
* {{lc|std::is_placeholder}}
* {{lc|std::uses_allocator}}
{{div col end}}
{{collapse bottom}}

{{langlinks|de|en|es|ja|ru}}
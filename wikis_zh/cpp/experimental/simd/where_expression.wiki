{{cpp/experimental/title|where_expression}}
{{cpp/experimental/simd/where_expression/navbar}}

{{ddcl|header=experimental/simd|since=parallelism_ts_2|1=
template&lt; class M, class V &gt;
class where_expression;
}}

类模板 {{tt|where_expression}} 抽象给定的算术或数据并行类型非 const 对象的被选择元素的概念。被选择元素为 {{tt|V}} 类型的左值，其对应的掩码元素（类型为 {{tt|M}}）为 {{tt|true}}。应用于 {{tt|where_expression&lt;M, V&gt;}} 类型对象的运算符仅对被选择元素应用。遗留所有其他元素未改变。

使用 {{rlpt|where}} 函数构造 {{tt|where_expression}} 对象。

===模板形参===
{{par begin}}
{{par | M |掩码类型}}
{{par | V |应用 M 到其上的值类型}}
{{par end}}

{{open range plain|M|V}} 的合法组合是：
* {{open range plain|simd_mask&lt;T, Abi&gt;|simd&lt;T, Abi&gt;}}，
* {{open range plain|simd_mask&lt;T, Abi&gt;|simd_mask&lt;T, Abi&gt;}}，
* {{open range plain|bool|T}}。

===成员函数===
{{dsc begin}}
{{dsc mem fun | cpp/experimental/simd/where_expression/operator_assign | title=operator= |赋值被选择位置}}
{{dsc mem fun | cpp/experimental/simd/where_expression/compound_operators | title=operator+= &lt;br/&gt; operator-= &lt;br/&gt; operator*= &lt;br/&gt; operator/= &lt;br/&gt; operator%= &lt;br/&gt; operator&amp;= &lt;br/&gt; operator{{!}}= &lt;br/&gt; operator^= &lt;br/&gt; operator&lt;&lt;= &lt;br/&gt; operator&gt;&gt;= |复合赋值运算符}}
{{dsc mem fun | cpp/experimental/simd/where_expression/inc | title=operator++ &lt;br/&gt; operator-- |自增和自减运算符}}
{{dsc mem fun | cpp/experimental/simd/where_expression/copy_from |从地址加载到被选择位置}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;cstddef&gt;
#include &lt;experimental/simd&gt;
#include &lt;iostream&gt;
namespace stdx = std::experimental;

void print(auto const&amp; a)
{
    for (std::size_t i{}; i != std::size(a); ++i)
        std::cout &lt;&lt; a[i] &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

template&lt;class A&gt;
stdx::simd&lt;int, A&gt; my_abs(stdx::simd&lt;int, A&gt; x)
{
    where(x &lt; 0, x) = -x;
    return x;
}

int main()
{
    const stdx::native_simd&lt;int&gt; a([](int i) { return i - 2; });
    print(a);
    const auto b = my_abs(a);
    print(b);
}
|p=true
|output=
-2 -1 0 1 
2 1 0 1 
}}

{{langlinks|en}}
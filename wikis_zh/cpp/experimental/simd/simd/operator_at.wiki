{{cpp/experimental/simd/title|operator[]}}
{{cpp/experimental/simd/simd/navbar}}
{{dcl begin}}
{{dcl|num=1|since=parallelism_ts_2|1=
reference operator[]( std::size_t i );
}}
{{dcl|num=2|since=parallelism_ts_2|1=
value_type operator[]( std::size_t i ) const;
}}
{{dcl end}}

The subscript operators allow reading and writing single elements of a {{tt|simd}}.
@1@ Returns a reference proxy to the i-th element. This proxy type should not be captured into an lvalue. Lvalues of {{tt|simd::reference}} can only convert to {{tt|value_type}}. Rvalues of {{tt|simd::reference}} overload assignment and all compound assignment operators as well as {{tt|swap}}.
@2@ 返回第 i 个元素的纯右值。In contrast to containers, which contain objects of type {{tt|value_type}}, a {{tt|simd}} is not a container of individual objects and therefore cannot return an lvalue-reference.

===参数===
{{par begin}}
{{par|i|元素索引。要求其小于 {{rlp|size|size()}}}}
{{par end}}

===示例===
{{example
|code=
#include &lt;cstddef&gt;
#include &lt;cstdint&gt;
#include &lt;experimental/simd&gt;
#include &lt;iostream&gt;
namespace stdx = std::experimental;

int main()
{
    const stdx::native_simd&lt;std::int64_t&gt; a = 3;
    for (std::size_t i = 0; i != a.size(); ++i)
        std::cout &lt;&lt; a[i] &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|p=true
|output=
3 3 3 3 3 3 3 3
}}
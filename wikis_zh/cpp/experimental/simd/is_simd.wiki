{{cpp/experimental/title|is_simd|is_simd_mask}}
{{cpp/experimental/simd/navbar}}

{{dcl begin}}
{{dcl header|experimental/simd}}
{{dcl|since=parallelism_ts_2|num=1|1=
template&lt; class T &gt;
struct is_simd;
}}
{{dcl|since=parallelism_ts_2|num=2|1=
template&lt; class T &gt;
struct is_simd_mask;
}}
{{dcl end}}

@1@ 若 {{tt|T}} 为 {{rlpt|simd}} 类模板的特化，则提供等于 {{c|true}} 的成员常量 {{c|value}}。对于任何其他类型，{{c|value}} 为 {{c|false}}。

@2@ 若 {{tt|T}} 是 {{rlpt|simd_mask}} 类模板的特化，则提供等于 {{c|true}} 的成员常量 {{c|value}}。对于任何其他类型，{{c|value}} 为 {{c|false}}。

===模板形参===
{{par begin}}
{{par | T |要检查的类型}}
{{par end}}

===辅助变量模板===
{{dcl begin}}
{{dcl|since=parallelism_ts_2|1=
template&lt; class T &gt;
constexpr bool is_simd_v = is_simd&lt;T&gt;::value;
}}
{{dcl|since=parallelism_ts_2|1=
template&lt; class T &gt;
constexpr bool is_simd_mask_v = is_simd_mask&lt;T&gt;::value;
}}
{{dcl end}}

{{cpp/types/integral_constant/inherit | {{tt|T}} 为 {{rlpt|simd}}/{{rlpt|simd_mask}} 类型}}

===注解===
{{c|is_simd_v&lt;T&gt;}} 对于测试 {{tt|T}} 是否可被用作 SIMD 类型是必要但不充分的。例如，{{c|is_simd_v&lt;simd&lt;bool&gt;&gt;}} 为 {{c|true}}，即使 {{c|bool}} 未包含于许可的可向量化类型中。缺少的条件是 {{c|std::is_constructible_v&lt;T&gt;}}，它对于 {{c|simd&lt;bool&gt;}} 为 {{c|false}}。

===示例===
{{example
|code=
#include &lt;experimental/simd&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

namespace stdx = std::experimental;

template&lt;typename T&gt;
void test_simd(std::string_view type_name)
{
    std::cout &lt;&lt; std::boolalpha
              &lt;&lt; "Type: " &lt;&lt; type_name &lt;&lt; '\n'
              &lt;&lt; "  is_simd: " &lt;&lt; stdx::is_simd_v&lt;T&gt; &lt;&lt; '\n'
              &lt;&lt; "  is_constructible: " &lt;&lt; std::is_constructible_v&lt;T&gt; &lt;&lt; '\n';
}

template&lt;typename T&gt;
void test_simd_mask(std::string_view type_name)
{
    std::cout &lt;&lt; std::boolalpha
              &lt;&lt; "Type: " &lt;&lt; type_name &lt;&lt; '\n'
              &lt;&lt; "  is_simd_mask: " &lt;&lt; stdx::is_simd_mask_v&lt;T&gt; &lt;&lt; '\n'
              &lt;&lt; "  is_constructible: " &lt;&lt; std::is_constructible_v&lt;T&gt; &lt;&lt; "\n\n";
}

int main() 
{
    test_simd&lt;int&gt;("int");
    test_simd_mask&lt;int&gt;("int");

    test_simd&lt;stdx::simd&lt;float&gt;&gt;("simd&lt;float&gt;");
    test_simd_mask&lt;stdx::simd_mask&lt;float&gt;&gt;("simd_mask&lt;float&gt;");

    test_simd&lt;stdx::simd&lt;bool&gt;&gt;("simd&lt;bool&gt;");
    test_simd_mask&lt;stdx::simd_mask&lt;bool&gt;&gt;("simd_mask&lt;bool&gt;");
}
|output=
Type: int
  is_simd: false
  is_constructible: true
Type: int
  is_simd_mask: false
  is_constructible: true

Type: simd&lt;float&gt;
  is_simd: true
  is_constructible: true
Type: simd_mask&lt;float&gt;
  is_simd_mask: true
  is_constructible: true

Type: simd&lt;bool&gt;
  is_simd: true
  is_constructible: false
Type: simd_mask&lt;bool&gt;
  is_simd_mask: true
  is_constructible: false
}}

{{langlinks|en|ja}}
{{cpp/experimental/title|all_of|any_of|none_of|some_of}}
{{cpp/experimental/simd/navbar}}

{{dcl begin}}
{{dcl header|experimental/simd}}
{{dcl|since=parallelism_ts_2|num=1|
template&lt; class T, class Abi &gt;
bool all_of( const simd_mask&lt;T, Abi&gt;&amp; k );
}}
{{dcl|since=parallelism_ts_2|num=2|
template&lt; class T, class Abi &gt;
bool any_of( const simd_mask&lt;T, Abi&gt;&amp; k );
}}
{{dcl|since=parallelism_ts_2|num=3|
template&lt; class T, class Abi &gt;
bool none_of( const simd_mask&lt;T, Abi&gt;&amp; k );
}}
{{dcl|since=parallelism_ts_2|num=4|
template&lt; class T, class Abi &gt;
bool some_of( const simd_mask&lt;T, Abi&gt;&amp; k );
}}
{{dcl end}}

@1@ 如果 {{c|k}} 中的所有值均为 {{c/core|true}} 则返回 {{c/core|true}}。
@2@ 如果 {{c|k}} 中至少一个值为 {{c/core|true}} 则返回 {{c/core|true}}。
@3@ 如果 {{c|k}} 中的所有值均为 {{c/core|false}} 则返回 {{c/core|true}}。
@4@ 如果 {{c|k}} 中至少一个值为 {{c/core|true}} 但并非 {{c|k}} 中的所有值均为 {{c/core|true}} 则返回 {{c/core|true}}。

===参数===
{{par begin}}
{{par|k|要运用归约的 {{rlpt|simd_mask}}}}
{{par end}}

===返回值===
横向归约的布尔结果。

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;experimental/simd&gt;

namespace stq = std::experimental;

int main()
{
    using mask = stq::fixed_size_simd_mask&lt;int, 4&gt;;

    mask mask1{false}; // = {0, 0, 0, 0}
    assert
    (
        stq::none_of(mask1) == true &amp;&amp;
        stq::any_of(mask1) == false &amp;&amp;
        stq::some_of(mask1) == false &amp;&amp;
        stq::all_of(mask1) == false
    );

    mask mask2{true}; // = {1, 1, 1, 1}
    assert
    (
        stq::none_of(mask2) == false &amp;&amp;
        stq::any_of(mask2) == true &amp;&amp;
        stq::some_of(mask2) == false &amp;&amp;
        stq::all_of(mask2) == true
    );

    mask mask3{true};
    mask3[0] = mask3[1] = false; // mask3 = {0, 0, 1, 1}
    assert
    (
        stq::none_of(mask3) == false &amp;&amp;
        stq::any_of(mask3) == true &amp;&amp;
        stq::some_of(mask3) == true &amp;&amp;
        stq::all_of(mask3) == false
    );
}
}}
{{cpp/experimental/title|n=simd_abi::|deduce}}
{{cpp/experimental/simd/navbar}}

{{ddcl|header=experimental/simd|since=parallelism_ts_2|
template&lt; class T, std::size_t N, class ...Abis &gt;
struct deduce;
}}

类型 {{c|deduce&lt;T, N, Abis...&gt;::type}} 当且仅当符合下列条件才存在：
* {{c|T}} 是可向量化的类型，且
* {{c|simd_abi::fixed_size&lt;N&gt;}} 得到支持，且
* {{c|Abis...}} 中的每个元素均为 ABI 标签

当 {{c|deduce&lt;T, N, Abis...&gt;::type}} 存在时以 {{tt|DA}} 指代它，则
* {{c|1=simd_size_v&lt;T, DA&gt; == N}}，
* {{c|simd&lt;T, DA&gt;}} 可默认构造，即它受支持
* 若 {{c|1=N == 1}} 则 {{tt|DA}} 为 {{rlpt|scalar|simd_abi::scalar}}，否则它是实现定义的。

===成员类型===
{{dsc begin}}
{{dsc hitem | 名字 | 定义}}
{{dsc | {{tt|type}} | 适合给定元素类型 {{tt|T}} 和大小 {{tt|N}} 的 ABI 标签类型}}
{{dsc end}}

===辅助类型===
{{ddcl | since=parallelism_ts_2 | 1=
template &lt; class T, std::size_t N, class ...Abis &gt;
using deduce_t = typename deduce&lt;T, N, Abis...&gt;::type;
}}

===注解===
{{tt|simd_abi::deduce}} 对 SFINAE 友好。

通过此设施推导的 ABI 标签是实现质量特性。
实现可以基于 {{c|Abis...}} 进行选择，也可以忽略 {{c|Abis...}} 实参。简单的实现可以单纯无条件地返回 {{c|fixed_size&lt;N&gt;}}。优化的实现可以对大多数输入返回实现定义的扩展 ABI 标签。从而若你需要给定元素数的 ABI 标签，就使用 {{rlpt|fixed_size}}，否则更应该用 {{tt|deduce_t}}。

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/simd/dsc scalar}}
{{dsc inc|cpp/experimental/simd/dsc fixed_size}}
{{dsc inc|cpp/experimental/simd/dsc compatible}}
{{dsc inc|cpp/experimental/simd/dsc native}}
{{dsc end}}

{{langlinks|en|ja}}
{{cpp/experimental/ranges/title|WeaklyIncrementable}}
{{cpp/experimental/ranges/iterator/navbar}}
{{ddcl|header=experimental/ranges/iterator|since=ranges|1=
template&lt; class I &gt;
concept bool WeaklyIncrementable =
    Semiregular&lt;I&gt; &amp;&amp;
    requires(I i) {
        typename ranges::difference_type_t&lt;I&gt;;
        requires SignedIntegral&lt;ranges::difference_type_t&lt;I&gt;&gt;;
        { ++i } -&gt; Same&lt;I&gt;&amp;; /* 不要求保持相等性 */
        i++; /* 不要求保持相等性 */
    };
}}

概念 {{tt|WeaklyIncrementable&amp;lt;I&amp;gt;}} 指定能（以前和后自增运算符）自增的类型上的要求。自增运算不需要保持相等性，而且类型不必为 {{rconcept|EqualityComparable}}。

令 {{tt|i}} 为 {{tt|I}} 类型对象。若 {{tt|i}} 在前和后自增的定义域中，则说它''可自增''。 {{tt|WeaklyIncrementable&amp;lt;I&amp;gt;}} 仅若下列条件成立才得到满足：
* {{tt|++i}} 与 {{tt|i++}} 有相同的定义域；
* 若 {{tt|i}} 可自增，则：
** {{tt|++i}} 与 {{tt|i++}} 均令 {{tt|i}} 前进到下个元素；且
** {{tt|++i}} 与 {{tt|i}} 指代同一对象。

{{cpp/experimental/ranges/equality preservation|skip-requires=yes}}

=== 注解 ===
对于 {{tt|WeaklyIncrementable}} 类型，{{tt|a}} 等于 {{tt|b}} 不蕴含 {{tt|++a}} 等于 {{tt|++b}}。在这种类型上的算法应该为单趟，且决不试图二次经过相同值。

{{langlinks|en}}
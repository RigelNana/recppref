{{cpp/experimental/ranges/title|input_iterator_tag|output_iterator_tag|forward_iterator_tag|bidirectional_iterator_tag|random_access_iterator_tag}}
{{cpp/experimental/ranges/iterator/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/iterator}}
{{dcl|
struct input_iterator_tag {};
}}
{{dcl|
struct output_iterator_tag {};
}}
{{dcl|
struct forward_iterator_tag : public input_iterator_tag {};
}}
{{dcl|
struct bidirectional_iterator_tag : public forward_iterator_tag {};
}}
{{dcl|
struct random_access_iterator_tag : public bidirectional_iterator_tag {};
}}
{{dcl end}}

定义迭代器的类别。每个标签都是空类型，且对应五个迭代器类别之一：
* {{tt|input_iterator_tag}} 对应 {{rconcept|InputIterator}}。
* {{tt|forward_iterator_tag}} 对应 {{rconcept|ForwardIterator}}。
* {{tt|bidirectional_iterator_tag}} 对应 {{rconcept|BidirectionalIterator}}。
* {{tt|random_access_iterator_tag}} 对应 {{rconcept|RandomAccessIterator}}。
* {{tt|output_iterator_tag}} 对应 {{rconcept|OutputIterator}}；它不被使用，仅因后兼容性提供。

迭代器类别标签携带信息，能以之为该类别所隐含的特定要求集选择最有效的算法。然而更好的是基于概念的重载。

对每个 {{rconcept|InputIterator}} 类型 {{tt|I}}，必须定义 {{c|ranges::iterator_category_t&lt;I&gt;}} 为描述该迭代器行为的最特定的类别标签的别名。

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc iterator tags}}
{{dsc inc|cpp/experimental/ranges/iterator/dsc iterator_traits}}
{{dsc end}}

{{langlinks|en|ja}}
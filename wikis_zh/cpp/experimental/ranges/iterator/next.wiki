{{cpp/experimental/ranges/title|next}}
{{cpp/experimental/ranges/iterator/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/iterator}}
{{dcl|notes={{mark|定制点对象}}|since=ranges|1=
namespace {
    constexpr /* 未指明 */ next = /* 未指明 */;
}
}}
{{dcl h|调用签名}}
{{dcl|num=1|
template&lt; Iterator I &gt;
constexpr I next( I i );
}}
{{dcl|num=2|
template&lt; Iterator I &gt;
constexpr I next( I i, ranges::difference_type_t&lt;I&gt; n );
}}
{{dcl|num=3|
template&lt; Iterator I, Sentinel&lt;I&gt; S &gt;
constexpr I next( I i, S bound );
}}
{{dcl|num=4|
template&lt; Iterator I, Sentinel&lt;I&gt; S &gt;
constexpr I next( I i, ranges::difference_type_t&lt;I&gt; n, S bound );
}}
{{dcl end}}

{{c|n}} 次推进迭代器 {{c|i}}，或直至抵达 {{c|bound}}，先到为止，并返回前进的迭代器。

@1@ 等价于 {{c|++i; return i;}}。
@2@ 等价于 {{c|ranges::advance(i, n); return i;}}。
@3@ 等价于 {{c|ranges::advance(i, bound); return i;}}。
@4@ 等价于 {{c|ranges::advance(i, n, bound); return i;}}。

{{cpp/experimental/ranges/cpo}}

=== 返回值 ===
推进后的迭代器。

=== 注解 ===
虽然对重载 {{v|2}} 忽略 {{c|n}} 表现为如同 {{c|n}} 为 1，但对重载 {{v|4}} 忽略 {{c|n}} 表现为 {{c|n}} 为无穷大（始终推进到 {{c|bound}}）。

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc next}}
{{dsc inc|cpp/experimental/ranges/iterator/dsc advance}}
{{dsc inc|cpp/experimental/ranges/iterator/dsc prev}}
{{dsc inc|cpp/experimental/ranges/iterator/dsc distance}}
{{dsc end}}

{{langlinks|en|ja}}
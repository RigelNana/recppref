{{cpp/experimental/ranges/title|OutputIterator}}
{{cpp/experimental/ranges/iterator/navbar}}
{{ddcl|header=experimental/ranges/iterator|since=ranges|1=
template&lt; class I, class T &gt;
concept bool OutputIterator =
    Iterator&lt;I&gt; &amp;&amp; Writable&lt;I, T&gt; &amp;&amp;
    requires(I i, T&amp;&amp; t) {
        *i++ = std::forward&lt;T&gt;(t); // 不要求保持相等性
    };
}}

{{tt|OutputIterator}} 概念是 {{rconcept|Iterator}} 的细化，添加了能用于写入值类型和值类别为 {{tt|T}} 所编码的值的要求（经由 {{rconcept|Writable}}）。不要求 {{rconcept|EqualityComparable}}。

令 {{tt|E}} 为满足 {{c|decltype((E))}} 为 {{tt|T}} 的表达式，而 {{tt|i}} 为 {{tt|I}} 类型的可解引用对象。{{tt|OutputIterator&amp;lt;I, T&amp;gt;}} 仅若 {{c|1=*i++ = E;}} 拥有等价于 {{c|1=*i = E; ++i;}} 的效果才得到满足。

{{cpp/experimental/ranges/equality preservation|skip-requires=yes}}

=== 注解 ===
不同于 C++ 标准中的输出迭代器要求，范围 TS 中的 {{tt|OutputIterator}} 不要求定义迭代器类别标签。

输出迭代器上的算法应该为单趟。

{{langlinks|en}}
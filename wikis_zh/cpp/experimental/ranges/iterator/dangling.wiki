{{cpp/experimental/ranges/title|dangling|safe_iterator_t}}
{{cpp/experimental/ranges/iterator/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/iterator}}
{{dcl|since=ranges|1=
template&lt; CopyConstructible T &gt;
class dangling {
public:
    dangling() requires DefaultConstructible&lt;T&gt;();
    dangling(T t);
    T get_unsafe() const;
};
}}
{{dcl|since=ranges|1=
template&lt; Range R &gt;
using safe_iterator_t = std::conditional_t&lt;std::is_lvalue_reference&lt;R&gt;::value,
                                           ranges::iterator_t&lt;R&gt;,
                                           ranges::dangling&lt;ranges::iterator_t&lt;R&gt;&gt;;
}}
{{dcl end}}

类模板 {{tt|dangling}} 是围绕对象的简单包装器，指示被包装对象可以''悬垂''，即它指代生存期可以已经结束的另一对象。

若范围为右值范围，则别名模版 {{tt|safe_iterator_t}} 返回包装于 {{tt|dangling}} 中的 {{tt|R}} 类型迭代器（以非左值引用类型的 {{tt|R}} 指示）。

接受左值范围并返回指向其中的迭代器范围算法使用它们。

===成员函数===
{{member|{{small|std::experimental::ranges::dangling::}}dangling|2=
{{dcl begin}}
{{dcl|num=1|1=
dangling() requires DefaultConstructible&lt;T&gt;();
}}
{{dcl|num=2|1=
dangling(T t);
}}
{{dcl end}}
@1@ 默认构造函数。值初始化被包装对象。
@2@ 以 {{tt|t}} 初始化被包装对象。注意此构造函数定义从 {{tt|T}} 到 {{tt|dangling&lt;T&gt;}} 的隐式转换。
}}

{{member|{{small|std::experimental::ranges::dangling::}}get_unsafe|2=
{{ddcl|
T get_unsafe() const;
}}
返回被包装对象的副本。
}}

{{langlinks|en}}
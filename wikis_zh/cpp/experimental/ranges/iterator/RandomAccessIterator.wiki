{{cpp/experimental/ranges/title|RandomAccessIterator}}
{{cpp/experimental/ranges/iterator/navbar}}
{{ddcl|header=experimental/ranges/iterator|since=ranges|1=
template&lt; class I &gt;
concept bool RandomAccessIterator =
    BidirectionalIterator&lt;I&gt; &amp;&amp;
    DerivedFrom&lt;ranges::iterator_category_t&lt;I&gt;, ranges::random_access_iterator_tag&gt; &amp;&amp;
    StrictTotallyOrdered&lt;I&gt; &amp;&amp;
    SizedSentinel&lt;I, I&gt; &amp;&amp;
    requires(I i, const I j, const ranges::difference_type_t&lt;I&gt; n) {
        { i += n } -&gt; Same&lt;I&gt;&amp;;
        { j + n }  -&gt; Same&lt;I&gt;&amp;&amp;;
        { n + j }  -&gt; Same&lt;I&gt;&amp;&amp;;
        { i -= n } -&gt; Same&lt;I&gt;&amp;;
        { j - n }  -&gt; Same&lt;I&gt;&amp;&amp;;
        j[n];
        requires Same&lt;decltype(j[n]), ranges::reference_t&lt;I&gt;&gt;;
    };
}}

概念 {{tt|RandomAccessIterator&amp;lt;I&amp;gt;}} 细化 {{rconcept|BidirectionalIterator}}，添加用 {{tt|1=+=}}、{{tt|1=-=}}、{{tt|+}} 和 {{tt|-}} 运算符的常数时间前进、用 {{tt|-}} 的常数时间距离计算，及带下标的数组记法支持。

令 {{tt|a}} 与 {{tt|b}} 为 {{tt|I}} 类型的合法迭代器，使得从 {{tt|a}} 可抵达 {{tt|b}}，并令 {{tt|n}} 为等于 {{c|b - a}} 的 {{c|ranges::difference_type_t&lt;I&gt;}} 类型值。{{tt|RandomAccessIterator&amp;lt;I&amp;gt;}} 仅若符合下列条件才得到满足：

* {{c|1=(a += n)}} 等于 {{c|b}}。
* {{c|1=std::addressof(a += n)}} 等于 {{c|std::addressof(a)}}。
* {{c|(a + n)}} 等于 {{c|1=(a += n)}}。
* {{c|(a + n)}} 等于 {{c|(n + a)}}。
* 对于任何二个正整数 {{tt|x}} 与 {{tt|y}}，若 {{c|a + (x + y)}} 合法，则 {{c|a + (x + y)}} 等于 {{c|(a + x) + y}}。
* {{c|a + 0}} 等于 {{c|a}}。
* 若 {{c|(a + (n - 1))}} 合法，则 {{c|--b}} 等于 {{c|(a + (n - 1))}}。
* {{c|1=(b += -n)}} 与 {{c|1=(b -= n)}} 都等于 {{c|a}}。
* {{c|1=std::addressof(b -= n)}} 等于 {{c|std::addressof(b)}}。
* {{c|(b - n)}} 等于 {{c|1=(b -= n)}}。
* 若 {{c|b}} 可解引用，则 {{c|a[n]}} 合法并等于 {{c|*b}}。
* {{c|1=bool(a &lt;= b)}} 为 {{c|true}}&lt;!-- https://github.com/ericniebler/stl2/issues/502 --&gt;。

{{cpp/experimental/ranges/equality preservation}}
{{cpp/experimental/ranges/note implicit expression variations}}

{{langlinks|en}}
{{cpp/experimental/ranges/title|ForwardIterator}}
{{cpp/experimental/ranges/iterator/navbar}}
{{ddcl|header=experimental/ranges/iterator|since=ranges|1=
template&lt; class I &gt;
concept bool ForwardIterator =
    InputIterator&lt;I&gt; &amp;&amp;
    DerivedFrom&lt;ranges::iterator_category_t&lt;I&gt;, ranges::forward_iterator_tag&gt; &amp;&amp;
    Incrementable&lt;I&gt; &amp;&amp;
    Sentinel&lt;I, I&gt;;
}}

概念 {{tt|ForwardIterator&amp;lt;I&amp;gt;}} 细化 {{rconcept|InputIterator}}，添加相等比较和多趟保证。

{{tt|{{==}}}} 对于向前迭代器的定义域是同一底层序列上的迭代器的定义域，但值初始化的同类型迭代器可以彼此比较，并应当比较相等。

在 {{range|i|s}} 一直代表范围时，从指向范围 {{tt|[i, s)}} 中的向前迭代器获得的指针和引用必须保持合法。

令 {{tt|a}} 与 {{tt|b}} 为两个 {{tt|I}} 类型的可解引用迭代器。{{tt|ForwardIterator&amp;lt;I&amp;gt;}} 仅若符合下列条件才得到满足：
* {{c|1= a == b }} 蕴含 {{c|1= ++a == ++b}}；且
* 表达式 {{c|([](X x){++x;}(a), *a)}} 等价于 {{c|*a}}，即自增 {{tt|a}} 的副本在解引用 {{tt|a}} 
这被称为''多趟保证''。

=== 注解 ===
向前迭代器不能“贮藏”：它不能返回到其自身内对象的引用，因为向前迭代器的析构会使这种引用失效。

{{langlinks|en}}
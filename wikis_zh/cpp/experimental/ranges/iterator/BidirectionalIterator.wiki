{{cpp/experimental/ranges/title|BidirectionalIterator}}
{{cpp/experimental/ranges/iterator/navbar}}
{{ddcl|header=experimental/ranges/iterator|since=ranges|1=
template&lt; class I &gt;
concept bool BidirectionalIterator =
    ForwardIterator&lt;I&gt; &amp;&amp;
    DerivedFrom&lt;ranges::iterator_category_t&lt;I&gt;, ranges::bidirectional_iterator_tag&gt; &amp;&amp;
    requires(I i) {
        { --i } -&gt; Same&lt;I&gt;&amp;;
        { i-- } -&gt; Same&lt;I&gt;&amp;&amp;;
    };
}}

概念 {{tt|BidirectionalIterator&amp;lt;I&amp;gt;}} 细化 {{rconcept|ForwardIterator}}，添加向后移动迭代器的能力。

称双向迭代器 {{tt|r}} ''可自减''，当且仅当存在某个 {{tt|s}} 使得 {{c|++s {{==}} r}}。所有可自减迭代器 {{tt|r}} 应当在表达式 {{c|--r}} 和 {{c|r--}} 的定义域中。

令 {{tt|a}} 与 {{tt|b}} 为 {{tt|I}} 类型的可自减对象。{{tt|BidirectionalIterator&amp;lt;I&amp;gt;}} 仅若符合下列条件才得到满足：
* 前自减生成指代操作数的左值：{{c|1=std::addressof(--a) == std::addressof(a)}}；
* 后自减生成操作数先前的值：若 {{c|1=bool(a == b)}}，则 {{c|1=bool(a-- == b)}}。
* 后自减和前自减在操作数上进行相同操作：若 {{c|1=bool(a == b)}}，则求值 {{tt|a--}} 与 {{tt|--b}} 两者后，{{c|1=bool(a == b)}} 仍然成立。
* 自增和自减互逆：
:* 若 {{tt|a}} 可自增且 {{c|1=bool(a == b)}}，则 {{c|1=bool(--(++a) == b)}}。
:* 若 {{c|1=bool(a == b)}}，则 {{c|1=bool(++(--a) == b)}}。

{{cpp/experimental/ranges/equality preservation}}

{{langlinks|en}}
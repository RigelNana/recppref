{{cpp/experimental/ranges/title|Invocable|RegularInvocable}}
{{cpp/experimental/ranges/concepts/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/concepts}}
{{dcl|since=ranges|1=
template&lt; class F, class... Args &gt;
concept bool Invocable =
    requires(F&amp;&amp; f, Args&amp;&amp;... args) {
        ranges::invoke(std::forward&lt;F&gt;(f), std::forward&lt;Args&gt;(args)...); 
            /* 不要求保持相等性 */
    };
}}
{{dcl|since=ranges|1=
template&lt; class F, class... Args &gt;
concept bool RegularInvocable = Invocable&lt;F, Args...&gt;;
}}
{{dcl end}}

{{tt|Invocable}} 概念指定能用函数 {{lc|ranges::invoke}} 以实参类型 {{tt|Args...}} 调用可调用类型 {{tt|F}}。

{{tt|RegularInvocable}} 概念对 {{tt|Invocable}} 概念添加 {{tt|invoke}} 表达式保持相等性且不修改函数对象或实参的要求。

{{cpp/experimental/ranges/equality preservation|skip-requires=yes}}

===注解===
{{tt|Invocable}} 与 {{tt|RegularInvocable}} 间的区别是纯语义上的。

随机数生成器可满足 {{tt|Invocable}}，但不能满足 {{tt|RegularInvocable}}（除了[https://xkcd.com/221/ 搞笑] [http://dilbert.com/strip/2001-10-25 的]）。

{{langlinks|en}}
{{cpp/experimental/ranges/title|Swappable|SwappableWith}}
{{cpp/experimental/ranges/concepts/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/concepts}}
{{dcl|num=1|since=ranges|1=
template&lt; class T &gt;
concept bool Swappable =
    requires(T&amp; a, T&amp; b) {
        ranges::swap(a, b);
    };
}}
{{dcl|num=2|since=ranges|1=
template&lt; class T, class U &gt;
concept bool SwappableWith =
    CommonReference&lt;
        const std::remove_reference_t&lt;T&gt;&amp;,
        const std::remove_reference_t&lt;U&gt;&amp;&gt; &amp;&amp;
    requires(T&amp;&amp; t, U&amp;&amp; u) {
        ranges::swap(std::forward&lt;T&gt;(t), std::forward&lt;T&gt;(t));
        ranges::swap(std::forward&lt;U&gt;(u), std::forward&lt;U&gt;(u));
        ranges::swap(std::forward&lt;T&gt;(t), std::forward&lt;U&gt;(u));
        ranges::swap(std::forward&lt;U&gt;(u), std::forward&lt;T&gt;(t));
    };
}}
{{dcl end}}
概念 {{tt|Swappable&lt;T&gt;}} 指定 {{tt|T}} 类型左值可交换。

概念 {{tt|SwappableWith&lt;T, U&gt;}} 指定属于 {{tt|T}} 和 {{tt|U}} 所编码的类型和值类别的表达式彼此可交换。{{tt|SwappableWith&lt;T, U&gt;}} 仅若调用 {{c|ranges::swap(t, u)}} 交换 {{tt|t}} 与 {{tt|u}} 的值，即给定等于 {{tt|t}} 的独立对象 {{tt|t2}} 和等于 {{tt|u}} 的独立对象 {{tt|u2}}，求值 {{c|ranges::swap(t, u)}} 或 {{c|ranges::swap(u, t)}} 后 {{tt|t2}} 等于 {{tt|u}} 且 {{tt|u2}} 等于 {{tt|t}}，才得到满足。

{{cpp/experimental/ranges/equality preservation}}

{{langlinks|en}}
{{cpp/experimental/ranges/title|Common}}
{{cpp/experimental/ranges/concepts/navbar}}
{{ddcl|header=experimental/ranges/concepts|since=ranges|1=
template&lt; class T, class U &gt;
concept bool Common =
    Same&lt;ranges::common_type_t&lt;T, U&gt;, ranges::common_type_t&lt;U, T&gt;&gt; &amp;&amp;
    ConvertibleTo&lt;T, ranges::common_type_t&lt;T, U&gt;&gt; &amp;&amp;
    ConvertibleTo&lt;U, ranges::common_type_t&lt;T, U&gt;&gt; &amp;&amp;
    CommonReference&lt;
        std::add_lvalue_reference_t&lt;const T&gt;,
        std::add_lvalue_reference_t&lt;const U&gt;&gt; &amp;&amp;
    CommonReference&lt;
        std::add_lvalue_reference_t&lt;ranges::common_type_t&lt;T, U&gt;&gt;,
        ranges::common_reference_t&lt;
            std::add_lvalue_reference_t&lt;const T&gt;,
            std::add_lvalue_reference_t&lt;const U&gt;&gt;&gt;;
}}
概念 {{tt|Common&lt;T, U&gt;}} 指定两个类型 {{tt|T}} 与 {{tt|U}} 共享能一同转换到 ''公共类型''（由 {{lc|ranges::common_type_t}} 计算）。

{{tt|Common&lt;T, U&gt;}} 仅若满足下列条件才得到满足。给定表达式 {{tt|t}} 和 {{tt|u}}，满足 {{c|decltype((t))}} 为 {{tt|T}} 而 {{c|decltype((u))}} 为 {{tt|U}}，
* 当且仅当 {{tt|t}} 是保持相等性的表达式时，{{c|ranges::common_type_t&lt;T, U&gt;(t)}} 等于 {{c|ranges::common_type_t&lt;T, U&gt;(t)}}；且
* 当且仅当 {{tt|u}} 是保持相等性的表达式时，{{c|ranges::common_type_t&lt;T, U&gt;(u)}} 等于 {{c|ranges::common_type_t&lt;T, U&gt;(u)}}。

换言之，到公共类型的转换必须不改变原表达式的相等性保持属性。

{{cpp/experimental/ranges/equality preservation|skip-requires=yes}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/ranges/type_traits/dsc common_type}}
{{dsc inc|cpp/experimental/ranges/type_traits/dsc common_reference}}
{{dsc inc|cpp/experimental/ranges/concepts/dsc CommonReference}}
{{dsc end}}

{{langlinks|en}}
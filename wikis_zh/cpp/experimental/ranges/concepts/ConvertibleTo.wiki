{{cpp/experimental/ranges/title|ConvertibleTo}}
{{cpp/experimental/ranges/concepts/navbar}}
{{ddcl|header=experimental/ranges/concepts|since=ranges|1=
template&lt; class From, class To &gt;
concept bool ConvertibleTo =
    std::is_convertible&lt;From, To&gt;::value &amp;&amp;
    requires(From (&amp;f)()) {
        static_cast&lt;To&gt;(f());
    };
}}

概念 {{c|ConvertibleTo&lt;From, To&gt;}} 指定拥有 {{tt|From}} 所指定的类型和值类别的表达式能隐式和显式转换为类型 {{tt|To}}，且二种转换形式等价。

具体而言，{{c|ConvertibleTo&lt;From, To&gt;}} 仅若满足以下条件才得到满足。给定虚设函数
{{c|To test(From (&amp;f)()) { return f(); } }} 和 {{c|From ()}} 类型函数 {{tt|F}}，使得表达式 {{c|F()}} 保持相等性（见后述），而
* 以下之一
** {{tt|To}} 既非对象类型亦非到对象引用类型，或
** {{c|static_cast&lt;To&gt;(f())}} 等于 {{tt|test(f)}}，且

* 下列之一为真：
** {{tt|From}} 不是到对象引用类型，或
** {{tt|From}} 为到非 const 限定的右值引用类型，且 {{c|f()}} 所引用对象的结果状态合法，但在任一上述表达式后未指定；或
** {{tt|f()}} 所指代的对象不为任一上述表达式所修改。

{{c|ConvertibleTo&lt;From, To&gt;}} 与 {{c|std::is_convertible&lt;From, To&gt;::value}} 间不必有任何蕴含关系。

{{cpp/experimental/ranges/equality_preservation}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_convertible}}
{{dsc end }}

{{langlinks|en}}
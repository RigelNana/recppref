{{cpp/experimental/ranges/title|less}}
{{cpp/experimental/ranges/utility/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/functional}}
{{dcl|since=ranges|1=
template&lt; class T = void &gt;
    requires StrictTotallyOrdered&lt;T&gt; {{!!}}
             Same&lt;T, void&gt; {{!!}}
             /* 两个 const T 左值上的 &lt; 调用比较指针的内建运算符 */
struct less;
}}
{{dcl|since=ranges|1=
template &lt;&gt;
struct less&lt;void&gt;;
}}
{{dcl end}}

进行比较的函数对象。主模板在 {{tt|T}} 类型左值上调用 {{c|operator&lt;}}。特化 {{tt|less&lt;void&gt;}} 从实参推导函数调用运算符的形参类型（但非返回类型）。

{{tt|less}} 的所有特化均为 {{rconcept|Semiregular}}。

=== 成员类型 ===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc | {{tt|is_transparent}} {{mark|仅为 {{tt|less&lt;void&gt;}} 特化的成员}}| /* 未指定 */}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem fun | operator() | nolink=true |检查第一参数是否''小于''第二个}}
{{dsc end}}

{{member|1={{small|std::experimental::ranges::less::}}operator()|2=
{{dcl begin}}
{{dcl|num=1|notes={{mark|仅为主 {{tt|less&lt;T&gt;}} 模板的成员}}|1=
constexpr bool operator()(const T&amp; x, const T&amp; y) const;
}}
{{dcl|num=2|notes={{mark|仅为 {{tt|less&lt;void&gt;}} 特化的成员}}|1=
template&lt; class T, class U &gt;
    requires StrictTotallyOrderedWith&lt;T, U&gt; {{!!}}
             /* std::declval&lt;T&gt;() &lt; std::declval&lt;U&gt;()
                解析成比较指针的内建运算符 */
constexpr bool operator()(T&amp;&amp; t, U&amp;&amp; u) const;
}}
{{dcl end}}

@1@ 比较 {{tt|x}} 与 {{tt|y}}。等价于 {{c|return ranges::less&lt;&gt;{}(x, y)}}；
@2@ 比较 {{tt|t}} 与 {{tt|u}}，等价于 {{c|return std::forward&lt;T&gt;(t) &lt; std::forward&lt;U&gt;(u);}}，但该表达式解析成对比较指针的内建 {{c|operator&lt;}} 的调用。

当调用 {{v|1}} 或 {{v|2}} 会调用比较 {{tt|P}} 类型指针的内建运算符时，替而按下列方式确定结果：
* 若在所有 {{tt|P}} 类型指针值上的实现定义的严格全序中，第一参数的（可能转换的）值先于第二参数的（可能转换的）值，则返回 {{c|true}}。此严格全序与内建运算符 {{tt|&lt;}}、{{tt|&gt;}}、{{tt|&lt;{{=}}}} 及 {{tt|&gt;{{=}}}} 所蕴含的偏序一致。
* 否则返回 {{c|false}}。

除非从 {{tt|T}} 和 {{tt|U}} 到 {{tt|P}} 的转换序列均保持相等性（见后述），否则行为未定义。

{{cpp/experimental/ranges/equality preservation|skip-requires=yes}}
}}

===注解===
不同于 {{lc|std::less}}，{{tt|ranges::less}} 要求六个比较运算符 {{tt|&lt;}}、{{tt|1=&lt;=}}、{{tt|&gt;}}、{{tt|1=&gt;=}}、{{tt|1===}} 和 {{tt|1=!=}} 均合法（通过 {{rconcept|StrictTotallyOrdered}} 与 {{rconcept|StrictTotallyOrderedWith}} 制约）。

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc less}}
{{dsc end}}

{{langlinks|en}}
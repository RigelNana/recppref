{{cpp/experimental/ranges/title|equal_to}}
{{cpp/experimental/ranges/utility/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/functional}}
{{dcl|since=ranges|1=
template&lt; class T = void &gt;
    requires EqualityComparable&lt;T&gt; {{!!}}
             Same&lt;T, void&gt; {{!!}}
             /* 两个 const T 左值上的 == 调用比较指针的内建运算符 */
struct equal_to;
}}
{{dcl|since=ranges|1=
template&lt;&gt;
struct equal_to&lt;void&gt;;
}}
{{dcl end}}

进行比较的函数对象。主模板在 {{tt|T}} 类型的 const 左值上调用 {{c|operator {{==}}}}。特化 {{tt|equal_to&lt;void&gt;}} 从实参推导函数调用运算符的形参（但非返回类型）。

{{tt|equal_to}} 的所有特化均为 {{rconcept|Semiregular}}。

=== 成员类型 ===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc | {{tt|is_transparent}} {{mark|仅为 {{tt|equal_to&lt;void&gt;}} 特化的成员}}| /* 未指定 */}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem fun | operator() | nolink=true |检查实参是否''相等''}}
{{dsc end}}

{{member|1={{small|std::experimental::ranges::equal_to::}}operator()|2=
{{dcl begin}}
{{dcl|num=1|notes={{mark|仅为主 {{tt|equal_to&lt;T&gt;}} 模板的成员}}|1=
constexpr bool operator()(const T&amp; x, const T&amp; y) const;
}}
{{dcl|num=2|notes={{mark|仅为 {{tt|equal_to&lt;void&gt;}} 特化的成员}}|1=
template&lt; class T, class U &gt;
    requires EqualityComparableWith&lt;T, U&gt; {{!!}}
             /* std::declval&lt;T&gt;() == std::declval&lt;U&gt;()
                解析成比较指针的内建运算符 */
constexpr bool operator()(T&amp;&amp; t, U&amp;&amp; u) const;
}}
{{dcl end}}

@1@ 比较 {{tt|x}} 与 {{tt|y}}。等价于 {{c|return ranges::equal_to&lt;&gt;{}(x, y)}}；
@2@ 比较 {{tt|t}} 与 {{tt|u}}，等价于 {{c|return std::forward&lt;T&gt;(t) {{==}} std::forward&lt;U&gt;(u);}}，除非表达式解析成调用比较指针的内建 {{c|operator {{==}}}}。

当调用 {{v|1}} 或 {{v|2}} 会调用比较 {{tt|P}} 类型指针的内建运算符时，替而以下列方式确定结果：
* 若（可能被转换的）第一实参和（可能被转换的）第二实参值，在实现定义的、所有 {{tt|P}} 类型指针值上的严格全序中，一者先于另一者，则返回 {{c|false}}。此严格全序与内建运算符 {{tt|&lt;}}、{{tt|&gt;}}、{{tt|&lt;{{=}}}} 和 {{tt|&gt;{{=}}}} 所蕴含的偏序一致。
* 否则（无一先于另一者）返回 {{c|true}}。
除非从 {{tt|T}} 和 {{tt|U}} 到 {{tt|P}} 的转换序列均保持相等性（见后述），否则行为未定义。

{{cpp/experimental/ranges/equality preservation|skip-requires=yes}}
}}

===注解===
不同于 {{lc|std::equal_to}}，{{tt|ranges::equal_to}} 要求 {{tt|1===}} 与 {{tt|1=!=}} 均合法（通过 {{rconcept|EqualityComparable}} 和 {{rconcept|EqualityComparableWith}} 制约）。

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc equal_to}}
{{dsc end}}

{{langlinks|en}}
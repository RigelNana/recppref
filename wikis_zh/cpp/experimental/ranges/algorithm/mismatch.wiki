{{cpp/experimental/ranges/title|mismatch}}
{{cpp/experimental/ranges/algorithm/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/algorithm}}
{{dcl|since=ranges|num=1|1=
template&lt; InputIterator I1, Sentinel&lt;I1&gt; S1, InputIterator I2, Sentinel&lt;I2&gt; S2,
          class Proj1 = ranges::identity, class Proj2 = ranges::identity,
          class Pred = ranges::equal_to&lt;&gt; &gt;
    requires IndirectRelation&lt;Pred, projected&lt;I1, Proj1&gt;, projected&lt;I2, Proj2&gt;&gt;
auto mismatch( I1 first1, S1 last1, I2 first2, S2 last2, Pred pred = Pred{},
               Proj1 proj1 = Proj1{}, Proj2 proj2 = Proj2{} )
    -&gt; ranges::tagged_pair&lt;tag::in1(I1), tag::in2(I2)&gt;;
}}
{{dcl|since=ranges|num=2|1=
template&lt; InputRange R1, InputRange R2,
          class Proj1 = ranges::identity, class Proj2 = ranges::identity,
          class Pred = ranges::equal_to&lt;&gt; &gt;
    requires IndirectRelation&lt;Pred, projected&lt;ranges::iterator_t&lt;R1&gt;, Proj1&gt;,
                              projected&lt;ranges::iterator_t&lt;R2&gt;, Proj2&gt;&gt;
auto mismatch( R1&amp;&amp; r1, R2&amp;&amp; r2, Pred pred = Pred{}, 
               Proj1 proj1 = Proj1{}, Proj2 proj2 = Proj2{} )
    -&gt; ranges::tagged_pair&lt;tag::in1(ranges::safe_iterator_t&lt;R1&gt;),
                           tag::in2(ranges::safe_iterator_t&lt;R2&gt;)&gt;;
}}
{{dcl|since=ranges|num=3|notes={{mark deprecated}}|1=
template&lt; InputIterator I1, Sentinel&lt;I1&gt; S1, class I2,
          class Pred  = ranges::equal_to&lt;&gt;,
          class Proj1 = ranges::identity, class Proj2 = ranges::identity &gt;
    requires InputIterator&lt;std::decay_t&lt;I2&gt;&gt; &amp;&amp; !Range&lt;I2&gt; &amp;&amp;
             IndirectRelation&lt;Pred, projected&lt;I1, Proj1&gt;,
                                    projected&lt;std::decay_t&lt;I2&gt;, Proj2&gt;&gt;
auto mismatch( I1 first1, S1 last1, I2&amp;&amp; first2_, Pred pred = Pred{},
               Proj1 proj1 = Proj1{}, Proj2 proj2 = Proj2{} )
    -&gt; ranges::tagged_pair&lt;tag::in1(I1), tag::in2(std::decay_t&lt;I2&gt;)&gt;;
}}
{{dcl|since=ranges|num=4|notes={{mark deprecated}}|1=
template&lt; InputRange R1, class I2, class Pred = ranges::equal_to&lt;&gt;,
          class Proj1 = ranges::identity, class Proj2 = ranges::identity &gt;
    requires InputIterator&lt;std::decay_t&lt;I2&gt;&gt; &amp;&amp; !Range&lt;I2&gt; &amp;&amp;
             IndirectRelation&lt;Pred, projected&lt;ranges::iterator_t&lt;R1&gt;, Proj1&gt;,
                                    projected&lt;std::decay_t&lt;I2&gt;, Proj2&gt;&gt;
auto mismatch( R1&amp;&amp; r1, I2&amp;&amp; first2_, Pred pred = Pred{},
               Proj1 proj1 = Proj1{}, Proj2 proj2 = Proj2{} )
    -&gt; ranges::tagged_pair&lt;tag::in1(ranges::safe_iterator_t&lt;Rng1&gt;),
                           tag::in2(std::decay_t&lt;I2&gt;)&gt;;
}}
{{dcl end}}

@1@ 返回两个范围中第一对不匹配的元素：其一由 {{range|first1|last1}} 定义而另一个由 {{range|first2|last2}} 定义。
@2@ 与 {{v|1}} 相同，但用 {{c|r1}} 为第一源范围并用 {{c|r2}} 为第二源范围，如同以 {{c|ranges::begin(r1)}} 为 {{c|first1}}，以 {{c|ranges::end(r1)}} 为 {{c|last1}}，以 {{c|ranges::begin(r2)}} 为 {{c|first2}}，并以 {{c|ranges::end(r2)}} 为 {{c|last2}}。
@3@ 与 {{v|1}} 相同，但表现如同 {{c|first2}} 为 {{c|1=std::decay_t&lt;I2&gt; first2 = std::forward&lt;I2&gt;(first2_);}} 且 {{c|last2}} 为 {{c|ranges::unreachable{}}}。底层算法从不对 {{c|first2}} 自增多于 {{c|last1 - first1}} 次。
@4@ 与 {{v|3}} 相同，但用 {{c|r1}} 为第一源范围，如同以 {{c|ranges::begin(r1)}} 为 {{c|first1}} 并以 {{c|ranges::end(r1)}} 为 {{c|last1}}。

用 {{c|pred}} 对两个范围投射后的元素进行比较，如同调用 {{c|ranges::invoke(pred, ranges::invoke(proj1, *i), ranges::invoke(proj2, *j))}}。

{{cpp/experimental/ranges/algorithm/tparams}}

===参数===
{{par begin}}
{{par|first1, last1|第一元素范围}}
{{par|r1|第一元素范围}}
{{par|first2, last2|第二元素范围}}
{{par|r2|第二元素范围}}
{{par|first2_|第二元素范围的开头}}
{{par|pred|运用于投射后范围的谓词}}
{{par|proj1|运用于第一范围中元素的投射}}
{{par|proj2|运用于第二范围中元素的投射}}
{{par end}}

===返回值===
{{tt|tagged_pair}} 对象，带有指向首对不相等元素（第一范围中的迭代器具有标签 {{c|in1}} 而第二范围中的迭代器具有标签 {{c|in2}}）。

如果比较抵达 {{c|last1}} 或 {{c|last2}} 时未找到不匹配，无论哪个先发生，则对偶持有该为迭代器和另一范围的对应迭代器。

===复杂度===
最多 {{c|last1}} - {{c|first1}} 次运用谓词和各投射。

===可能的实现===
{{eq fun
|1=
template&lt;InputIterator I1, Sentinel&lt;I1&gt; S1, InputIterator I2, Sentinel&lt;I2&gt; S2,
         class Proj1 = ranges::identity, class Proj2 = ranges::identity,
         class Pred = ranges::equal_to&lt;&gt;&gt;
    requires IndirectRelation&lt;Pred, projected&lt;I1, Proj1&gt;, projected&lt;I2, Proj2&gt;&gt;
auto mismatch(I1 first1, S1 last1, I2 first2, S2 last2, Pred pred = Pred{},
              Proj1 proj1 = Proj1{}, Proj2 proj2 = Proj2{})
    -&gt; ranges::tagged_pair&lt;tag::in1(I1), tag::in2(I2)&gt;
{
    while (first1 != last1 &amp;&amp; first2 != last2 &amp;&amp;
           ranges::invoke(pred, ranges::invoke(proj1, *first1),
                                ranges::invoke(proj2, *first2)))
    {
        ++first1;
        ++first2;
    }
    return {first1, first2};
}
}}

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc mismatch}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc equal}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc find}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc lexicographical_compare}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc search}}
{{dsc end}}
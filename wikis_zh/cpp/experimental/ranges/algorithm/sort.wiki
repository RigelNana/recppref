{{cpp/experimental/ranges/title|sort}}
{{cpp/experimental/ranges/algorithm/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/algorithm}}
{{dcl|since=ranges|num=1|1= 
template&lt; RandomAccessIterator I, Sentinel&lt;I&gt; S,
          class Comp = ranges::less&lt;&gt;, class Proj = ranges::identity &gt;
    requires Sortable&lt;I, Comp, Proj&gt;
I sort( I first, S last, Comp comp = Comp{}, Proj proj = Proj{} );
}}
{{dcl|since=ranges|num=2|1= 
template&lt; RandomAccessRange R,
          class Comp = ranges::less&lt;&gt;, class Proj = ranges::identity &gt;
    requires Sortable&lt;ranges::iterator_t&lt;R&gt;, Comp, Proj&gt;
ranges::safe_iterator_t&lt;R&gt; sort( R&amp;&amp; r, Comp comp = Comp{}, Proj proj = Proj{} );
}}
{{dcl end}}

@1@ 以升序排序范围 {{range|first|last}} 中的元素。不保证保持相等元素的顺序。在应用投射 {{c|proj}} 后用 {{c|comp}} 比较元素。
@2@ 排序范围 {{c|r}} 中的元素，如同用 {{c|return ranges::sort(ranges::begin(r), ranges::end(r), comp, proj);}}。

{{cpp/experimental/ranges/algorithm/tparams}}

===参数===
{{par begin}}
{{par | first, last |要排序的元素范围}}
{{par | rng |要排序的元素范围}}
{{par | comp |要使用的比较器}}
{{par | proj |要应用到范围中元素的投射}}
{{par end}}

===返回值===
指向范围尾后一位置的迭代器（即它对于重载 {{v|1}} 等于 {{c|last}}，对于重载 {{tt|ranges::end(rng)}} 等于 {{v|2}}）。

===复杂度===
{{math|O(N&amp;middot;log(N))}} 次比较，其中 N 等于范围中的元素数。

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc sort}}
{{dsc end}}

{{langlinks|en}}
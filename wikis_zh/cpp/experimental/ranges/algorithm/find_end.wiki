{{cpp/experimental/ranges/title|find_end}}
{{cpp/experimental/ranges/algorithm/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/algorithm}}
{{dcl|since=ranges|num=1|1=
template&lt; ForwardIterator I1, Sentinel&lt;I1&gt; S1, ForwardIterator I2, Sentinel&lt;I2&gt; S2,
          class Proj = ranges::identity,
          IndirectRelation&lt;I2, projected&lt;I1, Proj&gt;&gt; Pred = ranges::equal_to&lt;&gt; &gt;
I1 find_end( I1 first1, S1 last1, I2 first2, S2 last2,
             Pred pred = Pred{}, Proj proj = Proj{} );
}}
{{dcl|since=ranges|num=2|1=
template&lt; ForwardRange R1, ForwardRange R2, class Proj = ranges::identity,
          IndirectRelation&lt;ranges::iterator_t&lt;R2&gt;,
                           projected&lt;ranges::iterator_t&lt;R1&gt;, Proj&gt;&gt; Pred = ranges::equal_to&lt;&gt; &gt;
ranges::safe_iterator_t&lt;R1&gt; find_end( Rng1&amp;&amp; rng1, Rng2&amp;&amp; rng2, 
                                      Pred pred = Pred{}, Proj proj = Proj{} );
}}
{{dcl end}}

@1@ 搜索范围 {{range|first1|last1}}（以 {{c|proj}} 投射后）最后一次出现的序列 {{range|first2|last2}}。

@2@ 与 {{v|1}} 相同，但用 {{c|r1}} 为第一源范围并用 {{c|r2}} 为第二源范围，如同以 {{c|ranges::begin(r1)}} 为 {{c|first1}}，以 {{c|ranges::end(r1)}} 为 {{c|last1}}，以 {{c|ranges::begin(r2)}} 为 {{c|first2}}，并以 {{c|ranges::end(r2)}} 为 {{c|last2}}。

{{cpp/experimental/ranges/algorithm/tparams}}

===参数===
{{par begin}}
{{par|first1, last1|要检验的元素范围}}
{{par|r1|要检验的元素范围}}
{{par|first2, last2|要搜索的元素范围}}
{{par|r2|要搜索的元素范围}}
{{par|pred|用于比较元素的谓词}}
{{par|proj|运用于第一范围中元素的投射}}
{{par end}}

===返回值===
指向范围 {{range|first1|last1}}（经过 {{c|proj}} 投射后）最后出现的序列 {{range|first2|last2}} 的开头的迭代器。

如果 {{range|first2|last2}} 为空或如果未找到这种序列，则返回与 {{c|last1}} 比较相等的迭代器。

===复杂度===
最多 {{tt|S * (N - S + 1)}} 次运用谓词和投射，其中 {{c|S {{=}} last2 - first2}} 且 {{c|N {{=}} last1 - first1}}。

===注解===
仅对范围 {{range|first1|last1}} 运用投射。

===可能的实现===
{{eq fun
|1=
template&lt;ForwardIterator I1, Sentinel&lt;I1&gt; S1, ForwardIterator I2, Sentinel&lt;I2&gt; S2,
         class Proj = ranges::identity,
         IndirectRelation&lt;I2, projected&lt;I1, Proj&gt;&gt; Pred = ranges::equal_to&lt;&gt;&gt;
I1 find_end(I1 first1, S1 last1, I2 first2, S2 last2,
            Pred pred = Pred{}, Proj proj = Proj{})
{
    I1 result = ranges::next(first1, last1);
    if (first2 == last2)
        return result;
    while (true)
    {
        I1 new_result = ranges::search(first1, last1, first2, last2, pred, proj);
        if (new_result == last1)
            break;
        else
        {
            result = new_result;
            first1 = result;
            ++first1;
        }
    }
    return result;
}
}}

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc find_end}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc search}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc includes}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc adjacent_find}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc find}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc find_first_of}}
{{dsc inc|cpp/experimental/ranges/algorithm/dsc search_n}}
{{dsc end}}
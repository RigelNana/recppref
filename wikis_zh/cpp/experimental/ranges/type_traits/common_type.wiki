{{cpp/experimental/ranges/title|common_type}}
{{cpp/experimental/ranges/utility/navbar}}
{{dcl begin}}
{{dcl header|experimental/ranges/type_traits}}
{{dcl|since=ranges|1=
template&lt; class... T &gt;
struct common_type;
}}
{{dcl end}}

确定所有类型 {{tt|T...}} 中的共用类型，即所有 {{tt|T...}} 都能隐式转换到的类型。若这种类型存在（按照后述规则确定），则成员 {{tt|type}} 指名该类型。否则无成员 {{tt|type}}。若 {{tt|T...}} 中的任何类型是异于（可有 cv 限定的）{{c|void}} 的不完整类型，则行为未定义。

* 若 {{c|sizeof...(T)}} 为零，则无成员 {{tt|type}}。
* 若 {{c|sizeof...(T)}} 为一（即 {{tt|T...}} 仅含一个类型 {{tt|T0}}），则成员 {{tt|type}} 指名与 {{c|std::decay_t&lt;T0&gt;}} 相同的类型。
* 若 {{c|sizeof...(T)}} 为二（即 {{tt|T...}} 恰好含两个类型 {{tt|T1}} 和 {{tt|T2}}），则
:* 若应用 {{lc|std::decay}} 到 {{tt|T1}} 和 {{tt|T2}} 的至少一个产生不同类型，则成员 {{tt|type}} 指名与 {{c|ranges::common_type_t&lt;std::decay_t&lt;T1&gt;, std::decay_t&lt;T2&gt;&gt;}} 相同的类型，若它存在；若不存在，则无成员 {{tt|type}}。
:* 否则，（而且除非有对于 {{c|ranges::common_type&lt;T1, T2&gt;}} 的用户特化），若 {{c|std::common_type_t&lt;T1, T2&gt;}} 为良式，则成员 {{tt|type}} 指代该类型；
:* 否则，成员 {{tt|type}} 指代类型 {{c|std::decay_t&lt;decltype(false ? std::declval&lt;const T1&amp;&gt;() : std::declval&lt;const T2&amp;&gt;())&gt;}}，若该条件表达式为良式；若该表达式非良式，则无成员 {{tt|type}}。
* 若 {{c|sizeof...(T)}} 大于二（即 {{tt|T...}} 由类型 {{tt|T1, T2, R...}} 组成），则若 {{c|ranges::common_type_t&lt;T1, T2&gt;}} 存在，则 {{tt|type}} 代表 {{c|ranges::common_type_t&lt;ranges::common_type_t&lt;T1, T2&gt;, R...&gt;}}，若这种类型存在。所有其他情况下，无成员 {{tt|type}}。

===成员类型===
{{dsc begin}}
{{dsc hitem |名称|定义}}
{{dsc | {{tt|type}} |所有 {{tt|T...}} 的公共类型}}
{{dsc end}}

===辅助类型===
{{dcl begin}}
{{dcl|1=
template&lt; class... T &gt;
using common_type_t = typename common_type&lt;T...&gt;::type;
}}
{{dcl end}}

===特化===
用户可以对类型 {{tt|T1}} 和 {{tt|T2}} 特化 {{tt|common_type}}，若
* {{tt|T1}} 与 {{tt|T2}} 的至少一个依赖于用户定义类型，且
* {{lc|std::decay}} 对于 {{tt|T1}} 和 {{tt|T2}} 都是恒等变换。

若这种特化拥有名为 {{tt|type}} 的成员，则它必须为指名无 cv 限定的非引用类型的公开且无歧义的成员类型，而 {{tt|T1}} 与 {{tt|T2}} 都可显式转换到它。另外，{{c|ranges::common_type_t&lt;T1, T2&gt;}} 与 {{c|ranges::common_type_t&lt;T2, T1&gt;}} 必须代表同一类型。

以违背这些规则的方式添加 {{tt|common_type}} 特化的程序拥有未定义行为。

===注解===
对于不受提升影响的算术类型，公共类型可视为（可为混合模式的）算术表达式，如 {{c|T0() + T1() + ... + Tn()}} 的类型。

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc common_type}}
{{dsc inc|cpp/experimental/ranges/type_traits/dsc common_reference}}
{{dsc end}}

{{langlinks|en}}
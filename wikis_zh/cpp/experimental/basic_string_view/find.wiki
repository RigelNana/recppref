{{cpp/experimental/basic_string_view/title | find }}
{{cpp/experimental/basic_string_view/navbar}}
{{dcl begin}}
{{dcl | num=1 | since=libfund_ts |
constexpr size_type find(basic_string_view v, size_type pos {{=}} 0) const noexcept;
}}
{{dcl | num=2 | since=libfund_ts |
constexpr size_type find(CharT c, size_type pos {{=}} 0) const noexcept;
}}
{{dcl | num=3 | since=libfund_ts |
constexpr size_type find(const CharT* s, size_type pos, size_type count) const;
}}
{{dcl | num=4 | since=libfund_ts |
constexpr size_type find(const CharT* s, size_type pos {{=}} 0) const;
}}
{{dcl end}}

寻找首个等于给定字符序列的子字符串。

@1@ 寻找此视图中首次出现的 {{tt|v}}，从位置 {{tt|pos}} 开始。
@2@ 等价于 {{c|find(basic_string_view(&amp;c, 1), pos)}}。
@3@ 等价于 {{c|find(basic_string_view(s, count), pos)}}。
@4@ 等价于 {{c|find(basic_string_view(s), pos)}}。

===参数===
{{par begin}}
{{par | v | 要搜索的视图}}
{{par | pos | 从之开始搜索的位置}}
{{par | count | 要所述的子字符串的长度}}
{{par | s | 指向要所述字符串的指针}}
{{par | ch | 要搜索的字符}}
{{par end}} 


===返回值===
所找到的子字符串的首个字符的位置，或者当未找到这种子字符串时为 {{lc|npos}}。

===复杂度===
最差为 O({{tt|size()}} * {{tt|v.size()}})。

===参阅===
{{dsc begin}}
{{dsc inc | cpp/experimental/basic_string_view/dsc rfind}}
{{dsc inc | cpp/experimental/basic_string_view/dsc find_first_of}}
{{dsc inc | cpp/experimental/basic_string_view/dsc find_last_of}}
{{dsc inc | cpp/experimental/basic_string_view/dsc find_first_not_of}}
{{dsc inc | cpp/experimental/basic_string_view/dsc find_last_not_of}}
{{dsc end}}
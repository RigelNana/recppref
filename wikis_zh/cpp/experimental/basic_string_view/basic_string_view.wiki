{{cpp/experimental/basic_string_view/title|basic_string_view}}
{{cpp/experimental/basic_string_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=libfund_ts| 
constexpr basic_string_view() noexcept;
}}
{{dcl|num=2|since=libfund_ts| 
constexpr basic_string_view( const basic_string_view&amp; other ) noexcept {{=}} default;
}}
{{dcl|num=3|since=libfund_ts|
template&lt;class Allocator&gt;
basic_string_view( const std::basic_string&lt;CharT, Traits, Allocator&gt;&amp; str ) noexcept;
}}
{{dcl|num=4|since=libfund_ts|
constexpr basic_string_view( const CharT* s, size_type count );
}}
{{dcl|num=5|since=libfund_ts|
constexpr basic_string_view( const CharT* s );
}}
{{dcl end}}

@1@ 默认构造函数。构造空 {{tt|basic_string_view}}。
@2@ 复制构造函数。构造与 {{c|other}} 内容相同的视图。
@3@ 构造以 {{c|str.data()}} 所指向的元素开始的数组的前 {{c|str.size()}} 个字符的视图。
@4@ 构造以 {{c|s}} 指向的元素开始的数组的前 {{c|count}} 个字符的视图。{{c|s}} 可以包含空字符。若 {{range|s|s + count}} 不是有效范围则其行为未定义（即便该构造函数并不访问范围中的任何元素也是如此）。
@5@ 构造由 {{c|s}} 指向的空终止字符串的视图，不包括终止的空字符。视图的长度如同以 {{c|Traits::length(s)}} 确定。若 {{range|s|s + Traits::length(s)}} 不是有效范围则其行为未定义（即便该构造函数并不访问范围中的任何元素也是如此）。

===参数===
{{par begin}}
{{par|other|用以初始化视图的另一个视图}}
{{par|str|用以初始化视图的 C++ 字符串对象}}
{{par|s|指向字符数组或 C 字符串的指针，用以初始化视图}}
{{par|count|视图中要包括的字符数量}}
{{par end}} 

===异常===
@4,5@ 不抛出。

===复杂度===
@1-4@ 常数。
@5@ 与 {{c|s}} 的长度呈线性。

===示例===
{{example
|code=
#include &lt;experimental/string_view&gt;
#include &lt;iostream&gt;

int main()
{
    std::string cppstr = "Foo";
    char array[3] = {'B', 'a', 'r'};
        
    std::experimental::string_view cppstr_v(cppstr);
    std::experimental::string_view array_v(array, sizeof array);
    
    std::experimental::wstring_view wcstr_v = L"xyzzy";
    
    std::cout &lt;&lt; cppstr_v &lt;&lt; '\n'
              &lt;&lt; array_v &lt;&lt; '\n'
              &lt;&lt; wcstr_v.size() &lt;&lt; '\n';
}
|output=
Foo
Bar
5
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/basic_string_view/dsc operator{{=}}}}
{{dsc end}}
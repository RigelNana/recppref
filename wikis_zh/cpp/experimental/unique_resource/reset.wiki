{{cpp/experimental/unique_resource/title|reset}}
{{cpp/experimental/unique_resource/navbar}}

{{dcl begin}}
{{dcl|num=1|since=libfund_ts_3|
void reset() noexcept;
}}
{{dcl|num=2|since=libfund_ts_3|
template&lt; class RR &gt;
void reset( RR&amp;&amp; r );
}}
{{dcl end}}

@1@ 若 {{tt|unique_resource}} 占有资源，则通过以底层资源句柄调用删除器来释放它。调用后 {{tt|unique_resource}} 不占有资源。
@2@ 通过调用 {{v|1}} 然后若 {{c|std::is_nothrow_assignable_v&lt;RS, RR&gt;}} 为 {{c|true}} 则以 {{c|std::forward&lt;RR&gt;(r)}}，否则以 {{c|std::as_const(r)}} 赋值存储的资源句柄来替换资源，其中 {{tt|RS}} 是存储的资源句柄的类型。调用后 {{tt|unique_resource}} 占有资源。
@@ 若存储的资源句柄的复制赋值抛出了异常，则调用 {{c|del_(r)}}，其中 {{tt|del}} 是删除器对象。
@@ {{cpp/enable_if|选择的赋值存储的资源句柄的赋值表达式为良构}}。
@@ 若 {{c|del_(r)}} 非良构，则程序非良构。
@@ 若 {{c|del_(r)}} 导致未定义行为或抛出异常，则行为未定义。

===参数===
{{par begin}}
{{par | r | 要管理的新资源的资源句柄}}
{{par end}}

===返回值===
（无）

===异常===
@2@ 任何赋值存储的资源句柄时抛出的异常。

===注解===
该机制确保无资源泄漏。

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/unique_ptr/dsc reset}}
{{dsc end}}

{{langlinks|en|ja}}
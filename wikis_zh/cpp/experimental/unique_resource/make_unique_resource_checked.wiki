{{cpp/experimental/title|make_unique_resource_checked}}
{{cpp/experimental/unique_resource/navbar}}

{{ddcl|header=experimental/scope|since=libfund_ts_3|1=
template&lt; class R, class D, class S = std::decay_t&lt;R&gt; &gt;
std::experimental::unique_resource&lt;std::decay_t&lt;R&gt;, std::decay_t&lt;D&gt;&gt;
    make_unique_resource_checked( R&amp;&amp; r, const S&amp; invalid, D&amp;&amp; d )
    noexcept(/* 见下文 */);
}}

创建 {{tt|unique_resource}}，以 {{c|std::forward&lt;R&gt;(r)}} 初始化其存储的资源柄，以 {{c|std::forward&lt;D&gt;(d)}} 初始化其删除器。当且仅当 {{c|1=bool(r == invalid)}} 为 {{c|false}} 时，创建的 {{tt|unique_resource}} 占有资源。

若 {{c|1=r == invalid}} 不能[[cpp/language/implicit conversion#按语境转换|按语境转换成 {{c|bool}}]]，则程序非良构，而若该转换导致未定义行为或抛异常，则行为未定义。

===参数===
{{par begin}}
{{par | r | 资源句柄}}
{{par | d | 用于释放资源的删除器}}
{{par | invalid | 指示资源句柄为无效值}}
{{par end}}

===返回值===
如上所述的 {{tt|unique_resource}}。

===异常===
存储的资源句柄与删除器的初始化中抛出的任何异常。

{{noexcept|
    std::is_nothrow_constructible_v&lt;std::decay_t&lt;R&gt;, R&gt; &amp;&amp;
    std::is_nothrow_constructible_v&lt;std::decay_t&lt;D&gt;, D&gt;
}}

===注解===
{{tt|make_unique_resource_checked}} 存在是为了避免以无效实参调用删除器函数。

复制或移动资源句柄 {{c|r}} 到返回值中，而创建的 {{tt|unique_resource}} 始终保有拥有对象类型的底层资源句柄。

===示例===
{{example
|code=
#include &lt;cstdio&gt;
#include &lt;experimental/scope&gt;

int main()
{
    // 避免在 fclose 失败时调用 fclose
    auto file = std::experimental::make_unique_resource_checked(
        std::fopen("potentially_nonexistent_file.txt", "r"),
        nullptr,
        [](std::FILE *fptr) { std::fclose(fptr); }
    );
    if (file.get())
        std::puts("文件存在。");
    else
        std::puts("文件不存在。");
}
|p=true
|output=文件不存在。
}}

===参阅===
{{dsc begin}}
{{dsc end}}

{{langlinks|en|ja}}
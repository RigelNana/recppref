{{cpp/experimental/unique_resource/title|unique_resource}}
{{cpp/experimental/unique_resource/navbar}}

{{dcl begin}}
{{dcl|num=1|since=libfund_ts_3|
unique_resource();
}}
{{dcl|num=2|since=libfund_ts_3|
template&lt; class RR, class DD &gt;
unique_resource( RR&amp;&amp; r, DD&amp;&amp; d ) noexcept(/*see below*/)
}}
{{dcl|num=3|since=libfund_ts_3|
unique_resource( unique_resource&amp;&amp; other );
}}
{{dcl end}}

为解释目的使用下列项目：
* {{tt|RS}} 为存储的资源句柄的类型。
* 表达式 {{c|res_}} 指代底层资源句柄。
* {{tt|del_}} 指代删除器对象。

@1@ 默认构造函数。值初始化存储的资源句柄与删除器。构造的 {{tt|unique_resource}} 不拥有资源。
@@ {{cpp/enable_if| {{c|std::is_default_constructible_v&lt;R&gt;}} 与 {{c|std::is_default_constructible_v&lt;D&gt;}} 均为 {{c|true}} }}。

@2@ 若 {{c|std::is_nothrow_constructible_v&lt;RS, RR&gt;}} 为 {{c|true}} 则以 {{c|std::forward&lt;RR&gt;(r)}}，否则以 {{c|r}} 初始化存储的资源句柄。若存储的资源句柄的初始化抛出了异常，则调用 {{c|d(r)}}。&lt;br&gt;然后，若 {{c|std::is_nothrow_constructible_v&lt;D, DD&gt;}} 为 {{c|true}} 则以 {{c|std::forward&lt;DD&gt;(d)}}，否则以 {{c|d}} 初始化删除器。若删除器的初始化抛出了异常，则调用 {{c|d(res_)}}。&lt;br&gt;构造的 {{tt|unique_resource}} 占有资源。
@@ {{cpp/enable_if| {{c|std::is_constructible_v&lt;RS, RR&gt;}}、{{c|std::is_constructible_v&lt;D , DD&gt;}}、{{c|std::is_nothrow_constructible_v&lt;RS, RR&gt; {{!!}} std::is_constructible_v&lt;RS, RR&amp;&gt;}} 和 {{c|std::is_nothrow_constructible_v&lt;D, DD&gt; {{!!}} std::is_constructible_v&lt;D, DD&amp;&gt;}} 都为 {{c|true}} }}。
@@ 若表达式 {{c|d(r)}}、{{c|d(res_)}} 与 {{c|del_(res_)}} 的任一者非良构，则程序非良构。
@@ 若表达式 {{c|d(r)}}、{{c|d(res_)}} 与 {{c|del_(res_)}} 的任一者导致未定义行为或抛出异常，则行为未定义。

@3@ 移动构造函数。用 {{c|other}} 的存储的资源句柄初始化存储的资源句柄，若 {{c|std::is_nothrow_move_constructible_v&lt;RS&gt;}} 为 {{c|true}} 则使用 {{tt|std::move}}。若底层资源句柄的初始化抛出了异常，则不修改 {{c|other}}。&lt;br&gt;然后，用 {{c|other}} 的删除器初始化删除器，若 {{c|std::is_nothrow_move_constructible_v&lt;D&gt;}} 为 {{c|true}} 则使用 {{tt|std::move}}。若删除器的初始化抛出了异常且 {{c|std::is_nothrow_move_constructible_v&lt;RS&gt;}} 为 {{c|true}} 而 {{c|other}} 占有资源，则以 {{c|res_}} 调用 {{c|other}} 的删除器释放资源，然后调用 {{c|other.release()}}。&lt;br&gt;构造后，当且仅当 {{c|other}} 在构造前占有资源，构造的 {{tt|unique_resource}} 占有资源，并设置 {{c|other}} 为不占有资源。

===参数===
{{par begin}}
{{par | r | 资源句柄}}
{{par | d | 用于释放资源的删除器}}
{{par | other | 要获得其所有权的 {{tt|unique_resource}} }}
{{par end}}

===异常===
任何初始化存储的资源柄或删除器时抛出的异常。
@2@ {{noexcept|(
    std::is_nothrow_constructible_v&lt;RS, RR&gt; {{!!}} std::is_nothrow_constructible_v&lt;RS, RR&amp;&gt;
) &amp;&amp;
(
    std::is_nothrow_constructible_v&lt;D, DD&gt; {{!!}} std::is_nothrow_constructible_v&lt;D, DD&amp;&gt;
)}}
@3@ {{noexcept|
    std::is_nothrow_move_constructible_v&lt;R1&gt; &amp;&amp; std::is_nothrow_move_constructible_v&lt;D&gt;
}}

===注解===
这些构造函数的机制确保无资源泄漏。

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/unique_ptr/dsc constructor}}
{{dsc end}}

{{langlinks|en|ja}}
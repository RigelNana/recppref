{{cpp/experimental/fs/title|file_size}}
{{cpp/experimental/fs/navbar}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|num=1|since=fs_ts|1=
std::uintmax_t file_size( const path&amp; p );
std::uintmax_t file_size( const path&amp; p, error_code&amp; ec );
}}
{{dcl end}}

返回常规文件 {{c|p}} 的大小，如同通过读取由 POSIX [https://pubs.opengroup.org/onlinepubs/9699919799/functions/stat.html stat] 获得的结构体中的 {{tt|st_size}} 成员所确定（跟随符号链接）。

尝试确定目录（以及任何其他并非常规文件或符号链接的文件）的大小被当做错误。

发生错误时无抛出重载返回 {{c|-1}}。

===参数===
{{par begin}}
{{par|p|要检查的路径}}
{{par|ec|用于无抛出重载中报告错误的输出形参}}
{{par end}}

===返回值===
文件的大小，以字节计。

===异常===
{{cpp/experimental/fs/error_handling|p}}

===示例===
{{example
|code=
#include &lt;experimental/filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    fs::path p = fs::current_path() / "example.bin";
    std::ofstream(p).put('a'); // 创建大小为 1 的文件
    std::cout &lt;&lt; "File size = " &lt;&lt; fs::file_size(p) &lt;&lt; '\n';
    fs::remove(p);
    
    try
    {
        fs::file_size("/dev"); // 尝试获取目录的大小
    }
    catch (fs::filesystem_error&amp; e)
    {
        std::cout &lt;&lt; e.what() &lt;&lt; '\n';
    }        
}
|p=true
|output=
File size = 1
filesystem error: cannot get file size: Is a directory [/dev]
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/dsc resize_file}}
{{dsc inc|cpp/experimental/fs/dsc space}}
{{dsc end}}
{{cpp/experimental/fs/title|hard_link_count}}
{{cpp/experimental/fs/navbar}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|num=1|since=fs_ts|1=
std::uintmax_t hard_link_count( const path&amp; p );
std::uintmax_t hard_link_count( const path&amp; p, error_code&amp; ec );
}}
{{dcl end}}

返回由路径 {{c|p}} 所标定的文件系统对象的硬链接数。

当发生错误时无抛出重载返回 {{c|static_cast&lt;uintmax_t&gt;(-1)}}。

===参数===
{{par begin}}
{{par|p|要检查的路径}}
{{par|ec|用于无抛出重载中报告错误的输出形参}}
{{par end}}

===返回值===
{{c|p}} 的硬链接数。

===异常===
{{cpp/experimental/fs/error_handling|p}}

===示例===
{{example|code=
#include &lt;experimental/filesystem&gt;
#include &lt;iostream&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    // 在 POSIX 风格的文件系统上，每个目录至少具有 2 个硬链接：
    // 其自身和特殊成员路径名 "."
    fs::path p = fs::current_path();
    std::cout &lt;&lt; "Number of hard links for current path is "
              &lt;&lt; fs::hard_link_count(p) &lt;&lt; '\n';

    // 每个 ".." 均为父目录的硬链接，因此任何目录的硬链接综述为 2 加上直接子目录数
    p = fs::current_path() / ".."; // 每个“点点”均为父目录的硬链接
    std::cout &lt;&lt; ".. 的硬链接数为 "
              &lt;&lt; fs::hard_link_count(p) &lt;&lt; '\n';
}
|output=
当前路径的硬链接数为 2
.. 的硬链接数为 3
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/dsc create_hard_link}}
{{dsc end}}
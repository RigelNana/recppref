{{cpp/experimental/fs/title|resize_file}}
{{cpp/experimental/fs/navbar}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|since=fs_ts|1=
void resize_file( const path&amp; p, std::uintmax_t new_size );
void resize_file( const path&amp; p, std::uintmax_t new_size, error_code&amp; ec );
}}
{{dcl end}}

改变由 {{c|p}} 指明的常规文件的大小，如同通过 POSIX [https://pubs.opengroup.org/onlinepubs/9699919799/functions/truncate.html truncate] 进行：如果文件大小之前大于 {{c|new_size}}，则丢弃文件的剩余部分。如果文件之前小于 {{c|new_size}}，则增加文件大小且新区域表现为以零填充。

===参数===
{{par begin}}
{{par|p|要重订大小的路径}}
{{par|new_size|文件将具有的大小}}
{{par|ec|用于无抛出重载中错误报告的输出形参}}
{{par end}}

===返回值===
（无）

===异常===
{{cpp/experimental/fs/error_handling|p}}

===注解===
在支持稀疏文件的系统上，增加文件大小并不会增加其在文件系统上占据的空间：仅当向文件写入非零字节时才会发生空间分配。

===示例===
{{example
|演示在自由空间中创建稀疏文件的效果。
|code=
#include &lt;experimental/filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    fs::path p = fs::temp_directory_path() / "example.bin";
    std::ofstream(p).put('a');
    std::cout &lt;&lt; "文件大小:  " &lt;&lt; fs::file_size(p) &lt;&lt; '\n'
              &lt;&lt; "剩余空间: " &lt;&lt; fs::space(p).free &lt;&lt; '\n';
    fs::resize_file(p, 64*1024); // resize to 64 KB
    std::cout &lt;&lt; "文件大小:  " &lt;&lt; fs::file_size(p) &lt;&lt; '\n'
              &lt;&lt; "剩余空间: " &lt;&lt; fs::space(p).free &lt;&lt; '\n';
    fs::remove(p);
}
|p=true
|output=
文件大小:  1
剩余空间: 31805444096
文件大小:  65536
剩余空间: 31805444096
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/dsc file_size}}
{{dsc inc|cpp/experimental/fs/dsc space}}
{{dsc end}}
{{cpp/experimental/fs/title|u8path}}
{{cpp/experimental/fs/path/navbar}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|num=1|since=fs_ts|1=
template&lt; class Source &gt;
path u8path( const Source&amp; source );
}}
{{dcl|num=2|since=fs_ts|1=
template&lt; class InputIt &gt;
path u8path( InputIt first, InputIt last );
}}
{{dcl end}}

从以 {{lc|std::string}}，或者空终结多字节字符串，或者作为 [{{c|first}}, {{c|last}}) 迭代器对提供的 UTF-8 编码的 {{c|char}} 序列构造路径 {{tt|p}}。

* 如果 {{tt|path::value_type}} 为 {{c|char}} 且原生编码为 UTF-8，则如同以 {{c|path(source)}} 或 {{c|path(first, last)}} 直接构造路径。注意：这在使用 Unicode 的 POSIX（如 Linux）上是典型情况。
* 否则，如果 {{tt|path::value_type}} 为 {{c|wchar_t}} 且原生编码为 UTF-16（这是 Windows 的情况），或者如果 {{tt|path::value_type}} 为 {{c|char16_t}}（原生编码保证为 UTF-16）或 {{c|char32_t}}（原生编码保证为 UTF-32），则首先将 UTF-8 字符序列转换为 {{tt|path::string_type}} 类型的临时字符串 {{tt|tmp}}，然后如同以 {{c|path(tmp)}} 构造新路径。
* 否则（对于非 UTF-8 的窄字符编码和非 UTF-16 的 wchar_t），首先将 UTF-8 字符序列转换为 UTF-32 编码的 {{c|std::u32string}} 类型的临时字符串 {{tt|tmp}}，然后如同以 {{c|path(tmp)}} 构造新路径（在具有非 Unicode 多字节编码或单字节编码的文件系统的 POSIX 系统上会获得这种路径）。

===参数===
{{par begin}}
{{par|source|UTF-8 编码的 {{lc|std::string}}，指向空终止多字节字符串的指针，或具有 char 值类型并指向空终止多字节字符串的输入迭代器}}
{{par|first, last|一对{{named req|InputIterator}}，指定 UTF-8 编码的字符序列}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par req|{{tt|InputIt}} 的值类型必须为 {{c|char}}。}}
{{par end}}

===返回值===
将输入字符串转换从 UTF-8 转换为文件系统的原生字符编码，以之构造的路径。

===异常===
{{cpp/experimental/fs/error_handling_exception_only}}

===注解===
在原生路径格式与通用路径格式不同的系统上（Windows 和 POSIX 系统都不是这种 OS 的例子），如果此函数的实参使用通用格式，则将其转换为原生格式。

===示例===
{{cpp/experimental/fs/path/string_example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/dsc path}}
{{dsc end}}
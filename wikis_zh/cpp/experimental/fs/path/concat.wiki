{{cpp/experimental/fs/path/title|concat|operator+{{=}}}}
{{cpp/experimental/fs/path/navbar}}
{{dcl begin}}
{{dcl|num=1|since=fs_ts|1=
path&amp; operator+=( const path&amp; p );
}}
{{dcl|num=2|since=fs_ts|1=
path&amp; operator+=( const string_type&amp; str );
}}
{{dcl|num=3|since=fs_ts|1=
path&amp; operator+=( const value_type* ptr );
}}
{{dcl|num=4|since=fs_ts|1=
path&amp; operator+=( value_type x );
}}
{{dcl|num=5|since=fs_ts|1=
template&lt; class Source &gt;
path&amp; operator+=( const Source&amp; source );
}}
{{dcl|num=6|since=fs_ts|1=
template&lt; class CharT &gt;
path&amp; operator+=( CharT x );
}}
{{dcl|num=7|since=fs_ts|1=
template&lt; class Source &gt;
path&amp; concat( const Source&amp; source );
}}
{{dcl|num=8|since=fs_ts|1=
template&lt; class InputIt &gt;
path&amp; concat( InputIterator first, InputIterator last );
}}
{{dcl end}}

接合当前路径和实参。

@1@ 接合 {{c|*this}} 和 {{c|p}}，使得结果的 {{rlp|native|native()}} 严格为原 {{rlp|native|native()}} 和 {{c|p.native()}} 的接合。
@2@ 与 {{v|1}} 相同，但所得的 {{rlp|native|native()}} 为原 {{rlp|native|native()}} 和字符串 {{c|str}} 的接合。
@3@ 与 {{v|1}} 相同，但所得的 {{rlp|native|native()}} 为原 {{rlp|native|native()}} 和由 {{c|ptr}} 指向首字符的空终止字符串的接合。
@4@ 与 {{v|1}} 相同，但所得的 {{rlp|native|native()}} 为原 {{rlp|native|native()}} 和单个字符 {{c|x}} 的接合。
@5@ 与 {{v|1}} 相同，但所得的 {{rlp|native|native()}} 为原 {{rlp|native|native()}} 和以 {{c|source}} 表示的序列（可以为可移植或原生格式）的接合，{{c|source}} 可以是 {{c|std::basic_string}}，空终止多字符字符串，或指向空终止多字符序列的输入迭代器。
@6@ 与 {{v|4}} 相同，但可能实施字符转换。
@7@ 与 {{v|5}} 相同。
@8@ 与 {{v|5}} 相同，但以代表多字符字符串的任何迭代器对来表示序列。

===参数===
{{par begin}}
{{par|p|要追加的路径}}
{{par|str|要追加的字符串}}
{{par|ptr|指向要追加的空终止字符串的开头的指针}}
{{par|x|要追加的单个字符}}
{{par|source|{{c|std::basic_string}}，空终止多字符字符串，或指向空终止多字符序列的输入迭代器，表示路径名（可移植或原生格式）}}
{{par|first, last|一对{{named req|InputIterator}}，指定表示路径名的多字符序列}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par req|{{tt|InputIt}} 的值类型必须为编码字符类型（{{c|char}}、{{c|wchar_t}}、{{c|char16_t}} 和 {{c|char32_t}}）之一。}}
{{par req|{{tt|CharT}} 必须为编码字符类型（{{c|char}}、{{c|wchar_t}}、{{c|char16_t}} 和 {{c|char32_t}}）之一。}}
{{par end}}

===返回值===
{{c|*this}}

===异常===
{{cpp/experimental/fs/error_handling_exception_only}}

===注解===
与 {{lc|append()}} 或 {{lc|operator/{{=}}}} 不同，从不引入额外的目录分隔符。

===示例===
{{example|code=
#include &lt;experimental/filesystem&gt;
#include &lt;iostream&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    fs::path p1; // 空路径
    p1 += "var"; // 不插入分隔符
    std::cout &lt;&lt; "\"\" + \"var\" == " &lt;&lt; p1 &lt;&lt; '\n';
    p1 += "lib"; // 不插入分隔符
    std::cout &lt;&lt; "\"\" + \"var\" + \"lib\" == " &lt;&lt; p1 &lt;&lt; '\n';
}
|output=
"" + "var" == "var"
"" + "var" + "lib" == "varlib"
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/path/dsc append}}
{{dsc inc|cpp/experimental/fs/path/dsc operator/}}
{{dsc end}}
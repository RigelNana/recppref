{{cpp/experimental/fs/path/title|extension}}
{{cpp/experimental/fs/path/navbar}}
{{dcl begin}}
{{dcl|since=fs_ts|1=
path extension() const;
}}
{{dcl end}}

返回路径 {{c|*this}} 的文件名组分的扩展名。

如果路径的 {{ltt|cpp/experimental/fs/path/filename|filename()}} 组分包含一个句点 ({{ttb|.}})，且它并非特殊文件系统元素 {{spar|点}} 或 {{spar|点点}} 之一，则''扩展名''为一最右句点开始（包括句点）直到路径名末尾的子字符串。

如果路径名位 {{tt|.}} 或 {{tt|..}}，或者若 {{ltt|cpp/experimental/fs/path/filename|filename()}} 不包含 {{tt|.}} 字符，则返回空路径。

实现可以定义额外的行为，以支持向扩展名附加额外元素（如替代数据流或分区数据集名等）的文件系统。

===参数===
（无）

===返回值===
当前路径名的扩展名，或没有扩展名时为空路径。

{{cpp/impldef exception}}

===注解===
此函数所返回的扩展名包括一个句点，以使其可以区分以句点结尾的文件（函数返回 {{c|"."}}）和没有扩展名的文件（函数返回 {{c|""}}）。

对于任何路径 {{tt|p}}，{{c|1=p.stem()+p.extension() == p.filename()}}。

===示例===
{{example 
|code=
#include &lt;experimental/filesystem&gt;
#include &lt;iostream&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    std::cout &lt;&lt; fs::path("/foo/bar.txt").extension() &lt;&lt; '\n'
              &lt;&lt; fs::path("/foo/bar.").extension() &lt;&lt; '\n'
              &lt;&lt; fs::path("/foo/bar").extension() &lt;&lt; '\n'
              &lt;&lt; fs::path("/foo/bar.txt/bar.cc").extension() &lt;&lt; '\n'
              &lt;&lt; fs::path("/foo/bar.txt/bar.").extension() &lt;&lt; '\n'
              &lt;&lt; fs::path("/foo/bar.txt/bar").extension() &lt;&lt; '\n'
              &lt;&lt; fs::path("/foo/.").extension() &lt;&lt; '\n'
              &lt;&lt; fs::path("/foo/..").extension() &lt;&lt; '\n'
              &lt;&lt; fs::path("/foo/.hidden").extension() &lt;&lt; '\n';
}
|output=
".txt"
"."
""
".cc"
"."
""
""
""
".hidden"
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/path/dsc filename}}
{{dsc inc|cpp/experimental/fs/path/dsc stem}}
{{dsc inc|cpp/experimental/fs/path/dsc replace_extension}}
{{dsc mem fun|cpp/experimental/fs/path/has_path|title=has_extension|检查对应路径元素是否非空}}
{{dsc end}}
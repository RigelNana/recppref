{{cpp/experimental/fs/title|remove|remove_all}}
{{cpp/experimental/fs/navbar}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|since=fs_ts|num=1|1=
bool remove( const path&amp; p );
bool remove( const path&amp; p, error_code&amp; ec );
}}
{{dcl|since=fs_ts|num=2|
std::uintmax_t remove_all( const path&amp; p );
std::uintmax_t remove_all( const path&amp; p, error_code&amp; ec );
}}
{{dcl end}}

@1@ 删除由路径 {{c|p}} 所标定的文件或空目录，如同通过 POSIX [https://pubs.opengroup.org/onlinepubs/9699919799/functions/remove.html remove] 进行。不跟随符号链接（移除符号链接，而非其目标）。
@2@ 删除 {{c|p}} 的内容（若其为位目录）并递归地删除其所有子目录的内容，然后删除 {{c|p}} 自身，如同重复运用 POSIX [https://pubs.opengroup.org/onlinepubs/9699919799/functions/remove.html remove] 进行。不跟随符号链接（移除符号链接，而非其目标）。

===参数===
{{par begin}}
{{par|p|要删除的路径}}
{{par|ec|用于无抛出重载中错误报告的输出形参}}
{{par end}}

===返回值===
@1@ 如果文件被删除则为 {{c|true}}，如果其不存在则为 {{c|false}}。接受 {{c|error_code&amp;}} 实参的重载在发生错误时返回 {{c|false}}。
@2@ 返回所删除的文件和目录的数量（当 {{c|p}} 不存在时可为零）。接受 {{c|error_code&amp;}} 实参的重载在发生错误时返回 {{c|static_cast&lt;std::uintmax_t&gt;(-1)}}。

===异常===
{{cpp/experimental/fs/error_handling|p}}

===注解===
在 POSIX 系统上，这些函数通常会按需调用 {{tt|unlink}} 和 {{tt|rmdir}}，在 Windows 上则为 {{tt|RemoveDirectoryW}} 和 {{tt|DeleteFileW}}。

===示例===
{{example
|code=
#include &lt;cstdint&gt;
#include &lt;experimental/filesystem&gt;
#include &lt;iostream&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    fs::path dir = fs::temp_directory_path();
    fs::create_directories(dir / "abcdef/example");
    std::uintmax_t n = fs::remove_all(dir / "abcdef");
    std::cout &lt;&lt; "删除了 " &lt;&lt; n &lt;&lt; " 个文件或目录\n";
}
|p=true
|output=
删除了 2 个文件或目录
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/c/dsc remove}}
{{dsc end}}
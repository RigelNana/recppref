{{cpp/experimental/fs/title|is_regular_file}}
{{cpp/experimental/fs/navbar}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|num=1|since=fs_ts|1=
bool is_regular_file( file_status s );
}}
{{dcl|num=2|since=fs_ts|1=
bool is_regular_file( const path&amp; p );
}}
{{dcl|num=3|since=fs_ts|1=
bool is_regular_file( const path&amp; p, error_code&amp; ec );
}}
{{dcl end}}

检查给定的文件状态或路径是否对应于某个常规文件。

@1@ 等价于 {{c|s.type() {{==}} file_type::regular}}。

@2@ 等价于 {{c|is_regular_file(status(p))}}。

@3@ 等价于 {{c|is_regular_file(status(p, ec))}}。当发生错误时返回 {{c|false}}，并将 {{c|ec}} 设置为适当的错误码。否则，通过调用 {{c|ec.clear()}} 清除 {{c|ec}}。

{{todo|规范中说 (2) 在 status(p) 可能抛出 filesystem_error 时抛出 filesystem_error。这与其余 is_**_file 函数不同。这是否正确，以及若如此其原理为何？}}

===参数===
{{par begin}}
{{par|s|要检查的文件状态}}
{{par|p|要检查的路径}}
{{par|ec|要存储错误状态的错误码}}
{{par end}}

===返回值===
如果给定的路径或文件状态对应于常规文件则为 {{c|true}}，否则为 {{c|false}}。

===异常===
@1,3@ {{unreviewed noexcept}}

@2@ 当错误发生时抛出 {{c|filesystem_error}}。以 {{c|p}} 为实参构造异常对象。将错误码设为对于导致失败的错误适当的错误码。

===参阅===
{{todo}}
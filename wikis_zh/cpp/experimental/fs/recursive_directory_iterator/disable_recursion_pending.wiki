{{cpp/experimental/fs/recursive_directory_iterator/title|disable_recursion_pending}}
{{cpp/experimental/fs/recursive_directory_iterator/navbar}}
{{dcl begin}}
{{dcl|since=fs_ts|1=
void disable_recursion_pending();
}}
{{dcl end}}

禁止递归到当前指代的子目录，如果有。

此调用修改迭代器上的待定递归标记，使得当调用下一次{{ltt|cpp/experimental/fs/recursive_directory_iterator/increment|自增}}时，迭代器将在当前目录中推进，即便当前它指代尚未访问的子目录也是如此。

待定递归标记的状态可以由 {{ltt|cpp/experimental/fs/recursive_directory_iterator/recursion_pending|recursion_pending()}} 查询，此调用后它将为 {{c|false}}。{{ltt|cpp/experimental/fs/recursive_directory_iterator/increment|自增}}之后，它即被重置为 {{c|true}}，且其初始值也是 {{c|true}}。

如果 {{c|*this}} 是尾迭代器则其行为未定义。

===参数===
（无）

===返回值===
（无）

{{cpp/impldef exception}}

===示例===
{{example|code=
#include &lt;experimental/filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    fs::create_directories("sandbox/a/b/c");
    fs::create_directories("sandbox/a/b/d/e");
    std::ofstream("sandbox/a/b/file1.txt");
    fs::create_symlink("a", "sandbox/syma");
    for (auto i = fs::recursive_directory_iterator("sandbox");
             i != fs::recursive_directory_iterator(); ++i)
    {
        std::cout &lt;&lt; std::string(i.depth(), ' ') &lt;&lt; *i;
        if (fs::is_symlink(i-&gt;symlink_status()))
            std::cout &lt;&lt; " -&gt; " &lt;&lt; fs::read_symlink(*i);
        std::cout &lt;&lt; '\n';

        // do not descend into "b"
        if (i-&gt;path().filename() == "b")
            i.disable_recursion_pending();
    }
    fs::remove_all("sandbox");
}
|output=
"sandbox/a"
 "sandbox/a/b"
"sandbox/syma" -&gt; "a"
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/recursive_directory_iterator/dsc recursion_pending}}
{{dsc inc|cpp/experimental/fs/recursive_directory_iterator/dsc increment}}
{{dsc end}}
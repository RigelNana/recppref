{{cpp/experimental/fs/recursive_directory_iterator/title|depth}}
{{cpp/experimental/fs/recursive_directory_iterator/navbar}}
{{dcl begin}}
{{dcl|since=fs_ts|1=
int depth() const;
}}
{{dcl end}}

返回从起始目录到当前迭代的目录的目录数量，即目录层测结构的当前深度。

起始目录的深度为 {{math|0}}，其子目录的深度为 {{math|1}}，等等。

如果 {{c|*this}} 为尾迭代器则其行为未定义。

===参数===
（无）

===返回值===
目录层次结构的当前深度。

===异常===
不抛出。

===示例===
{{example|此示例使用迭代深度来计算目录树打印中的缩进。
|code=
#include &lt;experimental/filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
namespace fs = std::experimental::filesystem;

int main()
{
    fs::create_directories("sandbox/a/b/c");
    fs::create_directories("sandbox/a/b/d/e");
    std::ofstream("sandbox/a/b/file1.txt");
    fs::create_symlink("a", "sandbox/syma");
    for (auto i = fs::recursive_directory_iterator("sandbox");                       
             i != fs::recursive_directory_iterator(); ++i)
    {
        std::cout &lt;&lt; std::string(i.depth(), ' ') &lt;&lt; *i;
        if (fs::is_symlink(i-&gt;symlink_status()))
            std::cout &lt;&lt; " -&gt; " &lt;&lt; fs::read_symlink(*i);
        std::cout &lt;&lt; '\n';
    }
    fs::remove_all("sandbox");
}
|output=
"sandbox/a"
 "sandbox/a/b"
  "sandbox/a/b/c"
  "sandbox/a/b/d"
   "sandbox/a/b/d/e"
  "sandbox/a/b/file1.txt"
"sandbox/syma" -&gt; "a"
}}
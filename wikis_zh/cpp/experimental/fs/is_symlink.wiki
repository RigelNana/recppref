{{cpp/experimental/fs/title|is_symlink}}
{{cpp/experimental/fs/navbar}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|num=1|since=fs_ts|1=
bool is_symlink( file_status s );
}}
{{dcl|num=2|since=fs_ts|1=
bool is_symlink( const path&amp; p );
bool is_symlink( const path&amp; p, error_code&amp; ec );
}}
{{dcl end}}

检查给定的文件状态或路径是否对应于某个符号链接，如同以 POSIX [https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/sys_stat.h.html S_IFLNK] 确定。

@1@ 等价于 {{c|s.type() {{==}} file_type::symlink}}。
@2@ 等价于 {{c|is_symlink(status(p))}} 或 {{c|is_symlink(status(p, ec))}}。

===参数===
{{par begin}}
{{par|s|要检查的文件状态}}
{{par|p|要检查的路径}}
{{par|ec|用于无抛出重载中报告错误的输出形参}}
{{par end}}

===返回值===
如果 {{c|p}} 所指定的文件或 {{c|s}} 所指定的类型代表的是符号链接则为 {{c|true}}。当发生错误时无抛出重载返回 {{c|false}}。

===异常===
@1@ {{unreviewed noexcept}}
@2@ {{cpp/experimental/fs/error_handling|p}}

===注解===
此函数提供的信息通常也是目录遍历所提供的副产物。遍历目录时，调用 {{tt|is_symlink(*iterator)}} 不如 {{tt|is_symlink(iterator-&gt;status())}} 高效。

===示例===
{{cpp/experimental/fs/status_example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/dsc status}}
{{dsc inc|cpp/experimental/fs/dsc file_status}}
{{dsc inc|cpp/experimental/fs/dsc status_known}}
{{dsc inc|cpp/experimental/fs/dsc is_block_file}}
{{dsc inc|cpp/experimental/fs/dsc is_character_file}}
{{dsc inc|cpp/experimental/fs/dsc is_directory}}
{{dsc inc|cpp/experimental/fs/dsc is_fifo}}
{{dsc inc|cpp/experimental/fs/dsc is_other}}
{{dsc inc|cpp/experimental/fs/dsc is_regular_file}}
{{dsc inc|cpp/experimental/fs/dsc is_socket}}
{{dsc inc|cpp/experimental/fs/dsc exists}}
{{dsc inc|cpp/experimental/fs/directory_entry/dsc status}}
{{dsc end}}
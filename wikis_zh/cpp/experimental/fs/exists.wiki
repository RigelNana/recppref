{{cpp/experimental/fs/title|exists}}
{{cpp/experimental/fs/navbar}}
{{dcl begin}}
{{dcl header|experimental/filesystem}}
{{dcl|num=1|since=fs_ts|1=
bool exists( file_status s )
}}
{{dcl|num=2|since=fs_ts|1=
bool exists( const path&amp; p );
bool exists( const path&amp; p, error_code&amp; ec )
}}
{{dcl end}}

检查给定文件状态或路径是否对应于某个现存文件或目录。

@1@ 等价于 {{c|1=status_known(s) &amp;&amp; s.type() != file_type::not_found}}。
@2@ 等价于 {{c|exists(status(p))}} 或 {{c|exists(status(p, ec))}}（跟随符号链接）。当发生错误时无抛出重载返回 {{c|false}}。

===参数===
{{par begin}}
{{par|s|要检查的文件状态}}
{{par|p|要检查的路径}}
{{par|ec|用于不抛出重载中报告错误的输出形参}}
{{par end}}

===返回值===
如果给定路径或文件状态对应于某个现存文件或目录则为 {{c|true}}，否则为 {{c|false}}。

===异常===
@1@ {{unreviewed noexcept}}
@2@ {{cpp/experimental/fs/error_handling|p}}

===注解===
由此函数提供的信息通常也作为目录遍历的副产物提供。在遍历目录时，调用 {{tt|exists(*iterator)}} 不如 {{tt|exists(iterator-&gt;status())}} 高效。

===示例===
{{example
|code=
#include &lt;cstdint&gt;
#include &lt;experimental/filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
namespace fs = std::experimental::filesystem;

void demo_exists(const fs::path&amp; p, fs::file_status s = fs::file_status{})
{
    std::cout &lt;&lt; p;
    if (fs::status_known(s) ? fs::exists(s) : fs::exists(p))
        std::cout &lt;&lt; " 存在\n";
    else
        std::cout &lt;&lt; " 不存在\n";
}

int main()
{
    fs::create_directory("sandbox");
    std::ofstream("sandbox/file"); // 创建常规文件
    fs::create_symlink("non-existing", "sandbox/symlink");

    demo_exists("sandbox");
    for (auto it = fs::directory_iterator("sandbox"); it != fs::directory_iterator(); ++it)
        demo_exists(*it, it-&gt;status()); // 使用目录项中缓存的状态
    fs::remove_all("sandbox");
}
|output=
"sandbox" 存在
"sandbox/file" 存在
"sandbox/symlink" 不存在
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/fs/dsc status}}
{{dsc inc|cpp/experimental/fs/dsc file_status}}
{{dsc inc|cpp/experimental/fs/directory_entry/dsc status}}
{{dsc end}}
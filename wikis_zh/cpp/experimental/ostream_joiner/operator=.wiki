{{cpp/experimental/ostream_joiner/title|operator{{=}}}}
{{cpp/experimental/lib extensions 2/ostream_joiner/navbar}}
{{dcl begin}}
{{dcl|num=1|since=libfund_ts_2|1=
template&lt; class T &gt;
ostream_joiner&amp; operator=( const T&amp; value );
}}
{{dcl|num=2|since=libfund_ts_2|notes={{mark implicit}}|1=
ostream_joiner&amp; operator=( const ostream_joiner&amp; other ) = default;
}}
{{dcl|num=3|since=libfund_ts_2|notes={{mark implicit}}|1=
ostream_joiner&amp; operator=( ostream_joiner&amp;&amp; other ) = default;
}}
{{dcl end}}

@1@ 首先，若私有“首元素”标志为 {{c|false}}，则如同用 {{c|os &lt;&lt; delim;}} 插入分隔符 {{tt|delim}} 到与此迭代器关联的输出流 {{tt|os}} 中。

@@ 然后，无条件地设置“首元素”标志为 {{c|false}}，然后如同用 {{c|os &lt;&lt; value;}} 插入 {{c|value}} 到输出流中。

@@ 令 {{tt|out_stream}}、{{tt|delim}} 和 {{tt|first_element}} 分别代表私有流指针、分隔符和“首元素”标志成员，则此函数等价于
{{source|1=
if (!first_element)
    *out_stream &lt;&lt; delim;
first_element = false;
*out_stream &lt;&lt; value;
return *this;
}}

@2,3@ 隐式声明的复制/移动赋值运算符，用于复制移动/赋值私有流指针、分隔符和“首元素”标志成员。

===参数===
{{par begin}}
{{par | value|要写入到流的对象}}
{{par | other |要被赋值给此对象的 {{tt|ostream_joiner}} 对象}}
{{par end}}

===返回值===
{{c|*this}}。

===示例===
{{example
|code=
#include &lt;experimental/iterator&gt;
#include &lt;iostream&gt;
 
int main()
{
    auto joiner = std::experimental::make_ostream_joiner(std::cout, ", ");
    joiner = "First";
    joiner = "do no harm.";  // 添加带有分隔符的前缀
}
|output=
First, do no harm.
}}

{{langlinks|en}}
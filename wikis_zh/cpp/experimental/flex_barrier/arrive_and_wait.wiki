{{cpp/experimental/flex_barrier/title|arrive_and_wait}}
{{cpp/experimental/concurrency/flex_barrier/navbar}}
{{dcl begin}}
{{dcl | since=concurrency | 1=
void arrive_and_wait();
}}
{{dcl end}}

阻塞并到达 {{tt|flex_barrier}} 的同步点。

若调用线程不在此 {{tt|flex_barrier}} 的参与线程集合中，则行为未定义。

对 {{tt|arrive_and_wait}} 的调用同步于 {{tt|flex_barrier}} 完成阶段的开始。完成阶段的完成同步于从调用返回。

调用 {{tt|arrive_and_drop}} 和 {{tt|arrive_and_wait}} 决不引入与自身或彼此间的数据竞争。

===注解===
从此调用返回时，线程立即调用 {{tt|arrive_and_wait()}} 或 {{tt|arrive_and_drop()}} 是安全的（只要完成阶段的函数对象不返回零）。不需要确保所有阻塞线程都在一个线程再次调用它时已退出 {{tt|arrive_and_wait()}}。

完成阶段执行构造 {{tt|flex_barrier}} 时指定的函数对象。若它返回 -1，则不更改参与线程集（而下个循环中同一参与线程集必须抵达同步点）；否则参与线程集变为拥有等于返回值 {{tt|N}} 的新大小的集合，并由到达屏障同步点的下 {{tt|N}} 个线程组成。若 {{c|1=N == 0}}，则 {{tt|flex_barrier}} 只能被销毁。

为 {{tt|num_threads}} 个线程构造的 {{tt|flex_barrier}} 的的初始参与线程集是首 {{tt|num_threads}} 个到达其同步点的线程。

===异常===
不抛出。

===参阅===
{{dsc begin}}
{{dsc inc | cpp/experimental/flex_barrier/dsc arrive_and_drop }}
{{dsc end}}

{{langlinks|en}}
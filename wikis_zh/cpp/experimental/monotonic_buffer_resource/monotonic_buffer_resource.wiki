{{cpp/experimental/pmr/monotonic_buffer_resource/title|monotonic_buffer_resource}}
{{cpp/experimental/lib extensions/pmr/monotonic_buffer_resource/navbar}}
{{dcl begin}}
{{dcl|since=libfund_ts|num=1|1=
monotonic_buffer_resource();
}}
{{dcl|since=libfund_ts|num=2|1=
explicit monotonic_buffer_resource( memory_resource* upstream );
}}
{{dcl|since=libfund_ts|num=3|1=
explicit monotonic_buffer_resource( std::size_t initial_size );
}}
{{dcl|since=libfund_ts|num=4|1=
monotonic_buffer_resource( std::size_t initial_size,
                           memory_resource* upstream );
}}
{{dcl|since=libfund_ts|num=5|1=
monotonic_buffer_resource( void* buffer, std::size_t buffer_size );
}}
{{dcl|since=libfund_ts|num=6|1=
monotonic_buffer_resource( void* buffer, std::size_t buffer_size,
                           memory_resource* upstream );
}}
{{dcl|since=libfund_ts|num=7|1=
monotonic_buffer_resource( const monotonic_buffer_resource&amp; ) = delete;
}}
{{dcl end}}

构造 {{tt|monotonic_buffer_resource}}。不接受上游内存资源指针的构造函数使用 {{c|std::experimental::pmr::get_default_resource()}} 的返回值为其上游内存资源。

@1,2@ 设置 ''当前缓冲区'' 为空并设置 ''下一个缓冲区大小'' 为由实现定义的大小。
@3,4@ 设置 ''当前缓冲区'' 为空并设置 ''下一个缓冲区大小'' 为不小于 {{c|initial_size}} 的大小。
@5,6@ 设置 ''当前缓冲区'' 为 {{c|buffer}} 并设置 ''下一个缓冲区大小'' 为 {{c|buffer_size}}（但不能小于 1）。然后以实现定义的增长率（不必为整数）增加 ''下一个缓冲区大小''。
@7@ 复制构造函数被弃置。

===参数===
{{par begin}}
{{par|upstream|使用的上游内存资源；必须指向有效内存资源}}
{{par|initial_size|分配的第一个缓冲区的最小大小；必须大于零}}
{{par|buffer|使用的初始缓冲区}}
{{par|buffer_size|初始缓冲区的大小；不能大于 {{c|buffer}} 中的字节数}}
{{par end}}
{{title|C++ 中的编译时元程序（P1717R0）}}
{{fmbox | class=noprint | style=font-size: 0.8em | text='''信息:''' 这并非实验性功能。仅是候选提案 {{mark since P1717}}。}}
{{cpp/experimental/navbar}}
===介绍===
这基于 {{wg21|P0712}}。
 '''template'''&lt;'''typename'''... Types&gt;
 '''class''' tuple {
  '''consteval''' {
   '''int''' counter = 0;
   '''for'''... (meta::info type : '''reflexpr'''(Types)) {
    '''auto''' fragment = '''__fragment struct''' {
     '''typename'''(type) '''unqualid'''("element_", counter);
    };
    -&gt; fragment;
    ++counter;
   }
  }
 };
 tuple&lt;'''bool''', '''char''', '''int'''&gt; tup;

与此相同
 '''template'''&lt;'''typename'''... Types&gt;
 '''class''' tuple {
  '''bool''' element0;
  '''char''' element1;
  '''int''' element2;
 };


=====consteval{ ... }=====
填入其中的东西被称为元程序。它在翻译单元中出现它之处执行。
=====typename( meta::info )=====
可以用 typename 运算符获得类型的反射的类型名。

=====unqualid=====
此运算符制造新的无限定标识。它接受几个实参，将其接合起来构成新的标识符。
=====-&gt;fragment=====
此运算符向编译器发出请求。编译器会注入片段。
=====__fragment=====
======类片段======
TODO:
======命名空间片段======
TODO:
======枚举片段======
TODO:
======块片段======
TODO:
======参数化片段======
TODO:
=====非局部依赖=====
TODO:
=====形参注入=====
TODO:
=====元类=====
TODO:
===参阅===
{{wg21|p1717r0}}
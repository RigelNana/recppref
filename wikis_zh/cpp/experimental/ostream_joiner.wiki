{{cpp/experimental/title|ostream_joiner}}
{{cpp/experimental/lib extensions 2/ostream joiner/navbar}}
{{ddcl|header=experimental/iterator|since=libfund_ts_2|1=
template&lt;
    class DelimT,
    class CharT = char,
    class Traits = std::char_traits&lt;CharT&gt;
&gt;
class ostream_joiner;
}}

{{tt|std::experimental::ostream_joiner}} 是为 {{lc|std::basic_ostream}} 构造的单趟{{named req|OutputIterator}}，它用 {{tt|operator&lt;&lt;}} 写入分隔符所分隔相继对象到该流中。在每两个写入的对象间，写入分隔符到输出流。在赋值给迭代器（无论是否解引用）时进行写入操作。自增 {{tt|ostream_joiner}} 是无操作。

典型实现中，{{tt|ostream_joiner}} 仅有的数据成员是指向关联 {{tt|std::basic_ostream}} 的指针、分隔符和指示下次写入是否对于序列中首元素的 {{c/core|bool}} 成员。

与 {{lc|std::ostream_iterator}} 相比，{{tt|ostream_joiner}} 少打印一次分隔符，并且不在待打印的对象类型上模板化。

===成员类型===
{{dsc begin}}
{{dsc hitem |成员类型|定义}}
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc|{{tt|traits_type}}|{{tt|Traits}}}}
{{dsc|{{tt|ostream_type}}|{{c|std::basic_ostream&lt;CharT, Traits&gt;}}}}
{{dsc|{{tt|value_type}}|{{c|void}}}}
{{dsc|{{tt|difference_type}}|{{c|void}}}}
{{dsc|{{tt|pointer}}|{{c|void}}}}
{{dsc|{{tt|reference}}|{{c|void}}}}
{{dsc|{{tt|iterator_category}}|{{c|std::output_iterator_tag}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/experimental/ostream_joiner/dsc constructor}}
{{dsc inc|cpp/experimental/ostream_joiner/dsc destructor}}
{{dsc inc|cpp/experimental/ostream_joiner/dsc operator{{=}}}}
{{dsc inc|cpp/experimental/ostream_joiner/dsc operator*}}
{{dsc inc|cpp/experimental/ostream_joiner/dsc operator_arith}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/experimental/ostream_joiner/dsc make_ostream_joiner}}
{{dsc end}}

===示例===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;experimental/iterator&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;

int main()
{
    int i[] = {1, 2, 3, 4, 5};
    std::copy(std::begin(i),
              std::end(i),
              std::experimental::make_ostream_joiner(std::cout, ", "));
}
 | output=
1, 2, 3, 4, 5
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc ostreambuf_iterator}}
{{dsc inc|cpp/iterator/dsc ostream_iterator}}
{{dsc inc|cpp/iterator/dsc istream_iterator}}
{{dsc end}}

{{langlinks|en|ru}}
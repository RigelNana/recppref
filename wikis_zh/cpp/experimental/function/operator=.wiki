{{cpp/experimental/function/title|operator{{=}}}}
{{cpp/experimental/lib extensions/pmr/navbar}}
{{dcl begin}}
{{dcl|num=1|since=libfund_ts|1=
function&amp; operator=( const function&amp; other );
}}
{{dcl|num=2|since=libfund_ts|1=
function&amp; operator=( function&amp;&amp; other );
}}
{{dcl|num=3|since=libfund_ts|1=
function&amp; operator=( std::nullptr_t ) noexcept;
}}
{{dcl|num=4|since=libfund_ts|1=
template&lt; class F &gt;
function&amp; operator=( F&amp;&amp; f );
}}
{{dcl rev multi|num=5
|since1=libfund_ts|dcl1=
template&lt; class F &gt;
function&amp; operator=( std::reference_wrapper&lt;F&gt; f );
|since2=libfund_ts_3|dcl2=
template&lt; class F &gt;
function&amp; operator=( std::reference_wrapper&lt;F&gt; f ) noexcept;
}}
{{dcl end}}

赋值新''目标''给 {{tt|std::experimental::function}}。在以下描述中，令 {{c|ALLOCATOR_OF(f)}} 为 {{c|f}} 的构造中指定的分配器，或若未指定则为构造时{{rev inl|until=libfund_ts_3| {{c|std::experimental::pmr::get_default_resource()}} 的值}}{{rev inl|since=libfund_ts_3|默认构造的 {{c|std::pmr::polymorphic_allocator&lt;&gt;}} 值}}。&lt;!-- LWG 2527 --&gt;

@1@ 如同通过执行 {{c|function(std::allocator_arg, ALLOCATOR_OF(*this), other).swap(*this);}} 赋值 {{c|other}} 的''目标''的副本。

@2@ 如同以执行 {{c|function(std::allocator_arg, ALLOCATOR_OF(*this), std::move(other)).swap(*this);}} 移动 {{c|other}} 的''目标''到 {{c|*this}}。{{c|other}} 处于有效状态并拥有未指定值。

@3@ 销毁 {{c|*this}} 的''目标''。调用后 {{c|*this}} 为''空''。赋值后 {{tt|get_memory_resource()}} 所返回的内存资源等价于赋值前的内存资源，但地址可能改变。

@4@ 如同通过执行 {{c|function(std::allocator_arg, ALLOCATOR_OF(*this),std::forward&lt;F&gt;(f)).swap(*this);}} 设置 {{c|*this}} 的''目标''为 {{c|f}}。此运算符仅若 {{c|f}} 对实参类型 {{tt|Args...}} 和返回类型 {{tt|R}} {{named req|Callable|可调用}}才参与重载决议。

@5@ 如同通过执行 {{c|function(std::allocator_arg, ALLOCATOR_OF(*this), f).swap(*this);}} 设置 {{c|*this}} 的''目标''为 {{c|f}} 的副本。

===参数===
{{par begin}}
{{par | other |要复制或移动的另一 {{tt|std::experimental::function}} 对象}}
{{par | f |要用以初始化''目标''的可调用对象}}
{{par hreq}}
{{par req named | F |Callable}}
{{par end}}

===返回值===
{{c|*this}}

===异常===
@1,2,4@ 在分配所需的存储或初始化 {{c|*this}} 的目标时抛出的异常，若存在。
@5@ （无）

===注解===
若 {{rev inl|until=libfund_ts_3|{{c|1=get_memory_resource() != other.get_memory_resource()}}}}{{rev inl|since=libfund_ts_3|{{c|1=get_allocator() != other.get_allocator()}}}} 则移动赋值运算符可能需要分配存储。

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
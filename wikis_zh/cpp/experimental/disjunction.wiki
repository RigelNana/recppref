{{cpp/experimental/title|disjunction}}
{{cpp/experimental/lib extensions 2/navbar}}
{{fmbox|class=noprint|style=font-size: 0.8em|text='''已并入 ISO C++''' 此页面描述的功能，于 2016 年二月起已并入 ISO C++ 标准主线，参见 {{ltt|cpp/types/disjunction|std::disjunction}} {{mark since c++17}} }}
{{dcl begin}}
{{dcl header|experimental/type_traits}}
{{dcl|since=libfund_ts_2|1=
template&lt; class... B &gt;
struct disjunction;
}}
{{dcl end}}

构成类型特征 {{tt|B...}} 的[https://en.wikipedia.org/wiki/Logical_disjunction 逻辑析取]，实际上在特征序列上实施逻辑或（OR）。

特化 {{c|std::experimental::disjunction&lt;B1, ..., BN&gt;}} 具有公开且无歧义基类：
* 若 {{c|1=sizeof...(B) == 0}}，则为 {{c|std::false_type}}；否则
* {{tt|B1, ..., BN}} 中使得 {{c|1=bool(Bi::value) == true}} 的首个 {{tt|Bi}}，{{tt|BN}}，或当没有这种类型时为 {{tt|BN}}。

基类中的成员名，除了 {{tt|disjunction}} 和 {{tt|operator{{=}}}}, 之外均未被隐藏，且在 {{tt|disjunction}} 中可以无歧义访问。

析取支持短路：如果有任何模板类型实参 {{tt|Bi}} 使得 {{c|1=bool(Bi::value) != false}}，则实例化 {{c|disjunction&lt;B1, ..., BN&gt;::value}} 时不要求对 {{tt|j &gt; i}} 实例化 {{c|Bj::value}}。

===模板形参===
{{par begin}}
{{par|B...|每个模板实参 {{tt|Bi}}，其中若实例化了 {{c|Bi::value}}，则它必须可用作基类，且定义了可转换为 {{c|bool}} 的成员 {{tt|value}}}}
{{par end}}

=== 辅助变量模板 ===
{{dcl begin}}
{{dcl|since=libfund_ts_2|1=
template&lt; class... B &gt;
constexpr bool disjunction_v = disjunction&lt;B...&gt;::value;
}}
{{dcl end}}

===可能的实现===
{{eq fun
|1=
template&lt;class...&gt; struct disjunction : std::false_type {};
template&lt;class B1&gt; struct disjunction&lt;B1&gt; : B1 {};
template&lt;class B1, class... Bn&gt;
struct disjunction&lt;B1, Bn...&gt; 
    : std::conditional_t&lt;bool(B1::value), B1, disjunction&lt;Bn...&gt;&gt;  {};
}}

===注解===
{{tt|disjunction}} 的特化不必继承于 {{c|std::true_type}} 或者 {{c|std::false_type}}：它只是继承于  {{tt|::value}} 显式转换为 {{tt|bool}} 时为 true 的首个 {{tt|B}}，或者当它们均转换为 false 时继承于最后一个 B。例如，{{c|disjunction&lt;std::integral_constant&lt;int, 2&gt;, std::integral_constant&lt;int, 4&gt;&gt;::value}} 为 {{c|2}}。

===示例===
{{example|code=
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc disjunction}}
{{dsc end}}
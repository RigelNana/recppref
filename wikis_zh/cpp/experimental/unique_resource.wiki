{{cpp/experimental/title|unique_resource}}
{{cpp/experimental/unique_resource/navbar}}
{{ddcl|since=libfund_ts_3|header=experimental/scope|
template&lt; class R, class D &gt;
class unique_resource;
}}

{{tt|unique_resource}} 是通用的资源句柄 RAII 包装器，它通过句柄占有并管理资源，并在 {{tt|unique_resource}} 销毁时释放该资源。

在以下任一情况发生时，用 {{tt|D}} 类型删除器处置资源：
* 销毁管理的 {{tt|unique_resource}} 对象
* 经由 {{lc|operator{{=}}}} 或 {{lc|reset()}} 赋另一资源给管理的 {{tt|unique_resource}} 对象。

若 {{tt|R}} 为对象类型则令 {{tt|RS}} 为 {{tt|R}}，否则为 {{c|std::reference_wrapper&lt;std::remove_reference_t&lt;R&gt;&gt;}}：
* {{tt|unique_resource}} 等效地保有包装或作为资源句柄的 {{tt|RS}} 类型的子对象、{{tt|D}} 类型的删除器及指示包装是否占有资源的 {{c|bool}} 标志。
* 为解释目的，称 {{tt|RS}} 为''存储的资源句柄''，存储（若 {{tt|R}} 为对象类型）或包装（若 {{tt|R}} 为引用类型）的 {{tt|R}} 为''底层资源句柄''。LFTS 不使用此二用语。

===模板形参===
{{par begin}}
{{par | R | 资源句柄类型}}
{{par | D | 删除器类型}}
{{par hreq}}
{{par req | {{tt|R}} 应当为对象类型或到对象的左值引用类型。令 {{tt|UnrefR}} 为 {{c|std::remove_reference_t&lt;R&gt;}}，则 {{tt|UnrefR}} 应当为{{named req|MoveConstructible}}，而若 {{tt|UnrefR}} 非{{named req|CopyConstructible}}，则 {{c|std::is_nothrow_move_constructible_v&lt;UnrefR&gt;}} 应当为 {{c|true}}。}}
{{par req | {{tt|D}} 应当为{{named req|Destructible}}且{{named req|MoveConstructible}}的{{named req|FunctionObject}}类型，而若 {{tt|D}} 非{{named req|CopyConstructible}}，则 {{c|std::is_nothrow_move_constructible_v&lt;R&gt;}} 应当为 {{c|true}}。给定 {{tt|D}} 类型的左值 {{tt|d}} 与 {{tt|UnrefR}} 类型的左值 {{tt|r}}，表达式 {{c|d(r)}} 应当为良构。}}
{{par end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/experimental/unique_resource/dsc constructor}}
{{dsc inc|cpp/experimental/unique_resource/dsc destructor}}
{{dsc inc|cpp/experimental/unique_resource/dsc operator{{=}}}}

{{dsc h2|修改器}}
{{dsc inc|cpp/experimental/unique_resource/dsc release}}
{{dsc inc|cpp/experimental/unique_resource/dsc reset}}

{{dsc h2|观察器}}
{{dsc inc|cpp/experimental/unique_resource/dsc get}}
{{dsc inc|cpp/experimental/unique_resource/dsc get_deleter}}
{{dsc inc|cpp/experimental/unique_resource/dsc operator*}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/experimental/unique_resource/dsc make_unique_resource_checked}}
{{dsc end}}

==={{rl|deduction guides|推导指引}}===

===注解===
满足{{named req|NullablePointer}}的资源句柄类型亦能由 {{lc|std::unique_ptr}} 管理。不同于 {{tt|unique_ptr}}，{{tt|unique_resource}} 不要求{{named req|NullablePointer}}。

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc unique_ptr}}
{{dsc end}}

{{langlinks|en|ja|ru}}
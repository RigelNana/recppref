{{cpp/experimental/title|boyer_moore_searcher|make_boyer_moore_searcher}}
{{cpp/experimental/lib_extensions/navbar}}

{{dcl begin}}
{{dcl header|experimental/functional}}
{{dcl|since=libfund_ts|
template&lt; class RandomIt1,
          class Hash {{=}} std::hash&lt;typename std::iterator_traits&lt;RandomIt1&gt;::value_type&gt;,
          class BinaryPredicate {{=}} std::equal_to&lt;&gt; &gt;
class boyer_moore_searcher;
}}
{{dcl end}}

适用于 {{ltt|cpp/experimental/search|std::experimental::search}} 的搜索器，实现了 https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm Boyer-Moore 字符串搜索算法]。

{{tt|boyer_moore_searcher}} 是{{named req|CopyConstructible}}且{{named req|CopyAssignable}}。

{{tt|RandomIt1}} 必须满足{{named req|RandomAccessIterator}}的规定。

===成员函数===
{{member|{{small|std::experimental::boyer_moore_searcher::}}boyer_moore_searcher|2=
{{dcl begin}}
{{dcl| 
boyer_moore_searcher( RandomIt1 pat_first,
                      RandomIt1 pat_last,
                      Hash hf {{=}} Hash(),
                      BinaryPredicate pred {{=}} BinaryPredicate() );
}}
{{dcl end}}
创建 {{tt|boyer_moore_searcher}}，存储 {{c|pat_first}}、{{c|pat_last}}、{{c|hf}} 和 {{c|pred}} 的副本，设立所需的任何内部数据结构。

{{tt|RandomIt1}} 的值类型必须为{{named req|DefaultConstructible}}、{{named req|CopyConstructible}}且{{named req|CopyAssignable}}。

对于任意两个 {{c|std::iterator_traits&lt;RandomIt1&gt;::value_type}} 类型的值 {{tt|A}} 和 {{tt|B}}，若 {{c|pred(A, B) {{==}} true}}，则 {{c|hf(A) {{==}} hf(B)}} 应当为 {{c|true}}。

===参数===
{{par begin}}
{{par|pat_first, pat_last|代表要搜索字符串的一对迭代器}}
{{par|hf|用于散列字符串的元素的可调用对象}}
{{par|pred|用于确定相等性的可调用对象}}
{{par end}}

===异常===
以下操作抛出的任何异常
* {{tt|RandomIt1}} 的复制构造函数；
* {{tt|RandomIt1}} 的值类型的默认构造函数、复制构造函数或复制赋值运算符；或
* {{tt|BinaryPredicate}} 或 {{tt|Hash}} 的复制构造函数或函数调用运算符。
如果无法分配内部数据结构所需的额外内存，则还会抛出 {{lc|std::bad_alloc}}。
}}

{{member|{{small|std::experimental::boyer_moore_searcher::}}operator()|2=
{{dcl begin}}
{{dcl rev begin}}
{{dcl|until=c++17|
template&lt; class RandomIt2 &gt;
RandomIt2 operator()( RandomIt2 first, RandomIt2 last ) const;
}}
{{dcl|since=c++17|
template&lt; class RandomIt2 &gt;
std::pair&lt;RandomIt2,RandomIt2&gt; operator()( RandomIt2 first, RandomIt2 last ) const;
}}
{{dcl rev end}}
{{dcl end}}
由 {{ltt|cpp/experimental/search|std::experimental::search}} 调用的成员函数，以此搜索器实施搜索。{{tt|RandomIt2}} 必须满足{{named req|RandomAccessIterator}}的规定。

{{tt|RandomIt1}} 和 {{tt|RandomIt2}} 必须具有相同的值类型。

===参数===
{{par begin}}
{{par|first, last|代表要检查字符串的一对迭代器}}
{{par end}}

===返回值===
{{rev begin}}
{{rev|until=c++17|
若模式 {{range|pat_first|pat_last}} 为空，则返回 {{c|first}}。

否则，返回指向 {{range|first|last}} 中的首个位置的迭代器，其中按 {{c|pred}} 定义比较等于 {{range|pat_first|pat_last}} 的子序列位于此，否则返回 {{c|last}} 的副本。
}}
{{rev|since=c++17|
若模式 {{range|pat_first|pat_last}} 为空，则返回 {{c|make_pair(first, first)}}。

否则，返回一对迭代器，指向 {{range|first|last}} 中的首个位置和越过最末一个位置，其中按 {{c|pred}} 定义比较等于 {{range|pat_first|pat_last}} 的子序列位于此，否则返回 {{c|make_pair(last, last)}}。
}}
{{rev end}}
}}

===辅助函数===
{{dcl begin}}
{{dcl|since=libfund_ts|
template&lt; class RandomIt, 
          class Hash {{=}} std::hash&lt;typename std::iterator_traits&lt;RandomIt&gt;::value_type&gt;,
          class BinaryPredicate {{=}} std::equal_to&lt;&gt; &gt;
boyer_moore_searcher&lt;RandomIt, Hash, BinaryPredicate&gt; make_boyer_moore_searcher(
    RandomIt pat_first,
    RandomIt pat_last,
    Hash hf {{=}} Hash(),
    BinaryPredicate pred {{=}} BinaryPredicate());
}}
{{dcl end}}

利用模板实参推导创建 {{tt|std::experimental::boyer_moore_searcher}} 的辅助函数。等价于 {{c|return boyer_moore_searcher&lt;RandomIt, Hash, BinaryPredicate&gt;(pat_first, pat_last, hf, pred);}}

===参数===
{{par begin}}
{{par|pat_first, pat_last|代表要搜索字符串的一对迭代器}}
{{par|hf|用于散列字符串的成员的可调用对象}}
{{par|pred|用于确定相等性的可调用对象}}
{{par end}}

===返回值===
从实参 {{c|pat_first}}、{{c|pat_last}}、{{c|hf}} 和 {{c|pred}} 构造的 {{tt|boyer_moore_searcher}}。

===示例===
{{example
|code=
#include &lt;experimental/algorithm&gt;
#include &lt;experimental/functional&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
 
int main()
{
    std::string in = "Lorem ipsum dolor sit amet, consectetur adipiscing elit,"
                     " sed do eiusmod tempor incididunt ut labore et dolore magna aliqua";
    std::string needle = "pisci";
    auto it = std::experimental::search(in.begin(), in.end(),
                  std::experimental::make_boyer_moore_searcher(
                      needle.begin(), needle.end()));
    if (it != in.end())
        std::cout &lt;&lt; "The string " &lt;&lt; needle &lt;&lt; " found at offset "
                  &lt;&lt; it - in.begin() &lt;&lt; '\n';
    else
        std::cout &lt;&lt; "The string " &lt;&lt; needle &lt;&lt; " not found\n";
}
|output=
The string pisci found at offset 43
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc search}}
{{dsc end}}
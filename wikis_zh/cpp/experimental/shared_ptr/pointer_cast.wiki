{{cpp/experimental/title|static_pointer_cast|dynamic_pointer_cast|const_pointer_cast| reinterpret_pointer_cast}}
{{cpp/experimental/shared_ptr/navbar}}
{{dcl begin}}
{{dcl|num=1|since=libfund_ts|1= 
template&lt; class T, class U &gt; 
std::experimental::shared_ptr&lt;T&gt;
    static_pointer_cast( const std::experimental::shared_ptr&lt;U&gt;&amp; r ) noexcept;
}}
{{dcl|num=2|since=libfund_ts|1= 
template&lt; class T, class U &gt; 
std::experimental::shared_ptr&lt;T&gt;
    dynamic_pointer_cast( const std::experimental::shared_ptr&lt;U&gt;&amp; r ) noexcept;
}}
{{dcl|num=3|since=libfund_ts|1= 
template&lt; class T, class U &gt; 
std::experimental::shared_ptr&lt;T&gt;
    const_pointer_cast( const std::experimental::shared_ptr&lt;U&gt;&amp; r ) noexcept;
}}
{{dcl|num=4|since=libfund_ts|1= 
template&lt; class T, class U &gt; 
std::experimental::shared_ptr&lt;T&gt;
    reinterpret_pointer_cast( const std::experimental::shared_ptr&lt;U&gt;&amp; r ) noexcept;
}}
{{dcl end}}

创建 {{lc|std::experimental::shared_ptr}} 的新实例，其所存储的指针从 {{c|r}} 的存储指针使用转型表达式获得。如果 {{c|r}} 为空，则 {{tt|shared_ptr}} 也为空（但其所存储的指针不必为空）。

否则，新的 {{tt|shared_ptr}} 将与 {{c|r}} 共享所有权，但当 {{tt|dynamic_pointer_cast}} 所实施的 {{tt|dynamic_cast}} 返回空指针时为空。

令 {{tt|Y}} 为 {{c|typename std::experimental::shared_ptr&lt;T&gt;::element_type}}，则所得 {{lc|std::experimental::shared_ptr}} 中存储的指针将由以下调用获得（按相应顺序）：
@1@ {{c|static_cast&lt;Y*&gt;(r.get())}}。
@2@ {{c|dynamic_cast&lt;Y*&gt;(r.get())}}（如果 {{tt|dynamic_cast}} 的结果为空指针值，则返回的 {{tt|shared_ptr}} 为空）。
@3@ {{c|const_cast&lt;Y*&gt;(r.get())}}。
@4@ {{c|reinterpret_cast&lt;Y*&gt;(r.get())}}。

除非从 {{tt|U*}} 向 {{tt|T*}} 的转型良构，否则这些函数的行为未定义：
@1@ 除非 {{c|static_cast&lt;T*&gt;((U*)nullptr)}} 良构，否则行为未定义。
@2@ 除非 {{c|dynamic_cast&lt;T*&gt;((U*)nullptr)}} 良构，否则行为未定义。
@3@ 除非 {{c|const_cast&lt;T*&gt;((U*)nullptr)}} 良构，否则行为未定义。
@4@ 除非 {{c|reinterpret_cast&lt;T*&gt;((U*)nullptr)}} 良构，否则行为未定义。

===参数===
{{par begin}}
{{par|r|要转换的指针}}
{{par end}}

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/shared_ptr/dsc constructor}}
{{dsc inc|cpp/memory/shared_ptr/dsc pointer cast}}
{{dsc end}}
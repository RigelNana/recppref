{{cpp/experimental/optional/title|swap}}
{{cpp/experimental/optional/navbar}}
{{dcl begin}}
{{dcl|since=libfund_ts|1=
void swap( optional&amp; other ) noexcept(/* 见下文 */);
}}
{{dcl end}}

与 {{c|other}} 交换内容。

* 如果 {{c|*this}} 和 {{c|other}} 均不含有值，则此函数没有效果。

* 如果 {{c|*this}} 和 {{c|other}} 中仅一个含有值（令此对象为 {{tt|in}} 而另一个为 {{tt|un}}），则 {{tt|un}} 的所含值从 {{c|std::move(*in)}} [[cpp/language/direct_initialization|直接初始化]]，之后跟着对 {{tt|in}} 所含值如同以 {{c|in.val-&gt;T::~T()}} 进行析构。此调用后，{{tt|in}} 不含有值而 {{tt|un}} 含有值。

* 如果 {{c|*this}} 和 {{c|other}} 都含有值，则通过调用 {{c|using std::swap; swap(**this, *other)}} 交换所含值。{{tt|T}} 左值必须满足{{named req|Swappable}}。

===参数===
{{par begin}}
{{par|other|要与之交换内容的 {{tt|optional}} 对象}}
{{par end}}

===返回值===
（无）

===异常===
{{noexcept|std::is_nothrow_move_constructible&lt;T&gt;::value &amp;&amp; 
           noexcept(swap(std::declval&lt;T&amp;&gt;(), std::declval&lt;T&amp;&gt;()))}}
&lt;!-- this is broken; see LWG 2561 --&gt;
在抛出异常的情况下，{{c|*this}} 和 {{c|other}} 所含值的状态由类型 {{tt|T}} 的 {{tt|swap}} 或 {{tt|T}} 的移动构造函数（其中所调用者）的异常安全性保证确定。对于 {{c|*this}} 和 {{c|other}} 两者，如果对象含有值，则其之后仍含有值，反之亦然。

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/optional/dsc swap2}}
{{dsc end}}
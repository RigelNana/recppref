{{cpp/experimental/optional/title|optional}}
{{cpp/experimental/optional/navbar}}
{{dcl begin}}
{{dcl|num=1|since=libfund_ts|
constexpr optional() noexcept;
constexpr optional( std::experimental::nullopt_t ) noexcept;
}}
{{dcl|num=2|since=libfund_ts|
optional( const optional&amp; other );
}}
{{dcl|num=3|since=libfund_ts|
optional( optional&amp;&amp; other ) noexcept(/* see below */);
}}
{{dcl|num=4|since=libfund_ts|
constexpr optional( const T&amp; value );
}}
{{dcl|num=5|since=libfund_ts|
constexpr optional( T&amp;&amp; value );
}}
{{dcl|num=6|since=libfund_ts|
template&lt; class... Args &gt; 
constexpr explicit optional( std::experimental::in_place_t, Args&amp;&amp;... args );
}}
{{dcl|num=7|since=libfund_ts|
template&lt; class U, class... Args &gt;
constexpr explicit optional( std::experimental::in_place_t,
                             std::initializer_list&lt;U&gt; ilist, 
                             Args&amp;&amp;... args );
}}
{{dcl end}}

构造新 {{tt|optional}} 对象。

@1@ 构造''不含值''的对象。
@2@ 复制构造函数：如果 {{c|other}} 含有值，则如同从表达式 {{c|*other}} [[cpp/language/direct_initialization|直接初始化]]（但并非直接列表初始化）{{tt|T}} 类型的对象一样初始化所含的值。如果 {{c|other}} 并不含有值，则构造''不含值''的对象。
@3@ 移动构造函数：如果 {{c|other}} 含有值，则如同从表达式 {{c|std::move(*other)}} [[cpp/language/direct_initialization|直接初始化]]（但并非直接列表初始化）{{tt|T}} 类型的对象一样初始化所含的值，且''并不''使 {{c|other}} 为空：被移动 {{tt|optional}} 仍然''含有值''，但其值自身被移动。如果 {{c|other}} 并不含有值，则构造''不含值''的对象。
@4@ 构造''包含值''的 {{tt|optional}} 对象，如同从表达式 {{c|value}} [[cpp/language/direct_initialization|直接初始化]]（但并非直接列表初始化）{{tt|T}} 类型的对象一样进行初始化。如果由直接初始化所选中的 {{tt|T}} 的构造函数为 {{tt|constexpr}}，则此构造函数为 {{tt|constexpr}}。
@5@ 构造''包含值''的 {{tt|optional}} 对象，如同从表达式 {{c|std::move(value)}} [[cpp/language/direct_initialization|直接初始化]]（但并非直接列表初始化）{{tt|T}} 类型的对象一样进行初始化。如果由直接初始化所选中的 {{tt|T}} 的构造函数为 {{tt|constexpr}}，则此构造函数为 {{tt|constexpr}}。
@6@ 构造''包含值''的 {{tt|optional}} 对象，如同从实参 {{c|std::forward&lt;Args&gt;(args)...}} [[cpp/language/direct_initialization|直接初始化]]（但并非直接列表初始化）{{tt|T}} 类型的对象一样进行初始化。
@7@ 构造''包含值''的 {{tt|optional}} 对象，如同从实参 {{c|ilist, std::forward&lt;Args&gt;(args)...}} [[cpp/language/direct_initialization|直接初始化]]（但并非直接列表初始化）{{tt|T}} 类型的对象一样进行初始化。如果 {{cc|1=std::is_constructible&lt;T, std::initializer_list&lt;U&gt;&amp;, Args&amp;&amp;...&gt;::value != true}}，则此函数并不参与重载决议。

===Parameters===
{{par begin}}
{{par|other|从中复制其所包含值的另一 {{tt|optional}} 对象}}
{{par|value|用以初始化所包含值的值}}
{{par|args...|用以初始化所包含值的实参}}
{{par|ilist|用以初始化所包含值的初始化式列表}}
{{par hreq}}
{{par req named|T|CopyConstructible|overloads=2,4}}
{{par req named|T|MoveConstructible|overloads=3,5}}
{{par end}}

===异常===
@2@ 抛出 {{tt|T}} 的构造函数所抛出的任何异常。

@3@ 抛出 {{tt|T}} 的构造函数所抛出的任何异常。具有如下 {{tt|noexcept}} 声明：{{noexcept|std::is_nothrow_move_constructible&lt;T&gt;::value}}

@4-7@ 抛出 {{tt|T}} 的构造函数所抛出的任何异常。

===示例===
{{example|code=
#include &lt;experimental/optional&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::experimental::optional&lt;int&gt; o1,      // 空
                                     o2 = 1,  // 从右值初始化
                                     o3 = o2; // 复制构造函数

    std::experimental::optional&lt;std::string&gt; o4(std::experimental::in_place,
                                                {'a', 'b', 'c'});

    std::cout &lt;&lt; *o2 &lt;&lt; ' ' &lt;&lt; *o3 &lt;&lt; ' ' &lt;&lt; *o4 &lt;&lt; '\n';
}
|output=
1 1 abc
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/optional/dsc make_optional}}
{{dsc end}}
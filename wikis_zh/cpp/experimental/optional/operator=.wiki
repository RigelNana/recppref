{{cpp/experimental/optional/title|operator{{=}}}}
{{cpp/experimental/optional/navbar}}
{{dcl begin}}
{{dcl|since=libfund_ts|num=1|1=
optional&amp; operator=( std::experimental::nullopt_t ) noexcept;
}}
{{dcl|since=libfund_ts|num=2|1=
optional&amp; operator=( const optional&amp; other );
}}
{{dcl|since=libfund_ts|num=3|1=
optional&amp; operator=( optional&amp;&amp; other ) noexcept(/* see below */);
}}
{{dcl|since=libfund_ts|num=4|1=
template&lt; class U &gt; 
optional&amp; operator=( U&amp;&amp; value );
}}
{{dcl end}}

以 {{c|other}} 的内容替换 {{c|*this}} 的内容。

@1@ 如果调用前 {{c|*this}} 含有值，则如同以 {{c|val-&gt;T::~T()}} 调用析构函数销毁所含值。此调用后 {{c|*this}} 不含有值。

@2,3@ 赋值为 {{c|other}} 的状态。&lt;br&gt;
* 如果 {{c|*this}} 和 {{c|other}} 都不含有值，则函数没有效果。
* 如果 {{c|*this}} 含有值但 {{c|other}} 不含值，则通过调用析构函数销毁其所含值。此调用后 {{c|*this}} 不含有值。
* 如果 {{c|other}} 含有值，则取决于 {{c|*this}} 是否含有值，所含值要么从 {{c|*other}} {{v|2}} 或 {{c|std::move(*other)}} {{v|3}} [[cpp/language/direct_initialization|直接初始化]]，要么从之赋值。注意被移动的 {{tt|optional}} 仍然''含有值''。

@4@ 仅退化的完美转发赋值：取决于调用前 {{c|*this}} 是否含有值，所含值要么从 {{c|std::forward&lt;U&gt;(value)}} 直接初始化，要么从 {{c|std::forward&lt;U&gt;(value)}} 赋值。除非 {{c|std::is_same&lt;std::decay_t&lt;U&gt;, T&gt;::value}} 为 {{c|true}}，否则此函数不参与重载决议。

===Parameters===
{{par begin}}
{{par|other|要赋值其所含值的另一 {{tt|optional}} 对象}}
{{par|value|要赋给所含值的值}}
{{par hreq}}
{{par req named|T|CopyConstructible|CopyAssignable|overload=2}}
{{par req named|T|MoveConstructible|MoveAssignable|overload=3}}
{{par end}}

===返回值===
{{c|*this}}

===异常===
@2-4@ 抛出 {{tt|T}} 的构造函数或赋值运算符所抛出的任何异常。如果抛出了异常，则不改变 {{c|*this}}（以及 (2) 情况中 {{c|other}}）的初始化状态，即若对象含有值则它仍然含有值，反之亦然。{{c|value}} 的内容和 {{c|*this}} 与 {{c|other}} 的所含值取决于异常来源操作（复制构造函数、移动赋值等）的异常安全性保证。&lt;br&gt;
{{v|3}} 由如下的 {{tt|noexcept}} 声明：{{noexcept|std::is_nothrow_move_assignable&lt;T&gt;::value &amp;&amp; std::is_nothrow_move_constructible&lt;T&gt;::value}}

===注解===
用 {{c|1=op = {};}} 和 {{c|1=op = nullopt;}} 都可以将 {{tt|optional}} 对象 {{tt|op}} 变为空 {{tt|optional}}。

===示例===
{{example
|code=
#include &lt;experimental/optional&gt;
#include &lt;iostream&gt;

int main()
{
    std::experimental::optional&lt;const char*&gt; s1 = "abc", s2; // 构造函数
    s2 = s1; // 赋值
    s1 = "def"; // 衰退赋值 (U = char[4], T = const char*)
    std::cout &lt;&lt; *s2 &lt;&lt; ' ' &lt;&lt; *s1 &lt;&lt; '\n';
}
|output=
abc def
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/optional/dsc emplace}}
{{dsc end}}
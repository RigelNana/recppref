{{cpp/experimental/title | to_array}}
{{cpp/experimental/lib_extensions_2/navbar}}
{{fmbox | class=noprint | style=font-size: 0.8em | text='''并入 ISO C++''' 此页面上描述的功能自 2019 年 7 月起已并入主线 ISO C++ 标准；见 {{ltt|cpp/container/array/to_array|std::to_array}} {{mark since c++20}} }}
{{dcl begin}}
{{dcl header|experimental/array}}
{{dcl|since=libfund_ts_2|1=
template&lt; class T, std::size_t N &gt;
constexpr std::array&lt;std::remove_cv_t&lt;T&gt;, N&gt; to_array(T (&amp;a)[N]);
}}
{{dcl end}}

从内建数组 {{c|a}} 创建 {{lc|std::array}}。{{lc|std::array}} 的元素从 {{c|a}} 的对应元素复制初始化。

===参数===
{{par begin}}
{{par | a |用于初始化 {{lc|std::array}} 的内建数组}}
{{par end}}

===返回值===
从 {{c|a}} 的元素复制初始化对应元素的 {{lc|std::array}} 对象。

===可能的实现===
{{eq fun|1=
namespace detail
{
    template&lt;class T, std::size_t N, std::size_t... I&gt;
    constexpr std::array&lt;std::remove_cv_t&lt;T&gt;, N&gt;
        to_array_impl(T (&amp;a)[N], std::index_sequence&lt;I...&gt;)
    {
        return { {a[I]...} };
    }
}

template&lt;class T, std::size_t N&gt;
constexpr std::array&lt;std::remove_cv_t&lt;T&gt;, N&gt; to_array(T (&amp;a)[N])
{
    return detail::to_array_impl(a, std::make_index_sequence&lt;N&gt;{});
}
}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;cstdlib&gt;
#include &lt;experimental/array&gt;
#include &lt;unistd.h&gt;

// mkstemp(3) 可工作
template&lt;std::size_t N&gt;
int tempfd(char const (&amp;tmpl)[N])
{
    auto s = std::experimental::to_array(tmpl);
    int fd = mkstemp(s.data());
    if (fd != -1)
        unlink(s.data());

    return fd;
}

int main()
{
    int fd = tempfd("/tmp/test.XXXXXX");
    int rt = close(fd);
    assert(rt == 0);
}
|output=
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/dsc make array}}
{{dsc end}}

{{langlinks|en|ja}}
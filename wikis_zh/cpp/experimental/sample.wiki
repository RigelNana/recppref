{{cpp/experimental/title|sample}}
{{cpp/experimental/lib_extensions/navbar}}

{{dcl begin}}
{{dcl header|experimental/algorithm}}
{{dcl|num=1|since=libfund_ts|
template&lt; class PopulationIterator, class SampleIterator,
          class Distance, class URBG &gt;
SampleIterator sample( PopulationIterator first, PopulationIterator last,
                       SampleIterator out, Distance n, 
                       URBG&amp;&amp; g );
}}
{{dcl|num=2|since=libfund_ts_2|
template&lt; class PopulationIterator, class SampleIterator, class Distance &gt;
SampleIterator sample( PopulationIterator first, PopulationIterator last,
                       SampleIterator out, Distance n );
}}
{{dcl end}}

从序列 {{range|first|last}} 中选择 {{c|n}} 个元素，使得每个元素拥有相等的出现概率，并写入被选择元素到输出迭代器 {{c|out}}。

若 {{c|n}} 大于序列中的元素数，则选择 {{c|last - first}} 个元素。

仅若 {{tt|PopulationIterator}} 满足{{named req|ForwardIterator|向前迭代器}}的要求，算法才稳定。

@1@ 用随机数生成器 {{c|g}} 生成随机数。
@2@ 用[[cpp/experimental/lib extensions 2#简单的随机数生成设施|逐线程引擎]]生成随机数。

===参数===
{{par begin}}
{{par | first, last |指示从中抽样的范围（总体）的一对迭代器}}
{{par | out |要写入样本到其中的输出迭代器。必须不在 {{math|[first;last)}} 范围中}}
{{par | n |样本数}}
{{par | g |用作随机源的随机数生成器}}
{{par req named | PopulationIterator | InputIterator}}
{{par req named | SampleIterator | OutputIterator}}
{{par req |若 {{tt|PopulationIterator}} 不满足{{named req|ForwardIterator|向前迭代器}}，则 {{tt|SampleIterator}} 必须亦满足{{named req|RandomAccessIterator|随机访问迭代器}}的要求}}
{{par req | {{tt|PopulationIterator}} 的 value_type 必须可写入到 {{tt|out}}}}
{{par req | {{tt|Distance}} 必须为整数类型}}
{{par req | {{tt|URBG}} 必须满足{{named req|UniformRandomBitGenerator|均匀随机位生成器}}的要求，而其返回类型必须可转换为 {{tt|Distance}}}}
{{par end}}

===返回值===
返回输出的最后样本后的 {{c|out}} 的副本，即样本范围的末尾。

===复杂度===
与 {{c|std::distance(first,last)}} 成线性。

===注解===
此函数可以实现选择抽样或蓄水池抽样。

===示例===
{{example
|code=
#include &lt;experimental/algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;random&gt;
#include &lt;string&gt;
 
int main()
{
    std::string in = "abcdefgh", out;
    std::experimental::sample(in.begin(), in.end(), std::back_inserter(out),
                              5, std::mt19937{std::random_device{}()});
    std::cout &lt;&lt; "five random letters out of " &lt;&lt; in &lt;&lt; " : " &lt;&lt; out &lt;&lt; '\n';
}
|p=true
|output=
five random letters out of abcdefgh : cdefg
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc random_shuffle}}
{{dsc end}}

{{langlinks|en|ja}}
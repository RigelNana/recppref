{{cpp/title|assoc_laguerre|assoc_laguerref|assoc_laguerrel}}
{{cpp/experimental/special_math/navbar}}
{{dcl begin}}
{{dcl|num=1|
double      assoc_laguerre ( unsigned int n, unsigned int m, double x );
double      assoc_laguerre ( unsigned int n, unsigned int m, float x );
double      assoc_laguerre ( unsigned int n, unsigned int m, long double x );
float       assoc_laguerref( unsigned int n, unsigned int m, float x );
long double assoc_laguerrel( unsigned int n, unsigned int m, long double x );
}}
{{dcl|num=2|
double      assoc_laguerre ( unsigned int n, unsigned int m, IntegralType x );
}}
{{dcl end}}

@1@ 计算实参 {{c|x}} 的 {{c|n}} 度 {{c|m}} 阶{{enwiki|Laguerre_polynomials#Generalized_Laguerre_polynomials|连带拉盖尔多项式}}。
@2@ 一组接受任何[[cpp/types/is_integral|整数类型]]实参的重载或函数模板。等价于将实参转型为 {{c|double}} 后的 {{v|1}}。

{{cpp/experimental/special_math/macro_note|assoc_laguerre}}

===参数===
{{par begin}}
{{par|n|多项式的度数，无符号整数类型的值}}
{{par|m|多项式的阶数，无符号整数类型的值}}
{{par|x|实参，浮点或整数类型的值}}
{{par end}}

===返回值===
如果未发生错误，则返回 {{c|x}} 的连带拉盖尔多项式的值，即 {{math|(-1){{su|p=m}}{{mfrac|d{{su|p=m}}|dx{{su|p=m}}}}L{{su|b=n + m}}(x)}}（其中 {{math|L{{su|b=n + m}}(x)}} 为非连带拉盖尔多项式，{{c|std::laguerre(n + m, x)}}）。

===错误处理===
根据 {{lc|math_errhandling}} 的规定进行错误报告。

* 如果实参为 NaN，则返回 NaN 但不报告定义域错误。
* 如果 {{c|x}} 为负数，则发生定义域错误。
* 如果 {{c|n}} 或 {{c|m}} 大于或等于 128，则其行为由实现定义。

===注解===
不支持 TR 29124 但支持 TR 19768 的实现，在头文件 {{tt|tr1/cmath}} 和命名空间 {{tt|std::tr1}} 中提供此函数。

此函数的实现也在 [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_poly/laguerre.html boost.math 中可用]。

连带的拉盖尔多项式是方程 {{math|xy{{su|p=,,}} + (m + 1 - x)y{{su|p=,}} + ny {{=}} 0}} 的多项式解。

前几个为：
* {{tt|assoc_laguerre(0, m, x)}} {{=}} 1。
* {{tt|assoc_laguerre(1, m, x)}} {{=}} {{math|-x + m + 1}}。
* {{tt|assoc_laguerre(2, m, x)}} {{=}} {{math|{{mfrac|1|2}}[x{{su|p=2}} - 2(m + 2)x + (m + 1)(m + 2)]}}。
* {{tt|assoc_laguerre(3, m, x)}} {{=}} {{math|{{mfrac|1|6}}[-x{{su|p=3}} - 3(m + 3)x{{su|p=2}} - 3(m + 2)(m + 3)x + (m + 1)(m + 2)(m + 3)]}}。

===示例===
{{example
|code=
#define __STDCPP_WANT_MATH_SPEC_FUNCS__ 1
#include &lt;cmath&gt;
#include &lt;iostream&gt;

double L1(unsigned m, double x)
{
    return -x + m + 1;
}

double L2(unsigned m, double x)
{
    return 0.5 * (x * x - 2 * (m + 2) * x + (m + 1) * (m + 2));
}

int main()
{
    // spot-checks
    std::cout &lt;&lt; std::assoc_laguerre(1, 10, 0.5) &lt;&lt; '=' &lt;&lt; L1(10, 0.5) &lt;&lt; '\n'
              &lt;&lt; std::assoc_laguerre(2, 10, 0.5) &lt;&lt; '=' &lt;&lt; L2(10, 0.5) &lt;&lt; '\n';
}
|output=
10.5=10.5
60.125=60.125
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/special_math/dsc laguerre}}
{{dsc end}}

===外部链接===
{{eli|[https://mathworld.wolfram.com/AssociatedLaguerrePolynomial.html Weisstein, Eric W. "Associated Laguerre Polynomial."] From MathWorld &amp;mdash; A Wolfram Web Resource.}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
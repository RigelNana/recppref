{{cpp/title|beta|betaf|betal}}
{{cpp/experimental/special_functions/navbar}}
{{dcl begin}}
{{dcl|num=1|
double      beta( double x, double y );
float       betaf( float x, float y );
long double betal( long double x, long double y );
}}
{{dcl|num=2|
Promoted    beta( Arithmetic x, Arithmetic y );
}}
{{dcl end}}

@1@ 计算 {{c|x}} 和 {{c|y}} 的[[enwiki:Beta_function|beta 函数]]。
@2@ 一组接受任何未被 {{v|1}} 覆盖的算术类型实参组合的重载或函数模板。如果任何实参具有[[cpp/types/is_integral|整数类型]]，则其被转型为 {{c|double}}。如果任何实参为 {{c|long double}}，则返回类型 {{tt|Promoted}} 也为 {{c|long double}}，否则返回类型总为 {{c|double}}。
等价于将实参转型为 {{c|double}} 后的 {{v|1}}。

{{cpp/experimental/special_functions/macro_note|beta}}

===参数===
{{par begin}}
{{par|x, y|浮点或整数类型的值}}
{{par end}}

===返回值===
如果未发生错误，则返回 {{c|x}} 和 {{c|y}} 的 beta 函数的值，即 {{math|{{minteg|0|1|t{{su|p=x-1}}(1 - t){{su|p=(y-1)}}d''t''}}}} 或等价的 {{math|{{mfrac|Γ(x)Γ(y)|Γ(x + y)}}}}。


===错误处理===
根据 {{lc|math_errhandling}} 的规定进行错误报告。
* 如果任何实参为 NaN，则返回 NaN 但不报告定义域错误。
* 仅当 {{c|x}} 和 {{c|y}} 均大于零时，要求此函数有定义，否则允许报告定义域错误。

===注解===
不支持 TR 29124 但支持 TR 19768 的实现，在头文件 {{tt|tr1/cmath}} 和命名空间 {{tt|std::tr1}} 中提供此函数。

此函数的实现也在 [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_beta/beta_function.html boost.math 中可用]。

{{c|beta(x, y)}} 等于 {{c|beta(y, x)}}。

当 {{c|x}} 和 {{c|y}} 是正整数时，beta(x, y) 等于 {{mathjax-or|1=\(\frac{(x - 1)!(y - 1)!}{(x + y - 1)!}\)|2={{mfrac|(x - 1)!(y - 1)!|(x + y - 1)!}}}}。

可以基于 beta 函数表现二项式系数：{{mathjax-or|1=\(\binom{n}{k} = \frac{1}{(n + 1)B(n - k + 1, k + 1)}\)|2={{mparen|(|)|n|k}}{{=}}{{mfrac|1|(n + 1)Β(n - k + 1, k + 1)}}}}。

===示例===
{{example
|(works as shown with gcc 6.0)
|code=
#define __STDCPP_WANT_MATH_SPEC_FUNCS__ 1
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

double binom(int n, int k)
{
    return 1 / ((n + 1) * std::beta(n - k + 1, k + 1));
}

int main()
{
    std::cout &lt;&lt; "Pascal's triangle:\n";
    for (int n = 1; n &lt; 10; ++n)
    {
        std::cout &lt;&lt; std::string(20 - n * 2, ' ');
        for (int k = 1; k &lt; n; ++k)
            std::cout &lt;&lt; std::setw(3) &lt;&lt; binom(n, k) &lt;&lt; ' ';
        std::cout &lt;&lt; '\n';
    }
}
|output=
Pascal's triangle:
                 
                  2 
                3   3 
              4   6   4 
            5  10  10   5 
          6  15  20  15   6 
        7  21  35  35  21   7 
      8  28  56  70  56  28   8 
    9  36  84 126 126  84  36   9 
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc tgamma}}
{{dsc end}}

===外部链接===
[https://mathworld.wolfram.com/BetaFunction.html Weisstein, Eric W. "Beta Function."] From MathWorld--A Wolfram Web Resource.

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
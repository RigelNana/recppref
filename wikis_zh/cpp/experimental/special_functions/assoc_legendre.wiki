{{cpp/title|assoc_legendre|assoc_legendref|assoc_legendrel}}
{{cpp/experimental/special_math/navbar}}
{{dcl begin}}
{{dcl|num=1|
double      assoc_legendre( unsigned int n, unsigned int m, double x );
double      assoc_legendre( unsigned int n, unsigned int m, float x );
double      assoc_legendre( unsigned int n, unsigned int m, long double x );
float       assoc_legendref( unsigned int n, unsigned int m, float x );
long double assoc_legendrel( unsigned int n, unsigned int m, long double x );
}}
{{dcl|num=2|
double      assoc_legendre( unsigned int n, unsigned int m, IntegralType x );
}}
{{dcl end}}

@1@ 计算实参 {{c|x}} 的 {{c|n}} 度 {{c|m}} 阶[[enwiki:Associated_Legendre_polynomials|连带勒让德多项式]]。
@2@ 一组接受任何[[cpp/types/is_integral|整数类型]]实参的重载或函数模板。等价于将实参转型为 {{c|double}} 后的 {{v|1}}。

{{cpp/experimental/special_math/macro_note|assoc_legendre}}

===参数===
{{par begin}}
{{par|n|多项式的度数，无符号整数类型的值}}
{{par|m|多项式的阶数，无符号整数类型的值}}
{{par|x|实参，浮点或整数类型的值}}
{{par end}}

===返回值===
如果未发生错误，则返回 {{c|x}} 的连带勒让德多项式的值，即 {{math|(1 - x{{su|p=2}}){{su|p=m/2}} {{mfrac|d{{su|p=m}}|dx{{su|p=m}}}}P{{su|b=n}}(x)}}（其中 {{math|P{{su|b=n}}(x)}} 为非连带勒让德多项式，{{c|std::legendre(n, x)}}）。

===错误处理===
根据 {{lc|math_errhandling}} 的规定进行错误报告。

* 如果实参为 NaN，则返回 NaN 但不报告定义域错误。
* 如果 {{math|{{!}}x{{!}} &gt; 1}}，则发生定义域错误。
* 如果 {{tt|n}} 大于或等于 128，则其行为由实现定义。

===注解===
不支持 TR 29124 但支持 TR 19768 的实现，在头文件 {{tt|tr1/cmath}} 和命名空间 {{tt|std::tr1}} 中提供此函
此函数的实现也在 [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_poly/legendre.html boost.math 中可用]。

前几个连带勒让德多项式：
* assoc_legendre(0, 0, x) {{=}} 1。
* assoc_legendre(1, 0, x) {{=}} {{math|x}}。
* assoc_legendre(1, 1, x) {{=}} {{math|-(1 - x{{su|p=2}}){{su|p=1/2}}}}。
* assoc_legendre(2, 0, x) {{=}} {{math|{{mfrac|1|2}}(3x{{su|p=2}} - 1)}}。
* assoc_legendre(2, 1, x) {{=}} {{math|-3x(1 - x{{su|p=2}}){{su|p=1/2}}}}。
* assoc_legendre(2, 2, x) {{=}} {{math|3(1 - x{{su|p=2}})}}。

===示例===
{{example
|(works as shown with gcc 6.0)
|code=
#define __STDCPP_WANT_MATH_SPEC_FUNCS__ 1
#include &lt;cmath&gt;
#include &lt;iostream&gt;

double P20(double x)
{
    return 0.5 * (3 * x * x - 1);
}

double P21(double x)
{
    return -3.0 * x * std::sqrt(1 - x * x);
}

double P22(double x)
{
    return 3 * (1 - x * x);
}

int main()
{
    // spot-checks
    std::cout &lt;&lt; std::assoc_legendre(2, 0, 0.5) &lt;&lt; '=' &lt;&lt; P20(0.5) &lt;&lt; '\n'
              &lt;&lt; std::assoc_legendre(2, 1, 0.5) &lt;&lt; '=' &lt;&lt; P21(0.5) &lt;&lt; '\n'
              &lt;&lt; std::assoc_legendre(2, 2, 0.5) &lt;&lt; '=' &lt;&lt; P22(0.5) &lt;&lt; '\n';
}
|output=
-0.125=-0.125
-1.29904=-1.29904
2.25=2.25
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/special_math/dsc legendre}}
{{dsc end}}

===外部链接===
[https://mathworld.wolfram.com/AssociatedLegendrePolynomial.html Weisstein, Eric W. "Associated Legendre Polynomial."] From MathWorld--A Wolfram Web Resource.

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
{{cpp/experimental/title|flex_barrier}}
{{cpp/experimental/concurrency/flex_barrier/navbar}}
{{fmbox | class=noprint | style=font-size: 0.8em | text='''并入 ISO C++''' 此页面上描述的功能自 2019 年 7 月起已并入主线 ISO C++ 标准；见 {{ltt|cpp/thread/barrier|std::barrier}} {{mark since c++20}} }}
{{dcl begin}}
{{dcl header|experimental/barrier}}
{{dcl | since=concurrency |
class flex_barrier;
}}
{{dcl end}}

类 {{tt|std::experimental::flex_barrier}} 提供一种线程协调机制，允许参与线程的集合阻塞直至操作完成。不同于 {{lc|std::experimental::latch}}，屏障可重用；一旦从屏障的同步点释放参与线程，它们就能重用同一屏障。

屏障拥有完成阶段，一旦参与线程集合中的所有线程都到达同步点，则由参与线程之一执行完成阶段。 {{tt|arrive_and_wait}} 和 {{tt|arrive_and_drop}} 的调用[[cpp/atomic/memory_order|同步于]]完成阶段的开始；完成阶段的结束同步于阻塞于其完成的所有调用的返回。

{{tt|std::experimental::flex_barrier}} 允许用户以一个函数对象控制完成阶段。若函数对象返回 -1，则不更改参与线程集合（而下个循环中同一参与线程集合必须抵达同步点）；否则参与线程集合变为拥有等于返回值 {{tt|N}} 的新大小的集合，并由到达屏障同步点的下 {{tt|N}} 个线程组成。

不需要此功能的用户可以使用 {{lc|std::experimental::barrier}}。

===成员函数===
{{dsc begin}}
{{dsc inc | cpp/experimental/flex_barrier/dsc constructor}}
{{dsc inc | cpp/experimental/flex_barrier/dsc destructor}}
{{dsc inc | cpp/experimental/flex_barrier/dsc operator{{=}}}}

{{dsc inc | cpp/experimental/flex_barrier/dsc arrive_and_wait}}
{{dsc inc | cpp/experimental/flex_barrier/dsc arrive_and_drop}}

{{dsc end}}

{{langlinks|en|ja}}
{{cpp/experimental/source_location/title|function_name}}
{{cpp/experimental/lib extensions 2/source_location/navbar}}
{{ddcl | since=libfund_ts_2 | 1=
constexpr const char* function_name() const noexcept;
}}

返回与此对象所表示的位置关联的函数名，若它存在。

===参数===
（无）

===返回值===
若此对象表示函数体中的位置，则返回对应该函数名的实现定义的空终止字节字符串。

否则，返回空字符串。

===示例===
{{example
 | 以下示例展示可以如何用 {{tt|std::source_location::function_name()}} 打印函数、构造函数、析构函数或重载的 {{tt|operator()}} 的名字。
 | code=
#include &lt;experimental/source_location&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;
 
inline void function_name(
    const std::string_view signature = "()",
    const std::experimental::source_location&amp; location
        = std::experimental::source_location::current())
{
    std::cout
        &lt;&lt; location.function_name() // &lt;- 调用方的名字！
        &lt;&lt; signature
        &lt;&lt; '\n';
}
 
void foo() { function_name(); }
 
struct S {
    S() { function_name(); }
    S(int) { function_name("(int)"); }
    S&amp; operator=(S const&amp;) { function_name("(const S&amp;)"); return *this; }
    S&amp; operator=(S&amp;&amp;) { function_name("(S&amp;&amp;)"); return *this; }
    ~S() { function_name(); }
};
 
int main()
{
    foo();
    S p;
    S q{42};
    p = q;
    p = std::move(q);
}
 | p=true
 | output=
foo()
S()
S(int)
operator=(const S&amp;)
operator=(S&amp;&amp;)
~S()
~S()
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/experimental/source_location/dsc line}}
{{dsc inc | cpp/experimental/source_location/dsc column}}
{{dsc inc | cpp/experimental/source_location/dsc file_name}}
{{dsc see cpp | cpp/preprocessor/line |文件名和行信息|nomono=true}}
{{dsc end}}

{{langlinks|en|ja}}
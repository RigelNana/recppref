{{cpp/title|n=experimental::|any_cast}}
{{cpp/experimental/any/navbar}}
{{dcl begin}}
{{dcl|since=libfund_ts|num=1|
template&lt;class ValueType&gt;
    ValueType any_cast(const any&amp; operand);
}}
{{dcl|since=libfund_ts|num=2|
template&lt;class ValueType&gt;
    ValueType any_cast(any&amp; operand);
}}
{{dcl|since=libfund_ts|num=3|
template&lt;class ValueType&gt;
    ValueType any_cast(any&amp;&amp; operand);
}}
{{dcl|since=libfund_ts|num=4|
template&lt;class ValueType&gt;
    const ValueType* any_cast(const any* operand) noexcept;
}}
{{dcl|since=libfund_ts|num=5|
template&lt;class ValueType&gt;
    ValueType* any_cast(any* operand) noexcept;
}}
{{dcl end}}

进行对所含对象的类型安全访问。

对于 {{v|1-3}}，若 {{tt|ValueType}} 并非引用且 {{c|std::is_copy_constructible&lt;ValueType&gt;::value}} 为 {{c|false}}，则程序非良构。

===参数===
{{par begin}}
{{par|operand|目标 {{tt|any}} 对象}}
{{par end}} 

===返回值===
@1@ 返回 {{c|*any_cast&lt;std::add_const_t&lt;std::remove_reference_t&lt;ValueType&gt;&gt;&gt;(&amp;operand)}}。
@2,3@ 返回 {{c|*any_cast&lt;std::remove_reference_t&lt;ValueType&gt;&gt;(&amp;operand)}}。
@4,5@ 若 {{c|operand}} 不是空指针，且请求的 {{tt|ValueType}} 的 {{tt|typeid}} 匹配 {{c|operand}} 的 {{tt|typeid}}，则为指向 {{c|operand}} 所含值的指针，否则为空指针。

===异常===
@1-3@ 若请求的 {{tt|ValueType}} 的 {{tt|typeid}} 不匹配 {{c|operand}} 内容的 {{tt|typeid}}，则抛出 {{tt|bad_any_cast}}。
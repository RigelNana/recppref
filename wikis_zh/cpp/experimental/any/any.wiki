{{cpp/experimental/any/title|any}}
{{cpp/experimental/any/navbar}}
{{dcl begin}}
{{dcl|num=1|since=libfund_ts|
any() noexcept;
}}
{{dcl|num=2|since=libfund_ts|
any( const any&amp; other );
}}
{{dcl|num=3|since=libfund_ts|
any( any&amp;&amp; other ) noexcept;
}}
{{dcl|num=4|since=libfund_ts|
template&lt;typename ValueType&gt;
    any( ValueType&amp;&amp; value );
}}
{{dcl end}}

构造新的 {{tt|any}} 对象。 

@1@ 构造空对象。

@2,3@ 复制 {{v|2}} 或移动 {{v|3}} {{c|other}} 的内容进新实例，从而任何内容的类型和值都等于构造函数调用前的 {{c|other}} 所拥有者，或者若 {{c|other}} 为空则内容为空。

@4@ 构造对象，其初始内容为 {{c|std::decay_t&lt;ValueType&gt;}} 类型对象，从 {{c|std::forward&lt;ValueType&gt;(value)}} [[cpp/language/direct initialization|直接初始化]]它。若 {{c|1=std::is_copy_constructible&lt;std::decay_t&lt;ValueType&gt;&gt;::value}} 是 {{c|false}}，则程序非良构。{{cpp/enable if| {{c|std::decay_t&lt;ValueType&gt;}} 与 {{c|any}} 并非相同类型}}。

===模板形参===
{{par begin}}
{{par|ValueType|所含的值类型}}
{{par hreq}}
{{par req named|std::decay_t&lt;ValueType&gt;|CopyConstructible}}
{{par end}}

===参数===
{{par begin}}
{{par|other|另一个用以复制或移动的 {{tt|any}} 对象}}
{{par|value|用以初始化所含值的值}}
{{par end}}

===异常===
@2,4@ 抛出所含类型的构造函数所抛出的任何异常。

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/any/dsc operator{{=}}}}
{{dsc end}}
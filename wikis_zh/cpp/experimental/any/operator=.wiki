{{cpp/experimental/any/title|operator{{=}}}}
{{cpp/experimental/any/navbar}}
{{dcl begin}}
{{dcl|since=libfund_ts|num=1|1=
any&amp; operator=( const any&amp; rhs );
}}
{{dcl|since=libfund_ts|num=2|1=
any&amp; operator=( any&amp;&amp; rhs ) noexcept;
}}
{{dcl|since=libfund_ts|num=3|1=
template&lt; typename ValueType &gt;
    any&amp; operator=( ValueType&amp;&amp; rhs );
}}
{{dcl end}}

将内容赋值给所含值。

@1@ 通过复制 {{c|rhs}} 的状态赋值，如同用 {{c|any(rhs).swap(*this)}}。
@2@ 通过移动 {{c|rhs}} 的状态赋值，如同用 {{c|any(std::move(rhs)).swap(*this)}}。赋值后 {{c|rhs}} 留在有效但未指定的状态。
@3@ 以 {{tt|rhs}} 的类型和值赋值，如同用 {{c|any(std::forward&lt;ValueType&gt;(rhs)).swap(*this)}}。若 {{c|1=std::is_copy_constructible&lt;std::decay_t&lt;ValueType&gt;&gt;::value}} 为 {{c|false}}，则程序非良构{{cpp/enable if|{{c|std::decay_t&lt;ValueType&gt;}} 与 {{c|any}} 不是同一类型}}。

===模板形参===
{{par begin}}
{{par|ValueType|被含有的值类型}}
{{par hreq}}
{{par req named|std::decay_t&lt;ValueType&gt;|CopyConstructible}}
{{par end}}

===参数===
{{par begin}}
{{par|rhs|要赋值给其所含值的对象}}
{{par end}}

===返回值===
{{c|*this}}

===异常===
@1,3@ 抛出 {{lc|bad_alloc}} 或所含类型的构造函数所抛出的任何异常。若抛出异常，则无效果（强异常保证）。

===参阅===
{{dsc begin}}
{{dsc inc|cpp/experimental/any/dsc constructor}}
{{dsc end}}
{{cpp/experimental/title|when_all}}
{{cpp/experimental/concurrency/navbar}}
{{dcl begin}}
{{dcl header|experimental/future}}
{{dcl|num=1|since=concurrency|1=
template&lt; class InputIt &gt;
auto when_all( InputIt first, InputIt last )
    -&gt; future&lt;std::vector&lt;typename std::iterator_traits&lt;InputIt&gt;::value_type&gt;&gt;; 
}}
{{dcl|num=2|since=concurrency|1=
template&lt; class... Futures &gt;
auto when_all( Futures&amp;&amp;... futures )
    -&gt; future&lt;std::tuple&lt;std::decay_t&lt;Futures&gt;...&gt;&gt;;
}}
{{dcl end}}

创建 {{lc|std::experimental::future|future}} 对象，它将在所有输入 {{tt|future}} 和 {{lc|std::experimental::shared_future|shared_future}} 就绪后变为就绪。若任何输入 {{tt|future}} 或 {{tt|shared_future}} 非法则行为未定义。

具体而言，令 {{tt|Sequence}} 对 {{v|1}} 为 {{c|std::vector&lt;typename std::iterator_traits&lt;InputIt&gt;::value_type&gt;}}，对 {{v|2}} 为 {{c|std::tuple&lt;std::decay_t&lt;Futures&gt;...&gt;}}。此函数模板创建含 {{tt|Sequence}} 的共享状态，并返回指代该共享状态的 {{tt|future}}。移动每个输入 {{tt|future}} 到共享状态中的 {{tt|Sequence}} 的对应对象中，复制每个输入 {{tt|shared_future}} 到共享状态中的 {{tt|Sequence}} 中的对应对象。{{tt|Sequence}} 中的对象顺序匹配实参的顺序。

@1@此函数仅若 {{tt|InputIt}} 的值类型（即 {{c|typename std::iterator_traits&lt;InputIt&gt;::value_type}}）为 {{lc|std::experimental::future}} 或 {{lc|std::experimental::shared_future}} 才参与重载决议。
@2@此函数仅若每个实参为（可有 cv 限定的）{{lc|std::experimental::shared_future}} 或无 cv 限定的 {{lc|std::experimental::future}} 才参与重载决议（正式而言，对于 {{tt|Futures}} 中的每个 {{tt|Fn}}，要么 {{c|std::remove_reference_t&lt;Fn&gt;}} 为 {{c|std::experimental::future&lt;Rn&gt;}}，要么 {{c|std::decay_t&lt;Fn&gt;}} 为 {{c|std::experimental::shared_future&lt;Rn&gt;}}）。

此调用后，每个输入 {{tt|future}} 不再合法；每个输入 {{tt|shared_future}} 保持合法。

===返回值===
指代调用所创建的共享状态的 {{tt|future}}。该 {{tt|future}} 始终 {{c|valid()}}，而它在调用的所有输入 {{tt|future}} 和 {{tt|shared_future}} 就绪时变为就绪。

@1@ 若范围为空（即 {{c|first {{==}} last}}），则返回的 {{tt|future}} 含有空 {{tt|vector}} 且立即就绪。
@2@ 若不提供实参，则返回 {{tt|future&lt;std::tuple&lt;&gt;&gt;}} 且立即就绪。

{{langlinks|en}}
{{title|执行控制库 {{mark since c++26}}}}
{{cpp/execution/navbar}}

执行控制库提供了用于在通用执行资源上管理异步执行的框架。

该库的目标是提供针对异步操作的基本术语类型，并允许以简便和可组合的方式构建任务执行图。

==库范围的定义==

* '''发送器'''：对要发送去执行的工作的描述。产生操作状态（见下文）。
:* 发送器将它们的结果异步“发送”给称为“接收器”（见下文）的监听者。
:* 可以用通用算法把发送器组合成'''任务图'''。
:* '''发送器工厂/适配器'''是捕捉了满足 {{lc|sender}} 概念的对象中的常见异步模式的通用算法。
* '''接收器'''：泛化的回调，它消耗或“接受”由发送器产生的异步结果。
:* 接收器包含三个不同“通道”，发送器可以通过它们传播成功、失败和取消的结果，分别称为“值”、“错误”和“停止”通道。
:* 接收器提供可扩展的执行环境：可以由消耗方用来参数化异步操作的一组键/值对。
* '''操作状态'''：包含异步操作所需状态的对象。
:* 当发送器和接收器被传递给 {{lc|std::execution::connect}} 时，就被连接起来。
:* 将发送器和接收器连接起来的结果就是一个操作状态。
:* 当在操作状态上调用“{{tt|start}}”后，其工作才会加入队列执行。
:* 一旦启动，则操作状态的生存期在异步操作完成前都不会结束，且其地址必须稳定。
* '''调度器'''：对执行上下文的轻量级句柄。
:* 执行上下文是诸如线程池或 GPU 流这样的异步执行源。
:* 调度器是工厂或发送器，它在执行上下文所拥有的某个执行线程中完成其接收器。

==库工具==

===概念===
====调度器====
{{dsc begin}}
{{dsc header|execution}}
{{dsc namespace|std::execution}}
{{dsc inc|cpp/execution/dsc scheduler}}
{{dsc end}}

====发送器====
{{dsc begin}}
{{dsc header|execution}}
{{dsc namespace|std::execution}}
{{dsc inc|cpp/execution/dsc sender}}
{{dsc inc|cpp/execution/dsc sender_in}}
{{dsc inc|cpp/execution/dsc sender_to}}
{{dsc end}}

====接收器====
{{dsc begin}}
{{dsc header|execution}}
{{dsc namespace|std::execution}}
{{dsc inc|cpp/execution/dsc receiver}}
{{dsc inc|cpp/execution/dsc receiver_of}}
{{dsc end}}

====操作状态====
{{dsc begin}}
{{dsc header|execution}}
{{dsc namespace|std::execution}}
{{dsc inc|cpp/execution/dsc operation_state}}
{{dsc end}}

===工具组件===
====执行上下文====
{{dsc begin}}
{{dsc header|execution}}
{{dsc namespace|std::execution}}
{{dsc inc|cpp/execution/dsc run_loop}}
{{dsc end}}

====执行域====
{{dsc begin}}
{{dsc header|execution}}
{{dsc namespace|std::execution}}
{{dsc inc|cpp/execution/dsc default_domain}}
{{dsc inc|cpp/execution/dsc transform_sender}}
{{dsc inc|cpp/execution/dsc transform_env}}
{{dsc inc|cpp/execution/dsc apply_sender}}
{{dsc end}}

====向前进展保证====
{{dsc begin}}
{{dsc header|execution}}
{{dsc namespace|std::execution}}
{{dsc inc|cpp/execution/dsc forward_progress_guarantee}}
{{dsc end}}

====环境====
{{dsc begin}}
{{dsc header|execution}}
{{dsc namespace|std::execution}}
{{dsc inc|cpp/execution/dsc prop}}
{{dsc inc|cpp/execution/dsc env}}
{{dsc inc|cpp/execution/dsc get_env}}
{{dsc end}}

====查询====
{{dsc begin}}
{{dsc header|execution}}
{{dsc inc|cpp/execution/dsc forwarding_query}}
{{dsc inc|cpp/execution/dsc get_allocator}}
{{dsc inc|cpp/execution/dsc get_stop_token}}
{{dsc inc|cpp/execution/dsc get_domain}}
{{dsc inc|cpp/execution/dsc get_scheduler}}
{{dsc inc|cpp/execution/dsc get_delegation_scheduler}}
{{dsc inc|cpp/execution/dsc get_completion_scheduler}}
{{dsc inc|cpp/execution/dsc get_forward_progress_guarantee}}
{{dsc end}}

====完成签名====
{{dsc begin}}
{{dsc header|execution}}
{{dsc namespace|std::execution}}
{{dsc inc|cpp/execution/dsc completion_signatures}}
{{dsc inc|cpp/execution/dsc get_completion_signatures}}
{{dsc inc|cpp/execution/dsc transform_completion_signatures}}
{{dsc inc|cpp/execution/dsc transform_completion_signatures_of}}
{{dsc inc|cpp/execution/dsc tag_of_t}}
{{dsc inc|cpp/execution/dsc value_types_of_t}}
{{dsc inc|cpp/execution/dsc error_types_of_t}}
{{dsc inc|cpp/execution/dsc sends_stopped}}
{{dsc end}}

====协程工具====
{{dsc begin}}
{{dsc header|execution}}
{{dsc namespace|std::execution}}
{{dsc inc|cpp/execution/dsc as_awaitable}}
{{dsc inc|cpp/execution/dsc with_awaitable_senders}}
{{dsc end}}

===核心操作===
====操作状态====
{{dsc begin}}
{{dsc header|execution}}
{{dsc namespace|std::execution}}
{{dsc inc|cpp/execution/dsc connect}}
{{dsc inc|cpp/execution/dsc start}}
{{dsc end}}

====完成函数====
这些函数由发送器调用，以向它们的接收器告知工作完成。
{{dsc begin}}
{{dsc header|execution}}
{{dsc namespace|std::execution}}
{{dsc inc|cpp/execution/dsc set_value}}
{{dsc inc|cpp/execution/dsc set_error}}
{{dsc inc|cpp/execution/dsc set_stopped}}
{{dsc end}}

===发送器算法===
&lt;!--{{dsc namespace|std::execution}}--&gt;
{{todo|WIP update to current standard in progress}}

====发送器工厂====
发送器工厂是返回发送器的函数，且其形参具有使得概念 {{lconcept|sender}} 为 {{c|false}} 的类型。

以下为发送器工厂：

{{dsc begin}}
{{dsc header|execution}}
{{dsc namespace|std::execution}}
{{dsc inc|cpp/execution/dsc just}}
{{dsc inc|cpp/execution/dsc just_error}}
{{dsc inc|cpp/execution/dsc just_stopped}}
{{dsc inc|cpp/execution/dsc read_env}}
{{dsc inc|cpp/execution/dsc schedule}}
{{dsc end}}

====可连接管道的发送器适配器====
{{dsc begin}}
{{dsc header|execution}}
{{dsc namespace|std::execution}}
{{dsc inc|cpp/execution/dsc sender_adaptor_closure}}
{{dsc end}}

====发送器适配器====
发送器适配器是返回发送器的函数，且它包含至少一个形参的类型满足 {{lconcept|sender}} 概念，且所返回的发送器是此适配器函数的发送器实参的父发送器。

以下为发送器适配器：
{{dsc begin}}
{{dsc header|execution}}
{{dsc namespace|std::execution}}
{{dsc inc|cpp/execution/dsc starts_on}}
{{dsc inc|cpp/execution/dsc continues_on}}
{{dsc inc|cpp/execution/dsc on}}
{{dsc inc|cpp/execution/dsc schedule_from}}
{{dsc inc|cpp/execution/dsc then}}
{{dsc inc|cpp/execution/dsc upon_error}}
{{dsc inc|cpp/execution/dsc upon_stopped}}
{{dsc inc|cpp/execution/dsc let_value}}
{{dsc inc|cpp/execution/dsc let_error}}
{{dsc inc|cpp/execution/dsc let_stopped}}
{{dsc inc|cpp/execution/dsc bulk}}
{{dsc inc|cpp/execution/dsc split}}
{{dsc inc|cpp/execution/dsc when_all}}
{{dsc inc|cpp/execution/dsc when_all_with_variant}}
{{dsc inc|cpp/execution/dsc into_variant}}
{{dsc inc|cpp/execution/dsc stopped_as_optional}}
{{dsc inc|cpp/execution/dsc stopped_as_error}}&lt;!-- dropped
{{dsc inc|cpp/execution/dsc ensure_started}}
{{dsc inc|cpp/execution/dsc transfer}}--&gt;
{{dsc end}}

===发送器消耗器===
发送器消耗器是一种算法，它接受一个或多个发送器为参数且并不返回发送器。

{{dsc begin}}
{{dsc header|execution}}
{{dsc namespace|std::this_thread}}
{{dsc inc|cpp/thread/dsc sync_wait}}
{{dsc inc|cpp/thread/dsc sync_wait_with_variant}}
{{dsc end}}

===示例===
{{example
|此示例的一个版本在 [https://godbolt.org/z/vdxGsxsKd godbolt.org]，它使用的是 [https://github.com/NVIDIA/stdexec stdexec]，一个 {{lc|std::execution}} 的实验性参考实现。
|code=
#include &lt;cstdio&gt;
#include &lt;execution&gt;
#include &lt;string&gt;
#include &lt;thread&gt;
#include &lt;utility&gt;
using namespace std::literals;

int main()
{
    std::execution::run_loop loop;

    std::jthread worker([&amp;](std::stop_token st)
    {
        std::stop_callback cb{st, [&amp;]{ loop.finish(); }&lt;!----&gt;};
        loop.run();
    });
    
    std::execution::sender auto hello = std::execution::just("hello world"s);
    std::execution::sender auto print
        = std::move(hello)
        {{!}} std::execution::then([](std::string msg)
        {
            return std::puts(msg.c_str());
        });
    
    std::execution::scheduler auto io_thread = loop.get_scheduler();
    std::execution::sender auto work = std::execution::on(io_thread, std::move(print));
    
    auto [result] = std::this_thread::sync_wait(std::move(work)).value();
    
    return result;
}
|output=
hello world
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/thread/dsc async}}
{{dsc end}}

{{langlinks|en|es}}
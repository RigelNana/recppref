{{title|范围库 {{mark since c++20}}}}
{{cpp/ranges/navbar}}

范围库是对迭代器和泛型算法库的一个扩展，使得迭代器和算法可以通过组合变得更强大，并且减少错误。

范围库创造并操作范围''视图''，它们是间接表示可遍历的序列（''范围''）的轻量对象。
范围是对以下内容的抽象：
* {{range/core|begin|end}} &amp;ndash; 迭代器对，例如，范围可以从容器隐式转换而得。所有接受迭代器对的算法现在都有接受范围的重载（例如 {{ltt|cpp/algorithm/ranges/sort|ranges::sort}}）
* {{counted range/core|begin|size}} &amp;ndash; 计数的序列，例如 {{ltt|cpp/ranges/view_counted|views::counted}} 返回的范围
* {{range/core|begin|''谓词''}} &amp;ndash; 按条件终止的序列，例如 {{ltt|cpp/ranges/take_while_view|views::take_while}} 返回的范围
* {{range/core|begin|..}} &amp;ndash; 无界序列，例如 {{ltt|cpp/ranges/iota_view|views::iota}} 返回的范围

范围库包括急切应用到范围上的[[cpp/algorithm/ranges|范围算法]]，和惰性地应用到视图上的[[#范围适配器|范围适配器]]。适配器可以组合成管线，它们的动作在视图迭代时实际发生。

{{ddcl|header=ranges|since=c++20|1=
namespace std {
    namespace views = ranges::views;
}
}}

提供命名空间别名 {{tt|std::views}}，作为 {{tt|std::ranges::views}} 的缩写。

{{dsc begin}}
{{dsc namespace|std::ranges}}
{{dsc h2|范围访问}}
{{dsc header|ranges}}
{{dsc header|iterator}}
{{dsc inc|cpp/ranges/dsc begin}}
{{dsc inc|cpp/ranges/dsc end}}
{{dsc inc|cpp/ranges/dsc cbegin}}
{{dsc inc|cpp/ranges/dsc cend}}
{{dsc inc|cpp/ranges/dsc rbegin}}
{{dsc inc|cpp/ranges/dsc rend}}
{{dsc inc|cpp/ranges/dsc crbegin}}
{{dsc inc|cpp/ranges/dsc crend}}
{{dsc inc|cpp/ranges/dsc reserve_hint}}
{{dsc inc|cpp/ranges/dsc size}}
{{dsc inc|cpp/ranges/dsc ssize}}
{{dsc inc|cpp/ranges/dsc empty}}
{{dsc inc|cpp/ranges/dsc data}}
{{dsc inc|cpp/ranges/dsc cdata}}
{{dsc h2|范围原语}}
{{dsc header|ranges}}
{{dsc inc|cpp/ranges/dsc iterator_t}}
{{dsc inc|cpp/ranges/dsc range_size_t}}
{{dsc inc|cpp/ranges/dsc range_reference_t}}
{{dsc h2|悬垂迭代器处理}}
{{dsc header|ranges}}
{{dsc inc|cpp/ranges/dsc dangling}}
{{dsc inc|cpp/ranges/dsc borrowed_iterator_t}}
{{dsc h2|其他工具}}
{{dsc header|ranges}}
{{dsc inc|cpp/ranges/dsc elements_of}}
{{dsc h2|范围概念}}
{{dsc header|ranges}}
{{dsc inc|cpp/ranges/dsc range}}
{{dsc inc|cpp/ranges/dsc borrowed_range}}
{{dsc inc|cpp/ranges/dsc approximately_sized_range}}
{{dsc inc|cpp/ranges/dsc sized_range}}
{{dsc inc|cpp/ranges/dsc view}}
{{dsc inc|cpp/ranges/dsc input_range}}
{{dsc inc|cpp/ranges/dsc output_range}}
{{dsc inc|cpp/ranges/dsc forward_range}}
{{dsc inc|cpp/ranges/dsc bidirectional_range}}
{{dsc inc|cpp/ranges/dsc random_access_range}}
{{dsc inc|cpp/ranges/dsc contiguous_range}}
{{dsc inc|cpp/ranges/dsc common_range}}
{{dsc inc|cpp/ranges/dsc viewable_range}}
{{dsc inc|cpp/ranges/dsc constant_range}}
{{dsc h2|范围转换}}
{{dsc header|ranges}}
{{dsc inc|cpp/ranges/dsc to}}
{{dsc h2|视图}}
{{dsc header|ranges}}
{{dsc inc|cpp/ranges/dsc view_interface}}
{{dsc inc|cpp/ranges/dsc subrange}}
{{dsc end}}

===范围工厂===
{{dsc begin}}
{{dsc header|ranges}}
{{dsc namespace|std::ranges}}
{{dsc inc|cpp/ranges/dsc empty_view}}
{{dsc inc|cpp/ranges/dsc single_view}}
{{dsc inc|cpp/ranges/dsc iota_view}}
{{dsc inc|cpp/ranges/dsc repeat_view}}
{{dsc inc|cpp/ranges/dsc basic_istream_view}}
{{dsc end}}

===范围适配器===
{{dsc begin}}
{{dsc header|ranges}}
{{dsc namespace|std::ranges}}
{{dsc inc|cpp/ranges/dsc range_adaptor_closure}}
{{dsc inc|cpp/ranges/dsc all_view}}
{{dsc inc|cpp/ranges/dsc ref_view}}
{{dsc inc|cpp/ranges/dsc owning_view}}
{{dsc inc|cpp/ranges/dsc as_rvalue_view}}
{{dsc inc|cpp/ranges/dsc filter_view}}
{{dsc inc|cpp/ranges/dsc transform_view}}
{{dsc inc|cpp/ranges/dsc take_view}}
{{dsc inc|cpp/ranges/dsc take_while_view}}
{{dsc inc|cpp/ranges/dsc drop_view}}
{{dsc inc|cpp/ranges/dsc drop_while_view}}
{{dsc inc|cpp/ranges/dsc join_view}}
{{dsc inc|cpp/ranges/dsc join_with_view}}
{{dsc inc|cpp/ranges/dsc lazy_split_view}}
{{dsc inc|cpp/ranges/dsc split_view}}
{{dsc inc|cpp/ranges/dsc concat_view}}
{{dsc inc|cpp/ranges/dsc view_counted}}
{{dsc inc|cpp/ranges/dsc common_view}}
{{dsc inc|cpp/ranges/dsc reverse_view}}
{{dsc inc|cpp/ranges/dsc as_const_view}}
{{dsc inc|cpp/ranges/dsc elements_view}}
{{dsc inc|cpp/ranges/dsc keys_view}}
{{dsc inc|cpp/ranges/dsc values_view}}
{{dsc inc|cpp/ranges/dsc enumerate_view}}
{{dsc inc|cpp/ranges/dsc zip_view}}
{{dsc inc|cpp/ranges/dsc zip_transform_view}}
{{dsc inc|cpp/ranges/dsc adjacent_view}}
{{dsc inc|cpp/ranges/dsc adjacent_transform_view}}
{{dsc inc|cpp/ranges/dsc chunk_view}}
{{dsc inc|cpp/ranges/dsc slide_view}}
{{dsc inc|cpp/ranges/dsc chunk_by_view}}
{{dsc inc|cpp/ranges/dsc stride_view}}
{{dsc inc|cpp/ranges/dsc cartesian_product_view}}
{{dsc inc|cpp/ranges/dsc cache_latest_view}}
{{dsc inc|cpp/ranges/dsc to_input_view}}
{{dsc end}}

{{anchor|范围生成器}}
===范围生成器 {{mark since c++23}}===
{{dsc begin}}
{{dsc header|generator}}
{{dsc namespace|std}}
{{dsc inc|cpp/ranges/dsc generator}}
{{dsc end}}

===辅助项===

====范围适配器对象====
见{{named req|RangeAdaptorObject}}。

====范围适配器闭包对象====
见{{named req|RangeAdaptorClosureObject}}。

====定制点对象====
见{{rl|cpo|定制点对象}}。

====可赋值的包装器====
某些范围适配器使用 {{rev inl|until=c++23|{{rli|copyable wrapper|copyable-box}}}}{{rev inl|since=c++23|{{rli|copyable wrapper|movable-box}}}} 来包装它的元素或函数对象。必要时，包装器会以可赋值性增强被包装对象。&lt;!--TODO: update the internal link to "movable_wrapper". --&gt;

====非传播缓存====
某些范围适配器是通过 {{rli|non-propagating-cache}} 这一仅用于阐述的类模板指定的，它的行为与 {{c/core|std::optional&lt;T&gt;}} 几乎相同（不同之处请参见说明）。

====条件性 {{tt|const}} 类型====
{{dcl begin}}
{{dcla|anchor=maybe-const|expos=yes|1=
template&lt; bool Const, class T &gt;
using /*maybe-const*/ = std::conditional_t&lt;Const, const T, T&gt;;
}}
{{dcl end}}

别名模板 {{c/core|/*maybe-const*/}} 是用于为类型 {{tt|T}} 有条件应用 {{c/core|const}} 限定的便利方式。

====整数式类型辅助模板====
{{dcl begin}}
{{dcla|num=1|anchor=make-signed-like-t|expos=yes|1=
template&lt; /*is-integer-like*/ T &gt;
using /*make-signed-like-t*/&lt;T&gt; = /* 见描述 */;
}}
{{dcla|num=2|anchor=make-unsigned-like-t|expos=yes|1=
template&lt; /*is-integer-like*/ T &gt;
using /*make-unsigned-like-t*/&lt;T&gt; = /* 见描述 */;
}}
{{dcla|num=3|anchor=to-unsigned-like|expos=yes|
template&lt; /*is-integer-like*/ T &gt;
/*make-unsigned-like-t*/&lt;T&gt; /*to-unsigned-like*/( T t )
{
    return static_cast&lt;/*make-unsigned-like-t*/&lt;T&gt;&gt;(t);
}
}}
{{dcl end}}

@1@ 对于[[cpp/iterator/is-integer-like|整数式类型]] {{tt|T}}：
* 如果 {{tt|T}} 是整数类型，那么 {{c/core|/*make-signed-like-t*/&lt;T&gt;}} 是 {{c/core|std::make_signed_t&lt;T&gt;}}。
* 否则，{{c/core|/*make-signed-like-t*/&lt;T&gt;}} 是一个与 {{tt|T}} 的宽度相同的对应未指定有符号整数式类型。

@2@ 对于整数式类型 {{tt|T}}：
* 如果 {{tt|T}} 是整数类型，那么 {{c/core|/*make-unsigned-like-t*/&lt;T&gt;}} 是 {{c/core|std::make_unsigned_t&lt;T&gt;}}。
* 否则，{{c/core|/*make-signed-like-t*/&lt;T&gt;}} 是一个与 {{tt|T}} 的宽度相同的对应未指定无符号整数式类型。

@3@ 将 {{c|t}} 显式转换到 {{c/core|/*make-unsigned-like-t*/&lt;T&gt;}}。

====定制点对象辅助模板====
{{dcl begin}}
{{dcla|num=1|anchor=possibly-const-range|expos=yes|
template&lt; ranges::input_range R &gt;
constexpr auto&amp; /*possibly-const-range*/(R&amp; r) noexcept
{
    if constexpr (ranges::constant_range&lt;const R&gt; &amp;&amp;
                  !ranges::constant_range&lt;R&gt;)
        return const_cast&lt;const R&amp;&gt;(r);
    else
        return r;
}
}}
{{dcla|num=2|anchor=as-const-pointer|expos=yes|
template&lt; class T &gt;
constexpr auto /*as-const-pointer*/( const T* p ) noexcept
{
    return p;
}
}}
{{dcl end}}

某些范围访问定制点对象是根据这些仅用于阐述的函数模板指定的。

@1@ {{c/core|/*possibly-const-range*/}} 在是深 const 范围时返回 const 限定的范围 {{c|r}}；否则，返回不进行任何转型的 {{c|r}}。

@2@ {{c/core|/*as-const-pointer*/}} 返回常量类型对象的指针。

====范围适配器辅助模板====
{{dcl begin}}
{{dcla|num=1|anchor=tuple-transform|expos=yes|
template&lt; class F, class Tuple &gt;
constexpr auto /*tuple-transform*/( F&amp;&amp; f, Tuple&amp;&amp; tuple )
{
    return std::apply([&amp;]&lt;class... Ts&gt;(Ts&amp;&amp;... args)
    {
        return std::tuple&lt;std::invoke_result_t&lt;F&amp;, Ts&gt;...&gt;
            (std::invoke(f, std::forward&lt;Ts&gt;(args))...);
    }, std::forward&lt;Tuple&gt;(tuple));
}
}}
{{dcla|num=2|anchor=tuple-for-each|expos=yes|
template&lt; class F, class Tuple &gt;
constexpr void /*tuple-for-each*/( F&amp;&amp; f, Tuple&amp;&amp; tuple )
{
    std::apply([&amp;]&lt;class... Ts&gt;(Ts&amp;&amp;... args)
    {
        (static_cast&lt;void&gt;(std::invoke(f, std::forward&lt;Ts&gt;(args))), ...);
    }, std::forward&lt;Tuple&gt;(tuple));
}
}}
{{dcla|num=3|anchor=as-lvalue|expos=yes|
template&lt; class T &gt;
constexpr T&amp; /*as-lvalue*/( T&amp;&amp; t )
{
    return static_cast&lt;T&amp;&gt;(t);
}
}}
{{dcl end}}

有些范围适配器是用这些仅用于阐述的函数模板指定的。

@1@ {{c/core|/*tuple-transform*/}} 返回对 {{c|tuple}} 的每个元素应用 {{c|f}} 的新 {{c|tuple}}。
@2@ {{c/core|/*tuple-for-each*/}} 对 {{c|tuple}} 的每个元素应用 {{c|f}} 然后什么都不返回。
@3@ {{c/core|/*as-lvalue*/}} 将右值 {{c|t}} 作为左值转发。

====辅助概念====
以下仅用于阐述的概念用于几种类型，但它们不是标准库接口的一部分。

{{dcl begin}}
{{dcla|num=1|anchor=simple-view|expos=yes|1=
template&lt; class R &gt;
concept /*simple-view*/ =
    ranges::view&lt;R&gt; &amp;&amp; ranges::range&lt;const R&gt; &amp;&amp;
    std::same_as&lt;ranges::iterator_t&lt;R&gt;, ranges::iterator_t&lt;const R&gt;&gt; &amp;&amp;
    std::same_as&lt;ranges::sentinel_t&lt;R&gt;, ranges::sentinel_t&lt;const R&gt;&gt;;
}}
{{dcla|num=2|anchor=has-arrow|expos=yes|1=
template&lt; class I &gt;
concept /*has-arrow*/ =
    ranges::input_iterator&lt;I&gt; &amp;&amp;
    (std::is_pointer_v&lt;I&gt; {{!!}} requires(const I i) { i.operator-&gt;(); });
}}
{{dcla|num=3|anchor=different-from|expos=yes|1=
template&lt; class T, class U &gt;
concept /*different-from*/ =
    !std::same_as&lt;std::remove_cvref_t&lt;T&gt;, std::remove_cvref_t&lt;U&gt;&gt;;
}}
{{dcla|num=4|anchor=range-with-movable-references|expos=yes|1=
template&lt; class R &gt;
concept /*range-with-movable-references*/ =
    ranges::input_range&lt;R&gt; &amp;&amp;
    std::move_constructible&lt;ranges::range_reference_t&lt;R&gt;&gt; &amp;&amp;
    std::move_constructible&lt;ranges::range_rvalue_reference_t&lt;R&gt;&gt;;
}}
{{dcla|num=5|anchor=all-random-access|expos=yes|1=
template&lt; bool C, class... Views &gt;
concept /*all-random-access*/ =
    (ranges::random_access_range
         &lt;std::conditional_t&lt;C, const Views, Views&gt;&gt; &amp;&amp; ...);
}}
{{dcla|num=6|anchor=all-bidirectional|expos=yes|1=
template&lt; bool C, class... Views &gt;
concept /*all-bidirectional*/ =
    (ranges::bidirectional_range
         &lt;std::conditional_t&lt;C, const Views, Views&gt;&gt; &amp;&amp; ...);
}}
{{dcla|num=7|anchor=all-forward|expos=yes|1=
template&lt; bool C, class... Views &gt;
concept /*all-forward*/ =
    (ranges::forward_range&lt;std::conditional_t&lt;C, const Views, Views&gt;&gt; &amp;&amp; ...);
}}
{{dcl end}}

===注解===
{{ftm begin|sort=1}}
{{ftm|value=202207L|std=C++23|__cpp_lib_generator|{{c/core|std::generator}}——适用于范围的同步协程生成器}}
{{ftm|value=201911L|std=C++20|__cpp_lib_ranges|rowspan="8"|范围库和[[cpp/algorithm/ranges|受约束算法]]}}
{{ftm|value=202106L|std=C++23|-|非[[cpp/concepts/default initializable|可默认初始化]][[cpp/ranges/view|视图]]|dr=20}}
{{ftm|value=202110L|std=C++23|-|带[[cpp/ranges/owning_view|所有权]][[cpp/ranges/view|视图]]|dr=20}}
{{ftm|value=202202L|std=C++23|-|{{c/core|ranges::range_adaptor_closure}}}}
{{ftm|value=202207L|std=C++23|-|放松{{ls|#范围适配器}}以允许仅移动类型}}
{{ftm|value=202211L|std=C++23|-|移除 “毒药丸” {{stddoc|p2602|(P2602)}}：{{c/core|ranges::begin}} 等的重载}}
{{ftm|value=202302L|std=C++23|-|放宽范围限制已允许使用某些投影}}
{{ftm|value=202406L|std=C++26|-|从间接调用概念中移除公共引用要求|dr=20}}
{{ftm|value=202207L|std=C++23|__cpp_lib_ranges_as_const|{{c/core|std::const_iterator}}、{{c/core|ranges::as_const_view}}}}
{{ftm|value=202207L|std=C++23|__cpp_lib_ranges_as_rvalue|{{c/core|ranges::as_rvalue_view}}}}
{{ftm|value=202411L|std=C++26|__cpp_lib_ranges_cache_latest|{{c/core|ranges::cache_latest_view}}}}
{{ftm|value=202207L|std=C++23|__cpp_lib_ranges_cartesian_product|{{c/core|ranges::cartesian_product_view}}}}
{{ftm|value=202202L|std=C++23|__cpp_lib_ranges_chunk|{{c/core|ranges::chunk_view}}}}
{{ftm|value=202202L|std=C++23|__cpp_lib_ranges_chunk_by|{{c/core|ranges::chunk_by_view}}}}
{{ftm|value=202403L|std=C++26|__cpp_lib_ranges_concat|{{c/core|ranges::concat_view}}}}
{{ftm|value=202302L|std=C++23|__cpp_lib_ranges_enumerate|{{c/core|ranges::enumerate_view}}}}
{{ftm|value=202202L|std=C++23|__cpp_lib_ranges_join_with|{{c/core|ranges::join_with_view}}}}
{{ftm|value=202207L|std=C++23|__cpp_lib_ranges_repeat|{{c/core|ranges::repeat_view}}}}
{{ftm|value=202502L|std=C++26|__cpp_lib_ranges_reserve_hint|{{c/core|ranges::approximately_sized_range}}&lt;br&gt;{{c/core|ranges::reserve_hint}}}}
{{ftm|value=202202L|std=C++23|__cpp_lib_ranges_slide|{{c/core|ranges::slide_view}}}}
{{ftm|value=202207L|std=C++23|__cpp_lib_ranges_stride|{{c/core|ranges::stride_view}}}}
{{ftm|value=202202L|std=C++23|__cpp_lib_ranges_to_container|{{c/core|ranges::to}}}}
{{ftm|value=202502L|std=C++26|__cpp_lib_ranges_to_input|{{c/core|ranges::to_input_view}}}}
{{ftm|value=202110L|std=C++23|__cpp_lib_ranges_zip|{{c/core|ranges::zip_view}},&lt;br&gt;{{c/core|ranges::zip_transform_view}},&lt;br&gt;{{c/core|ranges::adjacent_view}},&lt;br&gt;{{c/core|ranges::adjacent_transform_view}}}}
{{ftm end}}


===示例===
{{example|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;
 
int main()
{
    auto const ints = {0, 1, 2, 3, 4, 5};
    auto even = [](int i) { return 0 == i % 2; };
    auto square = [](int i) { return i * i; };
    
    // 组合视图的“管道”语法：
    for (int i : ints {{!}} std::views::filter(even) {{!}} std::views::transform(square))
        std::cout &lt;&lt; i &lt;&lt; ' ';
    
    std::cout &lt;&lt; '\n';
    
    // 传统的“函数式”组合语法：
    for (int i : std::views::transform(std::views::filter(ints, even), square))
        std::cout &lt;&lt; i &lt;&lt; ' ';
}
|output=
0 4 16
0 4 16
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3509|paper=P2281R1|std=C++20|before=不明确范围适配器对象如何绑定尾随参数|after=按值绑定它们}}
{{dr list item|wg=lwg|dr=3948|std=C++23|before={{tti|possibly-const-range}} 和 {{tti|as-const-pointer}} 没有声明 {{c/core|noexcept}}|after=声明 {{c/core|noexcept}}}}
{{dr list item|wg=lwg|dr=4027|std=C++23|before={{tti|possibly-const-range}} 不会对已实现 {{lconcept|constant_range}} 的范围添加 const 限定|after=对此类范围添加 const 限定}}
{{dr list item|wg=lwg|dr=4112|std=C++20|before={{tti|has-arrow}} 未要求 {{c|i}} 具有 const 限定|after=要求具有 const 限定}}
{{dr list end}}

===参阅===
* [[cpp/iterator|迭代器库]]
* [[cpp/algorithm/ranges|受约束算法]]

{{langlinks|en|es|ja|ru}}
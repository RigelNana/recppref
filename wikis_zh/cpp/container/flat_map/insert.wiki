{{cpp/container/flat_map/title|insert}}
{{cpp/container/flat_map/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
std::pair&lt;iterator, bool&gt; insert( const value_type&amp; value );
}}
{{dcl|num=2|since=c++23|
std::pair&lt;iterator, bool&gt; insert( value_type&amp;&amp; value );
}}
{{dcl|num=3|since=c++23|
iterator insert( const_iterator pos, const value_type&amp; value );
}}
{{dcl|num=4|since=c++23|
iterator insert( const_iterator pos, value_type&amp;&amp; value );
}}
{{dcl|num=5|since=c++23|
template&lt; class P &gt;
std::pair&lt;iterator, bool&gt; insert( P&amp;&amp; x );
}}
{{dcl|num=6|since=c++23|
template&lt; class P &gt;
iterator insert( const_iterator pos, P&amp;&amp; x );
}}
{{dcl|num=7|since=c++23|
template&lt; class InputIt &gt;
void insert( InputIt first, InputIt last );
}}
{{dcl|num=8|since=c++23|
template&lt; class InputIt &gt;
void insert( std::sorted_unique_t, InputIt first, InputIt last );
}}
{{dcl|num=9|since=c++23|
void insert( std::initializer_list&lt;key_type&gt; ilist );
}}
{{dcl|num=10|since=c++23|
void insert( std::sorted_unique_t s, std::initializer_list&lt;key_type&gt; ilist );
}}
{{dcl end}}

如果容器尚未包含带有等价的键的元素，则向容器插入元素。

@1@ 插入 {{c|value}}。等价于 {{c|return emplace(value);}}。

@2@ 插入 {{c|value}}。等价于 {{c|return emplace(std::move(value));}}。

@3@ 插入 {{c|value}} 到尽可能靠近紧接 {{c|pos}} 之前的位置。等价于 {{c|return emplace_hint(pos, value);}}。

@4@ 插入 {{c|value}} 到尽可能靠近紧接 {{c|pos}} 之前的位置。等价于 {{c|return emplace_hint(pos, std::move(value));}}。

@5@ 如果 {{c|*this}} 已经包含一个透明比较''等价''于 {{c|x}} 的元素，则不做任何事。否则，如同以 {{c|emplace(std::forward&lt;P&gt;(x));}} 将 {{tt|x}} 插入 {{c|*this}}。{{cpp/enable if| {{c|std::is_constructible_v&lt;pair&lt;key_type, mapped_type&gt;, P&gt;}} 为 {{c|true}} }}。

@6@ 如果 {{c|*this}} 已经包含一个透明比较''等价''于 {{c|x}} 的元素，则不做任何事。否则，将 {{tt|x}} 插入到 {{c|*this}} 中尽可能靠近紧接 {{c|pos}} 之前的位置。等价于 {{c|return emplace_hint(position, std::forward&lt;P&gt;(x));}}。{{cpp/enable if| {{c|std::is_constructible_v&lt;pair&lt;key_type, mapped_type&gt;, P&gt;}} 为 {{c|true}} }}。

@7@ 如同依次实施下列操作来插入范围 {{range|first|last}} 中的元素：
# 如同以如下代码向 {{rlpt|/#成员对象|c}} 添加元素&lt;br&gt;{{c multi|
for (; first !{{=}} last; ++first)|
{|
    value_type value {{=}} *first;|
    c.keys.insert(c.keys.end(), std::move(value.first));|
    c.values.insert(c.values.end(), std::move(value.second));|
}
}}
# 将新插入元素的范围按 {{rlpt|value_comp}} 排序。
# 合并所得的有序范围和既存元素的有序范围为一个有序范围。
# 如同以如下代码擦除重复元素：&lt;br&gt;{{c multi|
auto zv {{=}} std::views::zip(c.keys, c.values);|
auto it {{=}} ranges::unique(zv, key_equiv(compare)).begin();|
auto dist {{=}} std::distance(zv.begin(), it);|
c.keys.erase(c.keys.begin() + dist, c.keys.end());|
c.values.erase(c.values.begin() + dist, c.values.end());
}}
@@ 原位合并操作中可能会分配内存。
@@ {{cpp/container/lwg2488-note}}

@8@ 如同依次实施下列操作来插入范围 {{range|first|last}} 中的元素：
# 如同以如下代码向 {{rlpt|/#成员对象|c}} 添加元素&lt;br&gt;{{c multi|
for (; first !{{=}} last; ++first)|
{|
    value_type value {{=}} *first;|
    c.keys.insert(c.keys.end(), std::move(value.first));|
    c.values.insert(c.values.end(), std::move(value.second));|
}
}}
# 合并新添加元素的有序范围和既存元素的有序范围为一个有序范围。
# 如同以如下代码擦除重复元素：&lt;br&gt;{{c multi|
auto zv {{=}} std::views::zip(c.keys, c.values);|
auto it {{=}} ranges::unique(zv, key_equiv(compare)).begin();|
auto dist {{=}} std::distance(zv.begin(), it);|
c.keys.erase(c.keys.begin() + dist, c.keys.end());|
c.values.erase(c.values.begin() + dist, c.values.end());|
}}
@@ 原位合并操作中可能会分配内存。
@@ {{cpp/container/lwg2488-note}}

@9@ 插入初始化式列表 {{c|ilist}} 中的元素。等价于 {{c|insert(ilist.begin(), ilist.end());}}。
@@ {{cpp/container/lwg2488-note}}

@10@ 插入初始化式列表 {{c|ilist}} 中的元素。等价于 {{c|insert(s, ilist.begin(), ilist.end());}}。
@@ {{cpp/container/lwg2488-note}}

{{cpp/container/note iterator invalidation|flat_map|insert}}

===参数===
{{par begin}}
{{par|pos|指向要在它之前插入新元素的位置的迭代器}}
{{par|value|要插入的元素值}}
{{par range|3=要插入的|range=源}}
{{par|ilist|要插入其中的值的初始化式列表}}
{{par|s|消歧标签，指定输入序列（根据 {{rlpt|value_comp|value_comp()}}）有序且只包含唯一元素}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par end}}

===返回值===
@1,2@ {{cpp/container/return iterator pair||pair}}
@3,4@ {{cpp/container/return iterator pair}}
@5@ {{cpp/container/return iterator pair||pair}}
@6@ {{cpp/container/return iterator pair}}
@7-10@ （无）

===异常===
@1-6@ 如果任何操作抛出了异常，则插入无效果。

{{todo|情况 7-10}} &lt;!-- no guarantee --&gt;

===复杂度===
@1-6@ 与 {{rlpt|size|size()}} 成线性。
@7@ {{c|N + M·log(M)}}，其中 {{tt|N}} 为操作前的 {{rlpt|size|size()}} 而 {{tt|M}} 为 {{c|std::distance(first, last)}}。
@8@ 与 {{rlpt|size|size()}} 成线性。
@9@ {{c|N + M·log(M)}}，其中 {{tt|N}} 为操作前的 {{rlpt|size|size()}} 而 {{tt|M}} 为 {{c|ilist.size()}}。
@10@ 与 {{tt|N}} 成线性，其中 {{tt|N}} 为操作后的 {{rlpt|size|size()}}。

===注解===
{{cpp/container/hinted insert note|3,4,6}}

===示例===
{{example
|code=
|output=
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc emplace|flat_map}}
{{dsc inc|cpp/container/dsc emplace_hint|flat_map}}
{{dsc inc|cpp/container/dsc insert_or_assign|flat_map}}
{{dsc inc|cpp/iterator/dsc inserter}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
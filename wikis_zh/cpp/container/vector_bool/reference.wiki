{{cpp/title|{{petty|vector&lt;bool, Alloc&gt;::}}reference}}
{{cpp/container/vector_bool/navbar}}
{{ddcl|
class reference;
}}

{{rlpt|/|std::vector}}{{c/core|&lt;bool, Alloc&gt;}} 特化定义 {{rlpt|/|std::vector}}{{c/core|&lt;bool, Alloc&gt;::reference}} 为可公开访问的嵌套类。{{rlpt|/|std::vector}}{{c/core|&lt;bool, Alloc&gt;::reference}} 代理了访问 {{rlpt|/|std::vector}}{{c/core|&lt;bool, Alloc&gt;}} 中单个位的行为。

{{rlpt|/|std::vector}}{{c/core|&lt;bool, Alloc&gt;::reference}} 的主要用法是提供能从 {{c/core|operator[]}} 返回的左值。

任何通过 {{rlpt|/|std::vector}}{{c/core|&lt;bool, Alloc&gt;::reference}} 发生的对 vector 的读或写，会潜在地读或写整个底层的 vector。

===成员函数===
{{dsc begin}}
{{dsc mem ctor|nolink=true|构造引用}}
{{dsc mem dtor|nolink=true|销毁引用}}
{{dsc mem fun|operator{{=}}|nolink=true|将值赋给被引用位}}
{{dsc inc|cpp/container/vector_bool/reference/dsc operator bool}}
{{dsc mem fun|flip|nolink=true|翻转被引用位}}
{{dsc end}}

{{member|{{small|std::vector&lt;bool, Alloc&gt;::reference::}}reference|2=
{{ddcla|since=c++11|constexpr=c++20|1=
reference( const reference&amp; ) = default;
}}

从另一引用构造引用。{{rev inl|until=c++11|复制构造函数是隐式声明的。}}

其他构造函数只能由 {{rlpt|/|std::vector}}{{c/core|&lt;bool, Alloc&gt;}} 访问。
}}

{{member|{{small|std::vector&lt;bool, Alloc&gt;::reference::}}~reference|2=
{{ddcla|constexpr=c++20|
~reference();
}}

销毁引用。
}}

{{member|{{small|std::vector&lt;bool, Alloc&gt;::reference::}}operator{{=}}|2=
{{dcl begin}}
{{dcla|num=1|noexcept=c++11|constexpr=c++20|1=
reference&amp; operator=( bool x );
}}
{{dcl|num=2|since=c++23|1=
constexpr const reference&amp; operator=( bool x ) const noexcept;
}}
{{dcla|num=3|noexcept=c++11|constexpr=c++20|1=
reference&amp; operator=( const reference&amp; x );
}}
{{dcl end}}

赋值给被引用位。

===参数===
{{par begin}}
{{par|x|要赋值的值}}
{{par end}}

===返回值===
{{c|*this}}
}}

{{member|{{small|std::vector&lt;bool, Alloc&gt;::reference::}}operator bool|2=
{{ddcla|noexcept=c++11|constexpr=c++20|
operator bool() const;
}}

返回被引用位的值。

===返回值===
被引用位。
}}

{{member|{{small|std::vector&lt;bool, Alloc&gt;::reference::}}flip|2=
{{ddcla|noexcept=c++11|constexpr=c++20|
void flip();
}}

反转被引用位。
}}

===辅助类===
{{member|{{small|std::}}formatter{{small|&lt;std::vector&lt;bool, Alloc&gt;::reference&gt;}}|2=
{{ddcl|since=c++23|
template&lt; class T, class CharT &gt;
   requires /*is-vector-bool-reference*/&lt;T&gt;
struct formatter&lt;T, CharT&gt;;
}}
为 {{rlpt|/|std::vector}}{{c/core|&lt;bool, Alloc&gt;::reference}} 特化 {{lc|std::formatter}}。此特化使用 {{c/core|std::formatter&lt;bool, CharT&gt;}} 作为它的底层格式化器（以 {{tti|underlying_}} 表示），所引用的位被转换为 {{c/core|bool}} 再格式化。

当且仅当 {{tt|T}} 代表对于某个 {{tt|Alloc}} 的类型 {{rlpt|/|std::vector}}{{c/core|&lt;bool, Alloc&gt;::reference}} 且{{rlpt|/|std::vector}}{{c/core|&lt;bool, Alloc&gt;}} 不是[[cpp/language/type#由程序定义的类型|由程序定义的特化]]时，仅用于阐述的常量 {{c|/*is-vector-bool-reference*/&lt;T&gt;}} 是 {{c|true}}。

====成员函数====
{{dcl begin}}
{{dcl|num=1|since=c++23|
template&lt; class ParseContext &gt;
constexpr ParseContext::iterator parse( ParseContext&amp; ctx );
}}
{{dcl|num=2|since=c++23|
template&lt; class FormatContext &gt;
FormatContext::iterator format( const T&amp; r, FormatContext&amp; ctx ) const;
}}
{{dcl end}}

@1@ 等价于 {{box|{{c/core|return}}{{nbspt}}{{tti|underlying_}}{{c/core|.parse(ctx);}}}}。
@2@ 等价于 {{box|{{c/core|return}}{{nbspt}}{{tti|underlying_}}{{c/core|.format(r, ctx);}}}}。
}}

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc operator at|vector}}
{{dsc inc|cpp/container/vector bool/dsc swap}}
{{dsc end}}

===外部链接===
{{eli|"Effective Modern C++" by Scott Meyers (2015), 第二章, 条款 6: "当 {{c/core|auto}} 推导为不想要的类型时使用类型明确的初始化式手法。" (p.43-46)——描述了代理类 {{ttt|std::vector&lt;bool&gt;::reference}} 的一种可能的误用。}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
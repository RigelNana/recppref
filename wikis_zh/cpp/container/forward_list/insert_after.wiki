{{cpp/container/forward_list/title|insert_after}}
{{cpp/container/forward_list/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|
iterator insert_after( const_iterator pos, const T&amp; value );
}}
{{dcl|num=2|since=c++11|
iterator insert_after( const_iterator pos, T&amp;&amp; value );
}}
{{dcl|num=3|since=c++11|
iterator insert_after( const_iterator pos, size_type count, const T&amp; value );
}}
{{dcl|num=4|since=c++11|
template&lt; class InputIt &gt;
iterator insert_after( const_iterator pos, InputIt first, InputIt last );
}}
{{dcl|num=5|since=c++11|
iterator insert_after( const_iterator pos, std::initializer_list&lt;T&gt; ilist );
}}
{{dcl end}}

在容器中的指定位置后插入元素。

@1-2@ 在 {{c|pos}} 所指向的元素后插入 {{c|value}}。

@3@ 在 {{c|pos}} 所指向的元素后插入 {{c|value}} 的 {{c|count}} 个副本。

@4@ 在 {{c|pos}} 所指向的元素后插入来自范围 {{range|first|last}} 的元素。
若 {{c|first}} 与 {{c|last}} 是指向 {{c|*this}} 中的迭代器则行为未定义。

@5@ 插入来自 initializer_list {{c|ilist}} 的元素。

{{cpp/container/note_iterator_invalidation|forward_list|insert_after}}

===参数===
{{par begin}}
{{par|pos|内容将插入到其后的迭代器}}
{{par|value|要插入的元素值}}
{{par|count|要插入的副本数}}
{{par range|3=要插入的|range=源}}
{{par|ilist|插入值来源的初始化式列表}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par end}} 

===返回值===
@1,2@ 指向被插入元素的迭代器。
@3@ 指向最后被插入元素的迭代器，或若 {{c|1=count==0}} 则为 {{c|pos}}。
@4@ 指向最后被插入元素的迭代器，或若 {{c|1=first==last}} 则为 {{c|pos}}。
@5@ 指向最后被插入元素的迭代器，或若 {{c|ilist}} 为空则为 {{c|pos}}。

===异常===
{{cpp/strong exception safety guarantee|plural=yes}}

===复杂度===
@1,2@ 常数。
@3@ 与 {{c|count}} 成线性。
@4@ 与 {{c|std::distance(first, last)}} 成线性。
@5@ 与 {{c|ilist.size()}} 成线性。

===示例===
{{example
|code=
#include &lt;forward_list&gt;                                                         
#include &lt;string&gt;                                                               
#include &lt;iostream&gt;                                                             
#include &lt;vector&gt;                                                               

void print(const std::forward_list&lt;int&gt;&amp; list)
{
    std::cout &lt;&lt; "list: {";
    for (char comma[3] = {'\0', ' ', '\0'}; int i : list)
    {
        std::cout &lt;&lt; comma &lt;&lt; i;
        comma[0] = ',';
    }
    std::cout &lt;&lt; "}\n";
}

int main()
{
    std::forward_list&lt;int&gt; ints{1, 2, 3, 4, 5};
    print(ints);                                 

    // insert_after (2)
    auto beginIt = ints.begin();
    ints.insert_after(beginIt, -6);
    print(ints);

    // insert_after (3)
    auto anotherIt = beginIt;
    ++anotherIt;
    anotherIt = ints.insert_after(anotherIt, 2, -7);
    print(ints);

    // insert_after (4)
    const std::vector&lt;int&gt; v = {-8, -9, -10};
    anotherIt = ints.insert_after(anotherIt, v.cbegin(), v.cend());
    print(ints);

    // insert_after (5)
    ints.insert_after(anotherIt, {-11, -12, -13, -14});
    print(ints);
}
|output=
list: {1, 2, 3, 4, 5}
list: {1, -6, 2, 3, 4, 5}
list: {1, -6, -7, -7, 2, 3, 4, 5}
list: {1, -6, -7, -7, -8, -9, -10, 2, 3, 4, 5}
list: {1, -6, -7, -7, -8, -9, -10, -11, -12, -13, -14, 2, 3, 4, 5}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc emplace after|forward_list}}
{{dsc inc|cpp/container/dsc push_front|forward_list}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
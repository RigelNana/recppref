{{cpp/container/forward_list/title|emplace_after}}
{{cpp/container/forward_list/navbar}}
{{ddcl|since=c++11|
template&lt; class... Args &gt;
iterator emplace_after( const_iterator pos, Args&amp;&amp;... args );
}}

在容器中的指定位置后插入新元素。原位构造元素，即不进行复制或移动操作。以与提供给函数严格相同的各实参调用元素的构造函数。

{{cpp/container/note_iterator_invalidation|forward_list|emplace_after}}
===参数===
{{par begin}}
{{par | pos |新元素将构造于其后的迭代器}}
{{par | args |转发给元素构造函数的实参}}
{{par end}} 

===返回值===
指向新元素的迭代器。

===复杂度===
常数。

===异常===
{{cpp/strong exception safety guarantee}}

===示例===
{{example
|示例演示规范地按自然顺序（与逆序相反）填充单链表。
|code=
#include &lt;forward_list&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

struct Sum
{
    std::string remark;
    int sum;

    Sum(std::string remark, int sum)
        : remark{std::move(remark)}, sum{sum} {}

    void print() const
    {
        std::cout &lt;&lt; remark &lt;&lt; " = " &lt;&lt; sum &lt;&lt; '\n';
    }
};

int main()
{
    std::forward_list&lt;Sum&gt; list;

    auto iter = list.before_begin();
    std::string str{"1"};

    for (int i{1}, sum{1}; i != 10; sum += i)
    {
        iter = list.emplace_after(iter, str, sum);
        ++i;
        str += " + " + std::to_string(i);
    }

    for (const Sum&amp; s : list)
        s.print();
}
|output=
1 = 1
1 + 2 = 3
1 + 2 + 3 = 6
1 + 2 + 3 + 4 = 10
1 + 2 + 3 + 4 + 5 = 15
1 + 2 + 3 + 4 + 5 + 6 = 21
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28
1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 = 36
1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc insert_after|forward_list}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/container/inplace_vector/title|insert}}
{{cpp/container/inplace_vector/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++26|
constexpr iterator insert( const_iterator pos, const T&amp; value );
}}
{{dcl|num=2|since=c++26|
constexpr iterator insert( const_iterator pos, T&amp;&amp; value );
}}
{{dcl|num=3|since=c++26|
constexpr iterator insert( const_iterator pos, size_type count, const T&amp; value );
}}
{{dcl|num=4|since=c++26|
template&lt; class InputIt &gt;
constexpr iterator insert( const_iterator pos, InputIt first, InputIt last );
}}
{{dcl|num=5|since=c++26|
constexpr iterator insert( const_iterator pos, std::initializer_list&lt;T&gt; ilist );
}}
{{dcl end}}

在容器中的指定位置插入元素。

@1@ 在 {{c|pos}} 之前插入 {{c|value}} 的副本。
@2@ 在 {{c|pos}} 之前插入 {{c|value}}，可能使用移动语义。
@3@ 在 {{c|pos}} 之前插入 {{c|count}} 个 {{c|value}} 的副本。
@4@ 在 {{c|pos}} 之前插入范围 {{range|first|last}} 的各元素。
{{cpp/enable if| {{tt|InputIt}} 为{{named req|InputIterator}}}}（以避免与重载 {{v|3}} 之间产生歧义）。
@@ {{range|first|last}} 中的各个迭代器均被解引用一次。
@@ 如果 {{c|first}} 和 {{c|last}} 是 {{c|*this}} 中的迭代器，则其行为未定义。
@5@ 在 {{c|pos}} 之前插入初始化式列表 {{c|ilist}} 各元素。等价于：{{c|insert(pos, ilist.begin(), ilist.end());}}。

{{cpp/container/note iterator invalidation|inplace_vector|insert}}

===参数===
{{par begin}}
{{par|pos|要在其之前插入内容的迭代器。（{{c|pos}} 可以是 {{rlpf|end}} 迭代器）}}
{{par|value|要插入的元素值}}
{{par|count|要插入的元素数量}}
{{par range|3=要插入的|range=源}}
{{par|ilist|要插入其中各值的 {{lc|std::initializer_list}}}}
{{par hreq}}
{{par req named|T|CopyInsertable|overload=1}}
{{par req named|T|MoveInsertable|overload=2}}
{{par req named|T|CopyInsertable|CopyAssignable|overload=3}}
{{par req named|T|EmplaceConstructible|overloads=4,5}}
{{par end}}

===返回值===
@1,2@ 指向所插入的 {{c|value}} 的迭代器。
@3@ 指向所插入第一个元素的迭代器，或当 {{c|1=count == 0}} 时返回 {{c|pos}}。
@4@ 指向所插入第一个元素的迭代器，或当 {{c|1=first == last}} 时返回 {{c|pos}}。
@5@ 指向所插入第一个元素的迭代器，或当 {{c|1=ilist}} 为空时返回 {{c|pos}}。

===复杂度===
与所插入元素数量加上 {{c|pos}} 与容器的 {{rlpf|end}} 之间的距离成线性。

===异常===
* 如果调用前 {{c|1=size() == capacity()}} 则抛出 {{lc|std::bad_alloc}}。函数没有效果（[[cpp/language/exceptions#异常安全|强异常安全保证]]）。
* 由被插入元素的初始化或者任何{{named req|InputIterator}}操作所抛出的任何异常。{{range|0|pos}} 中的元素不会被修改。

===示例===
{{example
|code=
#include &lt;initializer_list&gt;
#include &lt;inplace_vector&gt;
#include &lt;iterator&gt;
#include &lt;new&gt;
#include &lt;print&gt;

int main()
{
    std::inplace_vector&lt;int, 14&gt; v(3, 100);
    std::println("1. {}", v);

    auto pos = v.begin();
    pos = v.insert(pos, 200); // 重载 (1)
    std::println("2. {}", v);

    v.insert(pos, 2, 300); // 重载 (3)
    std::println("3. {}", v);

    int arr[] = {501, 502, 503};
    v.insert(v.begin(), arr, arr + std::size(arr)); // 重载 (4)
    std::println("4. {}", v);

    v.insert(v.end(), {601, 602, 603}); // 重载 (5)
    std::println("5. {}", v);

    const auto list = {-13, -12, -11};
    try
    {
        v.insert(v.begin(), list); // 抛出异常：没有空间
    }
    catch(const std::bad_alloc&amp;)
    {
        std::println("bad_alloc: v.capacity()={} &lt; v.size()={} + list.size()={}",
                     v.capacity(), v.size(), list.size());
    }
}
|output=
1. [100, 100, 100]
2. [200, 100, 100, 100]
3. [300, 300, 200, 100, 100, 100]
4. [501, 502, 503, 300, 300, 200, 100, 100, 100]
5. [501, 502, 503, 300, 300, 200, 100, 100, 100, 601, 602, 603]
bad_alloc: v.capacity()=14 &lt; v.size()=12 + list.size()=3
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc emplace|inplace_vector}}
{{dsc inc|cpp/container/dsc insert_range|inplace_vector}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/container/inplace_vector/title|emplace_back}}
{{cpp/container/inplace_vector/navbar}}
{{ddcl|since=c++26|
template&lt; class... Args &gt;
constexpr reference emplace_back( Args&amp;&amp;... args );
}}

向容器末尾追加一个新元素。通常用布置 {{c/core|new}} 将元素在容器所提供的位置进行原位构造。实参 {{c|args...}} 以 {{c|std::forward&lt;Args&gt;(args)...}} 转发给构造函数。

{{cpp/container/note_iterator_invalidation|inplace_vector|emplace_back}}

===参数===
{{par begin}}
{{par|args|要转发给元素构造函数的实参}}
{{par hreq}}
{{par req named|T|EmplaceConstructible}}
{{par end}}

===返回值===
{{rlpf|back}}，即对所插入元素的引用。

===复杂度===
常数。

===异常===
* 如果调用前 {{c|1=size() == capacity()}} 则会抛出 {{lc|std::bad_alloc}}。
* 被插入元素的初始化所抛出的任何异常。
{{cpp/strong exception safety guarantee|plural=yes}}

===示例===
{{example
|code=
#include &lt;inplace_vector&gt;
#include &lt;new&gt;
#include &lt;print&gt;
#include &lt;string&gt;
#include &lt;utility&gt;

int main()
{
    std::inplace_vector&lt;std::pair&lt;std::string, std::string&gt;, 2&gt; fauna;
    std::string dog{"\N{DOG}"};

    fauna.emplace_back("\N{CAT}", dog);
    fauna.emplace_back("\N{CAT}", std::move(dog));
    std::println("fauna = {}", fauna);

    try
    {
        fauna.emplace_back("\N{BUG}", "\N{BUG}"); // 抛出异常: 没有空间
    }
    catch(const std::bad_alloc&amp; ex)
    {
        std::println("{}", ex.what());
    }
    std::println("fauna = {}", fauna);
}
|p=true
|output=
fauna = [("🐈", "🐕"), ("🐈", "🐕")]
std::bad_alloc
fauna = [("🐈", "🐕"), ("🐈", "🐕")]
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc append_range|inplace_vector}}
{{dsc inc|cpp/container/dsc push_back|inplace_vector}}
{{dsc inc|cpp/container/dsc try_push_back|inplace_vector}}
{{dsc inc|cpp/container/dsc try_emplace_back|inplace_vector}}
{{dsc inc|cpp/container/dsc try_append_range|inplace_vector}}
{{dsc inc|cpp/container/dsc unchecked_push_back|inplace_vector}}
{{dsc inc|cpp/container/dsc unchecked_emplace_back|inplace_vector}}
{{dsc inc|cpp/container/dsc pop_back|inplace_vector}}
{{dsc inc|cpp/iterator/dsc back_inserter}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/container/inplace_vector/title|operator{{=}}}}
{{cpp/container/inplace_vector/navbar}}
{{dcl begin}}
{{dcl|since=c++26|num=1|1=
constexpr inplace_vector&amp; operator=( const inplace_vector&amp; other );
}}
{{dcl|since=c++26|num=2|1=
constexpr inplace_vector&amp; operator=( inplace_vector&amp;&amp; other )
    noexcept(/* 见下文 */);
}}
{{dcl|since=c++26|num=3|1=
constexpr inplace_vector&amp; operator=( std::initializer_list&lt;T&gt; init );
}}
{{dcl end}}

替换 {{tt|inplace_vector}} 的内容。

@1@ {{ls|cpp/language/copy assignment#复制赋值运算符}}。并且，如果 {{c/core|std::inplace_vector&lt;T, N&gt;}} 具有{{ls|cpp/language/destructor#平凡析构函数}}，且 {{c|std::is_trivially_copy_constructible_v&lt;T&gt; &amp;&amp; std::is_trivially_copy_assignable_v&lt;T&gt;}} 为 {{c|true}}，则也是{{ls|cpp/language/copy assignment#平凡复制赋值运算符}}。以 {{c|other}} 内容的副本替换内容。

@2@ {{ls|cpp/language/move assignment#移动赋值运算符}}。并且，如果 {{c/core|std::inplace_vector&lt;T, N&gt;}} 具有{{ls|cpp/language/destructor#平凡析构函数}}，且 {{c|std::is_trivially_move_constructible_v&lt;T&gt; &amp;&amp; std::is_trivially_move_assignable_v&lt;T&gt;}} 为 {{c|true}}，则也是{{ls|cpp/language/move assignment#平凡移动赋值运算符}}。使用移动语义以 {{c|other}} 的内容替换内容（即将 {{c|other}} 中的数据从 {{c|other}} 移动到这个容器中）。此后 {{c|other}} 处于有效但未指明的状态。

@3@ 以初始化式列表 {{c|init}} 指定的内容替换内容。

===参数===
{{par begin}}
{{par|other|用作初始化容器元素的来源的另一个 {{tt|inplace_vector}}}}
{{par|init|用以初始化容器元素的初始化式列表}}
{{par end}}

===复杂度===
@1,2@ 与 {{c|*this}} 和 {{c|other}} 的大小成线性。
@3@ 与 {{c|*this}} 和 {{c|init}} 的大小成线性。

===异常===
@2@ {{noexcept|1=
    N == 0 {{!!}}
        (std::is_nothrow_move_assignable_v&lt;T&gt; &amp;&amp;
         std::is_nothrow_move_constructible_v&lt;T&gt;)}}
@3@ 当 {{c|init.size() &gt; N}} 时抛出 {{lc|std::bad_alloc}}。

===示例===
{{example
|code=
#include &lt;initializer_list&gt;
#include &lt;inplace_vector&gt;
#include &lt;new&gt;
#include &lt;print&gt;
#include &lt;ranges&gt;
#include &lt;string&gt;

int main()
{
    std::inplace_vector&lt;int, 4&gt; x({1, 2, 3}), y;
    std::println("起初:");
    std::println("x = {}", x);
    std::println("y = {}", y);

    std::println("复制赋值会将数据从 x 向 y 复制:");
    y = x; // 重载 (1)
    std::println("x = {}", x);
    std::println("y = {}", y);

    std::inplace_vector&lt;std::string, 3&gt; z, w{"\N{CAT}", "\N{GREEN HEART}"};
    std::println("起初:");
    std::println("z = {}", z);
    std::println("w = {}", w);

    std::println("移动赋值会将数据从 w 向 z 移动:");
    z = std::move(w); // 重载 (2)
    std::println("z = {}", z);
    std::println("w = {}", w); // w 处于有效但未指明的状态

    auto l = {4, 5, 6, 7};
    std::println("赋值 initializer_list {} 给 x:", l);
    x = l; // 重载 (3)
    std::println("x = {}", x);

    std::println("用大小大于 N 的 initializer_list 的赋值抛出异常:");
    try
    {
        x = {1, 2, 3, 4, 5}; // 当 (initializer list size == 5) &gt; (capacity N == 4) 时抛出
    }
    catch(const std::bad_alloc&amp; ex)
    {
        std::println("ex.what(): {}", ex.what());
    }
}
|p=true
|output=
起初:
x = [1, 2, 3]
y = []
复制赋值会将数据从 x 向 y 复制:
x = [1, 2, 3]
y = [1, 2, 3]
起初:
z = []
w = ["🐈", "💚"]
移动赋值会将数据从 w 向 z 移动:
z = ["🐈", "💚"]
w = ["", ""]
赋值 initializer_list [4, 5, 6, 7] 给 x:
x = [4, 5, 6, 7]
用大小大于 N 的 initializer_list 的赋值抛出异常:
ex.what(): std::bad_alloc
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc constructor|inplace_vector}}
{{dsc inc|cpp/container/dsc assign|inplace_vector}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
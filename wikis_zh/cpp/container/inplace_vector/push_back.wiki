{{cpp/container/inplace_vector/title|push_back}}
{{cpp/container/inplace_vector/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++26|
constexpr reference push_back( const T&amp; value );
}}
{{dcl|num=2|since=c++26|
constexpr reference push_back( T&amp;&amp; value );
}}
{{dcl end}}

将给定元素 {{c|value}} 追加到容器末尾。

@1@ 新元素被初始化为 {{c|value}} 的副本。
@2@ {{c|value}} 被移动入新元素。

{{cpp/container/note iterator invalidation|inplace_vector|push_back}}

===参数===
{{par begin}}
{{par|value|要追加元素的值}}
{{par hreq}}
{{par req named|T|CopyInsertable|overload=1}}
{{par req named|T|MoveInsertable|overload=2}}
{{par end}}

===返回值===
{{rlpf|back}}，即到所插入元素的引用。

===复杂度===
常数。

===异常===
* 若调用前 {{c|1=size() == capacity()}} 则抛出 {{lc|std::bad_alloc}}。
* 所插入元素的初始化抛出的任何异常。
{{cpp/strong exception safety guarantee|plural=yes}}

===示例===
{{example
|code=
#include &lt;inplace_vector&gt;
#include &lt;new&gt;
#include &lt;print&gt;
#include &lt;string&gt;

int main()
{
    std::inplace_vector&lt;std::string, 2&gt; fauna;
    std::string dog{"\N{DOG}"};

    fauna.push_back("\N{CAT}"); // 重载 (1)
    fauna.push_back(std::move(dog)); // 重载 (2)
    std::println("fauna = {}", fauna);

    try
    {
        fauna.push_back("\N{BUG}"); // throws: 空间不足
    }
    catch(const std::bad_alloc&amp; ex)
    {
        std::println("{}", ex.what());
    }
    std::println("fauna = {}", fauna);
}
|p=true
|output=
fauna = ["🐈", "🐕"]
std::bad_alloc
fauna = ["🐈", "🐕"]
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc emplace_back|inplace_vector}}
{{dsc inc|cpp/container/dsc append_range|inplace_vector}}
{{dsc inc|cpp/container/dsc try_push_back|inplace_vector}}
{{dsc inc|cpp/container/dsc try_emplace_back|inplace_vector}}
{{dsc inc|cpp/container/dsc try_append_range|inplace_vector}}
{{dsc inc|cpp/container/dsc unchecked_push_back|inplace_vector}}
{{dsc inc|cpp/container/dsc unchecked_emplace_back|inplace_vector}}
{{dsc inc|cpp/container/dsc pop_back|inplace_vector}}
{{dsc inc|cpp/iterator/dsc back_inserter}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
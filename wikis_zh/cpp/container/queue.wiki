{{cpp/title|queue}}
{{cpp/container/queue/navbar}}
{{ddcl|header=queue|1=
template&lt;
    class T,
    class Container = std::deque&lt;T&gt;
&gt; class queue;
}}

{{tt|std::queue}} 类模板是一种[[cpp/container#容器适配器|容器适配器]]，它提供{{enwiki|Queue (abstract data type)|队列}}的功能——尤其是 FIFO（先进先出）数据结构。

此类模板用处为底层容器的包装器——只提供特定的函数集合。queue 在底层容器尾端推入元素，从首端弹出元素。

{{cpp/is_constexpr|since=c++26|transient=yes}}

===模板形参===
{{par begin}}
{{par|T|存储的元素类型。{{tt|T}} 与 {{tt|Container::value_type}} 不是同一类型时非良构。}}
{{par|Container|用于存储元素的底层容器。容器必须满足{{named req|SequenceContainer}}。另外，它必须提供带[[cpp/named req/SequenceContainer#可选操作|通常语义]]的下列函数：
* {{tt|back()}}，例如 {{lc|std::deque::back()}}，
* {{tt|front()}}，例如 {{lc|std::list::front()}}，
* {{tt|push_back()}}，例如 {{lc|std::deque::push_back()}}，
* {{tt|pop_front()}}，例如 {{lc|std::list::pop_front()}}。

标准容器 {{lc|std::deque}} 和 {{lc|std::list}} 满足这些要求。
}}{{par end}}

===成员类型===
{{dsc begin}}
{{dsc hitem |成员类型|定义}}
{{dsc inc|cpp/container/dsc container_type|queue}}
{{dsc inc|cpp/container/dsc value_type|queue}}
{{dsc inc|cpp/container/dsc size_type|queue}}
{{dsc inc|cpp/container/dsc reference|queue}}
{{dsc inc|cpp/container/dsc const_reference|queue}}
{{dsc end}}

===成员对象===
{{dsc begin}}
{{dsc hitem|成员名称|定义}}
{{dsc inc|cpp/container/dsc c|queue}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/container/dsc constructor|queue}}
{{dsc inc|cpp/container/dsc destructor|queue}}
{{dsc inc|cpp/container/dsc operator{{=}}|queue}}

{{dsc h2|元素访问}}
{{dsc inc|cpp/container/dsc front|queue}}
{{dsc inc|cpp/container/dsc back|queue}}

{{dsc h2|容量}}
{{dsc inc|cpp/container/dsc empty|queue}}
{{dsc inc|cpp/container/dsc size|queue}}

{{dsc h2|修改器}}
{{dsc inc|cpp/container/dsc push|queue}}
{{dsc inc|cpp/container/dsc push_range|queue}}
{{dsc inc|cpp/container/dsc emplace|queue}}
{{dsc inc|cpp/container/dsc pop|queue}}
{{dsc inc|cpp/container/dsc swap|queue}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/container/dsc operator_cmp|queue}}
{{dsc inc|cpp/container/dsc swap2|queue}}
{{dsc end}}

===辅助类===
{{dsc begin}}
{{dsc inc|cpp/container/dsc uses_allocator|queue}}
{{dsc inc|cpp/container/dsc adaptor_formatter|queue}}
{{dsc end}}

{{rrev|since=c++17|
==={{rl|deduction guides|推导指引}}===
}}

===注解===
{{ftm begin|std=1|comment=1}}
{{ftm|__cpp_lib_containers_ranges|value=202202L|std=C++23|容器的范围构造和插入}}
{{ftm|__cpp_lib_constexpr_containers|value=202502L|std=C++26|{{c/core|constexpr}} {{tt|std::queue}}}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;queue&gt;

int main()
{
    std::queue&lt;int&gt; q;

    q.push(0); // 后端推入 0
    q.push(1); // q = 0 1
    q.push(2); // q = 0 1 2
    q.push(3); // q = 0 1 2 3

    assert(q.front() == 0);
    assert(q.back() == 3);
    assert(q.size() == 4);

    q.pop(); // 移除前端元素, 0
    assert(q.size() == 3);

    // 打印并移除所有元素。
    // 注意 std::queue 并不支持 begin()/end()，因而不能使用范围 for 循环。
    std::cout &lt;&lt; "q: ";
    for (; !q.empty(); q.pop())
        std::cout &lt;&lt; q.front() &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    assert(q.size() == 0);
}
|output=
q: 1 2 3
}}                                  

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=307|std=C++98|before={{tt|std::queue}} 不支持在使用（{{tt|const}}）{{tt|value_type&amp;}} 的地方改用代理引用类型的容器&lt;ref&gt;例如与 {{ltt|cpp/container/vector bool|std::vector&lt;bool&gt;}} 类似但另外支持 {{tt|pop_front()}} 的容器。此缺陷报告的解决方案解决了 {{lc|std::stack}} 和 {{lc|std::priority_queue}} 不支持 {{ltt|cpp/container/vector bool|std::vector&lt;bool&gt;}} 的问题。与 {{tt|std::queue}} 相关的修改是为了与其他容器适配器保持一致。&lt;/ref&gt;|after=支持这些容器}}
{{dr list item|wg=lwg|dr=2566|std=C++98|before=缺少对 {{tt|Container::value_type}} 的要求|after={{tt|T}} 和 {{tt|Container::value_type}} 不同时非良构}}
{{dr list end}}
&lt;references/&gt;

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc priority_queue}}
{{dsc inc|cpp/container/dsc deque}}
{{dsc inc|cpp/container/dsc list}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru|tr}}
{{cpp/container/unordered_map/title|insert}}
{{cpp/container/unordered_map/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|
std::pair&lt;iterator, bool&gt; insert( const value_type&amp; value );
}}
{{dcl|num=2|since=c++17|
std::pair&lt;iterator, bool&gt; insert( value_type&amp;&amp; value );
}}
{{dcl|num=3|since=c++11|
template&lt; class P &gt;
std::pair&lt;iterator, bool&gt; insert( P&amp;&amp; value );
}}
{{dcl|num=4|since=c++11|
iterator insert( const_iterator hint, const value_type&amp; value );
}}
{{dcl|num=5|since=c++17|
iterator insert( const_iterator hint, value_type&amp;&amp; value );
}}
{{dcl|num=6|since=c++11|
template&lt; class P &gt;
iterator insert( const_iterator hint, P&amp;&amp; value );
}}
{{dcl|num=7|since=c++11|
template&lt; class InputIt &gt;
void insert( InputIt first, InputIt last );
}}
{{dcl|num=8|since=c++11|
void insert( std::initializer_list&lt;value_type&gt; ilist );
}}
{{dcl|num=9|since=c++17|
insert_return_type insert( node_type&amp;&amp; nh );
}}
{{dcl|num=10|since=c++17|
iterator insert( const_iterator hint, node_type&amp;&amp; nh );
}}
{{dcl end}}

如果容器尚未含有带等价键的元素，那么就会将元素插入到容器中。

@1-3@ 插入 {{c|value}}。
@@ 重载 {{v|3}} 等价于 {{c|emplace(std::forward&lt;P&gt;(value))}}，并且只有在 {{c|1=std::is_constructible&lt;value_type, P&amp;&amp;&gt;::value == true}} 时才会参与重载决议。

@4-6@ 插入 {{c|value}}，以 {{c|hint}} 作为应当开始搜索的位置的非强制建议。
@@ 重载 {{v|6}} 等价于 {{c|emplace_hint(hint, std::forward&lt;P&gt;(value))}}，并且只有在 {{c|1=std::is_constructible&lt;value_type, P&amp;&amp;&gt;::value == true}} 时才会参与重载决议。

@7@ 插入来自范围 {{range|first|last}} 的元素。{{cpp/container/lwg2488-note}}
@@ 如果 {{range|first|last}} 不是[[cpp/iterator#范围|有效范围]]，或者 {{c|first}} 和/或 {{c|last}} 是指向 {{c|*this}} 中的迭代器，那么行为未定义。

@8@ 插入来自初始化式列表 {{c|ilist}} 的元素。{{cpp/container/lwg2488-note}}

{{cpp/container/node handle insert desc|unordered_map|9|10}}

{{cpp/container/note iterator invalidation|unordered_map|insert}}

===参数===
{{par begin}}
{{par|hint|迭代器，用作插入内容位置的建议}}
{{par|value|要插入的元素值}}
{{par range|3=要插入的|range=源}}
{{par|ilist|插入值来源的初始化器列表}}
{{par|nh|兼容的[[cpp/container/node_handle|节点句柄]]}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par end}}

===返回值===
@1-3@ {{cpp/container/return iterator pair||pair}}

@4-6@ {{cpp/container/return iterator pair}}

@7,8@ （无）

{{cpp/container/node handle insert return|unordered_map|9|10}}

===异常===
@1-6@ {{cpp/strong exception safety guarantee}}

@7,8@ 无异常安全保证。

@9,10@ {{cpp/strong exception safety guarantee}}

===复杂度===
@1-6@ 平均情况：{{tt|O(1)}}，最坏情况 {{tt|O(size())}}

@7,8@ 平均情况：{{tt|O(N)}}，其中 N 是要插入的元素数。最坏情况：{{tt|O(N*size()+N)}}

@9,10@ 平均情况：{{tt|O(1)}}，最坏情况 {{tt|O(size())}}

===注解===
{{cpp/container/hinted insert note|4-6}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;unordered_map&gt;

int main ()
{
    std::unordered_map&lt;int, std::string&gt; dict = {&lt;!----&gt;{1, "one"}, {2, "two"}&lt;!----&gt;};
    dict.insert({3, "three"});
    dict.insert(std::make_pair(4, "four"));
    dict.insert({&lt;!----&gt;{4, "another four"}, {5, "five"}&lt;!----&gt;});
    
    const bool ok = dict.insert({1, "another one"}).second;
    std::cout &lt;&lt; "插入 1 =&gt; \"another one\" " 
              &lt;&lt; (ok ? "成功" : "失败") &lt;&lt; '\n';
    
    std::cout &lt;&lt; "内容：\n";
    for (auto&amp; p : dict)
        std::cout &lt;&lt; ' ' &lt;&lt; p.first &lt;&lt; " =&gt; " &lt;&lt; p.second &lt;&lt; '\n';
}
|p=true
|output=
插入 1 -&gt; "another one" 失败
内容：
 5 =&gt; five
 1 =&gt; one
 2 =&gt; two
 3 =&gt; three
 4 =&gt; four
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2005|std=C++11|before=重载 {{v|3,6}} 只有在 {{tt|P}} 可以隐式装换到&lt;br&gt;{{tt|value_type}} 时才会参与重载决议|after=只有在 {{tt|value_type}} 可以从&lt;br&gt;{{tt|P&amp;&amp;}} 构造时才会参与}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc emplace|unordered_map}}
{{dsc inc|cpp/container/dsc emplace_hint|unordered_map}}
{{dsc inc|cpp/container/dsc insert_or_assign|unordered_map}}
{{dsc inc|cpp/iterator/dsc inserter}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
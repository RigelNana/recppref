{{cpp/title|unordered_multimap}}
{{cpp/container/unordered_multimap/navbar}}
{{dcl begin}}
{{dcl header|unordered_map}}
{{dcl|num=1|since=c++11|1=
template&lt;
    class Key,
    class T,
    class Hash = std::hash&lt;Key&gt;,
    class KeyEqual = std::equal_to&lt;Key&gt;,
    class Allocator = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;
&gt; class unordered_multimap;
}}
{{dcl|num=2|since=c++17|1=
namespace pmr {
    template&lt;
        class Key,
        class T,
        class Hash = std::hash&lt;Key&gt;,
        class Pred = std::equal_to&lt;Key&gt;
    &gt; using unordered_multimap =
          std::unordered_multimap&lt;Key, T, Hash, Pred,
              std::pmr::polymorphic_allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt;;
}
}}
{{dcl end}}

unordered_multimap 是一种无序关联容器，支持等价键（unordered_multimap 可含有每个键值的多个副本）并将键与另一类型的值关联。unordered_multimap 类支持向前迭代器。搜索、插入和移除拥有平均常数时间复杂度。

元素在内部不以任何特定顺序排序，但被组织到桶中。元素被放进哪个桶完全依赖于其键的散列值。这允许快速地访问单独的元素，因为只要散列值被计算出来，它就代表元素所放入的确切的桶。

不要求此容器的遍历顺序稳定（因此 {{lc|std::equal}} 不能用于比较两个 {{tt|std::unordered_multimap}}），但键比较''等价''（以 {{lc|key_eq()}} 为比较器比较相等）的每组元素在迭代顺序中均组成连续的子范围，也可以用 {{lc|equal_range()}} 访问它们。

{{tt|std::unordered_multimap}} 满足{{named req|Container}}、{{named req|AllocatorAwareContainer}}和{{named req|UnorderedAssociativeContainer}}的要求。

{{cpp/is_constexpr|since=c++26|transient=yes}}

===模板形参===
{{todo|Add descriptions of the template parameters.}}

===成员类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc inc|cpp/container/dsc key_type|unordered_multimap}}
{{dsc inc|cpp/container/dsc mapped_type|unordered_multimap}}
{{dsc inc|cpp/container/dsc value_type|unordered_multimap}}
{{dsc inc|cpp/container/dsc size_type|unordered_multimap}}
{{dsc inc|cpp/container/dsc difference_type|unordered_multimap}}
{{dsc inc|cpp/container/dsc hasher|unordered_multimap}}
{{dsc inc|cpp/container/dsc key_equal|unordered_multimap}}
{{dsc inc|cpp/container/dsc allocator_type|unordered_multimap}}
{{dsc inc|cpp/container/dsc reference|unordered_multimap}}
{{dsc inc|cpp/container/dsc const_reference|unordered_multimap}}
{{dsc inc|cpp/container/dsc pointer|unordered_multimap}}
{{dsc inc|cpp/container/dsc const_pointer|unordered_multimap}}
{{dsc inc|cpp/container/dsc iterator|unordered_multimap}}
{{dsc inc|cpp/container/dsc const_iterator|unordered_multimap}}
{{dsc inc|cpp/container/dsc local_iterator|unordered_multimap}}
{{dsc inc|cpp/container/dsc const_local_iterator|unordered_multimap}}
{{dsc inc|cpp/container/dsc node_type|unordered_multimap}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/container/dsc constructor|unordered_multimap}}
{{dsc inc|cpp/container/dsc destructor|unordered_multimap}}
{{dsc inc|cpp/container/dsc operator{{=}}|unordered_multimap}}
{{dsc inc|cpp/container/dsc get_allocator|unordered_multimap}}

{{dsc h2|迭代器}}
{{dsc inc|cpp/container/dsc begin|unordered_multimap}}
{{dsc inc|cpp/container/dsc end|unordered_multimap}}

{{dsc h2|容器}}
{{dsc inc|cpp/container/dsc empty|unordered_multimap}}
{{dsc inc|cpp/container/dsc size|unordered_multimap}}
{{dsc inc|cpp/container/dsc max_size|unordered_multimap}}

{{dsc h2|修改器}}
{{dsc inc|cpp/container/dsc clear|unordered_multimap}}
{{dsc inc|cpp/container/dsc insert|unordered_multimap}}
{{dsc inc|cpp/container/dsc insert_range|unordered_multimap}}
{{dsc inc|cpp/container/dsc emplace|unordered_multimap}}
{{dsc inc|cpp/container/dsc emplace_hint|unordered_multimap}}
{{dsc inc|cpp/container/dsc erase|unordered_multimap}}
{{dsc inc|cpp/container/dsc swap|unordered_multimap}}
{{dsc inc|cpp/container/dsc extract|unordered_multimap}}
{{dsc inc|cpp/container/dsc merge|unordered_multimap}}

{{dsc h2|查找}}
{{dsc inc|cpp/container/dsc count|unordered_multimap}}
{{dsc inc|cpp/container/dsc find|unordered_multimap}}
{{dsc inc|cpp/container/dsc contains|unordered_multimap}}
{{dsc inc|cpp/container/dsc equal_range|unordered_multimap}}

{{dsc h2|桶接口}}
{{dsc inc|cpp/container/dsc begin(int)|unordered_multimap}}
{{dsc inc|cpp/container/dsc end(int)|unordered_multimap}}
{{dsc inc|cpp/container/dsc bucket_count|unordered_multimap}}
{{dsc inc|cpp/container/dsc max_bucket_count|unordered_multimap}}
{{dsc inc|cpp/container/dsc bucket_size|unordered_multimap}}
{{dsc inc|cpp/container/dsc bucket|unordered_multimap}}

{{dsc h2|哈希策略}}
{{dsc inc|cpp/container/dsc load_factor|unordered_multimap}}
{{dsc inc|cpp/container/dsc max_load_factor|unordered_multimap}}
{{dsc inc|cpp/container/dsc rehash|unordered_multimap}}
{{dsc inc|cpp/container/dsc reserve|unordered_multimap}}

{{dsc h2|观察器}}
{{dsc inc|cpp/container/dsc hash_function|unordered_multimap}}
{{dsc inc|cpp/container/dsc key_eq|unordered_multimap}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/container/dsc operator_cmp_unord|unordered_multimap}}
{{dsc inc|cpp/container/dsc swap2|unordered_multimap}}
{{dsc inc|cpp/container/dsc erase_if|unordered_multimap}}
{{dsc end}}

{{rrev|since=c++17|
==={{rl|deduction guides|推导指引}}===
}}

===注解===
{{ftm begin|std=1|comment=1}}
{{ftm|__cpp_lib_containers_ranges|value=202202L|std=C++23|容器的范围构造和插入}}
{{ftm|__cpp_lib_constexpr_containers|value=202502L|std=C++26|{{c/core|constexpr}} {{tt|std::unordered_multimap}}}}
{{ftm end}}

===示例===
{{example}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2050|std=C++11|before={{tt|reference}}、{{tt|const_reference}}、{{tt|pointer}} 和&lt;br&gt;{{tt|const_pointer}} 的定义都基于 {{tt|allocator_type}}|after=基于 {{tt|value_type}} 和&lt;br&gt;{{lc|std::allocator_traits}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc unordered_map}}
{{dsc inc|cpp/container/dsc multimap}}
{{dsc inc|cpp/container/dsc flat_multimap}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
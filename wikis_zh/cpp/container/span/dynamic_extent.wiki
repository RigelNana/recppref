{{cpp/title|dynamic_extent}}
{{cpp/container/span/navbar}}
{{dcl begin}}
{{dcl header|span}}
{{dcl|since=c++20|1=
inline constexpr std::size_t dynamic_extent = std::numeric_limits&lt;std::size_t&gt;::max();
}}
{{dcl end}}

{{tt|std::dynamic_extent}} 是 {{lc|std::size_t}} 类型的常量，通常用于指示使用了 {{tt|std::dynamic_extent}} 的任何类型都将会 ''动态地'' 存储它的值（如大小）而不是令该值 ''静态地'' 在类型中已知。

它用于以下几种情况：
* 用以区分静态和动态尺度的 {{ltt|cpp/container/span|std::span}}。
{{rrev|since=c++23|1=
* 用以指示 {{ltt|cpp/container/mdspan/extents|std::extents}} 中某个特定秩索引上的尺度将会动态存储。
}}
{{rrev|since=c++26|1=
* 用以指示 {{ltt|cpp/container/mdspan|std::mdspan}} 的有填充布局将会动态存储其填充值。
}}

===注解===
由于 {{tt|std::size_t}} 是无符号类型，等价的定义是：
{{source|1=
inline constexpr std::size_t dynamic_extent = -1;
}}

见[[cpp/language/implicit_conversion#整数转换|整数转换]]。

===示例===
{{example
|code=
#include &lt;array&gt;
#include &lt;cassert&gt;
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
#include &lt;span&gt;
#include &lt;string_view&gt;
#include &lt;vector&gt;

int main()
{
    auto print = [](std::string_view const name, std::size_t ex)
    {
        std::cout &lt;&lt; name &lt;&lt; ", ";
        if (std::dynamic_extent == ex)
            std::cout &lt;&lt; "动态尺度\n";
        else
            std::cout &lt;&lt; "静态尺度 = " &lt;&lt; ex &lt;&lt; '\n';
    };

    int a[]{1, 2, 3, 4, 5};

    std::span span1{a};
    print("span1", span1.extent);

    std::span&lt;int, std::dynamic_extent&gt; span2{a};
    print("span2", span2.extent);

    std::array ar{1, 2, 3, 4, 5};
    std::span span3{ar};
    print("span3", span3.extent);

    std::vector v{1, 2, 3, 4, 5};
    std::span span4{v};
    print("span4", span4.extent);
}
|output=
span1, 静态尺度 = 5
span2, 动态尺度
span3, 静态尺度 = 5
span4, 动态尺度
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc span}}
{{dsc inc|cpp/container/mdspan/dsc extents}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
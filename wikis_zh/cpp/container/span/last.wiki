{{cpp/container/span/title|last}}
{{cpp/container/span/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|
template&lt; std::size_t Count &gt;
constexpr std::span&lt;element_type, Count&gt; last() const;
}}
{{dcl|num=2|since=c++20|
constexpr std::span&lt;element_type, std::dynamic_extent&gt;
    last( size_type count ) const;
}}
{{dcl end}}

获得此 span 的后 {{c|Count}} 或 {{c|count}} 个元素上的子视图。

@1@ 元素个数由模板实参提供，并且子视图拥有静态长度。
@@ 如果 {{c|Count &gt; Extent}} 是 {{c|true}}，那么程序非良构。

@2@ 元素个数由函数实参提供，并且子视图拥有动态长度。

{{cpp/hardened ub if|since=c++26| {{c|Count &gt; size()}} 或 {{c|count &gt; size()}} 是 {{c|true}}}}

===参数===
{{par begin}}
{{par|count|子视图的元素个数}}
{{par end}}

===返回值===
@1@ {{c|std::span&lt;element_type, Count&gt;{data() + (size() - Count), Count}&lt;!----&gt;}}

@2@ {{c|std::span&lt;element_type, std::dynamic_extent&gt;{data() + (size() - count), count}&lt;!----&gt;}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;span&gt;
#include &lt;string_view&gt;

void println(const std::string_view title, const auto&amp; container)
{
    std::cout &lt;&lt; title &lt;&lt; '[' &lt;&lt; std::size(container) &lt;&lt; "]{ ";
    for (const auto&amp; elem : container)
        std::cout &lt;&lt; elem &lt;&lt; ", ";
    std::cout &lt;&lt; "};\n";
};

void run(std::span&lt;const int&gt; span)
{
    println("span：", span);
    
    std::span&lt;const int, 3&gt; span_last = span.last&lt;3&gt;();
    println("span.last&lt;3&gt;()：", span_last);
    
    std::span&lt;const int, std::dynamic_extent&gt; span_last_dynamic = span.last(2);
    println("span.last(2)：", span_last_dynamic);
}

int main()
{
    int a[8]{1, 2, 3, 4, 5, 6, 7, 8};
    println("int a", a);
    run(a);
}
|output=
int a[8]{ 1, 2, 3, 4, 5, 6, 7, 8, };
span：[8]{ 1, 2, 3, 4, 5, 6, 7, 8, };
span.last&lt;3&gt;()：[3]{ 6, 7, 8, };
span.last(2)：[2]{ 7, 8, };
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/span/dsc first}}
{{dsc inc|cpp/container/span/dsc subspan}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
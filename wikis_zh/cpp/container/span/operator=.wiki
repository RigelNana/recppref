{{cpp/container/span/title|operator{{=}}}}
{{cpp/container/span/navbar}}

{{ddcl|since=c++20|1=
constexpr span&amp; operator=( const span&amp; other ) noexcept = default;
}}

赋值 {{c|other}} 给 {{c|*this}}。此预置的赋值运算符进行数据指针和大小的浅复制，即调用此函数后，{{c|1=data() == other.data()}} 且 {{c|1=size() == other.size()}}。

=== 参数 ===
{{par begin}}
{{par | other |要复制的另一 span}}
{{par end}}

=== 返回值 ===
{{c|*this}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;cassert&gt;
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
#include &lt;span&gt;
#include &lt;string_view&gt;

void print(std::string_view info = "", std::span&lt;const int&gt; span = {},
           std::size_t extent = 0, std::size_t size_of = 0)
{
    if (span.empty())
    {
        std::cout &lt;&lt; info &lt;&lt; '\n';
        return;
    }
    
    std::cout &lt;&lt; info &lt;&lt; '[' &lt;&lt; span.size() &lt;&lt; "] {";
    std::ranges::for_each(span, [](const int x) { std::cout &lt;&lt; ' ' &lt;&lt; x; });
    std::cout &lt;&lt; " }";

    if (extent)
    {
        std::cout &lt;&lt; " 长度 = ";
        if (extent == std::dynamic_extent)
            std::cout &lt;&lt; "dynamic";
        else
            std::cout &lt;&lt; extent;
    }

    if (size_of)
        std::cout &lt;&lt; ", 大小 = " &lt;&lt; size_of;

    std::cout &lt;&lt; '\n';
}

int main()
{
    std::array&lt;int,6&gt; a1;
    std::array&lt;int,6&gt; a2;
    a1.fill(3);
    a2.fill(4);

    auto s1 = std::span(a1);
    auto s2 = std::span(a2);
    print("s1", s1, s1.extent, sizeof(s1));
    print("s2", s2, s2.extent, sizeof(s2));

    // 检查赋值是否进行浅复制
    s1 = s2;
    (s1.data() == s2.data() &amp;&amp; s1.size() == s2.size())
        ? print("s1 = s2; 是浅复制!")
        : print("s1 = s2; 是深复制!");
    print("s1", s1);

    print("以 5 填充 s1:");
    std::ranges::fill(s1, 5);
    // s2 亦被“更新”因为 s1 与 s2 引用同一数据
    assert(std::ranges::equal(s1, s2));
    print("s1", s1);
    print("s2", s2);
    print();

    int a3[]{1, 2, 3, 4};
    int a4[]{2, 3, 4, 5};
    int a5[]{3, 4, 5};

    std::span&lt;int, std::dynamic_extent&gt; dynamic_1{a3};
    std::span&lt;int, std::dynamic_extent&gt; dynamic_2{a4, 3};
    std::span&lt;int, 4&gt; static_1{a3};
    std::span&lt;int, 4&gt; static_2{a4};
    std::span&lt;int, 3&gt; static_3{a5};

    print("dynamic_1", dynamic_1, dynamic_1.extent, sizeof(dynamic_1));
    print("dynamic_2", dynamic_2, dynamic_2.extent, sizeof(dynamic_2));
    print("static_1", static_1, static_1.extent, sizeof(static_1));
    print("static_2", static_2, static_2.extent, sizeof(static_2));
    print("static_3", static_3, static_3.extent, sizeof(static_3));

    dynamic_1 = dynamic_2; // OK
    dynamic_1 = static_1;  // OK
//  static_1 = dynamic_1;  // 错误：无匹配的 ‘operator=’
    static_1 = static_2;   // OK：相同长度 = 4
//  static_1 = static_3;   // 错误：不同长度：4 与 3
}
|output=
s1[6] { 3 3 3 3 3 3 } 长度 = 6, 大小 = 8
s2[6] { 4 4 4 4 4 4 } 长度 = 6, 大小 = 8
s1 = s2; 是浅复制!
s1[6] { 4 4 4 4 4 4 }
Fill s1 with 5:
s1[6] { 5 5 5 5 5 5 }
s2[6] { 5 5 5 5 5 5 }

dynamic_1[4] { 1 2 3 4 } 长度 = dynamic, 大小 = 16
dynamic_2[3] { 2 3 4 } 长度 = dynamic, 大小 = 16
static_1[4] { 1 2 3 4 } 长度 = 4, 大小 = 8
static_2[4] { 2 3 4 5 } 长度 = 4, 大小 = 8
static_3[3] { 3 4 5 } 长度 = 3, 大小 = 8
}}

=== 参阅 ===
{{dsc begin}}
{{dsc inc|cpp/container/dsc constructor|span}}
{{dsc inc|cpp/container/dsc data|span}}
{{dsc inc|cpp/container/dsc size|span}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
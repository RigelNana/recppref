{{cpp/container/span/title|subspan}}
{{cpp/container/span/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
template&lt; std::size_t Offset,
          std::size_t Count = std::dynamic_extent &gt;
constexpr std::span&lt;element_type, /* 见下文 */&gt;
    subspan() const;
}}
{{dcl|since=c++20|num=2|1=
constexpr std::span&lt;element_type, std::dynamic_extent&gt;
    subspan( size_type Offset,
             size_type Count = std::dynamic_extent ) const;
}}
{{dcl end}}

获得此 span 的若干连续元素上的子视图，根据元素个数和偏移确定要包含的元素。

@1@ 元素个数和偏移由模板实参提供，并且子视图只有在 {{c|Count}} 和 {{c|Offset}} 都是 {{c|std::dynamic_extent}} 时才拥有动态长度。
* 如果 {{c|Count}} 是 {{c|std::dynamic_extent}}，那么子视图包含从第 {{c|Offset}} 个元素开始的所有元素。
* 否则子视图包含从第 {{c|Offset}} 个元素开始的 {{c|Count}} 个元素。

@@ 以 {{c|FinalExtent}} 表示返回类型的第二个模板实参，它的定义是 {{c multi
|Count !{{=}} std::dynamic_extent
|    ? Count
|    : (Extent !{{=}} std::dynamic_extent
|        ? Extent - Offset
|        : std::dynamic_extent)
}}。

@@ {{cpp/error if|{{c|1=Offset &lt;= Extent &amp;&amp; (Count == std::dynamic_extent {{!!}} Count &lt;= Extent - Offset)}} 是 {{c|false}}}}。

@@ {{cpp/hardened ub if|since=c++26| {{c|1=Offset &lt;= size() &amp;&amp; (Count == std::dynamic_extent {{!!}} Count &lt;= size() - Offset)}} 是 {{c|false}}}}


@2@ 元素个数和偏移由函数实参提供，并且子视图始终拥有动态长度。
* 如果 {{c|count}} 是 {{c|std::dynamic_extent}}，那么子视图包含从第 {{c|offset}} 个元素开始的所有元素。
* 否则子视图包含从第 {{c|offset}} 个元素开始的 {{c|count}} 个元素。

@@ {{cpp/hardened ub if|since=c++26| {{c|1=offset &lt;= size() &amp;&amp; (count == std::dynamic_extent {{!!}} count &lt;= size() - offset)}} 是 {{c|false}}}}

===返回值===
@1@ {{c multi|std::span&lt;element_type, FinalExtent&gt;|    (data() + Offset, Count !{{=}} std::dynamic_extent ? Count : size() - Offset))}}

@2@ {{c multi|std::span&lt;element_type, std::dynamic_extent&gt;|    (data() + offset, count !{{=}} std::dynamic_extent ? count : size() - offset))}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cstdio&gt;
#include &lt;numeric&gt;
#include &lt;ranges&gt;
#include &lt;span&gt;

void display(std::span&lt;const char&gt; abc)
{
    const auto columns{20U};
    const auto rows{abc.size() - columns + 1};

    for (auto offset{0U}; offset &lt; rows; ++offset)
    {
        std::ranges::for_each(abc.subspan(offset, columns), std::putchar);
        std::puts("");
    }
}

int main()
{
    char abc[26];
    std::ranges::iota(abc, 'A');
    display(abc);
}
|output=
ABCDEFGHIJKLMNOPQRST
BCDEFGHIJKLMNOPQRSTU
CDEFGHIJKLMNOPQRSTUV
DEFGHIJKLMNOPQRSTUVW
EFGHIJKLMNOPQRSTUVWX
FGHIJKLMNOPQRSTUVWXY
GHIJKLMNOPQRSTUVWXYZ
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/span/dsc first}}
{{dsc inc|cpp/container/span/dsc last}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
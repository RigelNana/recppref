{{cpp/container/span/title|first}}
{{cpp/container/span/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|
template&lt; std::size_t Count &gt;
constexpr std::span&lt;element_type, Count&gt; first() const;
}}
{{dcl|num=2|since=c++20|
constexpr std::span&lt;element_type, std::dynamic_extent&gt;
    first( size_type count ) const;
}}
{{dcl end}}

获得此 span 的前 {{c|Count}} 或 {{c|count}} 个元素上的子视图。

@1@ 元素个数由模板实参提供，并且子视图拥有静态长度。
@@ 如果 {{c|Count &gt; Extent}} 是 {{c|true}}，那么程序非良构。

@2@ 元素个数由函数实参提供，并且子视图拥有动态长度。

{{cpp/hardened ub if|since=c++26| {{c|Count &gt; size()}} 或 {{c|count &gt; size()}} 是 {{c|true}}}}

===阐述===
{{par begin}}
{{par|count|子视图的元素个数}}
{{par end}}

===返回值===
@1@ {{c|std::span&lt;element_type, Count&gt;{data(), Count}&lt;!----&gt;}}

@2@ {{c|std::span&lt;element_type, std::dynamic_extent&gt;{data(), count}&lt;!----&gt;}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;span&gt;
#include &lt;string_view&gt;

void print(const std::string_view title,
           const std::ranges::forward_range auto&amp; container)
{
    auto size{std::size(container)};
    std::cout &lt;&lt; title &lt;&lt; '[' &lt;&lt; size &lt;&lt; "]{";
    for (const auto&amp; elem : container)
        std::cout &lt;&lt; elem &lt;&lt; (--size ? ", " : "");
    std::cout &lt;&lt; "};\n";
}

void run_game(std::span&lt;const int&gt; span)
{
    print("span：", span);
    
    std::span&lt;const int, 5&gt; span_first = span.first&lt;5&gt;();
    print("span.first&lt;5&gt;()：", span_first);
    
    std::span&lt;const int, std::dynamic_extent&gt; span_first_dynamic = span.first(4);
    print("span.first(4)：", span_first_dynamic);
}

int main()
{
    int a[8]{1, 2, 3, 4, 5, 6, 7, 8};
    print("int a", a);
    run_game(a);
}
|output=
int a[8]{1, 2, 3, 4, 5, 6, 7, 8};
span：[8]{1, 2, 3, 4, 5, 6, 7, 8};
span.first&lt;5&gt;()：[5]{1, 2, 3, 4, 5};
span.first(4)：[4]{1, 2, 3, 4};
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/span/dsc last}}
{{dsc inc|cpp/container/span/dsc subspan}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
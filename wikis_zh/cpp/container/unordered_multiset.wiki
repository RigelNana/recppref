{{cpp/title|unordered_multiset}}
{{cpp/container/unordered_multiset/navbar}}
{{dcl begin}}
{{dcl header|unordered_set}}
{{dcl|num=1|since=c++11|1=
template&lt;
    class Key,
    class Hash = std::hash&lt;Key&gt;,
    class KeyEqual = std::equal_to&lt;Key&gt;,
    class Allocator = std::allocator&lt;Key&gt;
&gt; class unordered_multiset;
}}
{{dcl|num=2|since=c++17|1=
namespace pmr {
    template&lt;
        class Key,
        class Hash = std::hash&lt;Key&gt;,
        class Pred = std::equal_to&lt;Key&gt;
    &gt; using unordered_multiset = std::unordered_multiset&lt;Key, Hash, Pred,
                                     std::pmr::polymorphic_allocator&lt;Key&gt;&gt;;
}
}}
{{dcl end}}

{{tt|unordered_multiset}} 是一种关联容器，含有可能非唯一 Key 类型对象的集合。搜索、插入和移除拥有平均常数时间复杂度。

元素在内部并不以任何顺序排序，只是被组织到桶中。元素被放入哪个桶完全依赖其值的散列。这允许快速访问单独的元素，因为一旦计算散列值，它就指代放置该元素的确切的桶。

不要求此容器的迭代顺序稳定（因此 {{lc|std::equal}} 不能用于比较两个 {{tt|std::unordered_multiset}}），但关键比较''等价''（以 {{lc|key_eq()}} 为比较器比较相等）的每组元素均组成迭代顺序中的连续子范围，也可以用 {{lc|equal_range()}} 访问它。

{{tt|std::unordered_multiset}} 满足{{named req|Container}}、{{named req|AllocatorAwareContainer}}和{{named req|UnorderedAssociativeContainer}}的要求。

{{cpp/is_constexpr|since=c++26|transient=yes}}

===模板形参===
{{todo|添加模板形参的说明。}}

===成员类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc inc|cpp/container/dsc key_type|unordered_multiset}}
{{dsc inc|cpp/container/dsc value_type|unordered_multiset}}
{{dsc inc|cpp/container/dsc size_type|unordered_multiset}}
{{dsc inc|cpp/container/dsc difference_type|unordered_multiset}}
{{dsc inc|cpp/container/dsc hasher|unordered_multiset}}
{{dsc inc|cpp/container/dsc key_equal|unordered_multiset}}
{{dsc inc|cpp/container/dsc allocator_type|unordered_multiset}}
{{dsc inc|cpp/container/dsc reference|unordered_multiset}}
{{dsc inc|cpp/container/dsc const_reference|unordered_multiset}}
{{dsc inc|cpp/container/dsc pointer|unordered_multiset}}
{{dsc inc|cpp/container/dsc const_pointer|unordered_multiset}}
{{dsc inc|cpp/container/dsc iterator|unordered_multiset}}
{{dsc inc|cpp/container/dsc const_iterator|unordered_multiset}}
{{dsc inc|cpp/container/dsc local_iterator|unordered_multiset}}
{{dsc inc|cpp/container/dsc const_local_iterator|unordered_multiset}}
{{dsc inc|cpp/container/dsc node_type|unordered_multiset}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/container/dsc constructor|unordered_multiset}}
{{dsc inc|cpp/container/dsc destructor|unordered_multiset}}
{{dsc inc|cpp/container/dsc operator{{=}}|unordered_multiset}}
{{dsc inc|cpp/container/dsc get_allocator|unordered_multiset}}

{{dsc h2|迭代器}}
{{dsc inc|cpp/container/dsc begin|unordered_multiset}}
{{dsc inc|cpp/container/dsc end|unordered_multiset}}

{{dsc h2|容量}}
{{dsc inc|cpp/container/dsc empty|unordered_multiset}}
{{dsc inc|cpp/container/dsc size|unordered_multiset}}
{{dsc inc|cpp/container/dsc max_size|unordered_multiset}}

{{dsc h2|修改器}}
{{dsc inc|cpp/container/dsc clear|unordered_multiset}}
{{dsc inc|cpp/container/dsc insert|unordered_multiset}}
{{dsc inc|cpp/container/dsc insert_range|unordered_multiset}}
{{dsc inc|cpp/container/dsc emplace|unordered_multiset}}
{{dsc inc|cpp/container/dsc emplace_hint|unordered_multiset}}
{{dsc inc|cpp/container/dsc erase|unordered_multiset}}
{{dsc inc|cpp/container/dsc swap|unordered_multiset}}
{{dsc inc|cpp/container/dsc extract|unordered_multiset}}
{{dsc inc|cpp/container/dsc merge|unordered_multiset}}

{{dsc h2|查找}}
{{dsc inc|cpp/container/dsc count|unordered_multiset}}
{{dsc inc|cpp/container/dsc find|unordered_multiset}}
{{dsc inc|cpp/container/dsc contains|unordered_multiset}}
{{dsc inc|cpp/container/dsc equal_range|unordered_multiset}}

{{dsc h2|桶接口}}
{{dsc inc|cpp/container/dsc begin(int)|unordered_multiset}}
{{dsc inc|cpp/container/dsc end(int)|unordered_multiset}}
{{dsc inc|cpp/container/dsc bucket_count|unordered_multiset}}
{{dsc inc|cpp/container/dsc max_bucket_count|unordered_multiset}}
{{dsc inc|cpp/container/dsc bucket_size|unordered_multiset}}
{{dsc inc|cpp/container/dsc bucket|unordered_multiset}}

{{dsc h2|哈希策略}}
{{dsc inc|cpp/container/dsc load_factor|unordered_multiset}}
{{dsc inc|cpp/container/dsc max_load_factor|unordered_multiset}}
{{dsc inc|cpp/container/dsc rehash|unordered_multiset}}
{{dsc inc|cpp/container/dsc reserve|unordered_multiset}}

{{dsc h2|观察器}}
{{dsc inc|cpp/container/dsc hash_function|unordered_multiset}}
{{dsc inc|cpp/container/dsc key_eq|unordered_multiset}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/container/dsc operator_cmp_unord|unordered_multiset}}
{{dsc inc|cpp/container/dsc swap2|unordered_multiset}}
{{dsc inc|cpp/container/dsc erase_if|unordered_multiset}}
{{dsc end}}

{{rrev|since=c++17|
==={{rl|deduction guides|推导指引}}===
}}

===注解===
{{cpp/container/assoc note}}

{{ftm begin|std=1|comment=1}}
{{ftm|__cpp_lib_containers_ranges|value=202202L|std=C++23|容器的范围构造和插入}}
{{ftm|__cpp_lib_constexpr_containers|value=202502L|std=C++26|{{c/core|constexpr}} {{tt|std::unordered_muliset}}}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;unordered_set&gt;

int main()
{
    auto print = []&lt;class T&gt;(const T &amp;container) {
        if constexpr (requires {
                          typename T::key_type;
                          typename T::mapped_type;
                      })
        {
            for (const auto &amp;[key, value] : container)
            {
                std::cout &lt;&lt; key &lt;&lt; ": " &lt;&lt; value &lt;&lt; '\n';
            }
        }
        else
        {
            for (const auto &amp;element : container)
            {
                std::cout &lt;&lt; element &lt;&lt; " ";
            }
            std::cout &lt;&lt; '\n';
        }
        std::cout &lt;&lt; '\n';
    };
    std::map&lt;int, std::string&gt; myMap = {{5, "5"}, {2, "2"}, {8, "8"}, {1, "1"}, {9, "9"}};
    std::cout &lt;&lt; "std::map: \n";
    print(myMap);

    std::set&lt;int&gt; mySet = {5, 2, 8, 1, 9};
    std::cout &lt;&lt; "std::set: \n";
    print(mySet);

    // std::unordered_set
    std::unordered_set&lt;int&gt; myHashSet = {5, 2, 8, 1, 9};
    myHashSet.insert(3);
    myHashSet.insert(3);

    std::cout &lt;&lt; "std::unordered_set: \n";
    print(myHashSet);

    // std::unordered_multiset
    std::unordered_multiset&lt;int&gt; myMultiHashSet = {5, 2, 8, 1, 9};
    myMultiHashSet.insert(2);
    myMultiHashSet.insert(2);

    std::cout &lt;&lt; "std::unordered_multiset : \n";
    print(myMultiHashSet);

    return 0;
}|output=
std::map: 
1: 1
2: 2
5: 5
8: 8
9: 9

std::set:
1 2 5 8 9

std::unordered_set:
3 9 1 8 2 5

std::unordered_multiset :
5 2 2 2 8 1 9
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2050|std=C++11|before={{tt|reference}}、{{tt|const_reference}}、{{tt|pointer}} 和&lt;br&gt;{{tt|const_pointer}} 的定义都基于 {{tt|allocator_type}}|after=基于 {{tt|value_type}} 和&lt;br&gt;{{lc|std::allocator_traits}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc unordered_set}}
{{dsc inc|cpp/container/dsc multiset}}
{{dsc inc|cpp/container/dsc flat_multiset}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
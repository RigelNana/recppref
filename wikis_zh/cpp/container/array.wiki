{{cpp/title|array}}
{{cpp/container/array/navbar}}
{{ddcl|header=array|since=c++11|
template&lt;
    class T,
    std::size_t N
&gt; struct array;
}}

{{tt|std::array}} 是封装固定大小数组的容器。

此容器是一个聚合类型，其语义等同于保有一个 [[cpp/language/array|C 风格数组]] {{c|T[N]}} 作为其唯一非静态数据成员的结构体。不同于 C 风格数组，它不会自动退化成 {{c|T*}}。作为聚合类型，它能[[cpp/language/aggregate_initialization|聚合初始化]]，只要有至多 {{tt|N}} 个能转换成 {{tt|T}} 的初始化器：{{c|1=std::array&lt;int, 3&gt; a = {1,2,3};}}。

该结构体结合了 C 风格数组的性能、可访问性与标准容器的优点，比如可获取大小、支持赋值、随机访问迭代器等。

{{tt|std::array}} 满足{{named req|Container}}和{{named req|ReversibleContainer}}，但默认构造的 array 是非空的，以及进行交换的复杂度为线性，它{{rev inl|since=c++17|满足{{named req|ContiguousContainer}}}}并部分满足{{named req|SequenceContainer}}。

当其长度为零时 {{tt|array}}（{{tt|1=N == 0}}）有特殊情况。此时，{{c|
1=array.begin() == array.end()}}，并拥有某个唯一值。在零长 {{tt|array}} 上调用 {{c|front()}} 或 {{c|back()}} 是未定义的。

也可将 {{tt|array}} 当做拥有 {{tt|N}} 个同类型元素的元组。

===迭代器失效===
按照规则，指向 {{tt|array}} 的迭代器在 {{tt|array}} 的生存期间决不会失效。然而要注意，在 {{rl|swap}} 时，迭代器将继续指向同一 {{tt|array}} 的元素，并将改变元素的值。

===模板形参===
{{par begin}}
{{par|T|元素类型。&lt;!--; must be a complete object type that is not an abstract class type.--&gt;必须为{{named req|MoveConstructible}}和{{named req|MoveAssignable}}。}}
{{par|N|数组中的元素数量或 {{c|0}}。}}
{{par end}}
{{todo|完成对模板形参的描述。}}

===成员类型===
{{dsc begin}}
{{dsc hitem | 成员类型 | 定义}}
{{dsc inc | cpp/container/dsc value_type | array}}
{{dsc inc | cpp/container/dsc size_type | array}}
{{dsc inc | cpp/container/dsc difference_type | array}}
{{dsc inc | cpp/container/dsc reference | array}}
{{dsc inc | cpp/container/dsc const_reference | array}}
{{dsc inc | cpp/container/dsc pointer | array}}
{{dsc inc | cpp/container/dsc const_pointer | array}}
{{dsc inc | cpp/container/dsc iterator | array}}
{{dsc inc | cpp/container/dsc const_iterator | array}}
{{dsc inc | cpp/container/dsc reverse_iterator | array}}
{{dsc inc | cpp/container/dsc const_reverse_iterator | array}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc h2 | 隐式定义的成员函数}}
{{dsc mem ctor | nolink=true | notes={{mark implicit}} | 遵循[[cpp/language/aggregate_initialization|聚合初始化]]的规则初始化 {{tt|array}}（注意默认初始化可以导致非类的 {{tt|T}} 保有不确定值）}}
{{dsc mem dtor | nolink=true | notes={{mark implicit}} | 销毁 {{tt|array}} 的每个元素}}
{{dsc mem fun | operator{{=}} | nolink=true | notes={{mark implicit}} | 以来自另一 {{tt|array}} 的每个元素重写 {{tt|array}} 的对应元素}}

{{dsc h2 | 元素访问}}
{{dsc inc | cpp/container/dsc at | array}}
{{dsc inc | cpp/container/dsc operator_at | array}}
{{dsc inc | cpp/container/dsc front | array}}
{{dsc inc | cpp/container/dsc back | array}}
{{dsc inc | cpp/container/dsc data | array}}

{{dsc h2 | 迭代器}}
{{dsc inc | cpp/container/dsc begin | array}}
{{dsc inc | cpp/container/dsc end | array}}
{{dsc inc | cpp/container/dsc rbegin | array}}
{{dsc inc | cpp/container/dsc rend | array}}

{{dsc h2 | 容量}}
{{dsc inc | cpp/container/dsc empty | array}}
{{dsc inc | cpp/container/dsc size | array}}
{{dsc inc | cpp/container/dsc max_size | array}}

{{dsc h2 | 操作}}
{{dsc inc | cpp/container/dsc fill | array}}
{{dsc inc | cpp/container/dsc swap | array}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc | cpp/container/dsc operator_cmp | array}}
{{dsc inc | cpp/container/array/dsc get}}
{{dsc inc | cpp/container/dsc swap2 | array}}
{{dsc inc | cpp/container/array/dsc to_array}}
{{dsc end}}

===辅助类===
{{dsc begin}}
{{dsc inc | cpp/container/array/dsc tuple_size}}
{{dsc inc | cpp/container/array/dsc tuple_element}}
{{dsc end}}

{{rrev|since=c++17|
==={{rl|deduction guides|推导指引}}===
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;

int main()
{
    // 用聚合初始化进行构造
    std::array&lt;int, 3&gt; a1{&lt;!----&gt;{1, 2, 3}&lt;!----&gt;}; // CWG 1270 修订前的 C++11 中要求双花括号
                                        // （C++11 之后的版本和 C++14 起不要求）
    std::array&lt;int, 3&gt; a2 = {1, 2, 3};  // = 后决不要求双花括号

    // 支持容器操作
    std::sort(a1.begin(), a1.end());
    std::ranges::reverse_copy(a2, std::ostream_iterator&lt;int&gt;(std::cout, " "));
    std::cout &lt;&lt; '\n';

    // 支持带范围 for 循环
    std::array&lt;std::string, 2&gt; a3{"E", "\u018E"};
    for (const auto&amp; s : a3)
        std::cout &lt;&lt; s &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    // 数组创建的推导指引 (C++17 起)
    [[maybe_unused]] std::array a4{3.0, 1.0, 4.0}; // std::array&lt;double, 3&gt;

    // 未指定的元素的行为与内建数组相同
    [[maybe_unused]] std::array&lt;int, 2&gt; a5; // 无列表初始化，a5[0] 和 a5[1] 均被默认初始化
    [[maybe_unused]] std::array&lt;int, 2&gt; a6{}; // 列表初始化，两个运算均被值初始化
                                              // a6[0] = a6[1] = 0
    [[maybe_unused]] std::array&lt;int, 2&gt; a7{1}; // 列表初始化，未指定的元素被值初始化
                                               // a7[0] = 1, a7[1] = 0
}
|output=
3 2 1
E Ǝ
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc inplace_vector}}
{{dsc inc|cpp/container/dsc vector}}
{{dsc inc|cpp/container/dsc deque}}
{{dsc inc|cpp/experimental/dsc make array}}
{{dsc end}}

{{langlinks|de|es|en|fr|it|ja|pl|pt|ru}}
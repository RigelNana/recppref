{{cpp/container/flat_multiset/title|insert}}
{{cpp/container/flat_multiset/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
iterator insert( const value_type&amp; value )
}}
{{dcl|num=2|since=c++23|
iterator insert( value_type&amp;&amp; value );
}}
{{dcl|num=3|since=c++23|
iterator insert( const_iterator pos, const value_type&amp; value );
}}
{{dcl|num=4|since=c++23|
iterator insert( const_iterator pos, value_type&amp;&amp; value );
}}
{{dcl|num=5|since=c++23|
template&lt; class InputIt &gt;
void insert( InputIt first, InputIt last );
}}
{{dcl|num=6|since=c++23|
template&lt; class InputIt &gt;
void insert( std::sorted_equivalent_t, InputIt first, InputIt last );
}}
{{dcl|num=7|since=c++23|
void insert( std::initializer_list&lt;key_type&gt; ilist );
}}
{{dcl|num=8|since=c++23|
void insert( std::sorted_equivalent_t s, std::initializer_list&lt;key_type&gt; ilist );
}}
{{dcl end}}

向容器插入元素。保持剩余等价元素的顺序。

@1@ 插入 {{c|value}}。如果容器包含带有等价键的元素，则插入到该范围的上界。等价于 {{c|return emplace(value);}}。

@2@ 插入 {{c|value}}。如果容器包含带有等价键的元素，则插入到该范围的上界。等价于 {{c|return emplace(std::move(value));}}。

@3@ 插入 {{c|value}} 到尽可能靠近紧接 {{c|pos}} 之前的位置。等价于 {{c|return emplace_hint(pos, value);}}。

@4@ 插入 {{c|value}} 到尽可能靠近紧接 {{c|pos}} 之前的位置。等价于 {{c|return emplace_hint(pos, std::move(value));}}。

@5@ 如同依次实施下列操作来插入范围 {{range|first|last}} 中的元素：
# 如同用 {{c|c.insert(c.end(), first, last);}} 插入元素到 {{rlpt|/#成员对象|c}}。
# 将新插入元素的范围按 {{rlpt|/#成员对象|compare}} 排序。
# 合并所得的有序范围和既存元素的有序范围为一个有序范围。
@@ 原位合并阶段中可能会分配内存。

@6@ 插入范围 {{range|first|last}} 中的元素。等价于 {{c|insert(first, last);}}。

@7@ 插入初始化式列表 {{c|ilist}} 中的元素。等价于 {{c|insert(ilist.begin(), ilist.end());}}。

@8@ 插入初始化式列表 {{c|ilist}} 中的元素。等价于 {{c|insert(s, ilist.begin(), ilist.end());}}。

{{cpp/container/note iterator invalidation|flat_multiset|insert}}

===参数===
{{par begin}}
{{par|pos|指向要在它之前插入新元素的位置的迭代器}}
{{par|value|要插入的元素值}}
{{par range|3=要插入的|range=源}}
{{par|ilist|要插入其中的值的初始化式列表}}
{{par|s|消歧标签，指定输入序列（根据 {{rlpt|/#成员对象|key_compare}}）有序}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par end}}

===返回值===
@1-4@ 指向所插入元素的迭代器。
@5-8@ （无）

===异常===
@1-4@ 取决于底层容器。&lt;!-- sometimes {{cpp/strong exception safety guarantee}} --&gt;
@5-8@ 无异常安全保证。

{{todo|异常保证: 1..8}}

===复杂度===
@1-4@ 线性。
@5@ {{c|N + M·log(M)}}，其中 {{mathjax-or|N|N}} 为操作前的 {{rlpt|size|size()}} 而 {{tt|M}} 为 {{c|std::distance(first, last)}}。
@6@ 线性。
@7@ {{c|N + M·log(M)}}，其中 {{mathjax-or|N|N}} 为操作前的 {{rlpt|size|size()}} 而 {{tt|M}} 为 {{c|ilist.size()}}。
@8@ 线性。

{{todo|再查一下复杂度: 1-4, 8}}

===示例===
{{example
|code=
|output=
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc emplace|flat_multiset}}
{{dsc inc|cpp/container/dsc emplace_hint|flat_multiset}}
{{dsc inc|cpp/iterator/dsc inserter}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
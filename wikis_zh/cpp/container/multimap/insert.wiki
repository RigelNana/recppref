{{cpp/container/multimap/title|insert}}
{{cpp/container/multimap/navbar}}
{{dcl begin}}
{{dcl|num=1|
iterator insert( const value_type&amp; value );
}}
{{dcl|num=2|since=c++17|
iterator insert( value_type&amp;&amp; value );
}}
{{dcl|num=3|since=c++11|
template&lt; class P &gt;
iterator insert( P&amp;&amp; value );
}}
{{dcl rev multi|num=4|until1=c++11
|dcl1=
iterator insert( iterator pos, const value_type&amp; value );
|dcl2=
iterator insert( const_iterator pos, const value_type&amp; value );
}}
{{dcl|num=5|since=c++17|
iterator insert( const_iterator pos, value_type&amp;&amp; value );
}}
{{dcl|num=6|since=c++11|
template&lt; class P &gt;
iterator insert( const_iterator pos, P&amp;&amp; value );
}}
{{dcl|num=7|
template&lt; class InputIt &gt;
void insert( InputIt first, InputIt last );
}}
{{dcl|num=8|since=c++11|
void insert( std::initializer_list&lt;value_type&gt; ilist );
}}
{{dcl|num=9|since=c++17|
iterator insert( node_type&amp;&amp; nh );
}}
{{dcl|num=10|since=c++17|
iterator insert( const_iterator pos, node_type&amp;&amp; nh );
}}
{{dcl end}}

插入元素到容器中。

@1-3@ 插入 {{c|value}}。如果容器拥有带等价键的元素，那么插入到范围的上界。
@@ 重载 {{v|3}} 等价于 {{c|emplace(std::forward&lt;P&gt;(value))}}，且只有在 {{c|1=std::is_constructible&lt;value_type, P&amp;&amp;&gt;::value == true}} 时才会参与重载决议。

@4-6@ 将 {{c|value}} 插入到尽可能接近正好在 {{c|pos}} 之前的位置。
@@ 重载 {{v|6}} 等价于 {{c|emplace_hint(hint, std::forward&lt;P&gt;(value))}}，且只有在 {{c|1=std::is_constructible&lt;value_type, P&amp;&amp;&gt;::value == true}} 时才会参与重载决议。

@7@ 插入来自范围 {{range|first|last}} 的元素。

@8@ 插入来自初始化器列表 {{c|ilist}} 的元素。

{{cpp/container/node handle insert desc|multimap|9|10}}

{{cpp/container/note iterator invalidation|multimap|insert}}

===参数===
{{par begin}}
{{par|pos|指向新元素将被插入位置之前的迭代器}}
{{par|value|要插入的值}}
{{par range|3=要插入的|range=源}}
{{par|ilist|插入值来源的初始化式列表}}
{{par|nh|兼容的[[cpp/container/node_handle|结点句柄]]}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par end}} 

===返回值===
@1-6@ 被插入元素的迭代器。

@7,8@ （无）

{{cpp/container/node handle insert return|multimap|9|10}}

===异常===
@1-6@ 如果任何操作抛出异常，那么插入无效果。

@7,8@ 无异常安全保证。

@9,10@ 如果任何操作抛出异常，那么插入无效果。

===复杂度===
@1-3@ {{tt|O(log(size()))}}。

@4-6@ 如果正好在 {{c|pos}} 的前一个位置插入，那么是均摊常数，否则是 {{tt|O(log(size()))}}。

@7,8@ {{tt|O(N&amp;middot;log(size() + N))}}，其中 {{tt|N}} 是要插入的元素数。

@9@ {{tt|O(log(size()))}}

@10@ 如果正好在 {{c|pos}} 的前一个位置插入，那么是均摊常数，否则是 {{tt|O(log(size()))}}。

===示例===
{{example
|code=
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;
#include &lt;utility&gt;
 
template&lt;class M&gt;
void print(const std::string_view rem, const M&amp; mmap)
{
    std::cout &lt;&lt; rem &lt;&lt; " ";
    for (const auto &amp; e : mmap)
        std::cout &lt;&lt; "{" &lt;&lt; e.first &lt;&lt; "," &lt;&lt; e.second &lt;&lt; "} ";
    std::cout &lt;&lt; '\n';
}

int main()
{
    // 列表初始化
    std::multimap&lt;int, std::string, std::greater&lt;int&gt;&gt; mmap
        {{2, "foo"}, {2, "bar"}, {3, "baz"}, {1, "abc"}, {5, "def"}};
    print("#1", mmap);
    
    // 用 value_type 插入
    mmap.insert(decltype(mmap)::value_type(5, "pqr"));
    print("#2", mmap);
    
    // 用 pair 插入
    mmap.insert(std::pair{6, "uvw"});
    print("#3", mmap);
    
    mmap.insert({7, "xyz"});
    print("#4", mmap);
    
    // 用 initialization_list 插入
    mmap.insert({{5, "one"}, {5, "two"}});
    print("#5", mmap);
    
    // 用一对迭代器插入
    mmap.clear();
    const auto il = {std::pair{1, "ä"}, {2, "ё"}, {2, "ö"}, {3, "ü"}&lt;!----&gt;};
    mmap.insert(il.begin(), il.end());
    print("#6", mmap);
}
|output=
#1 {5,def} {3,baz} {2,foo} {2,bar} {1,abc}
#2 {5,def} {5,pqr} {3,baz} {2,foo} {2,bar} {1,abc}
#3 {6,uvw} {5,def} {5,pqr} {3,baz} {2,foo} {2,bar} {1,abc}
#4 {7,xyz} {6,uvw} {5,def} {5,pqr} {3,baz} {2,foo} {2,bar} {1,abc}
#5 {7,xyz} {6,uvw} {5,def} {5,pqr} {5,one} {5,two} {3,baz} {2,foo} {2,bar} {1,abc}
#6 {3,ü} {2,ё} {2,ö} {1,ä}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=233|std=C++98|before={{c|pos}} 只是提示，可以完全忽略|after=必须在尽可能接近正好在&lt;br&gt;{{c|pos}} 之前的位置插入}}
{{dr list item|wg=lwg|dr=264|std=C++98|before=重载 {{v|5}} 的复杂度在范围 {{range|first|last}}&lt;br&gt;已经按 {{tt|Compare}} 排序的情况下要求是线性|after=取消这种情况下的线性复杂度要求}}
{{dr list item|wg=lwg|dr=371|std=C++98|before=等价元素不一定会保留顺序|after=要求保留}}
{{dr list item|wg=lwg|dr=2005|std=C++11|before=重载 {{v|3,6}} 的描述质量较差|after=改进描述}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc emplace|multimap}}
{{dsc inc|cpp/container/dsc emplace_hint|multimap}}
{{dsc inc|cpp/iterator/dsc inserter}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
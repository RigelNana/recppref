{{cpp/title|list}}
{{cpp/container/list/navbar}}
{{dcl begin}}
{{dcl header|list}}
{{dcl|num=1|1=
template&lt;
    class T,
    class Allocator = std::allocator&lt;T&gt;
&gt; class list;
}}
{{dcl|num=2|since=c++17|1=
namespace pmr {
    template&lt; class T &gt;
    using list = std::list&lt;T, std::pmr::polymorphic_allocator&lt;T&gt;&gt;;
}
}}
{{dcl end}}

{{tt|std::list}} 是支持从容器任何位置进行常数时间的元素插入和移除的容器。不支持快速随机访问。它通常实现为双向链表。与 {{lc|std::forward_list}} 相比，此容器提供双向迭代但在空间上效率稍低。

在 list 内或在数个 list 间添加、移除和移动元素不会使迭代器或引用失效。迭代器只有在对应元素被删除时才会失效。

{{tt|std::list}} 满足{{named req|Container}}、{{named req|AllocatorAwareContainer}}、{{named req|SequenceContainer}}及{{named req|ReversibleContainer}}。

{{cpp/is_constexpr|since=c++26|transient=yes}}

===模板参数===
{{par begin}}
{{par inc|cpp/container/param list T|list}}
{{par inc|cpp/container/param list Allocator|list}}
{{par end}}

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc inc|cpp/container/dsc value_type|list}}
{{dsc inc|cpp/container/dsc allocator_type|list}}
{{dsc inc|cpp/container/dsc size_type|list}}
{{dsc inc|cpp/container/dsc difference_type|list}}
{{dsc inc|cpp/container/dsc reference|list}}
{{dsc inc|cpp/container/dsc const_reference|list}}
{{dsc inc|cpp/container/dsc pointer|list}}
{{dsc inc|cpp/container/dsc const_pointer|list}}
{{dsc inc|cpp/container/dsc iterator|list}}
{{dsc inc|cpp/container/dsc const_iterator|list}}
{{dsc inc|cpp/container/dsc reverse_iterator|list}}
{{dsc inc|cpp/container/dsc const_reverse_iterator|list}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/container/dsc constructor|list}}
{{dsc inc|cpp/container/dsc destructor|list}}
{{dsc inc|cpp/container/dsc operator{{=}}|list}}
{{dsc inc|cpp/container/dsc assign|list}}
{{dsc inc|cpp/container/dsc assign_range|list}}
{{dsc inc|cpp/container/dsc get_allocator|list}}

{{dsc h2|元素访问}}
{{dsc inc|cpp/container/dsc front|list}}
{{dsc inc|cpp/container/dsc back|list}}

{{dsc h2|迭代器}}
{{dsc inc|cpp/container/dsc begin|list}}
{{dsc inc|cpp/container/dsc end|list}}
{{dsc inc|cpp/container/dsc rbegin|list}}
{{dsc inc|cpp/container/dsc rend|list}}

{{dsc h2|容量}}
{{dsc inc|cpp/container/dsc empty|list}}
{{dsc inc|cpp/container/dsc size|list}}
{{dsc inc|cpp/container/dsc max_size|list}}

{{dsc h2|修改器}}
{{dsc inc|cpp/container/dsc clear|list}}
{{dsc inc|cpp/container/dsc insert|list}}
{{dsc inc|cpp/container/dsc insert_range|list}}
{{dsc inc|cpp/container/dsc emplace|list}}
{{dsc inc|cpp/container/dsc erase|list}}
{{dsc inc|cpp/container/dsc push_back|list}}
{{dsc inc|cpp/container/dsc emplace_back|list}}
{{dsc inc|cpp/container/dsc append_range|list}}
{{dsc inc|cpp/container/dsc pop_back|list}}
{{dsc inc|cpp/container/dsc push_front|list}}
{{dsc inc|cpp/container/dsc emplace_front|list}}
{{dsc inc|cpp/container/dsc prepend_range|list}}
{{dsc inc|cpp/container/dsc pop_front|list}}
{{dsc inc|cpp/container/dsc resize|list}}
{{dsc inc|cpp/container/dsc swap|list}}

{{dsc h2|操作}}
{{dsc inc|cpp/container/dsc merge|list}}
{{dsc inc|cpp/container/dsc splice|list}}
{{dsc inc|cpp/container/dsc remove|list}}
{{dsc inc|cpp/container/dsc reverse|list}}
{{dsc inc|cpp/container/dsc unique|list}}
{{dsc inc|cpp/container/dsc sort|list}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/container/dsc operator cmp|list}}
{{dsc inc|cpp/container/dsc swap2|list}}
{{dsc inc|cpp/container/dsc erase seq|list}}
{{dsc end}}

{{rrev|since=c++17|
==={{rl|deduction guides|推导指引}}===
}}

===注解===
{{ftm begin|std=1|comment=1}}
{{ftm|__cpp_lib_containers_ranges|value=202202L|std=C++23|容器的范围构造和插入}}
{{ftm|__cpp_lib_constexpr_containers|value=202502L|std=C++26|{{c/core|constexpr}} {{tt|std::list}}}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;list&gt;

int main()
{
    // 创建含整数的 list
    std::list&lt;int&gt; l = {7, 5, 16, 8};

    // 添加整数到 list 开头
    l.push_front(25);
    // 添加整数到 list 结尾
    l.push_back(13);

    // 以搜索插入 16 前的值
    auto it = std::find(l.begin(), l.end(), 16);
    if (it != l.end())
        l.insert(it, 42);
	
    // 迭代并打印 list 的值
    std::cout &lt;&lt; "l = { ";
    for (int n : l)
        std::cout &lt;&lt; n &lt;&lt; ", ";
    std::cout &lt;&lt; "};\n";
}
|output=
l = { 25, 7, 5, 42, 16, 8, 13, };
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=230|std=C++98|before={{tt|T}} 不需要满足{{named req|CopyConstructible}}&lt;br&gt;（因此不保证能构造 {{tt|T}} 类型的元素）|after={{tt|T}} 也需要满足&lt;br&gt;{{named req|CopyConstructible}}}}
{{dr list item|wg=lwg|dr=276|std=C++98|before={{tt|T}} 始终需要满足{{named req|CopyAssignable}}|after=只有在以 {{tt|T}} 实例化了 {{ltt|cpp/container/list/operator{{=}}}} 或 {{ltt|cpp/container/list/assign}} 时才需要}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc forward_list}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|ko|pl|pt|ru}}
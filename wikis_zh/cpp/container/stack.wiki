{{cpp/title|stack}}
{{cpp/container/stack/navbar}}
{{ddcl|header=stack|1=
template&lt;
    class T,
    class Container = std::deque&lt;T&gt;
&gt; class stack;
}}

{{tt|std::stack}} 类是一种[[cpp/container#容器适配器|容器适配器]]，它给予程序员{{enwiki|Stack (abstract data type)|栈}}的功能——特别是 FILO（先进后出）数据结构。

该类模板用处为底层容器的包装器——只提供特定函数集合。栈从被称作栈顶的容器尾部推弹元素。

{{cpp/is_constexpr|since=c++26|transient=yes}}

===模板形参===
{{par begin}}
{{par|T|存储的元素类型。{{tt|T}} 与 {{tt|Container::value_type}} 不是同一类型时非良构。}}
{{par|Container|用于存储元素的底层容器类型。容器必须满足{{named req|SequenceContainer}}的要求。另外，它必须提供拥有[[cpp/named req/SequenceContainer#可选操作|通常语义]]的下列函数：
* {{tt|back()}}，例如 {{lc|std::vector::back()}}，
* {{tt|push_back()}}，例如 {{lc|std::deque::push_back()}}，
* {{tt|pop_back()}}，例如 {{lc|std::list::pop_back()}}。

标准容器 {{lc|std::vector}}（包括 {{ltt|cpp/container/vector bool|std::vector&lt;bool&gt;}}）、{{lc|std::deque}} 和 {{lc|std::list}} 满足这些要求。如果没有为特定的 {{tt|stack}} 类特化指定容器类，那么就会使用标准容器 {{lc|std::deque}}。
}}{{par end}}

===成员类型===
{{dsc begin}}
{{dsc hitem |类型|定义}}
{{dsc inc|cpp/container/dsc container_type|stack}}
{{dsc inc|cpp/container/dsc value_type|stack}}
{{dsc inc|cpp/container/dsc size_type|stack}}
{{dsc inc|cpp/container/dsc reference|stack}}
{{dsc inc|cpp/container/dsc const_reference|stack}}
{{dsc end}}

===成员对象===
{{dsc begin}}
{{dsc hitem|成员|说明}}
{{dsc inc|cpp/container/dsc c|stack}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/container/dsc constructor|stack}}
{{dsc inc|cpp/container/dsc destructor|stack}}
{{dsc inc|cpp/container/dsc operator{{=}}|stack}}

{{dsc h2|元素访问}}
{{dsc inc|cpp/container/dsc top|stack}}

{{dsc h2|容量}}
{{dsc inc|cpp/container/dsc empty|stack}}
{{dsc inc|cpp/container/dsc size|stack}}

{{dsc h2|修改器}}
{{dsc inc|cpp/container/dsc push|stack}}
{{dsc inc|cpp/container/dsc push_range|stack}}
{{dsc inc|cpp/container/dsc emplace|stack}}
{{dsc inc|cpp/container/dsc pop|stack}}
{{dsc inc|cpp/container/dsc swap|stack}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/container/dsc operator_cmp|stack}}
{{dsc inc|cpp/container/dsc swap2|stack}}
{{dsc end}}

===辅助类===
{{dsc begin}}
{{dsc inc|cpp/container/dsc uses_allocator|stack}}
{{dsc inc|cpp/container/dsc adaptor_formatter|stack}}
{{dsc end}}

{{rrev|since=c++17|
==={{rl|deduction guides|推导指引}}===
}}

===注解===
{{ftm begin|std=1|comment=1}}
{{ftm|__cpp_lib_containers_ranges|value=202202L|std=C++23|容器的范围构造和插入}}
{{ftm|__cpp_lib_constexpr_containers|value=202502L|std=C++26|{{c/core|constexpr}} {{tt|std::stack}}}}
{{ftm end}}

===示例===
{{example
|Comment
|code=
#include &lt;iostream&gt;
#include &lt;stack&gt;

int main()
{
    struct Point
    {
        int x, y;
    };
    std::stack&lt;Point&gt; stack;

    // push
    stack.push({1, 1});
    stack.push({2, 1});
    stack.push({.x = 3, .y = 0});

    // emplace -  (C++11)
    stack.emplace(4, 4);
    auto [x, y] = stack.emplace(Point{5, 5}); // c++17
    std::cout &lt;&lt; "x: " &lt;&lt; x &lt;&lt; ",y: " &lt;&lt; y &lt;&lt; '\n';

    // pop
    stack.pop();

    while (!stack.empty())
    {
        auto [a, b] = stack.top();
        std::cout &lt;&lt; "a: " &lt;&lt; a &lt;&lt; ",b: " &lt;&lt; b &lt;&lt; '\n';
        stack.pop();
    }

    return 0;
}
|output=
x: 5,y: 5
a: 4,b: 4
a: 3,b: 0
a: 2,b: 1
a: 1,b: 1
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=307|std=C++98|before={{tt|Container}} 不能是 {{tt|std::vector&lt;bool&gt;}}|after=可以是}}
{{dr list item|wg=lwg|dr=2566|std=C++98|before=缺少对 {{tt|Container::value_type}} 的要求|after={{tt|T}} 和 {{tt|Container::value_type}} 不同时非良构}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc vector}}
{{dsc inc|cpp/container/dsc vector bool}}
{{dsc inc|cpp/container/dsc deque}}
{{dsc inc|cpp/container/dsc list}}
{{dsc end}}

{{langlinks|cs|de|en|es|fr|it|ja|pl|pt|ru|tr}}
{{cpp/title|mdspan}}
{{cpp/container/mdspan/navbar}}
{{ddcl|header=mdspan|since=c++23|1=
template&lt;
    class T,
    class Extents,
    class LayoutPolicy = std::layout_right,
    class AccessorPolicy = std::default_accessor&lt;T&gt;
&gt; class mdspan;
}}

{{tt|std::mdspan}} 是一个多维数组视图，它将多维索引映射到数组的元素。映射和元素访问策略是可配置的，底层数组不需要是连续的，甚至根本不存在于内存中。

{{tt|mdspan}} 的每种特化 {{tt|MDS}} 均实现 {{lconcept|copyable}}，并且满足：
:* {{c|std::is_nothrow_move_constructible_v&lt;MDS&gt;}} 为 {{c|true}}，
:* {{c|std::is_nothrow_move_assignable_v&lt;MDS&gt;}} 为 {{c|true}}，且
:* {{c|std::is_nothrow_swappable_v&lt;MDS&gt;}} 为 {{c|true}}。
{{tt|mdspan}} 的特化，若其 {{tt|accessor_type}}、{{tt|mapping_type}} 和 {{tt|data_handle_type}} 均为{{named req|TriviallyCopyable}} 类型，则它是{{named req|TriviallyCopyable}}类型。

===模板形参===
{{par begin}}
{{par|T|元素类型；既不是抽象类也不是数组类型的完整对象类型。}}
{{par|Extents|指定维数及各维大小，均为编译时已知。必须是 {{lc|std::extents}} 的特化。}}
{{par|LayoutPolicy|指定如何将多维索引转换为底层的一维索引（列优先三维数组、对称三角二维矩阵等）。必须满足{{named req|LayoutMappingPolicy}}。}}
{{par|AccessorPolicy|指定如何将底层一维索引转换为对 T 的引用。必须满足 {{c|std::is_same_v&lt;T, typename AccessorPolicy​::​element_type&gt;}} 为 {{c|true}} 的约束条件。必须满足{{named req|AccessorPolicy}}}}
{{par end}}

===成员类型===
{{dsc begin}}
{{dsc hitem|成员|定义}}
{{dsc|{{tt|extents_type}}|{{tt|Extents}}}}
{{dsc|{{tt|layout_type}}|{{tt|LayoutPolicy}}}}
{{dsc|{{tt|accessor_type}}|{{tt|AccessorPolicy}}}}
{{dsc|{{tt|mapping_type}}|{{c/core|LayoutPolicy::mapping&lt;Extents&gt;}}}}
{{dsc|{{tt|element_type}}|{{tt|T}}}}
{{dsc|{{tt|value_type}}|{{c/core|std::remove_cv_t&lt;T&gt;}}}}
{{dsc|{{tt|index_type}}|{{c/core|Extents::index_type}}}}
{{dsc|{{tt|size_type}}|{{c/core|Extents::size_type}}}}
{{dsc|{{tt|rank_type}}|{{c/core|Extents::rank_type}}}}
{{dsc|{{tt|data_handle_type}}|{{c/core|AccessorPolicy::data_handle_type}}}}
{{dsc|{{tt|reference}}|{{c/core|AccessorPolicy::reference}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|描述}}
{{dsc expos mem obj|spec={{tt|accessor_type}}|acc_|id=acc|private=yes|访问器}}
{{dsc expos mem obj|spec={{tt|mapping_type}}|map_|id=map|private=yes|布局映射}}
{{dsc expos mem obj|spec={{tt|data_handle_type}}|ptr_|id=ptr|private=yes|底层数据句柄}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/container/mdspan/dsc constructor}}
{{dsc inc|cpp/container/mdspan/dsc operator{{=}}}}

{{dsc h2|元素访问}}
{{dsc inc|cpp/container/mdspan/dsc operator_at}}

{{dsc h2|观察器}}
{{dsc inc|cpp/container/mdspan/dsc size}}
{{dsc inc|cpp/container/mdspan/dsc empty}}
{{dsc inc|cpp/container/mdspan/dsc stride}}
{{dsc inc|cpp/container/mdspan/dsc extents_mfun}}&lt;!--dsc extents is for std::extents--&gt;
{{dsc inc|cpp/container/mdspan/dsc data_handle}}
{{dsc inc|cpp/container/mdspan/dsc mapping}}
{{dsc inc|cpp/container/mdspan/dsc accessor}}

{{dsc inc|cpp/container/mdspan/dsc is_unique}}
{{dsc inc|cpp/container/mdspan/dsc is_exhaustive}}
{{dsc inc|cpp/container/mdspan/dsc is_strided}}
{{dsc inc|cpp/container/mdspan/dsc is_always_unique}}
{{dsc inc|cpp/container/mdspan/dsc is_always_exhaustive}}
{{dsc inc|cpp/container/mdspan/dsc is_always_strided}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/container/mdspan/dsc swap}}
{{dsc h2|子视图}}
{{dsc inc|cpp/container/mdspan/dsc submdspan}}
{{dsc inc|cpp/container/mdspan/dsc submdspan_extents}}
{{dsc end}}

===辅助类型和模板===
{{dsc begin}}
{{dsc inc|cpp/container/mdspan/dsc extents}}
{{dsc inc|cpp/container/mdspan/dsc dextents}}
{{dsc inc|cpp/container/mdspan/dsc default_accessor}}
{{dsc inc|cpp/container/mdspan/dsc aligned_accessor}}
{{dsc h2|布局映射策略}}
{{dsc inc|cpp/container/mdspan/dsc layout_left}}
{{dsc inc|cpp/container/mdspan/dsc layout_right}}
{{dsc inc|cpp/container/mdspan/dsc layout_stride}}
{{dsc inc|cpp/container/mdspan/dsc layout_left_padded}}
{{dsc inc|cpp/container/mdspan/dsc layout_right_padded}}
{{dsc h2|子视图辅助项}}
{{dsc inc|cpp/container/mdspan/dsc full_extent}}
{{dsc inc|cpp/container/mdspan/dsc strided_slice}}
{{dsc inc|cpp/container/mdspan/dsc submdspan_mapping_result}}
{{dsc end}}

==={{rl|deduction guides|推导指引}}===

===注解===
{{ftm begin|sort=yes}}
{{ftm|value=202207L|std=C++23|__cpp_lib_mdspan|{{tt|std::mdspan}}}}
{{ftm|value=202306L|std=C++26|__cpp_lib_submdspan|rowspan="2"|{{lc|std::submdspan}}}}
{{ftm|value=202403L|std=C++26|-|{{tt|std::mdspan}} 的有填充布局}}
{{ftm|value=202411L|std=C++26|__cpp_lib_aligned_accessor|{{lc|std::aligned_accessor}}}}
{{ftm end}}

===示例===
{{example
|可以在 [https://godbolt.org/z/6WqGonPTn Compiler Explorer] 中预览
|code=
#include &lt;cstddef&gt;
#include &lt;mdspan&gt;
#include &lt;print&gt;
#include &lt;vector&gt;

int main()
{
    std::vector v{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};

    // 将数据视作表示 2 行每行 6 个 int 的连续内存
    auto ms2 = std::mdspan(v.data(), 2, 6);
    // 将相同数据视作 2 x 3 x 2 的三维数组
    auto ms3 = std::mdspan(v.data(), 2, 3, 2);

    // 使用二维视图写入数据
    for (std::size_t i = 0; i != ms2.extent(0); i++)
        for (std::size_t j = 0; j != ms2.extent(1); j++)
            ms2[i, j] = i * 1000 + j;

    // 使用三维视图读回数据
    for (std::size_t i = 0; i != ms3.extent(0); i++)
    {
        std::println("slice @ i = {}", i);
        for (std::size_t j = 0; j != ms3.extent(1); j++)
        {
            for (std::size_t k = 0; k != ms3.extent(2); k++)
                std::print("{} ", ms3[i, j, k]);
            std::println("");
        }
    }
}
|output=
slice @ i = 0
0 1
2 3
4 5
slice @ i = 1
1000 1001
1002 1003
1004 1005
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc span}}
{{dsc inc|cpp/numeric/dsc valarray}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
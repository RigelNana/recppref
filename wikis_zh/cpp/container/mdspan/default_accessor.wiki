{{cpp/title|default_accessor}}
{{cpp/container/mdspan/navbar}}
{{ddcl|header=mdspan|since=c++23|1=
template&lt; class ElementType &gt;
class default_accessor;
}}

类模板 {{tt|std::default_accessor}} 的特例是 {{lc|std::mdspan}} 在没有提供用户指定的访问器策略时使用的默认 {{named req|AccessorPolicy}}。

{{tt|default_accessor}} 的每个特化均实现 {{lconcept|semiregular}}且为{{named req|TriviallyCopyable}}。

===模板形参===
{{par begin}}
{{par|ElementType|元素类型。应当为既非抽象类类型也非数组类型的完整对象类型。否则程序非良构}}
{{par end}}

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|offset_policy}}|{{tt|default_accessor}}}}
{{dsc|{{tt|element_type}}|{{tt|ElementType}}}}
{{dsc|{{tt|reference}}|{{tt|ElementType&amp;}}}}
{{dsc|{{tt|data_handle_type}}|{{tt|ElementType*}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|nolink=true|构造 {{tt|default_accessor}}}}
{{dsc mem fun|access|nolink=true|返回实参提供的第 n 个元素}}
{{dsc mem fun|offset|nolink=true|返回按偏移值推进后的数据句柄}}
{{dsc end}}

{{member|{{small|std::default_accessor::}}default_accessor|2=
{{dcl begin}}
{{dcl|num=1|1=
constexpr default_accessor() noexcept = default;
}}
{{dcl|num=2|1=
template&lt; class OtherElementType &gt;
constexpr default_accessor( default_accessor&lt;OtherElementType&gt; ) noexcept {}
}}
{{dcl end}}

@1@ 默认构造 {{tt|default_accessor}}。

@2@ 从 {{c|default_accessor&lt;OtherElementType&gt;}} 构造 {{tt|default_accessor}}。此构造函数没有可见效果。仅当 {{c|std::is_convertible_v&lt;OtherElementType(*)[], element_type(*)[]&gt;}} 为 true 时此重载才参与重载决议。
}}

{{member|{{small|std::default_accessor::}}access|2=
{{dcl begin}}
{{dcl|1=
constexpr reference access( data_handle_type p, std::size_t i ) const noexcept;
}}
{{dcl end}}

等价于 {{c|return p[i];}}。
}}

{{member|{{small|std::default_accessor::}}offset|2=
{{dcl begin}}
{{dcl|1=
constexpr data_handle_type offset( data_handle_type p, std::size_t i ) const noexcept;
}}
{{dcl end}}

等价于 {{c|return p + i;}}。
}}

===示例===
{{example}}

{{langlinks|de|en|es|ja|ru}}
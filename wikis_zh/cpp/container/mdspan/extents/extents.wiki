{{cpp/container/mdspan/extents/title|extents}}
{{cpp/container/mdspan/extents/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
constexpr extents() = default;
}}
{{dcl|num=2|since=c++23|1=
template&lt; class OtherIndexType, std::size_t... OtherExtents &gt;
constexpr explicit(/* 见下文 */)
    extents( const std::extents&lt;OtherIndexType, OtherExtents...&gt;&amp; other ) noexcept;
}}
{{dcl|num=3|since=c++23|1=
template&lt; class... OtherIndexTypes &gt;
constexpr explicit extents( OtherIndexTypes... exts ) noexcept;
}}
{{dcl|num=4|since=c++23|1=
template&lt; class OtherIndexType, std::size_t N &gt;
constexpr explicit(N != rank_dynamic())
    extents( std::span&lt;OtherIndexType, N&gt; exts ) noexcept;
}}
{{dcl|num=5|since=c++23|1=
template&lt; class OtherIndexType, std::size_t N &gt;
constexpr explicit(N != rank_dynamic())
    extents( const std::array&lt;OtherIndexType, N&gt;&amp; exts ) noexcept;
}}
{{dcl end}}

构造 {{tt|extents}}。可以仅从动态尺度构造 {{tt|extents}}，它将存储所有的值，也可以所有尺度均具有前条件。

@1@ 默认构造函数。将所有动态尺度初始化为零。

@2@ 转换自另一 {{tt|extents}} 对象。构造后，{{c|1=*this == other}} 为 {{c/core|true}}。
* 以下情况下行为未定义：
:* 对于 {{c|static_extent(r)}} 表示静态尺度的任何 {{c|r}}，有 {{c|1=other.extent(r) != static_extent(r)}}，或者
:* 对于 {{c|other}} 中的任何秩值 {{c|r}}，{{c|other.extent(r)}} 不能表示为 {{c|IndexType}} 类型的值。
* {{cpp/enable if|
:* {{c|1=sizeof...(OtherExtents) == rank()}} 为 {{c/core|true}}，并且
:* {{c multi
|((OtherExtents {{==}} std::dynamic_extent {{!!}} Extents {{==}} std::dynamic_extent {{!!}}
|  OtherExtents {{==}} Extents) &amp;&amp; ...)}} 为 {{c/core|true}} }}。
* 以下情况下，此构造函数为 {{c/core|explicit}}：
:* {{c|1=((Extents != std::dynamic_extent &amp;&amp; OtherExtents == std::dynamic_extent) {{!!}} ...)}} 为 {{c/core|true}}，或者
:* {{c|std::numeric_limits&lt;IndexType&gt;::max() &lt; std::numeric_limits&lt;OtherIndexType&gt;::max()}} 为 {{c/core|true}}。

@3@ 令 {{c|N}} 为 {{c|sizeof...(exts)}}，并令 {{c|exts_arr}} 为 {{c|std::array&lt;IndexType, N&gt;{static_cast&lt;IndexType&gt;(std::move(exts))...}&lt;!----&gt;}}，此函数等价于 {{c|extents(exts_arr)}}。
* {{cpp/enable if|
:* {{c|(std::is_convertible_v&lt;OtherIndexTypes, IndexType&gt; &amp;&amp; ...)}} 为 {{c/core|true}}，
:* {{c|(std::is_nothrow_constructible_v&lt;IndexType, OtherIndexTypes&gt; &amp;&amp; ...)}} 为 {{c/core|true}}，并且
:* {{c|1=N == rank_dynamic() {{!!}} N == rank()}} 为 {{c/core|true}} }}。
* 以下条件下行为未定义：
:* {{c|1=N != rank_dynamic()}}，且对于 {{c|static_extent(r)}} 表示静态尺度的任何 {{c|r}}，{{c|exts_arr[r]}} 不等于 {{c|static_extent(r)}}，或者
:* {{c|exts}} 的某个元素为负值或不能表示为 {{c|IndexType}} 类型的值。

@4,5@ 如果 {{c|N}} 等于 {{c|rank_dynamic()}}，则对 {{range|0|rank_dynamic()}} 中的所有 {{c|d}}，以{{c|std::as_const(exts[d])}} [[cpp/language/direct initialization|直接非列表初始化]] {{box|{{rlpi|/#数据成员|dynamic-extents}}{{c/core|[d]}}}}。否则，对 {{range|0|rank_dynamic()}} 中的所有 {{c|d}}，以 {{box|{{c/core|std::as_const(exts[}}{{rlpi|dynamic-index-inv}}{{c/core|(d)])}}}} 直接非列表初始化 {{box|{{tti|dynamic-extents}}{{c/core|[d]}}}}。
* {{cpp/enable if|
:* {{c|std::is_convertible_v&lt;const OtherIndexType&amp;, IndexType&gt;}} 为 {{c/core|true}}，
:* {{c|std::is_nothrow_constructible_v&lt;IndexType, const OtherIndexType&amp;&gt;}} 为 {{c/core|true}}，并且
:* {{c|1=N == rank_dynamic() {{!!}} N == rank()}} is {{c/core|true}} }}。
* 以下条件下行为未定义：
:* {{c|1=N != rank_dynamic()}}，且对于 {{c|static_extent(r)}} 表示静态尺度的任何 {{c|r}}， {{c|exts[r]}} 不等于 {{c|static_extent(r)}}，或者
:* 对于任何秩索引 {{c|r}}，{{c|exts[r]}} 为负值或不能表示为 {{c|IndexType}} 类型的值。

===参数===
{{par begin}}
{{par|other|要从之转换的另一 {{tt|extents}}}}
{{par|exts|表示各尺度}}
{{par end}}

===示例===
{{example
|code=
|output=
}}

===参阅===
{{dsc begin}}
{{dsc todo}}
{{dsc end}}
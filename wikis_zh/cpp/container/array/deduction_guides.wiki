{{title|{{tt|std::array}} 的推导指引}}
{{cpp/container/array/navbar}}
{{dcl begin}}
{{dcl header|array}}
{{dcl|since=c++17|
template&lt; class T, class... U &gt;
array( T, U... ) -&gt; array&lt;T, 1 + sizeof...(U)&gt;;
}}
{{dcl end}}

为 {{lc|std::array}} 提供了一个[[cpp/language/class_template_argument_deduction|推导指引]]，以提供 用于从[[cpp/language/pack|变长形参包]]构造 {{tt|std::array}} 的 {{lc|std::experimental::make_array}} 等价物。

若 {{c|(std::is_same_v&lt;T, U&gt; &amp;&amp; ...)}} 非 true 则程序非良构。注意它在 {{c|sizeof...(U)}} 为零时为 true。

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;cassert&gt;
#include &lt;type_traits&gt;

int main()
{
    const int x = 10;
    std::array a{1, 2, 3, 5, x}; // OK 创建 std::array&lt;int, 5&gt;
    assert(a.back() == x);

//  std::array b{1, 2u}; // 错误，所有实参必须拥有相同类型
    std::array c{std::to_array&lt;short&gt;({3, 2, 1})}; // C++20 设施
    assert(std::ranges::equal(c, std::array{3, 2, 1}));
    static_assert(std::is_same_v&lt;short, decltype(c)::value_type&gt;);
}
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
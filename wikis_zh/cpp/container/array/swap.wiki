{{cpp/container/array/title|swap}}
{{cpp/container/array/navbar}}
{{ddcl|since=c++11|notes={{mark constexpr since c++20}}|
void swap( array&amp; other ) noexcept(/* 见下文 */);
}}

将容器内容与 {{c|other}} 的内容交换。不会导致迭代器和引用关联到别的容器。

===参数===
{{par begin}}
{{par | other | 要与之交换内容的 {{tt|array}} }}
{{par end}}

===返回值===
（无）

===异常===
{{rrev multi|until1=c++17|rev1=
{{noexcept|noexcept(swap(std::declval&lt;T&amp;&gt;(), std::declval&lt;T&amp;&gt;()))}} 

在以上表达式中，按照同 C++17 {{lc|std::is_nothrow_swappable}} 特性所用的行为查找标识符 {{tt|swap}}。&lt;!-- LWG 2456 --&gt;
|rev2=
{{noexcept|std::is_nothrow_swappable_v&lt;T&gt;}} 
}}

对于零长 {{tt|array}}，{{noexcept}}

===复杂度===
与容器大小成线性。

===示例===
{{example
|code=
#include &lt;array&gt;
#include &lt;iostream&gt;

template&lt;class Os, class V&gt; Os&amp; operator&lt;&lt;(Os&amp; os, const V&amp; v)
{
    os &lt;&lt; '{';
    for (auto i : v)
        os &lt;&lt; ' ' &lt;&lt; i;
    return os &lt;&lt; " } ";
}

int main()
{
    std::array&lt;int, 3&gt; a1{1, 2, 3}, a2{4, 5, 6};

    auto it1 = a1.begin();
    auto it2 = a2.begin();
    int&amp; ref1 = a1[1];
    int&amp; ref2 = a2[1];

    std::cout &lt;&lt; a1 &lt;&lt; a2 &lt;&lt; *it1 &lt;&lt; ' ' &lt;&lt; *it2 &lt;&lt; ' ' &lt;&lt; ref1 &lt;&lt; ' ' &lt;&lt; ref2 &lt;&lt; '\n';
    a1.swap(a2);
    std::cout &lt;&lt; a1 &lt;&lt; a2 &lt;&lt; *it1 &lt;&lt; ' ' &lt;&lt; *it2 &lt;&lt; ' ' &lt;&lt; ref1 &lt;&lt; ' ' &lt;&lt; ref2 &lt;&lt; '\n';

    // 注意交换后迭代器与引用保持与原 array 关联，
    // 例如 `it1` 仍指向元素 a1[0]，`ref1` 仍指代 a1[1]。
}
|output=
{ 1 2 3 } { 4 5 6 } 1 4 2 5
{ 4 5 6 } { 1 2 3 } 4 1 5 2
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|std=C++11|wg=lwg|dr=2456|before={{tt|noexcept}} 规定曾为谬构|after=使之有效}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc swap2|array}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
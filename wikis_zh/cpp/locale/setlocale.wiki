{{cpp/title|setlocale}}
{{cpp/locale/navbar}}
{{ddcl|header=clocale|
char* setlocale( int category, const char* locale );
}}

{{tt|setlocale}} 函数安装指定的系统本地环境或其一部分，作为新的 C 本地环境。修改保持效果，并影响所有关乎本地环境的 C 库函数执行，到下次调用 {{tt|setlocale}} 为止。若 {{tt|locale}} 为空指针，则 {{tt|setlocale}} 查询当前 C 本地环境而不修改它。

===参数===
{{par begin}}
{{par|category|本地环境类别标识符，{{rlp|LC_categories|LC_xxx}} 宏之一。可为 0。}}
{{par|locale|系统限定的本地环境标识符。对于用户偏好的本地环境为 {{c|""}}，对于最小本地环境为 {{c|"C"}}。}}
{{par end}}

===返回值===
指向窄空终止字符串的指针，它标识应用更改后的 C 本地环境，若存在。或在失败时为空指针。

返回字符串的副本和到 {{tt|std::setlocale}} 的此调用中所用的类别，可在程序的后面用来恢复本地环境到此调用结束时的状态。

===注解===
程序启动过程中，运行任何用户代码前会执行 {{c|std::setlocale(LC_ALL, "C");}} 的等价代码。

尽管返回类型为 {{c|char*}}，修改被指向的字符仍然是未定义行为。

{{tt|setlocale}} 修改影响本地环境依赖函数的全局状态，故从一个线程调用它，而另一线程同时执行任何下列函数是未定义行为：{{lc|std::fprintf}}、{{lc|std::isprint}}、{{lc|std::iswdigit}}、{{lc|std::localeconv}}、{{lc|std::tolower}}、{{lc|std::fscanf}}、{{lc|std::ispunct}}、{{lc|std::iswgraph}}、{{lc|std::mblen}}、{{lc|std::toupper}}、{{lc|std::isalnum}}、{{lc|std::isspace}}、{{lc|std::iswlower}}、{{lc|std::mbstowcs}}、{{lc|std::towlower}}、{{lc|std::isalpha}}、{{lc|std::isupper}}、{{lc|std::iswprint}}、{{lc|std::mbtowc}}、{{lc|std::towupper}}、{{lc|std::isblank}}、{{lc|std::iswalnum}}、{{lc|std::iswpunct}}、{{tt|std::setlocale}}、{{lc|std::wcscoll}}、{{lc|std::iscntrl}}、{{lc|std::iswalpha}}、{{lc|std::iswspace}}、{{lc|std::strcoll}}、{{lc|std::wcstod}}、{{lc|std::isdigit}}、{{lc|std::iswblank}}、{{lc|std::iswupper}}、{{lc|std::strerror}}、{{lc|std::wcstombs}}、{{lc|std::isgraph}}、{{lc|std::iswcntrl}}、{{lc|std::iswxdigit}}、{{lc|std::strtod}}、{{lc|std::wcsxfrm}}、{{lc|std::islower}}、{{lc|std::iswctype}}、{{lc|std::isxdigit}}。

POSIX 定义名为 {{c|"POSIX"}} 的本地环境，它始终可访问，并准确等于默认的最小 {{c|"C"}} 本地环境。

POSIX 指定后继的 {{tt|setlocale}} 调用可以使返回的指针失效，而不仅是被指向的字符串内容。

===示例===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cstdio&gt;
#include &lt;ctime&gt;
#include &lt;cwchar&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;

int main()
{
    // 制作当前本地环境名称的“深拷贝”
    std::string prev_loc = std::setlocale(LC_ALL, nullptr);

    // C 本地环境将为启用 UTF-8 的英文；
    // 小数点将为德文
    // 日期和时间格式将为日文
    if (const char* loc = std::setlocale(LC_ALL, "en_US.UTF-8"))
        std::wprintf(L"新的 LC_ALL 本地环境: %s\n", loc);
    if (const char* loc = std::setlocale(LC_NUMERIC, "de_DE.UTF-8"))
        std::wprintf(L"新的 LC_NUMERIC 本地环境: %s\n", loc);
    if (const char* loc = std::setlocale(LC_TIME, "ja_JP.UTF-8"))
        std::wprintf(L"新的 LC_TIME 本地环境: %s\n", loc);

    wchar_t str[100];
    std::time_t t = std::time(NULL);
    std::wcsftime(str, 100, L"%A %c", std::localtime(&amp;t));
    std::wprintf(L"数值: %.2f\n日期: %ls\n", 3.14, str);

    // 恢复之前的本地环境。
    if (const char* loc = std::setlocale(LC_ALL, prev_loc.c_str()))
        std::wprintf(L"已恢复 LC_ALL 本地环境: %s\n", loc);
}
|p=true
|output=
新的 LC_ALL 本地环境: en_US.UTF-8
新的 LC_NUMERIC 本地环境: de_DE.UTF-8
新的 LC_TIME 本地环境: ja_JP.UTF-8
数值: 3,14
日期: 日曜日 2022年11月06日 20時40分59秒
已恢复 LC_ALL 本地环境: C
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc LC_categories}}
{{dsc inc|cpp/locale/dsc locale}}
{{dsc see c|c/locale/setlocale}}
{{dsc end}}

===外部链接===
{{elink begin}}
{{elink|1=[https://ss64.com/locale.html Windows 本地环境名字列表]。}}
{{elink|1=[https://lh.2xlibre.net/locales/ Linux 本地环境名字列表]。}}
{{elink end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
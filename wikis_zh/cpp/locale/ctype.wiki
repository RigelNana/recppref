{{cpp/title|ctype}}
{{cpp/locale/ctype/navbar}}
{{ddcl|header=locale|
template&lt; class CharT &gt;
class ctype;
}}

类 {{tt|ctype}} 封装了字符分类特征。所有通过 {{c/core|std::basic_istream&lt;CharT&gt;}} 进行的流输入操作用浸染于流中的 {{tt|std::ctype&lt;CharT&gt;}} 鉴别空白符以进行输入的记号分解。流输出操作会在输出前将 {{tt|std::ctype&lt;CharT&gt;::widen()}} 应用到窄字符实参。

{{inheritance diagram/std-ctype}}

===特化===
标准库保证提供以下特化（所有本地环境对象{{rlp|locale|都需要实现}}这些特化）：
{{dsc begin}}
{{dsc header|locale}}
{{dsc|{{rlpt|ctype_char|std::ctype&lt;char&gt;}}|提供最小 "C" 本地环境分类的窄字符等价版本。此特化用表查找字符分类}}
{{dsc|{{c/core|std::ctype&lt;wchar_t&gt;}}|提供适合于原生字符集的宽字符分类}}
{{dsc end}}

===嵌套类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc end}}

{{cpp/locale/facet data members}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/locale/ctype/ctype|构造新的 {{tt|ctype}} 刻面}}
{{dsc prot mem dtor|cpp/locale/ctype/~ctype|析构 {{tt|ctype}} 刻面}}
{{dsc inc|cpp/locale/ctype/dsc is}}
{{dsc inc|cpp/locale/ctype/dsc scan_is}}
{{dsc inc|cpp/locale/ctype/dsc scan_not}}
{{dsc inc|cpp/locale/ctype/dsc toupper}}
{{dsc inc|cpp/locale/ctype/dsc tolower}}
{{dsc inc|cpp/locale/ctype/dsc widen}}
{{dsc inc|cpp/locale/ctype/dsc narrow}}
{{dsc end}}

===受保护成员函数===
{{dsc begin}}
{{dsc inc|cpp/locale/ctype/dsc do_is}}
{{dsc inc|cpp/locale/ctype/dsc do_scan_is}}
{{dsc inc|cpp/locale/ctype/dsc do_scan_not}}
{{dsc inc|cpp/locale/ctype/dsc do_toupper}}
{{dsc inc|cpp/locale/ctype/dsc do_tolower}}
{{dsc inc|cpp/locale/ctype/dsc do_widen}}
{{dsc inc|cpp/locale/ctype/dsc do_narrow}}
{{dsc end}}

{{cpp/locale/ctype_base/inherit}}

===示例===
{{example
|下列代码演示对一个并非 {{tt|ctype&lt;char&gt;}} 的 {{tt|ctype}} 进行修改，以记号化 CSV 文件：
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;sstream&gt;
 
struct csv_whitespace : std::ctype&lt;wchar_t&gt;
{
    bool do_is(mask m, char_type c) const
    {   
        if ((m &amp; space) &amp;&amp; c == L' ')
            return false; // 空格将不被分类为空白符
        
        if ((m &amp; space) &amp;&amp; c == L',')
            return true; // 逗号将被分类为空白符
        
        return ctype::do_is(m, c); // 将剩下的留给基类
    } 
};
 
int main()
{
    std::wstring in = L"Column 1,Column 2,Column 3\n123,456,789";
    std::wstring token;
    
    std::wcout &lt;&lt; "默认本地环境：\n";
    std::wistringstream s1(in);
    while (s1 &gt;&gt; token)
        std::wcout &lt;&lt; "  " &lt;&lt; token &lt;&lt; '\n';
    
    std::wcout &lt;&lt; "修改了 ctype 的本地环境：\n";
    std::wistringstream s2(in);
    csv_whitespace* my_ws = new csv_whitespace;
    s2.imbue(std::locale(s2.getloc(), my_ws));
    while (s2 &gt;&gt; token)
        std::wcout &lt;&lt; "  " &lt;&lt; token &lt;&lt; '\n';
}
|output=
默认本地环境：
  Column
  1,Column
  2,Column
  3
  123,456,789
修改了 ctype 的本地环境：
  Column 1
  Column 2
  Column 3
  123
  456
  789
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc ctype_char}}
{{dsc inc|cpp/locale/dsc ctype_base}}
{{dsc inc|cpp/locale/dsc ctype_byname}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
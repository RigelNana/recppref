{{cpp/title|codecvt_utf16}}
{{cpp/locale/navbar}}
{{ddcl|header=codecvt|since=c++11|deprecated=c++17|removed=c++26|1=
template&lt;
    class Elem,
    unsigned long Maxcode = 0x10ffff,
    std::codecvt_mode Mode = (std::codecvt_mode)0 &gt;
class codecvt_utf16
    : public std::codecvt&lt;Elem, char, std::mbstate_t&gt;;
}}

{{tt|std::codecvt_utf16}} 是一个 {{lc|std::codecvt}} 刻面，封装 UTF-16 编码字节串和 UCS-2 或 UTF-32 字符串（取决于 {{tt|Elem}} 类型）之间的转换。此 {{lc|std::codecvt}} 刻面能用于以二进制模式读或写 UTF-16 文件。

UCS-2 是一种过时的编码，它是 UTF-16 的子集，只编码范围 U+0000-U+FFFF（基础多语言平面）中的标量。

===模板形参===
{{par begin}}
{{par|Elem|{{c/core|char16_t}}、{{c/core|char32_t}} 或 {{c/core|wchar_t}} 之一}}
{{par|Maxcode|此平面将读或写而不出错的 {{tt|Elem}} 最大值}}
{{par|Mode|{{lc|std::codecvt_mode}} 类型常量}}
{{par end}} 

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/locale/codecvt_utf16|inlinemem=true|构造新的 {{tt|codecvt_utf16}} 刻面}}
{{dsc mem dtor|cpp/locale/codecvt_utf16|inlinemem=true|销毁 {{tt|codecvt_utf16}} 刻面}}
{{dsc end}}

{{member|{{small|std::codecvt_utf16::}}codecvt_utf16|
{{dcl begin}}
{{dcl|1=
explicit codecvt_utf16( std::size_t refs = 0 );
}}
{{dcl end}}

构造新的 {{tt|std::codecvt_utf16}} 刻面，传递初始引用计数 {{c|refs}} 到基类。

===参数===
{{par begin}}
{{par|refs|链接到该刻面的引用数}}
{{par end}}
}}

{{member|{{small|std::codecvt_utf16::}}~codecvt_utf16|
{{dcl begin}}
{{dcl|1=
~codecvt_utf16();
}}
{{dcl end}}

销毁刻面。与本地环境管理的刻面不同，此刻面的析构函数是公开的。
}}

{{cpp/locale/codecvt/inherit}}
{{cpp/locale/codecvt_base/inherit}}

===注解===
尽管标准要求此刻面在 {{tt|Elem}} 是 16 位时用 UCS-2 工作，某些实现用 UTF-16 代替，使得它成为无转换刻面。用语 "UCS-2" 已被弃用并从 ISO 10646 移除。

===示例===
{{example
|下列示例演示拥有 32 位 {{c/core|wchar_t}} 系统上的 UTF-16le 文件解码。在有 16 位 {{c/core|wchar_t}} 的系统上，解码第三字符将失败，因为 {{c/core|std::codecvt_utf16&lt;char16_t&gt;}} 产生 UCS-2 而非 UTF-16。
|code=
#include &lt;codecvt&gt;
#include &lt;cwchar&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;string&gt;

void prepare_file()
{
    // UTF-16le 数据（如果宿主系统是小端的）
    char16_t utf16le[4] = {0x007a,          // 拉丁小写字母 'z' U+007a
                           0x6c34,          // CJK 表意符号 '水' U+6c34
                           0xd834, 0xdd0b}; // 音符 segno U+1d10b
    
    // 在文件存储
    std::ofstream fout("text.txt");
    fout.write( reinterpret_cast&lt;char*&gt;(utf16le), sizeof utf16le);
}

int main()
{
    prepare_file();
    // 作为字节流打开
    std::wifstream fin("text.txt", std::ios::binary);
    // 应用刻面
    fin.imbue(std::locale(fin.getloc(),
        new std::codecvt_utf16&lt;wchar_t, 0x10ffff, std::little_endian&gt;));
    
    wchar_t c = 0;
    for (std::cout &lt;&lt; std::showbase &lt;&lt; std::hex; fin.get(c);
         std::cout &lt;&lt; static_cast&lt;std::wint_t&gt;(c) &lt;&lt; '\n');
}
|output=
0x7a
0x6c34
0x1d10b
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2229|std=C++98|before=未指定构造函数和析构函数|after=指定它们}}
{{dr list end}}

===参阅===
{{cpp/locale/unicode string conversions}}
{{dsc begin}}
{{dsc inc|cpp/locale/dsc codecvt}}
{{dsc inc|cpp/locale/dsc codecvt_mode}}
{{dsc inc|cpp/locale/dsc codecvt_utf8}}
{{dsc inc|cpp/locale/dsc codecvt_utf8_utf16}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
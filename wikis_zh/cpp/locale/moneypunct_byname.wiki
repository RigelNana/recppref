{{cpp/title|moneypunct_byname}}
{{cpp/locale/navbar}}
{{ddcl|header=locale|1=
template&lt; class CharT, bool Intl = false &gt;
class moneypunct_byname : public std::moneypunct&lt;CharT, Intl&gt;;
}}

{{tt|std::moneypunct_byname}} 是 {{lc|std::moneypunct}} 刻面，封装在它构造时指定的本地环境的货币格式化偏好。

===特化===
标准库保证提供满足以下类型要求的所有特化：
* {{tt|CharT}} 是 {{c/core|char}} 或 {{c/core|wchar_t}}
* {{tt|Intl}} 是 {{c/core|bool}} 形参可能的特化之一

===嵌套类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|pattern}}|{{lc|std::money_base::pattern}}}}
{{dsc|{{tt|string_type}}|{{c/core|std::basic_string&lt;CharT&gt;}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/locale/byname/dsc constructor|moneypunct_byname}}
{{dsc inc|cpp/locale/byname/dsc destructor|moneypunct_byname}}
{{dsc end}}

{{include|cpp/locale/byname/constructor|moneypunct_byname}}
{{include|cpp/locale/byname/destructor|moneypunct_byname}}

{{include|cpp/locale/moneypunct/inherit}}
{{include|cpp/locale/money_base/inherit}}

===示例===
{{example
|此示例演示如何应用另一语言的货币格式化规则而不更改本地环境的剩余部分。
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;

int main()
{
    long double mon = 1234567;
    std::locale::global(std::locale("en_US.utf8"));
    std::wcout.imbue(std::locale());
    std::wcout &lt;&lt; L"美国本地环境：" &lt;&lt; std::showbase
               &lt;&lt; std::put_money(mon) &lt;&lt; '\n';
    std::wcout.imbue(std::locale(std::wcout.getloc(),
                                 new std::moneypunct_byname&lt;wchar_t&gt;("ru_RU.utf8")));
    std::wcout &lt;&lt; L"带有俄语货币格式的美国本地环境："
               &lt;&lt; std::put_money(mon) &lt;&lt; '\n';
}
|output=
美国本地环境：$12,345.67
带有俄语货币格式的美国本地环境：12 345.67 руб
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc moneypunct}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
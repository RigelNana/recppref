{{cpp/title|ctype{{small|&lt;char&gt;}}}}
{{cpp/locale/navbar}}
{{ddcl|header=locale|
template&lt;&gt;
class ctype&lt;char&gt;;
}}

此 {{lc|std::ctype}} 的特化为类型 {{c/core|char}} 封装字符分类特性。与使用虚函数的通用 {{lc|std::ctype}} 不同，此特化会用表查找分类字符（通常会更快）。

基类 {{tt|std::ctype}}{{c/core|&lt;char&gt;}} 实现等价于最小 "C" 本地环境的字符分类。如果用非默认的分类表参数构造为 {{c/core|std::ctype_byname&lt;char&gt;}} 或用户定义的派生刻面，那么就能扩展或修改分类规则。所有 {{lc|std::istream}} 的有格式输入函数都要求在输入分析中将 {{tt|std::ctype}}{{c/core|&lt;char&gt;}} 用于字符分类。

{{inheritance diagram/std-ctype_char}}

===嵌套类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|char_type}}|{{c/core|char}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|描述}}
{{cpp/locale/dsc id}}
{{dsc|{{dsc small|{{c/core|const std::size_t}}}} {{tt|table_size}} {{cmark static}}|分类表的大小，至少 256}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/locale/ctype_char/dsc constructor}}
{{dsc inc|cpp/locale/ctype_char/dsc destructor}}
{{dsc inc|cpp/locale/ctype_char/dsc table}}
{{dsc inc|cpp/locale/ctype_char/dsc classic_table}}
{{dsc inc|cpp/locale/ctype_char/dsc is}}
{{dsc inc|cpp/locale/ctype_char/dsc scan_is}}
{{dsc inc|cpp/locale/ctype_char/dsc scan_not}}
{{dsc inc|cpp/locale/ctype/dsc toupper}}
{{dsc inc|cpp/locale/ctype/dsc tolower}}
{{dsc inc|cpp/locale/ctype/dsc widen}}
{{dsc inc|cpp/locale/ctype/dsc narrow}}
{{dsc end}}

===受保护成员函数===
{{dsc begin}}
{{dsc inc|cpp/locale/ctype/dsc do_toupper}}
{{dsc inc|cpp/locale/ctype/dsc do_tolower}}
{{dsc inc|cpp/locale/ctype/dsc do_widen}}
{{dsc inc|cpp/locale/ctype/dsc do_narrow}}
{{dsc end}}

{{cpp/locale/ctype_base/inherit}}

===示例===
{{example
|下列示例演示修改 {{c/core|ctype&lt;char&gt;}} 以记号化逗号分隔值：&lt;!-- 对于现实的 CSV ，必须处理引号和空格 --&gt;
|code=
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;sstream&gt;
#include &lt;vector&gt;

// 此 ctype 平面将逗号和换行符分类为空白符
struct csv_whitespace : std::ctype&lt;char&gt;
{
    static const mask* make_table()
    {
        // 复制 "C" 本地环境表
        static std::vector&lt;mask&gt; v(classic_table(), classic_table() + table_size);
        v[','] {{!}}=  space; // 逗号将被分类为空白符
        v[' '] &amp;= ~space; // 空格将不被分类为空白符
        return &amp;v[0];
    }
    
    csv_whitespace(std::size_t refs = 0) : ctype(make_table(), false, refs) {}
};

int main()
{
    std::string in = "Column 1,Column 2,Column 3\n123,456,789";
    std::string token;
    
    std::cout &lt;&lt; "默认本地环境：\n";
    std::istringstream s1(in);
    while (s1 &gt;&gt; token)
            std::cout &lt;&lt; "  " &lt;&lt; token &lt;&lt; '\n';
    
    std::cout &lt;&lt; "修改了 ctype 的本地环境：\n";
    std::istringstream s2(in);
    s2.imbue(std::locale(s2.getloc(), new csv_whitespace));
    while (s2 &gt;&gt; token)
            std::cout &lt;&lt; "  " &lt;&lt; token &lt;&lt; '\n';
}
|output=
默认本地环境：
  Column
  1,Column
  2,Column
  3
  123,456,789
修改了 ctype 的本地环境：
  Column 1
  Column 2
  Column 3
  123
  456
  789
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=695|std=C++98|before={{tt|table()}} 和 {{tt|classic_table()}} 是受保护成员函数|after=改成公开成员函数}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc ctype}}
{{dsc inc|cpp/locale/dsc ctype_base}}
{{dsc inc|cpp/locale/dsc ctype_byname}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
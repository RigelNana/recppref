{{cpp/title|iscntrl{{small|(std::locale)}}}}
{{cpp/locale/navbar}}
{{ddcl|header=locale|
template&lt; class CharT &gt;
bool iscntrl( CharT ch, const locale&amp; loc );
}}

检查给定字符按给定本地环境的 {{lc|std::ctype}} 刻面是否分类为控制字符。

===参数===
{{par begin}}
{{par|ch|字符}}
{{par|loc|本地环境}}
{{par end}}

===返回值===
若字符被分类为控制字符则返回 {{c|true}}，否则返回 {{c|false}}。

===可能的实现===
{{eq fun
|1=
template&lt;class CharT&gt;
bool iscntrl(CharT ch, const std::locale&amp; loc)
{
    return std::use_facet&lt;std::ctype&lt;CharT&gt;&gt;(loc).is(std::ctype_base::cntrl, ch);
}
}}

===示例===
{{example
|演示以不同本地环境使用 {{tt|iscntrl()}}（OS 限定）。
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;

int main()
{
    const wchar_t CCH = L'\u0094'; // Unicode 中的破坏性退格

    std::locale loc1("C");
    std::cout &lt;&lt; "iscntrl(CCH, C 本地环境) 返回 "
              &lt;&lt; std::boolalpha &lt;&lt; std::iscntrl(CCH, loc1) &lt;&lt; '\n';

    std::locale loc2("en_US.UTF8");
    std::cout &lt;&lt; "iscntrl(CCH, Unicode 本地环境) 返回 "
              &lt;&lt; std::boolalpha &lt;&lt; std::iscntrl(CCH, loc2) &lt;&lt; '\n';
}
|p=true
|output=
iscntrl(CCH, C 本地环境) 返回 false
iscntrl(CCH, Unicode 本地环境) 返回 true
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc iscntrl}}
{{dsc inc|cpp/string/wide/dsc iswcntrl}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
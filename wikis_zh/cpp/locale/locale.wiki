{{cpp/title|locale}}
{{cpp/locale/locale/navbar}}
{{ddcl|header=locale|
class locale;
}}

{{tt|std::locale}} 类型的对象（本地环境对象）是不可变刻面的一个不可变索引集。C++ 输入/输出库的每个流对象都与一个 {{tt|std::locale}} 对象关联，并用它的各刻面来分析及格式化所有数据。{{rev inl|since=c++11|另外，每个 {{lc|std::basic_regex}} 对象也都与一个本地环境对象关联。}}本地环境对象也可以在标准容器和算法中用作进行字符串校排的谓词，而且也可以直接访问，以获得或修改它所保有的平面。

C++ 程序中构造的每个本地环境至少保有下列标准刻面（也就是说 {{lc|std::has_facet}} 会对这些刻面类型返回 {{c|true}}），但程序可以定义额外特化，或全新的刻面，并将它们添加到任何既存的本地环境对象。

{|class="wikitable"
|-style="text-align:center; font-size:16px; line-height:16px;"
!colspan=2|受支持刻面
|-
|{{c/core|std::ctype&lt;char&gt;}}&lt;br&gt;{{c/core|std::ctype&lt;wchar_t&gt;}}
|{{c/core|std::codecvt&lt;char, char, std::mbstate_t&gt;}}&lt;br&gt;{{c/core|std::codecvt&lt;wchar_t, char, std::mbstate_t&gt;}}
|-
|{{c/core|std::num_get&lt;char&gt;}}&lt;br&gt;{{c/core|std::num_get&lt;wchar_t&gt;}}
|rowspan=2|{{c/core|std::numpunct&lt;char&gt;}}&lt;br&gt;{{c/core|std::numpunct&lt;wchar_t&gt;}}
|-
|{{c/core|std::num_put&lt;char&gt;}}&lt;br&gt;{{c/core|std::num_put&lt;wchar_t&gt;}}
|-
|{{c/core|std::money_get&lt;char&gt;}}&lt;br&gt;{{c/core|std::money_get&lt;wchar_t&gt;}}
|rowspan=2|{{c/core|std::moneypunct&lt;char&gt;}}&lt;br&gt;{{c/core|std::moneypunct&lt;char, true&gt;}}&lt;br&gt;{{c/core|std::moneypunct&lt;wchar_t&gt;}}&lt;br&gt;{{c/core|std::moneypunct&lt;wchar_t, true&gt;}}
|-
|{{c/core|std::money_put&lt;char&gt;}}&lt;br&gt;{{c/core|std::money_put&lt;wchar_t&gt;}}
|-
|{{c/core|std::time_get&lt;char&gt;}}&lt;br&gt;{{c/core|std::time_get&lt;wchar_t&gt;}}
|{{c/core|std::collate&lt;char&gt;}}&lt;br&gt;{{c/core|std::collate&lt;wchar_t&gt;}}
|-
|{{c/core|std::time_put&lt;char&gt;}}&lt;br&gt;{{c/core|std::time_put&lt;wchar_t&gt;}}
|{{c/core|std::messages&lt;char&gt;}}&lt;br&gt;{{c/core|std::messages&lt;wchar_t&gt;}}
|-style="text-align:center"
!colspan=2|被弃用刻面
|-
|colspan=2|{{c/core|std::codecvt&lt;char16_t, char, std::mbstate_t&gt;}} {{mark since c++11}}{{mark deprecated c++20}}&lt;br&gt;{{c/core|std::codecvt&lt;char32_t, char, std::mbstate_t&gt;}} {{mark since c++11}}{{mark deprecated c++20}}&lt;br&gt;{{c/core|std::codecvt&lt;char16_t, char8_t, std::mbstate_t&gt;}} {{mark since c++20}}{{mark deprecated}}&lt;br&gt;{{c/core|std::codecvt&lt;char32_t, char8_t, std::mbstate_t&gt;}} {{mark since c++20}}{{mark deprecated}}
|}

在内部，本地环境对象实现为如同它是一个指向（以 {{lc|std::locale::id}} 索引的）的数组的引用计数指针，数组元素为指向刻面的引用计数指针：复制本地环境只会复制一个指针，并增加几个引用计数。为维护标准 C++ 库的线程安全保证（不同对象上的操作始终为线程安全），本地环境引用计数和每个刻面的引用计数都以线程安全方式更新，类似 {{lc|std::shared_ptr}}。

===成员类型===
{{dsc begin}}
{{dsc hitem|类型|描述}}
{{dsc inc|cpp/locale/locale/dsc id}}
{{dsc inc|cpp/locale/locale/dsc facet}}
{{dsc typedef|nolink=true|category|{{c/core|int}}}}
{{dsc end}}

===成员常量===
{{dsc begin}}
{{dsc hitem|名称|解释}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|const category}}}} none|零值，指示无刻面类别}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|const category}}}} collate|位掩码值，指示校排刻面类别}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|const category}}}} ctype|位掩码值，指示 ctype 刻面类别}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|const category}}}} monetary|位掩码值，指示货币刻面类别}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|const category}}}} numeric|位掩码值，指示数值刻面类别}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|const category}}}} time|位掩码值，指示时间刻面类别}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|const category}}}} messages|位掩码值，指示消息刻面类别}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|const category}}}} all|{{c|collate {{!}} ctype {{!}} monetary {{!}} numeric {{!}} time {{!}} messages}}}}
{{dsc end}}
对于 {{tt|std::locale}} 的要求有类型 {{tt|category}} 的实参的成员函数，该实参必须是以上列出的类别值之一，或它们之中两者或多者的并集。不接受 {{rlp|LC categories|{{tt|LC}} 常量}}。

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/locale/locale/dsc locale}}
{{dsc inc|cpp/locale/locale/dsc ~locale}}
{{dsc inc|cpp/locale/locale/dsc operator{{=}}}}
{{dsc inc|cpp/locale/locale/dsc combine}}
{{dsc inc|cpp/locale/locale/dsc name}}
{{dsc inc|cpp/locale/locale/dsc encoding}}
{{dsc inc|cpp/locale/locale/dsc operator cmp}}
{{dsc inc|cpp/locale/locale/dsc operator()}}
{{dsc inc|cpp/locale/locale/dsc global}}
{{dsc inc|cpp/locale/locale/dsc classic}}
{{dsc end}}

===示例===
{{example
|演示本地环境影响的程序（跨平台）的典型前文
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;

int main()
{
    std::wcout &lt;&lt; L"用户偏好的本地环境设置是 "
               &lt;&lt; std::locale("").name().c_str() &lt;&lt; L'\n';
    // 在启动时，全局本地环境是 "C" 本地环境
    std::wcout &lt;&lt; 1000.01 &lt;&lt; L'\n';
    
    // 以用户偏好的本地环境替换 C++ 全局本地环境和 C 本地环境
    std::locale::global(std::locale(""));
    // 将来的宽字符输出会使用新的全局本地环境
    std::wcout.imbue(std::locale());
    
    // 再次输出同一数字
    std::wcout &lt;&lt; 1000.01 &lt;&lt; L'\n';
}
|p=true
|output=
用户偏好的本地环境设置是 en_US.UTF8
1000.01
1,000.01
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=340|std=C++98|before=所有本地环境都要保有的标准平面集合不明确|after=使之明确}}
{{dr list item|wg=lwg|dr=347|std=C++98|before={{tt|category}} 类型的形参可以接受 {{tt|LC}} 常量|after=不再接受}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/text/dsc text_encoding}}
{{dsc inc|cpp/locale/dsc use_facet}}
{{dsc inc|cpp/locale/dsc has_facet}}
{{dsc inc|cpp/io/ios_base/dsc imbue}}
{{dsc inc|cpp/io/ios_base/dsc getloc}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
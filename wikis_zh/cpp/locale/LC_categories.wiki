{{title|&lt;small&gt;LC_ALL, LC_COLLATE, LC_CTYPE, LC_MONETARY, LC_NUMERIC, LC_TIME&lt;/small&gt;}}
{{cpp/locale/navbar}}
{{dcl begin}}
{{dcl header|clocale}}
{{dcl |
#define LC_ALL      /* 由实现定义 */
}}
{{dcl |
#define LC_COLLATE  /* 由实现定义 */
}}
{{dcl |
#define LC_CTYPE    /* 由实现定义 */
}}
{{dcl |
#define LC_MONETARY /* 由实现定义 */
}}
{{dcl |
#define LC_NUMERIC  /* 由实现定义 */
}}
{{dcl |
#define LC_TIME     /* 由实现定义 */
}}
{{dcl end}}

上面每个宏常量都展开成拥有相异值的整数常量表达式，适合用作 {{lc|std::setlocale}} 的首个实参。

{{dsc begin}}
{{dsc hitem |常量|解释}}
{{dsc | {{tt|LC_ALL}}      |选择整个 C 本地环境}}
{{dsc | {{tt|LC_COLLATE}}  |选择 C 本地环境的校排类别}}
{{dsc | {{tt|LC_CTYPE}}    |选择 C 本地环境中的字符分类类别}}
{{dsc | {{tt|LC_MONETARY}} |选择 C 本地环境中的货币格式化类别}}
{{dsc | {{tt|LC_NUMERIC}}  |选择 C 本地环境中的数值格式化类别}}
{{dsc | {{tt|LC_TIME}}     |选择 C 本地环境中的时间格式化类别}}
{{dsc end}}

{{tt|&lt;clocale&gt;}} 中可以定义附加宏常量，名称以 {{tt|LC_}} 后随至少一个大写字母开始。例如，POSIX 规范要求 {{tt|LC_MESSAGES}}（控制 {{lc|std::perror}} 和 {{lc|std::strerror}}），ISO/IEC 30112:2014（[http://www.open-std.org/JTC1/SC35/WG5/docs/30112d10.pdf 2014 方案]）额外定义 {{tt|LC_IDENTIFICATION}}、{{tt|LC_XLITERATE}}、{{tt|LC_NAME}}、{{tt|LC_ADDRESS}}、{{tt|LC_TELEPHONE}}、{{tt|LC_PAPER}}、{{tt|LC_MEASUREMENT}} 和 {{tt|LC_KEYBOARD}}，它们均为 GNU C 库所支持（除了 {{tt|LC_XLITERATE}}）。

===示例===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cstdio&gt;
#include &lt;ctime&gt;
#include &lt;cwchar&gt;

int main()
{
    // C 本地环境将为启用 UTF-8 的英文
    std::setlocale(LC_ALL, "en_US.UTF-8");

    // 小数点将为德文
    std::setlocale(LC_NUMERIC, "de_DE.UTF-8");

    // 日期/时间格式化将为日文
    std::setlocale(LC_TIME, "ja_JP.UTF-8");

    wchar_t str[100];
    std::time_t t = std::time(nullptr);
    std::wcsftime(str, 100, L"%A %c", std::localtime(&amp;t));
    std::wprintf(L"Number: %.2f\nDate: %Ls\n", 3.14, str);
}
|output=
Number: 3,14
Date: 日曜日 2022年11月06日 17時55分10秒
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc setlocale}}
{{dsc inc|cpp/locale/dsc locale}}
{{dsc see c|c/locale/LC_categories|本地环境类别|nomono=true}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
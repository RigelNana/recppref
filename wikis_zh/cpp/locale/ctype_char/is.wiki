{{cpp/locale/ctype_char/title|is}}
{{cpp/locale/ctype/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
bool is( mask m, char c ) const;
}}
{{dcl|num=2|1=
const char* is( const char* low, const char* high, mask* vec ) const;
}}
{{dcl end}}

@1@ 检查字符 {{c|c}} 是否按照成员函数 {{c|table()}} 所返回的分类表，以掩码 {{c|m}} 分类。相当于计算 {{c|table()[(unsigned char)c] &amp; m}}。
@2@ 对字符数组 {{tt|[low, high)}} 中每个字符，从成员函数 {{c|table()}} 所返回的分类表读取其完整分类掩码（即计算 {{c|table()[(unsigned char)*p]}}），并将它存储到 {{c|vec}} 所指向数组的对应元素。

如果 {{c|(unsigned char)c &gt;{{=}} std::ctype&lt;char&gt;::table_size}}，那么以由实现定义的值取代 {{c|table()[(unsigned char)c]}}，对于 {{c|c}} 的不同值可能有所不同。

===参数===
{{par begin}}
{{par|c|要分类的字符}}
{{par|m|用于分类单个字符的掩码}}
{{par|low|指向要分类的字符数组中首字符的指针}}
{{par|high|要分类的字符数组的尾后一位置指针}}
{{par|vec|指向要填充的掩码数组首元素的指针}}
{{par end}}

===返回值===
@1@ {{c|c}} 在 {{c|table()}} 中以 {{c|m}} 分类时返回 {{c|true}}，否则返回 {{c|false}}
@2@ {{c|high}}

===注解===
与主模板 {{c|std::ctype}} 不同，此特化在分类字符时不进行虚函数调用。派生类为了定制行为可以提供非默认分类表给基类构造函数。

===示例===
{{example}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=28|std=C++98|before=重载 (2) 将来自 {{c|vec}} 的值复制到了 {{c|table()}} 中，这与预期行为相反|after=已改正}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/locale/ctype/dsc do_is}}
{{dsc end}}

{{langlinks|en|ja}}
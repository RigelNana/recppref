{{cpp/title|isxdigit{{small|(std::locale)}}}}
{{cpp/locale/navbar}}
{{ddcl|header=locale|
template&lt; class CharT &gt;
bool isxdigit( CharT ch, const locale&amp; loc );
}}

检查给定字符按给定本地环境的 {{lc|std::ctype}} 刻面是否分类为十六进制数位。

===参数===
{{par begin}}
{{par|ch|字符}}
{{par|loc|本地环境}}
{{par end}}

===返回值===
若字符被分类为十六进制数位则返回 {{c|true}}，否则返回 {{c|false}}。

===可能的实现===
{{eq fun
|1=
template&lt;class CharT&gt;
bool isxdigit(CharT ch, const std::locale&amp; loc)
{
    return std::use_facet&lt;std::ctype&lt;CharT&gt;&gt;(loc).is(std::ctype_base::xdigit, ch);
}
}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;string&gt;
#include &lt;unordered_set&gt;
 
struct gxdigit_ctype : std::ctype&lt;wchar_t&gt;
{
    std::unordered_set&lt;wchar_t&gt; greek_digits{L'α', L'β', L'γ', L'δ', L'ε', L'ζ'};

    bool do_is(mask m, char_type c) const override
    {
        return (m &amp; xdigit) &amp;&amp; greek_digits.contains(c)
            ? true // 前 6 个希拉小写字母被分类为数字
            : ctype::do_is(m, c); // 剩余留给父类
    }
};
 
int main()
{
    std::wstring text = L"0123456789abcdefABCDEFαβγδεζηθικλμ";
    std::locale loc(std::locale(""), new gxdigit_ctype);
 
    std::locale::global(std::locale("en_US.utf8"));
    std::wcout.imbue(std::locale());
    
    std::wcout &lt;&lt; "文本中的十六进制数字: ";
    for (const wchar_t c : text)
        if (std::isxdigit(c, loc))
            std::wcout &lt;&lt; c &lt;&lt; L' ';
    std::wcout &lt;&lt; L'\n';

    std::wcout &lt;&lt; "文本中的非十六进制数字字符: ";
    for (const wchar_t c : text)
        if (not std::isxdigit(c, loc))
            std::wcout &lt;&lt; c &lt;&lt; L' ';
    std::wcout &lt;&lt; L'\n';
}
|output=
文本中的十六进制数字: 0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F α β γ δ ε ζ
文本中的非十六进制数字字符: η θ ι κ λ μ
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc isxdigit}}
{{dsc inc|cpp/string/wide/dsc iswxdigit}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
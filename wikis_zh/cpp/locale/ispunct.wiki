{{cpp/title|ispunct{{small|(std::locale)}}}}
{{cpp/locale/navbar}}
{{ddcl|header=locale|
template&lt; class CharT &gt;
bool ispunct( CharT ch, const locale&amp; loc );
}}

检查给定字符按给定本地环境的 {{lc|std::ctype}} 刻面是否分类为标点字符。

===参数===
{{par begin}}
{{par|ch|字符}}
{{par|loc|本地环境}}
{{par end}}

===返回值===
若字符被分类为标点则返回 {{c|true}}，否则返回 {{c|false}}。

===可能的实现===
{{eq fun
|1=
template&lt;class CharT&gt;
bool ispunct(CharT ch, const std::locale&amp; loc)
{
    return std::use_facet&lt;std::ctype&lt;CharT&gt;&gt;(loc).is(std::ctype_base::punct, ch);
}
}}

===示例===
{{example
|演示以不同本地环境使用 {{tt|std::ispunct()}}（OS 限定）。
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;

int main()
{
    const wchar_t c = L'\u214b'; // 倒转的和号

    std::locale loc1("C");
    std::cout &lt;&lt; "ispunct('⅋', C 本地环境) 返回 "
               &lt;&lt; std::boolalpha &lt;&lt; std::ispunct(c, loc1) &lt;&lt; '\n';

    std::locale loc2("en_US.UTF-8");
    std::cout &lt;&lt; "ispunct('⅋', Unicode 本地环境) 返回 "
              &lt;&lt; std::boolalpha &lt;&lt; std::ispunct(c, loc2) &lt;&lt; '\n';
}
|p=true
|output=
isalpha('⅋', C 本地环境) 返回 false
isalpha('⅋', Unicode 本地环境) 返回 true
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc ispunct}}
{{dsc inc|cpp/string/wide/dsc iswpunct}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|money_get}}
{{cpp/locale/money_get/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|1=
template&lt; 
    class CharT,
    class InputIt = std::istreambuf_iterator&lt;CharT&gt;
&gt; class money_get;
}}
{{dcl end}}

类模板 {{tt|std::money_get}} 封装从字符流解析货币值的规则。标准输入/输出操纵符 {{lc|std::get_money}} 使用输入/输出流的本地环境的 {{tt|std::money_get}} 刻面。

{{inheritance diagram/std-money_get}}

如果标准库不保证提供 {{tt|std::money_get}} 的某个特化（见下文），那么它的成员函数 {{lc|get()}} 和 {{lc|do_get()}} 不保证会遵守指定的行为。

===特化===
标准库保证提供以下特化（所有本地环境对象{{rlp|locale|都需要实现}}这些特化）：
{{dsc begin}}
{{dsc header|locale}}
{{dsc|{{c/core|std::money_get&lt;char&gt;}}|分析货币值的窄字符串表示}}
{{dsc|{{c/core|std::money_get&lt;wchar_t&gt;}}|分析货币值的宽字符串表示}}
{{dsc end}}

另外，标准库也保证提供满足以下类型要求的所有特化：
* {{tt|CharT}} 是以下类型之一：
** {{c/core|char}}
** {{c/core|wchar_t}}
** 由实现定义的其他任何[[cpp/string|字符容器类型]]，该类型需要满足实例化所有 [[cpp/io|iostream 组件]]所需的对字符的要求
* {{tt|InputIt}} 需要满足{{named req|InputIterator}}的要求

===嵌套类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc|{{tt|string_type}}|{{c/core|std::basic_string&lt;CharT&gt;}}}}
{{dsc|{{tt|iter_type}}|{{tt|InputIt}}}}
{{dsc end}}

{{cpp/locale/facet data members}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/locale/money_get/money_get|构造新的 {{tt|money_get}} 刻面}}
{{dsc mem fun|cpp/locale/money_get/get|调用 {{tt|do_get}}}}
{{dsc end}}

===受保护成员函数===
{{dsc begin}}
{{dsc prot mem dtor|cpp/locale/money_get/~money_get|销毁 {{tt|money_get}} 刻面}}
{{dsc inc|cpp/locale/money_get/dsc do_get}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;locale&gt;
#include &lt;sstream&gt;

int main()
{
    std::string str = "$1.11 $2.22 $3.33";
    std::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(2);
    
    std::cout &lt;&lt; '"' &lt;&lt; str &lt;&lt; "\" 以输入/输出操纵符解析：";
    std::istringstream s1(str);
    s1.imbue(std::locale("en_US.UTF-8"));
    
    long double val;
    while (s1 &gt;&gt; std::get_money(val))
        std::cout &lt;&lt; val / 100 &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    str = "USD  1,234.56";
    std::cout &lt;&lt; '"' &lt;&lt; str &lt;&lt; "\" 通过刻面直接解析：";
    std::istringstream s2(str);
    s2.imbue(std::locale("en_US.UTF-8"));
    
    auto&amp; f = std::use_facet&lt;std::money_get&lt;char&gt;&gt;(s2.getloc());
    std::ios_base::iostate err;
    std::istreambuf_iterator&lt;char&gt; beg(s2), end;
    f.get(beg, end, true, s2, err, val);
    
    std::cout &lt;&lt; val / 100 &lt;&lt; '\n';
}
|output=
"$1.11 $2.22 $3.33" 以输入/输出操纵符解析：1.11 2.22 3.33
"USD  1,234.56" 通过刻面直接解析：1234.56
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=427|std=C++98|before={{tt|money_get}} 保证接受任何满足实例化所有&lt;br&gt;iostream 组件所需的对字符类型的要求的 {{tt|CharT}}|after=只保证接受 {{c/core|char}}、{{c/core|wchar_t}}&lt;br&gt;和其他由实现定义的字符类型}}
{{dr list item|wg=lwg|dr=2392|std=C++98|before={{tt|money_get}} 能够保证接受的 {{tt|CharT}} 只有字符类型|after=可以保证接受由实现定义的字符容器类型}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc moneypunct}}
{{dsc inc|cpp/locale/dsc money_put}}
{{dsc inc|cpp/io/manip/dsc get_money}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
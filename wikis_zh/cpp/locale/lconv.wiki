{{cpp/title | lconv}}
{{cpp/locale/navbar}}
{{dcl begin}}
{{dcl header | clocale}}
{{dcl | 1=
struct lconv;
}}
{{dcl end}}

类 {{tt|std::lconv}} 含有 C 本地环境定义的数值和货币格式化规则。此结构体的对象可由 {{lc|std::localeconv}} 获得。{{tt|std::lconv}} 的成员为 {{c|char}} 类型和 {{c|char*}} 类型的值。除了 {{tt|decimal_point}}，每个 {{c|char*}} 成员都可以指向空字符（即为空 C 字符串）。{{c|char}} 类型成员均为非负数，而且若任一者在当前 C 本地环境中不可用，则为 {{lc|CHAR_MAX}}。

===成员对象===
====非货币数值格式化参数====
{{dsc begin}}
{{dsc mem obj | nolink=true | {{dsc small|char*}} decimal_point |用作小数点的字符}}
{{dsc mem obj | nolink=true | {{dsc small|char*}} thousands_sep |用于在小数点前分隔数位组的字符}}
{{dsc mem obj | nolink=true | {{dsc small|char*}} grouping |字符串，其元素指示数位组的大小}}
{{dsc end}}
====货币数值格式化参数====
{{dsc begin}}
{{dsc mem obj | nolink=true | {{dsc small|char*}} mon_decimal_point |用作小数点的字符}}
{{dsc mem obj | nolink=true | {{dsc small|char*}} mon_thousands_sep |用于在小数点前分隔数位组的字符}}
{{dsc mem obj | nolink=true | {{dsc small|char*}} mon_grouping |字符串，其元素指示数位组的大小}}
{{dsc mem obj | nolink=true | {{dsc small|char*}} positive_sign |用于指示非负货币量的字符串}}
{{dsc mem obj | nolink=true | {{dsc small|char*}} negative_sign |用于指示负货币量的字符串}}
{{dsc end}}
====本地货币数值格式化参数====
{{dsc begin}}
{{dsc mem obj | nolink=true | {{dsc small|char*}} currency_symbol |当前 C 本地环境中用于通货的符号}}
{{dsc mem obj | nolink=true | {{dsc small|char}} frac_digits |货币量中小数点后显示的位数}}
{{dsc mem obj | nolink=true | {{dsc small|char}} p_cs_precedes |若 currency_symbol 置于非负值前则为 {{c|1}}，于其后则为 {{c|0}}}}
{{dsc mem obj | nolink=true | {{dsc small|char}} n_cs_precedes |若 currency_symbol 置于负值前则为 {{c|1}}，于其后则为 {{c|0}}}}
{{dsc mem obj | nolink=true | {{dsc small|char}} p_sep_by_space |指示 {{tt|currency_symbol}}、{{tt|positive_sign}} 及非负货币值的分隔}}
{{dsc mem obj | nolink=true | {{dsc small|char}} n_sep_by_space |指示 {{tt|currency_symbol}}、{{tt|positive_sign}} 及负货币值的分隔}}
{{dsc mem obj | nolink=true | {{dsc small|char}} p_sign_posn |指示非负货币值中 {{tt|positive_sign}} 的位置}}
{{dsc mem obj | nolink=true | {{dsc small|char}} n_sign_posn |指示负货币值中 {{tt|negative_sign}} 的位置}}
{{dsc end}}
====国际货币数值格式化参数====
{{dsc begin}}
{{dsc mem obj | nolink=true | {{dsc small|char*}} int_curr_symbol |当前 C 本地环境中用作国际通货名的字符串}}
{{dsc mem obj | nolink=true | {{dsc small|char}} int_frac_digits |国际货币量中小数点后显示的位数}}
{{dsc mem obj | nolink=true | {{dsc small|char}} int_p_cs_precedes |若 int_curr_symbol 置于非负值前则为 {{c|1}}，于其后则为 {{c|0}}|notes={{mark c++11}}}}
{{dsc mem obj | nolink=true | {{dsc small|char}} int_n_cs_precedes |若 int_curr_symbol 置于负值前则为 {{c|1}}，于其后则为 {{c|0}}|notes={{mark c++11}}}}
{{dsc mem obj | nolink=true | {{dsc small|char}} int_p_sep_by_space |指示 {{tt|int_curr_symbol}}、{{tt|positive_sign}} 及非负国际货币值的分隔|notes={{mark c++11}}}}
{{dsc mem obj | nolink=true | {{dsc small|char}} int_n_sep_by_space |指示 {{tt|int_curr_symbol}}、{{tt|positive_sign}} 及负国际货币值的分隔|notes={{mark c++11}}}}
{{dsc mem obj | nolink=true | {{dsc small|char}} int_p_sign_posn |指示非负国际货币值中 {{tt|positive_sign}} 的位置|notes={{mark c++11}}}}
{{dsc mem obj | nolink=true | {{dsc small|char}} int_n_sign_posn |指示负国际货币值中 {{tt|positive_sign}} 的位置|notes={{mark c++11}}}}
{{dsc end}}


按照数值转译 {{tt|grouping}} 和 {{tt|mon_grouping}} 所指向的 C 字符串。遇到终止 {{c|'\0'}} 时，假设最后见到的值为剩下的数位重复。若遇到 {{lc|CHAR_MAX}}，则不再将数位分组。典型的每次三位分组是 {{c|"\003"}}。

{{tt|p_sep_by_space}}、{{tt|n_sep_by_space}}、{{tt|int_p_sep_by_space}}、{{tt|int_n_sep_by_space}} 的值转译如下：
{{dsc begin}}
{{dsc|0|通货符号和值间无空格分隔}}
{{dsc|1|符号紧贴通货符号，值为空格所分隔}}
{{dsc|2|符号紧贴值，通货符号为空格所分隔}}
{{dsc end}}

{{tt|p_sign_posn}}、{{tt|n_sign_posn}}、{{tt|int_p_sign_posn}}、{{tt|int_n_sign_posn}} 的值转译如下：
{{dsc begin}}
{{dsc|0|括号围绕值，并用通货符号表示符号}}
{{dsc|1|符号在值与通货符号前}}
{{dsc|2|符号在值与通货符号后}}
{{dsc|3|符号在通货符号前}}
{{dsc|4|符号在通货符号后}}
{{dsc end}}

===示例===
{{include| cpp/locale/example1}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/locale/dsc localeconv}}
{{dsc inc | cpp/locale/dsc numpunct}}
{{dsc inc | cpp/locale/dsc moneypunct}}
{{dsc see c | c/locale/lconv}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/locale/num_put/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|1=
template&lt; 
    class CharT,
    class OutputIt = std::ostreambuf_iterator&lt;CharT&gt;
&gt; class num_put;
}}
{{dcl end}}

类 {{tt|std::num_put}} 封装格式化数值为字符串的规则。具体而言支持 {{c/core|bool}}、{{c/core|long}}、{{c/core|unsigned long}}{{rev inl|since=c++11|、{{c/core|long long}}、{{c/core|unsigned long long}}}}、{{c/core|double}}、{{c/core|long double}}、{{c/core|void*}} 类型和所有能隐式转换到它们的类型（例如 {{c/core|int}} 或 {{c/core|float}}）。标准格式化输出运算符（如 {{c|cout &lt;&lt; n;}}）用输入/输出流的本地环境的 {{tt|std::num_put}} 刻面生成数字的文本表示。

{{inheritance diagram/std-num_put}}

如果标准库不保证提供 {{tt|std::num_put}} 的某个特化（见下文），那么它的成员函数 {{lc|put()}} 和 {{lc|do_put()}} 不保证会遵守指定的行为。

===特化===
标准库保证提供以下特化（所有本地环境对象{{rlp|locale|都需要实现}}这些特化）：
{{dsc begin}}
{{dsc header|locale}}
{{dsc|{{c/core|std::num_put&lt;char&gt;}}|创建数的窄字符串表示}}
{{dsc|{{c/core|std::num_put&lt;wchar_t&gt;}}|创建数的宽字符串表示}}
{{dsc end}}

另外，标准库也保证提供满足以下类型要求的所有特化：
* {{tt|CharT}} 是以下类型之一：
** {{c/core|char}}
** {{c/core|wchar_t}}
** 由实现定义的其他任何[[cpp/string|字符容器类型]]，该类型需要满足实例化所有 [[cpp/io|iostream 组件]]所需的对字符的要求
* {{tt|OutputIt}} 需要满足{{named req|OutputIterator}}的要求

===嵌套类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc|{{tt|iter_type}}|{{tt|OutputIt}}}}
{{dsc end}}

{{cpp/locale/facet data members}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/locale/num_put/num_put|构造新的 {{tt|num_put}} 刻面}}
{{dsc mem fun|cpp/locale/num_put/put|调用 {{tt|do_put}}}}
{{dsc end}}

===受保护成员函数===
{{dsc begin}}
{{dsc prot mem dtor|cpp/locale/num_put/~num_put|销毁 {{tt|num_put}} 刻面}}
{{dsc prot mem vfun|cpp/locale/num_put/put|title=do_put|格式化数字并写入到输出流}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;locale&gt;
#include &lt;string&gt;

int main()
{
    double n = 1234567.89;
    std::cout.imbue(std::locale("de_DE"));
    std::cout &lt;&lt; "直接转换到字符串：\n"
              &lt;&lt; std::to_string(n) &lt;&lt; '\n'
              &lt;&lt; "使用德国本地环境进行输出：\n"
              &lt;&lt; std::fixed &lt;&lt; n &lt;&lt; '\n'
              &lt;&lt; "使用美国本地环境进行输出：\n";
    
    // 直接使用刻面
    std::cout.imbue(std::locale("en_US.UTF-8"));
    auto&amp; f = std::use_facet&lt;std::num_put&lt;char&gt;&gt;(std::cout.getloc());
    f.put(std::ostreambuf_iterator&lt;char&gt;(std::cout), std::cout, ' ', n);
    std::cout &lt;&lt; '\n';
}
|output=
直接转换到字符串：
1234567.890000
使用德国本地环境进行输出：
1.234.567,890000
使用美国本地环境进行输出：
1,234,567.890000
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=427|std=C++98|before={{tt|num_put}} 保证接受任何满足实例化所有&lt;br&gt;iostream 组件所需的对字符类型的要求的 {{tt|CharT}}|after=只保证接受 {{c/core|char}}、{{c/core|wchar_t}}&lt;br&gt;和其他由实现定义的字符类型}}
{{dr list item|wg=lwg|dr=2392|std=C++98|before={{tt|num_put}} 能够保证接受的 {{tt|CharT}} 只有字符类型|after=可以保证接受由实现定义的字符容器类型}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc numpunct}}
{{dsc inc|cpp/locale/dsc num_get}}
{{dsc inc|cpp/string/basic_string/dsc to_string}}
{{dsc inc|cpp/string/basic_string/dsc to_wstring}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/locale/locale/title|locale}}
{{cpp/locale/locale/navbar}}

{{dcl begin}}
{{dcl rev multi|num=1|until1=c++11
|dcl1=
locale() throw();
|dcl2=
locale() noexcept;
}}
{{dcl rev multi|num=2|until1=c++11
|dcl1=
locale( const locale&amp; other ) throw();
|dcl2=
locale( const locale&amp; other ) noexcept;
}}
{{dcl|num=3|
explicit locale( const char* std_name );
}}
{{dcl|num=4|since=c++11|
explicit locale( const std::string&amp; std_name );
}}
{{dcl|num=5|
locale( const locale&amp; other, const char* std_name, category cats );
}}
{{dcl|num=6|since=c++11|
locale( const locale&amp; other, const std::string&amp; std_name, category cats );
}}
{{dcla|num=7|
template&lt; class Facet &gt;
locale( const locale&amp; other, Facet* f );
}}
{{dcl|num=8|
locale( const locale&amp; other, const locale&amp; one, category cats );
}}
{{dcl end}}

构造新的本地环境对象。

@1@ 默认构造函数。构造全局 C++ 本地环境的副本，它是最近用作 {{lc|std::locale::global}} 的实参的本地环境，或在未曾调用 {{lc|std::locale::global}} 时是 {{c|std::locale::classic()}} 的副本。

@2@ 复制构造函数。构造 {{c|other}} 的副本。

@3@ 构造拥有指定 {{c|std_name}} 的系统本地环境（如 {{c|"C"}}、{{c|"POSIX"}}、{{c|"en_US.UTF-8"}} 或 {{c|"English_US.1251"}}）的副本，如果操作系统支持这种本地环境。以此方式构造的本地环境拥有名称。

@4@ 等价于 {{c|locale(std_name.c_str())}}。

@5@ 构造 {{c|other}} 的副本，但不包括 {{c|cats}} 实参所鉴别的所有刻面，这些刻面从它们的 {{c|std_name}} 所标识的系统本地环境复制。以此方式构造的本地环境当且仅当 {{c|other}} 拥有名称时拥有名称。

@6@ 等价于 {{c|locale(other, std_name.c_str(), cats)}}。

@7@ 构造 {{c|other}} 的副本，不包括 {{tt|Facet}} 类型的刻面（典型地从实参类型推导），该刻面从实参 {{c|f}} 安装。如果 {{c|f}} 是空指针，那么构造的本地环境是 {{c|other}} 的完整副本。如果 {{tt|Facet}} 不是{{rlp|facet#刻面类|刻面}}或者是有 volatile 限定的刻面，那么程序非良构。

@@ 如果 {{c|f}} 为空，构造的本地环境的名称与 {{c|other}} 的名称相同。否则构造的本地环境没有名称。

@8@ 构造 {{c|other}} 的副本，不包括 {{c|cats}} 实参所鉴别的所有刻面，这些刻面从 {{c|one}} 复制。如果 {{c|other}} 和 {{c|one}} 都拥有名称，那么产生的本地环境也拥有名称。

@@ 如果 {{c|cats}} 等于 {{tt|locale::none}}，那么构造的本地环境只有在 {{c|other}} 有名字时才会有名字。否则构造的本地环境只有在 {{c|other}} 和 {{c|one}} 都有名字时才会有名字。

===参数===
{{par begin}}
{{par|other|要复制的另一本地环境}}
{{par|std_name|要使用的系统本地环境名称}}
{{par|f|指向要与 {{c|other}} 合并的刻面的指针}}
{{par|cats|用于鉴别要与 {{c|other}} 合并的刻面的刻面类别}}
{{par|one|接收刻面来源的另一本地环境}}
{{par end}}

===异常===
@3,5@ 如果操作系统没有名为 {{c|std_name}} 的本地环境，或 {{c|std_name}} 是空指针，那么就会抛出 {{lc|std::runtime_error}}。

@4,6@ 如果操作系统没有名为 {{c|std_name}} 的本地环境，那么就会抛出 {{lc|std::runtime_error}}。

===注解===
典型地以 {{c|f}} 为第二实参调用重载 {{vl|7}}，该实参从 new 表达式直接获取：本地环境负责从它自身的析构函数调用匹配的 {{c/core|delete}}。

===示例===
{{example
|code=
#include &lt;codecvt&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;

std::ostream&amp; operator&lt;&lt; (std::ostream&amp; os, const std::locale&amp; loc)
{
    if (loc.name().length() &lt;= 80)
        os &lt;&lt; loc.name();
    else
        for (const auto c : loc.name())
            os &lt;&lt; c &lt;&lt; (c == ';' ? "\n  " : "");

    return os &lt;&lt; '\n';
}

int main()
{
    std::locale l1; 
    std::cout &lt;&lt; "经典 \"C\" 本地环境副本的名称: " &lt;&lt; l1;

    std::locale l2("en_US.UTF-8");
    std::cout &lt;&lt; "Unicode 本地环境的名称: " &lt;&lt; l2;

    std::locale l3(l1, new std::codecvt_utf8&lt;wchar_t&gt;);
    std::cout &lt;&lt; "替换 codecvt 的 \"C\" 本地环境的名称: " &lt;&lt; l3;

    std::locale l4(l1, l2, std::locale::ctype);
    std::cout &lt;&lt; "替换 ctype 的 Unicode \"C\" 本地环境的名称:\n  " &lt;&lt; l4;
}
|p=true
|output=
经典 "C" 本地环境副本的名称: C
Unicode 本地环境的名称: en_US.UTF-8
替换 codecvt 的 "C" 本地环境的名称: *
替换 ctype 的 Unicode "C" 本地环境的名称:
  LC_CTYPE=en_US.UTF-8;
  LC_NUMERIC=C;
  LC_TIME=C;
  LC_COLLATE=C;
  LC_MONETARY=C;
  LC_MESSAGES=C;
  LC_PAPER=C;
  LC_NAME=C;
  LC_ADDRESS=C;
  LC_TELEPHONE=C;
  LC_MEASUREMENT=C;
  LC_IDENTIFICATION=C
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=436|std=C++98|before=对于重载 {{vl|7}}，不明确 {{tt|Facet}} 是否可以有 cv 限定|after=可以有 const 限定，但不能有 volatile 限定}}
{{dr list item|wg=lwg|dr=2295|std=C++98|before=对于重载 {{vl|7}}，即使 {{c|f}} 为空，构造的本地环境也没有名称|after=此时它的名称是 {{c|other}} 的名称}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/locale/locale/dsc ~locale}}
{{dsc end}}

===外部链接===
{{elink begin}}
{{elink|1=[https://ss64.com/locale.html Windows 本地环境名称列表]。}}
{{elink|1=[https://lh.2xlibre.net/locales/ Linux 本地环境名称列表]。}}
{{elink end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
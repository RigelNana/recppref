{{cpp/locale/locale/title|operator()}}
{{cpp/locale/locale/navbar}}
{{ddcl|
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator()( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; s1,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; s2 ) const;
}}

按照此本地环境的 {{c|std::collate&lt;charT&gt;}} 刻面所定义的字典序比较规则，比较两个字符串实参 {{c|s1}} 与 {{c|s2}}。此运算符允许任何拥有校排平面的本地环境对象被用作标准算法（如 {{lc|std::sort}}）和有序容器（{{lc|std::set}}）中的二元谓词。

===参数===
{{par begin}}
{{par|s1|要比较的第一字符串}}
{{par|s2|要比较的第二字符串}}
{{par end}}

===返回值===
若 {{c|s1}} 按字典序小于 {{c|s2}} 则为 {{c|true}}，否则为 {{c|false}}。

===可能的实现===
{{eq fun
|1=
template&lt;class CharT, class Traits, class Alloc&gt;
bool operator()(const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; s1,
                const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; s2) const
{
    return std::use_facet&lt;std::collate&lt;CharT&gt;&gt;(*this).compare(
               s1.data(), s1.data() + s1.size(),
               s2.data(), s2.data() + s2.size()) &lt; 0;
}
}}

===示例===
{{example
|{{lc|std::string|string}} 的 {{lc|std::vector|vector}} 能以本地环境对象为比较器，按照非默认的本地环境排序：
|code=
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;locale&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;std::wstring&gt; v = {L"жил", L"был", L"кот"};
    std::sort(v.begin(), v.end(), std::locale("ru_RU.UTF8"));
    assert(v[0] == L"был");
    assert(v[1] == L"жил");
    assert(v[2] == L"кот");
}
|output=
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc collate}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
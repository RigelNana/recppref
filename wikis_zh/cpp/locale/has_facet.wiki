{{cpp/title|has_facet}}
{{cpp/locale/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl rev multi|until1=c++11
|dcl1=
template&lt; class Facet &gt;
bool has_facet( const locale&amp; loc ) throw();
|dcl2=
template&lt; class Facet &gt;
bool has_facet( const locale&amp; loc ) noexcept;
}}
{{dcl end}}

检查本地环境 {{c|loc}} 是否实装了刻面 {{tt|Facet}}。

如果 {{tt|Facet}} 不是{{rlp|locale/facet#刻面类|刻面}}或者是有 volatile 限定的刻面，那么程序非良构。

===参数===
{{par begin}}
{{par|loc|要查询的本地环境对象}}
{{par end}}

===返回值===
在本地环境 {{c|loc}} 中安装了刻面 {{tt|Facet}} 时返回 {{c|true}}，否则返回 {{c|false}}。

===注解===
当 {{tt|Facet}} 是在{{rlp|locale|这里}}列出的标准刻面之一时，{{tt|std::has_facet}} 必须对所有本地环境 {{c|loc}} 返回 {{c|true}}。

===示例===
{{example
|
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;

// 最小自定义平面
struct myfacet : public std::locale::facet
{
    static std::locale::id id;
};

std::locale::id myfacet::id;

int main()
{
    // loc 是加上 myfacet 的 "C" 本地环境
    std::locale loc(std::locale::classic(), new myfacet);
    std::cout &lt;&lt; std::boolalpha
              &lt;&lt; "loc 是否可以分类 char？"
              &lt;&lt; std::has_facet&lt;std::ctype&lt;char&gt;&gt;(loc) &lt;&lt; '\n'
              &lt;&lt; "loc 是否可以分类 char32_t？"
              &lt;&lt; std::has_facet&lt;std::ctype&lt;char32_t&gt;&gt;(loc) &lt;&lt; '\n'
              &lt;&lt; "loc 是否实现了 myfacet？"
              &lt;&lt; std::has_facet&lt;myfacet&gt;(loc) &lt;&lt; '\n';
}
|output=
loc 是否可以分类 char？true
loc 是否可以分类 char32_t？false
loc 是否实现了 myfacet？true
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=436|std=C++98|before=不明确 {{tt|Facet}} 是否可以有 cv 限定|after=可以有 const 限定，但不能有 volatile 限定}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc locale}}
{{dsc inc|cpp/locale/dsc use_facet}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/locale/ctype/title|is|do_is}}
{{cpp/locale/ctype/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
bool is( mask m, CharT c ) const;
}}
{{dcl|num=2|1=
public:
const CharT* is( const CharT* low, const CharT* high, mask* vec ) const;
}}
{{dcl|num=3|1=
protected:
virtual bool do_is( mask m, CharT c ) const;
}}
{{dcl|num=4|1=
protected:
virtual const CharT* do_is( const CharT* low, const CharT* high, mask* vec ) const;
}}
{{dcl end}}

@1,2@ 公开成员函数，调用最终派生类的受保护虚成员函数 {{tt|do_is}}。
@3@ 检查字符 {{c|c}} 是否以掩码 {{c|m}} 分类。
@4@ 对字符数组 {{range|low|high}} 中的每个字符，鉴别完整分类掩码（例如默认本地环境中对于数字 {{c|'0'}} 为 {{c|digit{{!}}xdigit{{!}}alnum{{!}}print{{!}}graph}}），并存储掩码于 {{tt|vec}} 所指向数组的对应元素。

===参数===
{{par begin}}
{{par | c |要分类的字符}}
{{par | m |用于分类单个字符的掩码}}
{{par | low |指向要分类的字符数组中首字符的指针}}
{{par | high |要分类的字符数组的尾后一位置指针}}
{{par | vec |指向要填充的掩码数组首元素的指针}}
{{par end}}

===返回值===
@1,3@ 若 {{c|c}} 以 {{c|m}} 分类则为 {{c|true}}
@2,4@ {{c|high}}

===示例===
{{example
|code=
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;

// 使绑定到 locale 的 facet 可析构的工具包装器
template&lt;class Facet&gt;
struct deletable_facet : Facet
{
    template&lt;class ...Args&gt;
    deletable_facet(Args&amp;&amp; ...args) : Facet(std::forward&lt;Args&gt;(args)...) {}
    ~deletable_facet() {}
};

int main()
{
    // 用默认 locale 分类单个字符
    auto&amp; f = std::use_facet&lt;std::ctype&lt;char&gt;&gt;(std::locale());
    char c = '0';
    if (f.is(std::ctype_base::digit, c)) // 或 isdigit(c, locale());
        std::cout &lt;&lt; '\'' &lt;&lt; c &lt;&lt; "' is a digit\n";

    // 用具名 locale 分类每个字符串中的字符
    deletable_facet&lt;std::ctype_byname&lt;wchar_t&gt;&gt; f2("en_US.utf8");
    std::wstring str = L"z\u00df\u6c34\U0001d10b";
    std::vector&lt;std::ctype_base::mask&gt; vec(str.size());
    f2.is(&amp;str[0], &amp;str[0] + str.size(), &amp;vec[0]);

    for (std::size_t n = 0; n &lt; str.size(); ++n)
    {
        std::cout &lt;&lt; std::hex &lt;&lt; "U+" &lt;&lt; static_cast&lt;wint_t&gt;(str[n]) &lt;&lt; " is: ";
        if (vec[n] &amp; std::ctype_base::alnum) 
            std::cout &lt;&lt; "alnum";
        if (vec[n] &amp; std::ctype_base::punct) 
            std::cout &lt;&lt; "punct";
        std::cout &lt;&lt; '\n';
    }
}
|output=
'0' is a digit
U+7a is:  alnum 
U+df is:  alnum 
U+6c34 is:  alnum 
U+1d10b is:  punct 
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/locale/ctype_char/dsc is}}
{{dsc inc|cpp/string/wide/dsc iswctype}}
{{dsc end}}

{{langlinks|en|ja}}
{{cpp/locale/ctype/title|toupper|do_toupper}}
{{cpp/locale/ctype/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
CharT toupper( CharT c ) const;
}}
{{dcl|num=2|1=
public:
const CharT* toupper( CharT* beg, const CharT* end ) const;
}}
{{dcl|num=3|1=
protected:
virtual CharT do_toupper( CharT c ) const;
}}
{{dcl|num=4|1=
protected:
virtual const CharT* do_toupper( CharT* beg, const CharT* end ) const;
}}
{{dcl end}}

@1,2@ 公开成员函数，调用最终派生类上的受保护虚成员函数 {{tt|do_toupper}}。
@3@ 若此本地环境定义 {{c|c}} 的大写形式，则转换它为大写形式。
@4@ 对字符数组 {{range|beg|end}} 中每个存在大写形式的字符，以其大写形式替换该字符。

===参数===
{{par begin}}
{{par|c|要转换的字符}}
{{par|beg|指向要转换的数组中首字符的指针}}
{{par|end|指向要转换的数组尾后一位置的指针}}
{{par end}}

===返回值===
@1,3@ 大写字符，或若无列于此本地环境的大写形式则为 {{c|c}}。
@2,4@ {{c|end}}。

===注解===
此函数只能进行 1:1 字符映射，例如 'ß' 的大写形式（有一些例外）是双字符字符串 "SS"，它无法以 {{tt|do_toupper}} 获得。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;

void try_upper(const std::ctype&lt;wchar_t&gt;&amp; f, wchar_t c)
{
    wchar_t up = f.toupper(c);
    if (up != c)
        std::wcout &lt;&lt; "\'" &lt;&lt; c &lt;&lt; "' 的大写形式是 " &lt;&lt; up &lt;&lt; '\n';
    else
        std::wcout &lt;&lt; '\'' &lt;&lt; c &lt;&lt; "' 没有大写形式\n";
}

int main()
{
    std::locale::global(std::locale("en_US.utf8"));
    std::wcout.imbue(std::locale());
    std::wcout &lt;&lt; "美国英语 UTF-8 本地环境中:\n";
    auto&amp; f = std::use_facet&lt;std::ctype&lt;wchar_t&gt;&gt;(std::locale());
    try_upper(f, L's');
    try_upper(f, L'ſ');
    try_upper(f, L'ß');

    std::wstring str = L"Hello, World!";
    std::wcout &lt;&lt; "字符串 '" &lt;&lt; str &lt;&lt; "' 的大写形式是 ";
    f.toupper(&amp;str[0], &amp;str[0] + str.size());
    std::wcout &lt;&lt; "'" &lt;&lt; str &lt;&lt; "'\n";
}
|output=
美国英语 UTF-8 本地环境中:
's' 的大写形式是 S
'ſ' 的大写形式是 S
'ß' 没有大写形式
字符串 'Hello, World!' 的大写形式是 'HELLO, WORLD!'
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/locale/ctype/dsc tolower}}
{{dsc inc|cpp/string/byte/dsc toupper}}
{{dsc inc|cpp/string/wide/dsc towupper}}
{{dsc end}}

{{langlinks|en|ja}}
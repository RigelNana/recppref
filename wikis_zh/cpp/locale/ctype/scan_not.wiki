{{cpp/locale/ctype/title|scan_not|do_scan_not}}
{{cpp/locale/ctype/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
const CharT* scan_not( mask m, const CharT* beg, const CharT* end ) const;
}}
{{dcl|num=2|1=
protected:
virtual const CharT* do_scan_not( mask m, const CharT* beg, const CharT* end ) const;
}}
{{dcl end}}

@1@ 公开成员函数，调用最终派生类的受保护虚成员函数 {{tt|do_scan_not}}。
@2@ 定位字符数组 {{range|beg|end}} 中不满足分类掩码 {{tt|m}} 的首个字符，即首个使得 {{c|is(m, c)}} 会返回 {{c|false}} 的字符 {{tt|c}}。

===参数===
{{par begin}}
{{par | m |要搜索的掩码}}
{{par | beg |指向要搜索的数组中首字符的指针}}
{{par | end |指向要搜索的数组尾后一位置的指针}}
{{par end}}

===返回值===
指向 {{range|beg|end}} 中首个不满足掩码的字符，或若找不到这种字符则为 {{c|end}}。

===示例===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;locale&gt;

int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    std::wcout.imbue(std::locale("en_US.utf8"));
    auto&amp; f = std::use_facet&lt;std::ctype&lt;wchar_t&gt;&gt;(std::wcout.getloc());

    // 跳过前导空白
    wchar_t s1[] = L"      \t\t\n  Кошка";
    const wchar_t* p1 = f.scan_not(std::ctype_base::space, std::begin(s1), std::end(s1));
    std::wcout &lt;&lt; "'" &lt;&lt; p1 &lt;&lt; "'\n";

    // 跳过前导数字
    wchar_t s2[] = L"123456789ネプネプ";
    const wchar_t* p2 = f.scan_not(std::ctype_base::digit, std::begin(s2), std::end(s2));
    std::wcout &lt;&lt; "'" &lt;&lt; p2 &lt;&lt; "'\n";
}
|output=
'Кошка'
'ネプネプ'
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/locale/ctype_char/dsc scan_not}}
{{dsc inc|cpp/locale/ctype/dsc do_scan_is}}
{{dsc end}}

{{langlinks|en|ja}}
{{cpp/title|numpunct}}
{{cpp/locale/numpunct/navbar}}
{{ddcl|header=locale|
template&lt; class CharT &gt;
class numpunct;
}}

平面 {{tt|std::numpunct}} 封装数值标点偏好。流输入/输出操作通过 {{lc|std::num_get}} 和 {{lc|std::num_put}}，将用 {{tt|std::numpunct}} 用于剖析数值输入，和格式化数值输出。

{{tt|std::numpunct}} 所支持的数字拥有后述格式。此处 {{tt|digit}} 表示 {{tt|fmtflags}} 参数值所指定的基底集，{{tt|thousands-sep}} 和 {{tt|decimal-point}} 分别是 {{lc|thousands_sep()}} 和 {{lc|decimal_point()}} 函数的结果。

整数格式如下：
{{source|lang=text|1=
integer     ::= [sign] units
sign        ::= plusminus
plusminus   ::= '+' {{!}} '-'
units       ::= digits [thousands-sep units]
digits      ::= digit [digits]
}}

{{tt|thousand-sep}} 之间的数位（{{tt|digits}} 的最大大小）由 {{lc|grouping()}} 的结果指定。

浮点数格式如下：
{{source|lang=text|1=
floatval    ::= [sign] units [decimal-point [digits]] [e [sign] digits] {{!}}
                [sign]        decimal-point  digits   [e [sign] digits]
e           ::= 'e' {{!}} 'E'
}}

{{inheritance diagram/std-numpunct}}

===特化===
标准库保证提供以下特化（所有本地环境对象{{rlp|locale|都需要实现}}这些特化）：
{{dsc begin}}
{{dsc header|locale}}
{{dsc|{{c/core|std::numpunct&lt;char&gt;}}|提供 "C" 本地环境偏好的等价版本}}
{{dsc|{{c/core|std::numpunct&lt;wchar_t&gt;}}|提供 "C" 本地环境偏好的宽字符等价版本}}
{{dsc end}}

===嵌套类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc|{{tt|string_type}}|{{c/core|std::basic_string&lt;CharT&gt;}}}}
{{dsc end}}

{{cpp/locale/facet data members}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/locale/numpunct/dsc numpunct}}
{{dsc inc|cpp/locale/numpunct/dsc ~numpunct}}
{{dsc inc|cpp/locale/numpunct/dsc decimal_point}}
{{dsc inc|cpp/locale/numpunct/dsc thousands_sep}}
{{dsc inc|cpp/locale/numpunct/dsc grouping}}
{{dsc inc|cpp/locale/numpunct/dsc truefalsename}}
{{dsc end}}

===受保护成员函数===
{{dsc begin}}
{{dsc inc|cpp/locale/numpunct/dsc do_decimal_point}}
{{dsc inc|cpp/locale/numpunct/dsc do_thousands_sep}}
{{dsc inc|cpp/locale/numpunct/dsc do_grouping}}
{{dsc inc|cpp/locale/numpunct/dsc do_truefalsename}}
{{dsc end}}

===示例===
{{example
|下列代码会更改 {{c|true}} 和 {{c|false}} 的字符串表示：
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;

struct french_bool : std::numpunct&lt;char&gt;
{
    string_type do_truename() const { return "vrai"; }
    string_type do_falsename() const { return "faux"; }
};

int main()
{
    std::cout &lt;&lt; "默认本地环境："
              &lt;&lt; std::boolalpha &lt;&lt; true &lt;&lt; "，" &lt;&lt; false &lt;&lt; '\n';
    std::cout.imbue(std::locale(std::cout.getloc(), new french_bool));
    std::cout &lt;&lt; "修改 numpunct 后的本地环境："
              &lt;&lt; std::boolalpha &lt;&lt; true &lt;&lt; "，" &lt;&lt; false &lt;&lt; '\n';
}
|output=
默认本地环境：true，false
修改 numpunct 后的本地环境：vrai，faux
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=338|std=C++98|before={{tt|sign}} 记号允许在 {{tt|+}} 或 {{tt|-}} 后添加一个空白字符|after=移除该空白字符}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc tclass|cpp/locale/numpunct_byname|为具名本地环境创建 numpunct 平面}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
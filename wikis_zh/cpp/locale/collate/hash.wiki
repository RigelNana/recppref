{{cpp/locale/collate/title|hash|do_hash}}
{{cpp/locale/collate/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
long hash( const CharT* beg, const CharT* end ) const;
}}
{{dcl|num=2|1=
protected:
virtual long do_hash( const CharT* beg, const CharT* end ) const;
}}
{{dcl end}}

@1@ 公开成员函数，调用最终派生类的受保护虚成员函数 {{tt|do_hash}}。

@2@ 转换字符序列 {{range|beg|end}} 为整数值，该值对所有此本地环境中校排等价（{{lc|compare()}} 返回 {{c|0}}）的字符串相同。对于两个校排不等价的字符串，其散列相等的概率要非常小，近似 {{c|1=1.0/std::numeric_limits&lt;unsigned long&gt;::max()}}。

===参数===
{{par begin}}
{{par|beg|指向要散列的序列中首字符的指针}}
{{par|end|要散列的序列的尾后一位置指针}}
{{par end}}

===返回值===
相对于校排顺序的散列值。

===注解===
若 {{l2tt|cpp/string/basic_string/operator_cmp|operator{{==}}|basic_string}} 返回 {{c|false}}，则系统提供的本地环照常校排两个字符串为不等价（{{lc|compare()}} 不返回 {{c|0}}），但用户安装的 {{lc|std::collate}} 刻面可提供不同的校排规则，例如，它可以若字符串拥有相同的 Unicode 正规化形式，则将字符串按等价对待。

===示例===
{{example
|演示具本地环境的无序容器
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;string&gt;
#include &lt;unordered_set&gt;

struct CollateHash
{
    template&lt;typename CharT&gt;
    long operator()(const std::basic_string&lt;CharT&gt;&amp; s) const
    {
        return std::use_facet&lt;std::collate&lt;CharT&gt;&gt;(std::locale()).hash(
                   &amp;s[0], &amp;s[0] + s.size()
               );
    }
};
struct CollateEq
{
    template&lt;typename CharT&gt;
    bool operator()(const std::basic_string&lt;CharT&gt;&amp; s1,
                    const std::basic_string&lt;CharT&gt;&amp; s2) const
    {
        return std::use_facet&lt;std::collate&lt;CharT&gt;&gt;(std::locale()).compare(
                     &amp;s1[0], &amp;s1[0] + s1.size(),
                     &amp;s2[0], &amp;s2[0] + s2.size()
               ) == 0;
    }
};

int main()
{
    std::locale::global(std::locale("en_US.utf8"));
    std::wcout.imbue(std::locale());

    std::unordered_set&lt;std::wstring, CollateHash, CollateEq&gt; s2 = {L"Foo", L"Bar"};
    for (auto&amp; str : s2)
        std::wcout &lt;&lt; str &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|p=true
|output=
Bar Foo
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc hash}}
{{dsc end}}

{{langlinks|en|ja}}
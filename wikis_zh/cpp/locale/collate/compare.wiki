{{cpp/locale/collate/title|compare|do_compare}}
{{cpp/locale/collate/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
int compare( const CharT* low1, const CharT* high1,
             const CharT* low2, const CharT* high2 ) const;
}}
{{dcl|num=2|1=
protected:
virtual int do_compare( const CharT* low1, const CharT* high1,
                        const CharT* low2, const CharT* high2 ) const;
}}
{{dcl end}}

@1@ 公开成员函数，调用最终派生类的受保护虚成员函数 {{tt|do_compare}}。

@2@ 以此本地环境的校排规则，比较字符序列 {{range|low1|high1}} 与字符序列 {{range|low2|high2}}，而若第一字符串后随第二个则返回 1，若第一字符串前趋第二个则返回 -1，若两个字符串等价则返回零。

===参数===
{{par begin}}
{{par|low1|指向第一字符串首字符的指针}}
{{par|high1|第一字符串的尾后一位置指针}}
{{par|low2|指向第二字符串首字符的指针}}
{{par|high2|第二字符串的尾后一位置指针}}
{{par end}}

===返回值===
若第一字符串大于第二个（即以校排顺序后随第二个）则为 1，若第一字符串小于第二个（以校排顺序前趋第二个）则为 -1，若两个字符串等价则为零。

===注解===
不要求三路比较时（例如在提供 {{tt|Compare}} 参数给如 {{lc|std::sort}} 的标准算法时），{{ltt|cpp/locale/locale/operator()|std::locale::operator()}} 可能更适合。

{{cpp/locale/collate/collation_note}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;string&gt;

template&lt;typename CharT&gt;
void try_compare(const std::locale&amp; l, const CharT* p1, const CharT* p2)
{
    auto&amp; f = std::use_facet&lt;std::collate&lt;CharT&gt;&gt;(l);

    std::basic_string&lt;CharT&gt; s1(p1), s2(p2);
    if (f.compare(&amp;s1[0], &amp;s1[0] + s1.size(),
                  &amp;s2[0], &amp;s2[0] + s2.size()) &lt; 0)
        std::wcout &lt;&lt; p1 &lt;&lt; " 先于 " &lt;&lt; p2 &lt;&lt; '\n';
    else
        std::wcout &lt;&lt; p2 &lt;&lt; " 先于 " &lt;&lt; p1 &lt;&lt; '\n';
}

int main()
{
    std::locale::global(std::locale("en_US.utf8"));
    std::wcout.imbue(std::locale());

    std::wcout &lt;&lt; "美国本地环境中: ";
    try_compare(std::locale(), "hrnec", "chrt");
    std::wcout &lt;&lt; "捷克本地环境中: ";
    try_compare(std::locale("cs_CZ.utf8"), "hrnec", "chrt");

    std::wcout &lt;&lt; "美国本地环境中: ";
    try_compare(std::locale(), L"år", L"ängel");
    std::wcout &lt;&lt; "瑞典本地环境中: ";
    try_compare(std::locale("sv_SE.utf8"), L"år", L"ängel");
}
|output=
美国本地环境中: chrt 先于 hrnec
捷克本地环境中: hrnec 先于 chrt
美国本地环境中: ängel 先于 år
瑞典本地环境中: år 先于 ängel
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc strcoll}}
{{dsc inc|cpp/string/wide/dsc wcscoll}}
{{dsc inc|cpp/locale/locale/dsc operator()}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/locale/collate/title|transform, do_transform}}
{{cpp/locale/collate/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
string_type transform( const CharT* low, const CharT* high ) const;
}}
{{dcl|num=2|1=
protected:
virtual string_type do_transform( const CharT* low, const CharT* high ) const;
}}
{{dcl end}}

@1@ 公开成员函数，调用最终派生类的受保护虚成员函数 {{tt|do_transform}}。

@2@ 转换字符序列 {{range|low|high}} 为字符串，使得它与在另一字符串上调用 {{tt|transform()}} 的结果以字典序比较，会产生在两个相同字符串上调用 {{lc|do_compare()}} 的相同结果。

===参数===
{{par begin}}
{{par|low|指向要变换的字符序列中首字符的指针}}
{{par|high|要变换的序列的尾后一位置指针}}
{{par end}}

===返回值===
变换后的字符串，它使得被变换字符串的字典序比较能用于取代对原字符串的校排。"C" 本地环境中，返回的字符串为 {{range|low|high}} 的准确副本。其他本地环境中，返回字符串的内容是实现定义的，而且可考虑到大小可能更长。

===注解===
除了在校排中使用外，本地环境特定的变换字符串格式还为 [[cpp/regex/regex_traits/transform_primary|std::regex_traits::transform_primary]] 所知，它能够提取等价类信息。

===示例===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;

int main()
{
    std::locale::global(std::locale("sv_SE.utf8"));
    auto&amp; f = std::use_facet&lt;std::collate&lt;wchar_t&gt;&gt;(std::locale());

    std::wstring in1 = L"\u00e4ngel";
    std::wstring in2 = L"\u00e5r";

    std::wstring out1 = f.transform(&amp;in1[0], &amp;in1[0] + in1.size());
    std::wstring out2 = f.transform(&amp;in2[0], &amp;in2[0] + in2.size());

    std::wcout &lt;&lt; "瑞典本地环境中: ";
    if (out1 &lt; out2)
        std::wcout &lt;&lt; in1 &lt;&lt; " 先于 " &lt;&lt; in2 &lt;&lt; '\n';
    else
        std::wcout &lt;&lt; in2 &lt;&lt; " 先于 " &lt;&lt; in1 &lt;&lt; '\n';

    std::wcout &lt;&lt; "字典序比较: ";
    if (in1 &lt; in2)
        std::wcout &lt;&lt; in1 &lt;&lt; " 先于 " &lt;&lt; in2 &lt;&lt; '\n';
    else
        std::wcout &lt;&lt; in2 &lt;&lt; " 先于 " &lt;&lt; in1 &lt;&lt; '\n';
}
|output=
瑞典本地环境中: år 先于 ängel
字典序比较: ängel 先于 år
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc strxfrm}}
{{dsc inc|cpp/string/wide/dsc wcsxfrm}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
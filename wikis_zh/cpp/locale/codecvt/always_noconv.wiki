{{cpp/locale/codecvt/title|always_noconv, do_always_noconv}}
{{cpp/locale/codecvt/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl rev multi|num=1|until1=c++11|dcl1=
public:
bool always_noconv() const throw();
|dcl2=
public:
bool always_noconv() const noexcept;
}}
{{dcl rev multi|num=2|until1=c++11|dcl1=
protected:
virtual bool do_always_noconv() const throw();
|dcl2=
protected:
virtual bool do_always_noconv() const noexcept;
}}
{{dcl end}}

@1@ 公开成员函数，调用最终派生类的成员函数 {{tt|do_always_noconv}}。

@2@ 若 {{lc|do_in()}} 和 {{lc|do_out()}} 对于所有合法输入都返回 {{tt|std::codecvt_base::noconv}} 则返回 {{c|true}}。

===返回值===
若此转换刻面不进行转换则为 {{c|true}}，否则为 {{c|false}}。

不转换特化 {{c|std::codecvt&lt;char, char, std::mbstate_t&gt;}} 返回 {{c|true}}。

===注解===
此函数可用于例如 {{lc|std::basic_filebuf::underflow}} 和 {{lc|std::basic_filebuf::overflow}} 的实现，以在已知 {{lc|std::basic_filebuf}} 中感染的本地环境不进行任何转换的情况下，使用批量字符复制取代调用 {{lc|std::codecvt::in}} 或 {{lc|std::codecvt::out}}。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;

int main()
{
    std::cout &lt;&lt; "无转换的 char&lt;-&gt;char codecvt::always_noconv() 返回 " 
              &lt;&lt; std::boolalpha
              &lt;&lt; std::use_facet&lt;std::codecvt&lt;char, char, std::mbstate_t&gt;&gt;(
                    std::locale()
                 ).always_noconv() &lt;&lt; '\n'
              &lt;&lt; "而 wchar_t&lt;-&gt;char codecvt::always_noconv() 返回 "
              &lt;&lt; std::use_facet&lt;std::codecvt&lt;wchar_t, char, std::mbstate_t&gt;&gt;(
                    std::locale()
                 ).always_noconv() &lt;&lt; '\n';
}
|output=
无转换的 char&lt;-&gt;char codecvt::always_noconv() 返回 true
而 wchar_t&lt;-&gt;char codecvt::always_noconv() 返回 false
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
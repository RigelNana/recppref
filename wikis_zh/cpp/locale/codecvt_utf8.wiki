{{cpp/title|codecvt_utf8}}
{{cpp/locale/navbar}}
{{ddcl|header=codecvt|since=c++11|deprecated=c++17|removed=c++26|1=
template&lt;
    class Elem,
    unsigned long Maxcode = 0x10ffff,
    std::codecvt_mode Mode = (std::codecvt_mode)0 &gt;
class codecvt_utf8
    : public std::codecvt&lt;Elem, char, std::mbstate_t&gt;;
}}

{{tt|std::codecvt_utf8}} 是封装 UTF-8 编码字符串和 UCS-2 或 UTF-32 字符串（取决于 {{tt|Elem}} 类型）间转换的 {{lc|std::codecvt}} 刻面。此 {{lc|std::codecvt}} 刻面能用于读写文本和二进制的 UTF-8 文件。

{{rrev|since=c++23|
UCS-2 和 UTF-16 是相同的编码，区别是前者只能编码范围 U+0000-U+FFFF（基础多语言平面）中的标量。
}}

===模板形参===
{{par begin}}
{{par|Elem|{{c/core|char16_t}}、{{c/core|char32_t}} 或 {{c/core|wchar_t}} 之一}}
{{par|Maxcode|此刻面将读写而无错误的最大 {{tt|Elem}} 值}}
{{par|Mode|{{lc|std::codecvt_mode}} 类型常量}}
{{par end}} 

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/locale/codecvt_utf8|inlinemem=true|构造新的 {{tt|codecvt_utf8}} 刻面}}
{{dsc mem dtor|cpp/locale/codecvt_utf8|inlinemem=true|销毁 {{tt|codecvt_utf8}} 刻面}}
{{dsc end}}

{{member|{{small|std::codecvt_utf8::}}codecvt_utf8|
{{dcl begin}}
{{dcl|1=
explicit codecvt_utf8( std::size_t refs = 0 );
}}
{{dcl end}}

构造新的 {{tt|std::codecvt_utf8}} 刻面，传递初始引用计数 {{c|refs}} 给基类。

===参数===
{{par begin}}
{{par|refs|链接到该刻面的引用数}}
{{par end}}
}}

{{member|{{small|std::codecvt_utf8::}}~codecvt_utf8|
{{dcl begin}}
{{dcl|1=
~codecvt_utf8();
}}
{{dcl end}}

销毁刻面。与本地环境管理的刻面不同，此刻面的析构函数是公开的。
}}

{{cpp/locale/codecvt/inherit}}
{{cpp/locale/codecvt_base/inherit}}

===注解===
尽管标准要求此刻面在 {{tt|Elem}} 是 16 位时用 UCS-2 工作，某些实现用 UTF-16 代替。用语 "UCS-2" 已被弃用并从 ISO 10646 移除。

从 C++23 开始，UCS-2 不再指代它的原本定义。它成为了 UTF-16 的同义词，但是编码范围更小。

===示例===
{{example
|下例示例演示 UCS-2/UTF-8 间和 UTF-16/UTF-8 间转换的差异：字符串中的字符不是合法的 UCS-2 字符。
|code=
#include &lt;codecvt&gt;
#include &lt;cstdint&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;string&gt;

int main()
{
    // UTF-8 数据。字符 U+1d10b（segno 音符）不在 UCS-2 中
    std::string utf8 = "z\u6c34\U0001d10b";
    
    // UTF-8 / UTF-16 标准转换刻面
    std::wstring_convert&lt;std::codecvt_utf8_utf16&lt;char16_t&gt;, char16_t&gt; utf16conv;
    std::u16string utf16 = utf16conv.from_bytes(utf8);
    std::cout &lt;&lt; "UTF-16 转换产生了 " &lt;&lt; utf16.size() &lt;&lt; " 个代码单元：\n";
              &lt;&lt; std::showbase &lt;&lt; std::hex;
    for (char16_t c : utf16)
        std::cout &lt;&lt; static_cast&lt;std::uint16_t&gt;(c) &lt;&lt; ' ';
    
    // UTF-8 / UCS-2 标准转换刻面
    std::wstring_convert&lt;std::codecvt_utf8&lt;char16_t&gt;, char16_t&gt; ucs2conv;
    try
    {
        std::u16string ucs2 = ucs2conv.from_bytes(utf8);
    }
    catch(const std::range_error&amp; e)
    {
        std::u16string ucs2 = ucs2conv.from_bytes(utf8.substr(0, ucs2conv.converted()));
        std::cout &lt;&lt; "\nUCS-2 在产生 " &lt;&lt; std::dec &lt;&lt; ucs2.size() &lt;&lt; " 个字符后失败：\n";
                  &lt;&lt; std::showbase &lt;&lt; std::hex;
        for (char16_t c : ucs2)
            std::cout &lt;&lt; static_cast&lt;std::uint16_t&gt;(c) &lt;&lt; ' ';
        std::cout &lt;&lt; '\n';
    }
}
|output=
UTF-16 转换产生了 4 个代码单元：
0x7a 0x6c34 0xd834 0xdd0b
UCS-2 在产生 2 个字符后失败：
0x7a 0x6c34
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2229|std=C++98|before=未指定构造函数和析构函数|after=指定它们}}
{{dr list end}}

===参阅===
{{cpp/locale/unicode string conversions}}
{{dsc begin}}
{{dsc inc|cpp/locale/dsc codecvt}}
{{dsc inc|cpp/locale/dsc codecvt_mode}}
{{dsc inc|cpp/locale/dsc codecvt_utf16}}
{{dsc inc|cpp/locale/dsc codecvt_utf8_utf16}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
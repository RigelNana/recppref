{{cpp/title|num_get}}
{{cpp/locale/num_get/navbar}}
{{ddcl|header=locale|
template&lt; 
    class CharT,
    class InputIt = std::istreambuf_iterator&lt;CharT&gt;
&gt; class num_get;
}}

类 {{tt|std::num_get}} 封装分析数值的字符串表示的规则。特别是支持类型 {{c/core|bool}}、{{c/core|unsigned short}}、{{c/core|unsigned int}}、{{c/core|long}}、{{c/core|unsigned long}}{{rev inl|since=c++11|、{{c/core|long long}}、{{c/core|unsigned long long}}}}、{{c/core|float}}、{{c/core|double}}、{{c/core|long double}} 及 {{c/core|void*}}。标准格式化输入运算符（如 {{c|cin &gt;&gt; n;}}）用输入/输出流的本地环境的 {{tt|std::num_get}} 刻面解析数字的文本表示。

{{inheritance diagram/std-num_get}}

如果标准库不保证提供 {{tt|std::num_get}} 的某个特化（见下文），那么它的成员函数 {{lc|get()}} 和 {{lc|do_get()}} 不保证会遵守指定的行为。

===特化===
标准库保证提供以下特化（所有本地环境对象{{rlp|locale|都需要实现}}这些特化）：
{{dsc begin}}
{{dsc header|locale}}
{{dsc|{{c/core|std::num_get&lt;char&gt;}}|创建数字的窄字符串分析}}
{{dsc|{{c/core|std::num_get&lt;wchar_t&gt;}}|创建数字的宽字符串分析}}
{{dsc end}}

另外，标准库也保证提供满足以下类型要求的所有特化：
* {{tt|CharT}} 是以下类型之一：
** {{c/core|char}}
** {{c/core|wchar_t}}
** 由实现定义的其他任何[[cpp/string|字符容器类型]]，该类型需要满足实例化所有 [[cpp/io|iostream 组件]]所需的对字符的要求
* {{tt|InputIt}} 需要满足{{named req|InputIterator}}的要求

===嵌套类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc|{{tt|iter_type}}|{{tt|InputIt}}}}
{{dsc end}}

{{cpp/locale/facet data members}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/locale/num_get/num_get|构造新的 {{tt|num_get}} 刻面}}
{{dsc mem fun|cpp/locale/num_get/get|调用 {{tt|do_get}}}}
{{dsc end}}

===受保护成员函数===
{{dsc begin}}
{{dsc prot mem dtor|cpp/locale/num_get/~num_get|析构 {{tt|num_get}} 刻面}}
{{dsc prot mem vfun|cpp/locale/num_get/get|title=do_get|从输入流分析数字}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;locale&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;

int main()
{
    std::string de_double = "1.234.567,89";
    std::string us_double = "1,234,567.89";
    
    // 使用流进行分析
    std::istringstream de_in(de_double);
    de_in.imbue(std::locale("de_DE.UTF-8"));
    double f1;
    de_in &gt;&gt; f1;
    
    std::istringstream us_in(de_double);
    us_in.imbue(std::locale("en_US.UTF-8"));
    double f2;
    us_in &gt;&gt; f2;
    
    std::cout &lt;&lt; "用 de_DE 和 en_US 本地环境将" &lt;&lt; de_double
              &lt;&lt; " 解析为 double 分别得到 " &lt;&lt; std::fixed
              &lt;&lt; f1 &lt;&lt; " 和 " &lt;&lt; f2 &lt;&lt; '\n';
    
    // 直接使用刻面
    std::istringstream s3(us_double);
    s3.imbue(std::locale("en_US.UTF-8"));
    
    auto&amp; f = std::use_facet&lt;std::num_get&lt;char&gt;&gt;(s3.getloc());
    std::istreambuf_iterator&lt;char&gt; beg(s3), end;
    double f3;
    std::ios::iostate err;
    f.get(beg, end, s3, err, f3);
    
    std::cout &lt;&lt; "使用原始 en_US 刻面将" &lt;&lt; us_double
              &lt;&lt; " 解析为 double 得到 " &lt;&lt; f3 &lt;&lt; '\n';
}
|output=
用 de_DE 和 en_US 本地环境将 1.234.567,89 解析为 double 分别得到 1234567.890000 和 1.234000
使用原始 en_US 平面将 1,234,567.89 解析为 double 得到 1234567.890000
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=427|std=C++98|before={{tt|num_put}} 保证接受任何满足实例化所有&lt;br&gt;iostream 组件所需的对字符类型的要求的 {{tt|CharT}}|after=只保证接受 {{c/core|char}}、{{c/core|wchar_t}}&lt;br&gt;和其他由实现定义的字符类型}}
{{dr list item|wg=lwg|dr=2392|std=C++98|before={{tt|num_put}} 能够保证接受的 {{tt|CharT}} 只有字符类型|after=可以保证接受由实现定义的字符容器类型}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc numpunct}}
{{dsc inc|cpp/locale/dsc num_put}}
{{dsc inc|cpp/io/basic_istream/dsc operator_gtgt}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
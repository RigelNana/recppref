{{cpp/locale/time_get/title|get_monthname|do_get_monthname}}
{{cpp/locale/time_get/navbar}}
{{dcl begin}}
{{dcl header|locale}}
{{dcl|num=1|1=
public:
iter_type get_monthname( iter_type beg, iter_type end, std::ios_base&amp; str,
                         std::ios_base::iostate&amp; err, std::tm* t ) const;
}}
{{dcl|num=2|1=
protected:
virtual iter_type do_get_monthname( iter_type beg, iter_type end, std::ios_base&amp; str,
                                    std::ios_base::iostate&amp; err, std::tm* t ) const;
}}
{{dcl end}}

@1@ 公开成员函数，调用最终派生类的受保护虚成员函数 {{tt|do_get_monthname}}。
@2@ 从字符序列 {{range|beg|end}} 读取出相继字符，并按与为函数 {{lc|std::get_time}}、{{l2tt|cpp/locale/time_get/get}} 和 POSIX 函数 {{tt|strptime()}} 所用的此本地环境所期待的月名默认格式 {{c|"%b"}} 解析出月名（可能是缩写）。

如果它找到缩写名，那么它会持续读取，直到消耗尽完整名的字符，或找到不是期待的字符，后一情况下即使首段字符是合法缩写解析也会失败。

将解析出的的月名存储到 {{lc|std::tm}} 域 {{c|t-&gt;tm_mon}}。

如果在读到合法月名之前抵达尾迭代器，那么函数会设置 {{c|err}} 中的 {{lc|std::ios_base::eofbit}}。如果遇到解析错误，那么函数会设置 {{c|err}} 中的 {{lc|std::ios_base::failbit}}。

===参数===
{{par begin}}
{{par|beg|指代要分析的序列起始的迭代器}}
{{par|end|要分析的序列的尾后一位置迭代器}}
{{par|str|此函数在需要时用以获得本地环境平面的流对象，例如用 {{lc|std::ctype}} 跳过空白符或用 {{lc|std::collate}} 比较字符串}}
{{par|err|此函数所修改以指示错误的流错误标志对象}}
{{par|t|指向 {{lc|std::tm}} 对象的指针，该对象将保有此函数调用结果}}
{{par end}}

===返回值===
指向 {{range|beg|end}} 中辨识为合法月名部分的末字符后一位置的迭代器。

===注解===
此函数通常不区别大小写。

如果遇到解析错误，那么此函数的大多数实现保留 {{c|*t}} 不修改。

===示例===
{{example
|code=
#include &lt;ctime&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;locale&gt;
#include &lt;sstream&gt;
#include &lt;string_view&gt;

void try_get_mon(std::string_view locale_name, std::string_view source)
{
    try
    {
        std::locale::global(std::locale(locale_name.data()));
    }
    catch (std::runtime_error const&amp; ex)
    {
        std::cout &lt;&lt; "无法设置本地环境: " &lt;&lt; locale_name &lt;&lt; "\n"
                     "异常: " &lt;&lt; ex.what() &lt;&lt; '\n';
        return;
    }

    std::cout &lt;&lt; "在本地环境 " &lt;&lt; std::locale().name()
              &lt;&lt; " 中从 '" &lt;&lt; s &lt;&lt; "' 解析月名\n";
    std::istringstream str{source.data()};
    std::ios_base::iostate err = std::ios_base::goodbit;

    std::tm t;
    std::time_get&lt;char&gt; const&amp; facet = std::use_facet&lt;std::time_get&lt;char&gt;&gt;(str.getloc());
    std::istreambuf_iterator&lt;char&gt; ret = facet.get_monthname({str}, {}, str, err, &amp;t);
    str.setstate(err);
    std::istreambuf_iterator&lt;char&gt; last{};
 
    if (str)
    {
        std::cout &lt;&lt; "解析成功，月份序数是 " &lt;&lt; t.tm_wday;
 
        if (ret != last)
        {
            std::cout &lt;&lt; "，剩余内容：";
            std::copy(ret, last, std::ostreambuf_iterator&lt;char&gt;(std::cout));
        }
        else
            std::cout &lt;&lt; "，输入已全部消耗";
    }
    else
    {
        std::cout &lt;&lt; "解析失败。尚未解析的字符串：";
        std::copy(ret, last, std::ostreambuf_iterator&lt;char&gt;(std::cout));
    }
 
    std::cout &lt;&lt; '\n';
}

int main()
{
    try_get_mon("ja_JP.utf8", "2月");
    try_get_mon("th_TH.utf8", "กุมภาพันธ์");
    try_get_mon("el_GR.utf8", "Φεβ");
    try_get_mon("el_GR.utf8", "Φεβρουάριος");
    try_get_mon("en_US.utf8", "Febrile");
}
|output=
在本地环境 ja_JP.utf8 中从 '2月' 解析月名
解析成功，月份序数是 1，输入已全部消耗
在本地环境 th_TH.utf8 中从 'กุมภาพันธ์' 解析月名
解析成功，月份序数是 1，输入已全部消耗
在本地环境 el_GR.utf8 中从 'Φεβ' 解析月名
解析成功，月份序数是 1，输入已全部消耗
在本地环境 el_GR.utf8 中从 'Φεβρουάριος' 解析月名
解析成功，月份序数是 1，输入已全部消耗
在本地环境 en_US.utf8 中从 'Febrile' 解析月名
解析失败。尚未解析的字符串：ile
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=248|std=C++98|before=在抵达尾迭代器时不会设置 {{tt|eofbit}}|after=在没有读取到合法月名的情况下会设置 {{tt|eofbit}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/manip/dsc get_time}}
{{dsc end}}

{{langlinks|en|ja}}
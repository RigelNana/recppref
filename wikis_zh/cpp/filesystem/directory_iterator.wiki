{{cpp/filesystem/title|directory_iterator}}
{{cpp/filesystem/directory_iterator/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|since=c++17|1=
class directory_iterator;
}}
{{dcl end}}

{{tt|directory_iterator}} 是一种在目录的 {{ltt|cpp/filesystem/directory_entry|directory_entry}} 元素上迭代的{{named req|InputIterator}}（但不造访子目录）。迭代顺序是未指定的，但每个目录条目只被造访一次。跳过特殊路径名 {{spar|点}} 和 {{spar|点点}}。

若前移 {{tt|directory_iterator}} 越过了最终目录条目，则它变为等于默认构造的迭代器，亦称为尾迭代器。两个尾迭代器始终相等，解引用或自增尾迭代器是未定义行为。

若在创建目录迭代器之后将文件或目录删除或添加到目录树，则是否会通过迭代器观察到更改是未指定的。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|value_type}}|{{lc|std::filesystem::directory_entry}}}}
{{dsc|{{tt|difference_type}}|{{lc|std::ptrdiff_t}}}}
{{dsc|{{tt|pointer}}|{{c/core|const std::filesystem::directory_entry*}}}}
{{dsc|{{tt|reference}}|{{c/core|const std::filesystem::directory_entry&amp;}}}}
{{dsc|{{tt|iterator_category}}|{{lc|std::input_iterator_tag}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/filesystem/directory_iterator/dsc constructor}}
{{dsc inc|cpp/filesystem/directory_iterator/dsc destructor}}
{{dsc inc|cpp/filesystem/directory_iterator/dsc operator{{=}}}}
{{dsc inc|cpp/filesystem/directory_iterator/dsc operator*}}
{{dsc inc|cpp/filesystem/directory_iterator/dsc increment}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/filesystem/directory_iterator/dsc begin}}
{{dsc end}}

另外按{{named req|InputIterator}}所要求提供 {{rev inl|until=c++20|{{tt|1=operator==}} 和 {{tt|1=operator!=}}}}{{rev inl|since=c++20|{{tt|1=operator==}}}}。

{{rev inl|since=c++20|是否提供 {{tt|1=operator!=}}（因为它能从 {{tt|1=operator==}} 合成），以及}}相等运算符是成员还是非成员是未指定的。

===辅助特化===
{{dcl begin}}
{{dcl|since=c++20|1=
template&lt;&gt;
constexpr bool
    ranges::enable_borrowed_range&lt;std::filesystem::directory_iterator&gt; = true;
}}
{{dcl|since=c++20|1=
template&lt;&gt;
constexpr bool
    ranges::enable_view&lt;std::filesystem::directory_iterator&gt; = true;
}}
{{dcl end}}

这些对 {{tt|directory_iterator}} 的特化使之为 {{lconcept|borrowed_range}} 及 {{lconcept|view}}。

===注解===
{{cpp/filesystem/directory_caching_note}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;

int main()
{
    const std::filesystem::path sandbox{"sandbox"};
    std::filesystem::create_directories(sandbox/"dir1"/"dir2");
    std::ofstream{sandbox/"file1.txt"};
    std::ofstream{sandbox/"file2.txt"};
 
    std::cout &lt;&lt; "directory_iterator:\n";
    // 可以使用范围 for 循环来迭代 directory_iterator
    for (auto const&amp; dir_entry : std::filesystem::directory_iterator{sandbox}) 
        std::cout &lt;&lt; dir_entry.path() &lt;&lt; '\n';

    std::cout &lt;&lt; "\ndirectory_iterator 作为范围:\n";
    // directory_iterator 也以其他方式表现为范围
    std::ranges::for_each(
        std::filesystem::directory_iterator{sandbox},
        [](const auto&amp; dir_entry) { std::cout &lt;&lt; dir_entry &lt;&lt; '\n'; });

    std::cout &lt;&lt; "\nrecursive_directory_iterator:\n";
    for (auto const&amp; dir_entry : std::filesystem::recursive_directory_iterator{sandbox}) 
        std::cout &lt;&lt; dir_entry &lt;&lt; '\n';
 
    // 删除 sandbox 目录和其所有内容，包括子目录
    std::filesystem::remove_all(sandbox);
}
|p=true
|output=
directory_iterator:
"sandbox/file2.txt"
"sandbox/file1.txt"
"sandbox/dir1"

directory_iterator 作为范围:
"sandbox/file2.txt"
"sandbox/file1.txt"
"sandbox/dir1"

recursive_directory_iterator:
"sandbox/file2.txt"
"sandbox/file1.txt"
"sandbox/dir1"
"sandbox/dir1/dir2"
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3480|std=C++20|before={{tt|directory_iterator}} 既非 {{lconcept|borrowed_range}} 亦非 {{lconcept|view}}|after=它都是}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc recursive_directory_iterator}}
{{dsc inc|cpp/filesystem/dsc directory_options}}
{{dsc inc|cpp/filesystem/dsc directory_entry}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
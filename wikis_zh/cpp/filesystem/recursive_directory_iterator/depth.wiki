{{cpp/filesystem/recursive_directory_iterator/title|depth}}
{{cpp/filesystem/recursive_directory_iterator/navbar}}
{{dcl begin}}
{{dcl|since=c++17|1=
int depth() const;
}}
{{dcl end}}

返回从起始目录到当前被迭代目录的目录层数，即目录层级的当前深度。

起始目录拥有深度 {{math|0}}，其子目录拥有深度 {{math|1}}，以此类推。

若 {{c|*this}} 是尾迭代器则行为未定义。

===参数===
（无）

===返回值===
目录层级的当前深度。

===异常===
不抛出。

===示例===
{{example
|此示例用迭代深度计算目录树打印的缩进
|code=
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;filesystem&gt;
namespace fs = std::filesystem;

int main()
{
    fs::current_path(fs::temp_directory_path());
    fs::create_directories("sandbox/a/b/c");
    fs::create_directories("sandbox/a/b/d/e");
    std::ofstream("sandbox/a/b/file1.txt");
    fs::create_symlink("a", "sandbox/syma");
    for (auto i = fs::recursive_directory_iterator("sandbox");
         i != fs::recursive_directory_iterator();
         ++i)
    {
        std::cout &lt;&lt; std::string(i.depth() &lt;&lt; 1, ' ') &lt;&lt; *i;
        if (fs::is_symlink(i-&gt;symlink_status()))
            std::cout &lt;&lt; " -&gt; " &lt;&lt; fs::read_symlink(*i);
        std::cout &lt;&lt; '\n';
    }
    fs::remove_all("sandbox");
}
|output=
"sandbox/syma" -&gt; "a"
"sandbox/a"
  "sandbox/a/b"
    "sandbox/a/b/d"
      "sandbox/a/b/d/e"
    "sandbox/a/b/file1.txt"
    "sandbox/a/b/c"
}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/filesystem/title|status|symlink_status}}
{{cpp/filesystem/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|since=c++17|num=1|
std::filesystem::file_status status( const std::filesystem::path&amp; p );
}}
{{dcl|since=c++17|num=2|
std::filesystem::file_status status( const std::filesystem::path&amp; p,
                                     std::error_code&amp; ec ) noexcept;
}}
{{dcl|since=c++17|num=3|
std::filesystem::file_status symlink_status( const std::filesystem::path&amp; p );
}}
{{dcl|since=c++17|num=4|
std::filesystem::file_status symlink_status( const std::filesystem::path&amp; p,
                                             std::error_code&amp; ec ) noexcept;
}}
{{dcl end}}

@1,2@ 确定 {{c|p}} 所标识的文件系统对象的类型与属性，如同用 POSIX {{posix|stat}} （符号链接跟随到其目标）。在下列描述中，{{tt|prms}} 是 {{c|(m &amp; perms::mask)}} 的结果，其中 {{c|m}} 如同通过从 POSIX {{c/core|struct stat}} 采用 {{c|st_mode}} 获得，并将其转换为类型 {{c|std::filesystem::perms}}。
:* 若 {{c|p}} 是常规文件（如同以 POSIX {{c|S_ISREG}}）则返回 {{c|file_status(file_type::regular, prms)}}。
:* 若 {{c|p}} 是目录（如同以 POSIX {{c|S_ISDIR}}），则返回 {{c|file_status(file_type::directory, prms)}}。
:* 若 {{c|p}} 是块特殊文件（如同以 POSIX {{c|S_ISBLK}}），则返回 {{c|file_status(file_type::block, prms)}}。
:* 若 {{c|p}} 是字符特殊文件（如同以 POSIX {{c|S_ISCHR}}），则返回 {{c|file_status(file_type::character, prms)}}。
:* 若 {{c|p}} 是 FIFO 或管道文件（如同以 POSIX {{c|S_ISFIFO}}），则返回 {{c|file_status(file_type::fifo, prms)}}。
:* 若 {{c|p}} 是套接字（如同以 POSIX {{c|S_ISSOCK}}），则返回 {{c|file_status(file_type::socket, prms)}}。
:* 若 {{c|p}} 拥有实现定义的文件类型，则返回 {{c|file_status(file_type::A, prms)}}，其中 {{tt|A}} 是该类型的实现定义的 {{ltt|cpp/filesystem/file_type|file_type}} 常量。
:* 若 {{c|p}} 不存在，则返回 {{c|file_status(file_type::not_found)}}。
:* 若 {{c|p}} 存在但文件属性无法确定，例如因为权限缺失，则返回 {{c|file_status(file_type::unknown)}}。
:* 若在知晓 {{c|p}} 是否存在时就发生错误，则不抛出重载设置 {{c|ec}} 并返回 {{c|file_status(file_type::none)}}，而抛出重载抛出 {{tt|filesystem_error}}。
:* 否则，返回 {{c|file_status(file_type::unknown, prms)}}。
@3,4@ 同 {{v|1,2}}，但行为如同使用 POSIX {{posix|lstat}}（不跟随符号链接）：
:* 若 {{c|p}} 是符号链接，则返回 {{c|file_status(file_type::symlink)}}。

===参数===
{{par begin}}
{{par|p|要检验的路径}}
{{par|ec|不抛出重载中报告错误的输出形参}}
{{par end}}

===返回值===
文件状态（一个 {{lc|std::filesystem::file_status|filesystem::file_status}} 对象）

===异常===
{{cpp/filesystem/error handling|p|throw=1,3/2,4}}

===注解===
此函数提供的信息通常也作为目录迭代的副产物提供，而且可能为 {{lc|std::filesystem::directory_entry|filesystem::directory_entry}} 的成员函数所获取。在目录迭代期间，不需要再次调用 {{tt|status}}。

===示例===
{{cpp/filesystem/status_example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc file_status}}
{{dsc inc|cpp/filesystem/dsc status_known}}
{{dsc inc|cpp/filesystem/dsc is_block_file}}
{{dsc inc|cpp/filesystem/dsc is_character_file}}
{{dsc inc|cpp/filesystem/dsc is_directory}}
{{dsc inc|cpp/filesystem/dsc is_fifo}}
{{dsc inc|cpp/filesystem/dsc is_other}}
{{dsc inc|cpp/filesystem/dsc is_regular_file}}
{{dsc inc|cpp/filesystem/dsc is_socket}}
{{dsc inc|cpp/filesystem/dsc is_symlink}}
{{dsc inc|cpp/filesystem/dsc exists}}
{{dsc inc|cpp/filesystem/directory_entry/dsc status}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
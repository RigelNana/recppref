{{cpp/filesystem/title|create_hard_link}}
{{cpp/filesystem/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|num=1|since=c++17|1=
void create_hard_link( const std::filesystem::path&amp; target,
                       const std::filesystem::path&amp; link );
}}
{{dcl|num=2|since=c++17|1=
void create_hard_link( const std::filesystem::path&amp; target,
                       const std::filesystem::path&amp; link,
                       std::error_code&amp; ec ) noexcept;
}}
{{dcl end}}

创建硬链接 {{c|link}}，将其目标设为 {{c|target}}，如同用 POSIX [http://pubs.opengroup.org/onlinepubs/9699919799/functions/link.html {{tt|link()}}]：路径名 {{c|target}} 必须存在。

一旦创建，{{c|link}} 与 {{c|target}} 就是指代同一文件的两个逻辑名（它们[[cpp/filesystem/equivalent|等价]]）。即使原名 {{c|target}} 被删除，文件也会继续存在，并可以 {{c|link}} 访问。

===参数===
{{par begin}}
{{par | target | 要链接到的文件或目录名}}
{{par | link | 新硬链接的路径}}
{{par | ec | 不抛出重载中报告错误的输出形参 }}
{{par end}}

===返回值===
（无）

===异常===
{{cpp/filesystem/error_handling|target|link|throw=1/2}}

===注解===
一些操作系统完全不支持硬链接，或仅对常规文件支持。

某些文件系统不支持硬链接，无关乎操作系统，例如用于某些内存卡和闪存驱动器的 FAT 系统。

某些文件系统限制每个文件的链接数。

目录的硬链接通常限制仅为超级用户可用。

硬链接通常不能跨越文件系统边界。

特殊路径名点（{{c|"."}}）是到其父目录的硬链接。特殊路径名点点（{{c|".."}}）是到其父目录的父目录的硬链接。

===示例===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
namespace fs = std::filesystem;

int main()
{
    fs::create_directories("sandbox/subdir");
    std::ofstream("sandbox/a").put('a'); // 创建常规文件
    fs::create_hard_link("sandbox/a", "sandbox/b");
    fs::remove("sandbox/a");
    // 通过存活的硬链接读取原始文件
    char c = std::ifstream("sandbox/b").get();
    std::cout &lt;&lt; c &lt;&lt; '\n';
    fs::remove_all("sandbox");
}
|output=
a
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc create_symlink}}
{{dsc inc|cpp/filesystem/dsc hard_link_count}}
{{dsc end}}

{{langlinks|en|ja}}
{{cpp/filesystem/title|remove|remove_all}}
{{cpp/filesystem/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|since=c++17|num=1|1=
bool remove( const std::filesystem::path&amp; p );
}}
{{dcl|since=c++17|num=2|1=
bool remove( const std::filesystem::path&amp; p, std::error_code&amp; ec ) noexcept;
}}
{{dcl|since=c++17|num=3|
std::uintmax_t remove_all( const std::filesystem::path&amp; p );
}}
{{dcl|since=c++17|num=4|1=
std::uintmax_t remove_all( const std::filesystem::path&amp; p, std::error_code&amp; ec );
}}
{{dcl end}}

@1@ 删除路径 {{c|p}} 所标识的文件或空目录，如同用 POSIX [http://pubs.opengroup.org/onlinepubs/9699919799/functions/remove.html {{tt|remove}}]。不跟随符号链接（移除符号链接，而非其目标）。
@2@ 递归地删除 {{c|p}} 的内容（若它是目录）及其所有子目录的内容，然后删除 {{c|p}} 自身，如同重复应用 POSIX [http://pubs.opengroup.org/onlinepubs/9699919799/functions/remove.html {{tt|remove}}]。不跟随符号链接（移除符号链接，而非其目标）。

===参数===
{{par begin}}
{{par|p|要删除的路径}}
{{par|ec|不抛出重载中报告错误的输出形参}}
{{par end}}

===返回值===
@1,2@ 若文件被删除则为 {{c|true}}，若文件不存在则为 {{c|false}}。接受 {{tt|error_code&amp;}} 实参的重载在错误时返回 {{c|false}}。
@3,4@ 返回被删除的文件及目录数量（可以是零，若用以起始的 {{c|p}} 不存在）。接受 {{tt|error_code&amp;}} 实参的重载在错误时返回 {{c|static_cast&lt;std::uintmax_t&gt;(-1)}}。

===异常===
{{cpp/filesystem/error_handling|p|throw=1,3/2,4}}

===注解===
在 POSIX 系统上，此函数通常按需调用 [https://pubs.opengroup.org/onlinepubs/9699919799/functions/unlink.html {{tt|unlink}}] 和 [https://pubs.opengroup.org/onlinepubs/9699919799/functions/rmdir.html {{tt|rmdir}}]，在 Windows 上则是 [https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-deletefilew {{tt|DeleteFileW}}] 和 [https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-removedirectoryw {{tt|RemoveDirectoryW}}]。

如果 {{c|p}} 不存在，那么此函数返回 {{c/core|false}} 且不报告错误。

===示例===
{{example
|code=
#include &lt;cstdint&gt;
#include &lt;filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;

int main()
{
    namespace fs = std::filesystem;
    std::cout &lt;&lt; std::boolalpha;

    fs::path tmp{std::filesystem::temp_directory_path()};

    const auto O_O{"O_O"};
    std::ofstream{tmp / O_O} &lt;&lt; O_O; // creates file containing O_O
    std::cout &lt;&lt; "remove(): " &lt;&lt; fs::remove(tmp / O_O) &lt;&lt; '\n'; // 成功
    std::cout &lt;&lt; "remove(): " &lt;&lt; fs::remove(tmp / O_O) &lt;&lt; '\n'; // 失败

    std::filesystem::create_directories(tmp / "abcdef/example");
    const std::uintmax_t n{fs::remove_all(tmp / "abcdef")};
    std::cout &lt;&lt; "remove_all(): " &lt;&lt; n &lt;&lt; " 个文件或目录\n";
}
|p=true
|output=
remove(): true
remove(): false
remove_all(): 2 个文件或目录
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|dr=3014|wg=lwg|std=C++17|before={{tt|remove_all}} 的 {{tt|error_code}} 重载被标记为 noexcept 但能分配内存|after=移除 noexcept}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/c/dsc remove}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
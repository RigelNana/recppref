{{cpp/filesystem/directory_iterator/title|directory_iterator}}
{{cpp/filesystem/directory_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|1=
directory_iterator() noexcept;
}}
{{dcl|num=2|since=c++17|1=
explicit directory_iterator( const std::filesystem::path&amp; p );
}}
{{dcl|num=3|since=c++17|1=
directory_iterator( const std::filesystem::path&amp; p,
                    std::filesystem::directory_options options );
}}
{{dcl|num=4|since=c++17|1=
directory_iterator( const std::filesystem::path&amp; p, std::error_code&amp; ec );
}}
{{dcl|num=5|since=c++17|1=
directory_iterator( const std::filesystem::path&amp; p,
                    std::filesystem::directory_options options,
                    std::error_code&amp; ec );
}}
{{dcl|num=6|since=c++17|1=
directory_iterator( const directory_iterator&amp; other ) = default;
}}
{{dcl|num=7|since=c++17|1=
directory_iterator( directory_iterator&amp;&amp; other ) = default;
}}
{{dcl end}}

构造新的目录迭代器。

@1@ 构造尾迭代器。

@2@ 构造指代 {{tt|p}} 所标识的目录的首个目录条目的目录迭代器。若 {{tt|p}} 指代不存在的文件或不指代目录，则抛出 {{lc|std::filesystem::filesystem_error}}。

@3@ 同 {{v|2}}，但若 {{tt|options}} 中设置了 {{lc|std::filesystem::directory_options::skip_permission_denied}} 且构造遇到权限拒绝错误，则构造尾迭代器且不报告错误。

@4@ 构造指代 {{tt|p}} 所标识目录的首个目录条目的目录迭代器。若 {{tt|p}} 指代不存在的文件或不指代目录，则返回尾迭代器并设置 {{tt|ec}}。

@5@ 同 {{v|4}}，但若 {{tt|options}} 中设置了 {{lc|std::filesystem::directory_options::skip_permission_denied}} 且构造遇到权限拒绝错误，则构造尾迭代器且不报告错误。

@6@ 复制构造函数。

@7@ 移动构造函数。

===参数===
{{par begin}}
{{par| p | 目录迭代器将指代的文件系统对象的路径}}
{{par| ec | 用于无抛出重载中报告错误的输出形参}}
{{par|options|控制目录迭代器的行为的一组{{named req|BitmaskType}}选项}}
{{par|other|用以初始化目录迭代器的另一目录迭代器}}
{{par end}}

===异常===
{{cpp/filesystem/error_handling|p|throw=2,3/4,5}}

===注解===
欲在当前目录迭代，则应以 {{c|directory_iterator(".")}} 而非 {{c|directory_iterator("")}} 构造迭代器。

===示例===
{{example}}

===缺陷报告===
{{dr list begin}}
{{dr list item|dr=3013|wg=lwg|std=C++17|before={{tt|error_code}} 重载被标记为 noexcept 但能分配内存|after=移除 noexcept}}
{{dr list end}}

{{langlinks|en|es|ja|ru}}
{{cpp/filesystem/title|begin{{small|(directory_iterator)}}|end{{small|(directory_iterator)}}}}
{{cpp/filesystem/directory_iterator/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|num=1|since=c++17|
directory_iterator begin( directory_iterator iter ) noexcept;
}}
{{dcl|num=2|since=c++17|
directory_iterator end( directory_iterator ) noexcept;
}}
{{dcl end}}
@1@ 返回未更改的 {{c|iter}}。
@2@ 返回默认构造的 {{ltt|cpp/filesystem/directory_iterator|directory_iterator}}，它用作尾迭代器。忽略实参。

这些非模板函数允许将 {{tt|directory_iterator}} 用于基于范围的 for 循环{{rev inl|since=c++20|并使 {{tt|directory_iterator}} 为 {{lconcept|range}} 类型}}。

===参数===
{{par begin}}
{{par | iter |{{tt|directory_iterator}}}}
{{par end}}

===返回值===
@1@ 不更改的 {{c|iter}}。
@2@ 尾迭代器（默认构造的 {{tt|directory_iterator}}）。

===示例===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
namespace fs = std::filesystem;

int main()
{
    fs::create_directories("sandbox/a/b");
    std::ofstream("sandbox/file1.txt");
    std::ofstream("sandbox/file2.txt");
    for (auto&amp; p : fs::directory_iterator("sandbox"))
        std::cout &lt;&lt; p &lt;&lt; '\n';
    fs::remove_all("sandbox");
}
|p=true
|output=
"sandbox/a"
"sandbox/file1.txt"
"sandbox/file2.txt"
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3480|std=C++17|before={{tt|end}} 按引用接收参数|after=按值接收参数}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/filesystem/recursive_directory_iterator/dsc begin}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
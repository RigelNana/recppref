{{cpp/filesystem/title|canonical|weakly_canonical}}
{{cpp/filesystem/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|num=1|since=c++17|1=
path canonical( const std::filesystem::path&amp; p );
}}
{{dcl|num=2|since=c++17|1=
path canonical( const std::filesystem::path&amp; p,
                std::error_code&amp; ec );
}}
{{dcl|num=3|since=c++17|
path weakly_canonical( const std::filesystem::path&amp; p );
}}
{{dcl|num=4|since=c++17|
path weakly_canonical( const std::filesystem::path&amp; p,
                       std::error_code&amp; ec );
}}
{{dcl end}}

@1,2@ 转换路径 {{c|p}} 为规范绝对路径，即在其通用格式表示中没有点、点点元素或符号链接的绝对路径。若 {{c|p}} 不是绝对路径，则该函数表现为首先用 {{c|absolute(p)}} 将它转换为绝对。路径 {{c|p}} 必须存在。
@3,4@ 返回由调用 {{tt|canonical()}} 的结果以 {{c|1=operator/=}} 组合成的路径，该调用的路径实参由 {{c|p}} 中存在的前导元素（如以 {{c|status(p)}} 或 {{c|status(p, ec)}} 确定），若有这些，后随 {{c|p}} 的不存在元素组成。产生的路径为{{rlp|path|正常形式}}。

===参数===
{{par begin}}
{{par | p | 可以为绝对或相对的路径；对于 {{tt|canonical}} 必须是存在的路径}}
{{par | ec | 存储错误状态的错误码}}
{{par end}}

===返回值===
@1,2@ 解析到与 {{c|std::filesystem::absolute(p)}} 或 {{c|std::filesystem::absolute(p, ec)}} 为相同文件的绝对路径。
@3,4@ {{c|canonical(x)/y}} 形式的正常路径，其中 {{tt|x}} 是由 {{c|p}} 中存在的元素的最长前导序列组成的路径，而 {{tt|y}} 是由 {{c|p}} 中剩余尾随的不存在元素组成的路径。

===异常===
{{cpp/filesystem/error_handling|p|throw=1,3/2,4}}

===注解===
函数 {{tt|canonical()}} 模仿 POSIX [http://pubs.opengroup.org/onlinepubs/9699919799/functions/realpath.html {{tt|realpath}}]。

引入函数 {{tt|weakly_canonical()}} 以简化 {{rlpt|relative|relative()}} 的操作语义。

===示例===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;iostream&gt;

int main()
{
    /* 设立沙盒目录：
     a
     └── b
         ├── c1
         │   └── d &lt;== 当前路径
         └── c2
             └── e
    */
    auto old = std::filesystem::current_path();
    auto tmp = std::filesystem::temp_directory_path();
    std::filesystem::current_path(tmp);
    auto d1 = tmp / "a/b/c1/d";
    auto d2 = tmp / "a/b/c2/e";
    std::filesystem::create_directories(d1);
    std::filesystem::create_directories(d2);
    std::filesystem::current_path(d1);

    auto p1 = std::filesystem::path("../../c2/./e");
    auto p2 = std::filesystem::path("../no-such-file");
    std::cout &lt;&lt; "当前路径为 "
              &lt;&lt; std::filesystem::current_path() &lt;&lt; '\n'
              &lt;&lt; p1 &lt;&lt; " 的规范路径为 "
              &lt;&lt; std::filesystem::canonical(p1) &lt;&lt; '\n'
              &lt;&lt; p2 &lt;&lt; " 的弱规范路径为 "
              &lt;&lt; std::filesystem::weakly_canonical(p2) &lt;&lt; '\n';
    try
    {
        [[maybe_unused]] auto x_x = std::filesystem::canonical(p2);
        // 不会抵达此处
    }
    catch (const std::exception&amp; ex)
    {
        std::cout &lt;&lt; p2 &lt;&lt; " 的规范路径抛出了异常：\n"
                  &lt;&lt; ex.what() &lt;&lt; '\n';
    }

    // 清理
    std::filesystem::current_path(old);
    const auto count = std::filesystem::remove_all(tmp / "a");
    std::cout &lt;&lt; "删除了 " &lt;&lt; count &lt;&lt; " 个文件或目录。\n";
}
|p=true
|output=
当前路径为 "/tmp/a/b/c1/d"
"../../c2/./e" 的规范路径为 "/tmp/a/b/c2/e"
"../no-such-file" 的弱规范路径为 "/tmp/a/b/c1/no-such-file"
"../no-such-file" 的规范路径抛出了异常：
filesystem error: in canonical: No such file or directory [../no-such-file] [/tmp/a/b/c1/d]
删除了 6 个文件或目录。
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc path}}
{{dsc inc|cpp/filesystem/dsc absolute}}
{{dsc inc|cpp/filesystem/dsc relative}}
{{dsc end}}

{{langlinks|en|ja}}
{{cpp/filesystem/title|create_symlink|create_directory_symlink}}
{{cpp/filesystem/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|num=1|since=c++17|1=
void create_symlink( const std::filesystem::path&amp; target,
                     const std::filesystem::path&amp; link );
}}
{{dcl|num=2|since=c++17|1=
void create_symlink( const std::filesystem::path&amp; target,
                     const std::filesystem::path&amp; link,
                     std::error_code&amp; ec ) noexcept;
}}
{{dcl|num=3|since=c++17|1=
void create_directory_symlink( const std::filesystem::path&amp; target,
                               const std::filesystem::path&amp; link );
}}
{{dcl|num=4|since=c++17|1=
void create_directory_symlink( const std::filesystem::path&amp; target,
                               const std::filesystem::path&amp; link,
                               std::error_code&amp; ec ) noexcept;
}}
{{dcl end}}

创建符号链接 {{c|link}}，其目标设为 {{c|target}}，如同用 POSIX [http://pubs.opengroup.org/onlinepubs/9699919799/functions/symlink.html {{tt|symlink()}}]：路径名 {{c|target}} 可以非法或不存在。

一些操作系统要求符号链接的创建鉴别该链接是否到目录。可移植的代码应用 {{v|3,4}} 创建目录符号链接，而非 {{v|1,2}}，即使 POSIX 系统不作区别。

===参数===
{{par begin}}
{{par | target | 指定符号链接所至的路径，不必存在}}
{{par | link | 新符号链接的路径}}
{{par | ec | 不抛出重载中报告错误的输出形参}}
{{par end}}

===返回值===
（无）

===异常===
{{cpp/filesystem/error_handling|target|link|throw=1,3/2,4}}

===注解===
一些操作系统完全不支持符号链接，或仅对常规文件支持。

某些文件系统不支持符号链接，无关乎操作系统，例如用于某些内存卡和闪存驱动器的 FAT 系统。

类似硬链接，符号链接允许一个文件拥有多个逻辑名。硬链接的存在保证文件的存在，即使原始文件名被移除。符号链接无这种保障；实际上，{{c|target}} 参数所指名的文件不必在链接创建时存在。符号链接能跨越文件系统边界。

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;filesystem&gt;
#include &lt;iostream&gt;
namespace fs = std::filesystem;

int main()
{
    fs::create_directories("sandbox/subdir");
    fs::create_symlink("target", "sandbox/sym1");
    fs::create_directory_symlink("subdir", "sandbox/sym2");

    for (auto it = fs::directory_iterator("sandbox"); it != fs::directory_iterator(); ++it)
        if (is_symlink(it-&gt;symlink_status()))
            std::cout &lt;&lt; *it &lt;&lt; "-&gt;" &lt;&lt; read_symlink(*it) &lt;&lt; '\n';

    assert(std::filesystem::equivalent("sandbox/sym2", "sandbox/subdir"));
    fs::remove_all("sandbox");
}
|p=true
|output=
"sandbox/sym1"-&gt;"target"
"sandbox/sym2"-&gt;"subdir"
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc status}}
{{dsc inc|cpp/filesystem/dsc read_symlink}}
{{dsc inc|cpp/filesystem/dsc create_hard_link}}
{{dsc end}}

{{langlinks|en|ja}}
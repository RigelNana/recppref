{{cpp/filesystem/filesystem_error/title|filesystem_error}}
{{cpp/filesystem/filesystem_error/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|
filesystem_error( const std::string&amp; what_arg,
                  std::error_code ec );
}}
{{dcl|num=2|since=c++17|
filesystem_error( const std::string&amp; what_arg,
                  const std::filesystem::path&amp; p1,
                  std::error_code ec );
}}
{{dcl|num=3|since=c++17|
filesystem_error( const std::string&amp; what_arg,
                  const std::filesystem::path&amp; p1,
                  const std::filesystem::path&amp; p2,
                  std::error_code ec );
}}
{{dcl|num=4|since=c++17|
filesystem_error( const filesystem_error&amp; other ) noexcept;
}}
{{dcl end}}

构造新的 {{tt|filesystem_error}} 对象。

@1-3@ 设置错误码为 {{c|ec}}，可选地将导致该错误的操作中涉及的路径设为 {{c|p1}} 和 {{c|p2}}。构造后 {{rlpf|what}} 返回含有 {{c|what_arg}} 的字符串（假定它不含内嵌的空字符 &lt;!--LWG 3112 --&gt;）。若未提供一个或两个 {{tt|path}} 实参，则用空 {{tt|path}} 代替。

@4@ 复制构造函数。以 {{tt|other}} 的内容初始化内容。若 {{c|*this}} 与 {{c|other}} 均拥有动态类型 {{tt|std::filesystem_error::filesystem_error}} 则 {{c|1=std::strcmp(what(), other.what()) == 0}}。

===参数===
{{par begin}}
{{par| what_arg | 解释字符串}}
{{par| ec | 依赖特定操作系统的错误的错误码}}
{{par | p1, p2 | 引发系统错误的操作中涉及的路径}}
{{par | other | 要复制的另一 {{tt|filesystem_error}} 对象}}
{{par end}}

===注解===
因为不容许复制 {{tt|std::filesystem::filesystem_error}} 抛异常，解释字符串常被在内部存储于分离分配的引用计数存储。这也是无构造函数接收 {{tt|std::string&amp;&amp;}} 的原因：它总是要复制内容。

典型实现亦将 {{lc|path1()}} 与 {{lc|path2()}} 所引用的 {{tt|path}} 对象存储于引用计数存储。

===示例===
{{example}}

{{langlinks|en|es|ja|ru}}
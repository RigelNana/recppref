{{cpp/filesystem/path/title|path}}
{{cpp/filesystem/path/navbar}}
{{dcl begin}}
{{dcl|since=c++17|num=1|
path() noexcept;
}}
{{dcl|since=c++17|num=2|
path( const path&amp; p );
}}
{{dcl|since=c++17|num=3|
path( path&amp;&amp; p ) noexcept;
}}
{{dcl|since=c++17|num=4|1=
path( string_type&amp;&amp; source, format fmt = auto_format );
}}
{{dcl|since=c++17|num=5|1=
template&lt; class Source &gt;
path( const Source&amp; source, format fmt = auto_format );
}}
{{dcl|since=c++17|num=6|1=
template&lt; class InputIt &gt;
path( InputIt first, InputIt last, format fmt = auto_format );
}}
{{dcl|since=c++17|num=7|1=
template&lt; class Source &gt;
path( const Source&amp; source, const std::locale&amp; loc, format fmt = auto_format );
}}
{{dcl|since=c++17|num=8|1=
template&lt; class InputIt &gt;
path( InputIt first, InputIt last, const std::locale&amp; loc, format fmt = auto_format );
}}
{{dcl end}}

构造新的 {{tt|path}} 对象。

@1@ 构造空路径。
@2@ 复制构造函数。构造一个路径，其原生与通用格式的路径名均与 {{c|p}} 相同
@3@ 移动构造函数。构造一个路径，其原生与通用格式的路径名均与 {{c|p}} 相同，{{c|p}} 留在合法而未指定的状态。
@4-6@ 从 {{c|source}} {{v|4,5}} 提供的字符序列构造路径（按 {{c|fmt}} 指定的格式转译），源可以是一个指向空终值字符/宽字符序列的指针或输入迭代器，{{lc|std::basic_string}} 或 {{lc|std::basic_string_view}}，或作为一对输入迭代器 [{{c|first}}, {{c|last}}) 提供 {{v|6}}。允许任何字符类型 {{c|char}}{{rev inl|since=c++20|、{{c|char8_t}}}}、{{c|char16_t}}、{{c|char32_t}}、{{c|wchar_t}}，而且原生字符集的转换方法依赖于 {{c|source}} 所用的字符类型
:*若源字符类型是 {{c|char}}，则源的编码假定为原生窄字符编码（故在 POSIX 系统上不用转换）
{{rrev|since=c++20|
:*若源字符类型是 {{c|char8_t}}，则使用从 UTF-8 到原生文件系统编码的转换。
}}
:*若源字符类型是 {{c|char16_t}}，则使用从 UTF-16 到原生文件系统编码的转换。
:*若源字符类型是 {{c|char32_t}}，则使用从 UTF-32 到原生文件系统编码的转换。
:*若源字符类型是 {{c|wchar_t}}，则输入被假定为原生宽字符编码（故在 Windos 上不用转换）
@7,8@ 从 {{c|source}} {{v|7}} 提供的从字符序列构造路径（按 {{c|fmt}} 指定的格式转译），源可以是指向空终止字符序列的指针或输入迭代器，{{lc|std::string}}，{{lc|std::basic_string_view}}，或由一对输入迭代器 [{{c|first}}, {{c|last}}) {{v|8}} 所代表。仅允许的字符类型是 {{c|char}}。用 {{c|loc}} 进行字符编码转换。若 {{c|value_type}} 是 {{c|wchar_t}}，则使用 {{c|loc}} 的 {{c|std::codecvt&lt;wchar_t, char, std::mbstate_t&gt;}} 平面从宽字符转换。否则，首先用 {{c|std::codecvt&lt;wchar_t, char, std::mbstate_t&gt;}} 平面转换到宽字符，再用 {{c|loc}} 的 {{c|std::codecvt&lt;wchar_t,value_type&gt;}} 平面转换到文件系统原生字符类型。

{{cpp/filesystem/path/param source constraints|5|7}}

===参数===
{{par begin}}
{{par | p | 要复制的路径}}
{{par | source | {{lc|std::basic_string}}，{{lc|std::basic_string_view}}，指向空终止字符串的指针，或拥有字符值类型并指向空终止字符序列的的输入迭代器（对于重载 {{v|7}} 字符类型必须是 {{c|char}}）}}
{{par | first, last | 一对指定字符序列的{{named req|InputIterator}}}}
{{par | fmt | {{ltt|cpp/filesystem/path/format|path::format}} 类型的枚举项，指定路径名格式如何转译}}
{{par | loc | 定义编码转换所用的本地环境}}
{{par hreq}}
{{par req named | InputIt | InputIterator}}
{{par req | {{tt|InputIt}} 的值类型必须是字符类型 {{c|char}}{{rev inl|since=c++20|、{{c|char8_t}}}}、{{c|wchar_t}}、{{c|char16_t}} 及 {{c|char32_t}} 之一，以使用重载 {{v|6}}。}}
{{par req |  {{tt|InputIt}} 的值类型必须是 {{c|char}}，以使用 {{v|8}}。}}
{{par end}}

===异常===
@2,4-8@ {{cpp/impldef exception item}}

===注解===
{{rrev multi|until1=c++20|rev1=
关于从 Unicode 字符串生成可移植路径名，见 {{rlpt|u8path}}。
|rev2=
源为 {{c|char8_t}} 的序列时，{{tt|path}} 构造函数支持从 UTF-8 字符串创建。
}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;filesystem&gt;
namespace fs = std::filesystem;

int main()
{
    fs::path p1 = "/usr/lib/sendmail.cf"; // 可移植格式
    fs::path p2 = "C:\\users\\abcdef\\AppData\\Local\\Temp\\"; // 原生格式
    fs::path p3 = U"D:/猫.txt"; // UTF-32 string
    fs::path p4 = u8"~/狗.txt"; // UTF-8 string

    std::cout &lt;&lt; "p1 = " &lt;&lt; p1 &lt;&lt; '\n'
              &lt;&lt; "p2 = " &lt;&lt; p2 &lt;&lt; '\n'
              &lt;&lt; "p3 = " &lt;&lt; p3 &lt;&lt; '\n'
              &lt;&lt; "p4 = " &lt;&lt; p4 &lt;&lt; '\n';
}
|output=
p1 = "/usr/lib/sendmail.cf"
p2 = "C:\users\abcdef\AppData\Local\Temp\"
p3 = "D:/猫.txt"
p4 = "~/狗.txt"
}}

===缺陷报告===
{{dr list begin}}
{{dr list item | wg=lwg | dr=3244 | std=C++17 | before=缺失 {{tt|Source}} 不能为 {{tt|path}} 的制约 | after=已添加 }}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/filesystem/path/dsc u8path}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
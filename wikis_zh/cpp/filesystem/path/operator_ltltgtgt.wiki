{{title|operator&lt;&lt;,&gt;&gt;{{small|(std::filesystem::path)}}}}
{{cpp/filesystem/path/navbar}}
{{dcl begin}}
{{dcla|num=1|since=c++17|1=
template&lt; class CharT, class Traits &gt;
friend std::basic_ostream&lt;CharT,Traits&gt;&amp;
    operator&lt;&lt;( std::basic_ostream&lt;CharT,Traits&gt;&amp; os, const path&amp; p );
}}
{{dcla|num=2|since=c++17|1=
template&lt; class CharT, class Traits &gt;
friend std::basic_istream&lt;CharT,Traits&gt;&amp;
    operator&gt;&gt;( std::basic_istream&lt;CharT,Traits&gt;&amp; is, path&amp; p );
}}
{{dcl end}}

进行路径 {{c|p}} 上的流输入或输出。使用 {{c|std::quoted}}，使得之后从流输入运算符读取时空格不导致截断。

{{cpp/hidden friend|std::filesystem::path|tmpl=yes|plural=yes}}这在 {{c|using namespace std::filesystem;}} ''using 指令''存在时阻止不想要的转换。

===参数===
{{par begin}}
{{par | os | 要进行输出的流}}
{{par | is | 要进行输入的流}}
{{par | p | 要插入或提取的路径}}
{{par end}}

===返回值===
@1@ {{c|os}}
@2@ {{c|is}}

{{cpp/impldef exception}}

===可能的实现===
{{eq impl
|title1=operator&lt;&lt;|ver1=1|1=
template&lt;class CharT, class Traits&gt;
friend std::basic_ostream&lt;CharT,Traits&gt;&amp;
    operator&lt;&lt;(std::basic_ostream&lt;CharT,Traits&gt;&amp; os, const path&amp; p)
{
    os &lt;&lt; std::quoted(p.string&lt;CharT,Traits&gt;());
    return os;
}
|title2=operator&gt;&gt;|ver2=2|2=
template&lt;class CharT, class Traits&gt;
friend std::basic_istream&lt;CharT,Traits&gt;&amp;
    operator&gt;&gt;(std::basic_istream&lt;CharT,Traits&gt;&amp; is, path&amp; p)
{
    std::basic_string&lt;CharT, Traits&gt; t;
    is &gt;&gt; std::quoted(t);
    p = t;
    return is;
}
}}

===示例===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; std::filesystem::current_path() &lt;&lt; '\n';
    std::cout &lt;&lt; std::filesystem::temp_directory_path() &lt;&lt; '\n';
}
|p=true
|output=
"/home/user"
"/tmp"
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|dr=2989|wg=lwg|std=C++17|before=允许在 ''using 指令''存在时插入任何能转换到 {{tt|path}} 的表达式|after=使之为隐藏的友元}}
{{dr list end}}

{{langlinks|de|en|es|ja|ru}}
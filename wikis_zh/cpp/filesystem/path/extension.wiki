{{cpp/filesystem/path/title|extension}}
{{cpp/filesystem/path/navbar}}
{{dcl begin}}
{{dcl|since=c++17|1=
path extension() const;
}}
{{dcl end}}

返回 {{c|*this}} 的通用格式视图的文件名的扩展名。

若通用格式路径的 {{ltf|cpp/filesystem/path/filename}} 组分含有句点（{{ttb|.}}），且不是特殊文件系统元素 {{spar|点}} 或 {{spar|点点}} 之一，则''扩展名''是从最右的句点开始（含句点）到路径名尾的子字符串。

若文件名的首个字符是句号，则忽略该句号（类似 ".profile" 的文件名不被当做扩展名）。

若路径名是 {{tt|.}} 或 {{tt|..}}，或若 {{ltf|cpp/filesystem/path/filename}} 不含有 {{tt|.}} 字符，则返回空路径。

实现可以为添加了附加元素到扩展名的文件系统定义附加行为（例如作为替代数据流或带分区数据集的名称）。

===参数===
（无）

===返回值===
当前路径名的扩展名，或若无扩展名则为空路径。

{{cpp/impldef exception}}

===注解===
此函数返回的扩展名包含句点，令程序可以分辨以句点结束的文件（函数返回 {{c|"."}}）和无扩展名的文件（函数返回 {{c|""}}）。

在非 POSIX 系统上，可能有 {{c|1=p.stem() + p.extension() != p.filename()}}，即使通用格式版本是相同的。

===示例===
{{example 
|code=
#include &lt;filesystem&gt;
#include &lt;iostream&gt;
namespace fs = std::filesystem;

int main()
{
    std::cout &lt;&lt; fs::path("/foo/bar.txt").extension() &lt;&lt; '\n'
              &lt;&lt; fs::path("/foo/bar.").extension() &lt;&lt; '\n'
              &lt;&lt; fs::path("/foo/bar").extension() &lt;&lt; '\n'
              &lt;&lt; fs::path("/foo/bar.txt/bar.cc").extension() &lt;&lt; '\n'
              &lt;&lt; fs::path("/foo/bar.txt/bar.").extension() &lt;&lt; '\n'
              &lt;&lt; fs::path("/foo/bar.txt/bar").extension() &lt;&lt; '\n'
              &lt;&lt; fs::path("/foo/.").extension() &lt;&lt; '\n'
              &lt;&lt; fs::path("/foo/..").extension() &lt;&lt; '\n'
              &lt;&lt; fs::path("/foo/.hidden").extension() &lt;&lt; '\n'
              &lt;&lt; fs::path("/foo/..bar").extension() &lt;&lt; '\n';
}
|output=
".txt"
"."
""
".cc"
"."
""
""
""
""
".bar"
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/filesystem/path/dsc filename}}
{{dsc inc|cpp/filesystem/path/dsc stem}}
{{dsc inc|cpp/filesystem/path/dsc replace_extension}}
{{dsc mem fun|cpp/filesystem/path/has_path|title=has_extension|检查对应路径元素是否非空}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
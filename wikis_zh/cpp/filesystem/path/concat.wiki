{{cpp/filesystem/path/title|concat|operator+{{=}}}}
{{cpp/filesystem/path/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|1=
path&amp; operator+=( const path&amp; p );
}}
{{dcl|num=2|since=c++17|1=
path&amp; operator+=( const string_type&amp; str );
path&amp; operator+=( std::basic_string_view&lt;value_type&gt; str );
}}
{{dcl|num=3|since=c++17|1=
path&amp; operator+=( const value_type* ptr );
}}
{{dcl|num=4|since=c++17|1=
path&amp; operator+=( value_type x );
}}
{{dcl|num=5|since=c++17|1=
template&lt; class CharT &gt;
path&amp; operator+=( CharT x );
}}
{{dcl|num=6|since=c++17|1=
template&lt; class Source &gt;
path&amp; operator+=( const Source&amp; source );
}}
{{dcl|num=7|since=c++17|1=
template&lt; class Source &gt;
path&amp; concat( const Source&amp; source );
}}
{{dcl|num=8|since=c++17|1=
template&lt; class InputIt &gt;
path&amp; concat( InputIt first, InputIt last );
}}
{{dcl end}}

连接当前路径与实参。

@1-3,6,7@ 后附 {{c|path(other).native()}} 到以原生格式存储于 {{c|*this}} 的路径名。这会直接操纵 {{c|native()}} 的值，并且可能无法在操作系统间移植。
@4,5@ 同 {{c|1=return *this += std::basic_string_view(&amp;x, 1);}}。
@8@ 同 {{c|1=return *this += path(first, last);}}。

{{cpp/filesystem/path/param source constraints|6|7}}

===参数===
{{par begin}}
{{par | p | 要附加的路径}}
{{par | str | 要附加的字符串或字符串视图}}
{{par | ptr | 指向要附加的空终止字符串起始的指针}}
{{par | x | 要附加的单个字符}}
{{par | source | {{lc|std::basic_string}}，{{lc|std::basic_string_view}}，空终止多字符字符串，或指向空终止多字符序列的输入迭代器，它表示路径名（以可执行或原生格式）}}
{{par | first, last| 一对指定代表路径名的字符序列的{{named req|InputIterator}}}}
{{par hreq}}
{{par req named | InputIt | InputIterator}}
{{par req | {{tt|InputIt}} 的 value_type 必须是编码字符类型（{{c|char}}、{{c|wchar_t}}、{{c|char16_t}} 及 {{c|char32_t}}）之一}}
{{par req | {{tt|CharT}} 必须是编码字符类型（{{c|char}}、{{c|wchar_t}}、{{c|char16_t}} 及 {{c|char32_t}}）之一}}
{{par end}}

===返回值===
{{c|*this}}

===异常===
若内存分配失败则可能抛出 {{c|std::bad_alloc}}。

===注解===
不同于 {{lc|append()}} 或 {{lc|operator/{{=}}}}，此函数决不放入附加的分隔符。

===示例===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::filesystem::path p1; // 空路径
    p1 += "var"; // 不插入分隔符
    std::cout &lt;&lt; R"("" + "var" --&gt; )" &lt;&lt; p1 &lt;&lt; '\n';
    p1 += "lib"; // 不插入分隔符
    std::cout &lt;&lt; R"("var" + "lib" --&gt; )" &lt;&lt; p1 &lt;&lt; '\n';
    auto str = std::string{"1234567"};
    p1.concat(std::begin(str) + 3, std::end(str) - 1);
    std::cout &lt;&lt; "p1.concat --&gt; " &lt;&lt; p1 &lt;&lt; '\n';
}
|output=
"" + "var" --&gt; "var"
"var" + "lib" --&gt; "varlib"
p1.concat --&gt; "varlib456"
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|dr=3055|wg=lwg|std=C++17|before=连接单个字符的规定为谬构|after=使之为良构}}
{{dr list item|dr=3244|wg=lwg|std=C++17|before=缺失 {{tt|Source}} 不能为 {{tt|path}} 的制约|after=已添加}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/filesystem/path/dsc append}}
{{dsc inc|cpp/filesystem/path/dsc operator/}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/filesystem/title|operator/{{small|(std::filesystem::path)}}}}
{{cpp/filesystem/path/navbar}}
{{ddcl|since=c++17|
friend path operator/( const path&amp; lhs, const path&amp; rhs );
}}

若适合（细节见 {{ltt|cpp/filesystem/path/append|operator/{{=}}}}），则以偏好目录分隔符连接两个路径组分。

等效于返回 {{c|1=path(lhs) /= rhs}}。

{{cpp/hidden friend|std::filesystem::path}}这阻止存在 {{c|using namespace std::filesystem;}} ''using 指令''情况下的不想要的转换。

===参数===
{{par begin}}
{{par | lhs, rhs | 要连接的路径}}
{{par end}}

===返回值===
路径连接的结果。

===示例===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;iostream&gt;

int main()
{
#   if defined(_WIN32) // see e.g. stackoverflow.com/questions/142508

    std::filesystem::path p = "C:";

    std::cout &lt;&lt; "\"C:\" / \"Users\" / \"batman\" == " &lt;&lt; p / "Users" / "batman" &lt;&lt; '\n';

#   else // __linux__ etc

    std::filesystem::path p = "/home";

    std::cout &lt;&lt; "\"/home\" / \"tux\" / \".fonts\" == " &lt;&lt; p / "tux" / ".fonts" &lt;&lt; '\n';

#   endif
}
|p=true
|output=
Windows specific output:
"C:" / "Users" / "batman" == "C:Users\\batman"

Linux etc specific output:
"/home" / "tux" / ".fonts" == "/home/tux/.fonts"
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|dr=3065|wg=lwg|std=C++17|before=允许存在 ''using 指令''的情况下连接一切可转换成 {{tt|path}} 的值|after=使之为隐藏友元}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/filesystem/path/dsc append}}
{{dsc end}}

{{langlinks|de|en|es|ru|ja}}
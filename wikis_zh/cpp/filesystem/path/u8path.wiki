{{cpp/filesystem/title|u8path}}
{{cpp/filesystem/path/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|num=1|since=c++17|deprecated=c++20|1=
template&lt; class Source &gt;
std::filesystem::path u8path( const Source&amp; source );
}}
{{dcl|num=2|since=c++17|deprecated=c++20|1=
template&lt; class InputIt &gt;
std::filesystem::path u8path( InputIt first, InputIt last );
}}
{{dcl end}}

从 UTF-8 编码的 {{c|char}}{{rev inl|since=c++20| 或 {{c|char8_t}}}} 序列构造路径 {{tt|p}}，源作为 {{lc|std::string}} 或 {{lc|std::string_view}}，或空终止多字节字符串，或作为一对迭代器 [first, last) 提供。

* 若 {{tt|path::value_type}} 是 {{c|char}} 且原生编码为 UTF-8，则如同以 {{c|path(source)}} 或 {{c|path(first, last)}} 直接构造路径。这是使用 Unicode 的 POSIX 系统的典型情况，例如 Linux。
* 否则，若 {{tt|path::value_type}} 是 {{c|wchar_t}} 且原生编码是 UTF-16 （这是 Windows 上的情况），或若 {{tt|path::value_type}} 是 {{c|char16_t}}（原生编码保证为 UTF-16）或 {{c|char32_t}}（原生编码保证为 UTF-32），则首先转换 UTF-8 字符序列为 {{tt|path::string_type}} 类型的临时字符串 {{tt|tmp}}，然后如同以 {{c|path(tmp)}} 构造新路径。
* 否则（对于非 UTF-8 窄字符编码与非 UTF-16 {{c|wchar_t}}），首先转换 UTF-8 字符序列到 {{c|std::u32string}} 类型的临时 UTF-32 编码字符串 {{tt|tmp}}，然后如同用 {{c|path(tmp)}} 构造新路径（使用非 Unicode 多字节或单字节编码的文件系统的 POSIX 系统上会采用此路径）。

===参数===
{{par begin}}
{{par | source | UTF-8 编码的 {{lc|std::string}}、{{lc|std::string_view}}，指向空终止多字节字符串的指针，或指向空终止多字节字符串的以 char 为值类型的输入迭代器}}
{{par | first, last | 一对指定 UTF-8 编码字符序列的{{named req|InputIterator}}}}
{{par hreq}}
{{par req named | InputIt | InputIterator}}
{{par req | {{tt|Source}} 或 {{tt|InputIt}} 的值类型必须是 {{c|char}}{{rev inl|since=c++20| 或 {{c|char8_t}}}}。}}
{{par end}}

===返回值===
将输入字符串从 UTF-8 转换到文件系统原生字符编码后，构造的路径。

===异常===
若内存分配失败则可能抛出 {{lc|std::bad_alloc}}。

===注解===
在原生路径格式异于通用路径格式的系统上（Windows 与 POSIX 均不是此种系统的例子），若此函数的参数使用通用格式，则它会被转换成原生格式。

===示例===
{{cpp/filesystem/path/string_example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc path}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
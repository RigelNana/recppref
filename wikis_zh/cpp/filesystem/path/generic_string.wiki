{{cpp/filesystem/path/title|generic_string|generic_wstring|generic_u8string|generic_u16string|generic_u32string}}
{{cpp/filesystem/path/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|1=
template&lt; class CharT, class Traits = std::char_traits&lt;CharT&gt;,
          class Alloc = std::allocator&lt;CharT&gt; &gt;
std::basic_string&lt;CharT,Traits,Alloc&gt;
    generic_string( const Alloc&amp; a = Alloc() ) const;
}}
{{dcl rev begin|num=2|since=c++17}}
{{dcl|
std::string generic_string() const;
}}
{{dcl|
std::wstring generic_wstring() const;
}}
{{dcl|
std::u16string generic_u16string() const;
}}
{{dcl|
std::u32string generic_u32string() const;
}}
{{dcl rev end}}
{{dcl rev begin|num=3}}
{{dcl|since=c++17|until=c++20|
std::string generic_u8string() const;
}}
{{dcl|since=c++20|
std::u8string generic_u8string() const;
}}
{{dcl rev end}}
{{dcl end}}

返回通用路径名格式的内部路径名，转换到指定的字符串格式。若存在转换，则按下列方式进行：
{{include|cpp/filesystem/path/encoding_rules}}

以 {{tt|/}} 字符作为目录分隔符。

@1@ 所有内存分配由 {{c|a}} 进行。

@3@ {{tt|u8string()}} 情形下结果的编码始终是 UTF-8。

===参数===
{{par begin}}
{{par | a | 构造字符串用的分配器}}
{{par hreq}}
{{par req | {{tt|CharT}} 必须是编码字符类型之一（{{c|char}}、{{c|wchar_t}}{{rev inl|since=c++20|、{{c|char8_t}}}}、{{c|char16_t}} 及 {{c|char32_t}}）。}}
{{par end}}

===返回值===
通用路径名格式的内部路径名，转换到指定的字符串类型。

{{cpp/impldef exception}}

===示例===
{{example
|code=
#include &lt;cstddef&gt;
#include &lt;filesystem&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;span&gt;
#include &lt;string_view&gt;

void print(std::string_view rem, auto const&amp; str)
{
    std::cout &lt;&lt; rem &lt;&lt; std::hex &lt;&lt; std::uppercase &lt;&lt; std::setfill('0');
    for (const auto b : std::as_bytes(std::span{str}))
        std::cout &lt;&lt; std::setw(2) &lt;&lt; std::to_integer&lt;unsigned&gt;(b) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::filesystem::path p{"/家/屋"};
    std::cout &lt;&lt; p &lt;&lt; '\n';

    print("string    : ", p.generic_string());
    print("u8string  : ", p.generic_u8string());
    print("u16string : ", p.generic_u16string());
    print("u32string : ", p.generic_u32string());
    print("wstring   : ", p.generic_wstring());
}
|p=true
|output=
"/家/屋"
string    : 2F E5 AE B6 2F E5 B1 8B
u8string  : 2F E5 AE B6 2F E5 B1 8B
u16string : 2F 00 B6 5B 2F 00 4B 5C
u32string : 2F 00 00 00 B6 5B 00 00 2F 00 00 00 4B 5C 00 00
wstring   : 2F 00 00 00 B6 5B 00 00 2F 00 00 00 4B 5C 00 00
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/filesystem/path/dsc string}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
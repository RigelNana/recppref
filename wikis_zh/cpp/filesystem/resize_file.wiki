{{cpp/filesystem/title|resize_file}}
{{cpp/filesystem/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|num=1|since=c++17|1=
void resize_file( const std::filesystem::path&amp; p,
                  std::uintmax_t new_size );
}}
{{dcl|num=2|since=c++17|1=
void resize_file( const std::filesystem::path&amp; p,
                  std::uintmax_t new_size,
                  std::error_code&amp; ec ) noexcept;
}}
{{dcl end}}

更改 {{c|p}} 所指名的的常规文件大小，如同用 POSIX [http://pubs.opengroup.org/onlinepubs/9699919799/functions/truncate.html {{tt|truncate}}]：若先前的文件大小大于 {{c|new_size}}，则文件的剩余部分被舍弃。若先前的文件大小小于 {{c|new_size}}，则增加文件大小，而且新区域如同以零填充。

===参数===
{{par begin}}
{{par | p | 要重设大小的路径}}
{{par | new_size | 文件将会拥有的大小}}
{{par | ec | 不抛出重载中报告错误的输出形参}}
{{par end}}

===返回值===
（无）

===异常===
{{cpp/filesystem/error handling|p|throw=1/2}}

===注解===
在支持稀疏文件的系统上，增加文件大小并不会增加其在文件系统上占用的空间：空间分配仅当非零字节写入文件时发生。

===示例===
{{example|演示在空闲空间创建稀疏文件的效果。
|code=
#include &lt;filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;

int main()
{
    auto p = std::filesystem::temp_directory_path() / "example.bin";
    std::ofstream{p}.put('a');
    std::cout.imbue(std::locale{"en_US.UTF8"});
    std::cout &lt;&lt; "文件大小: " &lt;&lt; std::filesystem::file_size(p) &lt;&lt; '\n'
              &lt;&lt; "空闲空间: " &lt;&lt; std::filesystem::space(p).free &lt;&lt; '\n';
    std::filesystem::resize_file(p, 64*1024); // resize to 64 KB
    std::cout &lt;&lt; "文件大小: " &lt;&lt; std::filesystem::file_size(p) &lt;&lt; '\n'
              &lt;&lt; "空闲空间: " &lt;&lt; std::filesystem::space(p).free &lt;&lt; '\n';
    std::filesystem::remove(p);
}
|p=true
|output=
文件大小: 1
空闲空间: 42,954,108,928
文件大小: 65,536
空闲空间: 42,954,108,928
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc file_size}}
{{dsc inc|cpp/filesystem/dsc space}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/filesystem/title|copy_file}}
{{cpp/filesystem/navbar}}
{{dcl begin}}
{{dcl header|filesystem}}
{{dcl|num=1|since=c++17|1=
bool copy_file( const std::filesystem::path&amp; from,
                const std::filesystem::path&amp; to );
}}
{{dcl|num=2|since=c++17|1=
bool copy_file( const std::filesystem::path&amp; from,
                const std::filesystem::path&amp; to,
                std::error_code&amp; ec );
}}
{{dcl|num=3|since=c++17|1=
bool copy_file( const std::filesystem::path&amp; from,
                const std::filesystem::path&amp; to,
                std::filesystem::copy_options options );
}}
{{dcl|num=4|since=c++17|1=
bool copy_file( const std::filesystem::path&amp; from,
                const std::filesystem::path&amp; to,
                std::filesystem::copy_options options,
                std::error_code&amp; ec );
}}
{{dcl end}}

@1,2@ 默认，等价于以 {{tt|copy_options::none}} 为 {{c|options}} 调用 {{v|3,4}}。 
@3,4@ 从 {{c|from}} 到 {{c|to}} 复制单个文件，使用 {{c|options}} 所指示的复制选项。若 {{c|options}} 中存在任一 {{rlp|copy_options}} 选项组中多于一个的选项，则行为未定义（即使在无关乎 {{lc|std::filesystem::copy_file|filesystem::copy_file}} 的组中）。
* 若 {{lc|std::filesystem::is_regular_file|!filesystem::is_regular_file(from)}}（因为源文件不存在或它不是常规文件），则报告错误。
* 否则，若目标文件不存在，则
:* 复制 {{c|from}} 所解析到的文件的内容及属性到 {{c|to}} 所解析到者（跟随符号链接）
* 否则，若目标文件已存在……
:* 若下列之一为真则报告错误：
::* {{c|to}} 与 {{c|from}} 相同，以 {{lc|std::filesystem::equivalent|filesystem::equivalent(from, to)}} 确定；
::* {{c|to}} 不是常规文件，以 {{lc|std::filesystem::is_regular_file|!filesystem::is_regular_file(to)}} 确定；
::* {{c|options}} 中未设置任何 {{lc|std::filesystem::copy_file|filesystem::copy_file}} 控制选项。
:* 否则，若 {{tt|copy_options::skip_existing}} 设置于 {{c|options}}，则不做任何事
:* 否则，若 {{tt|copy_options::overwrite_existing}} 设置于 {{c|options}}，则复制 {{c|from}} 所解析到的文件的内容及属性到 {{c|to}} 所解析到的文件。
:* 否则，若 {{tt|copy_options::update_existing}} 设置于 {{tt|options}}，则仅若 {{c|from}} 按 {{lc|std::filesystem::last_write_time|filesystem::last_write_time()}} 定义比 {{c|to}} 更新才复制文件。

当发生错误时，不抛出重载返回 {{c|false}}。

===参数===
{{par begin}}
{{par | from | 源文件的路径}}
{{par | to | 目标文件的路径}}
{{par | ec | 不抛出重载中报告错误的输出形参 }}
{{par end}}

===返回值===
若文件被复制则返回 {{c|true}}，否则返回 {{c|false}}。

===异常===
{{cpp/filesystem/error_handling|from|to|throw=1,3/2,4}}

===注解===
函数最多引入一次对 {{lc|std::filesystem::status|filesystem::status(to)}} 的直接或间接调用（均用于确定文件是否存在，及对于 {{tt|filesystem::copy_options::update_existing}} 选项，确定其最后写入时间）。

当 {{lc|std::filesystem::copy_file|filesystem::copy_file}} 被用于复制目录时报告错误：用 {{lc|std::filesystem::copy|filesystem::copy}} 复制它们。

{{lc|std::filesystem::copy_file|filesystem::copy_file}} 跟随符号链接：为其调用 {{lc|std::filesystem::copy_symlink|filesystem::copy_symlink}} 或以 {{tt|filesystem::copy_options::copy_symlinks}} 调用 {{ltt|cpp/filesystem/copy|copy}}。

===示例===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
namespace fs = std::filesystem;

int main()
{
    fs::create_directory("sandbox");
    std::ofstream("sandbox/file1.txt").put('a');

    fs::copy_file("sandbox/file1.txt", "sandbox/file2.txt");

    // 现在 sandbox 中有两个文件：
    std::cout &lt;&lt; "file1.txt holds: "
              &lt;&lt; std::ifstream("sandbox/file1.txt").rdbuf() &lt;&lt; '\n';
    std::cout &lt;&lt; "file2.txt holds: "
              &lt;&lt; std::ifstream("sandbox/file2.txt").rdbuf() &lt;&lt; '\n';

    // 复制目录失败
    fs::create_directory("sandbox/abc");
    try
    {
        fs::copy_file("sandbox/abc", "sandbox/def");
    }
    catch (fs::filesystem_error&amp; e)
    {
        std::cout &lt;&lt; "Could not copy sandbox/abc: " &lt;&lt; e.what() &lt;&lt; '\n';
    }
    fs::remove_all("sandbox");
}
|p=true
|output=
file1.txt holds : a
file2.txt holds : a
Could not copy sandbox/abc: copy_file: Is a directory: "sandbox/abc", "sandbox/def"
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|dr=3014|wg=lwg|std=C++17|before={{tt|error_code}} 重载被标记为 noexcept 但能分配内存|after=移除 noexcept}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc copy_options}}
{{dsc inc|cpp/filesystem/dsc copy_symlink}}
{{dsc inc|cpp/filesystem/dsc copy}}
{{dsc end}}

{{langlinks|en|ja}}
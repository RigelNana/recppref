{{cpp/filesystem/directory_entry/title|is_regular_file}}
{{cpp/filesystem/directory_entry/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|
bool is_regular_file() const;
}}
{{dcl|num=2|since=c++17|
bool is_regular_file( std::error_code&amp; ec ) const noexcept;
}}
{{dcl end}}

检查所指的对象是否为常规文件。各等效于返回：
@1@ {{c|std::filesystem::is_regular_file(status())}}。
@2@ {{c|std::filesystem::is_regular_file(status(ec))}}。

===参数===
{{par begin}}
{{par | ec | 不抛出重载中报告错误的输出形参 }}
{{par end}}

===返回值===
若所指代文件系统对象为常规文件，则为 {{c|true}}，否则为 {{c|false}}。

===异常===
{{cpp/filesystem/error_handling|p|throw=1/2}}

===示例===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

namespace fs = std::filesystem;

int main(int argc, const char* argv[])
{
    // 打印出目录 'dir' 中的所有常规文件。
    try
    {
        const auto dir{argc == 2 ? fs::path{argv[1]} : fs::current_path()};

        std::cout &lt;&lt; "当前目录: " &lt;&lt; dir &lt;&lt; '\n'
                  &lt;&lt; std::string(40, '-') &lt;&lt; '\n';

        for (fs::directory_entry const&amp; entry : fs::directory_iterator(dir))
            if (entry.is_regular_file())
                std::cout &lt;&lt; entry.path().filename() &lt;&lt; '\n';
    }
    catch(const fs::filesystem_error&amp; e)
    {
        std::cout &lt;&lt; e.what() &lt;&lt; '\n';
    }
}
|p=true
|output=
当前目录: "/tmp/1588616534.9884143"
----------------------------------------
"main.cpp"
"a.out"
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc is_regular_file}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/filesystem/directory_entry/title|is_directory}}
{{cpp/filesystem/directory_entry/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|1=
bool is_directory() const;
}}
{{dcl|num=2|since=c++17|1=
bool is_directory( std::error_code&amp; ec ) const noexcept;
}}
{{dcl end}}

检查所指对象是否目录。各自等效于返回：
@1@ {{c|std::filesystem::is_directory(status())}}，
@2@ {{c|std::filesystem::is_directory(status(ec))}}。

===参数===
{{par begin}}
{{par | ec | 不抛出重载中报告错误的输出形参 }}
{{par end}}

===返回值===
若所指代文件系统对象是目录则为 {{c|true}}，否则为 {{c|false}}。

===异常===
{{cpp/filesystem/error_handling|p|throw=1/2}}

===示例===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

namespace fs = std::filesystem;

void check_directory(fs::directory_entry const&amp; d, std::string_view rem = "")
{
    std::cout &lt;&lt; "is_directory(" &lt;&lt; d &lt;&lt; "): " &lt;&lt; d.is_directory() &lt;&lt; rem &lt;&lt; '\n';
}

int main()
{
    fs::directory_entry d1(".");
    fs::directory_entry d2("file.txt");
    fs::directory_entry d3("new_dir");

    std::cout &lt;&lt; std::boolalpha;

    check_directory(d1);
    check_directory(d2);
    check_directory(d3, " (尚未创建).");

    std::filesystem::create_directory("new_dir");

    check_directory(d3, " (refresh 前).");
    d3.refresh();
    check_directory(d3, " (refresh 后).");
}
|p=true
|output=
is_directory("."): true
is_directory("file.txt"): false
is_directory("new_dir"): false (尚未创建).
is_directory("new_dir"): false (refresh 前).
is_directory("new_dir"): true (refresh 后).
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/filesystem/dsc is_directory}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/memory/enable_shared_from_this/title|shared_from_this}}
{{cpp/memory/enable_shared_from_this/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|
std::shared_ptr&lt;T&gt; shared_from_this();
}}
{{dcl|num=2|since=c++11|
std::shared_ptr&lt;T const&gt; shared_from_this() const;
}}
{{dcl end}}

返回与所有指代 {{c|*this}} 的 {{c/core|std::shared_ptr}} 共享 {{c|*this}} 所有权的 {{c/core|std::shared_ptr&lt;T&gt;}}。

===返回值===
{{box|{{c/core|std::shared_ptr&lt;T&gt;(}}{{rlpsi|/#weak_this}}{{sep}}{{c/core|)}}}}

===异常===
如果调用 {{tt|shared_from_this}} 的对象还没有以 {{lc|std::shared_ptr}} 共享，那么就会通过 {{lc|std::shared_ptr}} 的构造函数抛出 {{lc|std::bad_weak_ptr}}。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;

struct Foo : public std::enable_shared_from_this&lt;Foo&gt;
{
    Foo() { std::cout &lt;&lt; "Foo::Foo\n"; }
    ~Foo() { std::cout &lt;&lt; "Foo::~Foo\n"; } 
    std::shared_ptr&lt;Foo&gt; getFoo() { return shared_from_this(); }
};

int main()
{
    Foo *f = new Foo;
    std::shared_ptr&lt;Foo&gt; pf1;

    {
        std::shared_ptr&lt;Foo&gt; pf2(f);
        pf1 = pf2-&gt;getFoo();  // 与 pf2 的对象共享所有权
    }

    std::cout &lt;&lt; "pf2 已经消失\n";   
}
|output=
Foo::Foo
pf2 已经消失
Foo::~Foo
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc shared_ptr}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
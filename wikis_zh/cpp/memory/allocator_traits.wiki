{{cpp/title|allocator_traits}}
{{cpp/memory/allocator_traits/navbar}}

{{ddcl|header=memory|since=c++11|
template&lt; class Alloc &gt;
struct allocator_traits;
}}

{{tt|allocator_traits}} 类模板提供访问{{named req|Allocator}}各种属性的标准化方式。标准容器和其他标准库组件通过此模板访问分配器，这使得能以任何类类型为分配器，只要用户提供的 {{tt|std::allocator_traits}} 特化实现所有要求的功能。

{{rrev|since=c++23|
声明 {{tt|std::allocator_traits}} 的显式或部分特化的程序为非良构，不要求诊断。
}}

默认的非特化 {{tt|std::allocator_traits}} 含有下列成员：

===成员类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|allocator_type}}|{{tt|Alloc}}}}
{{dsc|{{tt|value_type}}|{{tt|Alloc::value_type}}}}
{{dsc|{{tt|pointer}}|如果存在就是 {{tt|Alloc::pointer}}，否则是 {{tt|value_type*}}}}
{{dsc|{{tt|const_pointer}}|如果存在就是 {{tt|Alloc::const_pointer}}，否则是 {{c/core|std::pointer_traits&lt;pointer&gt;::rebind&lt;const value_type&gt;}}}}
{{dsc|{{tt|void_pointer}}|如果存在就是 {{tt|Alloc::void_pointer}}，否则是 {{c/core|std::pointer_traits&lt;pointer&gt;::rebind&lt;void&gt;}}}}
{{dsc|{{tt|const_void_pointer}}|如果存在就是 {{tt|Alloc::const_void_pointer}}，否则是 {{c/core|std::pointer_traits&lt;pointer&gt;::rebind&lt;const void&gt;}}}}
{{dsc|{{tt|difference_type}}|如果存在就是 {{tt|Alloc::difference_type}}，否则是 {{c/core|std::pointer_traits&lt;pointer&gt;::difference_type}}}}
{{dsc|{{tt|size_type}}|如果存在就是 {{tt|Alloc::size_type}}，否则是 {{c/core|std::make_unsigned&lt;difference_type&gt;::type}}}}
{{dsc|{{tt|propagate_on_container_copy_assignment}}|如果存在就是 {{tt|Alloc::propagate_on_container_copy_assignment}}，否则是 {{lc|std::false_type}}}}
{{dsc|{{tt|propagate_on_container_move_assignment}}|如果存在就是 {{tt|Alloc::propagate_on_container_move_assignment}}，否则是 {{lc|std::false_type}}}}
{{dsc|{{tt|propagate_on_container_swap}}|如果存在就是 {{tt|Alloc::propagate_on_container_swap}}，否则是 {{lc|std::false_type}}}}
{{dsc|{{tt|is_always_equal}}&lt;!-- LWG2108 --&gt;|如果存在就是 {{tt|Alloc::is_always_equal}}，否则是 {{c/core|std::is_empty&lt;Alloc&gt;::type}}}}
{{dsc end}}

===成员别名模版===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|rebind_alloc&lt;T&gt;}}|如果存在就是 {{tt|Alloc::rebind&lt;T&gt;::other}}，否则在此 {{tt|Alloc}} 是 {{c/core|Alloc&lt;U, Args&gt;}} 时就是 {{c/core|Alloc&lt;T, Args&gt;}}}}
{{dsc|{{tt|rebind_traits&lt;T&gt;}}|{{c/core|std::allocator_traits&lt;rebind_alloc&lt;T&gt;&gt;}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/memory/allocator_traits/dsc allocate}}
{{dsc inc|cpp/memory/allocator_traits/dsc allocate_at_least}}
{{dsc inc|cpp/memory/allocator_traits/dsc deallocate}}
{{dsc inc|cpp/memory/allocator_traits/dsc construct}}
{{dsc inc|cpp/memory/allocator_traits/dsc destroy}}
{{dsc inc|cpp/memory/allocator_traits/dsc max_size}}
{{dsc inc|cpp/memory/allocator_traits/dsc select_on_container_copy_construction}}
{{dsc end}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|std=C++11|dr=2108|before=没有方法确认分配器是否有状态|after=提供了 {{tt|is_always_equal}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc named req|cpp/named req/AllocatorAwareContainer|使用分配器的容器；关联特征（例如 [[#成员类型|{{tt|propagate_on_container_swap}}]]）的用法|notes={{mark c++11}}}}
{{dsc inc|cpp/memory/dsc allocator}}
{{dsc inc|cpp/memory/dsc scoped_allocator_adaptor}}
{{dsc inc|cpp/memory/dsc pointer_traits}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|destroy_n}}
{{cpp/memory/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcl rev multi|num=1
|since1=c++17|dcl1=
template&lt; class ForwardIt, class Size &gt;
ForwardIt destroy_n( ForwardIt first, Size n );
|since2=c++20|dcl2=
template&lt; class ForwardIt, class Size &gt;
constexpr ForwardIt destroy_n( ForwardIt first, Size n );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt, class Size &gt;
ForwardIt destroy_n( ExecutionPolicy&amp;&amp; policy, ForwardIt first, Size n );
}}
{{dcl end}}
@1@ 销毁从 {{c|first}} 开始的范围中的 {{c|n}} 个对象，如同用
{{source|1=
for (; n &gt; 0; (void) ++first, --n)
    std::destroy_at(std::addressof(*first));
}}

@2@ 同 {{v|1}}，但按照 {{c|policy}} 执行。{{cpp/algorithm/parallel overload precondition}}

===参数===
{{par begin}}
{{par|first|要销毁的元素范围的起始}}
{{par|n|要销毁的元素数目}}
{{par exec pol}}
{{par hreq}}
{{par req named|ForwardIt|ForwardIterator}}
{{par req|通过 {{tt|ForwardIt}} 合法实例的自增、赋值、比较或间接均不抛出异常。}}
{{par end}}

===返回值===
已被销毁的元素的范围结尾（即 {{c|std::next(first, n)}}）。

===复杂度===
与 {{c|n}} 成线性。

===异常===
{{cpp/algorithm/parallel_exceptions_reporting_behavior|singular=yes}}

===可能的实现===
{{eq fun|1=
template&lt;class ForwardIt, class Size&gt;
constexpr // C++20 起
ForwardIt destroy_n(ForwardIt first, Size n)
{
    for (; n &gt; 0; (void) ++first, --n)
        std::destroy_at(std::addressof(*first));
    return first;
}
}}

===示例===
{{cpp/memory/destroy example|destroy_n}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc destroy}}
{{dsc inc|cpp/memory/dsc destroy_at}}
{{dsc inc|cpp/memory/ranges/dsc destroy_n}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/title|out_ptr}}
{{cpp/memory/out_ptr_t/navbar}}
{{ddcl|header=memory|since=c++23|1=
template&lt; class Pointer = void, class Smart, class... Args &gt;
auto out_ptr( Smart&amp; s, Args&amp;&amp;... args );
}}

返回拥有被推导模板实参的 {{ltt std|cpp/memory/out_ptr_t}}，按引用绑定重设用的实参。

若返回值（见后述）的构造非良构则程序非良构。

===参数===
{{par begin}}
{{par|s|要适配的对象（常为智能指针）}}
{{par|args...|要捕获的用于重设的实参}}
{{par end}}

===返回值===
{{c|std::out_ptr_t&lt;Smart, P, Args&amp;&amp;&gt;(s, std::forward&lt;Args&gt;(args)...)}}，其中 {{tt|P}} 为
* {{tt|Pointer}}，若 {{tt|Pointer}} 与 {{c|void}} 不同，
* 否则为 {{c|Smart::pointer}}，若它合法并指代类型，
* 否则为 {{c|Smart::element_type*}}，若 {{c|Smart::element_type}} 合法并指代类型，
* 否则为 {{c|std::pointer_traits&lt;Smart&gt;::element_type*}}。

===注解===
用户可对模板形参 {{tt|Pointer}} 指定模板实参，以与接收 {{c|Pointer*}} 的外来函数交互。

由于所有实参都按引用捕获，返回的 {{tt|out_ptr_t}} 应为在含有外来函数调用的全表达式结尾销毁的临时对象，以避免悬垂引用。

{{ftm begin|sort=yes}}
{{ftm|std=C++23|value=202106L|__cpp_lib_out_ptr|rowspan="2"|{{tt|std::out_ptr}}, {{lc|std::inout_ptr}}}}
{{ftm|std=C++26|value=202311L|-|独立的 {{tt|std::out_ptr}} 和 {{lc|std::inout_ptr}}}}
{{ftm end}}

===示例===
{{example
|使用 {{tt|std::out_ptr}} 适配一个用于 [https://www.sqlite.org/c3ref/open.html {{tt|sqlite3_open}}] 的智能指针，它预期一个 {{tt|sqlite3**}} 作为其输出形参。
|code=
#include &lt;memory&gt;
#include &lt;sqlite3.h&gt;

int main()
{
    auto close_db = [](sqlite3* db) { sqlite3_close(db); };

    {
        // 打开一个内存数据库，并以一个 std::unique_ptr 管理其生存期
        std::unique_ptr&lt;sqlite3, decltype(close_db)&gt; up;
        sqlite3_open(":memory:", std::out_ptr(up));

        sqlite3* db = up.get();
        // 用 db 做些工作 ...
    }
    {
        // 同上，但使用 std::shared_ptr
        std::shared_ptr&lt;sqlite3&gt; sp;
        sqlite3_open(":memory:", std::out_ptr(sp, close_db));

        sqlite3* db = sp.get();
        // 用 db 做些工作 ...
    }
}
|output=
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/inout_ptr_t/dsc inout_ptr}}
{{dsc inc|cpp/memory/unique_ptr/dsc make_unique}}
{{dsc inc|cpp/memory/shared_ptr/dsc make_shared}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/memory/scoped_allocator_adaptor/title|''outermost'', ''outermost-construct'', ''outermost-destroy''}}
{{cpp/memory/scoped_allocator_adaptor/navbar}}

{{dcl begin}}
{{dcla|num=1|anchor=outermost|expos=yes|1=
template&lt; class Alloc &gt;
/* 未指定 */ /*outermost*/( Alloc&amp;&amp; alloc = *this );
}}
{{dcla|num=2|anchor=outermost-construct|expos=yes|
template&lt; class T, class... Args &gt;
void /*outermost-construct*/( T* p, Args&amp;&amp;... args );
}}
{{dcla|num=3|anchor=outermost-destroy|expos=yes|
template&lt; class T &gt;
void /*outermost-destroy*/( T* p );
}}
{{dcl end}}

这些仅用于阐述的辅助函数用于成员函数 {{rlpf|construct}} 和 {{rlpf|destroy}} 中。

@1@ 获取 {{c|alloc}} 的最外层分配器。
* 如果表达式 {{c|alloc.outer_allocator()}} 合法，那么就会返回 {{box|{{tti|outermost}}{{sep}}{{c/core|(alloc.outer_allocator())}}}}。
* 否则就会返回 {{c|alloc}}。

@2,3@ 使用 {{c|*this}} 的最外层分配器构造或销毁对象。
@@ 给定类型 {{c/core|std::allocator_traits&lt;std::remove_reference_t&lt;decltype(}}{{tti|outermost}}{{sep}}{{c/core|())&gt;&gt;}} 为 {{tt|outermost_traits}}：
:@2@ 等价于 {{box|{{c/core|outermost_traits::construct(}}{{tti|outermost}}{{sep}}{{c/core|(), p, std::forward&lt;Args&gt;(args)...);}}}}。
:@3@ 等价于 {{box|{{c/core|outermost_traits::destroy(}}{{tti|outermost}}{{sep}}{{c/core|(), p);}}}}。

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3116|std=C++11|before={{tti|outermost}} 的递归条件是&lt;br&gt;“{{c|alloc}} 拥有成员函数 {{tt|outer_allocator()}}”|after=将条件改为&lt;br&gt;表达式 {{c|alloc.outer_allocator()}} 合法”}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/allocator_traits/dsc construct}}
{{dsc inc|cpp/memory/allocator_traits/dsc destroy}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|zh}}
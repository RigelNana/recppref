{{cpp/memory/weak_ptr/title|swap}}
{{cpp/memory/weak_ptr/navbar}}
{{ddcl|since=c++11|
void swap( weak_ptr&amp; r ) noexcept;
}}

交换 {{c|*this}} 与 {{c|r}} 的存储指针值与所有权。不调整引用计数，若它们存在。

===参数===
{{par begin}}
{{par|r|要与之交换内容的智能指针}}
{{par end}} 

===返回值===
（无）

===示例===
&lt;!-- In the future this could include cpp/memory/shared_ptr/swap2/example --&gt;
{{example
|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;string&gt;
 
struct Foo
{
    Foo(int _val) : val(_val) { std::cout &lt;&lt; "Foo...\n"; }
    ~Foo() { std::cout &lt;&lt; "~Foo...\n"; }
    std::string print() { return std::to_string(val); }
    int val;
};
 
int main()
{
    std::shared_ptr&lt;Foo&gt; sp1 = std::make_shared&lt;Foo&gt;(100);
    std::shared_ptr&lt;Foo&gt; sp2 = std::make_shared&lt;Foo&gt;(200);
    std::weak_ptr&lt;Foo&gt; wp1 = sp1;
    std::weak_ptr&lt;Foo&gt; wp2 = sp2;
    auto print = [&amp;]()
    {
        auto p1 = wp1.lock();
        auto p2 = wp2.lock();
        std::cout &lt;&lt; " p1=" &lt;&lt; (p1 ? p1-&gt;print() : "nullptr");
        std::cout &lt;&lt; " p2=" &lt;&lt; (p2 ? p2-&gt;print() : "nullptr") &lt;&lt; '\n';  
    };
    print();
 
    wp1.swap(wp2);
    print();
 
    wp1.reset();
    print();
 
    wp1.swap(wp2);
    print();   
}
|output=
Foo...
Foo...
 p1=100 p2=200
 p1=200 p2=100
 p1=nullptr p2=100
 p1=100 p2=nullptr
~Foo...
~Foo...
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
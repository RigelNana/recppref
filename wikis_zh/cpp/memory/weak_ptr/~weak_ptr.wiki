{{cpp/memory/weak_ptr/title|~weak_ptr}}
{{cpp/memory/weak_ptr/navbar}}
{{ddcl|since=c++11|
~weak_ptr();
}}

销毁 {{tt|weak_ptr}} 对象。对被管理对象不产生影响。

===示例===
{{example
|此程序展示"不打断" {{lc|std::shared_ptr}} 环的效果。
|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;variant&gt;

class Node
{
    char id;
    std::variant&lt;std::weak_ptr&lt;Node&gt;, std::shared_ptr&lt;Node&gt;&gt; ptr;
public:
    Node(char id) : id{id} {}
    ~Node() { std::cout &lt;&lt; "  '" &lt;&lt; id &lt;&lt; "' 已回收\n"; }
    /*...*/
    void assign(std::weak_ptr&lt;Node&gt; p) { ptr = p; }
    void assign(std::shared_ptr&lt;Node&gt; p) { ptr = p; }
};

enum class shared { all, some };

void test_cyclic_graph(const shared x)
{
    auto A = std::make_shared&lt;Node&gt;('A');
    auto B = std::make_shared&lt;Node&gt;('B');
    auto C = std::make_shared&lt;Node&gt;('C');

    A-&gt;assign(B);
    B-&gt;assign(C);

    if (shared::all == x)
    {
        C-&gt;assign(A);
        std::cout &lt;&lt; "所有链接均为共享指针";
    }
    else
    {
        C-&gt;assign(std::weak_ptr&lt;Node&gt;(A));
        std::cout &lt;&lt; "一个链接是 weak_ptr";
    }
    /*...*/
    std::cout &lt;&lt; "\n离开...\n";
}

int main()
{
    test_cyclic_graph(shared::some);
    test_cyclic_graph(shared::all); // 产生内存泄漏
}
|output=
一个链接是 weak_ptr
离开...
  'A' 已回收
  'B' 已回收
  'C' 已回收
所有链接均为共享指针
离开...
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/shared_ptr/dsc destructor}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
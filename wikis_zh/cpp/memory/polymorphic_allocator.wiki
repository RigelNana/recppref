{{cpp/memory/pmr/title|polymorphic_allocator}}
{{cpp/memory/polymorphic_allocator/navbar}}
{{dcl begin}}
{{dcl header|memory_resource}}
{{dcl rev multi
|since1=c++17|dcl1=
template&lt; class T &gt;
class polymorphic_allocator;
|since2=c++20|dcl2=
template&lt; class T = std::byte &gt;
class polymorphic_allocator;
}}
{{dcl end}}

类模板 {{tt|std::pmr::polymorphic_allocator}} 是一个{{named req|Allocator}}，展现出取决于其构造所用的 {{lc|std::pmr::memory_resource}} 的不同的分配行为。因为 {{tt|memory_resource}} 使用运行时多态管理分配器，以 {{tt|polymorphic_allocator}} 为其静态分配器类型的不同容器实例之间可以互操作，但会表现为如同它们拥有不同的分配器类型。

{{tt|polymorphic_allocator}} 的所有特化均满足[[cpp/named_req/Allocator#分配器完整性要求|分配器完整性要求]]。&lt;!-- LWG 3037 --&gt;

{{tt|polymorphic_allocator::construct}} 成员函数进行{{lsd|cpp/memory/uses allocator#使用分配器构造}}，因此使用 {{tt|polymorphic_allocator}} 的容器中的元素将会用同一个分配器进行自身的分配。例如，{{c|std::pmr::vector&lt;std::pmr::string&gt;}} 为 {{tt|vector}} 的存储和每个 {{tt|string}} 的存储都使用同一个 {{tt|memory_resource}}。

对于非多态的分配器，可以利用 {{lc|std::scoped_allocator_adaptor}} 达成类似的传播效果。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|value_type}}|{{tt|T}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc constructor}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc destructor}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc operator{{=}}}}

{{dsc h2|公开成员函数}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc allocate}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc deallocate}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc construct}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc destroy}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc allocate_bytes}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc deallocate_bytes}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc allocate_object}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc deallocate_object}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc new_object}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc delete_object}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc select_on_container_copy_construction}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc resource}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc operator eq}}
{{dsc end}}

===注解===
{{tt|polymorphic_allocator}} 在容器复制赋值、移动赋值或交换时不传播。结果是，使用 {{tt|polymorphic_allocator}} 的容器的移动赋值可能抛出异常，且交换两个使用 {{tt|polymorphic_allocator}}，而所用分配器比较不相等的容器导致未定义行为。

{{feature test macro|__cpp_lib_polymorphic_allocator|以 {{tt|std::pmr::polymorphic_allocator&lt;&gt;}} 为一种基本术语类型|value=201902L|std=C++20}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc memory_resource}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
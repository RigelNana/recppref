{{cpp/title|uninitialized_copy_n}}
{{cpp/memory/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcla|num=1|since=c++11|constexpr=c++26|
template&lt; class InputIt, class Size, class NoThrowForwardIt &gt;
NoThrowForwardIt uninitialized_copy_n( InputIt first, Size count,
                                       NoThrowForwardIt d_first );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt,
          class Size, class NoThrowForwardIt &gt;
NoThrowForwardIt uninitialized_copy_n( ExecutionPolicy&amp;&amp; policy,
                                       ForwardIt first, Size count,
                                       NoThrowForwardIt d_first );}}
{{dcl end}}

@1@ 如同用以下方式从始于 {{c|first}} 的范围复制 {{c|count}} 个元素到始于 {{c|d_first}} 的未初始化内存区域：
{{box|
{{c/core|for (; count &gt; 0; ++d_first, (void) ++first, --count)}}&lt;br&gt;
{{nbspt|4}}{{c/core|::new (}}{{rlpi|voidify}}{{c/core|(*d_first))}}&lt;br&gt;
{{nbspt|8}}{{c/core|typename std::iterator_traits&lt;NoThrowForwardIt&gt;::value_type(*first);}}
}}
@@ 如果初始化中抛出了异常，那么以未指定的顺序销毁已构造的对象。

@2@ 同 {{v|1}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition}}


{{rrev|since=c++20|
如果 {{counted range|d_first|count}} 与 {{counted range|first|count}} 有重叠，那么行为未定义。
}}

===参数===
{{par begin}}
{{par|first|要复制的元素范围起始}}
{{par|count|要复制的元素个数}}
{{par|d_first|目标范围起始}}
{{par exec pol}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par req named|ForwardIt|ForwardIterator}}
{{par req named|NoThrowForwardIt|ForwardIterator}}
{{par req|通过 {{tt|NoThrowForwardIt}} 合法实例的自增、赋值、比较或间接均不可抛异常。}}
{{par end}}

===返回值===
指向最后复制的元素后一元素的迭代器。

===复杂度===
与 {{c|count}} 成线性。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=yes}}

===注解===
{{feature test macro|__cpp_lib_raw_memory_algorithms|std=C++26|value=202411L|{{c/core|constexpr}} 的[[cpp/memory#未初始化内存算法|特化内存算法]], {{vl|1}}}}

===可能的实现===
{{eq fun|1=
template&lt;class InputIt, class Size, class NoThrowForwardIt&gt;
constexpr NoThrowForwardIt uninitialized_copy_n(InputIt first, Size count,
                                                NoThrowForwardIt d_first)
{
    using T = typename std::iterator_traits&lt;NoThrowForwardIt&gt;::value_type;
    NoThrowForwardIt current = d_first;
    try
    {
        for (; count &gt; 0; ++first, (void) ++current, --count)
            ::new (static_cast&lt;void*&gt;(std::addressof(*current))) T(*first);
    }
    catch (...)
    {
        for (; d_first != current; ++d_first)
            d_first-&gt;~T();
        throw;
    }
    return current;
}
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;string&gt;
#include &lt;tuple&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;std::string&gt; v = {"This", "is", "an", "example"};
    
    std::string* p;
    std::size_t sz;
    std::tie(p, sz) = std::get_temporary_buffer&lt;std::string&gt;(v.size());
    sz = std::min(sz, v.size());
    
    std::uninitialized_copy_n(v.begin(), sz, p);
    
    for (std::string* i = p; i != p + sz; ++i)
    {
        std::cout &lt;&lt; *i &lt;&lt; ' ';
        i-&gt;~basic_string&lt;char&gt;();
    }
    std::cout &lt;&lt; '\n';
    
    std::return_temporary_buffer(p);
}
|p=true
|output=
This is an example
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2133|std=C++98|before=效果描述用到了迭代表达式是 {{c|++d_first, ++first, --count}}&lt;br&gt;的 {{c/core|for}} 循环，该表达式会进行 {{c/core|operator,}} 的实参依赖查找|after=丢弃其中一个操作数的值&lt;br&gt;以禁用该实参依赖查找}}
{{dr list item|wg=lwg|dr=2433|std=C++11|before=此算法可能被重载的 {{c/core|operator&amp;}} 劫持|after=使用 {{lc|std::addressof}}}}
{{dr list item|wg=lwg|dr=3870|std=C++20|before=此算法可能在 {{c/core|const}} 存储上创建对象|after=保持不允许}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc uninitialized_copy}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_copy_n}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
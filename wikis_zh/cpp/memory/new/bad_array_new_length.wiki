{{cpp/title|bad_array_new_length}}
{{cpp/memory/new/navbar}}
{{ddcl|header=new|since=c++11|
class bad_array_new_length;
}}

{{tt|std::bad_array_new_length}} 是 [[cpp/language/new|new 表达式]]作为异常抛出的对象类型，以报告以下情况下的非法数组长度

# 数组长度为负
# 新数组的总大小将超过实现定义最大值
# 初始化式子句的数量超出要初始化的元素数量

仅数组第一维可生成此异常；第一维外的维数是常量表达式，在编译时得到检查。

{{inheritance diagram/std-bad_array_new_length}}

===成员函数===
{{cpp/error/exception/member of derived|bad_array_new_length|std=c++11}}

{{cpp/memory/new/bad_alloc/inherit}}

{{cpp/error/exception/inherit}}

===注解===
{{feature test macro|__cpp_lib_constexpr_exceptions|value=202411L|std=C++26|{{c/core|constexpr}} 的异常类型}}

===示例===
{{example
|应抛出 {{tt|std::bad_array_new_length}} 的三种条件：
|code=
#include &lt;climits&gt;
#include &lt;iostream&gt;
#include &lt;new&gt;

int main()
{
    try
    {
        int negative = -1;
        new int[negative];
    }
    catch (const std::bad_array_new_length&amp; e)
    {
        std::cout &lt;&lt; "1) " &lt;&lt; e.what() &lt;&lt; ": 负数大小\n";
    }

    try
    {
        int small = 1;
        new int[small]{1,2,3};
    }
    catch (const std::bad_array_new_length&amp; e)
    {
        std::cout &lt;&lt; "2) " &lt;&lt; e.what() &lt;&lt; ": 过多初始化式\n";
    }

    try
    {
        long large = LONG_MAX;
        new int[large][1000];
    } 
    catch (const std::bad_array_new_length&amp; e)
    {
        std::cout &lt;&lt; "3) " &lt;&lt; e.what() &lt;&lt; ": 过大\n";
    }

    std::cout &lt;&lt; "End\n";
}
|p=true
|output=
1) std::bad_array_new_length: 负数大小
2) std::bad_array_new_length: 过多初始化式
3) std::bad_array_new_length: 过大
End
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/new/dsc operator_new}}
{{dsc inc|cpp/memory/new/dsc bad_alloc}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
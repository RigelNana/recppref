{{cpp/title|destroy}}
{{cpp/memory/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcl rev multi|num=1
|since1=c++17|dcl1=
template&lt; class ForwardIt &gt;
void destroy( ForwardIt first, ForwardIt last );
|since2=c++20|dcl2=
template&lt; class ForwardIt &gt;
constexpr void destroy( ForwardIt first, ForwardIt last );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt &gt;
void destroy( ExecutionPolicy&amp;&amp; policy, ForwardIt first, ForwardIt last );
}}
{{dcl end}}
@1@ 销毁范围 {{range|first|last}} 中的对象，如同用
{{source|1=
for (; first != last; ++first)
    std::destroy_at(std::addressof(*first));
}}

@2@ 同 {{v|1}}，但按照 {{c|policy}} 执行。{{cpp/algorithm/parallel overload precondition}}

===参数===
{{par begin}}
{{par range|3=要销毁的}}
{{par exec pol}}
{{par hreq}}
{{par req named|ForwardIt|ForwardIterator}}
{{par req|通过合法 {{tt|ForwardIt}} 实例的自增、赋值、比较或间接均不抛出异常。}}
{{par end}}

===返回值===
（无）

===复杂度===
与 {{c|first}} 和 {{c|last}} 间的距离成线性。

===异常===
{{cpp/algorithm/parallel_exceptions_reporting_behavior|singular=yes}}

===可能的实现===
{{eq fun|1=
template&lt;class ForwardIt&gt;
constexpr // C++20 起
void destroy(ForwardIt first, ForwardIt last)
{
    for (; first != last; ++first)
        std::destroy_at(std::addressof(*first));
}
}}

===示例===
{{cpp/memory/destroy example|destroy}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc destroy_n}}
{{dsc inc|cpp/memory/dsc destroy_at}}
{{dsc inc|cpp/memory/ranges/dsc destroy}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/title|assume_aligned}}
{{cpp/memory/navbar}}
{{ddcl|header=memory|since=c++20|
template&lt; std::size_t N, class T &gt;
constexpr T* assume_aligned(T* ptr);
}}

告知编译器 {{c|ptr}} 所指向的对象至少对齐到 {{tt|N}}。实现可用此信息生成更高效的代码，但仅会对通过 {{tt|assume_aligned}} 的返回值进行的访问做此假设。

若 {{tt|N}} 不是 2 的幂则程序非良构。若 {{c|ptr}} 不指向 {{tt|T}} 类型对象（忽略每层的 cv 限定）或对象的对齐不至少为 {{tt|N}}，则行为未定义。

===返回值===
{{c|ptr}}。

===异常===
不抛出。

===注解===
为确保程序能从以 {{tt|assume_aligned}} 启用的优化受益，最好通过其返回值访问对象：

{{source|1=
void f(int* p)
{
    int* p1 = std::assume_aligned&lt;256&gt;(p);
    // 用 p1 而非 p，以确保从对齐假设受益。
    // 然而，若 p 未对齐则程序有未定义行为，无关乎是否使用 p1。
}
}}

交给程序员确保对齐假设确实成立。调用 {{tt|assume_aligned}} 不导致编译器检查或强制这点。

{{feature test macro|__cpp_lib_assume_aligned|{{tt|std::assume_aligned}}|value=201811L|std=C++20}}

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/language/dsc alignof}}
{{dsc inc|cpp/language/dsc alignas}}
{{dsc inc|cpp/types/dsc aligned_storage}}
{{dsc inc|cpp/memory/dsc align}}
{{dsc inc|cpp/language/attributes/dsc assume}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
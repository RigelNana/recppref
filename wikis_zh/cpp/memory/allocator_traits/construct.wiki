{{cpp/memory/allocator_traits/title|construct}}
{{cpp/memory/allocator_traits/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcla|since=c++11|constexpr=c++20|
template&lt; class T, class... Args &gt;
static void construct( Alloc&amp; a, T* p, Args&amp;&amp;... args );
}}
{{dcl end}}

若可能，则在 {{c|p}} 所指向的分配的未初始化存储构造 {{tt|T}} 类型对象，通过调用
{{c|a.construct(p, std::forward&lt;Args&gt;(args)...)}} 进行。

若以上不可行（例如 {{tt|Alloc}} 无 {{tt|construct()}} 成员函数），则调用
{{rrev multi
|until1=c++20|rev1={{c|::new (static_cast&lt;void*&gt;(p)) T(std::forward&lt;Args&gt;(args)...)}}
|rev2={{c|std::construct_at(p, std::forward&lt;Args&gt;(args)...)}}
}}

===参数===
{{par begin}}
{{par|a|用于构造的分配器}}
{{par|p|指向未初始化存储的指针，将在其上构造 {{tt|T}} 对象}}
{{par|args...|传递给 {{c|a.construct()}} 或{{rev inl|until=c++20|布置 new}}{{rev inl|since=c++20| {{lc|std::construct_at()}}}} 的构造函数实参}}
{{par end}}

===返回值===
（无）

===注解===
此函数为标准库容器在插入、复制或移动元素时所用。

因为此函数提供到布置 new 的自动后备，故 C++11 起成员函数 {{tt|construct()}} 是{{named req|Allocator}}的可选要求。

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/new/dsc operator_new}}
{{dsc inc|cpp/memory/allocator/dsc construct}}
{{dsc inc|cpp/memory/dsc construct_at}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
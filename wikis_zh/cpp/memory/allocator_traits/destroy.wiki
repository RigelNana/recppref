{{cpp/memory/allocator_traits/title|destroy}}
{{cpp/memory/allocator_traits/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcla|since=c++11|constexpr=c++20|
template&lt; class T &gt;
static void destroy( Alloc&amp; a, T* p );
}}
{{dcl end}}

调用 {{c|p}} 所指向对象的析构函数。若可能，则通过调用 {{c|a.destroy(p)}} 这么做。若不可能（例如 {{tt|Alloc}} 无成员函数 {{tt|destroy()}}），则{{rev inl|until=c++20|直接调用 {{c|*p}} 的析构函数，同 {{c|p-&gt;~T()}}}}{{rev inl|since=c++20| {{c|std::destroy_at(p)}}}}。

===参数===
{{par begin}}
{{par|a|用于析构的分配器}}
{{par|p|指向要被销毁的对象的指针}}
{{par end}}

===返回值===
（无）

===注解===
因为此函数提供到析构函数的自动后备，故 C++11 起成员函数 {{tt|destroy()}} 是{{named req|Allocator}}的可选要求。

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/allocator/dsc destroy}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
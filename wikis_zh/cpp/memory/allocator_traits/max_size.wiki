{{cpp/memory/allocator_traits/title|max_size}}
{{cpp/memory/allocator_traits/navbar}}
{{ddcla|header=memory|since=c++11|constexpr=c++20|
static size_type max_size( const Alloc&amp; a ) noexcept;
}}

若可能，则通过调用 {{c|a.max_size()}}，从 {{c|a}} 获得理论上可行的最大分配大小。

若上述行为不可行（例如 {{tt|Alloc}} 无成员函数 {{tt|max_size()}}），则返回 {{c|std::numeric_limits&lt;size_type&gt;::max() / sizeof(value_type)}}。

===参数===
{{par begin}}
{{par|a|要检测的分配器}}
{{par end}}

===返回值===
理论最大分配大小。

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2162|std=C++11|before=不要求 {{tt|max_size}} 为 noexcept|after=已要求}}
{{dr list item|wg=lwg|dr=2466|std=C++11|before=后备情况下返回按字节计的理论最大分配大小|after=返回按元素计的大小}}
{{dr list end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;locale&gt;

int main()
{
    std::allocator&lt;short&gt; b;
    std::allocator&lt;int&gt; d;

    const auto p = std::allocator_traits&lt;decltype(b)&gt;::max_size(b);
    const auto q = std::allocator_traits&lt;decltype(d)&gt;::max_size(d);

    std::cout.imbue(std::locale("en_US.UTF-8"));
    std::cout &lt;&lt; std::uppercase
              &lt;&lt; "p = " &lt;&lt; std::dec &lt;&lt; p &lt;&lt; " = 0x" &lt;&lt; std::hex &lt;&lt; p &lt;&lt; '\n'
              &lt;&lt; "q = " &lt;&lt; std::dec &lt;&lt; q &lt;&lt; " = 0x" &lt;&lt; std::hex &lt;&lt; q &lt;&lt; '\n';
}
|p=true
|output=
p = 9,223,372,036,854,775,807 = 0x7,FFF,FFF,FFF,FFF,FFF
q = 4,611,686,018,427,387,903 = 0x3,FFF,FFF,FFF,FFF,FFF
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/allocator/dsc max_size}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
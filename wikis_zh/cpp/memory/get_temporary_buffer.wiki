{{cpp/title|get_temporary_buffer}}
{{cpp/memory/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcl|until=c++11|1=
template&lt; class T &gt;
std::pair&lt;T*, std::ptrdiff_t&gt;
    get_temporary_buffer( std::ptrdiff_t count );
}}
{{dcl|since=c++11|deprecated=c++17|removed=c++20|1=
template&lt; class T &gt;
std::pair&lt;T*, std::ptrdiff_t&gt;
    get_temporary_buffer( std::ptrdiff_t count ) noexcept;
}}
{{dcl end}}

如果 {{c|count}} 为负或为零，那么不做任何事。

否则，请求为 {{c|count}} 个相邻的 {{tt|T}} 类型对象分配未初始化的相接存储。此请求是非绑定的，并且实现可以改为分配存储其他任意数量（包括零）的相邻对象所需的内存。

{{rrev|since=c++11|
是否支持[[cpp/language/object#对齐|过对齐]]类型由实现定义。
}}

===参数===
{{par begin}}
{{par|count|所需的对象数量}}
{{par end}}

===返回值===
一个 {{lc|std::pair}}，它的 {{tt|first}} 成员是指向被分配存储起始的指针，{{tt|second}} 成员是适合在实际分配的存储中的对象数。

如果 {{c|1=count &lt;= 0}} 或分配的存储不足以存储单个 {{tt|T}} 类型元素，那么结果的 {{tt|first}} 成员是空指针且 {{tt|second}} 成员为零。

===注解===
此 API 的原本设计目的是提供比通用 {{c/core|operator new}} 更高效的实现，但无人创建这样的实现，而此 API 被弃用并移除。

===示例===
{{include|cpp/memory/example1}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=425|std=C++98|before={{c|1=count &lt;= 0}} 时的行为不明确|after=使之明确}}
{{dr list item|wg=lwg|dr=2072|std=C++98|before=不允许分配不够充足的内存|after=允许}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc return_temporary_buffer}}
{{dsc inc|cpp/memory/allocator_traits/dsc allocate_at_least}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/memory/pointer_traits/title|pointer_to}}
{{cpp/memory/pointer_traits/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcl|since=c++11|num=1|notes={{mark|{{tt|pointer_traits&lt;Ptr&gt;}} 特化的成员}}|
static pointer
pointer_to( element_type&amp; r );
}}
{{dcl rev multi|num=2
|since1=c++11|dcl1=
static pointer
pointer_to( element_type&amp; r ) noexcept;
|notes1={{mark|{{tt|pointer_traits&lt;T*&gt;}} 特化的成员}}
|since2=c++20|dcl2=
static constexpr pointer
pointer_to( element_type&amp; r ) noexcept;
|notes2={{mark|{{tt|pointer_traits&lt;T*&gt;}} 特化的成员}}
}}
{{dcl end}}

构造一个指向其实参的可解引用指针或指针式对象（[[cpp/named_req/Allocator#缀饰指针|“缀饰指针”]]）。

@1@ 此函数于非特化 {{lc|std::pointer_traits}} 模板的版本单纯地调用 {{c|Ptr::pointer_to(r)}}，且若 Ptr 不提供静态成员函数 {{tt|pointer_to}}，则此函数的实例化为编译时错误。
@2@ 此函数于 {{lc|std::pointer_traits}} 为指针类型特化的版本返回 {{c|std::addressof(r)}}。

===参数===
{{par begin}}
{{par|r|{{c|element_type&amp;}} 类型的到对象引用，除非 {{tt|element_type}} 为 {{c|void}}，此情况下 {{tt|r}} 的类型未指定}}
{{par end}}

===返回值===
指向 {{c|r}} 的可解引用指针，拥有 {{c|pointer_traits&lt;&gt;::pointer}} 类型。

===异常===
@1@ 未指定（通常同 {{c|Ptr::pointer_to}}）。

===注解===
若 {{c|Ptr::pointer_to}} 不存在，则此函数的 [https://www.boost.org/doc/libs/release/doc/html/boost/intrusive/pointer_traits.html Boost.Intrusive 库版本] 返回 {{c|pointer(std::addressof(r))}}。

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc addressof}}
{{dsc inc|cpp/memory/allocator/dsc address}}
{{dsc inc|cpp/memory/pointer_traits/dsc to_address}}
{{dsc inc|cpp/memory/dsc to_address}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/memory/unique_ptr/title|get_deleter}}
{{cpp/memory/unique_ptr/navbar}}
{{dcl begin}}
{{dcl|since=c++11|notes={{mark|constexpr since C++23}}|1=
Deleter&amp; get_deleter() noexcept;
}}
{{dcl|since=c++11|notes={{mark|constexpr since C++23}}|1=
const Deleter&amp; get_deleter() const noexcept;
}}
{{dcl end}}

返回会用于析构被管理对象的删除器对象。

===参数===
（无）

===返回值===
存储的删除器对象。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;

struct Foo
{
    Foo() { std::cout &lt;&lt; "Foo() 0x" &lt;&lt; std::hex &lt;&lt; (void*)this &lt;&lt; '\n'; }
    ~Foo() { std::cout &lt;&lt; "~Foo() 0x" &lt;&lt; std::hex &lt;&lt; (void*)this &lt;&lt; '\n'; }
};
 
struct D
{
    int number;

    void bar()
    {
        std::cout &lt;&lt; "调用 D::bar(), 我的数是: " &lt;&lt; std::dec &lt;&lt; number &lt;&lt; '\n';
    }

    void operator()(Foo* p) const
    {
        std::cout &lt;&lt; "为 Foo 对象 0x" &lt;&lt; std::hex &lt;&lt; (void*)p &lt;&lt; " 调用删除器\n";
        delete p;
    }
};

int main()
{
    std::cout &lt;&lt; "main 开始\n";

    std::unique_ptr&lt;Foo, D&gt; up1(new Foo(), D(42));
    D&amp; del1 = up1.get_deleter();
    del1.bar();

    std::unique_ptr&lt;Foo, D&gt; up2(new Foo(), D(43));
    D&amp; del2 = up2.get_deleter();
    auto* released = up2.release();
    del2(released);

    std::cout &lt;&lt; "main 结束\n";
}
|output=
main 开始
Foo() 0x0x90cc30
调用 D::bar(), 我的数是: 42
Foo() 0x0x90cc50
为 Foo 对象 0x0x90cc50 调用删除器
~Foo() 0x0x90cc50
main 结束
为 Foo 对象 0x0x90cc30 调用删除器
~Foo() 0x0x90cc30
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/shared_ptr/dsc get_deleter}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{title|1=operator==,!=,&lt;,&lt;=,&gt;,&gt;=,&lt;=&gt;&lt;small&gt;(std::unique_ptr)&lt;/small&gt;}}
{{cpp/memory/unique_ptr/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcl|num=1|since=c++11|notes={{mark|constexpr since C++23}}|1=
template&lt; class T1, class D1, class T2, class D2 &gt;
bool operator==( const unique_ptr&lt;T1, D1&gt;&amp; x, const unique_ptr&lt;T2, D2&gt;&amp; y );
}}
{{dcl|num=2|since=c++11|until=c++20|1=
template&lt; class T1, class D1, class T2, class D2 &gt;
bool operator!=( const unique_ptr&lt;T1, D1&gt;&amp; x, const unique_ptr&lt;T2, D2&gt;&amp; y );
}}
{{dcl|num=3|since=c++11|1=
template&lt; class T1, class D1, class T2, class D2 &gt;
bool operator&lt;( const unique_ptr&lt;T1, D1&gt;&amp; x, const unique_ptr&lt;T2, D2&gt;&amp; y );
}}
{{dcl|num=4|since=c++11|1=
template&lt; class T1, class D1, class T2, class D2 &gt;
bool operator&lt;=( const unique_ptr&lt;T1, D1&gt;&amp; x, const unique_ptr&lt;T2, D2&gt;&amp; y );
}}
{{dcl|num=5|since=c++11|1=
template&lt; class T1, class D1, class T2, class D2 &gt;
bool operator&gt;( const unique_ptr&lt;T1, D1&gt;&amp; x, const unique_ptr&lt;T2, D2&gt;&amp; y );
}}
{{dcl|num=6|since=c++11|1=
template&lt; class T1, class D1, class T2, class D2 &gt;
bool operator&gt;=( const unique_ptr&lt;T1, D1&gt;&amp; x, const unique_ptr&lt;T2, D2&gt;&amp; y );
}}
{{dcl|num=7|since=c++20|1=
template&lt; class T1, class D1, class T2, class D2 &gt;
    requires std::three_way_comparable_with&lt;
        typename unique_ptr&lt;T1, D1&gt;::pointer,
        typename unique_ptr&lt;T2, D2&gt;::pointer&gt;
std::compare_three_way_result_t&lt;typename unique_ptr&lt;T1, D1&gt;::pointer,
                                typename unique_ptr&lt;T2, D2&gt;::pointer&gt;
    operator&lt;=&gt;( const unique_ptr&lt;T1, D1&gt;&amp; x, const unique_ptr&lt;T2, D2&gt;&amp; y );
}}
{{dcl|num=8|since=c++11|notes={{mark|constexpr since C++23}}|1=
template&lt; class T, class D &gt;
bool operator==( const unique_ptr&lt;T, D&gt;&amp; x, std::nullptr_t ) noexcept;
}}
{{dcl|num=9|since=c++11|until=c++20|1=
template&lt; class T, class D &gt;
bool operator==( std::nullptr_t, const unique_ptr&lt;T, D&gt;&amp; x ) noexcept;
}}
{{dcl|num=10|since=c++11|until=c++20|1=
template&lt; class T, class D &gt;
bool operator!=( const unique_ptr&lt;T, D&gt;&amp; x, std::nullptr_t ) noexcept;
}}
{{dcl|num=11|since=c++11|until=c++20|1=
template&lt; class T, class D &gt;
bool operator!=( std::nullptr_t, const unique_ptr&lt;T, D&gt;&amp; x ) noexcept;
}}
{{dcl|num=12|since=c++11|notes={{mark|constexpr since C++23}}|1=
template&lt; class T, class D &gt;
bool operator&lt;( const unique_ptr&lt;T, D&gt;&amp; x, std::nullptr_t );
}}
{{dcl|num=13|since=c++11|notes={{mark|constexpr since C++23}}|1=
template&lt; class T, class D &gt;
bool operator&lt;( std::nullptr_t, const unique_ptr&lt;T, D&gt;&amp; y );
}}
{{dcl|num=14|since=c++11|notes={{mark|constexpr since C++23}}|1=
template&lt; class T, class D &gt;
bool operator&lt;=( const unique_ptr&lt;T, D&gt;&amp; x, std::nullptr_t );
}}
{{dcl|num=15|since=c++11|notes={{mark|constexpr since C++23}}|1=
template&lt; class T, class D &gt;
bool operator&lt;=( std::nullptr_t, const unique_ptr&lt;T, D&gt;&amp; y );
}}
{{dcl|num=16|since=c++11|notes={{mark|constexpr since C++23}}|1=
template&lt; class T, class D &gt;
bool operator&gt;( const unique_ptr&lt;T, D&gt;&amp; x, std::nullptr_t );
}}
{{dcl|num=17|since=c++11|notes={{mark|constexpr since C++23}}|1=
template&lt; class T, class D &gt;
bool operator&gt;( std::nullptr_t, const unique_ptr&lt;T, D&gt;&amp; y );
}}
{{dcl|num=18|since=c++11|notes={{mark|constexpr since C++23}}|1=
template&lt; class T, class D &gt;
bool operator&gt;=( const unique_ptr&lt;T, D&gt;&amp; x, std::nullptr_t );
}}
{{dcl|num=19|since=c++11|notes={{mark|constexpr since C++23}}|1=
template&lt; class T, class D &gt;
bool operator&gt;=( std::nullptr_t, const unique_ptr&lt;T, D&gt;&amp; y );
}}
{{dcl|num=20|since=c++20|notes={{mark|constexpr since C++23}}|1=
template&lt; class T, class D &gt;
    requires std::three_way_comparable&lt;typename unique_ptr&lt;T, D&gt;::pointer&gt;
std::compare_three_way_result_t&lt;typename unique_ptr&lt;T, D&gt;::pointer&gt;
    operator&lt;=&gt;( const unique_ptr&lt;T, D&gt;&amp; x, std::nullptr_t );
}}
{{dcl end}}

比较两个 {{tt|unique_ptr}} 或 {{tt|unique_ptr}} 与 {{c|nullptr}} 的指针值。

@1-7@ 比较两个 {{tt|unique_ptr}}。

@8-20@ 比较 {{tt|unique_ptr}} 与 {{c|nullptr}}。

{{rrev|since=c++20|
{{cpp/note synthesized eq}}
}}

===参数===
{{par begin}}
{{par|x, y|要比较的 {{tt|unique_ptr}}}}
{{par end}} 

===返回值===
@1@ {{c|x.get() {{==}} y.get()}}

@2@ {{c|x.get() !{{=}} y.get()}}

@3@ {{c|std::less&lt;CT&gt;()(x.get(), y.get())}}，其中 {{tt|CT}} 是 {{c|std::common_type&lt;unique_ptr&lt;T1, D1&gt;::pointer, unique_ptr&lt;T2, D2&gt;::pointer&gt;::type}}

@4@ {{c|!(y &lt; x)}}

@5@ {{c|y &lt; x}}

@6@ {{c|!(x &lt; y)}}

@7@ {{c|std::compare_three_way{}(x.get(), y.get())}}

@8,9@ {{c|!x}}

@10,11@ {{c|(bool)x}}

@12@ {{c|std::less&lt;unique_ptr&lt;T,D&gt;::pointer&gt;()(x.get(), nullptr)}} 

@13@ {{c|std::less&lt;unique_ptr&lt;T,D&gt;::pointer&gt;()(nullptr, y.get())}} 

@14@ {{c|!(nullptr &lt; x)}}

@15@ {{c|!(y &lt; nullptr)}}

@16@ {{c|nullptr &lt; x}}

@17@ {{c|y &lt; nullptr}}

@18@ {{c|!(x &lt; nullptr)}}

@19@ {{c|!(nullptr &lt; y)}}

@20@ {{c|std::compare_three_way{}(x.get(), static_cast&lt;typename unique_ptr&lt;T, D&gt;::pointer&gt;(nullptr))}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;

int main()
{
    std::unique_ptr&lt;int&gt; p1(new int(42));
    std::unique_ptr&lt;int&gt; p2(new int(42));

    std::cout &lt;&lt; std::boolalpha
        &lt;&lt; "(p1 == p1)       : " &lt;&lt; (p1 == p1) &lt;&lt; '\n'
        &lt;&lt; "(p1 &lt;=&gt; p1) == 0 : " &lt;&lt; ((p1 &lt;=&gt; p1) == 0) &lt;&lt; '\n' // C++20 起

    // p1 与 p2 指向不同内存位置，故 p1 != p2
        &lt;&lt; "(p1 == p2)       : " &lt;&lt; (p1 == p2) &lt;&lt; '\n'
        &lt;&lt; "(p1 &lt; p2)        : " &lt;&lt; (p1 &lt; p2) &lt;&lt; '\n'
        &lt;&lt; "(p1 &lt;=&gt; p2) &lt; 0  : " &lt;&lt; ((p1 &lt;=&gt; p2) &lt; 0) &lt;&lt; '\n'   // C++20 起
        &lt;&lt; "(p1 &lt;=&gt; p2) == 0 : " &lt;&lt; ((p1 &lt;=&gt; p2) == 0) &lt;&lt; '\n'; // C++20 起
}
|p=true
|output=
(p1 == p1)       : true
(p1 &lt;=&gt; p1) == 0 : true
(p1 == p2)       : false
(p1 &lt; p2)        : true
(p1 &lt;=&gt; p2) &lt; 0  : true
(p1 &lt;=&gt; p2) == 0 : false
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3426|std=C++20|before={{tt|1=operator&lt;=&gt;(unique_ptr, nullptr_t)}} 非良构|after=修正约束与定义}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/unique_ptr/dsc get}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
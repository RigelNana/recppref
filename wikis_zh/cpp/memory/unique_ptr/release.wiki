{{cpp/memory/unique_ptr/title|release}}
{{cpp/memory/unique_ptr/navbar}}
{{ddcl | since=c++11 | notes={{mark|constexpr since C++23}} | 1=
pointer release() noexcept;
}}

若存在，则释放被管理对象的所有权。

调用后 {{lc|get()}} 返回 {{c|nullptr}}。

调用方负责清理该对象（例如使用 {{lc|get_deleter()}}）。

===参数===
（无）

===返回值===
指向被管理对象的指针，或若无被管理对象则为 {{c|nullptr}}，即调用前 {{lc|get()}} 会返回的值。

===示例===
{{example |
 | code=
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;memory&gt;
 
struct Foo
{
    Foo() { std::cout &lt;&lt; "Foo\n"; }
    ~Foo() { std::cout &lt;&lt; "~Foo\n"; }
};
 
// Foo 资源的所有权在调用该函数时被转移
void legacy_api(Foo* owning_foo)
{
    std::cout &lt;&lt; __func__ &lt;&lt; '\n';
    // 没有人能理解或再敢碰的遗留代码
    // ...
    delete owning_foo;
}
 
int main()
{
    std::unique_ptr&lt;Foo&gt; managed_foo(new Foo);
    // [可能包括返回或抛异常逻辑的代码]
    // [...]
    legacy_api(managed_foo.release());
 
    assert(managed_foo == nullptr);
}

 | output=
Foo
legacy_api
~Foo
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/memory/unique_ptr/dsc get}}
{{dsc inc | cpp/memory/unique_ptr/dsc get_deleter}}
{{dsc inc | cpp/memory/unique_ptr/dsc reset}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
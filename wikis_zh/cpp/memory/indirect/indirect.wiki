{{cpp/memory/indirect/title|indirect}}
{{cpp/memory/indirect/navbar}}

{{dcl begin}}
{{dcla|num=1|since=c++26|
constexpr explicit indirect();
}}
{{dcla|num=2|since=c++26|
constexpr explicit indirect( std::allocator_arg_t, const Allocator&amp; a );
}}
{{dcla|num=3|since=c++26|1=
template&lt; class U = T &gt;
constexpr explicit indirect( U&amp;&amp; v );
}}
{{dcla|num=4|since=c++26|1=
template&lt; class U = T &gt;
constexpr explicit indirect( std::allocator_arg_t, const Allocator&amp; a,
                             U&amp;&amp; v );
}}
{{dcla|num=5|since=c++26|
template&lt; class... Args &gt;
constexpr explicit indirect( std::in_place_t, Args&amp;&amp;... args );
}}
{{dcla|num=6|since=c++26|
template&lt; class... Args &gt;
constexpr explicit indirect( std::allocator_arg_t, const Allocator&amp; a,
                             std::in_place_t, Args&amp;&amp;... args );
}}
{{dcla|num=7|since=c++26|
template&lt; class I, class... Args &gt;
constexpr explicit indirect( std::in_place_t, std::initializer_list&lt;I&gt; ilist,
                             Args&amp;&amp;... args );
}}
{{dcla|num=8|since=c++26|
template&lt; class I, class... Args &gt;
constexpr explicit indirect( std::allocator_arg_t, const Allocator&amp; a,
                             std::in_place_t, std::initializer_list&lt;I&gt; ilist,
                             Args&amp;&amp;... args );
}}
{{dcla|num=9|since=c++26|
constexpr indirect( const indirect&amp; other );
}}
{{dcla|num=10|since=c++26|
constexpr indirect( std::allocator_arg_t, const Allocator&amp; a,
                    const indirect&amp; other );
}}
{{dcla|num=11|since=c++26|
constexpr indirect( indirect&amp;&amp; other ) noexcept;
}}
{{dcla|num=12|since=c++26|
constexpr indirect( std::allocator_arg_t, const Allocator&amp; a,
                    indirect&amp;&amp; other ) noexcept(/* 见下文 */);
}}
{{dcl end}}

构造新的 {{tt|indirect}} 对象。

===参数===
{{par begin}}
{{par|a|要关联的分配器}}
{{par|v|用来初始化拥有的值的值}}
{{par|args|用来初始化拥有的值的实参}}
{{par|il|用来初始化拥有的值的初始化器列表}}
{{par|other|另一个 {{tt|indirect}} 对象，它包含的值（如果存在）会被复制}}
{{par end}}

===效果===
新 {{tt|indirect}} 对象的构造包含以下步骤：

@1@ 构造关联的分配器 {{rlpsi|/#alloc}}：
* 如果 {{rlpsi|/#alloc}} 的初始化器为空，那么它会被[[cpp/language/value initialization|值初始化]]。
* 如果 {{rlpsi|/#alloc}} 的初始化器不为空，那么它会以该初始化器实参被[[cpp/language/direct initialization|直接非列表初始化]]。

@2@ 构造拥有的对象：
* 对于重载 {{vl|1-8}}，首先以调用 {{c/core|std::allocator_traits&lt;Allocator&gt;::allocate}} 的结果来初始化 {{rlpsi|/#p}}，然后调用 {{box|{{c/core|std::allocator_traits&lt;Allocator&gt;::construct(}}{{rlpsi|/#alloc}}{{sep}}{{c/core|,}}{{nbspt}}{{rlpsi|/#p}}{{sep}}{{c/core|, args...)}}}}，其中 {{c|args...}} 是包含各初始化器实参的表达式包。
* 对于重载 {{vl|9-12}}：
** 如果 {{c|other}} 无值，那么不会构造拥有的对象，并且 {{c|*this}} 在构造后同样无值。
** 否则，如果 {{c|other}} 是右值引用，并且 {{rlpsi|/#alloc}} 等于 {{box|{{c/core|other.}}{{rlpsi|/#alloc}}}}，那么 {{c|*this}} 会获得 {{c|other}} 拥有的对象的所有权。
** 否则会按上述方法通过 {{rlpsi|/#alloc}} 构造拥有的对象。

{|class="wikitable" style="text-align: center;"
!rowspan=2|{{nbsp|2}}重载{{nbsp|2}}
!colspan=2|...的初始化器
!rowspan=2|{{nbsp}}构造后的 {{rlpf|valueless_after_move}}{{nbsp}}
|-
!{{normal|{{rlpsi|/#alloc}}}}
!拥有的对象
|-
|{{vl|1}}
|（空）
|rowspan=2|（空）
|rowspan=8|{{c|false}}
|-
|{{vl|2}}
|{{c|a}}
|-
|{{vl|3}}
|（空）
|rowspan=2|{{c|std::forward&lt;U&gt;(v)}}
|-
|{{vl|4}}
|{{c|a}}
|-
|{{vl|5}}
|（空）
|rowspan=2|{{c|std::forward&lt;Args&gt;(args)}}
|-
|{{vl|6}}
|{{c|a}}
|-
|{{vl|7}}
|（空）
|rowspan=2|{{c|ilist, std::forward&lt;Args&gt;(args)}}
|-
|{{vl|8}}
|{{c|a}}
|-
|{{vl|9}}
|{{nbsp}}见下文{{nbsp}}
|rowspan=2|{{c|*other}}&lt;br&gt;{{small|（仅当 {{c|other}} 拥有值）}}
|rowspan=4|仅当 {{c|other}} 无值时是 {{c|true}}
|-
|{{vl|10}}
|{{c|a}}
|-
|{{vl|11}}
|{{box|{{c/core|std::move(other.}}{{rlpsi|/#alloc}}{{sep}}{{c/core|)}}}}
|获得所有权&lt;br&gt;{{small|（仅当 {{c|other}} 拥有值）}}
|-
|{{vl|12}}
|{{c|a}}
|见下文
|}

@9@ {{rlpsi|/#alloc}} 会以 {{box|{{c/core|std::allocator_traits&lt;Allocator&gt;::}}&lt;br&gt;{{nbspt|4}}{{c/core|select_on_container_copy_construction(other.}}{{rlpsi|/#alloc}}{{sep}}{{c/core|)}}}} 直接非列表初始化。

@12@ 拥有的对象会按以下方式初始化：
* 如果 {{c|other}} 无值，那么 {{c|*this}} 同样无值。
* 否则，如果 {{box|{{c/core|1=alloc == other.}}{{rlpsi|/#alloc}}}} 是 {{c|true}}，那么 {{c|*this}} 会获取 {{c|other}} 拥有的对象的所有权。
* 否则通过 {{rlpsi|/#alloc}} 以 {{c|*std::move(other)}} 构造拥有的对象。

===约束和补充信息===
@1@ {{cpp/enable if| {{c|std::is_default_constructible_v&lt;Allocator&gt;}} 是 {{c|true}}}}。
@@ {{cpp/error if| {{c|std::is_default_constructible_v&lt;T&gt;}} 是 {{c|false}}}}。

@2@ {{cpp/error if| {{c|std::is_default_constructible_v&lt;T&gt;}} 是 {{c|false}}}}。

@3@ {{cpp/enable if|满足以下所有条件}}：
* {{c|std::is_same_v&lt;std::remove_cvref_t&lt;U&gt;, std::indirect&gt;}} 是 {{c|false}}。
* {{c|std::is_same_v&lt;std::remove_cvref_t&lt;U&gt;, std::in_place_t&gt;}} 是 {{c|false}}。
* {{c|std::is_constructible_v&lt;T, U&gt;}} 是 {{c|true}}。
* {{c|std::is_default_constructible_v&lt;Allocator&gt;}} 是 {{c|true}}。

@4@ {{cpp/enable if|满足以下所有条件}}：
* {{c|std::is_same_v&lt;std::remove_cvref_t&lt;U&gt;, std::indirect&gt;}} 是 {{c|false}}。
* {{c|std::is_same_v&lt;std::remove_cvref_t&lt;U&gt;, std::in_place_t&gt;}} 是 {{c|false}}。
* {{c|std::is_constructible_v&lt;T, U&gt;}} 是 {{c|true}}。

@5@ {{cpp/enable if|以下所有值都是 {{c|true}} }}：
* {{c|std::is_constructible_v&lt;T, Args...&gt;}}
* {{c|std::is_default_constructible_v&lt;Allocator&gt;}}

@6@ {{cpp/enable if| {{c|std::is_constructible_v&lt;T, Args...&gt;}} 是 {{c|true}} }}。

@7@ {{cpp/enable if|以下所有值都是 {{c|true}} }}：
* {{c|std::is_constructible_v&lt;T, std::initializer_list&lt;I&gt;&amp;, Args...&gt;}}
* {{c|std::is_default_constructible_v&lt;Allocator&gt;}}

@8@ {{cpp/enable if| {{c|std::is_constructible_v&lt;T, std::initializer_list&lt;I&gt;&amp;, Args...&gt;}} 是 {{c|true}} }}。

@9,10@ {{cpp/error if| {{c|std::is_copy_constructible_v&lt;T&gt;}} 是 {{c|false}} }}。

@11@ 当构造完成时，{{c|other}} 无值。

@12@ {{cpp/error if| {{c|std::allocator_traits&lt;Allocator&gt;::is_always_equal::value}} 是 {{c|false}} 且 {{tt|T}} 是{{ls|cpp/language/type#不完整类型}}}}。

===异常===
除非 {{c/core|std::allocator_traits&lt;Allocator&gt;::allocate}} 或 {{c/core|std::allocator_traits&lt;Allocator&gt;::construct}} 抛出异常，否则不会抛出异常。

@12@ {{noexcept|std::allocator_traits&lt;Allocator&gt;::is_always_equal::value}}

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc allocator_arg_t}}
{{dsc inc|cpp/utility/dsc in_place}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|uninitialized_construct_using_allocator}}
{{cpp/memory/navbar}}
{{ddcl|header=memory|since=c++20|
template&lt; class T, class Alloc, class... Args &gt;
constexpr T* uninitialized_construct_using_allocator( T* p,
                                                      const Alloc&amp; alloc,
                                                      Args&amp;&amp;... args );
}}

以{{rlp|uses_allocator|使用分配器构造}}的方式在 {{c|p}} 所指示的未初始化内存位置创建给定类型 {{tt|T}} 的对象。

等价于 
{{source|1=
return std::apply(
    [&amp;]&lt;class... Xs&gt;(Xs&amp;&amp;...xs)
    {
        return std::construct_at(p, std::forward&lt;Xs&gt;(xs)...);
    },
    std::uses_allocator_construction_args&lt;T&gt;(alloc, std::forward&lt;Args&gt;(args)...));
}}

===参数===
{{par begin}}
{{par|p|将要放置对象的内存位置}}
{{par|alloc|要使用的分配器}}
{{par|args|传递给 {{tt|T}} 构造函数的实参}}
{{par end}}

===返回值===
指向新创建的 {{tt|T}} 类型对象的指针。

===异常===
可能抛出 {{tt|T}} 的构造函数所抛的任何异常，常包括 {{lc|std::bad_alloc}}。

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc uses_allocator}}
{{dsc inc|cpp/memory/dsc make_obj_using_allocator}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
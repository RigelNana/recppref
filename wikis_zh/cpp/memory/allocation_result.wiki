{{cpp/title|allocation_result}}
{{cpp/memory/navbar}}
{{ddcl|header=memory|since=c++23|1=
template&lt; class Pointer, class SizeType = std::size_t &gt;
struct allocation_result;
}}

{{tt|allocation_result}} 特化由适合的{{named req|Allocator}}类型的 {{tt|allocate_at_least}} 成员函数（例如 {{ltt|cpp/memory/allocator/allocate_at_least|std::allocator::allocate_at_least}}）及 {{ltt|cpp/memory/allocator_traits/allocate_at_least|std::allocator_traits::allocate_at_least}} 返回。

{{tt|allocation_result}} 的每个特化均无基类或除 {{tt|ptr}} 与 {{tt|count}} 之外的声明成员，从而它适合{{lt|cpp/language/aggregate initialization|聚合初始化}}及{{lt|cpp/language/structured binding|结构化绑定}}。

===模板形参===
{{par begin}}
{{par|Pointer|常为 {{c|std::allocator_traits&lt;Alloc&gt;::pointer}}，其中 {{tt|Alloc}} 为{{named req|Allocator}}类型}}
{{par|SizeType|常为 {{c|std::allocator_traits&lt;Alloc&gt;::size_type}}，其中 {{tt|Alloc}} 为{{named req|Allocator}}类型}}
{{par end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员名字|定义}}
{{dsc mem obj|ptr|nolink=true|{{tt|Pointer}} 类型的指针，常用于 {{tt|allocate_at_least}} 所分配的存储中首元素的地址}}
{{dsc mem obj|count|nolink=true|{{tt|SizeType}} 类型的值，常用于 {{tt|allocate_at_least}} 所分配的存储中的实际元素数}}
{{dsc end}}

===注解===
{{tt|Pointer}} 与 {{tt|SizeType}} 默认分别为指向对象类型的指针与 {{c|std::make_unsigned_t&lt;std::ptrdiff_t&gt;}}（几乎总是与 {{lc|std::size_t}} 为同一类型）。

{{feature test macro|__cpp_lib_allocate_at_least|std=C++23|value=202302L|分配器接口中的大小反馈}}

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/allocator/dsc allocate_at_least}}
{{dsc inc|cpp/memory/allocator_traits/dsc allocate_at_least}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/memory/polymorphic_allocator/title|new_object}}
{{cpp/memory/polymorphic_allocator/navbar}}

{{ddcl|since=c++20|
template&lt; class U, class... CtorArgs &gt;
U* new_object( CtorArgs&amp;&amp;... ctor_args );
}}

分配并构造 {{tt|U}} 类型的对象。

给定 {{tt|alloc}} 为一个 {{c|std::pmr::polymorphic_allocator&lt;T&gt;}}：
{{source|1=
U* p = alloc.new_object&lt;U&gt;(std::forward&lt;CtorArgs&gt;(ctor_args)...);
}}
等价于
{{source|1=
U* p = alloc.allocate_object&lt;U&gt;();
try
{
    alloc.construct(p, std::forward&lt;CtorArgs&gt;(ctor_args)...);
}
catch (...)
{
    alloc.deallocate_object(p);
    throw;
}
}}

===参数===
{{par begin}}
{{par|ctor_args|转发给 {{tt|U}} 的构造函数的参数}}
{{par end}}

===返回值===
指向分配并构造的对象的指针。

===注解===
引入此函数是为了用于全特化分配器 {{c|std::pmr::polymorphic_allocator&lt;&gt;}}，但它可能在任何特化中都有用，作为避免从 {{c|std::pmr::polymorphic_allocator&lt;T&gt;}} 重绑定到 {{c|std::pmr::polymorphic_allocator&lt;U&gt;}} 和必须单独调用 {{lc|allocate}}、{{lc|construct}} 及 {{lc|deallocate}} 的快捷方式。

因为不推导 {{tt|U}}，调用此函数时必须提供它为模板实参。

===异常===
可能抛出任何调用 {{c|allocate_object}} 或 {{tt|U}} 的构造函数所抛的异常。

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc allocate_bytes}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc allocate_object}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc allocate}}
{{dsc inc|cpp/memory/allocator traits/dsc allocate}}
{{dsc inc|cpp/memory/memory resource/dsc allocate}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/memory/polymorphic_allocator/title|polymorphic_allocator}}
{{cpp/memory/polymorphic_allocator/navbar}}
{{dcl begin}}
{{dcl|num=1|1=
polymorphic_allocator() noexcept;
}}
{{dcl|num=2|1=
polymorphic_allocator( const polymorphic_allocator&amp; other ) = default;
}}
{{dcl|num=3|1=
template&lt; class U &gt; 
polymorphic_allocator( const polymorphic_allocator&lt;U&gt;&amp; other ) noexcept;
}}
{{dcl|num=4|1=
polymorphic_allocator( std::pmr::memory_resource* r );
}}
{{dcl end}}

构造新的 {{tt|polymorphic_allocator}}。
@1@ 以 {{c|std::pmr::get_default_resource()}} 的返回值为底层内存资源构造一个 {{tt|polymorphic_allocator}}。
@2,3@ 以 {{c|other.resource()}} 为底层内存资源构造 {{tt|polymorphic_allocator}}。
@4@ 以 {{c|r}} 为底层内存资源构造 {{tt|polymorphic_allocator}}。此构造函数提供从 {{c|std::pmr::memory_resource*}} 的隐式转换。

===参数===
{{par begin}}
{{par|other|要复制的另一 {{tt|polymorphic_allocator}}}}
{{par|r|指向要使用的内存资源的指针。不可为空。}}
{{par end}}

===异常===
@4@ 不抛出任何异常。

===注解===
复制使用 {{tt|polymorphic_allocator}} 的容器不会调用分配器的复制构造函数。新容器会替代地以 {{tt|{{rlp|select_on_container_copy_construction}}}} 的返回值（默认构造的 {{tt|polymorphic_allocator}}）为其分配器。

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/polymorphic_allocator/dsc select_on_container_copy_construction}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/title|raw_storage_iterator}}
{{cpp/memory/raw_storage_iterator/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcl rev begin}}
{{dcl|until=c++17|1=
template&lt; class OutputIt, class T &gt;
class raw_storage_iterator
    : public std::iterator&lt;std::output_iterator_tag, void, void, void, void&gt;;
}}
{{dcl|since=c++17|deprecated=c++17|removed=c++20|1=
template&lt; class OutputIt, class T &gt;
class raw_storage_iterator;
}}
{{dcl rev end}}
{{dcl end}}

输出迭代器 {{tt|std::raw_storage_iterator}} 使得标准算法能存储结果于未初始化内存。凡在算法向解引用后的迭代器写入 {{tt|T}} 类型的对象时，对象就被复制构造到该迭代器所指向的未初始化存储中的位置。模板形参 {{tt|OutputIt}} 是任何满足{{named req|OutputIterator}}要求的类型，并拥有定义为返回对象的 {{c|operator*}}，{{c|operator&amp;}} 对该对象返回 {{tt|T*}} 类型值。通常，以类型 {{tt|T*}} 为 {{tt|OutputIt}}。

===类型要求===
{{par begin}}
{{par req named|OutputIt|OutputIterator}}
{{par end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/memory/raw_storage_iterator/dsc constructor}}
{{dsc inc|cpp/memory/raw_storage_iterator/dsc operator{{=}}}}
{{dsc inc|cpp/memory/raw_storage_iterator/dsc operator*}}
{{dsc inc|cpp/memory/raw_storage_iterator/dsc operator_arith}}
{{dsc inc|cpp/memory/raw_storage_iterator/dsc base}}
{{dsc end}}

{{cpp/iterator/iterator/inherit|std::output_iterator_tag|void|void|void|void}}

===注解===
{{tt|std::raw_storage_iterator}} 已被弃用，主要因为其行为并非异常安全。与 {{lc|std::uninitialized_copy}} 不同，它并不会安全地处理诸如 {{lc|std::copy}} 等操作中的异常，这可能会由于缺乏对成功构造对象数量的跟踪并在出现异常时对它们进行恰当的析构而导致资源泄露。

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;string&gt;

int main()
{
    const std::string s[] = {"This", "is", "a", "test", "."};
    std::string* p = std::allocator&lt;std::string&gt;().allocate(5);
 
    std::copy(std::begin(s), std::end(s),
              std::raw_storage_iterator&lt;std::string*, std::string&gt;(p));
 
    for (std::string* i = p; i != p + 5; ++i)
    {
        std::cout &lt;&lt; *i &lt;&lt; '\n';
        i-&gt;~basic_string&lt;char&gt;();
    }
    std::allocator&lt;std::string&gt;().deallocate(p, 5);
}
|output=
This
is
a
test
.
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc allocator_traits}}
{{dsc inc|cpp/memory/dsc scoped_allocator_adaptor}}
{{dsc inc|cpp/memory/dsc uses_allocator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{title|''voidify''}}
{{cpp/memory/navbar}}
{{ddcla|constexpr=c++17&lt;!-- std::addressof 从 C++17 才有 constexpr --&gt;|expos=yes|
template&lt; class T &gt;
void* voidify( T&amp; obj ) noexcept;
}}

返回 {{c|obj}} 的（隐式转换到 {{c/core|void*}} 的）地址。

===参数===
{{par begin}}
{{par|obj|要取地址的对象}}
{{par end}}

===返回值===
{{rev begin}}
{{rev|until=c++11|
{{c|&amp;obj}}
}}
{{rev|since=c++11|
{{c|std::addressof(obj)}}
}}
{{rev end}}

===注解===
这个仅用于阐述的函数由 {{stddoc|P0896R4}} 引入。它用于描述{{ls|cpp/memory#未初始化内存算法}}的效果，这些函数在未初始化的内存区域中构造对象。结果指针被用作[[cpp/language/new#布置 new|布置 {{c/core|new}} 表达式]]中的{{spar sep|布置参数}}。

返回值在一开始是 {{c|const_cast&lt;void*&gt;(static_cast&lt;const volatile void*&gt;(std::addressof(obj)))}}，它破坏了 const 正确性。{{lwg|3870}} 的解决方案移除了这些显式转型，只剩下到 {{c/core|void*}} 的隐式转换。

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3870|std=C++20|before=显式转换破坏了 const 正确性|after=移除这些转换}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc uninitialized_copy}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_copy}}
{{dsc inc|cpp/memory/dsc uninitialized_fill}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_fill}}
{{dsc inc|cpp/memory/dsc uninitialized_move}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_move}}
{{dsc inc|cpp/memory/dsc uninitialized_default_construct}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_default_construct}}
{{dsc inc|cpp/memory/dsc uninitialized_value_construct}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_value_construct}}
{{dsc inc|cpp/memory/dsc construct_at}}
{{dsc inc|cpp/memory/ranges/dsc construct_at}}
{{dsc end}}

{{langlinks|ar|de|en|es|fr|it|ja|pt|ru}}
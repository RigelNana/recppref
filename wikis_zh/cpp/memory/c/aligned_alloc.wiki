{{cpp/title|aligned_alloc}}
{{cpp/memory/navbar}}
{{ddcl|header=cstdlib|since=c++17|
void* aligned_alloc( std::size_t alignment, std::size_t size );
}}

分配 {{c|size}} 字节的未初始化存储，由 {{c|alignment}} 指定其对齐（在目标区域中[[cpp/language/object#对象创建|隐式创建]]对象）。{{c|size}} 参数必须是 {{c|alignment}} 的整数倍。

{{cpp/memory/thread_safety_note}}

=== 参数 ===
{{par begin}}
{{par|alignment|指定对齐。必须是实现支持的合法对齐。}}
{{par|size|分配的字节数。{{c|alignment}} 的整数倍。}}
{{par end}}

===返回值===
成功时，返回指向新分配内存起始的指针。为避免内存泄漏，返回的指针必须由 {{lc|std::free}} 或 {{lc|std::realloc}} 解分配。

失败时，返回空指针。

===注解===
传递不是 {{c|alignment}} 整数倍的 {{c|size}} 或不受实现支持或非法的 {{c|alignment}} 导致函数失败并返回空指针（C11 刚发布时，曾指定此情况为未定义行为，这为 DR 460 所纠正）。

作为“实现支持”要求的例子，POSIX 函数 [https://pubs.opengroup.org/onlinepubs/9699919799/functions/posix_memalign.html {{tt|posix_memalign}}] 接受任何是二的幂且为 {{c|sizeof(void*)}} 倍数的 {{c|alignment}}，而基于 POSIX 的 {{c|aligned_alloc}} 实现继承此要求。

基础对齐始终得到支持。若 {{c|alignment}} 是二的幂且不大于 {{c|alignof(std::max_align_t)}}，则 {{tt|aligned_alloc}} 可以简单地调用 {{lc|std::malloc}}。

常规的 {{lc|std::malloc}} 分配适用于具有任何基础对齐的对象类型的内存。此函数适用于过对齐分配，例如对 {{enwiki|Streaming SIMD Extensions|SSE}}、缓存线或 {{enwiki|Page (computer memory)#Multiple page sizes|VM 页}}边界。

Microsoft C 运行时库不支持此函数，因为其 {{lc|std::free}} 的实现[https://learn.microsoft.com/en-us/cpp/standard-library/cstdlib#remarks-6 无法处理任意种类的对齐分配]。 MS CRT 提供 [https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/aligned-malloc {{tt|_aligned_malloc}}] 作为替代（其结果应以 [https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/aligned-free {{tt|_aligned_free}}] 释放）。

===示例===
{{example|code=
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;

int main()
{
    int* p1 = static_cast&lt;int*&gt;(std::malloc(10*sizeof *p1));
    std::printf("默认对齐地址:      %p\n", static_cast&lt;void*&gt;(p1));
    std::free(p1);

    int* p2 = static_cast&lt;int*&gt;(std::aligned_alloc(1024, 10*sizeof *p2));
    std::printf("1024 字节对齐地址: %p\n", static_cast&lt;void*&gt;(p2));
    std::free(p2);
}
|p=true
|output=
默认对齐地址:      0x2221c20
1024 字节对齐地址: 0x2222400
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc aligned_storage}}
{{dsc see c|c/memory/aligned_alloc}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
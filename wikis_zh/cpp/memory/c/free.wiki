{{cpp/title|free}}
{{cpp/memory/navbar}}
{{ddcl|header=cstdlib|
void free( void* ptr );
}}

解分配先前由 {{lc|std::malloc}}、{{lc|std::calloc}}{{rev inl|since=c++17|、{{lc|std::aligned_alloc}}}} 或 {{lc|std::realloc}} 分配的内存空间。

若 {{c|ptr}} 是空指针，则函数不做任何事。

若 {{c|ptr}} 的值不等于先前 {{lc|std::malloc}}、{{lc|std::calloc}}{{rev inl|since=c++17|、{{lc|std::aligned_alloc}}}} 或 {{lc|std::realloc}} 返回的值，则行为未定义。

若 {{c|ptr}} 所指代的内存区域已被解分配，即已以 {{c|ptr}} 为实参调用 {{tt|std::free}} 或 {{lc|std::realloc}}，且无对 {{lc|std::malloc}}、{{lc|std::calloc}}{{rev inl|since=c++17|、{{lc|std::aligned_alloc}}}} 或 {{lc|std::realloc}} 的调用产生等于之前 {{c|ptr}} 的指针，则行为未定义。

若在 {{tt|std::free}} 返回后，通过指针 {{c|ptr}} 访问（除非另一分配函数恰好产生等于 {{c|ptr}} 的指针值），则行为未定义。

{{cpp/memory/thread_safety_note}}

===参数===
{{par begin}}
{{par|ptr|指向要解分配的内存的指针}}
{{par end}}

===返回值===
（无）

===注解===
此函数接受空指针（不做任何事）以减少特殊情况的总数。无论分配是否成功，分配函数返回的指针都能传递给 {{tt|std::free}}。

===示例===
{{example|code=
#include &lt;cstdlib&gt;

int main()
{
    int* p1 = (int*)std::malloc(10 * sizeof *p1);
    std::free(p1); // 每个分配的指针都必须释放

    int* p2 = (int*)std::calloc(10, sizeof *p2);
    int* p3 = (int*)std::realloc(p2, 1000 * sizeof *p3);
    if (!p3) // p3 为空表示 realloc 失败，而必须释放 p2
       std::free(p2);
    std::free(p3); // p3 无论是否为空都可以释放
}
}}

===参阅===
{{dsc begin}}
{{dsc see c|c/memory/free}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
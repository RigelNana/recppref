{{cpp/title|indirect}}
{{cpp/memory/indirect/navbar}}
{{dcl begin}}
{{dcl header|memory}}
{{dcl|num=1|1=
template&lt; class T, class Allocator = std::allocator&lt;T&gt; &gt;
class indirect;
}}
{{dcl|num=2|1=
namespace pmr {
    template&lt; class T &gt;
    using indirect = std::indirect&lt;T, std::pmr::polymorphic_allocator&lt;T&gt;&gt;;
}
}}
{{dcl end}}

@1@ {{tt|std::indirect}} 是包含动态分配的对象的具有类值语义的包装器。
@2@ {{tt|std::pmr::indirect}} 是使用[[cpp/memory/polymorphic_allocator|多态分配器]]的模板别名。

{{tt|std::indirect}} 对象管理拥有的对象的[[cpp/language/lifetime|生存期]]。{{tt|std::indirect}} 对象只有在被移动后才会不拥有对象，此时该 {{tt|std::indirect}} 对象''无值''。

每个 {{tt|std::indirect&lt;T, Allocator&gt;}} 类型对象都会使用一个 {{tt|Allocator}} 对象来分配和释放拥有的对象所需的存储。

如果程序声明了 {{tt|std::indirect}} 的显式特化或部分特化，那么行为未定义。

===模板形参===
{{par begin}}
{{par|T|拥有的对象的类型}}
{{par|Allocator|关联的分配器的类型}}
{{par hreq}}
{{par req|{{tt|T}} 可以是{{ls|cpp/language/type#不完整类型}}。}}
{{par req|{{cpp/error if| {{tt|T}} 是以下类型之一}}：
:* 非{{ls|cpp/language/type#对象类型}}
:* 数组类型
:* {{lc|std::in_place_t}}
:* {{lc|std::in_place_type_t}} 的特化
:* 有 cv 限定的类型
}}
{{par req|{{cpp/error if| {{tt|Allocator}} 不满足{{named req|Allocator}}的要求}}。}}
{{par req|{{cpp/error if| {{c/core|std::allocator_traits&lt;Allocator&gt;::value_type}} 与 {{tt|T}} 不同}}。}}
{{par end}}

===嵌套类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|value_type}}|{{tt|T}}}}
{{dsc|{{tt|allocator_type}}|{{tt|Allocator}}}}
{{dsc|{{tt|pointer}}|{{co|typename std::allocator_traits&lt;Allocator&gt;::pointer}}}}
{{dsc|{{tt|const_pointer}}|{{co|typename std::allocator_traits&lt;Allocator&gt;::const_pointer}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|描述}}
{{dsc expos mem obj|spec={{tt|pointer}}|p|id=p|指向拥有的值的指针}}
{{dsc expos mem obj|spec={{tt|Allocator}}|alloc|id=alloc|关联的分配器}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/memory/indirect/dsc constructor}}
{{dsc inc|cpp/memory/indirect/dsc destructor}}
{{dsc inc|cpp/memory/indirect/dsc operator{{=}}}}
{{dsc h2|观察器}}
{{dsc inc|cpp/memory/indirect/dsc operator*}}
{{dsc inc|cpp/memory/indirect/dsc valueless_after_move}}
{{dsc inc|cpp/memory/indirect/dsc get_allocator}}
{{dsc h2|修改器}}
{{dsc inc|cpp/memory/indirect/dsc swap}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/memory/indirect/dsc operator cmp}}
{{dsc inc|cpp/memory/indirect/dsc swap2}}
{{dsc end}}

===辅助类===
{{dsc begin}}
{{dsc inc|cpp/memory/indirect/dsc hash}}
{{dsc end}}

===[[cpp/memory/indirect/deduction guides|推导指引]]===

===注解===
{{feature test macro|__cpp_lib_indirect|{{tt|std::indirect}}|value=202502L|std=C++26}}

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/dsc polymorphic}}
{{dsc end}}

{{langlinks|es|en|ja|ru}}
{{cpp/memory/monotonic_buffer_resource/title|monotonic_buffer_resource}}
{{cpp/memory/monotonic_buffer_resource/navbar}}
{{dcl begin}}
{{dcl|since=c++17|num=1|1=
monotonic_buffer_resource();
}}
{{dcl|since=c++17|num=2|1=
explicit monotonic_buffer_resource( std::pmr::memory_resource* upstream );
}}
{{dcl|since=c++17|num=3|1=
explicit monotonic_buffer_resource( std::size_t initial_size );
}}
{{dcl|since=c++17|num=4|1=
monotonic_buffer_resource( std::size_t initial_size,
                           std::pmr::memory_resource* upstream );
}}
{{dcl|since=c++17|num=5|1=
monotonic_buffer_resource( void* buffer, std::size_t buffer_size );
}}
{{dcl|since=c++17|num=6|1=
monotonic_buffer_resource( void* buffer, std::size_t buffer_size,
                           std::pmr::memory_resource* upstream );
}}
{{dcl|since=c++17|num=7|1=
monotonic_buffer_resource( const monotonic_buffer_resource&amp; ) = delete;
}}
{{dcl end}}

构造 {{rlpt|/|monotonic_buffer_resource}}。不接收上游内存资源指针的构造函数以 {{lc|std::pmr::get_default_resource}} 为其上游内存资源。

@1,2@ 设置''当前缓冲区''为空，''下个缓冲区大小''为实现定义大小。
@3,4@ 设置''当前缓冲区''为空，''下个缓冲区大小''为不小于 {{c|initial_size}} 的值。
@5,6@ 设置''当前缓冲区''为 {{c|buffer}}，''下个缓冲区大小''为 {{c|buffer_size}}（但不小于 1）。然后以实现定义的增长因子（不必是整数）增加''下个缓冲区大小''。
@7@ 复制构造函数被弃置。

=== 参数 ===
{{par begin}}
{{par|upstream|要使用的上游内存资源；必须指向合法的内存资源}}
{{par|initial_size|要分配的首个缓冲区的最小大小；必须大于零}}
{{par|buffer|使用的初始缓冲区}}
{{par|buffer_size|初始缓冲区的大小；不能大于 {{ttb|buffer}} 的字节数}}
{{par end}}

{{langlinks|en|es|ja|ru}}
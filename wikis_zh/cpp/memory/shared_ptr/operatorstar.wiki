{{cpp/memory/shared_ptr/title|operator*|operator-&amp;gt;}}
{{cpp/memory/shared_ptr/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1= 
T&amp; operator*() const noexcept;
}}
{{dcl|num=2|since=c++11|1=
T* operator-&gt;() const noexcept;
}}
{{dcl end}}

解引用所存储的指针。若存储的指针为空，则行为未定义。

===参数===
（无）

===返回值===
@1@ 解引用存储的指针所得的结果，即 {{c|*get()}}。
@2@ 存储的指针，即 {{c|get()}}。

===注解===
当 {{tt|T}} 是{{rev inl|since=c++17|数组类型或（可有 cv 限定的）}} {{tt|void}} 类型时，是否声明函数 {{v|1}} 是未指定的。若它被声明，则其返回类型是未指定的，但函数声明应当良构（函数定义则未必）。这使得 {{c|std::shared_ptr&lt;void&gt;}} 可以实例化。

{{rev begin}}
{{rev|since=c++17|
当 {{tt|T}} 是数组类型时，是否声明函数 {{v|2}} 是未指定的。若它被声明，则其返回类型是未指定的，但函数声明应当良构。
}}{{rev end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;

struct Foo
{
    Foo(int in) : a(in) {}
    void print() const
    {
        std::cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; '\n';
    }
    int a;
};

int main()
{
    auto ptr = std::make_shared&lt;Foo&gt;(10);
    ptr-&gt;print();
    (*ptr).print();
}
|output=
a = 10
a = 10
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/shared_ptr/dsc get}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
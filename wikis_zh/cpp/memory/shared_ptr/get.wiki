{{cpp/memory/shared_ptr/title|get}}
{{cpp/memory/shared_ptr/navbar}}
{{dcl begin}}
{{dcl rev begin}}
{{dcl|until=c++17|
T* get() const noexcept;
}}
{{dcl|since=c++17|
element_type* get() const noexcept;
}}
{{dcl rev end}}
{{dcl end}}

返回存储的指针。

===参数===
（无）

===返回值===
存储的指针。

===注解===
{{tt|shared_ptr}} 可能在存储指向一个对象的指针时共享另一对象的所有权。{{tt|get()}} 返回存储的指针，而非被管理指针。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;string_view&gt;

int main()
{
    auto output = [](std::string_view msg, int const* pInt)
    {
        std::cout &lt;&lt; msg &lt;&lt; *pInt &lt;&lt; " 于 " &lt;&lt; pInt &lt;&lt; '\n';
    };

    int* pInt = new int(42);
    std::shared_ptr&lt;int&gt; pShared = std::make_shared&lt;int&gt;(42);

    output("裸指针: ", pInt);
//  output("共享指针: ", pShared); // 编译器错误
    output("共享指针: ", &amp;*pShared); // OK, 调用 operator*, 然后获取其地址
    output("共享指针 get(): ", pShared.get());

    delete pInt;

    std::cout &lt;&lt; "\n演示 shared_ptr 别名构造函数。\n";
    struct Base1 { int i1{}; };
    struct Base2 { int i2{}; };
    struct Derived : Base1, Base2 { int i3{}; };

    std::shared_ptr&lt;Derived&gt; p(new Derived());
    std::shared_ptr&lt;Base2&gt; q(p, static_cast&lt;Base2*&gt;(p.get()));
    std::cout &lt;&lt; "q 与 p 共享所有权，但指向 Base2 基类子对象:\n"
              &lt;&lt; "p.get(): " &lt;&lt; p.get() &lt;&lt; '\n'
              &lt;&lt; "q.get(): " &lt;&lt; q.get() &lt;&lt; '\n'
              &lt;&lt; "&amp;(p-&gt;i1): " &lt;&lt; &amp;(p-&gt;i1) &lt;&lt; '\n'
              &lt;&lt; "&amp;(p-&gt;i2): " &lt;&lt; &amp;(p-&gt;i2) &lt;&lt; '\n'
              &lt;&lt; "&amp;(p-&gt;i3): " &lt;&lt; &amp;(p-&gt;i3) &lt;&lt; '\n'
              &lt;&lt; "&amp;(q-&gt;i2): " &lt;&lt; &amp;(q-&gt;i2) &lt;&lt; '\n';
}
|p=true|output=
裸指针: 42 于 0xacac20
共享指针: 42 于 0xacac50
共享指针 get(): 42 于 0xacac50

演示 shared_ptr 别名构造函数。
q 与 p 共享所有权，但指向 Base2 基类子对象:
p.get(): 0xacac20
q.get(): 0xacac24
&amp;(p-&gt;i1): 0xacac20
&amp;(p-&gt;i2): 0xacac24
&amp;(p-&gt;i3): 0xacac28
&amp;(q-&gt;i2): 0xacac24
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/memory/shared_ptr/dsc operator*}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
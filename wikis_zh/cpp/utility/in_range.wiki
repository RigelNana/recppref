{{cpp/title|in_range}}
{{cpp/utility/navbar}}

{{dcl begin}}
{{dcl header|utility}}
{{dcl|since=c++20|1=
template&lt; class R, class T &gt;
constexpr bool in_range( T t ) noexcept;
}}
{{dcl end}}

若 {{c|t}} 的值处于 {{tt|R}} 可以表示的值的范围内，即 {{c|t}} 能转换到 {{tt|R}} 而无数据损失，则为 {{c|true}}。

若 {{tt|T}} 或 {{tt|R}} 不是[[cpp/language/types#整数类型|整数]]类型，或为字符类型或 {{c/core|bool}}，则为编译时错误。

===参数===
{{par begin}}
{{par|t|要测试的值}}
{{par end}}

===返回值===
若 {{c|t}} 的值可以 {{tt|R}} 表示则为 {{c|true}}，否则为 {{c|false}}。

===可能的实现===
{{eq fun|1=
template&lt;class R, class T&gt;
constexpr bool in_range(T t) noexcept
{
    return std::cmp_greater_equal(t, std::numeric_limits&lt;R&gt;::min()) &amp;&amp;
        std::cmp_less_equal(t, std::numeric_limits&lt;R&gt;::max());
}
}}

===注解===
此函数不能用于[[cpp/language/enum|枚举]]（包括 {{ltt std|cpp/types/byte}}）、{{c/core|char}}、{{c/core|char8_t}}、{{c/core|char16_t}}、{{c/core|char32_t}}、{{c/core|wchar_t}} 及 {{c/core|bool}}。

{{feature test macro|__cpp_lib_integer_comparison_functions|整数比较函数|value=202002L|std=C++20}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;utility&gt;

int main()
{
    std::cout &lt;&lt; std::boolalpha;

    std::cout &lt;&lt; std::in_range&lt;std::size_t&gt;(-1) &lt;&lt; '\n';
    std::cout &lt;&lt; std::in_range&lt;std::size_t&gt;(42) &lt;&lt; '\n';
}
|output=
false
true
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc min}}
{{dsc inc|cpp/algorithm/ranges/dsc max}}
{{dsc inc|cpp/algorithm/ranges/dsc clamp}}
{{dsc inc|cpp/numeric/dsc lerp}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
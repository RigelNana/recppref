{{title|1=operator==, operator&lt;=&gt;&lt;small&gt;(std::basic_stacktrace)&lt;/small&gt;}}
{{cpp/utility/basic_stacktrace/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
template&lt; class Allocator2 &gt;
friend bool operator==( const basic_stacktrace&amp; lhs,
                        const basic_stacktrace&lt;Allocator2&gt;&amp; rhs ) noexcept;
}}
{{dcl|num=2|since=c++23|1=
template&lt; class Allocator2 &gt;
friend std::strong_ordering
    operator&lt;=&gt;( const basic_stacktrace&amp; lhs,
                 const basic_stacktrace&lt;Allocator2&gt;&amp; rhs ) noexcept;
}}
{{dcl end}}

@1@ 检查 {{c|lhs}} 与 {{c|rhs}} 的内容是否相等，即它们拥有相同元素个数且 {{c|lhs}} 中的每个元素比较都等于 {{c|rhs}} 中相同位置的元素。

@@ 等价于 {{c|return std::equal(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());}} 。

@2@ 返回 {{c|lhs}} 与 {{c|rhs}} 中的栈踪迹条目个数的相对顺序，若它们不相等。否则（若 {{c|lhs}} 与 {{c|rhs}} 的元素个数相等），则返回 {{c|lhs}} 与 {{c|rhs}} 的元素的字典顺序。

@@ 等价于&lt;br&gt;{{c|1=if (auto cmp = lhs.size() &lt;=&gt; rhs.size(); cmp != 0)
    return cmp;
else
    return std::lexicographical_compare_three_way(lhs.begin(), lhs.end(),
                                                  rhs.begin(), rhs.end());}}。

{{cpp/hidden friend|std::basic_stacktrace&lt;Allocator&gt;|plural=yes|tmpl=yes}}

{{cpp/note synthesized compare}}

===参数===
{{par begin}}
{{par|lhs, rhs|要比较内容的 {{tt|basic_stacktrace}}}}
{{par end}}

===返回值===
@1@ 若 {{c|lhs}} 与 {{c|rhs}} 的内容相等则为 {{c|true}}，否则为 {{c|false}}。

@2@ {{c|1=lhs.size() &lt;=&gt; rhs.size()}}，若其结果不是 {{lc|std::strong_order::equal}}，否则为 {{c|lhs}} 与 {{c|rhs}} 的元素的字典顺序。

===复杂度===
@1,2@ 若 {{c|lhs}} 与 {{c|rhs}} 大小不同则为常数，否则与 {{c|lhs}} 的大小成线性。

===示例===
{{example}}

{{langlinks|en|es|ja|ru}}
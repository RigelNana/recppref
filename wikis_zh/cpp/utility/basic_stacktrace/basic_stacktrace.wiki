{{cpp/utility/basic_stacktrace/title|basic_stacktrace}}
{{cpp/utility/basic_stacktrace/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
basic_stacktrace() noexcept(/* see below */);
}}
{{dcl|num=2|since=c++23|
explicit basic_stacktrace( const allocator_type&amp; alloc ) noexcept;
}}
{{dcl|num=3|since=c++23|
basic_stacktrace( const basic_stacktrace&amp; other );
}}
{{dcl|num=4|since=c++23|
basic_stacktrace( basic_stacktrace&amp;&amp; other ) noexcept;
}}
{{dcl|num=5|since=c++23|
basic_stacktrace( const basic_stacktrace&amp; other,
                  const allocator_type&amp; alloc );
}}
{{dcl|num=6|since=c++23|
basic_stacktrace( basic_stacktrace&amp;&amp; other, const allocator_type&amp; alloc );
}}
{{dcl end}}

构造空的 {{tt|basic_stacktrace}}，或从 {{c|other}} 复制/移动。

@1@ 默认构造函数。构造带有默认构造的分配器的空 {{tt|basic_stacktrace}}。

@2@ 以 {{c|alloc}} 为分配器构造空 {{tt|basic_stacktrace}}。

@3@ 复制构造函数。以 {{c|other}} 的内容副本构造 {{tt|basic_stacktrace}}，如同通过调用 {{c|std::allocator_traits&lt;allocator_type&gt;::select_on_container_copy_construction(other.get_allocator())}} 获得分配器。

@4@ 移动构造函数。用移动语义以 {{c|other}} 的内容构造 {{tt|basic_stacktrace}}。从 {{c|other}} 的分配器移动构造分配器。构造后，{{c|other}} 被置于合法但未指定的状态。

@5@ 同复制构造函数，但以 {{c|alloc}} 为分配器。

@6@ 若 {{c|1=alloc == other.get_allocator()}} 则表现同移动构造函数。否则，用 {{c|alloc}} 分配内存并进行逐元素移动。以 {{c|alloc}} 为分配器。

{{v|3,5,6}} 在分配失败时可能抛出异常或构造空的 {{tt|basic_stacktrace}}。

===参数===
{{par begin}}
{{par|alloc|用于构造的 {{tt|basic_stacktrace}} 的所有内存分配的分配器}}
{{par|other|要复制/移动的另一 {{tt|basic_stacktrace}}}}
{{par end}}

===异常===
@1@ {{noexcept|std::is_nothrow_default_constructible_v&lt;allocator_type&gt;}}
@3,5,6@ 可能传播分配失败时抛出的异常。

===复杂度===
@1,2@ 常数。

@3@ 与 {{c|other}} 的大小成线性。

@4@ 常数。

@5@ 与 {{c|other}} 的大小成线性。

@6@ 若 {{c|1=alloc != other.get_allocator()}} 则与 {{c|other}} 的大小成线性，否则为常数。

===注解===
{{cpp/container/lwg2321-note|4}}

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc operator{{=}}}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc current}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
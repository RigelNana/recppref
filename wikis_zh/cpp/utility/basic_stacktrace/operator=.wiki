{{cpp/utility/basic_stacktrace/title|1=operator=}}
{{cpp/utility/basic_stacktrace/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
basic_stacktrace&amp; operator=( const basic_stacktrace&amp; other );
}}
{{dcl|num=2|since=c++23|1=
basic_stacktrace&amp; operator=( basic_stacktrace&amp;&amp; other )
    noexcept(/* 见下文 */);
}}
{{dcl end}}

替换 {{tt|basic_stacktrace}} 的内容。

@1@ 复制赋值运算符。以 {{c|other}} 的内容副本替换内容。
@@ 若 {{c|std::allocator_traits&lt;allocator_type&gt;::propagate_on_container_copy_assignment::value}} 为 {{c|true}}，则用 {{c|other}} 的分配器的副本替换 {{c|*this}} 的分配器。若 {{c|*this}} 的分配器在赋值后将与其旧值比较不相等，则用旧分配器解分配内存，然后在复制条目前用新分配器分配内存。否则，在可行时可能复用 {{c|*this}} 所拥有的内存。 

@2@ 移动赋值运算符。用移动语义以 {{c|other}} 的内容替换内容（即从 {{c|other}} 移动 {{c|other}} 中的数据到 {{c|*this}} 中）。此后 {{c|other}} 处于合法但未指定的状态。
@@ 若 {{c|std::allocator_traits&lt;allocator_type&gt;::propagate_on_container_move_assignment::value}} 为 {{c|true}}，则用 {{c|other}} 的分配器的副本替换 {{c|*this}} 的分配器。若它为 {{c|false}} 且 {{c|*this}} 与 {{c|other}} 的分配器比较不相等，则 {{c|*this}} 不能接管 {{c|other}} 所拥有的内存的所有权且必须单独地移动赋值每个条目，并用其自身的分配器按需分配额外内存。

任何情况下，原属于 {{c|*this}} 的栈踪迹条目要么被销毁，要么被逐元素赋值替换。

若实现强化了异常说明，则在分配失败时 {{c|*this}} 可能被设为空。

===参数===
{{par begin}}
{{par|other|用作源的另一 {{tt|basic_stacktrace}}}}
{{par end}}

===返回值===
{{c|*this}}

===复杂度===
@1@ 与 {{c|*this}} 和 {{c|other}} 的大小成线性。
@2@ 与 {{c|*this}} 的大小成线性，除非分配器比较不相等且不传播，此情况下与 {{c|*this}} 和 {{c|other}} 的大小成线性。

===异常===
@1@ {{cpp/impldef exception item}}
@2@ {{noexcept|std::allocator_traits&lt;Allocator&gt;::propagate_on_container_move_assignment::value
{{!!}} std::allocator_traits&lt;Allocator&gt;::is_always_equal::value}}

===注解===
{{cpp/container/lwg2321-note|2|assign=yes}}

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc constructor}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
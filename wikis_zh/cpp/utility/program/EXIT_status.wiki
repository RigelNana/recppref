{{title|EXIT_SUCCESS, EXIT_FAILURE}}
{{cpp/utility/program/navbar}}
{{dcl begin}}
{{dcl header|cstdlib}}
{{dcl|
#define EXIT_SUCCESS /* 由实现定义 */
}}
{{dcl|
#define EXIT_FAILURE /* 由实现定义 */
}}
{{dcl end}}

{{tt|EXIT_SUCCESS}} 和 {{tt|EXIT_FAILURE}} 宏展开成能用作 {{lc|exit}} 的实参的整数常量表达式（从而作为从 {{lt|cpp/language/main function|{{tt|main}} 函数}}返回的值），并指示程序执行状态。

{{rrev|since=c++23|
要求独立实现提供 {{tt|EXIT_SUCCESS}} 与 {{tt|EXIT_FAILURE}}。
}}

{{dsc begin}}
{{dsc hitem|常量|说明}}
{{dsc|{{tt|EXIT_SUCCESS}}|程序执行成功}}
{{dsc|{{tt|EXIT_FAILURE}}|程序执行失败}}
{{dsc end}}

===注解===
{{tt|EXIT_SUCCESS}} 与值零均指示成功的程序执行状态（见 {{lc|std::exit}}），尽管不要求 {{tt|EXIT_SUCCESS}} 等于零。

尽管 C++23 起要求 {{tt|EXIT_SUCCESS}} 与 {{tt|EXIT_FAILURE}} 为独立，标准不要求它们在独立的 C 实现中可用。

===示例===
{{example
|code=
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
 
int main(int argc, char* argv[])
{
    if (argc &lt;= 1)
    {
        std::cout &lt;&lt; "需要至少一个命令行参数\n";
        return EXIT_FAILURE;
    }
 
    std::cout &lt;&lt; argv[1] &lt;&lt; '\n';
    return EXIT_SUCCESS;
}
|p=true
|output=
The quick brown fox jumps over the lazy cat
}}

===参阅===
{{dsc begin}}
{{dsc see c|c/program/EXIT_status|EXIT_SUCCESS|EXIT_FAILURE}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
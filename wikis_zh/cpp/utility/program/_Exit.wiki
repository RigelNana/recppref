{{cpp/title|_Exit}}
{{cpp/utility/program/navbar}}
{{ddcl|header=cstdlib|since=c++11|
[[noreturn]] void _Exit( int exit_code ) noexcept;
}}

导致发生正常程序终止，而不清理资源。

不调用拥有自动、线程局域和静态存储期对象的析构函数。不调用传递给 {{lc|std::at_quick_exit()}} 或 {{lc|std::atexit()}} 的函数。是否关闭打开的资源，例如文件，是实现定义的。

若 {{tt|exit_code}} 为 {{lc|0}} 或 {{lc|EXIT_SUCCESS}}，则向宿主环境返回一个指示成功终止的实现定义状态。若 {{tt|exit_code}} 为 {{lc|EXIT_FAILURE}}，则返回指示''不成功''终止的实现定义状态。其他情况下返回实现定义的状态值。

{{rrev|since=c++23|
要求独立实现提供 {{tt|std::_Exit}}。
}}

===参数===
{{par begin}}
{{par|exit_code|程序的退出状态}}
{{par end}}

===返回值===
（无）

===注解===
尽管 {{tt|_Exit}} 从 C++23 起要求为独立，标准不要求它在独立的 C 实现中可用。

===示例===
{{example
|code=
#include &lt;iostream&gt;

class Static
{
public:
    ~Static() 
    {
        std::cout &lt;&lt; "静态析构\n";
    }
};

class Local
{
public:
    ~Local() 
    {
        std::cout &lt;&lt; "局部析构\n";
    }
};

Static static_variable; // 此对象的析构函数将*不*被调用

void atexit_handler()
{
    std::cout &lt;&lt; "atexit 处理函数\n";
}

int main()
{
    Local local_variable; // 将*不*调用析构函数
    
    // 将*不*调用处理函数
    const int result = std::atexit(atexit_handler);

    if (result != 0)
    {
        std::cerr &lt;&lt; "atexit 注册失败\n";
        return EXIT_FAILURE;
    }

    std::cout &lt;&lt; "test" &lt;&lt; std::endl; // 此处需要由 std::endl 冲洗，否则不会打印内容
    std::_Exit(EXIT_FAILURE);
}
|output=
test
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/program/dsc abort}}
{{dsc inc|cpp/utility/program/dsc exit}}
{{dsc see c|c/program/_Exit}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
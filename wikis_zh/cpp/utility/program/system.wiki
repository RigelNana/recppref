{{cpp/title|system}}
{{cpp/utility/program/navbar}}
{{ddcl|header=cstdlib|
int system( const char* command );
}}

以参数 {{tt|command}} 调用宿主环境的命令处理器（例如 {{tt|/bin/sh}}、{{tt|cmd.exe}}）。返回由实现定义的值（通常是被调用程序所返回的值）。

若 {{tt|command}} 为空指针，则检查运行环境是否有命令处理器，并当且仅当命令处理器存在时返回非零。

===参数===
{{par begin}}
{{par|command|标识要在命令处理器中运行的命令的字符串。若给出空指针，则检查命令处理器的存在性}}
{{par end}}

===返回值===
由实现定义的值。若 {{tt|command}} 为空指针，则当且仅当命令处理器存在时返回非零值。

===注解===
POSIX 系统上，可用 [https://pubs.opengroup.org/onlinepubs/9699919799/functions/wait.html {{tt|WEXITSTATUS}} 和 {{tt|WSTOPSIG}}] 分解返回值。

相关的 POSIX 函数 [https://pubs.opengroup.org/onlinepubs/9699919799/functions/popen.html {{tt|popen}}] 使调用方可获取 {{tt|command}} 生成的输出。

如果孵化的进程进行任何屏幕 I/O 的话，显式冲洗 {{lc|std::cout}} 在调用 {{lc|std::system}} 前也是必须的。

===示例===
{{example
|
|code=
#include &lt;cstdlib&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;

int main()
{
    std::system("ls -l &gt;test.txt"); // 执行 UNIX 命令 "ls -l &gt;test.txt"
    std::cout &lt;&lt; std::ifstream("test.txt").rdbuf();
}
|p=true
|output=
total 16
-rwxr-xr-x 1 2001 2000 8859 Sep 30 20:52 a.out
-rw-rw-rw- 1 2001 2000  161 Sep 30 20:52 main.cpp
-rw-r--r-- 1 2001 2000    0 Sep 30 20:52 test.txt
}}

===参阅===
{{dsc begin}}
{{dsc see c|c/program/system}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|quick_exit}}
{{cpp/utility/program/navbar}}
{{ddcl|header=cstdlib|since=c++11|
[[noreturn]] void quick_exit( int exit_code ) noexcept;
}}

导致发生正常程序终止，而不完全清理资源。

以注册顺序的逆序调用传递给 {{lc|std::at_quick_exit}} 的函数。若有异常试图从这些函数中传播出来，则调用 {{lc|std::terminate}}。调用注册的函数后，调用 {{c|std::_Exit(exit_code)}}。

不调用传递给 {{lc|std::atexit}} 的函数。

===参数===
{{par begin}}
{{par|exit_code|程序的退出状态}}
{{par end}}

===返回值===
（无）

===示例===
{{example
|code=
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;

template&lt;int N&gt;
void quick_exit_handler()
{
    std::cout &lt;&lt; "quick_exit 处理函数 #" &lt;&lt; N &lt;&lt; std::endl; // 冲洗是有意的
}

void at_exit_handler()
{
    std::cout &lt;&lt; "at_exit 处理函数\n";
}

int main()
{
    if (std::at_quick_exit(quick_exit_handler&lt;1&gt;) {{!!}}
        std::at_quick_exit(quick_exit_handler&lt;2&gt;))
    {
        std::cerr &lt;&lt; "注册失败\n";
        return EXIT_FAILURE;
    }

    std::atexit(at_exit_handler); // 不会调用处理函数

    struct R { ~R() { std::cout &lt;&lt; "析构函数\n"; } } resource;

    /*...*/

    std::quick_exit(EXIT_SUCCESS);

    std::cout &lt;&lt; "这条语句不可达...\n";
}
|output=
quick_exit 处理函数 #2
quick_exit 处理函数 #1
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/program/dsc abort}}
{{dsc inc|cpp/utility/program/dsc exit}}
{{dsc inc|cpp/utility/program/dsc atexit}}
{{dsc inc|cpp/utility/program/dsc at_quick_exit}}
{{dsc see c|c/program/quick_exit}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
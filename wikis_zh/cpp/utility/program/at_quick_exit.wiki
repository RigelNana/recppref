{{cpp/title|at_quick_exit}}
{{cpp/utility/program/navbar}}
{{dcl begin}}
{{dcl header|cstdlib}}
{{dcl|num=1|since=c++11|
int at_quick_exit( /*atexit-handler*/* func ) noexcept;
int at_quick_exit( /*c-atexit-handler*/* func ) noexcept;
}}
{{dcl|num=2|notes={{mark expos}}|1=
extern "C++" using /*atexit-handler*/ = void();
extern "C" using /*c-atexit-handler*/ = void();
}}
{{dcl end}}

注册 {{tt|func}} 所指向的函数，使得在快速程序终止（通过 {{lc|std::quick_exit}}）时调用它。

从多个线程调用此函数不引起数据竞争。实现保证支持至少注册 {{c|32}} 个函数。确切的限制由实现定义。

{{rlp|exit|正常程序终止}}时不会调用注册的函数。若需要在此种情况下调用函数，必须使用 {{lc|std::atexit}}。

===参数===
{{par begin}}
{{par|func|指向要在快速程序终止时调用的函数的指针}}
{{par end}}

===返回值===
若注册成功则为 {{c|0}}，否则值不为零。

===注解===
两个重载有区别，因为形参 {{tt|func}} 的类型有别（[[cpp/language/language linkage|语言链接]]是其类型的一部分）。

===示例===
{{example
|code=
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;

void f1()
{
    std::cout &lt;&lt; "推入第一个" &lt;&lt; std::endl; // 冲洗是有意的
}

extern "C" void f2()
{
    std::cout &lt;&lt; "推入第二个\n";
}

int main()
{
    auto f3 = []
    {
        std::cout &lt;&lt; "推入第三个\n";
    };

    std::at_quick_exit(f1);
    std::at_quick_exit(f2);
    std::at_quick_exit(f3);
    std::quick_exit(0);
}
|output=
推入第三个
推入第二个
推入第一个
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/program/dsc abort}}
{{dsc inc|cpp/utility/program/dsc exit}}
{{dsc inc|cpp/utility/program/dsc atexit}}
{{dsc inc|cpp/utility/program/dsc quick_exit}}
{{dsc see c|c/program/at_quick_exit}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
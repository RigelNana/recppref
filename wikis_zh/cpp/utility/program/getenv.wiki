{{cpp/title|getenv}}
{{cpp/utility/program/navbar}}
{{ddcl|header=cstdlib|
char* getenv( const char* env_var );
}}

于宿主环境（操作系统）提供的''环境列表''中，搜索与 {{tt|env_var}} 所指向的 C 字符串相匹配的字符串，并返回指向与匹配的环境列表成员关联的 C 字符串的指针。

{{rev begin}}
{{rev|until=c++11|
不要求此函数为线程安全。到 {{tt|getenv}} 的另一调用，还有到 POSIX 函数 [https://pubs.opengroup.org/onlinepubs/9699919799/functions/setenv.html {{tt|setenv()}}]、[https://pubs.opengroup.org/onlinepubs/9699919799/functions/unsetenv.html {{tt|unsetenv()}}] 及 [https://pubs.opengroup.org/onlinepubs/9699919799/functions/putenv.html {{tt|putenv()}}] 的调用可能使先前调用所返回的指针失效，或修改从先前调用得到的字符串。
}}
{{rev|since=c++11|
只要无其他函数修改宿主环境，则此函数为线程安全（从多个线程调用它不引入数据竞争）。尤其是若无同步地调用，则 POSIX 函数 [https://pubs.opengroup.org/onlinepubs/9699919799/functions/setenv.html {{tt|setenv()}}]、[https://pubs.opengroup.org/onlinepubs/9699919799/functions/unsetenv.html {{tt|unsetenv()}}] 及 [https://pubs.opengroup.org/onlinepubs/9699919799/functions/putenv.html {{tt|putenv()}}] 会引入数据竞争。
}}
{{rev end}}

修改 {{tt|getenv}} 所返回的字符串引起未定义行为。

===参数===
{{par begin}}
{{par|env_var|标识要查找的环境变量名的空终止字符串}}
{{par end}}

===返回值===
标识环境变量值的字符串，或若找不到这个变量则为空指针。

===注解===
POSIX 系统上，[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap08.html#tag_08 环境变量]亦可通过于 {{header|unistd.h|&lt;!--to skip red-link generation--&gt;lang=c}} 声明为 {{c|extern char** environ;}} 的全局变量 {{tt|environ}}，及通过可选的 [[cpp/language/main function|main 函数]]第三实参 {{tt|envp}} 访问。

===示例===
{{example
|code=
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;

int main()
{
    if (const char* env_p = std::getenv("PATH"))
        std::cout &lt;&lt; "您的 PATH 是: " &lt;&lt; env_p &lt;&lt; '\n';
}
|p=true
|output=
您的 PATH 是: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
}}

===参阅===
{{dsc begin}}
{{dsc see c|c/program/getenv}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
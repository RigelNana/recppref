{{cpp/title|bitset}}
{{cpp/utility/bitset/navbar}}
{{ddcl|header=bitset|
template&lt; std::size_t N &gt;
class bitset;
}}

类模板 {{tt|bitset}} 表示一个 {{tt|N}} 位的固定大小序列。可以用标准逻辑运算符操作 {{tt|bitset}}，并将它与字符串和整数相互转换。对于字符串表示和移位操作的列举方向来说，这个序列被当做最低索引元素位于''右侧''，类似于整数的二进制表示。

{{tt|bitset}} 满足{{named req|CopyConstructible}}及{{named req|CopyAssignable}}的要求。

{{cpp/is_constexpr|since=c++23}}

===模板形参===
{{par begin}}
{{par|N|要为 {{tt|bitset}} 分配存储的位数}}
{{par end}}

===成员类型===
{{dsc begin}}
{{dsc class|cpp/utility/bitset/reference|表示到一个位的引用的代理类}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/utility/bitset/dsc constructor}}
{{dsc inc|cpp/utility/bitset/dsc operator_cmp}}

{{dsc h2|元素访问}}
{{dsc inc|cpp/utility/bitset/dsc operator_at}}
{{dsc inc|cpp/utility/bitset/dsc test}}
{{dsc inc|cpp/utility/bitset/dsc all_any_none}}
{{dsc inc|cpp/utility/bitset/dsc count}}

{{dsc h2|容量}}
{{dsc inc|cpp/utility/bitset/dsc size}}

{{dsc h2|修改器}}
{{dsc inc|cpp/utility/bitset/dsc operator_logic}}
{{dsc inc|cpp/utility/bitset/dsc operator_ltltgtgt}}
{{dsc inc|cpp/utility/bitset/dsc set}}
{{dsc inc|cpp/utility/bitset/dsc reset}}
{{dsc inc|cpp/utility/bitset/dsc flip}}

{{dsc h2|转换}}
{{dsc inc|cpp/utility/bitset/dsc to_string}}
{{dsc inc|cpp/utility/bitset/dsc to_ulong}}
{{dsc inc|cpp/utility/bitset/dsc to_ullong}}

{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/utility/bitset/dsc operator_logic2}}
{{dsc inc|cpp/utility/bitset/dsc operator_ltltgtgt2}}
{{dsc end}}

===辅助类===
{{dsc begin}}
{{dsc inc|cpp/utility/bitset/dsc hash}}
{{dsc end}}

===注解===
若某个位集合在编译时大小未知，或者必须在运行时改变其大小，则可代之以使用 {{ltt|cpp/container/vector_bool|std::vector&lt;bool&gt;}} 或 [https://www.boost.org/doc/libs/release/libs/dynamic_bitset/dynamic_bitset.html {{tt|boost::dynamic_bitset}}] 之类的动态类型。

{{ftm begin}}
{{ftm|__cpp_lib_constexpr_bitset|std=C++23|value=202207L|使 {{tt|std::bitset}} 更 constexpr}}
{{ftm|__cpp_lib_bitset|std=C++26|value=202306L|{{tt|std::bitset}} 的 {{lc|std::string_view}} 接口}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;bitset&gt;
#include &lt;cassert&gt;
#include &lt;cstddef&gt;
#include &lt;iostream&gt;

int main()
{
    typedef std::size_t length_t, position_t; // 提示

    // 构造函数：
    constexpr std::bitset&lt;4&gt; b1;
    constexpr std::bitset&lt;4&gt; b2{0xA}; // == 0B1010
    std::bitset&lt;4&gt; b3{"0011"}; // C++23 起也可以为 constexpr
    std::bitset&lt;8&gt; b4{"ABBA", length_t(4), /*0:*/'A', /*1:*/'B'}; // == 0B0000'0110

    // 能打印出 bitset 到流：
    std::cout &lt;&lt; "b1:" &lt;&lt; b1 &lt;&lt; "; b2:" &lt;&lt; b2 &lt;&lt; "; b3:" &lt;&lt; b3 &lt;&lt; "; b4:" &lt;&lt; b4 &lt;&lt; '\n';

    // bitset 支持逐位运算：
    b3 {{!}}= 0b0100; assert(b3 == 0b0111);
    b3 &amp;= 0b0011; assert(b3 == 0b0011);
    b3 ^= std::bitset&lt;4&gt;{0b1100}; assert(b3 == 0b1111);

    // 整个集合上的操作：
    b3.reset(); assert(b3 == 0);
    b3.set(); assert(b3 == 0b1111);
    assert(b3.all() &amp;&amp; b3.any() &amp;&amp; !b3.none());
    b3.flip(); assert(b3 == 0);

    // 单独位上的操作：
    b3.set(position_t(1), true); assert(b3 == 0b0010);
    b3.set(position_t(1), false); assert(b3 == 0);
    b3.flip(position_t(2)); assert(b3 == 0b0100);
    b3.reset(position_t(2)); assert(b3 == 0);

    // 支持下标 operator[]：
    b3[2] = true; assert(true == b3[2]);

    // 其他操作：
    assert(b3.count() == 1);
    assert(b3.size() == 4);
    assert(b3.to_ullong() == 0b0100ULL);
    assert(b3.to_string() == "0100");
}
|output=b1:0000; b2:1010; b3:0011; b4:00000110
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/container/dsc vector_bool}}
{{dsc|[[cpp/numeric#位操纵 (C++20 起)|'''位操纵''']] {{mark c++20}}|用于访问、操纵和处理单独的位和位序列的工具}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
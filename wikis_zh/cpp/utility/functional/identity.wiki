{{cpp/title|identity}}
{{cpp/utility/functional/navbar}}
{{ddcl|header=functional|since=c++20|
struct identity;
}}

{{tt|std::identity}} 是函数对象类型，它的 {{c|operator()}} 直接返回未经更改的实参。

===成员类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|is_transparent}}|[[cpp/utility/functional#透明函数对象|未指定]]}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem fun|cpp/utility/functional/identity|title=operator()|inlinemem=true|返回不更改的实参}}
{{dsc end}}

{{member|{{small|std::identity::}}operator()|2=
{{ddcl|
template&lt; class T &gt;
constexpr T&amp;&amp; operator()( T&amp;&amp; t ) const noexcept;
}}

返回 {{c|std::forward&lt;T&gt;(t)}}。

===参数===
{{par begin}}
{{par|t|要返回的实参}}
{{par end}}

===返回值===
{{c|std::forward&lt;T&gt;(t)}}。
}}

===注解===
{{tt|std::identity}} 在[[cpp/algorithm/ranges|受约束算法]]中担当默认投影。通常不需要直接使用它。

===示例===
{{example|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string&gt;

struct Pair
{
    int n;
    std::string s;
    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Pair&amp; p)
    {
        return os &lt;&lt; "{ " &lt;&lt; p.n &lt;&lt; ", " &lt;&lt; p.s &lt;&lt; " }";
    }
};

// 范围打印器能打印投影（修改）后的范围元素。
template&lt;std::ranges::input_range R,
         typename Projection = std::identity&gt; //&lt;- 注意默认投影
void print(std::string_view const rem, R&amp;&amp; range, Projection projection = {})
{
    std::cout &lt;&lt; rem &lt;&lt; '{';
    std::ranges::for_each(
        range,
        [O = 0](const auto&amp; o) mutable { std::cout &lt;&lt; (O++ ? ", " : "") &lt;&lt; o; },
        projection
    );
    std::cout &lt;&lt; "}\n";
}

int main()
{
    const auto v = {Pair{1, "one"}, {2, "two"}, {3, "three"}&lt;!----&gt;};
    
    print("将 std::identity 用作投影打印：", v);
    print("投影 Pair::n：", v, &amp;Pair::n);
    print("投影 Pair::s：", v, &amp;Pair::s);
    print("将自定义闭包用作投影打印：", v,
        [](Pair const&amp; p) { return std::to_string(p.n) + ':' + p.s; });
}
|output=
将 std::identity 用作投影打印：{&lt;!----&gt;{1, one}, {2, two}, {3, three}&lt;!----&gt;}
投影 Pair::n：{1, 2, 3}
投影 Pair::s：{one, two, three}
将自定义闭包用作投影打印：{1:one, 2:two, 3:three}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc type_identity}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/title|binder1st|binder2nd}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl|deprecated=c++11|until=c++17|num=1|
template&lt; class Fn &gt;
class binder1st :
    public std::unary_function&lt;typename Fn::second_argument_type, 
                               typename Fn::result_type&gt; {
protected:
    Fn op;
    typename Fn::first_argument_type value;
public:
    binder1st(const Fn&amp; fn, 
              const typename Fn::first_argument_type&amp; value);

    typename Fn::result_type 
        operator()(const typename Fn::second_argument_type&amp; x) const;

    typename Fn::result_type 
        operator()(typename Fn::second_argument_type&amp; x) const;
};
}}
{{dcl|deprecated=c++11|until=c++17|num=2|
template&lt; class Fn &gt;
class binder2nd :
    public unary_function&lt;typename Fn::first_argument_type,
                          typename Fn::result_type&gt; {
protected:
    Fn op;
    typename Fn::second_argument_type value;
public:
    binder2nd(const Fn&amp; fn, 
              const typename Fn::second_argument_type&amp; value);

    typename Fn::result_type 
        operator()(const typename Fn::first_argument_type&amp; x) const;

    typename Fn::result_type 
        operator()(typename Fn::first_argument_type&amp; x) const;
};
}}
{{dcl end}}

绑定一个实参到二元函数的函数对象。

在构造时将形参的值传递给对象并在对象中存储。每当通过 {{tt|operator()}} 调用函数对象时，都会将存储的值作为实参之一传递，将另一实参作为 {{tt|operator()}} 的实参传递。产生的函数对象是一元函数。

@1@ 绑定第一形参到对象构造时给定的值 {{c|value}}。

@2@ 绑定第二形参到对象构造时给定的值 {{c|value}}。

===示例===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

const double pi = std::acos(-1); // C++20 中使用 std::numbers::pi

int main()
{
    // C++11 中弃用，C++17 中移除
    auto f1 = std::bind1st(std::multiplies&lt;double&gt;(), pi / 180.0);
    
    // C++11 的替代方案
    auto f2 = [](double a) { return a * pi / 180.0; };
    
    for (double n : {0, 30, 45, 60, 90, 180})
        std::cout &lt;&lt; n &lt;&lt; "°\t" &lt;&lt; std::fixed &lt;&lt; "= "
                  &lt;&lt; f1(n) &lt;&lt; " 弧度（使用绑定器）\t="
                  &lt;&lt; f2(n) &lt;&lt; " 弧度（使用 lambda）\n"
                  &lt;&lt; std::defaultfloat;
}
|output=
0°	= 0.000000 弧度（使用绑定器）	=0.000000 弧度（使用 lambda）
30°	= 0.523599 弧度（使用绑定器）	=0.523599 弧度（使用 lambda）
45°	= 0.785398 弧度（使用绑定器）	=0.785398 弧度（使用 lambda）
60°	= 1.047198 弧度（使用绑定器）	=1.047198 弧度（使用 lambda）
90°	= 1.570796 弧度（使用绑定器）	=1.570796 弧度（使用 lambda）
180°	= 3.141593 弧度（使用绑定器）	=3.141593 弧度（使用 lambda）
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=109|std=C++98|before={{tt|operator()}} 无法修改传递给它的实参|after=添加重载以处理这种情况}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc bind12}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
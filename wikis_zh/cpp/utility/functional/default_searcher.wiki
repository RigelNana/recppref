{{cpp/title|default_searcher}}
{{cpp/utility/functional/navbar}}

{{dcl begin}}
{{dcl header|functional}}
{{dcl|since=c++17|
template&lt; class ForwardIt, class BinaryPredicate {{=}} std::equal_to&lt;&gt; &gt;
class default_searcher;
}}
{{dcl end}}

适合用于 {{lc|std::search}} 的{{named req|Searcher}}重载的类，它将搜索操作委派到 C++17 前标准库的 {{lc|std::search}}。

{{tt|default_searcher}} {{named req|CopyConstructible}}且{{named req|CopyAssignable}}。

===成员函数===
{{member|{{small|std::default_searcher::}}default_searcher|2=
{{dcl begin}}
{{dcla|since=c++17|constexpr=c++20|1=
default_searcher( ForwardIt pat_first,
                  ForwardIt pat_last,
                  BinaryPredicate pred = BinaryPredicate() );
}}
{{dcl end}}
通过存储 {{c|pat_first}}、{{c|pat_last}} 和 {{c|pred}} 的副本构造一个 {{tt|std::default_searcher}}。

===参数===
{{par begin}}
{{par|pat_first, pat_last|表示要搜索的字符串的一对迭代器}}
{{par|pred|用于确定相等性的可调用对象}}
{{par end}}

===异常===
{{tt|BinaryPredicate}} 或 {{tt|ForwardIt}} 的复制构造函数抛出的任何异常。
}}

{{member|{{small|std::default_searcher::}}operator()|2=
{{dcl begin}}
{{dcla|since=c++17|constexpr=c++20|1=
template&lt; class ForwardIt2 &gt;
std::pair&lt;ForwardIt2, ForwardIt2&gt;
    operator()( ForwardIt2 first, ForwardIt2 last ) const;
}}
{{dcl end}}
{{lc|std::search}} 的搜索器（Searcher）重载调用该成员函数，以用此搜索器进行搜索。

返回一对迭代器 {{tt|i, j}}，其中 {{tt|i}} 为 {{c|std::search(first, last, pat_first, pat_last, pred)}}，而 {{tt|j}} 为 {{c|std::next(i, std::distance(pat_first, pat_last))}}，除非 {{tt|std::search}} 返回 {{tt|last}} （无匹配），此情况下 {{tt|j}} 也等于 {{tt|last}}。

===参数===
{{par begin}}
{{par|first, last|指代要检验的字符串的一对迭代器}}
{{par end}}

===返回值===
一对迭代器，指向 {{range|first|last}} 中所定位的与 {{range|pat_first|pat_last}} 按 {{c|pred}} 的定义比较相等的子序列的首及尾后一位，否则返回一对 {{c|last}} 的副本。
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;
 
int main()
{
    constexpr std::string_view in =
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed "
        "do eiusmod tempor incididunt ut labore et dolore magna aliqua";

    const std::string_view needle{"pisci"};

    auto it = std::search(in.begin(), in.end(),
                  std::default_searcher(
                      needle.begin(), needle.end()));
    if (it != in.end())
        std::cout &lt;&lt; "字符串 " &lt;&lt; std::quoted(needle) &lt;&lt; " 在偏移 "
                  &lt;&lt; it - in.begin() &lt;&lt; " 处找到\n";
    else
        std::cout &lt;&lt; "字符串 " &lt;&lt; std::quoted(needle) &lt;&lt; " 未找到\n";
}
|output=
字符串 "pisci" 在偏移 43 处找到
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc search}}
{{dsc inc|cpp/utility/functional/dsc boyer_moore_searcher}}
{{dsc inc|cpp/utility/functional/dsc boyer_moore_horspool_searcher}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
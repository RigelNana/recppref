{{cpp/title|binary_function}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl|until=c++17|deprecated=c++11|1=
template&lt;
    class Arg1,
    class Arg2, 
    class Result
&gt; struct binary_function;
}}
{{dcl end}}

{{tt|binary_function}} 是用于创建拥有两个实参的函数对象的基类。

{{tt|binary_function}} 不定义 {{c|operator()}}；它期待派生类定义此运算符。{{tt|binary_function}} 只提供三个类型——{{tt|first_argument_type}}、{{tt|second_argument_type}} 和 {{tt|result_type}}——它们由模板形参定义。

一些标准库函数对象适配器，如 {{lc|std::not2}}，要求其适配的函数对象必须定义某些类型；{{lc|std::not2}} 要求所适配的函数对象必须拥有两个名为 {{tt|first_argument_type}} 和 {{tt|second_argument_type}} 的类型。从 {{tt|binary_function}} 派生接受两个实参的函数对象是一种令它们与这些适配器兼容的简便方式。

{{tt|binary_function}} 于 C++11 弃用并于 C++17 移除。

===成员类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|first_argument_type}}|{{tt|Arg1}}}}
{{dsc|{{tt|second_argument_type}}|{{tt|Arg2}}}}
{{dsc|{{tt|result_type}}|{{tt|Result}}}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

struct same : std::binary_function&lt;int, int, bool&gt;
{
    bool operator()(int a, int b) const { return a == b; }
};

int main()
{
    std::vector&lt;char&gt; v1{'A', 'B', 'C', 'D', 'E'};
    std::vector&lt;char&gt; v2{'E', 'D', 'C', 'B', 'A'};
    std::vector&lt;bool&gt; v3(v1.size());
 
    std::transform(v1.begin(), v1.end(), v2.begin(), v3.begin(), std::not2(same()));
 
    std::cout &lt;&lt; std::boolalpha;
    for (std::size_t i = 0; i &lt; v1.size(); ++i)
        std::cout &lt;&lt; v1[i] &lt;&lt; " != " &lt;&lt; v2[i] &lt;&lt; " : " &lt;&lt; v3[i] &lt;&lt; '\n';
}
|output=
A != E : true
B != D : true
C != C : false
D != B : true
E != A : true
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc function}}
{{dsc inc|cpp/utility/functional/dsc move_only_function}}
{{dsc inc|cpp/utility/functional/dsc ptr_fun}}
{{dsc inc|cpp/utility/functional/dsc pointer_to_binary_function}}
{{dsc inc|cpp/utility/functional/dsc unary_function}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
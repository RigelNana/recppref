{{cpp/title|bit_not}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl|since=c++14|1=
template&lt; class T = void &gt;
struct bit_not;
}}
{{dcl end}}

提供进行逐位非的函数对象。相当于调用类型 {{tt|T}} 上的 {{c|operator~}}。

===特化===
标准库提供 {{tt|std::bit_not}} 在不指定 {{tt|T}} 时的特化，它使得形参类型和返回类型留待推导。
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc bit_not_void}}
{{dsc end}}

{{cpp/utility/functional/member types|result=T|arg1=T|inherit=no}}

===成员函数===
{{dsc begin}}
{{dsc mem fun|operator()|nolink=true|返回其实参逐位非的结果|notes={{mark c++14}}}}
{{dsc end}}

{{member|{{small|std::bit_not::}}operator()|2=
{{dcl begin}}
{{dcl|since=c++14|
constexpr T operator()( const T&amp; arg ) const;
}}
{{dcl end}}

返回 {{c|arg}} 逐位非的结果。

===参数===
{{par begin}}
{{par|arg|要计算逐位非的值}}
{{par end}}

===返回值===
{{c|~arg}} 的结果。

{{cpp/impldef exception}}

===可能的实现===
{{eq fun|1=
constexpr T operator()(const T&amp; arg) const 
{
    return ~arg;
}
}}
}}

===注解===
尽管 {{tt|std::bit_not}} 是经由 C++11 后的提案 {{wg21|N3421}} 添加的，它（除了其透明特化 {{rlpt|bit_not void|std::bit_not&lt;&gt;}}）被常见实现当做 {{lwg|660}} 的解决方案的一部分，从而在其 C++98/03 模式可用。

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
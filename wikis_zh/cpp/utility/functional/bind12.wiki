{{cpp/title|bind1st|bind2nd}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl|deprecated=c++11|until=c++17|num=1|
template&lt; class F, class T &gt;
std::binder1st&lt;F&gt; bind1st( const F&amp; f, const T&amp; x );
}}
{{dcl|deprecated=c++11|until=c++17|num=2|
template&lt; class F, class T &gt;
std::binder2nd&lt;F&gt; bind2nd( const F&amp; f, const T&amp; x );
}}
{{dcl end}}

绑定给定实参 {{c|x}} 到给定二元函数对象 {{c|f}} 的第一或第二形参。即，在产生的包装器内存储 {{c|x}}，若调用它，则将 {{c|x}} 传递给 {{c|f}} 的第一或第二形参。

@1@ 绑定 {{c|f}} 的第一实参到 {{c|x}}。相当于调用 {{c|std::binder1st&lt;F&gt;(f, typename F::first_argument_type(x))}}。

@2@ 绑定 {{c|f}} 的第二实参到 {{c|x}}。相当于调用 {{c|std::binder2nd&lt;F&gt;(f, typename F::second_argument_type(x))}}。

===参数===
{{par begin}}
{{par|f|指向要绑定实参到的函数的指针}}
{{par|x|要绑定到 {{c|f}} 的实参}}
{{par end}}

===返回值===
包装 {{c|f}} 和 {{c|x}} 的函数对象。

{{cpp/impldef exception}}

===示例===
{{example|code=
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;cstddef&gt;
#include &lt;functional&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;double&gt; a = {0, 30, 45, 60, 90, 180};
    std::vector&lt;double&gt; r(a.size());
    const double pi = std::acos(-1); // C++20 起使用 std::numbers::pi

    std::transform(a.begin(), a.end(), r.begin(),
        std::bind1st(std::multiplies&lt;double&gt;(), pi / 180.0));
//  等价的 lambda 为：[pi](double a){ return a * pi / 180.0; });

    for (std::size_t n = 0; n &lt; a.size(); ++n)
        std::cout &lt;&lt; std::setw(3) &lt;&lt; a[n] &lt;&lt; "° = " &lt;&lt; std::fixed &lt;&lt; r[n]
                  &lt;&lt; " rad\n" &lt;&lt; std::defaultfloat;
}
|output=&lt;nowiki/&gt;
  0° = 0.000000 rad
 30° = 0.523599 rad
 45° = 0.785398 rad
 60° = 1.047198 rad
 90° = 1.570796 rad
180° = 3.141593 rad
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc binder12}}
{{dsc inc|cpp/utility/functional/dsc bind_front}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
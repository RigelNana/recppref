{{cpp/title|not1}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl rev begin}}
{{dcl|until=c++14|
template&lt; class Predicate &gt;
std::unary_negate&lt;Predicate&gt; not1( const Predicate&amp; pred );
}}
{{dcl|since=c++14|deprecated=c++17|removed=c++20|
template&lt; class Predicate &gt;
constexpr std::unary_negate&lt;Predicate&gt; not1( const Predicate&amp; pred );
}}
{{dcl rev end}}
{{dcl end}}

{{tt|not1}} 是用于创建返回传递的一元谓词的补的函数对象。创建的函数对象类型为 {{c|std::unary_negate&lt;Predicate&gt;}}。

一元谓词类型必须定义成员类型 {{tt|argument_type}}，它可转换为谓词的形参类型。从 {{lc|std::ref}}、{{lc|std::cref}}、{{lc|std::negate}}、{{lc|std::logical_not}}、{{lc|std::mem_fn}}、{{lc|std::function}}、{{lc|std::hash}} 或调用另一 {{lc|std::not1}} 获得的一元函数对象定义此类型，如同从弃用的 {{lc|std::unary_function}} 派生的函数对象。 

===参数===
{{par begin}}
{{par|pred|一元谓词}}
{{par end}}

===返回值===
{{tt|std::not1}} 返回以 {{c|pred}} 构造的 {{c|std::unary_negate&lt;Predicate&gt;}} 类型的对象。

===异常===
（无）

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;numeric&gt;
#include &lt;vector&gt;

struct LessThan7 : std::unary_function&lt;int, bool&gt;
{
    bool operator()(int i) const { return i &lt; 7; }
};

int main()
{
    std::vector&lt;int&gt; v(10);
    std::iota(std::begin(v), std::end(v), 0);
    
    std::cout &lt;&lt; std::count_if(begin(v), end(v), std::not1(LessThan7())) &lt;&lt; '\n';
    
    // 同上，但使用 std::function
    std::function&lt;bool(int)&gt; less_than_9 = [](int x) { return x &lt; 9; };
    std::cout &lt;&lt; std::count_if(begin(v), end(v), std::not1(less_than_9)) &lt;&lt; '\n';
}
|output=
3
1
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc not_fn}}
{{dsc inc|cpp/utility/functional/dsc unary_negate}}
{{dsc inc|cpp/utility/functional/dsc function}}
{{dsc inc|cpp/utility/functional/dsc move_only_function}}
{{dsc inc|cpp/utility/functional/dsc not2}}
{{dsc inc|cpp/utility/functional/dsc ptr_fun}}
{{dsc inc|cpp/utility/functional/dsc unary_function}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/utility/functional/function/title|operator{{=}}}}
{{cpp/utility/functional/function/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1=
function&amp; operator=( const function&amp; other );
}}
{{dcl|num=2|since=c++11|1=
function&amp; operator=( function&amp;&amp; other );
}}
{{dcla|num=3|since=c++11|1=
function&amp; operator=( std::nullptr_t ) noexcept;
}}
{{dcla|num=4|since=c++11|1=
template&lt; class F &gt;
function&amp; operator=( F&amp;&amp; f );
}}
{{dcl|num=5|since=c++11|1=
template&lt; class F &gt;
function&amp; operator=( std::reference_wrapper&lt;F&gt; f ) noexcept;
}}
{{dcl end}}

赋值新''目标''给 {{tt|std::function}}。

@1@ 赋值 {{c|other}} 的''目标''副本，如同以执行 {{c|function(other).swap(*this);}}

@2@ 移动 {{c|other}} 的''目标''到 {{c|*this}}。{{c|other}} 处于具有未指定值的合法状态。

@3@ 舍弃当前''目标''。{{c|*this}} 在调用后为''空''。

@4@ 设置 {{c|*this}} 的''目标''为可调用的 {{c|f}}，如同以执行 {{c|function(std::forward&lt;F&gt;(f)).swap(*this);}}。此运算符不参与重载决议，除非 {{c|f}} 对于实参类型 {{tt|Args...}} 和返回类型 {{tt|R}} {{named req|Callable}}。

@5@ 设置 {{c|*this}} 的''目标''为 {{c|f}} 的副本，如同以执行 {{c|function(f).swap(*this);}}

===参数===
{{par begin}}
{{par|other|要复制其目标的另一 {{tt|std::function}} 对象}}
{{par|f|用以初始化''目标''的可调用物}}
{{par hreq}}
{{par req named|F|Callable}}
{{par end}}

===返回值===
{{c|*this}}

===注解===
即便在 C++17 中从 {{tt|std::function}} 移除分配器支持之前，这些赋值运算符使用的也是默认分配器，而不是 {{c|*this}} 或 {{c|other}} 的分配器（见 {{lwg|2386}}）。

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;functional&gt;
#include &lt;utility&gt;

int inc(int n) { return n + 1; }

int main()
{
    std::function&lt;int(int)&gt; f1;
    std::function&lt;int(int)&gt; f2(inc);
    assert(f1 == nullptr and f2 != nullptr);

    f1 = f2; // 重载 (1)
    assert(f1 != nullptr and f1(1) == 2);

    f1 = std::move(f2); // 重载 (2)
    assert(f1 != nullptr and f1(1) == 2);
    // f2 处于有效但未指明的状态

    f1 = nullptr; // 重载 (3)
    assert(f1 == nullptr);

    f1 = inc; // 重载 (4)
    assert(f1 != nullptr and f1(1) == 2);

    f1 = [](int n) { return n + n; }; // 重载 (4)
    assert(f1 != nullptr and f1(2) == 4);

    std::reference_wrapper&lt;int(int)&gt; ref1 = std::ref(inc);
    f1 = ref1; // 重载 (5)
    assert(f1 != nullptr and f1(1) == 2);
}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2132|std=C++11|before=接收一个{{named req/core|Callable}}对象的重载 {{vl|4}} 可能有歧义|after=已约束}}
{{dr list item|wg=lwg|dr=2401|std=c++11|before=未要求从 {{tt|std::nullptr_t}} 进行的赋值运算符 {{vl|3}} 为 noexcept|after=已要求}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/move_only_function/dsc operator{{=}}}}
{{dsc inc|cpp/utility/functional/function/dsc assign}}
{{dsc begin}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
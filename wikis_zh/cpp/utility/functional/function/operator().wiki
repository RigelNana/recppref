{{cpp/utility/functional/function/title|operator()}}
{{cpp/utility/functional/function/navbar}}
{{ddcl|since=c++11|
R operator()( Args... args ) const;
}}

以参数 {{c|args}} 调用存储的可调用函数目标。

等效于进行 {{box|{{lti|cpp/utility/functional|INVOKE&lt;R&gt;}}{{c/core|(f, std::forward&lt;Args&gt;(args)...)}}}}，其中 {{c|f}} 是 {{tt|*this}} 的{{rlp|/|目标对象}}。

===参数===
{{par begin}}
{{par|args|传递给存储的可调用函数目标的参数}}
{{par end}}

===返回值===
在 {{tt|R}} 是 {{c/core|void}} 时没有返回值。否则返回存储的可调用对象的调用返回值。

===异常===
在没有存储可调用函数目标，即 {{c|1=!*this == true}} 时抛出 {{lc|std::bad_function_call}}。

===示例===
{{example
|下列示例展示能如何将 {{lc|std::function}} 按值传递给另一函数。而且，它演示 {{lc|std::function}} 能如何存储 lambda。
|code=
#include &lt;functional&gt;
#include &lt;iostream&gt;

void call(std::function&lt;int()&gt; f) // 能按值传递
{ 
    std::cout &lt;&lt; f() &lt;&lt; '\n';
}

int normal_function()
{
    return 42;
}

int main()
{
    int n = 1;
    std::function&lt;int()&gt; f;
    try
    {
        call(f);
    }
    catch (const std::bad_function_call&amp; ex)
    {
        std::cout &lt;&lt; ex.what() &lt;&lt; '\n';
    }

    f = [&amp;n](){ return n; };
    call(f);

    n = 2;
    call(f);

    f = normal_function;
    call(f);

    std::function&lt;void(std::string, int)&gt; g;
    g = [](std::string str, int i) { std::cout &lt;&lt; str &lt;&lt; ' ' &lt;&lt; i &lt;&lt; '\n'; };
    g("Hi", 052);
}
|p=true
|output=
bad_function_call
1
2
42
Hi 42
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/move_only_function/dsc operator()}}
{{dsc inc|cpp/utility/functional/reference_wrapper/dsc operator()}}
{{dsc inc|cpp/utility/functional/dsc bad_function_call}}
{{dsc inc|cpp/utility/functional/dsc invoke}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
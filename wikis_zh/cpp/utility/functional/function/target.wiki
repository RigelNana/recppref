{{cpp/utility/functional/function/title | target}}
{{cpp/utility/functional/function/navbar}}
{{dcl begin}}
{{dcl | num=1 | since=c++11 |
template&lt; class T &gt; 
T* target() noexcept; 
}}
{{dcl | num=2 | since=c++11 |
template&lt; class T &gt; 
const T* target() const noexcept;
}}
{{dcl end}}

返回指向存储的可调用函数目标的指针。

===参数===
（无）

===返回值===
若 {{c|target_type() {{==}} typeid(T)}} 则为指向存储的函数的指针，否则为空指针。

===示例===
{{example
 | code=
#include &lt;functional&gt;
#include &lt;iostream&gt;

int f(int, int) { return 1; }
int g(int, int) { return 2; }
void test(std::function&lt;int(int, int)&gt; const&amp; arg)
{
    std::cout &lt;&lt; "测试函数: ";
    if (arg.target&lt;std::plus&lt;int&gt;&gt;())
        std::cout &lt;&lt; " 是 plus\n";
    if (arg.target&lt;std::minus&lt;int&gt;&gt;())
        std::cout &lt;&lt; " 是 minus\n";

    int (*const* ptr)(int, int) = arg.target&lt;int(*)(int, int)&gt;();
    if (ptr &amp;&amp; *ptr == f)
        std::cout &lt;&lt; "是函数 f\n";
    if (ptr &amp;&amp; *ptr == g)
        std::cout &lt;&lt; "是函数 g\n";
}

int main()
{
    test(std::function&lt;int(int, int)&gt;(std::plus&lt;int&gt;()));
    test(std::function&lt;int(int, int)&gt;(std::minus&lt;int&gt;()));
    test(std::function&lt;int(int, int)&gt;(f));
    test(std::function&lt;int(int, int)&gt;(g));
}
 | output=
测试函数: 是 plus
测试函数: 是 minus
测试函数: 是函数 f
测试函数: 是函数 g
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/utility/functional/function/dsc target_type}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
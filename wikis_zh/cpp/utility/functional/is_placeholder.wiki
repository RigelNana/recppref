{{cpp/title|is_placeholder}}
{{cpp/utility/functional/navbar}}
{{ddcl|header=functional|since=c++11|
template&lt; class T &gt;
struct is_placeholder;
}}

如果 {{tt|T}} 是标准占位符 {{tt|(_1, _2, _3, ...)}} 的类型，那么此模板分别派生自 {{c/core|std::integral_constant&lt;int, 1&gt;}}、{{c/core|std::integral_constant&lt;int, 2&gt;}}、{{c/core|std::integral_constant&lt;int, 3&gt;}} 等。

如果 {{tt|T}} 不是标准占位符类型，那么此模板派生自 {{c/core|std::integral_constant&lt;int, 0&gt;}}。

程序可以对{{ls|cpp/language/type#由程序定义的类型}} {{tt|T}} 特化此模板，以拥有 {{c|N}} 是正数的 {{c/core|std::integral_constant&lt;int, N&gt;}} 的基特征实现{{named req|UnaryTypeTrait}}，指示 {{tt|T}} 应被处理成第 {{c|N}} 个占位符类型。

{{lc|std::bind}} 用 {{tt|std::is_placeholder}} 检测代表未绑定实参的占位符。

===辅助变量模板===
{{ddcl|since=c++17|1=
template&lt; class T &gt;
constexpr int is_placeholder_v = is_placeholder&lt;T&gt;::value;
}}

{{cpp/types/integral_constant/inherit2|占位符值，或对于非占位符类型为 {{c|0}}|int}}

===示例===
{{example
|code=
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

struct My_2 {} my_2;

namespace std
{
    template&lt;&gt;
    struct is_placeholder&lt;My_2&gt; : public integral_constant&lt;int, 2&gt; {};
}

int f(int n1, int n2)
{
    return n1 + n2;
}

int main()
{
    std::cout &lt;&lt; "标准占位符 _5 对应第 "
              &lt;&lt; std::is_placeholder&lt;decltype(std::placeholders::_5)&gt;::value
              &lt;&lt; " 个实参\n";
    
    auto b = std::bind(f, my_2, 2);
    std::cout &lt;&lt; "以自定义占位符选择的 11 加上 2 得到 " 
              &lt;&lt; b(10, 11) // 忽略首个实参，即 10
              &lt;&lt; '\n';
}
|output=
标准占位符 _5 对应第 5 个实参
以自定义占位符选择的 11 加上 2 得到 13
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc bind}}
{{dsc inc|cpp/utility/functional/dsc placeholders}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
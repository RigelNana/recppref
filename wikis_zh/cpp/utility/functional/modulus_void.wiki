{{cpp/title|modulus&lt;void&gt;}}
{{cpp/utility/functional/navbar}}
{{ddcl|header=functional|since=c++14|
template&lt;&gt;
class modulus&lt;void&gt;;
}}

{{c/core|std::modulus&lt;void&gt;}} 是会推导形参类型和返回类型的 {{lc|std::modulus}} 特化。

===嵌套类型===
{{dsc begin}}
{{dsc hitem |嵌套类型|定义}}
{{dsc|{{tt|is_transparent}}|[[cpp/utility/functional#透明函数对象|未指定]]}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem fun|cpp/utility/functional/modulus_void|title=operator()|inlinemem=true|返回两个实参的模}}
{{dsc end}}

{{member|{{small|std::modulus&lt;void&gt;::}}operator()|2=
{{ddcl|1=
template&lt; class T, class U &gt;
constexpr auto operator()( T&amp;&amp; lhs, U&amp;&amp; rhs ) const
  -&gt; decltype(std::forward&lt;T&gt;(lhs) % std::forward&lt;U&gt;(rhs));
}}

返回 {{c|lhs}} 除以 {{c|rhs}} 的余数。

===参数===
{{par begin}}
{{par|lhs, rhs|要除的值}}
{{par end}}

===返回值===
{{c|std::forward&lt;T&gt;(lhs) % std::forward&lt;U&gt;(rhs)}}。
}}

===示例===
{{example
|code=
#include &lt;functional&gt;
#include &lt;iostream&gt;

struct M
{
    M(int x) { std::cout &lt;&lt; "M(" &lt;&lt; x &lt;&lt; ");\n"; }
    M() {}
};

auto operator%(M, M) { std::cout &lt;&lt; "operator%(M, M);\n"; return M{}; }
auto operator%(M, int) { std::cout &lt;&lt; "operator%(M, int);\n"; return M{}; }
auto operator%(int, M) { std::cout &lt;&lt; "operator%(int, M);\n"; return M{}; }

int main()
{
    M m;
    
    // 42 会被转换成临时对象 M{42}
    std::modulus&lt;M&gt;{}(m, 42);    // 调用 operator%(M, M)
    
    // 没有临时对象
    std::modulus&lt;void&gt;{}(m, 42); // 调用 operator%(M, int)
    std::modulus&lt;void&gt;{}(42, m); // 调用 operator%(int, M)
}
|output=
M(42);
operator%(M, M);
operator%(M, int);
operator%(int, M);
}}

{{langlinks|en|es|ja|ru}}
{{cpp/title|copyable_function}}
{{cpp/utility/functional/copyable_function/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl|num=1|since=c++26|
template&lt; class... &gt;
class copyable_function; // 未定义
}}
{{dcl|num=2|since=c++26|
template&lt; class R, class... Args &gt;
class copyable_function&lt;R(Args...)&gt;;
template&lt; class R, class... Args &gt;
class copyable_function&lt;R(Args...) noexcept&gt;;
template&lt; class R, class... Args &gt;
class copyable_function&lt;R(Args...) &amp;&gt;;
template&lt; class R, class... Args &gt;
class copyable_function&lt;R(Args...) &amp; noexcept&gt;;
template&lt; class R, class... Args &gt;
class copyable_function&lt;R(Args...) &amp;&amp;&gt;;
template&lt; class R, class... Args &gt;
class copyable_function&lt;R(Args...) &amp;&amp; noexcept&gt;;
template&lt; class R, class... Args &gt;
class copyable_function&lt;R(Args...) const&gt;;
template&lt; class R, class... Args &gt;
class copyable_function&lt;R(Args...) const noexcept&gt;;
template&lt; class R, class... Args &gt;
class copyable_function&lt;R(Args...) const &amp;&gt;;
template&lt; class R, class... Args &gt;
class copyable_function&lt;R(Args...) const &amp; noexcept&gt;;
template&lt; class R, class... Args &gt;
class copyable_function&lt;R(Args...) const &amp;&amp;&gt;;
template&lt; class R, class... Args &gt;
class copyable_function&lt;R(Args...) const &amp;&amp; noexcept&gt;;
}}
{{dcl end}}

类模板 {{tt|std::copyable_function}} 是一种通用多态函数包装器。{{tt|std::copyable_function}} 对象可以存储并调用任何{{named req|CopyConstructible}}的{{named req|Callable}}''目标'' — 函数、[[cpp/language/lambda|lambda 表达式]]、[[cpp/utility/functional/bind|绑定表达式]]或其他函数对象，以及成员函数指针和成员对象指针。

所存储的可调用对象被称为该 {{tt|std::copyable_function}} 的''目标''。如果 {{tt|std::copyable_function}} 不含目标，则称它为''空''。和 {{lc|std::function}} 不同，调用''空'' {{tt|std::copyable_function}} 会导致未定义行为。

{{tt|std::copyable_function}} 支持在其模板形参中提供的（不含 {{c/core|volatile}} 的）[[cpp/language/member functions#有 cv 限定符的成员函数|cv 限定符]]、[[cpp/language/member functions#有引用限定符的成员函数|引用限定符]] 和 [[cpp/language/noexcept spec|noexcept 说明符]]的每种可能的组合。这些限定符和说明符（如果有）都添加到它的 {{rlt|operator()}} 上。

{{tt|std::copyable_function}} 满足{{named req|CopyConstructible}}和{{named req|CopyAssignable}}的要求。

===成员类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|result_type}}|{{tt|R}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/copyable_function/dsc constructor}}
{{dsc inc|cpp/utility/functional/copyable_function/dsc destructor}}
{{dsc inc|cpp/utility/functional/copyable_function/dsc operator{{=}}}}
{{dsc inc|cpp/utility/functional/copyable_function/dsc swap}}
{{dsc inc|cpp/utility/functional/copyable_function/dsc operator_bool}}
{{dsc inc|cpp/utility/functional/copyable_function/dsc operator()}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/copyable_function/dsc swap2}}
{{dsc inc|cpp/utility/functional/copyable_function/dsc operator{{==}}}}
{{dsc end}}

===注解===
实现可以将小型可调用对象存储于 {{tt|std::copyable_function}} 对象之内。这种小对象优化对于函数指针和 {{lc|std::reference_wrapper}} 特化而言实际上很有必要，而且仅能应用于 {{c|std::is_nothrow_move_constructible_v&lt;T&gt;}} 为 {{c|true}} 的类型 {{tt|T}}。

{{feature test macro|__cpp_lib_copyable_function|std=C++26|value=202306L|{{tt|std::copyable_function}}}}

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc function}}
{{dsc inc|cpp/utility/functional/dsc move_only_function}}
{{dsc inc|cpp/utility/functional/dsc function_ref}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/utility/functional/move_only_function/title | operator()}}
{{cpp/utility/functional/move_only_function/navbar}}
{{ddcl | since=c++23 |
R operator()( Args... args ) /*cv*/ /*ref*/ noexcept(/*noex*/);
}}

以参数 {{tt|args}} 调用存储的可调用对象。{{c|operator()}} 的 {{c|/*cv*/}}、{{c|/*ref*/}} 及 {{c|/*noex*/}} 部分等同于 {{tt|std::move_only_function}} 的模板形参的这些部分。

等价于 {{c|return std::invoke_r&lt;R&gt;(/*cv-ref-cast*/(f), std::forward&lt;Args&gt;(args)...);}}，其中 {{tt|f}} 是指代 {{c|*this}} 的目标对象的无 cv 限定左值，而 {{c|/*cv-ref-cast*/(f)}} 等价于：
* {{c|f}}，若 {{spar|cv}} {{spar|ref}} 为空或 {{c|&amp;}}，或
* {{c|std::as_const(f)}}，若 {{spar|cv}} {{spar|ref}} 为 {{c|const}} 或 {{c|const &amp;}}，或
* {{c|std::move(f)}}，若 {{spar|cv}} {{spar|ref}} 为 {{c|&amp;&amp;}}，或
* {{c|std::move(std::as_const(f))}}，若 {{spar|cv}} {{spar|ref}} 为 {{c|const &amp;&amp;}}。

若 {{c|*this}} 为空则行为未定义。

===参数===
{{par begin}}
{{par|args|传递给存储的可调用目标的参数}}
{{par end}}

===返回值===
{{c|std::invoke_r&lt;R&gt;(/*cv-ref-cast*/(f), std::forward&lt;Args&gt;(args)...)}}。

===异常===
传播底层函数调用所抛的异常。

===示例===
{{example
 | 以下示例展示能如何按值传递 {{lc|std::move_only_function}} 给其他函数。并且显示 {{lc|std::move_only_function}} 能如何存储 lambda。
 | code=
#include &lt;iostream&gt;
#include &lt;functional&gt;

void call(std::move_only_function&lt;int() const&gt; f)  // 能按值传递
{ 
    std::cout &lt;&lt; f() &lt;&lt; '\n';
}

int normal_function() 
{
    return 42;
}

int main()
{
    int n = 1;
    auto lambda = [&amp;n](){ return n; };
    std::move_only_function&lt;int() const&gt; f = lambda;
    call(std::move(f));

    n = 2;
    call(lambda); 

    f = normal_function; 
    call(std::move(f));
}
 | output=
1
2
42
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/utility/functional/function/dsc operator()}}
{{dsc inc | cpp/utility/functional/reference_wrapper/dsc operator()}}
{{dsc inc | cpp/utility/functional/dsc invoke}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
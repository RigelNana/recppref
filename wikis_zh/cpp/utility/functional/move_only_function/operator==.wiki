{{title|operator{{==}}{{small|(std::move_only_function)}}}}
{{cpp/utility/functional/move_only_function/navbar}}
{{ddcl|since=c++23|1=
friend bool operator==( const std::move_only_function&amp; f, std::nullptr_t ) noexcept;
}}

用将其与 {{lc|std::nullptr_t}} 比较的形式检查包装器 {{c|f}} 是否有可调用目标。空包装器（即无目标的包装器）比较为相等，非空包装比较为不相等。

{{cpp/hidden friend|{{tt|std::move_only_function&lt;FunctionType&gt;}}}}

{{cpp/note synthesized eq}}

===参数===
{{par begin}}
{{par|f|要比较的 {{tt|std::move_only_function}}}}
{{par end}}

===返回值===
{{c|!f}}。

===示例===
{{example
|code=
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;utility&gt;

using SomeVoidFunc = std::move_only_function&lt;void(int) const&gt;;

class C {
public:
    C() = default;
    C(SomeVoidFunc func) : void_func_(std::move(func)) {}

    void default_func(int i) const { std::cout &lt;&lt; i &lt;&lt; '\n'; };

    void operator()() const
    {
        if (void_func_ == nullptr) // 与 nullptr 的特殊比较
            default_func(7);
        else
            void_func_(7);
    }

private:
    SomeVoidFunc void_func_{};
};

void user_func(int i)
{
    std::cout &lt;&lt; (i + 1) &lt;&lt; '\n';
}

int main()
{
    C c1;
    C c2(user_func);
    c1();
    c2();
}
|output=
7
8
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/move_only_function/dsc operator bool}}
{{dsc inc|cpp/utility/functional/function/dsc operator cmp}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
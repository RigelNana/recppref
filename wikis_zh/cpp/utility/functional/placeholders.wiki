{{cpp/title|n=placeholders::|_1|_2, ...|_N}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl|
/* 见下文 */ _1;
/* 见下文 */ _2;
.
.
/* 见下文 */ _N;
}}
{{dcl end}}

{{lc|std::placeholders}} 命名空间含有占位对象 {{tt|[_1, . . . _N]}}，其中 {{tt|N}} 是实现定义的最大数字。

当用作 {{lc|std::bind}} 表达式中的实参时，占位符对象被存储于生成的函数对象中，而以未绑定实参调用函数对象时，每个占位符 {{tt|_N}} 被对应的第 N 个未绑定实参替换。

{{rev begin}}
{{rev|until=c++17|
每个占位符如同以 {{c|extern /* 未指明 */ _1;}} 声明。
}}
{{rev|since=c++17|
鼓励实现如同以 {{c|inline constexpr /* 未指明 */ _1;}} 声明占位符，尽管标准仍然允许以 {{c|extern /* 未指明 */ _1;}} 声明它们。
}}
{{rev end}}
占位符对象的类型{{named req|DefaultConstructible}}且{{named req|CopyConstructible}}，其默认复制/移动构造函数不抛异常，且对于任何占位符 {{tt|_N}}，类型 {{c|std::is_placeholder&lt;decltype(_N)&gt;}} 有定义且从 {{c|std::integral_constant&lt;int, N&gt;}} 派生。

===示例===
{{example
|下列代码展示以占位符实参创建函数对象。
|code=
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

void goodbye(const std::string&amp; s)
{
    std::cout &lt;&lt; "Goodbye " &lt;&lt; s &lt;&lt; '\n';
}

class Object
{
public:
    void hello(const std::string&amp; s)
    {
        std::cout &lt;&lt; "Hello " &lt;&lt; s &lt;&lt; '\n';
    }
};

int main()
{
    using namespace std::placeholders;

    using ExampleFunction = std::function&lt;void(const std::string&amp;)&gt;;
    Object instance;
    std::string str("World");

    ExampleFunction f = std::bind(&amp;Object::hello, &amp;instance, _1);
    f(str); // 等价于 instance.hello(str)

    f = std::bind(&amp;goodbye, std::placeholders::_1);
    f(str); // 等价于 goodbye(str)

    auto lambda = [](std::string pre, char o, int rep, std::string post)
    {
        std::cout &lt;&lt; pre;
        while (rep-- &gt; 0)
            std::cout &lt;&lt; o;
        std::cout &lt;&lt; post &lt;&lt; '\n';
    };

    // 绑定 lambda:
    std::function&lt;void(std::string, char, int, std::string)&gt; g =
        std::bind(&amp;decltype(lambda)::operator(), &amp;lambda, _1, _2, _3, _4);
    g("G", 'o', 'o'-'g', "gol");
}
|output=
Hello World
Goodbye World
Goooooooogol
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc bind}}
{{dsc inc|cpp/utility/functional/dsc is_placeholder}}
{{dsc inc|cpp/utility/tuple/dsc ignore}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
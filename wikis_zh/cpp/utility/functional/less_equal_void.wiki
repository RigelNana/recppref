{{cpp/title|less_equal&lt;void&gt;}}
{{cpp/utility/functional/navbar}}
{{ddcl|header=functional|since=c++14|
template&lt;&gt;
class less_equal&lt;void&gt;;
}}

{{c/core|std::less_equal&lt;void&gt;}} 是会推导形参类型和返回类型的 {{lc|std::less_equal}} 特化。

===嵌套类型===
{{dsc begin}}
{{dsc hitem|嵌套类型|定义}}
{{dsc|{{tt|is_transparent}}|[[cpp/utility/functional#透明函数对象|未指定]]}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem fun|cpp/utility/functional/less_equal_void|title=operator()|inlinemem=true|测试 {{c|lhs}} 是否小于或等于 {{c|rhs}}}}
{{dsc end}}

{{member|{{small|std::less_equal&lt;void&gt;::}}operator()|2=
{{ddcl|1=
template&lt; class T, class U &gt;
constexpr auto operator()( T&amp;&amp; lhs, U&amp;&amp; rhs ) const
    -&gt; decltype(std::forward&lt;T&gt;(lhs) &lt;= std::forward&lt;U&gt;(rhs));
}}

返回 {{c|1=std::forward&lt;T&gt;(lhs) &lt;= std::forward&lt;U&gt;(rhs)}} 的结果。

===参数===
{{par begin}}
{{par|lhs, rhs|要比较的值}}
{{par end}}

===返回值===
{{c|1=std::forward&lt;T&gt;(lhs) &lt;= std::forward&lt;U&gt;(rhs)}}。

如果调用了内建的运算符比较指针，那么结果会与[[cpp/language/operator comparison#指针全序|由实现定义的指针严格全序]]保持一致。

{{cpp/impldef exception}}
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;initializer_list&gt;

constexpr bool strictly_not_positive(int lhs)
{
    return std::less_equal&lt;&gt;()(lhs, 0);
}

int main()
{
    constexpr int low = 0, high = 8;
    std::less_equal&lt;&gt; less_equal{};
    static_assert(less_equal(low, high));
    static_assert(less_equal(low, low));

    static constexpr auto arr = {1, 0, -1, -2, -3, -4};
    static_assert(!std::all_of(arr.begin(), arr.end(), strictly_not_positive));
    static_assert(std::all_of(arr.begin() + 1, arr.end(), strictly_not_positive));
}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2562|std=C++98|before=指针全序可能不一致|after=保证一致}}
{{dr list end}}

{{langlinks|en|es|ja|ru}}
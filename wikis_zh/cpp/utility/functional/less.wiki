{{cpp/title|less}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl rev multi
|dcl1=
template&lt; class T &gt;
struct less;
|since2=c++14|dcl2=
template&lt; class T = void &gt;
struct less;
}}
{{dcl end}}

进行比较的函数对象。主模板会调用类型 {{tt|T}} 上的 {{c|operator&lt;}}。

===特化===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc less_void}}
{{dsc end}}

{{cpp/utility/functional/member types|result=bool|arg1=T|arg2=T}}

===成员函数===
{{dsc begin}}
{{dsc mem fun|operator()|nolink=true|检查第一实参是否''小于''{{sep}}第二个}}
{{dsc end}}

{{member|{{small|std::less::}}operator()|2=
{{dcl begin}}
{{dcla|constexpr=c++14|1=
bool operator()( const T&amp; lhs, const T&amp; rhs ) const;
}}
{{dcl end}}

检查 {{c|lhs}} 是否''小于'' {{c|rhs}}。

===参数===
{{par begin}}
{{par|lhs, rhs|要比较的值}}
{{par end}}

===返回值===
{{c|lhs &lt; rhs}}。

如果 {{tt|T}} 是指针类型，那么结果会与[[cpp/language/operator comparison#指针全序|由实现定义的指针严格全序]]保持一致。

{{cpp/impldef exception}}

===可能的实现===
{{eq fun|1=
constexpr bool operator()(const T &amp;lhs, const T &amp;rhs) const 
{
    return lhs &lt; rhs; // 假设实现会处理指针全序
}
}}
}}

===示例===
{{example
|code=
#include &lt;functional&gt;

template&lt;typename A, typename B, typename C = std::less&lt;&gt;&gt;
constexpr bool fun(A a, B b, C cmp = C{})
{
    return cmp(a, b);
}

static_assert(fun(1, 2) == true);
static_assert(fun(1.0, 1) == false);
static_assert(fun(1, 2.0) == true);
static_assert(std::less&lt;int&gt;{}(5, 5.6) == false);   // 5 &lt; 5（警告：隐式转换）
static_assert(std::less&lt;double&gt;{}(5, 5.6) == true); // 5.0 &lt; 5.6
static_assert(std::less&lt;int&gt;{}(5.6, 5.7) == false); // 5 &lt; 5（警告：隐式转换）
static_assert(std::less{}(5, 5.6) == true);         // less&lt;void&gt;：5.0 &lt; 5.6

int main() {}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2562|std=C++98|before=指针全序可能不一致|after=保证一致}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc equal_to}}
{{dsc inc|cpp/utility/functional/dsc greater}}
{{dsc inc|cpp/utility/functional/ranges/dsc {{SUBPAGENAMEE}}}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|boyer_moore_searcher}}
{{cpp/utility/functional/navbar}}

{{dcl begin}}
{{dcl header|functional}}
{{dcl|since=c++17|1=
template&lt; class RandomIt1,
          class Hash = std::hash&lt;typename std::iterator_traits&lt;RandomIt1&gt;::value_type&gt;,
          class BinaryPredicate = std::equal_to&lt;&gt; &gt;
class boyer_moore_searcher;
}}
{{dcl end}}

适用于 {{lc|std::search}} 的{{named req|Searcher}}重载的搜索器，实现 {{enwiki|Boyer%E2%80%93Moore string search algorithm|Boyer-Moore 字符串搜索算法}}。

{{tt|std::boyer_moore_searcher}} {{named req|CopyConstructible}}且{{named req|CopyAssignable}}。

{{tt|RandomIt1}} 必须满足{{named req|RandomAccessIterator}}的要求。

===成员函数===
{{member|{{small|std::boyer_moore_searcher::}}boyer_moore_searcher|2=
{{dcl begin}}
{{dcl|1=
boyer_moore_searcher( RandomIt1 pat_first,
                      RandomIt1 pat_last,
                      Hash hf = Hash(),
                      BinaryPredicate pred = BinaryPredicate() );
}}
{{dcl end}}
通过存储 {{c|pat_first}}、{{c|pat_last}}、{{c|hf}} 和 {{c|pred}} 的副本构造一个 {{tt|std::boyer_moore_searcher}} ，建立任何必要的内部数据结构。

{{tt|RandomIt1}} 的值类型必须{{named req|DefaultConstructible}}、{{named req|CopyConstructible}}且{{named req|CopyAssignable}}。

对于任意两个 {{c|std::iterator_traits&lt;RandomIt1&gt;::value_type}} 类型的值 {{tt|A}} 和 {{tt|B}}，若 {{c|1= pred(A, B) == true}}，则 {{c|1= hf(A) == hf(B)}} 应为 {{c|true}}。

===参数===
{{par begin}}
{{par|pat_first, pat_last|表示要搜索的字符串的一对迭代器}}
{{par|hf|用于散列字符串元素的可调用对象}}
{{par|pred|用于确定相等性的可调用对象}}
{{par end}}

===异常===
下列操作抛出的任何异常：
* {{tt|RandomIt1}} 的复制构造函数；
* {{tt|RandomIt1}} 的值类型的默认构造函数、复制构造函数和复制赋值运算符；或
* {{tt|BinaryPredicate}} 或 {{tt|Hash}} 的复制构造函数和函数调用运算符。
若无法分配内部数据结构所需的附加内存，则亦可能抛出 {{lc|std::bad_alloc}}。
}}

{{member|{{small|std::boyer_moore_searcher::}}operator()|2=
{{dcl begin}}
{{dcl|since=c++17| 
template&lt; class RandomIt2 &gt;
std::pair&lt;RandomIt2, RandomIt2&gt; operator()( RandomIt2 first, RandomIt2 last ) const;
}}
{{dcl end}}
{{lc|std::search}} 的搜索器（Searcher）重载调用该成员函数，以用此搜索器进行搜索。{{tt|RandomIt2}} 必须满足{{named req|RandomAccessIterator}}的要求。

{{tt|RandomIt1}} 与 {{tt|RandomIt2}} 必须拥有相同的值类型。

===参数===
{{par begin}}
{{par|first, last|指代要检验的字符串的一对迭代器}}
{{par end}}

===返回值===
若模式 {{range|pat_first|pat_last}} 为空，则返回 {{c|std::make_pair(first, first)}}。

否则，返回一对迭代器，指向 {{range|first|last}} 中所定位的与 {{range|pat_first|pat_last}} 按 {{c|pred}} 的定义比较相等的子序列的首及尾后一位，否则返回 {{c|std::make_pair(last, last)}}。
}}

===注解===
{{feature test macro|__cpp_lib_boyer_moore_searcher|[[cpp/utility/functional#搜索器|搜索器]]|value=201603L|std=C++17}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;
 
int main()
{
    constexpr std::string_view haystack =
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed "
        "do eiusmod tempor incididunt ut labore et dolore magna aliqua";
    
    const std::string_view needle{"pisci"};
    
    if (const auto it = std::search(haystack.begin(), haystack.end(),
            std::boyer_moore_searcher(needle.begin(), needle.end()));
        it != haystack.end()
    )
        std::cout &lt;&lt; "字符串 " &lt;&lt; std::quoted(needle) &lt;&lt; " 在偏移 "
                  &lt;&lt; it - in.begin() &lt;&lt; " 处找到\n";
    else
        std::cout &lt;&lt; "字符串 " &lt;&lt; std::quoted(needle) &lt;&lt; " 未找到\n";
}
|output=
字符串 "pisci" 在偏移 43 处找到
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc search}}
{{dsc inc|cpp/utility/functional/dsc default_searcher}}
{{dsc inc|cpp/utility/functional/dsc boyer_moore_horspool_searcher}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/title|unary_negate}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl rev begin}}
{{dcl|until=c++11|
template&lt; class Predicate &gt;
struct unary_negate : public std::unary_function&lt;Predicate::argument_type, bool&gt;;
}}
{{dcl|since=c++11|deprecated=c++17|removed=c++20| 
template&lt; class Predicate &gt;
struct unary_negate;
}}
{{dcl rev end}}
{{dcl end}}

{{tt|std::unary_negate}} 是返回其所保有的一元谓词的逻辑补的包装器函数对象。

一元谓词必须定义成员类型 {{tt|argument_type}}，它可转换为谓词的形参类型。从 {{lc|std::ref}}、{{lc|std::cref}}、{{lc|std::negate}}、{{lc|std::logical_not}}、{{lc|std::mem_fn}}、{{lc|std::function}}、{{lc|std::hash}} 或调用 {{lc|std::not1}} 获得的一元函数对象已定义此类型，派生于已弃用的 {{lc|std::unary_function}} 的函数对象亦然。

{{tt|std::unary_negate}} 对象可以简单地用辅助函数 {{lc|std::not1}} 构造。

===成员函数===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|argument_type}}|{{c|Predicate::argument_type}}}}
{{dsc|{{tt|result_type}}|{{c|bool}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|nolink=true|以提供的谓词构造新的 {{tt|unary_negate}} 对象}}
{{dsc mem fun|operator()|nolink=true|返回调用存储的谓词结果的逻辑补}}
{{dsc end}}

{{member|{{small|std::unary_negate::}}unary_negate|2=
{{dcl begin}}
{{dcl rev begin}}
{{dcl|until=c++14|
explicit unary_negate( Predicate const&amp; pred );
}}
{{dcl|since=c++14|
constexpr explicit unary_negate( Predicate const&amp; pred );
}}
{{dcl rev end}}
{{dcl end}}

以存储的谓词 {{c|pred}} 构造 {{tt|std::unary_negate}} 函数对象。

===参数===
{{par begin}}
{{par|pred|谓词函数对象}}
{{par end}}

}}

{{member|{{small|std::unary_negate::}}operator()|2=
{{dcl begin}}
{{dcl rev begin}}
{{dcl|until=c++14|
bool operator()( argument_type const&amp; x ) const;
}}
{{dcl|since=c++14|
constexpr bool operator()( argument_type const&amp; x ) const;
}}
{{dcl rev end}}
{{dcl end}}

返回调用 {{c|pred(x)}} 结果的逻辑补。

===参数===
{{par begin}}
{{par|x|传递给谓词的实参}}
{{par end}}

===返回值===
调用 {{c|pred(x)}} 结果的逻辑补。
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

struct less_than_7 : std::unary_function&lt;int, bool&gt;
{
    bool operator()(int i) const { return i &lt; 7; }
};

int main()
{
    std::vector&lt;int&gt; v(7, 7);
    v[0] = v[1] = v[2] = 6;
    
    std::unary_negate&lt;less_than_7&gt; not_less_than_7((less_than_7()));
    // C++11 解法：
    // 用 std::function&lt;bool (int)&gt;
    // std::function&lt;bool (int)&gt; not_less_than_7 =
    //     [](int x)-&gt;bool { return !less_than_7()(x); };
    
    std::cout &lt;&lt; std::count_if(v.begin(), v.end(), not_less_than_7);
}
|output=
4
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc binary_negate}}
{{dsc inc|cpp/utility/functional/dsc function}}
{{dsc inc|cpp/utility/functional/dsc move_only_function}}
{{dsc inc|cpp/utility/functional/dsc not1}}
{{dsc inc|cpp/utility/functional/dsc ptr_fun}}
{{dsc inc|cpp/utility/functional/dsc unary_function}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
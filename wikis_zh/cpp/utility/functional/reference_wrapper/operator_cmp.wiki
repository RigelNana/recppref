{{title|1=operator==, &lt;=&gt;{{small|(std::reference_wrapper)}}}}
{{cpp/utility/functional/reference_wrapper/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++26|1=
friend constexpr bool
    operator==( reference_wrapper lhs, reference_wrapper rhs );
}}
{{dcl|num=2|since=c++26|1=
friend constexpr bool
    operator==( reference_wrapper lhs, reference_wrapper&lt;const T&gt; rhs );
}}
{{dcl|num=3|since=c++26|1=
friend constexpr bool
    operator==( reference_wrapper lhs, const T&amp; ref );
}}
{{dcl|num=4|since=c++26|1=
friend constexpr auto
    operator&lt;=&gt;( reference_wrapper lhs, reference_wrapper rhs );
}}
{{dcl|num=5|since=c++26|1=
friend constexpr auto
    operator&lt;=&gt;( reference_wrapper lhs, reference_wrapper&lt;const T&gt; rhs );
}}
{{dcl|num=6|since=c++26|1=
friend constexpr auto
    operator&lt;=&gt;( reference_wrapper lhs, const T&amp; ref );
}}
{{dcl end}}

实施 {{tt|reference_wrapper}} 对象上的比较运算。

@1,2@ 比较两个 {{tt|reference_wrapper}} 对象。当且仅当 {{c|lhs.get()}} 和 {{c|rhs.get()}} 相等时两对象比较相等。
:@1@ {{cpp/enable if|表达式 {{c|1=lhs.get() == rhs.get()}} 良构且它的结果可转换到 {{c/core|bool}} }}。
:@2@ {{cpp/enable if|满足以下所有条件}}：
* {{c|std::is_const_v&lt;T&gt;}} 是 {{c|false}}。
* 表达式 {{c|1=lhs.get() == rhs.get()}} 良构且它的结果可转换到 {{c/core|bool}}。

@3@ 比较 {{tt|reference_wrapper}} 对象和一个引用。当且仅当 {{c|lhs.get()}} 等于 {{c|ref}} 时两形参比较相等。
@@ {{cpp/enable if|表达式 {{c|1=lhs.get() == ref}} 良构且它的结果可转换到 {{c/core|bool}} }}。

@4,5@ 以 {{lti|cpp/standard library/synth-three-way}} 比较两个 {{tt|reference_wrapper}} 对象。
:@4@ {{cpp/enable if|表达式 {{box|{{lti|cpp/standard library/synth-three-way}}{{c/core|(lhs.get(), rhs.get())}}}} 良构}}。
:@5@ {{cpp/enable if|满足以下所有条件}}：
* {{c|std::is_const_v&lt;T&gt;}} 是 {{c|false}}。
* 表达式 {{box|{{lti|cpp/standard library/synth-three-way}}{{c/core|(lhs.get(), rhs.get())}}}} 良构。

@6@ 以 {{lti|cpp/standard library/synth-three-way}} 比较 {{tt|reference_wrapper}} 对象和一个引用。
@@ {{cpp/enable if|表达式 {{box|{{lti|cpp/standard library/synth-three-way}}{{c/core|(lhs.get(), ref)}}}} 良构}}。

{{cpp/note synthesized compare}}

===参数===
{{par begin}}
{{par|lhs, rhs|要比较的 {{tt|reference_wrapper}} 对象}}
{{par|ref|要与 {{tt|reference_wrapper}} 对象比较的引用}}
{{par end}}

===返回值===
@1,2@ {{c|1=lhs.get() == rhs.get()}}。
@3@ {{c|1=lhs.get() == ref}}。
@4,5@ {{box|{{lti|cpp/standard library/synth-three-way}}{{c/core|1=(lhs.get(), rhs.get())}}}}。
@6@ {{box|{{lti|cpp/standard library/synth-three-way}}{{c/core|1=(lhs.get(), ref)}}}}。

===异常===
抛出比较所抛出的异常。

===注解===
{{c/core|1=operator&lt;=&gt;}} 的返回类型是从 {{tt|return}} 语句[[cpp/language/template argument deduction#返回 auto 的函数|推导]]的，以避免实例化 {{c|std::reference_wrapper&lt;T&gt;}} 时因为 {{box|{{lti|cpp/standard library/synth-three-way|synth-three-way-result}}&lt;T&gt;}} 非良构而产生硬错误。

{{feature test macro|__cpp_lib_reference_wrapper|{{tt|std::reference_wrapper}} 的比较|value=202403L|std=C++26}}

===示例===
{{example
|code=
|output=
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
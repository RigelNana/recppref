{{cpp/title|move_only_function}}
{{cpp/utility/functional/move_only_function/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl|num=1|since=c++23|
template&lt; class... &gt;
class move_only_function; // 不定义
}}
{{dcl|num=2|since=c++23|
template&lt; class R, class... Args &gt;
class move_only_function&lt;R(Args...)&gt;;
template&lt; class R, class... Args &gt;
class move_only_function&lt;R(Args...) noexcept&gt;;
template&lt; class R, class... Args &gt;
class move_only_function&lt;R(Args...) &amp;&gt;;
template&lt; class R, class... Args &gt;
class move_only_function&lt;R(Args...) &amp; noexcept&gt;;
template&lt; class R, class... Args &gt;
class move_only_function&lt;R(Args...) &amp;&amp;&gt;;
template&lt; class R, class... Args &gt;
class move_only_function&lt;R(Args...) &amp;&amp; noexcept&gt;;
template&lt; class R, class... Args &gt;
class move_only_function&lt;R(Args...) const&gt;;
template&lt; class R, class... Args &gt;
class move_only_function&lt;R(Args...) const noexcept&gt;;
template&lt; class R, class... Args &gt;
class move_only_function&lt;R(Args...) const &amp;&gt;;
template&lt; class R, class... Args &gt;
class move_only_function&lt;R(Args...) const &amp; noexcept&gt;;
template&lt; class R, class... Args &gt;
class move_only_function&lt;R(Args...) const &amp;&amp;&gt;;
template&lt; class R, class... Args &gt;
class move_only_function&lt;R(Args...) const &amp;&amp; noexcept&gt;;
}}
{{dcl end}}

类模板 {{tt|std::move_only_function}} 是一种通用多态函数包装器。{{tt|std::move_only_function}} 对象可以存储并调用任何可构造（不要求为可移动构造）的{{named req|Callable}}''目标''——函数、[[cpp/language/lambda|lambda 表达式]]、[[cpp/utility/functional/bind|绑定表达式]]或其他函数对象，以及成员函数指针和成员对象指针。

称存储的可调用对象为 {{tt|std::move_only_function}} 的''目标''。若 {{tt|std::move_only_function}} 不含目标，则称之为''空''。不同于 {{lc|std::function}}，调用''空''的 {{tt|std::move_only_function}} 导致未定义行为。

{{tt|std::move_only_functions}} 支持在其模板形参中提供的（不含 {{c|volatile}} 的）[[cpp/language/member functions#有 cv 限定符的成员函数|cv 限定符]]、[[cpp/language/member functions#有引用限定符的成员函数|引用限定符]]及 [[cpp/language/noexcept spec|noexcept 说明符]]的每种可能组合。这些限定符与说明符（若存在）被添加到其 {{rlt|operator()}} 上。

{{tt|std::move_only_function}} 满足{{named req|MoveConstructible}}与{{named req|MoveAssignable}}的要求，但不满足{{named req|CopyConstructible}}或{{named req|CopyAssignable}}。

===成员类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|result_type}}|{{tt|R}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/move_only_function/dsc constructor}}
{{dsc inc|cpp/utility/functional/move_only_function/dsc destructor}}
{{dsc inc|cpp/utility/functional/move_only_function/dsc operator{{=}}}}
{{dsc inc|cpp/utility/functional/move_only_function/dsc swap}}
{{dsc inc|cpp/utility/functional/move_only_function/dsc operator_bool}}
{{dsc inc|cpp/utility/functional/move_only_function/dsc operator()}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/move_only_function/dsc swap2}}
{{dsc inc|cpp/utility/functional/move_only_function/dsc operator{{==}}}}
{{dsc end}}

===注解===
实现可能会将较小的可调用对象存储于 {{tt|std::move_only_function}} 对象内部。实际上要求对函数指针和 {{lc|std::reference_wrapper}} 的特化进行这样的小对象优化，且只有满足 {{c|std::is_nothrow_move_constructible_v&lt;T&gt;}} 为 {{c|true}} 的类型 {{tt|T}} 才能应用优化。

若一个函数或函数对象（包括无尾随返回类型的 lambda 表达式）返回纯右值，用这样的对象初始化返回值为引用的 {{tt|std::move_only_function}}，则程序非良构，因为禁止将返回的引用绑定到临时对象。参阅 {{rlpt|function#注解|std::function}} 的注解。

{{feature test macro|__cpp_lib_move_only_function|std=C++23|value=202110L|{{tt|std::move_only_function}}}}

===示例===
{{example
|code=
#include &lt;functional&gt;
#include &lt;future&gt;
#include &lt;iostream&gt;

int main()
{
    std::packaged_task&lt;double()&gt; packaged_task([](){ return 3.14159; });

    std::future&lt;double&gt; future = packaged_task.get_future();

    auto lambda = [task = std::move(packaged_task)]() mutable { task(); };

//  std::function&lt;void()&gt; function = std::move(lambda); // 错误
    std::move_only_function&lt;void()&gt; function = std::move(lambda); // OK

    function();

    std::cout &lt;&lt; future.get();
}
|output=
3.14159
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc function}}
{{dsc inc|cpp/utility/functional/dsc function_ref}}
{{dsc inc|cpp/utility/functional/dsc copyable_function}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
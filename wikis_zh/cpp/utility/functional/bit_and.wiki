{{cpp/title|bit_and}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl rev begin}}
{{dcl|until=c++14|
template&lt; class T &gt;
struct bit_and;
}}
{{dcl|since=c++14|1=
template&lt; class T = void &gt;
struct bit_and;
}}
{{dcl rev end}}
{{dcl end}}

进行逐位与的函数对象。相当于调用类型 {{tt|T}} 上的 {{c|operator&amp;}}。

===特化===
{{rev begin}}
{{rev|since=c++14|
标准库提供 {{tt|std::bit_and}} 在不指定 {{tt|T}} 时的特化，它使得形参类型和返回类型留待推导。
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc bit_and_void}}
{{dsc end}}
}}
{{rev end}}

{{cpp/utility/functional/member types|result=T|arg1=T|arg2=T}}

===成员函数===
{{dsc begin}}
{{dsc mem fun|operator()|nolink=true|返回两个实参逐位与的结果}}
{{dsc end}}

{{member|{{small|std::bit_and::}}operator()|2=
{{dcl begin}}
{{dcla|constexpr=c++14|1=
T operator()( const T&amp; lhs, const T&amp; rhs ) const;
}}
{{dcl end}}

返回 {{c|lhs}} 和 {{c|rhs}} 逐位与的结果。

===参数===
{{par begin}}
{{par|lhs, rhs|要计算逐位与的值}}
{{par end}}

===返回值===
{{c|lhs &amp; rhs}} 的结果。

{{cpp/impldef exception}}

===可能的实现===
{{eq fun|1=
constexpr T operator()(const T&amp; lhs, const T&amp; rhs) const
{
    return lhs &amp; rhs;
}
}}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=660|std=C++98|before=缺少逐位运算的函数对象|after=已添加}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
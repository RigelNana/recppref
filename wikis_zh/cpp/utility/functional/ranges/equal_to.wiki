{{cpp/ranges/title|equal_to}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|functional}}
{{dcl|since=c++20|
struct equal_to;
}}
{{dcl end}}

进行比较的函数对象。从实参推导函数调用运算符的形参类型（但非返回类型）。

===嵌套类型===
{{dsc begin}}
{{dsc hitem|嵌套类型|定义}}
{{dsc|{{tt|is_transparent}}|[[cpp/utility/functional#透明函数对象|未指定]]}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem fun|{{PAGENAME}}#operator call|title=operator()|nolink=true|检查实参是否''相等''}}
{{dsc end}}

{{member|1={{small|std::ranges::equal_to::}}operator()|2=
{{ddcl|
template&lt; class T, class U &gt;
constexpr bool operator()( T&amp;&amp; t, U&amp;&amp; u ) const;
}}

给定表达式 {{c|1=std::forward&lt;T&gt;(t) == std::forward&lt;U&gt;(u)}} 为 {{c|expr}}：
* 给定 {{c|t}} 和 {{c|u}} 的{{ls|cpp/language/pointer#合成指针类型}}为 {{tt|P}}，如果 {{c|expr}} 造成调用比较指针的[[cpp/language/operator comparison#内建指针相等性比较|内建的]] {{c/core|1=operator==}}：
:* 对于转换后的两个（{{tt|P}} 类型）指针，如果其中一个指针在[[cpp/language/operator comparison#指针全序|由实现定义的指针严格全序]]中先于另一指针，那么返回 {{c|false}}，否则返回 {{c|true}}。
:* 如果从 {{tt|T}} 到 {{tt|P}} 的转换序列或从 {{tt|U}} 到 {{tt|P}} 的转换序列没有[[cpp/concepts#相等性保持|保持相等性]]，那么行为未定义。
* 否则：
:* 返回 {{c|expr}} 的结果。
:* 如果没有实现 {{c|std::equality_comparable_with&lt;T, U&gt;}}，那么行为未定义。

{{cpp/enable if|满足 {{c|std::equality_comparable_with&lt;T, U&gt;}} }}。
}}

===注解===
与 {{lc|std::equal_to}} 相比，{{tt|std::ranges::equal_to}} 还（通过 {{lconcept|equality_comparable_with}} 约束）要求 {{tt|1=!=}} 合法，并且要求两个实参的类型都可与自身进行（同质）比较。

===示例===
{{example}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3530|std=C++20|before=在比较指针时放松了语法检查|after=仅放松语义要求}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc equal_to}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
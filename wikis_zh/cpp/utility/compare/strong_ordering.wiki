{{cpp/title|strong_ordering}}
{{cpp/utility/navbar}}
{{ddcl|since=c++20|header=compare|1=
class strong_ordering;
}}

类类型 {{tt|std::strong_ordering}} 是[[cpp/language/operator_comparison#三路比较|三路比较]]的结果类型：
* 接纳所有六个关系运算符（{{tt|1===}}、{{tt|1=!=}}、{{tt|&lt;}}、{{tt|1=&lt;=}}、{{tt|&gt;}}、{{tt|1=&gt;=}}）。
{{cpp/utility/compare/substitutable|yes}}
* {{enwiki|Connected relation|不允许不可比较值}}：{{c|a &lt; b}}、{{c|1=a == b}} 和 {{c|a &gt; b}} 必然恰有一个为 {{c|true}}。

===常量===
{{tt|std::strong_ordering}} 类型拥有四个合法值，实现为其类型的 const 静态数据成员：
{{dsc begin}}
{{dsc hitem|名称|定义}}
{{dsc mem sconst|{{dsc small|{{c/core|inline constexpr std::strong_ordering}}}} less|nolink=true|合法值，指示小于（先序）关系}}
{{dsc mem sconst|{{dsc small|{{c/core|inline constexpr std::strong_ordering}}}} equivalent|nolink=true|合法值，指示等价（既非先序亦非后序），等于 {{tt|equal}}}}
{{dsc mem sconst|{{dsc small|{{c/core|inline constexpr std::strong_ordering}}}} equal|nolink=true|合法值，指示等价（既非先序亦非后序），等于 {{tt|equivalent}}}}
{{dsc mem sconst|{{dsc small|{{c/core|inline constexpr std::strong_ordering}}}} greater|nolink=true|合法值，指示大于（后序）关系}}
{{dsc end}}

===转换===
{{tt|std::strong_ordering}} 是三个比较类别的最强者：它不能从任何其他类别隐式转换，而能隐式转换到其他两种类别。

{{dsc begin}}
{{dsc mem fun|cpp/utility/compare/strong_ordering|inlinemem=true|title=operator partial_ordering|到 {{lc|std::partial_ordering}} 的隐式转换}}
{{dsc end}}

{{member|{{small|std::strong_ordering::}}operator partial_ordering|2=
{{ddcl|1=
constexpr operator partial_ordering() const noexcept;
}}

===返回值===
若 {{tt|v}} 为 {{tt|less}} 则为 {{lc|std::partial_ordering::less}}，若 {{tt|v}} 为 {{tt|greater}} 则为 {{lc|std::partial_ordering::greater}}，若 {{tt|v}} 为 {{tt|equal}} 或 {{tt|equivalent}} 则为 {{lc|std::partial_ordering::equivalent}}。
}}

{{dsc begin}}
{{dsc mem fun|cpp/utility/compare/strong_ordering|inlinemem=true|title=operator weak_ordering|到 {{lc|std::weak_ordering}} 的隐式转换}}
{{dsc end}}

{{member|{{small|std::strong_ordering::}}operator weak_ordering|2=
{{ddcl|1=
constexpr operator weak_ordering() const noexcept;
}}

===返回值===
若 {{tt|v}} 为 {{tt|less}} 则为 {{lc|std::weak_ordering::less}}，若 {{tt|v}} 为 {{tt|greater}} 则为 {{lc|std::weak_ordering::greater}}，若 {{tt|v}} 为 {{tt|equal}} 或 {{tt|equivalent}} 则为 {{lc|std::weak_ordering::equivalent}}。
}}

===比较===
此类型的值和字面量 {{c|0}} 之间定义了比较运算符。这支持用表达式 {{c|1=a &lt;=&gt; b == 0}} 或 {{c|1=a &lt;=&gt; b &lt; 0}} 把三路比较的结果转换为布尔关系；见 {{ltt|cpp/utility/compare/named_comparison_functions|std::is_eq}}、{{ltt|cpp/utility/compare/named_comparison_functions|std::is_lt}} 等。

{{cpp/hidden friend|plural=yes|{{tt|std::strong_ordering}}}}

若程序试图将 {{tt|strong_ordering}} 与任何异于整数字面量 {{c|0}} 的内容比较，则其行为未定义。

{{dsc begin}}
{{dsc fun|cpp/utility/compare/strong_ordering|inlinemem=true|title=operator{{==}}&lt;br&gt;operator&amp;lt;&lt;br&gt;operator&amp;gt;&lt;br&gt;operator&amp;lt;{{=}}&lt;br&gt;operator&amp;gt;{{=}}&lt;br&gt;operator&lt;{{=}}&gt;|与零或 {{tt|strong_order}} 比较}}
{{dsc end}}

{{member|1=operator==|2=
{{dcl begin}}
{{dcl|num=1|1=
friend constexpr bool
operator==( strong_ordering v, /* 未指明 */ u ) noexcept;
}}
{{dcl|num=2|1=
friend constexpr bool
operator==( strong_ordering v, strong_ordering w ) noexcept = default;
}}
{{dcl end}}

===参数===
{{par begin}}
{{par|v, w|要检查的 {{tt|std::strong_ordering}} 值}}
{{par|u|未使用的形参，具有接受字面零实参的任何类型}}
{{par end}}

===返回值===
@1@ 若 {{tt|v}} 为 {{tt|equivalent}} 或 {{tt|equal}} 则为 {{c|true}}，若 {{tt|v}} 为 {{tt|less}} 或 {{tt|greater}} 则为 {{c|false}}。
@2@ 若两个形参持有相同值则为 {{c|true}}，否则为 {{c|false}}。注意 {{tt|equal}} 等于 {{tt|equivalent}}。
}}

{{member|1=operator&lt;|2=
{{dcl begin}}
{{dcl|num=1|1=
friend constexpr bool operator&lt;( strong_ordering v, /* 未指明 */ u ) noexcept;
}}
{{dcl|num=2|1=
friend constexpr bool operator&lt;( /* 未指明 */ u, strong_ordering v ) noexcept;
}}
{{dcl end}}

===参数===
{{par begin}}
{{par|v|要检查的 {{tt|std::strong_ordering}} 值}}
{{par|u|未使用的形参，具有接受字面零实参的任何类型}}
{{par end}}

===返回值===
@1@ 若 {{tt|v}} 为 {{tt|less}} 则为 {{c|true}}，若 {{tt|v}} 为 {{tt|greater}}、{{tt|equivalent}} 或 {{tt|equal}} 则为 {{c|false}}。
@2@ 若 {{tt|v}} 为 {{tt|greater}} 则为 {{c|true}}，若 {{tt|v}} 为 {{tt|less}}、{{tt|equivalent}} 或 {{tt|equal}} 则为 {{c|false}}。
}}

{{member|1=operator&lt;=|2=
{{dcl begin}}
{{dcl|num=1|1=
friend constexpr bool operator&lt;=( strong_ordering v, /* 未指明 */ u ) noexcept;
}}
{{dcl|num=2|1=
friend constexpr bool operator&lt;=( /* 未指明 */ u, strong_ordering v ) noexcept;
}}
{{dcl end}}

===参数===
{{par begin}}
{{par|v|要检查的 {{tt|std::strong_ordering}} 值}}
{{par|u|未使用的形参，具有接受字面零实参的任何类型}}
{{par end}}

===返回值===
@1@ 若 {{tt|v}} 为 {{tt|less}}、{{tt|equivalent}} 或 {{tt|equal}} 则为 {{c|true}}，若 {{tt|v}} 为 {{tt|greater}} 则为 {{c|false}}。
@2@ 若 {{tt|v}} 为 {{tt|greater}}、{{tt|equivalent}} 或 {{tt|equal}} 则为 {{c|true}}，若 {{tt|v}} 为 {{tt|less}} 则为 {{c|false}}。
}}

{{member|1=operator&gt;|2=
{{dcl begin}}
{{dcl|num=1|1=
friend constexpr bool operator&gt;( strong_ordering v, /* 未指明 */ u ) noexcept;
}}
{{dcl|num=2|1=
friend constexpr bool operator&gt;( /* 未指明 */ u, strong_ordering v ) noexcept;
}}
{{dcl end}}

===参数===
{{par begin}}
{{par|v|要检查的 {{tt|std::strong_ordering}} 值}}
{{par|u|未使用的形参，具有接受字面零实参的任何类型}}
{{par end}}

===返回值===
@1@ 若 {{tt|v}} 为 {{tt|greater}} 则为 {{c|true}}，若 {{tt|v}} 为 {{tt|less}}、{{tt|equivalent}} 或 {{tt|equal}} 则为 {{c|false}}。
@2@ 若 {{tt|v}} 为 {{tt|less}} 则为 {{c|true}}，若 {{tt|v}} 为 {{tt|greater}}、{{tt|equivalent}} 或 {{tt|equal}} 则为 {{c|false}}。
}}

{{member|1=operator&gt;=|2=
{{dcl begin}}
{{dcl|num=1|1=
friend constexpr bool operator&gt;=( strong_ordering v, /* 未指明 */ u ) noexcept;
}}
{{dcl|num=2|1=
friend constexpr bool operator&gt;=( /* 未指明 */ u, strong_ordering v ) noexcept;
}}
{{dcl end}}

===参数===
{{par begin}}
{{par|v|要检查的 {{tt|std::strong_ordering}} 值}}
{{par|u|未使用的形参，具有接受字面零实参的任何类型}}
{{par end}}

===返回值===
@1@ 若 {{tt|v}} 为 {{tt|greater}}、{{tt|equivalent}} 或 {{tt|equal}} 则为 {{c|true}}，若 {{tt|v}} 为 {{tt|less}} 则为 {{c|false}}。
@2@ 若 {{tt|v}} 为 {{tt|less}}、{{tt|equivalent}} 或 {{tt|equal}} 则为 {{c|true}}，若 {{tt|v}} 为 {{tt|greater}} 则为 {{c|false}}。
}}

{{member|1=operator&lt;=&gt;|2=
{{dcl begin}}
{{dcl|num=1|1=
friend constexpr strong_ordering
operator&lt;=&gt;( strong_ordering v, /* 未指明 */ u ) noexcept;
}}
{{dcl|num=2|1=
friend constexpr strong_ordering
operator&lt;=&gt;( /* 未指明 */ u, strong_ordering v ) noexcept;
}}
{{dcl end}}

===参数===
{{par begin}}
{{par|v|要检查的 {{tt|std::strong_ordering}} 值}}
{{par|u|未使用的形参，具有接受字面零实参的任何类型}}
{{par end}}

===返回值===
@1@ {{c|v}}。
@2@ 若 {{tt|v}} 为 {{tt|less}} 则为 {{c|greater}}，若 {{tt|v}} 为 {{tt|greater}} 则为 {{c|less}}，否则为 {{tt|v}}。
}}

===示例===
{{example
|code=
#include &lt;compare&gt;
#include &lt;iostream&gt;

struct Point
{
    int x{}, y{};

    friend constexpr std::strong_ordering operator&lt;=&gt;(Point lhs, Point rhs)
    {
        if (lhs.x &lt; rhs.x or (lhs.x == rhs.x and lhs.y &lt; rhs.y))
            return std::strong_ordering::less;
        if (lhs.x &gt; rhs.x or (lhs.x == rhs.x and lhs.y &gt; rhs.y))
            return std::strong_ordering::greater;
        return std::strong_ordering::equivalent;
    }

    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, Point s)
    {
        return os &lt;&lt; '(' &lt;&lt; s.x &lt;&lt; ',' &lt;&lt; s.y &lt;&lt; ')';
    }
};

void print_three_way_comparison(const auto&amp; p, const auto&amp; q)
{
    const auto cmp{p &lt;=&gt; q};
    std::cout &lt;&lt; p
              &lt;&lt; (cmp &lt; 0 ? " &lt;  " : cmp &gt; 0 ? " &gt;  " : " == " ) // 与 0 比较
              &lt;&lt; q &lt;&lt; '\n';
}

void print_two_way_comparison(const auto&amp; p, const auto&amp; q)
{
    std::cout &lt;&lt; p
              &lt;&lt; (p &lt; q ? " &lt;  " : p &gt; q ? " &gt;  " : " == ") // 比较 p 和 q
              &lt;&lt; q &lt;&lt; '\n';
}

int main()
{
    const Point p1{0, 1}, p2{0, 1}, p3{0, 2};

    print_three_way_comparison(p1, p2);
    print_two_way_comparison(p1, p2);

    print_three_way_comparison(p2, p3);
    print_two_way_comparison(p2, p3);

    print_three_way_comparison(p3, p2);
    print_two_way_comparison(p3, p2);
}
|output=
(0,1) == (0,1)
(0,1) == (0,1)
(0,1) &lt;  (0,2)
(0,1) &lt;  (0,2)
(0,2) &gt;  (0,1)
(0,2) &gt;  (0,1)
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/compare/dsc weak_ordering}}
{{dsc inc|cpp/utility/compare/dsc partial_ordering}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
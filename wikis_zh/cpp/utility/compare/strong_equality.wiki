{{cpp/title|strong_equality}}
{{cpp/utility/navbar}}
{{ddcl | since=c++20 | header=compare| 1=
class strong_equality;
}}

类类型 {{tt|std::strong_equality}} 是这种[[cpp/language/operator_comparison#三路比较|三路比较]]的结果类型：
* 仅接纳相等和不等比较（非小于/大于）
{{cpp/utility/compare/substitutable|yes}}

===常量===
类型 {{tt|std::strong_equality}} 拥有四个合法值，作为其类型的 const 静态数据成员实现：
{{dsc begin}}
{{dsc hitem |成员常量|定义}}
{{dsc mem sconst | equivalent | nolink=true| title=equivalent{{mark|inline constexpr}} |{{tt|std::strong_equality}} 类型的合法值，指示相等，等于 {{tt|equal}}}}
{{dsc mem sconst | equal | nolink=true| title=equal{{mark|inline constexpr}} |{{tt|std::strong_equality}} 类型的合法值，指示相等，等于 {{tt|equivalent}}}}
{{dsc mem sconst | nonequivalent | nolink=true| title=nonequivalent{{mark|inline constexpr}} |{{tt|std::strong_equality}} 类型的合法值，指示不相等，等于 {{tt|nonequal}}}}
{{dsc mem sconst | nonequal | nolink=true| title=nonequal{{mark|inline constexpr}} |{{tt|std::strong_equality}} 类型的合法值，指示不相等，等于 {{tt|nonequivalent}}}}
{{dsc end}}

===转换===
{{tt|std::strong_equality}} 可隐式转换为 {{lc|std::weak_equality}} ，而 {{lc|std::strong_ordering}} 可隐式转换为 {{lc|strong_equality}} 。

{{dsc begin}}
{{dsc mem fun | cpp/utility/compare/strong_equality | inlinemem=true | title=operator weak_equality |到 {{lc|std::weak_equality}} 的隐式转换}}
{{dsc end}}

{{member | {{small|std::strong_equality::}}operator weak_equality | 2=
{{ddcl | 1=
constexpr operator weak_equality() const noexcept;
}}

===返回值===
若 {{tt|v}} 为 {{tt|equivalent}} 或 {{tt|equal}} 则为 {{lc|std::weak_equality::equivalent}} ，若 {{tt|v}} 为 {{tt|nonequivalent}} 或 {{tt|nonequal}} 则为 {{c|std::weak_equality::nonequivalent}} 。
}}

===比较===
比较运算符在此类型和字面量 {{c|0}} 间定义。这支持用表达式 {{c|1=a &lt;=&gt; b == 0}} 和 {{c|1=a &lt;=&gt; b != 0}} 转换三路比较运算符的结果为布尔关系；见 {{ltt|cpp/utility/compare/named_comparison_functions|std::is_eq}} 与 {{ltt|cpp/utility/compare/named_comparison_functions|std::is_neq}} 。

若程序试图将 {{tt|strong_equality}} 与任何异于整数字面量 {{c|0}} 的内容比较，则其行为未定义。

{{dsc begin}}
{{dsc fun | cpp/utility/compare/strong_equality | inlinemem=true | title=operator{{==}}&lt;br&gt;operator&lt;{{=}}&gt; |与零或 {{tt|strong_equality}} 比较}}
{{dsc end}}

{{member | operator{{==}} | 2=
{{dcl begin}}
{{dcl | num=1 | 1=
friend constexpr bool operator==(strong_equality v, /*unspecified*/ u) noexcept;
}}
{{dcl | num=2 | 1=
friend constexpr bool operator==(strong_equality v, strong_equality w) noexcept = default;
}}
{{dcl end}}

===参数===
{{par begin}}
{{par | v, w |要检查的 {{tt|std::strong_equality}} 值}}
{{par | u |接受字面零实参的任何类型不使用形参}}
{{par end}}

===返回值===
@1@ 若 {{tt|v}} 为 {{tt|equivalent}} 或 {{tt|equal}} 则为 {{c|true}} ，而若 {{tt|v}} 为 {{tt|nonequivalent}} 或 {{tt|nonequal}} 则为 {{c|false}} 。
@2@ 若两个参数持有相同值则为 {{c|true}} ，否则为 {{c|false}} 。注意 {{tt|equal}} 等于 {{tt|equivalent}} 而 {{tt|nonequal}} 等于 {{tt|nonequivalent}} ，但 {{tt|equal}} 不等于 {{tt|nonequal}} 。
}}

{{member | operator!{{=}} | 2=
{{ddcl | 1=
friend constexpr bool operator!=(strong_equality v, /*unspecified*/ u) noexcept;
friend constexpr bool operator!=(/*unspecified*/ u, strong_equality v) noexcept;
}}

===参数===
{{par begin}}
{{par | v |要检查的 {{tt|std::strong_equality}} 值}}
{{par | u |接受字面零实参的任何类型不使用形参}}
{{par end}}

===返回值===
若 {{tt|v}} 为 {{tt|equivalent}} 或 {{tt|equal}} 则为 {{c|false}} ，而若 {{tt|v}} 为 {{tt|nonequivalent}} 或 {{tt|nonequal}} 则为 {{c|true}} 。
}}

{{member | operator&lt;{{=}}&gt; | 2=
{{ddcl | 1=
friend constexpr strong_equality operator&lt;=&gt;(strong_equality v, /*unspecified*/ u) noexcept;
friend constexpr strong_equality operator&lt;=&gt;(/*unspecified*/ u, strong_equality v) noexcept;
}}

===参数===
{{par begin}}
{{par | v |要检查的 {{tt|std::strong_equality}} 值}}
{{par | u |接受字面零实参的任何类型不使用形参}}
{{par end}}

===返回值===
{{c|v}}
}}

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/utility/compare/dsc strong_ordering}}
{{dsc inc | cpp/utility/compare/dsc weak_ordering}}
{{dsc inc | cpp/utility/compare/dsc partial_ordering}}
{{dsc inc | cpp/utility/compare/dsc weak_equality}}
{{dsc end}}

{{langlinks|en|ja}}
{{cpp/title|partial_order}}
{{cpp/utility/navbar}}
{{dcl begin}}
{{dcl header|compare}}
{{dcl|since=c++20|1=
inline namespace /* 未指定 */ {
    inline constexpr /* 未指定 */ partial_order = /* 未指定 */;
}
}}
{{dcl h|调用签名}}
{{dcl|1=
template&lt; class T, class U &gt;
    requires /* 见下文 */
constexpr std::partial_ordering
    partial_order( T&amp;&amp; t, U&amp;&amp; u ) noexcept(/* 见下文 */);
}}
{{dcl end}}

用三路比较比较两个值，并产生 {{rlpt|partial_ordering|std::partial_ordering}} 类型的结果。

设 {{c|t}} 与 {{c|u}} 为表达式，而 {{tt|T}} 与 {{tt|U}} 分别代表 {{c/core|decltype((t))}} 与 {{c/core|decltype((u))}}，那么 {{c|std::partial_order(t, u)}} [[cpp/language/expressions#表达式等价|表达式等价]]于：
* 如果 {{c|std::is_same_v&lt;std::decay_t&lt;T&gt;, std::decay_t&lt;U&gt;&gt;}} 是 {{c|true}}：
** {{c|std::partial_ordering(partial_order(t, u))}}，如果它在不包含 {{tt|std::partial_order}} 的声明的语境中进行重载决议的情况下是良构的表达式，
** 否则是 {{c|1=std::partial_ordering(std::compare_three_way()(t, u))}}，如果它良构，
** 否则是 {{c|std::partial_ordering(std::weak_order(t, u))}}，如果它良构。
* 所有其他情况下，该表达式非良构，这能在出现于模板实例化的立即语境时导致[[cpp/language/sfinae|代换失败]]。

{{cpp/ranges/cpo|std}}

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/compare/dsc partial_ordering}}
{{dsc inc|cpp/utility/compare/dsc strong_order}}
{{dsc inc|cpp/utility/compare/dsc weak_order}}
{{dsc inc|cpp/utility/compare/dsc compare_partial_order_fallback}}
{{dsc end}}

{{langlinks|de|en|es|ru|ja}}
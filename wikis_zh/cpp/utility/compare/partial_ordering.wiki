{{cpp/title|partial_ordering}}
{{cpp/utility/navbar}}
{{ddcl|since=c++20|header=compare|1=
class partial_ordering;
}}

类类型 {{tt|std::partial_ordering}} 是[[cpp/language/operator_comparison#三路比较|三路比较]]的结果类型：
* 接纳所有六个关系运算符（{{tt|1===}}、{{tt|1=!=}}、{{tt|&lt;}}、{{tt|1=&lt;=}}、{{tt|&gt;}}、{{tt|1=&gt;=}}）。
{{cpp/utility/compare/substitutable|no}}
* {{enwiki|Connected relation|接纳不可比较值}}：{{c|a &lt; b}}、{{c|1=a == b}} 和 {{c|a &gt; b}} 可以都为 {{c|false}}。

===常量===
类型 {{tt|std::partial_ordering}} 拥有四个合法值，实现为其类型的 const 静态数据成员：
{{dsc begin}}
{{dsc hitem|名称|定义}}
{{dsc mem sconst|{{dsc small|{{c/core|inline constexpr std::partial_ordering}}}} less|nolink=true|合法值，指示小于（先序）关系}}
{{dsc mem sconst|{{dsc small|{{c/core|inline constexpr std::partial_ordering}}}} equivalent|nolink=true|合法值，指示等价（既非先序亦非后序）}}
{{dsc mem sconst|{{dsc small|{{c/core|inline constexpr std::partial_ordering}}}} greater|nolink=true|合法值，指示大于（后序）关系}}
{{dsc mem sconst|{{dsc small|{{c/core|inline constexpr std::partial_ordering}}}} unordered|nolink=true|合法值，指示与不可比较值的关系}}
{{dsc end}}

===转换===
{{tt|std::partial_ordering}} 不可隐式转换为其他比较类别类型，而 {{lc|std::strong_ordering}} 和 {{lc|std::weak_ordering}} 均可隐式转换为 {{lc|partial_ordering}}。

===比较===
此类型的值和字面量 {{c|0}} 之间定义了比较运算符。这支持用表达式 {{c|1=a &lt;=&gt; b == 0}} 或 {{c|1=a &lt;=&gt; b &lt; 0}} 把三路比较的结果转换为布尔关系；见 {{ltt|cpp/utility/compare/named_comparison_functions|std::is_eq}}、{{ltt|cpp/utility/compare/named_comparison_functions|std::is_lt}} 等。

{{cpp/hidden friend|plural=yes|{{tt|std::partial_ordering}}}}

若程序试图将 {{tt|partial_ordering}} 与任何异于整数字面量 {{c|0}} 的内容比较，则其行为未定义。

{{dsc begin}}
{{dsc fun|cpp/utility/compare/partial_ordering|inlinemem=true|title=operator{{==}}&lt;br&gt;operator&amp;lt;&lt;br&gt;operator&amp;gt;&lt;br&gt;operator&amp;lt;{{=}}&lt;br&gt;operator&amp;gt;{{=}}&lt;br&gt;operator&lt;{{=}}&gt;|与零或 {{tt|partial_ordering}} 比较}}
{{dsc end}}

{{member|operator{{==}}|2=
{{dcl begin}}
{{dcl|num=1|1=
friend constexpr bool operator==( partial_ordering v, /* 未指明 */ u ) noexcept;
}}
{{dcl|num=2|1=
friend constexpr bool
    operator==( partial_ordering v, partial_ordering w ) noexcept = default;
}}
{{dcl end}}

===参数===
{{par begin}}
{{par|v, w|要检查的 {{tt|std::partial_ordering}} 值}}
{{par|u|不使用的形参，具有接受字面零实参的任何类型}}
{{par end}}

===返回值===
@1@ 若 {{tt|v}} 为 {{tt|equivalent}} 则为 {{c|true}}，若 {{tt|v}} 为 {{tt|unordered}}、{{tt|less}} 或 {{tt|greater}} 则为 {{c|false}}。
@2@ 若两个形参持有相同值则为 {{c|true}}，否则为 {{c|false}}。
}}

{{member|operator&amp;lt;|2=
{{dcl begin}}
{{dcl|num=1|1=
friend constexpr bool operator&lt;( partial_ordering v, /* 未指明 */ u ) noexcept;
}}
{{dcl|num=2|1=
friend constexpr bool operator&lt;( /* 未指明 */ u, partial_ordering v ) noexcept;
}}
{{dcl end}}

===参数===
{{par begin}}
{{par|v|要检查的 {{tt|std::partial_ordering}} 值}}
{{par|u|不使用的形参，具有接受字面零实参的任何类型}}
{{par end}}

===返回值===
@1@ 若 {{tt|v}} 为 {{tt|less}} 则为 {{c|true}}，若 {{tt|v}} 为 {{tt|greater}}、{{tt|equivalent}} 或 {{tt|unordered}} 则为 {{c|false}}。
@2@ 若 {{tt|v}} 为 {{tt|greater}} 则为 {{c|true}}，若 {{tt|v}} 为 {{tt|less}}、{{tt|equivalent}} 或 {{tt|unordered}} 则为 {{c|false}}。
}}

{{member|operator&amp;lt;{{=}}|2=
{{dcl begin}}
{{dcl|num=1|1=
friend constexpr bool operator&lt;=( partial_ordering v, /* 未指明 */ u ) noexcept;
}}
{{dcl|num=2|1=
friend constexpr bool operator&lt;=( /* 未指明 */ u, partial_ordering v ) noexcept;
}}
{{dcl end}}

===参数===
{{par begin}}
{{par|v|要检查的 {{tt|std::partial_ordering}} 值}}
{{par|u|不使用的形参，具有接受字面零实参的任何类型}}
{{par end}}

===返回值===
@1@ 若 {{tt|v}} 为 {{tt|less}} 或 {{tt|equivalent}} 则为 {{c|true}}，若 {{tt|v}} 为 {{tt|greater}} 或 {{tt|unordered}} 则为 {{c|false}}。
@2@ 若 {{tt|v}} 为 {{tt|greater}} 或 {{tt|equivalent}} 则为 {{c|true}}，而若 {{tt|v}} 为 {{tt|less}} 或 {{tt|unordered}} 则为 {{c|false}}。
}}

{{member|operator&amp;gt;|2=
{{dcl begin}}
{{dcl|num=1|1=
friend constexpr bool operator&gt;( partial_ordering v, /* 未指明 */ u ) noexcept;
}}
{{dcl|num=2|1=
friend constexpr bool operator&gt;( /* 未指明 */ u, partial_ordering v ) noexcept;
}}
{{dcl end}}

===参数===
{{par begin}}
{{par|v|要检查的 {{tt|std::partial_ordering}} 值}}
{{par|u|不使用的形参，具有接受字面零实参的任何类型}}
{{par end}}

===返回值===
@1@ 若 {{tt|v}} 为 {{tt|greater}} 则为 {{c|true}}，若 {{tt|v}} 为 {{tt|less}}、{{tt|equivalent}} 或 {{tt|unordered}} 则为 {{c|false}}。
@2@ 若 {{tt|v}} 为 {{tt|less}} 则为 {{c|true}}，若 {{tt|v}} 为 {{tt|greater}}、{{tt|equivalent}} 或 {{tt|unordered}} 则为 {{c|false}}。
}}

{{member|operator&amp;gt;{{=}}|2=
{{dcl begin}}
{{dcl|num=1|1=
friend constexpr bool operator&gt;=( partial_ordering v, /* 未指明 */ u ) noexcept;
}}
{{dcl|num=2|1=
friend constexpr bool operator&gt;=( /* 未指明 */ u, partial_ordering v ) noexcept;
}}
{{dcl end}}

===参数===
{{par begin}}
{{par|v|要检查的 {{tt|std::partial_ordering}} 值}}
{{par|u|不使用的形参，具有接受字面零实参的任何类型}}
{{par end}}

===返回值===
@1@ 若 {{tt|v}} 为 {{tt|greater}} 或 {{tt|equivalent}} 则为 {{c|true}}，若 {{tt|v}} 为 {{tt|less}} 或 {{tt|unordered}} 则为 {{c|false}}。
@2@ 若 {{tt|v}} 为 {{tt|less}} 或 {{tt|equivalent}} 则为 {{c|true}}，若 {{tt|v}} 为 {{tt|greater}} 或 {{tt|unordered}} 则为 {{c|false}}。
}}

{{member|operator&lt;{{=}}&gt;|2=
{{dcl begin}}
{{dcl|num=1|1=
friend constexpr partial_ordering operator&lt;=&gt;( partial_ordering v, /* 未指明 */ u ) noexcept;
}}
{{dcl|num=2|1=
friend constexpr partial_ordering operator&lt;=&gt;( /* 未指明 */ u, partial_ordering v ) noexcept;
}}
{{dcl end}}

===参数===
{{par begin}}
{{par|v|要检查的 {{tt|std::partial_ordering}} 值}}
{{par|u|不使用的形参，具有接受字面零实参的任何类型}}
{{par end}}

===返回值===
@1@ {{c|v}}。
@2@ 若 {{tt|v}} 为 {{tt|less}} 则为 {{tt|greater}}，若 {{tt|v}} 为 {{tt|greater}} 则为 {{tt|less}}，否则为 {{tt|v}}。
}}

===注解===
浮点值之间的[[cpp/language/operator_comparison#三路比较|内建运算符 &lt;=&gt;]] 使用这样的顺序：正零与负零比较为 {{tt|equivalent}}，但能予以区分，而 NaN 值与任何其他值比较为 {{tt|unordered}}。

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/compare/dsc strong_ordering}}
{{dsc inc|cpp/utility/compare/dsc weak_ordering}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/title|compare_three_way}}
{{cpp/utility/functional/navbar}}
{{dcl begin}}
{{dcl header|compare}}
{{dcl header|functional}}
{{dcl|since=c++20|
struct compare_three_way;
}}
{{dcl end}}

进行比较的函数对象。推导函数调用运算符的形参类型与返回类型。

===嵌套类型===
{{dsc begin}}
{{dsc hitem|嵌套类型|定义}}
{{dsc|{{tt|is_transparent}}|[[cpp/utility/functional#透明函数对象|未指定]]}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem fun|operator()|nolink=true|获得两个实参的三路比较结果}}
{{dsc end}}

{{member|1={{small|std::compare_three_way::}}operator()|2=
{{ddcl|
template&lt;class T, class U&gt;
constexpr auto operator()( T&amp;&amp; t, U&amp;&amp; u ) const;
}}

给定表达式 {{c|1=std::forward&lt;T&gt;(t) &lt;=&gt; std::forward&lt;U&gt;(u)}} 为 {{c|expr}}：
* 如果 {{c|expr}} 导致调用比较指针的[[cpp/language/operator comparison#内建指针相等性比较|内建]] {{c/core|1=operator&lt;=&gt;}}，那么给定 {{c|t}} 和 {{c|u}} 的{{ls|cpp/language/pointer#合成指针类型}}为 {{tt|P}}：
:* 在[[cpp/language/operator comparison#指针全序|由实现定义的指针严格全序]]中比较转换后的两个（{{tt|P}} 类型）指针：
::* 如果 {{c|t}} 先于 {{c|u}}，那么返回 {{ltt|cpp/utility/compare/strong_ordering|std::strong_ordering::less}}。
::* 如果 {{c|u}} 先于 {{c|t}}，那么返回 {{ltt|cpp/utility/compare/strong_ordering|std::strong_ordering::greater}}。
::* 否则返回 {{ltt|cpp/utility/compare/strong_ordering|std::strong_ordering::equal}}。
:* 如果从 {{tt|T}} 到 {{tt|P}} 的转换序列或从 {{tt|U}} 到 {{tt|P}} 的转换序列没有[[cpp/concepts#相等性保持|保持相等性]]，那么行为未定义。
* 否则：
:* 返回 {{c|expr}} 的结果。
:* 如果没有实现 {{c|std::three_way_comparable_with&lt;T, U&gt;}}，那么行为未定义。

{{cpp/enable if|满足 {{c|std::three_way_comparable_with&lt;T, U&gt;}} }}。
}}

===示例===
{{example|code=
#include &lt;compare&gt;
#include &lt;iostream&gt;

struct Rational
{
    int num;
    int den; // &gt; 0
    
    // 虽然可以用 X &lt;=&gt; Y 进行比较，但是直接调用
    // std::compare_three_way{}(X, Y) 需要先定义 operator==
    // 以满足 std::three_way_comparable_with。
    constexpr bool operator==(Rational const&amp;) const = default;
};

constexpr std::weak_ordering operator&lt;=&gt;(Rational lhs, Rational rhs)
{
    return lhs.num * rhs.den &lt;=&gt; rhs.num * lhs.den;
}

void print(std::weak_ordering value)
{
    value &lt; 0 ? std::cout &lt;&lt; "小于\n" :
    value &gt; 0 ? std::cout &lt;&lt; "大于\n" :
                std::cout &lt;&lt; "等于\n";
}

int main()
{
    Rational a{6, 5};
    Rational b{8, 7};
    print(a &lt;=&gt; b);
    print(std::compare_three_way{}(a, b));
}
|output=
大于
大于
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3530|std=C++20|before=在比较指针时放松了语法检查|after=仅放松语义要求}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/ranges/dsc equal_to}}
{{dsc inc|cpp/utility/functional/ranges/dsc not_equal_to}}
{{dsc inc|cpp/utility/functional/ranges/dsc less}}
{{dsc inc|cpp/utility/functional/ranges/dsc greater}}
{{dsc inc|cpp/utility/functional/ranges/dsc less_equal}}
{{dsc inc|cpp/utility/functional/ranges/dsc greater_equal}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
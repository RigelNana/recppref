{{title|格式化库 {{mark since c++20}}}}
{{cpp/utility/format/navbar}}

文本格式化库提供 printf 函数族的安全且可扩展的替用品。其意图是补充既存的 C++ I/O 流库。

===格式说明===
格式说明制定了对象在不同类别的选项下会如何进行格式化。

基本类型和标准字符串类型对象会使用{{rl|spec|标准格式说明}}进行格式化。其他库组件也会提供它们自己的格式说明，详情见{{rl|basic_format_string|此处}}。

===格式化函数===
{{dsc begin}}
{{dsc header|format}}
{{dsc inc|cpp/utility/format/dsc format}}
{{dsc inc|cpp/utility/format/dsc format_to}}
{{dsc inc|cpp/utility/format/dsc format_to_n}}
{{dsc inc|cpp/utility/format/dsc formatted_size}}
{{dsc end}}

===格式字符串===
{{dsc begin}}
{{dsc header|format}}
{{dsc inc|cpp/utility/format/dsc basic_format_string}}
{{dsc inc|cpp/utility/format/dsc runtime_format}}
{{dsc end}}

===格式化概念===
{{dsc begin}}
{{dsc header|format}}
{{dsc inc|cpp/utility/format/dsc formattable}}
{{dsc end}}

===扩展性支持与实现细节===
{{dsc begin}}
{{dsc header|format}}
{{dsc inc|cpp/utility/format/dsc vformat}}
{{dsc inc|cpp/utility/format/dsc vformat_to}}
{{dsc inc|cpp/utility/format/dsc make_format_args}}
{{dsc inc|cpp/utility/format/dsc visit_format_arg}}
{{dsc inc|cpp/utility/format/dsc formatter}}
{{dsc inc|cpp/utility/format/dsc range_formatter}}
{{dsc inc|cpp/utility/format/dsc enable_nonlocking_formatter_optimization}}
{{dsc inc|cpp/utility/format/dsc range_format}}
{{dsc inc|cpp/utility/format/dsc format_kind}}
{{dsc inc|cpp/utility/format/dsc basic_format_arg}}
{{dsc inc|cpp/utility/format/dsc basic_format_args}}
{{dsc inc|cpp/utility/format/dsc basic_format_context}}
{{dsc inc|cpp/utility/format/dsc basic_format_parse_context}}
{{dsc inc|cpp/utility/format/dsc format_error}}
{{dsc end}}

===辅助项 {{mark since c++23}}===
{{dcl begin}}
{{dcla|num=1|anchor=const-formattable-range|expos=yes|1=
template&lt; class R, class CharT &gt;
concept /*const-formattable-range*/ = 
    ranges::input_range&lt;const R&gt; &amp;&amp;
    std::formattable&lt;ranges::range_reference_t&lt;const R&gt;, CharT&gt;;
}}
{{dcla|num=2|anchor=fmt-maybe-const|expos=yes|1=
template&lt; class R, class CharT &gt;
using /*fmt-maybe-const*/ = 
    std::conditional_t&lt;/*const-formattable-range*/&lt;R, CharT&gt;, const R, R&gt;;
}}
{{dcl end}}

===注解===
{{ftm begin|sort=1}}
{{ftm|__cpp_lib_format|std=C++20|value=201907L|rowspan="10"|文本格式化}}
{{ftm|-|std=C++23|dr=20|value=202106L|编译期格式字符串检查&lt;br&gt;减少 {{lc|std::vformat_to}} 的参数化}}
{{ftm|-|std=C++23|dr=20|value=202110L|修复时间格式化器中的本地化处理；&lt;br&gt;支持非 const 可格式化类型}}
{{ftm|-|std=C++23|dr=20|value=202207L|暴露 {{lc|std::basic_format_string}}；&lt;br&gt;澄清时间类型的本地化编码处理}}
{{ftm|-|std=C++26|value=202304L|格式化指针}}
{{ftm|-|std=C++26|value=202305L|对格式化参数进行类型检查}}
{{ftm|-|std=C++26|value=202306L|{{rlt|basic_format_arg#visit|std::basic_format_arg::visit}} 成员}}
{{ftm|-|std=C++26|value=202311L|运行时格式字符串}}
{{ftm|-|用 {{lc|std::println}} 打印空行|std=C++26|value=202403L}}
{{ftm|-|允许 {{lc|std::print}} 的一种高效实现{{todo|1=值应 &gt;= 202406L，即与上值不同}}|std=C++26|dr=23|value=202403L}}
{{ftm|__cpp_lib_format_ranges|std=C++23|value=202207L|格式化范围}}
{{ftm|__cpp_lib_format_path|std=C++26|{{lc|std::filesystem::path}} 的格式化|value=202403L}}
{{ftm|__cpp_lib_format_uchar|std=C++26|修正代码单元作为整数格式化|value=202311L}}
{{ftm|__cpp_lib_formatters|std=C++23|{{lc|std::thread::id}} 与 {{lc|std::stacktrace}} 的格式化|value=202302L}}
{{ftm end}}

我们有意将 {{tt|std::basic_format_string}} 的加入（{{wg21|P2508}}）作为缺陷报告处理，因为所有已知的实现都使这些组件在 C++20 模式下可用，尽管它没有被正式分类。

===示例===
{{example|code=
#include &lt;cassert&gt;
#include &lt;format&gt;

int main()
{
    std::string message = std::format("答案是 {}。", 42);
    assert(message == "答案是 42。");
}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2418R2|std=C++20|before=既不可 const 格式化又不可复制的对象（例如类生成器对象）不可格式化|after=允许格式化这些对象（放松格式化器要求）}}
{{dr_p2508}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/dsc print}}
{{dsc inc|cpp/io/dsc println}}
{{dsc inc|cpp/io/basic_ostream/dsc print}}
{{dsc end}}

{{langlinks|en|es|ru|ja}}
{{cpp/title|any}}
{{cpp/utility/any/navbar}}
{{ddcl|header=any|since=c++17|
class any;
}}

类 {{tt|any}} 描述一种可用于任何[[cpp/types/is_copy_constructible|可复制构造]]类型的单个值的类型安全容器。

@1@ 类 {{tt|any}} 的对象存储满足构造函数要求的任何类型的一个实例或为空，这被称为 {{tt|any}} 类对象的''状态''。存储的实例被称作所含对象。若两个状态均为空，或均为非空且其所含对象等价，则两个状态等价。

@2@ 非成员 {{tt|any_cast}} 函数提供对所含对象的类型安全访问。

鼓励实现避免小对象的动态分配，但这种优化仅可以应用于 {{lc|std::is_nothrow_move_constructible}} 对其返回 {{tt|true}} 的类型。

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/utility/any/dsc constructor}}
{{dsc inc|cpp/utility/any/dsc operator{{=}}}}
{{dsc inc|cpp/utility/any/dsc destructor}}

{{dsc h2|修改器}}
{{dsc inc|cpp/utility/any/dsc emplace}}
{{dsc inc|cpp/utility/any/dsc reset}}
{{dsc inc|cpp/utility/any/dsc swap}}

{{dsc h2|观察器}}
{{dsc inc|cpp/utility/any/dsc has_value}}
{{dsc inc|cpp/utility/any/dsc type}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/utility/any/dsc swap2}}
{{dsc inc|cpp/utility/any/dsc any_cast}}
{{dsc inc|cpp/utility/any/dsc make_any}}
{{dsc end}}

===辅助类===
{{dsc begin}}
{{dsc inc|cpp/utility/any/dsc bad_any_cast}}
{{dsc end}}

===注解===
{{feature test macro|__cpp_lib_any|{{ttt|std::any}}|value=201606L|std=C++17}}

===示例===
{{example
|code=
#include &lt;any&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; std::boolalpha;

    // any 类型
    std::any a = 1;
    std::cout &lt;&lt; a.type().name() &lt;&lt; ": " &lt;&lt; std::any_cast&lt;int&gt;(a) &lt;&lt; '\n';
    a = 3.14;
    std::cout &lt;&lt; a.type().name() &lt;&lt; ": " &lt;&lt; std::any_cast&lt;double&gt;(a) &lt;&lt; '\n';
    a = true;
    std::cout &lt;&lt; a.type().name() &lt;&lt; ": " &lt;&lt; std::any_cast&lt;bool&gt;(a) &lt;&lt; '\n';
    
    // 有误的转型
    try
    {
        a = 1;
        std::cout &lt;&lt; std::any_cast&lt;float&gt;(a) &lt;&lt; '\n';
    }
    catch (const std::bad_any_cast&amp; e)
    {
        std::cout &lt;&lt; e.what() &lt;&lt; '\n';
    }
    
    // 拥有值
    a = 2;
    if (a.has_value())
        std::cout &lt;&lt; a.type().name() &lt;&lt; ": " &lt;&lt; std::any_cast&lt;int&gt;(a) &lt;&lt; '\n';
    
    // 重置
    a.reset();
    if (!a.has_value())
        std::cout &lt;&lt; "没有值\n";
    
    // 指向所含数据的指针
    a = 3;
    int* i = std::any_cast&lt;int&gt;(&amp;a);
    std::cout &lt;&lt; *i &lt;&lt; '\n';
}
|p=true
|output=
int: 1
double: 3.14
bool: true
bad any_cast
int: 2
没有值
3
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc function}}
{{dsc inc|cpp/utility/functional/dsc move_only_function}}
{{dsc inc|cpp/utility/dsc variant}}
{{dsc inc|cpp/utility/dsc optional}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
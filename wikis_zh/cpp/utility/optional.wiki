{{cpp/title|optional}}
{{cpp/utility/optional/navbar}}
{{ddcl|header=optional|since=c++17|
template&lt; class T &gt;
class optional;
}}

类模板 {{tt|std::optional}} 管理一个可选的所含值，即既可以存在也可以不存在的值。

一种常见的 {{tt|optional}} 使用情况是作为可能失败的函数的返回值。与如 {{c/core|std::pair&lt;T, bool&gt;}} 等其他手段相比，{{tt|optional}} 可以很好地处理构造开销高昂的对象，并更加可读，因为它明确表达了意图。

{{tt|optional}} 的任何实例在任意给定时间点要么''含值''，要么''不含值''。

如果一个 {{tt|optional}} 含值，那么保证该值[[cpp/language/object#地址|内嵌于]] {{tt|optional}} 对象。因此，{{tt|optional}} 对象模拟的是对象而非指针，尽管定义了 {{lc|operator*()}} 和 {{lc|operator-&gt;()}} 运算符。

当一个 {{tt|optional&lt;T&gt;}} 类型的对象被[[cpp/language/implicit_conversion#按语境转换|按语境转换到 {{c/core|bool}}]] 时，对象含值的情况下转换返回 {{c|true}}，不含值的情况下返回 {{c|false}}。

{{tt|optional}} 对象在下列条件下含值：
* 对象被以 {{tt|T}} 类型的值或另一含值的 {{tt|optional}} 初始化/赋值。

{{tt|optional}} 对象在下列条件下不含值：
* 对象被默认初始化。
* 对象被以 {{lc|std::nullopt_t}} 类型的值或不含值的 {{tt|optional}} 对象初始化/赋值。
* 调用了成员函数 {{lc|reset()}}。

{{rrev|since=c++26|1=
{{tt|optional}} 对象是一种 {{lconcept|view}}，含值的情况下包含一个元素，不含值的情况下包含零个元素。所含元素的生存期与对象绑定。
}}

不存在可选的引用、函数、数组或 （可有 cv 限定的）{{c/core|void}}：如果以这些类型实例化 {{tt|optional}}，那么程序非良构。另外，如果以（可有 cv 限定的）标签类型 {{lc|std::nullopt_t}} 或 {{lc|std::in_place_t}} 实例化 {{tt|optional}}，那么程序非良构。

===模板形参===
{{par begin}}
{{par|T|要为之管理初始化状态的值的类型。该类型必须满足{{named req|Destructible}}的要求。（特别是不允许数组和引用类型）}}
{{par end}}

===嵌套类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|value_type}}|{{tt|T}}}}
{{dsc|{{tt|iterator}} {{mark since c++26}}|由实现定义的{{named req|RandomAccessIterator}}、{{named req|ConstexprIterator}}和 {{lconcept|contiguous_iterator}}，其 {{tt|value_type}} 和 {{tt|reference}} 分别为 {{c/core|std::remove_cv_t&lt;T&gt;}} 和 {{c/core|T&amp;}}。}}
{{dsc|{{tt|const_iterator}} {{mark since c++26}}|由实现定义的{{named req|RandomAccessIterator}}、{{named req|ConstexprIterator}}和 {{lconcept|contiguous_iterator}}，其 {{tt|value_type}} 和 {{tt|reference}} 分别为 {{c/core|std::remove_cv_t&lt;T&gt;}} 和 {{c/core|const T&amp;}}。}}
{{dsc end}}

针对{{named req|Container}}的迭代器的要求同样适用于 {{tt|optional}} 的 {{tt|iterator}} 类型。

===数据成员===
{{dsc begin}}
{{dsc expos mem obj|spec={{tt|T*}}|val|id=val|指向包含的值（如果存在）的指针}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc constructor}}
{{dsc inc|cpp/utility/optional/dsc destructor}}
{{dsc inc|cpp/utility/optional/dsc operator{{=}}}}

{{dsc h2|迭代器}}
{{dsc inc|cpp/utility/optional/dsc begin}}
{{dsc inc|cpp/utility/optional/dsc end}}

{{dsc h2|观察器}}
{{dsc inc|cpp/utility/optional/dsc operator*}}
{{dsc inc|cpp/utility/optional/dsc operator bool}}
{{dsc inc|cpp/utility/optional/dsc value}}
{{dsc inc|cpp/utility/optional/dsc value_or}}

{{dsc h2|单子式操作}}
{{dsc inc|cpp/utility/optional/dsc and_then}}
{{dsc inc|cpp/utility/optional/dsc transform}}
{{dsc inc|cpp/utility/optional/dsc or_else}}

{{dsc h2|修改器}}
{{dsc inc|cpp/utility/optional/dsc swap}}
{{dsc inc|cpp/utility/optional/dsc reset}}
{{dsc inc|cpp/utility/optional/dsc emplace}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc operator_cmp}}
{{dsc inc|cpp/utility/optional/dsc make_optional}}
{{dsc inc|cpp/utility/optional/dsc swap2}}
{{dsc end}}

===辅助类===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc hash}}
{{dsc inc|cpp/utility/optional/dsc nullopt_t}}
{{dsc inc|cpp/utility/optional/dsc bad_optional_access}}
{{dsc end}}

===辅助对象===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc nullopt}}
{{dsc inc|cpp/utility/optional/dsc in_place}}

===辅助特化===
{{ddcl|since=c++26|1=
template&lt; class T &gt;
constexpr bool ranges::enable_view&lt;std::optional&lt;T&gt;&gt; = true;
}}
这个 {{lc|ranges::enable_view}} 特化使得 {{tt|optional}} 满足 {{lconcept|view}}。

{{ddcl|since=c++26|1=
template&lt; class T &gt;
constexpr auto format_kind&lt;std::optional&lt;T&gt;&gt; = range_format::disabled;
}}
这个 {{lc|format_kind}} 特化禁用 {{tt|optional}} 的[[cpp/utility/format/ranges_formatter|范围格式化支持]]。
{{dsc end}}

==={{rl|deduction_guides|推导指引}}===

===注解===
{{ftm begin|sort=yes}}
{{ftm|std=C++17|value=201606L|__cpp_lib_optional|{{tt|std::optional}}|rowspan="3"}}
{{ftm|std=C++23|dr=20|value=202106L|-|完全 {{c/core|constexpr}}}}
{{ftm|std=C++23|value=202110L|-|{{ls|#单子式操作}}}}
{{ftm|std=C++26|value=202406L|__cpp_lib_optional_range_support|{{tt|std::optional}} 的格式化支持}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;optional&gt;
#include &lt;string&gt;
 
// optional 可用作可能失败的工厂的返回类型
std::optional&lt;std::string&gt; create(bool b)
{
    if (b)
        return "Godzilla";
    return {};
}

// 能用 std::nullopt 创建任何（空的）std::optional
auto create2(bool b)
{
    return b ? std::optional&lt;std::string&gt;{"Godzilla"} : std::nullopt;
}

int main()
{
    std::cout &lt;&lt; "create(false) 返回 "
              &lt;&lt; create(false).value_or("empty") &lt;&lt; '\n';
    
    // 返回 optional 的工厂函数可用作 while 和 if 的条件
    if (auto str = create2(true))
        std::cout &lt;&lt; "create2(true) 返回 " &lt;&lt; *str &lt;&lt; '\n';
}
|output=
create(false) 返回 empty
create2(true) 返回 Godzilla
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=4141|std=C++17|before=对存储分配的要求难以理解|after=包含的对象必须内嵌于 {{tt|optional}} 对象}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc variant}}
{{dsc inc|cpp/utility/dsc any}}
{{dsc inc|cpp/utility/dsc expected}}
{{dsc inc|cpp/ranges/dsc single_view}}
{{dsc inc|cpp/ranges/dsc empty_view}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
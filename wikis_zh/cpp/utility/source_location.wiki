{{cpp/title|source_location}}
{{cpp/utility/source_location/navbar}}
{{dcl begin}}
{{dcl header|source_location}}
{{dcl|since=c++20|
struct source_location;
}}
{{dcl end}}

{{tt|std::source_location}} 类表示关于源代码的特定信息，如文件名、行号以及函数名。以前，希望获得关于调用位置的信息（用于记录、测试或调试目的）的函数必须使用宏，如 {{c|__LINE__}} 和 {{c|__FILE__}} 的等[[cpp/preprocessor/replace#预定义宏|预定义宏]]在调用方的环境中展开。{{tt|std::source_location}} 类提供了更好的替代品。

{{tt|std::source_location}} 满足{{named req|DefaultConstructible}}、{{named req|CopyConstructible}}、{{named req|CopyAssignable}}、{{named req|Destructible}}和{{named req|Swappable}}。

另外，下列条件都是 {{c|true}}：
* {{c|std::is_nothrow_move_constructible_v&lt;std::source_location&gt;}}
* {{c|std::is_nothrow_move_assignable_v&lt;std::source_location&gt;}}
* {{c|std::is_nothrow_swappable_v&lt;std::source_location&gt;}}

有意使 {{tt|std::source_location}} 具有较小的大小并且能高效复制。

未指定 {{tt|std::source_location}} 的复制/移动构造函数与复制/移动赋值运算符是否为平凡和/或 constexpr。

===成员函数===
{{dsc begin}}
{{dsc h2|创建}}
{{dsc inc|cpp/utility/source_location/dsc constructor}}
{{dsc inc|cpp/utility/source_location/dsc current}}

{{dsc h2|域访问}}
{{dsc inc|cpp/utility/source_location/dsc line}}
{{dsc inc|cpp/utility/source_location/dsc column}}
{{dsc inc|cpp/utility/source_location/dsc file_name}}
{{dsc inc|cpp/utility/source_location/dsc function_name}}
{{dsc end}}

===注解===
{{feature test macro|__cpp_lib_source_location|std=C++20|value=201907L|源代码信息捕获 ([[#Top|{{tt|std::source_location}}]])}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;source_location&gt;
#include &lt;string_view&gt;

void log(const std::string_view message,
         const std::source_location location =
               std::source_location::current())
{
    std::clog &lt;&lt; "文件: "
              &lt;&lt; location.file_name() &lt;&lt; '('
              &lt;&lt; location.line() &lt;&lt; ':'
              &lt;&lt; location.column() &lt;&lt; ") `"
              &lt;&lt; location.function_name() &lt;&lt; "`: "
              &lt;&lt; message &lt;&lt; '\n';
}

template&lt;typename T&gt;
void fun(T x)
{
    log(x); // 第 20 行
}

int main(int, char*[])
{
    log("Hello world!"); // 第 25 行
    fun("Hello C++20!");
}
|p=true
|output=
文件: main.cpp(25:8) `int main(int, char**)`: Hello world!
文件: main.cpp(20:8) `void fun(T) [with T = const char*]`: Hello C++20!
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/preprocessor/dsc line}}
{{dsc inc|cpp/utility/dsc stacktrace_entry}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
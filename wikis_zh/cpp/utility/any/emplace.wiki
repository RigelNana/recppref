{{cpp/utility/any/title|emplace}}
{{cpp/utility/any/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|
template&lt; class ValueType, class... Args &gt;
std::decay_t&lt;ValueType&gt;&amp; emplace( Args&amp;&amp;... args );
}}
{{dcl|num=2|since=c++17|
template&lt; class ValueType, class U, class... Args &gt;
std::decay_t&lt;ValueType&gt;&amp; emplace( std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args );
}}
{{dcl end}}

更改所含对象为从实参构造的 {{c|std::decay_t&lt;ValueType&gt;}} 类型的对象。

首先用 {{lc|reset|reset()}} 销毁当前所含对象（若存在），然后：

@1@ 构造从 {{c|std::forward&lt;Args&gt;(args)...}} [[cpp/language/direct initialization|直接非列表初始化]]的 {{c|std::decay_t&lt;ValueType&gt;}} 类型对象为所含对象。
*{{cpp/enable if| {{c|1=std::is_constructible_v&lt;std::decay_t&lt;ValueType&gt;, Args...&gt;}} 与 {{c|std::is_copy_constructible_v&lt;std::decay_t&lt;ValueType&gt;&gt;}} 皆为 {{c|true}} }}。

@2@ 构造从 {{c|il, std::forward&lt;Args&gt;(args)...}} [[cpp/language/direct initialization|直接非列表初始化]]的 {{c|std::decay_t&lt;ValueType&gt;}} 类型对象为所含对象。
* {{cpp/enable if| {{c|1=std::is_constructible_v&lt;std::decay_t&lt;ValueType&gt;, std::initializer_list&lt;U&gt;&amp;, Args...&gt;}} 与 {{c|std::is_copy_constructible_v&lt;std::decay_t&lt;ValueType&gt;&gt;}} 皆为 {{c|true}} }}。

===模板形参===
{{par begin}}
{{par|ValueType|所含的值类型}}
{{par hreq}}
{{par req named|std::decay_t&lt;ValueType&gt;|CopyConstructible}}
{{par end}}

=== 返回值 ===
到新的所含对象的引用。

=== 异常 ===
抛出 {{tt|T}} 的构造函数所抛的任何异常。若抛出了异常，则先前所含对象（若存在）已销毁，且 {{c|*this}} 不含值。

=== 示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;any&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

class Star
{
    std::string name;
    int id;

public:
    Star(std::string name, int id) : name{name}, id{id}
    {
        std::cout &lt;&lt; "Star::Star(string, int)\n";
    }

    void print() const
    {
        std::cout &lt;&lt; "Star{\"" &lt;&lt; name &lt;&lt; "\" : " &lt;&lt; id &lt;&lt; "};\n";
    }
};

int main()
{
    std::any celestial;
    // (1) emplace( Args&amp;&amp;... args );
    celestial.emplace&lt;Star&gt;("Procyon", 2943);
    const auto* star = std::any_cast&lt;Star&gt;(&amp;celestial);
    star-&gt;print();

    std::any av;
    // (2) emplace( std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args );
    av.emplace&lt;std::vector&lt;char&gt;&gt;({ 'C', '+', '+', '1', '7' } /* 无参数 */ );
    std::cout &lt;&lt; av.type().name() &lt;&lt; '\n';
    const auto* va = std::any_cast&lt;std::vector&lt;char&gt;&gt;(&amp;av);
    std::for_each(va-&gt;cbegin(), va-&gt;cend(), [](char const&amp; c) { std::cout &lt;&lt; c; });
    std::cout &lt;&lt; '\n';
}
|p=true
|output=
Star::Star(string, int)
Star{"Procyon" : 2943};
St6vectorIcSaIcEE
C++17
}}

=== 参阅 ===
{{dsc begin}}
{{dsc inc|cpp/utility/any/dsc constructor}}
{{dsc inc|cpp/utility/any/dsc reset}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
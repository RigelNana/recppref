{{cpp/utility/any/title|operator{{=}}}}
{{cpp/utility/any/navbar}}
{{dcl begin}}
{{dcl|since=c++17|num=1|1=
any&amp; operator=( const any&amp; rhs );
}}
{{dcl|since=c++17|num=2|1=
any&amp; operator=( any&amp;&amp; rhs ) noexcept;
}}
{{dcl|since=c++17|num=3|1=
template&lt; typename ValueType &gt;
any&amp; operator=( ValueType&amp;&amp; rhs );
}}
{{dcl end}}

将内容赋值给所含值。

@1@ 通过复制 {{c|rhs}} 的状态赋值，如同用 {{c|std::any(rhs).swap(*this)}}。
@2@ 通过移动 {{c|rhs}} 的状态赋值，如同用 {{c|std::any(std::move(rhs)).swap(*this)}}。赋值后 {{c|rhs}} 留在有效但未指定的状态。
@3@ 以 {{c|rhs}} 的类型和值赋值，如同用 {{c|std::any(std::forward&lt;ValueType&gt;(rhs)).swap(*this)}}。{{cpp/enable if| {{c|std::decay_t&lt;ValueType&gt;}} 与 {{lc|std::any}} 不是同一类型且 {{c|std::is_copy_constructible_v&lt;std::decay_t&lt;ValueType&gt;&gt;}} 为 {{c|true}} }}。

===模板形参===
{{par begin}}
{{par|ValueType|被含有的值类型}}
{{par hreq}}
{{par req named|{{c|std::decay_t&lt;ValueType&gt;}}|CopyConstructible}}
{{par end}}

===参数===
{{par begin}}
{{par|rhs|要赋值给其所含值的对象}}
{{par end}}

===返回值===
{{c|*this}}

===异常===
@1,3@ 抛出 {{lc|std::bad_alloc}} 或所含类型的构造函数所抛出的任何异常。
{{cpp/strong exception safety guarantee|plural=yes}}

===示例===
{{example
|code=
#include &lt;any&gt;
#include &lt;cassert&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;typeinfo&gt;

int main()
{
    using namespace std::string_literals;
    std::string cat{"cat"};

    std::any a1{42};
    std::any a2{cat};
    assert(a1.type() == typeid(int));
    assert(a2.type() == typeid(std::string));

    a1 = a2; // 重载 (1)
    assert(a1.type() == typeid(std::string));
    assert(a2.type() == typeid(std::string));
    assert(std::any_cast&lt;std::string&amp;&gt;(a1) == cat);
    assert(std::any_cast&lt;std::string&amp;&gt;(a2) == cat);

    a1 = 96; // 重载 (3)
    a2 = "dog"s; // 重载 (3)
    a1 = std::move(a2); // 重载 (2)
    assert(a1.type() == typeid(std::string));
    assert(std::any_cast&lt;std::string&amp;&gt;(a1) == "dog");
    // a2 的状态有效但未指明。
    // 实际上，它在 gcc/clang 上是 void，在 msvc 上是 std::string。
    std::cout &lt;&lt; "a2.type(): " &lt;&lt; std::quoted(a2.type().name()) &lt;&lt; '\n';

    a1 = std::move(cat); // 重载 (3)
    assert(*std::any_cast&lt;std::string&gt;(&amp;a1) == "cat");
    // cat 的状态有效但不确定：
    std::cout &lt;&lt; "cat: " &lt;&lt; std::quoted(cat) &lt;&lt; '\n';
}
|p=true
|output=
a2.type(): "void"
cat: ""
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/any/dsc constructor}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
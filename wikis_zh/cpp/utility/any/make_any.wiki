{{cpp/title|make_any}}
{{cpp/utility/any/navbar}}
{{dcl begin}}
{{dcl header|any}}
{{dcl|num=1|since=c++17|
template&lt; class T, class... Args &gt;
std::any make_any( Args&amp;&amp;... args );
}}
{{dcl|num=2|since=c++17|
template&lt; class T, class U, class... Args &gt;
std::any make_any( std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args );
}}
{{dcl end}}

构造含有一个 {{tt|T}} 类型的对象的 {{tt|any}} 对象，传递提供的实参给 {{tt|T}} 的构造函数。

@1@ 等价于 {{c|return std::any(std::in_place_type&lt;T&gt;, std::forward&lt;Args&gt;(args)...);}}
@2@ 等价于 {{c|return std::any(std::in_place_type&lt;T&gt;, il, std::forward&lt;Args&gt;(args)...);}}

===示例===
{{example
|code=
#include &lt;any&gt;
#include &lt;complex&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    auto a0 = std::make_any&lt;std::string&gt;("Hello, std::any!\n");
    auto a1 = std::make_any&lt;std::complex&lt;double&gt;&gt;(0.1, 2.3);

    std::cout &lt;&lt; std::any_cast&lt;std::string&amp;&gt;(a0);
    std::cout &lt;&lt; std::any_cast&lt;std::complex&lt;double&gt;&amp;&gt;(a1) &lt;&lt; '\n';

    using lambda = std::function&lt;void(void)&gt;;

    // 把 lambda 放入 std::any。尝试 #1（失败）。
    std::any a2 = [] { std::cout &lt;&lt; "Lambda #1.\n"; };
    std::cout &lt;&lt; "a2.type() = \"" &lt;&lt; a2.type().name() &lt;&lt; "\"\n";
    
    // any_cast 转型到 &lt;void(void)&gt; 但实际类型不是
    // std::function ……，而是 ~ main::{lambda()#1}，且它对
    // 每个 lambda 唯一。所以这会抛出……
    try
    {
        std::any_cast&lt;lambda&gt;(a2)();
    }
    catch (std::bad_any_cast const&amp; ex)
    {
        std::cout &lt;&lt; ex.what() &lt;&lt; '\n';
    }

    // 将 lambda 放入 std::any 中。尝试 #2（成功）
    auto a3 = std::make_any&lt;lambda&gt;([] { std::cout &lt;&lt; "Lambda #2.\n"; });
    std::cout &lt;&lt; "a3.type() = \"" &lt;&lt; a3.type().name() &lt;&lt; "\"\n";
    std::any_cast&lt;lambda&gt;(a3)();
}
|p=true
|output=
Hello, std::any!
(0.1,2.3)
a2.type() = "Z4mainEUlvE_"
bad any_cast
a3.type() = "St8functionIFvvEE"
Lambda #2.
}}

=== 参阅 ===
{{dsc begin}}
{{dsc inc|cpp/utility/any/dsc constructor}}
{{dsc inc|cpp/utility/any/dsc any_cast}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/title|get{{petty|(std::variant)}}}}
{{cpp/utility/variant/navbar}}
{{dcl begin}}
{{dcl header|variant}}
{{dcl rev begin|since=c++17|num=1}}
{{dcl|
template&lt; std::size_t I, class... Types &gt;
constexpr std::variant_alternative_t&lt;I, std::variant&lt;Types...&gt;&gt;&amp;
    get( std::variant&lt;Types...&gt;&amp; v );
}}
{{dcl|
template&lt; std::size_t I, class... Types &gt;
constexpr std::variant_alternative_t&lt;I, std::variant&lt;Types...&gt;&gt;&amp;&amp;
    get( std::variant&lt;Types...&gt;&amp;&amp; v );
}}
{{dcl|
template&lt; std::size_t I, class... Types &gt;
constexpr const std::variant_alternative_t&lt;I, std::variant&lt;Types...&gt;&gt;&amp;
    get( const std::variant&lt;Types...&gt;&amp; v );
}}
{{dcl|
template&lt; std::size_t I, class... Types &gt;
constexpr const std::variant_alternative_t&lt;I, std::variant&lt;Types...&gt;&gt;&amp;&amp;
    get( const std::variant&lt;Types...&gt;&amp;&amp; v );
}}
{{dcl rev end}}
{{dcl rev begin|since=c++17|num=2}}
{{dcl|
template&lt; class T, class... Types &gt;
constexpr T&amp; get( std::variant&lt;Types...&gt;&amp; v );
}}
{{dcl|
template&lt; class T, class... Types &gt;
constexpr T&amp;&amp; get( std::variant&lt;Types...&gt;&amp;&amp; v );
}}
{{dcl|
template&lt; class T, class... Types &gt;
constexpr const T&amp; get( const std::variant&lt;Types...&gt;&amp; v );
}}
{{dcl|
template&lt; class T, class... Types &gt;
constexpr const T&amp;&amp; get( const std::variant&lt;Types...&gt;&amp;&amp; v );
}}
{{dcl rev end}}
{{dcl end}}

@1@ 基于索引的值访问器：若 {{c|1=v.index() == I}}，则返回对 {{c|v}} 中存储的值的引用。否则抛出 {{lc|std::bad_variant_access}}。若 {{tt|I}} 不是 {{tt|varian}} 的有效索引，则此调用非良构。
@2@ 基于类型的值访问器：若 {{c|v}} 保有可选项 {{tt|T}}，则返回对 {{c|v}} 中存储的值的引用。否则抛出 {{lc|std::bad_variant_access}}。若 {{tt|T}} 不是 {{c|Types...}} 中的独有元素，则此调用非良构。

===模板形参===
{{par begin}}
{{par|I|要查找的索引}}
{{par|T|要查找的独有类型}}
{{par|Types...|构成 {{tt|variant}} 的类型}}
{{par end}}

===参数===
{{par begin}}
{{par|v|一个 {{tt|variant}}}}
{{par end}}

===返回值===
对变体中存储的值的引用。

===异常===
@1,2@ 错误时抛 {{lc|std::bad_variant_access}}。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;variant&gt;
 
int main()
{
    std::variant&lt;int, float&gt; v{12}, w;
    std::cout &lt;&lt; std::get&lt;int&gt;(v) &lt;&lt; '\n';
    w = std::get&lt;int&gt;(v);
    w = std::get&lt;0&gt;(v); // 效果同前一行
 
//  std::get&lt;double&gt;(v); // 错误：[int, float] 中无 double
//  std::get&lt;3&gt;(v);      // 错误：有效的索引值是 0 和 1
 
    try
    {
        w = 42.0f;
        std::cout &lt;&lt; std::get&lt;float&gt;(w) &lt;&lt; '\n'; // ok, 打印 42
        w = 42;
        std::cout &lt;&lt; std::get&lt;float&gt;(w) &lt;&lt; '\n'; // 抛出
    }
    catch (std::bad_variant_access const&amp; ex)
    {
        std::cout &lt;&lt; ex.what() &lt;&lt; ": w 包含 int, 而非 float\n";
    }
}
|p=true
|output=
12
42
Unexpected index: w 包含 int, 而非 float
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/variant/dsc get_if}}
{{dsc inc|cpp/utility/tuple/dsc get}}
{{dsc inc|cpp/container/array/dsc get}}
{{dsc inc|cpp/utility/pair/dsc get}}
{{dsc inc|cpp/ranges/subrange/dsc get}}
{{dsc inc|cpp/numeric/complex/dsc get}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/title|monostate}}
{{cpp/utility/variant/navbar}}
{{dcl begin}}
{{dcl header|variant}}
{{dcl header|utility|notes={{mark since c++26}}}}
{{dcl|since=c++17|
struct monostate { };
}}
{{dcl end}}

有意作为 {{lc|std::variant}} 中的行为良好的空可选项的单位类型。具体而言，非可默认构造的变体类型可以把 {{tt|std::monostate}} 列为其首个可选项：这使得此变体自身可默认构造。

===成员函数===
{{dsc begin}}
{{dsc mem ctor|平凡隐式默认/复制/移动构造函数|nolink=true|notes={{mark implicit}}}}
{{dsc mem dtor|平凡隐式析构函数|nolink=true|notes={{mark implicit}}}}
{{dsc mem fun|operator{{=}}|平凡隐式复制/移动赋值|notes={{mark implicit}}|nolink=true}}
{{dsc end}}

===非成员函数===
{{member|1={{small|std::}}operator==, !=, &lt;, &lt;=, &gt;, &gt;=, &lt;=&gt;{{small|(std::monostate)}}|2=
{{dcl begin}}
{{dcl|since=c++17|num=1|1=
constexpr bool operator==( monostate, monostate ) noexcept { return true; }
}}
{{dcl rev multi|num=2|since1=c++17|until1=c++20|dcl1=
constexpr bool operator!=( monostate, monostate ) noexcept { return false; }
constexpr bool operator&lt; ( monostate, monostate ) noexcept { return false; }
constexpr bool operator&gt; ( monostate, monostate ) noexcept { return false; }
constexpr bool operator&lt;=( monostate, monostate ) noexcept { return true; }
constexpr bool operator&gt;=( monostate, monostate ) noexcept { return true; }
|dcl2=
constexpr std::strong_ordering operator&lt;=&gt;( monostate, monostate ) noexcept
{
    return std::strong_ordering::equal;
}
}}
{{dcl end}}

所有 {{tt|std::monostate}} 实例比较相等。

{{rrev|since=c++20|
{{cpp/note synthesized compare}}
}}
}}

===辅助类===
{{member|{{small|std::}}hash{{small|&lt;std::monostate&gt;}}|2=
{{ddcl|since=c++17|
template &lt;&gt;
struct std::hash&lt;monostate&gt;;
}}
为 {{tt|std::monostate}} 特化 {{lc|std::hash}} 算法。
}}

===示例===
{{example
|
|code=
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;variant&gt;

struct S
{
    S(int i) : i(i) {}
    int i;
};

int main()
{
    // 若无 monostate 类型则此声明将失败。
    // 这是因为 S 不可默认构造。
    std::variant&lt;std::monostate, S&gt; var;
    assert(var.index() == 0);

    try
    {
        std::get&lt;S&gt;(var); // 将抛异常！我们需要先赋一个值
    }
    catch(const std::bad_variant_access&amp; e)
    {
        std::cout &lt;&lt; e.what() &lt;&lt; '\n';
    }

    var = 42;
    std::cout &lt;&lt; "std::get: " &lt;&lt; std::get&lt;S&gt;(var).i &lt;&lt; '\n'
              &lt;&lt; "std::hash: " &lt;&lt; std::hex &lt;&lt; std::showbase
              &lt;&lt; std::hash&lt;std::monostate&gt;{}(std::monostate{}) &lt;&lt; '\n';
}
|p=true
|output=
std::get: wrong index for variant
std::get: 42
std::hash: 0xffffffffffffe19f
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/variant/dsc constructor}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
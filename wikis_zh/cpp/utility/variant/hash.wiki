{{cpp/title|hash{{petty|&lt;std::variant&gt;}}}}
{{cpp/utility/variant/navbar}}
{{ddcl|header=variant|since=c++17|1=
template&lt; class... Types &gt;
struct hash&lt;std::variant&lt;Types...&gt;&gt;;
}}

{{lc|std::hash}} 对 {{lc|std::variant}} 模板的模板特化允许用户获得 {{tt|variant}} 对象的散列值。

若启用 {{lc|std::hash&lt;std::remove_const_t&lt;Types&gt;&gt;...}} 中的每个特化，则启用特化 {{lc|std::hash&lt;std::variant&lt;Types...&gt;&gt;}}（见 {{lc|std::hash}}），否则禁用它。

不保证此特化的成员函数为 noexcept。

===模板形参===
{{par begin}}
{{par|Types|{{tt|variant}} 对象所支持的可选项类型}}
{{par end}}

===注解===
不同于 {{ltt|cpp/utility/optional/hash|std::hash&lt;std::optional&gt;}}，变体的散列值通常不等于所含值的散列值；这使得可以区分以不同可选项持有相同值的 {{c|std::variant&lt;int, int&gt;}}。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;variant&gt;

using Var = std::variant&lt;int, int, int, std::string&gt;;

template&lt;unsigned I&gt;
void print(Var const&amp; var)
{
    std::cout &lt;&lt; "get&lt;" &lt;&lt; var.index() &lt;&lt; "&gt; = "
              &lt;&lt; std::get&lt;I&gt;(var)
              &lt;&lt; "\t" "# = "
              &lt;&lt; std::hash&lt;Var&gt;{}(var) &lt;&lt; '\n';
}

int main()
{
    Var var;
    std::get&lt;0&gt;(var) = 2020;
    print&lt;0&gt;(var);
    var.emplace&lt;1&gt;(2023);
    print&lt;1&gt;(var);
    var.emplace&lt;2&gt;(2026);
    print&lt;2&gt;(var);
    var = "C++";
    print&lt;3&gt;(var);
}
|p=true
|output=
get&lt;0&gt; = 2020   # = 2020
get&lt;1&gt; = 2023   # = 2024
get&lt;2&gt; = 2026   # = 2028
get&lt;3&gt; = C++    # = 15518724754199266859
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc hash}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
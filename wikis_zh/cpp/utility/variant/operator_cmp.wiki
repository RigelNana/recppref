{{title|1=operator==, !=, &lt;, &lt;=, &gt;, &gt;=, &lt;=&gt;{{small|(std::variant)}}}}
{{cpp/utility/variant/navbar}}
{{dcl begin}}
{{dcl header|variant}}
{{dcl|num=1|since=c++17|1=
template&lt; class... Types &gt;
constexpr bool operator==( const std::variant&lt;Types...&gt;&amp; lhs,
                           const std::variant&lt;Types...&gt;&amp; rhs );
}}
{{dcl|num=2|since=c++17|1=
template&lt; class... Types &gt;
constexpr bool operator!=( const std::variant&lt;Types...&gt;&amp; lhs,
                           const std::variant&lt;Types...&gt;&amp; rhs );
}}
{{dcl|num=3|since=c++17|
template&lt; class... Types &gt;
constexpr bool operator&lt;( const std::variant&lt;Types...&gt;&amp; lhs,
                          const std::variant&lt;Types...&gt;&amp; rhs );
}}
{{dcl|num=4|since=c++17|
template&lt; class... Types &gt;
constexpr bool operator&gt;( const std::variant&lt;Types...&gt;&amp; lhs,
                          const std::variant&lt;Types...&gt;&amp; rhs );
}}
{{dcl|num=5|since=c++17|1=
template&lt; class... Types &gt;
constexpr bool operator&lt;=( const std::variant&lt;Types...&gt;&amp; lhs,
                           const std::variant&lt;Types...&gt;&amp; rhs );
}}
{{dcl|num=6|since=c++17|1=
template&lt; class... Types &gt;
constexpr bool operator&gt;=( const std::variant&lt;Types...&gt;&amp; lhs,
                           const std::variant&lt;Types...&gt;&amp; rhs );
}}
{{dcl|num=7|since=c++20|1=
template&lt; class... Types &gt;
constexpr std::common_comparison_category_t
              &lt;std::compare_three_way_result_t&lt;Types&gt;...&gt;
    operator&lt;=&gt;( const std::variant&lt;Types...&gt;&amp; lhs,
                 const std::variant&lt;Types...&gt;&amp; rhs );
}}
{{dcl h|辅助函数模板}}
{{dcla|num=8|expos=yes|
template&lt; std::size_t I, class... Types &gt;
constexpr const std::variant_alternative_t&lt;I, std::variant&lt;Types...&gt;&gt;&amp;
    GET( const variant&lt;Types...&gt;&amp; v );
}}
{{dcl end}}

进行 {{lc|std::variant}} 对象上的比较。

@1-7@ 比较两个 {{lc|std::variant}} 对象 {{c|lhs}} 和 {{c|rhs}}。对象 {{c|lhs}} 和 {{c|rhs}}。只有在 {{c|lhs}} 和 {{c|rhs}} 都含值且对应索引相同时才会（使用 {{tt|T}} 的对应运算符）比较所含值。否则，
* 当且仅当 {{c|lhs}} 与 {{c|rhs}} 都不含值时，才认为 {{c|lhs}} ''等于'' {{c|rhs}}。
* 当且仅当 {{c|rhs}} 含值且 {{c|lhs}} 不含值，或者 {{c|lhs.index()}} 小于 {{c|rhs.index()}} 时，才认为 {{c|lhs}} ''小于'' {{c|rhs}}。

:@1-6@ 以 {{c|@}} 表示对应的比较运算符，对于每个函数：
{{rev begin}}
{{rev|until=c++26|
如果对应的表达式 {{box|{{tti|GET}}{{sep}}{{c/core|&lt;I&gt;(lhs) @}}{{nbspt}}{{tti|GET}}{{sep}}{{c/core|&lt;I&gt;(rhs)}}}} 对于某些 {{c|I}} 值非良构或它的结果不可转换到 {{c/core|bool}}，那么程序非良构。
}}
{{rev|since=c++26|
{{cpp/enable if|对应的表达式 {{box|{{tti|GET}}{{sep}}{{c/core|&lt;I&gt;(lhs) @}}{{nbspt}}{{tti|GET}}{{sep}}{{c/core|&lt;I&gt;(rhs)}}}} 对于所有 {{c|I}} 值良构且它的结果可转换到 {{c/core|bool}} }}。
}}
{{rev end}}

@8@ 仅用于阐述的函数模板 {{tti|GET}} 的行为类似 {{rlpt|get|std::get{{petty|(std::variant)}}}}，但不会抛出 {{lc|std::bad_variant_access}}。
@@ 如果 {{c|I &lt; sizeof...(Types)}} 是 {{c|false}}，那么程序非良构。
@@ 如果 {{c|1=I == v.index()}} 是 {{c|false}}，那么行为未定义。

===参数===
{{par begin}}
{{par|lhs,rhs|要比较的变体}}
{{par end}}

===返回值===
{|class="wikitable" style="text-align: center; word-break: keep-all;"
!rowspan=2|{{nbsp|2}}运算符{{nbsp|2}}
!colspan=2|两个操作数都含值&lt;br&gt;{{normal|{{small|（设 {{c|I}} 为 {{c|lhs.index()}}，{{c|J}} 为 {{c|rhs.index()}}）}}}}
!rowspan=2|{{c|lhs}} 或 {{c|rhs}} 不含值&lt;br&gt;{{normal|{{small|（设 {{c|lhs_empty}} 为 {{c|lhs.valueless_by_exception()}}，{{c|rhs_empty}} 为 {{c|rhs.valueless_by_exception()}}）}}}}
|-
!{{c|I}} 与 {{c|J}} 相等
!{{c|I}} 与 {{c|J}} 不相等
|-
|{{co|1===}}
|{{box|{{tti|GET}}{{sep}}{{c/core|1=&lt;I&gt;(lhs) ==}}{{nbspt}}{{tti|GET}}{{sep}}{{c/core|&lt;I&gt;(rhs)}}}}
|{{c|false}}
|{{c|lhs_empty &amp;&amp; rhs_empty}}
|-
|{{co|1=!=}}
|{{box|{{tti|GET}}{{sep}}{{c/core|1=&lt;I&gt;(lhs) !=}}{{nbspt}}{{tti|GET}}{{sep}}{{c/core|&lt;I&gt;(rhs)}}}}
|{{c|true}}
|{{c|1=lhs_empty != rhs_empty}}
|-
|{{co|&lt;}}
|{{box|{{tti|GET}}{{sep}}{{c/core|&lt;I&gt;(lhs) &lt;}}{{nbspt}}{{tti|GET}}{{sep}}{{c/core|&lt;I&gt;(rhs)}}}}
|{{c|lhs.index() &lt; rhs.index()}}
|{{c|lhs_empty &amp;&amp; !rhs_empty}}
|-
|{{co|&gt;}}
|{{box|{{tti|GET}}{{sep}}{{c/core|&lt;I&gt;(lhs) &gt;}}{{nbspt}}{{tti|GET}}{{sep}}{{c/core|&lt;I&gt;(rhs)}}}}
|{{c|lhs.index() &gt; rhs.index()}}
|{{c|!lhs_empty &amp;&amp; rhs_empty}}
|-
|{{co|1=&lt;=}}
|{{box|{{tti|GET}}{{sep}}{{c/core|1=&lt;I&gt;(lhs) &lt;=}}{{nbspt}}{{tti|GET}}{{sep}}{{c/core|&lt;I&gt;(rhs)}}}}
|{{c|lhs.index() &lt; rhs.index()}}
|{{c|lhs_empty}}
|-
|{{co|1=&gt;=}}
|{{box|{{tti|GET}}{{sep}}{{c/core|1=&lt;I&gt;(lhs) &gt;=}}{{nbspt}}{{tti|GET}}{{sep}}{{c/core|&lt;I&gt;(rhs)}}}}
|{{c|lhs.index() &gt; rhs.index()}}
|{{c|rhs_empty}}
|-
|{{co|1=&lt;=&gt;}}
|{{box|{{tti|GET}}{{sep}}{{c/core|1=&lt;I&gt;(lhs) &lt;=&gt;}}{{nbspt}}{{tti|GET}}{{sep}}{{c/core|&lt;I&gt;(rhs)}}}}
|{{c|1=lhs.index() &lt;=&gt; rhs.index()}}
|见下文
|}

对于 {{c/core|1=operator&lt;=&gt;}}：
* 如果只有 {{c|lhs}} 不含值，那么就会返回 {{ltt|cpp/utility/compare/strong_ordering|std::strong_ordering::less}}。
* 如果只有 {{c|rhs}} 不含值，那么就会返回 {{ltt|cpp/utility/compare/strong_ordering|std::strong_ordering::greater}}。
* 如果 {{c|lhs}} 和 {{c|rhs}} 都不含值，那么就会返回 {{ltt|cpp/utility/compare/strong_ordering|std::strong_ordering::equal}}。

===注解===
{{feature test macro|__cpp_lib_constrained_equality|受约束的 {{lc|std::variant}} 相关比较运算符|value=202403L|std=C++26}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;variant&gt;

int main()
{
    std::cout &lt;&lt; std::boolalpha;
    std::string cmp;
    bool result;
    
    auto print2 = [&amp;cmp, &amp;result](const auto&amp; lhs, const auto&amp; rhs)
    {
        std::cout &lt;&lt; lhs &lt;&lt; ' ' &lt;&lt; cmp &lt;&lt; ' ' &lt;&lt; rhs &lt;&lt; " : " &lt;&lt; result &lt;&lt; '\n';
    };
    
    std::variant&lt;int, std::string&gt; v1, v2;
    
    std::cout &lt;&lt; "operator==\n";
    {
        cmp = "==";
        
        // 默认为 v1 = 0, v2 = 0;
        result = v1 == v2; // true
        std::visit(print2, v1, v2);
        
        v1 = v2 = 1;
        result = v1 == v2; // true
        std::visit(print2, v1, v2);
        
        v2 = 2;
        result = v1 == v2; // false
        std::visit(print2, v1, v2);
        
        v1 = "A";
        result = v1 == v2; // false: v1.index == 1, v2.index == 0
        std::visit(print2, v1, v2);
        
        v2 = "B";
        result = v1 == v2; // false
        std::visit(print2, v1, v2);
        
        v2 = "A";
        result = v1 == v2; // true
        std::visit(print2, v1, v2);
    }
    
    std::cout &lt;&lt; "operator&lt;\n";
    {
        cmp = "&lt;";
        
        v1 = v2 = 1;
        result = v1 &lt; v2; // false
        std::visit(print2, v1, v2);
        
        v2 = 2;
        result = v1 &lt; v2; // true
        std::visit(print2, v1, v2);
        
        v1 = 3;
        result = v1 &lt; v2; // false
        std::visit(print2, v1, v2);
        
        v1 = "A"; v2 = 1;
        result = v1 &lt; v2; // false: v1.index == 1, v2.index == 0
        std::visit(print2, v1, v2);
        
        v1 = 1; v2 = "A";
        result = v1 &lt; v2; // true: v1.index == 0, v2.index == 1
        std::visit(print2, v1, v2);
        
        v1 = v2 = "A";
        result = v1 &lt; v2; // false
        std::visit(print2, v1, v2);
        
        v2 = "B";
        result = v1 &lt; v2; // true
        std::visit(print2, v1, v2);
        
        v1 = "C";
        result = v1 &lt; v2; // false
        std::visit(print2, v1, v2);
    }
    
    {
        std::variant&lt;int, std::string&gt; v1;
        std::variant&lt;std::string, int&gt; v2;
    //  v1 == v2; // 编译错误：没有已知转换
    }
    
    // TODO：C++20 用于变体的三路比较运算符 &lt;=&gt;
}
|output=
operator==
0 == 0 : true
1 == 1 : true
1 == 2 : false
A == 2 : false
A == B : false
A == A : true
operator&lt;
1 &lt; 1 : false
1 &lt; 2 : true
3 &lt; 2 : false
A &lt; 1 : false
1 &lt; A : true
A &lt; A : false
A &lt; B : true
C &lt; B : false
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc operator cmp}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
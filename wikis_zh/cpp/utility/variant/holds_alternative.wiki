{{cpp/title|holds_alternative}}
{{cpp/utility/variant/navbar}}
{{dcl begin}}
{{dcl header|variant}}
{{dcl|since=c++17|
template&lt; class T, class... Types &gt;
constexpr bool holds_alternative( const std::variant&lt;Types...&gt;&amp; v ) noexcept;
}}
{{dcl end}}

检查变体 {{c|v}} 是否保有可选项 {{tt|T}}。若 {{tt|T}} 不在 {{tt|Types...}} 中恰好出现一次，则此调用非良构。

===参数===
{{par begin}}
{{par|v|要检验的变体}}
{{par end}}

===返回值===
若变体当前保有可选项 {{tt|T}} 则为 {{c|true}}，否则为 {{c|false}}。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;variant&gt;

int main()
{
    std::variant&lt;int, std::string&gt; v = "abc";
    assert(not std::holds_alternative&lt;int&gt;(v));
    assert(std::holds_alternative&lt;std::string&gt;(v));
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/variant/dsc index}}
{{dsc inc|cpp/utility/variant/dsc get}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
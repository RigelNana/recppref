{{cpp/title|get_if {{small|(std::variant)}}}}
{{cpp/utility/variant/navbar}}
{{dcl begin}}
{{dcl header|variant}}
{{dcl rev begin|num=1|since=c++17}}
{{dcl|
template&lt; std::size_t I, class... Types &gt;
constexpr std::add_pointer_t&lt;std::variant_alternative_t&lt;I, std::variant&lt;Types...&gt;&gt;&gt;
    get_if( std::variant&lt;Types...&gt;* pv ) noexcept;
}}
{{dcl|
template&lt; std::size_t I, class... Types &gt;
constexpr std::add_pointer_t&lt;const std::variant_alternative_t&lt;I, std::variant&lt;Types...&gt;&gt;&gt;
    get_if( const std::variant&lt;Types...&gt;* pv ) noexcept;
}}
{{dcl rev end}}
{{dcl rev begin|num=2|since=c++17}}
{{dcl|
template&lt; class T, class... Types &gt;
constexpr std::add_pointer_t&lt;T&gt;
    get_if( std::variant&lt;Types...&gt;* pv ) noexcept;
}}
{{dcl|
template&lt; class T, class... Types &gt;
constexpr std::add_pointer_t&lt;const T&gt;
    get_if( const std::variant&lt;Types...&gt;* pv ) noexcept;
}}
{{dcl rev end}}
{{dcl end}}

@1@ 基于索引的不抛出访问器：若 {{c|pv}} 不是空指针且 {{c|pv-&gt;index() {{==}} I}}，则返回指向 {{tt|pv}} 所指向的变体中存储的值的指针。否则，返回空指针值。若 {{tt|I}} 不是此变体的有效索引，则此调用非良构。
@2@ 基于类型的不抛出访问器：等价于 {{v|1}}，其中 {{tt|I}} 是 {{tt|T}} 在 {{tt|Types...}} 中的零基索引。若 {{tt|T}} 不是 {{tt|Types...}} 中的独有元素，则此调用非良构。

===模板形参===
{{par begin}}
{{par|I|要查找的索引}}
{{par|Type|要查找的独有类型}}
{{par end}}

===参数===
{{par begin}}
{{par|pv|指向变体的指针}}
{{par end}}

===返回值===
指向被指向的变体中存储值的指针，错误时为空指针。

===示例===
{{example|code=
#include &lt;iostream&gt;
#include &lt;variant&gt;
 
int main()
{
    auto check_value = [](const std::variant&lt;int, float&gt;&amp; v)
    {
        if (const int* pval = std::get_if&lt;int&gt;(&amp;v))
            std::cout &lt;&lt; "变体值: " &lt;&lt; *pval &lt;&lt; '\n';
        else
            std::cout &lt;&lt; "获取值失败！" &lt;&lt; '\n';
    };

    std::variant&lt;int, float&gt; v{12}, w{3.f};
    check_value(v);
    check_value(w);
}
|output=
变体值: 12
获取值失败！
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/variant/dsc get}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
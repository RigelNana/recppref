{{cpp/utility/variant/title|emplace}}
{{cpp/utility/variant/navbar}}
{{dcl begin}}
{{dcla|num=1|constexpr=c++20|since=c++17|1=
template&lt; class T, class... Args &gt;
T&amp; emplace( Args&amp;&amp;... args );
}}
{{dcla|num=2|anchor=no|constexpr=c++20|since=c++17|1=
template&lt; class T, class U, class... Args &gt;
T&amp; emplace( std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args );
}}
{{dcla|num=3|anchor=no|constexpr=c++20|since=c++17|1=
template&lt; std::size_t I, class... Args &gt;
std::variant_alternative_t&lt;I, variant&gt;&amp; emplace( Args&amp;&amp;... args );
}}
{{dcla|num=4|anchor=no|constexpr=c++20|since=c++17|1=
template&lt; std::size_t I, class U, class... Args &gt;
std::variant_alternative_t&lt;I, variant&gt;&amp;
    emplace( std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args );
}}
{{dcl end}}

在既存的 {{tt|variant}} 对象中原位构造新值。

@1@ 等价于 {{c|emplace&lt;I&gt;(std::forward&lt;Args&gt;(args)...)}}，其中 {{tt|I}} 是 {{tt|T}} 在 {{tt|Types...}} 中的零基索引。
* {{cpp/enable_if| {{c|std::is_constructible_v&lt;T, Args...&gt;}} 为 {{c|true}}，且 {{tt|T}} 在 {{tt|Types...}} 中恰好出现一次}}。
@2@ 等价于 {{c|emplace&lt;I&gt;(il, std::forward&lt;Args&gt;(args)...)}}，其中 {{tt|I}} 是 {{tt|T}} 在 {{tt|Types...}} 中的零基索引。
* {{cpp/enable_if| {{c|std::is_constructible_v&lt;T, std::initializer_list&lt;U&gt;&amp;, Args...&gt;}} 为 {{c|true}}，且 {{tt|T}} 在 {{tt|Types...}} 中恰好出现一次}}。
@3@ 首先，销毁当前所含值（若存在）。然后如同以实参 {{c|std::forward&lt;Args&gt;(args)...}} 构造 {{tt|T_I}} 类型的值一般[[cpp/language/direct initialization|直接初始化]]所含值。若抛出了异常，则 {{c|*this}} 可能变为 {{rlpt|valueless_by_exception}}。
* {{cpp/enable_if| {{c|std::is_constructible_v&lt;T_I, Args...&gt;}} 为 {{c|true}} }}。
* 若 {{tt|I}} 不小于 {{c|sizeof...(Types)}} 则行为未定义。
@4@ 首先，销毁当前所含值（若存在）。然后如同以实参 {{c|il, std::forward&lt;Args&gt;(args)...}} 构造 {{tt|T_I}} 类型的值一般[[cpp/language/direct initialization|直接初始化]]所含值。若抛出了异常，则 {{c|*this}} 可能变为 {{rlpt|valueless_by_exception}}。
* {{cpp/enable_if| {{c|std::is_constructible_v&lt;T_I, std::initializer_list&lt;U&gt;&amp;, Args...&gt;}} 为 {{c|true}} }}。
* 若 {{tt|I}} 不小于 {{c|sizeof...(Types)}} 则行为未定义。

===参数===
{{par begin}}
{{par|args|构造新值时使用的构造函数实参}}
{{par|il|构造新值时使用的 {{tt|initializer_list}} 实参 }}
{{par end}}

===返回值===
到新的所含值的引用。

===异常===
@1-4@ 初始化所含值期间抛出的任何异常。

===注解===
{{ftm begin|sort=1}}
{{ftm|std=C++20|dr=yes|value=202106L|__cpp_lib_variant|完全 {{c/core|constexpr}} 的 {{tt|std::variant}} {{vl|1-4}}}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;variant&gt;
 
int main()
{
    std::variant&lt;std::string&gt; v1;
    v1.emplace&lt;0&gt;("abc"); // OK
    std::cout &lt;&lt; std::get&lt;0&gt;(v1) &lt;&lt; '\n';
    v1.emplace&lt;std::string&gt;("def"); // OK
    std::cout &lt;&lt; std::get&lt;0&gt;(v1) &lt;&lt; '\n';

    std::variant&lt;std::string, std::string&gt; v2;
    v2.emplace&lt;1&gt;("ghi"); // OK
    std::cout &lt;&lt; std::get&lt;1&gt;(v2) &lt;&lt; '\n';
    // v2.emplace&lt;std::string&gt;("abc"); -&gt; 错误
}
|output=
abc
def
ghi
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2231R1|std=C++20|before={{tt|emplace}} 不是 {{c/core|constexpr}}，而要求的操作在 C++20 中能为 {{c/core|constexpr}}|after=使之为 {{c/core|constexpr}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/variant/dsc operator{{=}}}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
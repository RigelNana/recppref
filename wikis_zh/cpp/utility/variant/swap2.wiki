{{cpp/title|swap{{small|(std::variant)}}}}
{{cpp/utility/variant/navbar}}
{{dcl begin}}
{{dcl header|variant}}
{{dcla|anchor=no|since=c++17|constexpr=c++20|
template&lt; class... Types &gt;
void swap( std::variant&lt;Types...&gt;&amp; lhs,
           std::variant&lt;Types...&gt;&amp; rhs ) noexcept(/* 见下文 */);
}}
{{dcl end}}

为 {{lc|std::variant}} 重载 {{lc|std::swap}} 算法。相当于调用 {{c|lhs.swap(rhs)}}。

{{cpp/enable if| {{c|std::is_move_constructible_v&lt;T_i&gt;}} 与 {{c|std::is_swappable_v&lt;T_i&gt;}} 对于所有 {{tt|Types...}} 中的 {{tt|T_i}} 皆为 {{c|true}} }}。

===参数===
{{par begin}}
{{par|lhs, rhs|要交换值的 {{tt|variant}} 对象}}
{{par end}}

===返回值===
（无）

===异常===
{{noexcept|noexcept(lhs.swap(rhs))}}

===注解===
{{ftm begin}}
{{ftm|std=C++20|dr=yes|value=202106L|__cpp_lib_variant|完全 {{c/core|constexpr}} 的 {{tt|std::variant}}}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;variant&gt;

void print(auto const&amp; v, char term = '\n')
{
    std::visit([](auto&amp;&amp; o) { std::cout &lt;&lt; o; }, v);
    std::cout &lt;&lt; term;
}

int main()
{
    std::variant&lt;int, std::string&gt; v1{123}, v2{"XYZ"};
    print(v1, ' ');
    print(v2);

    std::swap(v1, v2);
    print(v1, ' ');
    print(v2);

    std::variant&lt;double, std::string&gt; v3{3.14};
    // std::swap(v1, v3); // 错误：~ 不一致的形参包
}
|output=
123 XYZ
XYZ 123
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2231R1|std=C++20|before={{tt|swap}} 不是 {{c/core|constexpr}}，而要求的操作在 C++20 中能为 {{c/core|constexpr}}|after=使之为 {{c/core|constexpr}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/variant/dsc swap}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/utility/variant/title|~variant}}
{{cpp/utility/variant/navbar}}
{{dcl begin}}
{{dcla|anchor=no|since=c++17|constexpr=c++20|
~variant();
}}
{{dcl end}}

若 {{rlpf|valueless_by_exception}} 为 {{c|true}}，则不做任何事。否则销毁当前所含对象。

若对于 {{tt|Types...}} 中的所有 {{tt|T_i}}，{{c|std::is_trivially_destructible_v&lt;T_i&gt;}} 均为 {{c|true}}，则此析构函数为平凡。

===注解===
{{ftm begin}}
{{ftm|std=C++20|dr=yes|value=202106L|__cpp_lib_variant|完全 {{c/core|constexpr}} 的 {{tt|std::variant}}}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;cstdio&gt;
#include &lt;variant&gt;

int main()
{
    struct X { ~X() { puts("X::~X();"); } };
    struct Y { ~Y() { puts("Y::~Y();"); } };

    {
        puts("进入块 #1");
        std::variant&lt;X,Y&gt; var;
        puts("离开块 #1");
    }

    {
        puts("进入块 #2");
        std::variant&lt;X,Y&gt; var{ std::in_place_index_t&lt;1&gt;{} }; // 构造 var(Y)
        puts("离开块 #2");
    }
}
|output=
进入块 #1
离开块 #1
X::~X();
进入块 #2
离开块 #2
Y::~Y();
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2231R1|std=C++20|before=析构函数不是 {{c/core|constexpr}}，而非平凡析构函数在 C++20 中能为 {{c/core|constexpr}}|after=使之为 {{c/core|constexpr}}}}
{{dr list end}}

{{langlinks|en|es|ja|ru}}
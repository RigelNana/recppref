{{cpp/title|tuple_element&lt;small&gt;&lt;std::pair&gt;&lt;/small&gt;}}
{{cpp/utility/pair/navbar}}
{{dcl begin}}
{{dcl header|utility}}
{{dcl|since=c++11|
template&lt; std::size_t I, class T1, class T2 &gt;
struct tuple_element&lt;I, std::pair&lt;T1, T2&gt;&gt;;
}}
{{dcl end}}

{{c|std::tuple_element}} 对对偶的部分特化，提供在编译时使用元组式语法对对偶元素类型的访问。若 {{tt|1=I &gt;= 2}} 则程序非良构。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|type}}|若 {{tt|1=I == 0}} 则为 {{tt|T1}}&lt;br&gt;若 {{tt|1=I == 1}} 则为 {{tt|T2}}}}
{{dsc end}}

===可能的实现===
{{eq fun
|1=
template&lt;std::size_t I, typename T&gt;
struct tuple_element;

template&lt;std::size_t I, typename T1, typename T2&gt;
struct tuple_element&lt;I, std::pair&lt;T1, T2&gt;&gt;
{
    static_assert(I &lt; 2, "std::pair has only 2 elements!");
};

template&lt;typename T1, typename T2&gt;
struct tuple_element&lt;0, std::pair&lt;T1, T2&gt;&gt;
{
    using type = T1;
};

template&lt;typename T1, typename T2&gt;
struct tuple_element&lt;1, std::pair&lt;T1, T2&gt;&gt;
{
    using type = T2;
};
}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;tuple&gt;

namespace detail
{
    template&lt;std::size_t&gt;
    struct index_tag { constexpr explicit index_tag() = default; };

    template&lt;class T, class U&gt;
    constexpr T get_val_dispatch(std::pair&lt;T, U&gt; const&amp; pair, index_tag&lt;0&gt;)
    {
        return pair.first;
    }

    template&lt;class T, class U&gt;
    constexpr U get_val_dispatch(std::pair&lt;T, U&gt; const&amp; pair, index_tag&lt;1&gt;)
    {
        return pair.second;
    }
} // namespace detail

template&lt;std::size_t N, class T, class U&gt;
auto constexpr get_val(std::pair&lt;T, U&gt; const&amp; pair)
    -&gt; typename std::tuple_element&lt;N, std::pair&lt;T, U&gt;&gt;::type
{
    return detail::get_val_dispatch(pair, detail::index_tag&lt;N&gt;{});
}

int main()
{
    auto var = std::make_pair(1, std::string{"one"});
    
    std::cout &lt;&lt; get_val&lt;0&gt;(var) &lt;&lt; " = " &lt;&lt; get_val&lt;1&gt;(var);
}
|output=1 = one
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2974|std=c++11|before=越界下标使用不定义的主模板|after=使之为非良构（硬错误）}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/language/dsc structured binding}}
{{dsc inc|cpp/utility/tuple/dsc tuple_element}}
{{dsc inc|cpp/container/array/dsc tuple_element}}
{{dsc inc|cpp/ranges/subrange/dsc tuple_element}}
{{dsc inc|cpp/utility/pair/dsc tuple_size}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
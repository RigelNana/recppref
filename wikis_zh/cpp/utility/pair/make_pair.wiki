{{cpp/title|make_pair}}
{{cpp/utility/pair/navbar}}
{{dcl begin}}
{{dcl header|utility}}
{{dcl rev begin}}
{{dcl|until=c++11|
template&lt; class T1, class T2 &gt;
std::pair&lt;T1, T2&gt; make_pair( T1 x, T2 y );
}}
{{dcla|since=c++11|constexpr=c++14|until=c++20|
template&lt; class T1, class T2 &gt;
std::pair&lt;/*V1*/, /*V2*/&gt; make_pair( T1&amp;&amp; x, T2&amp;&amp; y );
}}
{{dcl|since=c++20|
template&lt; class T1, class T2 &gt;
constexpr std::pair&lt;std::unwrap_ref_decay_t&lt;T1&gt;,
                    std::unwrap_ref_decay_t&lt;T2&gt;&gt;
    make_pair( T1&amp;&amp; x, T2&amp;&amp; y );
}}
{{dcl rev end}}
{{dcl end}}

创建 {{lc|std::pair}} 对象，从实参类型推导目标类型。

{{rrev|since=c++11|until=c++20|
给定类型 {{c/core|std::decay&lt;T1&gt;::type}} 为 {{tt|U1}}，{{c/core|std::decay&lt;T2&gt;::type}} 为 {{tt|U2}}，类型 {{c/core|/*V1*/}} 和 {{c/core|/*V2*/}} 定义如下：
* 如果 {{tt|U1}} 是 {{c/core|std::reference_wrapper&lt;X&gt;}}，那么 {{c/core|/*V1*/}} 是 {{tt|X&amp;}}；否则 {{c/core|/*V1*/}} 是 {{tt|U1}}。
* 如果 {{tt|U2}} 是 {{c/core|std::reference_wrapper&lt;Y&gt;}}，那么 {{c/core|/*V2*/}} 是 {{tt|Y&amp;}}；否则 {{c/core|/*V2*/}} 是 {{tt|U2}}。
}}

===参数===
{{par begin}}
{{par|x, y|构造对偶所用的值}}
{{par end}}

===返回值===
{{rev begin}}
{{rev|until=c++11|
{{c|std::pair&lt;T1, T2&gt;(x, y)}}
}}
{{rev|since=c++11|until=c++20|
{{c|std::pair&lt;/*V1*/, /*V2*/&gt;(std::forward&lt;T1&gt;(x), std::forward&lt;T2&gt;(y))}}
}}
{{rev|since=c++20|
{{c multi|std::pair&lt;std::unwrap_ref_decay_t&lt;T1&gt;, std::unwrap_ref_decay_t&lt;T2&gt;&gt;|    (std::forward&lt;T1&gt;(x), std::forward&lt;T2&gt;(y))}}
}}
{{rev end}}

===示例===
{{example
|code=
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;utility&gt;

int main()
{
    int n = 1;
    int a[5] = {1, 2, 3, 4, 5};
    
    // 从两个 int 建造 pair
    auto p1 = std::make_pair(n, a[1]);
    std::cout &lt;&lt; "p1 的值是 "
              &lt;&lt; '(' &lt;&lt; p1.first &lt;&lt; ", " &lt;&lt; p1.second &lt;&lt; ")\n";
    
    // 从到 int 的引用和数组（退化成指针）建造 pair
    auto p2 = std::make_pair(std::ref(n), a);
    n = 7;
    std::cout &lt;&lt; "p2 的值是 "
              &lt;&lt; '(' &lt;&lt; p2.first &lt;&lt; ", " &lt;&lt; *(p2.second + 2) &lt;&lt; ")\n";
}
|output=
p1 的值是 (1, 2)
p2 的值是 (7, 3)
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=181|std=C++98|before=形参类型是 const 引用类型，这导致无法传递数组|after=将形参类型改成值类型}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc unwrap reference‎}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/utility/expected/title|transform_error}}
{{cpp/utility/expected/navbar}}
{{dcl begin}}
{{dcl h|主模板}}
{{dcla|num=1|since=c++23|
template&lt; class F &gt;
constexpr auto transform_error( F&amp;&amp; f ) &amp;;
}}
{{dcla|num=2|since=c++23|
template&lt; class F &gt;
constexpr auto transform_error( F&amp;&amp; f ) const&amp;;
}}
{{dcla|num=3|since=c++23|
template&lt; class F &gt;
constexpr auto transform_error( F&amp;&amp; f ) &amp;&amp;;
}}
{{dcla|num=4|since=c++23|
template&lt; class F &gt;
constexpr auto transform_error( F&amp;&amp; f ) const&amp;&amp;;
}}
{{dcl h|{{c/core|void}} 部分特化}}
{{dcla|num=5|since=c++23|
template&lt; class F &gt;
constexpr auto transform_error( F&amp;&amp; f ) &amp;;
}}
{{dcla|num=6|since=c++23|
template&lt; class F &gt;
constexpr auto transform_error( F&amp;&amp; f ) const&amp;;
}}
{{dcla|num=7|since=c++23|
template&lt; class F &gt;
constexpr auto transform_error( F&amp;&amp; f ) &amp;&amp;;
}}
{{dcla|num=8|since=c++23|
template&lt; class F &gt;
constexpr auto transform_error( F&amp;&amp; f ) const&amp;&amp;;
}}
{{dcl end}}

如果 {{c|*this}} 包含非预期值，那么以 {{c|*this}} 的非预期值作为实参调用 {{c|f}} 并返回一个包含预期值的 {{tt|std::expected}} 对象，以 {{c|f}} 的结果初始化该值。否则返回一个表示预期值的 {{tt|std::expected}} 对象。
@1-4@ 以 {{c|*this}} 的预期值 {{rlpi|/#数据成员|val}} 初始化该预期值。

给定类型 {{tt|G}} 为：
@1,2@ {{c/core|std::remove_cv_t&lt;std::invoke_result_t&lt;F, decltype(error())&gt;&gt;}}
@3,4@ {{c/core|std::remove_cv_t&lt;std::invoke_result_t&lt;F, decltype(std::move(error()))&gt;&gt;}}
@5,6@ {{c/core|std::remove_cv_t&lt;std::invoke_result_t&lt;F, decltype(error())&gt;&gt;}}
@7,8@ {{c/core|std::remove_cv_t&lt;std::invoke_result_t&lt;F, decltype(std::move(error()))&gt;&gt;}}

如果满足以下任意条件，那么程序非良构：
* {{tt|G}} 不是 {{rlpt|unexpected|std::unexpected}} 的合法模板实参。
* 以下对应声明非良构：
:@1,2@ {{c|G g(std::invoke(std::forward&lt;F&gt;(f), error()));}}
:@3,4@ {{c|G g(std::invoke(std::forward&lt;F&gt;(f), std::move(error()));}}
:@5,6@ {{c|G g(std::invoke(std::forward&lt;F&gt;(f), error()));}}
:@7,8@ {{c|G g(std::invoke(std::forward&lt;F&gt;(f), std::move(error()));}}


@1,2@ {{cpp/enable if| {{box|{{c/core|std::is_constructible_v&lt;T, decltype((}}{{tti|val}}{{c/core|))&gt;}}}} 是 {{c|true}} }}。

@3,4@ {{cpp/enable if| {{box|{{c/core|std::is_constructible_v&lt;T, decltype(std::move(}}{{tti|val}}{{c/core|))&gt;}}}} 是 {{c|true}} }}。

===参数===
{{par begin}}
{{par|f|适合的函数或{{named req|Callable}}对象，它的返回类型不是引用类型}}
{{par end}}

===返回值===
给定表达式 {{c|expr}} 为：
@1,2@ {{c|std::invoke(std::forward&lt;F&gt;(f), error())}}
@3,4@ {{c|std::invoke(std::forward&lt;F&gt;(f), std::move(error()))}}
@5,6@ {{c|std::invoke(std::forward&lt;F&gt;(f), error())}}
@7,8@ {{c|std::invoke(std::forward&lt;F&gt;(f), std::move(error()))}}

返回值定义如下：
{|class="wikitable"
!rowspan=2|{{nbsp}}重载{{nbsp}}
!colspan=2|{{rlpf|operator bool|has_value}} 的值
|-
!style="font-weight: normal;"|{{c|true}}
!style="font-weight: normal;"|{{c|false}}
|-
|style="text-align: center;"|{{vl|1,2}}
|{{box|{{c/core|std::expected&lt;T, G&gt;(std::in_place,}}{{nbspt}}{{tti|val}}{{c/core|)}}}}
|rowspan=4|{{c multi|std::expected&lt;T, G&gt;|    (std::unexpect, expr)}}
|-
|style="text-align: center;"|{{vl|3,4}}
|{{box|{{c/core|std::expected&lt;T, G&gt;(std::in_place, std::move(}}{{tti|val}}{{c/core|))}}}}
|-
|style="text-align: center;"|{{vl|5,6}}
|rowspan=2|{{c|std::expected&lt;T, G&gt;()}}
|-
|style="text-align: center;"|{{vl|7,8}}
|}

===示例===
{{example}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3938|std=C++23|before=通过 {{c|value()}} 获取预期值&lt;ref&gt;{{rlpf|value}} 要求 {{tt|E}} 可复制构造（见 {{lwg|3843}}），而 {{rlpt|operator*}} 不要求。&lt;/ref&gt;|after=改成 {{c|**this}}}}
{{dr list item|wg=lwg|dr=3973|std=C++23|before=通过 {{c|**this}} 获取预期值&lt;ref&gt;{{c|**this}} 会触发[[cpp/language/adl|实参依赖查找]]。&lt;/ref&gt;|after=改成 {{box|{{rlpi|/#数据成员|val}}}}}}
{{dr list end}}
&lt;references/&gt;

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/expected/dsc or_else}}
{{dsc inc|cpp/utility/expected/dsc transform}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|bad_expected_access}}
{{cpp/utility/expected/navbar}}

{{dcl begin}}
{{dcl header|expected}}
{{dcl|num=1|since=c++23|1=
template&lt; class E &gt;
class bad_expected_access : public std::bad_expected_access&lt;void&gt;
}}
{{dcl|num=2|since=c++23|1=
template&lt;&gt;
class bad_expected_access&lt;void&gt; : public std::exception
}}
{{dcl end}}

@1@ 定义了一种类型，当访问一个包含非预期值的 {{tt|expected}} 对象时，由 {{ltt|cpp/utility/expected/value|std::expected::value}} 抛出。{{tt|bad_expected_access&lt;E&gt;}} 存储了非预期值的副本。

@2@ {{tt|bad_expected_access&lt;void&gt;}} 是所有其他 {{tt|bad_expected_access}} 特化的基类。

{{todo|inheritance diagram}}

===主模板的成员===
{{dsc begin}}
{{dsc mem ctor|cpp/utility/expected/bad_expected_access|inlinemem=true|构造 {{tt|bad_expected_access}} 对象}}
{{dsc mem fun|error|nolink=true|返回储存的值}}
{{dsc mem fun|what|nolink=true|返回用于解释的字符串}}
{{dsc end}}

{{member|1={{small|std::bad_expected_access::}}bad_expected_access|2=
{{dcl begin}}
{{dcl|
explicit bad_expected_access( E e );
}}
{{dcl end}}

构造一个新的 {{tt|bad_expected_access&lt;E&gt;}} 对象。用 {{tt|std::move(e)}} 初始化存储的值。
}}
{{member|1={{small|std::bad_expected_access::}}error|2=
{{dcl begin}}
{{dcl|
const E&amp; error() const &amp; noexcept;
E&amp; error() &amp; noexcept;
const E&amp;&amp; error() const &amp;&amp; noexcept;
E&amp;&amp; error() &amp;&amp; noexcept;
}}
{{dcl end}}

返回到储存的值的引用。
}}
{{member|{{small|std::bad_expected_access::}}what|
{{dcl begin}}
{{dcl|
const char* what() const noexcept override;
}}
{{dcl end}}

返回用于解释的字符串。

===参数===
（无）

===返回值===
指向一个包含解释性信息的空终止字符串。该字符串可以转换和显示为 {{lc|std::wstring}}。该指针保证在至少从其获得的异常对象被销毁之前，或者在异常对象上调用一个非 const 成员函数（例如复制赋值运算符）之前，是有效的。

===注解===
实现允许但是不需要重写 {{tt|what()}}。
}}

==={{tt|bad_expected_access&lt;void&gt;}} 特化的成员===
{{dsc begin}}
{{dsc prot mem ctor|nolink=true|构造 {{tt|bad_expected_access&lt;void&gt;}} 对象}}
{{dsc prot mem dtor|nolink=true|销毁 {{tt|bad_expected_access&lt;void&gt;}} 对象}}
{{dsc prot mem fun|operator{{=}}|nolink=true|替换 {{tt|bad_expected_access&lt;void&gt;}} 对象}}
{{dsc mem fun|what|nolink=true|返回用于解释的字符串}}
{{dsc end}}

{{tt|bad_expected_access&lt;void&gt;}} 特化的成员函数是受保护的，它们只能在派生类中调用。

===示例===
{{example
|code=
|output=
}}

{{langlinks|en|es}}
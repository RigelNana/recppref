{{title|swap{{petty|(std::expected)}}}}
{{cpp/utility/expected/navbar}}

{{dcl begin}}
{{dcl|since=c++23|
friend constexpr void swap( expected&amp; lhs, expected&amp; rhs ) noexcept(/* 见下文 */);
}}
{{dcl end}}

为 {{lc|std::expected}} 重载的 {{lc|std::swap}} 算法。交换 {{c|lhs}} 与 {{c|rhs}} 的状态。等价于 {{c|lhs.swap(rhs)}}。

{{cpp/enable_if| {{c|lhs.swap(rhs)}} 合法}}。

{{cpp/hidden friend|{{c/core|std::expected&lt;T, E&gt;}}}}

===参数===
{{par begin}}
{{par|lhs, rhs|要交换状态的 {{tt|expected}} 对象}}
{{par end}}

===返回值===
（无）

===异常===
{{noexcept|noexcept(lhs.swap(rhs))}}

===示例===
{{example
|code=
#include &lt;expected&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

using Ex = std::expected&lt;std::string, int&gt;;

void show(const Ex&amp; ex1, const Ex&amp; ex2)
{
    for (int i{}; i &lt; 2; ++i)
    {
        std::cout &lt;&lt; (i ? "ex2" : "ex1");
        if (const Ex&amp; ex = (i ? ex2 : ex1); ex.has_value())
            std::cout &lt;&lt; ".has_value() = " &lt;&lt; *ex &lt;&lt; '\n';
        else
            std::cout &lt;&lt; ".error() = " &lt;&lt; ex.error() &lt;&lt; '\n';
    }
}

int main()
{
    Ex ex1("\N{DOG FACE}");
    Ex ex2{"\N{BONE}"};
    show(ex1, ex2);
    swap(ex1, ex2);
    std::cout &lt;&lt; "swap(ex1, ex2);\n";
    show(ex1, ex2);
    std::cout &lt;&lt; '\n';

    ex2 = std::unexpected(13);
    show(ex1, ex2);
    swap(ex1, ex2);
    std::cout &lt;&lt; "swap(ex1, ex2);\n";
    show(ex1, ex2);
    std::cout &lt;&lt; '\n';

    ex2 = std::unexpected(19937);
    show(ex1, ex2);
    swap(ex1, ex2);
    std::cout &lt;&lt; "swap(ex1, ex2);\n";
    show(ex1, ex2);
    std::cout &lt;&lt; '\n';
}
|output=
ex1.has_value() = 🐶
ex2.has_value() = 🦴
swap(ex1, ex2);
ex1.has_value() = 🦴
ex2.has_value() = 🐶

ex1.has_value() = 🦴
ex2.error() = 13
swap(ex1, ex2);
ex1.error() = 13
ex2.has_value() = 🦴

ex1.error() = 13
ex2.error() = 19937
swap(ex1, ex2);
ex1.error() = 19937
ex2.error() = 13
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/expected/dsc swap}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
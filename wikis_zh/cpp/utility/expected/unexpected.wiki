{{cpp/title|unexpected}}
{{cpp/utility/expected/navbar}}

{{dcl begin}}
{{dcl header|expected}}
{{dcl|since=c++23|1=
template&lt; class E &gt;
class unexpected;
}}
{{dcl end}}

类模板 {{tt|std::unexpected}} 代表一个 {{lc|std::expected}} 中存储的非预期值。特别地，{{lc|std::expected}} 具有接受 {{tt|std::unexpected}} 为唯一实参的构造函数，创建含有非预期值的 {{rlpt|expected}} 对象。

用非对象类型、数组类型、{{tt|std::unexpected}} 的特化或有 cv 限定的类型实例化 {{tt|unexpected}} 的程序非良构。

===模板形参===
{{par begin}}
{{par|E|非预期值的类型。该类型不能是数组类型、非对象类型、{{tt|std::unexpected}} 的特化或有 cv 限定的类型}}
{{par end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|{{PAGENAME}}#ctor|构造 {{tt|unexpected}} 对象}}
{{dsc mem dtor|nolink=true|销毁 {{tt|unexpected}} 对象以及其中存储的值|notes={{mark implicit}}}}
{{dsc mem fun|nolink=true|operator{{=}}|向存储的值赋值|notes={{mark implicit}}}}
{{dsc mem fun|{{PAGENAME}}#error|title=error|访问存储的值}}
{{dsc mem fun|{{PAGENAME}}#swap|title=swap|交换存储的值}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc tfun|{{PAGENAME}}#compare|title=operator==|比较存储的值|notes={{mark c++23}}}}
{{dsc tfun|{{PAGENAME}}#swap2|title=swap{{dsc small|(std::unexpected)}}|特化 {{lc|std::swap}} 算法|notes={{mark c++23}}}}
{{dsc end}}

{{anchor|ctor}}
{{member|1={{small|std::unexpected::}}unexpected|2=
{{dcl begin}}
{{dcl|num=1|1=
constexpr unexpected( const unexpected&amp; ) = default;
}}
{{dcl|num=2|1=
constexpr unexpected( unexpected&amp;&amp; ) = default;
}}
{{dcl|num=3|1=
template&lt; class Err = E &gt;
constexpr explicit unexpected( Err&amp;&amp; e );
}}
{{dcl|num=4|1=
template&lt; class... Args &gt;
constexpr explicit unexpected( std::in_place_t, Args&amp;&amp;... args );
}}
{{dcl|num=5|1=
template&lt; class U, class... Args &gt;
constexpr explicit unexpected( std::in_place_t,
                               std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args );
}}
{{dcl end}}

构造 {{tt|std::unexpected}} 对象。

@1,2@ 复制/移动构造函数。分别复制或移动存储的值。
@3@ 如同从 {{c|std::forward&lt;Err&gt;(e)}} [[cpp/language/direct initialization|直接初始化]]一个 {{tt|E}} 类型的值一样构造存储的值。
* {{cpp/enable_if|
** {{c|std::is_same_v&lt;std::remove_cvref_t&lt;Err&gt;, unexpected&gt;}} 为 {{c|false}}，且
** {{c|std::is_same_v&lt;std::remove_cvref_t&lt;Err&gt;, std::in_place_t&gt;}} 为 {{c|false}}，且
** {{c|std::is_constructible_v&lt;E, Err&gt;}} 为 {{c|true}}
}}。
@4@ 如同从 {{c|std::forward&lt;Args&gt;(args)...}} [[cpp/language/direct initialization|直接初始化]]一个 {{tt|E}} 类型的值一样构造存储的值。
* {{cpp/enable_if| {{c|std::is_constructible_v&lt;E, Args...&gt;}} 为 {{c|true}} }}。
@5@ 如同从 {{c|il, std::forward&lt;Args&gt;(args)...}} [[cpp/language/direct initialization|直接初始化]]一个 {{tt|E}} 类型的值一样构造存储的值。
* {{cpp/enable_if| {{c|std::is_constructible_v&lt;E, std::initializer_list&lt;U&gt;&amp;, Args...&gt;}} 为 {{c|true}} }}。

===参数===
{{par begin}}
{{par|e|初始化所含值所用的值}}
{{par|args...|初始化所含值所用的实参}}
{{par|il|初始化所含值所用的初始化式列表}}
{{par end}}

===异常===
抛出任何 {{tt|E}} 的构造函数所抛的异常。
}}

{{anchor|error}}
{{member|1={{small|std::unexpected::}}error|2=
{{dcl begin}}
{{dcl|1=
constexpr const E&amp; error() const&amp; noexcept;
constexpr E&amp; error() &amp; noexcept;
constexpr const E&amp;&amp; error() const&amp;&amp; noexcept;
constexpr E&amp;&amp; error() &amp;&amp; noexcept;
}}
{{dcl end}}

返回到存储的值的引用。
}}

{{anchor|swap}}
{{member|1={{small|std::unexpected::}}swap|2=
{{dcl begin}}
{{dcl|1=
constexpr void swap( unexpected&amp; other ) noexcept(std::is_nothrow_swappable_v&lt;E&gt;);
}}
{{dcl end}}

如同 {{c|using std::swap; swap(error(), other.error());}} 一样交换存储的值。

如果 {{c|std::is_swappable_v&lt;E&gt;}} 为 {{c|false}}，程序非良构。
}}

{{anchor|compare}}
{{member|1=operator=={{small|(std::unexpected)}}|2=
{{dcl begin}}
{{dcl|1=
template&lt; class E2 &gt;
friend constexpr bool operator==( unexpected&amp; x, std::unexpected&lt;E2&gt;&amp; y );
}}
{{dcl end}}

如同 {{c|1=return x.error() == y.error()}} 一样比较存储的值。

如果表达式 {{c|1=x.error() == e.error()}} 非良构，或其结果不能转换到 {{c/core|bool}}，则程序非良构。

{{cpp/hidden friend|std::unexpected&lt;E&gt;}}
}}

{{anchor|swap2}}
{{member|1=swap{{small|(std::unexpected)}}|2=
{{dcl begin}}
{{dcl|1=
friend constexpr void
swap( unexpected&amp; x, unexpected&amp; y ) noexcept(noexcept(x.swap(y)));
}}
{{dcl end}}

等价于 {{c|x.swap(y)}}。

{{cpp/enable if| {{c|std::is_swappable_v&lt;E&gt;}} 为 {{c|true}} }}。

{{cpp/hidden friend|std::unexpected&lt;E&gt;}}
}}

===推导指引===
{{dcl begin}}
{{dcl|since=c++23|1=
template&lt; class E &gt;
unexpected(E) -&gt; unexpected&lt;E&gt;;
}}
{{dcl end}}

为 {{lc|unexpected}} 提供[[cpp/language/class template argument deduction|推导指引]]以允许从构造函数实参推导。

===注解===
在 C++17 前，名字 {{ltt|cpp/error/unexpected|std::unexpected}} 指代 C++ 运行时在违背动态异常规范时调用的函数。

===示例===
{{example
|code=
#include &lt;expected&gt;
#include &lt;iostream&gt;

enum class error
{
    compile_time_error,
    runtime_error
};

[[nodiscard]] auto unexpected_runtime_error() -&gt; std::expected&lt;int, error&gt;
{
    return std::unexpected(error::runtime_error);
}

int main()
{
    std::expected&lt;double, int&gt; ex = std::unexpected(3);

    if (!ex)
        std::cout &lt;&lt; "ex 包含错误值\n";

    if (ex == std::unexpected(3))
        std::cout &lt;&lt; "错误值等于 3\n";

    const auto e = unexpected_runtime_error();

    e.and_then([](const auto&amp; e) -&gt; std::expected&lt;int, error&gt;
    {
        std::cout &lt;&lt; "and_then: " &lt;&lt; int(e); // 不打印
        return {};
    })
    .or_else([](const auto&amp; e) -&gt; std::expected&lt;int, error&gt;
    {
        std::cout &lt;&lt; "or_else: " &lt;&lt; int(e); // 打印此行
        return {};
    });
}
|output=
ex 包含错误值
错误值等于 3
or_else: 1
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/expected/dsc constructor}}
{{dsc inc|cpp/utility/expected/dsc operator cmp}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
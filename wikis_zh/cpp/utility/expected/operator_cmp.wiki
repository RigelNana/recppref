{{title|1=operator=={{petty|(std::expected)}}}}
{{cpp/utility/expected/navbar}}

{{dcl begin}}
{{dcl h|主模板}}
{{dcl|num=1|since=c++23|1=
template&lt; class T2, class E2 &gt;
    requires (!std::is_void_v&lt;T2&gt;)
friend constexpr bool operator==( const expected&amp; lhs,
                                  const std::expected&lt;T2, E2&gt;&amp; rhs );
}}
{{dcl|num=2|since=c++23|1=
template&lt; class E2 &gt;
friend constexpr bool operator==( const expected&amp; lhs,
                                  const std::unexpected&lt;E2&gt;&amp; unex );
}}
{{dcl|num=3|since=c++23|1=
template&lt; class T2 &gt;
friend constexpr bool operator==( const expected&amp; lhs, const T2&amp; val );
}}
{{dcl h|{{c/core|void}} 部分特化}}
{{dcl|num=4|since=c++23|1=
template&lt; class T2, class E2 &gt;
  requires std::is_void_v&lt;T2&gt;
friend constexpr bool operator==( const expected&amp; lhs,
                                  const std::expected&lt;T2, E2&gt;&amp; rhs );
}}
{{dcl|num=5|since=c++23|1=
template&lt; class E2 &gt;
friend constexpr bool operator==( const expected&amp; lhs,
                                  const std::unexpected&lt;E2&gt;&amp; unex );
}}
{{dcl end}}

对 {{lc|std::expected}} 对象执行比较操作。

@1@ 比较两个 {{lc|std::expected}} 对象。当且仅当 {{c|lhs}} 和 {{c|rhs}} 都包含相等的预期值，或者都包含相等的非预期值时，对象才比较相等。
{{rev begin}}
{{rev|until=c++26|
如果以下任意表达式非良构或它（们）的结果不可转换到 {{c/core|bool}}，那么程序非良构：
}}
{{rev|since=c++26|
{{cpp/enable if|以下所有表达式都良构且它们的结果可转换到 {{c/core|bool}} }}：
}}
{{rev end}}
* {{c|1=*x == *y}}
* {{c|1=x.error() == y.error()}}

@2@ 将 {{lc|std::expected}} 对象与一个 {{lc|std::unexpected}} 对象比较。当且仅当 {{c|lhs}} 包含一个等于 {{c|unex.error()}} 的非预期值时，对象才比较相等。
{{rev begin}}
{{rev|until=c++26|
如果表达式 {{c|1=lhs.error() == unex.error()}} 非良构或它的结果不可转换到 {{c/core|bool}}，那么程序非良构。
}}
{{rev|since=c++26|
{{cpp/enable if|表达式 {{c|1=lhs.error() == unex.error()}} 良构且它的结果可转换到 {{c/core|bool}} }}。
}}
{{rev end}}

@3@ 将 {{lc|std::expected}} 对象与一个预期值比较。当且仅当 {{c|lhs}} 包含一个等于 {{c|val}} 的预期值时，对象才比较相等。
{{rev begin}}
{{rev|until=c++26|
如果表达式 {{c|1=*lhs == val}} 非良构或它的结果不可转换到 {{c/core|bool}}，那么程序非良构。
}}
{{rev|since=c++26|
{{cpp/enable if|满足以下所有条件}}：
* {{tt|T2}} 不是 {{lc|std::expected}} 的特化。
* 表达式 {{c|1=*lhs == val}} 良构且它的结果可转换到 {{c/core|bool}}。
}}
{{rev end}}

@4@ 比较两个 {{lc|std::expected}} 对象。当且仅当 {{c|lhs}} 和 {{c|rhs}} 都表示预期值，或者都包含相等的非预期值时，对象才比较相等。
{{rev begin}}
{{rev|until=c++26|
如果表达式 {{c|1=lhs.error() == rhs.error()}} 非良构或它的结果不可转换到 {{c/core|bool}}，那么程序非良构。
}}
{{rev|since=c++26|
{{cpp/enable if|表达式 {{c|1=lhs.error() == rhs.error()}} 良构且它的结果可转换到 {{c/core|bool}} }}。
}}
{{rev end}}

@5@ 将 {{lc|std::expected}} 对象与一个 {{lc|std::unexpected}} 对象比较。当且仅当 {{c|lhs}} 包含一个等于 {{c|unex.error()}} 的非预期值时，对象才比较相等。
{{rev begin}}
{{rev|until=c++26|
如果表达式 {{c|1=lhs.error() == unex.error()}} 非良构或它的结果不可转换到 {{c/core|bool}}，那么程序非良构。
}}
{{rev|since=c++26|
{{cpp/enable if|表达式 {{c|1=lhs.error() == unex.error()}} 良构且它的结果可转换到 {{c/core|bool}} }}。
}}
{{rev end}}

{{cpp/hidden friend|{{tt|std::expected&lt;T, E&gt;}}|plural=yes}}

{{cpp/note synthesized eq}}

===参数===
{{par begin}}
{{par|lhs, rhs|用于比较的 {{lc|std::expected}} 对象}}
{{par|unex|要与 {{c|lhs}} 比较的 {{lc|std::unexpected}} 对象}}
{{par|val|要与 {{c|lhs}} 中包含的预期值比较的值}}
{{par end}}

===返回值===
@1@ {{c multi|lhs.has_value() !{{=}} rhs.has_value() ? false :|    (lhs.has_value() ? *lhs {{==}} *rhs : lhs.error() {{==}} rhs.error())}}

@2@ {{c|1=!lhs.has_value() &amp;&amp; static_cast&lt;bool&gt;(lhs.error() == unex.error())}}

@3@ {{c|1=lhs.has_value() &amp;&amp; static_cast&lt;bool&gt;(*lhs == val)}}

@4@ {{c multi|lhs.has_value() !{{=}} rhs.has_value() ? false :|    lhs.has_value() {{!!}} static_cast&lt;bool&gt;(lhs.error() {{==}} rhs.error())}}

@5@ {{c|1=!lhs.has_value() &amp;&amp; static_cast&lt;bool&gt;(lhs.error() == unex.error())}}

===异常===
抛出比较时抛出的异常。

===注解===
{{feature test macro|__cpp_lib_constrained_equality|受约束的 {{lc|std::expected}} 相关比较运算符|value=202411L|std=C++26}}

===示例===
{{example
|code=
#include &lt;expected&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

using namespace std::string_view_literals;

int main()
{
    auto x1{"\N{GREEN HEART}"sv};
    auto x2{"\N{CROSS MARK}"sv};
    std::expected&lt;std::string_view, int&gt; e1{x1}, e2{x1}, e3{x2};
    std::unexpected u1{13};
    
    std::cout &lt;&lt; "重载 (1)：\n"
              &lt;&lt; e1.value() &lt;&lt; (e1 == e2 ? " == " : " != ") &lt;&lt; *e2 &lt;&lt; '\n'
              &lt;&lt; e1.value() &lt;&lt; (e1 != e3 ? " != " : " == ") &lt;&lt; *e3 &lt;&lt; "\n\n";
    
    std::cout &lt;&lt; "重载 (2)：\n"
              &lt;&lt; e1.value() &lt;&lt; (e1 == u1 ? " == " : " != ") &lt;&lt; u1.error() &lt;&lt; '\n';
    e1 = std::unexpected{13};
    std::cout &lt;&lt; e1.error() &lt;&lt; (e1 == u1 ? " == " : " != ") &lt;&lt; u1.error() &lt;&lt; '\n';
    e1 = std::unexpected{31};
    std::cout &lt;&lt; e1.error() &lt;&lt; (e1 != u1 ? " != " : " == ") &lt;&lt; u1.error() &lt;&lt; '\n';
    
    std::cout &lt;&lt; "重载 (3)：\n"
              &lt;&lt; *e1 &lt;&lt; (e1 == x1 ? " == " : " != ") &lt;&lt; x1 &lt;&lt; '\n'
              &lt;&lt; *e1 &lt;&lt; (e1 != x2 ? " != " : " == ") &lt;&lt; x2 &lt;&lt; "\n\n";
}
|output=
重载 (1)：
💚 == 💚
💚 != ❌

重载 (2)：
💚 != 13
13 == 13
31 != 13

重载 (3)：
💚 == 💚
💚 != ❌
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/expected/dsc unexpected}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
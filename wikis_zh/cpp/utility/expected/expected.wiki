{{cpp/utility/expected/title|expected}}
{{cpp/utility/expected/navbar}}
{{dcl begin}}
{{dcl h|主模板}}
{{dcla|num=1|since=c++23|
constexpr expected();
}}
{{dcla|num=2|since=c++23|
constexpr expected( const expected&amp; other );
}}
{{dcla|num=3|since=c++23|
constexpr expected( expected&amp;&amp; other ) noexcept(/* 见下文 */);
}}
{{dcla|num=4|since=c++23|notes={{mark|条件性 explicit}}|
template&lt; class U, class G &gt;
constexpr expected( const expected&lt;U, G&gt;&amp; other );
}}
{{dcla|num=5|since=c++23|notes={{mark|条件性 explicit}}|
template&lt; class U, class G &gt;
constexpr expected( expected&lt;U, G&gt;&amp;&amp; other );
}}
{{dcla|num=6|since=c++23|1=
template&lt; class U = std::remove_cv_t&lt;T&gt; &gt;
constexpr explicit(!std::is_convertible_v&lt;U, T&gt;) expected( U&amp;&amp; v );
}}
{{dcla|num=7|since=c++23|
template&lt; class G &gt;
constexpr explicit(!std::is_convertible_v&lt;const G&amp;, E&gt;)
    expected( const std::unexpected&lt;G&gt;&amp; e );
}}
{{dcla|num=8|since=c++23|
template&lt; class G &gt;
constexpr explicit(!std::is_convertible_v&lt;G, E&gt;)
    expected( std::unexpected&lt;G&gt;&amp;&amp; e );
}}
{{dcla|num=9|since=c++23|
template&lt; class... Args &gt;
constexpr explicit expected( std::in_place_t, Args&amp;&amp;... args );
}}
{{dcla|num=10|since=c++23|
template&lt; class U, class... Args &gt;
constexpr explicit
    expected( std::in_place_t,
              std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args );
}}
{{dcla|num=11|since=c++23|
template&lt; class... Args &gt;
constexpr explicit expected( std::unexpect_t, Args&amp;&amp;... args );
}}
{{dcla|num=12|since=c++23|
template&lt; class U, class... Args &gt;
constexpr explicit expected( std::unexpect_t,
                             std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args );
}}
{{dcl h|{{c/core|void}} 部分特化}}
{{dcla|num=13|since=c++23|
constexpr expected();
}}
{{dcla|num=14|since=c++23|
constexpr expected( const expected&amp; other );
}}
{{dcla|num=15|since=c++23|
constexpr expected( expected&amp;&amp; other )
    noexcept(std::is_nothrow_move_constructible_v&lt;E&gt;);
}}
{{dcla|num=16|since=c++23|
template&lt; class U, class G &gt;
constexpr explicit(!std::is_convertible_v&lt;const G&amp;, E&gt;)
    expected( const expected&lt;U, G&gt;&amp; other );
}}
{{dcla|num=17|since=c++23|
template&lt; class U, class G &gt;
constexpr explicit(!std::is_convertible_v&lt;G, E&gt;)
    expected( expected&lt;U, G&gt;&amp;&amp; other );
}}
{{dcla|num=18|since=c++23|
template&lt; class G &gt;
constexpr explicit(!std::is_convertible_v&lt;const G&amp;, E&gt;)
    expected( const std::unexpected&lt;G&gt;&amp; e );
}}
{{dcla|num=19|since=c++23|
template&lt; class G &gt;
constexpr explicit(!std::is_convertible_v&lt;G, E&gt;)
    expected( std::unexpected&lt;G&gt;&amp;&amp; e );
}}
{{dcla|num=20|since=c++23|
template&lt; class... Args &gt;
constexpr explicit expected( std::in_place_t );
}}
{{dcla|num=21|since=c++23|
template&lt; class... Args &gt;
constexpr explicit expected( std::unexpect_t, Args&amp;&amp;... args );
}}
{{dcla|num=22|since=c++23|
template&lt; class U, class... Args &gt;
constexpr explicit expected( std::unexpect_t,
                             std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args );
}}
{{dcl end}}

构造新的 {{tt|expected}} 对象。

===参数===
{{par begin}}
{{par|other|另一个 {{tt|expected}} 对象，它包含的值会被复制}}
{{par|e|{{rlpt|unexpected|std::unexpected}} 对象，它包含的值会被复制}}
{{par|v|用来初始化包含值的值}}
{{par|args|用来初始化包含值的实参}}
{{par|il|用来初始化包含值的初始化器列表}}
{{par end}}

===效果===
====主模板构造函数====
{|class="wikitable" style="word-break: keep-all;"
!{{nbsp}}重载{{nbsp}}
!{{nbsp}}初始化方式{{nbsp}}
!预期值的初始化器
!非预期值的初始化器
!构造后的 {{rlpt|operator bool|has_value()}}
|-
|{{vl|1}}
|[[cpp/language/value initialization|值初始化]]
|（空）
|{{n/a|-}}
|{{c|true}}
|-
|{{vl|2}}
|rowspan=11|（非列表）&lt;br&gt;[[cpp/language/direct initialization|直接初始化]]
|{{c|*other}}
|{{c|other.error()}}
|rowspan=4|{{c|other.has_value()}}&lt;br&gt;
* 是 {{c|true}} 时只会初始化预期值。
* 是 {{c|false}} 时只会初始化非预期值。
|-
|{{vl|3}}
|{{c|std::move(*other)}}
|{{c|std::move(other.error())}}
|-
|{{vl|4}}
|{{c multi|std::forward&lt;const U&amp;&gt;|    (*other)}}
|{{c multi|std::forward&lt;const G&amp;&gt;|    (other.error())}}
|-
|{{vl|5}}
|{{c|std::forward&lt;U&gt;(*other)}}
|{{c multi|std::forward&lt;G&gt;|    (other.error())}}
|-
|{{vl|6}}
|{{c|std::forward&lt;U&gt;(v)}}
|{{n/a|-}}
|{{c|true}}
|-
|{{vl|7}}
|rowspan=2 {{n/a|-}}
|{{c multi|std::forward&lt;const G&amp;&gt;|    (e.error())}}
|rowspan=2|{{c|false}}
|-
|{{vl|8}}
|{{c|std::forward&lt;G&gt;(e.error())}}
|-
|{{vl|9}}
|{{c|std::forward&lt;Args&gt;(args)...}}
|rowspan=2 {{n/a|-}}
|rowspan=2|{{c|true}}
|-
|{{vl|10}}
|{{c multi|il,|std::forward&lt;Args&gt;(args)...}}
|-
|{{vl|11}}
|rowspan=2 {{n/a|-}}
|{{c|std::forward&lt;Args&gt;(args)...}}
|rowspan=2|{{c|false}}
|-
|{{vl|12}}
|{{c multi|il,|std::forward&lt;Args&gt;(args)...}}
|}

===={{c/core|void}} 部分特化构造函数====
{|class="wikitable"
!{{nbsp}}重载{{nbsp}}
!初始化方式
!非预期值的初始化器
!构造后的 {{rlpt|operator bool|has_value()}}
|-
|{{vl|13}}
|{{n/a}}
|{{n/a|-}}
|{{c|true}}
|-
|{{vl|14}}
|rowspan=6|（非列表）直接初始化{{nbsp}}
|{{c|rhs.error()}}
|rowspan=4|{{c|other.has_value()}}&lt;br&gt;
* 是 {{c|false}} 时会初始化非预期值。
|-
|{{vl|15}}
|{{c|std::move(rhs.error)}}
|-
|{{vl|16}}
|{{c|std::forward&lt;const G&amp;&gt;(rhs.error())}}
|-
|{{vl|17}}
|{{c|std::forward&lt;G&gt;(rhs.error())}}
|-
|{{vl|18}}
|{{c|std::forward&lt;const G&amp;&gt;(e.error())}}
|rowspan=2|{{c|false}}
|-
|{{vl|19}}
|{{c|std::forward&lt;G&gt;(e.error())}}
|-
|{{vl|20}}
|{{n/a}}
|{{n/a|-}}
|{{c|true}}
|-
|{{vl|21}}
|rowspan=2|（非列表）直接初始化
|{{c|std::forward&lt;Args&gt;(args)...}}
|rowspan=2|{{c|false}}
|-
|{{vl|22}}
|{{c|il, std::forward&lt;Args&gt;(args)...}}
|}

===约束和补充信息===
====主模板构造函数====
@1@ {{cpp/enable if| {{c|std::is_default_constructible_v&lt;T&gt;}} 是 {{c|true}} }}。

@2@ 此构造函数被定义为弃置，除非 {{c|std::is_copy_constructible_v&lt;T&gt;}} 和 {{c|std::is_copy_constructible_v&lt;E&gt;}} 都是 {{c|true}}。
@@ 此构造函数是平凡的，如果 {{c|std::is_trivially_copy_constructible_v&lt;T&gt;}} 和 {{c|std::is_trivially_copy_constructible_v&lt;E&gt;}} 都是 {{c|true}}。

@3@ {{cpp/enable if| {{c|std::is_move_constructible_v&lt;T&gt;}} 和 {{c|std::is_move_constructible_v&lt;E&gt;}} 都是 {{c|true}} }}。
@@ 此构造函数是平凡的，如果 {{c|std::is_trivially_move_constructible_v&lt;T&gt;}} 和 {{c|std::is_trivially_move_constructible_v&lt;E&gt;}} 都是 {{c|true}}。

@4,5@ {{cpp/enable if|plural=yes|满足以下所有条件}}：
* 对于重载 {{v|4}}，{{c|std::is_constructible_v&lt;T, const U&amp;&gt;}} 和 {{c|std::is_constructible_v&lt;E, const G&amp;&gt;}} 都是 {{c|true}}。
* 对于重载 {{v|5}}，{{c|std::is_constructible_v&lt;T, U&gt;}} 和 {{c|std::is_constructible_v&lt;E, G&gt;}} 都是 {{c|true}}。
* 如果 {{tt|T}} 不是（可有 cv 限定的）{{c/core|bool}}，那么以下 8 个值都是 {{c|false}}：
** {{c|std::is_constructible_v&lt;T, std::expected&lt;U, G&gt;&amp;&gt;}}
** {{c|std::is_constructible_v&lt;T, std::expected&lt;U, G&gt;&gt;}}
** {{c|std::is_constructible_v&lt;T, const std::expected&lt;U, G&gt;&amp;&gt;}}
** {{c|std::is_constructible_v&lt;T, const std::expected&lt;U, G&gt;&gt;}}
** {{c|std::is_convertible_v&lt;std::expected&lt;U, G&gt;&amp;, T&gt;}}
** {{c|std::is_convertible_v&lt;std::expected&lt;U, G&gt;, T&gt;}}
** {{c|std::is_convertible_v&lt;const std::expected&lt;U, G&gt;&amp;, T&gt;}}
** {{c|std::is_convertible_v&lt;const std::expected&lt;U, G&gt;, T&gt;}}
* 以下 4 个值都是 {{c|false}}：
** {{c|std::is_constructible_v&lt;std::unexpected&lt;E&gt;, std::expected&lt;U, G&gt;&amp;&gt;}}
** {{c|std::is_constructible_v&lt;std::unexpected&lt;E&gt;, std::expected&lt;U, G&gt;&gt;}}
** {{c|std::is_constructible_v&lt;std::unexpected&lt;E&gt;, const std::expected&lt;U, G&gt;&amp;&gt;}}
** {{c|std::is_constructible_v&lt;std::unexpected&lt;E&gt;, const std::expected&lt;U, G&gt;&gt;}}
:@4@ 此构造函数是 {{c/core|explicit}} 的，如果 {{c|std::is_convertible_v&lt;const U&amp;, T&gt;}} 或 {{c|std::is_convertible_v&lt;const G&amp;, E&gt;}} 是 {{c|false}}。
:@5@ 此构造函数是 {{c/core|explicit}} 的，如果 {{c|std::is_convertible_v&lt;U, T&gt;}} 或 {{c|std::is_convertible_v&lt;G, E&gt;}} 是 {{c|false}}。

@6@ {{cpp/enable if|满足以下所有条件}}：
* {{c|std::is_same_v&lt;std::remove_cvref_t&lt;U&gt;, std::in_place_t&gt;}} 是 {{c|false}}。
* {{c|std::is_same_v&lt;std::expected&lt;T, E&gt;, std::remove_cvref_t&lt;U&gt;&gt;}} 是 {{c|false}}。
* {{c|std::is_constructible_v&lt;T, U&gt;}} 是 {{c|true}}。
* {{c/core|std::remove_cvref_t&lt;U&gt;}} 不是 {{rlpt|unexpected|std::unexpected}} 的特化。
* 如果 {{tt|T}} 不是（可有 cv 限定的）{{c/core|bool}}，那么 {{c/core|std::remove_cvref_t&lt;U&gt;}} 不是 {{rlpt|/|std::expected}} 的特化。

@7@ {{cpp/enable if| {{c|std::is_constructible_v&lt;E, const G&amp;&gt;}} 是 {{c|true}} }}。

@8@ {{cpp/enable if| {{c|std::is_constructible_v&lt;E, G&gt;}} 是 {{c|true}} }}。

@9@ {{cpp/enable if| {{c|std::is_constructible_v&lt;T, Args...&gt;}} 是 {{c|true}} }}。

@10@ {{cpp/enable if| {{c|std::is_constructible_v&lt;T, std::initializer_list&lt;U&gt;&amp;, Args...&gt;}} 是 {{c|true}} }}。

@11@ {{cpp/enable if| {{c|std::is_constructible_v&lt;E, Args...&gt;}} 是 {{c|true}} }}。

@12@ {{cpp/enable if| {{c|std::is_constructible_v&lt;E, std::initializer_list&lt;U&gt;&amp;, Args...&gt;}} 是 {{c|true}} }}。

===={{c/core|void}} 部分特化构造函数====
@14@ 此构造函数被定义为弃置，除非 {{c|std::is_copy_constructible_v&lt;E&gt;}} 是 {{c|true}}。
@@ 此构造函数是平凡的，如果 {{c|std::is_trivially_copy_constructible_v&lt;E&gt;}} 是 {{c|true}}。

@15@ {{cpp/enable if| {{c|std::is_move_constructible_v&lt;E&gt;}} 是 {{c|true}} }}。
@@ 此构造函数是平凡的，如果 {{c|std::is_trivially_move_constructible_v&lt;E&gt;}} 是 {{c|true}}。

@16,17@ {{cpp/enable if|plural=yes|满足以下所有条件}}：
* 对于重载 {{v|16}}，{{c|std::is_constructible_v&lt;E, const G&amp;&gt;}} 是 {{c|true}}。
* 对于重载 {{v|17}}，{{c|std::is_constructible_v&lt;E, G&gt;}} 是 {{c|true}}。
* {{c|std::is_void_v&lt;U&gt;}} 是 {{c|true}}。
* 以下 4 个值都是 {{c|false}}：
** {{c|std::is_constructible_v&lt;std::unexpected&lt;E&gt;, std::expected&lt;U, G&gt;&amp;&gt;}}
** {{c|std::is_constructible_v&lt;std::unexpected&lt;E&gt;, std::expected&lt;U, G&gt;&gt;}}
** {{c|std::is_constructible_v&lt;std::unexpected&lt;E&gt;, const std::expected&lt;U, G&gt;&amp;&gt;}}
** {{c|std::is_constructible_v&lt;std::unexpected&lt;E&gt;, const std::expected&lt;U, G&gt;&gt;}}

@18@ {{cpp/enable if| {{c|std::is_constructible_v&lt;E, const G&amp;&gt;}} 是 {{c|true}} }}。

@19@ {{cpp/enable if| {{c|std::is_constructible_v&lt;E, G&gt;}} 是 {{c|true}} }}。

@21@ {{cpp/enable if| {{c|std::is_constructible_v&lt;E, Args...&gt;}} 是 {{c|true}} }}。

@22@ {{cpp/enable if| {{c|std::is_constructible_v&lt;E, std::initializer_list&lt;U&gt;&amp;, Args...&gt;}} 是 {{c|true}} }}。

===异常===
====主模板构造函数====
@1@ 抛出在初始化预期值的过程中抛出的异常。

@2@ 抛出在初始化预期值或非预期值的过程中抛出的异常。

@3@ 抛出在初始化预期值或非预期值的过程中抛出的异常。
@@ {{noexcept|std::is_nothrow_move_constructible_v&lt;T&gt;
    &amp;&amp; std::is_nothrow_move_constructible_v&lt;E&gt;}}

@4,5@ 抛出在初始化预期值或非预期值的过程中抛出的异常。

@6@ 抛出在初始化预期值的过程中抛出的异常。

@7,8@ 抛出在初始化非预期值的过程中抛出的异常。

@9,10@ 抛出在初始化预期值的过程中抛出的异常。

@11,12@ 抛出在初始化非预期值的过程中抛出的异常。

===={{c/core|void}} 部分特化构造函数====
@14-19@ 抛出在初始化非预期值的过程中抛出的异常。

@21,22@ 抛出在初始化非预期值的过程中抛出的异常。

===示例===
{{example}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3886|std=C++23|before=重载 {{vl|6}} 的默认模板实参是 {{tt|T}}|after=改成 {{c/core|std::remove_cv_t&lt;T&gt;}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/expected/dsc unexpected}}
{{dsc inc|cpp/utility/dsc in_place}}
{{dsc inc|cpp/utility/expected/dsc unexpect_t}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/utility/expected/title|and_then}}
{{cpp/utility/expected/navbar}}
{{dcl begin}}
{{dcl h|主模板}}
{{dcla|num=1|since=c++23|
template&lt; class F &gt;
constexpr auto and_then( F&amp;&amp; f ) &amp;;
}}
{{dcl|num=2|since=c++23|
template&lt; class F &gt;
constexpr auto and_then( F&amp;&amp; f ) const&amp;;
}}
{{dcla|num=3|since=c++23|
template&lt; class F &gt;
constexpr auto and_then( F&amp;&amp; f ) &amp;&amp;;
}}
{{dcl|num=4|since=c++23|
template&lt; class F &gt;
constexpr auto and_then( F&amp;&amp; f ) const&amp;&amp;;
}}
{{dcl h|{{c/core|void}} 部分特化}}
{{dcla|num=5|since=c++23|
template&lt; class F &gt;
constexpr auto and_then( F&amp;&amp; f ) &amp;;
}}
{{dcl|num=6|since=c++23|
template&lt; class F &gt;
constexpr auto and_then( F&amp;&amp; f ) const&amp;;
}}
{{dcla|num=7|since=c++23|
template&lt; class F &gt;
constexpr auto and_then( F&amp;&amp; f ) &amp;&amp;;
}}
{{dcl|num=8|since=c++23|
template&lt; class F &gt;
constexpr auto and_then( F&amp;&amp; f ) const&amp;&amp;;
}}
{{dcl end}}

如果 {{c|*this}} 表示预期值，那么调用 {{c|f}} 并返回它的结果。否则返回一个包含非预期值的 {{tt|std::expected}} 对象，以 {{c|*this}} 的非预期值初始化该值。
@1-4@ 以预期值 {{rlpi|/#数据成员|val}} 作为实参调用 {{c|f}}。
@5-8@ 不以任何实参调用 {{c|f}}。

给定类型 {{tt|U}} 为
@1,2@ {{c/core|std::remove_cvref_t&lt;std::invoke_result_t&lt;F, decltype((}}{{tti|val}}{{c/core|))&gt;&gt;}}
@3,4@ {{c/core|std::remove_cvref_t&lt;std::invoke_result_t&lt;F, decltype(std::move(}}{{tti|val}}{{c/core|))&gt;&gt;}}
@5-8@ {{c/core|std::remove_cvref_t&lt;std::invoke_result_t&lt;F&gt;&gt;}}

如果 {{tt|U}} 不是 {{tt|std::expected}} 的特化，或者 {{c|std::is_same_v&lt;U::error_type, E&gt;}} 是 {{c|false}}，那么程序非良构。

@1,2@ {{cpp/enable if|plural=yes| {{c|std::is_constructible_v&lt;E, decltype(error())&gt;}} 是 {{c|true}} }}。

@3,4@ {{cpp/enable if|plural=yes| {{c|std::is_constructible_v&lt;E, decltype(std::move(error()))&gt;}} 是 {{c|true}} }}。

@5,6@ {{cpp/enable if|plural=yes| {{c|std::is_constructible_v&lt;E, decltype(error())&gt;}} 是 {{c|true}} }}。

@7,8@ {{cpp/enable if|plural=yes| {{c|std::is_constructible_v&lt;E, decltype(std::move(error()))&gt;}} 是 {{c|true}} }}。

===参数===
{{par begin}}
{{par|f|适合的函数或{{named req|Callable}}对象，返回 {{tt|std::expected}}}}
{{par end}}

===返回值===
{|class="wikitable"
!rowspan=2|{{nbsp}}重载{{nbsp}}
!colspan=2|{{rlpf|operator bool|has_value}} 的值
|-
!style="font-weight: normal;"|{{c|true}}
!style="font-weight: normal;"|{{c|false}}
|-
|style="text-align: center;"|{{vl|1,2}}
|{{box|{{c/core|std::invoke(std::forward&lt;F&gt;(f),}}{{nbspt}}{{tti|val}}{{c/core|)}}}}
|{{c|U(std::unexpect, error())}}
|-
|style="text-align: center;"|{{vl|3,4}}
|{{box|{{c/core|std::invoke(std::forward&lt;F&gt;(f),std::move(}}{{tti|val}}{{c/core|))}}}}
|{{c|U(std::unexpect, std::move(error()))}}
|-
|style="text-align: center;"|{{vl|5,6}}
|rowspan=2|{{c|std::invoke(std::forward&lt;F&gt;(f))}}
|{{c|U(std::unexpect, error())}}
|-
|style="text-align: center;"|{{vl|7,8}}
|{{c|U(std::unexpect, std::move(error()))}}
|}

===注解===
{{ftm begin|std=1|comment=1}}
{{ftm|__cpp_lib_expected|std=C++23|value=202211L|{{tt|std::expected}} 的单子式函数}}
{{ftm end}}

===示例===
{{example}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3938|std=C++23|before=通过 {{c|value()}} 获取预期值&lt;ref&gt;{{rlpf|value}} 要求 {{tt|E}} 可复制构造（见 {{lwg|3843}}），而 {{rlpt|operator*}} 不要求。&lt;/ref&gt;|after=改成 {{c|**this}}}}
{{dr list item|wg=lwg|dr=3973|std=C++23|before=通过 {{c|**this}} 获取预期值&lt;ref&gt;{{c|**this}} 会触发[[cpp/language/adl|实参依赖查找]]。&lt;/ref&gt;|after=改成 {{box|{{rlpi|/#数据成员|val}}}}}}
{{dr list end}}
&lt;references/&gt;

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/expected/dsc unexpect_t}}
{{dsc inc|cpp/utility/expected/dsc transform}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
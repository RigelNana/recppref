{{cpp/utility/expected/title|emplace}}
{{cpp/utility/expected/navbar}}

{{dcl begin}}
{{dcl h|主模板}}
{{dcl|num=1|since=c++23|
template&lt; class... Args &gt;
constexpr T&amp; emplace( Args&amp;&amp;... args ) noexcept;
}}
{{dcl|num=2|since=c++23|
template&lt; class U, class... Args &gt;
constexpr T&amp; emplace( std::initializer_list&lt;U&gt; il, Args&amp;&amp;... args ) noexcept;
}}
{{dcl h|{{c/core|void}} 部分特化}}
{{dcl|num=3|since=c++23|
constexpr void emplace() noexcept;
}}
{{dcl end}}

在原地构造一个预期值。调用后，{{rlpf|operator bool|has_value}} 返回 {{c|true}}。

@1@ 销毁包含的值，然后以 {{c|std::forward&lt;Args&gt;(args)...}} [[cpp/language/direct initialization|直接初始化]] {{c|*this}} 中包含的预期值。
@@ {{cpp/enable if| {{c|std::is_nothrow_constructible_v&lt;T, Args...&gt;}} 是 {{c|true}} }}。

@2@ 销毁包含的值，然后以 {{c|il}} 和 {{c|std::forward&lt;Args&gt;(args)...}} 直接初始化 {{c|*this}} 中包含的预期值。
@@ {{cpp/enable if| {{c|std::is_nothrow_constructible_v&lt;T, std::initializer_list&lt;U&gt;&amp;, Args...&gt;}} 是 {{c|true}} }}。

@3@ 如果 {{c|*this}} 包含一个非预期值，就销毁该值。

===参数===
{{par begin}}
{{par|args|传递给构造函数的实参}}
{{par|il|传递给构造函数的初始化式列表}}
{{par end}}

===返回值===
@1@ {{box|{{c/core|*std::construct_at(std::addressof(}}{{rlpi|/#数据成员|val}}{{c/core|), std::forward&lt;Args&gt;(args)...)}}}}

@2@ {{box|{{c/core|*std::construct_at(std::addressof(}}{{rlpi|/#数据成员|val}}{{c/core|), il, std::forward&lt;Args&gt;(args)...)}}}}

===注解===
如果 {{tt|T}} 的构造是潜在抛出的，那么可以改用 {{rlpt|1=operator=}}。

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/expected/dsc operator{{=}}}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|en}}
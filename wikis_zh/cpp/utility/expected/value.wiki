{{cpp/utility/expected/title|value}}
{{cpp/utility/expected/navbar}}

{{dcl begin}}
{{dcl h|主模板}}
{{dcl|num=1|since=c++23|
constexpr T&amp; value() &amp;;
}}
{{dcl|num=2|since=c++23|
constexpr const T&amp; value() const&amp;;
}}
{{dcl|num=3|since=c++23|
constexpr T&amp;&amp; value() &amp;&amp;;
}}
{{dcl|num=4|since=c++23|
constexpr const T&amp;&amp; value() const&amp;&amp;;
}}
{{dcl h|{{c/core|void}} 部分特化}}
{{dcl|num=5|since=c++23|
constexpr void value() const&amp;;
}}
{{dcl|num=6|since=c++23|
constexpr void value() &amp;&amp;;
}}
{{dcl end}}

如果 {{c|*this}} 包含预期值，那么返回到该预期值的引用。对于 {{c/core|void}} 部分特化不会返回值。

否则，抛出包含 {{rlpf|error}} 的副本的 {{c/core|std::bad_expected_access&lt;std::decay_t&lt;E&gt;&gt;}} 类型的异常。

@1,2@ 如果 {{c|std::is_copy_constructible_v&lt;E&gt;}} 是 {{c|false}}，那么程序非良构。

@3,4@ 如果 {{c|std::is_copy_constructible_v&lt;E&gt;}} 或 {{c|std::is_constructible_v&lt;E, decltype(std::move(error()))&gt;}} 是 {{c|false}}，那么程序非良构。

@5@ 如果 {{c|std::is_copy_constructible_v&lt;E&gt;}} 是 {{c|false}}，那么程序非良构。

@6@ 如果 {{c|std::is_move_constructible_v&lt;E&gt;}} 是 {{c|false}}，那么程序非良构。

===返回值===
@1,2@ {{box|{{rlpi|/#数据成员|val}}}}

@3,4@ {{box|{{c/core|std::move(}}{{tti|val}}{{c/core|)}}}}

===异常===
@1,2,5@ 在 {{c|*this}} 包含非预期值时抛出 {{c|std::bad_expected_access(std::as_const(error()))}}。

@3,4,6@ 在 {{c|*this}} 包含非预期值时抛出 {{c|std::bad_expected_access(std::move(error()))}}。

===示例===
{{example}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3940|std=C++23|before=重载 {{v|5,6}} 不需要 {{tt|E}} 可复制/移动构造|after=需要}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/expected/dsc value_or}}
{{dsc inc|cpp/utility/expected/dsc operator*}}
{{dsc inc|cpp/utility/expected/dsc error}}
{{dsc inc|cpp/utility/expected/dsc bad_expected_access}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
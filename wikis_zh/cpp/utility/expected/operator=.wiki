{{cpp/utility/expected/title|1=operator=}}
{{cpp/utility/expected/navbar}}

{{dcl begin}}
{{dcl h|主模板}}
{{dcla|num=1|since=c++23|1=
constexpr expected&amp; operator=( const expected&amp; other );
}}
{{dcla|num=2|since=c++23|1=
constexpr expected&amp; operator=( expected&amp;&amp; other ) noexcept(/* 见下文 */);
}}
{{dcla|num=3|since=c++23|1=
template&lt; class U = std::remove_cv_t&lt;T&gt; &gt;
constexpr expected&amp; operator=( U&amp;&amp; v );
}}
{{dcla|num=4|since=c++23|1=
template&lt; class G &gt;
constexpr expected&amp; operator=( const std::unexpected&lt;G&gt;&amp; e );
}}
{{dcla|num=5|since=c++23|1=
template&lt; class G &gt;
constexpr expected&amp; operator=( std::unexpected&lt;G&gt;&amp;&amp; e );
}}
{{dcl h|{{c/core|void}} 部分特化}}
{{dcla|num=6|since=c++23|1=
constexpr expected&amp; operator=( const expected&amp; other );
}}
{{dcla|num=7|since=c++23|1=
constexpr expected&amp; operator=( expected&amp;&amp; other ) noexcept(/* 见下文 */);
}}
{{dcla|num=8|since=c++23|1=
template&lt; class G &gt;
constexpr expected&amp; operator=( const std::unexpected&lt;G&gt;&amp; e );
}}
{{dcla|num=9|since=c++23|1=
template&lt; class G &gt;
constexpr expected&amp; operator=( std::unexpected&lt;G&gt;&amp;&amp; e );
}}
{{dcl h|辅助函数模板}}
{{dcl|num=10|since=c++23|notes={{mark expos}}|
template&lt; class T, class U, class... Args &gt;
constexpr void reinit-expected( T&amp; newval, U&amp; oldval, Args&amp;&amp;... args )
}}
{{dcl end}}

为一个现存的 {{tt|expected}} 对象赋予新值。

===参数===
{{par begin}}
{{par|other|包含值要用来赋值的 {{tt|expected}} 对象}}
{{par|v|用来初始化包含值的值}}
{{par|e|包含值要用来赋值的 {{ltt std|cpp/utility/expected/unexpected}} 对象}}
{{par|newval|要构造的包含值}}
{{par|oldval|要销毁的包含值}}
{{par|args|用作 {{c|newval}} 的初始化器的实参}}
{{par end}}

===效果===
====主模板赋值运算符====
@1,2@ 将 {{c|other}} 的状态赋给 {{c|*this}}。
@@ 如果 {{rlpf|operator bool|has_value}} 与 {{c|rhs.has_value()}} 的值不同（即 {{c|*this}} 和 {{c|other}} 之一包含预期值 {{rlpi|/#数据成员|val}}，而另一个对象包含非预期值 {{rlpi|/#数据成员|unex}}），那么就会调用仅用于阐述的辅助函数模板 [[#辅助函数模板|{{tti|reinit-expected}}]] 来安全地更新状态。
:@1@ 按以下方式对包含值进行赋值：
{|class="wikitable"
!rowspan=2|{{nbsp}}{{rlpf|operator bool|has_value}} 的值{{nbsp}}
!colspan=2|{{c|other.has_value()}} 的值
|-
!style="font-weight: normal;"|{{c|true}}
!style="font-weight: normal;"|{{c|false}}
|-
|style="text-align: center;"|{{c|true}}
|{{box|{{tti|val}}{{nbspt}}{{c/core|1== *other;}}}}
|{{box|{{tti|reinit-expected}}&lt;br&gt;{{nbspt|4}}{{c/core|(}}{{tti|unex}}{{c/core|,}}{{nbspt}}{{tti|val}}{{c/core|, other.error());}}}}
|-
|style="text-align: center;"|{{c|false}}
|{{box|{{tti|reinit-expected}}&lt;br&gt;{{nbspt|4}}{{c/core|(}}{{tti|val}}{{c/core|,}}{{nbspt}}{{tti|unex}}{{c/core|, *other);}}}}
|{{box|{{tti|unex}}{{nbspt}}{{c/core|1== other.error();}}}}
|}
:@2@ 按以下方式对包含值进行赋值：
{|class="wikitable"
!rowspan=2|{{nbsp}}{{rlpf|operator bool|has_value}} 的值{{nbsp}}
!colspan=2|{{c|other.has_value()}} 的值
|-
!style="font-weight: normal;"|{{c|true}}
!style="font-weight: normal;"|{{c|false}}
|-
|style="text-align: center;"|{{c|true}}
|{{box|{{tti|val}}{{nbspt}}{{c/core|1== std::move(*other);}}}}
|{{box|{{tti|reinit-expected}}&lt;br&gt;{{nbspt|4}}{{c/core|(}}{{tti|unex}}{{c/core|,}}{{nbspt}}{{tti|val}}{{c/core|, std::move(other.error()));}}}}
|-
|style="text-align: center;"|{{c|false}}
|{{box|{{tti|reinit-expected}}&lt;br&gt;{{nbspt|4}}{{c/core|(}}{{tti|val}}{{c/core|,}}{{nbspt}}{{tti|unex}}{{c/core|,}}&lt;br&gt;{{nbspt|5}}{{c/core|std::move(*other));}}}}
|{{box|{{tti|unex}}{{nbspt}}{{c/core|1== std::move(other.error());}}}}
|}
@@ 然后，如果没有抛出异常，那么就会执行 {{box|{{rlpi|/#数据成员|has_val}}{{nbspt}}{{c/core|1== other.has_value();}}}}.

@3@ 按以下方式对预期值进行赋值：
{|class="wikitable"
!{{nbsp}}{{rlpf|operator bool|has_value}} 的值{{nbsp}}
!等价于
|-
|style="text-align: center;"|{{c|true}}
|{{box|{{tti|val}}{{nbspt}}{{c/core|1== std::forward&lt;U&gt;(v);}}}}
|-
|style="text-align: center;"|{{c|false}}
|{{box|{{tti|reinit-expected}}{{c/core|(}}{{tti|val}}{{c/core|,}}{{nbspt}}{{tti|unex}}{{c/core|, std::forward&lt;U&gt;(v));}}&lt;br&gt;{{tti|has_val}}{{nbspt}}{{c/core|1== false;}}}}
|}

@4,5@ 按以下方式对非预期值进行赋值：
{|class="wikitable"
!{{nbsp}}重载{{nbsp}}
!{{nbsp}}{{rlpf|operator bool|has_value}} 的值{{nbsp}}
!等价于
|-
|rowspan=2 style="text-align: center;"|{{vl|4}}
|style="text-align: center;"|{{c|true}}
|{{box|{{tti|reinit-expected}}{{c/core|(}}{{tti|val}}{{c/core|,}}{{nbspt}}{{tti|unex}}{{c/core|, std::forward&lt;const G&amp;&gt;(e.error()));}}&lt;br&gt;{{tti|has_val}}{{nbspt}}{{c/core|1== false;}}}}
|-
|style="text-align: center;"|{{c|false}}
|{{box|{{tti|unex}}{{nbspt}}{{c/core|1== std::forward&lt;const G&amp;&gt;(e.error());}}}}
|-
|rowspan=2 style="text-align: center;"|{{vl|5}}
|style="text-align: center;"|{{c|true}}
|{{box|{{tti|reinit-expected}}{{c/core|(}}{{tti|val}}{{c/core|,}}{{nbspt}}{{tti|unex}}{{c/core|, std::forward&lt;G&gt;(e.error()));}}&lt;br&gt;{{tti|has_val}}{{nbspt}}{{c/core|1== false;}}}}
|-
|style="text-align: center;"|{{c|false}}
|{{box|{{tti|unex}}{{nbspt}}{{c/core|1== std::forward&lt;G&gt;(e.error());}}}}
|}

===={{c/core|void}} 部分特化赋值运算符====
@6@ 按以下方式对非预期值进行赋值或销毁：
{|class="wikitable"
!rowspan=2|{{nbsp}}{{rlpf|operator bool|has_value}} 的值{{nbsp}}
!colspan=2|{{c|other.has_value()}} 的值
|-
!style="font-weight: normal;"|{{c|true}}
!style="font-weight: normal;"|{{c|false}}
|-
|style="text-align: center;"|{{c|true}}
|（没有效果）
|{{box|{{c/core|std::construct_at}}&lt;br&gt;{{nbspt|4}}{{c/core|(std::addressof(}}{{tti|unex}}{{c/core|), rhs.}}{{tti|unex}}{{c/core|);}}&lt;br&gt;{{tti|has_val}}{{nbspt}}{{c/core|1== false;}}}}
|-
|style="text-align: center;"|{{c|false}}
|{{box|{{c/core|std::destroy_at}}&lt;br&gt;{{nbspt|4}}{{c/core|(std::addressof(}}{{tti|unex}}{{c/core|));}}&lt;br&gt;{{tti|has_val}}{{nbspt}}{{c/core|1== true;}}}}
|{{box|{{tti|unex}}{{nbspt}}{{c/core|1== other.error();}}}}
|}

@7@ 按以下方式对非预期值进行赋值或销毁：
{|class="wikitable"
!rowspan=2|{{nbsp}}{{rlpf|operator bool|has_value}} 的值{{nbsp}}
!colspan=2|{{c|other.has_value()}} 的值
|-
!style="font-weight: normal;"|{{c|true}}
!style="font-weight: normal;"|{{c|false}}
|-
|style="text-align: center;"|{{c|true}}
|（没有效果）
|{{box|{{c/core|std::construct_at}}&lt;br&gt;{{nbspt|4}}{{c/core|(std::addressof(}}{{tti|unex}}{{c/core|),}}&lt;br&gt;{{nbspt|5}}{{c/core|std::move(rhs.}}{{tti|unex}}{{c/core|));}}&lt;br&gt;{{tti|has_val}}{{nbspt}}{{c/core|1== false;}}}}
|-
|style="text-align: center;"|{{c|false}}
|{{box|{{c/core|std::destroy_at(std::addressof(}}{{tti|unex}}{{c/core|));}}&lt;br&gt;{{tti|has_val}}{{nbspt}}{{c/core|1== true;}}}}
|{{box|{{tti|unex}}{{nbspt}}{{c/core|1== std::move(other.error());}}}}
|}

@8,9@ 按以下方式对非预期值进行赋值：
{|class="wikitable"
!{{nbsp}}重载{{nbsp}}
!{{nbsp}}{{rlpf|operator bool|has_value}} 的值{{nbsp}}
!等价于
|-
|rowspan=2 style="text-align: center;"|{{vl|8}}
|style="text-align: center;"|{{c|true}}
|{{box|{{c/core|std::construct_at(std::addressof(}}{{tti|unex}}{{c/core|),}}&lt;br&gt;{{nbspt|18}}{{c/core|std::forward&lt;const G&amp;&gt;(e.error()));}}&lt;br&gt;{{tti|has_val}}{{nbspt}}{{c/core|1== false;}}}}
|-
|style="text-align: center;"|{{c|false}}
|{{box|{{tti|unex}}{{nbspt}}{{c/core|1== std::forward&lt;const G&amp;&gt;(e.error());}}}}
|-
|rowspan=2 style="text-align: center;"|{{vl|9}}
|style="text-align: center;"|{{c|true}}
|{{box|{{c/core|std::construct_at(std::addressof(}}{{tti|unex}}{{c/core|), std::forward&lt;G&gt;(e.error()));}}&lt;br&gt;{{tti|has_val}}{{nbspt}}{{c/core|1== false;}}}}
|-
|style="text-align: center;"|{{c|false}}
|{{box|{{tti|unex}}{{nbspt}}{{c/core|1== std::forward&lt;G&gt;(e.error());}}}}
|}

====辅助函数模板====
仅用于阐述的函数模板 {{tti|reinit-expected}} “定义”如下：
{{source|1=
template&lt;class NewType, class OldType, class... Args&gt;
constexpr void reinit-expected(NewType&amp; new_val, OldType&amp; old_val, Args&amp;&amp;... args)
{
    // 情况 1：“new_val” 的构造不会抛出：
    // 在销毁 “old_val” 后可以直接构造 “new_val”
    if constexpr (std::is_nothrow_constructible_v&lt;NewType, Args...&gt;)
    {
        std::destroy_at(std::addressof(old_val));
        std::construct_at(std::addressof(new_val), std::forward&lt;Args&gt;(args)...);
    }
    // 情况 2：“new_val” 的移动构造不会抛出：
    // 先构造一个临时的 NewType 对象
    // （如果该构造抛出异常，那么 “old_val” 不会受到影响）
    else if constexpr (std::is_nothrow_move_constructible_v&lt;NewType&gt;)
    {
        NewType temp(std::forward&lt;Args&gt;(args)...); // 可能会抛出异常
        std::destroy_at(std::addressof(old_val));
        std::construct_at(std::addressof(new_val), std::move(temp));
    }
    // 情况 3：“new_val” 的构造可能会抛出：
    // 需要备份 “old_val” 以从异常中恢复
    else
    {
        OldType temp(std::move(old_val)); // 可能会抛出异常
        std::destroy_at(std::addressof(old_val));
        try
        {
            std::construct_at(std::addressof(new_val),
                              std::forward&lt;Args&gt;(args)...); // 可能会抛出异常
        }
        catch (...)
        {
            std::construct_at(std::addressof(old_val), std::move(temp));
            throw;
        }
    }
}
}}

当赋值会导致 {{c|*this}} 持有另一个预期种类的值时（即从持有预期值到持有非预期值，或从持有非预期值到持有预期值）时就会调用此函数模板。

此时在构造新值 {{c|newval}} 前需要先销毁旧值 {{c|oldval}}。然而构造 {{c|newval}} 可能会抛出异常。为提供[[cpp/language/exceptions#异常安全|强异常安全保证]]，在重抛异常前需要恢复旧值，这样在处理异常时 {{c|*this}} 就会具有有效状态。

===返回值===
@1-9@ {{c|*this}}

===约束和补充信息===
====主模板赋值运算符====
@1@ 此重载被定义为弃置，除非以下所有值都是 {{c|true}}：
* {{c|std::is_copy_assignable_v&lt;T&gt;}}
* {{c|std::is_copy_constructible_v&lt;T&gt;}}
* {{c|std::is_copy_assignable_v&lt;E&gt;}}
* {{c|std::is_copy_constructible_v&lt;E&gt;}}
* {{c|std::is_nothrow_move_constructible_v&lt;T&gt; {{!!}} std::is_nothrow_move_constructible_v&lt;E&gt;}}

@2@ {{cpp/enable if|以下所有值都是 {{c|true}} }}：
* {{c|std::is_move_assignable_v&lt;T&gt;}}
* {{c|std::is_move_constructible_v&lt;T&gt;}}
* {{c|std::is_move_assignable_v&lt;E&gt;}}
* {{c|std::is_move_constructible_v&lt;E&gt;}}
* {{c|std::is_nothrow_move_constructible_v&lt;T&gt; {{!!}} std::is_nothrow_move_constructible_v&lt;E&gt;}}

@3@ {{cpp/enable if|满足以下所有条件}}：
* {{c|std::is_same_v&lt;expected, std::remove_cvref_t&lt;U&gt;&gt;}} is {{c|false}}.
* {{c|std::remove_cvref_t&lt;U&gt;}} is not a specialization of {{tt|std::unexpected}}.
* All following values are {{c|true}}:
** {{c|std::is_constructible_v&lt;T, U&gt;}}
** {{c|std::is_assignable_v&lt;T&amp;, U&gt;}}
** {{c multi|std::is_nothrow_constructible_v&lt;T, U&gt; {{!!}} std::is_nothrow_move_constructible_v&lt;T&gt; {{!!}}|std::is_nothrow_move_constructible_v&lt;E&gt;}}

@4@ {{cpp/enable if|以下所有值都是 {{c|true}} }}：
* {{c|std::is_constructible_v&lt;E, const G&amp;&gt;}}
* {{c|std::is_assignable_v&lt;E&amp;, const G&amp;&gt;}}
* {{c multi|std::is_nothrow_constructible_v&lt;E, const G&amp;&gt; {{!!}} std::is_nothrow_move_constructible_v&lt;T&gt; {{!!}}|std::is_nothrow_move_constructible_v&lt;E&gt;}}

@5@ {{cpp/enable if|以下所有值都是 {{c|true}} }}：
* {{c|std::is_constructible_v&lt;E, G&gt;}}
* {{c|std::is_assignable_v&lt;E&amp;, G&gt;}}
* {{c multi|std::is_nothrow_constructible_v&lt;E, G&gt; {{!!}} std::is_nothrow_move_constructible_v&lt;T&gt; {{!!}}|std::is_nothrow_move_constructible_v&lt;E&gt;}}

===={{c/core|void}} 部分特化赋值运算符====
@6@ 此重载被定义为弃置，除非 {{c|std::is_copy_assignable_v&lt;E&gt;}} 和 {{c|std::is_copy_constructible_v&lt;E&gt;}} 都是 {{c|true}}。

@7@ {{cpp/enable if| {{c|std::is_move_constructible_v&lt;E&gt;}} 和 {{c|std::is_move_assignable_v&lt;E&gt;}} 都是 {{c|true}} }}。

@8@ {{cpp/enable if| {{c|std::is_constructible_v&lt;E, const G&amp;&gt;}} 和 {{c|std::is_assignable_v&lt;E&amp;, const G&amp;&gt;}} 都是 {{c|true}} }}。

@9@ {{cpp/enable if| {{c|std::is_constructible_v&lt;E, G&gt;}} 和 {{c|std::is_assignable_v&lt;E&amp;, G&gt;}} 都是 {{c|true}} }}。

===异常===
@2@ {{noexcept|
    std::is_nothrow_move_constructible_v&lt;T&gt; &amp;&amp; std::is_nothrow_move_assignable_v&lt;T&gt; &amp;&amp;
    std::is_nothrow_move_constructible_v&lt;E&gt; &amp;&amp; std::is_nothrow_move_assignable_v&lt;E&gt;}}

@7@ {{noexcept|std::is_nothrow_move_constructible_v&lt;E&gt; &amp;&amp; std::is_nothrow_move_assignable_v&lt;E&gt;}}

===示例===
{{example}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3886|std=C++23|before=重载 {{vl|3}} 的默认模板实参是 {{tt|T}}|after=改成 {{c/core|std::remove_cv_t&lt;T&gt;}}}}
{{dr list item|wg=lwg|dr=4025|std=C++23|before=在 {{tt|E}} 不可移动构造或移动赋值时重载 {{v|7}} 会被定义为弃置|after=此时该重载不会参与重载决议}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/expected/dsc emplace}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|en}}
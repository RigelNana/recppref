{{cpp/utility/source_location/title|function_name}}
{{cpp/utility/source_location/navbar}}
{{ddcl | since=c++20 |
constexpr const char* function_name() const noexcept;
}}

返回与此对象所表示的位置关联的函数名，若存在。

===参数===
（无）

===返回值===
若此对象表示函数体内的位置，则返回对应于函数的名字的由实现定义的空终止字节字符串。

否则，返回空字符串。

===示例===
{{example
 | 以下示例展示能如何用 {{tt|std::source_location::function_name()}} 打印函数、构造函数、析构函数或重载的 {{tt|operator()}} 的名字。
 | code=
#include &lt;cstdio&gt;
#include &lt;utility&gt;
#include &lt;source_location&gt;

inline void print_function_name(
    const std::source_location&amp; location = std::source_location::current())
{
    std::puts(location.function_name()); // 打印调用方的名字
}

void foo(double &amp;&amp;) { print_function_name(); }

namespace bar { void baz() { print_function_name(); } }

template &lt;typename T&gt; auto pub(T) { print_function_name(); return 42; }

struct S {
    S() { print_function_name(); }
    S(int) { print_function_name(); }
    ~S() { print_function_name(); }
    S&amp; operator=(S const&amp;) { print_function_name(); return *this; }
    S&amp; operator=(S&amp;&amp;) { print_function_name(); return *this; }
};

int main(int, char const* const[])
{
    print_function_name();
    foo(3.14);
    bar::baz();
    pub(0xFULL);
    S p;
    S q{42};
    p = q;
    p = std::move(q);
    [] { print_function_name(); }();
}
| p=true | output= &lt;!-- https://godbolt.org/z/PesG3K --&gt;
int main(int, const char* const*)
void foo(double&amp;&amp;)
void bar::baz()
auto pub(T) [with T = long long unsigned int]
S::S()
S::S(int)
S&amp; S::operator=(const S&amp;)
S&amp; S::operator=(S&amp;&amp;)
main(int, const char* const*)::&lt;lambda()&gt;
S::~S()
S::~S()
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/utility/source_location/dsc line}}
{{dsc inc | cpp/utility/source_location/dsc column}}
{{dsc inc | cpp/utility/source_location/dsc file_name}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
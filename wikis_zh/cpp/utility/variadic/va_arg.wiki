{{ctitle|va_arg}}
{{cpp/utility/variadic/navbar}}
{{ddcl|header=cstdarg|
T va_arg( std::va_list ap, T );
}}

{{tt|va_arg}} 宏展开成对应于 {{lc|va_list}} {{c|ap}} 的下个参数的 {{tt|T}} 类型的表达式。

在调用 {{tt|va_arg}} 前，{{c|ap}} 必须用对 {{lc|va_start}} 或 {{lc|va_copy}} 的调用初始化，中间不能夹带 {{lc|va_end}} 的调用。{{tt|va_arg}} 宏的每次调用都修改 {{c|ap}}，令它指向下个可变实参。

若 {{c|ap}} 中的下个实参的类型（提升后）与 {{c|T}} 不{{lt|c/language/type#兼容类型|兼容}}，则行为未定义，除非：

* 一个类型是有符号整数类型，而另一类型是无符号整数类型，且其值能用两个类型表示；或
* 一个类型是指向 {{c/core|void}} 的指针，而另一类型是指向字符类型（{{c/core|char}}、{{c/core|signed char}} 或 {{c/core|unsigned char}}）的指针。

若在 {{c|ap}} 中没有更多实参时调用 {{tt|va_arg}}，则行为未定义。

===参数===
{{par begin}}
{{par|ap|{{lc|va_list}} 类型的实例}}
{{par|T|{{c|ap}} 中下个参数的类型}}
{{par end}}

===展开值===
{{c|ap}} 中的下个可变参数

===示例===
{{example
|code=
#include &lt;cstdarg&gt;
#include &lt;cstdio&gt;
#include &lt;iostream&gt;

void print_variance(std::size_t count, const char* fmt, ...)
{
    double sum = 0;
    double sum_sq = 0;
    std::va_list args;
    va_start(args, fmt);
    for (std::size_t i = count; i--;)
    {
        double num = va_arg(args, double);
        sum += num;
        sum_sq += num*num;
    }
    va_end(args);
    std::printf(fmt, sum_sq / count - (sum / count) * (sum / count));
}

void nano_printf(const char* fmt, ...)
{
    std::va_list args;
    va_start(args, fmt);

    for (const char* p = fmt; *p != '\0'; ++p)
    {
        switch (*p)
        {
        case '%':
            switch (*++p) // 读取格式符号
            {
                case 'i':
                    std::cout &lt;&lt; va_arg(args, int);
                    continue;
                case 'f':
                    std::cout &lt;&lt; va_arg(args, double);
                    continue;
                case 's':
                    std::cout &lt;&lt; va_arg(args, const char*);
                    continue;
                case 'c':
                    std::cout &lt;&lt; static_cast&lt;char&gt;(va_arg(args, int));
                    continue;
                case '%':
                    std::cout &lt;&lt; '%';
                    continue;
                /* ...更多情况... */
            }
            break; // 格式错误...
        case '\n':
            std::cout &lt;&lt; '\n';
            continue;
        case '\t':
            std::cout &lt;&lt; '\t';
            continue;
        /* ...更多情况... */
        }
        std::cout &lt;&lt; *p;
    }

    va_end(args);
}

int main()
{
    print_variance(4, "%f\n", 25.0, 27.3, 26.9, 25.7);
    nano_printf("Args: %i%% %c%f %s\n", 42, '#', 3.14, "C++");
}
|output=
0.846875
Args: 42% #3.14 C++
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/variadic/dsc va_start}}
{{dsc inc|cpp/utility/variadic/dsc va_copy}}
{{dsc inc|cpp/utility/variadic/dsc va_end}}
{{dsc see c|c/variadic/va_arg|va_arg}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
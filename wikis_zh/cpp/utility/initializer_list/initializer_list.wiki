{{cpp/utility/initializer_list/title|initializer_list}}
{{cpp/utility/initializer_list/navbar}}
{{ddcla|since=c++11|constexpr=c++14|
initializer_list() noexcept;
}}

构造空的初始化器列表。

===参数===
（无）

===复杂度===
常数

===注解===
尽管缺少构造函数，创建非空初始化器列表仍是可能的。以下情况会隐式构造 {{tt|std::initializer_list}} 实例：
* ''花括号初始化列表''{{sep}}用于[[cpp/language/list_initialization|列表初始化]]时，包括函数调用列表初始化和赋值表达式（勿与[[cpp/language/initializer_list|构造函数初始化器列表]]相混淆）
* ''花括号初始化列表''{{sep}}被绑定到 {{c/core|auto}} 时，包括在[[cpp/language/range-for|范围 for 循环]]中

===示例===
{{example
|
|code=
#include &lt;initializer_list&gt;
#include &lt;iostream&gt;

int main() 
{
    std::initializer_list&lt;int&gt; empty_list;
    std::cout &lt;&lt; "empty_list.size(): " &lt;&lt; empty_list.size() &lt;&lt; '\n';

    // 用列表初始化创建初始化器列表
    std::initializer_list&lt;int&gt; digits{1, 2, 3, 4, 5};
    std::cout &lt;&lt; "digits.size(): " &lt;&lt; digits.size() &lt;&lt; '\n';

    // auto 的特殊规则表示‘fraction’类型为 std::initializer_list&lt;double&gt;
    auto fractions = {3.14159, 2.71828};
    std::cout &lt;&lt; "fractions.size(): " &lt;&lt; fractions.size() &lt;&lt; '\n';

    // 创建 constexpr 的初始化器列表（C++14 起）
    static constexpr auto ab = {'a', 'b'};
    static_assert(ab.size() == 2 and *ab.begin() == 'a');
}
|output=
empty_list.size(): 0
digits.size(): 5
fractions.size(): 2
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
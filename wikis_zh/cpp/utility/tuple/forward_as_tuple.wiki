{{cpp/title|forward_as_tuple}}
{{cpp/utility/tuple/navbar}}
{{ddcla|header=tuple|since=c++11|constexpr=c++14|
template&lt; class... Types &gt;
std::tuple&lt;Types&amp;&amp;...&gt; forward_as_tuple( Types&amp;&amp;... args ) noexcept;
}}

构造到 {{c|args}} 中的各实参的引用的元组，适于作为实参转发给函数。该元组在以右值为实参时拥有右值引用数据成员，否则拥有左值引用数据成员。

===参数===
{{par begin}}
{{par|args|为之构造元组的零或更多实参}}
{{par end}}

===返回值===
如同以 {{c|std::tuple&lt;Types&amp;&amp;...&gt;(std::forward&lt;Types&gt;(args)...)}} 创建的 {{lc|std::tuple}} 对象。

===注解===
若实参是临时量，则 {{tt|forward_as_tuple}} 不延续其生存期；必须在完整表达式结尾前使用它们。

===示例===
{{example|
|code=
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;string&gt;
#include &lt;tuple&gt;

int main()
{
    std::map&lt;int, std::string&gt; m;

    m.emplace(std::piecewise_construct,
              std::forward_as_tuple(6),
              std::forward_as_tuple(9, 'g'));
    std::cout &lt;&lt; "m[6] = " &lt;&lt; m[6] &lt;&lt; '\n';

    // 下面是错误：它产生保有两个悬垂引用的 std::tuple&lt;int&amp;&amp;, char&amp;&amp;&gt;
    //
    // auto t = std::forward_as_tuple(20, 'a');
    // m.emplace(std::piecewise_construct, std::forward_as_tuple(10), t);
}
|output=
m[6] = ggggggggg
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/tuple/dsc make_tuple}}
{{dsc inc|cpp/utility/tuple/dsc tie}}
{{dsc inc|cpp/utility/tuple/dsc tuple_cat}}
{{dsc inc|cpp/utility/dsc apply}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
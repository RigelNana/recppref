{{cpp/utility/tuple/title|operator{{=}}}}
{{cpp/utility/tuple/navbar}}
{{dcl begin}}
{{dcla|num=1|since=c++11|constexpr=c++20|1=
tuple&amp; operator=( const tuple&amp; other );
}}
{{dcl|num=2|since=c++23|1=
constexpr const tuple&amp; operator=( const tuple&amp; other ) const;
}}
{{dcla|num=3|since=c++11|constexpr=c++20|1=
tuple&amp; operator=( tuple&amp;&amp; other ) noexcept(/* 见下文 */);
}}
{{dcl|num=4|since=c++23|1=
constexpr const tuple&amp; operator=( tuple&amp;&amp; other ) const;
}}
{{dcla|num=5|since=c++11|constexpr=c++20|1=
template&lt; class... UTypes &gt;
tuple&amp; operator=( const tuple&lt;UTypes...&gt;&amp; other );
}}
{{dcl|num=6|since=c++23|1=
template&lt; class... UTypes &gt;
constexpr const tuple&amp; operator=( const tuple&lt;UTypes...&gt;&amp; other ) const;
}}
{{dcla|num=7|since=c++11|constexpr=c++20|1=
template&lt; class... UTypes &gt;
tuple&amp; operator=( tuple&lt;UTypes...&gt;&amp;&amp; other );
}}
{{dcl|num=8|since=c++23|1=
template&lt; class... UTypes &gt;
constexpr const tuple&amp; operator=( tuple&lt;UTypes...&gt;&amp;&amp; other ) const;
}}
{{dcla|num=9|since=c++11|constexpr=c++20|1=
template&lt; class E1, class E2 &gt;
tuple&amp; operator=( const std::pair&lt;E1, E2&gt;&amp; p );
}}
{{dcl|num=10|since=c++23|1=
template&lt; class E1, class E2 &gt;
constexpr const tuple&amp; operator=( const std::pair&lt;E1, E2&gt;&amp; p ) const;
}}
{{dcla|num=11|since=c++11|constexpr=c++20|1=
template&lt; class E1, class E2 &gt;
tuple&amp; operator=( std::pair&lt;E1, E2&gt;&amp;&amp; p );
}}
{{dcl|num=12|since=c++23|1=
template&lt; class E1, class E2 &gt;
constexpr const tuple&amp; operator=( std::pair&lt;E1, E2&gt;&amp;&amp; p ) const;
}}
{{dcl|num=13|since=c++23|1=
template&lt; tuple-like UTuple &gt;
constexpr tuple&amp; operator=( UTuple&amp;&amp; u );
}}
{{dcl|num=14|since=c++23|1=
template&lt; tuple-like UTuple &gt;
constexpr const tuple&amp; operator=( UTuple&amp;&amp; u ) const;
}}
{{dcl end}}

以另一元组式对象的内容替换此元组的内容。

在以下描述中，令
* {{c|i}} 在范围 {{range|​0​|sizeof...(Types)}} 中依序取值，
* {{tt|Ti}} 为类模板形参包 {{tt|Types}} 中的第 {{c|i}} 个类型，以及
* {{tt|Ui}} 为名字是 {{tt|UTypes}} 的函数模板形参包中的第 {{c|i}} 个类型，
其中索引基于零。

@1@ 复制赋值运算符。赋值 {{c|other}} 的每个元素给 {{c|*this}} 的对应元素。
@@ 定义此重载为弃置，除非 {{c|std::is_copy_assignable&lt;T_i&gt;::value}} 对所有 {{tt|Ti}} 都是 {{c|true}}。

@2@ 针对 const 限定操作数的复制赋值运算符。赋值 {{c|other}} 的每个元素给 {{c|*this}} 的对应元素。
@@ {{cpp/enable if| {{c|std::is_copy_assignable_v&lt;const Ti&gt;}} 对所有 {{tt|Ti}} 都是 {{c|true}} }}。
 
@3@ 移动赋值运算符。对所有 {{c|i}}，将 {{c|std::forward&lt;Ti&gt;(std::get&lt;i&gt;(other))}} 赋给 {{c|std::get&lt;i&gt;(*this)}}。
@@ {{cpp/enable if| {{c|std::is_move_assignable&lt;Ti&gt;::value}} 对所有 {{tt|Ti}} 都是 {{c|true}} }}。
 
@4@ 针对 const 限定操作数的移动赋值运算符。对所有 {{c|i}}，将 {{c|std::forward&lt;Ti&gt;(std::get&lt;i&gt;(other))}} 赋给 {{c|std::get&lt;i&gt;(*this)}}。
@@ {{cpp/enable if| {{c|std::is_assignable_v&lt;const Ti&amp;, Ti&gt;}} 对所有 {{tt|Ti}} 都是 {{c|true}} }}。

@5@ 对所有 {{c|i}}，将 {{c|std::get&lt;i&gt;(other)}} 赋给 {{c|std::get&lt;i&gt;(*this)}}。
@@ {{cpp/enable if| {{c|1=sizeof...(Types) == sizeof...(UTypes)}}，并且 {{c|std::is_assignable&lt;Ti&amp;, const Ui&amp;&gt;::value}} 对所有 {{tt|Ti}} 和对应的 {{tt|Ui}} 都是 {{c|true}} }}。

@6@ 对所有 {{c|i}}，将 {{c|std::get&lt;i&gt;(other)}} 赋给 {{c|std::get&lt;i&gt;(*this)}}。
@@ {{cpp/enable if| {{c|1=sizeof...(Types) == sizeof...(UTypes)}}，并且 {{c|std::is_assignable_v&lt;const Ti&amp;, const Ui&amp;&gt;}} 对所有 {{tt|Ti}} 和对应的 {{tt|Ui}} 都是 {{c|true}} }}。

@7@ 对所有 {{c|i}}，将 {{c|std::forward&lt;Ui&gt;(std::get&lt;i&gt;(other))}} 赋给 {{c|std::get&lt;i&gt;(*this)}}。
@@ {{cpp/enable if| {{c|1=sizeof...(Types) == sizeof...(UTypes)}}，并且 {{c|std::is_assignable&lt;Ti&amp;, Ui&gt;::value}} 对所有 {{tt|Ti}} 和对应的 {{tt|Ui}} 都是 {{c|true}} }}。

@8@ 对所有 {{c|i}}，将 {{c|std::forward&lt;Ui&gt;(std::get&lt;i&gt;(other))}} 赋给 {{c|std::get&lt;i&gt;(*this)}}。
@@ {{cpp/enable if| {{c|1=sizeof...(Types) == sizeof...(UTypes)}}，并且 {{c|std::is_assignable_v&lt;const Ti&amp;, Ui&gt;}} 对所有 {{tt|Ti}} 和对应的 {{tt|Ui}} 都是 {{c|true}} }}。

@9@ 将 {{c|p.first}} 赋给 {{c|*this}} 的首元素，并将 {{c|p.second}} 赋给 {{c|*this}} 的第二元素。
@@ {{cpp/enable if|
* {{c|1=sizeof...(Types) == 2}}，
* {{c|std::is_assignable&lt;T0&amp;, const E1&amp;&gt;::value}} 是 {{c|true}}，并且
* {{c|std::is_assignable&lt;T1&amp;, const E2&amp;&gt;::value}} 是 {{c|true}}
}}。

@10@ 将 {{c|p.first}} 赋给首元素，并将 {{c|p.second}} 赋给第二元素。
@@ {{cpp/enable if|
* {{c|1=sizeof...(Types) == 2}}，
* {{c|std::is_assignable_v&lt;const T0&amp;, const E1&amp;&gt;}} 是 {{c|true}}，并且
* {{c|std::is_assignable_v&lt;const T1&amp;, const E2&amp;&gt;}} 是 {{c|true}}
}}。

@11@ 将 {{c|std::forward&lt;E1&gt;(p.first)}} 赋给 {{c|*this}} 的首元素，并将 {{c|std::forward&lt;E2&gt;(p.second)}} 赋给 {{c|*this}} 的第二元素。
@@ {{cpp/enable if|
* {{c|1=sizeof...(Types) == 2}}，
* {{c|std::is_assignable_v&lt;T0&amp;, E1&gt;}} 是 {{c|true}}，并且
* {{c|std::is_assignable_v&lt;T1&amp;, E2&gt;}} 是 {{c|true}}
}}。

@12@ 将 {{c|std::forward&lt;E1&gt;(p.first)}} 赋给首元素，并将 {{c|std::forward&lt;E2&gt;(p.second)}} 赋给第二元素。
@@ {{cpp/enable if|
* {{c|1=sizeof...(Types) == 2}}，
* {{c|std::is_assignable_v&lt;const T0&amp;, E1&gt;}} 是 {{c|true}}，并且
* {{c|std::is_assignable_v&lt;const T1&amp;, E2&gt;}} 是 {{c|true}}
}}。

@13@ 对所有 {{c|i}}，将 {{c|std::get&lt;i&gt;(std::forward&lt;UTuple&gt;(u))}} 赋给 {{c|std::get&lt;i&gt;(*this)}}。
@@ {{cpp/enable if|
* {{c|std::same_as&lt;std::remove_cvref_t&lt;UTuple&gt;, std::tuple&gt;}} 是 {{c|false}}，
* {{c/core|std::remove_cvref_t&lt;UTuple&gt;}} 不是 {{l2tt std|cpp/ranges/subrange}} 的特化，
* {{c|sizeof...(Types)}} 等于 {{c|std::tuple_size_v&lt;std::remove_cvref_t&lt;UTuple&gt;&gt;}}，并且
* {{c|std::is_assignable_v&lt;Ti&amp;, decltype(std::get&lt;i&gt;(std::forward&lt;UTuple&gt;(u)))&gt;}} 对所有 {{c|i}} 都是 {{c|true}}
}}。

@14@ 对所有 {{c|i}}，将 {{c|std::get&lt;i&gt;(std::forward&lt;UTuple&gt;(u))}} 赋给 {{c|std::get&lt;i&gt;(*this)}}。
@@ {{cpp/enable if|
* {{c|std::same_as&lt;std::remove_cvref_t&lt;UTuple&gt;, std::tuple&gt;}} 是 {{c|false}}，
* {{c/core|std::remove_cvref_t&lt;UTuple&gt;}} 不是 {{l2tt std|cpp/ranges/subrange}} 的特化，
* {{c|sizeof...(Types)}} 等于 {{c|std::tuple_size_v&lt;std::remove_cvref_t&lt;UTuple&gt;&gt;}}，并且
* {{c|std::is_assignable_v&lt;const Ti&amp;, decltype(std::get&lt;i&gt;(std::forward&lt;UTuple&gt;(u)))&gt;}} 对所有 {{c|i}} 都是 {{c|true}}
}}。

===参数===
{{par begin}}
{{par|other|要替换此元组内容的元组}}
{{par|p|要替换此 2-元组内容的对偶}}
{{par|u|要替换此元组内容的 {{rlpi|tuple-like}} 对象}}
{{par end}} 

===返回值===
{{c|*this}}

===异常===
@1,2@ {{cpp/impldef exception item|if={{nbsp}}{{tt|Types}} 中的类型赋值抛出异常}}

@3@ {{noexcept|
    std::is_nothrow_move_assignable&lt;T0&gt;::value &amp;&amp;
    std::is_nothrow_move_assignable&lt;T1&gt;::value &amp;&amp;
    std::is_nothrow_move_assignable&lt;T2&gt;::value &amp;&amp;
    ...
}}

@4-14@ {{cpp/impldef exception item|if={{nbsp}}{{tt|Types}} 中的类型赋值抛出异常}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;
#include &lt;tuple&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;

// 打印 std::vector&lt;int&gt; 的辅助函数
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, std::vector&lt;int&gt; const&amp; v)
{
    os &lt;&lt; '{';
    for (std::size_t t = 0; t != v.size(); ++t)
        os &lt;&lt; v[t] &lt;&lt; (t + 1 &lt; v.size() ? ", " : "");
    return os &lt;&lt; '}';
}

// 打印任意元组的辅助函数
template&lt;class... Args&gt;
void print_tuple(std::string_view name, const std::tuple&lt;Args...&gt;&amp; t)
{
    std::cout &lt;&lt; name &lt;&lt; " = {";
    std::apply([&amp;](auto&amp;&amp; arg, auto&amp;&amp;... args)
    {
        std::cout &lt;&lt; arg;
        ((std::cout &lt;&lt; ", " &lt;&lt; args), ...);
    }, t);
    std::cout &lt;&lt; '}';
}

template&lt;class Tuple1, class Tuple2&gt;
void print_tuples(std::string_view name1, const Tuple1&amp; t1,
                  std::string_view name2, const Tuple2&amp; t2)
{
    print_tuple(name1, t1);
    std::cout &lt;&lt; ", ";
    print_tuple(name2, std::tuple(t2));
    std::cout &lt;&lt; "\n\n";
}

int main()
{
    // 元组向元组赋值的示例 //
    std::tuple&lt;int, std::string, std::vector&lt;int&gt;&gt;
        t1{1, "alpha", {1, 2, 3}&lt;!----&gt;},
        t2{2, "beta", {4, 5}&lt;!----&gt;};
    print_tuples("1) t1", t1, "t2", t2);
    
    // 普通复制赋值
    // operator=( const tuple&amp; other );
    t1 = t2;
    print_tuples("2) t1 = t2;\n   t1", t1, "t2", t2);
    
    // 普通移动赋值
    // operator=( tuple&amp;&amp; other );
    t1 = std::move(t2);
    print_tuples("3) t1 = std::move(t2);\n   t1", t1, "t2", t2);
    
    // 转换复制赋值
    // operator=( const tuple&lt;UTypes...&gt;&amp; other );
    std::tuple&lt;short, const char*, std::vector&lt;int&gt;&gt; t3{3, "gamma", {6, 7, 8}&lt;!----&gt;};
    t1 = t3;
    print_tuples("4) t1 = t3;\n   t1", t1, "t3", t3);
    
    // 转换移动赋值
    // operator=( tuple&lt;UTypes...&gt;&amp;&amp; other );
    t1 = std::move(t3);
    print_tuples("5) t1 = std::move(t3);\n   t1", t1, "t3", t3);
    
    // 对偶向元组赋值的示例 //
    std::tuple&lt;std::string, std::vector&lt;int&gt;&gt; t4{"delta", {10, 11, 12}&lt;!----&gt;};
    std::pair&lt;const char*, std::vector&lt;int&gt;&gt; p1{"epsilon", {14, 15, 16}&lt;!----&gt;};
    print_tuples("6) t4", t4, "p1", p1);
    
    // 从 std::pair 进行转换复制赋值
    // operator=( const std::pair&lt;U1, U2&gt;&amp; p );
    t4 = p1;
    print_tuples("7) t4 = p1;\n   t4", t4, "p1", p1);
    
    // 从 std::pair 进行转换移动赋值
    // operator=( std::pair&lt;U1, U2&gt;&amp;&amp; p );
    t4 = std::move(p1);
    print_tuples("8) t4 = std::move(p1);\n   t4", t4, "p1", p1);
}
|p=true
|output=
1) t1 = {1, alpha, {1, 2, 3}&lt;!----&gt;}, t2 = {2, beta, {4, 5}&lt;!----&gt;}

2) t1 = t2;
   t1 = {2, beta, {4, 5}&lt;!----&gt;}, t2 = {2, beta, {4, 5}&lt;!----&gt;}

3) t1 = std::move(t2);
   t1 = {2, beta, {4, 5}&lt;!----&gt;}, t2 = {2, , {}&lt;!----&gt;}

4) t1 = t3;
   t1 = {3, gamma, {6, 7, 8}&lt;!----&gt;}, t3 = {3, gamma, {6, 7, 8}&lt;!----&gt;}

5) t1 = std::move(t3);
   t1 = {3, gamma, {6, 7, 8}&lt;!----&gt;}, t3 = {3, gamma, {}&lt;!----&gt;}

6) t4 = {delta, {10, 11, 12}&lt;!----&gt;}, p1 = {epsilon, {14, 15, 16}&lt;!----&gt;}

7) t4 = p1;
   t4 = {epsilon, {14, 15, 16}&lt;!----&gt;}, p1 = {epsilon, {14, 15, 16}&lt;!----&gt;}

8) t4 = std::move(p1);
   t4 = {epsilon, {14, 15, 16}&lt;!----&gt;}, p1 = {epsilon, {}&lt;!----&gt;}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2729|std=C++11|before={{c/core|1=operator=}} 未被约束并可能导致不必要的未定义行为|after=已约束}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/tuple/dsc constructor}}
{{dsc inc|cpp/utility/pair/dsc operator{{=}}}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
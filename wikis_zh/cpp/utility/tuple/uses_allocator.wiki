{{cpp/title|uses_allocator&lt;small&gt;&lt;std::tuple&gt;&lt;/small&gt;}}
{{cpp/utility/tuple/navbar}}
{{dcl begin}}
{{dcl header | tuple}}
{{dcl | since=c++11 |
template&lt; class... Types, class Alloc &gt;
struct uses_allocator&lt; std::tuple&lt;Types...&gt;, Alloc &gt; : std::true_type { };
}}
{{dcl end}}

此 {{lc|std::uses_allocator}} 的特化告诉其他库组件，元组支持''使用分配器构造''，即使它们无嵌套的 {{tt|allocator_type}}。

{{cpp/types/integral_constant/inherit2 |{{c|true}}|bool}}

===示例===
{{source|1=
// myalloc 是带接收 int 的单实参构造函数的有状态分配器。
// 它没有默认构造函数。

    using innervector_t = std::vector&lt;int, myalloc&lt;int&gt;&gt;;
    using elem_t = std::tuple&lt;int, innervector_t&gt;;
    using Alloc = std::scoped_allocator_adaptor&lt; myalloc&lt;elem_t&gt;, myalloc&lt;int&gt;&gt;;

    Alloc a(1,2);
    std::vector&lt;elem_t, Alloc&gt; v(a);
    v.resize(1);                  // 对 v 的元素用分配器 #1
    std::get&lt;1&gt;(v[0]).resize(10); // 对 innervector_t 用分配器 #2 
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/memory/dsc uses_allocator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
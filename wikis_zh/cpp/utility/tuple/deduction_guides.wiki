{{title|{{tt|std::tuple}} 的推导指引}}
{{cpp/utility/tuple/navbar}}
{{dcl begin}}
{{dcl header|tuple}}
{{dcl | num=1 | since=c++17 |
template&lt;class... UTypes&gt;
tuple(UTypes...) -&gt; tuple&lt;UTypes...&gt;;
}}
{{dcl | num=2 | since=c++17 |
template&lt;class T1, class T2&gt;
tuple(std::pair&lt;T1, T2&gt;) -&gt; tuple&lt;T1, T2&gt;;
}}
{{dcl | num=3 | since=c++17 |
template&lt;class Alloc, class... UTypes&gt;
tuple(std::allocator_arg_t, Alloc, UTypes...) -&gt; tuple&lt;UTypes...&gt;;
}}
{{dcl | num=4 | since=c++17 |
template&lt;class Alloc, class T1, class T2&gt;
tuple(std::allocator_arg_t, Alloc, std::pair&lt;T1, T2&gt;) -&gt; tuple&lt;T1, T2&gt;;
}}
{{dcl | num=5 | since=c++17 |
template&lt;class Alloc, class... UTypes&gt;
tuple(std::allocator_arg_t, Alloc, tuple&lt;UTypes...&gt;) -&gt; tuple&lt;UTypes...&gt;;
}}
{{dcl end}}

为 {{lc|std::tuple}} 提供这些[[cpp/language/class_template_argument_deduction|推导指引]]，以涵盖隐式推导指引缺失的边界情况，特别是不可复制的实参和数组到指针转换。
 
===示例===
{{example|code=
#include &lt;tuple&gt;
int main()
{
    int a[2], b[3], c[4];
    std::tuple t1{a, b, c}; // 用于此场合的显式推导指引
}
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/utility/format/basic_format_arg/title|handle}}
{{cpp/utility/format/navbar}}

{{ddcl|header=format|since=c++20|
template&lt; class Context &gt;
class basic_format_arg&lt;Context&gt;::handle;
}}

允许对用户定义类型的对象进行格式化的类型擦除包装器。

{{tt|handle}} 对象常由 {{lc|std::make_format_args}} 创建并通过 {{lc|std::visit_format_arg}}{{rev inl|since=c++26| 或 {{lc|std::basic_format_arg}} 的 {{tt|visit}} 成员函数}}访问。

===数据成员===
{{tt|handle}} 的典型实现为{{named req|TriviallyCopyable}}并仅存储两个非静态数据成员：
* 指向待格式化对象的 {{c|const void*}} 指针，以及
* 指向进行 {{tt|format}} 成员函数（见后述）所需操作的函数的 {{c|void (*)(std::basic_format_parse_context&lt;Context::char_type&gt;&amp;, Context&amp;, const void*)}} 函数指针。

===成员函数===
{{dsc begin}}
{{dsc mem fun|format|nolink=true|notes={{mark c++20}}|以给定的上下文格式化被引用的对象}}
{{dsc end}}

{{member|{{small|std::basic_format_arg&lt;Context&gt;::handle::}}format|2=
{{ddcl|since=c++20|
void format( std::basic_format_parse_context&lt;Context::char_type&gt;&amp; parse_ctx,
             Context&amp; format_ctx ) const;
}}
令
* {{tt|T}} 为格式化参数的类型，
* {{tt|TD}} 为 {{c|std::remove_const_t&lt;T&gt;}}，
* {{tt|TQ}} 若 {{c|const TD}} 满足 {{lti|cpp/utility/format/formattable|__formattable_with}}{{c/core|&lt;Context&gt;}} 则为 {{c|const TD}}，否则为 {{tt|TD}}，而
* {{tt|ref}} 为到格式化参数的引用。

等价于：
{{cc|
typename Context::template formatter_type&lt;TD&gt; f;
parse_ctx.advance_to(f.parse(parse_ctx));
format_ctx.advance_to(f.format(const_cast&lt;TQ&amp;&gt;(static_cast&lt;const TD&amp;&gt;(ref)), format_ctx));
}}
}}

===注解===
{{tt|handle}} 拥有对格式化参数的引用语义而不延长其生存期。程序员负责确保该参数存活得比 {{tt|handle}} 更久。通常 {{tt|handle}} 仅在格式化函数内使用。

===参阅===
{{dsc begin}}
{{dsc inc | cpp/utility/format/dsc basic_format_arg}}
{{dsc inc | cpp/utility/format/dsc make_format_args}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|basic_format_parse_context}}
{{cpp/utility/format/navbar}}

{{dcl begin}}
{{dcl header|format}}
{{dcl|since=c++20|
template&lt; class CharT &gt;
class basic_format_parse_context;
}}
{{dcl end}}

提供到格式字符串分析状态的访问，该状态由正在分析的格式字符串范围和自动索引的参数计数组成。

分析格式说明时，会传递一个 {{tt|basic_format_parse_context}} 实例给{{named req|Formatter}}。

声明 {{tt|std::basic_format_parse_context}} 的显式或部分特化的程序非良构，无须诊断。

{{cpp/basic char typedefs|format_parse_context|format}}

===成员类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc|{{tt|iterator}}|{{c/core|std::basic_string_view&lt;CharT&gt;::const_iterator}}}}
{{dsc|{{tt|const_iterator}}|{{c/core|std::basic_string_view&lt;CharT&gt;::const_iterator}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|nolink=true|从格式字符串和参数计数构造 {{tt|std::basic_format_parse_context}}}}
{{dsc mem fun|operator{{=}}|nolink=true|notes={{cmark deleted}}|{{tt|std::basic_format_parse_context}} 不可复制}}
{{dsc mem fun|begin|nolink=true|返回指向格式字符串范围起始的迭代器}}
{{dsc mem fun|end|nolink=true|返回指向格式字符串范围末尾的迭代器}}
{{dsc mem fun|advance_to|nolink=true|使起始迭代器前进到给定位置}}
{{dsc mem fun|next_arg_id|nolink=true|进入自动索引模式，并返回下一个参数下标}}
{{dsc mem fun|check_arg_id|nolink=true|进入手动索引模式，检查给定参数下标是否在范围中}}
{{dsc mem fun|check_dynamic_spec|nolink=true|检查具有给定参数索引的对应格式参数的类型是否在给定的类型模板实参中|notes={{mark c++26}}}}
{{dsc mem fun|check_dynamic_spec_integral|nolink=true|检查具有给定参数索引的对应格式参数的类型是否是整数类型|notes={{mark c++26}}}}
{{dsc mem fun|check_dynamic_spec_string|nolink=true|检查具有给定参数索引的对应格式参数的类型是否是字符串类型|notes={{mark c++26}}}}
{{dsc end}}

{{member|{{small|std::basic_format_parse_context::}}basic_format_parse_context|2=
{{dcl begin}}
{{dcl rev multi|num=1|until1=c++26|dcl1=
constexpr explicit 
basic_format_parse_context( std::basic_string_view&lt;CharT&gt; fmt,
                            std::size_t num_args = 0 ) noexcept;
|since2=c++26|dcl2=
constexpr explicit 
basic_format_parse_context( std::basic_string_view&lt;CharT&gt; fmt ) noexcept;
}}
{{dcl|num=2|1=
basic_format_parse_context( const basic_format_parse_context&amp; ) = delete;
}}
{{dcl end}}

@1@ 构造 {{tt|std::basic_format_parse_context}} 实例。初始化格式字符串范围为 {{range|fmt.begin()|fmt.end()}}，并初始化参数计数为 {{rev inl|until=c++26|{{c|num_args}}}}{{rev inl|since=c++26|{{c|0}}}}。
{{rrev|since=c++26|在使用这个构造函数初始化的 {{tt|std::basic_format_parse_context}} 实例上对 {{tt|next_arg_id}}、{{tt|check_arg_id}} 或 {{tt|check_dynamic_spec}} 的任何调用都不是核心常量表达式。}}

@2@ 复制构造函数被弃置。{{tt|std::basic_format_parse_context}} 不可复制。
}}

{{member|{{small|std::basic_format_parse_context::}}begin|2=
{{ddcl|
constexpr const_iterator begin() const noexcept;
}}

返回指向格式字符串范围起始的迭代器。
}}

{{member|{{small|std::basic_format_parse_context::}}end|2=
{{ddcl|
constexpr const_iterator end() const noexcept;
}}

返回指向格式字符串范围末尾的迭代器。
}}

{{member|{{small|std::basic_format_parse_context::}}advance_to|2=
{{ddcl|
constexpr void advance_to( const_iterator it );
}}

设置格式字符串范围的起始为 {{c|it}}。调用 {{tt|advance_to()}} 后，对 {{tt|begin()}} 的后继调用将返回 {{c|it}} 的副本。

如果 {{c|end()}} 从 {{c|it}} 不[[cpp/iterator#范围|可及]]，那么行为未定义。
}}

{{member|{{small|std::basic_format_parse_context::}}next_arg_id|2=
{{ddcl|
constexpr std::size_t next_arg_id();
}}

进入自动参数索引模式，并返回从 0 开始的下个参数索引。

如果 {{c|*this}} 已进入手动参数索引模式，那么就会抛出 {{lc|std::format_error}}。

如果下个参数索引大于或等于构造函数中提供的 {{c|num_args}}，那么该调用不是核心常量表达式。
}}

{{member|{{small|std::basic_format_parse_context::}}check_arg_id|2=
{{ddcl|
constexpr void check_arg_id( std::size_t id );
}}

进入手动参数索引模式。

如果 {{c|*this}} 已进入自动参数索引模式，那么就会抛出 {{lc|std::format_error}}。

如果 {{c|id}} 大于或等于构造函数中提供的 {{c|num_args}}，那么该调用不是核心常量表达式。
}}

{{member|{{small|std::basic_format_parse_context::}}check_dynamic_spec|2=
{{ddcl|since=c++26|
template&lt; class... Ts &gt;
constexpr void check_dynamic_spec( std::size_t id ) noexcept;
}}

如果 {{c|id}} 大于或等于构造函数中提供的 {{c|num_args}}，或对应格式参数的类型（经过向 {{lc|std::basic_format_arg}} 的转换）不是 {{c|Ts...}} 中的类型之一，那么该调用不是核心常量表达式。在运行时调用 {{c|check_dynamic_spec}} 没有效果。

除非 {{c|1=sizeof...(Ts) &gt;= 1}}，{{c|Ts...}} 中的类型是唯一的，且每个类型都是 {{c|bool}}、{{c|char_type}}、{{c|int}}、{{c|unsigned int}}、{{c|long long int}}、{{c|unsigned long long int}}、{{c|float}}、{{c|double}}、{{c|long double}}、{{c|const char_type*}}、{{c|std::basic_string_view&lt;char_type&gt;}} 或 {{c|const void*}} 之一，否则程序非良构。

{{member|{{small|std::basic_format_parse_context::}}check_dynamic_spec_integral|2=
{{ddcl|since=c++26|
constexpr void check_dynamic_spec_integral( std::size_t id ) noexcept;
}}

等价于调用 {{c|check_dynamic_spec&lt;int, unsigned int, long long int, unsigned long long int&gt;(id)}}。在运行时调用 {{c|check_dynamic_spec_integral}} 没有效果。
}}

{{member|{{small|std::basic_format_parse_context::}}check_dynamic_spec_string|2=
{{ddcl|since=c++26|
constexpr void check_dynamic_spec_string( std::size_t id ) noexcept;
}}

等价于调用 {{c|check_dynamic_spec&lt;const char_type*, std::basic_string_view&lt;char_type&gt;&gt;(id)}}。在运行时调用 {{c|check_dynamic_spec_string}} 没有效果。
}}

===示例===
{{example
|code=
|output=
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3845|std=C++20|before={{tt|check_arg_id}} 会在编译器检查 {{c|id}}，但 {{tt|next_arg_id}} 不会|after=也会检查}}
{{dr list item|wg=lwg|dr=3975|std=C++20|before=允许用户特化 {{tt|basic_format_parse_context}}|after=已禁止}}
{{dr list end}}

{{langlinks|en|es|ja|ru}}
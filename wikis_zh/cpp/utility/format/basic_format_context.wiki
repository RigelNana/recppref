{{cpp/title|basic_format_context}}
{{cpp/utility/format/navbar}}

{{dcl begin}}
{{dcl header|format}}
{{dcl|num=1|since=c++20|1=
template&lt; class OutputIt, class CharT &gt;
class basic_format_context;
}}
{{dcl|num=2|since=c++20|1=
using format_context = basic_format_context&lt;/* 未指明 */, char&gt;;
}}
{{dcl|num=3|since=c++20|1=
using wformat_context = basic_format_context&lt;/* 未指明 */, wchar_t&gt;;
}}
{{dcl end}}

提供到由格式化参数和输出迭代器组成的格式化状态的访问。

@2@ 未指明的模板实参是某种向 {{lc|std::string}} 进行追加的输出迭代器，例如 {{c|std::back_insert_iterator&lt;std::string&gt;}}。鼓励实现使用一种支持向任何连续存储且大小可变的容器进行追加的类型擦除缓冲区类型的迭代器。

@3@ 未指明的模板实参是某种向 {{lc|std::wstring}} 进行追加的输出迭代器。

若 {{tt|OutputIt}} 不实现 {{tt|std::output_iterator&lt;const CharT&amp;&gt;}} 则行为未定义。

声明 {{tt|std::basic_format_context}} 的显式或部分特化的程序非良构，无须诊断。

{{tt|std::basic_format_context}} 对象仅能由实现创建。仅允许用户代码通过 {{lc|std::formatter}} 特化的 {{tt|format}} 函数修改格式化环境。

===成员类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|iterator}}|{{tt|OutputIt}}}}
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc end}}

===成员别名模版===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{c/core|formatter_type&lt;T&gt;}}|{{c/core|std::formatter&lt;T, CharT&gt;}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|nolink=true|notes={{cmark deleted}}|用户代码不能构造 {{tt|basic_format_context}}}}
{{dsc mem fun|operator{{=}}|nolink=true|notes={{cmark deleted}}|{{tt|basic_format_context}} 不可赋值}}
{{dsc mem fun|arg|nolink=true|返回位于给定索引的参数}}
{{dsc mem fun|locale|nolink=true|返回用于本地环境特定格式化的本地环境}}
{{dsc mem fun|out|nolink=true|返回指向输出缓冲区的迭代器}}
{{dsc mem fun|advance_to|nolink=true|推进输出迭代器到给定位置}}
{{dsc end}}
{{member|{{small|std::basic_format_context::}}arg|2=
{{ddcl|1=
std::basic_format_arg&lt;basic_format_context&gt; arg( std::size_t id ) const;
}}

返回保有 {{tt|args}} 中第 {{tt|id}} 个元素的 {{tt|std::basic_format_arg}}，其中 {{tt|args}} 是传递给格式化函数的形参包或 {{tt|std::basic_format_args}} 对象。

若 {{tt|id}} 不小于格式化参数的数量，则返回默认构造的 {{tt|std::basic_format_arg}}（保有一个 {{lc|std::monostate}} 对象）。
}}
{{member|{{small|std::basic_format_context::}}locale|2=
{{ddcl|1=
std::locale locale();
}}

返回传递给格式化函数的本地环境，或若格式化函数不接收本地环境则返回默认构造的 {{lc|std::locale}}。
}}
{{member|{{small|std::basic_format_context::}}out|2=
{{ddcl|1=
iterator out();
}}

返回指向输出缓冲区的迭代器。从存储的迭代器移动构造其结果。
}}
{{member|{{small|std::basic_format_context::}}advance_to|2=
{{ddcl|1=
void advance_to( iterator it );
}}

移动赋值 {{tt|it}} 给存储的输出迭代器。调用 {{tt|advance_to}} 后，对 {{tt|out()}} 的下次调用将返回具有 {{tt|it}} 在赋值前的值的迭代器。
}}

===示例===
{{example
|code=
|output=
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3567|std=C++20|before={{tt|basic_format_context}} 无法用于仅移动的迭代器类型|after=使之移动迭代器}}
{{dr list item|wg=lwg|dr=3975|std=C++20|before=允许用户特化 {{tt|basic_format_context}}|after=已禁止}}
{{dr list item|wg=lwg|dr=4061|std=C++20|before={{tt|basic_format_context}} 曾可由用户代码构造及赋值|after=改为不可构造或赋值}}
{{dr list end}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/title|vformat}}
{{cpp/utility/format/navbar}}

{{dcl begin}}
{{dcl header|format}}
{{dcl|num=1|since=c++20|1=
std::string vformat( std::string_view fmt, std::format_args args );
}}
{{dcl|num=2|since=c++20|1=
std::wstring vformat( std::wstring_view fmt, std::wformat_args args );
}}
{{dcl|num=3|since=c++20|1=
std::string vformat( const std::locale&amp; loc,
                     std::string_view fmt, std::format_args args );
}}
{{dcl|num=4|since=c++20|1=
std::wstring vformat( const std::locale&amp; loc,
                      std::wstring_view fmt, std::wformat_args args );
}}
{{dcl end}}

按照格式字符串 {{c|fmt}} 格式化 {{c|args}} 所持有的实参，并返回作为字符串的结果。{{c|loc}} 若存在，则用于本地环境特定的格式化。

===参数===
{{par begin}}
{{par|fmt|{{include|cpp/utility/format/format string}} }}
{{par|args...|要格式化的实参}}
{{par|loc|用于本地环境特定格式化的 {{lc|std::locale}}}}
{{par end}}

===返回值===
保有格式化结果的字符串对象。

===异常===
若 {{c|fmt}} 对于提供的实参不是合法的格式字符串则抛出 {{lc|std::format_error}}，在分配失败时抛出 {{lc|std::bad_alloc}}。并传播格式化器或迭代器操作所抛的任何异常。

===示例===
{{example
|code=
#include &lt;format&gt;
#include &lt;iostream&gt;

template&lt;typename... Args&gt;
inline void println(const std::format_string&lt;Args...&gt; fmt, Args&amp;&amp;... args)
{
    std::cout &lt;&lt; std::vformat(fmt.get(), std::make_format_args(args...)) &lt;&lt; '\n';
}

int main()
{
    println("{}{} {}{}", "Hello", ',', "C++", -1 + 2 * 3 * 4);
}
|output=
Hello, C++23
}}

===参阅===

{{langlinks|en|es|ja|ru}}
{{cpp/title|formatter}}
{{cpp/utility/format/navbar}}

{{ddcl|header=format|since=c++20|1=
template&lt; class T, class CharT = char &gt;
struct formatter;
}}

{{tt|std::formatter}} 的被启用特化对给定类型定义格式化规则。被启用特化满足{{named req|BasicFormatter}}，并且除非另有规定，否则也满足{{named req|Formatter}}。

对每组未对其启用特化 {{tt|std::formatter&lt;T, CharT&gt;}} 的类型 {{tt|T}} 与 {{tt|CharT}}，该特化是完整类型且被禁用。

被禁用特化不满足{{named req|Formatter}}，且下列值都是 {{c|false}}：
* {{lc|std::is_default_constructible_v}}
* {{lc|std::is_copy_constructible_v}}
* {{lc|std::is_move_constructible_v}}
* {{lc|std::is_copy_assignable_v}}
* {{lc|std::is_move_assignable_v}}

===基本的标准特化===
以下列表中，{{tt|CharT}} 是 {{c/core|char}} 或 {{c/core|wchar_t}}，{{tt|ArithmeticT}} 是除了 {{c/core|char}}、{{c/core|wchar_t}}、{{c/core|char8_t}}、{{c/core|char16_t}} 或 {{c/core|char32_t}} 之外的任何无 cv 限定的算术类型。

{{dcl begin}}
{{dcl h|字符格式化器}}
{{dcl|num=1|1=
template&lt;&gt;
struct formatter&lt;char, char&gt;;
}}
{{dcl|num=2|1=
template&lt;&gt;
struct formatter&lt;char, wchar_t&gt;;
}}
{{dcl|num=3|1=
template&lt;&gt;
struct formatter&lt;wchar_t, wchar_t&gt;;
}}
{{dcl h|字符串格式化器}}
{{dcl|num=4|1=
template&lt;&gt;
struct formatter&lt;CharT*, CharT&gt;;
}}
{{dcl|num=5|1=
template&lt;&gt;
struct formatter&lt;const CharT*, CharT&gt;;
}}
{{dcl|num=6|1=
template&lt; std::size_t N &gt;
struct formatter&lt;CharT[N], CharT&gt;;
}}
{{dcl|num=7|1=
template&lt; class Traits, class Alloc &gt;
struct formatter&lt;std::basic_string&lt;CharT, Traits, Alloc&gt;, CharT&gt;;
}}
{{dcl|num=8|1=
template&lt; class Traits &gt;
struct formatter&lt;std::basic_string_view&lt;CharT, Traits&gt;, CharT&gt;;
}}
{{dcl h|算术格式化器}}
{{dcl|num=9|1=
template&lt;&gt;
struct formatter&lt;ArithmeticT, CharT&gt;;
}}
{{dcl h|指针格式化器}}
{{dcl|num=10|1=
template&lt;&gt;
struct formatter&lt;std::nullptr_t, CharT&gt;;
}}
{{dcl|num=11|1=
template&lt;&gt;
struct formatter&lt;void*, CharT&gt;;
}}
{{dcl|num=12|1=
template&lt;&gt;
struct formatter&lt;const void*, CharT&gt;;
}}
{{dcl end}}

针对其他指针和成员指针的格式化器被禁用。

如 {{c/core|std::formatter&lt;wchar_t, char&gt;}} 和 {{c/core|std::formatter&lt;const char*, wchar_t&gt;}} 这些会要求编码转换的特化被禁用。

{{rrev|since=c++23|
C++23 中下列特化仍然被禁用，以避免将某些 {{c/core|char}} 序列作为 {{c/core|wchar_t}} 的范围格式化：

{{dcl begin}}
{{dcl h|对 {{c/core|wchar_t}} 禁用的特化}}
{{dcl|num=1|
template&lt;&gt;
struct formatter&lt;char*, wchar_t&gt;;
}}
{{dcl|num=2|
template&lt;&gt;
struct formatter&lt;const char*, wchar_t&gt;;
}}
{{dcl|num=3|
template&lt; std::size_t N &gt;
struct formatter&lt;char[N], wchar_t&gt;;
}}
{{dcl|num=4|
template&lt; class Traits, class Allocator &gt;
struct formatter&lt;std::basic_string&lt;char, Traits, Allocator&gt;, wchar_t&gt;;
}}
{{dcl|num=5|
template&lt; class Traits &gt;
struct formatter&lt;std::basic_string_view&lt;char, Traits&gt;, wchar_t&gt;;
}}
{{dcl end}}

''启用调试的''格式化器特化都会另外提供一个公开的非静态成员函数 {{c|constexpr void set_debug_format();}}，它会修改格式化器对象的状态，使该对象可以在格式化时[[cpp/utility/format/spec#格式化经转义字符和字符串|进行转义和使用引号包围]]，如同上次调用 {{tt|parse}} 的格式化说明符中{{spar sep|类型}}是 {{ttb|?}}。

每个针对字符串或字符类型的 {{tt|std::formatter}} 特化都是''启用调试的''。
}}

===标准格式说明===
{{todo|标准格式说明现已移动到单独{{rlp|spec|页面}}。由于还有链接到此处，所以暂时保留此版块的标题。在解决那些链接后就会移除此版块。}}

===库类型的标准特化===
{{dsc begin}}
{{dsc inc|cpp/chrono/dsc formatter|duration}}
{{dsc inc|cpp/chrono/dsc formatter|sys_time|system_clock}}
{{dsc inc|cpp/chrono/dsc formatter|utc_time|utc_clock}}
{{dsc inc|cpp/chrono/dsc formatter|tai_time|tai_clock}}
{{dsc inc|cpp/chrono/dsc formatter|gps_time|gps_clock}}
{{dsc inc|cpp/chrono/dsc formatter|file_time|file_clock}}
{{dsc inc|cpp/chrono/dsc formatter|local_time|local_t}}
{{dsc inc|cpp/chrono/dsc formatter|day}}
{{dsc inc|cpp/chrono/dsc formatter|month}}
{{dsc inc|cpp/chrono/dsc formatter|year}}
{{dsc inc|cpp/chrono/dsc formatter|weekday}}
{{dsc inc|cpp/chrono/dsc formatter|weekday_indexed}}
{{dsc inc|cpp/chrono/dsc formatter|weekday_last}}
{{dsc inc|cpp/chrono/dsc formatter|month_day}}
{{dsc inc|cpp/chrono/dsc formatter|month_day_last}}
{{dsc inc|cpp/chrono/dsc formatter|month_weekday}}
{{dsc inc|cpp/chrono/dsc formatter|month_weekday_last}}
{{dsc inc|cpp/chrono/dsc formatter|year_month}}
{{dsc inc|cpp/chrono/dsc formatter|year_month_day}}
{{dsc inc|cpp/chrono/dsc formatter|year_month_day_last}}
{{dsc inc|cpp/chrono/dsc formatter|year_month_weekday}}
{{dsc inc|cpp/chrono/dsc formatter|year_month_weekday_last}}
{{dsc inc|cpp/chrono/dsc formatter|hh_mm_ss}}
{{dsc inc|cpp/chrono/dsc formatter|sys_info}}
{{dsc inc|cpp/chrono/dsc formatter|local_info}}
{{dsc inc|cpp/chrono/dsc formatter|zoned_time}}
&lt;!-- C++23 特化 --&gt;
{{dsc inc|cpp/utility/basic_stacktrace/dsc formatter}}
{{dsc inc|cpp/utility/stacktrace_entry/dsc formatter}}
{{dsc inc|cpp/thread/thread/id/dsc formatter}}
{{dsc inc|cpp/container/vector_bool/reference/dsc formatter}}
{{dsc inc|cpp/utility/format/dsc tuple_formatter}}
{{dsc inc|cpp/utility/format/dsc ranges_formatter}}
{{dsc inc|cpp/container/dsc adaptor_formatter|stack}}
{{dsc inc|cpp/container/dsc adaptor_formatter|queue}}
{{dsc inc|cpp/container/dsc adaptor_formatter|priority_queue}}
&lt;!-- C++26 特化 --&gt;
{{dsc inc|cpp/filesystem/path/dsc formatter}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;format&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string_view&gt;

struct QuotableString : std::string_view
{};

template&lt;&gt;
struct std::formatter&lt;QuotableString, char&gt;
{
    bool quoted = false;

    template&lt;class ParseContext&gt;
    constexpr ParseContext::iterator parse(ParseContext&amp; ctx)
    {
        auto it = ctx.begin();
        if (it == ctx.end())
            return it;
            
        if (*it == '#')
        {
            quoted = true;
            ++it;
        }
        if (it != ctx.end() &amp;&amp; *it != '}')
            throw std::format_error("无效的 QuotableString 格式参数。");
            
        return it;
    }
 
    template&lt;class FmtContext&gt;
    FmtContext::iterator format(QuotableString s, FmtContext&amp; ctx) const
    {
        std::ostringstream out;
        if (quoted)
            out &lt;&lt; std::quoted(s);
        else
            out &lt;&lt; s;

        return std::ranges::copy(std::move(out).str(), ctx.out()).out;
    }
};

int main()
{
    QuotableString a("be"), a2(R"( " be " )");
    QuotableString b("a question");
    std::cout &lt;&lt; std::format("To {0} or not to {0}, that is {1}.\n", a, b);
    std::cout &lt;&lt; std::format("To {0:} or not to {0:}, that is {1:}.\n", a, b);
    std::cout &lt;&lt; std::format("To {0:#} or not to {0:#}, that is {1:#}.\n", a2, b);
}
|output=
To be or not to be, that is a question.
To be or not to be, that is a question.
To " \" be \" " or not to " \" be \" ", that is "a question".
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3944|std=C++23|before=某些 {{c/core|char}} 序列能作为 {{c/core|wchar_t}} 的范围格式化|after=添加了禁用的特化}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/format/dsc basic_format_context}}
{{dsc inc|cpp/utility/format/dsc formattable}}
{{dsc inc|cpp/utility/format/dsc range_formatter}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/title|basic_format_arg}}
{{cpp/utility/format/navbar}}

{{ddcl|header = format|since=c++20|1=
template&lt; class Context &gt;
class basic_format_arg;
}}

提供到格式化参数的访问。

{{tt|basic_format_arg}} 对象通常由 {{lc|std::make_format_args}} 创建并通过 {{lc|std::visit_format_arg}} {{rev inl|since=c++26|或 {{tt|visit}} 成员函数}}访问。

{{tt|basic_format_arg}} 对象表现为如同存储一个下列类型的 {{lc|std::variant}}：

* {{c|std::monostate}} （仅若对象被默认构造）
* {{c|bool}}
* {{c|Context::char_type}}
* {{c|int}}
* {{c|unsigned int}}
* {{c|long long int}}
* {{c|unsigned long long int}}
* {{c|float}}
* {{c|double}}
* {{c|long double}}
* {{c|const Context::char_type*}}
* {{c|std::basic_string_view&lt;Context::char_type&gt;}}
* {{c|const void*}}
* {{c|basic_format_arg::handle}}

===成员类===
{{dsc begin}}
{{dsc mem class|cpp/utility/format/basic_format_arg/handle|notes={{mark c++20}}|允许对用户定义类型的对象进行格式化的类型擦除包装器}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|nolink=true|notes={{mark c++20}}|构造 {{tt|std::basic_format_arg}}}}
{{dsc mem fun|operator bool|nolink=true|notes={{mark c++20}}|检查当前对象是否保有格式化参数}}
{{dsc mem fun|visit|nolink=true|notes={{mark c++26}}|观览存储的格式化参数}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/utility/format/dsc visit_format_arg}}
{{dsc end}}

{{member|{{small|std::basic_format_arg::}}basic_format_arg|2=
{{ddcl|since=c++20|
basic_format_arg() noexcept;
}}

默认构造函数。构造不保有格式化参数的 {{tt|basic_format_arg}}。存储的对象拥有 {{lc|std::monostate}} 类型。

为创建保有格式化参数的 {{tt|basic_format_arg}}，必须使用 {{lc|std::make_format_args}}。
}}
{{member|{{small|std::basic_format_arg::}}operator bool|2=
{{ddcl|since=c++20|
explicit operator bool() const noexcept;
}}
检查 {{c|*this}} 是否保有格式化参数。

若 {{c|*this}} 保有格式化参数（即存储的对象不拥有 {{lc|std::monostate}} 类型）则返回 {{c|true}}，否则返回 {{c|false}}。
}}
{{anchor|visit}}
{{member|{{small|std::basic_format_arg::}}visit|2=
{{dcl begin}}
{{dcl|num=1|since=c++26|
template&lt; class Visitor &gt;
decltype(auto) visit( this basic_format_arg arg, Visitor&amp;&amp; vis );
}}
{{dcl|num=2|since=c++26|
template&lt; class R, class Visitor &gt;
R visit( this basic_format_arg arg, Visitor&amp;&amp; vis );
}}
{{dcl end}}

应用观览器 {{c|vis}} 到 {{c|arg}} 所含的对象。

{{tt|visit}} 函数不修改在其上调用的 {{tt|basic_format_arg}} 对象，因为在调用 {{c|vis}} 前会创建该对象的副本。

@1@ 等价于 {{c|return std::visit(std::forward&lt;Visitor&gt;(vis), v);}}，其中 {{tt|v}} 是 {{c|arg}} 中存储的 {{lc|std::variant}}。

@2@ 等价于 {{c|return std::visit&lt;R&gt;(std::forward&lt;Visitor&gt;(vis), v);}}，其中 {{tt|v}} 是 {{c|arg}} 中存储的 {{lc|std::variant}}。
}}

===注解===
{{ftm begin}}
{{ftm|__cpp_lib_format|[[#visit|{{tt|visit}}]] 成员|std=C++26|value=202306L}}
{{ftm end}}

===示例===
{{example
|code=
|output=
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/format/dsc basic_format_args}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
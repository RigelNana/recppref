{{cpp/title|enable_nonlocking_formatter_optimization}}
{{cpp/utility/format/navbar}}

{{dcl begin}}
{{dcl header|format}}
{{dcl|since=c++23|1=
template&lt; class T &gt;
constexpr bool enable_nonlocking_formatter_optimization = false;
}}
{{dcl end}}

实现可以通过此模板判断是否可以启用 {{ltt std|cpp/io/print}} 和 {{ltt std|cpp/io/println}} 的高效实现。

如果 {{tt|std::enable_nonlocking_formatter_optimization&lt;T&gt;}} 是 {{c|true}}，那么打印 {{tt|T}} 类型的实参可以通过高效的方式进行（详情见 {{ltt std|cpp/io/print}}）。{{tt|std::enable_nonlocking_formatter_optimization}} 的特化在以下情况下可以是 {{c|true}}：
* {{tt|T}} 是使得 {{ltt std|cpp/utility/format/formatter|formatter}}{{c/core|&lt;T, CharT&gt;}} 是{{rlps|formatter#基本的标准特化}}或{{rlps|formatter#库类型的标准特化}}的类型之一（见下文）。
* 程序可以对任何无 cv 限定的{{ls|cpp/language/type#由程序定义的类型}} {{tt|T}} 特化此模板。此类特化必须{{ls|cpp/language/constant expression#可用于常量表达式}}并具有 {{c/core|const bool}} 类型。

===基本的标准特化===
以下列表中，{{tt|CharT}} 是 {{c/core|char}} 或 {{c/core|wchar_t}}，{{tt|ArithmeticT}} 是除了 {{c/core|char}}、{{c/core|wchar_t}}、{{c/core|char8_t}}、{{c/core|char16_t}} 或 {{c/core|char32_t}} 之外的任何无 cv 限定的算术类型：

{{dcl begin}}
{{dcl h|字符格式化器对应的无锁标志}}
{{dcl|num=1|1=
template&lt;&gt;
constexpr bool enable_nonlocking_formatter_optimization&lt;CharT&gt; = true;
}}
{{dcl h|字符串格式化器对应的无锁标志}}
{{dcl|num=2|1=
template&lt;&gt;
constexpr bool enable_nonlocking_formatter_optimization&lt;CharT*&gt; = true;
}}
{{dcl|num=3|1=
template&lt;&gt;
constexpr bool enable_nonlocking_formatter_optimization&lt;const CharT*&gt; = true;
}}
{{dcl|num=4|1=
template&lt; std::size_t N &gt;
constexpr bool enable_nonlocking_formatter_optimization&lt;CharT[N]&gt; = true;
}}
{{dcl|num=5|1=
template&lt; class Traits, class Alloc &gt;
constexpr bool enable_nonlocking_formatter_optimization
    &lt;std::basic_string&lt;CharT, Traits, Alloc&gt;&gt; = true;
}}
{{dcl|num=6|1=
template&lt; class Traits &gt;
constexpr bool enable_nonlocking_formatter_optimization
    &lt;std::basic_string_view&lt;CharT, Traits&gt;&gt; = true;
}}
{{dcl h|算术格式化器对应的无锁标志}}
{{dcl|num=7|1=
template&lt;&gt;
constexpr bool enable_nonlocking_formatter_optimization&lt;ArithmeticT&gt; = true;
}}
{{dcl h|指针格式化器对应的无锁标志}}
{{dcl|num=8|1=
template&lt;&gt;
constexpr bool enable_nonlocking_formatter_optimization&lt;std::nullptr_t&gt; = true;
}}
{{dcl|num=9|1=
template&lt;&gt;
constexpr bool enable_nonlocking_formatter_optimization&lt;void*&gt; = true;
}}
{{dcl|num=10|1=
template&lt;&gt;
constexpr bool enable_nonlocking_formatter_optimization&lt;const void*&gt; = true;
}}
{{dcl end}}

===库类型的标准特化===
{{tt|enable_nonlocking_formatter_optimization}} 针对下列标准模板的所有特化的特化均被定义为 {{c|true}}。
* {{ltt|cpp/chrono/zoned_time|std::chrono::zoned_time}}，当其模板形参类型 {{tt|TimeZonePtr}} 为 {{c/core|const std::chrono::time_zone*}} 时

{{tt|enable_nonlocking_formatter_optimization}} 针对下列标准模板的所有特化的特化均被定义为根据条件为 {{c|true}}：
* {{ltt|cpp/utility/pair|std::pair}}
* {{ltt|cpp/utility/tuple|std::tuple}}
* {{ltt|cpp/chrono/duration|std::chrono::duration}}

{{tt|enable_nonlocking_formatter_optimization}} 针对范围格式种类并非 {{c|std::range_format::disabled}} 的所有[[cpp/utility/format/ranges_formatter|可格式化范围类型]]的特化总是被定义为 {{c|false}}。

===注解===
{{ftm begin|sort=yes}}
{{ftm|__cpp_lib_print|进行流锁定的格式化输出|value=202403L|std=C++26|dr=23|rowspan=2}}
{{ftm|-|启用更多可格式化类型的非锁定格式化器优化|value=202406L|std=C++26|dr=23}}
{{ftm end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/format/dsc formatter}}
{{dsc inc|cpp/io/dsc print}}
{{dsc inc|cpp/io/dsc println}}
{{dsc end}}

{{langlinks|en}}
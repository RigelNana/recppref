{{cpp/title|format_to}}
{{cpp/utility/format/navbar}}

{{dcl begin}}
{{dcl header|format}}
{{dcl|num=1|since=c++20|1=
template&lt; class OutputIt, class... Args &gt;
OutputIt format_to( OutputIt out,
                    std::format_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl|num=2|since=c++20|1=
template&lt; class OutputIt, class... Args &gt;
OutputIt format_to( OutputIt out,
                    std::wformat_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl|num=3|since=c++20|1=
template&lt; class OutputIt, class... Args &gt;
OutputIt format_to( OutputIt out, const std::locale&amp; loc,
                    std::format_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl|num=4|since=c++20|1=
template&lt; class OutputIt, class... Args &gt;
OutputIt format_to( OutputIt out, const std::locale&amp; loc,
                    std::wformat_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl end}}

按照格式字符串 {{c|fmt}} 格式化 {{c|args}}，并将结果写入到输出迭代器 {{c|out}}。{{c|loc}}（如果存在）会被用于本地环境特定的格式化。

等价于：
@1@ {{c|return std::vformat_to(std::move(out), fmt.str, std::make_format_args(args...));}}
@2@ {{c|return std::vformat_to(std::move(out), fmt.str, std::make_wformat_args(args...));}}
@3@ {{c|return std::vformat_to(std::move(out), loc, fmt.str, std::make_format_args(args...));}}
@4@ {{c|return std::vformat_to(std::move(out), loc, fmt.str, std::make_wformat_args(args...));}}


设 {{tt|CharT}} 对重载 {{v|1,3}} 为 {{c/core|char}}，对重载 {{c/core|wchar_t}} 为 {{v|2,4}}。

{{cpp/enable if|plural=yes|{{tt|OutputIt}} 满足概念 {{c/core|std::output_iterator&lt;const CharT&amp;&gt;}} }}。

如果满足以下任意条件，那么行为未定义：
* {{tt|OutputIt}} 未实现 {{c/core|std::output_iterator&lt;const CharT&amp;&gt;}}。
* 对于 {{tt|Args}} 中的某些 {{tt|Ti}}，{{c/core|std::formatter&lt;Ti, CharT&gt;}} 未（按 {{lc|std::make_format_args}} 和 {{lc|std::make_wformat_args}} 的规定）满足{{named req|BasicFormatter}}的要求。

===参数===
{{par begin}}
{{par|out|指向输出缓冲区的迭代器}}
{{par|fmt|{{include|cpp/utility/format/format string|const}}}}
{{par|args...|要格式化的实参}}
{{par|loc|用于本地环境特定的格式化的 {{lc|std::locale}}}}
{{par end}}

===返回值===
输出范围末尾后一位置的迭代器。

===异常===
传播格式化器或迭代器操作所抛的任何异常。

===注解===
自 {{wg21|P2216R3}} 起，格式字符串不是常量表达式是错误的。此情况下可使用 {{lc|std::vformat_to}}。

===示例===
{{example
|code=
#include &lt;format&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;

int main()
{
    std::string buffer;

    std::format_to
    (
        std::back_inserter(buffer), // &lt; OutputIt
        "Hello, C++{}!\n",          // &lt; fmt
        "20"                        // &lt; arg
    );
    std::cout &lt;&lt; buffer;
    buffer.clear();
    
    std::format_to
    (
        std::back_inserter(buffer), // &lt; OutputIt
        "Hello, {0}::{1}!{2}",      // &lt; fmt
        "std",                      // &lt; arg {0}
        "format_to()",              // &lt; arg {1}
        "\n",                       // &lt; arg {2}
        "extra param(s)..."         // &lt; 不使用
    );
    std::cout &lt;&lt; buffer &lt;&lt; std::flush;
    
    std::wstring wbuffer;
    std::format_to
    (
        std::back_inserter(wbuffer),// &lt; OutputIt
        L"Hello, {2}::{1}!{0}",     // &lt; fmt
        L"\n",                      // &lt; arg {0}
        L"format_to()",             // &lt; arg {1}
        L"std",                     // &lt; arg {2}
        L"...is not..."             // &lt; 不使用
        L"...an error!"             // &lt; 不使用
    );
    std::wcout &lt;&lt; wbuffer;
}
|output=
Hello, C++20!
Hello, std::format_to()!
Hello, std::format_to()!
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3539|std=C++20|before={{c|out}} 不可以是仅可移动的迭代器|after=可以是}}
{{dr list item|paper=P2216R3|std=C++20|before=对非法格式字符串抛出 {{lc|std::format_error}}|after=非法格式字符串导致编译时错误}}
{{dr list item|paper=P2418R2|std=C++20|before=不可格式化既非 const 可用也不可复制的对象（如生成器式对象）|after=允许格式化这些对象}}
{{dr_p2508}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/format/dsc format}}
{{dsc inc|cpp/utility/format/dsc format_to_n}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/title|runtime_format}}
{{cpp/utility/format/navbar}}

{{dcl begin}}
{{dcl header|format}}
{{dcl|num=1|since=c++26|1=
/*runtime-format-string*/&lt;char&gt; runtime_format( std::string_view fmt ) noexcept;
}}
{{dcl|num=2|since=c++26|1=
/*runtime-format-string*/&lt;wchar_t&gt; runtime_format( std::wstring_view fmt ) noexcept;
}}
{{dcl end}}

返回一个对象，它存储一个可以直接用在面向用户的格式化函数中的运行时格式字符串，且可以隐式转换为 {{rlpt|basic_format_string|std::basic_format_string}}。

===参数===
{{par begin}}
{{par|fmt|字符串视图}}
{{par end}}

===返回值===
一个具有以下仅用于阐释的类型的含有运行时格式字符串的对象：
{{member|{{petty|'''类模板'''}} {{small|{{tti|runtime-format-string}} {{tt|&lt;CharT&gt;}}}}|2=

{{dcl begin}}
{{dcl|notes={{mark expos}}|1=
template&lt; class CharT &gt;
struct /*runtime-format-string*/;
}}
{{dcl end}}

====成员对象====
所返回的对象包含一个 {{lc|std::basic_string_view&lt;CharT&gt;}} 类型的仅用于阐释的非静态数据成员 {{tti|str}}。

====构造函数与赋值====
{{dcl begin}}
{{dcl|num=1|1=
/*runtime-format-string*/( std::basic_string_view&lt;CharT&gt; s ) noexcept;
}}
{{dcl|num=2|1=
/*runtime-format-string*/( const /*runtime-format-string*/&amp; ) = delete;
}}
{{dcl|num=3|1=
/*runtime-format-string*/&amp; operator=( const /*runtime-format-string*/&amp; ) = delete;
}}
{{dcl end}}

@1@ 以 {{tt|s}} 初始化 {{tti|str}}。
@2@ 复制构造函数被显式弃置。此类型既不可复制也不可移动。
@3@ 赋值被显式弃置。
}}

===注解===
由于 {{tt|runtime_format}} 的返回类型既不可复制也不可移动，所以尝试把 {{c|runtime_fmt}} 作为泛左值进行传递会妨碍 {{lc|std::basic_format_string}} 的构造，这导致程序非良构。要从 {{tt|runtime_format}} 构造 {{tt|std::basic_format_string}}，{{tt|runtime_format}} 的返回值应直接按纯右值传递给 {{tt|std::basic_format_string}}，这样会保证发生复制消除。

{{source|1=
auto runtime_fmt = std::runtime_format("{}");

auto s0 = std::format(runtime_fmt, 1); // error
auto s1 = std::format(std::move(runtime_fmt), 1); // still error
auto s2 = std::format(std::runtime_format("{}"), 1); // ok
}}

{{ftm begin}}
{{ftm|std=C++26|value=202311L|__cpp_lib_format|运行时格式字符串}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;format&gt;
#include &lt;print&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;

int main()
{
    std::print("Hello {}!\n", "world");

    std::string fmt;
    for (int i{}; i != 3; ++i)
    {
        fmt += "{} "; // 构造格式化字符串
        std::print("{} : ", fmt);
        std::println(std::runtime_format(fmt), "alpha", 'Z', 3.14, "unused");
    }
}
|output=
Hello world!
{}  : alpha
{} {}  : alpha Z
{} {} {}  : alpha Z 3.14
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/format/dsc format}}
{{dsc inc|cpp/utility/format/dsc vformat}}
{{dsc inc|cpp/utility/format/dsc basic_format_string}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/title|basic_format_string|format_string|wformat_string}}
{{cpp/utility/format/navbar}}

{{dcl begin}}
{{dcl header|format}}
{{dcl|num=1|since=c++20|
template&lt; class CharT, class... Args &gt;
struct basic_format_string;
}}
{{dcl|num=2|since=c++20|1=
template&lt; class... Args &gt;
using format_string =
    basic_format_string&lt;char, std::type_identity_t&lt;Args&gt;...&gt;;
}}
{{dcl|num=3|since=c++20|1=
template&lt; class... Args &gt;
using wformat_string =
    basic_format_string&lt;wchar_t, std::type_identity_t&lt;Args&gt;...&gt;;
}}
{{dcl end}}

类模板 {{tt|std::basic_format_string}} 包装一个用于格式化函数的 {{lc|std::basic_string_view}}。

{{rev inl|since=c++26|除非构造函数实参是从 {{rlpt|runtime_format|std::runtime_format}} 返回的，否则 }}{{tt|std::basic_format_string}} 的构造函数执行编译时格式字符串检查。

===成员函数===
{{dsc begin}}
{{dsc mem ctor|nolink=true|构造 {{tt|basic_format_string}}，当实参不是格式字符串时引起编译错误}}
{{dsc mem fun|nolink=true|get|返回包装的字符串}}
{{dsc end}}

{{member|1={{small|std::basic_format_string::}}basic_format_string|2=
{{dcl begin}}
{{dcl|num=1|
template&lt; class T &gt;
consteval basic_format_string( const T&amp; s );
}}
{{dcl|num=2|since=c++26|
basic_format_string( /* 运行时格式字符串 */&lt;CharT&gt; s ) noexcept;
}}
{{dcl end}}

@1@ 构造 {{tt|basic_format_string}} 对象，用于存储字符串 {{c|s}} 的视图。如果实参不是编译时常量，或者无法解析为针对格式化参数类型 {{tt|Args}} 的格式字符串，则构造非良构。
@@ {{cpp/enable if| {{c/core|const T&amp;}} 实现 {{c|std::convertible_to&lt;std::basic_string_view&lt;CharT&gt;&gt;}} }}。

@2@ 构造 {{tt|basic_format_string}} 对象，用于存储 {{lc|std::runtime_format}} 返回的字符串 {{c|s}} 的视图。不会在构造时执行格式字符串检查。

===参数===
{{par begin}}
{{par|s|{{cpp/utility/format/format string}}}}
{{par end}}
}}
{{member|1={{small|std::basic_format_string::}}get|2=
{{dcl begin}}
{{dcl|1=
constexpr std::basic_string_view&lt;CharT&gt; get() const noexcept;
}}
{{dcl end}}

返回储存的字符串视图。
}}

===注解===
别名模板 {{tt|format_string}} 和 {{tt|wformat_string}} 使用 {{lc|std::type_identity_t}} 来抑制模板实参推导。通常情况下，当它们作为函数形参出现时，它们的模板参数会从其他函数实参中推导出来。

{{source|1=
template&lt;class... Args&gt;
std::string format(std::format_string&lt;Args...&gt; fmt, Args&amp;&amp;... args);

auto s = format("{} {}", 1.0, 2);
// 调用 format&lt;double, int&gt;。Args 会从 1.0, 2 推导
// 由于 format_string 中使用了 type_identity_t，
// 因此模板实参推导不会考虑格式字符串的类型。
}}

===示例===
{{example}}

===缺陷报告===
{{dr list begin}}
{{dr_p2508}}
{{dr list end}}

{{langlinks|en|es|ja|ru}}
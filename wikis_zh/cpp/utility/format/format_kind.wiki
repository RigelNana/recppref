{{cpp/title|format_kind}}
{{cpp/utility/format/navbar}}

{{dcl begin}}
{{dcl header|format}}
{{dcl|num=1|since=c++23|1=
template&lt; class R &gt;
constexpr /* 未指明 */ format_kind = /* 未指明 */;
}}
{{dcl|num=2|since=c++23|1=
template&lt; ranges::input_range R &gt;
    requires std::same_as&lt;R, std::remove_cvref_t&lt;R&gt;&gt;
constexpr range_format format_kind&lt;R&gt; = /* 见说明 */;
}}
{{dcl end}}

变量模板 {{tt|format_kind}} 为范围 {{tt|R}} 选择适当的 {{lc|std::range_format}}。

{{c|std::format_kind&lt;R&gt;}} 的定义如下：
* 如果 {{c|std::same_as&lt;std::remove_cvref_t&lt;ranges::range_reference_t&lt;R&gt;&gt;, R&gt;}} 为 {{c|true}}，那么 {{c|std::format_kind&lt;R&gt;}} 为 {{c|std::range_format::disabled}}。
* 否则，如果 {{tt|R::key_type}} 有效且代表某个类型：
** 如果 {{tt|R::mapped_type}} 有效且代表某个类型，令 {{tt|U}} 为 {{c|std::remove_cvref_t&lt;ranges::range_reference_t&lt;R&gt;&gt;}}。
:: 如果要么 {{tt|U}} 是 {{lc|std::pair}} 的特化要么 {{tt|U}} 是 {{lc|std::tuple}} 的特化且 {{c|1=std::tuple_size_v&lt;U&gt; == 2}}，那么 {{c|std::format_kind&lt;R&gt;}} 为 {{c|std::range_format::map}}。
:* 否则，{{c|std::format_kind&lt;R&gt;}} 为 {{c|std::range_format::set}}。
* 否则，{{c|std::format_kind&lt;R&gt;}} 为 {{c|std::range_format::sequence}}。

实例化变量模板 {{tt|format_kind}} 的主模板的程序非良构。

给定无 cv 限定的实现 {{lconcept|input_range}} 的{{ls|cpp/language/type#程序定义类型}} {{tt|T}}，程序可以为 {{tt|T}} 特化 {{tt|format_kind}}。这种特化可以用在常量表达式中，且具有 {{c/core|const std::range_format}} 类型。

===可能的实现===
{{eq fun
|1=
namespace detail
{
    template&lt; typename &gt;
    constexpr bool is_pair_or_tuple_2 = false;
    
    template&lt; typename T, typename U &gt;
    constexpr bool is_pair_or_tuple_2&lt;std::pair&lt;T, U&gt;&gt; = true;
    
    template&lt; typename T, typename U &gt;
    constexpr bool is_pair_or_tuple_2&lt;std::tuple&lt;T, U&gt;&gt; = true;
    
    template &lt; typename T &gt;
        requires std::is_reference_v&lt;T&gt; {{!!}} std::is_const_v&lt;T&gt;
    constexpr bool is_pair_or_tuple_2&lt;T&gt; =
        is_pair_or_tuple_2&lt;std::remove_cvref_t&lt;T&gt;&gt;;
}

template&lt; class R &gt;
constexpr range_format format_kind = []
{
    static_assert(false, "不允许实例化主模板");
    return range_format::disabled;
}();

template&lt; ranges::input_range R &gt;
    requires std::same_as&lt;R, std::remove_cvref_t&lt;R&gt;&gt;
constexpr range_format format_kind&lt;R&gt; = []
{
    if constexpr (std::same_as&lt;std::remove_cvref_t&lt;std::ranges::range_reference_t&lt;R&gt;&gt;, R&gt;)
        return range_format::disabled;
    else if constexpr (requires { typename R::key_type; })
    {
        if constexpr (requires { typename R::mapped_type; } &amp;&amp;
                      detail::is_pair_or_tuple_2&lt;std::ranges::range_reference_t&lt;R&gt;&gt;)
            return range_format::map;
        else
            return range_format::set;
    }
    else
        return range_format::sequence;
}();
}}

===示例===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;format&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;vector&gt;

struct A {};

static_assert(std::format_kind&lt;std::vector&lt;int&gt;&gt; == std::range_format::sequence);
static_assert(std::format_kind&lt;std::map&lt;int&gt;&gt; == std::range_format::map);
static_assert(std::format_kind&lt;std::set&lt;int&gt;&gt; == std::range_format::set);
static_assert(std::format_kind&lt;std::filesystem::path&gt; == std::range_format::disabled);
// 非良构：
// static_assert(std::format_kind&lt;A&gt; == std::range_format::disabled);

int main() {}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/format/dsc range_format}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
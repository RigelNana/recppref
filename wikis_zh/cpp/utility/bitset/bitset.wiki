{{cpp/utility/bitset/title|bitset}}
{{cpp/utility/bitset/navbar}}
{{dcl begin}}
{{dcla|num=1|constexpr=c++11|noexcept=c++11|
bitset();
}}
{{dcl rev multi|num=2|until1=c++11|dcl1=
bitset( unsigned long val );
|dcl2=
constexpr bitset( unsigned long long val ) noexcept;
}}
{{dcla|num=3|constexpr=c++23|1=
template&lt; class CharT, class Traits, class Alloc &gt;
explicit bitset
    ( const std::basic_string&lt;CharT, Traits, Alloc&gt;&amp; str,
      typename std::basic_string
                   &lt;CharT, Traits, Alloc&gt;::size_type pos = 0,
      typename std::basic_string&lt;CharT, Traits, Alloc&gt;::size_type
          n = std::basic_string&lt;CharT, Traits, Alloc&gt;::npos,
      CharT zero = CharT('0'), CharT one = CharT('1') );
}}
{{dcla|num=4|since=c++26|1=
template&lt; class CharT, class Traits &gt;
constexpr explicit bitset
    ( std::basic_string_view&lt;CharT, Traits&gt; str,
      std::size_t pos = 0, std::size_t n = std::size_t(-1),
      CharT zero = CharT('0'), CharT one = CharT('1') );
}}
{{dcla|num=5|since=c++11|constexpr=c++23|1=
template&lt; class CharT &gt;
explicit bitset( const CharT* str, std::size_t n = std::size_t(-1),
                 CharT zero = CharT('0'), CharT one = CharT('1') );
}}
{{dcl end}}

从数个数据源之一构造新的 {{tt|bitset}}：

@1@ 默认构造函数。构造所有位都设为零的 {{tt|bitset}}。

@2@ 从无符号整数 {{c|val}} 构造 {{tt|bitset}}。
@@ 给定 {{rev inl|until=c++11|{{c/core|unsigned long}}}}{{rev inl|since=c++11|{{c/core|unsigned long long}}}} 的[[cpp/language/object#对象表示与值表示|值表示]]中的位数为 {{c|S}}：
* 初始化前（最右、最低有效）{{c|std::min(S, N)}} 位位置为 {{c|val}} 的对应位值。
* 如果 {{c|S}} 小于 {{c|N}}，那么剩余位位置被初始化为零。

@3@ 用 {{c|str}} 中的字符构造 {{tt|bitset}}。能提供可选的起始位置 {{c|pos}} 和长度 {{c|n}}，以及代表用于设置（{{c|one}}）和不设置（{{c|zero}}）位的各个替代值的字符。用 {{tt|Traits::eq()}} 比较字符值。
@@ 初始化字符串的有效长度是 {{c|std::min(n, str.size() - pos)}}。

@4@ 同 {{v|3}}，但用 {{lc|std::basic_string_view}} 代替 {{lc|std::basic_string}}。

@5@ 同 {{v|3}}，但用 {{c/core|const CharT*}} 代替 {{lc|std::basic_string}}。
{{rev begin}}
{{rev|until=c++26|
等价于 {{c multi|bitset(n {{==}} std::basic_string&lt;CharT&gt;::npos|          ? std::basic_string&lt;CharT&gt;(str)|          : std::basic_string&lt;CharT&gt;(str, n), 0, n, zero, one)}}。
}}
{{rev|since=c++26|
等价于 {{c multi|bitset(n {{==}} std::basic_string_view&lt;CharT&gt;::npos|          ? std::basic_string_view&lt;CharT&gt;(str)|          : std::basic_string_view&lt;CharT&gt;(str, n), 0, n, zero, one)}}。
}}
{{rev end}}

===参数===
{{par begin}}
{{par|val|用于初始化 {{tt|bitset}} 的数值}}
{{par|str|用于初始化 {{tt|bitset}} 的字符串}}
{{par|pos|{{c|str}} 中的起始偏移}}
{{par|n|使用来自 {{c|str}} 的字符数}}
{{par|zero|在 {{c|str}} 中表示已设置位的代用字符}}
{{par|one|在 {{c|str}} 中表示未设置位的代用字符}}
{{par end}}

===异常===
@3,4@ 在 {{c|pos &gt; str.size()}} 时抛出 {{lc|std::out_of_range}}，在有任何 {{c|zero}} 和 {{c|one}} 以外的字符时抛出 {{lc|std::invalid_argument}}。

@5@ 在有任何 {{c|zero}} 和 {{c|one}} 以外的字符时抛出 {{lc|std::invalid_argument}}。

===注解===
{{ftm begin}}
{{ftm|__cpp_lib_constexpr_bitset|std=C++23|value=202207L|给重载 {{vl|3,5}} 添加 constexpr 使 {{tt|std::bitset}} 更 constexpr}}
{{ftm|__cpp_lib_bitset|std=C++26|value=202306L|添加重载 {{vl|4}} {{tt|std::bitset}} 的 {{lc|std::string_view}} 接口}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;bitset&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;climits&gt;

int main() 
{
    // 空构造函数 (1)
    std::bitset&lt;8&gt; b1; // [0,0,0,0,0,0,0,0]
    
    // unsigned long long 构造函数 (2)
    std::bitset&lt;8&gt; b2(42);          // [0,0,1,0,1,0,1,0]
    std::bitset&lt;70&gt; bl(ULLONG_MAX); // [0,0,0,0,0,0,1,1,1,...,1,1,1]（在 C++11 中）
    std::bitset&lt;8&gt; bs(0xfff0);      // [1,1,1,1,0,0,0,0]
    
    // 字符串构造函数 (3)
    std::string bit_string = "110010";
    std::bitset&lt;8&gt; b3(bit_string);       // [0,0,1,1,0,0,1,0]
    std::bitset&lt;8&gt; b4(bit_string, 2);    // [0,0,0,0,0,0,1,0]
    std::bitset&lt;8&gt; b5(bit_string, 2, 3); // [0,0,0,0,0,0,0,1]
    
    // 使用自定义零/一数字的字符串构造函数 (3)
    std::string alpha_bit_string = "aBaaBBaB";
    std::bitset&lt;8&gt; b6(alpha_bit_string, 0, alpha_bit_string.size(),
                      'a', 'B');         // [0,1,0,0,1,1,0,1]
    
    // 使用自定义数字的 char* 构造函数 (5)
    std::bitset&lt;8&gt; b7("XXXXYYYY", 8, 'X', 'Y'); // [0,0,0,0,1,1,1,1]
    
    std::cout &lt;&lt;   "b1: " &lt;&lt; b1 &lt;&lt; "\nb2: " &lt;&lt; b2 &lt;&lt; "\nbl: " &lt;&lt; bl
              &lt;&lt; "\nbs: " &lt;&lt; bs &lt;&lt; "\nb3: " &lt;&lt; b3 &lt;&lt; "\nb4: " &lt;&lt; b4
              &lt;&lt; "\nb5: " &lt;&lt; b5 &lt;&lt; "\nb6: " &lt;&lt; b6 &lt;&lt; "\nb7: " &lt;&lt; b7 &lt;&lt; '\n';
}
|p=true
|output=
b1: 00000000
b2: 00101010
bl: 0000001111111111111111111111111111111111111111111111111111111111111111
bs: 11110000
b3: 00110010
b4: 00000010
b5: 00000001
b6: 01001101
b7: 00001111
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=396|std=C++98|before=重载 {{v|3}} 中使用的零字符和一字符是 {{c|0}} 和 {{c|1}}（它们并不与 {{c|'0'}} 和 {{c|'1'}} 对应）|after=添加参数以提供这些字符的值}}
{{dr list item|wg=lwg|dr=457|std=C++98|before=重载 {{v|2}} 中，{{c|S}} 是 {{c|CHAR_BIT * sizeof(unsigned long)}}，&lt;br&gt;但 {{c/core|unsigned long}} 不保证会使用它所有的位来表示它的值|after=改成考虑值表示的位数}}
{{dr list item|wg=lwg|dr=2250|std=C++98|before={{c|pos &gt; str.size()}} 是 {{c|true}} 时的行为未定义|after=此时始终会抛出异常}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/bitset/dsc set}}
{{dsc inc|cpp/utility/bitset/dsc reset}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
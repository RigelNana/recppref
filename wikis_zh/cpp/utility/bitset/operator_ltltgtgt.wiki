{{cpp/utility/bitset/title|operator&lt;&lt;,&lt;&lt;{{=}},&gt;&gt;,&gt;&gt;{{=}}}}
{{cpp/utility/bitset/navbar}}
{{dcl begin}}
{{dcla|num=1|noexcept=c++11|constexpr=c++23|1=
bitset operator&lt;&lt;( std::size_t pos ) const;
}}
{{dcla|num=2|noexcept=c++11|constexpr=c++23|1=
bitset&amp; operator&lt;&lt;=( std::size_t pos );
}}
{{dcla|num=3|noexcept=c++11|constexpr=c++23|1=
bitset operator&gt;&gt;( std::size_t pos ) const;
}}
{{dcla|num=4|noexcept=c++11|constexpr=c++23|1=
bitset&amp; operator&gt;&gt;=( std::size_t pos );
}}
{{dcl end}}

进行二进制左移（向高索引位置）和二进制右移（向低索引位置）。移入零，移出索引位置的位被丢弃（忽略）。

@1,2@ 进行二进制左移。{{v|2}} 是破坏性的，即对当前对象进行迁移。

@3,4@ 进行二进制右移。{{v|4}} 是破坏性的，即对当前对象进行迁移。

===参数===
{{par begin}}
{{par|pos|移动位的位置数}}
{{par end}}

===返回值===
@1,3@ 含有被迁移位的新 {{tt|bitset}} 对象。

@2,4@ {{c|*this}}

===示例===
{{example
|code=
#include &lt;bitset&gt;
#include &lt;iostream&gt;

int main()
{
    std::bitset&lt;8&gt; b{0b01110010};
    std::cout &lt;&lt; b &lt;&lt; " (初值)\n";

    for (; b.any(); b &gt;&gt;= 1)
    {
        while (!b.test(0))
            b &gt;&gt;= 1;
        std::cout &lt;&lt; b &lt;&lt; '\n';
    }

    std::cout &lt;&lt; b &lt;&lt; " (终值)\n";
}
|output=
01110010 (初值)
00111001
00000111
00000011
00000001
00000000 (终值)
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/dsc rotl}}
{{dsc inc|cpp/numeric/dsc rotr}}
{{dsc inc|cpp/utility/bitset/dsc operator_logic}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
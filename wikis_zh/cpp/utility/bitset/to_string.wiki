{{cpp/utility/bitset/title|to_string}}
{{cpp/utility/bitset/navbar}}
{{dcl begin}}
{{dcl rev begin|num=1}}
{{dcla|anchor=1|until=c++11|1=
template&lt; class CharT, class Traits, class Allocator &gt;
std::basic_string&lt;CharT, Traits, Allocator&gt;
    to_string( CharT zero = CharT('0'),
               CharT one = CharT('1') ) const;
}}
{{dcla|since=c++11|constexpr=c++23|1=
template&lt;
    class CharT = char,
    class Traits = std::char_traits&lt;CharT&gt;,
    class Allocator = std::allocator&lt;CharT&gt;
&gt;
std::basic_string&lt;CharT, Traits, Allocator&gt;
    to_string( CharT zero = CharT('0'),
               CharT one = CharT('1') ) const;
}}
{{dcl rev end}}
{{dcla|num=2|until=c++11|1=
template&lt; class CharT, class Traits &gt;
std::basic_string&lt;CharT, Traits&gt;
    to_string( CharT zero = CharT('0'),
               CharT one = CharT('1') ) const;
}}
{{dcl|num=3|until=c++11|1=
template&lt; class CharT &gt;
std::basic_string&lt;CharT&gt; to_string( CharT zero = CharT('0'),
                                    CharT one = CharT('1') ) const;
}}
{{dcl|num=4|until=c++11|1=
std::string to_string( char zero = '0', char one = '1' ) const;
}}
{{dcl end}}

将 {{tt|bitset}} 的内容转换成字符串。用 {{c|zero}} 表示拥有值 {{c|false}} 的位，用 {{c|one}} 表示拥有值 {{c|true}} 的位。

产生的字符串包含 {{tt|N}} 个字符，它的首字符对应末（第 {{tt|N-1}}）位，它的尾字符对应首位。

{{rrev|until=c++11|
因为函数模板不能有默认模板实参，所以必须提供所有的模板类型实参。重载 {{v|2-4}} 用于简化 {{tt|to_string}} 的调用：
@2@ 使用默认的分配器 {{lc|std::allocator}}。
@3@ 使用默认的字符特征 {{lc|std::char_traits}} 和默认的分配器 {{lc|std::allocator}}。
@4@ 使用默认的字符类型 {{c/core|char}}，默认的字符特征 {{lc|std::char_traits}} 和默认的分配器 {{lc|std::allocator}}。
}}

===参数===
{{par begin}}
{{par|zero|用于表示 {{c|false}} 的字符}}
{{par|one|用于表示 {{c|true}} 的字符}}
{{par end}}

===返回值===
@1@ 转换出的字符串。
@2@ {{c|to_string&lt;CharT, Traits, std::allocator&lt;CharT&gt;&gt;(zero, one)}}。
@3@ {{c|to_string&lt;CharT, std::char_traits&lt;CharT&gt;, std::allocator&lt;CharT&gt;&gt;(zero, one)}}。
@4@ {{c|to_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt;&gt;(zero, one)}}。

===异常===
可能会从 {{lc|std::basic_string}} 的构造函数抛出 {{lc|std::bad_alloc}}。

===注解===
从 C++11 起，函数模板可以有默认模板实参。{{lwg|1113}} 移除了辅助重载 {{vl|2-4}} 并在 {{vl|1}} 中添加了对应的默认模板实参。

===示例===
{{example
|code=
#include &lt;bitset&gt;
#include &lt;iostream&gt;

int main()
{
    std::bitset&lt;8&gt; b(42);
    std::cout &lt;&lt; b.to_string() &lt;&lt; '\n'
              &lt;&lt; b.to_string('*') &lt;&lt; '\n'
              &lt;&lt; b.to_string('O', 'X') &lt;&lt; '\n';
}
|output=
00101010
**1*1*1*
OOXOXOXO
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=396|std=C++98|before=零位和一位会转换成字符 {{c|​0}}​ 和 {{c|1}}（它们并不与 {{c|'0'}} 和 {{c|'1'}} 对应）|after=添加参数以提供这些字符的值}}
{{dr list item|wg=lwg|dr=434|std=C++98|before=需要提供所有模板实参|after=添加重载 {{v|2-4}}}}
{{dr list item|wg=lwg|dr=853|std=C++98|before=重载 {{v|2-4}} 没有通过 {{lwg|396}} 添加的默认实参|after=一起添加}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/bitset/dsc to_ulong}}
{{dsc inc|cpp/utility/bitset/dsc to_ullong}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
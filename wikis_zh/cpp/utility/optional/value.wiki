{{cpp/utility/optional/title|value}}
{{cpp/utility/optional/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|
constexpr T&amp; value() &amp;;
constexpr const T&amp; value() const&amp;;
}}
{{dcl|num = 2|since=c++17|
constexpr T&amp;&amp; value() &amp;&amp;;
constexpr const T&amp;&amp; value() const&amp;&amp;;
}}
{{dcl end}}

若 {{c|*this}} 含值，则返回到所含值的引用。

否则，抛出 {{lc|std::bad_optional_access}} 异常。

===参数===
（无）

===返回值===
到所含值的引用。

===异常===
若 {{c|*this}} 不含值则抛出 {{lc|std::bad_optional_access}}。

===注解===
解引用运算符 {{lc|operator*()}} 不检查此 {{tt|optional}} 是否含值，它可能比 {{tt|value()}} 更有效率。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;optional&gt;

int main()
{
    std::optional&lt;int&gt; opt = {};
 
    try
    {
        [[maybe_unused]] int n = opt.value();
    }
    catch(const std::bad_optional_access&amp; e)
    {
        std::cout &lt;&lt; e.what() &lt;&lt; '\n';
    }

    try
    {
        opt.value() = 42;
    }
    catch(const std::bad_optional_access&amp; e)
    {
        std::cout &lt;&lt; e.what() &lt;&lt; '\n';
    }

    opt = 43;
    std::cout &lt;&lt; *opt &lt;&lt; '\n';

    opt.value() = 44;
    std::cout &lt;&lt; opt.value() &lt;&lt; '\n';
}
&lt;!--|p=true --&gt;
|output=
bad optional access
bad optional access
43
44
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc value_or}}
{{dsc inc|cpp/utility/optional/dsc operator*}}
{{dsc inc|cpp/utility/optional/dsc bad_optional_access}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
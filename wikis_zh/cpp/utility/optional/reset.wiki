{{cpp/utility/optional/title|reset}}
{{cpp/utility/optional/navbar}}
{{ddcl|since=c++17|notes={{mark constexpr since c++20}}&lt;!-- P2231R1 --&gt;|
void reset() noexcept;
}}

若 {{c|*this}} 含值，则如同用 {{c|value().T::~T()}} 销毁此值。否则无效果。

{{c|*this}} 在此调用后不含值。

===注解===
{{ftm begin}}
{{ftm|std=C++20|dr=20|value=202106L|__cpp_lib_optional|完全 {{c/core|constexpr}}}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;optional&gt;

struct A
{
    std::string s;
    A(std::string str) : s(std::move(str)) { std::cout &lt;&lt; " 已构造\n"; }
    ~A() { std::cout &lt;&lt; " 已析构\n"; }
    A(const A&amp; o) : s(o.s) { std::cout &lt;&lt; " 被复制构造\n"; }
    A(A&amp;&amp; o) : s(std::move(o.s)) { std::cout &lt;&lt; " 被移动构造\n"; }

    A&amp; operator=(const A&amp; other)
    {
        s = other.s;
        std::cout &lt;&lt; " 被复制赋值\n";
        return *this;
    }

    A&amp; operator=(A&amp;&amp; other)
    {
        s = std::move(other.s);
        std::cout &lt;&lt; " 被移动赋值\n";
        return *this;
    }
};

int main()
{
    std::cout &lt;&lt; "创建空 optional:\n";
    std::optional&lt;A&gt; opt;

    std::cout &lt;&lt; "创建并赋值:\n";
    opt = A("Lorem ipsum dolor sit amet, consectetur adipiscing elit nec.");

    std::cout &lt;&lt; "重置 optional:\n";
    opt.reset();
    std::cout &lt;&lt; "示例结束\n";
}
|output=
创建空 optional:
构造并赋值:
 已构造
 被移动构造
 已析构
重置 optional:
 已析构
示例结束
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2231R1|std=C++20|before={{tt|reset}} 不是 {{c/core|constexpr}} 而 C++20 中允许非平凡析构在 {{c/core|constexpr}} 中|after=使之为 {{c/core|constexpr}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc operator{{=}}}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
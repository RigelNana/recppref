{{cpp/utility/optional/title|emplace}}
{{cpp/utility/optional/navbar}}
{{dcl begin}}
{{dcla|num=1|since=c++17|constexpr=c++20|
template&lt; class... Args &gt;
T&amp; emplace( Args&amp;&amp;... args );
}}
{{dcla|num=2|since=c++17|constexpr=c++20|
template&lt; class U, class... Args &gt;
T&amp; emplace( std::initializer_list&lt;U&gt; ilist, Args&amp;&amp;... args );
}}
{{dcl end}}

原位构造所含值。若 {{c|*this}} 已在此调用前含值，则调用其析构函数销毁所含值。

@1@ 以 {{c|std::forward&lt;Args&gt;(args)...}} 为参数[[cpp/language/direct_initialization|直接初始化]]（但不是直接列表初始化）所含值。

@2@ 以 {{c|ilist, std::forward&lt;Args&gt;(args)...}} 为参数[[cpp/language/direct_initialization|直接初始化]]（但不是直接列表初始化）所含值。{{cpp/enable if| {{c|std::is_constructible&lt;T, std::initializer_list&lt;U&gt;&amp;, Args&amp;&amp;...&gt;::value}} 为 {{c|true}} }}。

===参数===
{{par begin}}
{{par|args...|传递给构造函数的实参}}
{{par|ilist|传递给构造函数的初始化式列表}}
{{par hreq}}
{{par req|对于重载 {{v|1}}，{{tt|T}} 必须可从 {{tt|Args...}} 构造}}
{{par req|对于重载 {{v|2}}，{{tt|T}} 必须可从 {{lc|std::initializer_list}} 及 {{tt|Args...}} 构造}}
{{par end}}

===返回值===
到新的所含值的引用。

===异常===
被选中的 {{tt|T}} 构造函数所抛出的任何异常。若抛出异常，则 {{c|*this}} 在此调用后不含值（若先前存在所含值，则销毁它）。

===注解===
{{ftm begin}}
{{ftm|std=C++20|dr=20|value=202106L|__cpp_lib_optional|完全 {{c/core|constexpr}} {{vl|1,2}}}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;optional&gt;

struct A
{
    std::string s;

    A(std::string str) : s(std::move(str)), id{n++} { note("+ 构造"); }
    ~A() { note("~ 析构"); }
    A(const A&amp; o) : s(o.s), id{n++} { note("+ 复制构造"); }
    A(A&amp;&amp; o) : s(std::move(o.s)), id{n++} { note("+ 移动构造"); }

    A&amp; operator=(const A&amp; other)
    {
        s = other.s;
        note("= 复制赋值");
        return *this;
    }

    A&amp; operator=(A&amp;&amp; other)
    {
        s = std::move(other.s);
        note("= 移动赋值");
        return *this;
    }

    inline static int n{};
    int id{};
    void note(auto s) { std::cout &lt;&lt; "  " &lt;&lt; s &lt;&lt; " #" &lt;&lt; id &lt;&lt; '\n'; }
};

int main()
{
    std::optional&lt;A&gt; opt;

    std::cout &lt;&lt; "赋值:\n";
    opt = A("Lorem ipsum dolor sit amet, consectetur adipiscing elit nec.");

    std::cout &lt;&lt; "放置:\n";
    // 由于 opt 含值，这亦将销毁该值
    opt.emplace("Lorem ipsum dolor sit amet, consectetur efficitur. ");

    std::cout &lt;&lt; "示例结束\n";
}
|output=
赋值:
 + 构造 #0
 + 移动构造 #1
 ~ 析构 #0
放置:
 ~ 析构 #1
 + 构造 #2
示例结束
 ~ 析构 #2
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2231R1|std=C++20|before={{tt|emplace}} 不是 {{c/core|constexpr}}，而要求的操作在 C++20 中能为 {{c/core|constexpr}}|after=使之为 {{c/core|constexpr}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc operator{{=}}}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
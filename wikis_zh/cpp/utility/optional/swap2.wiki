{{cpp/title|swap{{small|(std::optional)}}}}
{{cpp/utility/optional/navbar}}
{{ddcl|header=optional|since=c++17|notes={{mark constexpr since c++20}}|
template&lt; class T &gt;
void swap( std::optional&lt;T&gt;&amp; lhs,
           std::optional&lt;T&gt;&amp; rhs ) noexcept(/* 见下文 */);
}}

对 {{lc|std::optional}} 重载 {{lc|std::swap}} 算法。交换 {{c|lhs}} 与 {{c|rhs}} 的状态。相当于调用 {{c|lhs.swap(rhs)}}。

{{cpp/enable_if| {{c|std::is_move_constructible_v&lt;T&gt;}} 与 {{c|std::is_swappable_v&lt;T&gt;}} 皆为 {{c|true}} }}。

===参数===
{{par begin}}
{{par|lhs, rhs|要交换状态的 {{tt|optional}} 对象}}
{{par end}}

===返回值===
（无）

===异常===
{{noexcept|noexcept(lhs.swap(rhs))}}

===注解===
{{ftm begin}}
{{ftm|std=C++20|dr=20|value=202106L|__cpp_lib_optional|完全 {{c/core|constexpr}}}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;optional&gt;
#include &lt;string&gt;

int main()
{
    std::optional&lt;std::string&gt; a{"██████"}, b{"▒▒▒▒▒▒"};

    auto print = [&amp;](auto const&amp; s)
    {
        std::cout &lt;&lt; s &lt;&lt; "\t"
                     "a = " &lt;&lt; a.value_or("(null)") &lt;&lt; "  "
                     "b = " &lt;&lt; b.value_or("(null)") &lt;&lt; '\n';
    };

    print("起初:\t");
    std::swap(a, b);
    print("swap(a, b):");
    a.reset();
    print("\n""a.reset():");
    std::swap(a, b);
    print("swap(a, b):");
}
 | output=
起初:		a = ██████  b = ▒▒▒▒▒▒
swap(a, b):	a = ▒▒▒▒▒▒  b = ██████

a.reset():	a = (null)  b = ██████
swap(a, b):	a = ██████  b = (null)
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2231R1|std=C++20|before={{tt|swap}} 不是 {{c/core|constexpr}} 而要求的操作在 C++20 中能为 {{c/core|constexpr}}|after=使之为 {{c/core|constexpr}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc swap}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
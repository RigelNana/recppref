{{cpp/utility/optional/title|or_else}}
{{cpp/utility/optional/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
template&lt; class F &gt;
constexpr optional or_else( F&amp;&amp; f ) const&amp;;
}}
{{dcl|num=2|since=c++23|
template&lt; class F &gt;
constexpr optional or_else( F&amp;&amp; f ) &amp;&amp;;
}}
{{dcl end}}

若 {{c|*this}} 含值则返回它。否则返回 {{c|f}} 的结果。

若 {{c|std::remove_cvref_t&lt;std::invoke_result_t&lt;F&gt;&gt;}} 与 {{c|std::optional&lt;T&gt;}} 不是同一类型则程序非良构。

@1@ 等价于 {{c|return *this ? *this : std::forward&lt;F&gt;(f)();}}。{{cpp/enable_if| {{c|std::copy_constructible&lt;T&gt;}} 与 {{c|std::invocable&lt;F&gt;}} 均得到实现}}。

@2@ 等价于 {{c|return *this ? std::move(*this) : std::forward&lt;F&gt;(f)();}}。{{cpp/enable_if| {{c|std::move_constructible&lt;T&gt;}} 与 {{c|std::invocable&lt;F&gt;}} 均得到实现}}。

===参数===
{{par begin}}
{{par|f|返回 {{c|std::optional&lt;T&gt;}} 的函数或{{named req|Callable}}对象}}
{{par end}}

===返回值===
{{c|*this}} 或 {{c|f}} 的结果，如上所述。

===注解===
{{feature test macro|__cpp_lib_optional|std=C++23|value=202110L|{{lc|std::optional}} 的{{rlps|/#单子式操作}}}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;optional&gt;
#include &lt;string&gt;

int main()
{
    using maybe_int = std::optional&lt;int&gt;;

    auto valueless = []
    {
        std::cout &lt;&lt; "无值: ";
        return maybe_int{0};
    };

    maybe_int x;
    std::cout &lt;&lt; x.or_else(valueless).value() &lt;&lt; '\n';

    x = 42;
    std::cout &lt;&lt; "有值: ";
    std::cout &lt;&lt; x.or_else(valueless).value() &lt;&lt; '\n';

    x.reset();
    std::cout &lt;&lt; x.or_else(valueless).value() &lt;&lt; '\n';
}
|output=
无值: 0
有值: 42
无值: 0
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc value_or}}
{{dsc inc|cpp/utility/optional/dsc and_then}}
{{dsc inc|cpp/utility/optional/dsc transform}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
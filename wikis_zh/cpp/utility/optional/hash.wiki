{{cpp/title|hash{{small|&lt;std::optional&gt;}}}}
{{cpp/utility/optional/navbar}}
{{ddcl|header=optional|since=c++17|1=
template&lt; class T &gt;
struct hash&lt;std::optional&lt;T&gt;&gt;;
}}

{{lc|std::hash}} 对 {{lc|std::optional}} 类的模板特化允许用户获得 {{tt|optional}} 对象所含值的散列值。

若启用了 {{lc|std::hash&lt;std::remove_const_t&lt;T&gt;&gt;}}，则启用特化 {{lc|std::hash&lt;optional&lt;T&gt;&gt;}}，反之禁用它。

在启用时，对于含值的 {{tt|std::optional&lt;T&gt;}} 类型对象 {{tt|o}}，{{tt|std::hash&lt;std::optional&lt;T&gt;&gt;()(o)}} 求值 {{lc|std::hash&lt;std::remove_const_t&lt;T&gt;&gt;()(*o)}}。对于不含值的 {{tt|optional}}，未指定散列值。

此特化的成员函数不保证 {{tt|noexcept}}，因为底层类型的散列可能有抛出。

===模板形参===
{{par begin}}
{{par|T|{{tt|optional}} 对象所含值的类型}}
{{par end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;optional&gt;
#include &lt;string&gt;
#include &lt;unordered_set&gt;

using namespace std::literals;

int main()
{
    using OptStr = std::optional&lt;std::string&gt;;

    // hash&lt;optional&gt; 令 unordered_set 可以使用
    std::unordered_set&lt;OptStr&gt; s =
    {
        "ABC"s, "abc"s, std::nullopt, "def"s
    };

    for (const auto&amp; o : s)
        std::cout &lt;&lt; o.value_or("(null)") &lt;&lt; '\t' &lt;&lt; std::hash&lt;OptStr&gt;{}(o) &lt;&lt; '\n';
}
|p=true
|output=
def     11697390762615875584
(null)  18446744073709548283
abc     3663726644998027833
ABC     11746482041453314842
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc hash}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{title|1=operator==, !=, &lt;, &lt;=, &gt;, &gt;=, &lt;=&gt;{{small|(std::optional)}}}}
{{cpp/utility/optional/navbar}}
{{dcl begin}}
{{dcl header|optional}}
{{dcl h|比较两个 {{tt|optional}} 对象}}
{{dcl|num=1|since=c++17|1=
template&lt; class T, class U &gt; 
constexpr bool operator==( const optional&lt;T&gt;&amp; lhs, const optional&lt;U&gt;&amp; rhs );
}}
{{dcl|num=2|since=c++17|1=
template&lt; class T, class U &gt; 
constexpr bool operator!=( const optional&lt;T&gt;&amp; lhs, const optional&lt;U&gt;&amp; rhs );
}}
{{dcl|num=3|since=c++17|1=
template&lt; class T, class U &gt; 
constexpr bool operator&lt;( const optional&lt;T&gt;&amp; lhs, const optional&lt;U&gt;&amp; rhs );
}}
{{dcl|num=4|since=c++17|1=
template&lt; class T, class U &gt; 
constexpr bool operator&lt;=( const optional&lt;T&gt;&amp; lhs, const optional&lt;U&gt;&amp; rhs );
}}
{{dcl|num=5|since=c++17|1=
template&lt; class T, class U &gt; 
constexpr bool operator&gt;( const optional&lt;T&gt;&amp; lhs, const optional&lt;U&gt;&amp; rhs );
}}
{{dcl|num=6|since=c++17|1=
template&lt; class T, class U &gt; 
constexpr bool operator&gt;=( const optional&lt;T&gt;&amp; lhs, const optional&lt;U&gt;&amp; rhs );
}}
{{dcl|num=7|since=c++20|1=
template&lt; class T, std::three_way_comparable_with&lt;T&gt; U &gt; 
constexpr std::compare_three_way_result_t&lt;T, U&gt;
    operator&lt;=&gt;( const optional&lt;T&gt;&amp; lhs, const optional&lt;U&gt;&amp; rhs );
}}
{{dcl h|比较一个 {{tt|optional}} 对象与 {{tt|nullopt}}}}
{{dcl|num=8|since=c++17|1=
template&lt; class T &gt; 
constexpr bool operator==( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}
{{dcl|num=9|since=c++17|until=c++20|1=
template&lt; class T &gt; 
constexpr bool operator==( std::nullopt_t, const optional&lt;T&gt;&amp; opt ) noexcept;
}}
{{dcl|num=10|since=c++17|until=c++20|1=
template&lt; class T &gt; 
constexpr bool operator!=( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}
{{dcl|num=11|since=c++17|until=c++20|1=
template&lt; class T &gt; 
constexpr bool operator!=( std::nullopt_t, const optional&lt;T&gt;&amp; opt ) noexcept;
}}
{{dcl|num=12|since=c++17|until=c++20|1=
template&lt; class T &gt; 
constexpr bool operator&lt;( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}
{{dcl|num=13|since=c++17|until=c++20|1=
template&lt; class T &gt; 
constexpr bool operator&lt;( std::nullopt_t, const optional&lt;T&gt;&amp; opt ) noexcept;
}}
{{dcl|num=14|since=c++17|until=c++20|1=
template&lt; class T &gt; 
constexpr bool operator&lt;=( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}
{{dcl|num=15|since=c++17|until=c++20|1=
template&lt; class T &gt; 
constexpr bool operator&lt;=( std::nullopt_t, const optional&lt;T&gt;&amp; opt ) noexcept;
}}
{{dcl|num=16|since=c++17|until=c++20|1=
template&lt; class T &gt; 
constexpr bool operator&gt;( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}
{{dcl|num=17|since=c++17|until=c++20|1=
template&lt; class T &gt; 
constexpr bool operator&gt;( std::nullopt_t, const optional&lt;T&gt;&amp; opt ) noexcept;
}}
{{dcl|num=18|since=c++17|until=c++20|1=
template&lt; class T &gt; 
constexpr bool operator&gt;=( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}
{{dcl|num=19|since=c++17|until=c++20|1=
template&lt; class T &gt; 
constexpr bool operator&gt;=( std::nullopt_t, const optional&lt;T&gt;&amp; opt ) noexcept;
}}
{{dcl|num=20|since=c++20|1=
template&lt; class T &gt; 
constexpr std::strong_ordering
    operator&lt;=&gt;( const optional&lt;T&gt;&amp; opt, std::nullopt_t ) noexcept;
}}

{{dcl h|比较一个 {{tt|optional}} 对象与一个值}}
{{dcl|num=21|since=c++17|1=
template&lt; class T, class U &gt; 
constexpr bool operator==( const optional&lt;T&gt;&amp; opt, const U&amp; value );
}}
&lt;!-- 因简化约束需要，会对偶数号码重载交换模板形参 T/U --&gt;
{{dcl|num=22|since=c++17|1=
template&lt; class U, class T &gt;
constexpr bool operator==( const U&amp; value, const optional&lt;T&gt;&amp; opt );
}}
{{dcl|num=23|since=c++17|1=
template&lt; class T, class U &gt;
constexpr bool operator!=( const optional&lt;T&gt;&amp; opt, const U&amp; value );
}}
{{dcl|num=24|since=c++17|1=
template&lt; class U, class T &gt;
constexpr bool operator!=( const U&amp; value, const optional&lt;T&gt;&amp; opt );
}}
{{dcl|num=25|since=c++17|1=
template&lt; class T, class U &gt;
constexpr bool operator&lt;( const optional&lt;T&gt;&amp; opt, const U&amp; value );
}}
{{dcl|num=26|since=c++17|1=
template&lt; class U, class T &gt;
constexpr bool operator&lt;( const U&amp; value, const optional&lt;T&gt;&amp; opt );
}}
{{dcl|num=27|since=c++17|1=
template&lt; class T, class U &gt;
constexpr bool operator&lt;=( const optional&lt;T&gt;&amp; opt, const U&amp; value );
}}
{{dcl|num=28|since=c++17|1=
template&lt; class U, class T &gt;
constexpr bool operator&lt;=( const U&amp; value, const optional&lt;T&gt;&amp; opt );
}}
{{dcl|num=29|since=c++17|1=
template&lt; class T, class U &gt;
constexpr bool operator&gt;( const optional&lt;T&gt;&amp; opt, const U&amp; value );
}}
{{dcl|num=30|since=c++17|1=
template&lt; class U, class T &gt;
constexpr bool operator&gt;( const U&amp; value, const optional&lt;T&gt;&amp; opt );
}}
{{dcl|num=31|since=c++17|1=
template&lt; class T, class U &gt;
constexpr bool operator&gt;=( const optional&lt;T&gt;&amp; opt, const U&amp; value );
}}
{{dcl|num=32|since=c++17|1=
template&lt; class U, class T &gt;
constexpr bool operator&gt;=( const U&amp; value, const optional&lt;T&gt;&amp; opt );
}}
{{dcl|num=33|since=c++20|1=
template&lt; class T, std::three_way_comparable_with&lt;T&gt; U &gt; 
constexpr std::compare_three_way_result_t&lt;T, U&gt;
    operator&lt;=&gt;( const optional&lt;T&gt;&amp; opt, const U&amp; value );
}}

{{dcl end}}

进行 {{tt|optional}} 对象上的比较。

@1-7@ 比较两个 {{tt|optional}} 对象 {{c|lhs}} 和 {{c|rhs}}。只有在 {{c|lhs}} 和 {{c|rhs}} 都含值时才会（使用 {{tt|T}} 的对应运算符）比较所含值。否则， 
*当且仅当 {{c|lhs}} 与 {{c|rhs}} 都不含值时，才认为 {{c|lhs}} ''等于'' {{c|rhs}}。
*当且仅当 {{c|rhs}} 含值且 {{c|lhs}} 不含值时，才认为 {{c|lhs}} ''小于'' {{c|rhs}}。

:@1-6@ 以 {{c|@}} 表示对应的比较运算符，对于每个函数：
{{rev begin}}
{{rev|until=c++26|
如果对应的表达式 {{c|*lhs @ *rhs}} 非良构或它的结果不可转换到 {{c/core|bool}}，那么程序非良构。
}}
{{rev|since=c++26|
{{cpp/enable if|表达式 {{c|*lhs @ *rhs}} 良构且它的结果可转换到 {{c/core|bool}} }}。
}}
{{rev end}}

@8-20@ 比较 {{c|opt}} 与 {{tt|nullopt}}。当与不含值的 {{tt|optional}} 比较时等价于 {{v|1-6}}。
{{rrev|since=c++20|
{{cpp/note synthesized compare}}
}}

@21-33@ 比较 {{c|opt}} 与 {{c|value}}。只有在 {{c|opt}} 含值时才会比较值。否则认为 {{c|opt}} ''小于'' {{c|value}}。

:@21-32@ 以 {{c|@}} 表示对应的比较运算符，对于每个函数：
{{rev begin}}
{{rev|until=c++26|
如果对应的表达式 {{c|*opt @ value}} 或 {{c|value @ *opt}}（取决于操作数的位置）非良构或它的结果不可转换到 {{c/core|bool}}，那么程序非良构。
}}
{{rev|since=c++26|
{{cpp/enable if|满足以下所有条件}}：
* {{tt|U}} 不是 {{lc|std::optional}} 的特化。
* 对应的表达式 {{c|*opt @ value}} 或 {{c|value @ *opt}}（取决于操作数的位置）良构且它的结果可转换到 {{c/core|bool}}。
}}
{{rev end}}

===参数===
{{par begin}}
{{par|lhs, rhs, opt|要比较的 {{tt|optional}} 对象}}
{{par|value|与所含值比较的值}}
{{par end}}

===返回值===
@1@ {{c multi|lhs.has_value() !{{=}} rhs.has_value() ? false :|    (lhs.has_value() {{==}} false ? true : *lhs {{==}} *rhs)}}
@2@ {{c multi|lhs.has_value() !{{=}} rhs.has_value() ? true :|    (lhs.has_value() {{==}} false ? false : *lhs !{{=}} *rhs)}}
@3@ {{c|!rhs ? false : (!lhs ? true : *lhs &lt; *rhs)}}
@4@ {{c|1=!lhs ? true : (!rhs ? false : *lhs &lt;= *rhs)}}
@5@ {{c|!lhs ? false : (!rhs ? true : *lhs &gt; *rhs)}}
@6@ {{c|1=!rhs ? true : (!lhs ? false : *lhs &gt;= *rhs)}}
@7@ {{c|1=lhs &amp;&amp; rhs ? *lhs &lt;=&gt; *rhs : lhs.has_value() &lt;=&gt; rhs.has_value()}}

@8,9@ {{c|!opt}}
@10,11@ {{c|opt.has_value()}}
@12@ {{c|false}}
@13@ {{c|opt.has_value()}}
@14@ {{c|!opt}}
@15@ {{c|true}}
@16@ {{c|opt.has_value()}}
@17@ {{c|false}}
@18@ {{c|true}}
@19@ {{c|!opt}}
@20@ {{c|1=opt.has_value() &lt;=&gt; false}}

@21@ {{c|1=opt.has_value() ? *opt == value : false}}
@22@ {{c|1=opt.has_value() ? value == *opt : false}}
@23@ {{c|1=opt.has_value() ? *opt != value : true}}
@24@ {{c|1=opt.has_value() ? value != *opt : true}}
@25@ {{c|1=opt.has_value() ? *opt &lt; value  : true}}
@26@ {{c|1=opt.has_value() ? value &lt; *opt  : false}}
@27@ {{c|1=opt.has_value() ? *opt &lt;= value : true}}
@28@ {{c|1=opt.has_value() ? value &lt;= *opt : false}}
@29@ {{c|1=opt.has_value() ? *opt &gt; value  : false}}
@30@ {{c|1=opt.has_value() ? value &gt; *opt  : true}}
@31@ {{c|1=opt.has_value() ? *opt &gt;= value : false}}
@32@ {{c|1=opt.has_value() ? value &gt;= *opt : true}}
@33@ {{c|1=opt.has_value() ? *opt &lt;=&gt; value : std::strong_ordering::less}}

===异常===
@1-7@ {{cpp/impldef exception item}}
@21-33@ 在比较抛出时抛出其所抛出的异常。

===注解===
{{feature test macro|__cpp_lib_constrained_equality|受约束的 {{lc|std::optional}} 相关比较运算符|value=202403L|std=C++26}}

===缺陷报告===
{{dr list begin}}
{{dr list item|dr=2945|wg=lwg|std=C++17|before=“与值比较”情况的模板形参顺序不一致|after=使之一致}}
{{dr list end}}

{{langlinks|en|es|ja|ru}}
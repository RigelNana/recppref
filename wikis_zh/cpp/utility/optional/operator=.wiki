{{cpp/utility/optional/title|operator{{=}}}}
{{cpp/utility/optional/navbar}}

{{dcl begin}}
{{dcla|num=1|since=c++17|constexpr=c++20|1=
optional&amp; operator=( std::nullopt_t ) noexcept;
}}
{{dcla|num=2|since=c++17|1=
constexpr optional&amp; operator=( const optional&amp; other );
}}
{{dcla|num=3|since=c++17|1=
constexpr optional&amp; operator=
    ( optional&amp;&amp; other ) noexcept(/* 见下文 */);
}}
{{dcla|num=4|since=c++17|constexpr=c++20|1=
template&lt; class U &gt;
optional&amp; operator=( const optional&lt;U&gt;&amp; other );
}}
{{dcla|num=5|since=c++17|constexpr=c++20|1=
template&lt; class U &gt;
optional&amp; operator=( optional&lt;U&gt;&amp;&amp; other );
}}
{{dcla|num=6|since=c++17|constexpr=c++20|1=
template&lt; class U = T &gt; 
optional&amp; operator=( U&amp;&amp; value );
}}
{{dcl end}}

以 {{c|other}} 的内容替换 {{c|*this}} 的内容。 

@1@ 如果 {{c|*this}} 含值，那么通过调用 {{box|{{rlpsi|/#val}}{{sep}}{{c/core|-&gt;T::~T()}}}} 来销毁包含的值；否则没有效果。此调用后 {{c|*this}} 不含值。

@2-5@ 赋值 {{c|other}} 的状态。此调用后 {{lc|has_value()}} 会返回 {{c|other.has_value()}}。
{|class="wikitable"
!style="min-width: 100px"|效果
!{{normal|{{c|*this}}}} 含值
!{{normal|{{c|*this}}}} 不含值
|-
!{{normal|{{c|other}}}} 含值
|
* 对于重载 {{v|2,4}}，将 {{c|*other}} 赋给包含的值
* 对于重载 {{v|3,5}}，将 {{c|std::move(*other)}} 赋给包含的值
|
* 对于重载 {{v|2,4}}，以 {{c|*other}} [[cpp/language/direct initialization|直接非列表初始化]]包含的值
* 对于重载 {{v|3,5}}，以 {{c|std::move(*other)}} 直接非列表初始化包含的值
|-
!{{normal|{{c|other}}}} 不含值
|通过调用 {{box|{{rlpsi|/#val}}{{sep}}{{c/core|-&gt;T::~T()}}}} 来销毁包含的值
|没有效果
|}

:@2@ 如果 {{c|std::is_copy_constructible_v&lt;T&gt;}} 或 {{c|std::is_copy_assignable_v&lt;T&gt;}} 是 {{c|false}}，那么此赋值运算符被定义为弃置。
:@@ 如果 {{c|std::is_trivially_copy_constructible_v&lt;T&gt;}}、{{c|std::is_trivially_copy_assignable_v&lt;T&gt;}} 和 {{c|std::is_trivially_destructible_v&lt;T&gt;}} 都是 {{c|true}}，那么此赋值运算符是平凡的。

:@3@ {{cpp/enable if| {{c|std::is_move_constructible_v&lt;T&gt;}} 和 {{c|std::is_move_assignable_v&lt;T&gt;}} 都是 {{c|true}} }}。
:@@ 如果 {{c|std::is_trivially_move_constructible_v&lt;T&gt;}}、 {{c|std::is_trivially_move_assignable_v&lt;T&gt;}} 和 {{c|std::is_trivially_destructible_v&lt;T&gt;}} 都是 {{c|true}}，那么此赋值运算符是平凡的。

@4,5@ {{cpp/enable if|plural=yes|满足以下所有条件}}：
* 以下 12 个值都是 {{c|false}}&lt;ref&gt;也就是说，从任何（可有 const 限定的）{{c/core|std::optional&lt;U&gt;}} 类型的表达式都不能构造，转换到或赋值到 {{tt|T}}。&lt;/ref&gt;:
** {{c|std::is_constructible_v&lt;T, std::optional&lt;U&gt;&amp;&gt;}}
** {{c|std::is_constructible_v&lt;T, const std::optional&lt;U&gt;&amp;&gt;}}
** {{c|std::is_constructible_v&lt;T, std::optional&lt;U&gt;&amp;&amp;&gt;}}
** {{c|std::is_constructible_v&lt;T, const std::optional&lt;U&gt;&amp;&amp;&gt;}}
** {{c|std::is_convertible_v&lt;std::optional&lt;U&gt;&amp;, T&gt;}}
** {{c|std::is_convertible_v&lt;const std::optional&lt;U&gt;&amp;, T&gt;}}
** {{c|std::is_convertible_v&lt;std::optional&lt;U&gt;&amp;&amp;, T&gt;}}
** {{c|std::is_convertible_v&lt;const std::optional&lt;U&gt;&amp;&amp;, T&gt;}}
** {{c|std::is_assignable_v&lt;T&amp;, std::optional&lt;U&gt;&amp;&gt;}}
** {{c|std::is_assignable_v&lt;T&amp;, const std::optional&lt;U&gt;&amp;&gt;}}
** {{c|std::is_assignable_v&lt;T&amp;, std::optional&lt;U&gt;&amp;&amp;&gt;}}
** {{c|std::is_assignable_v&lt;T&amp;, const std::optional&lt;U&gt;&amp;&amp;&gt;}}
* 对于重载 {{v|4}}，{{c|std::is_constructible_v&lt;T, const U&amp;&gt;}} and {{c|std::is_assignable_v&lt;T&amp;, const U&amp;&gt;}} 都是 {{c|true}}。
* 对于重载 {{v|5}}，{{c|std::is_constructible_v&lt;T, U&gt;}} and {{c|std::is_assignable_v&lt;T&amp;, U&gt;}} 都是 {{c|true}}。

@6@ 如果 {{c|*this}} 含值，那么将 {{c|std::forward&lt;U&gt;(value)}} 赋给包含的值；否则以 {{c|std::forward&lt;U&gt;(value)}} 直接非列表初始化包含的值。此调用后 {{c|*this}} 含值。
@@ {{cpp/enable if|满足以下所有条件}}：
* {{rev inl|until=c++20|{{c/core|std::decay_t&lt;U&gt;}}}}{{rev inl|since=c++20|{{c/core|std::remove_cvref_t&lt;U&gt;}}}} 不是 {{c/core|std::optional&lt;T&gt;}}。
* {{c|std::is_constructible_v&lt;T, U&gt;}} 是 {{c|true}}。
* {{c|std::is_assignable_v&lt;T&amp;, U&gt;}} 是 {{c|true}}。
* 满足以下任意条件：
** {{tt|T}} 不是{{ls|cpp/language/type#标量类型}}。
** {{c/core|std::decay_t&lt;U&gt;}} 不是 {{tt|T}}。

&lt;references/&gt;

===参数===
{{par begin}}
{{par|other|要赋值其所含值的 {{tt|optional}} 对象}}
{{par|value|要赋值给所含值的值}}
{{par end}}

===返回值===
{{c|*this}}

===异常===
@2-6@ 抛出 {{tt|T}} 的构造函数或赋值运算符所抛的任何异常。如果抛出异常，那么 {{c|*this}}（还有情况 {{vl|2-5}} 的 {{c|other}}）的初始化状态不改变，即对象含值的情况下它仍然含值，反之亦然。{{c|value}} 和 {{c|*this}} 及 {{c|other}} 所含有的值的内容依赖于异常来源操作（复制构造函数、移动构造函数等）的异常安全保证。

@3@ 拥有下列 {{noexcept|std::is_nothrow_move_assignable_v&lt;T&gt; &amp;&amp;
             std::is_nothrow_move_constructible_v&lt;T&gt;}}

===注解===
{{tt|optional}} 对象 {{c|op}} 可以通过 {{c|1=op = {};}} 和 {{c|1=op = nullopt;}} 变成空 {{tt|optional}}。第一个表达式以 {{c|{}&lt;!----&gt;}} 构造空的 {{c|optional}} 对象并将它赋值给 {{c|op}}。

{{ftm begin}}
{{ftm|std=C++20|dr=20|value=202106L|__cpp_lib_optional|完全 {{c/core|constexpr}} {{vl|1}}, {{vl|4-6}}}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;optional&gt;

int main()
{
    std::optional&lt;const char*&gt; s1 = "abc", s2; // 构造函数
    s2 = s1; // 赋值
    s1 = "def"; // 衰变赋值（U = char[4], T = const char*）
    std::cout &lt;&lt; *s2 &lt;&lt; ' ' &lt;&lt; *s1 &lt;&lt; '\n';
}
|output=
abc def
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3886|std=C++17|before=重载 {{vl|6}} 的默认模板实参是 {{tt|T}}|after=改成 {{c/core|std::remove_cv_t&lt;T&gt;}}}}
{{dr list item|paper=P0602R4|std=C++17|before=即使底层操作平凡，复制/移动赋值运算符亦可能不平凡|after=要求传播平凡性}}
{{dr list item|paper=P2231R1|std=C++20|before=重载 {{vl|1,4-6}} 不是 {{c/core|constexpr}} 的|after=使之为 {{c/core|constexpr}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc emplace}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
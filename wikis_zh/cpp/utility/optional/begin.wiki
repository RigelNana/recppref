{{cpp/utility/optional/title|begin}}
{{cpp/utility/optional/navbar}}
{{dcl begin}}
{{dcl|since=c++26|
constexpr iterator begin() noexcept;
}}
{{dcl|since=c++26|
constexpr const_iterator begin() const noexcept;
}}
{{dcl end}}

若 {{c|*this}} 含值，则返回指向所含值的迭代器。否则返回尾后迭代器值。

{{image|range-begin-end.svg}}

===返回值===
若 {{c|has_value()}} 为 {{c|true}} 则返回指向所含值的迭代器。否则返回尾后迭代器。

===复杂度===
常数。

===注解===
{{feature test macro|std=C++26|value=202406L|__cpp_lib_optional_range_support|{{tt|std::optional}} 的范围支持}}

===示例===
{{example
|code=
#include &lt;optional&gt;
#include &lt;print&gt;
#include &lt;vector&gt;

int main()
{
    constexpr std::optional&lt;int&gt; none{std::nullopt};
    constexpr std::optional&lt;int&gt; some{42};

    static_assert(none.begin() == none.end());
    static_assert(some.begin() != some.end());

    // 支持范围 for 循环
    for (int i : none)
        std::println("'none' 的值为 {}", i);

    for (int i : some)
        std::println("'some' 的值为 {}", i);

    std::optional&lt;std::vector&lt;int&gt;&gt; many({0, 1, 2});
    for (const auto&amp; v : many)
        std::println("'many' 的值为 {}", v);
}
|output=
'some' 的值为 42
'many' 的值为 [0, 1, 2]
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/optional/dsc end}}
{{dsc end}}

{{langlinks|en|es|ja}}
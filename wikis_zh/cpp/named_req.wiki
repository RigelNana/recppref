{{title|具名要求}}
{{cpp/named req/navbar}}

此页面中列出的''具名要求''，是 C++ 标准的规范性文本中使用的具名要求，用于定义标准库的期待。

确保以满足这些要求的模板实参实例化标准库模板是程序员的重担。若不这么做，则可能导致非常复杂的编译器诊断。

某些具名要求已经在 C++20 中以[[cpp/language/constraints|概念]]语言特性进行了形式化。

{{dsc begin}}
{{dsc h1|基本概念}}
{{dsc named req|cpp/named req/DefaultConstructible|指定可以默认构造该类型的对象}}
{{dsc named req|cpp/named req/MoveConstructible|指定可以从右值构造该类型的对象|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/CopyConstructible|指定可以从左值构造该类型的对象}}
{{dsc named req|cpp/named req/MoveAssignable|指定可以从右值对该类型的对象赋值|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/CopyAssignable|指定可以从左值对该类型的对象赋值}}
{{dsc named req|cpp/named req/Destructible|指定可以销毁该类型的对象}}

{{dsc h1|类型属性}}
{{dsc|注意，标准并未定义这个子类别中指定的各名字的具名要求。&lt;br&gt;它们是由核心语言定义的类型分类。将它们作为具名要求于此处包含只是为了一致性。}}
{{dsc named req|cpp/named req/ScalarType|不是数组类型或类类型的对象类型}}
{{dsc named req|cpp/named req/PODType|POD（简旧数据）结构体，与 C 的 {{c/core|struct}} 兼容|notes={{mark deprecated c++20}}}}
{{dsc named req|cpp/named req/TriviallyCopyable|这些类型的对象能够在复制底层字节后保持原值|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/TrivialType|这些类型的对象可以被平凡地构造和复制|notes={{mark c++11}}{{mark deprecated c++26}}}}
{{dsc named req|cpp/named req/StandardLayoutType|这些类型适用于与其他语言编写的代码交流|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/ImplicitLifetimeType|这些类型的对象可以被隐式创建，它们的生存期也可以隐式开始}}

{{dsc h1|全库范围的要求}}
{{dsc named req|cpp/named req/BooleanTestable&lt;!-- LWG2114, P2167R3 --&gt;|布尔运算（{{c/core|operator&amp;&amp;}}、 {{c/core|operator{{!!}}}} 及 {{c/core|operator!}}）拥有通常语义}}
{{dsc named req|cpp/named req/EqualityComparable|{{tt|1=operator==}} 是一种等价关系}}
{{dsc named req|cpp/named req/LessThanComparable|{{tt|operator&lt;}} 是一种严格弱序关系}}
{{dsc named req|cpp/named req/Swappable|可用无限定的非成员函数调用 {{c|swap()}} 进行交换的类型|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/ValueSwappable|解引用为某种{{named req|Swappable}}类型的{{named req|Iterator}}|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/NullablePointer|支持空值的指针式类型|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/Hash|{{named req|FunctionObject}}，对于不同输入值产生相同输出具有很低概率|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/Allocator|包含分配信息的类类型}}
{{dsc named req|cpp/named req/FunctionObject|能以函数调用语法进行调用的对象}}
{{dsc named req|cpp/named req/Callable|定义了调用操作的类型}}
{{dsc named req|cpp/named req/Predicate|{{named req|FunctionObject}}，对于一个实参，返回一个可转换为 {{c/core|bool}} 的值而不改动实参}}
{{dsc named req|cpp/named req/BinaryPredicate|{{named req|FunctionObject}}，对于两个实参，返回一个可转换为 {{c/core|bool}} 的值而不改动各实参}}
{{dsc named req|cpp/named req/Compare|建立一种顺序关系的{{named req|BinaryPredicate}}}}
{{dsc end}}

{{dsc begin}}
{{dsc h1|容器}}
{{dsc named req|cpp/named req/Container|允许通过迭代器访问元素的数据结构}}
{{dsc named req|cpp/named req/ReversibleContainer|使用双向迭代器的容器}}
{{dsc named req|cpp/named req/AllocatorAwareContainer|使用分配器的容器|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/SequenceContainer|线性存储各元素的容器}}
{{dsc named req|cpp/named req/ContiguousContainer|在相邻内存地址中存储各元素的容器|notes={{mark c++17}}}}
{{dsc named req|cpp/named req/AssociativeContainer|将元素与键相关联而存储它们的容器}}
{{dsc named req|cpp/named req/UnorderedAssociativeContainer|将元素与键关联并将它们存储于桶中的容器|notes={{mark c++11}}}}
{{dsc h2|容器元素}}
{{dsc named req|cpp/named req/DefaultInsertable|可在未初始化存储中默认构造的元素|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/CopyInsertable|可在未初始化存储中复制构造的元素|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/MoveInsertable|可在未初始化存储中移动构造的函数|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/EmplaceConstructible|可在未初始化存储中构造的元素|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/Erasable|可用分配器销毁的元素|notes={{mark c++11}}}}

{{dsc h1|迭代器}}
{{dsc named req|cpp/named req/Iterator|title=LegacyIterator|在一些数据结构内访问数据的通用概念}}
{{dsc named req|cpp/named req/InputIterator|title=LegacyInputIterator|可用于读数据的迭代器}}
{{dsc named req|cpp/named req/OutputIterator|title=LegacyOutputIterator|可用于写数据的迭代器}}
{{dsc named req|cpp/named req/ForwardIterator|title=LegacyForwardIterator|可用于多次读数据的迭代器}}
{{dsc named req|cpp/named req/BidirectionalIterator|title=LegacyBidirectionalIterator|可增可减的迭代器}}
{{dsc named req|cpp/named req/RandomAccessIterator|title=LegacyRandomAccessIterator|可在常数时间内增加的迭代器}}
{{dsc named req|cpp/named req/ContiguousIterator|title=LegacyContiguousIterator|指向连续分配元素的迭代器|notes={{mark c++17}}}}
{{dsc named req|cpp/named req/ConstexprIterator|能在常量表达式求值中使用的迭代器|notes={{mark c++20}}}}

{{dsc h1|流 I/O 函数}}
&lt;!-- 27.7.2.3[istream.unformatted]/1 --&gt;
{{dsc named req|cpp/named req/UnformattedInputFunction|不跳过前导空格并对处理字符计数的流输入函数}}
&lt;!-- 27.7.2.2.1[istream.formatted.reqmts] --&gt;
{{dsc named req|cpp/named req/FormattedInputFunction|跳过前导空格的流输入函数}}
&lt;!-- 27.7.3.7[ostream.unformatted]/1 --&gt;
{{dsc named req|cpp/named req/UnformattedOutputFunction|基本流输出函数}}
&lt;!-- 27.7.3.6.1[ostream.formatted.reqmts] --&gt;
{{dsc named req|cpp/named req/FormattedOutputFunction|出错时设置失败位并返回流引用的流输出函数}}

{{dsc h1|格式化器}}
{{dsc named req|cpp/named req/BasicFormatter|抽象针对给定格式化实参类型和字符类型的格式化操作|notes={{mark c++20}}}}
{{dsc named req|cpp/named req/Formatter|定义[[cpp/utility/format|格式化库]]所用的函数|notes={{mark c++20}}}}

{{dsc h1|随机数生成}}
{{dsc named req|cpp/named req/SeedSequence|消耗一个整数序列，产出一个 32 位无符号值的序列|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/UniformRandomBitGenerator|返回均匀分布的随机无符号整数|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/RandomNumberEngine|由种子定义的确定性{{named req|UniformRandomBitGenerator}}|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/RandomNumberEngineAdaptor|对另一个{{named req|RandomNumberEngine}}的输出进行变换的{{named req|RandomNumberEngine}}|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/RandomNumberDistribution|返回服从给定数学概率密度函数分布的随机数|notes={{mark c++11}}}}

{{dsc h1|并发}}
{{dsc named req|cpp/named req/BasicLockable|为执行代理（即线程）提供排他所有权语义|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/Lockable|支持尝试性锁获取的{{named req|BasicLockable}}|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/TimedLockable|支持定时锁获取的{{named req|Lockable}}|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/SharedLockable|为执行代理（即线程）提供共享所有权语义|notes={{mark c++14}}&lt;!-- P2160R1 --&gt;}}
{{dsc named req|cpp/named req/SharedTimedLockable|支持定时锁获取的{{named req|SharedLockable}}|notes={{mark c++14}}&lt;!-- P2160R1 --&gt;}}
{{dsc named req|cpp/named req/Mutex|提供免受数据竞争的保护和顺序一致同步操作的{{named req|Lockable}}|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/TimedMutex|提供免受数据竞争的保护和顺序一致同步操作的{{named req|TimedLockable}}|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/SharedMutex|支持共享所有权语义的{{named req|Mutex}}|notes={{mark c++17}}}}
{{dsc named req|cpp/named req/SharedTimedMutex|支持共享所有权语义的{{named req|TimedMutex}}|notes={{mark c++14}}}}

{{dsc h1|范围}}
{{dsc named req|cpp/named req/RangeAdaptorObject|从 {{lconcept|viewable_range}} 和其他实参创造[[cpp/ranges#范围适配器|范围适配器]]的{{named req|FunctionObject}}|notes={{mark c++20}}}}
{{dsc named req|cpp/named req/RangeAdaptorClosureObject|支持管道运算符的{{named req|FunctionObject}}|notes={{mark c++20}}}}

{{dsc h1|多维视图定制化}}
{{dsc named req|cpp/named req/LayoutMapping|控制 {{lc|mdspan}} 中的多维索引|notes={{mark c++23}}}}
{{dsc named req|cpp/named req/LayoutMappingPolicy|保有{{named req|LayoutMapping}}要求的策略|notes={{mark c++23}}}}
{{dsc named req|cpp/named req/AccessorPolicy|控制 {{lc|mdspan}} 中对数据句柄访问的策略|notes={{mark c++23}}}}

{{dsc h1|其他}}
{{dsc named req|cpp/named req/UnaryTypeTrait|描述一个类型的一项性质|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/BinaryTypeTrait|描述两个类型间的一种关系|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/TransformationTrait|修改一个类型的一项性质|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/Clock|聚合一种时长，一种时间点，和一个获取当前时间点的函数|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/TrivialClock|不抛异常的{{named req|Clock}}|notes={{mark c++11}}}}
{{dsc named req|cpp/named req/CharTraits|为字符类型定义一些类型和函数}}
{{dsc named req|cpp/named req/BitmaskType|位集合、整数或枚举}} &lt;!-- $17.5.2.1.3[bitmask types] --&gt;
{{dsc named req|cpp/named req/NumericType|初始化相当于赋值的类型}} &lt;!-- C++98/03 §26.1[lib.numeric.requirements], C++11/14 §26.2[numeric.requirements] --&gt;
{{dsc named req|cpp/named req/RegexTraits|定义[[cpp/regex|正则表达式库]]所使用的各个类型和函数|notes={{mark c++11}}}} &lt;!-- C++11/14 §28.3[re.req] --&gt;
{{dsc named req|cpp/named req/LiteralType|拥有 constexpr 构造函数的类型|notes={{mark c++11}}}}
{{dsc end}}

{{todo|任何其他遗漏的具名要求？}}

{{langlinks|ar|de|en|es|fr|it|ja|pt|ru}}
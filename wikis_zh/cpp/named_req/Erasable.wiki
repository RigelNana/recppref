{{cpp/named req/title|Erasable|notes={{mark since c++11}}}}
{{cpp/named req/navbar}}

指定该类型的对象能以给定的{{named req|Allocator}}销毁。

===要求===
给定以下类型、值和表达式：
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|T}}|对象类型}}
{{dsc|{{tt|A}}|分配器类型}}
{{dsc|{{tt|X}}|满足以下所有条件的容器类型：
* {{tt|X::value_type}} 与 {{tt|T}} 相同。
* {{tt|X::allocator_type}} 与 {{c/core|std::allocator_traits&lt;A&gt;::rebind_alloc&lt;T&gt;}} 相同。
}}
{{dsc hitem|值|定义}}
{{dsc|{{c|m}}|{{tt|A}} 类型左值}}
{{dsc|{{c|p}}|{{tt|T*}} 类型指针}}
{{dsc end}}

如果表达式 {{c|std::allocator_traits&lt;A&gt;::destroy(m, p)}} 良构，那么 {{tt|T}} 从 {{tt|X}} {{named req/core|Erasable}}。

===注解===
所有[[cpp/container|标准库容器]]都要求它们的值类型满足{{named req/core|Erasable}}。

{{rrev multi
|until1=c++20|rev1=
对于默认分配器，此要求等价于 {{c|p-&gt;~T()}} 的合法性，它接受拥有可访问的析构函数的类类型和所有标量类型，但拒绝数组类型、函数类型、引用类型和 {{c/core|void}}。
|rev2=
对于默认分配器，此要求等价于 {{c|std::destroy_at(p)}} 的合法性，它接受拥有可访问的析构函数的类类型和所有标量类型，还有其数组。
}}

尽管 C++23 前要求在销毁 {{lc|std::basic_string}} 的元素时使用定制的 {{tt|destroy}}，所有实现都使用默认机制。{{wg21|P1072R10}} 更正了该要求以匹配既存实践。

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=N3346|std=C++11|before=没有指定某类型的对象是否可以通过分配器进行销毁的要求|after=添加该要求}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc|{{named req|CopyInsertable}}}}
{{dsc|{{named req|MoveInsertable}}}}
{{dsc|{{named req|EmplaceConstructible}}}}
{{dsc|{{named req|Destructible}}}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/named req/title|RegexTraits}}
{{cpp/named req/navbar}}

{{named req|RegexTraits}}是一种特征类，它在用作 {{c|std::basic_regex}} 的模板类型形参时，抽象对给定字符类型所需的操作。

===要求===
给定
* {{c|CharT}}，字符类型
* {{c|X}}，{{c|CharT}} 类型的{{named req/core|RegexTraits}}类型
* {{c|u}}，{{c|X}} 类型的对象
* {{c|v}}，{{c|const X}} 类型的对象
* {{c|p}}，{{c|const CharT*}} 类型的值
* {{c|I1, I2}}，输入迭代器
* {{c|F1, F2}}，向前迭代器
* {{c|c}}，{{c|const CharT}} 类型的值
* {{c|s}}，{{c|X::string_type}} 类型的对象
* {{c|cs}}，{{c|const X::string_type}} 类型的对象
* {{c|b}}，{{c|bool}} 类型的值
* {{c|I}}，{{c|int}} 类型的值
* {{c|cl}}，{{c|X::char_class_type}} 类型的对象
* {{c|loc}}，{{c|X::locale_type}} 类型的对象


{|class=wikitable
!表达式||返回类型||语义
|-
|{{c|X::char_type}} || {{c|CharT}} ||用于指代字符类型
|-
|{{c|X::string_type}} || {{c|std::basic_string&lt;CharT&gt;}} ||
|-
|{{c|X::locale_type}} ||  || 表示此特征类所用本地环境的{{named req|CopyConstructible}}类型。
|-
|{{c|X::char_class_type}} ||  || 表示特定字符分类的{{named req|BitmaskType}}。
|-
|{{c|X::length(p)}} || {{c|std::size_t}} || 返回：满足 {{c|p[i] {{==}} 0}} 的最小 {{c|i}}。复杂度与  {{c|i}} 成线性。
|-
|{{c|v.translate(c)}} || {{c|X::char_type}} || 返回：一个字符，使得对于任何被认为等价于 {{c|c}} 的字符 {{c|d}}，有 {{c|v.translate(c) {{==}} v.translate(d)}}。
|-
|{{c|v.translate_nocase(c)}} || {{c|X::char_type}} || 返回：一个字符，使得对于任何被认为忽略大小写等价于 {{c|c}} 的字符 {{c|C}}，有 {{c|v.translate_nocase(c) {{==}} v.translate_nocase(C)}}。
|-
|{{c|v.transform(F1, F2)}} || {{c|X::string_type}} || 返回：迭代器范围 {{c|[F1, F2)}} 所代表的字符序列的排序键，使得若字符序列 {{c|[G1, G2)}} 排序于字符序列 {{c|[H1, H2)}} 前，则 {{c|v.transform(G1, G2) &lt; v.transform(H1, H2)}}。
|-
|{{c|v.transform_primary(F1, F2)}} || {{c|X::string_type}} || 返回：迭代器范围 {{c|[F1, F2)}} 所代表的字符序列的排序键，使得若字符序列 {{c|[G1, G2)}} 在忽略大小写的情况下排序于字符序列 {{c|[H1, H2)}} 前，则 {{c|v.transform_primary(G1, G2) &lt; v.transform_primary(H1, H2)}}。
|-
|{{c|v.lookup_collatename(F1, F2)}} || {{c|X::string_type}} || 返回：
* 空字符串，若字符序列不是合法的校排元素
* 否则为字符序列，表示由迭代器范围 {{c|[F1, F2)}} 所代表的字符序列组成的校排元素
|-
|{{c|v.lookup_classname(F1, F2, b)}} || {{c|X::char_class_type}} ||
* 转换迭代器范围 {{c|[F1, F2)}} 所指代的字符序列为之后能传递给 {{c|isctype}} 的{{named req|BitmaskType}}值
* 能将从 {{c|lookup_classname}} 返回的值相互逐位或；结果值表示任一对应字符类中的成员关系
* 若 {{c|b}} 为 {{c|true}}，则返回的位掩码适于不考虑其大小写匹配字符。
* 若字符序列不是 {{c|X}} 所辨识的字符类的名称，则返回 {{c|0}}。
* 返回值应当与序列中字符的大小写无关。
|-
|{{c|v.isctype(c, cl)}} || {{c|bool}} || 返回：{{c|c}} 是否为 {{c|cl}} 所指代的字符类之一的成员。
|-
|{{c|v.value(c, I)}} || {{c|int}} || 返回：
* 数位 {{c|c}} 在底 {{c|I}} 进制中表示的值，若字符 {{c|c}} 为底 {{c|I}} 进制中合法的数位
* 否则为 {{c|-1}}
|-
|{{c|u.imbue(loc)}} || {{c|X::locale_type}} ||
* 以本地环境 {{c|loc}} 浸染 {{c|u}}
* 返回：{{c|v}} 先前使用的本地环境，若存在。
|-
|{{c|v.getloc()}} || {{c|X::locale_type}} || 返回：{{c|v}} 先前使用的本地环境，若存在。
|}


===标准库===
下列标准库类满足{{named req/core|RegexTraits}}：
{{dcl begin}}
{{dcl | notes={{mark since c++11}}&lt;br&gt;{{mark since c++11}} |
template&lt;&gt; class regex_traits&lt;char&gt;;
template&lt;&gt; class regex_traits&lt;wchar_t&gt;;
}}
{{dcl end}}

{{langlinks|de|es|en|fr|it|ja|pt|ru}}
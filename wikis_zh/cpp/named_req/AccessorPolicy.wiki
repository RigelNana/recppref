{{cpp/named req/title|AccessorPolicy|notes={{mark since c++23}}}}
{{cpp/named req/navbar}}

{{named req|AccessorPolicy}}定义了从给定的指向元素的数据把柄和一个索引，如何访问元素。它被用作 {{c/core|std::mdspan}} 的一项策略，以指定如何使用底层一维索引访问元素的引用。

===要求===
如果类型 {{tt|A}} 实现了 {{lconcept|copyable}}，并且以下各项均为 {{c|true}}，那么它满足{{named req/core|AccessorPolicy}}：
* {{c|std::is_nothrow_move_constructible_v&lt;A&gt;}}
* {{c|std::is_nothrow_move_assignable_v&lt;A&gt;}}
* {{c|std::is_nothrow_swappable_v&lt;A&gt;}}

而且，给定下列类型和值，下表中展示的各表达式均有效并具有指定的语义：

====凡例====
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|A}}|访问器策略类型}}
{{dsc|{{tt|OP}}|偏移策略类型}}
{{dsc hitem|值|定义}}
{{dsc|{{c|a}}|（可有 const 限定的）{{tt|A}} 类型的值}}
{{dsc|{{c|p}}|（可有 const 限定的）{{tt|A::data_handle_type}} 类型的值}}
{{dsc|{{c|i}}, {{c|j}}, {{c|n}}|{{c/core|std::size_t}} 类型的值}}
{{dsc end}}

====成员类型====
{|class=wikitable
!类型
!定义
!要求
|-
|{{tt|A::element_type}}
|未指定
|
* 并非抽象类类型的完整对象类型
|-
|{{tt|A::data_handle_type}}
|未指定&lt;ref&gt;不需要是 {{c/core|element_type*}}。&lt;/ref&gt;
|
* 实现 {{lconcept|copyable}}
* 下列值都是 {{c|true}}：
:* {{c multi
|std::is_nothrow_move_constructible_v
|    &lt;typename A::data_handle_type&gt;}}
:* {{c multi
|std::is_nothrow_move_assignable_v
|    &lt;typename A::data_handle_type&gt;}}
:* {{c multi
|std::is_nothrow_swappable_v
|    &lt;typename A::data_handle_type&gt;}}
|-
|{{tt|A::reference}}
|未指定&lt;ref&gt;不需要是 {{c/core|element_type&amp;}}。&lt;/ref&gt;
|
* {{c multi
|std::common_reference_with&lt;typename A::reference&amp;&amp;,
|                           typename A::element_type&amp;&gt;}} 是 {{c|true}}
|-
|{{tt|A::offset_policy}}
|{{tt|OP}}
|
* 满足{{named req/core|AccessorPolicy}}的要求
* {{c|std::constructible_from&lt;OP, const A&amp;&gt;}} 是 {{c|true}}
* {{c/core|typename OP​::​element_type}} 和 {{c/core|typename A​::​element_type}} 是同一类型
|}

&lt;references/&gt;

====成员函数====
{|class=wikitable
!表达式
!返回类型
!语义
|-
|{{c|a.access(p, i)}}
|{{c/core|typename A::reference}}
|
* 该表达式[[cpp/concepts#相等性保持|保持相等性]]。
|-
|{{c|a.offset(p, i)}}
|{{box/core|{{c/core|typename A::offset_policy}}&lt;br&gt;{{nbspt|10}}{{c/core|::data_handle_type}}
|
* 值 {{c|q}}，使得令 {{c|b}} 为 {{c|A::offset_policy(a)}}，并且对于满足 {{range|0|n}} 是 {{c|p}} 和 {{c|a}} 的可访问范围（见下文）的任意整数 {{c|n}}：
:* {{range|0|n - i}} 是 {{c|q}} 和 {{c|b}} 的可访问范围；并且
:* 对于范围 {{range|0|n - i}} 中的每个 {{c|j}}，{{c|b.access(q, j)}} 提供到与 {{c|a.access(p, i + j)}} 相同元素的访问。
* 该表达式[[cpp/concepts#相等性保持|保持相等性]]。
|}

===可访问范围===
对于索引范围 {{range|0|N}}，如果访问器的成员函数 {{c|access}} 对范围中的每个索引产生的元素引用都有效，那么它是给定数据把柄和访问器的''可访问范围''。

===标准库===
下列标准库类型满足{{named req/core|AccessorPolicy}}：
{{dsc begin}}
{{dsc inc|cpp/container/mdspan/dsc default_accessor}}
{{dsc inc|cpp/container/mdspan/dsc aligned_accessor}}
{{dsc namespace|std::linalg}}
{{dsc inc|cpp/numeric/linalg/dsc scaled_accessor}}
{{dsc inc|cpp/numeric/linalg/dsc conjugated_accessor}}
{{dsc end}}
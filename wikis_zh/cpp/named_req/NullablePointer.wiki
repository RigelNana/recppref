{{cpp/named req/title|NullablePointer|notes={{mark since c++11}}}}
{{cpp/named req/navbar}}

指定该类型是能与 {{lc|std::nullptr_t}} 对象进行比较的指针式类型。

===要求===
类型必须满足所有下列要求：
* {{named req|EqualityComparable}}
* {{named req|DefaultConstructible}}
* {{named req|CopyConstructible}}
* {{named req|CopyAssignable}}
* {{named req|Swappable}}
* {{named req|Destructible}}

此外，此类型的值初始化的对象必须产生该类型的空值。空值必须仅与自身等价。该类型的默认初始化可拥有[[cpp/language/default initialization#不确定值和错误值|不确定值]]{{rev inl|since=c++26|或错误值}}。

此类型的值必须可{{ls|cpp/language/implicit conversion#按语境转换}}到 {{c/core|bool}}。如果它的值等价于空值，那么此转换返回 {{c|false}}，否则返回 {{c|true}}。

此类型进行的任何操作均不可抛异常。

此类型必须满足下列额外的表达式，给定该类型的两个值 {{c|p}} 与 {{c|q}}，以及 {{lc|std::nullptr_t}} 类型（可有 const 限定）的值 {{c|np}}：

{{dsc begin}}
{{dsc hitem|声明|效果}}
{{dsc|{{c|Type p(np);}}
{{c|1=Type p = np;}}|之后 {{c|p}} 等价于 {{c|nullptr}}}}
{{dsc hitem|表达式|效果}}
{{dsc|{{c|Type(np)}}|等价于 {{c|nullptr}} 的临时对象}}
{{dsc|{{c|1=p = np }}|必须返回 {{tt|Type&amp;}}，而且之后 {{c|p}} 等价于 {{c|nullptr}}}}
{{dsc|{{c|1=p != q}}|&lt;br&gt;
{{rrev multi|until1=c++20
|rev1=类型与值类别符合{{named req|BooleanTestable}}
|rev2={{c/core|1=decltype(p != q)}} 实现 {{lconcept|boolean-testable}}
}}
效果为 {{c|1=!(p == q)}}
}}
{{dsc|{{c|1=p == np}}
{{c|1=np == p}}|&lt;br&gt;
{{rrev multi|until1=c++20
|rev1=两个表达式的类型与值类别均符合{{named req|BooleanTestable}}
|rev2={{c/core|1=decltype(p == np)}} 和 {{c/core|1=decltype(np == p)}} 都实现 {{lconcept|boolean-testable}}
}}
效果为 {{c|1=(p == Type())}}}}
{{dsc|{{c|1=p != np}}
{{c|1=np != p}}|&lt;br&gt;
{{rrev multi|until1=c++20
|rev1=两个表达式的类型与值类别均符合{{named req|BooleanTestable}}
|rev2={{c/core|1=decltype(p != np)}} 和 {{c/core|1=decltype(np != p)}} 都实现 {{lconcept|boolean-testable}}
}}
效果为 {{c|1=!(p == np)}}}}
{{dsc end}}

===注解===
注意，对{{named req/core|NullablePointer}}类型不要求解引用（{{c|operator*}} 或 {{c|operator-&gt;}}）。满足这些要求的最小化类型是
{{source|1=
class handle
{
    int id = 0;
public:
    handle() = default;
    handle(std::nullptr_t) {}
    explicit operator bool() const { return id != 0; }
    friend bool operator==(handle l, handle r) { return l.id == r.id; }
    friend bool operator!=(handle l, handle r) { return !(l == r); }
    // 或仅一个预置的 operator==（C++20 起）
};
}}

===标准库===
下列类型满足{{named req/core|NullablePointer}}：
* {{lc|std::exception_ptr}}

下列类型必须满足{{named req/core|NullablePointer}}以与标准库组件交流：
* 每个{{named req|Allocator}}类型 {{tt|X}} 的成员类型 {{tt|X::pointer}}、{{tt|X::const_pointer}}、{{tt|X::void_pointer}} 及 {{tt|X::const_void_pointer}}
* {{lc|std::unique_ptr}} 的成员类型 {{tt|pointer}}
{{rrev|since=c++23|
* {{ltt|cpp/memory/inout_ptr_t|std::inout_ptr_t}} 与 {{ltt|cpp/memory/out_ptr_t|std::out_ptr_t}} 所适配的指针类型。
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2114|paper=P2167R3|std=C++98|before=到 {{c/core|bool}} 的按语境可转换性过于弱而无法反映实现的期待|after=加强要求}}
{{dr list end}}

{{langlinks|en|es|ja}}
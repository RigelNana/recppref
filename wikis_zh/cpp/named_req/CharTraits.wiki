{{cpp/named req/title|CharTraits}}
{{cpp/named req/navbar}}

{{named req|CharTraits}}是特征类，它抽象给定字符类型的基本字符和字符串操作。大多数标准库字符串类和输入/输出类要求伴随字符模板类型形参的对应{{named req/core|CharTraits}}模板类型形参。

===要求===
{{named req/core|CharTraits}}上的下列操作均不可抛出异常。

给定
* {{tt|CharT}}，字符类型
* {{tt|X}}，{{tt|CharT}} 的{{named req/core|CharTraits}}类型
* {{c|c}}、{{c|d}}，{{tt|CharT}} 类型的值
* {{c|p}}、{{c|q}}，{{c/core|const CharT*}} 类型的值
* {{c|s}}，{{tt|CharT*}} 类型的值
* {{c|n}}、{{c|i}}、{{c|j}}，{{lc|std::size_t}} 类型的值
* {{c|e}}、{{c|f}}，{{tt|X::int_type}} 类型的值
* {{c|pos}}，{{tt|X::pos_type}} 类型的值
* {{c|state}}，{{tt|X::state_type}} 类型的值
* {{c|r}}，{{tt|CharT}} 类型的左值

===类型===
{|class=wikitable
!类型||语义
|-
|{{tt|X::char_type}} || {{tt|CharT}}
|-
|{{tt|X::int_type}} || 能保有 {{tt|X::char_type}} 的所有合法值外加 {{c|X::eof()}} 的类型
|-
|{{tt|X::off_type}} || 以 {{tt|X}} 为输入/输出类中的特征模板形参时，如果此类型不是 {{lc|std::streamoff}} 会引起实现定义行为。
|-
|{{tt|X::pos_type}} ||
* 输入/输出类中的函数返回此类型，以 {{c|X::pos_type(X::off_type(-1))}} 为提示错误的无效值
* 以此类型的无效值作为接收此类型的值的 {{lc|std::istream}}、{{lc|std::ostream}} 或 {{lc|std::streambuf}} 的任何成员的实参都是未定义行为
* 在以 {{tt|X}} 为输入/输出类中的特性模板形参时，如果此类型不是 {{lc|std::streampos}} 会引起实现定义行为
|-
|{{tt|X::state_type}}{{nbsp}} || {{named req|Destructible}}、{{named req|CopyAssignable}}、{{named req|CopyConstructible}}、{{named req|DefaultConstructible}}
|}

===表达式===
{|class=wikitable
!表达式||返回类型||语义
!style="word-break: keep-all;"|{{nbsp}}复杂度{{nbsp}}
|-
|{{c|X::eq(c, d)}} || {{c/core|bool}} || 返回：是否把 {{c|c}} 当做等于 {{c|d}} || 常数
|-
|{{c|X::lt(c, d)}} || {{c/core|bool}} || 返回：是否把 {{c|c}} 当做小于 {{c|d}} || 常数
|-
|{{c|X::compare(p, q, n)}} || {{c/core|int}} || 返回：
* {{c|0}}，如果对 {{range|0|n}} 中的每个 {{c|i}}，{{c|X::eq(p[i], q[i])}} 都是 {{c|true}}
* 否则为负值，如果
** 对 {{range|0|n}} 中的某个 {{c|j}}，{{c|X::lt(p[j], q[j])}} 是 {{c|true}}，且
** 对 {{range|0|j}} 中的每个 {{c|i}}，{{c|X::eq(p[i], q[i])}} 都是 {{c|true}}
* 否则为正值
|| 线性
|-
|{{c|X::length(p)}} || {{lc|std::size_t}} || 返回：使得 {{c|X::eq(p[i], CharT())}} 是 {{c|true}} 的最小 {{c|i}} || 线性
|-
|{{c|X::find(p, n, c)}} || {{c/core|const X::char_type*}} || 返回：
* {{range|p|p + n}} 中使得 {{c|X::eq(*q, c)}} 是 {{c|true}} 的最小 {{c|q}}
* 否则为 {{c|0}}
|| 线性
|-
|{{c|X::move(s, p, n)}} || {{tt|X::char_type*}} ||
* 对 {{range|0|n}} 中的每个 {{c|i}} 进行 {{c|X::assign(s[i], p[i])}}
* 即使范围 {{range|p|p + n}} 与 {{range|s|s + n}} 重叠也能正确复制
* 返回：{{c|s}}
|| 线性
|-
|{{c|X::copy(s, p, n)}} || {{tt|X::char_type*}} ||
* 要求：{{range|p|p + n}} 与 {{range|s|s + n}} 不重叠
* 返回：{{c|s}}
* 对 {{range|0|n}} 中的每个 {{c|i}} 进行 {{c|X::assign(s[i], p[i])}}
|| 线性
|-
|{{c|X::assign(r, d)}} || （不使用） || 赋值 {{c|1=r = d}} || 常数
|-
|{{c|X::assign(s, n, c)}} || {{tt|X::char_type*}} ||
* 对 {{range|0|n}} 中的每个 {{c|i}} 进行 {{c|X::assign(s[i], c)}}。
* 返回：{{c|s}}
|| 线性
|-
|{{c|X::not_eof(e)}} || {{tt|X::int_type}} || 返回：
* {{c|e}}，如果 {{c|X::eq_int_type(e, X::eof())}} 是 {{c|false}}
* 否则为使得 {{c|X::eq_int_type(f, X::eof())}} 是 {{c|false}} 的值 {{c|f}}
|| 常数
|-
|{{c|X::to_char_type(e)}} || {{tt|X::char_type}} || 返回：
* 如果 {{c|X::eq_int_type(e, X::to_int_type(c))}} 对某个 {{c|c}} 为 {{c|true}} 则为 {{c|c}}
* 否则为某个未指定值
|| 常数
|-
|{{c|X::to_int_type(c)}} || {{tt|X::int_type}} || 返回：{{tt|X::to_char_type}} 和 {{tt|X::eq_int_type}} 的定义所制约的某个值 {{c|e}} || 常数
|-
|{{c|X::eq_int_type(e, f)}} || {{c/core|bool}} ||
* 对于所有 {{c|c}} 和 {{c|d}}，{{c|X::eq(c, d)}} 等于 {{box|{{c/core|X::eq_int_type(X::to_int_type(c),}}&lt;br&gt;{{c/core|               X::to_int_type(d))}}}}
* 返回：
** {{c|X::eq(c, d)}}，如果对于某 {{c|c}} 和 {{c|d}}，{{c|1=e == X::to_int_type(c)}} 且 {{c|1=f == X::to_int_type(d)}}
** 否则为 {{c|true}}，如果 {{c|e}} 与 {{c|f}} 都是 {{c|X::eof()}} 的副本
** 否则为 {{c|false}}，如果 {{c|e}} 与 {{c|f}} 之一是 {{c|X::eof()}} 的副本而另一者不是
** 否则值未指定
|| 常数
|-
|{{c|X::eof()}} || {{tt|X::int_type}} || 返回：使得 {{c|X::eq_int_type(e, X::to_int_type(c))}} 对于所有值 {{c|c}} 都是 {{c|false}} 的值 {{c|e}} || 常数
|}

===标准库===
下列标准库类模板要求{{named req/core|CharTraits}}作为模板类型形参：
{{dsc begin}}
{{dsc h2|字符串}}
{{dsc inc|cpp/string/dsc basic_string}}
{{dsc inc|cpp/string/dsc basic_string_view}}
{{dsc h2|流}}
{{dsc inc|cpp/io/dsc basic_ios}}
{{dsc inc|cpp/io/dsc basic_istream}}
{{dsc inc|cpp/io/dsc basic_ifstream}}
{{dsc inc|cpp/io/dsc basic_istringstream}}
{{dsc inc|cpp/io/dsc basic_ispanstream}}
{{dsc inc|cpp/io/dsc basic_ostream}}
{{dsc inc|cpp/io/dsc basic_ofstream}}
{{dsc inc|cpp/io/dsc basic_ostringstream}}
{{dsc inc|cpp/io/dsc basic_osyncstream}}
{{dsc inc|cpp/io/dsc basic_ospanstream}}
{{dsc inc|cpp/io/dsc basic_iostream}}
{{dsc inc|cpp/io/dsc basic_fstream}}
{{dsc inc|cpp/io/dsc basic_stringstream}}
{{dsc inc|cpp/io/dsc basic_spanstream}}
{{dsc h2|流迭代器}}
{{dsc inc|cpp/iterator/dsc istream_iterator}}
{{dsc inc|cpp/iterator/dsc ostream_iterator}}
{{dsc h2|流缓冲}}
{{dsc inc|cpp/io/dsc basic_streambuf}}
{{dsc inc|cpp/io/dsc basic_filebuf}}
{{dsc inc|cpp/io/dsc basic_stringbuf}}
{{dsc inc|cpp/io/dsc basic_syncbuf}}
{{dsc inc|cpp/io/dsc basic_spanbuf}}
{{dsc h2|流缓冲迭代器}}
{{dsc inc|cpp/iterator/dsc istreambuf_iterator}}
{{dsc inc|cpp/iterator/dsc ostreambuf_iterator}}
{{dsc end}}


下列标准库 {{lc|std::char_traits}} 显式特化满足{{named req/core|CharTraits}}：
{{dcl begin}}
{{dcl|notes=&lt;br&gt;&lt;br&gt;{{mark since c++20}}&lt;br&gt;{{mark since c++11}}&lt;br&gt;{{mark since c++11}}|
template&lt;&gt; class char_traits&lt;char&gt;;
template&lt;&gt; class char_traits&lt;wchar_t&gt;;
template&lt;&gt; class char_traits&lt;char8_t&gt;;
template&lt;&gt; class char_traits&lt;char16_t&gt;;
template&lt;&gt; class char_traits&lt;char32_t&gt;;
}}
{{dcl end}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=335|std=C++98|before=对 {{tt|assign}} 的二元重载的要求没有禁止向右值赋值|after=第一个参数只能是左值}}
{{dr list item|wg=lwg|dr=352|std=C++98|before={{tt|X::state_type}} 只需要&lt;br&gt;{{named req|CopyConstructible}}|after=也需要 {{named req|CopyAssignable}}&lt;br&gt;和 {{named req|DefaultConstructible}}}}
{{dr list item|wg=lwg|dr=3085|std=C++98|before={{c|X::copy(s, p, n)}} 只要求 {{c|p}}&lt;br&gt;不在 {{range|s|s + n}} 中，过于宽松&lt;ref&gt;{{range|p|p + n}} 与 {{range|s|s + n}} 可以重叠，此时使用 {{lc|std::memcpy}} 实现 {{tt|X::copy}} 的话行为未定义。&lt;/ref&gt;|after=要求 {{range|p|p + n}} 与&lt;br&gt;{{range|s|s + n}} 不重叠}}
{{dr list end}}
&lt;references/&gt;

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/named req/title|RandomNumberEngine|notes={{mark since c++11}}}}
{{cpp/named req/navbar}}

随机数引擎是返回无符号整数值的函数对象，它使得可能结果范围中的每个值拥有（理想的）相等概率。

任何随机数引擎亦为{{named req|UniformRandomBitGenerator}}，从而可能插入任何[[cpp/numeric/random|随机数分布]]，以获得随机数（正式而言是随机变量）。

===要求===
一个类型满足{{named req/core|RandomNumberEngine}}的条件是，它满足{{named req|UniformRandomBitGenerator}}，并且给定以下类型和值，它也满足下方表格列出的语义和复杂度要求：
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|E}}|{{named req/core|RandomNumberEngine}}类型}}
{{dsc|{{tt|T}}|{{tt|E::result_type}}}}
{{dsc hitem|值|定义}}
{{dsc|{{c|e}}|{{tt|E}} 类型的值}}
{{dsc|{{c|v}}|{{tt|E}} 类型左值}}
{{dsc|{{c|x}}, {{c|y}}|（可有 const 限定的）{{tt|E}} 类型的值}}
{{dsc|{{c|s}}|{{tt|T}} 类型的值}}
{{dsc|{{c|q}}|{{named req|SeedSequence}}类型左值}}
{{dsc|{{c|z}}|{{c/core|unsigned long long}} 类型的值}}
{{dsc|{{c|os}}|类型是 {{lc|std::basic_ostream}} 的特化的左值}}
{{dsc|{{c|is}}|类型是 {{lc|std::basic_istream}} 的特化的左值}}
{{dsc|{{c|n}}|{{tt|E}} 的状态的[[cpp/numeric/random#随机数引擎|大小]]}}
{{dsc|{{c|TA}}|{{tt|E}} 的[[cpp/numeric/random#随机数引擎|变换算法]]}}
{{dsc|{{c|GA}}|{{tt|E}} 的[[cpp/numeric/random#随机数引擎|生成算法]]}}
{{dsc end}}

{|class=wikitable
|-
!表达式
!返回类型
!语义
!复杂度
|-
|{{c|E()}}
|rowspan=4 {{n/a}}
|创建与所有其他默认构造的 {{tt|E}} 类型引擎的初始状态都相同的引擎。
|{{mathjax-or|\(\scriptsize O(n)\)|O(n)}}
|-
|{{c|E(x)}}
|创建比较等于 {{c|x}} 的引擎。
|{{mathjax-or|\(\scriptsize O(n)\)|O(n)}}
|-
|{{c|E(s)}}
|创建初始状态由 {{c|s}} 确定的引擎。
|{{mathjax-or|\(\scriptsize O(n)\)|O(n)}}
|-
|{{c|E(q)}}
|创建初始状态由单次调用 {{tt|q.generate}} 确定的引擎。
|与在长度是 {{c|n}} 的序列上调用 {{tt|q.generate}} 的复杂度相同
|-
|{{c|e.seed()}}
|{{c/core|void}}
|后条件：{{c|1=e == E()}}.
|与 {{c|E()}} 的复杂度相同
|-
|{{c|e.seed(s)}}
|{{c/core|void}}
|后条件：{{c|1=e == E(s)}}.
|与 {{c|E(s)}} 的复杂度相同
|-
|{{c|e.seed(q)}}
|{{c/core|void}}
|后条件：{{c|1=e == E(q)}}.
|与 {{c|E(q)}} 的复杂度相同
|-
|{{c|e()}}
|{{tt|T}}
|将 {{c|e}} 的状态从 {{box|{{tt|e{{su|b=i}}}}}} 递进到 {{box|{{tt|e{{su|b=i+1}}}}}}（即 {{box|{{c/core|TA(e}}{{su|b={{tt|i}}}}{{c/core|)}}}}），并返回 {{box|{{c/core|GA(e}}{{su|b={{tt|i}}}}{{c/core|)}}}}。
|均摊常数
|-
|{{c|e.discard(z)}}
|{{c/core|void}}
|以等价于连续调用 {{c|z}} 次 {{c|e()}} 的方式将 {{c|e}} 的状态从 {{box|{{tt|e{{su|b=i}}}}}} 递进到 {{box|{{tt|e{{su|b=i+z}}}}}}。
|不差于连续调用 {{c|z}} 次 {{c|e()}} 的复杂度
|-
|{{c|1=x == y}}
|{{c/core|bool}}
|如果对于所有正整数 {{c|i}}，对 {{c|x()}} 和 {{c|y()}} 的连续第 {{c|i}} 次调用都返回相同的值，那么返回 {{c|true}}。否则返回 {{c|false}}。
|{{mathjax-or|\(\scriptsize O(n)\)|O(n)}}
|-
|{{c|1=x != y}}
|{{c/core|bool}}
|{{c|1=!(x == y)}}
|{{mathjax-or|\(\scriptsize O(n)\)|O(n)}}
|-
|{{c|os &lt;&lt; x}}
|{{c/core|decltype(os)&amp;}}{{nbsp}}
|在 fmtflags 设置为 {{c|std::ios_base::dec {{!}} std::ios_base::left}}，以及填充字符设置为空格的条件下，将 {{c|x}} 的当前状态的文本表示写入 {{c|os}}。{{p|后条件：{{c|os}} 的 fmtflags 和填充字符与之前一致。}}
|{{mathjax-or|\(\scriptsize O(n)\)|O(n)}}
|-
|{{c|is &gt;&gt; v}}
|{{c/core|decltype(is)&amp;}}
|在 fmtflags 设置为 {{c|std::ios_base::dec}} 的条件下，从 {{c|is}} 读取 {{c|v}} 的当前状态的文本表示。如果输入不正确，那么会确保此操作不更改 {{c|v}} 的状态，并调用 {{c|is.setstate(std::ios_base::failbit)}}（它可能会抛出 {{lc|std::ios_base::failure}}）。{{p|前条件：{{c|is}} 提供的文本表示是在之前由满足以下所有条件的输出流 {{c|pr}} 写入的：}}
* {{c|1=is.getloc() == pr.getloc()}} 是 {{c|true}}。
* {{box|{{c/core|std::is_same&lt;decltype(is)::char_type,}}&lt;br&gt;{{nbspt|13}}{{c/core|decltype(pr)::char_type&gt;::value}}}} 是 {{c|true}}。
* {{box|{{c/core|std::is_same&lt;decltype(is)::traits_type,}}&lt;br&gt;{{nbspt|13}}{{c/core|decltype(pr)::traits_type&gt;::value}}}} 是 {{c|true}}。
{{p|后条件：{{c|is}} 的 fmtflags 与之前一致。}}
|{{mathjax-or|\(\scriptsize O(n)\)|O(n)}}
|}

===标准库===
下列标准库设施满足随机数引擎（{{named req/core|RandomNumberEngine}}）：
{{dsc begin}}
{{dsc inc|cpp/numeric/random/dsc linear_congruential_engine}}
{{dsc inc|cpp/numeric/random/dsc mersenne_twister_engine}}
{{dsc inc|cpp/numeric/random/dsc subtract_with_carry_engine}}
{{dsc inc|cpp/numeric/random/dsc philox_engine}}
{{dsc inc|cpp/numeric/random/dsc discard_block_engine}}
{{dsc inc|cpp/numeric/random/dsc independent_bits_engine}}
{{dsc inc|cpp/numeric/random/dsc shuffle_order_engine}}
{{dsc end}}

下列标准库设施满足{{named req|UniformRandomBitGenerator}}但不满足{{named req/core|RandomNumberEngine}}：
{{dsc begin}}
{{dsc inc|cpp/numeric/random/dsc random_device}}
{{dsc end}}

{{langlinks|en|es|ja}}
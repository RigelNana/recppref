{{cpp/named req/title|EqualityComparable}}
{{cpp/named req/navbar}}

类型必须能使用 {{tt|1===}} 运算符且结果应当具有标准语义。

===要求===
对于类型 {{tt|T}}，给定{{rev inl|since=c++11| {{tt|T}} 或}} {{c/core|const T}} 类型的表达式 {{c|a}}、{{c|b}} 和 {{c|c}}，如果以下表达式合法且具有指定的效果，那么 {{tt|T}} 满足{{named req/core|EqualityComparable}}：
{|table class=wikitable
|-
!表达式
!类型
!要求
|-
|rowspan=2|{{c|1=a == b}}
|符合{{named req|BooleanTestable}}&lt;br&gt;{{mark until c++20}}
|rowspan=2|建立一种{{enwiki|Equivalence relation|等价关系}}，即满足以下所有性质：
* 对于 {{c|a}} 的所有值，{{c|1=a == a}} 都会产生 {{c|true}}。
* 如果 {{c|1=a == b}}，那么 {{c|1=b == a}}。
* 如果 {{c|1=a == b}} 且 {{c|1=b == c}}，那么 {{c|1=a == c}}。
|-
|实现 {{lconcept|boolean-testable}}{{nbsp}}&lt;br&gt;{{mark since c++20}}
|}

===注解===
为满足此要求，没有内建[[cpp/language/operator comparison|比较运算符]]的类型必须提供[[cpp/language/operators|用户定义的 {{c/core|1=operator==}}]]。

对于既{{named req/core|EqualityComparable}}也{{named req|LessThanComparable}}的类型，C++ 标准库区分：
* ''相等''（即表达式 {{c|1=a == b}} 的值）和
* ''等价''（即表达式 {{c|!(a &lt; b) &amp;&amp; !(b &lt; a)}} 的值）

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=283|std=C++98|before=即使 {{tt|T}} 是 {{named req/core|EqualityComparable}} 的，{{c/core|const T}} 类型的对象也不适用这些要求|after=适用于 {{c/core|const T}} 而不是 {{tt|T}}}}
{{dr list item|wg=lwg|dr=2114|paper=P2167R3|std=C++98|before=到 {{c/core|bool}} 的可转换性过于弱而无法反映实现的期待|after=加强要求}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/concepts/dsc equality_comparable}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
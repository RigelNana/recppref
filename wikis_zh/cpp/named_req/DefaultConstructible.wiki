{{cpp/named req/title|DefaultConstructible}}
{{cpp/named req/navbar}}

指定该类型的对象可以默认构造。

===要求===
在下列语句表达式都合法且拥有指定的效果时，类型 {{tt|T}} 满足{{named req/core|DefaultConstructible}}：

{|table class="wikitable"
|-
!{{nbsp}}语句/表达式{{nbsp}}
!后条件
|-
|{{c|T u;}}
|对象 {{c|u}} 被[[cpp/language/default initialization|默认初始化]]。
|-
|{{c|T u{};}}
|对象 {{c|u}} 被[[cpp/language/value initialization|值初始化]]或[[cpp/language/aggregate initialization|聚合初始化]]。
|-
|{{c|T()}}
{{c|T{}&lt;!----&gt;}}
|一个 {{tt|T}} 类型的临时对象被[[cpp/language/value initialization|值初始化]]或[[cpp/language/aggregate initialization|聚合初始化]]。
|}

===注解===
对于非聚合类类型的对象，必须定义公开的[[cpp/language/default constructor|默认构造函数]]（用户定义或隐式定义），以满足{{named req/core|DefaultConstructible}}。

[[cpp/language/type|非类对象类型]]的非 const 对象始终为{{named req/core|DefaultConstructible}}。

const 的非类类型不{{named req/core|DefaultConstructible}}。

const 的聚合类型在它的任何成员是非类类型对象时不{{named req/core|DefaultConstructible}}。

非对象类型（函数类型，引用类型，以及（可能 cv 限定的）{{c/core|void}} 类型）和 const 的非对象类型始终不{{named req/core|DefaultConstructible}}。

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=724|std=C++98|before=缺失了{{named req/core|DefaultConstructible}}的要求|after=已补充}}
{{dr list item|wg=lwg|dr=2170|std=C++98|before=以空初始化器初始化{{named req/core|DefaultConstructible}}类型对象只可能是值初始化|after=也可以是聚合初始化}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_default_constructible}}
{{dsc inc|cpp/concepts/dsc default_initializable}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
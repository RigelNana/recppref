{{cpp/named req/title|OutputIterator}}
{{cpp/named req/navbar}}

{{named req|OutputIterator}}是能向所指向元素进行写入的{{named req|Iterator}}。

一个实现{{named req|OutputIterator}}的类型的例子是 {{ltt|cpp/iterator/ostream_iterator|std::ostream_iterator}}。

当{{named req|ForwardIterator}}、{{named req|BidirectionalIterator}}或{{named req|RandomAccessIterator}}在自身的要求之外还满足{{named req|OutputIterator}}的要求时，它即被描述为'''可变的（mutable）'''。

===要求===
以下情况下，类型 {{c|X}} 满足{{named req|OutputIterator}}

* 类型 {{c|X}} 满足{{named req|Iterator}}
* {{c|X}} 是类类型或指针类型

且，给定
* {{c|o}}，是输出迭代器对应的可写入类型的值（可以有多种可写入的类型，例如 {{tt|1=operator=}} 是模板的情况。并没有像输入迭代器的 {{tt|value_type}} 那种记号）
* {{c|r}}，为 {{c|X}} 类型的左值，

则下列表达式必须合法且拥有其指定的效果
{|table class="wikitable"
|-
!表达式||返回||等价表达式||前条件||后条件||注解
|-
|{{c|1=*r = o}}
|（不使用）
|
|{{c|r}} 可解引用
|{{c|r}} 可自增
|在此操作后不要求 {{c|r}} 可解引用，且不再要求任何 {{c|r}} 的先前值的副本可解引用或可自增。
|-
|{{c|++r}}
|{{c|X&amp;}}
|
|{{c|r}} 可自增
|{{c|r}} 与 {{c|++r}} 代表同一迭代器对象，{{c|r}} 可解引用或为末尾后迭代器
|在此操作后不要求 {{c|r}} 可自增，且不再要求任何 {{c|r}} 的先前值的副本可解引用或可自增。
|-
|{{c|r++}}
|可转换到 {{c|const X&amp;}}
|{{c|1=
X temp = r;
++r;
return temp;
}}
|
|
|
|-
|{{c|1=*r++ = o}}
|（不使用）
|{{c|1=*r = o;
++r;}}
|
|
|
|}

===注解===
{{c|operator*}} 对于输出迭代器的仅有的合法用法是在赋值的左侧：{{c|operator*}} 可以返回一个代理对象，它定义了成员 {{c|1= operator=}}（可以是模板）

可以不对输出迭代器定义相等和不相等。即使定义了 {{c|1= operator==}}，{{c|1= x == y}} 也不需要隐含 {{c|1= ++x == ++y}}。

通过输出迭代器的同一值进行的赋值只会发生一次：输出迭代器上的算法必须是单趟算法。

预期通过输出迭代器的赋值与自增交替进行。双重自增是未定义行为（C++ 标准当前声称双重自增得到支持，这与 STL 文档相反；此为 {{wg21|LWG2035}}）

允许纯粹仅支持输出的迭代器声明其 {{c|iterator_traits&lt;X&gt;::value_type}}、{{c|iterator_traits&lt;X&gt;::difference_type}}、{{c|iterator_traits&lt;X&gt;::pointer}} 与 {{c|iterator_traits&lt;X&gt;::reference}} 为 {{c/core|void}}（如 {{lc|std::back_insert_iterator}} 这样的迭代器正是如此）。

===标准库===
下列的标准库迭代器是输出迭代器而非向前迭代器：
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc ostream_iterator}}
{{dsc inc|cpp/iterator/dsc ostreambuf_iterator}}
{{dsc inc|cpp/iterator/dsc insert_iterator}}
{{dsc inc|cpp/iterator/dsc back_insert_iterator}}
{{dsc inc|cpp/iterator/dsc front_insert_iterator}}
{{dsc end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc output_iterator}}
{{see_also_iterator_library}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/named req/title|BasicFormatter|notes={{mark since c++20}}}}
{{cpp/named req/navbar}}

{{named req|BasicFormatter}}是对给定的格式化参数类型及字符类型抽象格式化操作的类型。要求 {{lc|std::formatter}} 的特化满足{{named req/core|BasicFormatter}}。

能格式化 const 与非 const 的实参的{{named req/core|BasicFormatter}}是{{named req|Formatter}}。

===要求===
一个类型为半正则，则满足 {{named req/core|BasicFormatter}}，这表示它满足：
* {{named req|DefaultConstructible}}
* {{named req|CopyConstructible}}
* {{named req|CopyAssignable}}
* {{named req|Destructible}}
* {{named req|Swappable}}

并且给定以下类型和值，下方表格列出的表达式必须合法且具有指定的语义：
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|CharT}}|字符类型}}
{{dsc|{{tt|Arg}}|格式化实参类型}}
{{dsc|{{tt|Formatter}}|对于类型 {{tt|Arg}} 和 {{tt|CharT}} 的{{named req/core|BasicFormatter}}类型}}
{{dsc|{{tt|OutputIt}}|{{named req|OutputIterator}}类型}}
{{dsc|{{tt|ParseCtx}}|{{c/core|std::basic_format_parse_context&lt;CharT&gt;}}}}
{{dsc|{{tt|FmtCtx}}|{{c/core|std::basic_format_context&lt;OutputIt, CharT&gt;}}}}
{{dsc hitem|值|定义}}
{{dsc|{{c|f}}|（可有 const 限定的）{{tt|Formatter}} 类型的值}}
{{dsc|{{c|g}}|{{tt|Formatter}} 类型的值}}
{{dsc|{{c|arg}}|{{tt|Arg}} 类型左值}}
{{dsc|{{c|t}}|可转换到（可有 const 限定的）&lt;!-- LWG 3636 --&gt;{{tt|Arg}} 的类型的值}}
{{dsc|{{c|parse_ctx}}|满足以下所有条件的 {{tt|ParseCtx}} 类型左值：
* {{c|parse_ctx.begin()}} 指向[[cpp/utility/format/basic_format_string#格式说明|格式字符串]]中格式化的替换域的{{spar sep|格式说明}}的开始处。
* 如果{{spar sep|格式说明}}不存在或者为空，那么满足 {{c|1=parse_ctx.begin() == parse_ctx.end()}} 和 {{c|1=*parse_ctx.begin() == '}'}} 之一。}}
{{dsc|{{c|fmt_ctx}}|{{tt|FmtCtx}} 类型左值}}
{{dsc end}}

{|class=wikitable
!表达式
!返回类型
!语义
|-
|{{c|g.parse(parse_ctx)}}
|{{tt|ParseCtx::iterator}}{{nbsp}}
|
* 在范围 {{range|parse_ctx.begin()|parse_ctx.end()}} 中解析类型 {{tt|Arg}} 的{{spar|格式说明}}，直到首个不匹配的字符。
* 抛出 {{lc|std::format_error}}，除非整个范围得到分析或首个不匹配的字符为 {{c|} }}。&lt;ref group="注"&gt;这允许格式化器抛出有意义的错误消息。&lt;/ref&gt;
* 存储分析的格式说明符到 {{c|g}} 中，并返回被分析范围的末尾迭代器。
|-
|{{c|f.format(arg, fmt_ctx)}}
|{{tt|FmtCtx::iterator}}
|
* 按照 {{c|f}} 中存储的说明符格式化 {{c|arg}}，将输出写到 {{c|fmt_ctx.out()}} 并返回输出范围的末尾迭代器。
* 输出只能取决于
** {{c|arg}}、
** {{c|format_ctx.locale()}}、
** 来自最后一次调用 {{c|f.parse(parse_ctx)}} 的范围 {{range|parse_ctx.begin()|parse_ctx.end()}}，以及
** 对于任何 {{lc|std::size_t}} 类型值 {{c|n}} 的 {{c|fmt_ctx.arg(n)}}&lt;!-- LWG 3462 --&gt;。
|}
&lt;references group="注"/&gt;

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3892|std=C++20|before=当{{spar sep|格式说明}}不存在时，{{c|pc.begin()}}  的值不明确|after=使之明确}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
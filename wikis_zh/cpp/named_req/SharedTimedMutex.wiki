{{cpp/named req/title|SharedTimedMutex|notes={{mark since c++14}}}}
{{cpp/named req/navbar}}

{{named req|SharedTimedMutex}}要求扩展了{{named req|TimedMutex}}要求，以包含共享锁所有权模式。

===要求===

* {{named req|TimedMutex}}
* {{named req|SharedMutex}}

另外，对于支持定时共享操作的{{named req/core|SharedTimedMutex}}类型对象 {{ttb|m}}：

* 表达式 {{c|m.try_lock_shared_for(duration)}} 拥有下列性质
:* 表现为原子操作。
:* 尝试在 {{tt|duration}} 所指定的时常内获得互斥体的共享所有权。若 {{tt|duration}} 小于或等于 {{tt|duration.zero()}}，则尝试获得所有权而不阻塞（如同用 {{tt|try_lock()}}）。否则，此函数将阻塞直至得到互斥体，或直至经过 {{tt|duration}} 所指定的时长。它仅若成功才在 {{tt|duration}} 内返回，但允许获得互斥体失败，即使在 {{tt|duration}} 期间的某点，互斥体不为另一线程所占有也可能如此。任何情况下，若得到互斥体则返回 {{c|true}}，否则返回 {{c|false}}。
:* 若 {{tt|try_lock_shared_for(duration)}} 成功，则同一对象上先前的 {{tt|unlock()}} 操作''同步于''此操作（等价于释放-获得 {{lc|std::memory_order}}）。
:* 若调用方线程已以任何模式占有互斥体，则行为未定义。
:* 执行期间时钟、时间点或时长可能抛出异常（标准库提供的时钟、时间点及时长决不抛出）。
:* 若抛出异常，则不获得共享锁。

* 表达式 {{c|m.try_lock_shared_until(time_point)}} 拥有下列性质
:* 表现为原子操作。
:* 尝试在 {{tt|time_point}} 前剩余的时间内获得互斥体的共享所有权。若已经过 {{tt|time_point}}，则尝试获得所有权而不阻塞（如同用 {{tt|try_lock()}}）。否则，此函数将阻塞直至得到互斥体，或直至经过 {{tt|time_point}} 所指定的时间点。它仅若成功才在 {{tt|time_point}} 前返回，但允许获得互斥体失败，即使在 {{tt|time_point}} 前的某点，互斥体不为另一线程所占有也可能如此。任何情况下，若得到互斥体则返回 {{c|true}}，否则返回 {{c|false}}。
:* 若 {{tt|try_lock_shared_until(time_point)}} 成功，则同一对象上先前的 {{tt|unlock()}} 操作''同步于''此操作（等价于释放-获得 {{lc|std::memory_order}}）。
:* 若调用方线程已以任何模式占有互斥体，则行为未定义。
:* 执行期间时钟、时间点或时长可能抛出异常（标准库提供的时钟、时间点及时长决不抛出）。
:* 若抛出异常，则不获得共享锁。

===标准库===
下列标准库类型满足{{named req/core|SharedTimedMutex}}：
{{dsc begin}}
{{dsc inc|cpp/thread/dsc shared_timed_mutex}}
{{dsc end}}

===参阅===
* [[cpp/thread|线程支持库]]
* {{named req|Mutex}}
* {{named req|TimedMutex}}
* {{named req|SharedMutex}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/named req/title|BooleanTestable}}
{{cpp/named req/navbar}}

指定拥有该值类型与值类别的表达式可转换为 {{c/core|bool}} 并且逻辑运算符对该类型或二个不同的{{named req/core|BooleanTestable}}类型拥有通常行为（包括{{enwiki|Short-circuit evaluation|短路}}）。

===要求===
令 {{c|e}} 为拥有具体类型与值类别的表达式。如果下列条件成立，则该类型与值类别符合{{named req/core|BooleanTestable}}要求：
* {{c|!e}} 良构并不修改 {{c|e}} 所指代的对象，若对象存在{{rev inl|since=c++11|，除了若 {{c|e}} 为亡值，则被指代的对象能被置于合法但未指定的状态}}。
* {{c|e}} 与 {{c|!e}} 均可由[[cpp/language/implicit_conversion|隐式转换]]和 {{ltt|cpp/language/static_cast}} 转换为 {{c/core|bool}}。
* 以两种方式进行的转换产生相等的结果并且不修改源对象，若源对象存在{{rev inl|since=c++11|，除了如果 {{c|e}} 或 {{c|!e}} 为亡值，则源对象能被置于合法但未指定的状态}}。
* {{c|1=bool(!e) == !bool(e)}} 成立。
* 没有可行的非成员 {{c/core|operator&amp;&amp;}} 或 {{c/core|operator{{!!}}}} 重载对 {{c|e}} 或 {{c|!e}} 的类型所做的[[cpp/language/adl|实参依赖查找]]可见。
* 如果 {{c|e}} 或 {{c|!e}} 拥有类类型，则该类不定义任何成员 {{c/core|operator&amp;&amp;}} 或 {{c/core|operator{{!!}}}}。

===注解===
标准不提供拥有此名字的具名要求。它最初作为 {{wg21|LWG2114}} 的早期解决方案提供，但在最终解决方案 {{wg21|P2167R3}} 中被仅用于阐述的概念 {{tti|{{lt|cpp/concepts/boolean-testable}}}} 取代。由于实现通常在 C++20 之前的模式中也期待类型实现 {{tti|boolean-testable}}，我们有意将 P2167R3 当作缺陷报告并将 {{tti|boolean-testable}} 变换为旧式的具名要求。

在将 {{tt|&amp;&amp;}} 与 {{tt|{{!!}}}} 运算符用于类型与值类别为{{named req/core|BooleanTestable}}的操作数时，内建版本得到选择并进行短路求值。

{{rrev|since=c++20|
表达式 {{c|e}} 的类型与值类别符合{{named req/core|BooleanTestable}}要求当且仅当 {{c|decltype((e))}} 实现 {{tti|{{lt|cpp/concepts/boolean-testable}}}}。}}

{{named req/core|BooleanTestable}} 类型（可为任何值类别）的例子包括 {{c/core|bool}}{{rev inl|since=c++11|、{{lc|std::true_type}}}}、{{c/core|std::bitset&lt;N&gt;::}}{{ltt|cpp/utility/bitset/reference}} 及 {{c/core|int*}}。

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2114|paper=P2167R3|std=C++98|before=到 {{c/core|bool}} 的可转换性过于弱而无法反映实现的期待|after=加强要求}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/concepts/dsc boolean-testable}}
{{dsc end}}

{{langlinks|en|es|ja}}
{{title|实验性 C++ 特性}}
{{cpp/experimental/navbar}}

C++ 标准委员会为未来的标准化出版实验性 C++ 语言与库扩展。

注意：2012 年之前，这些出版使用 '''TR'''（技术报告）格式。从 2012 年起，ISO 手续改为使用 '''TS'''（技术规范）格式。

====TR/TS 规范====
{|table class=wikitable
|-
!ISO 编号||名称||状态||链接，头文件
|-
| ISO/IEC TR 18015:2006
| C++ 性能技术报告
| 出版于 2006（[https://www.iso.org/standard/33907.html ISO 商店]）&lt;br&gt;草案：[https://www.open-std.org/jtc1/sc22/wg21/docs/TR18015.pdf TR18015] (2006-02-15)。
| &lt;!-- {{tt|std::hardware}} --&gt;
|-
| ISO/IEC TR 19768:2007
| C++ 库扩展技术报告
| 出版于 2007-11-15（[https://www.iso.org/standard/38841.html ISO 商店]）&lt;br&gt;草案： [https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf n1836] (2005-06-24)。&lt;br&gt;
分离到 ISO 29124，剩下的并入 C++11。
|
|-
| ISO/IEC 29124:2010
| 支持数学特殊函数的 C++ 库扩展
| 出版于 2010-09-03（[https://www.iso.org/standard/50511.html ISO 商店]）&lt;br&gt;最终草案： [https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf n3060] (2010-03-06)。&lt;br&gt;
{{mark_ok}}[[cpp/numeric/special_functions|并入 C++17]]。
| {{rl|special functions|特殊函数}}（实验性），[[cpp/numeric/special functions|特殊函数]]
|-
| ISO/IEC TR 24733:2011
| 支持十进制浮点算术的编程语言 C++ 扩展
| 出版于 2011-10-25（[https://www.iso.org/standard/38843.html ISO 商店]）。草案：{{stddoc|n2849}} (2009-03-06)。&lt;br&gt;
可能会为将来的 TS 所取代或并入未来的 C++ 修订版（最近的合并提案为 {{stddoc|n3871}}）。
| &lt;!-- {{tt|decimal32}}&lt;br&gt;{{tt|decimal64}}&lt;br&gt;{{tt|decimal128}} --&gt;
|-
| ISO/IEC TS 18822:2015
| C++ 文件系统技术规范
| 出版于 2015-06-18（[https://www.iso.org/standard/63483.html ISO 商店]）。最终草案：{{stddoc|n4100}} (2014-07-04)。&lt;br&gt;
{{mark_ok}}[[cpp/filesystem|并入 C++17]]。
| {{rl|fs|文件系统}}（实验性），[[cpp/filesystem|文件系统]]，{{header|filesystem}}
|-
| ISO/IEC TS 19570:2015
| 并行的 C++ 扩展
| 出版于 2015-06-24（[https://www.iso.org/standard/65241.html ISO 商店]）。最终草案：{{stddoc|n4507}} (2015-05-05)。&lt;br&gt;
{{mark_ok}}并入 C++17。
| {{rl|parallelism|并行}}
|-
| ISO/IEC TS 19841:2015
| 事务性内存 TS
| 出版于 2015-09-16（[https://www.iso.org/standard/66343.html ISO 商店]）。最终草案：{{stddoc|n4514}} (2015-05-08)。
| [[cpp/language/transactional_memory|事务性内存]]
|-
| ISO/IEC TS 19568:2015
| 库基础的 C++ 扩展
| 出版于 2015-09-30（[https://www.iso.org/standard/65238.html ISO 商店]）。最终草案：{{stddoc|n4480}} (2015-04-07)。&lt;br&gt;
{{mark_ok}}并入 C++17，除了调用特征。
|{{rl|lib_extensions|库扩展}}
|-
| ISO/IEC TS 19217:2015
| 概念的 C++ 扩展
| 出版于 2015-11-13（[https://www.iso.org/standard/64031.html 商店]）。最终草案：{{stddoc|n4553}} (2015-10-02) 当前草案：{{stddoc|p0734r0}} (2017-07-14)。&lt;br&gt;
{{mark_ok}}[[cpp/language/constraints|并入 C++20]]（有修改）。
|{{rl|constraints|约束与概念}}（实验性），[[cpp/concepts|概念]]，{{header|concepts}}
|-
| ISO/IEC TS 19571:2016
| 并发的 C++ 扩展
| 出版于 2016-01-19（[https://www.iso.org/standard/65242.html ISO 商店]）。最终草案：{{stddoc|p0159r0}} (2015-10-22)。&lt;br&gt;
{{mark_ok}}部分并入 C++20。
| {{rl|concurrency|并发}}
|-
| ISO/IEC TS 19568:2017
| 库基础的 C++ 扩展，版本 2
| 出版于 2017-03-30（[https://www.iso.org/standard/70587.html ISO 商店]）。草案：{{stddoc|n4617}} (2016-11-28)。&lt;br&gt;
{{mark_ok}}部分并入 C++17 与 C++20。
| {{rl|lib_extensions_2|库扩展 2}}
|-
| ISO/IEC TS 21425:2017
| 范围 TS
| 出版于 2017-12-05（[https://www.iso.org/standard/70910.html ISO 商店]）。草案：{{stddoc|n4685}} (2017-07-31)。&lt;br&gt;
{{mark_ok}}[[cpp/ranges|并入 C++20]]。
| {{rl|ranges|范围}}（实验性），[[cpp/ranges|范围]]，{{header|ranges}}
|-
| ISO/IEC TS 22277:2017
| 协程 TS
| 出版于 2017-12-05（[https://www.iso.org/standard/73008.html ISO 商店]）。草案：{{stddoc|n4736}} (2018-03-31)，最新草案：{{stddoc|n4775}} (2018-10-07)。&lt;br&gt;
{{mark_ok}}[[cpp/coroutine|并入 C++20]]。
|{{header|coroutine}}
|-
| ISO/IEC TS 19216:2018
| 网络 TS
| 出版于 2018-04-24（[https://www.iso.org/standard/64030.html ISO 商店]）。草案：{{stddoc|n4734}} (2017-04-04) 。最新草案 {{stddoc|n4771}} (2018-10-08)。
{{cot|参阅非 TS 提案}}
* 标准安全网络功能——{{stddoc|P2586R0}} (2022-09-13)
* 网络功能的发送器-接收器接口——{{stddoc|P2762R2}} (2023-10-12)
* 关于 C++ 标准网络的基于 [https://datatracker.ietf.org/doc/draft-ietf-taps-arch/ IETF TAPS] 提案方向——{{stddoc|P3185R0}} (2024-12-14)
* 用于基于 TAPS 网络连接的提案 API——{{stddoc|P3482R0}} (2024-12-14)
{{cob}}
| {{rl|networking|网络}}
|-
| ISO/IEC TS 21544:2018
| 模块 TS
| 出版于 2018-05-16（[https://www.iso.org/standard/71051.html ISO 商店]）。最终草案：{{stddoc|n4720}} (2018-01-29)。&lt;br&gt;
{{mark_ok}}[[cpp/language/modules|并入 C++20]]（有修改）。
| 
|-id="并行 TS 版本 2"
| ISO/IEC TS 19570:2018
| 并行 TS 版本 2
| 出版于 2018-11-15（[https://www.iso.org/standard/70588.html ISO 商店]）。最终草案：{{stddoc|n4793}} (2018-11-26)。发布后草案：{{stddoc|n4808}} (2019-03-11)。另见[[#SIMD 提案|下文]]非 TS 的 {{tt|std::simd}} 提案。
| {{rl|parallelism 2|并行 2}}
|-id="反射 TS"
| ISO/IEC TS 23619
| 反射 TS
| 出版于 2021-10-11（[https://www.iso.org/standard/76425.html ISO 商店]）。草案：{{stddoc|n4856}} (2020-03-02)。另见[[#反射提案|下文]]非 TS 提案。。
| {{rl|reflect|反射}}
|-
|
| 数值
| 早期开发。草案 {{stddoc|p1889r1}} (2019-12-27)。
| 
|-
| ISO/IEC TS 9922
| 并发 TS 版本 2
| 出版于 2024-10-09（[https://www.iso.org/standard/83630.html ISO 商店]）。草案：{{stddoc|n4956}} (2023-07-05)。
| {{rl|concurrency 2|并发 2}}
|-
| ISO/IEC TS 19568:2024
| 库基础的 C++ 扩展，版本 3
| 出版于 2024-08-26（[https://www.iso.org/standard/86293.html ISO 商店]）。草案：{{stddoc|n4948}} (2023-05-08)。
| {{rl|lib_extensions_3|库扩展 3}}
|-
| ISO/IEC DTS 12907
| 事务性内存 TS，版本 2
| 早期开发。草案：{{stddoc|n4923}} (2022-10-14)。
| 
|-
| ISO/IEC NP 19569
| 数组扩展 TS
| {{mark cancel}}已撤销。废弃草案：{{stddoc|n3820}} (2013-10-10)。
| 
|}

====非 TS 提案====
{|table class=wikitable
|-
!名称||状态||链接，头文件
|-
| 线性代数
|{{mark ok}}[[cpp/header/linalg|已合并入 C++26]]。提案：{{stddoc|P1673R13}} (2023-11-10)。
{{cot|更多提案：}}
* 为 C++ 标准库添加线性代数支持的提案——{{stddoc|P1385R7}} (2022-10-15)
* 从 {{enwiki|Basic Linear Algebra Subprograms|BLAS}} 发展一个标准 C++ 线性代数库——{{stddoc|P1674R2}} (2022-05-15)
* Issaquah 2023 会议上面向 LEWG 的 {{stddoc|P1385R7}} 演示——{{stddoc|P2802R0}} (2023-02-09)
* 修正 C++26：优化非复数值类型的 {{c/core|linalg::conjugated}}——{{stddoc|P3050R3}} (2024-10-29)
* 修正 C++26：使{{enwiki|Symmetric matrix|对称}}和{{enwiki|Hermitian matrix|厄米特}}的秩-k 与秩-2k 更新与 {{enwiki|Basic Linear Algebra Subprograms|BLAS}} 一致——{{stddoc|P3371R3}} (2024-10-29)
{{cob}}
|{{header|linalg}}
|-
|{{lc|std::execution}}
|{{mark ok}}[[cpp/header/execution|已合并入 C++26]]。提案：{{stddoc|P2300R10}} (2024-06-28)。
{{cot|更多提案：}}
* 系统执行上下文——{{stddoc|P2079R7}} (2025-02-12)
* 网络发送器-接收器接口——{{stddoc|P2762R2}} (2023-10-12)
* 发送器和接收器的成员定制点——{{stddoc|P2855R1}} (2024-02-22)
* C++ 执行器的事件模型——{{stddoc|P2882R0}} (2023-05-11)
* 发送器算法的定制化——{{stddoc|P2999R3}} (2023-12-13)
* {{lc|std::execution}} 介绍——{{stddoc|P3090R0}} (2024-02-14)
* C++26 的 {{lc|std::execution}} 推进计划——{{stddoc|P3109R0}} (2024-02-12)
* 改进发送器表达式的诊断——{{stddoc|P3164R3}} (2025-01-10)
* 重新考虑 {{c/core|std::execution::on}} 算法——{{stddoc|P3175R3}} (2024-06-25)
* 用于完成行为的发送器查询——{{stddoc|P3206R0}} (2025-01-13)
* 发送器适配器 {{tt|finally}}、{{tt|write_env}} 与 {{tt|unstoppable}}——{{stddoc|P3284R3}} (2025-02-13)
* 修复惰性发送器算法的定制化——{{stddoc|P3303R1}} (2024-06-25)
* 用于创建执行环境的工具——{{stddoc|P3325R5}} (2024-11-22)
* 何时可知 {{tt|connect}} 不会抛异常？——{{stddoc|P3388R1}} (2025-01-11)
* {{c/core|std::execution}} 措辞修订——{{stddoc|P3396R1}} (2024-11-19)
* 使能更高效的基于停止令牌的发送器取消——{{stddoc|P3409R1}} (2024-11-17)
* Win32、Darwin 和 Linux 上的 {{tt|system_scheduler}}——{{stddoc|P3456R0}} (2024-10-15)
* {{c/core|std::execution::bulk()}} 问题总结——{{stddoc|P3481R2}} (2025-02-11)
* 采用 constexpr 异常的高质量发送器诊断——{{stddoc|P3557R1}} (2025-02-13)
* 发送器-接收器中的 optional variant——{{stddoc|P3570R0}} (2025-02-10)
{{cob}}
|{{rl|execution|执行}} (实验性),&lt;br&gt;{{lt|cpp/execution|Execution}},&lt;br&gt;{{header|execution}}
|-
|{{c/core|std::inplace_vector}}
|{{mark ok}}[[cpp/header/inplace_vector|已合并入 C++26]]。提案：{{stddoc|P0843R14}} (2024-06-26)。
{{cot|更多提案：}}
* {{tt|inplace_vector}}——{{stddoc|P0843}}（{{stddoc|P0843R7|R7}}）LEWG 演示——{{stddoc|P2925R0}} (2023-06-16)
* 向量的一种方向——{{stddoc|P3147R1}} (2024-03-18)
* 一种知分配器的 {{lc|std::inplace_vector}}——{{stddoc|P3160R2}} (2024-10-15)
{{cob}}
|{{header|inplace_vector}}
|-id="SIMD 提案"
|{{rlt|simd|experimental::simd}}&lt;br&gt;{{lc|std::simd}}
|{{mark ok}}[[cpp/header/simd|已并入 C++26]]。提案：{{stddoc|P1928R15}} (2024-11-22).&lt;br&gt;主文档 (TS ISO/IEC 19570:2018) 在上文[[#并行 TS 版本 2|“C++ 并行计算扩展 V2”]]中描述。
{{cot|更多提案：}}
* 并行 TS2 中 SIMD 的预期反馈——{{stddoc|P1915R0}} (2019-10-07)
* Intel 对 {{rlt|simd|std::simd}} 的反馈——{{stddoc|P2638R0}} (2022-09-22)
* 在 {{rlt|simd|std::simd}} 中支持交错复数值的提案——{{stddoc|P2663R7}} (2025-02-17)
* 扩展 {{rlt|simd|std::simd}} 的排列 API 的提案——{{stddoc|P2664R9}} (2025-01-13)
* {{rlt|simd|std::simd}} 介绍幻灯片——{{stddoc|P2803R0}} (2023-02-09)
* Intel 对 {{rlt|simd|std::simd}} 反馈的 Issaquah 幻灯片——{{stddoc|P2807R0}} (2023-02-10)
* 扩展 {{rlt|simd|std::simd}} 的更多构造函数和访问函数的提案——{{stddoc|P2876R2}} (2025-02-14)
* 算法风格 vs 基于 {{rlt|simd|std::simd}} 的 RNG API——{{stddoc|P2880R0}} (2023-05-18)
* {{rlt|simd|std::simd}} 类型应为正规类型——{{stddoc|P2892R0}} (2023-05-19)
* {{rlt|simd|std::simd}} 类型应为正规类型——{{stddoc|P2892R0}} LEWG 演示——{{stddoc|P2926R0}} (2023-06-19)
* {{tt|simd_invoke}}——{{stddoc|P2929R0}} (2023-07-19)
* {{rlt|simd|std::simd}} 对 {{header|bit}} 的重载——{{stddoc|P2933R4}} (2025-02-17)
* 为 {{rlt|simd|std::simd}} 添加饱和运算的库支持——{{stddoc|P2956R0}} (2023-08-01)
* {{rlt|simd|std::simd}} 中允许用于定义类型——{{stddoc|P2964R1}} (2024-05-22)
* {{rlt|simd|std::simd}} 的接口方向——{{stddoc|P3024R0}} (2023-11-30)
* 提供用于常见操作的预定义 {{rlt|simd|std::simd}} 排列生成器函数——{{stddoc|P3067R0}} (2024-05-22)
* 用取值（getter）与设值（setter）函数取代 {{rlt|simd|std::simd}} {{c/core|operator[]}}（或不取代）——{{stddoc|P3275R0}} (2024-05-22)
* 探索 {{rlt|simd|std::simd}} 的命名空间——{{stddoc|P3287R3}} (2025-02-13)
* {{rlt|simd|std::simd}} 的范围构造函数——{{stddoc|P3299R3}} (2024-12-17)
* 为 {{rlt|simd|std::simd}} 添加 {{tt|iota}} 对象（及其他）——{{stddoc|P3319R5}} (2025-02-14)
* {{rlt|simd|std::simd}} 问题：显式，无顺序，标定元素位置，以及已禁用 simd 的成员——{{stddoc|P3430R3}} (2025-02-13)
* 为 {{rlt|simd|std::simd}} 添加 {{tt|n_elements}} 具名构造函数——{{stddoc|P3440R0}} (2024-10-15)
* 重命名 {{tt|simd_split}} 为 {{tt|simd_chunk}}——{{stddoc|P3441R2}} (2025-01-30)
* 添加工具以进行更容易的 {{rlt|simd|std::simd}} 中的类型-位转换——{{stddoc|P3445R0}} (2024-10-16)
* {{rlt|simd|std::simd}} 是一种 {{lconcept|range}}——{{stddoc|P3480R4}} (2025-02-14)
{{cob}}
|{{rl|simd|数据并行类型}} (实验性),&lt;br&gt;{{lt|cpp/numeric/simd|数据并行类型}},&lt;br&gt;{{header|simd}}
|-
| 契约
| {{mark ok}}[[cpp/header/simd|已合并入 C++26]]。提案：C++ 契约 - {{stddoc|P2900R14}} (2025-02-13)。&lt;br&gt;
{{cot|更多提案：}}
* 出版契约技术规范的提案——{{stddoc|P2659R2}} (2022-11-30)
* 提案契约 TS - {{stddoc|P2660R0}} (2022-10-14)
* 契约 TS 的杂项订正——{{stddoc|P2661R0}} (2022-10-15)
* C++ 契约：优先应对安全性——{{stddoc|P2680R1}} (2022-12-15)
* C++ 契约的建议计划——{{stddoc|P2695R1}} (2023-02-09)
* 以条件为中心的契约语法提案——{{stddoc|P2737R0}} (2022-12-30)
* C++ 契约：优先应对安全性——演示幻灯片——{{stddoc|P2743R0}} (2022-12-13)
* 受检查契约的求值——{{stddoc|P2751R1}} (2023-02-14)
* 完整契约设施的大胆计划——{{stddoc|P2755R1}} (2024-04-11)
* 契约 MVP 背后的想法——{{stddoc|P2817R0}} (2023-03-05)
* 支持‘定义时 const’风格契约的提案——{{stddoc|P2829R0}} (2023-04-13)
* 契约 MVP 的契约违例处理语义——{{stddoc|P2852R0}} (2023-04-24)
* Lakos 规则：窄契约与 {{c/core|noexcept}} 天生不兼容——{{stddoc|P2861R0}} (2023-05-19)
* 对契约语法的需求——{{stddoc|P2885R3}} (2023-10-05)
* lambda 上的契约——{{stddoc|P2890R2}} (2023-12-13)
* 契约的常量求值——{{stddoc|P2894R2}} (2024-01-11)
* 契约 MVP 的突出设计问题——{{stddoc|P2896R0}} (2023-08-22)
* C++ 契约：原理——{{stddoc|P2899R1}} (2025-03-14)
* C++ 契约——{{stddoc|P2900R13}} (2025-01-13)
* 应对契约的开放设计问题的原则性方法——{{stddoc|P2932R3}} (2024-01-16)
* 契约的属性式语法——{{stddoc|P2935R4}} (2023-11-05)
* 契约必须避免泄露敏感信息——{{stddoc|P2947R0}} (2023-07-20)
* {{stddoc|P2861R0}} 的幻灯片：窄契约与 {{c/core|noexcept}} 天生不兼容——{{stddoc|P2949R0}} (2023-07-14)
* 契约 MVP 的契约与虚函数——{{stddoc|P2954R0}} (2023-08-03)
* 契约与协程——{{stddoc|P2957R2}} (2024-10-14)
* 契约的自然语法——{{stddoc|P2961R2}} (2023-11-08)
* 契约语法选择概述——{{stddoc|P3028R0}} (2023-11-05)
* 保护契约不发生改动——{{stddoc|P3071R1}} (2023-12-17)
* 契约 MVP 中移除 {{tt|evaluation_undefined_behavior}} 和 {{tt|will_continue}}——{{stddoc|P3073R0}} (2024-01-27)
* 契约的常量求值中应当存在 {{tt|ignore}} 和 {{tt|observe}} 吗？——{{stddoc|P3079R0}} (2024-01-11)
* C++ 契约：支持虚函数——{{stddoc|P3097R0}} (2024-04-15)
* C++ 契约：后条件捕捉——{{stddoc|P3098R1}} (2024-12-11)
* 未定义和错误行为就是契约违例——{{stddoc|P3100R1}} (2024-10-16)
* 契约的东京会议技术修正——{{stddoc|P3119R1}} (2024-05-09)
* 契约 MVP 的虚函数契约——{{stddoc|P3165R0}} (2024-02-27)
* 契约继承——{{stddoc|P3169R0}} (2024-04-14)
* 契约的测试支持——{{stddoc|P3183R1}} (2024-05-22)
* {{stddoc|P2900R6}} LEWG 演示的幻灯片：C++ 契约——{{stddoc|P3189R0}} (2024-03-19)
* {{stddoc|P2900R7}} LEWG 演示的幻灯片：C++ 契约——{{stddoc|P3190R0}} (2024-03-20)
* 对契约 MVP ({{stddoc|P2900R6}}) 东京会议 EWG 投票调查的回应——{{stddoc|P3197R0}} (2024-04-12)
* 东京会议的契约 MVP LEWG 会议纪要——{{stddoc|P3198R0}} (2024-03-29)
* 为何契约？——{{stddoc|P3204R0}} (2024-11-07)
* {{lc|std::sort|sort()}} 的契约——{{stddoc|P3212R0}} (2024-07-03)
* C++ 契约：''Louis 语义''的命名——{{stddoc|P3226R0}} (2024-04-12)
* C++ 契约：修正契约违例处理 API——{{stddoc|P3227R1}} (2024-10-24)
* C++ 契约：再论契约检查的消除与重复——{{stddoc|P3228R1}} (2024-05-21)
* 令错误行为与契约兼容——{{stddoc|P3229R1}} (2025-02-10)
* 一种命名契约语义的替代方案——{{stddoc|P3238R0}} (2024-05-06)
* 用于引入新名字的模式匹配和契约的统一语法——{{stddoc|P3249R0}} (2024-05-22)
* C++ 契约与函数指针——{{stddoc|P3250R0}} (2024-05-07)
* C++ 契约与协程——{{stddoc|P3251R0}} (2024-05-07)
* 使 {{tt|contract_assert}} 的谓词更正规——{{stddoc|P3257R0}} (2024-04-26)
* 以 TS 方式发布契约——{{stddoc|P3265R3}} (2024-05-28)
* 通往 C++ 契约——{{stddoc|P3267R1}} (2024-05-22)
* C++ 契约的常量化挑战，关注当前代码——{{stddoc|P3268R0}} (2024-05-07)
* 不要以 TS 方式发布契约——{{stddoc|P3269R0}} (2024-05-21)
* {{tt|contract_assert}} 的重复、消除与常量化——{{stddoc|P3270R0}} (2024-05-22)
* 函数用法类型（函数指针的契约）——{{stddoc|P3271R1}} (2024-10-15)
* {{stddoc|P2900}} 优于契约 TS——{{stddoc|P3276R0}} (2024-05-18)
* 契约：对保护器的保护——{{stddoc|P3285R0}} (2024-05-15)
* 集成既存断言与契约——{{stddoc|P3290R2}} (2024-09-06)
* C++26 需要契约检查——{{stddoc|P3297R1}} (2024-06-21)
* 一种在 C++ 契约中集成传统断言设施的非强制方案——{{stddoc|P3311R0}} (2024-05-22)
* 编译时解析的契约——{{stddoc|P3317R0}} (2024-05-22)
* 契约与工具的交互——{{stddoc|P3321R0}} (2024-07-12)
* 函数指针的契约断言——{{stddoc|P3327R0}} (2024-10-16)
* 契约评估过程中的可观察检查点——{{stddoc|P3328R0}} (2024-06-14)
* BDE 的契约使用体验——{{stddoc|P3336R0}} (2024-06-23)
* 契约——我们所为何事（EWG 演示）——{{stddoc|P3343R0}} (2024-06-25)
* 虚函数的契约（EWG - {{stddoc|P3097}} 的演示）——{{stddoc|P3344R0}} (2024-06-28)
* 类不变式与契约检查哲学——{{stddoc|P3361R1}} (2024-07-23)
* 静态分析与契约“安全”，{{stddoc|P2900}} vs {{stddoc|P2680}}/{{stddoc|P3285}}——{{stddoc|P3362R0}} (2024-08-13)
* 契约断言 vs. 静态分析和“安全性”——{{stddoc|P3376R0}} (2024-10-14)
* 以 P2900 进行契约的静态分析——{{stddoc|P3386R1}} (2024-11-25)
* 协程的契约断言——{{stddoc|P3387R0}} (2024-10-09)
* 用标签规定契约断言的属性——{{stddoc|P3400R1}} (2025-02-28)
* 改进对契约断言中抛出异常的处理——{{stddoc|P3417R1}} (2025-03-05)
* 契约实现方报告——{{stddoc|P3460R0}} (2024-10-16)
* 标准库的加固——{{stddoc|P3471R4}} (2025-02-14)
* const 化不应当是 MVP（最小可行产品）的内容——{{stddoc|P3478R0}} (2024-10-16)
* 探索严格契约谓词——{{stddoc|P3499R1}} (2025-02-09)
* 契约是否 'safe'？——{{stddoc|P3500R1}} (2025-02-09)
* {{stddoc|P2900R11}} 的幻灯片——C++ 契约——{{stddoc|P3502R0}} (2024-11-18)
* P2900 对 C++26 仍未就绪——{{stddoc|P3506R0}} (2025-01-13)
* 违例处理器与 {{c/core|noexcept}} 对比——{{stddoc|P3541R1}} (2025-01-07)
* 核心语言缺省契约——{{stddoc|P3558R1}} (2025-02-03)
* 契约的关注事项——{{stddoc|P3573R0}} (2025-01-12)
* 要求无抛出的缺省契约违例处理函数——{{stddoc|P3577R0}} (2025-01-12)
* 观察到契约违例？跳过后续断言！——{{stddoc|P3582R0}} (2025-01-13)
* 契约、类型与函数——{{stddoc|P3583R0}} (2025-01-13)
* 契约要点问题的语境背景——{{stddoc|P3591R0}} (2025-02-03)
* 隐式契约断言的初始部分——{{stddoc|P3599R0}} (2025-02-03)
* 契约与剖面配置：C++26 应当合理提供什么——{{stddoc|P3608R0}} (2025-02-01)
* 现在应当移除虚函数的契约——{{stddoc|P3616R0}} (2025-02-08)
* 使契约默认是可靠的——{{stddoc|P3640R0}} (2025-03-17)
{{cob}}
|[[cpp/language/contracts|契约断言]]、&lt;br&gt;{{lt|cpp/language/functions/function contract specifiers|函数契约说明符}}、&lt;br&gt;{{ltt|cpp/language/contract_assert}}、&lt;br&gt;{{ltt|cpp/identifier with special meaning/pre}}、{{ltt|cpp/identifier with special meaning/post}}、&lt;br&gt;{{header|contracts}}
|-
| 模式匹配
| 早期开发。草案 {{stddoc|P1371R3}} (2020-09-15)。
{{cot|更多提案：}}
* 使用 {{c/core|is}} 和 {{c/core|as}} 的模式匹配——{{stddoc|P2392R3}} (2024-10-16)
* 模式匹配：{{c/core|match}} 表达式——{{stddoc|P2688R5}} (2025-01-13)
* {{c/core|switch}} 用于模式匹配——{{stddoc|P2940R0}} (2022-04-18)
* 用于模式匹配的标识符——{{stddoc|P2941R0}} (2022-02-24)
* 后条件''是一种''模式匹配——{{stddoc|P3210R2}} (2024-09-10)
* 用于引入新名字的模式匹配和契约的统一语法——{{stddoc|P3249R0}} (2024-05-22)
* 一种更简单的模式匹配写法——{{stddoc|P3332R0}} (2024-06-18)
* P2688R2 演示——模式匹配：{{c/core|match}} 表达式——{{stddoc|P3476R0}} (2024-10-16)
* 模式匹配：开放和类型的定制化点——{{stddoc|P3521R0}} (2024-12-17)
* 模式匹配：*变体式* 与 'std::expected'——{{stddoc|P3527R1}} (2025-01-13)
* 模式匹配——{{stddoc|P3572R0}} (2025-01-12)
{{cob}}
|
|-id="反射提案"
|反射
|主文档 (ISO/IEC TS 23619:2021) 在上文{{ls|#反射 TS}}中说明。
{{cot|更多提案：}}
* 可缩放的 C++ 反射——{{stddoc|P1240R2}} (2022-01-14)
* 展开语句——{{stddoc|P1306R3}} (2024-10-14)
* 属性的反射——{{stddoc|P1887R1}} (2020-01-13)
* 元编程——{{stddoc|P2237R0}} (2020-10-15)
* 带有基于值的反射的 Python 绑定——{{stddoc|P2911R1}} (2023-10-13)
* C++26 的反射——{{stddoc|P2996R10}} (2025-02-27)
* 在 JS 绑定生成中用反射取代元语言——{{stddoc|P3010R0}} (2023-10-13)
* 以反射进行 ABI 比较——{{stddoc|P3095R0}} (2024-02-15)
* C++26 反射中的函数形参反射——{{stddoc|P3096R7}} (2025-03-15)
* 反射的生成式扩展——{{stddoc|P3157R1}} (2024-05-22)
* 反射语法——{{stddoc|P3381R0}} (2024-09-17)
* 属性的反射——{{stddoc|P3385R4}} (2025-03-11)
* 用于反射的标注——{{stddoc|P3394R2}} (2025-03-14)
* 反射语法选项总结——{{stddoc|P3419R0}} (2024-10-11)
* 模板的反射——{{stddoc|P3420R1}} (2025-01-13)
* 反射标头应当最小化标准库依赖——{{stddoc|P3429R1}} (2024-11-29)
* 反射与元编程——{{stddoc|P3435R0}} (2024-10-14)
* 默认原则的建议：反射 C++，生成 C++——{{stddoc|P3437R1}} (2024-11-07)
* SG21 反射的 2024 进度——{{stddoc|P3443R0}} (2024-10-14)
* 针对反射访问控制的建议——{{stddoc|P3451R0}} (2024-10-15)
* 对反射与访问的深思——{{stddoc|P3493R0}} (2024-11-10)
* 反射对访问控制的建模——{{stddoc|P3547R1}} (2025-02-09)
* 反射中的错误处理——{{stddoc|P3560R0}} (2025-01-12)
* 拆分反射中的 {{tt|define_aggregate}}——{{stddoc|P3569R0}} (2025-01-11)
* 重新考虑 C++26 的反射访问——{{stddoc|P3587R0}} (2025-01-13)
* 不要移除或延后 {{tt|access_context::unchecked}}——{{stddoc|P3614R0}} (2025-02-06)
* 从 {{lc|std::exception}} 继承 {{c/core|std::meta::exception}}——{{stddoc|P3637R0}} (2025-03-08)
{{cob}}
| {{rl|reflect|反射}} (实验性)
|-
| 2D 图形
| 早期开发。草案 {{stddoc|P0267R10}} (2019-10-07)。
|
|-
|图库
|早期开发。
{{cot|更多提案：}}
* 图库：概述——{{stddoc|P3126R2}} (2024-08-05)
* 图库：算法——{{stddoc|P3128R2}} (2024-09-12)
* 图库：图容器接口——{{stddoc|P3130R2}} (2024-08-05)
* 图库：图容器——{{stddoc|P3131R2}} (2024-08-05)
{{cob}}
|
|-
|统计
|早期开发。
{{cot|更多提案：}}
* 基本统计——{{stddoc|P1708R9}} (2024-10-15)
* 对基本统计 {{stddoc|P1708R9}} 的评注——{{stddoc|P3495R0}} (2024-11-13)
{{cob}}
|
|-
|剖面配置
|早期开发。
{{cot|更多提案：}}
* 安全性剖面配置：ISO 标准 C++ 中的类型与资源安全编程——{{stddoc|P2816R0}} (2023-02-16)
* 对初始各项剖面配置的具体建议——{{stddoc|P3038R0}} (2023-12-16)
* 核心安全性剖面配置：规范，可采纳性与影响——{{stddoc|P3081R2}} (2025-02-03)
* 一种剖面配置开发框架——{{stddoc|P3274R0}} (2024-05-10)
* 一种验证类初始化的安全性剖面配置——{{stddoc|P3402R1}} (2024-10-15)
* 剖面配置验证：消除悬挂指针——{{stddoc|P3446R0}} (2024-10-14)
* 剖面配置语法——{{stddoc|P3447R0}} (2024-10-14)
* 对核心安全性剖面配置（{{stddoc|P3081R0}}）的回应——{{stddoc|P3543R0}} (2024-12-17)
* 剖面配置问题过剩——{{stddoc|P3586R0}} (2025-01-13)
* C++ 剖面配置：框架——{{stddoc|P3589R1}} (2025-02-03)
* 契约与剖面配置：C++26 应当合理提供什么——{{stddoc|P3608R0}} (2025-02-01)
* 处理指针错误：区分静态和动态检查——{{stddoc|P3611R0}} (2025-02-04)
* 易于采纳的用于防止现存 C++ 代码中 RCE（远程代码执行）的安全性剖面配置——{{stddoc|P3627R0}} (2025-02-11)
* 二十一世纪的 C++ - {{stddoc|P3650R0}} (2025-03-05)
* 对 C++ 标准委员会成员的提醒——{{stddoc|P3651R0}} (2025-03-06)
{{cob}}
|
|}

===参阅===
{{dsc begin}}
{{dsc see c|c/experimental|实验性 C 特性|nomono=true}}
{{dsc end}}

===外部链接===
{{elink begin}}
{{elink|[https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/sd-1.htm PL22.16/WG21 文档列表] - 2016-{{CURRENTYEAR}} 年间 C++ 委员会的全部文档（TS/提案）。}}
{{elink|[https://www.open-std.org/jtc1/sc22/wg21/docs/papers/{{CURRENTYEAR}}/ JTC1/SC22/WG21 {{CURRENTYEAR}} 年度提案（通讯）]。}}
{{elink end}}

{{langlinks|de|en|es|ja|ru}}
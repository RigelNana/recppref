{{cpp/thread/shared_timed_mutex/title|lock_shared}}
{{cpp/thread/shared_timed_mutex/navbar}}
{{dcl begin}}
{{dcl|since={{cpp/std|shared_timed_mutex}}|
void lock_shared();
}}
{{dcl end}}

获得互斥体的共享所有权。若另一线程以独占所有权保有互斥体，则对 {{tt|lock_shared}} 的调用将阻塞执行，直到能取得共享所有权。

如果 {{tt|lock_shared}} 被已经以任何模式（独占或共享）占有此 {{tt|mutex}} 的线程调用，则行为未定义。

若多于实现定义最大数量的共享所有者已经以共享模式锁定此互斥体，则 {{tt|lock_shared}} 阻塞执行，直至共享所有者的数量减少。所有者的最大数量保证至少为 10000。

同一互斥体上先前的 {{lc|unlock()}} 操作''同步于''（定义于 {{lc|std::memory_order}}）此操作。

===参数===
（无）

===返回值===
（无）

===异常===
出现错误时抛出 {{lc|std::system_error}}，包括妨碍 {{tt|lock}} 满足规定的来自底层操作系统的错误。在抛出任何异常的情况下，互斥体不被锁定。

===注解===
通常不直接调用 {{tt|lock_shared()}}：用 {{lc|std::shared_lock}} 管理共享锁定。

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/thread/mutex/dsc lock|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_shared|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc unlock_shared|shared_timed_mutex}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|hash{{small|&lt;std::thread::id&gt;}}}}
{{cpp/thread/thread/id/navbar}}
{{dcl begin}}
{{dcl header|thread}}
{{dcl|since=c++11|1=
template&lt;&gt; struct hash&lt;std::thread::id&gt;;
}}
{{dcl end}}

{{lc|std::hash}} 对 {{lc|std::thread::id}} 类的模板特化允许用户获得线程标识符的散列。

===示例===
{{todo|有意义地使用散列的示例}}
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;thread&gt;
#include &lt;vector&gt;
using namespace std::chrono_literals;

void foo()
{
    std::this_thread::sleep_for(10ms);
}
 
int main()
{
    std::vector&lt;std::thread&gt; v;
    for (int n = 0; n &lt; 4; ++n)
        v.emplace_back(foo);

    std::hash&lt;std::thread::id&gt; hasher;
    for (auto&amp; t : v)
    {
        std::cout &lt;&lt; "线程 " &lt;&lt; t.get_id() &lt;&lt; " 散列为 "
                  &lt;&lt; hasher(t.get_id()) &lt;&lt; '\n';
        t.join();
    }
}  
|p=true
|output=
线程 139786440144640 散列为 8905351942358389397
线程 139786431751936 散列为 9222844670065909738
线程 139786423359232 散列为 18199000599186780501
线程 139786414966528 散列为 15386662774029264672
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc hash}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
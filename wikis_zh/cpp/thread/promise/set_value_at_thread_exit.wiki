{{cpp/thread/promise/title|set_value_at_thread_exit}}
{{cpp/thread/promise/navbar}}
{{dcl begin}}
{{dcl h|主模板}}
{{dcl|num=1|since=c++11|
void set_value_at_thread_exit( const R&amp; value );
}}
{{dcl|num=2|since=c++11|
void set_value_at_thread_exit( R&amp;&amp; value );
}}
{{dcl h|{{c/core|std::promise&lt;R&amp;&gt;}} 特化}}
{{dcl|num=3|since=c++11|
void set_value_at_thread_exit( R&amp; value );
}}
{{dcl h|{{c/core|std::promise&lt;void&gt;}} 特化}}
{{dcl|num=4|since=c++11|
void set_value_at_thread_exit();
}}
{{dcl end}}

原子地存储 {{c|value}} 到共享状态，而不立即令状态就绪。在当前线程退出时，销毁所有拥有线程局域存储期的对象后，再令状态就绪。

{{lc|set_value}}、{{tt|set_exception}}、{{lc|set_value_at_thread_exit}} 和 {{lc|set_exception_at_thread_exit}} 的操作表现类似。在更新承诺体对象时获得与该承诺体对象关联的一个互斥体。

对此函数的调用和对 {{lc|get_future}} 的调用之间不会造成数据竞争（因此它们不需要彼此同步）。

===参数===
{{par begin}}
{{par|value|要在共享状态存储的值}}
{{par end}}

===返回值===
（无）

===异常===
遇到下列条件时抛出 {{lc|std::future_error}}：
* {{c|*this}} 无共享状态。设置错误码为 {{ltt|cpp/thread/future_errc|no_state}}。
* 共享状态已存储值或异常。设置错误码为 {{ltt|cpp/thread/future_errc|promise_already_satisfied}}。

另外还会抛出以下异常：
@1@ 被选中以复制 {{tt|R}} 类型的对象的构造函数抛出的任何异常。
@2@ 被选中以移动 {{tt|R}} 类型的对象的构造函数抛出的任何异常。

===示例===
{{example
|code=
#include &lt;future&gt;
#include &lt;iostream&gt;
#include &lt;thread&gt;

int main()
{
    using namespace std::chrono_literals;
    std::promise&lt;int&gt; p;
    std::future&lt;int&gt; f = p.get_future();
    std::thread([&amp;p]
    {
        std::this_thread::sleep_for(1s);
        p.set_value_at_thread_exit(9);
    }).detach();

    std::cout &lt;&lt; "等待中... " &lt;&lt; std::flush;
    f.wait();
    std::cout &lt;&lt; "完成！\n结果是：" &lt;&lt; f.get() &lt;&lt; '\n';
}
|output=
等待中... 完成！
结果是：9
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2098|std=C++11|before=不明确需要抛出哪些异常|after=使之明确}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/thread/promise/dsc set_value}}
{{dsc inc|cpp/thread/promise/dsc set_exception_at_thread_exit}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|stop_token}}
{{cpp/thread/stop_token/navbar}}
{{ddcl|header=stop_token|since=c++20|
class stop_token;
}}

{{tt|stop_token}} 类提供一种检查是否已经或能对其所关联的 {{ltt|cpp/thread/stop_source|std::stop_source}} 对象作出停止请求的方法。它实质上是关联停止状态的线程安全“视图”。

{{tt|stop_token}} 也可以被传递给 {{ltt|cpp/thread/stop_callback|std::stop_callback}} 的构造函数，使得当 {{tt|stop_token}} 的关联 {{lc|std::stop_source}} 被请求停止时将调用该回调。而且 {{tt|stop_token}} 也可以被传递给 {{lc|std::condition_variable_any}} 的可中断等待函数，以便当请求停止时中断该条件变量的等待。

===成员别名模板===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{c/core|callback_type&lt;Callback&gt;}} {{mark since c++26}}|{{c/core|std::stop_callback&lt;Callback&gt;}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/thread/stop_token/dsc constructor}}
{{dsc inc|cpp/thread/stop_token/dsc destructor}}
{{dsc inc|cpp/thread/stop_token/dsc operator{{=}}}}

{{dsc h2|修改器}}
{{dsc inc|cpp/thread/stop_token/dsc swap}}

{{dsc h2|观察器}}
{{dsc inc|cpp/thread/stop_token/dsc stop_requested}}
{{dsc inc|cpp/thread/stop_token/dsc stop_possible}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/thread/stop_token/dsc operator_cmp}}
{{dsc inc|cpp/thread/stop_token/dsc swap2}}
{{dsc end}}

===注解===
一般不会独立构造 {{tt|stop_token}} 对象，而是从 {{lc|std::jthread}} 或 {{lc|std::stop_source}} 取得。这使它与 {{lc|std::jthread}} 或 {{lc|std::stop_source}} 共享相同的关联停止状态。

{{feature test macro|__cpp_lib_jthread|std=C++20|value=201911L|[[#Top|停止令牌]]与{{rlp|jthread|结合线程}}}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;thread&gt;

using namespace std::literals::chrono_literals;

void f(std::stop_token stop_token, int value)
{
    while (!stop_token.stop_requested())
    {
        std::cout &lt;&lt; value++ &lt;&lt; ' ' &lt;&lt; std::flush;
        std::this_thread::sleep_for(200ms);
    }
    std::cout &lt;&lt; std::endl;
}

int main()
{
    std::jthread thread(f, 5); // 打印 5 6 7 8... 约 3 秒
    std::this_thread::sleep_for(3s);
    // jthread 的析构函数调用 request_stop() 和 join()。
}
|p=true
|output=
5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
}}

{{langlinks|en|es|ja|ru}}
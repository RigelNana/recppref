{{cpp/title|shared_timed_mutex}}
{{cpp/thread/shared_timed_mutex/navbar}}
{{ddcl|header=shared_mutex|since=c++14|1=
class shared_timed_mutex;
}}

{{tt|shared_timed_mutex}} 类是一种同步原语，能用于保护数据免受多个线程同时访问。与其他促进独占访问的互斥体类型相反，它拥有两个访问层次：

* ''共享'' - 多个线程能共享同一互斥体的所有权。

* ''独占'' - 仅一个线程能占有互斥体。

共享互斥体通常用于多个读线程能同时访问同一资源而不导致数据竞争，但只有一个写线程能访问的情形。

以类似于 {{ltt|cpp/thread/timed_mutex}} 的行为，{{tt|shared_timed_mutex}} 提供通过 {{ltf|cpp/thread/shared_timed_mutex/try_lock_for}}、{{ltf|cpp/thread/shared_timed_mutex/try_lock_until}}、{{ltf|cpp/thread/shared_timed_mutex/try_lock_shared_for}}、{{ltf|cpp/thread/shared_timed_mutex/try_lock_shared_until}} 方法，尝试带时限地要求 {{tt|shared_timed_mutex}} 所有权的能力。

{{tt|shared_timed_mutex}} 类满足{{named req|SharedTimedMutex}}和{{named req|StandardLayoutType}}的所有要求。

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/thread/mutex/dsc constructor|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc destructor|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc operator{{=}}}}

{{dsc h2|排他性锁定}}
{{dsc inc|cpp/thread/mutex/dsc lock|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_for|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_until|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc unlock|shared_timed_mutex}}

{{dsc h2|共享锁定}}
{{dsc inc|cpp/thread/mutex/dsc lock_shared|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_shared|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_shared_for|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc try_lock_shared_until|shared_timed_mutex}}
{{dsc inc|cpp/thread/mutex/dsc unlock_shared|shared_timed_mutex}}
{{dsc end}}

===注解===
{{feature test macro|__cpp_lib_shared_timed_mutex|{{tt|std::shared_timed_mutex}}|value=201402L|std=C++14}}

===示例===
{{todo|建立有动机的示例}}
{{example|复制赋值运算符，属于保有能处置多个读者，但只有一个写者的资源
|code=
#include &lt;mutex&gt;
#include &lt;shared_mutex&gt;

class R
{
    mutable std::shared_timed_mutex mut;
    /* 数据 */
public:
    R&amp; operator=(const R&amp; other)
    {
        // 要求排他性所有权以写入 *this
        std::unique_lock&lt;std::shared_timed_mutex&gt; lhs(mut, std::defer_lock);
        // 要求共享所有权以读取 other
        std::shared_lock&lt;std::shared_timed_mutex&gt; rhs(other.mut, std::defer_lock);
        std::lock(lhs, rhs);
        /* 赋值数据 */
        return *this;
    }
};

int main()
{
    R r;
}
}}

{{langlinks|en|es|ja|ru}}
{{cpp/title|n=this_thread::|sleep_until}}
{{cpp/thread/navbar}}
{{ddcl|header=thread|since=c++11|1=
template&lt; class Clock, class Duration &gt;
void sleep_until( const std::chrono::time_point&lt;Clock, Duration&gt;&amp; sleep_time );
}}

阻塞当前线程的执行，直至抵达指定的 {{c|sleep_time}}。

{{cpp/thread/block until|sleep_time}}

===参数===
{{par begin}}
{{par|sleep_time|要阻塞到的时间}}
{{par end}}

===返回值===
（无）

===异常===
{{tt|Clock}} 或 {{tt|Duration}} 抛出的任何异常（标准库提供的时钟和时长决不抛出）。

===示例===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;thread&gt;

auto now() { return std::chrono::steady_clock::now(); }

auto awake_time()
{
    using std::chrono::operator""ms;
    return now() + 2000ms;
}

int main()
{
    std::cout &lt;&lt; "你好，等待者...\n" &lt;&lt; std::flush;
    const auto start{now()};
    std::this_thread::sleep_until(awake_time());
    std::chrono::duration&lt;double, std::milli&gt; elapsed{now() - start};
    std::cout &lt;&lt; "已等待 " &lt;&lt; elapsed.count() &lt;&lt; " ms\n";
}
|p=true
|output=
你好，等待者...
已等待 2000.17 ms
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/thread/dsc sleep_for}}
{{dsc see c|c/thread/thrd_sleep}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
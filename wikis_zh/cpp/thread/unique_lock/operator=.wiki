{{cpp/thread/unique_lock/title|operator{{=}}}}
{{cpp/thread/unique_lock/navbar}}
{{ddcl|since=c++11|1=
unique_lock&amp; operator=( unique_lock&amp;&amp; other ) noexcept;
}}

移动赋值运算符。等价于 {{c|unique_lock{std::move(other)}.swap(*this); return *this;}}。

如果 {{c|other}} 与 {{c|*this}} 为同一对象则没有效果。否则，如果调用前 {{c|*this}} 拥有关联互斥体并获得了它的所有权，那么解锁互斥体。

===参数===
{{par begin}}
{{par|other|以之替换状态的另一 {{tt|unique_lock}}}}
{{par end}}

===返回值===
{{c|*this}}

===注解===
一个递归互斥体可能使得 {{c|*this}} 和 {{c|other}} 在赋值时同时持有同一个互斥体。这种情况下，在赋值后，{{c|*this}} 将持有锁，而 {{c|other}} 将不会。

移动赋值可能引发未定义行为。例如当以 {{lc|std::adopt_lock}} 构造了 {{c|*this}}，但调用线程并没有关联互斥的所有权时，无法正常释放关联互斥的所有权。

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2104|std=C++11|before=移动赋值运算符为 {{c/core|noexcept}} 但能有未定义行为|after=移除 {{c/core|noexcept}}}}
{{dr list item|wg=lwg|dr=4172|std=C++11|before={{wg21|LWG2104}} 移除了 {{c/core|noexcept}}&lt;br&gt;{{tt|unique_lock}} 的自移动赋值被错误指定|after=恢复 {{c/core|noexcept}}&lt;br&gt;重新指定为无操作}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
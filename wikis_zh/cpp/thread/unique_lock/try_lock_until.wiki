{{cpp/thread/unique_lock/title|try_lock_until}}
{{cpp/thread/unique_lock/navbar}}
{{dcl begin}}
{{dcl|since=c++11|1=
template&lt; class Clock, class Duration &gt;
bool try_lock_until( const std::chrono::time_point&lt;Clock, Duration&gt;&amp; timeout_time );
}}
{{dcl end}}

尝试锁定关联互斥体（即接收其所有权）。阻塞到抵达指定的 {{c|timeout_time}} 或获得锁这两个事件的先达成者为止。成功获得锁时返回 {{c|true}}，否则返回 {{c|false}}。可能阻塞长于抵达 {{tt|timeout_time}}。

相当于调用 {{c|mutex()-&gt;try_lock_until(timeout_time)}}。

若无关联互斥体或同一线程已锁定互斥体则抛出 {{lc|std::system_error}}。

{{tt|Clock}} 必须符合{{named req|Clock}}的要求。{{rev inl|since=c++20|若 {{c|std::chrono::is_clock_v&lt;Clock&gt;}} 为 {{c|false}} 则程序非良构。}}

===参数===
{{par begin}}
{{par|timeout_time|要阻塞到的最大时间点}}
{{par end}}

===返回值===
若成功获得得到互斥体锁有权则为 {{c|true}}，否则为 {{c|false}}。

===异常===
* {{c|mutex()-&gt;try_lock_until(timeout_time)}} 所抛出的任何异常。

* 若无关联互斥体，则为以 {{lc|std::errc::operation_not_permitted}} 为错误码的 {{lc|std::system_error}}。

* 若已锁定互斥体，则为以 {{lc|std::errc::resource_deadlock_would_occur}} 为错误码的 {{lc|std::system_error}}。

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/thread/unique_lock/dsc lock}}
{{dsc inc|cpp/thread/unique_lock/dsc try_lock}}
{{dsc inc|cpp/thread/unique_lock/dsc try_lock_for}}
{{dsc inc|cpp/thread/unique_lock/dsc unlock}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|jthread}}
{{cpp/thread/jthread/navbar}}
{{ddcl|header=thread|since=c++20|
class jthread;
}}

类 {{tt|jthread}} 表示[[enwiki:Thread_(computing)|单个执行线程]]。它的一般行为和 {{lc|std::thread}} 相同，除了 {{tt|jthread}} 在析构时会自动再合并，而且能在特定情况下取消/停止。

线程在关联的线程对象被构造时（在任何操作系统调度延迟后），立即从作为{{rlp|jthread/jthread|构造函数实参}}提供的顶层函数开始执行。顶层函数的返回值将被忽略，而若它因抛异常退出，则调用 {{lc|std::terminate}}。顶层函数可经由 {{lc|std::promise}}，或通过修改共享变量（要求同步，见 {{lc|std::mutex}} 与 {{lc|std::atomic}}），向调用方交流其返回值或异常。

不同于 {{lc|std::thread}}，{{tt|jthread}} 逻辑上保有一个内部的 {{tt|std::stop_source}} 类型私有成员，它维持共享的停止状态。{{tt|jthread}} 的构造函数接受一个以 {{lc|std::stop_token}} 为其首个实参的函数，{{tt|jthread}} 将从其内部的 {{lc|std::stop_source}} 传递它。这允许函数在其执行中检查是否已请求停止，而若已请求则返回。

{{tt|std::jthread}} 对象亦可处于不表示任何线程的状态（在默认构造、被移动、{{lc|detach}} 或 {{lc|join}} 后），而执行线程可以不与任何 {{tt|jthread}} 对象关联（{{lc|detach}} 后）。

两个 {{tt|std::jthread}} 对象不可以表示同一执行线程；{{tt|std::jthread}} 非{{named req|CopyConstructible}}或{{named req|CopyAssignable}}，尽管它为{{named req|MoveConstructible}}及{{named req|MoveAssignable}}。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|id}}|{{ltt|cpp/thread/thread/id|std::thread::id}}}}
{{dsc inc|cpp/thread/dsc native_handle_type|jthread}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/thread/jthread/dsc constructor}}
{{dsc inc|cpp/thread/jthread/dsc destructor}}
{{dsc inc|1=cpp/thread/jthread/dsc operator=}}

{{dsc h2|观察器}}
{{dsc inc|cpp/thread/thread/dsc joinable|jthread}}
{{dsc inc|cpp/thread/thread/dsc get_id|jthread}}
{{dsc inc|cpp/thread/thread/dsc native_handle|jthread}}
{{dsc inc|cpp/thread/thread/dsc hardware_concurrency|jthread}}

{{dsc h2|操作}}
{{dsc inc|cpp/thread/thread/dsc join|jthread}}
{{dsc inc|cpp/thread/thread/dsc detach|jthread}}
{{dsc inc|cpp/thread/thread/dsc swap|jthread}}

{{dsc h2|停止记号处理}}
{{dsc inc|cpp/thread/jthread/dsc get_stop_source}}
{{dsc inc|cpp/thread/jthread/dsc get_stop_token}}
{{dsc inc|cpp/thread/jthread/dsc request_stop}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/thread/thread/dsc swap2|jthread}}
{{dsc end}}

===注解===
{{feature test macro|__cpp_lib_jthread|std=C++20|value=201911L|{{rlp|stop_token|停止令牌}}和[[#Top|合并线程]]}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/thread/dsc thread}}
{{dsc end}}

{{langlinks|ar|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|packaged_task}}
{{cpp/thread/packaged_task/navbar}}
{{dcl begin}}
{{dcl header|future}}
{{dcl|num=1|since=c++11|notes={{mark|不予定义}}|
template&lt; class &gt;
class packaged_task;
}}
{{dcl|num=2|since=c++11|
template&lt; class R, class ...ArgTypes &gt; 
class packaged_task&lt;R(ArgTypes...)&gt;;
}}
{{dcl end}}

类模板 {{tt|std::packaged_task}} 包装任何{{named req|Callable}}目标（函数、lambda 表达式、bind 表达式或其他函数对象），使得能异步调用它。其返回值或所抛异常被存储于能通过 {{lc|std::future}} 对象访问的共享状态中。

{{rrev|until=c++17|
正如 {{lc|std::function}}，{{tt|std::packaged_task}} 是多态、具分配器的容器：可在堆上或以提供的分配器分配其所存储的可调用目标。
}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/thread/packaged_task/dsc constructor}}
{{dsc inc|cpp/thread/packaged_task/dsc destructor}}
{{dsc inc|cpp/thread/packaged_task/dsc operator{{=}}}}
{{dsc inc|cpp/thread/packaged_task/dsc valid}}
{{dsc inc|cpp/thread/packaged_task/dsc swap}}

{{dsc h2|获取结果}}
{{dsc inc|cpp/thread/packaged_task/dsc get_future}}

{{dsc h2|执行}}
{{dsc inc|cpp/thread/packaged_task/dsc operator()}}
{{dsc inc|cpp/thread/packaged_task/dsc make_ready_at_thread_exit}}
{{dsc inc|cpp/thread/packaged_task/dsc reset}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/thread/packaged_task/dsc swap2}}
{{dsc end}}

===辅助类===
{{dsc begin}}
{{dsc inc|cpp/thread/packaged_task/dsc uses_allocator}}
{{dsc end}}

==={{rl|deduction_guides|推导指引}}{{mark since c++17}}===

===示例===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;functional&gt;
#include &lt;future&gt;
#include &lt;iostream&gt;
#include &lt;thread&gt;

// 避免对 std::pow 重载集消歧义的独有函数
int f(int x, int y) { return std::pow(x,y); }

void task_lambda()
{
    std::packaged_task&lt;int(int, int)&gt; task([](int a, int b)
    {
        return std::pow(a, b); 
    });
    std::future&lt;int&gt; result = task.get_future();
	
    task(2, 9);

    std::cout &lt;&lt; "task_lambda:\t" &lt;&lt; result.get() &lt;&lt; '\n';
}

void task_bind()
{
    std::packaged_task&lt;int()&gt; task(std::bind(f, 2, 11));
    std::future&lt;int&gt; result = task.get_future();
	
    task();

    std::cout &lt;&lt; "task_bind:\t" &lt;&lt; result.get() &lt;&lt; '\n';
}

void task_thread()
{
    std::packaged_task&lt;int(int, int)&gt; task(f);
    std::future&lt;int&gt; result = task.get_future();
	
    std::thread task_td(std::move(task), 2, 10);
    task_td.join();

    std::cout &lt;&lt; "task_thread:\t" &lt;&lt; result.get() &lt;&lt; '\n';
}

int main()
{
    task_lambda();
    task_bind();
    task_thread();
}
|output=
task_lambda: 512
task_bind:   2048
task_thread: 1024
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3117|std=C++17|before={{tt|packaged_task}} 的推导指引缺失|after=已添加}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/thread/dsc future}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
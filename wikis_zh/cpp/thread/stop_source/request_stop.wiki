{{cpp/thread/stop_source/title|request_stop}}
{{cpp/thread/stop_source/navbar}}
{{ddcl|since=c++20|
bool request_stop() noexcept;
}}

若 {{tt|stop_source}} 对象拥有停止状态且未被请求停止，则发出停止请求给停止状态。

原子地作出确定，而若请求了停止，则原子地更新停止状态以避免竞争条件，使得：
* 能在同一共享状态的其他 {{lc|std::stop_token}} 与 {{lc|std::stop_source}} 上并发调用 {{c|stop_requested()}} 与 {{c|stop_possible()}}；
* 能在其他 {{lc|std::stop_source}} 对象上并发调用 {{c|request_stop()}}，而将只有一个实际进行停止请求。
然而，见注解节。

===参数===
（无）

===返回值===
若 {{tt|stop_source}} 对象拥有停止状态且此调用做出了停止请求则为 {{c|true}}，否则为 {{c|false}}。

===后条件===
{{c|stop_possible()}} 为 {{c|false}} 或 {{c|stop_requested()}} 为 {{c|true}}。

===注解===
若 {{c|request_stop()}} 确实发出了停止请求（即返回 {{c|true}}），则将在发出 {{c|request_stop()}} 的同一线程上同步调用对同一共享停止状态注册的所有 {{lc|std::stop_callback}}。若有任何回调的调用经由异常退出，则调用 {{lc|std::terminate}}。

若此 {{tt|stop_source}} 对象拥有停止状态但已作出停止请求，则此函数返回 {{c|false}}。然而不保证正好对同一停止状态（成功）请求停止的另一 {{tt|stop_source}} 不会仍然处于调用某个 {{lc|std::stop_callback}} 函数过程中。

若 {{c|request_stop()}} 确实发出了停止请求（即返回 {{c|true}}），则提醒用与 {{tt|stop_source}} 的停止状态关联的 {{tt|stop_token}} 的可中断等待注册的、基类型为 {{lc|std::condition_variable_any}} 的所有条件变量。

===示例===
{{example}}

{{langlinks|en|es|ja|ru}}
{{cpp/title|for_each_n}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|since=c++17|notes={{mark constexpr since c++20}}|
template&lt; class InputIt, class Size, class UnaryFunc &gt;
InputIt for_each_n( InputIt first, Size n, UnaryFunc f );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt, class Size, class UnaryFunc &gt;
ForwardIt for_each_n( ExecutionPolicy&amp;&amp; policy,
                      ForwardIt first, Size n, UnaryFunc f );
}}
{{dcl end}}

对范围 {{range|first|first + n}} 中每个迭代器的解引用结果应用给定的函数对象 {{c|f}}。忽略 {{c|f}} 返回的结果。

@1@ 从 {{c|first}} 开始按顺序应用 {{c|f}}。
@@ 如果 {{tt|UnaryFunc}} 不{{named req|MoveConstructible}}，那么行为未定义。

@2@ 不一定按顺序应用 {{c|f}}。按照 {{c|policy}} 执行算法。
@@ {{cpp/algorithm/parallel overload precondition}}
@@ 如果 {{tt|UnaryFunc}} 不{{named req|CopyConstructible}}，那么行为未定义。

如果 {{c|1=n &gt;= 0}} 不是 {{c|true}}，那么行为未定义。

如果迭代器类型（{{tt|InputIt}}/{{tt|ForwardIt}}）是可变的，那么 {{c|f}} 可以通过解引用后的迭代器修改范围的元素。

与其他并行算法不同，不允许 {{tt|for_each_n}} 复制序列中的元素，即使它们{{named req|TriviallyCopyable}}。

===参数===
{{par begin}}
{{par|first|要应用函数到的范围起始}}
{{par|n|要应用函数的元素个数}}
{{par exec pol}}
{{par opf|f|要应用到解引用范围 {{range|first|first + n}} 中每个迭代器结果的函数|p1=InputIt}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par req named|ForwardIt|ForwardIterator}}
{{par req|{{tt|Size}} 必须可转换到整数类型。}}
{{par end}}

===返回值===
等于 {{c|first + n}} 的迭代器，或更正式的，等于 {{c|std::advance(first, n)}} 的迭代器。

===复杂度===
应用 {{c|n}} 次 {{c|f}}。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=yes}}

===可能的实现===
参阅 [https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/pstl/algorithm_impl.h#L82 libstdc++]，[https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L896 libc++]，和 [https://github.com/microsoft/STL/blob/ff83542af4b683fb2f2dea1423fd6c50fe3e13b0/stl/inc/algorithm#L246 MSVC stdlib] 中的实现。
{{eq fun | 1=
template&lt;class InputIt, class Size, class UnaryFunc&gt;
InputIt for_each_n(InputIt first, Size n, UnaryFunc f)
{
    for (Size i = 0; i &lt; n; ++first, (void) ++i)
        f(*first);
    
    return first;
}
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

void println(auto const&amp; v)
{
    for (auto count{v.size()}; const auto&amp; e : v)
        std::cout &lt;&lt; e &lt;&lt; (--count ? ", " : "\n");
}

int main()
{
    std::vector&lt;int&gt; vi{1, 2, 3, 4, 5};
    println(vi);
    
    std::for_each_n(vi.begin(), 3, [](auto&amp; n) { n *= 2; });
    println(vi);
}
|output=
1, 2, 3, 4, 5
2, 4, 6, 4, 5
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc transform}}
{{dsc inc|cpp/language/dsc range-for}}
{{dsc inc|cpp/algorithm/dsc for_each}}
{{dsc inc|cpp/algorithm/ranges/dsc for_each_n}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
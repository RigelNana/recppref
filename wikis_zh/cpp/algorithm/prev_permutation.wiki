{{cpp/title|prev_permutation}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|
template&lt; class BidirIt &gt;
bool prev_permutation( BidirIt first, BidirIt last );
}}
{{dcl|num=2|notes={{mark constexpr since c++20}}|
template&lt; class BidirIt, class Compare &gt;
bool prev_permutation( BidirIt first, BidirIt last, Compare comp );
}}
{{dcl end}}

将范围 {{range|first|last}} 变换为前一个{{enwiki|permutation|排列}}。这种排列存在时返回 {{c|true}}，否则将范围变换为最后的排列（如同用 {{lc|std::sort}} 后随 {{lc|std::reverse}}）并返回 {{c|false}}。

@1@ 所有排列的集合按相对于 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 的字典序排序。

@2@ 所有排列的集合按相对于 {{c|comp}} 的字典序排序。

如果 {{rev inl|until=c++11|{{c|*first}} 的类型不{{named req|Swappable}}}}{{rev inl|since=c++11|{{tt|BidirIt}} 不{{named req|ValueSwappable}}}}，那么行为未定义。

===参数===
{{par begin}}
{{par range|3=要重排的}}
{{par cmp|comp|p1=BidirIt}}
{{par hreq}}
{{par req named|BidirIt|BidirectionalIterator}}
{{par end}}

===返回值===
新排列按字典序前趋旧排列时范围 {{c|true}}。若达首个排列并重置范围为最末排列时返回 {{c|false}}。

===复杂度===
给定 {{mathjax-or|\(\scriptsize N\)|N}} 为 {{c|std::distance(first, last)}}：

@1,2@ 最多交换 {{mathjax-or|\(\scriptsize \frac{N}{2}\)|{{mfrac|N|2}}}} 次。

===异常===
从迭代器操作或元素交换抛出的任何异常。

===可能的实现===
{{eq fun
|1=
template&lt;class BidirIt&gt;
bool prev_permutation(BidirIt first, BidirIt last)
{
    if (first == last)
        return false;
    BidirIt i = last;
    if (first == --i)
        return false;
    
    while (1)
    {
        BidirIt i1, i2;
        
        i1 = i;
        if (*i1 &lt; *--i)
        {
            i2 = last;
            while (!(*--i2 &lt; *i))
                ;
            std::iter_swap(i, i2);
            std::reverse(i1, last);
            return true;
        }
        
        if (i == first)
        {
            std::reverse(first, last);
            return false;
        }
    }
}
}}

===注解===
典型实现在排列的整个序列上，平均每次调用使用约 3 次比较和 1.5 次交换。

{{cpp/algorithm/notes swap vectorization}}

===示例===
{{example
|下列代码以逆序打印字符串 {{c/core|"cab"}} 的所有六个排列。
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::string s = "cab";
    
    do
    {
        std::cout &lt;&lt; s &lt;&lt; ' ';
    }
    while (std::prev_permutation(s.begin(), s.end()));
    
    std::cout &lt;&lt; s &lt;&lt; '\n';
}
|output=
cab bca bac acb abc cba
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc is_permutation}}
{{dsc inc|cpp/algorithm/dsc next_permutation}}
{{dsc inc|cpp/algorithm/ranges/dsc prev_permutation}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|max}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|constexpr=c++14|
template&lt; class T &gt;
const T&amp; max( const T&amp; a, const T&amp; b );
}}
{{dcla|num=2|constexpr=c++14|
template&lt; class T, class Compare &gt;
const T&amp; max( const T&amp; a, const T&amp; b, Compare comp );
}}
{{dcla|num=3|since=c++11|constexpr=c++14|
template&lt; class T &gt;
T max( std::initializer_list&lt;T&gt; ilist );
}}
{{dcla|num=4|since=c++11|constexpr=c++14|
template&lt; class T, class Compare &gt;
T max( std::initializer_list&lt;T&gt; ilist, Compare comp );
}}
{{dcl end}}

返回给定值中的较大者。

@1,2@ 返回 {{c|a}} 与 {{c|b}} 的较大者。
:@1@ 使用 {{c/core|operator&lt;}} 来比较两个值。
:@@ 如果 {{tt|T}} 不{{named req|LessThanComparable}}，那么行为未定义。
:@2@ 使用比较函数 {{c|comp}} 来比较两个值。

@3,4@ 返回初始化器列表 {{c|ilist}} 中值的最大者。
@@ 如果 {{c|ilist.size()}} 为零，或者 {{tt|T}} 不{{named req|CopyConstructible}}，那么行为未定义。
:@3@ 使用 {{c/core|operator&lt;}} 来比较这些值。
:@@ 如果 {{tt|T}} 不{{named req|LessThanComparable}}，那么行为未定义。
:@4@ 使用比较函数 {{c|comp}} 来比较这些值。

===参数===
{{par begin}}
{{par|a, b|要比较的值}}
{{par|ilist|拥有要比较的值的初始化器列表}}
{{par cmp|cmp|t1=T|如果 {{c|a}} ''小于'' {{c|b}} }} 
{{par end}}

===返回值===
@1,2@ {{c|a}} 与 {{c|b}} 的较大者。如果它们等价，那么返回 {{c|a}}。

@3,4@ {{c|ilist}} 中的最大值。如果有多个等价于最大者的值，那么返回最左侧的这种值。

===复杂度===
@1@ 应用一次 {{c/core|operator&lt;}} 进行比较。

@2@ 应用一次比较函数 {{c|comp}}。

@3,4@ 给定 {{mathjax-or|\(\scriptsize N\)|N}} 为 {{c|ilist.size()}}：
:@3@ 应用 {{mathjax-or|\(\scriptsize N-1\)|N-1}} 次 {{c/core|operator&lt;}} 进行比较。
:@4@ 应用 {{mathjax-or|\(\scriptsize N-1\)|N-1}} 次比较函数 {{c|comp}}。

===可能的实现===
{{eq impl
|title1=max (1)|ver1=1|1=
template&lt;class T&gt; 
const T&amp; max(const T&amp; a, const T&amp; b)
{
    return (a &lt; b) ? b : a;
}
|title2=max (2)|ver2=2|2=
template&lt;class T, class Compare&gt; 
const T&amp; max(const T&amp; a, const T&amp; b, Compare comp)
{
    return (comp(a, b)) ? b : a;
}
|title3=max (3)|ver3=3|3=
template&lt;class T&gt;
T max(std::initializer_list&lt;T&gt; ilist)
{
    return *std::max_element(ilist.begin(), ilist.end());
}
|title4=max (4)|ver4=4|4=
template&lt;class T, class Compare&gt;
T max(std::initializer_list&lt;T&gt; ilist, Compare comp)
{
    return *std::max_element(ilist.begin(), ilist.end(), comp);
}
}}

===注解===
{{cpp/algorithm/minmax danger note|max}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

int main()
{
    auto longest = [](const std::string_view s1, const std::string_view s2)
                   {
                       return s1.size() &lt; s2.size();
                   };

    std::cout &lt;&lt; "69 和 96 之间 " &lt;&lt; std::max(69, 96) &lt;&lt; " 更大\n"
                 "'q' 和 'p' 之间 '" &lt;&lt; std::max('q', 'p') &lt;&lt; "' 更大\n"
                 "010，10，0X10 和 0B10 之间"
              &lt;&lt; std::max({010, 10, 0X10, 0B10}) &lt;&lt; " 最大\n"
              &lt;&lt; R"("long"，"short" 和 "int" 之间)"
              &lt;&lt; std::quoted(std::max({"long", "short", "int"}, longest)) &lt;&lt; "最长\n";
}
|output=
69 和 96 之间 96 更大
'q' 和 'p' 之间 'q' 更大
010，10，0X10 和 0B10 之间 16 最大
"long"，"short" 和 "int" 之间 "short" 最长
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=281|std=C++98|before=重载 {{vl|1,2}} 中 {{tt|T}} 需要{{named req|CopyConstructible}}|after=不需要}}
{{dr list item|wg=lwg|dr=2239|std=C++98&lt;br&gt;C++11|before=1. 重载 {{vl|2}}（C++98）和 {{vl|4}}（C++11）中 {{tt|T}} 需要{{named req|LessThanComparable}}&lt;br&gt;2. 缺失了复杂度要求|after=1. 不需要&lt;br&gt;2. 添加复杂度要求}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc min}}
{{dsc inc|cpp/algorithm/dsc minmax}}
{{dsc inc|cpp/algorithm/dsc max_element}}
{{dsc inc|cpp/algorithm/dsc clamp}}
{{dsc inc|cpp/algorithm/ranges/dsc max}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|swap_ranges}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|
template&lt; class ForwardIt1, class ForwardIt2 &gt;
ForwardIt2 swap_ranges( ForwardIt1 first1, ForwardIt1 last1,
                        ForwardIt2 first2 );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2 &gt;
ForwardIt2 swap_ranges( ExecutionPolicy&amp;&amp; policy,
                        ForwardIt1 first1, ForwardIt1 last1,
                        ForwardIt2 first2 );
}}
{{dcl end}}

@1@ 在范围 {{range|first1|last1}} 和从 {{c|first2}} 开始的包含 {{c|std::distance(first1, last1)}} 个元素的另一范围间交换元素。

@2@ 同 {{v|1}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition}}

如果满足以下任意条件，那么行为未定义：
* 两个范围有重叠。
* 两个范围中存在一对对应的迭代器 {{c|iter1}} 和 {{c|iter2}}，使得 {{c|*iter1}} 与 {{c|*iter2}} 不{{named req|Swappable}}。

===参数===
{{par begin}}
{{par range|first1|last1|要交换的第一个}}
{{par|first2|要交换的第二个元素范围的起始}}
{{par exec pol}}
{{par hreq}}
{{par req named|ForwardIt1, ForwardIt2|ForwardIterator}}
{{par end}}

===返回值===
指向从 {{c|first2}} 开始的范围中被交换的最末元素后一元素的迭代器。

===复杂度===
交换 {{c|std::distance(first1, last1)}} 次。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=yes}}

===注解===
{{cpp/algorithm/notes swap vectorization}}

===可能的实现===
{{eq fun|1=
template&lt;class ForwardIt1, class ForwardIt2&gt;
constexpr //&lt; C++20 起
ForwardIt2 swap_ranges(ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2)
{
    for (; first1 != last1; ++first1, ++first2)
        std::iter_swap(first1, first2);
    
    return first2;
}
}}

===示例===
{{example
|演示来自不同容器的子范围交换。
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;list&gt;
#include &lt;vector&gt;

auto print = [](auto comment, auto const&amp; seq)
{
    std::cout &lt;&lt; comment;
    for (const auto&amp; e : seq)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
};

int main()
{
    std::vector&lt;char&gt; v{'a', 'b', 'c', 'd', 'e'};
    std::list&lt;char&gt; l{'1', '2', '3', '4', '5'};
    
    print("swap_ranges 之前:\n" "v: ", v);
    print("l: ", l);
    
    std::swap_ranges(v.begin(), v.begin() + 3, l.begin());
    
    print("swap_ranges 之后:\n" "v: ", v);
    print("l: ", l);
}
|output=
swap_ranges 之前:
v: a b c d e
l: 1 2 3 4 5
swap_ranges 之后:
v: 1 2 3 d e
l: a b c 4 5
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc iter_swap}}
{{dsc inc|cpp/algorithm/dsc swap}}
{{dsc inc|cpp/algorithm/ranges/dsc swap_ranges}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
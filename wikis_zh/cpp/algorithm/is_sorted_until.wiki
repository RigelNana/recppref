{{cpp/title|is_sorted_until}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|since=c++11|notes={{mark constexpr since c++20}}|
template&lt; class ForwardIt &gt;
ForwardIt is_sorted_until( ForwardIt first, ForwardIt last );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt &gt;
ForwardIt is_sorted_until( ExecutionPolicy&amp;&amp; policy,
                           ForwardIt first, ForwardIt last );
}}
{{dcla|num=3|since=c++11|notes={{mark constexpr since c++20}}|
template&lt; class ForwardIt, class Compare &gt;
ForwardIt is_sorted_until( ForwardIt first, ForwardIt last,
                           Compare comp );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt, class Compare &gt;
ForwardIt is_sorted_until( ExecutionPolicy&amp;&amp; policy,
                           ForwardIt first, ForwardIt last,
                           Compare comp );
}}
{{dcl end}}

检验范围 {{range|first|last}}，并寻找从 {{c|first}} 开始且其中元素已按非降序排序的最大范围。

@1@ 寻找元素已按 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} {{rlp|/#要求|排序}}的最大范围。

@3@ 寻找元素已按 {{c|comp}} 排序的最大范围。

@2,4@ 同 {{v|1,3}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

===参数===
{{par begin}}
{{par range|3=要检验的}}
{{par exec pol}}
{{par cmp ord|comp|p1=ForwardIt}}
{{par hreq}}
{{par req named|ForwardIt|ForwardIterator}}
{{par req named|Compare|Compare}}
{{par end}}

===返回值===
从 {{c|first}} 开始且其中元素已按升序排序的最大范围。即满足使范围 {{range|first|it}} 有序的最后迭代器 {{c|it}}。

对于空范围和长度为一的范围返回 {{c|last}}。

===复杂度===
给定 {{mathjax-or|\(\scriptsize N\)|N}} 为 {{c|std::distance(first, last)}}：

@1,2@ 应用 {{mathjax-or|\(\scriptsize O(N)\)|O(N)}} 次 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 进行比较。

@3,4@ 应用 {{mathjax-or|\(\scriptsize O(N)\)|O(N)}} 次比较函数 {{c|comp}}。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===可能的实现===
参阅 [https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L3211 libstdc++] 与 [https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L3614 libc++] 中的实现。
{{eq impl
|title1=is_sorted_until (1)|ver1=1|1=
template&lt;class ForwardIt&gt;
constexpr //&lt; C++20 起
ForwardIt is_sorted_until(ForwardIt first, ForwardIt last)
{
    return std::is_sorted_until(first, last, std::less&lt;&gt;());
}
|title2=is_sorted_until (2)|ver2=3|2=
template&lt;class ForwardIt, class Compare&gt;
constexpr //&lt; C++20 起
ForwardIt is_sorted_until(ForwardIt first, ForwardIt last, Compare comp)
{
    if (first != last)
    {
        ForwardIt next = first;
        while (++next != last)
        {
            if (comp(*next, *first))
                return next;
            first = next;
        }
    }
    return last;
}
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;random&gt;
#include &lt;string&gt;

int main()
{
    std::random_device rd;
    std::mt19937 g(rd());
    const int N = 6;
    int nums[N] = {3, 1, 4, 1, 5, 9};
    
    const int min_sorted_size = 4;
    
    for (int sorted_size = 0; sorted_size &lt; min_sorted_size;)
    {
        std::shuffle(nums, nums + N, g);
        int *const sorted_end = std::is_sorted_until(nums, nums + N);
        sorted_size = std::distance(nums, sorted_end);
        assert(sorted_size &gt;= 1);
        
        for (const auto i : nums)
            std::cout &lt;&lt; i &lt;&lt; ' ';
        std::cout &lt;&lt; ": " &lt;&lt; sorted_size &lt;&lt; " 个初始有序元素\n"
                  &lt;&lt; std::string(sorted_size * 2 - 1, '^') &lt;&lt; '\n';
    }
}
|p=true
|output=
4 1 9 5 1 3 : 1 个初始有序元素
^
4 5 9 3 1 1 : 3 个初始有序元素
^^^^^
9 3 1 4 5 1 : 1 个初始有序元素
^
1 3 5 4 1 9 : 3 个初始有序元素
^^^^^
5 9 1 1 3 4 : 2 个初始有序元素
^^^
4 9 1 5 1 3 : 2 个初始有序元素
^^^
1 1 4 9 5 3 : 4 个初始有序元素
^^^^^^^
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc is_sorted}}
{{dsc inc|cpp/algorithm/ranges/dsc is_sorted_until}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|min_element}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|notes={{mark constexpr since c++17}}|
template&lt; class ForwardIt &gt; 
ForwardIt min_element( ForwardIt first, ForwardIt last );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt &gt; 
ForwardIt min_element( ExecutionPolicy&amp;&amp; policy, 
                       ForwardIt first, ForwardIt last );
}}
{{dcla|num=3|notes={{mark constexpr since c++17}}|
template&lt; class ForwardIt, class Compare &gt;
ForwardIt min_element( ForwardIt first, ForwardIt last,
                       Compare comp );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt, class Compare &gt;
ForwardIt min_element( ExecutionPolicy&amp;&amp; policy, 
                       ForwardIt first, ForwardIt last,
                       Compare comp );
}}
{{dcl end}}

寻找范围 {{range|first|last}} 中的最小元素。

@1@ 用 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 比较元素。

@3@ 用比较函数 {{c|comp}} 比较元素。

@2,4@ 同 {{v|1,3}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

===参数===
{{par begin}}
{{par range|3=要检验的}}
{{par exec pol}}
{{par cmp|comp|p1=ForwardIt}} 
{{par hreq}}
{{par req named|ForwardIt|ForwardIterator}}
{{par end}}

===返回值===
指向范围 {{range|first|last}} 中最小元素的迭代器。如果范围中有多个元素等价于最小元素，那么返回指向首个这种元素的迭代器。范围为空时返回 {{c|last}}。

===复杂度===
给定 {{mathjax-or|\(\scriptsize N\)|N}} 为 {{c|std::distance(first, last)}}：

@1,2@ 应用 {{mathjax-or|\(\scriptsize \max(N-1,0)\)|max(N-1,0)}} 次 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 进行比较。

@3,4@ 应用 {{mathjax-or|\(\scriptsize \max(N-1,0)\)|max(N-1,0)}} 次比较函数 {{c|comp}}。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===可能的实现===
{{eq impl
|title1=min_element (1)|ver1=1|1=
template&lt;class ForwardIt&gt;
ForwardIt min_element(ForwardIt first, ForwardIt last)
{
    if (first == last)
        return last;
    
    ForwardIt smallest = first;
    ++first;
    
    for (; first != last; ++first)
        if (*first &lt; *smallest)
            smallest = first;
    
    return smallest;
}
|title2=min_element (3)|ver2=3|2=
template&lt;class ForwardIt, class Compare&gt;
ForwardIt min_element(ForwardIt first, ForwardIt last, Compare comp)
{
    if (first == last)
        return last;
    
    ForwardIt smallest = first;
    ++first;
    
    for (; first != last; ++first)
        if (comp(*first, *smallest))
            smallest = first;
    
    return smallest;
}
}}

===示例===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;
 
int main()
{
    std::vector&lt;int&gt; v{3, 1, -4, 1, 5, 9};
    
    std::vector&lt;int&gt;::iterator result = std::min_element(v.begin(), v.end());
    std::cout &lt;&lt; "最小元素的值为 " &lt;&lt; *result &lt;&lt; " 位于索引 ["
              &lt;&lt; std::distance(v.begin(), result) &lt;&lt; "]\n";
}
|output=
最小元素的值为 -4 位于索引 [2]
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=212|std=C++98|before={{range|first|last}} 为空时未指明返回值|after=此时返回 {{c|last}}}}
{{dr list item|wg=lwg|dr=2150|std=C++98|before=返回到第一个非最大元素的迭代器|after=改正返回值}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc max_element}}
{{dsc inc|cpp/algorithm/dsc minmax_element}}
{{dsc inc|cpp/algorithm/dsc min}}
{{dsc inc|cpp/algorithm/ranges/dsc min_element}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|lexicographical_compare_three_way}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|since=c++20|num=1|
template&lt; class InputIt1, class InputIt2, class Cmp &gt;
constexpr auto lexicographical_compare_three_way
    ( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2,
      Cmp comp ) -&gt; decltype(comp(*first1, *first2));
}}
{{dcl|since=c++20|num=2|
template&lt; class InputIt1, class InputIt2 &gt;
constexpr auto lexicographical_compare_three_way
    ( InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2 );
}}
{{dcl end}}

用三路比较，以字典序比较两个范围 {{range|first1|last1}} 和 {{range|first2|last2}}，并产生所适用最强的比较类别类型的结果。

@1@ 返回两个范围中首对按照 {{c|comp}} 不等价的元素间的次序（如果存在），否则（若一个范围按照 {{c|comp}} 等价于另一个范围的前缀）返回两个范围长度间的次序。

@2@ 等价于 {{c multi|return std::lexicographical_compare_three_way(|    first1, last1, first2, last2, std::compare_three_way());}}。

如果返回类型不是三个比较类别类型之一，那么程序非良构：
* {{ltt std|cpp/utility/compare/strong_ordering}}
* {{ltt std|cpp/utility/compare/weak_ordering}}
* {{ltt std|cpp/utility/compare/partial_ordering}}

===参数===
{{par begin}}
{{par range|first1|last1|range=第一个|要检验的}}
{{par range|first2|last2|range=第二个|要检验的}}
{{par|comp|函数对象}}
{{par hreq}}
{{par req named|InputIt1, InputIt2|InputIterator}}
{{par end}}

===返回值===
定义如上的比较类别类型的值。

===复杂度===
给定 {{mathjax-or|\(\scriptsize N_1\)|N{{su|b=1}}}} 为 {{c|std::distance(first1, last1)}}，{{mathjax-or|\(\scriptsize N_2\)|N{{su|b=2}}}} 为 {{c|std::distance(first2, last2)}}：

@1@ 最多应用 {{mathjax-or|\(\scriptsize \min(N_1,N_2)\)|min(N{{su|b=1}},N{{su|b=2}})}} 次 {{c|comp}}。

@2@ 最多应用 {{mathjax-or|\(\scriptsize \min(N_1,N_2)\)|min(N{{su|b=1}},N{{su|b=2}})}} 次 {{c|std::compare_three_way()}}。

===可能的实现===
{{eq fun|1=
template&lt;class I1, class I2, class Cmp&gt;
constexpr auto lexicographical_compare_three_way(I1 f1, I1 l1, I2 f2, I2 l2, Cmp comp)
    -&gt; decltype(comp(*f1, *f2))
{
    using ret_t = decltype(comp(*f1, *f2));
    static_assert(std::disjunction_v&lt;
                      std::is_same&lt;ret_t, std::strong_ordering&gt;,
                      std::is_same&lt;ret_t, std::weak_ordering&gt;,
                      std::is_same&lt;ret_t, std::partial_ordering&gt;&gt;,
                  "返回类型必须是比较类别类型。");

    bool exhaust1 = (f1 == l1);
    bool exhaust2 = (f2 == l2);
    for (; !exhaust1 &amp;&amp; !exhaust2; exhaust1 = (++f1 == l1), exhaust2 = (++f2 == l2))
        if (auto c = comp(*f1, *f2); c != 0)
            return c;

    return !exhaust1 ? std::strong_ordering::greater:
           !exhaust2 ? std::strong_ordering::less:
                       std::strong_ordering::equal;
}
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cctype&gt;
#include &lt;compare&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;
#include &lt;utility&gt;

using namespace std::literals;

void show_result(std::string_view s1, std::string_view s2, std::strong_ordering o)
{
    std::cout &lt;&lt; quoted(s1) &lt;&lt; " ";
    (o &lt; 0) ? std::cout &lt;&lt; "小于 " :
    (o &gt; 0) ? std::cout &lt;&lt; "大于 " :
              std::cout &lt;&lt; "等于 ";
    std::cout &lt;&lt; quoted(s2) &lt;&lt; '\n';
}

std::strong_ordering cmp_icase(unsigned char x, unsigned char y)
{
    return std::toupper(x) &lt;=&gt; std::toupper(y);
};

int main()
{
    for (const auto&amp; [s1, s2] :
    {
        std::pair{"one"sv, "ONE"sv}, {"two"sv, "four"sv}, {"three"sv, "two"sv}
    })
    {
        const auto res = std::lexicographical_compare_three_way(
            s1.cbegin(), s1.cend(), s2.cbegin(), s2.cend(), cmp_icase);
        show_result(s1, s2, res);
    }
}
|output=
"one" 等于 "ONE"
"two" 大于 "four"
"three" 小于 "two"
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3410|std=C++20|before=要求了额外的迭代器间比较|after=移除该要求}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc lexicographical_compare}}
{{dsc inc|cpp/utility/compare/dsc compare_three_way}}
{{dsc inc|cpp/algorithm/ranges/dsc lexicographical_compare}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
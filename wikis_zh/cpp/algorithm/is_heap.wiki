{{cpp/title|is_heap}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|since=c++11|notes={{mark constexpr since c++20}}|
template&lt; class RandomIt &gt;
bool is_heap( RandomIt first, RandomIt last );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class RandomIt &gt;
bool is_heap( ExecutionPolicy&amp;&amp; policy,
              RandomIt first, RandomIt last );
}}
{{dcl|num=3|since=c++11|notes={{mark constexpr since c++20}}|
template&lt; class RandomIt, class Compare &gt;
bool is_heap( RandomIt first, RandomIt last, Compare comp );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy, class RandomIt, class Compare &gt;
bool is_heap( ExecutionPolicy&amp;&amp; policy,
              RandomIt first, RandomIt last, Compare comp );
}}
{{dcl end}}

检查范围 {{range|first|last}} 是否为{{rlp|/#堆操作|堆}}。

@1@ 要检查的堆性质是关于 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 的。

@3@ 要检查的堆性质是关于 {{c|comp}} 的。

@2,4@ 同 {{v|1,3}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

===参数===
{{par begin}}
{{par range|3=要检验的}}
{{par exec pol}}
{{par cmp|comp|p1=RandomIt}}
{{par hreq}}
{{par req named|RandomIt|RandomAccessIterator}}
{{par req named|Compare|Compare}}
{{par end}}

===返回值===
如果范围是关于对应比较器的堆就返回 {{c|true}}，否则返回 {{c|false}}。

===复杂度===
给定 {{mathjax-or|\(\scriptsize N\)|N}} 为 {{c|std::distance(first, last)}}：

@1,2@ 最多应用 {{mathjax-or|\(\scriptsize O(N)\)|O(N)}} 次 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 进行比较。

@3,4@ 最多应用 {{mathjax-or|\(\scriptsize O(N)\)|O(N)}} 次比较函数 {{c|comp}}。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===示例===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;bit&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;int&gt; v{3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9};
    
    std::cout &lt;&lt; "一开始，v：\n";
    for (auto i : v)
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    if (!std::is_heap(v.begin(), v.end()))
    {
        std::cout &lt;&lt; "正在制作堆。。。\n";
        std::make_heap(v.begin(), v.end());
    }
    
    std::cout &lt;&lt; "make_heap 后，v：\n";
    for (auto t{1U}; auto i : v)
        std::cout &lt;&lt; i &lt;&lt; (std::has_single_bit(++t) ? " {{!}} " : " ");
    std::cout &lt;&lt; '\n';
}
|output=
一开始，v：
3 1 4 1 5 9 2 6 5 3 5 8 9 7 9
正在制作堆。。。
make_heap 后，v：
9 {{!}} 6 9 {{!}} 5 5 9 7 {{!}} 1 1 3 5 8 3 4 2 {{!}}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc is_heap_until}}
{{dsc inc|cpp/algorithm/dsc make_heap}}
{{dsc inc|cpp/algorithm/dsc push_heap}}
{{dsc inc|cpp/algorithm/dsc pop_heap}}
{{dsc inc|cpp/algorithm/dsc sort_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc is_heap}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|rotate_copy}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|
template&lt; class ForwardIt, class OutputIt &gt;
OutputIt rotate_copy( ForwardIt first, ForwardIt middle,
                      ForwardIt last, OutputIt d_first );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2 &gt;
ForwardIt2 rotate_copy( ExecutionPolicy&amp;&amp; policy,
                        ForwardIt1 first, ForwardIt1 middle,
                        ForwardIt1 last, ForwardIt2 d_first );
}}
{{dcl end}}

@1@ 从范围 {{range|first|last}} 复制元素到始于 {{c|d_first}}，使得目标范围中，{{range|first|middle}} 的元素在 {{range|middle|last}} 后面并且保留这两个范围中元素的原本顺序。

@2@ 同 {{v|1}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition}}

如果满足以下任意条件，那么行为未定义：
* {{range|first|middle}} 或 {{range|middle|last}} 不是[[cpp/iterator#范围|有效范围]]。
* 源和目标范围有重叠。

===参数===
{{par begin}}
{{par range|3=要复制的|range=源}}
{{par|middle|指向 {{range|first|last}} 中应出现在新范围起始的元素的迭代器}}
{{par|d_first|目标范围的起始}}
{{par exec pol}}
{{par hreq}}
{{par req named|ForwardIt, ForwardIt1, ForwardIt2|ForwardIterator}}
{{par req named|OutputIt|OutputIterator}}
{{par end}}

===返回值===
指向最后被复制元素后一元素的输出迭代器。

===复杂度===
{{c|std::distance(first, last)}} 次赋值。

===异常===
{{cpp/algorithm/parallel_exceptions_reporting_behavior|singular=yes}}

===可能的实现===
参阅 [https://github.com/gcc-mirror/gcc/blob/14d8a5ae472ca5743016f37da2dd4770d83dea21/libstdc%2B%2B-v3/include/bits/stl_algo.h#L1440-L1455 libstdc++]、[https://github.com/llvm/llvm-project/tree/f221d905b131158cbe3cbc4320d1ecd1376c3f22/libcxx/include/__algorithm/rotate_copy.h libc++] 与 [https://github.com/microsoft/STL/blob/472161105d596192194d4715ccad307c6c163b4a/stl/inc/algorithm#L4438-L4459 MSVC STL] 中的实现。
{{eq fun | 1=
template&lt;class ForwardIt, class OutputIt&gt;
constexpr // C++20 起
OutputIt rotate_copy(ForwardIt first, ForwardIt middle,
                     ForwardIt last, OutputIt d_first)
{
    d_first = std::copy(middle, last, d_first);
    return std::copy(first, middle, d_first);
}
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;int&gt; src{1, 2, 3, 4, 5};
    std::vector&lt;int&gt; dest(src.size());
    auto pivot = std::find(src.begin(), src.end(), 3);
    
    std::rotate_copy(src.begin(), pivot, src.end(), dest.begin());
    for (int i : dest)
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    // copy the rotation result directly to the std::cout
    pivot = std::find(dest.begin(), dest.end(), 1);
    std::rotate_copy(dest.begin(), pivot, dest.end(),
                     std::ostream_iterator&lt;int&gt;(std::cout, " "));
    std::cout &lt;&lt; '\n';
}
|output=
3 4 5 1 2
1 2 3 4 5
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc rotate}}
{{dsc inc|cpp/algorithm/ranges/dsc rotate_copy}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
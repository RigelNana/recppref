{{cpp/title|set_union}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2, class OutputIt &gt;
OutputIt set_union( InputIt1 first1, InputIt1 last1,
                    InputIt2 first2, InputIt2 last2,
                    OutputIt d_first );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2, class ForwardIt3 &gt;
ForwardIt3 set_union( ExecutionPolicy&amp;&amp; policy,
                      ForwardIt1 first1, ForwardIt1 last1,
                      ForwardIt2 first2, ForwardIt2 last2,
                      ForwardIt3 d_first );
}}
{{dcla|num=3|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2,
          class OutputIt, class Compare &gt;
OutputIt set_union( InputIt1 first1, InputIt1 last1,
                    InputIt2 first2, InputIt2 last2,
                    OutputIt d_first, Compare comp );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2,
          class ForwardIt3, class Compare &gt;
ForwardIt3 set_union( ExecutionPolicy&amp;&amp; policy,
                      ForwardIt1 first1, ForwardIt1 last1,
                      ForwardIt2 first2, ForwardIt2 last2,
                      ForwardIt3 d_first, Compare comp );
}}
{{dcl end}}

构造从 {{c|d_first}} 开始的有序并集，由存在于有序范围 {{range|first1|last1}} 和 {{range|first2|last2}} 之一或二者中的所有元素构成。

如果 {{range|first1|last1}} 中有 {{c|m}} 个互相等价的元素，并且 {{range|first2|last2}} 中有 {{c|n}} 个与它们等价的元素，那么将从 {{range|first1|last1}} 保持顺序地复制全部 {{c|m}} 个元素到输出范围，然后从 {{range|first2|last2}} 保持顺序地复制最后 {{c|std::max(n - m, 0)}} 个元素到输出范围。

@1@ 如果 {{range|first1|last1}} 或 {{range|first2|last2}} 没有按 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} {{rlp|/#要求|排序}}，那么行为未定义。

@3@ 如果 {{range|first1|last1}} 或 {{range|first2|last2}} 没有按 {{c|comp}} 排序，那么行为未定义。

@2,4@ 同 {{v|1,3}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

如果输出范围与 {{range|first1|last1}} 或 {{range|first2|last2}} 重叠，那么行为未定义。

===参数===
{{par begin}}
{{par range|first1|last1|3=|range=第一个输入的有序}}
{{par range|first2|last2|3=|range=第二个输入的有序}}
{{par|d_first|输出范围的起始}}
{{par exec pol}}
{{par cmp ord|comp|p1=InputIt1|p2=InputIt2}} 
{{par hreq}}
{{par req named|InputIt1, InputIt2|InputIterator}}
{{par req named|ForwardIt1, ForwardIt2, ForwardIt3|ForwardIterator}}
{{par req named|OutputIt|OutputIterator}}
{{par req named|Compare|Compare}}
{{par end}}

===返回值===
所构造范围的尾后迭代器。

===复杂度===
给定 {{mathjax-or|\(\scriptsize N_1\)|N{{su|b=1}}}} 为 {{c|std::distance(first1, last1)}}，{{mathjax-or|\(\scriptsize N_2\)|N{{su|b=2}}}} 为 {{c|std::distance(first2, last2)}}：

@1,2@ 最多应用 {{mathjax-or|\(\scriptsize 2 \cdot (N_1+N_2)-1\)|2⋅(N{{su|b=1}}+N{{su|b=2}})-1}} 次 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 进行比较。

@3,4@ 最多应用 {{mathjax-or|\(\scriptsize 2 \cdot (N_1+N_2)-1\)|2⋅(N{{su|b=1}}+N{{su|b=2}})-1}} 次比较函数 {{c|comp}}。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===可能的实现===
{{eq impl
|title1=set_union (1)|ver1=1|1=
template&lt;class InputIt1, class InputIt2, class OutputIt&gt;
OutputIt set_union(InputIt1 first1, InputIt1 last1,
                   InputIt2 first2, InputIt2 last2, OutputIt d_first)
{
    for (; first1 != last1; ++d_first)
    {
        if (first2 == last2)
            return std::copy(first1, last1, d_first);
        
        if (*first2 &lt; *first1)
            *d_first = *first2++;
        else
        {
            *d_first = *first1;
            if (!(*first1 &lt; *first2))
                ++first2;
            ++first1;
        }
    }
    return std::copy(first2, last2, d_first);
}
|title2=set_union (3)|ver2=3|2=
template&lt;class InputIt1, class InputIt2, class OutputIt, class Compare&gt;
OutputIt set_union(InputIt1 first1, InputIt1 last1,
                   InputIt2 first2, InputIt2 last2, OutputIt d_first, Compare comp)
{
    for (; first1 != last1; ++d_first)
    {
        if (first2 == last2)
            // 结束第二个范围，包含第一个范围的剩余：
            return std::copy(first1, last1, d_first);
        
        if (comp(*first2, *first1))
            *d_first = *first2++;
        else
        {
            *d_first = *first1;
            if (!comp(*first1, *first2)) // 等价 =&gt; 不需要包含 *first2.
                ++first2;
            ++first1;
        }
    }
    // 结束第二个范围，包含第二个范围的剩余：
    return std::copy(first2, last2, d_first);
}
}}

===注解===
此算法进行与 {{lc|std::merge}} 相似的任务。两个算法都会消耗两个输入范围，并以来自两个输入的元素产生一个有序输出。这两个算法间的区别在于如何处理来自两个输入范围的比较为等价的值（见{{named req|LessThanComparable|可比较小于}}的注解）。如果任何等价的值在第一范围中出现 {{c|n}} 次，在第二范围中出现 {{c|m}} 次，那么 {{lc|std::merge}} 会生成全部 {{c|n + m}} 次出现，而 {{tt|std::set_union}} 只会输出 {{c|std::max(n, m)}} 次。所以 {{lc|std::merge}} 恰好输入 {{c|std::distance(first1, last1) + std::distance(first2, last2)}} 个值，而 {{tt|std::set_union}} 可能产生较少的值。

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

void println(const std::vector&lt;int&gt;&amp; v)
{
    for (int i : v)
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::vector&lt;int&gt; v1, v2, dest;
    
    v1 = {1, 2, 3, 4, 5};
    v2 = {3, 4, 5, 6, 7};
    
    std::set_union(v1.cbegin(), v1.cend(),
                   v2.cbegin(), v2.cend(),
                   std::back_inserter(dest));
    println(dest);
    
    dest.clear();
    
    v1 = {1, 2, 3, 4, 5, 5, 5};
    v2 = {3, 4, 5, 6, 7};
    
    std::set_union(v1.cbegin(), v1.cend(),
                   v2.cbegin(), v2.cend(),
                   std::back_inserter(dest));
    println(dest);
}
|output=
1 2 3 4 5 6 7 
1 2 3 4 5 5 5 6 7
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=291|std=C++98|before=未指定如何处理输入范围中等价的值|after=已指定处理方法}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc includes}}
{{dsc inc|cpp/algorithm/dsc merge}}
{{dsc inc|cpp/algorithm/dsc set_difference}}
{{dsc inc|cpp/algorithm/dsc set_intersection}}
{{dsc inc|cpp/algorithm/dsc set_symmetric_difference}}
{{dsc inc|cpp/algorithm/ranges/dsc set_union}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
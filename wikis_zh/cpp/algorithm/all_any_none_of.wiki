{{cpp/title|all_of|any_of|none_of}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|since=c++11|notes={{mark constexpr since c++20}}|
template&lt; class InputIt, class UnaryPred &gt;
bool all_of( InputIt first, InputIt last, UnaryPred p );
}}
{{dcl|since=c++17|num=2|
template&lt; class ExecutionPolicy, class ForwardIt, class UnaryPred &gt;
bool all_of( ExecutionPolicy&amp;&amp; policy,
             ForwardIt first, ForwardIt last, UnaryPred p );
}}
{{dcla|num=3|since=c++11|notes={{mark constexpr since c++20}}|
template&lt; class InputIt, class UnaryPred &gt;
bool any_of( InputIt first, InputIt last, UnaryPred p );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt, class UnaryPred &gt;
bool any_of( ExecutionPolicy&amp;&amp; policy,
             ForwardIt first, ForwardIt last, UnaryPred p );
}}
{{dcla|num=5|since=c++11|notes={{mark constexpr since c++20}}|
template&lt; class InputIt, class UnaryPred &gt;
bool none_of( InputIt first, InputIt last, UnaryPred p );
}}
{{dcl|num=6|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt, class UnaryPred &gt;
bool none_of( ExecutionPolicy&amp;&amp; policy,
              ForwardIt first, ForwardIt last, UnaryPred p );
}}
{{dcl end}}

@1@ 检查一元谓词 {{c|p}} 是否对范围 {{range|first|last}} 中所有元素返回 {{c|true}}。

@3@ 检查一元谓词 {{c|p}} 是否对范围 {{range|first|last}} 中至少一个元素返回 {{c|true}}。

@5@ 检查一元谓词 {{c|p}} 是否不对范围 {{range|first|last}} 中任何元素返回 {{c|true}}。

@2,4,6@ 同 {{v|1,3,5}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

===参数===
{{par begin}}
{{par range|3=要检验的}}
{{par exec pol}}
{{par pred1|p|p1=InputIt}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par req named|ForwardIt|ForwardIterator}}
{{par req named|UnaryPred|Predicate}}
{{par end}}

===返回值===
{{cpp/algorithm/truth table all any none}}

===复杂度===
@1-6@ 应用最多 {{c|std::distance(first, last)}} 次谓词 {{c|p}}。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===可能的实现===
参阅
* {{tt|all_of}} 在 [https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L508 libstdc++] 与 [https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L838 libc++] 中的实现。
* {{tt|any_of}} 在 [https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L541 libstdc++] 与 [https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L852 libc++] 中的实现。
* {{tt|none_of}} 在 [https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L523 libstdc++] 与 [https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L866 libc++] 中的实现。
{{eq impl
|title1=all_of|ver1=1|1=
template&lt;class InputIt, class UnaryPred&gt;
constexpr bool all_of(InputIt first, InputIt last, UnaryPred p)
{
    return std::find_if_not(first, last, p) == last;
}
|title2=any_of|ver2=3|2=
template&lt;class InputIt, class UnaryPred&gt;
constexpr bool any_of(InputIt first, InputIt last, UnaryPred p)
{
    return std::find_if(first, last, p) != last;
}
|title3=none_of|ver3=5|3=
template&lt;class InputIt, class UnaryPred&gt;
constexpr bool none_of(InputIt first, InputIt last, UnaryPred p)
{
    return std::find_if(first, last, p) == last;
}
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;numeric&gt;
#include &lt;vector&gt;
 
int main()
{
    std::vector&lt;int&gt; v(10, 2);
    std::partial_sum(v.cbegin(), v.cend(), v.begin());
    std::cout &lt;&lt; "在这些数字中：";
    std::copy(v.cbegin(), v.cend(), std::ostream_iterator&lt;int&gt;(std::cout, " "));
    std::cout &lt;&lt; '\n';
    
    if (std::all_of(v.cbegin(), v.cend(), [](int i) { return i % 2 == 0; }))
        std::cout &lt;&lt; "所有数字都是偶数\n";
     
    if (std::none_of(v.cbegin(), v.cend(), std::bind(std::modulus&lt;&gt;(),
                                                     std::placeholders::_1, 2)))
        std::cout &lt;&lt; "没有任何数字是奇数\n";
    
    struct DivisibleBy
    {
        const int d;
        DivisibleBy(int n) : d(n) {}
        bool operator()(int n) const { return n % d == 0; }
    };
    
    if (std::any_of(v.cbegin(), v.cend(), DivisibleBy(7)))
        std::cout &lt;&lt; "至少有一个数字可以被 7 整除\n";
}
|output=
在这些数字中：2 4 6 8 10 12 14 16 18 20
所有数字都是偶数
没有任何数字是奇数
至少有一个数字可以被 7 整除
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc all_any_none_of}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
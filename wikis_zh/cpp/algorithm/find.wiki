{{cpp/title|find|find_if|find_if_not}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl rev begin|num=1}}
{{dcla|anchor=版本_1|constexpr=c++20|until=c++26|
template&lt; class InputIt, class T &gt;
InputIt find( InputIt first, InputIt last, const T&amp; value );
}}
{{dcl|since=c++26|1=
template&lt; class InputIt, class T = typename std::iterator_traits
                                       &lt;InputIt&gt;::value_type &gt;
constexpr InputIt find( InputIt first, InputIt last, const T&amp; value );
}}
{{dcl rev end}}
{{dcl rev begin|num=2}}
{{dcl|since=c++17|until=c++26|
template&lt; class ExecutionPolicy, class ForwardIt, class T &gt;
ForwardIt find( ExecutionPolicy&amp;&amp; policy,
                ForwardIt first, ForwardIt last, const T&amp; value );
}}
{{dcl|since=c++26|1=
template&lt; class ExecutionPolicy,
          class ForwardIt, class T = typename std::iterator_traits
                                         &lt;ForwardIt&gt;::value_type &gt;
ForwardIt find( ExecutionPolicy&amp;&amp; policy,
                ForwardIt first, ForwardIt last, const T&amp; value );
}}
{{dcl rev end}}
{{dcla|num=3|constexpr=c++20|
template&lt; class InputIt, class UnaryPred &gt;
InputIt find_if( InputIt first, InputIt last, UnaryPred p );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt, class UnaryPred &gt;
ForwardIt find_if( ExecutionPolicy&amp;&amp; policy,
                   ForwardIt first, ForwardIt last, UnaryPred p );
}}
{{dcla|num=5|since=c++11|constexpr=c++20|
template&lt; class InputIt, class UnaryPred &gt;
InputIt find_if_not( InputIt first, InputIt last, UnaryPred q );
}}
{{dcl|num=6|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt, class UnaryPred &gt;
ForwardIt find_if_not( ExecutionPolicy&amp;&amp; policy,
                       ForwardIt first, ForwardIt last, UnaryPred q );
}}
{{dcl end}}

返回指向范围 {{range|first|last}} 中满足特定判别标准的首个元素的迭代器（没有这种元素时返回 {{c|last}}）。

@1@ {{tt|find}} 搜索等于（用 {{c/core|1=operator==}} 比较）{{c|value}} 的元素。

@3@ {{tt|find_if}} 搜索谓词 {{c|p}} 对其返回 {{c|true}} 的元素。

@5@ {{tt|find_if_not}} 搜索谓词 {{c|q}} 对其返回 {{c|false}} 的元素。

@2,4,6@ 同 {{v|1,3,5}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

===参数===
{{par begin}}
{{par range|3=要检验的}}
{{par|value|要与元素比较的值}}
{{par exec pol}}
{{par pred1|p|value=true|如果是要求的元素|p1=InputIt}}
{{par pred1|q|value=false|如果是要求的元素|p1=InputIt}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par req named|ForwardIt|ForwardIterator}}
{{par req named|UnaryPredicate|Predicate}}
{{par end}}

===返回值===
[[cpp/iterator#范围|范围]] {{range|first|last}} 中首个满足以下条件的迭代器 {{c|it}}，或者在没有满足条件的迭代器时返回 {{c|last}}：
@1,2@ {{c|1=*it == value}} 是 {{c|true}}。
@3,4@ {{c|1=p(*it)}} 是 {{c|true}}。
@5,6@ {{c|1=q(*it)}} 是 {{c|false}}。

===复杂度===
给定 {{mathjax-or|\(\scriptsize N\)|N}} 为 {{c|std::distance(first, last)}}：
@1,2@ 最多应用 {{mathjax-or|\(\scriptsize N\)|N}} 次 {{tt|1=operator==}} 与 {{c|value}} 进行比较。
@3,4@ 最多应用 {{mathjax-or|\(\scriptsize N\)|N}} 次谓词 {{c|p}}。
@5,6@ 最多应用 {{mathjax-or|\(\scriptsize N\)|N}} 次谓词 {{c|q}}。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior}}

===可能的实现===
{{eq impl
|title1=find (1)|ver1=1|1=
template&lt;class InputIt, class T = typename std::iterator_traits&lt;InputIt&gt;::value_type&gt;
constexpr InputIt find(InputIt first, InputIt last, const T&amp; value)
{
    for (; first != last; ++first)
        if (*first == value)
            return first;
    
    return last;
}
|title2=find_if (3)|ver2=3|2=
template&lt;class InputIt, class UnaryPred&gt;
constexpr InputIt find_if(InputIt first, InputIt last, UnaryPred p)
{
    for (; first != last; ++first)
        if (p(*first))
            return first;
    
    return last;
}
|title3=find_if_not (5)|ver3=5|3=
template&lt;class InputIt, class UnaryPred&gt;
constexpr InputIt find_if_not(InputIt first, InputIt last, UnaryPred q)
{
    for (; first != last; ++first)
        if (!q(*first))
            return first;
    
    return last;
}
}}

===注解===
如果没有 C++11，那么 {{tt|std::find_if_not}} 的等价版本是以取反的谓词使用 {{tt|std::find_if}}。
{{eq fun|
template&lt;class InputIt, class UnaryPred&gt;
InputIt find_if_not(InputIt first, InputIt last, UnaryPred q)
{
    return std::find_if(first, last, std::not1(q));
}
}}

{{feature test macro|__cpp_lib_algorithm_default_value_type|value=202403|std=C++26|算法中的[[cpp/language/list initialization|列表初始化]] {{vl|1,2}}}}

===示例===
{{example
|以下示例在给定的序列中查找数值。
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;cassert&gt;
#include &lt;complex&gt;
#include &lt;initializer_list&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

bool is_even(int i)
{
    return i % 2 == 0;
}

void example_contains()
{
    const auto haystack = {1, 2, 3, 4};

    for (const int needle : {3, 5})
        if (std::find(haystack.begin(), haystack.end(), needle) == haystack.end())
            std::cout &lt;&lt; "haystack 不包含 " &lt;&lt; needle &lt;&lt; '\n';
        else
            std::cout &lt;&lt; "haystack 包含 " &lt;&lt; needle &lt;&lt; '\n';
}

void example_predicate()
{
    for (const auto&amp; haystack : {std::array{3, 1, 4}, {1, 3, 5}&lt;!----&gt;})
    {
        const auto it = std::find_if(haystack.begin(), haystack.end(), is_even);
        if (it != haystack.end())
            std::cout &lt;&lt; "haystack 包含偶数：" &lt;&lt; *it &lt;&lt; '\n';
        else
            std::cout &lt;&lt; "haystack 不包含偶数\n";
    }
}

void example_list_init()
{
    std::vector&lt;std::complex&lt;double&gt;&gt; haystack{&lt;!----&gt;{4.0, 2.0}&lt;!----&gt;};
#ifdef __cpp_lib_algorithm_default_value_type
    // 推导的 T 使得列表初始化成为可能
    const auto it = std::find(haystack.begin(), haystack.end(), {4.0, 2.0});
#else
    const auto it = std::find(haystack.begin(), haystack.end(), std::complex{4.0, 2.0});
#endif
    assert(it == haystack.begin());  
}

int main()
{
    example_contains();
    example_predicate();
    example_list_init();
}
|output=
haystack 包含 3
haystack 不包含 5
haystack 包含偶数：4
haystack 不包含偶数
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=283|std=C++98|before={{tt|T}} 需要是{{named req|EqualityComparable}}的，但是 {{tt|InputIt}} 的值类型不一定是 {{tt|T}}|after=移除该要求}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc adjacent_find}}
{{dsc inc|cpp/algorithm/dsc find_end}}
{{dsc inc|cpp/algorithm/dsc find_first_of}}
{{dsc inc|cpp/algorithm/dsc mismatch}}
{{dsc inc|cpp/algorithm/dsc search}}
{{dsc inc|cpp/algorithm/ranges/dsc find}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
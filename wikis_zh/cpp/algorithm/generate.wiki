{{cpp/title|generate}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|
template&lt; class ForwardIt, class Generator &gt;
void generate( ForwardIt first, ForwardIt last, Generator g );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt, class Generator &gt;
void generate( ExecutionPolicy&amp;&amp; policy,
               ForwardIt first, ForwardIt last, Generator g );
}}
{{dcl end}}

@1@ 以给定函数对象 {{c|g}} 所生成的值对范围 {{range|first|last}} 中的每个元素赋值。

@2@ 同 {{v|1}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition}}

===参数===
{{par begin}}
{{par range|3=要生成的}}
{{par exec pol}}
{{par gen|g|rp=ForwardIt}}
{{par hreq}}
{{par req named|ForwardIt|ForwardIterator}}
{{par end}}

===返回值===
（无）

===复杂度===
调用 {{c|g()}} 和赋值各 {{c|std::distance(first, last)}} 次。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=yes}}

===可能的实现===
{{eq fun|1=
template&lt;class ForwardIt, class Generator&gt;
constexpr //&lt; C++20 起
void generate(ForwardIt first, ForwardIt last, Generator g)
{
    for (; first != last; ++first)
        *first = g();
}
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

void println(std::string_view fmt, const auto&amp; v)
{
    for (std::cout &lt;&lt; fmt; const auto&amp; e : v)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
};


int f()
{ 
    static int i;
    return ++i;
}

int main()
{
    std::vector&lt;int&gt; v(5);
    
    std::generate(v.begin(), v.end(), f);
    println("v: ", v);
    
    // 以来自 lambda 函数的默认值 0,1,2,3,4 初始化
    // 等价于 std::iota(v.begin(), v.end(), 0);
    std::generate(v.begin(), v.end(), [n = 0] () mutable { return n++; });
    println("v: ", v);
}
|output=
v: 1 2 3 4 5
v: 0 1 2 3 4
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc fill}}
{{dsc inc|cpp/algorithm/dsc generate_n}}
{{dsc inc|cpp/algorithm/dsc iota}}
{{dsc inc|cpp/algorithm/ranges/dsc generate}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
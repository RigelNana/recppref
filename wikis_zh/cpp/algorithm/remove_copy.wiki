{{cpp/title|remove_copy|remove_copy_if}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl rev begin|num=1}}
{{dcla|anchor=版本_1|constexpr=c++20|until=c++26|
template&lt; class InputIt, class OutputIt, class T &gt;
OutputIt remove_copy( InputIt first, InputIt last,
                      OutputIt d_first, const T&amp; value );
}}
{{dcl|since=c++26|1=
template&lt; class InputIt, class OutputIt,
          class T = typename std::iterator_traits
                        &lt;InputIt&gt;::value_type &gt;
constexpr OutputIt remove_copy( InputIt first, InputIt last,
                                OutputIt d_first, const T&amp; value );
}}
{{dcl rev end}}
{{dcl rev begin|num=2}}
{{dcl|since=c++17|until=c++26|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2, class T &gt;
ForwardIt2 remove_copy( ExecutionPolicy&amp;&amp; policy,
                        ForwardIt1 first, ForwardIt1 last,
                        ForwardIt2 d_first, const T&amp; value );
}}
{{dcl|since=c++26|1=
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2,
          class T = typename std::iterator_traits
                        &lt;ForwardIt1&gt;::value_type &gt;
ForwardIt2 remove_copy( ExecutionPolicy&amp;&amp; policy,
                        ForwardIt1 first, ForwardIt1 last,
                        ForwardIt2 d_first, const T&amp; value );
}}
{{dcl rev end}}
{{dcla|num=3|notes={{mark constexpr since c++20}}|
template&lt; class InputIt, class OutputIt, class UnaryPred &gt;
OutputIt remove_copy_if( InputIt first, InputIt last,
                         OutputIt d_first, UnaryPred p );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2, class UnaryPred &gt;
ForwardIt2 remove_copy_if( ExecutionPolicy&amp;&amp; policy,
                           ForwardIt1 first, ForwardIt1 last,
                           ForwardIt2 d_first, UnaryPred p );
}}
{{dcl end}}

复制来自范围 {{range|first|last}} 的元素到从 {{c|d_first}} 开始的另一范围，省略满足特定判别标准的元素。

@1@ 忽略所有等于（用 {{c/core|1=operator==}} 比较）{{c|value}} 的元素。

@3@ 忽略所有谓词 {{c|p}} 对其返回 {{c|true}} 的元素。

@2,4@ 同 {{v|1,3}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

如果 {{rev inl|until=c++20|{{c|1=*d_first = *first}} 非法}}{{rev inl|since=c++20|{{c|*first}} 不[[cpp/iterator#类型与可写性|可写入]] {{c|d_first}}}}，那么程序非良构。

如果源范围与目标范围有重叠，那么行为未定义。

===参数===
{{par begin}}
{{par range|3=要复制的|range=源}}
{{par|d_first|目标范围的起始}}
{{par|value|不复制的元素的值}}
{{par exec pol}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par req named|OutputIt|OutputIterator}}
{{par req named|ForwardIt1, ForwardIt2|ForwardIterator}}
{{par req named|UnaryPred|Predicate}}
{{par end}}

===返回值===
指向最后被复制元素之后的迭代器。

===复杂度===
给定 {{mathjax-or|\(\scriptsize N\)|N}} 为 {{c|std::distance(first, last)}}：
@1,2@ 应用 {{mathjax-or|\(\scriptsize N\)|N}} 次 {{c/core|1=operator==}} 进行比较。
@3,4@ 应用 {{mathjax-or|\(\scriptsize N\)|N}} 次谓词 {{c|p}}。

对带有 {{tt|ExecutionPolicy}} 的重载，{{tt|ForwardIt1}} 的 {{tt|value_type}} 不满足{{named req|MoveConstructible}}时会有性能开销。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===可能的实现===
{{eq impl|title1=remove_copy (1)|ver1=1|1=
template&lt;class InputIt, class OutputIt,
         class T = typename std::iterator_traits&lt;InputIt&gt;::value_type&gt;
constexpr OutputIt remove_copy(InputIt first, InputIt last,
                               OutputIt d_first, const T&amp; value)
{
    for (; first != last; ++first)
        if (!(*first == value))
            *d_first++ = *first;
    return d_first;
}
|title2=remove_copy_if (3)|ver2=3|2=
template&lt;class InputIt, class OutputIt, class UnaryPred&gt;
constexpr OutputIt remove_copy_if(InputIt first, InputIt last,
                                  OutputIt d_first, UnaryPred p)
{
    for (; first != last; ++first)
        if (!p(*first))
            *d_first++ = *first;
    return d_first;
}
}}

===注解===
{{feature test macro|__cpp_lib_algorithm_default_value_type|value=202403|std=C++26|算法中的[[cpp/language/list initialization|列表初始化]] {{vl|1,2}}}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;complex&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

int main()
{
    // 即时擦除井号字符 '#'。
    std::string str = "#返回#值#优化";
    std::cout &lt;&lt; "擦除前：" &lt;&lt; std::quoted(str) &lt;&lt; "\n";

    std::cout &lt;&lt; "擦除后：\"";
    std::remove_copy(str.begin(), str.end(),
                     std::ostream_iterator&lt;char&gt;(std::cout), '#');
    std::cout &lt;&lt; "\"\n";

    // 即时擦除 {1, 3} 值。
    std::vector&lt;std::complex&lt;double&gt;&gt; nums{&lt;!----&gt;{2, 2}, {1, 3}, {4, 8}, {1, 3}&lt;!----&gt;};
    std::remove_copy(nums.begin(), nums.end(),
                     std::ostream_iterator&lt;std::complex&lt;double&gt;&gt;(std::cout),
    #ifdef __cpp_lib_algorithm_default_value_type
                     {1, 3}); // T 被推导
    #else
                     std::complex&lt;double&gt;{1, 3});
    #endif
}
|output=
擦除前：#返回#值#优化
擦除后：返回值优化
(2,2)(4,8)
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=779|std=C++98|before={{tt|T}} 需要是{{named req|EqualityComparable}}&lt;br&gt;的，但是 {{tt|ForwardIt}} 的值类型不一定是 {{tt|T}}|after=改成要求&lt;br&gt;{{c|1=*d_first = *first}} 合法}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc remove}}
{{dsc inc|cpp/algorithm/dsc copy}}
{{dsc inc|cpp/algorithm/dsc partition_copy}}
{{dsc inc|cpp/algorithm/ranges/dsc remove_copy}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|is_sorted}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|since=c++11|notes={{mark constexpr since c++20}}|
template&lt; class ForwardIt &gt;
bool is_sorted( ForwardIt first, ForwardIt last );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt &gt;
bool is_sorted( ExecutionPolicy&amp;&amp; policy,
                ForwardIt first, ForwardIt last );
}}
{{dcla|num=3|since=c++11|notes={{mark constexpr since c++20}}|
template&lt; class ForwardIt, class Compare &gt;
bool is_sorted( ForwardIt first, ForwardIt last, Compare comp );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt, class Compare &gt;
bool is_sorted( ExecutionPolicy&amp;&amp; policy,
                ForwardIt first, ForwardIt last, Compare comp );
}}
{{dcl end}}

检查范围 {{range|first|last}} 中的元素是否以非降序排序。

@1@ 检查元素是否已按 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} {{rlp|/#要求|排序}}。

@3@ 检查元素是否已按 {{c|comp}} 排序。

@2,4@ 同 {{v|1,3}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

===参数===
{{par begin}}
{{par range|3=要检验的}}
{{par exec pol}}
{{par cmp ord|comp|p1=ForwardIt}}
{{par hreq}}
{{par req named|ForwardIt|ForwardIterator}}
{{par req named|Compare|Compare}}
{{par end}}

===返回值===
在范围中的元素已按非降序排序时返回 {{c|true}}，否则返回 {{c|false}}。

===复杂度===
给定 {{mathjax-or|\(\scriptsize N\)|N}} 为 {{c|std::distance(first, last)}}：

@1,2@ 应用 {{mathjax-or|\(\scriptsize O(N)\)|O(N)}} 次 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 进行比较。

@3,4@ 应用 {{mathjax-or|\(\scriptsize O(N)\)|O(N)}} 次比较函数 {{c|comp}}。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===可能的实现===
参阅 [https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L3184 libstdc++] 和 [https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L3642 libc++] 中的实现。

{{eq impl
|title1=is_sorted (1)|ver1=1|1=
template&lt;class ForwardIt&gt;
bool is_sorted(ForwardIt first, ForwardIt last)
{
    return std::is_sorted_until(first, last) == last;
}
|title2=is_sorted (3)|ver2=3|2=
template&lt;class ForwardIt, class Compare&gt;
bool is_sorted(ForwardIt first, ForwardIt last, Compare comp)
{
    return std::is_sorted_until(first, last, comp) == last;
}
}}

===注解===
{{tt|std::is_sorted}} 对空范围及长为 1 的范围均返回 {{c|true}}。

===示例===
{{example
 | code=
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;functional&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main() 
{
    std::vector&lt;int&gt; v;
    assert(std::is_sorted(v.cbegin(), v.cend()) &amp;&amp; "空范围总是有序");
    v.push_back(42);
    assert(std::is_sorted(v.cbegin(), v.cend()) &amp;&amp; "大小为 1 的范围总是有序");
    
    int data[] = {3, 1, 4, 1, 5};
    assert(not std::is_sorted(std::begin(data), std::end(data)));
    
    std::sort(std::begin(data), std::end(data));
    assert(std::is_sorted(std::begin(data), std::end(data)));
    assert(not std::is_sorted(std::begin(data), std::end(data), std::greater&lt;&gt;{}));
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc is_sorted_until}}
{{dsc inc|cpp/algorithm/ranges/dsc is_sorted}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
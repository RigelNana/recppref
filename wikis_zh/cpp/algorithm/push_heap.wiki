{{cpp/title|push_heap}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|
template&lt; class RandomIt &gt;
void push_heap( RandomIt first, RandomIt last );
}}
{{dcl|num=2|notes={{mark constexpr since c++20}}|
template&lt; class RandomIt, class Compare &gt;
void push_heap( RandomIt first, RandomIt last, Compare comp );
}}
{{dcl end}}

将位于位置 {{c|last - 1}} 的元素插入到{{rlp|/#堆操作|堆}} {{range|first|last - 1}} 中。插入元素后的堆即是 {{range|first|last}}。

@1@ 堆是关于 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 的。
@2@ 堆是关于 {{c|comp}} 的。

如果满足以下任意条件，那么行为未定义：
* {{range|first|last - 1}} 不是关于对应比较器的堆。
{{rev begin}}
{{rev|until=c++11|
* {{c|*first}} 的类型不{{named req|Swappable}}。
}}
{{rev|since=c++11|
* {{tt|RandomIt}} 不{{named req|ValueSwappable}}。
* {{c|*first}} 的类型不{{named req|MoveConstructible}}。
* {{c|*first}} 的类型不{{named req|MoveAssignable}}。
}}
{{rev end}}

===参数===
{{par begin}}
{{par range|3=插入后构成二叉堆的}}
{{par cmp|comp|p1=RandomIt}} 
{{par hreq}}
{{par req named|RandomIt|RandomAccessIterator}}
{{par req named|Compare|Compare}}
{{par end}}

===复杂度===
给定 {{mathjax-or|\(\scriptsize N\)|N}} 为 {{c|std::distance(first, last)}}：
@1@ 最多应用 {{mathjax-or|\(\scriptsize \log(N)\)|log(N)}} 次 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 进行比较。
@2@ 最多应用 {{mathjax-or|\(\scriptsize \log(N)\)|log(N)}} 次比较函数 {{c|comp}}。

===示例===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;
#include &lt;vector&gt;

void println(std::string_view rem, const std::vector&lt;int&gt;&amp; v)
{
    std::cout &lt;&lt; rem;
    for (int e : v)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::vector&lt;int&gt; v{3, 1, 4, 1, 5, 9};
    
    std::make_heap(v.begin(), v.end());
    println("make_heap 后：", v);
    
    v.push_back(6);
    println("push_back 后：", v);
    
    std::push_heap(v.begin(), v.end());
    println("push_heap 后：", v);
}
|output=
make_heap 后：9 5 4 1 1 3
push_back 后：9 5 4 1 1 3 6
push_heap 后：9 5 6 1 1 3 4
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3032|std=C++98|before={{range|first|last}} 的元素不需要可交换|after=需要}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc is_heap}}
{{dsc inc|cpp/algorithm/dsc is_heap_until}}
{{dsc inc|cpp/algorithm/dsc make_heap}}
{{dsc inc|cpp/algorithm/dsc pop_heap}}
{{dsc inc|cpp/algorithm/dsc sort_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc push_heap}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
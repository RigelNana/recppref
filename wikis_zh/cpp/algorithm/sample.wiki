{{cpp/title|sample}}
{{cpp/algorithm/navbar}}
{{ddcl|header=algorithm|since=c++17|
template&lt; class PopulationIt, class SampleIt, class Distance, class URBG &gt;
SampleIterator sample( PopulationIt first, PopulationIt last,
                       SampleIt out, Distance n, URBG&amp;&amp; g );
}}

从序列 {{range|first|last}}（不重复地）选择 {{c|n}} 个元素，使得每个样本拥有相等的出现概率，并将这些被选择的元素写入到输出迭代器 {{c|out}}。用随机数生成器 {{c|g}} 生成随机数。

如果 {{c|n}} 大于序列中的元素数量，那么就会选择序列中的所有元素。

算法只有在 {{tt|PopulationIterator}} 满足{{named req|ForwardIterator}}的要求时才稳定（保持被选择元素的相对顺序）。

如果 {{rev inl|until=c++20|{{c|first}} 的值类型}}{{rev inl|since=c++20|{{c|*first}}}} 不[[cpp/iterator#类型与可写性|可写入]] {{c|out}}，那么程序非良构。

如果满足以下任意条件，那么行为未定义：
* {{c|out}} 在 {{range|first|last}} 中。
* {{tt|PopulationIt}} 不满足{{named req|InputIterator}}的要求。
* {{tt|SampleIt}} 不满足{{named req|OutputIterator}}的要求。
* 满足以下所有条件：
{{rev begin}}
{{rev|until=c++23|
:* {{tt|PopulationIt}} 不满足{{named req|ForwardIterator}}的要求。
}}
{{rev|since=c++23|
:* {{tt|PopulationIt}} 没有实现 {{lconcept|forward_iterator}}。
}}
{{rev end}}
:* {{tt|SampleIt}} 不满足{{named req|RandomAccessIterator}}的要求。
* 给定类型 {{tt|T}} 为 {{c/core|std::remove_reference_t&lt;URBG&gt;}}，满足以下任意条件：
:* {{tt|T}} 不满足{{named req|UniformRandomBitGenerator}}的要求。
{{rrev|until=c++20|
:* {{tt|T}} 的返回类型不可转换到 {{tt|Distance}}。
}}

===参数===
{{par begin}}
{{par range|3=要（作为总体）从中采样的}}
{{par|out|要写入样本的输出迭代器}}
{{par|n|要抽取的样本数}}
{{par|g|用作随机源的随机数生成器}}
{{par hreq}}
{{par req|{{tt|Distance}} 必须是整数类型。}}
{{par end}}

===返回值===
在输出最后样本后返回 {{c|out}} 的副本，即采样范围的结尾。

===复杂度===
与 {{c|std::distance(first,last)}} 成线性。

===可能的实现===
参阅 [https://github.com/gcc-mirror/gcc/blob/14d8a5ae472ca5743016f37da2dd4770d83dea21/libstdc%2B%2B-v3/include/bits/stl_algo.h#L5743-L5869 libstdc++]、[https://github.com/llvm/llvm-project/blob/f221d905b131158cbe3cbc4320d1ecd1376c3f22/libcxx/include/__algorithm/sample.h libc++] 与 [https://github.com/microsoft/STL/blob/472161105d596192194d4715ccad307c6c163b4a/stl/inc/algorithm#L4518-L4600 MSVC STL] 中的实现。

===注解===
此函数可以实现选择抽样或{{enwiki|reservoir sampling|蓄水池抽样}}。

{{feature test macro|__cpp_lib_sample|{{tt|std::sample}}|value=201603L|std=C++17}}

===示例===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;random&gt;
#include &lt;string&gt;
 
int main()
{
    std::string in {"ABCDEFGHIJK"}, out;
    std::sample(in.begin(), in.end(), std::back_inserter(out), 4,
                std::mt19937 {std::random_device{}()});
    std::cout &lt;&lt; "从 " &lt;&lt; in &lt;&lt; " 中随机选取四个字母：" &lt;&lt; out &lt;&lt; '\n';
}
|p=true
|output=
从 ABCDEFGHIJK 中随机选取四个字母：EFGK
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc random_shuffle}}
{{dsc inc|cpp/algorithm/ranges/dsc sample}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
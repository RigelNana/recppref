{{cpp/title|fill}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl rev begin|num=1}}
{{dcla|anchor=版本_1|constexpr=c++20|until=c++26|
template&lt; class ForwardIt, class T &gt;
void fill( ForwardIt first, ForwardIt last, const T&amp; value );
}}
{{dcl|since=c++26|1=
template&lt; class ForwardIt, class T = typename std::iterator_traits
                                         &lt;ForwardIt&gt;::value_type &gt;
constexpr void fill( ForwardIt first, ForwardIt last,
                     const T&amp; value );
}}
{{dcl rev end}}
{{dcl rev begin|num=2}}
{{dcl|since=c++17|until=c++26|
template&lt; class ExecutionPolicy, class ForwardIt, class T &gt;
void fill( ExecutionPolicy&amp;&amp; policy,
           ForwardIt first, ForwardIt last, const T&amp; value );
}}
{{dcl|since=c++26|1=
template&lt; class ExecutionPolicy,
          class ForwardIt, class T = typename std::iterator_traits
                                         &lt;ForwardIt&gt;::value_type &gt;
void fill( ExecutionPolicy&amp;&amp; policy,
           ForwardIt first, ForwardIt last, const T&amp; value );
}}
{{dcl rev end}}
{{dcl end}}

@1@ 将给定的 {{c|value}} 赋给 {{range|first|last}} 中的所有元素。

@2@ 同 {{v|1}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition}}

如果 {{c|value}} 不[[cpp/iterator#类型与可写性|可写入]] {{c|first}}，那么程序非良构。

===参数===
{{par begin}}
{{par range|3=要修改的}}
{{par|value|要赋的值}}
{{par exec pol}}
{{par hreq}}
{{par req named|ForwardIt|ForwardIterator}}
{{par end}}

===复杂度===
赋值 {{c|std::distance(first, last)}} 次。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=yes}}

===可能的实现===
{{eq impl|title1=fill (1)|ver1=1|1=
template&lt;class ForwardIt,
         class T = typename std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;
void fill(ForwardIt first, ForwardIt last, const T&amp; value)
{
    for (; first != last; ++first)
        *first = value;
}
}}

===注解===
{{feature test macro|__cpp_lib_algorithm_default_value_type|value=202403|std=C++26|算法中的[[cpp/language/list initialization|列表初始化]] {{vl|1,2}}}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;complex&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

void println(const auto&amp; seq)
{
    for (const auto&amp; e : seq)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::vector&lt;int&gt; v{0, 1, 2, 3, 4, 5, 6, 7, 8};
    println(v);

    // 将所有元素设为 8
    std::fill(v.begin(), v.end(), 8);
    println(v);

    std::vector&lt;std::complex&lt;double&gt;&gt; nums{&lt;!----&gt;{1, 3}, {2, 2}, {4, 8}&lt;!----&gt;};
    println(nums);
    #ifdef __cpp_lib_algorithm_default_value_type
        std::fill(nums.begin(), nums.end(), {4, 2});
    #else
        std::fill(nums.begin(), nums.end(), std::complex&lt;double&gt;{4, 2});
    #endif
    println(nums);
}
|output=
0, 1, 2, 3, 4, 5, 6, 7, 8
8, 8, 8, 8, 8, 8, 8, 8, 8
(1,3), (2,2), (4,8)
(4,2), (4,2), (4,2)
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=283|std=C++98|before={{tt|T}} 需要是{{named req|CopyAssignable}}的，但是 {{tt|T}} 不一定可写入 {{tt|ForwardIt}}|after=改成要求可写入}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc fill_n}}
{{dsc inc|cpp/algorithm/dsc copy}}
{{dsc inc|cpp/algorithm/dsc generate}}
{{dsc inc|cpp/algorithm/dsc transform}}
{{dsc inc|cpp/algorithm/ranges/dsc fill}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|replace|replace_if}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl rev begin|num=1}}
{{dcla|anchor=版本_1|constexpr=c++20|until=c++26|
template&lt; class ForwardIt, class T &gt;
void replace( ForwardIt first, ForwardIt last,
              const T&amp; old_value, const T&amp; new_value );
}}
{{dcl|since=c++26|1=
template&lt; class ForwardIt, class T = typename std::iterator_traits
                                         &lt;ForwardIt&gt;::value_type &gt;
constexpr void replace( ForwardIt first, ForwardIt last,
                        const T&amp; old_value, const T&amp; new_value );
}}
{{dcl rev end}}
{{dcl rev begin|num=2}}
{{dcl|since=c++17|until=c++26|
template&lt; class ExecutionPolicy, class ForwardIt, class T &gt;
void replace( ExecutionPolicy&amp;&amp; policy,
              ForwardIt first, ForwardIt last,
              const T&amp; old_value, const T&amp; new_value );
}}
{{dcl|since=c++26|1=
template&lt; class ExecutionPolicy, class ForwardIt,
          class T = typename std::iterator_traits
                        &lt;ForwardIt&gt;::value_type &gt;
void replace( ExecutionPolicy&amp;&amp; policy,
              ForwardIt first, ForwardIt last,
              const T&amp; old_value, const T&amp; new_value );
}}
{{dcl rev end}}
{{dcl rev begin|num=3}}
{{dcla|anchor=版本_3|constexpr=c++20|until=c++26|
template&lt; class ForwardIt, class UnaryPred, class T &gt;
void replace_if( ForwardIt first, ForwardIt last,
                 UnaryPred p, const T&amp; new_value );
}}
{{dcl|since=c++26|1=
template&lt; class ForwardIt, class UnaryPred,
          class T = typename std::iterator_traits
                        &lt;ForwardIt&gt;::value_type&gt; &gt;
constexpr void replace_if( ForwardIt first, ForwardIt last,
                           UnaryPred p, const T&amp; new_value );
}}
{{dcl rev end}}
{{dcl rev begin|num=4}}
{{dcl|since=c++17|until=c++26|
template&lt; class ExecutionPolicy,
          class ForwardIt, class UnaryPred, class T &gt;
void replace_if( ExecutionPolicy&amp;&amp; policy,
                 ForwardIt first, ForwardIt last,
                 UnaryPred p, const T&amp; new_value );
}}
{{dcl|since=c++26|1=
template&lt; class ExecutionPolicy,
          class ForwardIt, class UnaryPred,
          class T = typename std::iterator_traits
                        &lt;ForwardIt&gt;::value_type&gt; &gt;
void replace_if( ExecutionPolicy&amp;&amp; policy,
                 ForwardIt first, ForwardIt last,
                 UnaryPred p, const T&amp; new_value );
}}
{{dcl end}}

以 {{c|new_value}} 替换范围 {{range|first|last}} 中所有满足特定判别标准的元素。

@1@ 替换所有等于（用 {{c/core|1=operator==}} 比较）{{c|old_value}} 的元素。

@3@ 替换所有谓词 {{c|p}} 对其返回 {{c|true}} 的元素。

@2,4@ 同 {{v|1,3}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

如果 {{rev inl|until=c++20|{{c|1=*first = new_value}} 非法}}{{rev inl|since=c++20|{{c|new_value}} 不[[cpp/iterator#类型与可写性|可写入]] {{c|first}}}}，那么程序非良构。

===参数===
{{par begin}}
{{par range|3=要处理的}}
{{par|old_value|要被替换的元素值}}
{{par exec pol}}
{{par pred1|p|如果应该替换元素|p1=ForwardIt}}
{{par|new_value|用作替换者的值}}
{{par hreq}}
{{par req named|ForwardIt|ForwardIterator}}
{{par req named|UnaryPred|Predicate}}
{{par end}}

===复杂度===
给定 {{mathjax-or|\(\scriptsize N\)|N}} 为 {{c|std::distance(first, last)}}：
@1,2@ 应用 {{mathjax-or|\(\scriptsize N\)|N}} 次 {{c/core|1=operator==}} 进行比较。
@3,4@ 应用 {{mathjax-or|\(\scriptsize N\)|N}} 次谓词 {{c|p}}。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===注解===
算法以引用接收 {{c|old_value}} 和 {{c|new_value}}，所以如果其中任何一个是到范围 {{range|first|last}} 中元素的引用，那么算法的行为可能会与预期不同。

{{feature test macro|__cpp_lib_algorithm_default_value_type|value=202403|std=C++26|算法中的[[cpp/language/list initialization|列表初始化]] {{vl|1-4}}}}

===可能的实现===
{{eq impl
|title1=replace (1)|ver1=1|1=
template&lt;class ForwardIt,
         class T = typename std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;
void replace(ForwardIt first, ForwardIt last,
             const T&amp; old_value, const T&amp; new_value)
{
    for (; first != last; ++first)
        if (*first == old_value)
            *first = new_value;
}
|title2=replace_if (3)|ver2=3|2=
template&lt;class ForwardIt, class UnaryPred,
         class T = typename std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;
void replace_if(ForwardIt first, ForwardIt last,
                UnaryPred p, const T&amp; new_value)
{
    for (; first != last; ++first)
        if (p(*first))
            *first = new_value;
}
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;complex&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;

void println(const auto&amp; seq)
{
    for (const auto&amp; e : seq)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::array&lt;int, 10&gt; s{5, 7, 4, 2, 8, 6, 1, 9, 0, 3};

    // 将出现的所有 8 替换为 88。 
    std::replace(s.begin(), s.end(), 8, 88);
    println(s);

    // 将所有小于 5 的值替换为 55。
    std::replace_if(s.begin(), s.end(),
                    std::bind(std::less&lt;int&gt;(), std::placeholders::_1, 5), 55);
    println(s);

    std::array&lt;std::complex&lt;double&gt;, 2&gt; nums{&lt;!----&gt;{&lt;!----&gt;{1, 3}, {1, 3}&lt;!----&gt;}&lt;!----&gt;};
    #ifdef __cpp_lib_algorithm_default_value_type
        std::replace(nums.begin(), nums.end(), {1, 3}, {4, 2});
    #else
        std::replace(nums.begin(), nums.end(), std::complex&lt;double&gt;{1, 3},
                                               std::complex&lt;double&gt;{4, 2});
    #endif
    println(nums);
}
|output=
5 7 4 2 88 6 1 9 0 3
5 7 55 55 88 6 55 9 55 55
(4,2) (4,2)
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=283|std=C++98|before={{tt|T}} 需要是{{named req|CopyAssignable}}的（对于 {{tt|replace}}&lt;br&gt;还需要是{{named req|EqualityComparable}}的），但是&lt;br&gt;{{tt|ForwardIt}} 的值类型不一定是 {{tt|T}}，{{tt|T}} 也不一定可写入 {{tt|ForwardIt}}|after=改成要求&lt;br&gt;{{c|1=*first = new_value}} 合法}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc replace_copy}}
{{dsc inc|cpp/algorithm/ranges/dsc replace}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
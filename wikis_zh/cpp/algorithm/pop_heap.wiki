{{cpp/title|pop_heap}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|
template&lt; class RandomIt &gt;
void pop_heap( RandomIt first, RandomIt last );
}}
{{dcl|num=2|notes={{mark constexpr since c++20}}|
template&lt; class RandomIt, class Compare &gt;
void pop_heap( RandomIt first, RandomIt last, Compare comp );
}}
{{dcl end}}

交换在位置 {{c|first}} 的值和在位置 {{c|last - 1}} 的值，并使得子范围 {{range|first|last - 1}} 变为堆。这拥有从{{rlp|/#堆操作|堆}} {{range|first|last}} 移除首个元素的效果。

@1@ 堆是关于 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 的。
@2@ 堆是关于 {{c|comp}} 的。

如果满足以下任意条件，那么行为未定义：
* {{range|first|last}} 为空。
* {{range|first|last}} 不是关于对应比较器的堆。
{{rev begin}}
{{rev|until=c++11|
* {{c|*first}} 的类型不{{named req|Swappable}}。
}}
{{rev|since=c++11|
* {{tt|RandomIt}} 不{{named req|ValueSwappable}}。
* {{c|*first}} 的类型不{{named req|MoveConstructible}}。
* {{c|*first}} 的类型不{{named req|MoveAssignable}}。
}}
{{rev end}}

===参数===
{{par begin}}
{{par range|3=要修改的（提取根节点）|range=非空二叉堆}}
{{par cmp|comp|p1=RandomIt}}
{{par hreq}}
{{par req named|RandomIt|RandomAccessIterator}}
{{par req named|Compare|Compare}}
{{par end}}

===复杂度===
给定 {{mathjax-or|\(\scriptsize N\)|N}} 为 {{c|std::distance(first, last)}}：
@1@ 最多应用 {{mathjax-or|\(\scriptsize 2\log(N)\)|2log(N)}} 次 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 进行比较。
@2@ 最多应用 {{mathjax-or|\(\scriptsize 2\log(N)\)|2log(N)}} 次比较函数 {{c|comp}}。

===示例===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;
#include &lt;type_traits&gt;
#include &lt;vector&gt;
 
void println(std::string_view rem, const auto&amp; v)
{
    std::cout &lt;&lt; rem;
    if constexpr (std::is_scalar_v&lt;std::decay_t&lt;decltype(v)&gt;&gt;)
        std::cout &lt;&lt; v;
    else
        for (int e : v)
            std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::vector&lt;int&gt; v{3, 1, 4, 1, 5, 9};
    
    std::make_heap(v.begin(), v.end());
    println("make_heap 后：", v);
    
    std::pop_heap(v.begin(), v.end()); // 将最大元素移动到末尾
    println("pop_heap 后： ", v);
    
    int largest = v.back();
    println("最大元素：     ", largest);
    
    v.pop_back(); // 实际移除最大元素
    println("pop_back 后： ", v);
}
|output=
make_heap 后：9 5 4 1 1 3
pop_heap 后： 5 3 4 1 1 9
最大元素：     9
pop_back 后： 5 3 4 1 1
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=1205|std=C++98|before={{range|first|last}} 为空时行为不明确|after=此时行为未定义}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc push_heap}}
{{dsc inc|cpp/algorithm/dsc is_heap}}
{{dsc inc|cpp/algorithm/dsc is_heap_until}}
{{dsc inc|cpp/algorithm/dsc make_heap}}
{{dsc inc|cpp/algorithm/dsc sort_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc pop_heap}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
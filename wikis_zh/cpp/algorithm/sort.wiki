{{cpp/title|sort}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|
template&lt; class RandomIt &gt;
void sort( RandomIt first, RandomIt last );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class RandomIt &gt;
void sort( ExecutionPolicy&amp;&amp; policy,
           RandomIt first, RandomIt last );
}}
{{dcl|num=3|notes={{mark constexpr since c++20}}|
template&lt; class RandomIt, class Compare &gt;
void sort( RandomIt first, RandomIt last, Compare comp );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy, class RandomIt, class Compare &gt;
void sort( ExecutionPolicy&amp;&amp; policy,
           RandomIt first, RandomIt last, Compare comp );
}}
{{dcl end}}

以非降序排序范围 {{range|first|last}} 中的元素。不保证维持相等元素的顺序。

@1@ 按 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 进行{{rlp|/#要求|排序}}。

@3@ 按 {{c|comp}} 进行排序。

@2,4@ 同 {{v|1,3}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

如果满足以下任意条件，那么行为未定义：
{{rev begin}}
{{rev|until=c++11|
* {{c|*first}} 的类型不{{named req|Swappable}}。
}}
{{rev|since=c++11|
* {{tt|RandomIt}} 不{{named req|ValueSwappable}}。
* {{c|*first}} 的类型不{{named req|MoveConstructible}}。
* {{c|*first}} 的类型不{{named req|MoveAssignable}}。
}}
{{rev end}}

===参数===
{{par begin}}
{{par range|3=要排序的}}
{{par exec pol}}
{{par cmp ord|comp|p1=RandomIt}} 
{{par hreq}}
{{par req named|RandomIt|RandomAccessIterator}}
{{par req named|Compare|Compare}} 
{{par end}}

===复杂度===
给定 {{mathjax-or|\(\scriptsize N\)|N}} 为 {{c|last - first}}：
@1,2@ 应用 {{mathjax-or|\(\scriptsize O(N \cdot \log(N))\)|O(N·log(N))}} 次 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 进行比较。
@3,4@ 应用 {{mathjax-or|\(\scriptsize O(N \cdot \log(N))\)|O(N·log(N))}} 次比较函数 {{c|comp}}。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===可能的实现===
参阅 [https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L1950 libstdc++] 与 [https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L3901 libc++] 中的实现。

===注解===
{{wg21|LWG713}} 前，复杂度要求仅允许 {{tt|sort()}} {{enwiki|Quicksort|快速排序}}实现，这在最坏情况可能要求 {{mathjax-or|\(\scriptsize O(N^2)\)|O(N{{su|p=2}})}} 次比较。

{{enwiki|Introsort|内省排序}}能以 {{mathjax-or|\(\scriptsize O(N \cdot \log(N))\)|O(N·log(N))}} 次比较处理所有情况而无需在平均情况产生额外开销，从而常被用于实现 {{tt|sort()}}。

libc++ [https://reviews.llvm.org/D113413 在 LLVM 14 之前]未实现更正的时间复杂度要求。

===示例===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

int main()
{
    std::array&lt;int, 10&gt; s = {5, 7, 4, 2, 8, 6, 1, 9, 0, 3}; 
    
    auto print = [&amp;s](std::string_view const rem)
    {
        for (auto a : s)
            std::cout &lt;&lt; a &lt;&lt; ' ';
        std::cout &lt;&lt; "：" &lt;&lt; rem &lt;&lt; '\n';
    };
    
    std::sort(s.begin(), s.end());
    print("用默认的 operator&lt; 排序");
    
    std::sort(s.begin(), s.end(), std::greater&lt;int&gt;());
    print("用标准库比较函数对象排序");
    
    struct
    {
        bool operator()(int a, int b) const { return a &lt; b; }
    }
    customLess;
    
    std::sort(s.begin(), s.end(), customLess);
    print("用自定义函数对象排序");
    
    std::sort(s.begin(), s.end(), [](int a, int b)
                                  {
                                      return a &gt; b;
                                  });
    print("用 lambda 表达式排序");
}
|output=
0 1 2 3 4 5 6 7 8 9 ：用默认的 operator&lt; 排序
9 8 7 6 5 4 3 2 1 0 ：用标准库比较函数对象排序
0 1 2 3 4 5 6 7 8 9 ：用自定义函数对象排序
9 8 7 6 5 4 3 2 1 0 ：用 lambda 表达式排序
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=713|std=C++98|before={{mathjax-or|\(\scriptsize O(N \cdot \log(N))\)|O(N·log(N))}} 时间复杂度仅对平均情况要求|after=对最坏情况要求}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc partial_sort}}
{{dsc inc|cpp/algorithm/dsc stable_sort}}
{{dsc inc|cpp/algorithm/ranges/dsc sort}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
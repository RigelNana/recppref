{{cpp/title|clamp}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|since=c++17|
template&lt; class T &gt;
constexpr const T&amp; clamp( const T&amp; v, const T&amp; lo, const T&amp; hi );
}}
{{dcla|num=2|since=c++17|
template&lt; class T, class Compare &gt;
constexpr const T&amp; clamp( const T&amp; v, const T&amp; lo, const T&amp; hi,
                          Compare comp );
}}
{{dcl end}}

如果 {{c|v}} 属于 {{closed range|lo|hi}}，则返回 {{c|v}}；否则返回最临近的边界。

@1@ 使用 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 比较值。
@@ 如果 {{tt|T}} 不{{named req|LessThanComparable}}，那么行为未定义。&lt;ref&gt;如果避免使用 {{tt|NaN}}，那么 {{tt|T}} 可以是浮点类型。&lt;/ref&gt;

@2@ 使用 {{c|comp}} 比较值。

如果 {{c|lo}} 的值大于 {{c|hi}}，那么行为未定义。

&lt;references/&gt;

===参数===
{{par begin}}
{{par|v|要夹住的值}}
{{par|lo, hi|夹住 {{c|v}} 的边界}}
{{par cmp|comp|t1=T}} 
{{par end}}

===返回值===
在 {{c|v}} 小于 {{c|lo}} 时返回 {{c|lo}} 的引用，在 {{c|hi}} 小于 {{c|v}} 时返回 {{c|hi}} 的引用，否则返回到 {{c|v}} 的引用。

===复杂度===
@1@ 最多应用两次 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 进行比较。

@2@ 最多应用两次比较函数 {{c|comp}}。

===可能的实现===
{{eq impl
|title1=clamp (1)|ver1=1|1=
template&lt;class T&gt;
constexpr const T&amp; clamp(const T&amp; v, const T&amp; lo, const T&amp; hi)
{
    return clamp(v, lo, hi, less{});
}
|title2=clamp (2)|ver2=2|2=
template&lt;class T, class Compare&gt;
constexpr const T&amp; clamp(const T&amp; v, const T&amp; lo, const T&amp; hi, Compare comp)
{
    return comp(v, lo) ? lo : comp(hi, v) ? hi : v;
}
}}

===注解===
{{include|cpp/algorithm/minmax danger note|clamp}}

如果 {{c|v}} 与边界之一比较相等，那么会返回到 {{c|v}} 的引用，而不是到边界的引用。

{{feature test macro|__cpp_lib_clamp|std=C++17|value=201603L|{{ttt|std::clamp}}}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cstdint&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; "[原始] "
                 "[" &lt;&lt; INT8_MIN &lt;&lt; ',' &lt;&lt; INT8_MAX &lt;&lt; "] "
                 "[0," &lt;&lt; UINT8_MAX &lt;&lt; "]\n";

    for (const int v : {-129, -128, -1, 0, 42, 127, 128, 255, 256})
        std::cout &lt;&lt; std::setw(4) &lt;&lt; v
                  &lt;&lt; std::setw(11) &lt;&lt; std::clamp(v, INT8_MIN, INT8_MAX)
                  &lt;&lt; std::setw(8) &lt;&lt; std::clamp(v, 0, UINT8_MAX) &lt;&lt; '\n';
}
|output=
[原始] [-128,127] [0,255]
-129       -128       0
-128       -128       0
  -1         -1       0
   0          0       0
  42         42      42
 127        127     127
 128        127     128
 255        127     255
 256        127     255
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc min}}
{{dsc inc|cpp/algorithm/dsc max}}
{{dsc inc|cpp/utility/dsc in_range}}
{{dsc inc|cpp/algorithm/ranges/dsc clamp}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
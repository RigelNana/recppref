{{cpp/title|swap}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm|notes={{mark until c++11}}}}
{{dcl header|utility|notes={{mark since c++11}}}}
{{dcl header|string_view}}
{{dcl|num=1|notes={{mark|C++11 起为条件 noexcept}}&lt;br&gt;{{mark constexpr since c++20}}|1=
template&lt; class T &gt;
void swap( T&amp; a, T&amp; b );
}}
{{dcl|num=2|notes={{mark|C++11 起为条件 noexcept}}&lt;br&gt;{{mark constexpr since c++20}}|1=
template&lt; class T2, std::size_t N &gt;
void swap( T2 (&amp;a)[N], T2 (&amp;b)[N] );
}}
{{dcl end}}

交换给定值。

@1@ 交换 {{c|a}} 与 {{c|b}}。
{{rrev|since=c++17|
{{cpp/enable if| {{c|std::is_move_constructible_v&lt;T&gt; &amp;&amp; std::is_move_assignable_v&lt;T&gt;}} 是 {{c|true}} }}。
}}

@2@ 交换数组 {{c|a}} 与 {{c|b}}。等价于调用 {{c|std::swap_ranges(a, a + N, b)}}。
{{rrev|since=c++17|
{{cpp/enable if| {{c|std::is_swappable_v&lt;T2&gt;}} 是 {{c|true}} }}。
}}

===参数===
{{par begin}}
{{par|a, b|要交换的值}}
{{par hreq}}
{{par req|{{tt|T}} 必须满足{{rev inl|until=c++11|{{named req|CopyConstructible}}与{{named req|CopyAssignable}}}}{{rev inl|since=c++11|{{named req|MoveConstructible}}与{{named req|MoveAssignable}}}}。}}
{{par req named|T2|Swappable}}
{{par end}}

===返回值===
（无）

===异常===
@1@{{rrev multi|until1=c++11
|rev1=（无）
|rev2=
{{noexcept|
    std::is_nothrow_move_constructible&lt;T&gt;::value &amp;&amp;
    std::is_nothrow_move_assignable&lt;T&gt;::value
}}
}}
@2@{{rrev multi|since1=c++11|rev1=
{{noexcept|noexcept(swap(*a, *b))}} 查找异常说明中的标识符 {{tt|swap}} 时，除了任何由通常查找规则所找到的内容外，还会找到此函数模板，这使得异常说明等价于 C++17 的 {{lc|std::is_nothrow_swappable}}。
|since2=c++17|rev2={{noexcept|std::is_nothrow_swappable_v&lt;T2&gt;}}
}}

===复杂度===
@1@ 常数。

@2@ 与 {{c|N}} 成线性。

===特化===
{{rrev|until=c++20|
{{tt|std::swap}} 可以针对程序定义类型[[cpp/language/extending_std|在 std 命名空间中特化]]，但[[cpp/language/adl|实参依赖查找]]不会查找这些特化（命名空间 std 不是程序定义类型所关联的空间）。
}}
符合预期的使得{{ls|cpp/language/type#由程序定义的类型}}可交换的方式是，在与该类型相同的命名空间中提供非成员函数 {{tt|swap}}：细节见{{named req|Swappable}}。

标准库已提供下列重载：

{{dsc begin}}
{{dsc inc|cpp/utility/pair/dsc swap2}}
{{dsc inc|cpp/utility/tuple/dsc swap2}}
{{dsc inc|cpp/memory/shared_ptr/dsc swap2}}
{{dsc inc|cpp/memory/weak_ptr/dsc swap2}}
{{dsc inc|cpp/memory/unique_ptr/dsc swap2}}
{{dsc inc|cpp/utility/functional/function/dsc swap2}}
{{dsc inc|cpp/string/basic_string/dsc swap2}}
{{dsc inc|cpp/container/dsc swap2|array}}
{{dsc inc|cpp/container/dsc swap2|deque}}
{{dsc inc|cpp/container/dsc swap2|forward_list}}
{{dsc inc|cpp/container/dsc swap2|list}}
{{dsc inc|cpp/container/dsc swap2|vector}}
{{dsc inc|cpp/container/dsc swap2|map}}
{{dsc inc|cpp/container/dsc swap2|multimap}}
{{dsc inc|cpp/container/dsc swap2|set}}
{{dsc inc|cpp/container/dsc swap2|multiset}}
{{dsc inc|cpp/container/dsc swap2|unordered_map}}
{{dsc inc|cpp/container/dsc swap2|unordered_multimap}}
{{dsc inc|cpp/container/dsc swap2|unordered_set}}
{{dsc inc|cpp/container/dsc swap2|unordered_multiset}}
{{dsc inc|cpp/container/dsc swap2|queue}}
{{dsc inc|cpp/container/dsc swap2|priority_queue}}
{{dsc inc|cpp/container/dsc swap2|stack}}
{{dsc inc|cpp/numeric/valarray/dsc swap2}}
{{dsc inc|cpp/io/basic_stringbuf/dsc swap2}}
{{dsc inc|cpp/io/basic_stringstream/dsc swap2|basic_istringstream}}
{{dsc inc|cpp/io/basic_stringstream/dsc swap2|basic_ostringstream}}
{{dsc inc|cpp/io/basic_stringstream/dsc swap2|basic_stringstream}}
{{dsc inc|cpp/io/basic_filebuf/dsc swap2}}
{{dsc inc|cpp/io/basic_fstream/dsc swap2|basic_ifstream}}
{{dsc inc|cpp/io/basic_fstream/dsc swap2|basic_ofstream}}
{{dsc inc|cpp/io/basic_fstream/dsc swap2|basic_fstream}}
{{dsc inc|cpp/io/basic_syncbuf/dsc swap2}}
{{dsc inc|cpp/io/basic_spanbuf/dsc swap2}}
{{dsc inc|cpp/io/basic_spanstream/dsc swap2|basic_ispanstream}}
{{dsc inc|cpp/io/basic_spanstream/dsc swap2|basic_ospanstream}}
{{dsc inc|cpp/io/basic_spanstream/dsc swap2|basic_spanstream}}
{{dsc inc|cpp/regex/basic_regex/dsc swap2}}
{{dsc inc|cpp/regex/match_results/dsc swap2}}
{{dsc inc|cpp/thread/thread/dsc swap2|thread}}
{{dsc inc|cpp/thread/unique_lock/dsc swap2}}
{{dsc inc|cpp/thread/shared_lock/dsc swap2}}
{{dsc inc|cpp/thread/promise/dsc swap2}}
{{dsc inc|cpp/thread/packaged_task/dsc swap2}}
{{dsc inc|cpp/utility/optional/dsc swap2}}
{{dsc inc|cpp/utility/any/dsc swap2}}
{{dsc inc|cpp/utility/variant/dsc swap2}}
{{dsc inc|cpp/utility/basic_stacktrace/dsc swap2}}
{{dsc inc|cpp/filesystem/path/dsc swap2}}
{{dsc inc|cpp/utility/expected/dsc swap2}}
{{dsc inc|cpp/thread/thread/dsc swap2|jthread}}
{{dsc inc|cpp/utility/functional/move_only_function/dsc swap2}}
{{dsc inc|cpp/thread/stop_source/dsc swap2}}
{{dsc inc|cpp/thread/stop_token/dsc swap2}}
&lt;!--TODOs:
swap(std::flat_map)
swap(std::flat_set)
swap(std::flat_multimap)
swap(std::flat_multiset)
swap(std::unexpected)
swap(std::mdspan)
--&gt;
{{dsc end}}

===示例===
{{example
|&lt;!-- 应演示 swap 对泛型的正确使用，如在 void swap(T&amp; other) {using std::swap; swap(member, other.member);} 中，不仅是平凡使用 --&gt;
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
 
namespace Ns
{
    class A
    {
        int id {};
 
        friend void swap(A&amp; lhs, A&amp; rhs)
        {
            std::cout &lt;&lt; "swap(" &lt;&lt; lhs &lt;&lt; ", " &lt;&lt; rhs &lt;&lt; ")\n";
            std::swap(lhs.id, rhs.id);
        }
 
        friend std::ostream&amp; operator&lt;&lt; (std::ostream&amp; os, A const&amp; a)
        {
            return os &lt;&lt; "A::id=" &lt;&lt; a.id;
        }
    
    public:
        A(int i) : id{i} {}
        A(A const&amp;) = delete;
        A&amp; operator = (A const&amp;) = delete;
    };
}
 
int main()
{
    int a = 5, b = 3;
    std::cout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; '\n';
    std::swap(a, b);
    std::cout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; '\n';
    
    Ns::A p{6}, q{9};
    std::cout &lt;&lt; p &lt;&lt; ' ' &lt;&lt; q &lt;&lt; '\n';
//  std::swap(p, q);  // 错误，不满足类型要求
    swap(p, q);       // OK：实参依赖查找找到了合适的友元 swap
    std::cout &lt;&lt; p &lt;&lt; ' ' &lt;&lt; q &lt;&lt; '\n';
}
|output=
5 3
3 5
A::id=6 A::id=9
swap(A::id=6, A::id=9)
A::id=9 A::id=6
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=227|std=C++98|before={{tt|T}} 不需要满足{{named req|CopyConstructible}}或&lt;br&gt;{{named req|DefaultConstructible}}（因此不保证能构造 {{tt|T}} 类型的临时对象）|after={{tt|T}} 也需要满足&lt;br&gt;{{named req|CopyConstructible}}}}
{{dr list item|wg=lwg|dr=809|std=C++98|before=数组无法交换|after=添加重载 {{v|2}}}}
{{dr list item|wg=lwg|dr=2554|std=C++11|before=因为名称查找问题，交换多维数组无法是 {{tt|noexcept}} 的|after=使之可能}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/ranges/dsc swap}}
{{dsc inc|cpp/algorithm/dsc iter_swap}}
{{dsc inc|cpp/algorithm/dsc swap_ranges}}
{{dsc inc|cpp/utility/dsc exchange}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
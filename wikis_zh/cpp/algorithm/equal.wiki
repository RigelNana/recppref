{{cpp/title|equal}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2 &gt;
bool equal( InputIt1 first1, InputIt1 last1,
            InputIt2 first2 );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt1, class ForwardIt2 &gt;
bool equal( ExecutionPolicy&amp;&amp; policy,
            ForwardIt1 first1, ForwardIt1 last1,
            ForwardIt2 first2 );
}}
{{dcla|num=3|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2, class BinaryPred &gt;
bool equal( InputIt1 first1, InputIt1 last1,
            InputIt2 first2, BinaryPred p );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2, class BinaryPred &gt;
bool equal( ExecutionPolicy&amp;&amp; policy,
            ForwardIt1 first1, ForwardIt1 last1,
            ForwardIt2 first2, BinaryPred p );
}}
{{dcla|num=5|since=c++14|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2 &gt;
bool equal( InputIt1 first1, InputIt1 last1,
            InputIt2 first2, InputIt2 last2 );
}}
{{dcl|num=6|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt1, class ForwardIt2 &gt;
bool equal( ExecutionPolicy&amp;&amp; policy,
            ForwardIt1 first1, ForwardIt1 last1,
            ForwardIt2 first2, ForwardIt2 last2 );
}}
{{dcla|num=7|since=c++14|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2, class BinaryPred &gt;
bool equal( InputIt1 first1, InputIt1 last1,
            InputIt2 first2, InputIt2 last2, BinaryPred p );
}}
{{dcl|num=8|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2, class BinaryPred &gt;
bool equal( ExecutionPolicy&amp;&amp; policy,
            ForwardIt1 first1, ForwardIt1 last1,
            ForwardIt2 first2, ForwardIt2 last2, BinaryPred p );
}}
{{dcl end}}

检查 {{range|first1|last1}} 与从 {{c|first2}} 开始的另一个范围是否相等：
* 对于重载 {{v|1-4}}，第二个范围包含 {{c|std::distance(first1, last1)}} 个元素。
* 对于重载 {{v|5-8}}，第二个范围是 {{range|first2|last2}}。

@1,5@ 用 {{c/core|1=operator==}} 比较元素。

@3,7@ 用给定的二元谓词 {{c|p}} 比较元素。

@2,4,6,8@ 同 {{v|1,3,5,7}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

===参数===
{{par begin}}
{{par range|first1|last1|要比较的|range=第一}}
{{par range|first2|last2|要比较的|range=第二}}
{{par exec pol}}
{{par pred2 eq|p| p1=InputIt1|p2=InputIt2}}
{{par hreq}}
{{par req named|InputIt1, InputIt2|InputIterator}}
{{par req named|ForwardIt1, ForwardIt2|ForwardIterator}}
{{par req named|BinaryPred|BinaryPredicate}}
{{par end}}

===返回值===
@1-4@ 如果两个范围内的对应元素都相等，那么返回 {{c|true}}。否则返回 {{c|false}}。

@5-8@ 如果 {{c|std::distance(first1, last1)}} 与 {{c|std::distance(first2, last2)}} 相等，并且两个范围内的对应元素都相等，那么返回 {{c|true}}。否则返回 {{c|false}}。

===复杂度===
给定 {{mathjax-or|\(\scriptsize N_1\)|N{{su|b=1}}}} 为 {{c|std::distance(first1, last1)}}，{{mathjax-or|\(\scriptsize N_2\)|N{{su|b=2}}}} 为 {{c|std::distance(first2, last2)}}：

@1@ 应用最多 {{mathjax-or|\(\scriptsize N_1\)|N{{su|b=1}}}} 次 {{c/core|1=operator==}} 进行比较。

@2@ 应用 {{mathjax-or|\(\scriptsize O(N_1)\)|O(N{{su|b=1}})}} 次 {{c/core|1=operator==}} 进行比较。

@3@ 应用最多 {{mathjax-or|\(\scriptsize N_1\)|N{{su|b=1}}}} 次谓词 {{c|p}}。

@4@ 应用 {{mathjax-or|\(\scriptsize O(N_1)\)|O(N{{su|b=1}})}} 次谓词 {{c|p}}。

@5-8@ 如果 {{tt|InputIt1}} 和 {{tt|InputIt2}} 都是{{named req|RandomAccessIterator}}，并且 {{c|1=last1 - first1 != last2 - first2}} 是 {{c|true}}，那么不会进行任何比较。
@@ 否则，给定 {{mathjax-or|\(\scriptsize N\)|N}} 为 {{mathjax-or|\(\scriptsize \min(N_1,N_2)\)|min(N{{su|b=1}},N{{su|b=2}})}}：

:@5@ 应用最多 {{mathjax-or|\(\scriptsize N\)|N}} 次 {{c/core|1=operator==}} 进行比较。

:@6@ 应用 {{mathjax-or|\(\scriptsize O(N)\)|O(N)}} 次 {{c/core|1=operator==}} 进行比较。

:@7@ 应用最多 {{mathjax-or|\(\scriptsize N\)|N}} 次谓词 {{c|p}}。

:@8@ 应用 {{mathjax-or|\(\scriptsize O(N)\)|O(N)}} 次谓词 {{c|p}}。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===可能的实现===
{{eq impl
|title1=equal (1)|ver1=1|1=
template&lt;class InputIt1, class InputIt2&gt;
constexpr //&lt; C++20 起
bool equal(InputIt1 first1, InputIt1 last1, InputIt2 first2)
{
    for (; first1 != last1; ++first1, ++first2)
        if (!(*first1 == *first2))
            return false;

    return true;
}
|title2=equal (3)|ver2=3|2=
template&lt;class InputIt1, class InputIt2, class BinaryPred&gt;
constexpr //&lt; C++20 起
bool equal(InputIt1 first1, InputIt1 last1,
           InputIt2 first2, BinaryPred p)
{
    for (; first1 != last1; ++first1, ++first2)
        if (!p(*first1, *first2))
            return false;

    return true;
}
|title3=equal (5)|ver3=5|3=
namespace detail
{
    // 随机访问迭代器实现（可以快速检测范围大小）
    template&lt;class RandomIt1, class RandomIt2&gt;
    constexpr //&lt; C++20 起
    bool equal(RandomIt1 first1, RandomIt1 last1, RandomIt2 first2, RandomIt2 last2,
               std::random_access_iterator_tag, std::random_access_iterator_tag)
    {
        if (last1 - first1 != last2 - first2)
            return false;
        
        for (; first1 != last1; ++first1, ++first2)
            if (!(*first1 == *first2))
                return false;
        
        return true;
    }
    
    // 输入迭代器实现（需要手动与 “last2” 进行比较）
    template&lt;class InputIt1, class InputIt2&gt;
    constexpr //&lt; C++20 起
    bool equal(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2,
               std::input_iterator_tag, std::input_iterator_tag)
    {
        for (; first1 != last1 &amp;&amp; first2 != last2; ++first1, ++first2)
            if (!(*first1 == *first2))
                return false;
        
        return first1 == last1 &amp;&amp; first2 == last2;
    }
}

template&lt;class InputIt1, class InputIt2&gt;
constexpr //&lt; since C++20
bool equal(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2)
{
    details::equal(first1, last1, first2, last2,
                   typename std::iterator_traits&lt;InputIt1&gt;::iterator_category(),
                   typename std::iterator_traits&lt;InputIt2&gt;::iterator_category());
}
|title4=equal (7)|ver4=7|4=
namespace detail
{
    // 随机访问迭代器实现（可以快速检测范围大小）
    template&lt;class RandomIt1, class RandomIt2, class BinaryPred&gt;
    constexpr //&lt; C++20 起
    bool equal(RandomIt1 first1, RandomIt1 last1,
               RandomIt2 first2, RandomIt2 last2, BinaryPred p,
               std::random_access_iterator_tag, std::random_access_iterator_tag)
    {
        if (last1 - first1 != last2 - first2)
            return false;
        
        for (; first1 != last1; ++first1, ++first2)
            if (!p(*first1, *first2))
                return false;
        
        return true;
    }
    
    // 输入迭代器实现（需要手动与 “last2” 进行比较）
    template&lt;class InputIt1, class InputIt2, class BinaryPred&gt;
    constexpr //&lt; C++20 起
    bool equal(InputIt1 first1, InputIt1 last1,
               InputIt2 first2, InputIt2 last2, BinaryPred p,
               std::input_iterator_tag, std::input_iterator_tag)
    {
        for (; first1 != last1 &amp;&amp; first2 != last2; ++first1, ++first2)
            if (!p(*first1, *first2))
                return false;
        
        return first1 == last1 &amp;&amp; first2 == last2;
    }
}

template&lt;class InputIt1, class InputIt2, class BinaryPred&gt;
constexpr //&lt; since C++20
bool equal(InputIt1 first1, InputIt1 last1,
           InputIt2 first2, InputIt2 last2, BinaryPred p)
{
    details::equal(first1, last1, first2, last2, p,
                   typename std::iterator_traits&lt;InputIt1&gt;::iterator_category(),
                   typename std::iterator_traits&lt;InputIt2&gt;::iterator_category());
}
}}

===注解===
{{tt|std::equal}} 不可应用到由 {{lc|std::unordered_set}}、{{lc|std::unordered_multiset}}、{{lc|std::unordered_map}} 或 {{lc|std::unordered_multimap}} 的迭代器构成的范围，因为即使此类容器存储相同的元素，在容器内元素存储的顺序也可能不同。

比较整个容器{{rev inl|since=c++17|或字符串视图}}是否相等时，针对该类型的 {{c/core|1=operator==}} 重载通常是更好的选择。

序列版本的 {{tt|std::equal}} 不保证是短路的。例如，如果两个范围的首对元素不相等，剩余元素也可能被被比较。在用 {{lc|std::memcmp}} 或实现特有的向量化算法比较范围时可能发生非短路比较。

===示例===
{{example
|下面的代码使用 {{ttt|std::equal}} 来测试字符串是否是回文。
|code=
#include &lt;algorithm&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

constexpr bool is_palindrome(const std::string_view&amp; s)
{
    return std::equal(s.cbegin(), s.cbegin() + s.size() / 2, s.crbegin());
}

void test(const std::string_view&amp; s)
{
    std::cout &lt;&lt; std::quoted(s)
              &lt;&lt; (is_palindrome(s) ? " 是" : " 不是")
              &lt;&lt; "回文\n";
}

int main()
{
    test("radar");
    test("hello");
}
|output=
"radar" 是回文
"hello" 不是回文
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc find}}
{{dsc inc|cpp/algorithm/dsc lexicographical_compare}}
{{dsc inc|cpp/algorithm/dsc mismatch}}
{{dsc inc|cpp/algorithm/dsc search}}
{{dsc inc|cpp/algorithm/ranges/dsc equal}}
{{dsc inc|cpp/utility/functional/dsc equal_to}}
{{dsc inc|cpp/algorithm/dsc equal_range}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
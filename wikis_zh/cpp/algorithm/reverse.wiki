{{cpp/title|reverse}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|
template&lt; class BidirIt &gt;
void reverse( BidirIt first, BidirIt last );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class BidirIt &gt;
void reverse( ExecutionPolicy&amp;&amp; policy, BidirIt first, BidirIt last );
}}
{{dcl end}}

@1@ 反转 {{range|first|last}} 范围中的元素顺序。
@@ 表现如同将 {{lc|std::iter_swap}} 应用到对于 {{range|0|std::distance(first, last) / 2}} 中的每个整数 {{c|i}} 对应的一对迭代器 {{c|first + i}} 和 {{c|(last - i) - 1}} 上。

@2@ 同 {{v|1}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition}}

如果 {{rev inl|until=c++20|{{c|*first}} 不{{named req|Swappable}}}}{{rev inl|since=c++20|{{tt|BidirIt}} 不{{named req|ValueSwappable}}}}，那么行为未定义。

===参数===
{{par begin}}
{{par range|3=要反转的}}
{{par exec pol}}
{{par hreq}}
{{par req named|BidirIt|BidirectionalIterator}}
{{par end}}

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=yes}}

===复杂度===
交换 {{c|(last - first) / 2}} 次。

===可能的实现===
参阅 [https://github.com/gcc-mirror/gcc/blob/14d8a5ae472ca5743016f37da2dd4770d83dea21/libstdc%2B%2B-v3/include/bits/stl_algo.h#L1087-L1152 libstdc++]、[https://github.com/llvm/llvm-project/blob/6adbc83ee9e46b476e0f75d5671c3a21f675a936/libcxx/include/__algorithm/reverse.h libc++] 和 [https://github.com/microsoft/STL/blob/472161105d596192194d4715ccad307c6c163b4a/stl/inc/xutility#L5335-L5370 MSVC STL] 中的实现。
{{eq fun|1=
template&lt;class BidirIt&gt;
constexpr // C++20 起
void reverse(BidirIt first, BidirIt last)
{
    using iter_cat = typename std::iterator_traits&lt;BidirIt&gt;::iterator_category;
    
    // 在 C++14 和更早的模式中可以使用标签派发，
    // 例如调用 reverse_impl(first, last, iter_cat())。
    if constexpr (std::is_base_of_v&lt;std::random_access_iterator_tag, iter_cat&gt;)
    {
        if (first == last)
            return;
        
        for (--last; first &lt; last; (void)++first, --last)
            std::iter_swap(first, last);
    }
    else
        while (first != last &amp;&amp; first != --last)
            std::iter_swap(first++, last);
}
}}

===注解===
{{cpp/algorithm/notes swap vectorization}}

===示例===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

void println(auto rem, auto const&amp; v)
{
    for (std::cout &lt;&lt; rem; auto e : v)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::vector&lt;int&gt; v {1, 2, 3};
    std::reverse(v.begin(), v.end());
    println("反转之后, v = ", v);
    
    int a[] = {4, 5, 6, 7};
    std::reverse(std::begin(a), std::end(a));
    println("反转之后, a = ", a);
}
|output=
反转之后, v = 3 2 1
反转之后, a = 7 6 5 4
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=223|std=C++98|before=交换时会对每对迭代器应用 {{lc|std::swap}}|after=改成应用 {{lc|std::iter_swap}}}}
{{dr list item|wg=lwg|dr=2039|std=C++98|before=在 {{c|i}} 等于 {{c|std::distance(first, last) / 2}} 时也会应用 {{lc|std::iter_swap}}|after=不应用}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc reverse_copy}}
{{dsc inc|cpp/algorithm/ranges/dsc reverse}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
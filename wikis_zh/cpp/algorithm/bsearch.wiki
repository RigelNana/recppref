{{cpp/title|bsearch}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|cstdlib}}
{{dcl|num=1|
void* bsearch( const void* key, const void* ptr, std::size_t count,
               std::size_t size, /* C 比较谓词 */* comp );
void* bsearch( const void* key, const void* ptr, std::size_t count,
               std::size_t size, /* 比较谓词 */* comp );
}}
{{dcl|num=2|notes={{mark expos}}|1=
extern "C" using /* C 比较谓词 */ = int(const void*, const void*);
extern "C++" using /* 比较谓词 */ = int(const void*, const void*);
}}
{{dcl end}}

在 {{c|ptr}} 所指向的数组中寻找等于 {{c|key}} 所指向的元素的元素。数组含有 {{c|count}} 个 {{c|size}} 字节的元素，且必须相对于 {{c|key}} 所指向的对象划分，即所有比较小于它的元素必须先出现于比较等于它的元素，而比较等于它者必须先出现于所有比较大于该关键对象的元素。完全排序的数组满足这些要求。用 {{c|comp}} 所指的函数比较数组元素。

如果数组未以按照 {{c|comp}} 所用的相同原则相对于 {{c|key}} 升序划分，那么行为未定义。

如果数组含有多个元素会被 {{c|comp}} 指示等于被搜索元素，那么函数返回哪个元素为其结果是未指定的。

===参数===
{{par begin}}
{{par|key|指向要搜索的元素的指针}}
{{par|ptr|指向要检验的数组的指针}}
{{par|count|数组中元素的数量}}
{{par|size|数组中每个元素的大小，以字节表示}}
{{par ccmp|comp|作为首个实参传递 {{c|key}}，作为第二个实参传递来自数组的元素。}}
{{par end}}

===返回值===
指向找到的元素的指针，或在找不到元素时返回空指针。

===注解===
无关乎名称，C 或 POSIX 标准都不要求此函数用二分查找实现，或进行任何复杂度保证。

C++ 标准库提供的两个重载互不相同，因为形参 {{c|comp}} 的类型互不相同（{{ls|cpp/language#语言链接}}是类型的一部分）。

===示例===
{{example
|
|code=
#include &lt;array&gt;
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;

template&lt;typename T&gt;
int compare(const void *a, const void *b)
{
    const auto &amp;arg1 = *(static_cast&lt;const T*&gt;(a));
    const auto &amp;arg2 = *(static_cast&lt;const T*&gt;(b));
    const auto cmp = arg1 &lt;=&gt; arg2;
    return cmp &lt; 0 ? -1
        :  cmp &gt; 0 ? +1
        :  0;
}

int main()
{
    std::array arr{1, 2, 3, 4, 5, 6, 7, 8};
    
    for (const int key : {4, 8, 9})
    {
        const int* p = static_cast&lt;int*&gt;(
            std::bsearch(&amp;key,
                arr.data(),
                arr.size(),
                sizeof(decltype(arr)::value_type),
                compare&lt;int&gt;));
        
        std::cout &lt;&lt; "值 " &lt;&lt; key;
        if (p)
            std::cout &lt;&lt; "在位置 " &lt;&lt; (p - arr.data())&lt;&lt; " 找到了";
        else
            std::cout &lt;&lt; "没有找到";
    }
}
|output=
在位置 3 找到了值 4
在位置 7 找到了值 8
没有找到值 9
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc qsort}}
{{dsc inc|cpp/algorithm/dsc equal_range}}
{{dsc see c|c/algorithm/bsearch}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
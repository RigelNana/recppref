{{cpp/title|includes}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2 &gt;
bool includes( InputIt1 first1, InputIt1 last1,
               InputIt2 first2, InputIt2 last2 );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2 &gt;
bool includes( ExecutionPolicy&amp;&amp; policy,
               ForwardIt1 first1, ForwardIt1 last1,
               ForwardIt2 first2, ForwardIt2 last2 );
}}
{{dcla|num=3|notes={{mark constexpr since c++20}}|
template&lt; class InputIt1, class InputIt2, class Compare &gt;
bool includes( InputIt1 first1, InputIt1 last1,
               InputIt2 first2, InputIt2 last2, Compare comp );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy,
          class ForwardIt1, class ForwardIt2, class Compare &gt;
bool includes( ExecutionPolicy&amp;&amp; policy,
               ForwardIt1 first1, ForwardIt1 last1,
               ForwardIt2 first2, ForwardIt2 last2, Compare comp );
}}
{{dcl end}}

在有序范围 {{range|first2|last2}} 是有序范围 {{range|first1|last1}} 的{{enwiki|subsequence|子序列}}的情况下返回 {{c|true}}（不必是连续的子序列）。

@1@ 如果 {{range|first1|last1}} 或 {{range|first2|last2}} 没有按 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} {{rlp|/#要求|排序}}，那么行为未定义。

@3@ 如果 {{range|first1|last1}} 或 {{range|first2|last2}} 没有按 {{c|comp}} 排序，那么行为未定义。

@2,4@ 同 {{v|1,3}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

===参数===
{{par begin}}
{{par range|first1|last1|要检验的|range=已排序}}
{{par range|first2|last2|要搜索的|range=已排序}}
{{par exec pol}}
{{par cmp ord|comp|p1=InputIt}} 
{{par hreq}}
{{par req named|InputIt1, InputIt2|InputIterator}}
{{par req named|ForwardIt1, ForwardIt2|ForwardIterator}}
{{par req named|Compare|Compare}}
{{par end}}

===返回值===
在 {{range|first2|last2}} 是 {{range|first1|last1}} 的子序列时返回 {{c|true}}；否则返回 {{c|false}}。

因为空序列是所有序列的子序列，所以在 {{range|first2|last2}} 为空时会返回 {{c|true}}。

===复杂度===
给定 {{mathjax-or|\(\scriptsize N_1\)|N{{su|b=1}}}} 为 {{c|std::distance(first1, last1)}}，{{mathjax-or|\(\scriptsize N_2\)|N{{su|b=2}}}} 为 {{c|std::distance(first2, last2)}}：

@1,2@ 最多应用 {{mathjax-or|\(\scriptsize 2 \cdot (N_1+N_2)-1\)|2⋅(N{{su|b=1}}+N{{su|b=2}})-1}} 次 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 进行比较。

@3,4@ 最多应用 {{mathjax-or|\(\scriptsize 2 \cdot (N_1+N_2)-1\)|2⋅(N{{su|b=1}}+N{{su|b=2}})-1}} 次比较函数 {{c|comp}}。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===可能的实现===
{{eq impl
|title1=include (1)|ver1=1|1=
template&lt;class InputIt1, class InputIt2&gt;
bool includes(InputIt1 first1, InputIt1 last1,
              InputIt2 first2, InputIt2 last2)
{
    for (; first2 != last2; ++first1)
    {
        if (first1 == last1 {{!!}} *first2 &lt; *first1)
            return false;
        if (!(*first1 &lt; *first2))
            ++first2;
    }
    return true;
}
|title2=include (3)|ver2=3|2=
template&lt;class InputIt1, class InputIt2, class Compare&gt;
bool includes(InputIt1 first1, InputIt1 last1,
              InputIt2 first2, InputIt2 last2, Compare comp)
{
    for (; first2 != last2; ++first1)
    {
        if (first1 == last1 {{!!}} comp(*first2, *first1))
            return false;
        if (!comp(*first1, *first2))
            ++first2;
    }
    return true;
}
}}

===示例===
{{example
||code=
#include &lt;algorithm&gt;
#include &lt;cctype&gt;
#include &lt;iostream&gt;

template&lt;class Os, class Co&gt;
Os&amp; operator&lt;&lt;(Os&amp; os, const Co&amp; v)
{
    for (const auto&amp; i : v)
        os &lt;&lt; i &lt;&lt; ' ';
    return os &lt;&lt; '\t';
}

int main()
{
    const auto
        v1 = {'a', 'b', 'c', 'f', 'h', 'x'},
        v2 = {'a', 'b', 'c'},
        v3 = {'a', 'c'},
        v4 = {'a', 'a', 'b'},
        v5 = {'g'},
        v6 = {'a', 'c', 'g'},
        v7 = {'A', 'B', 'C'};

    auto no_case = [](char a, char b) { return std::tolower(a) &lt; std::tolower(b); };

    std::cout
    &lt;&lt; v1 &lt;&lt; "\n包含：\n" &lt;&lt; std::boolalpha
    &lt;&lt; v2 &lt;&lt; "：" &lt;&lt; std::includes(v1.begin(), v1.end(), v2.begin(), v2.end()) &lt;&lt; '\n'
    &lt;&lt; v3 &lt;&lt; "：" &lt;&lt; std::includes(v1.begin(), v1.end(), v3.begin(), v3.end()) &lt;&lt; '\n'
    &lt;&lt; v4 &lt;&lt; "：" &lt;&lt; std::includes(v1.begin(), v1.end(), v4.begin(), v4.end()) &lt;&lt; '\n'
    &lt;&lt; v5 &lt;&lt; "：" &lt;&lt; std::includes(v1.begin(), v1.end(), v5.begin(), v5.end()) &lt;&lt; '\n'
    &lt;&lt; v6 &lt;&lt; "：" &lt;&lt; std::includes(v1.begin(), v1.end(), v6.begin(), v6.end()) &lt;&lt; '\n'
    &lt;&lt; v7 &lt;&lt; "：" &lt;&lt; std::includes(v1.begin(), v1.end(), v7.begin(), v7.end(), no_case)
          &lt;&lt; "（大小写不敏感）\n";
}
|output=
a b c f h x
包含：
a b c   ：true
a c     ：true
a a b   ：false
g       ：false
a c g   ：false
A B C   ：true（大小写不敏感）
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=1205|std=C++98|before={{range|first2|last2}} 为空时返回值不明确|after=此时会返回 {{c|true}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc set_difference}}
{{dsc inc|cpp/algorithm/dsc search}}
{{dsc inc|cpp/algorithm/ranges/dsc includes}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
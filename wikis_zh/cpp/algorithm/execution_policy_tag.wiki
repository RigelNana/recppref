{{cpp/algorithm/execution/title|seq|par|par_unseq|unseq}}
{{cpp/algorithm/navbar}}

{{dcl begin}}
{{dcl header|execution }}
{{dcl|since=c++17|
inline constexpr
std::execution::sequenced_policy seq { /* 未指明 */ };
}}
{{dcl|since=c++17|
inline constexpr
std::execution::parallel_policy par { /* 未指明 */ };
}}
{{dcl|since=c++17|
inline constexpr
std::execution::parallel_unsequenced_policy par_unseq { /* 未指明 */ };
}}
{{dcl|since=c++20|
inline constexpr
std::execution::unsequenced_policy unseq { /* 未指明 */ };
}}
{{dcl end}}

各执行策略类型
* {{lc|std::execution::sequenced_policy}}，
* {{lc|std::execution::parallel_policy}}，
* {{lc|std::execution::parallel_unsequenced_policy}}，和
* {{lc|std::execution::unsequenced_policy}}

相应的有以下实例：

* {{tt|std::execution::seq}}，
* {{tt|std::execution::par}}，
* {{tt|std::execution::par_unseq}}，和
* {{tt|std::execution::unseq}}。

这些实例用于指定并行算法的执行策略——即允许采用何种并行运算。

标准库的实现可以提供附加的执行策略。（可能的未来额外策略包含 {{tt|std::parallel::cuda}} 和 {{tt|std::parallel::opencl}} ）

===示例===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;chrono&gt;
#include &lt;cstdint&gt;
#include &lt;iostream&gt;
#include &lt;random&gt;
#include &lt;vector&gt;

#ifdef PARALLEL
#include &lt;execution&gt;
    namespace execution = std::execution;
#else
    enum class execution { seq, unseq, par_unseq, par };
#endif

void measure([[maybe_unused]] auto policy, std::vector&lt;std::uint64_t&gt; v)
{
    const auto start = std::chrono::steady_clock::now();
#ifdef PARALLEL
    std::sort(policy, v.begin(), v.end());
#else
    std::sort(v.begin(), v.end());
#endif
    const auto finish = std::chrono::steady_clock::now();
    std::cout &lt;&lt; std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(finish - start)
              &lt;&lt; '\n';
};

int main()
{
    std::vector&lt;std::uint64_t&gt; v(1'000'000);
    std::mt19937 gen {std::random_device{}()};
    std::ranges::generate(v, gen);

    measure(execution::seq, v);
    measure(execution::unseq, v);
    measure(execution::par_unseq, v);
    measure(execution::par, v);
}
|p=true
|output=
// 在线 GNU/gcc 编译器 (未定义 PARALLEL 宏)
81ms
80ms
79ms
78ms

// 编译为 g++ -std=c++23 -O3 ./test.cpp -ltbb -DPARALLEL
165ms
163ms
30ms
27ms
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/algorithm/dsc execution_policy_tag_t}}
{{dsc end}}

{{langlinks|en|es|ja}}
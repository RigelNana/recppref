{{cpp/title|count|count_if}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl rev begin|num=1}}
{{dcla|anchor=版本_1|constexpr=c++20|until=c++26|
template&lt; class InputIt, class T &gt;
typename std::iterator_traits&lt;InputIt&gt;::difference_type
    count( InputIt first, InputIt last, const T&amp; value );
}}
{{dcl|since=c++26|1=
template&lt; class InputIt, class T = typename std::iterator_traits
                                       &lt;InputIt&gt;::value_type &gt;
constexpr typename std::iterator_traits&lt;InputIt&gt;::difference_type
    count( InputIt first, InputIt last, const T&amp; value );
}}
{{dcl rev begin|num=2}}
{{dcl|since=c++17|until=c++26|
template&lt; class ExecutionPolicy, class ForwardIt, class T &gt;
typename std::iterator_traits&lt;ForwardIt&gt;::difference_type
    count( ExecutionPolicy&amp;&amp; policy,
           ForwardIt first, ForwardIt last, const T&amp; value );
}}
{{dcl|since=c++26|1=
template&lt; class ExecutionPolicy,
          class ForwardIt, class T = typename std::iterator_traits
                                         &lt;ForwardIt&gt;::value_type &gt;
typename std::iterator_traits&lt;ForwardIt&gt;::difference_type
    count( ExecutionPolicy&amp;&amp; policy,
           ForwardIt first, ForwardIt last, const T&amp; value );
}}
{{dcl rev end}}
{{dcla|num=3|constexpr=c++20|
template&lt; class InputIt, class UnaryPred &gt;
typename std::iterator_traits&lt;InputIt&gt;::difference_type
    count_if( InputIt first, InputIt last, UnaryPred p );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt, class UnaryPred &gt;
typename std::iterator_traits&lt;ForwardIt&gt;::difference_type
    count_if( ExecutionPolicy&amp;&amp; policy,
              ForwardIt first, ForwardIt last, UnaryPred p );
}}
{{dcl end}}

返回范围 {{range|first|last}} 中满足特定判别标准的元素数。

@1@ 计数等于 {{c|value}} 的元素（使用 {{c/core|1=operator==}}）。

@3@ 计数谓词 {{c|p}} 对其返回 {{c|true}} 的元素。

@2,4@ 同 {{v|1,3}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

===参数===
{{par begin}}
{{par range|3=要检验的}}
{{par|value|要搜索的值}}
{{par exec pol}}
{{par pred1|p|value=true|对要求的元素|p1=InputIt}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par req named|ForwardIt|ForwardIterator}}
{{par req named|UnaryPred|Predicate}}
{{par end}}

===返回值===
[[cpp/iterator#范围|范围]] {{range|first|last}} 中满足以下条件的迭代器 {{c|it}} 的个数：
@1,2@ {{c|1=*it == value}} 是 {{c|true}}。
@3,4@ {{c|1=p(*it) != false}} 是 {{c|true}}。

===复杂度===
给定 {{mathjax-or|\(\scriptsize N\)|N}} 为 {{c|std::distance(first, last)}}：
@1,2@ 应用 {{mathjax-or|\(\scriptsize N\)|N}} 次 {{c/core|1=operator==}} 与 {{c|value}} 进行比较。
@3,4@ 应用 {{mathjax-or|\(\scriptsize N\)|N}} 次谓词 {{c|p}}。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===注解===
对于无任何额外判别标准的 {{range|first|last}} 中的元素数，见 {{lc|std::distance}}。

{{feature test macro|__cpp_lib_algorithm_default_value_type|value=202403|std=C++26|算法中的[[cpp/language/list initialization|列表初始化]] {{vl|1,2}}}}

===可能的实现===
参阅 {{tt|count}} 在 [https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L4056 libstdc++] 与 [https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L1171 libc++] 中的实现。

参阅 {{tt|count_if}} 在 [https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L4079 libstdc++] 与 [https://github.com/llvm-mirror/libcxx/blob/a12cb9d211019d99b5875b6d8034617cbc24c2cc/include/algorithm#L1186 libc++] 中的实现。

{{eq impl
|title1=count (1)|ver1=1|1=
template&lt;class InputIt, class T = typename std::iterator_traits&lt;InputIt&gt;::value_type&gt;
typename std::iterator_traits&lt;InputIt&gt;::difference_type
    count(InputIt first, InputIt last, const T&amp; value)
{
    typename std::iterator_traits&lt;InputIt&gt;::difference_type ret = 0;
    for (; first != last; ++first)
        if (*first == value)
            ++ret;
    return ret;
}
|title2=count_if (3)|ver2=3|2=
template&lt;class InputIt, class UnaryPred&gt;
typename std::iterator_traits&lt;InputIt&gt;::difference_type
    count_if(InputIt first, InputIt last, UnaryPred p)
{
    typename std::iterator_traits&lt;InputIt&gt;::difference_type ret = 0;
    for (; first != last; ++first)
        if (p(*first))
            ++ret;
    return ret;
}
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;cassert&gt;
#include &lt;complex&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
 
int main()
{
    constexpr std::array v = {1, 2, 3, 4, 4, 3, 7, 8, 9, 10};
    std::cout &lt;&lt; "v：";
    std::copy(v.cbegin(), v.cend(), std::ostream_iterator&lt;int&gt;(std::cout, " "));
    std::cout &lt;&lt; '\n';
    
    // 确定有多少个整数匹配目标值。
    for (const int target: {3, 4, 5})
    {
        const int num_items = std::count(v.cbegin(), v.cend(), target);
        std::cout &lt;&lt; "目标数字：" &lt;&lt; target &lt;&lt; "，计数：" &lt;&lt; num_items &lt;&lt; '\n';
    }

    // 用 lambda 表达式计量能被 4 整除的元素数。
    int count_div4 = std::count_if(v.begin(), v.end(), [](int i) { return i % 4 == 0; });
    std::cout &lt;&lt; "能被 4 整除的数字个数：" &lt;&lt; count_div4 &lt;&lt; '\n';
 
    // 简化版的 distance，具有 O(N) 复杂度：
    auto distance = [](auto first, auto last)
    {
        return std::count_if(first, last, [](auto){ return true; });
    };
    static_assert(distance(v.begin(), v.end()) == 10);

    std::array&lt;std::complex&lt;double&gt;, 3&gt; nums{&lt;!----&gt;{&lt;!----&gt;{4, 2}, {1, 3}, {4, 2}&lt;!----&gt;}&lt;!----&gt;};
    #ifdef __cpp_lib_algorithm_default_value_type
        // 推导的 T 使得列表初始化成为可能
        auto c = std::count(nums.cbegin(), nums.cend(), {4, 2});
    #else
        auto c = std::count(nums.cbegin(), nums.cend(), std::complex&lt;double&gt;{4, 2});
    #endif
    assert(c == 2);
}
|output=
v：1 2 3 4 4 3 7 8 9 10
目标数字：3，计数：2
目标数字：4，计数：2
目标数字：5，计数：0
能被 4 整除的数字个数：3
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=283|std=C++98|before={{tt|T}} 需要是{{named req|EqualityComparable}}的，但是 {{tt|InputIt}} 的值类型不一定是 {{tt|T}}|after=移除该要求}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc distance}}
{{dsc inc|cpp/algorithm/ranges/dsc count}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
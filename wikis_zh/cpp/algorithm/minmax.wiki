{{cpp/title|minmax}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|since=c++11|constexpr=c++14|
template&lt; class T &gt;
std::pair&lt;const T&amp;, const T&amp;&gt; minmax( const T&amp; a, const T&amp; b );
}}
{{dcla|num=2|since=c++11|constexpr=c++14|
template&lt; class T, class Compare &gt;
std::pair&lt;const T&amp;, const T&amp;&gt; minmax( const T&amp; a, const T&amp; b,
                                      Compare comp );
}}
{{dcla|num=3|since=c++11|constexpr=c++14|
template&lt; class T &gt;
std::pair&lt;T, T&gt; minmax( std::initializer_list&lt;T&gt; ilist );
}}
{{dcla|num=4|since=c++11|constexpr=c++14|
template&lt; class T, class Compare &gt;
std::pair&lt;T, T&gt; minmax( std::initializer_list&lt;T&gt; ilist,
                        Compare comp );
}}
{{dcl end}}

返回给定值的最小和最大者。

@1,2@ 返回到 {{c|a}} 的 {{c|b}} 较小和较大者的引用。
:@1@ 使用 {{c/core|operator&lt;}} 来比较两个值。
:@@ 如果 {{tt|T}} 不{{named req|LessThanComparable}}，那么行为未定义。
:@2@ 使用比较函数 {{c|comp}} 来比较两个值。

@3,4@ 返回初始化器列表 {{c|ilist}} 中值的最小和最大者。
@@ 如果 {{c|ilist.size()}} 为零，或者 {{tt|T}} 不{{named req|CopyConstructible}}，那么行为未定义。
:@3@ 使用 {{c/core|operator&lt;}} 来比较这些值。
:@@ 如果 {{tt|T}} 不{{named req|LessThanComparable}}，那么行为未定义。
:@4@ 使用比较函数 {{c|comp}} 来比较这些值。

===参数===
{{par begin}}
{{par|a, b|要比较的值}}
{{par|ilist|拥有要比较的值的初始化器列表}}
{{par cmp|cmp|t1=T|{{c|a}} ''小于'' {{c|b}}}}
{{par end}}

===返回值===
@1,2@ 如果 {{c|a &lt; b}} 或者 {{c|a}} 等价于 {{c|b}}，那么返回 {{c|std::pair&lt;const T&amp;, const T&amp;&gt;(a, b)}} 的结果。如果 {{c|b &lt; a}}，那么返回 {{c|std::pair&lt;const T&amp;, const T&amp;&gt;(b, a)}} 的结果。

@3,4@ 以 {{c|ilist}} 中最小元素为第一元素，最大元素为第二元素的 pair。如果有多个等价于最小者的值，那么返回最左侧的这种值。如果有多个等价于最大者的值，那么返回最右侧的这种值。

===复杂度===
@1@ 应用一次 {{c/core|operator&lt;}} 进行比较。

@2@ 应用一次比较函数 {{c|comp}}。

@3,4@ 给定 {{mathjax-or|\(\scriptsize N\)|N}} 为 {{c|ilist.size()}}：
:@3@ 最多应用 {{mathjax-or|\(\scriptsize \frac{3N}{2}\)|{{mfrac|3N|2}}}} 次 {{c/core|operator&lt;}} 进行比较。
:@4@ 最多应用 {{mathjax-or|\(\scriptsize \frac{3N}{2}\)|{{mfrac|3N|2}}}} 次比较函数 {{c|comp}}。

===可能的实现===
{{eq impl
|title1=minmax (1)|ver1=1|1=
template&lt;class T&gt;
constexpr std::pair&lt;const T&amp;, const T&amp;&gt; minmax(const T&amp; a, const T&amp; b)
{
    return (b &lt; a) ? std::pair&lt;const T&amp;, const T&amp;&gt;(b, a)
                   : std::pair&lt;const T&amp;, const T&amp;&gt;(a, b);
}
|title2=minmax (2)|ver2=2|2=
template&lt;class T, class Compare&gt;
constexpr std::pair&lt;const T&amp;, const T&amp;&gt; minmax(const T&amp; a, const T&amp; b, Compare comp)
{
    return comp(b, a) ? std::pair&lt;const T&amp;, const T&amp;&gt;(b, a)
                      : std::pair&lt;const T&amp;, const T&amp;&gt;(a, b);
}
|title3=minmax (3)|ver3=3|3=
template&lt;class T&gt;
constexpr std::pair&lt;T, T&gt; minmax(std::initializer_list&lt;T&gt; ilist)
{
    auto p = std::minmax_element(ilist.begin(), ilist.end());
    return std::pair(*p.first, *p.second);
}
|title4=minmax (4)|ver4=4|4=
template&lt;class T, class Compare&gt;
constexpr std::pair&lt;T, T&gt; minmax(std::initializer_list&lt;T&gt; ilist, Compare comp)
{
    auto p = std::minmax_element(ilist.begin(), ilist.end(), comp);
    return std::pair(*p.first, *p.second);
}
}}

===注解===
对于重载 {{vl|1,2}}，如果实参之一是临时量，那么返回的引用在包含对 {{tt|minmax}} 调用的完整表达式结尾变为悬垂引用：
{{source|1=
int n = 1;
auto p = std::minmax(n, n + 1);
int m = p.first; // ok
int x = p.second; // 未定义行为

// 注意结构化绑定有同样的问题
auto [mm, xx] = std::minmax(n, n + 1);
xx; // 未定义行为
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cstdlib&gt;
#include &lt;ctime&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;int&gt; v{3, 1, 4, 1, 5, 9, 2, 6};
    std::srand(std::time(0));
    std::pair&lt;int, int&gt; bounds = std::minmax(std::rand() % v.size(),
                                             std::rand() % v.size());
    
    std::cout &lt;&lt; "v[" &lt;&lt; bounds.first &lt;&lt; "," &lt;&lt; bounds.second &lt;&lt; "]：";
    for (int i = bounds.first; i &lt; bounds.second; ++i)
        std::cout &lt;&lt; v[i] &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|p=true
|output=
v[2,7]：4 1 5 9 2
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2239|std=C++11|before=重载 {{vl|2,4}} 中 {{tt|T}} 需要{{named req|LessThanComparable}}|after=不需要}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc min}}
{{dsc inc|cpp/algorithm/dsc max}}
{{dsc inc|cpp/algorithm/dsc minmax_element}}
{{dsc inc|cpp/algorithm/ranges/dsc minmax}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
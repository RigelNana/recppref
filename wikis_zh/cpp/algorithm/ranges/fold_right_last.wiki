{{cpp/ranges/title|fold_right_last}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|调用签名}}
{{dcl|num=1|since=c++23|1=
template&lt; std::bidirectional_iterator I, std::sentinel_for&lt;I&gt; S,
          /*indirectly-binary-right-foldable*/&lt;std::iter_value_t&lt;I&gt;, I&gt; F &gt;
requires std::constructible_from&lt;
             std::iter_value_t&lt;I&gt;, std::iter_reference_t&lt;I&gt;&gt;
constexpr auto
    fold_right_last( I first, S last, F f );
}}
{{dcl|num=2|since=c++23|1=
template&lt; ranges::bidirectional_range R,
          /*indirectly-binary-right-foldable*/&lt;
              ranges::range_value_t&lt;R&gt;, ranges::iterator_t&lt;R&gt;&gt; F &gt;
requires std::constructible_from&lt;
             ranges::range_value_t&lt;R&gt;, ranges::range_reference_t&lt;R&gt;&gt;
constexpr auto
    fold_right_last( R&amp;&amp; r, F f );
}}
{{dcl h|辅助概念}}
{{dcl|num=3|notes={{mark expos}}|1=
template&lt; class F, class T, class I &gt;
concept /*indirectly-binary-left-foldable*/ = /* 见说明 */;
}}
{{dcl|num=4|notes={{mark expos}}|1=
template&lt; class F, class T, class I &gt;
concept /*indirectly-binary-right-foldable*/ = /* 见说明 */;
}}
{{dcl end}}

右{{enwiki|Fold (higher-order function)|折叠}}给定范围的元素，当 {{tt|x{{sub|1}}}}, {{tt|x{{sub|2}}}}, ..., {{tt|x{{sub|n}}}} 为范围内元素时返回链式表达式 {{tt|f(x{{sub|1}}, f(x{{sub|2}}, ...f(x{{sub|n-1}} x{{sub|n}})))}} 的求值结果。

非正式地说，{{tt|ranges::fold_right_last}} 的行为类似 {{c|ranges::fold_left(views::reverse(r), *--last, /*flipped*/(f))}}（假定范围不为空）。

如果 {{range|first|last}} 不是有效范围则行为未定义。

@1@ 对范围 {{range|first|last}}，给定 {{c|U}} 为 {{c|decltype(ranges::fold_right(first, last, std::iter_value_t&lt;I&gt;(*first), f))}}，等价于
{{source|1=
if (first == last)
    return std::optional&lt;U&gt;();
I tail = ranges::prev(ranges::next(first, std::move(last)));
return std::optional&lt;U&gt;(std::in_place, ranges::fold_right(std::move(first), tail,
    std::iter_value_t&lt;I&gt;(*tail), std::move(f)));
}}

@2@ 同 {{v|1}}，但使用 {{c|r}} 作为其范围，如同使用 {{c|ranges::begin(r)}} 作为 {{c|first}} 并且使用 {{c|ranges::end(r)}} 作为 {{c|last}}。

{{ranges_fold_algos_helper_concepts|right}}

{{cpp/ranges/niebloid}}

===参数===
{{par begin}}
{{par range|3=要折叠的|sentinel=yes}}
{{par|r|应用折叠的范围}}
{{par|f|二元{{named req|FunctionObject|函数对象}}}}
{{par end}}

===返回值===
容纳了给定范围上应用 {{c|f}} 右{{enwiki|Fold (higher-order function)|折叠}}的 {{c|std::optional&lt;U&gt;}} 类型结果对象。

如果范围为空，返回 {{c|std::optional&lt;U&gt;()}}。

===可能的实现===
{{eq fun
|1=
struct fold_right_last_fn
{
    template&lt;std::bidirectional_iterator I, std::sentinel_for&lt;I&gt; S,
             /*indirectly-binary-right-foldable*/&lt;std::iter_value_t&lt;I&gt;, I&gt; F&gt;
    requires
        std::constructible_from&lt;std::iter_value_t&lt;I&gt;, std::iter_reference_t&lt;I&gt;&gt;
    constexpr auto operator()(I first, S last, F f) const
    {
        using U = decltype(
            ranges::fold_right(first, last, std::iter_value_t&lt;I&gt;(*first), f));

        if (first == last)
            return std::optional&lt;U&gt;();
        I tail = ranges::prev(ranges::next(first, std::move(last)));
        return std::optional&lt;U&gt;(std::in_place,
            ranges::fold_right(std::move(first), tail, std::iter_value_t&lt;I&gt;(*tail),
                               std::move(f)));
    }

    template&lt;ranges::bidirectional_range R,
             /*indirectly_binary_right_foldable*/&lt;
                 ranges::range_value_t&lt;R&gt;, ranges::iterator_t&lt;R&gt;&gt; F&gt;
    requires
        std::constructible_from&lt;ranges::range_value_t&lt;R&gt;, ranges::range_reference_t&lt;R&gt;&gt;
    constexpr auto operator()(R&amp;&amp; r, F f) const
    {
        return (*this)(ranges::begin(r), ranges::end(r), std::ref(f));
    }
};

inline constexpr fold_right_last_fn fold_right_last;
}}

===复杂度===
准确应用 {{c|ranges::distance(first, last)}} 次函数对象 {{c|f}}。

===注解===
{{ranges_fold_algos_table}}

{{feature test macro|__cpp_lib_ranges_fold|std=C++23|value=202207L|{{tt|std::ranges}} [[cpp/algorithm/ranges#受约束的折叠操作|折叠算法]]}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;

int main()
{
    auto v = {1, 2, 3, 4, 5, 6, 7, 8};
    std::vector&lt;std::string&gt; vs {"A", "B", "C", "D"};

    auto r1 = std::ranges::fold_right_last(v.begin(), v.end(), std::plus&lt;&gt;()); // (1)
    std::cout &lt;&lt; "*r1: " &lt;&lt; *r1 &lt;&lt; '\n';

    auto r2 = std::ranges::fold_right_last(vs, std::plus&lt;&gt;()); // (2)
    std::cout &lt;&lt; "*r2: " &lt;&lt; *r2 &lt;&lt; '\n';

    // 使用程序定义的函数对象（lambda-表达式）：
    auto r3 = std::ranges::fold_right_last(v, [](int x, int y) { return x + y + 99; });
    std::cout &lt;&lt; "*r3: " &lt;&lt; *r3 &lt;&lt; '\n';

    // 获得 vector 中的所有 pair 的 pair::second 的乘积：
    std::vector&lt;std::pair&lt;char, float&gt;&gt; data {{'A', 3.f}, {'B', 3.5f}, {'C', 4.f}};
    auto r4 = std::ranges::fold_right_last
    (
        data {{!}} std::ranges::views::values, std::multiplies&lt;&gt;()
    );
    std::cout &lt;&lt; "*r4: " &lt;&lt; *r4 &lt;&lt; '\n';
}
|output=
*r1: 36
*r2: ABCD
*r3: 729
*r4: 42
}}

===引用===
{{ref std c++23}}
{{ref std|title=Fold|id=alg.fold|section=27.6.18}}
{{ref std end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_right}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_left}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_left_first}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_left_with_iter}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_left_first_with_iter}}
{{dsc inc|cpp/algorithm/dsc accumulate}}
{{dsc inc|cpp/algorithm/dsc reduce}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|en}}
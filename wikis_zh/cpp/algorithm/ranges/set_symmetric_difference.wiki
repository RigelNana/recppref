{{cpp/ranges/title|set_symmetric_difference|set_symmetric_difference_result}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|调用签名}}
{{dcl|num=1|since=c++20|1=
template&lt; std::input_iterator I1, std::sentinel_for&lt;I1&gt; S1,
          std::input_iterator I2, std::sentinel_for&lt;I2&gt; S2,
          std::weakly_incrementable O, class Comp = ranges::less,
          class Proj1 = std::identity, class Proj2 = std::identity &gt;
requires std::mergeable&lt;I1, I2, O, Comp, Proj1, Proj2&gt;
constexpr set_symmetric_difference_result&lt;I1, I2, O&gt;
    set_symmetric_difference( I1 first1, S1 last1, I2 first2, S2 last2,
                              O result, Comp comp = {},
                              Proj1 proj1 = {}, Proj2 proj2 = {} );
}}
{{dcl|num=2|since=c++20|1=
template&lt; ranges::input_range R1, ranges::input_range R2,
          std::weakly_incrementable O, class Comp = ranges::less,
          class Proj1 = std::identity, class Proj2 = std::identity &gt;
requires std::mergeable&lt;ranges::iterator_t&lt;R1&gt;, ranges::iterator_t&lt;R2&gt;,
                        O, Comp, Proj1, Proj2&gt;
constexpr set_symmetric_difference_result&lt;ranges::borrowed_iterator_t&lt;R1&gt;, 
                                          ranges::borrowed_iterator_t&lt;R2&gt;, O&gt;
    set_symmetric_difference( R1&amp;&amp; r1, R2&amp;&amp; r2, O result, Comp comp = {},
                              Proj1 proj1 = {}, Proj2 proj2 = {} );
}}
{{dcl h|辅助类型}}
{{dcl|num=3|since=c++20|1=
template&lt; class I1, class I2, class O &gt;
using set_symmetric_difference_result = ranges::in_in_out_result&lt;I1, I2, O&gt;;
}}
{{dcl end}}

计算两个有序范围的对称差：将在一个但非两个范围中找到的元素赋值到始于 {{c|result}} 的范围。结果范围亦有序。

若在 {{range|first1|last1}} 中找到某元素 {{tt|m}} 次并在 {{range|first2|last2}} 中找到 {{tt|n}} 次，则它将恰好被复制 {{tt|│m - n│}} 次到 {{c|result}}。若 {{tt|m &gt; n}}，则从 {{range|first1|last1}} 复制后 {{tt|m - n}} 个这些元素，否则从 {{range|first2|last2}} 复制后 {{tt|n - m}} 个元素。结果范围不能与任一输入范围重叠。

若
* 输入范围未分别相对于 {{c|comp}} 与 {{c|proj1}} 或 {{c|proj2}} 排序，或
* 结果范围与任一输入范围重叠，
则行为未定义。

@1@ 用给定的二元比较函数 {{c|comp}} 比较元素。

@2@ 同 {{v|1}}，但以 {{c|r1}} 为第一范围，并以 {{c|r2}} 为第二范围，如同以 {{c|ranges::begin(r1)}} 为 {{c|first1}}，以 {{c|ranges::end(r1)}} 为 {{c|last1}}，以 {{c|ranges::begin(r2)}} 为 {{c|first2}}，并以 {{c|ranges::end(r2)}} 为 {{c|last2}}。

{{cpp/ranges/niebloid}}

===参数===
{{par begin}}
{{par range|first1|last1|3=|range=第一个输入的有序|sentinel=yes}}
{{par range|first2|last2|3=|range=第二个输入的有序|sentinel=yes}}
{{par | r1 | 第一个输入的有序范围}}
{{par | r2 | 第二个输入的有序范围}}
{{par | result | 输出范围的起始}}
{{par | comp | 应用到投影后元素的比较器}}
{{par | proj1 | 应用到第一个范围元素的投影}}
{{par | proj2 | 应用到第二个范围元素的投影}}
{{par end}}

===返回值===
{{c|{last1, result_last} }}，其中 {{c|result_last}} 为所构造范围的末尾。

===复杂度===
至多比较和应用每个投影 {{mathjax-or|\(\scriptsize 2\cdot(N_1+N_2)-1\)|2&amp;middot;(N{{su|b=1}}+N{{su|b=2}})-1}} 次，其中 {{mathjax-or|\(\scriptsize N_1\)|N{{su|b=1}}}} 与 {{mathjax-or|\(\scriptsize N_2\)|N{{su|b=2}}}} 分别为 {{c|ranges::distance(first1, last1)}} 与 {{c|ranges::distance(first2, last2)}}。

===可能的实现===
{{eq fun|1=
struct set_symmetric_difference_fn
{
    template&lt;std::input_iterator I1, std::sentinel_for&lt;I1&gt; S1,
             std::input_iterator I2, std::sentinel_for&lt;I2&gt; S2,
             std::weakly_incrementable O, class Comp = ranges::less,
             class Proj1 = std::identity, class Proj2 = std::identity&gt;
    requires std::mergeable&lt;I1, I2, O, Comp, Proj1, Proj2&gt;
    constexpr ranges::set_symmetric_difference_result&lt;I1, I2, O&gt;
        operator()(I1 first1, S1 last1, I2 first2, S2 last2, O result, Comp comp = {},
                   Proj1 proj1 = {}, Proj2 proj2 = {}) const
    {
        while (!(first1 == last1 or first2 == last2))
        {
            if (std::invoke(comp, std::invoke(proj1, *first1), std::invoke(proj2, *first2)))
            {
                *result = *first1;
                ++first1;
                ++result;
            }
            else if (std::invoke(comp, std::invoke(proj2, *first2),
                                       std::invoke(proj1, *first1)))
            {
                *result = *first2;
                ++first2;
                ++result;
            }
            else
            {
                ++first1;
                ++first2;
            }
        }
        auto res1 {ranges::copy(std::move(first1), std::move(last1), std::move(result))};
        auto res2 {ranges::copy(std::move(first2), std::move(last2), std::move(res1.out))};
        return {std::move(res1.in), std::move(res2.in), std::move(res2.out)};
    }

    template&lt;ranges::input_range R1, ranges::input_range R2,
             std::weakly_incrementable O, class Comp = ranges::less,
             class Proj1 = std::identity, class Proj2 = std::identity&gt;
    requires std::mergeable&lt;ranges::iterator_t&lt;R1&gt;, ranges::iterator_t&lt;R2&gt;,
                            O, Comp, Proj1, Proj2&gt;
    constexpr ranges::set_symmetric_difference_result&lt;
        ranges::borrowed_iterator_t&lt;R1&gt;, ranges::borrowed_iterator_t&lt;R2&gt;, O&gt;
        operator()(R1&amp;&amp; r1, R2&amp;&amp; r2, O result, Comp comp = {},
                   Proj1 proj1 = {}, Proj2 proj2 = {}) const
    {
        return (*this)(ranges::begin(r1), ranges::end(r1),
                       ranges::begin(r2), ranges::end(r2),
                       std::move(result), std::move(comp),
                       std::move(proj1), std::move(proj2));
    }
};

inline constexpr set_symmetric_difference_fn set_symmetric_difference {};
}}

===示例===
{{example
 | code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

void visualize_this(const auto&amp; v, int min = 1, int max = 9)
{
    for (auto i {min}; i &lt;= max; ++i)
    {
        std::ranges::binary_search(v, i) ? std::cout &lt;&lt; i : std::cout &lt;&lt; '.';
        std::cout &lt;&lt; ' ';
    }
    std::cout &lt;&lt; '\n';
}

int main()
{
    const auto in1 = {1, 3, 4,    6, 7, 9};
    const auto in2 = {1,    4, 5, 6,    9};

    std::vector&lt;int&gt; out;

    std::ranges::set_symmetric_difference(in1, in2, std::back_inserter(out));

    visualize_this(in1);
    visualize_this(in2);
    visualize_this(out);
}
 | output=
1 . 3 4 . 6 7 . 9
1 . . 4 5 6 . . 9
. . 3 . 5 . 7 . .
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc set_union}}
{{dsc inc|cpp/algorithm/ranges/dsc set_difference}}
{{dsc inc|cpp/algorithm/ranges/dsc set_intersection}}
{{dsc inc|cpp/algorithm/ranges/dsc includes}}
{{dsc inc|cpp/algorithm/dsc set_symmetric_difference}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/ranges/title|max_element}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|调用签名}}
{{dcl|since=c++20|num=1|1=
template&lt; std::forward_iterator I, std::sentinel_for&lt;I&gt; S, class Proj = std::identity,
          std::indirect_strict_weak_order&lt;std::projected&lt;I, Proj&gt;&gt; Comp = ranges::less &gt;
constexpr I
    max_element( I first, S last, Comp comp = {}, Proj proj = {} );
}}
{{dcl|since=c++20|num=2|1=
template&lt; ranges::forward_range R, class Proj = std::identity,
          std::indirect_strict_weak_order&lt;
              std::projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt; Comp = ranges::less &gt;
constexpr ranges::borrowed_iterator_t&lt;R&gt;
    max_element( R&amp;&amp; r, Comp comp = {}, Proj proj = {} );
}}
{{dcl end}}

@1@ 寻找范围 {{range|first|last}} 中的最大元素。
@2@ 同 {{v|1}}，但以 {{c|r}} 为源范围，如同以 {{c|ranges::begin(r)}} 为 {{c|first}} 并以 {{c|ranges::end(r)}} 为 {{c|last}}。

{{cpp/ranges/niebloid}}

===参数===
{{par begin}}
{{par range|3=要检验的|sentinel=yes}}
{{par|r|待检验 {{lconcept|range}}}}
{{par|comp|应用到投影后元素的比较}}
{{par|proj|应用到元素的投影}}
{{par end}}

===返回值===
指向范围 {{range|first|last}} 中最大元素的迭代器。若范围中数个元素等价于最大元素，则返回指向首个这种元素的迭代器。若范围为空（即 {{c|1=first == last}}）则返回比较等于 {{c|last}} 的迭代器。

===复杂度===
准确 {{math|max(N-1,0)}} 次比较，其中 {{c|1=N = ranges::distance(first, last)}}。

===可能的实现===
{{eq fun
|1=
struct max_element_fn
{
    template&lt;std::forward_iterator I, std::sentinel_for&lt;I&gt; S, class Proj = std::identity,
             std::indirect_strict_weak_order&lt;std::projected&lt;I, Proj&gt;&gt; Comp = ranges::less&gt;
    constexpr I operator()(I first, S last, Comp comp = {}, Proj proj = {}) const
    {
        if (first == last)
            return last;

        auto largest = first;
        while (++first != last)
            if (std::invoke(comp, std::invoke(proj, *largest), std::invoke(proj, *first)))
                largest = first;
        return largest;
    }
  
    template&lt;ranges::forward_range R, class Proj = std::identity,
             std::indirect_strict_weak_order&lt;
                 std::projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt; Comp = ranges::less&gt;
    constexpr ranges::borrowed_iterator_t&lt;R&gt;
        operator()(R&amp;&amp; r, Comp comp = {}, Proj proj = {}) const
    {
        return (*this)(ranges::begin(r), ranges::end(r), std::ref(comp), std::ref(proj));
    }
};

inline constexpr max_element_fn max_element;
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;

int main()
{
    namespace ranges = std::ranges;

    const auto v = {3, 1, -14, 1, 5, 9, -14, 9};

    auto result = ranges::max_element(v.begin(), v.end());
    std::cout &lt;&lt; "最大的元素位于 " &lt;&lt; ranges::distance(v.begin(), result) &lt;&lt; '\n';

    auto abs_compare = [](int a, int b) { return std::abs(a) &lt; std::abs(b); };
    result = ranges::max_element(v, abs_compare);
    std::cout &lt;&lt; "绝对值最大的元素位于 "
              &lt;&lt; ranges::distance(v.begin(), result) &lt;&lt; '\n';
}
|output=
最大的元素位于 5
绝对值最大的元素位于 2
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc min_element}}
{{dsc inc|cpp/algorithm/ranges/dsc minmax_element}}
{{dsc inc|cpp/algorithm/ranges/dsc max}}
{{dsc inc|cpp/algorithm/dsc max_element}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/ranges/title|fill_n}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|调用签名}}
{{dcl rev begin}}
{{dcl|since=c++20|until=c++26|
template&lt; class T, std::output_iterator&lt;const T&amp;&gt; O &gt;
constexpr O fill_n( O first, std::iter_difference_t&lt;O&gt; n, const T&amp; value );
}}
{{dcl|since=c++26|1=
template&lt; class O, class T = std::iter_value_t&lt;O&gt; &gt;
requires std::output_iterator&lt;O, const T&amp;&gt;
constexpr O fill_n( O first, std::iter_difference_t&lt;O&gt; n, const T&amp; value );
}}
{{dcl rev end}}
{{dcl end}}

将给定的 {{c|value}} 赋值给范围 {{range|first|first + n}} 中的所有元素。

{{cpp/ranges/niebloid}}

===参数===
{{par begin}}
{{par|first|要修改的元素范围的起始}}
{{par|n|要修改的元素数}}
{{par|value|要赋的值}}
{{par end}}

===返回值===
等于 {{c|first + n}} 的输出迭代器。

===复杂度===
准确 {{c|n}} 次赋值。

===可能的实现===
{{eq fun|1=
struct fill_n_fn
{
    template&lt;class O, class T = std::iter_value_t&lt;O&gt;&gt;
    requires std::output_iterator&lt;O, const T&amp;&gt;
    constexpr O operator()(O first, std::iter_difference_t&lt;O&gt; n, const T&amp; value) const
    {
        for (std::iter_difference_t&lt;O&gt; i {}; i != n; ++first, ++i)
            *first = value;
        return first;
    }
};

inline constexpr fill_n_fn fill_n {};
}}

===注解===
{{feature test macro|__cpp_lib_algorithm_default_value_type|value=202403|std=C++26|算法中的[[cpp/language/list initialization|列表初始化]]}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;complex&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

void println(const auto&amp; v)
{
    for (const auto&amp; elem : v)
        std::cout &lt;&lt; ' ' &lt;&lt; elem;
    std::cout &lt;&lt; '\n';
}

int main()
{
    constexpr auto n{8};
    
    std::vector&lt;std::string&gt; v(n, "▓▓░░");
    println(v);
    
    std::ranges::fill_n(v.begin(), n, "░░▓▓");
    println(v);

    std::vector&lt;std::complex&lt;double&gt;&gt; nums{&lt;!----&gt;{1, 3}, {2, 2}, {4, 8}&lt;!----&gt;};
    println(nums);
    #ifdef __cpp_lib_algorithm_default_value_type
        std::ranges::fill_n(nums.begin(), 2, {4, 2});
    #else
        std::ranges::fill_n(nums.begin(), 2, std::complex&lt;double&gt;{4, 2});
    #endif
    println(nums);
}
|output=&lt;nowiki/&gt;
 ▓▓░░ ▓▓░░ ▓▓░░ ▓▓░░ ▓▓░░ ▓▓░░ ▓▓░░ ▓▓░░
 ░░▓▓ ░░▓▓ ░░▓▓ ░░▓▓ ░░▓▓ ░░▓▓ ░░▓▓ ░░▓▓
 (1,3) (2,2) (4,8)
 (4,2) (4,2) (4,8)
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc fill}}
{{dsc inc|cpp/algorithm/ranges/dsc copy_n}}
{{dsc inc|cpp/algorithm/ranges/dsc generate}}
{{dsc inc|cpp/algorithm/ranges/dsc transform}}
{{dsc inc|cpp/numeric/random/ranges/dsc generate_random}}
{{dsc inc|cpp/algorithm/dsc fill_n}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
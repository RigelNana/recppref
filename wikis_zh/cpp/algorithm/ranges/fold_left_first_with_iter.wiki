{{cpp/ranges/title|fold_left_first_with_iter|fold_left_first_with_iter_result}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|调用签名}}
{{dcl|num=1|since=c++23|1=
template&lt; std::input_iterator I, std::sentinel_for&lt;I&gt; S,
          /*indirectly-binary-left-foldable*/&lt;std::iter_value_t&lt;I&gt;, I&gt; F &gt;
requires std::constructible_from&lt;
             std::iter_value_t&lt;I&gt;, std::iter_reference_t&lt;I&gt;&gt;
constexpr /* 见说明 */
    fold_left_first_with_iter( I first, S last, F f );
}}
{{dcl|num=2|since=c++23|1=
template&lt; ranges::input_range R,
          /*indirectly-binary-left-foldable*/&lt;
              ranges::range_value_t&lt;R&gt;, ranges::iterator_t&lt;R&gt;&gt; F &gt;
requires std::constructible_from&lt;
             ranges::range_value_t&lt;R&gt;, ranges::range_reference_t&lt;R&gt;&gt;
constexpr /* 见说明 */
    fold_left_first_with_iter( R&amp;&amp; r, F f );
}}
{{dcl h|辅助概念}}
{{dcl|num=3|notes={{mark expos}}|1=
template&lt; class F, class T, class I &gt;
concept /*indirectly-binary-left-foldable*/ = /* 见说明 */;
}}
{{dcl h|辅助类模板}}
{{dcl|num=4|since=c++23|1=
template&lt; class I, class T &gt;
using fold_left_first_with_iter_result = ranges::in_value_result&lt;I, T&gt;;
}}
{{dcl end}}

左{{enwiki|Fold (higher-order function)|折叠}}给定范围的元素，当 {{tt|x{{sub|1}}}}, {{tt|x{{sub|2}}}}, ..., {{tt|x{{sub|n}}}} 为范围内元素时返回链式表达式 {{tt|f(f(f(f(x{{sub|1}}, x{{sub|2}}), x{{sub|3}}), ...), x{{sub|n}})}} 的求值结果。

非正式地说，除了将 {{c|*first}} 用作首个元素之外，{{tt|ranges::fold_left_first_with_iter}} 的行为类似 {{lc|std::accumulate}} 接受二元谓词的重载。 

如果 {{range|first|last}} 不是有效范围则行为未定义。

@1@ 范围为 {{range|first|last}}。

@2@ 同 {{v|1}}，但使用 {{c|r}} 作为其范围，如同使用 {{c|ranges::begin(r)}} 作为 {{c|first}} 并且使用{{c|ranges::end(r)}} 作为 {{c|last}}。

{{ranges_fold_algos_helper_concepts}}
&lt;!----&gt;
@4@ 返回类型的别名，详情见“{{ls|#返回值}}”。

{{cpp/ranges/niebloid}}

===参数===
{{par begin}}
{{par range|3=要折叠的|sentinel=yes}}
{{par|r|应用折叠的范围}}
{{par|f|二元{{named req|FunctionObject|函数对象}}}}
{{par end}}

===返回值===
令 {{c|U}} 为 {{c|decltype(ranges::fold_left(std::move(first), last, std::iter_value_t&lt;I&gt;(*first), f))}}。

@1@ 对象类型 {{c|ranges::fold_left_first_with_iter_result&lt;I, std::optional&lt;U&gt;&gt;}}。
* 成员 {{c|ranges::in_value_result::in}} 持有范围尾部的迭代器。
* 成员 {{c|ranges::in_value_result::value}} 持有给定范围上执行 {{c|f}} 的左{{enwiki|Fold (higher-order function)|折叠}}的结果。
如果范围为空，返回 {{c|{std::move(first), std::optional&lt;U&gt;()}&lt;!----&gt;}}。

@2@ 除返回值为 {{c|ranges::fold_left_first_with_iter_result&lt;ranges::borrowed_iterator_t&lt;R&gt;, std::optional&lt;U&gt;&gt;}} 外，同 {{v|1}}。

===可能的实现===
{{eq fun
|1=
class fold_left_first_with_iter_fn
{
    template&lt;class O, class I, class S, class F&gt;
    constexpr auto impl(I&amp;&amp; first, S&amp;&amp; last, F f) const
    {
        using U = decltype(
            ranges::fold_left(std::move(first), last, std::iter_value_t&lt;I&gt;(*first), f)
        );
        using Ret = ranges::fold_left_first_with_iter_result&lt;O, std::optional&lt;U&gt;&gt;;
        if (first == last)
            return Ret{std::move(first), std::optional&lt;U&gt;()};
        std::optional&lt;U&gt; init(std::in_place, *first);
        for (++first; first != last; ++first)
            *init = std::invoke(f, std::move(*init), *first);
        return Ret{std::move(first), std::move(init)};
    }

public:
    template&lt;std::input_iterator I, std::sentinel_for&lt;I&gt; S,
             /*indirectly-binary-left-foldable*/&lt;std::iter_value_t&lt;I&gt;, I&gt; F&gt;
    requires std::constructible_from&lt;std::iter_value_t&lt;I&gt;, std::iter_reference_t&lt;I&gt;&gt;
    constexpr auto operator()(I first, S last, F f) const
    {
        return impl&lt;I&gt;(std::move(first), std::move(last), std::ref(f));
    }

    template&lt;ranges::input_range R, /*indirectly-binary-left-foldable*/&lt;
        ranges::range_value_t&lt;R&gt;, ranges::iterator_t&lt;R&gt;&gt; F&gt;
    requires
        std::constructible_from&lt;ranges::range_value_t&lt;R&gt;, ranges::range_reference_t&lt;R&gt;&gt;
    constexpr auto operator()(R&amp;&amp; r, F f) const
    {
        return impl&lt;ranges::borrowed_iterator_t&lt;R&gt;&gt;(
            ranges::begin(r), ranges::end(r), std::ref(f)
        );
    }
};

inline constexpr fold_left_first_with_iter_fn fold_left_first_with_iter;
}}

===复杂度===
准确应用 {{c|ranges::distance(first, last) - 1}}（假定范围不为空）次函数对象{{c|f}}。

===注解===
{{ranges_fold_algos_table}}

{{feature test macro|__cpp_lib_ranges_fold|std=C++23|value=202207L|{{tt|std::ranges}} [[cpp/algorithm/ranges#受约束的折叠操作|折叠算法]]}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;

int main()
{
    std::vector v{1, 2, 3, 4, 5, 6, 7, 8};

    auto sum = std::ranges::fold_left_first_with_iter
    (
        v.begin(), v.end(), std::plus&lt;int&gt;()
    );
    std::cout &lt;&lt; "sum: " &lt;&lt; sum.value.value() &lt;&lt; '\n';
    assert(sum.in == v.end());

    auto mul = std::ranges::fold_left_first_with_iter(v, std::multiplies&lt;int&gt;());
    std::cout &lt;&lt; "mul: " &lt;&lt; mul.value.value() &lt;&lt; '\n';
    assert(mul.in == v.end());

    // 获得 vector 中的所有 pair 的 pair::second 的乘积：
    std::vector&lt;std::pair&lt;char, float&gt;&gt; data {{'A', 2.f}, {'B', 3.f}, {'C', 7.f}};
    auto sec = std::ranges::fold_left_first_with_iter
    (
        data {{!}} std::ranges::views::values, std::multiplies&lt;&gt;()
    );
    std::cout &lt;&lt; "sec: " &lt;&lt; sec.value.value() &lt;&lt; '\n';

    // 使用程序定义的函数对象（lambda-表达式）：
    auto lambda = [](int x, int y) { return x + y + 2; };
    auto val = std::ranges::fold_left_first_with_iter(v, lambda);
    std::cout &lt;&lt; "val: " &lt;&lt; val.value.value() &lt;&lt; '\n';
    assert(val.in == v.end());
}
|output=
sum: 36
mul: 40320
sec: 42
val: 50
}}

===引用===
{{ref std c++23}}
{{ref std|title=Fold|id=alg.fold|section=27.6.18}}
{{ref std end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_left}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_left_first}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_right}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_right_last}}
{{dsc inc|cpp/algorithm/ranges/dsc fold_left_with_iter}}
{{dsc inc|cpp/algorithm/dsc accumulate}}
{{dsc inc|cpp/algorithm/dsc reduce}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pl|pt|ru|en}}
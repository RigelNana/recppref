{{cpp/ranges/title|includes}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|调用签名}}
{{dcl|num=1|since=c++20|1=
template&lt; std::input_iterator I1, std::sentinel_for&lt;I1&gt; S1,
          std::input_iterator I2, std::sentinel_for&lt;I2&gt; S2,
          class Proj1 = std::identity, class Proj2 = std::identity,
          std::indirect_strict_weak_order&lt;
              std::projected&lt;I1, Proj1&gt;,
              std::projected&lt;I2, Proj2&gt;&gt; Comp = ranges::less &gt;
constexpr bool
    includes( I1 first1, S1 last1, I2 first2, S2 last2,
              Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {} )
}}
{{dcl|num=2|since=c++20|1=
template&lt; ranges::input_range R1, ranges::input_range R2,
          class Proj1 = std::identity, class Proj2 = std::identity,
          std::indirect_strict_weak_order&lt;
              std::projected&lt;ranges::iterator_t&lt;R1&gt;, Proj1&gt;,
              std::projected&lt;ranges::iterator_t&lt;R2&gt;, Proj2&gt;&gt; Comp = ranges::less &gt;
constexpr bool
    includes( R1&amp;&amp; r1, R2&amp;&amp; r2, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {} )
}}
{{dcl end}}

@1@ 若有序范围 {{range|first2|last2}} 的投影是有序范围 {{range|first1|last1}} 的投影的[[enwiki:subsequence|子序列]]则返回 {{c|true}}。
@2@ 同 {{v|1}}，但以 {{c|r1}} 与 {{c|r2}} 为源范围，如同分别以 {{c|ranges::begin(r1)}} 与 {{c|ranges::begin(r2)}} 为 {{c|first1}} 与 {{c|first2}}，并分别以 {{c|ranges::end(r1)}} 与 {{c|ranges::end(r2)}} 为 {{c|last1}} 与 {{c|last2}}。

两个范围都必须按照给定的比较函数 {{c|comp}} 排序。子序列不需要连续。

{{cpp/ranges/niebloid}}

===参数===
{{par begin}}
{{par range|first1|last1|要检验的|range=有序|sentinel=yes}}
{{par | r1 | 要检验的有序元素范围}}
{{par range|first2|last2|要搜索的|range=有序|sentinel=yes}}
{{par | r2 | 要搜索的有序元素范围}}
{{par | comp | 应用到投影后元素的谓词}}
{{par | proj1 | 应用到第一范围中元素的投影}}
{{par | proj2 | 应用到第二范围中元素的投影}}
{{par end}}

===返回值===
若 {{range|first2|last2}} 是 {{range|first1|last1}} 的子序列则为 {{c|true}}；否则为 {{c|false}}。

===复杂度===
至多比较 {{mathjax-or|\(\scriptsize 2 \cdot (N_1+N_2-1)\)|2&amp;middot;(N&lt;sub&gt;1&lt;/sub&gt;+N&lt;sub&gt;2&lt;/sub&gt;-1)}} 次，其中 {{mathjax-or|\(\scriptsize N_1\)|N&lt;sub&gt;1&lt;/sub&gt;}} 为 {{c|ranges::distance(r1)}} 而 {{mathjax-or|\(\scriptsize N_2\)|N&lt;sub&gt;2&lt;/sub&gt;}} 为 {{c|ranges::distance(r2)}}。

===可能的实现===
{{eq fun
|1=
struct includes_fn
{
    template&lt;std::input_iterator I1, std::sentinel_for&lt;I1&gt; S1,
             std::input_iterator I2, std::sentinel_for&lt;I2&gt; S2,
             class Proj1 = std::identity, class Proj2 = std::identity,
             std::indirect_strict_weak_order&lt;
                 std::projected&lt;I1, Proj1&gt;,
                 std::projected&lt;I2, Proj2&gt;&gt; Comp = ranges::less&gt;
    constexpr bool operator()(I1 first1, S1 last1, I2 first2, S2 last2,
                              Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {}) const
    {
        for (; first2 != last2; ++first1)
        {
            if (first1 == last1 {{!!}} comp(*first2, *first1))
                return false;
            if (!comp(*first1, *first2))
                ++first2;
        }
        return true;
    }

    template&lt;ranges::input_range R1, ranges::input_range R2,
             class Proj1 = std::identity, class Proj2 = std::identity,
             std::indirect_strict_weak_order&lt;
                 std::projected&lt;ranges::iterator_t&lt;R1&gt;, Proj1&gt;,
                 std::projected&lt;ranges::iterator_t&lt;R2&gt;, Proj2&gt;&gt; Comp = ranges::less&gt;
    constexpr bool operator()(R1&amp;&amp; r1, R2&amp;&amp; r2, Comp comp = {},
                              Proj1 proj1 = {}, Proj2 proj2 = {}) const
    {
        return (*this)(ranges::begin(r1), ranges::end(r1),
                       ranges::begin(r2), ranges::end(r2),
                       std::ref(comp), std::ref(proj1), std::ref(proj2));
    }
};

inline constexpr auto includes = includes_fn {};
}}

===示例===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;cctype&gt;
#include &lt;initializer_list&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;string&gt;

template&lt;class T&gt;
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, std::initializer_list&lt;T&gt; const&amp; list)
{
    for (os &lt;&lt; "{ "; auto const&amp; elem : list)
        os &lt;&lt; elem &lt;&lt; ' ';
    return os &lt;&lt; "} ";
}

struct true_false : std::numpunct&lt;char&gt;
{
    std::string do_truename() const { return "? Yes\n"; }
    std::string do_falsename() const { return "? No\n"; }
};

int main()
{
    std::cout.imbue(std::locale(std::cout.getloc(), new true_false));

    auto ignore_case = [](char a, char b) { return std::tolower(a) &lt; std::tolower(b); };

    const auto
        a = {'a', 'b', 'c'},
        b = {'a', 'c'},
        c = {'a', 'a', 'b'},
        d = {'g'},
        e = {'a', 'c', 'g'},
        f = {'A', 'B', 'C'},
        z = {'a', 'b', 'c', 'f', 'h', 'x'};

    std::cout
        &lt;&lt; z &lt;&lt; "includes\n" &lt;&lt; std::boolalpha
        &lt;&lt; a &lt;&lt; std::ranges::includes(z.begin(), z.end(), a.begin(), a.end())
        &lt;&lt; b &lt;&lt; std::ranges::includes(z, b)
        &lt;&lt; c &lt;&lt; std::ranges::includes(z, c)
        &lt;&lt; d &lt;&lt; std::ranges::includes(z, d)
        &lt;&lt; e &lt;&lt; std::ranges::includes(z, e)
        &lt;&lt; f &lt;&lt; std::ranges::includes(z, f, ignore_case);
}
|output=
{ a b c f h x } includes
{ a b c } ? Yes
{ a c } ? Yes
{ a a b } ? No
{ g } ? No
{ a c g } ? No
{ A B C } ? Yes
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc set_difference}}
{{dsc inc|cpp/algorithm/ranges/dsc search}}
{{dsc inc|cpp/algorithm/ranges/dsc contains}}
{{dsc inc|cpp/algorithm/dsc includes}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
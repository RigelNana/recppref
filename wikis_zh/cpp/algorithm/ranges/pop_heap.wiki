{{cpp/ranges/title|pop_heap}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|调用签名}}
{{dcl|num=1|since=c++20|1=
template&lt; std::random_access_iterator I, std::sentinel_for&lt;I&gt; S,
          class Comp = ranges::less, class Proj = std::identity &gt;
    requires std::sortable&lt;I, Comp, Proj&gt;
constexpr I pop_heap( I first, S last, Comp comp = {}, Proj proj = {} );
}}
{{dcl|num=2|since=c++20|1=
template&lt; ranges::random_access_range R,
          class Comp = ranges::less, class Proj = std::identity &gt;
    requires std::sortable&lt;ranges::iterator_t&lt;R&gt;, Comp, Proj&gt;
constexpr ranges::borrowed_iterator_t&lt;R&gt;
    pop_heap( R&amp;&amp; r, Comp comp = {}, Proj proj = {} );
}}
{{dcl end}}

交换关于 {{c|comp}} 和 {{c|proj}} 的指定[[cpp/algorithm#堆操作|堆]]的首末元素，然后使除首位置以外的子范围变为关于 {{c|comp}} 和 {{c|proj}} 的堆。这拥有从指定堆中移除首元素的效果。

@1@ 指定的堆是 {{range|first|last}}。

@2@ 指定的堆是 {{c|r}}。

{{cpp/ranges/niebloid}}

===参数===
{{par begin}}
{{par range|3=要修改的|sentinel=yes}}
{{par|r|要修改的元素 {{lconcept|range}}}}
{{par|comp|应用到投影后元素的比较器}}
{{par|proj|应用到元素的投影}}
{{par end}}

===返回值===
@1@ {{c|last}}
@2@ {{c|ranges::end(r)}}

===复杂度===
最多应用 {{mathjax-or|\(\scriptsize 2\log{(N)}\)|2log(N)}} 次 {{c|comp}} 和 {{mathjax-or|\(\scriptsize 4\log{(N)}\)|4log(N)}} 次 {{c|proj}}，其中 {{mathjax-or|\(\scriptsize N \)|N}} 是：
@1@ {{c|ranges::distance(first, last)}}
@2@ {{c|ranges::distance(r)}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string_view&gt;

template&lt;class I = int*&gt;
void print(std::string_view rem, I first = {}, I last = {},
           std::string_view term = "\n")
{
    for (std::cout &lt;&lt; rem; first != last; ++first)
        std::cout &lt;&lt; *first &lt;&lt; ' ';
    std::cout &lt;&lt; term;
}

int main()
{
    std::array v{3, 1, 4, 1, 5, 9, 2, 6, 5, 3};
    print("初始状态下，v：   ", v.cbegin(), v.cend());
    
    std::ranges::make_heap(v);
    print("make_heap 后，v：", v.cbegin(), v.cend());
    
    print("将堆转换成有序数组：");
    for (auto n {std::ssize(v)}; n &gt;= 0; --n)
    {
        std::ranges::pop_heap(v.begin(), v.begin() + n);
        print("[ ", v.cbegin(), v.cbegin() + n, "]  ");
        print("[ ", v.cbegin() + n, v.cend(), "]\n");
    }
}
|output=
初始状态下，v：   3 1 4 1 5 9 2 6 5 3
make_heap 后，v：9 6 4 5 5 3 2 1 1 3
将堆转换成有序数组：
[ 6 5 4 3 5 3 2 1 1 9 ]  [ ]
[ 5 5 4 3 1 3 2 1 6 ]  [ 9 ]
[ 5 3 4 1 1 3 2 5 ]  [ 6 9 ]
[ 4 3 3 1 1 2 5 ]  [ 5 6 9 ]
[ 3 2 3 1 1 4 ]  [ 5 5 6 9 ]
[ 3 2 1 1 3 ]  [ 4 5 5 6 9 ]
[ 2 1 1 3 ]  [ 3 4 5 5 6 9 ]
[ 1 1 2 ]  [ 3 3 4 5 5 6 9 ]
[ 1 1 ]  [ 2 3 3 4 5 5 6 9 ]
[ 1 ]  [ 1 2 3 3 4 5 5 6 9 ]
[ ]  [ 1 1 2 3 3 4 5 5 6 9 ]
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc push_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc is_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc is_heap_until}}
{{dsc inc|cpp/algorithm/ranges/dsc make_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc sort_heap}}
{{dsc inc|cpp/algorithm/dsc pop_heap}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
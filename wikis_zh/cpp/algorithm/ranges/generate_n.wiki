{{cpp/ranges/title|generate_n}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|调用签名}}
{{dcl|since=c++20|1=
template&lt; std::input_or_output_iterator O, std::copy_constructible F &gt;
requires std::invocable&lt;F&amp;&gt; &amp;&amp; std::indirectly_writable&lt;O, std::invoke_result_t&lt;F&amp;&gt;&gt;
constexpr O
    generate_n( O first, std::iter_difference_t&lt;O&gt; n, F gen );
}}
{{dcl end}}

若 {{c|0 &lt; n}} 则对范围 {{range|first|first + n}} 中的每个元素赋值''连续''调用函数对象 {{c|gen}} 的结果，否则不做任何事。

{{cpp/ranges/niebloid}}

===参数===
{{par begin}}
{{par|first|要修改的元素范围起始}}
{{par|n|要修改的元素数}}
{{par|gen|生成器函数对象}}
{{par end}}

===返回值===
若 {{c|0 &lt; count}} 则为末元素后一位置迭代器，否则为 {{c|first}}。

===复杂度===
准确调用 {{c|n}} 次 {{c|gen()}} 以及赋值。

===可能的实现===
{{eq fun|1=
struct generate_n_fn
{
    template&lt;std::input_or_output_iterator O, std::copy_constructible F&gt;
    requires std::invocable&lt;F&amp;&gt; &amp;&amp; std::indirectly_writable&lt;O, std::invoke_result_t&lt;F&amp;&gt;&gt;
    constexpr O operator()(O first, std::iter_difference_t&lt;O&gt; n, F gen) const
    {
        for (; n-- &gt; 0; *first = std::invoke(gen), ++first)
        {}
        return first;
    }
};

inline constexpr generate_n_fn generate_n {};
}}

===示例===
{{example|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;random&gt;
#include &lt;string_view&gt;

auto dice()
{
    static std::uniform_int_distribution&lt;int&gt; distr {1, 6};
    static std::random_device engine;
    static std::mt19937 noise {engine()};
    return distr(noise);
}

void print(const auto&amp; v, std::string_view comment)
{
    for (int i : v)
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '(' &lt;&lt; comment &lt;&lt; ")\n";
}

int main()
{
    std::array&lt;int, 8&gt; v;

    std::ranges::generate_n(v.begin(), v.size(), dice);
    print(v, "dice");

    std::ranges::generate_n(v.begin(), v.size(), [n {0}] mutable { return n++; });
    // same effect as std::iota(v.begin(), v.end(), 0);
    print(v, "iota");
}
|p=true
|output=
5 5 2 2 6 6 3 5 (dice)
0 1 2 3 4 5 6 7 (iota)
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc generate}}
{{dsc inc|cpp/numeric/random/ranges/dsc generate_random}}
{{dsc inc|cpp/algorithm/ranges/dsc fill}}
{{dsc inc|cpp/algorithm/ranges/dsc fill_n}}
{{dsc inc|cpp/algorithm/ranges/dsc transform}}
{{dsc inc|cpp/algorithm/dsc generate_n}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
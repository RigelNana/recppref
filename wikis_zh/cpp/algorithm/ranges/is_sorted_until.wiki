{{cpp/ranges/title|is_sorted_until}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header | algorithm}}
{{dcl h|调用签名}}
{{dcl|num=1|since=c++20|1=
template&lt; std::forward_iterator I, std::sentinel_for&lt;I&gt; S,
          class Proj = std::identity,
          std::indirect_strict_weak_order&lt;std::projected&lt;I, Proj&gt;&gt;
              Comp = ranges::less &gt;
constexpr I
    is_sorted_until( I first, S last, Comp comp = {}, Proj proj = {} );
}}
{{dcl|num=2|since=c++20|1=
template&lt; std::forward_range R, class Proj = std::identity,
          std::indirect_strict_weak_order&lt;
              std::projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt;
                  Comp = ranges::less &gt;
constexpr ranges::borrowed_iterator_t&lt;R&gt;
    is_sorted_until( R&amp;&amp; r, Comp comp = {}, Proj proj = {} );
}}
{{dcl end}}

检验范围 {{range|first|last}} 并寻找始于 {{c|first}} 且元素按非降序排序的最大范围。

若对于指向序列的任何迭代器 {{tt|it}} 与使得 {{tt|it + n}} 为指向序列元素的合法迭代器的任何非负整数 {{tt|n}}，{{c|std::invoke(comp, std::invoke(proj, *(it + n)), std::invoke(proj, *it))}} 求值为 {{c|false}}，则称序列相对于比较器 {{c|comp}} 有序。

@1@ 用给定的二元比较函数 {{c|comp}} 比较元素。
@2@ 同 {{v|1}}，但以 {{c|r}} 为源范围，如同以 {{c|ranges::begin(r)}} 为 {{c|first}} 并以 {{c|ranges::end(r)}} 为 {{c|last}}。

{{cpp/ranges/niebloid}}

===参数===
{{par begin}}
{{par range|3=要寻找其有序上界的|sentinel=yes}}
{{par | r |要寻找其有序上界的范围}}
{{par | comp |应用到投影后元素的比较函数}}
{{par | proj |应用到元素的投影}}
{{par end}}

===返回值===
始于 {{c|first}}，且元素按非降序排序的最大范围的上界。即使得范围 {{range|first|it}} 有序的最末迭代器 {{tt|it}}。

===复杂度===
与 {{c|first}} 和 {{c|last}} 间的距离成线性。

===可能的实现===
{{eq fun
|1=
struct is_sorted_until_fn
{
    template&lt;std::forward_iterator I, std::sentinel_for&lt;I&gt; S,
             class Proj = std::identity,
             std::indirect_strict_weak_order&lt;std::projected&lt;I, Proj&gt;&gt;
                 Comp = ranges::less&gt;
    constexpr I operator()(I first, S last, Comp comp = {}, Proj proj = {}) const
    {
        if (first == last)
            return first;

        for (auto next = first; ++next != last; first = next)
            if (std::invoke(comp, std::invoke(proj, *next), std::invoke(proj, *first)))
                return next;

        return first;
    }
  
    template&lt;ranges::forward_range R, class Proj = std::identity,
             std::indirect_strict_weak_order&lt;
                 std::projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt; Comp = ranges::less&gt;
    constexpr ranges::borrowed_iterator_t&lt;R&gt;
        operator()(R&amp;&amp; r, Comp comp = {}, Proj proj = {}) const
    {
        return (*this)(ranges::begin(r), ranges::end(r), std::ref(comp), std::ref(proj));
    }
};

inline constexpr is_sorted_until_fn is_sorted_until;
}}

===注解===
{{tt|ranges::is_sorted_until}} 对空范围和长度为一的范围返回等于 {{tt|last}} 的迭代器。

===示例===
{{example
|code=
#include &lt;array&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;random&gt;

int main()
{
    std::random_device rd;
    std::mt19937 g {rd()};
    std::array nums {3, 1, 4, 1, 5, 9};
 
    constexpr int min_sorted_size = 4;
    int sorted_size = 0;
    do
    {
        std::ranges::shuffle(nums, g);
        const auto sorted_end = std::ranges::is_sorted_until(nums);
        sorted_size = std::ranges::distance(nums.begin(), sorted_end);
 
        std::ranges::copy(nums, std::ostream_iterator&lt;int&gt;(std::cout, " "));
        std::cout &lt;&lt; " : " &lt;&lt; sorted_size &lt;&lt; " 个前导有序元素\n";
    }
    while (sorted_size &lt; min_sorted_size);
}
|p=true
|output=
4 1 9 5 1 3  : 1 个前导有序元素
4 5 9 3 1 1  : 3 个前导有序元素
9 3 1 4 5 1  : 1 个前导有序元素
1 3 5 4 1 9  : 3 个前导有序元素
5 9 1 1 3 4  : 2 个前导有序元素
4 9 1 5 1 3  : 2 个前导有序元素
1 1 4 9 5 3  : 4 个前导有序元素
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/algorithm/ranges/dsc is_sorted}}
{{dsc inc | cpp/algorithm/dsc is_sorted_until}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
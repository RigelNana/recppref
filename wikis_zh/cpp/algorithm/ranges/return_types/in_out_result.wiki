{{cpp/ranges/title|in_out_result}}
{{cpp/algorithm/ranges/return_types/navbar}}

{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|since=c++20|1=
template&lt; class I, class O &gt;
struct in_out_result;
}}
{{dcl end}}

{{tt|ranges::in_out_result}} 是类模板，提供存储二个迭代器为单个单元的方式。

{{cpp/algorithm/ranges/return_types/general_description}}

===模板形参===
{{par begin}}
{{par | I, O | {{tt|ranges::in_out_result}} 所存储的对象类型}}
{{par end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员名字|定义}}
{{dsc mem obj|in|nolink=true|{{tt|I}} 类型的值（假定为迭代器）。}}
{{dsc mem obj|out|nolink=true|{{tt|O}} 类型的值（假定为迭代器）。}}
{{dsc end}}

这些成员都被声明为带有 {{attr|no_unique_address}} 属性。

===成员函数===
{{member|{{small|std::ranges::in_out_result::}}operator in_out_result&lt;I2, O2&gt;|2=
{{dcl begin}}
{{dcl|num=1|1=
template&lt;class I2, class O2&gt;
requires std::convertible_to&lt;const I&amp;, I2&gt; &amp;&amp; std::convertible_to&lt;const O&amp;, O2&gt;
constexpr operator in_out_result&lt;I2, O2&gt;() const &amp;;
}}
{{dcl|num=2|1=
template&lt;class I2, class O2&gt;
requires std::convertible_to&lt;I, I2&gt; &amp;&amp; std::convertible_to&lt;O, O2&gt;
constexpr operator in_out_result&lt;I2, O2&gt;() &amp;&amp;;
}}
{{dcl end}}
通过从 {{c|*this}} 的每个数据成员构造结果的对应成员，转换 {{c|*this}} 为结果。
@1@ 等价于 {{c|return {in, out};}}。
@2@ 等价于 {{c|return {std::move(in), std::move(out)};}}。
}}

===标准库===
下列标准库函数以 {{tt|ranges::in_out_result}} 为返回类型：

{{dsc begin}}
{{dsc h2|算法函数}}
{{dsc inc|cpp/algorithm/ranges/dsc copy}}
{{dsc inc|cpp/algorithm/ranges/dsc copy_n}}
{{dsc inc|cpp/algorithm/ranges/dsc copy_backward}}
{{dsc inc|cpp/algorithm/ranges/dsc move}}
{{dsc inc|cpp/algorithm/ranges/dsc move_backward}}
{{dsc inc|cpp/algorithm/ranges/dsc transform}}
{{dsc inc|cpp/algorithm/ranges/dsc replace_copy}}
{{dsc inc|cpp/algorithm/ranges/dsc remove_copy}}
{{dsc inc|cpp/algorithm/ranges/dsc unique_copy}}
{{dsc inc|cpp/algorithm/ranges/dsc reverse_copy}}
{{dsc inc|cpp/algorithm/ranges/dsc rotate_copy}}
{{dsc inc|cpp/algorithm/ranges/dsc partial_sort_copy}}
{{dsc inc|cpp/algorithm/ranges/dsc set_difference}}
{{dsc h2|未初始化内存函数}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_copy}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_copy_n}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_move}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_move_n}}
{{dsc end}}

===概要===
{{source|1=
namespace std::ranges
{
    template&lt;class I, class O&gt;
    struct in_out_result
    {
        [[no_unique_address]] I in;
        [[no_unique_address]] O out;

        template&lt;class I2, class O2&gt;
        requires std::convertible_to&lt;const I&amp;, I2&gt; &amp;&amp; std::convertible_to&lt;const O&amp;, O2&gt;
        constexpr operator in_out_result&lt;I2, O2&gt;() const &amp;
        {
            return {in, out};
        }

        template&lt;class I2, class O2&gt;
        requires std::convertible_to&lt;I, I2&gt; &amp;&amp; std::convertible_to&lt;O, O2&gt;
        constexpr operator in_out_result&lt;I2, O2&gt;() &amp;&amp;
        {
            return {std::move(in), std::move(out)};
        }
    };
}
}}

===注解===
{{cpp/algorithm/ranges/notes return_types}}

===示例===
{{example|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;cctype&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;

int main()
{
    constexpr char in[] = "transform" "\n";
    std::array&lt;char, sizeof(in)&gt; out;

    const auto result = std::ranges::transform(in, out.begin(),
        [](char c) { return std::toupper(c); });

    auto print = [](char c) { std::cout &lt;&lt; c; };
    std::ranges::for_each(std::cbegin(in), result.in, print);
    std::ranges::for_each(out.cbegin(), result.out, print);
}
|output=
transform
TRANSFORM
}}


===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc pair}}
{{dsc inc|cpp/utility/dsc tuple}}
{{dsc end}}

{{langlinks|cs|de|en|es|fr|it|ja|ko|pl|pt|ru}}
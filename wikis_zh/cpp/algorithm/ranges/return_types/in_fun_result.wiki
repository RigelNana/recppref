{{cpp/ranges/title|in_fun_result}}
{{cpp/algorithm/ranges/return_types/navbar}}

{{ddcl|header=algorithm|since=c++20|
template&lt; class I, class F &gt;
struct in_fun_result;
}}

{{tt|ranges::in_fun_result}} 是类模板，提供存储一个迭代器和一个函数对象为单个单元的方式。

{{cpp/algorithm/ranges/return_types/general_description}}

===模板形参===
{{par begin}}
{{par | I | {{tt|ranges::in_fun_result}} 存储的迭代器类型}}
{{par | F | {{tt|ranges::in_fun_result}} 存储的函数对象类型}}
{{par end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员名字|定义}}
{{dsc mem obj|in|nolink=true|{{tt|I}} 类型的值（假定为迭代器）。}}
{{dsc mem obj|fun|nolink=true|{{tt|F}} 类型的值（假定为函数对象）。}}
{{dsc end}}

这些成员都被声明为带有 {{attr|no_unique_address}} 属性。

===成员函数===
{{member|{{small|std::ranges::in_fun_result::}}operator in_fun_result&lt;I2, F2&gt;|2=
{{dcl begin}}
{{dcl|num=1|1=
template&lt;class I2, class F2&gt;
requires std::convertible_to&lt;const I&amp;, I2&gt; &amp;&amp; std::convertible_to&lt;const F&amp;, F2&gt;
constexpr operator in_fun_result&lt;I2, F2&gt;() const &amp;;
}}
{{dcl|num=2|1=
template&lt;class I2, class F2&gt;
requires std::convertible_to&lt;I, I2&gt; &amp;&amp; std::convertible_to&lt;F, F2&gt;
constexpr operator in_fun_result&lt;I2, F2&gt;() &amp;&amp;;
}}
{{dcl end}}
通过从 {{c|*this}} 的每个数据成员构造结果的对应成员，转换 {{c|*this}} 为结果。
@1@ 等价于 {{c|return {in, fun};}}。
@2@ 等价于 {{c|return {std::move(in), std::move(fun)};}}。
}}

===标准库===
下列标准库函数以 {{tt|ranges::in_fun_result}} 为返回类型：

{{dsc begin}}
{{dsc h2|算法函数}}
{{dsc inc|cpp/algorithm/ranges/dsc for_each}}
{{dsc inc|cpp/algorithm/ranges/dsc for_each_n}}
{{dsc end}}

===概要===
{{source|1=
namespace std::ranges
{
    template&lt;class I, class F&gt;
    struct in_fun_result
    {
        [[no_unique_address]] I in;
        [[no_unique_address]] F fun;

        template&lt;class I2, class F2&gt;
        requires std::convertible_to&lt;const I&amp;, I2&gt; &amp;&amp; std::convertible_to&lt;const F&amp;, F2&gt;
        constexpr operator in_fun_result&lt;I2, F2&gt;() const &amp;
        {
            return {in, fun};
        }

        template&lt;class I2, class F2&gt;
        requires std::convertible_to&lt;I, I2&gt; &amp;&amp; std::convertible_to&lt;F, F2&gt;
        constexpr operator in_fun_result&lt;I2, F2&gt;() &amp;&amp;
        {
            return {std::move(in), std::move(fun)};
        }
    };
}
}}

===注解===
{{cpp/algorithm/ranges/notes return_types}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;ranges&gt;

int main()
{
    int v[]{1, 2, 3};

    const std::ranges::in_fun_result res1 = std::ranges::for_each_n(
        v, std::size(v),
        [](int&amp; x) { return x = -x; } // 相反数 lambda
    );
    assert(res1.in == std::end(v));

    const std::ranges::in_fun_result res2 = std::ranges::for_each(
        std::begin(v),
        res1.in,
        [](int x) { std::cout &lt;&lt; x &lt;&lt; ' '; } // 打印 lambda
    );

    std::cout &lt;&lt; "│ ";

    std::ranges::for_each(v, res1.fun); // 使用相反数 lambda
    std::ranges::for_each(v, res2.fun); // 使用打印 lambda
    std::cout &lt;&lt; '\n';
}
|output=
-1 -2 -3 │ 1 2 3
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc pair}}
{{dsc inc|cpp/utility/dsc tuple}}
{{dsc end}}

{{langlinks|cs|de|en|es|fr|it|ja|ko|pl|pt|ru}}
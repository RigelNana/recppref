{{cpp/ranges/title|in_out_out_result}}
{{cpp/algorithm/ranges/return_types/navbar}}

{{dcl begin}}
{{dcl header|algorithm}}
{{dcl|since=c++20|1=
template&lt; class I, class O1, class O2 &gt;
struct in_out_out_result;
}}
{{dcl end}}

{{tt|ranges::in_out_out_result}} 是类模板，提供存储三个迭代器为单个单元的方式。

{{cpp/algorithm/ranges/return_types/general_description}}

===模板形参===
{{par begin}}
{{par | I, O1, O2 | {{tt|ranges::in_out_out_result}} 所存储的对象类型}}
{{par end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员名字|定义}}
{{dsc mem obj|in|nolink=true|{{tt|I}} 类型的值（假定为迭代器）。}}
{{dsc mem obj|out1|nolink=true|{{tt|O1}} 类型的值（假定为迭代器）。}}
{{dsc mem obj|out2|nolink=true|{{tt|O2}} 类型的值（假定为迭代器）。}}
{{dsc end}}

这些成员都被声明为带有 {{attr|no_unique_address}} 属性。

===成员函数===
{{member|{{small|std::ranges::in_out_out_result::}}operator in_out_out_result&lt;II, OO1, OO2&gt;|2=
{{dcl begin}}
{{dcl|num=1 |1=
template&lt;class II, class OO1, class OO2&gt;
requires std::convertible_to&lt;const I&amp;, II&gt; &amp;&amp;
         std::convertible_to&lt;const O1&amp;, OO1&gt; &amp;&amp;
         std::convertible_to&lt;const O2&amp;, OO2&gt;
constexpr operator in_out_out_result&lt;II, OO1, OO2&gt;() const &amp;;
}}
{{dcl|num=2|1=
template&lt;class II, class OO1, class OO2&gt;
requires std::convertible_to&lt;I, II&gt; &amp;&amp;
         std::convertible_to&lt;O1, OO1&gt; &amp;&amp;
         std::convertible_to&lt;O2, OO2&gt;
constexpr operator in_out_out_result&lt;II, OO1, OO2&gt;() &amp;&amp;;
}}
{{dcl end}}
通过从 {{c|*this}} 的每个数据成员构造结果的对应成员，转换 {{c|*this}} 为结果。
@1@ 等价于 {{c|return {in, out1, out2};}}。
@2@ 等价于 {{c|return {std::move(in), std::move(out1), std::move(out2)};}}。
}}

===标准库===
下列标准库函数以 {{tt|ranges::in_out_out_result}} 为返回类型：

{{dsc begin}}
{{dsc h2|算法函数}}
{{dsc inc|cpp/algorithm/ranges/dsc partition_copy}}
{{dsc end}}

===概要===
{{source|1=
namespace std::ranges
{
    template&lt;class I, class O1, class O2&gt;
    struct in_out_out_result
    {
        [[no_unique_address]] I  in;
        [[no_unique_address]] O1 out1;
        [[no_unique_address]] O2 out2;
      
        template&lt;class II, class OO1, class OO2&gt;
        requires std::convertible_to&lt;const I&amp;, II&gt; &amp;&amp;
                 std::convertible_to&lt;const O1&amp;, OO1&gt; &amp;&amp;
                 std::convertible_to&lt;const O2&amp;, OO2&gt;
        constexpr operator in_out_out_result&lt;II, OO1, OO2&gt;() const &amp;
        {
            return {in, out1, out2};
        }
      
        template&lt;class II, class OO1, class OO2&gt;
        requires std::convertible_to&lt;I, II&gt; &amp;&amp;
                 std::convertible_to&lt;O1, OO1&gt; &amp;&amp;
                 std::convertible_to&lt;O2, OO2&gt;
        constexpr operator in_out_out_result&lt;II, OO1, OO2&gt;() &amp;&amp;
        {
            return {std::move(in), std::move(out1), std::move(out2)};
        }
    };
}
}}

===注解===
{{cpp/algorithm/ranges/notes return_types}}

===示例===
{{example|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;cctype&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;ranges&gt;
#include &lt;string_view&gt;

void print(std::string_view rem, auto first, auto last)
{
    for (std::cout &lt;&lt; rem &lt;&lt; ": { "; first != last; ++first)
        std::cout &lt;&lt; *first &lt;&lt; ' ';
    std::cout &lt;&lt; "}\n";
}

int main()
{
    constexpr std::string_view in {"TvEeNcStOoRr"};
    std::array&lt;char, in.size()&gt; o1, o2;

    const auto result = std::ranges::partition_copy(in, o1.begin(), o2.begin(),
        [](char c) { return std::isupper(c); });

    print("in", in.begin(), result.in);
    print("o1", o1.begin(), result.out1);
    print("o2", o2.begin(), result.out2);
}
|output=
in: { T v E e N c S t O o R r }
o1: { T E N S O R }
o2: { v e c t o r }
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc pair}}
{{dsc inc|cpp/utility/dsc tuple}}
{{dsc end}}

{{langlinks|cs|de|en|es|fr|it|ja|ko|pl|pt|ru}}
{{cpp/ranges/title|sort_heap}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|调用签名}}
{{dcl|num=1|since=c++20|1=
template&lt; std::random_access_iterator I, std::sentinel_for&lt;I&gt; S,
          class Comp = ranges::less, class Proj = std::identity &gt;
    requires std::sortable&lt;I, Comp, Proj&gt;
constexpr I sort_heap( I first, S last, Comp comp = {}, Proj proj = {} );
}}
{{dcl|num=2|since=c++20|1=
template&lt; ranges::random_access_range R,
          class Comp = ranges::less, class Proj = std::identity &gt;
    requires std::sortable&lt;ranges::iterator_t&lt;R&gt;, Comp, Proj&gt;
constexpr ranges::borrowed_iterator_t&lt;R&gt;
    sort_heap( R&amp;&amp; r, Comp comp = {}, Proj proj = {} );
}}
{{dcl end}}

将指定范围的所有元素按 {{c|comp}} 和 {{c|proj}} [[cpp/algorithm#要求|排序]]，该范围原先表示一个关于 {{c|comp}} 和 {{c|proj}} 的[[cpp/algorithm#堆操作|堆]]。排序后范围不再维持堆的性质。

@1@ 指定的范围是 {{range|first|last}}。

@2@ 指定的范围是 {{c|r}}。

如果指定范围不是关于 {{c|comp}} 和 {{c|proj}} 的堆，那么行为未定义。

{{cpp/ranges/niebloid}}

===参数===
{{par begin}}
{{par range|3=要修改的|sentinel=yes}}
{{par|r|要修改的元素 {{lconcept|range}}}}
{{par|comp|应用到投影后元素的比较器}}
{{par|proj|应用到元素的投影}}
{{par end}}

===返回值===
@1@ {{c|last}}
@2@ {{c|ranges::end(r)}}

===复杂度===
最多应用 {{mathjax-or|\(\scriptsize 2N \cdot \log(N)\)|2N⋅log(N)}} 次 {{c|comp}} 和 {{mathjax-or|\(\scriptsize 4N \cdot \log(N)\)|4N⋅log(N)}} 次 {{c|proj}}，其中 {{mathjax-or|\(\scriptsize N \)|N}} 是：
@1@ {{c|ranges::distance(first, last)}}
@2@ {{c|ranges::distance(r)}}

===可能的实现===
{{eq fun|1=
struct sort_heap_fn
{
    template&lt;std::random_access_iterator I, std::sentinel_for&lt;I&gt; S,
             class Comp = ranges::less, class Proj = std::identity&gt;
        requires std::sortable&lt;I, Comp, Proj&gt;
    constexpr I operator()(I first, S last, Comp comp = {}, Proj proj = {}) const
    {
        auto ret{ranges::next(first, last)};
        for (auto last{ret}; first != last; --last)
            ranges::pop_heap(first, last, comp, proj);
        return ret;
    }
    
    template&lt;ranges::random_access_range R,
             class Comp = ranges::less, class Proj = std::identity&gt;
        requires std::sortable&lt;ranges::iterator_t&lt;R&gt;, Comp, Proj&gt;
    constexpr ranges::borrowed_iterator_t&lt;R&gt;
        operator()(R&amp;&amp; r, Comp comp = {}, Proj proj = {}) const
    {
        return (*this)(ranges::begin(r), ranges::end(r), std::move(comp), std::move(proj));
    }
};

inline constexpr sort_heap_fn sort_heap{};
}}

===示例===
{{example|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;iostream&gt;

void print(auto const&amp; rem, const auto&amp; v)
{
    std::cout &lt;&lt; rem;
    for (const auto i : v)
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::array v{3, 1, 4, 1, 5, 9};
    print("原数组：      ", v);
    
    std::ranges::make_heap(v);
    print("make_heap 后：", v);
    
    std::ranges::sort_heap(v);
    print("sort_heap 后：", v);
}
|output=
原数组：      3 1 4 1 5 9
make_heap 后：9 5 4 1 1 3
sort_heap 后：1 1 3 4 5 9
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc is_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc is_heap_until}}
{{dsc inc|cpp/algorithm/ranges/dsc make_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc pop_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc push_heap}}
{{dsc inc|cpp/algorithm/dsc sort_heap}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
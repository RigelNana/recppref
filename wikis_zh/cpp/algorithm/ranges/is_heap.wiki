{{cpp/ranges/title|is_heap}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|调用签名}}
{{dcl|num=1|since=c++20|1=
template&lt; std::random_access_iterator I, std::sentinel_for&lt;I&gt; S,
          class Proj = std::identity,
          std::indirect_strict_weak_order
              &lt;std::projected&lt;I, Proj&gt;&gt; Comp = ranges::less &gt;
constexpr bool is_heap( I first, S last, Comp comp = {}, Proj proj = {} );
}}
{{dcl|num=2|since=c++20|1=
template&lt; ranges::random_access_range R, class Proj = std::identity,
          std::indirect_strict_weak_order
              &lt;std::projected
                   &lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt; Comp = ranges::less &gt;
constexpr bool is_heap( R&amp;&amp; r, Comp comp = {}, Proj proj = {} );
}}
{{dcl end}}

检查指定范围是否表示一个关于 {{c|comp}} 和 {{c|proj}} 的[[cpp/algorithm#堆操作|堆]]。

@1@ 指定的范围是 {{range|first|last}}。

@2@ 指定的范围是 {{c|r}}。

{{cpp/ranges/niebloid}}

===参数===
{{par begin}}
{{par range|3=要检验的|sentinel=yes}}
{{par|r|要检验的元素 {{lconcept|range}}}}
{{par|comp|应用到投影后元素的比较器}}
{{par|proj|应用到元素的投影}}
{{par end}}

===返回值===
@1@ {{c|1=ranges::is_heap_until(first, last, comp, proj) == last}}
@2@ {{c|1=ranges::is_heap_until(r, comp, proj) == ranges::end(r)}}

===复杂度===
应用 {{mathjax-or|\(\scriptsize O(N) \)|O(N)}} 次 {{c|comp}} 和 {{c|proj}}，其中 {{mathjax-or|\(\scriptsize N \)|N}} 是：
@1@ {{c|ranges::distance(first, last)}}
@2@ {{c|ranges::distance(r)}}

===可能的实现===
{{eq fun|1=
struct is_heap_fn
{
    template&lt;std::random_access_iterator I, std::sentinel_for&lt;I&gt; S,
             class Proj = std::identity,
             std::indirect_strict_weak_order
                 &lt;std::projected&lt;I, Proj&gt;&gt; Comp = ranges::less&gt;
    constexpr bool operator()(I first, S last, Comp comp = {}, Proj proj = {}) const
    {
        return (last == ranges::is_heap_until(first, last,
                                              std::move(comp), std::move(proj)));
    }
    
    template&lt;ranges::random_access_range R, class Proj = std::identity,
             std::indirect_strict_weak_order
                 &lt;std::projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt; Comp = ranges::less&gt;
    constexpr bool operator()(R&amp;&amp; r, Comp comp = {}, Proj proj = {}) const
    {
        return (*this)(ranges::begin(r), ranges::end(r),
                       std::move(comp), std::move(proj));
    }
};

inline constexpr is_heap_fn is_heap{};
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;bit&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

void out(const auto&amp; what, int n = 1)
{
    while (n-- &gt; 0)
        std::cout &lt;&lt; what;
}

void draw_heap(const auto&amp; v)
{
    auto bails = [](int n, int w)
    {
        auto b = [](int w) { out("┌"), out("─", w), out("┴"), out("─", w), out("┐"); };
        n /= 2;
        if (!n)
            return;
        for (out(' ', w); n-- &gt; 0;)
            b(w), out(' ', w + w + 1);
        out('\n');
    };
    
    auto data = [](int n, int w, auto&amp; first, auto last)
    {
        for (out(' ', w); n-- &gt; 0 &amp;&amp; first != last; ++first)
            out(*first), out(' ', w + w + 1);
        out('\n');
    };
    
    auto tier = [&amp;](int t, int m, auto&amp; first, auto last)
    {
        const int n{1 &lt;&lt; t};
        const int w{(1 &lt;&lt; (m - t - 1)) - 1};
        bails(n, w), data(n, w, first, last);
    };
    
    const int m{static_cast&lt;int&gt;(std::ceil(std::log2(1 + v.size())))};
    auto first{v.cbegin()};
    for (int i{}; i != m; ++i)
        tier(i, m, first, v.cend());
}

int main()
{
    std::vector&lt;int&gt; v{3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9, 3, 2, 3, 8};
    
    out("起初，v：\n");
    for (auto i : v)
        std::cout &lt;&lt; i &lt;&lt; ' ';
    out('\n');
    
    if (!std::ranges::is_heap(v))
    {
        out("制造堆...\n");
        std::ranges::make_heap(v);
    }
    
    out("调用 make_heap 后，v：\n");
    for (auto t{1U}; auto i : v)
        std::cout &lt;&lt; i &lt;&lt; (std::has_single_bit(++t) ? " │ " : " ");
    
    out("\n" "对应二叉树为：\n");
    draw_heap(v);
}
|output=&lt;nowiki/&gt;
起初，v：
3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8
制造堆...
调用 make_heap 后，v：
9 │ 8 9 │ 6 5 8 9 │ 3 5 3 5 3 4 7 2 │ 1 2 3 1
对应二叉树为：
               9
       ┌───────┴───────┐
       8               9
   ┌───┴───┐       ┌───┴───┐
   6       5       8       9
 ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐
 3   5   3   5   3   4   7   2
┌┴┐ ┌┴┐ ┌┴┐ ┌┴┐ ┌┴┐ ┌┴┐ ┌┴┐ ┌┴┐
1 2 3 1
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc is_heap_until}}
{{dsc inc|cpp/algorithm/ranges/dsc make_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc push_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc pop_heap}}
{{dsc inc|cpp/algorithm/ranges/dsc sort_heap}}
{{dsc inc|cpp/algorithm/dsc is_heap}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/ranges/title|is_sorted}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|调用签名}}
{{dcl|num=1|since=c++20|1=
template&lt; std::forward_iterator I, std::sentinel_for&lt;I&gt; S,
          class Proj = std::identity,
          std::indirect_strict_weak_order&lt;std::projected&lt;I, Proj&gt;&gt;
              Comp = ranges::less &gt;
constexpr bool
    is_sorted( I first, S last, Comp comp = {}, Proj proj = {} );
}}
{{dcl|num=2|since=c++20|1=
template&lt; ranges::forward_range R, class Proj = std::identity,
          std::indirect_strict_weak_order&lt;
              std::projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt;
                  Comp = ranges::less &gt;
constexpr bool
    is_sorted( R&amp;&amp; r, Comp comp = {}, Proj proj = {} );
}}
{{dcl end}}

检查范围 {{range|first|last}} 中的元素是否按非降序排序。

若对于指向序列的任何迭代器 {{tt|it}} 与使得 {{tt|it + n}} 为指向序列元素的合法迭代器的任何非负整数 {{tt|n}}，{{c|std::invoke(comp, std::invoke(proj, *(it + n)), std::invoke(proj, *it))}} 求值为 {{c|false}}，则称序列相对于比较器 {{c|comp}} 有序。

@1@ 用给定的二元比较函数 {{c|comp}} 比较元素。
@2@ 同 {{v|1}}，但以 {{c|r}} 为源范围，如同以 {{c|ranges::begin(r)}} 为 {{c|first}} 并以 {{c|ranges::end(r)}} 为 {{c|last}}。

{{cpp/ranges/niebloid}}

===参数===
{{par begin}}
{{par range|3=要检查是否有序的|sentinel=yes}}
{{par | r |要检查是否有序的元素范围}}
{{par | comp |应用到投影后元素的比较函数}}
{{par | proj |应用到元素的投影}}
{{par end}}

===返回值===
若投影后元素已按照 {{c|comp}} 排序则为 {{c|true}}。

===复杂度===
与 {{c|first}} 和 {{c|last}} 间的距离成线性。

===可能的实现===
{{eq fun
|1=
struct is_sorted_fn
{
    template&lt;std::forward_iterator I, std::sentinel_for&lt;I&gt; S,
             class Proj = std::identity,
             std::indirect_strict_weak_order&lt;std::projected&lt;I, Proj&gt;&gt;
                 Comp = ranges::less&gt;
    constexpr bool operator()(I first, S last, Comp comp = {}, Proj proj = {}) const
    {
        return ranges::is_sorted_until(first, last, comp, proj) == last;
    }
  
    template&lt;ranges::forward_range R, class Proj = std::identity,
             std::indirect_strict_weak_order&lt;
                 std::projected&lt;ranges::iterator_t&lt;R&gt;, Proj&gt;&gt;
                     Comp = ranges::less&gt;
    constexpr bool operator()(R&amp;&amp; r, Comp comp = {}, Proj proj = {}) const
    {
        return (*this)(ranges::begin(r), ranges::end(r), std::ref(comp), std::ref(proj));
    }
};

inline constexpr is_sorted_fn is_sorted;
}}

===注解===
{{tt|ranges::is_sorted}} 对空范围及长度为一的范围返回 {{c|true}}。

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;

int main()
{
    namespace ranges = std::ranges;

    std::array digits {3, 1, 4, 1, 5};

    ranges::copy(digits, std::ostream_iterator&lt;int&gt;(std::cout, " "));
    ranges::is_sorted(digits)
        ? std::cout &lt;&lt; ": sorted\n"
        : std::cout &lt;&lt; ": not sorted\n";

    ranges::sort(digits);

    ranges::copy(digits, std::ostream_iterator&lt;int&gt;(std::cout, " "));
    ranges::is_sorted(ranges::begin(digits), ranges::end(digits))
        ? std::cout &lt;&lt; ": sorted\n"
        : std::cout &lt;&lt; ": not sorted\n";

    ranges::reverse(digits);

    ranges::copy(digits, std::ostream_iterator&lt;int&gt;(std::cout, " "));
    ranges::is_sorted(digits, ranges::greater {})
        ? std::cout &lt;&lt; ": sorted (with 'greater')\n"
        : std::cout &lt;&lt; ": not sorted\n";
}
|output=
3 1 4 1 5 : not sorted
1 1 3 4 5 : sorted
5 4 3 1 1 : sorted (with 'greater')
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/algorithm/ranges/dsc is_sorted_until}}
{{dsc inc | cpp/algorithm/dsc is_sorted}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
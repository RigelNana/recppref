{{cpp/ranges/title|reverse}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|调用签名}}
{{dcl|num=1|since=c++20|1=
template&lt; std::bidirectional_iterator I, std::sentinel_for&lt;I&gt; S &gt;
requires std::permutable&lt;I&gt;
constexpr I
    reverse( I first, S last );
}}
{{dcl|num=2|since=c++20|1=
template&lt; ranges::bidirectional_range R &gt;
requires std::permutable&lt;ranges::iterator_t&lt;R&gt;&gt;
constexpr ranges::borrowed_iterator_t&lt;R&gt;
    reverse( R&amp;&amp; r );
}}
{{dcl end}}

@1@ 逆转范围 {{range|first|last}} 中的元素顺序。
@@ 表现如同对每个 {{c|1=0 ≤ i &lt; (last-first)/2}} 中的整数 {{tt|i}}，将 {{lc|ranges::iter_swap}} 应用到每对迭代器 {{c|first + i, last - i - 1}}。

@2@ 同 {{v|1}}，但以 {{c|r}} 为源范围，如同以 {{c|ranges::begin(r)}} 为 {{c|first}} 并以 {{c|ranges::end(r)}} 为 {{c|last}}。

{{cpp/ranges/niebloid}}

===参数===
{{par begin}}
{{par range|3=要逆转的|sentinel=yes}}
{{par|r|要逆转的元素范围}}
{{par end}}

===返回值===
等于 {{c|last}} 的迭代器。

===复杂度===
准确交换 {{c|(last - first)/2}} 次。

===注解===
{{cpp/algorithm/notes swap vectorization}}

===可能的实现===
参阅 [https://github.com/gcc-mirror/gcc/blob/14d8a5ae472ca5743016f37da2dd4770d83dea21/libstdc%2B%2B-v3/include/bits/ranges_algo.h#L1278-L1325 libstdc++] 与 [https://github.com/microsoft/STL/blob/472161105d596192194d4715ccad307c6c163b4a/stl/inc/algorithm#L4154-L4180 MSVC STL] 中的实现。
{{eq fun|1=
struct reverse_fn
{
    template&lt;std::bidirectional_iterator I, std::sentinel_for&lt;I&gt; S&gt;
    requires std::permutable&lt;I&gt;
    constexpr I operator()(I first, S last) const
    {
        auto last2 {ranges::next(first, last)};
        for (auto tail {last2}; !(first == tail or first == --tail); ++first)
            ranges::iter_swap(first, tail);
        return last2;
    }

    template&lt;ranges::bidirectional_range R&gt;
    requires std::permutable&lt;ranges::iterator_t&lt;R&gt;&gt;
    constexpr ranges::borrowed_iterator_t&lt;R&gt;
        operator()(R&amp;&amp; r) const
    {
        return (*this)(ranges::begin(r), ranges::end(r));
    }
};

inline constexpr reverse_fn reverse {};
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::string s {"ABCDEF"};
    std::cout &lt;&lt; s &lt;&lt; " → ";
    std::ranges::reverse(s.begin(), s.end());
    std::cout &lt;&lt; s &lt;&lt; " → ";
    std::ranges::reverse(s);
    std::cout &lt;&lt; s &lt;&lt; " │ ";

    std::array a {1, 2, 3, 4, 5};
    for (auto e : a)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; "→ ";
    std::ranges::reverse(a);
    for (auto e : a)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
ABCDEF → FEDCBA → ABCDEF │ 1 2 3 4 5 → 5 4 3 2 1
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc reverse_copy}}
{{dsc inc|cpp/ranges/dsc reverse_view}}
{{dsc inc|cpp/algorithm/dsc reverse}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
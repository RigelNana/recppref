{{cpp/ranges/title|set_union|set_union_result}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|调用签名}}
{{dcl|num=1|since=c++20|1=
template&lt; std::input_iterator I1, std::sentinel_for&lt;I1&gt; S1,
          std::input_iterator I2, std::sentinel_for&lt;I2&gt; S2,
          std::weakly_incrementable O, class Comp = ranges::less,
          class Proj1 = std::identity, class Proj2 = std::identity &gt;
requires std::mergeable&lt;I1, I2, O, Comp, Proj1, Proj2&gt;
constexpr set_union_result&lt;I1, I2, O&gt;
    set_union( I1 first1, S1 last1, I2 first2, S2 last2,
               O result, Comp comp = {},
               Proj1 proj1 = {}, Proj2 proj2 = {} );
}}
{{dcl|num=2|since=c++20|1=
template&lt; ranges::input_range R1, ranges::input_range R2,
          std::weakly_incrementable O, class Comp = ranges::less,
          class Proj1 = std::identity, class Proj2 = std::identity &gt;
requires std::mergeable&lt;ranges::iterator_t&lt;R1&gt;, ranges::iterator_t&lt;R2&gt;,
                        O, Comp, Proj1, Proj2&gt;
constexpr set_union_result&lt;ranges::borrowed_iterator_t&lt;R1&gt;,
                           ranges::borrowed_iterator_t&lt;R2&gt;, O&gt;
    set_union( R1&amp;&amp; r1, R2&amp;&amp; r2, O result, Comp comp = {},
               Proj1 proj1 = {}, Proj2 proj2 = {} );
}}
{{dcl h|辅助类型}}
{{dcl|num=3|since=c++20|1=
template&lt; class I1, class I2, class O &gt;
using set_union_result = ranges::in_in_out_result&lt;I1, I2, O&gt;;
}}
{{dcl end}}

构造始于 {{c|result}} 的有序范围，由来自一或两个有序的输入范围 {{range|first1|last1}} 与 {{range|first2|last2}} 的元素组成。

若在 {{range|first1|last1}} 中找到某元素 {{tt|m}} 次并在 {{range|first2|last2}} 中找到 {{tt|n}} 次，则将从 {{range|first1|last1}} 复制 {{tt|m}} 个元素到 {{c|result}}，保持顺序，然后将从 {{range|first2|last2}} 复制恰好 {{c|max(n-m, 0)}} 个元素到 {{c|result}}，亦保持顺序。

若
* 输入范围未分别按 {{c|comp}} 和 {{c|proj1}} 或 {{c|proj2}} 排序，或
* 输入范围与输出范围重叠，
则行为未定义。

@1@ 用给定的二元比较函数 {{c|comp}} 比较元素。

@2@ 同 {{v|1}}，但以 {{c|r1}} 为第一范围并以 {{c|r2}} 为第二范围，如同以 {{c|ranges::begin(r1)}} 为 {{tt|first1}}，以 {{c|ranges::end(r1)}} 为 {{c|last1}}，以 {{c|ranges::begin(r2)}} 为 {{c|first2}} 并以 {{c|ranges::end(r2)}} 为 {{c|last2}}。

{{cpp/ranges/niebloid}}

===参数===
{{par begin}}
{{par range|first1|last1|3=|range=第一个输入的有序|sentinel=yes}}
{{par range|first2|last2|3=|range=第二个输入的有序|sentinel=yes}}
{{par | r1 | 第一个输入的有序范围}}
{{par | r2 | 第二个输入的有序范围}}
{{par | result | 输出范围的起始}}
{{par | comp | 应用到投影后元素的比较器}}
{{par | proj1 | 应用到第一个范围元素的投影}}
{{par | proj2 | 应用到第二个范围元素的投影}}
{{par end}}

===返回值===
{{c|{last1, last2, result_last} }}，其中 {{c|result_last}} 为构造的范围的末尾。

===复杂度===
至多比较和应用每个投影 {{mathjax-or|\(\scriptsize 2\cdot(N_1+N_2)-1\)|2&amp;middot;(N{{su|b=1}}+N{{su|b=2}})-1}} 次，其中 {{mathjax-or|\(\scriptsize N_1\)|N{{su|b=1}}}} 与 {{mathjax-or|\(\scriptsize N_2\)|N{{su|b=2}}}} 分别为 {{c|ranges::distance(first1, last1)}} 与 {{c|ranges::distance(first2, last2)}}。

===注解===
此算法进行与 {{lc|ranges::merge}} 所做的类似的任务。两者都消费有序的输入范围并产生拥有来自两个范围的元素的有序输出。这两个算法间的区别在于如何处理来自两个输入范围的比较等价的值（见{{named req|LessThanComparable}}上的注解）。若任何等价的值在第一范围中出现 {{tt|n}} 次，在第二范围出现 {{tt|m}} 次，则 {{lc|ranges::merge}} 将输出所有 {{c|n+m}} 次出现，而 {{tt|ranges::set_union}} 则只输出 {{c|std::max(n, m)}} 次。故 {{lc|ranges::merge}} 恰好输出 {{mathjax-or|\(\scriptsize (N_1+N_2)\)|(N{{su|b=1}}+N{{su|b=2}})}} 个值，而 {{tt|ranges::set_union}} 可能产生较少的值。

===可能的实现===
{{eq fun|1=
struct set_union_fn
{
    template&lt;std::input_iterator I1, std::sentinel_for&lt;I1&gt; S1,
             std::input_iterator I2, std::sentinel_for&lt;I2&gt; S2,
             std::weakly_incrementable O, class Comp = ranges::less,
             class Proj1 = std::identity, class Proj2 = std::identity&gt;
    requires std::mergeable&lt;I1, I2, O, Comp, Proj1, Proj2&gt;
    constexpr ranges::set_union_result&lt;I1, I2, O&gt;
        operator()(I1 first1, S1 last1, I2 first2, S2 last2,
                   O result, Comp comp = {},
                   Proj1 proj1 = {}, Proj2 proj2 = {}) const
    {
        for (; !(first1 == last1 or first2 == last2); ++result)
        {
            if (std::invoke(comp, std::invoke(proj1, *first1),
                                  std::invoke(proj2, *first2)))
            {
                *result = *first1;
                ++first1;
            }
            else if (std::invoke(comp, std::invoke(proj2, *first2),
                                       std::invoke(proj1, *first1)))
            {
                *result = *first2;
                ++first2;
            }
            else
            {
                *result = *first1;
                ++first1;
                ++first2;
            }
        }
        auto res1 = ranges::copy(std::move(first1), std::move(last1), std::move(result));
        auto res2 = ranges::copy(std::move(first2), std::move(last2), std::move(res1.out));
        return {std::move(res1.in), std::move(res2.in), std::move(res2.out)};
    }

    template&lt;ranges::input_range R1, ranges::input_range R2,
             std::weakly_incrementable O, class Comp = ranges::less,
             class Proj1 = std::identity, class Proj2 = std::identity&gt;
    requires std::mergeable&lt;ranges::iterator_t&lt;R1&gt;, ranges::iterator_t&lt;R2&gt;,
                            O, Comp, Proj1, Proj2&gt;
    constexpr ranges::set_union_result&lt;ranges::borrowed_iterator_t&lt;R1&gt;,
                                       ranges::borrowed_iterator_t&lt;R2&gt;, O&gt;
        operator()(R1&amp;&amp; r1, R2&amp;&amp; r2, O result, Comp comp = {},
                   Proj1 proj1 = {}, Proj2 proj2 = {}) const
    {
        return (*this)(ranges::begin(r1), ranges::end(r1),
                       ranges::begin(r2), ranges::end(r2),
                       std::move(result), std::move(comp),
                       std::move(proj1), std::move(proj2));
    }
};

inline constexpr set_union_fn set_union {};
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

void print(const auto&amp; in1, const auto&amp; in2, auto first, auto last)
{
    std::cout &lt;&lt; "{ ";
    for (const auto&amp; e : in1)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; "} ∪ { ";
    for (const auto&amp; e : in2)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; "} =\n{ ";
    while (!(first == last))
        std::cout &lt;&lt; *first++ &lt;&lt; ' ';
    std::cout &lt;&lt; "}\n\n";
}

int main()
{
    std::vector&lt;int&gt; in1, in2, out;

    in1 = {1, 2, 3, 4, 5};
    in2 = {      3, 4, 5, 6, 7};
    out.resize(in1.size() + in2.size());
    const auto ret = std::ranges::set_union(in1, in2, out.begin());
    print(in1, in2, out.begin(), ret.out);

    in1 = {1, 2, 3, 4, 5, 5, 5};
    in2 = {      3, 4, 5, 6, 7};
    out.clear();
    out.reserve(in1.size() + in2.size());
    std::ranges::set_union(in1, in2, std::back_inserter(out));
    print(in1, in2, out.cbegin(), out.cend());
}
|output=
{ 1 2 3 4 5 } ∪ { 3 4 5 6 7 } =
{ 1 2 3 4 5 6 7 }

{ 1 2 3 4 5 5 5 } ∪ { 3 4 5 6 7 } =
{ 1 2 3 4 5 5 5 6 7 }
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc set_difference}}
{{dsc inc|cpp/algorithm/ranges/dsc set_intersection}}
{{dsc inc|cpp/algorithm/ranges/dsc set_symmetric_difference}}
{{dsc inc|cpp/algorithm/ranges/dsc merge}}
{{dsc inc|cpp/algorithm/ranges/dsc includes}}
{{dsc inc|cpp/algorithm/dsc set_union}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
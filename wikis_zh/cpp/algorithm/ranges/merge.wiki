{{cpp/ranges/title|merge|merge_result}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|调用签名}}
{{dcl|num=1|since=c++20|1=
template&lt; std::input_iterator I1, std::sentinel_for&lt;I1&gt; S1,
          std::input_iterator I2, std::sentinel_for&lt;I2&gt; S2,
          std::weakly_incrementable O, class Comp = ranges::less,
          class Proj1 = std::identity, class Proj2 = std::identity &gt;
requires std::mergeable&lt;I1, I2, O, Comp, Proj1, Proj2&gt;
constexpr merge_result&lt;I1, I2, O&gt;
    merge( I1 first1, S1 last1, I2 first2, S2 last2, O result, Comp comp = {},
           Proj1 proj1 = {}, Proj2 proj2 = {} );
}}
{{dcl|num=2|since=c++20|1=
template&lt; ranges::input_range R1, ranges::input_range R2,
          std::weakly_incrementable O, class Comp = ranges::less,
          class Proj1 = std::identity, class Proj2 = std::identity &gt;
requires std::mergeable&lt;ranges::iterator_t&lt;R1&gt;, ranges::iterator_t&lt;R2&gt;,
                        O, Comp, Proj1, Proj2&gt;
constexpr merge_result&lt;ranges::borrowed_iterator_t&lt;R1&gt;,
                       ranges::borrowed_iterator_t&lt;R2&gt;, O&gt;
    merge( R1&amp;&amp; r1, R2&amp;&amp; r2, O result, Comp comp = {},
           Proj1 proj1 = {}, Proj2 proj2 = {} );
}}
{{dcl h|辅助类型}}
{{dcl|num=3|since=c++20|1=
template&lt; class I1, class I2, class O &gt;
using merge_result = ranges::in_in_out_result&lt;I1, I2, O&gt;;
}}
{{dcl end}}

将两个''有序''范围 {{range|[first1|last1}} 和 {{range|[first2|last2}} 归并为一个开始于 {{c|result}} 的''有序''范围。

如果对于指向序列的任何迭代器 {{tt|it}} 和使 {{tt|it + n}} 为指向该序列中的对象的有效迭代器的任何非负整数 {{tt|n}}，{{c|std::invoke(comp, std::invoke(proj2, *(it + n)), std::invoke(proj1, *it)))}} 求值均为 {{c|false}}，则该序列被称为关于 {{c|comp}} ''有序''。

@1@ 用给定的二元比较函数 {{c|comp}} 进行对象的比较。

@2@ 同 {{v|1}}，但是以 {{c|r1}} 为第一个范围并以 {{c|r2}} 为第二个范围, 如同以 {{c|ranges::begin(r1)}} 为 {{c|first1}}，以 {{c|ranges::end(r1)}} 为 {{c|last1}}，以 {{c|ranges::begin(r2)}} 为 {{c|first2}}，并以 {{c|ranges::end(r2)}} 为 {{c|last2}}。

若目标范围与任一输入范围重叠，则行为未定义（输入范围可以彼此重叠）。

这个归并函数是''稳定''的，意味着对于两个源范围中的等价对象，来自第一个范围的元素（保持其原顺序）将排在第二个范围当中的元素之前（保持其原顺序）。

{{cpp/ranges/niebloid}}

===参数===
{{par begin}}
{{par range|first1|last1|3=要合并的|range=第一个输入有序|sentinel=yes}}
{{par range|first2|last2|3=要合并的|range=第二个输入有序|sentinel=yes}}
{{par|result|输出范围的起始}}
{{par|comp|应用到投影后元素的比较器}}
{{par|proj1|应用到第一范围中元素的投影}}
{{par|proj2|应用到第二范围中元素的投影}}
{{par end}}

===返回值===
{{c|{last1, last2, result_last} }}，其中 {{c|result_last}} 为被构造的范围末尾。

===复杂度===
最多 {{c|N − 1}} 次比较和投影的应用，其中
{{c|1= N = ranges::distance(first1, last1) + ranges::distance(first2, last12)}}。

===注解===
此算法进行与 {{c|ranges::set_union}} 相似的任务。两者都使用两个有序范围产生一个包含两者的对象的有序范围。两个算法的不同之处在于在两个输入范围当中的比较等价的值的处理方法（可以参考{{named req|LessThanComparable}}上的注解）。如果任何相等的值出现了 {{c|n}} 次于第一个范围而 {{c|m}} 次于第二个，{{lc|ranges::merge}} 将会输出全部的 {{c|n+m}} 次出现，但是{{lc|ranges::set_union}} 只会输出 {{c|max(n, m)}} 次。所以 {{lc|ranges::merge}} 输出恰好 {{c|N}} 个数值而 {{lc|ranges::set_union}} 会输出更少。

===可能的实现===
{{eq fun| 1=
struct merge_fn
{
    template&lt;std::input_iterator I1, std::sentinel_for&lt;I1&gt; S1,
             std::input_iterator I2, std::sentinel_for&lt;I2&gt; S2,
             std::weakly_incrementable O, class Comp = ranges::less,
             class Proj1 = std::identity, class Proj2 = std::identity&gt;
    requires std::mergeable&lt;I1, I2, O, Comp, Proj1, Proj2&gt;
    constexpr ranges::merge_result&lt;I1, I2, O&gt;
        operator()(I1 first1, S1 last1, I2 first2, S2 last2, O result, Comp comp = {},
                   Proj1 proj1 = {}, Proj2 proj2 = {}) const
    {
        for (; !(first1 == last1 or first2 == last2); ++result)
        {
            if (std::invoke(comp, std::invoke(proj2, *first2), std::invoke(proj1, *first1)))
                *result = *first2, ++first2;
            else
                *result = *first1, ++first1;
        }
        auto ret1{ranges::copy(std::move(first1), std::move(last1), std::move(result))};
        auto ret2{ranges::copy(std::move(first2), std::move(last2), std::move(ret1.out))};
        return {std::move(ret1.in), std::move(ret2.in), std::move(ret2.out)};
    }

    template&lt;ranges::input_range R1, ranges::input_range R2, std::weakly_incrementable O,
             class Comp = ranges::less,
             class Proj1 = std::identity, class Proj2 = std::identity&gt;
    requires std::mergeable&lt;ranges::iterator_t&lt;R1&gt;, ranges::iterator_t&lt;R2&gt;,
                            O, Comp, Proj1, Proj2&gt;
    constexpr ranges::merge_result&lt;ranges::borrowed_iterator_t&lt;R1&gt;,
                                   ranges::borrowed_iterator_t&lt;R2&gt;, O&gt;
        operator()(R1&amp;&amp; r1, R2&amp;&amp; r2, O result, Comp comp = {},
                   Proj1 proj1 = {}, Proj2 proj2 = {}) const
    {
        return (*this)(ranges::begin(r1), ranges::end(r1),
                       ranges::begin(r2), ranges::end(r2),
                       std::move(result), std::move(comp),
                       std::move(proj1), std::move(proj2));
    }
};

inline constexpr merge_fn merge {};
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

void print(const auto&amp; in1, const auto&amp; in2, auto first, auto last)
{
    std::cout &lt;&lt; "{ ";
    for (const auto&amp; e : in1)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; "} +\n{ ";
    for (const auto&amp; e : in2)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; "} =\n{ ";
    while (!(first == last))
        std::cout &lt;&lt; *first++ &lt;&lt; ' ';
    std::cout &lt;&lt; "}\n\n";
}

int main()
{
    std::vector&lt;int&gt; in1, in2, out;

    in1 = {1, 2, 3, 4, 5};
    in2 = {3, 4, 5, 6, 7};
    out.resize(in1.size() + in2.size());
    const auto ret = std::ranges::merge(in1, in2, out.begin());
    print(in1, in2, out.begin(), ret.out);

    in1 = {1, 2, 3, 4, 5, 5, 5};
    in2 = {3, 4, 5, 6, 7};
    out.clear();
    out.reserve(in1.size() + in2.size());
    std::ranges::merge(in1, in2, std::back_inserter(out));
    print(in1, in2, out.cbegin(), out.cend());
}
|output=
{ 1 2 3 4 5 } +
{ 3 4 5 6 7 } =
{ 1 2 3 3 4 4 5 5 6 7 }

{ 1 2 3 4 5 5 5 } +
{ 3 4 5 6 7 } =
{ 1 2 3 3 4 4 5 5 5 5 6 7 }
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/ranges/dsc inplace_merge}}
{{dsc inc|cpp/algorithm/ranges/dsc is_sorted}}
{{dsc inc|cpp/algorithm/ranges/dsc set_union}}
{{dsc inc|cpp/algorithm/ranges/dsc sort}}
{{dsc inc|cpp/algorithm/ranges/dsc stable_sort}}
{{dsc inc|cpp/algorithm/dsc merge}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
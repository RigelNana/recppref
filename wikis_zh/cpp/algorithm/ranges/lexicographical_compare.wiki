{{cpp/ranges/title|lexicographical_compare}}
{{cpp/algorithm/ranges/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcl h|调用签名}}
{{dcl|num=1|since=c++20|1=
template&lt; std::input_iterator I1, std::sentinel_for&lt;I1&gt; S1,
          std::input_iterator I2, std::sentinel_for&lt;I2&gt; S2,
          class Proj1 = std::identity, class Proj2 = std::identity,
          std::indirect_strict_weak_order&lt;
              std::projected&lt;I1, Proj1&gt;,
              std::projected&lt;I2, Proj2&gt;&gt; Comp = ranges::less &gt;
constexpr bool
    lexicographical_compare( I1 first1, S1 last1, I2 first2, S2 last2,
                             Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {} );
}}
{{dcl|num=2|since=c++20|1=
template&lt; ranges::input_range R1, ranges::input_range R2,
          class Proj1 = std::identity, class Proj2 = std::identity,
          std::indirect_strict_weak_order&lt;
              std::projected&lt;ranges::iterator_t&lt;R1&gt;, Proj1&gt;,
              std::projected&lt;ranges::iterator_t&lt;R2&gt;, Proj2&gt;&gt; Comp = ranges::less &gt;
constexpr bool
    lexicographical_compare( R1&amp;&amp; r1, R2&amp;&amp; r2, Comp comp = {},
                             Proj1 proj1 = {}, Proj2 proj2 = {} );
}}
{{dcl end}}

检查第一范围 {{range|first1|last1}} 是否按字典序''小于''第二范围 {{range|first2|last2}}。

@1@ 用给定的二元比较函数 {{c|comp}} 比较元素。
@2@ 同 {{v|1}}，但以 {{c|r}} 为源范围，如同以 {{c|ranges::begin(r)}} 为 {{c|first}} 并以 {{c|ranges::end(r)}} 为 {{c|last}}。

字典序比较是拥有下列属性的操作：
* 按元素逐个比较两个范围。
* 首个不匹配元素定义范围按字典序''小于''或''大于''另一个。
* 若一个范围是另一个的前缀，则较短的范围按字典序''小于''另一个。
* 若两个范围拥有等价的元素与相同长度，则范围按字典序''相等''。
* 空范围按字典序''小于''任何非空范围。
* 两个空范围按字典序''相等''。

{{cpp/ranges/niebloid}}

===参数===
{{par begin}}
{{par range|first1|last1|要检验的|range=第一|sentinel=yes}}
{{par|r1|要检验的第一元素范围}}
{{par range|first2|last2|要检验的|range=第二|sentinel=yes}}
{{par|r2|要检验的第二元素范围}}
{{par|comp|应用到投影后元素的比较函数}}
{{par|proj1|应用到第一元素范围的投影}}
{{par|proj2|应用到第二元素范围的投影}}
{{par end}}

===返回值===
若第一范围按字典序''小于''第二范围则为 {{c|true}} 。

===复杂度===
至多应用 {{math|2&amp;middot;min(N1, N2)}} 次比较与对应的投影，其中 {{c|1=N1 = ranges::distance(first1, last1)}} 而 {{c|1=N2 = ranges::distance(first2, last2)}}。

===可能的实现===
{{eq fun|1=
struct lexicographical_compare_fn
{
    template&lt;std::input_iterator I1, std::sentinel_for&lt;I1&gt; S1,
             std::input_iterator I2, std::sentinel_for&lt;I2&gt; S2,
             class Proj1 = std::identity, class Proj2 = std::identity,
             std::indirect_strict_weak_order&lt;
                 std::projected&lt;I1, Proj1&gt;,
                 std::projected&lt;I2, Proj2&gt;&gt; Comp = ranges::less&gt;
    constexpr bool operator()(I1 first1, S1 last1, I2 first2, S2 last2,
                              Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {}) const
    {
        for (; (first1 != last1) &amp;&amp; (first2 != last2); ++first1, (void) ++first2)
        {
            if (std::invoke(comp, std::invoke(proj1, *first1), std::invoke(proj2, *first2)))
                return true;

            if (std::invoke(comp, std::invoke(proj2, *first2), std::invoke(proj1, *first1)))
                return false;
        }
        return (first1 == last1) &amp;&amp; (first2 != last2);
    }

    template&lt;ranges::input_range R1, ranges::input_range R2,
             class Proj1 = std::identity, class Proj2 = std::identity,
             std::indirect_strict_weak_order&lt;
                 std::projected&lt;ranges::iterator_t&lt;R1&gt;, Proj1&gt;,
                 std::projected&lt;ranges::iterator_t&lt;R2&gt;, Proj2&gt;&gt; Comp = ranges::less&gt;
    constexpr bool operator()(R1&amp;&amp; r1, R2&amp;&amp; r2, Comp comp = {},
                              Proj1 proj1 = {}, Proj2 proj2 = {}) const
    {
        return (*this)(ranges::begin(r1), ranges::end(r1),
                       ranges::begin(r2), ranges::end(r2),
                       std::ref(comp), std::ref(proj1), std::ref(proj2));
    }
};

inline constexpr lexicographical_compare_fn lexicographical_compare;
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;random&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;char&gt; v1 {'a', 'b', 'c', 'd'};
    std::vector&lt;char&gt; v2 {'a', 'b', 'c', 'd'};

    namespace ranges = std::ranges;
    auto os = std::ostream_iterator&lt;char&gt;(std::cout, " ");

    std::mt19937 g {std::random_device {}()};
    while (not ranges::lexicographical_compare(v1, v2))
    {
        ranges::copy(v1, os);
        std::cout &lt;&lt; "&gt;= ";
        ranges::copy(v2, os);
        std::cout &lt;&lt; '\n';
 
        ranges::shuffle(v1, g);
        ranges::shuffle(v2, g);
    }
 
    ranges::copy(v1, os);
    std::cout &lt;&lt; "&lt;  ";
    ranges::copy(v2, os);
    std::cout &lt;&lt; '\n';
}
|p=true
|output=
a b c d &gt;= a b c d
d a b c &gt;= c b d a
b d a c &gt;= a d c b
a c d b &lt;  c d a b
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/algorithm/ranges/dsc equal}}
{{dsc inc | cpp/algorithm/dsc lexicographical_compare}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|minmax_element}}
{{cpp/algorithm/navbar}}
{{dcl begin}}
{{dcl header|algorithm}}
{{dcla|num=1|since=c++11|notes={{mark constexpr since c++17}}|
template&lt; class ForwardIt &gt;
std::pair&lt;ForwardIt, ForwardIt&gt;
    minmax_element( ForwardIt first, ForwardIt last );
}}
{{dcl|num=2|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt &gt;
std::pair&lt;ForwardIt, ForwardIt&gt;
    minmax_element( ExecutionPolicy&amp;&amp; policy,
                    ForwardIt first, ForwardIt last );
}}
{{dcla|num=3|since=c++11|notes={{mark constexpr since c++17}}|
template&lt; class ForwardIt, class Compare &gt;
std::pair&lt;ForwardIt, ForwardIt&gt;
    minmax_element( ForwardIt first, ForwardIt last, Compare comp );
}}
{{dcl|num=4|since=c++17|
template&lt; class ExecutionPolicy, class ForwardIt, class Compare &gt;
std::pair&lt;ForwardIt, ForwardIt&gt;
    minmax_element( ExecutionPolicy&amp;&amp; policy,
                    ForwardIt first, ForwardIt last, Compare comp );
}}
{{dcl end}}

寻找范围 {{range|first|last}} 中最小和最大的元素。

@1@ 用 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 比较元素。

@3@ 用比较函数 {{c|comp}} 比较元素。

@2,4@ 同 {{v|1,3}}，但按照 {{c|policy}} 执行。
@@ {{cpp/algorithm/parallel overload precondition|plural=yes}}

===参数===
{{par begin}}
{{par range|3=要检验的}}
{{par exec pol}}
{{par cmp|cmp|p1=ForwardIt}}
{{par hreq}}
{{par req named|ForwardIt|ForwardIterator}}
{{par end}}

===返回值===
以指向最小元素的迭代器为第一元素，以指向最大元素的迭代器为第二元素的 pair。范围为空时返回 {{c|std::make_pair(first, first)}}。如果多个元素等价于最小元素，那么返回指向首个这种元素的迭代器。如果多个元素等价于最大元素，那么返回指向最后一个这种元素的迭代器。

===复杂度===
给定 {{mathjax-or|\(\scriptsize N\)|N}} 为 {{c|std::distance(first, last)}}：

@1,2@ 最多应用 {{mathjax-or|\(\scriptsize \max(\left\lfloor \frac{3}{2}(N-1) \right\rfloor, 0)\)|max(⌊{{mfrac|3|2}}(N-1)⌋,0)}} 次 {{rev inl|until=c++20|{{c/core|operator&lt;}}}}{{rev inl|since=c++20|{{c|std::less{}&lt;!----&gt;}}}} 进行比较。

@3,4@ 最多应用 {{mathjax-or|\(\scriptsize \max(\left\lfloor \frac{3}{2}(N-1) \right\rfloor, 0)\)|max(⌊{{mfrac|3|2}}(N-1)⌋,0)}} 次比较函数 {{c|comp}}。

===异常===
{{cpp/algorithm/parallel exceptions reporting behavior|singular=no}}

===可能的实现===
{{eq impl
|title1=minmax_element|ver1=1|1=
template&lt;class ForwardIt&gt;
std::pair&lt;ForwardIt, ForwardIt&gt;
    minmax_element(ForwardIt first, ForwardIt last)
{
    using value_type = typename std::iterator_traits&lt;ForwardIt&gt;::value_type;
    return std::minmax_element(first, last, std::less&lt;value_type&gt;());
}
|title2=minmax_element|ver2=3|2=
template&lt;class ForwardIt, class Compare&gt;
std::pair&lt;ForwardIt, ForwardIt&gt;
    minmax_element(ForwardIt first, ForwardIt last, Compare comp)
{
    auto min = first, max = first;
    
    if (first == last {{!!}} ++first == last)
        return {min, max};
    
    if (comp(*first, *min))
        min = first;
    else
        max = first;
    
    while (++first != last)
    {
        auto i = first;
        if (++first == last)
        {
            if (comp(*i, *min))
                min = i;
            else if (!(comp(*i, *max)))
                max = i;
            break;
        }
        else
        {
            if (comp(*first, *i))
            {
                if (comp(*first, *min))
                    min = first;
                if (!(comp(*i, *max)))
                    max = i;
            }
            else
            {
                if (comp(*i, *min))
                    min = i;
                if (!(comp(*first, *max)))
                    max = first;
            }
        }
    }
    return {min, max};
}
}}

===注解===
此算法不仅在效率上与 {{c|std::make_pair(std::min_element(), std::max_element())}} 不同，而且此算法寻找''最后''{{sep}}的最大元素，而 {{lc|std::max_element}} 寻找''首个''{{sep}}最大元素。

===示例===
{{example
|
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
 
int main()
{
    const auto v = {3, 9, 1, 4, 2, 5, 9};
    const auto [min, max] = std::minmax_element(begin(v), end(v));

    std::cout &lt;&lt; "min = " &lt;&lt; *min &lt;&lt; ", max = " &lt;&lt; *max &lt;&lt; '\n';
}
|output=
min = 1, max = 9
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc min_element}}
{{dsc inc|cpp/algorithm/dsc max_element}}
{{dsc inc|cpp/algorithm/ranges/dsc minmax_element}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
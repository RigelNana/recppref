{{cpp/keyword/title|{{tt|short}}}}
{{cpp/keyword/navbar}}

===用法===
* [[cpp/language/types#修饰符|{{tt|short}} 类型修饰符]]

===示例===
{{example
|code=
#include &lt;climits&gt;
#include &lt;concepts&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;

static_assert(sizeof(short) &gt;= 16 / CHAR_BIT);
static_assert(sizeof(unsigned short) &gt;= 16 / CHAR_BIT);
static_assert(std::numeric_limits&lt;short&gt;::min() &lt;= -32'768); //'
static_assert(std::numeric_limits&lt;short&gt;::max() &gt;= 32'767); //'
static_assert(std::numeric_limits&lt;unsigned short&gt;::max() &gt;= 65'535u); //'

// 概念从 C++20 起可用
static_assert(std::integral&lt;short&gt; and std::integral&lt;unsigned short&gt;);

template &lt;typename T, typename... Ts&gt;
concept all_same = (... and std::same_as &lt;T, Ts&gt;);

static_assert(all_same&lt;short, short int, signed short, signed short int&gt;);
static_assert(all_same&lt;unsigned short, unsigned short int&gt;);

#define OUT(...) std::cout &lt;&lt; #__VA_ARGS__ &lt;&lt; " = " &lt;&lt; __VA_ARGS__ &lt;&lt; '\n'

int main()
{
    OUT(sizeof(short));
    OUT(sizeof(unsigned short));
    OUT(std::numeric_limits&lt;short&gt;::min());
    OUT(std::numeric_limits&lt;short&gt;::max());
    OUT(std::numeric_limits&lt;unsigned short&gt;::max());
}

#undef OUT
|p=true
|output=
sizeof(short) = 2
sizeof(unsigned short) = 2
std::numeric_limits&lt;short&gt;::min() = -32768
std::numeric_limits&lt;short&gt;::max() = 32767
std::numeric_limits&lt;unsigned short&gt;::max() = 65535
}}

===参阅===
{{cpp/keywords/fundamental types list}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/keyword/title|{{tt|long}}}}
{{cpp/keyword/navbar}}

===用法===
* [[cpp/language/types#修饰符|{{tt|long}} 类型修饰符]]

===示例===
{{example
|code=
#include &lt;climits&gt;
#include &lt;concepts&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;locale&gt;

static_assert(
    sizeof(long) &gt;= 32 / CHAR_BIT &amp;&amp;
    sizeof(unsigned long) &gt;= 32 / CHAR_BIT &amp;&amp;
    std::numeric_limits&lt;long&gt;::min() &lt;= -2'147'483'647l - 1 &amp;&amp; //'
    std::numeric_limits&lt;long&gt;::max() &gt;= 2'147'483'647l &amp;&amp; //'
    std::numeric_limits&lt;unsigned long&gt;::max() &gt;= 4'294'967'295ul); //'

// 'long long' 和 'unsigned long long' 从 C++11 起可用
static_assert(
    sizeof(long long) &gt;= 64 / CHAR_BIT &amp;&amp;
    sizeof(unsigned long long) &gt;= 64 / CHAR_BIT &amp;&amp;
    std::numeric_limits&lt;long long&gt;::min() &lt;= -9'223'372'036'854'775'807ll - 1 &amp;&amp;
    std::numeric_limits&lt;long long&gt;::max() &gt;= 9'223'372'036'854'775'807ll &amp;&amp;
    std::numeric_limits&lt;unsigned long long&gt;::max() &gt;= 18'446'744'073'709'551'615ull);

// 概念从 C++20 起可用
static_assert(
    std::integral&lt;long&gt; &amp;&amp;
    std::integral&lt;long long&gt; &amp;&amp;
    std::integral&lt;unsigned long&gt; &amp;&amp;
    std::integral&lt;unsigned long long&gt; &amp;&amp;
    std::floating_point&lt;long double&gt;);
// 注意 'long' 不能修饰 'float'

static_assert(
    std::same_as&lt;decltype(0l), signed long int&gt; &amp;&amp;
    std::same_as&lt;decltype(0ll), signed long long int&gt; &amp;&amp;
    std::same_as&lt;decltype(0ul), unsigned long int&gt; &amp;&amp;
    std::same_as&lt;decltype(0ull), unsigned long long int&gt; &amp;&amp;
    std::same_as&lt;decltype(0.l), long double&gt;);

template &lt;typename T, typename... Ts&gt;
concept all_same = (... and std::same_as &lt;T, Ts&gt;);

static_assert(
    all_same&lt;long, long int, signed long, signed long int&gt; &amp;&amp;
    all_same&lt;unsigned long, unsigned long int&gt; &amp;&amp;
    all_same&lt;long long, long long int, signed long long, signed long long int&gt; &amp;&amp;
    all_same&lt;unsigned long long, unsigned long long int&gt;);

#define OUT(...) std::cout &lt;&lt; #__VA_ARGS__ &lt;&lt; " = " &lt;&lt; __VA_ARGS__ &lt;&lt; '\n'

int main()
{
    std::cout.imbue(std::locale("en_US.UTF-8"));

    OUT(sizeof(long));
    OUT(std::numeric_limits&lt;long&gt;::min());
    OUT(std::numeric_limits&lt;long&gt;::max());
    OUT(std::numeric_limits&lt;unsigned long&gt;::max());

    OUT(sizeof(long long));
    OUT(std::numeric_limits&lt;long long&gt;::min());
    OUT(std::numeric_limits&lt;long long&gt;::max());
    OUT(std::numeric_limits&lt;unsigned long long&gt;::max());
}

#undef OUT
|p=true
|output=
sizeof(long) = 8
std::numeric_limits&lt;long&gt;::min() = -9,223,372,036,854,775,808
std::numeric_limits&lt;long&gt;::max() = 9,223,372,036,854,775,807
std::numeric_limits&lt;unsigned long&gt;::max() = 18,446,744,073,709,551,615
sizeof(long long) = 8
std::numeric_limits&lt;long long&gt;::min() = -9,223,372,036,854,775,808
std::numeric_limits&lt;long long&gt;::max() = 9,223,372,036,854,775,807
std::numeric_limits&lt;unsigned long long&gt;::max() = 18,446,744,073,709,551,615
}}

===参阅===
{{cpp/keywords/fundamental types list}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
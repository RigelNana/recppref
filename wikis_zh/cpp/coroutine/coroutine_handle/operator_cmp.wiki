{{title|1=operator==, operator&lt;=&gt;&lt;small&gt;(std::coroutine_handle)&lt;/small&gt;}}
{{cpp/coroutine/coroutine_handle/navbar}}
{{dcl begin}}
{{dcl header|coroutine}}
{{dcl|num=1|since=c++20|1=
constexpr bool
    operator==( std::coroutine_handle&lt;&gt; x, std::coroutine_handle&lt;&gt; y ) noexcept;
}}
{{dcl|num=2|since=c++20|1=
constexpr std::strong_ordering
    operator&lt;=&gt;( std::coroutine_handle&lt;&gt; x, std::coroutine_handle&lt;&gt; y ) noexcept;
}}
{{dcl end}}

按照底层地址比较两个 {{c|std::coroutine_handle&lt;&gt;}} 值 {{c|x}} 与 {{c|y}}。

{{cpp/note synthesized compare}}

===参数===
{{par begin}}
{{par | x, y | 要比较的 {{c|std::coroutine_handle&lt;&gt;}} 值}}
{{par end}}

===返回值===
@1@ {{c|1=x.address() == y.address()}}
@2@ {{c|std::compare_three_way{}(x.address(), y.address())}}

===注解===
尽管这些运算符仅对 {{c|std::coroutine_handle&lt;&gt;}} 重载，{{lc|std::coroutine_handle}} 的其他特化亦可进行相等比较及三路比较，因为它们可隐式转换成 {{c|std::coroutine_handle&lt;&gt;}}。

===示例===
{{example}}

{{langlinks|en|es|ja|ru}}
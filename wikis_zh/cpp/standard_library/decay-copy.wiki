{{title|''decay-copy''}}
{{cpp/standard library/navbar}}
{{dcl begin}}
{{dcl rev multi|since1=c++11|notes1={{mark expos}}|dcl1=
template&lt; class T &gt;
typename std::decay&lt;T&gt;::type decay-copy( T&amp;&amp; value );
|since2=c++20|notes2={{mark expos}}|dcl2=
template&lt; class T &gt;
    requires std::convertible_to&lt;T, std::decay_t&lt;T&gt;&gt;
constexpr std::decay_t&lt;T&gt; decay-copy( T&amp;&amp; value )
    noexcept(std::is_nothrow_convertible_v&lt;T, std::decay_t&lt;T&gt;&gt;);
}}
{{dcl end}}

返回（隐式转换到退化后类型的）{{c|std::forward&lt;T&gt;(value)}}，它是 {{c|value}} 退化后的纯右值副本。

===参数===
{{par begin}}
{{par|value|要复制的值}}
{{par end}}

===返回值===
{{c|value}} 退化后的副本，它是纯右值。

===注解===
{{tti|decay-copy}} 由 {{lwg|929}} 的解决方案引入。它首先用于[[cpp/thread|并发支持库]]以确保实参在按值传递时会退化，后续用于[[cpp/ranges|范围库]]。

C++23 中引入的语言特性 {{ltt|cpp/language/explicit cast|auto}}{{c/core|(x)}} 同样允许创建作为纯右值的退化后副本。两者唯一的区别是 {{tti|decay-copy}} 始终会[[cpp/language/implicit conversion#临时量实质化|实质化]] {{c|value}} 并产生副本，而 {{c|auto(expr)}} 在 {{c|expr}} 为纯右值时是空操作。

从 C++23 开始，标准库中除 {{ltt|cpp/ranges/all_view|views::all}}、{{l2tt|cpp/ranges/take_view}} 和 {{l2tt|cpp/ranges/drop_view}} 以外所有用到 {{tti|decay-copy}} 的地方（见下文）都替换成了 {{c/core|auto(x)}}。

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3724|std=C++20|before={{tti|decay-copy}} 没有受到约束|after=补充约束}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/thread/thread/dsc constructor}}
{{dsc inc|cpp/thread/jthread/dsc constructor}}
{{dsc inc|cpp/thread/dsc async}}
{{dsc inc|cpp/ranges/dsc begin}}
{{dsc inc|cpp/ranges/dsc end}}
{{dsc inc|cpp/ranges/dsc rbegin}}
{{dsc inc|cpp/ranges/dsc rend}}
{{dsc inc|cpp/ranges/dsc size}}
{{dsc inc|cpp/ranges/dsc data}}
{{dsc inc|cpp/ranges/dsc all_view}}
{{dsc inc|cpp/ranges/dsc take_view}}
{{dsc inc|cpp/ranges/dsc drop_view}}
{{dsc end}}

{{langlinks|ar|de|en|es|fr|it|ja|pt|ru}}
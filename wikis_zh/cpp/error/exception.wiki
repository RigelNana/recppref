{{cpp/title|exception}}
{{cpp/error/exception/navbar}}
{{ddcl|header=exception|
class exception;
}}

提供一致的接口，以通过 [[cpp/language/throw|throw 表达式]]处理错误。

标准库所生成的所有异常都继承自 {{tt|std::exception}}。

{{rrev|since=c++26|
{{tt|std::exception}} 的所有成员函数均为 {{c/core|constexpr}}。
}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/error/exception/exception|构造异常对象}}
{{dsc inc|cpp/error/exception/dsc destructor}}
{{dsc inc|1=cpp/error/exception/dsc operator=}}
{{dsc inc|cpp/error/exception/dsc what}}
{{dsc end}}

===标准异常要求===
派生于 {{tt|std::exception}} 的每个标准库类 {{tt|T}} 都必须具有以下可公开访问的成员函数，这些成员函数{{rev inl|until=c++11|不能因为异常退出}}{{rev inl|since=c++11|都必须有[[cpp/language/noexcept spec|不抛出的异常说明]]}}：
* [[cpp/language/default constructor|默认构造函数]]（除非提供了其他构造函数）
* [[cpp/language/copy constructor|复制构造函数]]
* [[cpp/language/copy assignment|复制赋值运算符]]

复制构造函数和复制赋值运算符满足以下后置条件：
* 如果两个对象 {{c|lhs}} 和 {{c|rhs}} 都具有动态类型 {{tt|T}}，并且 {{c|lhs}} 是 {{c|rhs}} 的副本，那么 {{c|std::strcmp(lhs.what(), rhs.what())}} 等于 {{c|0}}。

每个这种类 {{tt|T}} 的成员函数 {{tt|what()}} 都满足 {{lc|std::exception::what()}} 所受到的制约。

===标准异常===
*{{ltt|cpp/error/logic_error}}
:*{{ltt|cpp/error/invalid_argument}}
:*{{ltt|cpp/error/domain_error}}
:*{{ltt|cpp/error/length_error}}
:*{{ltt|cpp/error/out_of_range}}
:*{{ltt|cpp/thread/future_error}} {{mark since c++11}}
*{{ltt|cpp/error/runtime_error}}
:*{{ltt|cpp/error/range_error}}
:*{{ltt|cpp/error/overflow_error}}
:*{{ltt|cpp/error/underflow_error}}
:*{{ltt|cpp/regex/regex_error}} {{mark since c++11}}
:*{{ltt|cpp/error/system_error}} {{mark since c++11}}
::*{{l2tt|cpp/io/ios_base/failure}} {{mark since c++11}}
::*{{l2tt|cpp/filesystem/filesystem_error}} {{mark since c++17}}
:*{{ltt|cpp/error/tx_exception}} {{mark since tm ts}}
:*{{ltt|cpp/chrono/nonexistent_local_time}} {{mark since c++20}}
:*{{ltt|cpp/chrono/ambiguous_local_time}} {{mark since c++20}}
:*{{ltt|cpp/utility/format/format_error}} {{mark since c++20}}
*{{ltt|cpp/types/bad_typeid}}
*{{ltt|cpp/types/bad_cast}}
:*{{ltt|cpp/utility/any/bad_any_cast}} {{mark since c++17}}
*{{ltt|cpp/utility/optional/bad_optional_access}} {{mark since c++17}}
*{{ltt|cpp/utility/expected/bad_expected_access}} {{mark since c++23}}
*{{ltt|cpp/memory/bad_weak_ptr}} {{mark since c++11}}
*{{ltt|cpp/utility/functional/bad_function_call}} {{mark since c++11}}
*{{ltt|cpp/memory/new/bad_alloc}}
:*{{ltt|cpp/memory/new/bad_array_new_length}} {{mark since c++11}}
*{{ltt|cpp/error/bad_exception}}
*{{l2tt|cpp/io/ios_base/failure}} {{mark until c++11}}
*{{ltt|cpp/utility/variant/bad_variant_access}} {{mark since c++17}}

===注解===
{{ftm begin}}
{{ftm|__cpp_lib_constexpr_exceptions|value=202411L|std=C++26|{{c/core|constexpr}} 的异常类型}}
{{ftm end}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=471|std=C++98|before=对从 {{tt|std::exception}} 派生的标准库类没有任何要求|after=添加要求}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|overflow_error}}
{{cpp/error/navbar}}
{{ddcl|header=stdexcept|
class overflow_error;
}}

定义作为异常抛出的对象类型。它能用于报告算术上溢错误（即计算结果对目标类型过大的情形）。

{{rev begin}}
{{rev|until=c++11|
会抛出此异常的标准库组件只有 {{lc|std::bitset::to_ulong}}。
}}
{{rev|since=c++11|
会抛出此异常的标准库组件只有 {{lc|std::bitset::to_ulong}} 和 {{lc|std::bitset::to_ullong}}。
}}
{{rev end}}

标准库组件的数学函数不会抛出此异常（数学函数按 {{lc|math_errhandling}} 指定的方式报告上溢错误）。然而第三方库会使用它。例如，[http://www.boost.org/doc/libs/1_55_0/libs/math/doc/html/math_toolkit/error_handling.html boost.math] 在启用 {{tt|boost::math::policies::throw_on_error}}（默认设置）时会抛出 {{tt|std::overflow_error}}。

{{inheritance diagram/std-overflow_error}}

===成员函数===
{{cpp/error/exception/member of derived with message|overflow_error}}

{{cpp/error/runtime_error/inherit}}

{{cpp/error/exception/inherit}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;stdexcept&gt;
#include &lt;utility&gt;

template&lt;typename T, int N&gt;
    requires (N &gt; 0) /*...*/
class Stack
{
    int top_{-1};
    T data_[N];

public:
    [[nodiscard]] bool empty() const { return top_ == -1; }

    void push(T x)
    {
        if (top_ == N - 1)
            throw std::overflow_error("栈上溢出!");
        data_[++top_] = std::move(x);
    }

    void pop()
    {
        if (empty())
            throw std::underflow_error("栈下溢出!");
        --top_;
    }

    T const&amp; top() const
    {
        if (empty())
            throw std::overflow_error("栈为空!");
        return data_[top_];
    }
};

int main()
{
    Stack&lt;int, 4&gt; st;

    try
    {
        [[maybe_unused]] auto x = st.top();
    }
    catch (std::overflow_error const&amp; ex)
    {
        std::cout &lt;&lt; "1) 异常: " &lt;&lt; ex.what() &lt;&lt; '\n';
    }

    st.push(1337);
    while (!st.empty())
    	st.pop();

    try
    {
        st.pop();
    }
    catch (std::underflow_error const&amp; ex)
    {
        std::cout &lt;&lt; "2) 异常: " &lt;&lt; ex.what() &lt;&lt; '\n';
    }

    try
    {
        for (int i{}; i != 13; ++i)
            st.push(i);
    }
    catch (std::overflow_error const&amp; ex)
    {
        std::cout &lt;&lt; "3) 异常: " &lt;&lt; ex.what() &lt;&lt; '\n';
    }
}
|output=
1) 异常: 栈为空!
2) 异常: 栈下溢出!
3) 异常: 栈上溢出!
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=254|std=C++98|before=缺失了接受 {{c|const char*}} 的构造函数|after=已补充}}
{{dr list item|wg=lwg|dr=471|std=C++98|before={{tt|std::overflow_error}} 的复制的解释字符串由实现定义|after=它们与原 {{tt|std::overflow_error}} 对象的解释字符串相同}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
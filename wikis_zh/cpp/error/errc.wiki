{{cpp/title|errc}}
{{cpp/error/errc/navbar}}
{{ddcl|header=system_error|since=c++11|
enum class errc;
}}

有作用域枚举 {{tt|std::errc}} 定义对应于 POSIX 错误码的可移植错误条件。

===成员常量===
{{dsc begin}}
{{dsc hitem|名称|等价的 POSIX 错误}}
{{dsc|{{tt|address_family_not_supported}}|{{tt|EAFNOSUPPORT}}}}
{{dsc|{{tt|address_in_use}}|{{tt|EADDRINUSE}}}}
{{dsc|{{tt|address_not_available}}|{{tt|EADDRNOTAVAIL}}}}
{{dsc|{{tt|already_connected}}|{{tt|EISCONN}}}}
{{dsc|{{tt|argument_list_too_long}}|{{tt|E2BIG}}}}
{{dsc|{{tt|argument_out_of_domain}}|{{tt|EDOM}}}}
{{dsc|{{tt|bad_address}}|{{tt|EFAULT}}}}
{{dsc|{{tt|bad_file_descriptor}}|{{tt|EBADF}}}}
{{dsc|{{tt|bad_message}}|{{tt|EBADMSG}}}}
{{dsc|{{tt|broken_pipe}}|{{tt|EPIPE}}}}
{{dsc|{{tt|connection_aborted}}|{{tt|ECONNABORTED}}}}
{{dsc|{{tt|connection_already_in_progress}}|{{tt|EALREADY}}}}
{{dsc|{{tt|connection_refused}}|{{tt|ECONNREFUSED}}}}
{{dsc|{{tt|connection_reset}}|{{tt|ECONNRESET}}}}
{{dsc|{{tt|cross_device_link}}|{{tt|EXDEV}}}}
{{dsc|{{tt|destination_address_required}}|{{tt|EDESTADDRREQ}}}}
{{dsc|{{tt|device_or_resource_busy}}|{{tt|EBUSY}}}}
{{dsc|{{tt|directory_not_empty}}|{{tt|ENOTEMPTY}}}}
{{dsc|{{tt|executable_format_error}}|{{tt|ENOEXEC}}}}
{{dsc|{{tt|file_exists}}|{{tt|EEXIST}}}}
{{dsc|{{tt|file_too_large}}|{{tt|EFBIG}}}}
{{dsc|{{tt|filename_too_long}}|{{tt|ENAMETOOLONG}}}}
{{dsc|{{tt|function_not_supported}}|{{tt|ENOSYS}}}}
{{dsc|{{tt|host_unreachable}}|{{tt|EHOSTUNREACH}}}}
{{dsc|{{tt|identifier_removed}}|{{tt|EIDRM}}}}
{{dsc|{{tt|illegal_byte_sequence}}|{{tt|EILSEQ}}}}
{{dsc|{{tt|inappropriate_io_control_operation}}|{{tt|ENOTTY}}}}
{{dsc|{{tt|interrupted}}|{{tt|EINTR}}}}
{{dsc|{{tt|invalid_argument}}|{{tt|EINVAL}}}}
{{dsc|{{tt|invalid_seek}}|{{tt|ESPIPE}}}}
{{dsc|{{tt|io_error}}|{{tt|EIO}}}}
{{dsc|{{tt|is_a_directory}}|{{tt|EISDIR}}}}
{{dsc|{{tt|message_size}}|{{tt|EMSGSIZE}}}}
{{dsc|{{tt|network_down}}|{{tt|ENETDOWN}}}}
{{dsc|{{tt|network_reset}}|{{tt|ENETRESET}}}}
{{dsc|{{tt|network_unreachable}}|{{tt|ENETUNREACH}}}}
{{dsc|{{tt|no_buffer_space}}|{{tt|ENOBUFS}}}}
{{dsc|{{tt|no_child_process}}|{{tt|ECHILD}}}}
{{dsc|{{tt|no_link}}|{{tt|ENOLINK}}}}
{{dsc|{{tt|no_lock_available}}|{{tt|ENOLCK}}}}
{{dsc|{{tt|no_message_available}} {{mark deprecated}}|{{tt|ENODATA}}}}
{{dsc|{{tt|no_message}}|{{tt|ENOMSG}}}}
{{dsc|{{tt|no_protocol_option}}|{{tt|ENOPROTOOPT}}}}
{{dsc|{{tt|no_space_on_device}}|{{tt|ENOSPC}}}}
{{dsc|{{tt|no_stream_resources}} {{mark deprecated}}|{{tt|ENOSR}}}}
{{dsc|{{tt|no_such_device_or_address}}|{{tt|ENXIO}}}}
{{dsc|{{tt|no_such_device}}|{{tt|ENODEV}}}}
{{dsc|{{tt|no_such_file_or_directory}}|{{tt|ENOENT}}}}
{{dsc|{{tt|no_such_process}}|{{tt|ESRCH}}}}
{{dsc|{{tt|not_a_directory}}|{{tt|ENOTDIR}}}}
{{dsc|{{tt|not_a_socket}}|{{tt|ENOTSOCK}}}}
{{dsc|{{tt|not_a_stream}} {{mark deprecated}}|{{tt|ENOSTR}}}}
{{dsc|{{tt|not_connected}}|{{tt|ENOTCONN}}}}
{{dsc|{{tt|not_enough_memory}}|{{tt|ENOMEM}}}}
{{dsc|{{tt|not_supported}}|{{tt|ENOTSUP}}}}
{{dsc|{{tt|operation_canceled}}|{{tt|ECANCELED}}}}
{{dsc|{{tt|operation_in_progress}}|{{tt|EINPROGRESS}}}}
{{dsc|{{tt|operation_not_permitted}}|{{tt|EPERM}}}}
{{dsc|{{tt|operation_not_supported}}|{{tt|EOPNOTSUPP}}}}
{{dsc|{{tt|operation_would_block}}|{{tt|EWOULDBLOCK}}}}
{{dsc|{{tt|owner_dead}}|{{tt|EOWNERDEAD}}}}
{{dsc|{{tt|permission_denied}}|{{tt|EACCES}}}}
{{dsc|{{tt|protocol_error}}|{{tt|EPROTO}}}}
{{dsc|{{tt|protocol_not_supported}}|{{tt|EPROTONOSUPPORT}}}}
{{dsc|{{tt|read_only_file_system}}|{{tt|EROFS}}}}
{{dsc|{{tt|resource_deadlock_would_occur}}|{{tt|EDEADLK}}}}
{{dsc|{{tt|resource_unavailable_try_again}}|{{tt|EAGAIN}}}}
{{dsc|{{tt|result_out_of_range}}|{{tt|ERANGE}}}}
{{dsc|{{tt|state_not_recoverable}}|{{tt|ENOTRECOVERABLE}}}}
{{dsc|{{tt|stream_timeout}} {{mark deprecated}}|{{tt|ETIME}}}}
{{dsc|{{tt|text_file_busy}}|{{tt|ETXTBSY}}}}
{{dsc|{{tt|timed_out}}|{{tt|ETIMEDOUT}}}}
{{dsc|{{tt|too_many_files_open_in_system}}|{{tt|ENFILE}}}}
{{dsc|{{tt|too_many_files_open}}|{{tt|EMFILE}}}}
{{dsc|{{tt|too_many_links}}|{{tt|EMLINK}}}}
{{dsc|{{tt|too_many_symbolic_link_levels}}|{{tt|ELOOP}}}}
{{dsc|{{tt|value_too_large}}|{{tt|EOVERFLOW}}}}
{{dsc|{{tt|wrong_protocol_type}}|{{tt|EPROTOTYPE}}}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/error/errc/dsc make_error_code}}
{{dsc inc|cpp/error/errc/dsc make_error_condition}}
{{dsc end}}

===辅助类===
{{dsc begin}}
{{dsc inc|cpp/error/errc/dsc is_error_condition_enum}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;filesystem&gt;
#include &lt;fstream&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;system_error&gt;
#include &lt;thread&gt;

void print_error(const std::string&amp; details, std::error_code error_code)
{
    std::string value_name;
    if (error_code == std::errc::invalid_argument)
        value_name = "std::errc::invalid_argument";
    if (error_code == std::errc::no_such_file_or_directory)
        value_name = "std::errc::no_such_file_or_directory";
    if (error_code == std::errc::is_a_directory)
        value_name = "std::errc::is_a_directory";
    if (error_code == std::errc::permission_denied)
        value_name = "std::errc::permission_denied";

    std::cout &lt;&lt; details &lt;&lt; ":\n  "
              &lt;&lt; std::quoted(error_code.message())
              &lt;&lt; " (" &lt;&lt; value_name &lt;&lt; ")\n\n";
}

void print_errno(const std::string&amp; details, int errno_value = errno)
{
    print_error(details, std::make_error_code(std::errc(errno_value)));
}

int main()
{
    std::cout &lt;&lt; "脱离不是线程的线程...\n";
    try
    {
        std::thread().detach();
    }
    catch (const std::system_error&amp; e)
    {
        print_error("脱离空线程时报错", e.code());
    }

    std::cout &lt;&lt; "打开不存在的文件...\n";
    std::ifstream nofile{"nonexistent-file"};
    if (!nofile.is_open())
        print_errno("为读取打开不存在的文件时报错");

    std::cout &lt;&lt; "将目录当作文件进行读取...\n";
    std::filesystem::create_directory("dir");
    std::ifstream dir_stream{"dir"};
    [[maybe_unused]] char c = dir_stream.get();
    if (!dir_stream.good())
        print_errno("从目录读取数据时报错");

    std::cout &lt;&lt; "为写入打开只读文件...\n";
    std::fstream{"readonly-file", std::ios::out};
    std::filesystem::permissions("readonly-file", std::filesystem::perms::owner_read);
    std::fstream write_readonly("readonly-file", std::ios::out);
    if (!write_readonly.is_open())
        print_errno("为写入打开只读文件时报错");
}
|p=true
|output=
脱离不是线程的线程...
脱离空线程时报错:
  "Invalid argument" (std::errc::invalid_argument)

打开不存在的文件...
为读取打开不存在的文件时报错:
  "No such file or directory" (std::errc::no_such_file_or_directory)

将目录当作文件进行读取...
从目录读取数据时报错:
  "Is a directory" (std::errc::is_a_directory)

为写入打开只读文件...
为写入打开只读文件时报错:
  "Permission denied" (std::errc::permission_denied)
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3869|std=C++11|before=成员常量 {{tt|no_message_available}}、{{tt|no_stream_resources}}、&lt;br&gt;{{tt|not_a_stream}} 和 {{tt|stream_timeout}} 涉及了废弃的 POSIX STREAMS API&lt;ref&gt;尽管对应的 POSIX 错误码 ENODATA、ENOSR、ENOSTR 和 ETIME 在 POSIX 2017 才被标为“即将废弃”，但以前的 POSIX 标准也不要求必须实现 STREAMS API（因为流行的类 Unix 系统拒绝实现它）。&lt;/ref&gt;|after=弃用这些成员常量}}
{{dr list end}}
&lt;references/&gt;

===参阅===
{{dsc begin}}
{{dsc inc|cpp/error/dsc error_code}}
{{dsc inc|cpp/error/dsc error_condition}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|tx_exception}}
{{cpp/error/navbar}}
{{ddcl|header=stdexcept|since=tm_ts|
template&lt; class T &gt;
class tx_exception : public std::runtime_error;
}}

定义能用于取消并回滚关键词 {{ltt|cpp/language/transactional_memory|atomic_cancel}} 所初始化的原子事务的异常类型。

若 {{tt|T}} 非{{named req|TriviallyCopyable}}，则特化 {{tt|std::tx_exception&lt;T&gt;}} 的程序非良构。

===成员函数===
{{member|{{small|std::tx_exception::}}tx_exception|2=
{{dcl begin}}
{{dcl|num=1|since=tm_ts|
explicit tx_exception( T value ) transaction_safe;
}}
{{dcl|num=2|since=tm_ts|
tx_exception( T value, const std::string&amp; what_arg ) transaction_safe;
}}
{{dcl|num=3|since=tm_ts|
tx_exception( T value, const char* what_arg ) transaction_safe;
}}
{{dcl|num=4|since=tm_ts|
tx_exception( const tx_exception&amp; other ) transaction_safe noexcept;
}}
{{dcl end}}

@1-3@ 以 {{c|what_arg}} 为能通过 {{lc|what()}} 访问的解释字符串并以 {{c|value}} 为能通过 {{lc|get()}} 访问的对象构造异常对象。

@4@ 复制构造函数。若 {{c|*this}} 与 {{c|other}} 均拥有动态类型 {{tt|std::tx_exception&lt;T&gt;}} 则 {{c|1=std::strcmp(what(), other.what()) == 0}}。

===参数===
{{par begin}}
{{par | value |载荷对象}}
{{par | what_arg |解释字符串}}
{{par | other |要复制的另一字符串}}
{{par end}}

===异常===
@1-3@ 可能抛出由实现定义的异常。
}}

{{member|{{small|std::tx_exception::}}operator{{=}}|
{{dcl begin}}
{{dcl|since=tm_ts|1=
tx_exception&amp; operator=( const tx_exception&amp; other ) transaction_safe noexcept;
}}
{{dcl end}}

以 {{c|other}} 的内容赋值其内容。若 {{c|*this}} 与 {{c|other}} 均拥有动态类型 {{tt|std::tx_exception&lt;T&gt;}} 则赋值后 {{c|1=std::strcmp(what(), other.what()) == 0}}。

===参数===
{{par begin}}
{{par | other | 用以赋值的另一异常对象}}
{{par end}}

===返回值===
{{c|*this}}
}}

{{member|{{small|std::tx_exception::}}get|2=
{{dcl begin}}
{{dcl|since=tm_ts|
T get() const transaction_safe;
}}
{{dcl end}}

返回异常对象保有的载荷对象。

===异常===
可能抛出由实现定义的异常。
}}

{{member|{{small|std::tx_exception::}}what|
{{dcl begin}}
{{dcl|since=tm_ts|
virtual const char* what() const transaction_safe_dynamic noexcept;
}}
{{dcl end}}

返回解释字符串。

===参数===
（无）

===返回值===
指向拥有解释信息的空中止字符串的指针。
}}

{{cpp/error/runtime_error/inherit}}
{{cpp/error/exception/inherit}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
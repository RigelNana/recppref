{{cpp/error/exception/title|exception}}
{{cpp/error/exception/navbar}}
{{dcl begin}}
{{dcl rev multi|num=1|until1=c++11|dcl1=
exception() throw();
|notes2={{mark constexpr since c++26}}
|dcl2=
exception() noexcept;
}}
{{dcl rev multi|num=2|until1=c++11|dcl1=
exception( const exception&amp; other ) throw();
|notes2={{mark constexpr since c++26}}
|dcl2=
exception( const exception&amp; other ) noexcept;
}}
{{dcl end}}

构造新的异常对象。

@1@ 默认构造函数。{{lc|what()}} 返回实现定义的字符串。

@2@ 复制构造函数。以 {{c|other}} 的内容初始化它的内容。如果 {{c|*this}} 与 {{c|other}} 均拥有动态类型 {{tt|std::exception}}，那么 {{c|1=std::strcmp(what(), other.what()) == 0}}。

===参数===
{{par begin}}
{{par|other| 要赋值内容的另一异常}}
{{par end}}

===注解===
因为不允许 {{tt|std::exception}} 的复制操作抛出异常，所以当派生类（例如 {{lc|std::runtime_error}}）必须管理用户定义的诊断信息时，常将它实现为写时复制的字符串。

微软的实现包含了非标准的接收字符串的构造函数，因此可以允许直接抛出带有有意义的错误信息的实例。标准库中有最接近的等价行为的是 {{lc|std::runtime_error}} 和 {{lc|std::logic_error}}。

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=471|std=C++98|before=对异常副本的 {{lc|what()}} 没有任何要求|after=添加要求}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
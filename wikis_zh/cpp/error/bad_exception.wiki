{{cpp/title|bad_exception}}
{{cpp/error/bad_exception/navbar}}
{{ddcl|header=exception|
class bad_exception;
}}

{{tt|std::bad_exception}} 是 C++ 运行时在下列情况抛出的异常类型：

{{rev begin}}
{{rev|since=c++11|
* 若 {{lc|std::exception_ptr}} 存储被捕捉异常的副本，且被 {{lc|std::current_exception}} 捕捉的异常对象的复制构造函数抛出异常，则被捕捉的异常是 {{tt|std::bad_exception}} 的一个实例。
}}
{{rev|until=c++17|
* 若[[cpp/language/except spec|动态异常规定]]被违背且 {{lc|std::unexpected}} 抛出或重抛仍然违背异常规定的异常，但异常规定允许 {{tt|std::bad_exception}}，则抛出 {{tt|std::bad_exception}}。
}}
{{rev end}}

{{inheritance diagram/std-bad_exception}}

{{rrev|since=c++26|{{tt|std::bad_exception}} 的所有成员函数均为 {{c/core|constexpr}}。}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor | cpp/error/bad_exception/bad_exception | 构造 {{tt|bad_exception}} 对象}}
{{dsc mem fun | cpp/error/bad_exception/operator{{=}} | 复制该对象}}
{{dsc mem vfun | cpp/error/bad_exception/what | 返回解释性字符串}}
{{dsc end}}

{{cpp/error/exception/inherit}}

===注解===
{{ftm begin}}
{{ftm|__cpp_lib_constexpr_exceptions|value=202411L|std=C++26|{{c/core|constexpr}} 的异常类型}}
{{ftm end}}

===示例===
{{example
|仅可在 C++14 或更早的模式下编译（可能有警告）。
|code=
#include &lt;exception&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;

void my_unexp()
{
    throw;
}

void test()
    throw(std::bad_exception) // C++11 摒弃了动态异常说明
{
    throw std::runtime_error("test");
}

int main()
{
    std::set_unexpected(my_unexp); // C++11 中摒弃，C++17 中移除

    try
    {
        test();
    }
    catch (const std::bad_exception&amp; e)
    {
        std::cerr &lt;&lt; "捕获到 " &lt;&lt; e.what() &lt;&lt; '\n';
    }
}
|p=true
|output=
捕获到 std::bad_exception
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
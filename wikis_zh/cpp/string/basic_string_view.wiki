{{cpp/title|basic_string_view}}
{{cpp/string/basic_string_view/navbar}}
{{ddcl|header=string_view|since=c++17|1=
template&lt; 
    class CharT, 
    class Traits = std::char_traits&lt;CharT&gt; 
&gt; class basic_string_view;
}}

类模板 {{tt|basic_string_view}} 描述一个能指代 {{tt|CharT}} 的常量连续序列的对象，序列首元素在零位置。

对于 {{tt|basic_string_view}} {{c|str}}，当有操作使得范围 {{range|str.data()|str.data() + str.size()}} 中的指针失效时，到 {{c|str}} 的元素的指针、迭代器和引用也会失效。

{{rrev|since=c++23|
{{tt|std::basic_string_view}} 的每个特化都{{named req|TriviallyCopyable}}。
}}

提供数种对常用字符类型的 typedef：
{{dsc begin}}
{{dsc header|string_view}}
{{dsc hitem|类型|定义}}
{{dsc|{{lc|std::string_view}} {{mark c++17}}|{{co|std::basic_string_view&lt;char&gt;}}}}
{{dsc|{{lc|std::wstring_view}} {{mark c++17}}|{{co|std::basic_string_view&lt;wchar_t&gt;}}}}
{{dsc|{{lc|std::u8string_view}} {{mark c++20}}|{{co|std::basic_string_view&lt;char8_t&gt;}}}}
{{dsc|{{lc|std::u16string_view}} {{mark c++17}}|{{co|std::basic_string_view&lt;char16_t&gt;}}}}
{{dsc|{{lc|std::u32string_view}} {{mark c++17}}|{{co|std::basic_string_view&lt;char32_t&gt;}}}}
{{dsc end}}

===模板形参===
{{par begin}}
{{par|CharT|字符类型}}
{{par|Traits|指定字符类型上的操作的{{named req|CharTraits}}类。同 {{lc|std::basic_string}}，{{tt|Traits::char_type}} 必须指名相同的 {{tt|CharT}} 类型，否则程序非良构。}}
{{par end}}

===嵌套类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|traits_type}}|{{tt|Traits}}}}
{{dsc|{{tt|value_type}}|{{tt|CharT}}}}
{{dsc|{{tt|pointer}}|{{co|CharT*}}}}
{{dsc|{{tt|const_pointer}}|{{co|const CharT*}}}}
{{dsc|{{tt|reference}}|{{co|CharT&amp;}}}}
{{dsc|{{tt|const_reference}}|{{co|const CharT&amp;}}}}
{{dsc|{{tt|const_iterator}}|实现定义的常量{{named req|RandomAccessIterator}}&lt;br&gt;
{{rev begin|noborder=false}}
{{rev|until=c++20|和{{named req|ContiguousIterator}}}}
{{rev|since=c++20|、{{named req|ConstexprIterator}}和{{lconcept|contiguous_iterator}}}}
{{rev end}}
，它的 {{tt|value_type}} 是 {{tt|CharT}}}}
{{dsc|{{tt|iterator}}|{{tt|const_iterator}}}}
{{dsc|{{tt|const_reverse_iterator}}|{{co|std::reverse_iterator&lt;const_iterator&gt;}}}}
{{dsc|{{tt|reverse_iterator}}|{{tt|const_reverse_iterator}}}}
{{dsc|{{tt|size_type}}|{{lc|std::size_t}}}}
{{dsc|{{tt|difference_type}}|{{lc|std::ptrdiff_t}}}}
{{dsc end}}

注意：{{tt|iterator}} 与 {{tt|const_iterator}} 是同一类型，因为 {{tt|std::string_view}} 是到常量字符序列中的视图。

{{named req|Container}}的迭代器类型上的所有要求同样适用于 {{tt|std::basic_string_view}} 的 {{tt|iterator}} 和 {{tt|const_iterator}} 类型。

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|描述}}
{{dsc expos mem obj|spec={{tt|const_pointer}}|data_|id=data|指向底层序列的指针}}
{{dsc expos mem obj|spec={{tt|size_type}}|size_|id=size|字符个数}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc h2|构造函数和赋值}}
{{dsc inc|cpp/string/basic_string_view/dsc constructor}}
{{dsc inc|cpp/string/basic_string_view/dsc operator{{=}}}}

{{dsc h2|迭代器}}
{{dsc inc|cpp/string/basic_string_view/dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc end}}
{{dsc inc|cpp/string/basic_string_view/dsc rbegin}}
{{dsc inc|cpp/string/basic_string_view/dsc rend}}

{{dsc h2|元素访问}}
{{dsc inc|cpp/string/basic_string_view/dsc operator_at}}
{{dsc inc|cpp/string/basic_string_view/dsc at}}
{{dsc inc|cpp/string/basic_string_view/dsc front}}
{{dsc inc|cpp/string/basic_string_view/dsc back}}
{{dsc inc|cpp/string/basic_string_view/dsc data}}

{{dsc h2|容量}}
{{dsc inc|cpp/string/basic_string_view/dsc size}}
{{dsc inc|cpp/string/basic_string_view/dsc max_size}}
{{dsc inc|cpp/string/basic_string_view/dsc empty}}

{{dsc h2|修改器}}
{{dsc inc|cpp/string/basic_string_view/dsc remove_prefix}}
{{dsc inc|cpp/string/basic_string_view/dsc remove_suffix}}
{{dsc inc|cpp/string/basic_string_view/dsc swap}}

{{dsc h2|操作}}
{{dsc inc|cpp/string/basic_string_view/dsc copy}}
{{dsc inc|cpp/string/basic_string_view/dsc substr}}
{{dsc inc|cpp/string/basic_string_view/dsc compare}}
{{dsc inc|cpp/string/basic_string_view/dsc starts_with}}
{{dsc inc|cpp/string/basic_string_view/dsc ends_with}}
{{dsc inc|cpp/string/basic_string_view/dsc contains}}
{{dsc inc|cpp/string/basic_string_view/dsc find}}
{{dsc inc|cpp/string/basic_string_view/dsc rfind}}
{{dsc inc|cpp/string/basic_string_view/dsc find_first_of}}
{{dsc inc|cpp/string/basic_string_view/dsc find_last_of}}
{{dsc inc|cpp/string/basic_string_view/dsc find_first_not_of}}
{{dsc inc|cpp/string/basic_string_view/dsc find_last_not_of}}

{{dsc h1|常量}}
{{dsc inc|cpp/string/basic_string_view/dsc npos}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc operator cmp}}
{{dsc h2|输入/输出}}
{{dsc inc|cpp/string/basic_string_view/dsc operator ltlt}}
{{dsc end}}

===字面量===
{{dsc begin}}[[cpp/header/string_view#概要|std::literals::string_view_literals]]|inline=true}}
{{dsc inc|cpp/string/basic_string_view/dsc operator""sv}}
{{dsc end}}

===辅助类===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc hash}}
{{dsc end}}

===辅助模板===
{{ddcl|since=c++20|1=
template&lt;class CharT, class Traits&gt;
inline constexpr bool
    ranges::enable_borrowed_range&lt;std::basic_string_view&lt;CharT, Traits&gt;&gt; = true;
}}
{{ltt|cpp/ranges/borrowed_range|std::ranges::enable_borrowed_range}} 的此特化使得 {{tt|basic_string_view}} 满足 {{lconcept|borrowed_range}}。

{{ddcl|since=c++20|1=
template&lt;class CharT, class Traits&gt;
inline constexpr bool
    ranges::enable_view&lt;std::basic_string_view&lt;CharT, Traits&gt;&gt; = true;
}}

{{ltt|cpp/ranges/view|std::ranges::enable_view}} 的此特化使得 {{tt|std::basic_string_view}} 满足 {{lconcept|view}}。

{{rrev|since=c++20|
==={{rl|deduction guides|推导指引}}===
}}

===注解===
程序员负责确保 {{tt|std::basic_string_view}} 不在被指向数组的生存期外继续生存：
{{source|1=
std::string_view good{"a string literal"};
    // “好”的情况："good" 指向静态数组。
    // 字符串字面量位于持久数据存储中。

std::string_view bad{"a temporary string"s};
    // “不好”的情况："bad" 保有悬垂指针，由于 std::operator""s 所创建的
    // std::string 临时量将在语句末尾销毁。
}}

在 C++23 中引入的正式要求前，所有既存实现中 {{tt|std::basic_string_view}} 的特化已经为可平凡复制类型。

{{ftm begin|std=1|comment=1}}
{{ftm|std=C++17|value=201606L|__cpp_lib_string_view|rowspan="2"|[[#Top|{{tt|std::string_view}}]]}}
{{ftm|std=C++20|value=201803L|-|{{named req|ConstexprIterator}}}}
{{ftm|std=C++23|value=202011L|__cpp_lib_string_contains|{{rlt|contains}}}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string_view&gt;

int main()
{
    #define A "▀"
    #define B "▄"
    #define C "─"

    constexpr std::string_view blocks[]{A B C, B A C, A C B, B C A};

    for (int y{}, p{}; y != 8; ++y, p = ((p + 1) % 4))
    {
        for (char x{}; x != 29; ++x)
            std::cout &lt;&lt; blocks[p];
        std::cout &lt;&lt; '\n';
    }
}
|output=
▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─
▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─
▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄
▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀
▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─
▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─
▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄▀─▄
▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀▄─▀
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3203|std=C++17|before=只有从 {{tt|basic_string_view}} 的成员函数&lt;br&gt;返回的指针、迭代器和引用才会失效|after=所有到 {{tt|basic_string_view}} 的&lt;br&gt;元素的指针、迭代器和引用都会失效}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/dsc basic_string}}
{{dsc inc|cpp/string/basic_string/dsc operator+}}
{{dsc inc|cpp/container/dsc span}}
{{dsc inc|cpp/utility/dsc initializer_list}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
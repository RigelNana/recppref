{{cpp/title|wmemcpy}}
{{cpp/string/wide/navbar}}
{{ddcl|header=cwchar|
wchar_t* wmemcpy( wchar_t* dest, const wchar_t* src, std::size_t count );
}}

从 {{c|src}} 所指向的宽字符数组准确复制 {{c|count}} 个相继的宽字符到 {{c|dest}} 所指向的宽字符数组。若对象重叠，则行为未定义。若 {{c|count}} 为零，则函数不做任何事。

===参数===
{{par begin}}
{{par|dest|指向复制目标宽字符数组的指针}}
{{par|src|指向复制来源宽字符数组的指针}}
{{par|count|要复制的宽字符数}}
{{par end}}

===返回值===
{{c|dest}}

===注解===
此函数对字节字符串的类似版本是 {{lc|std::strncpy}}，而非 {{lc|std::strcpy}}。

此函数不考虑本地环境，而且完全不关心其所复制的 {{c|wchar_t}} 对象的值：空字符和非法字符亦被复制。

===示例===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cwchar&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;locale&gt;

int main(void)
{
    const wchar_t from1[] = L"नमस्ते";
    const wchar_t from2[] = L"Բարև";
    const std::size_t sz1 = std::size(from1);
    const std::size_t sz2 = std::size(from2);
    wchar_t to[sz1 + sz2];

    std::wmemcpy(to, from1, sz1); // 复制 from1，沿着其空终止符
    std::wmemcpy(to + sz1, from2, sz2); // 后附 from2，沿着其空终止符

    std::setlocale(LC_ALL, "en_US.utf8");
    std::cout.imbue(std::locale("en_US.utf8"));
    std::wcout &lt;&lt; "宽数组包含: ";
    for (std::size_t n = 0; n &lt; std::size(to); ++n)
        if (to[n])
            std::wcout &lt;&lt; to[n];
        else
            std::wcout &lt;&lt; L"\\0";
    std::wcout &lt;&lt; L'\n';
}
|p=true
|output=
宽数组包含: नमस्ते\0Բարև\0
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc strncpy}}
{{dsc inc|cpp/string/wide/dsc wmemmove}}
{{dsc see c|c/string/wide/wmemcpy}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
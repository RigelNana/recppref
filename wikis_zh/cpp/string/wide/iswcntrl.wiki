{{cpp/title|iswcntrl}}
{{cpp/string/wide/navbar}}
{{ddcl|header=cwctype|
int iswcntrl( std::wint_t ch );
}}

检查给定的宽字符是否为控制字符，即控制码 {{tt|0x00-0x1F}} 和 {{tt|0x7F}} 及任何限定于当前本地环境的控制字符。

{{cpp/string/wide/wint_t args}}

===参数===
{{par begin}}
{{par|ch|宽字符}}
{{par end}}

===返回值===
若宽字符为控制字符则为非零值，否则为零。

===注解===
ISO 30112 定义 POSIX 控制字符为 Unicode 字符 U+0000..U+001F、U+007F..U+009F、U+2028 及 U+2029（Unicode 类 Cc、Zl 及 Zp）。

===示例===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cwctype&gt;
#include &lt;iostream&gt;

int main()
{
    wchar_t c = L'\u2028'; // Unicode 字符“行分隔符”

    std::cout &lt;&lt; std::hex &lt;&lt; std::showbase &lt;&lt; std::boolalpha;
    std::cout &lt;&lt; "默认本地环境中, iswcntrl(" &lt;&lt; (std::wint_t)c &lt;&lt; ") = "
              &lt;&lt; (bool)std::iswcntrl(c) &lt;&lt; '\n';
    std::setlocale(LC_ALL, "en_US.utf8");
    std::cout &lt;&lt; "Unicode 本地环境中, iswcntrl(" &lt;&lt; (std::wint_t)c &lt;&lt; ") = "
              &lt;&lt; (bool)std::iswcntrl(c) &lt;&lt; '\n';
}
|output=
默认本地环境中, iswcntrl(0x2028) = false
Unicode 本地环境中, iswcntrl(0x2028) = true
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/locale/dsc iscntrl}}
{{dsc inc|cpp/string/byte/dsc iscntrl}}
{{dsc see c|c/string/wide/iswcntrl}}
{{dsc end}}

{{cpp/string/character classes}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
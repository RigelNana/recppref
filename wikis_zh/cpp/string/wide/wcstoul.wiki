{{cpp/title|wcstoul|wcstoull}}
{{cpp/string/wide/navbar}}
{{dcl begin}}
{{dcl header|cwchar}}
{{dcl| 
unsigned long      wcstoul ( const wchar_t* str, wchar_t** str_end, int base );
}}
{{dcl|since=c++11|
unsigned long long wcstoull( const wchar_t* str, wchar_t** str_end, int base );
}}
{{dcl end}}

转译 {{c|str}} 所指向的宽字符串中的无符号整数值。

{{cpp/string/cvt str2int base|base=base|u=true|w=true}}

函数设置 {{c|str_end}} 所指向的指针指向最后被转译字符的后一宽字符。若 {{c|str_end}} 为空指针，则忽略它。

===参数===
{{par begin}}
{{par|str|指向要转译的空终止宽字符串的指针}}
{{par|str_end|指向指向宽字符的指针的指针}}
{{par|base|被转译整数值的''底''}}
{{par end}}

===返回值===
成功时为对应 {{c|str}} 内容的整数值。若转换后的值落在对应返回类型的范围外，则出现值域错误并返回 {{lc|ULONG_MAX}} 和 {{lc|ULLONG_MAX}}。若不能进行转换，则返回 {{c|0}}。

===示例===
{{example
|code=
#include &lt;cwchar&gt;
#include &lt;errno.h&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    const wchar_t* p = L"10 200000000000000000000000000000 30 40";
    wchar_t* end;
    std::wcout &lt;&lt; "解析 L'" &lt;&lt; p &lt;&lt; "':\n";
    for (unsigned long i = std::wcstoul(p, &amp;end, 10);
         p != end;
         i = std::wcstoul(p, &amp;end, 10))
    {
        std::wcout &lt;&lt; '\'' &lt;&lt; std::wstring(p, end - p) &lt;&lt; "' -&gt; ";
        p = end;
        if (errno == ERANGE)
        {
            std::wcout &lt;&lt; "值域错误, 得到 ";
            errno = 0;
        }
        std::wcout &lt;&lt; i &lt;&lt; '\n';
    }
}
|p=true
|output=
解析 L'10 200000000000000000000000000000 30 40':
'10' -&gt; 10
' 200000000000000000000000000000' -&gt; 值域错误, 得到 18446744073709551615
' 30' -&gt; 30
' 40' -&gt; 40
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc strtoul}}
{{dsc inc|cpp/string/wide/dsc wcstol}}
{{dsc see c|c/string/wide/wcstoul|wcstoul|wcstoull}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|wmemmove}}
{{cpp/string/wide/navbar}}
{{ddcl|header=cwchar|
wchar_t* wmemmove( wchar_t* dest, const wchar_t* src, std::size_t count );
}}

准确地从 {{c|src}} 所指向的宽字符数组复制 {{c|count}} 个相继的宽字符到 {{c|dest}} 所指向的宽字符数组。

若 {{c|count}} 为零，则函数不做任何事。

数组可以重叠：如同复制宽字符到临时宽字符数组，再从临时数组到 {{c|dest}} 一般发生复制。

===参数===
{{par begin}}
{{par|dest|指向复制目标宽字符数组的指针}}
{{par|src|指向复制来源宽字符数组的指针}}
{{par|count|要复制的宽字符数}}
{{par end}}

===返回值===
返回 {{c|dest}} 的副本。

===注解===
此函数不考虑本地环境，并且完全不关心其所复制的 {{c|wchar_t}} 对象的值：空字符和非法字符亦会复制。

===示例===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cwchar&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;

int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    std::wcout.imbue(std::locale("en_US.utf8"));

    wchar_t str[] = L"αβγδεζηθικλμνξοπρστυφχψω";
    std::wcout &lt;&lt; str &lt;&lt; '\n';
    std::wmemmove(str + 4, str + 3, 3); // 从 [δεζ] 复制到 [εζη]
    std::wcout &lt;&lt; str &lt;&lt; '\n';
}
|p=true
|output=
αβγδεζηθικλμνξοπρστυφχψω
αβγδδεζθικλμνξοπρστυφχψω
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/wide/dsc wmemcpy}}
{{dsc inc|cpp/string/byte/dsc memmove}}
{{dsc inc|cpp/algorithm/dsc copy}}
{{dsc inc|cpp/algorithm/dsc copy_backward}}
{{dsc see c|c/string/wide/wmemmove}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
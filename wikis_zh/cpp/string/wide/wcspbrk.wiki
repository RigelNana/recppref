{{cpp/title|wcspbrk}}
{{cpp/string/wide/navbar}}
{{dcl begin}}
{{dcl header|cwchar}}
{{dcl|
const wchar_t* wcspbrk( const wchar_t* dest, const wchar_t* src );
}}
{{dcl|
      wchar_t* wcspbrk(       wchar_t* dest, const wchar_t* src );
}}
{{dcl end}}

在 {{c|dest}} 所指向的宽字符串中，寻找首个亦在 {{c|str}} 所指向的宽字符串中的字符。

===参数===
{{par begin}}
{{par|dest|指向要分析的空终止宽字符串的指针}}
{{par|src|指向含有待搜索字符的空终止宽字符串的指针}}
{{par end}}

===返回值===
指向 {{c|dest}} 中首个亦在 {{c|str}} 中的首个字符的指针，或若这种字符不存在则为空指针。

===注解===
名字代表“宽字符串指针打断 (wide character string pointer break)”，因为它返回指向首个分隔符（“打断”）的指针。

===示例===
{{example
|code=
#include &lt;cwchar&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
 
int main()
{
    const wchar_t* str = L"Hello world, friend of mine!";
    const wchar_t* sep = L" ,!";
 
    unsigned int cnt = 0;
    do
    {
        str = std::wcspbrk(str, sep); // 寻找分隔符
        std::wcout &lt;&lt; std::quoted(str) &lt;&lt; L'\n';
        if (str)
            str += std::wcsspn(str, sep); // 跳过分隔符
        ++cnt; // 增加词计数
    } while (str &amp;&amp; *str);
 
    std::wcout &lt;&lt; L"有 " &lt;&lt; cnt &lt;&lt; L" 个单词\n";
}
|output=
" world, friend of mine!"
", friend of mine!"
" of mine!"
" mine!"
"!"
有 5 个单词
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/wide/dsc wcscspn}}
{{dsc inc|cpp/string/wide/dsc wcschr}}
{{dsc inc|cpp/string/byte/dsc strpbrk}}
{{dsc see c|c/string/wide/wcspbrk}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
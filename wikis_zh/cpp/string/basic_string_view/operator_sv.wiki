{{cpp/title|n=literals::string_view_literals::|operator""sv}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl header|string_view}}
{{dcl|num=1|since=c++17|
constexpr std::string_view
    operator ""sv( const char* str, std::size_t len ) noexcept;
}}
{{dcl|num=2|since=c++20|
constexpr std::u8string_view
    operator ""sv( const char8_t* str, std::size_t len ) noexcept;
}}
{{dcl|num=3|since=c++17|
constexpr std::u16string_view
    operator ""sv( const char16_t* str, std::size_t len ) noexcept;
}}
{{dcl|num=4|since=c++17|
constexpr std::u32string_view
    operator ""sv( const char32_t* str, std::size_t len ) noexcept;
}}
{{dcl|num=5|since=c++17|
constexpr std::wstring_view
    operator ""sv( const wchar_t* str, std::size_t len ) noexcept;
}}
{{dcl end}}

从字符数组字面量组成字符串视图。

@1@ 返回 {{c|std::string_view{str, len} }}。
@2@ 返回 {{c|std::u8string_view{str, len} }}。
@3@ 返回 {{c|std::u16string_view{str, len} }}。
@4@ 返回 {{c|std::u32string_view{str, len} }}。
@5@ 返回 {{c|std::wstring_view{str, len} }}。

===参数===
{{par begin}}
{{par|str|指向原生字符数组字面量起始的指针}}
{{par|len|原生字符数组字面量的长度}}
{{par end}}

===返回值===
{{lc|std::basic_string_view}} 字面量。

===注解===
这些运算符声明于命名空间 {{tt|std::literals::string_view_literals}} 中，{{tt|literals}} 和 {{tt|string_view_literals}} 均为其中的内联命名空间。能以如下方式取得对这些运算符的访问：
* {{c|using namespace std::literals}}
* {{c|using namespace std::string_view_literals}}
* {{c|using namespace std::literals::string_view_literals}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string_view&gt;
#include &lt;typeinfo&gt;

void print_each_character(const std::string_view sw)
{
    for (char c : sw)
        std::cout &lt;&lt; (c == '\0' ? '@' : c);
    std::cout &lt;&lt; '\n';
}

int main()
{
    using namespace std::literals;

    std::string_view s1 = "abc\0\0def";
    std::string_view s2 = "abc\0\0def"sv;

    std::cout &lt;&lt; "s1.size(): " &lt;&lt; s1.size() &lt;&lt; "; s1: ";
    print_each_character(s1);
    std::cout &lt;&lt; "s2.size(): " &lt;&lt; s2.size() &lt;&lt; "; s2: ";
    print_each_character(s2);

    std::cout &lt;&lt; "substr(1, 4): " &lt;&lt; "abcdef"sv.substr(1, 4) &lt;&lt; '\n';

    auto value_type_info = []&lt;typename T&gt;(T)
    {
        using V = typename T::value_type;
        std::cout &lt;&lt; "sizeof " &lt;&lt; typeid(V).name() &lt;&lt; ": " &lt;&lt; sizeof(V) &lt;&lt; '\n';
    };

    value_type_info("char A"sv);
    value_type_info(L"wchar_t ∀"sv);
    value_type_info(u8"char8_t ∆"sv);
    value_type_info(u"char16_t ∇"sv);
    value_type_info(U"char32_t ∃"sv);
    value_type_info(LR"(raw ⊞)"sv);
}
|p=true
|output=
s1.size(): 3; s1: abc
s2.size(): 8; s2: abc@@def
substr(1, 4): bcde
sizeof char: 1
sizeof wchar_t: 4
sizeof char8_t: 1
sizeof char16_t: 2
sizeof char32_t: 4
sizeof wchar_t: 4
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc constructor}}
{{dsc inc|cpp/string/basic_string/dsc operator""s}}
{{dsc end}}

{{langlinks|en|es|ja}}
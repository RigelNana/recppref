{{cpp/string/basic_string_view/title|copy}}
{{cpp/string/basic_string_view/navbar}}
{{ddcl|since=c++17|notes={{mark constexpr since c++20}}|1=
size_type copy( CharT* dest, size_type count, size_type pos = 0 ) const;
}}

复制子串 {{range|pos|pos + rcount}} 到 {{c|dest}} 所指向的字符序列，其中 {{tt|rcount}} 是 {{c|count}} 与 {{c|size() - pos}} 中的较小者。

等价于 {{c|Traits::copy(dest, data() + pos, rcount)}}。

===参数===
{{par begin}}
{{par|dest|指向目标字符串的指针}}
{{par|pos|首字符的位置}}
{{par|count|请求的字符串长度}}
{{par end}} 

===返回值===
复制的字符数。

===异常===
若 {{c|1=pos &gt; size()}} 则抛出 {{lc|std::out_of_range}}。

===复杂度===
与 {{tt|rcount}} 成线性。

===示例===
{{example
|code=
#include &lt;array&gt;
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
#include &lt;string_view&gt;

int main()
{
    constexpr std::basic_string_view&lt;char&gt; source{"ABCDEF"};
    std::array&lt;char, 8&gt; dest;
    std::size_t count{}, pos{};

    dest.fill('\0');
    source.copy(dest.data(), count = 4); // pos = 0
    std::cout &lt;&lt; dest.data() &lt;&lt; '\n'; // ABCD

    dest.fill('\0');
    source.copy(dest.data(), count = 4, pos = 1);
    std::cout &lt;&lt; dest.data() &lt;&lt; '\n'; // BCDE

    dest.fill('\0');
    source.copy(dest.data(), count = 42, pos = 2); // ok, count -&gt; 4
    std::cout &lt;&lt; dest.data() &lt;&lt; '\n'; // CDEF

    try
    {
        source.copy(dest.data(), count = 1, pos = 666); // 抛出: pos &gt; size()
    }
    catch (std::out_of_range const&amp; ex)
    {
        std::cout &lt;&lt; ex.what() &lt;&lt; '\n';
    }
}
|output=
ABCD
BCDE
CDEF
basic_string_view::copy: __pos (which is 666) &gt; __size (which is 6)
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc substr}}
{{dsc inc|cpp/string/basic_string/dsc copy}}
{{dsc inc|cpp/algorithm/dsc copy}}
{{dsc inc|cpp/string/byte/dsc memcpy}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/string/basic_string_view/title|starts_with}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr bool starts_with( basic_string_view sv ) const noexcept;
}}
{{dcl|num=2|since=c++20|1=
constexpr bool starts_with( CharT ch ) const noexcept;
}}
{{dcl|num=3|since=c++20|1=
constexpr bool starts_with( const CharT* s ) const;
}}
{{dcl end}}

检查字符串视图是否始于给定前缀，其中
@1@ 前缀为字符串视图。相当于返回 {{c|1=basic_string_view(data(), std::min(size(), sv.size())) == sv}}。
@2@ 前缀为单个字符。相当于返回 {{c|1=!empty() &amp;&amp; Traits::eq(front(), c)}}。
@3@ 前缀为空终止字符串。相当于返回 {{c|1=starts_with(basic_string_view(s))}}。

===参数===
{{par begin}}
{{par|sv|可能为来自 {{tt|std::basic_string}} 转换结果的字符串视图}}
{{par|ch|单个字符}}
{{par|s|空终止字符串}}
{{par end}} 

===返回值===
若字符串视图始于给定前缀则为 {{c|true}}，否则为 {{c|false}}。

===注解===
{{feature test macro|__cpp_lib_starts_ends_with|字符串前缀和后缀：{{lc|starts_with()}} 和 {{lc|ends_with()}}|std=C++20|value=201711L}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;string_view&gt;

int main()
{
    using namespace std::literals;

    assert
    (""
        // (1) starts_with( basic_string_view )
        &amp;&amp; "https://cppreference.com"sv.starts_with("http"sv) == true
        &amp;&amp; "https://cppreference.com"sv.starts_with("ftp"sv) == false
 
        // (2) starts_with( CharT )
        &amp;&amp; "C++20"sv.starts_with('C') == true
        &amp;&amp; "C++20"sv.starts_with('J') == false
 
        // (3) starts_with( const CharT* )
        &amp;&amp; std::string_view("string_view").starts_with("string") == true
        &amp;&amp; std::string_view("string_view").starts_with("String") == false
    );
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc ends_with}}
{{dsc inc|cpp/string/basic_string/dsc starts_with}}
{{dsc inc|cpp/string/basic_string/dsc ends_with}}
{{dsc inc|cpp/string/basic_string/dsc contains}}
{{dsc inc|cpp/string/basic_string_view/dsc contains}}
{{dsc inc|cpp/string/basic_string_view/dsc compare}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
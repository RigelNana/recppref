{{cpp/string/basic_string_view/title|find}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|1=
constexpr size_type find( basic_string_view v, size_type pos = 0 ) const noexcept;
}}
{{dcl|num=2|since=c++17|1=
constexpr size_type find( CharT ch, size_type pos = 0 ) const noexcept;
}}
{{dcl|num=3|since=c++17|
constexpr size_type find( const CharT* s, size_type pos, size_type count ) const;
}}
{{dcl|num=4|since=c++17|1=
constexpr size_type find( const CharT* s, size_type pos = 0 ) const;
}}
{{dcl end}}

寻找首个等于给定字符序列的子串。

@1@ 在此视图中寻找 {{c|v}} 的首次出现，从位置 {{tt|pos}} 开始。
@2@ 等价于 {{c|find(basic_string_view(std::addressof(ch), 1), pos)}}。
@3@ 等价于 {{c|find(basic_string_view(s, count), pos)}}。
@4@ 等价于 {{c|find(basic_string_view(s), pos)}}。

===参数===
{{par begin}}
{{par|v|要搜索的子串}}
{{par|pos|要开始搜索的位置}}
{{par|count|要搜索的子串长度}}
{{par|s|指向要搜索的字符串的指针}}
{{par|ch|要搜索的字符}}
{{par end}} 

===返回值===
找到的子串的首字符位置，或者若找不到子串则为 {{lc|npos}}。

===复杂度===
最坏情况为 O({{lc|size()}} * v.{{lc|size()}})。

===示例===
{{example|code=
#include &lt;string_view&gt;

int main()
{
    using namespace std::literals;

    constexpr auto str{" long long int;"sv};

    static_assert(
        1 == str.find("long"sv)            &amp;&amp; "&lt;- find(v , pos = 0)" &amp;&amp;
        6 == str.find("long"sv, 2)         &amp;&amp; "&lt;- find(v , pos = 2)" &amp;&amp;
        0 == str.find(' ')                 &amp;&amp; "&lt;- find(ch, pos = 0)" &amp;&amp;
        2 == str.find('o', 1)              &amp;&amp; "&lt;- find(ch, pos = 1)" &amp;&amp;
        2 == str.find("on")                &amp;&amp; "&lt;- find(s , pos = 0)" &amp;&amp;
        6 == str.find("long double", 5, 4) &amp;&amp; "&lt;- find(s , pos = 5, count = 4)"
    );

    static_assert(str.npos == str.find("float"));
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc rfind}}
{{dsc inc|cpp/string/basic_string_view/dsc find_first_of}}
{{dsc inc|cpp/string/basic_string_view/dsc find_last_of}}
{{dsc inc|cpp/string/basic_string_view/dsc find_first_not_of}}
{{dsc inc|cpp/string/basic_string_view/dsc find_last_not_of}}
{{dsc inc|cpp/string/basic_string/dsc find}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
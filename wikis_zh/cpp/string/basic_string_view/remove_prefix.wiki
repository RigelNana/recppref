{{cpp/string/basic_string_view/title|remove_prefix}}
{{cpp/string/basic_string_view/navbar}}
{{ddcl|since=c++17|
constexpr void remove_prefix( size_type n );
}}

将视图起点向前移动 {{c|n}} 个字符。

{{cpp/hardened ub if|since=c++26| {{c|n &gt; size()}} 是 {{c|true}}}}

===参数===
{{par begin}}
{{par|n|要从视图起始移除的字符数}}
{{par end}}

===复杂度===
常数。

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

using namespace std::literals;

[[nodiscard("纯函数")]]
constexpr std::size_t count_substrings(std::string_view hive, const std::string_view bee)
{
    if (hive.empty() {{!!}} bee.empty())
        return 0U;
    
    std::size_t buzz{};
    while (bee.size() &lt;= hive.size())
    {
        const auto pos = hive.find(bee);
        if (pos == hive.npos)
            break;
        ++buzz;
        hive.remove_prefix(pos + bee.size());
    }
    return buzz;
}

int main()
{
    std::string str = "   trim me";
    std::string_view v = str;
    v.remove_prefix(std::min(v.find_first_not_of(" "), v.size()));
    std::cout &lt;&lt; "字符串：'" &lt;&lt; str &lt;&lt; "'\n"
              &lt;&lt; "视图  ：'" &lt;&lt; v &lt;&lt; "'\n";
    
    constexpr auto hive{"bee buzz bee buzz bee"};
    std::cout &lt;&lt; "蜂巢中有 " &lt;&lt; count_substrings(hive, "bee") &lt;&lt; " 只蜜蜂。\n";
}
|output=
字符串：'   trim me'
视图  ：'trim me'
蜂巢中有 3 只蜜蜂。
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc remove_suffix}}
{{dsc end}}

{{langlinks|en|es|ja}}
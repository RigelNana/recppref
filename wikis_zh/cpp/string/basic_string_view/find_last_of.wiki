{{cpp/string/basic_string_view/title|find_last_of}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|1=
constexpr size_type
    find_last_of( basic_string_view v, size_type pos = npos ) const noexcept;
}}
{{dcl|num=2|since=c++17|1=
constexpr size_type
    find_last_of( CharT ch, size_type pos = npos ) const noexcept;
}}
{{dcl|num=3|since=c++17|
constexpr size_type
    find_last_of( const CharT* s, size_type pos, size_type count ) const;
}}
{{dcl|num=4|since=c++17|1=
constexpr size_type
    find_last_of( const CharT* s, size_type pos = npos ) const;
}}
{{dcl end}}

寻找最后一个给定字符序列中字符之一相等的字符。不指定准确的搜索算法。搜索只考虑区间 {{closed range|0|pos}}。若区间中不存在字符，则将返回 {{lc|npos}}。

@1@ 寻找此视图中 {{c|v}} 的任意字符的最后一次出现，到位置 {{c|pos}} 结束。
@2@ 等价于 {{c|find_last_of(basic_string_view(std::addressof(c), 1), pos)}}。
@3@ 等价于 {{c|find_last_of(basic_string_view(s, count), pos)}}。
@4@ 等价于 {{c|find_last_of(basic_string_view(s), pos)}}。

===参数===
{{par begin}}
{{par|v|要搜索的视图}}
{{par|pos|要开始搜索的位置}}
{{par|count|要搜索的字符串的长度}}
{{par|s|指向要搜索的字符串的指针}}
{{par|ch|要搜索的字符}}
{{par end}} 

===返回值===
子串的任意字符的最后一次出现位置，或者若找不到这些字符则为 {{lc|npos}}。

===复杂度===
最坏情况为 O({{lc|size()}} * v.{{lc|size()}})。

===示例===
{{example
|code=
#include &lt;string_view&gt;

using namespace std::literals;
constexpr auto N = std::string_view::npos;

static_assert(
    5 == "delete"sv.find_last_of("cdef"sv) &amp;&amp;
      //       └────────────────────┘
    N == "double"sv.find_last_of("fghi"sv) &amp;&amp;
      //
    0 == "else"sv.find_last_of("bcde"sv, 2 /* pos [0..2]: "els" */) &amp;&amp;
      //  └────────────────────────┘
    N == "explicit"sv.find_last_of("abcd"sv, 4 /* pos [0..4]: "expli" */) &amp;&amp;
      //
    3 == "extern"sv.find_last_of('e') &amp;&amp;
      //     └────────────────────┘
    N == "false"sv.find_last_of('x') &amp;&amp;
      //
    0 == "inline"sv.find_last_of('i', 2 /* pos [0..2]: "inl" */) &amp;&amp;
      //  └───────────────────────┘
    N == "mutable"sv.find_last_of('a', 2 /* pos [0..2]: "mut" */) &amp;&amp;
      //
    3 == "namespace"sv.find_last_of("cdef", 3 /* pos [0..3]: "name" */, 3 /* "cde" */) &amp;&amp;
      //     └─────────────────────────┘
    N == "namespace"sv.find_last_of("cdef", 3 /* pos [0..3]: "name" */, 2 /* "cd" */)
);

int main() {}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc find}}
{{dsc inc|cpp/string/basic_string_view/dsc rfind}}
{{dsc inc|cpp/string/basic_string_view/dsc find_first_of}}
{{dsc inc|cpp/string/basic_string_view/dsc find_first_not_of}}
{{dsc inc|cpp/string/basic_string_view/dsc find_last_not_of}}
{{dsc inc|cpp/string/basic_string/dsc find_last_of}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
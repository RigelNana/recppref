{{cpp/string/basic_string_view/title|compare}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|
constexpr int compare( basic_string_view v ) const noexcept;
}}
{{dcl|num=2|since=c++17|
constexpr int compare( size_type pos1, size_type count1,
                       basic_string_view v ) const;
}}
{{dcl|num=3|since=c++17|
constexpr int compare( size_type pos1, size_type count1, basic_string_view v,
                       size_type pos2, size_type count2 ) const;
}}
{{dcl|num=4|since=c++17|
constexpr int compare( const CharT* s ) const;
}}
{{dcl|num=5|since=c++17|
constexpr int compare( size_type pos1, size_type count1,
                       const CharT* s ) const;
}}
{{dcl|num=6|since=c++17|
constexpr int compare( size_type pos1, size_type count1,
                       const CharT* s, size_type count2 ) const;
}}
{{dcl end}}

比较两个字符序列。

@1@ 要比较的序列长度 {{tt|rlen}} 是 {{c|size()}} 与 {{c|v.size()}} 的较小者。该函数通过调用 {{c|traits::compare(data(), v.data(), rlen)}} 比较两个视图，并根据下表返回一个值：

{| class="wikitable" style="text-align:center;"
! colspan=2 | 条件
! 结果
! 返回值
|-
| colspan=2 style="text-align:left;" | {{tt|Traits::compare(data(), v.data(), {{spar|rlen}}) &lt; 0}}
| {{tt|*this}} ''小于'' {{tt|v}}
| {{c|&lt;0}}
|-
| rowspan=3 | {{tt|Traits::compare(data(), v.data(), {{spar|rlen}}) {{==}} 0}}
| {{tt|size() &lt; v.size()}}
| {{tt|*this}}''小于'' {{tt|v}}
| {{c|&lt;0}}
|-
&lt;!-- --&gt;
| {{tt|1=size() == v.size()}}
| {{tt|*this}} ''等于'' {{tt|v}}
| {{c|0}}
|-
&lt;!-- --&gt;
| {{tt|size() &gt; v.size()}}
| {{tt|*this}} ''大于'' {{tt|v}}
| {{c|&gt;0}}
|-
| colspan=2 style="text-align:left;" | {{tt|Traits::compare(data(), v.data(), {{spar|rlen}}) &gt; 0}}
| {{tt|*this}} ''大于'' {{tt|v}}
| {{c|&gt;0}}
|}

@2@ 等价于 {{c|substr(pos1, count1).compare(v)}}。
@3@ 等价于 {{c|substr(pos1, count1).compare(v.substr(pos2, count2))}}。
@4@ 等价于 {{c|compare(basic_string_view(s))}}。
@5@ 等价于 {{c|substr(pos1, count1).compare(basic_string_view(s))}}。
@6@ 等价于 {{c|substr(pos1, count1).compare(basic_string_view(s, count2))}}。

===参数===
{{par begin}}
{{par|v|要比较的视图}}
{{par|s|指向要比较的字符串的指针}}
{{par|count1|此视图的要比较的字符数}}
{{par|pos1|此视图中要比较的首字符位置}}
{{par|count2|给定视图的要比较的字符数}}
{{par|pos2|给定视图的要比较的首字符位置}}
{{par end}} 

===返回值===
若此视图小于另一字符序列则为负值，若两个字符序列相等则为零，若此视图大于另一字符序列则为正值。

===复杂度===
@1@ 与比较的字符数成线性。

===示例===
{{example|code=
#include &lt;string_view&gt;

int main()
{
    using std::operator""sv;
    static_assert("abc"sv.compare("abcd"sv) &lt; 0);
    static_assert("abcd"sv.compare("abc"sv) &gt; 0);
    static_assert("abc"sv.compare("abc"sv) == 0);
    static_assert(""sv.compare(""sv) == 0);
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc {{SUBPAGENAMEE}}}}
{{dsc inc|cpp/string/basic_string_view/dsc operator_cmp}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
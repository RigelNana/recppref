{{cpp/string/basic_string_view/title|find_first_of}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|1=
constexpr size_type
    find_first_of( basic_string_view v, size_type pos = 0 ) const noexcept;
}}
{{dcl|num=2|since=c++17|1=
constexpr size_type
    find_first_of( CharT ch, size_type pos = 0 ) const noexcept;
}}
{{dcl|num=3|since=c++17|
constexpr size_type
    find_first_of( const CharT* s, size_type pos, size_type count ) const;
}}
{{dcl|num=4|since=c++17|1=
constexpr size_type
    find_first_of( const CharT* s, size_type pos = 0 ) const;
}}
{{dcl end}}

寻找首个等于给定字符序列中任意字符的字符。

@1@ 寻找 {{c|v}} 的任意字符在此视图中的首次出现，从位置 {{c|pos}} 开始。
@2@ 等价于 {{c|find_first_of(basic_string_view(std::addressof(c), 1), pos)}}。
@3@ 等价于 {{c|find_first_of(basic_string_view(s, count), pos)}}。
@4@ 等价于 {{c|find_first_of(basic_string_view(s), pos)}}。

===参数===
{{par begin}}
{{par|v|要搜索的视图}}
{{par|pos|要开始搜索的位置}}
{{par|count|要搜索的字符串的长度}}
{{par|s|指向要搜索的字符串的指针}}
{{par|c|要搜索的字符}}
{{par end}} 

===返回值===
子串的任意字符的首次出现位置，或者若找不到这些字符则为 {{lc|npos}}。

===复杂度===
最坏情况为 O({{lc|size()}} * v.{{lc|size()}})。

===示例===
{{example
|code=
#include &lt;string_view&gt;

using namespace std::literals;
constexpr auto N = std::string_view::npos;

constexpr bool is_white_space(const char c)
{
    return " \t\n\f\r\v"sv.find_first_of(c) != N;
};

static_assert(
    1 == "alignas"sv.find_first_of("klmn"sv) &amp;&amp;
      //   └─────────────────────────┘
    N == "alignof"sv.find_first_of("wxyz"sv) &amp;&amp;
      //
    3 == "concept"sv.find_first_of("bcde"sv, /* pos= */ 1) &amp;&amp;
      //     └───────────────────────┘
    N == "consteval"sv.find_first_of("oxyz"sv, /* pos= */ 2) &amp;&amp;
      //
    6 == "constexpr"sv.find_first_of('x') &amp;&amp;
      //        └─────────────────────┘
    N == "constinit"sv.find_first_of('x') &amp;&amp;
      //
    6 == "const_cast"sv.find_first_of('c', /* pos= */ 4) &amp;&amp;
      //        └──────────────────────┘
    N == "continue"sv.find_first_of('c', /* pos= */ 42) &amp;&amp;
      //
    5 == "co_await"sv.find_first_of("cba", /* pos= */ 4) &amp;&amp;
      //       └───────────────────────┘
    7 == "decltype"sv.find_first_of("def", /* pos= */ 2, /* count= */ 2) &amp;&amp;
      //         └────────────────────┘
    N == "decltype"sv.find_first_of("def", /* pos= */ 2, /* count= */ 1) &amp;&amp;
      //
    is_white_space(' ') &amp;&amp; is_white_space('\r') &amp;&amp; !is_white_space('\a')
);

int main() {}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc find}}
{{dsc inc|cpp/string/basic_string_view/dsc rfind}}
{{dsc inc|cpp/string/basic_string_view/dsc find_last_of}}
{{dsc inc|cpp/string/basic_string_view/dsc find_first_not_of}}
{{dsc inc|cpp/string/basic_string_view/dsc find_last_not_of}}
{{dsc inc|cpp/string/basic_string/dsc find_first_of}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
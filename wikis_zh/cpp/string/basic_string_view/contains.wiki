{{cpp/string/basic_string_view/title|contains}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
constexpr bool contains( basic_string_view sv ) const noexcept;
}}
{{dcl|num=2|since=c++23|1=
constexpr bool contains( CharT c ) const noexcept;
}}
{{dcl|num=3|since=c++23|1=
constexpr bool contains( const CharT* s ) const;
}}
{{dcl end}}

检查字符串视图是否含有给定的子串，其中
@1@ 子串为字符串视图。
@2@ 子串为单个字符。
@3@ 字串为空终止字符串。

所有三个重载都等价于 {{c|1=return find(x) != npos;}}，其中 {{tt|x}} 为形参。

===参数===
{{par begin}}
{{par|sv|字符串视图}}
{{par|c|单个字符}}
{{par|s|空终止字符串}}
{{par end}} 

===返回值===
若字符串视图含有给定的子串则为 {{c|true}}，否则为 {{c|false}}。

===注解===
{{feature test macro|__cpp_lib_string_contains|{{tt|contains}} 函数|std=C++23|value=202011L}}

===示例===
{{example
|code=
#include &lt;string_view&gt;
using namespace std::literals;

static_assert
(
    // bool contains(basic_string_view x) const noexcept;
    "https://cppreference.com"sv.contains("cpp"sv) == true and
    "https://cppreference.com"sv.contains("php"sv) == false and

    // bool contains(CharT x) const noexcept;
    "C++23"sv.contains('+') == true and
    "C++23"sv.contains('-') == false and

    // bool contains(const CharT* x) const;
    std::string_view("basic_string_view").contains("string") == true and
    std::string_view("basic_string_view").contains("String") == false
);

int main() {}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc starts_with}}
{{dsc inc|cpp/string/basic_string_view/dsc ends_with}}
{{dsc inc|cpp/string/basic_string_view/dsc find}}
{{dsc inc|cpp/string/basic_string_view/dsc substr}}
{{dsc inc|cpp/string/basic_string/dsc {{SUBPAGENAMEE}}}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
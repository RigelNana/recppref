{{title|1=operator==,!=,&lt;,&lt;=,&gt;,&gt;=,&lt;=&gt;{{small|(std::basic_string_view)}}}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl header|string_view}}
{{dcl rev multi|num=1
|since1=c++17|dcl1=
template&lt; class CharT, class Traits &gt;
constexpr bool operator==( std::basic_string_view&lt;CharT,Traits&gt; lhs,
                           std::basic_string_view&lt;CharT,Traits&gt; rhs ) noexcept;
|since2=c++20|dcl2=
template&lt; class CharT, class Traits &gt;
constexpr bool operator==(
    std::basic_string_view&lt;CharT,Traits&gt; lhs,
    std::type_identity_t&lt;std::basic_string_view&lt;CharT,Traits&gt;&gt; rhs ) noexcept;
}}
{{dcl|num=2|since=c++17|until=c++20|1=
template&lt; class CharT, class Traits &gt;
constexpr bool operator!=( std::basic_string_view&lt;CharT,Traits&gt; lhs,
                           std::basic_string_view&lt;CharT,Traits&gt; rhs ) noexcept;
}}
{{dcl|num=3|since=c++17|until=c++20|1=
template&lt; class CharT, class Traits &gt;
constexpr bool operator&lt;( std::basic_string_view&lt;CharT,Traits&gt; lhs,
                          std::basic_string_view&lt;CharT,Traits&gt; rhs ) noexcept;
}}
{{dcl|num=4|since=c++17|until=c++20|1=
template&lt; class CharT, class Traits &gt;
constexpr bool operator&lt;=( std::basic_string_view&lt;CharT,Traits&gt; lhs,
                           std::basic_string_view&lt;CharT,Traits&gt; rhs ) noexcept;
}}
{{dcl|num=5|since=c++17|until=c++20|1=
template&lt; class CharT, class Traits &gt;
constexpr bool operator&gt;( std::basic_string_view&lt;CharT,Traits&gt; lhs,
                          std::basic_string_view&lt;CharT,Traits&gt; rhs ) noexcept;
}}
{{dcl|num=6|since=c++17|until=c++20|1=
template&lt; class CharT, class Traits &gt;
constexpr bool operator&gt;=( std::basic_string_view&lt;CharT,Traits&gt; lhs,
                           std::basic_string_view&lt;CharT,Traits&gt; rhs ) noexcept;
}}
{{dcl|num=7|since=c++20|1=
template&lt; class CharT, class Traits &gt;
constexpr /*comp-cat*/ operator&lt;=&gt;(
    std::basic_string_view&lt;CharT,Traits&gt; lhs,
    std::type_identity_t&lt;std::basic_string_view&lt;CharT,Traits&gt;&gt; rhs ) noexcept;
}}
{{dcl end}}

比较两个视图。

通过 {{lc|compare()}} 成员函数进行所有比较（其自身则以 {{tt|Traits::compare()}} 定义）：

* 若 {{c|lhs}} 与 {{c|rhs}} 的大小相等且 {{c|lhs}} 中每个字符等价于 {{c|rhs}} 在同一位置的字符，则两个视图相等。

* 比较顺序按字典序进行——由等价于 {{lc|std::lexicographical_compare}} 的函数进行比较。

{{rrev multi
|rev1=
实现对这些函数提供充足的额外 {{tt|constexpr}} 及 {{tt|noexcept}} 重载，以令 {{tt|basic_string_view&lt;CharT,Traits&gt;}} 对象 {{tt|sv}} 可以与另一带隐式转换成 {{tt|basic_string_view&lt;CharT,Traits&gt;}} 的对象 {{tt|t}} 比较，而且语义上与比较 {{tt|sv}} 和 {{tt|basic_string_view&lt;CharT,Traits&gt;(t)}} 相同。
|since2=c++20|rev2=
三路比较运算符的返回类型（{{c|/*comp-cat*/}}）为 {{c|Traits::comparison_category}}，若该有限定标识合法并指代类型，否则为 {{lc|std::weak_ordering}}。若 {{c|/*comp-cat*/}} 不是比较类别类型，则程序非良构。

{{cpp/note synthesized compare}}
}}

===参数===
{{par begin}}
{{par|lhs, rhs|要比较的视图}}
{{par end}}

===返回值===
@1-6@ 若对应比较关系成立则为 {{c|true}}，否则为 {{c|false}}。
@7@ {{c|1=static_cast&lt;/*comp-cat*/&gt;(lhs.compare(rhs) &lt;=&gt; 0)}}。

===复杂度===
与视图大小成线性。

===注解===
{{rrev multi
|rev1=
充足的额外重载可通过一个参数类型中的非推导语境实现。
|since2=c++20|rev2=
{{lc|std::string_view}}、{{lc|std::wstring_view}}、{{lc|std::u8string_view}}、{{lc|std::u16string_view}} 与 {{lc|std::u32string_view}} 的三路比较结果类型为 {{lc|std::strong_ordering}}。

{{lc|std::type_identity_t}} 用于非推导语境，使得可隐式转换为字符串视图类型的参数能与字符串视图比较。
}}

===示例===
{{example
|code=
#include &lt;string_view&gt;

int main()
{
    using namespace std::literals;

    static_assert(""sv == ""sv);

    static_assert(""sv == "", "C++20 前选择额外的重载。");

    static_assert("" == ""sv, "C++20 前选择额外的重载。C++20 起使用重写候选。");

    static_assert(!(""sv != ""sv), "C++20 起使用重写候选。");

    static_assert(!(""sv != ""), "C++20 前选择额外的重载；C++20 起使用重写候选。");

    static_assert(!("" != ""sv), "C++20 前选择额外的重载；C++20 起使用重写候选。");
}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3432|std=C++20|before=未要求 {{tt|1=operator&lt;=&gt;}} 的返回类型为比较类别类型|after=已要求}}
{{dr list item|wg=lwg|dr=3950|std=C++20|before=仍然要求冗余的额外重载|after=减小重载集}}
{{dr list end}}

{{langlinks|en|es|ja|ru}}
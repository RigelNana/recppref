{{cpp/string/basic_string_view/title|find_first_not_of}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++17|1=
constexpr size_type
    find_first_not_of( basic_string_view v, size_type pos = 0 ) const noexcept;
}}
{{dcl|num=2|since=c++17|1=
constexpr size_type
    find_first_not_of( CharT ch, size_type pos = 0 ) const noexcept;
}}
{{dcl|num=3|since=c++17|
constexpr size_type
    find_first_not_of( const CharT* s, size_type pos, size_type count ) const;
}}
{{dcl|num=4|since=c++17|1=
constexpr size_type
    find_first_not_of( const CharT* s, size_type pos = 0 ) const;
}}
{{dcl end}}

寻找首个不等于给定字符序列中任何字符的字符。

@1@ 在此视图中寻找首个不等于 {{c|v}} 中任意字符的字符，从位置 {{c|pos}} 开始。
@2@ 等价于 {{c|find_first_not_of(basic_string_view(std::addressof(c), 1), pos)}}。
@3@ 等价于 {{c|find_first_not_of(basic_string_view(s, count), pos)}}。
@4@ 等价于 {{c|find_first_not_of(basic_string_view(s), pos)}}。

===参数===
{{par begin}}
{{par|v|要搜索的视图}}
{{par|pos|要开始搜索的位置}}
{{par|count|要比较的字符串的长度}}
{{par|s|指向要比较的字符串的指针}}
{{par|ch|要比较的字符}}
{{par end}} 

===返回值===
首个不等于给定字符串中任意字符的字符位置，或若找不到这些字符则为 {{lc|std::string_view::npos}}。

===复杂度===
最坏情况为 O({{lc|size()}}{{tt|&lt;!----&gt; * v.}}{{lc|size()}})。

===示例===
{{example|code=
#include &lt;string_view&gt;
using namespace std::literals;

int main()
{
    static_assert(2 == "BCDEF"sv.find_first_not_of("ABC"));
                    //    ^
    static_assert(4 == "BCDEF"sv.find_first_not_of("ABC", 4));
                    //      ^
    static_assert(1 == "BCDEF"sv.find_first_not_of('B'));
                    //   ^
    static_assert(3 == "BCDEF"sv.find_first_not_of('D', 2));
                    //     ^
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc find}}
{{dsc inc|cpp/string/basic_string_view/dsc rfind}}
{{dsc inc|cpp/string/basic_string_view/dsc find_first_of}}
{{dsc inc|cpp/string/basic_string_view/dsc find_last_of}}
{{dsc inc|cpp/string/basic_string_view/dsc find_last_not_of}}
{{dsc inc|cpp/string/basic_string/dsc find_first_not_of}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/string/basic_string_view/title|ends_with}}
{{cpp/string/basic_string_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr bool ends_with( basic_string_view sv ) const noexcept;
}}
{{dcl|num=2|since=c++20|1=
constexpr bool ends_with( CharT ch ) const noexcept;
}}
{{dcl|num=3|since=c++20|1=
constexpr bool ends_with( const CharT* s ) const;
}}
{{dcl end}}

检查字符串视图是否终于给定后缀，其中
@1@ 后缀为字符串视图。相当于返回 {{c|1=size() &gt;= sv.size() &amp;&amp; compare(size() - sv.size(), npos, sv) == 0}}。
@2@ 后缀为单个字符。相当于返回 {{c|1=!empty() &amp;&amp; Traits::eq(back(), c)}}。
@3@ 后缀为空终止字符串。相当于返回 {{c|1=ends_with(basic_string_view(s))}}。

===参数===
{{par begin}}
{{par|sv|可能为来自 {{tt|std::basic_string}} 转换结果的字符串视图}}
{{par|ch|单个字符}}
{{par|s|空终止字符串}}
{{par end}} 

===返回值===
若字符串视图终于给定后缀则为 {{c|true}}，否则为 {{c|false}}。

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;string_view&gt;

int main()
{
    using namespace std::literals;

    assert
    (""
        // (1) ends_with( basic_string_view sv )
        &amp;&amp; std::string_view("https://cppreference.com").ends_with(".com"sv) == true
        &amp;&amp; std::string_view("https://cppreference.com").ends_with(".org"sv) == false

        // (2) ends_with( CharT c )
        &amp;&amp; std::string_view("C++20").ends_with('0') == true
        &amp;&amp; std::string_view("C++20").ends_with('3') == false

        // (3) ends_with( const CharT* s )
        &amp;&amp; std::string_view("string_view").ends_with("view") == true
        &amp;&amp; std::string_view("string_view").ends_with("View") == false
    );
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc starts_with}}
{{dsc inc|cpp/string/basic_string/dsc starts_with}}
{{dsc inc|cpp/string/basic_string/dsc ends_with}}
{{dsc inc|cpp/string/basic_string/dsc contains}}
{{dsc inc|cpp/string/basic_string_view/dsc contains}}
{{dsc inc|cpp/string/basic_string_view/dsc compare}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
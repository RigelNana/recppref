{{cpp/title|memcpy}}
{{cpp/string/byte/navbar}}
{{ddcl|header=cstring|
void* memcpy( void* dest, const void* src, std::size_t count );
}}

按顺序进行以下操作：
# 在 {{c|dest}} [[cpp/language/object#对象创建|隐式创建]]对象。
# 从 {{c|src}} 所指向的对象复制 {{c|count}} 个（如同具有 {{c/core|unsigned char}} 类型的）字符到 {{c|dest}} 所指向的对象中。

如果满足以下任意条件，那么行为未定义：
* {{c|dest}} 或 {{c|src}} 是{{ls|cpp/language/pointer#空指针}}或{{ls|cpp/language/pointer#无效指针}}。
* 在有重叠的对象之间进行复制。

===参数===
{{par begin}}
{{par|dest|指向复制目的对象的指针}}
{{par|src|指向复制来源对象的指针}}
{{par|count|复制的字节数}}
{{par end}}

===返回值===
如果存在[[cpp/language/object#对象创建|已适当创建的对象]]，那么返回指向该对象的指针；否则返回 {{c|dest}}。

===注解===
{{tt|std::memcpy}} 理应是最快的内存到内存复制的库例程。它通常比必须扫描其所复制数据的 {{lc|std::strcpy}}，或必须预防以处理重叠输入的 {{lc|std::memmove}} 更高效。

许多 C++ 编译器将适合的内存复制循环变换为 {{tt|std::memcpy}} 调用。

在{{ls|cpp/language/object#严格的别名使用}}禁止检验同一内存为两个不同类型的值处，可用 {{tt|std::memcpy}} 转换值。

===示例===
{{example
|code=
#include &lt;cstdint&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;

int main()
{
    // 简单用法
    char source[] = "once upon a daydream...", dest[4];
    std::memcpy(dest, source, sizeof dest);
    std::cout &lt;&lt; "dest[4] = {";
    for (int n{}; char c : dest)
        std::cout &lt;&lt; (n++ ? ", " : "") &lt;&lt; '\'' &lt;&lt; c &lt;&lt; "'";
    std::cout &lt;&lt; "};\n";
    
    // 转译
    double d = 0.1;
//  std::int64_t n = *reinterpret_cast&lt;std::int64_t*&gt;(&amp;d); // 别名违规
    std::int64_t n;
    std::memcpy(&amp;n, &amp;d, sizeof d); // OK

    std::cout &lt;&lt; std::hexfloat &lt;&lt; d &lt;&lt; " 作为 std::int64_t 时是 "
              &lt;&lt; std::hex &lt;&lt; n &lt;&lt; "\n" &lt;&lt; std::dec;
    
    // 在目标缓冲区中创建对象
    struct S
    {
        int x{42};
        void print() const { std::cout &lt;&lt; '{' &lt;&lt; x &lt;&lt; "}\n"; }
    } s;
    alignas(S) char buf[sizeof(S)];
    S* ps = new (buf) S; // 布置 new
    std::memcpy(ps, &amp;s, sizeof s);
    ps-&gt;print();
}
|output=
dest[4] = {'o', 'n', 'c', 'e'};
0x1.999999999999ap-4 作为 std::int64_t 时是 3fb999999999999a 
{42}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=4064|std=C++98|before=不明确返回的指针是否指向已适当创建的对象|after=使之明确}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc memmove}}
{{dsc inc|cpp/string/byte/dsc memset}}
{{dsc inc|cpp/string/wide/dsc wmemcpy}}
{{dsc inc|cpp/string/basic_string/dsc copy}}
{{dsc inc|cpp/algorithm/dsc copy}}
{{dsc inc|cpp/algorithm/dsc copy_backward}}
{{dsc inc|cpp/types/dsc is_trivially_copyable}}
{{dsc see c|c/string/byte/memcpy}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|strtof|strtod|strtold}}
{{cpp/string/byte/navbar}}
{{dcl begin}}
{{dcl header|cstdlib}}
{{dcl|since=c++11|num=1|
float       strtof ( const char* str, char** str_end );
}}
{{dcl|num=2|
double      strtod ( const char* str, char** str_end );
}}
{{dcl|since=c++11|num=3|
long double strtold( const char* str, char** str_end );
}}
{{dcl end}}

转译 {{c|str}} 所指向的字节字符串中的浮点数。

{{cpp/string/cvt str2float}}

函数设置 {{c|str_end}} 所指向的指针指向最后被转译字符的后一字符，若 {{c|str_end}} 为空指针，则忽略它。

===参数===
{{par begin}}
{{par|str|指向要转译的空终止字节字符串的指针}}
{{par|str_end|指向指向字符指针的指针。}}
{{par end}}

===返回值===
成功时为对应 {{c|str}} 内容的浮点数。若转换出的值落在对应返回类型的范围外，则发生值域错误并返回 {{lc|HUGE_VAL}}、{{lc|HUGE_VALF}} 或 {{lc|HUGE_VALL}}。若无法进行转换，则返回 {{c|0}} 并将 {{c|*str_end}} 设为 {{c|str}}。

===示例===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;clocale&gt;
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    const char* p = "111.11 -2.22 0X1.BC70A3D70A3D7P+6 -Inf 1.18973e+4932zzz";
    char* end{};
    std::cout &lt;&lt; "解析 \"" &lt;&lt; p &lt;&lt; "\":\n";
    errno = 0;
    for (double f = std::strtod(p, &amp;end); p != end; f = std::strtod(p, &amp;end))
    {
        std::cout &lt;&lt; "  '" &lt;&lt; std::string(p, end - p) &lt;&lt; "' -&gt; ";
        p = end;
        if (errno == ERANGE)
        {
            std::cout &lt;&lt; "值域错误, 得到 ";
            errno = 0;
        }
        std::cout &lt;&lt; f &lt;&lt; '\n';
    }

    if (std::setlocale(LC_NUMERIC, "de_DE.utf8"))
    {
        std::cout &lt;&lt; "de_DE.utf8 本地环境中:\n";
        std::cout &lt;&lt; "  '123.45' -&gt; " &lt;&lt; std::strtod("123.45", 0) &lt;&lt; '\n';
        std::cout &lt;&lt; "  '123,45' -&gt; " &lt;&lt; std::strtod("123,45", 0) &lt;&lt; '\n';
    }
}
|p=true
|output=
解析 "111.11 -2.22 0X1.BC70A3D70A3D7P+6 -Inf 1.18973e+4932zzz":
  '111.11' -&gt; 111.11
  ' -2.22' -&gt; -2.22
  ' 0X1.BC70A3D70A3D7P+6' -&gt; 111.11
  ' -Inf' -&gt; -inf
  ' 1.18973e+4932' -&gt; 值域错误, 得到 inf
de_DE.utf8 本地环境中:
  '123.45' -&gt; 123
  '123,45' -&gt; 123.45
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc atof}}
{{dsc inc|cpp/string/wide/dsc wcstof}}
{{dsc inc|cpp/utility/dsc from_chars}}
{{dsc see c|c/string/byte/strtof|strtof|strtod|strtold}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
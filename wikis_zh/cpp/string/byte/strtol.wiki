{{cpp/title|strtol|strtoll}}
{{cpp/string/byte/navbar}}
{{dcl begin}}
{{dcl header|cstdlib}}
{{dcl|num=1|
long      strtol( const char* str, char** str_end, int base );
}}
{{dcl|num=2|since=c++11|
long long strtoll( const char* str, char** str_end, int base );
}}
{{dcl end}}

转译 {{c|str}} 所指向的字节字符串中的整数值。

{{cpp/string/cvt str2int base|base=base}}

函数将 {{c|str_end}} 所指向的指针设置为指向最后被转译字符的后一字符。若 {{c|str_end}} 为空指针，则忽略它。

若 {{c|str}} 为空或无期待的形式，则不进行转换，并（若 {{c|str_end}} 非空指针）将 {{c|str}} 的值存储于 {{c|str_end}} 所指向的对象。

===参数===
{{par begin}}
{{par|str|指向要转译的空终止字符串的指针}}
{{par|str_end|指向指向字符指针的指针。}}
{{par|base|被转译整数值的''底''}}
{{par end}}

===返回值===
* 若成功，则返回对应 {{c|str}} 内容的整数值。
* 若转换出的值落在对应类型的范围外，则发生值域错误（设置 {{lc|errno}} 为 {{lc|ERANGE}}）并返回 {{lc|LONG_MAX}}、{{lc|LONG_MIN}}、{{lc|LLONG_MAX}} 或 {{lc|LLONG_MIN}}。
* 若不能进行转换，则返回 {{c|0}}。

===示例===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cstdlib&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
 
int main()
{
    const char* p = "10 200000000000000000000000000000 30 -40";
    std::cout &lt;&lt; "解析 " &lt;&lt; std::quoted(p) &lt;&lt; ":\n";
    
    for (;;)
    {
        // 库函数调用能设置 errno 为任何非零值，无关乎是否有错误，
        // 故为检查 strtol 设置的错误，需要清除它
        errno = 0;
        char* p_end{};
        const long i = std::strtol(p, &amp;p_end, 10);
        if (p == p_end)
            break;
        
        const bool range_error = errno == ERANGE;
        const std::string extracted(p, p_end - p);
        p = p_end;
        
        std::cout &lt;&lt; "提取到 " &lt;&lt; std::quoted(extracted)
                  &lt;&lt; ", strtol 返回 " &lt;&lt; i &lt;&lt; '.';
        if (range_error)
            std::cout &lt;&lt; " 发生值域错误.";
        
        std::cout &lt;&lt; '\n';
    }
}
|p=true
|output=
解析 "10 200000000000000000000000000000 30 -40":
提取到 "10", strtol 返回 10.
提取到 " 200000000000000000000000000000", strtol 返回 9223372036854775807. 发生值域错误.
提取到 " 30", strtol 返回 30.
提取到 " -40", strtol 返回 -40.
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc stol}}
{{dsc inc|cpp/string/byte/dsc strtoul}}
{{dsc inc|cpp/string/byte/dsc strtoimax}}
{{dsc inc|cpp/string/wide/dsc wcstol}}
{{dsc inc|cpp/string/byte/dsc strtof}}
{{dsc inc|cpp/utility/dsc from_chars}}
{{dsc inc|cpp/string/byte/dsc atoi}}
{{dsc see c|c/string/byte/strtol|strtol|strtoll}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|strpbrk}}
{{cpp/string/byte/navbar}}
{{dcl begin}}
{{dcl header|cstring}}
{{dcl|
const char* strpbrk( const char* dest, const char* breakset );
}}
{{dcl|
      char* strpbrk(       char* dest, const char* breakset );
}}
{{dcl end}}

在 {{c|dest}} 所指向的空终止字节串中，扫描来自 {{c|breakset}} 所指向的空终止字节串的任何字符，并返回指向该字符的指针。

===参数===
{{par begin}}
{{par|dest|指向要分析的空终止字节字符串的指针}}
{{par|breakset|指向含要搜索的字符的空终止字节字符串的指针}}
{{par end}}

===返回值===
指向 {{c|dest}} 中首个亦在 {{c|breakset}} 中的字符的指针，或若这种字符不存在则为空指针。

===注解===
名称代表“字符串指针打断 (string pointer break)”，因为它返回指向首个分隔符（“打断”）的指针。

===示例===
{{example
|code=
#include &lt;cstring&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;

int main()
{
    const char* str = "hello world, friend of mine!";
    const char* sep = " ,!";

    unsigned int cnt = 0;
    do
    {
        str = std::strpbrk(str, sep); // 寻找分隔符
        std::cout &lt;&lt; std::quoted(str) &lt;&lt; '\n';
        if (str)
            str += std::strspn(str, sep); // 跳过分隔符
        ++cnt; // 增加词计数
    } while (str &amp;&amp; *str);

    std::cout &lt;&lt; "有 " &lt;&lt; cnt &lt;&lt; " 个单词\n";
}
|output=
" world, friend of mine!"
", friend of mine!"
" of mine!"
" mine!"
"!"
有 5 个单词
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/byte/dsc strcspn}}
{{dsc inc|cpp/string/byte/dsc strtok}}
{{dsc inc|cpp/string/byte/dsc strchr}}
{{dsc inc|cpp/string/wide/dsc wcspbrk}}
{{dsc see c|c/string/byte/strpbrk}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|n=literals::string_literals::|operator""s}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl header|string}}
{{dcla|num=1|since=c++14|constexpr=c++20|
std::string operator""s( const char* str, std::size_t len );
}}
{{dcl|num=2|since=c++20|
constexpr std::u8string operator""s( const char8_t* str,
                                     std::size_t len );
}}
{{dcla|num=3|since=c++14|constexpr=c++20|
std::u16string operator""s( const char16_t* str, std::size_t len );
}}
{{dcla|num=4|since=c++14|constexpr=c++20|
std::u32string operator""s( const char32_t* str, std::size_t len );
}}
{{dcla|num=5|since=c++14|constexpr=c++20|
std::wstring operator""s( const wchar_t* str, std::size_t len );
}}
{{dcl end}}

创建所需类型的字符串字面量。

@1@ 返回 {{c|std::string{str, len} }}。
@2@ 返回 {{c|std::u8string{str, len} }}。
@3@ 返回 {{c|std::u16string{str, len} }}。
@4@ 返回 {{c|std::u32string{str, len} }}。
@5@ 返回 {{c|std::wstring{str, len} }}。

===参数===
{{par begin}}
{{par|str|指向无修饰字符数组字面量起始的指针}}
{{par|len|无修饰字符数组字面量的长度}}
{{par end}}

===返回值===
字符串字面量。

===注解===
这些运算符声明在命名空间 {{c|std::literals::string_literals}} 中声明，其中 {{tt|literals}} 和 {{tt|string_literals}} 都是内联命名空间。可通过以下任意 {{c/core|using}} 指令访问这些运算符：
* {{c|using namespace std::literals}}
* {{c|using namespace std::string_literals}}
* {{c|using namespace std::literals::string_literals}}

{{lc|std::chrono::duration}} 也定义了 {{ltt|cpp/chrono/operator""s}} 字面量来表示秒，但它是算术类型字面量：{{c|10.0s}} 与 {{c|10s}} 是十秒，但 {{c|"10"s}} 是字符串。

{{feature test macro|__cpp_lib_string_udls|字符串类型的用户定义字面量|value=201304L|std=C++14}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;

void print_with_zeros(const auto note, const std::string&amp; s)
{
    std::cout &lt;&lt; note;
    for (const char c : s)
        c ? std::cout &lt;&lt; c : std::cout &lt;&lt; "₀";
    std::cout &lt;&lt; " (size = " &lt;&lt; s.size() &lt;&lt; ")\n";
}

int main()
{
    using namespace std::string_literals;
    
    std::string s1 = "abc\0\0def";
    std::string s2 = "abc\0\0def"s;
    print_with_zeros("s1: ", s1);
    print_with_zeros("s2: ", s2);
    
    std::cout &lt;&lt; "abcdef"s.substr(1,4) &lt;&lt; '\n';
}
|output=
s1: abc (size = 3)
s2: abc₀₀def (size = 8)
bcde
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc constructor}}
{{dsc inc|cpp/string/basic_string_view/dsc operator""sv}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
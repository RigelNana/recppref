{{cpp/string/basic_string/title|find_last_not_of}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|anchor=no|num=1|noexcept=c++11|constexpr=c++20|1=
size_type find_last_not_of( const basic_string&amp; str,
                            size_type pos = npos ) const;
}}
{{dcla|anchor=no|num=2|constexpr=c++20|1=
size_type find_last_not_of( const CharT* s,
                            size_type pos, size_type count ) const;
}}
{{dcla|anchor=no|num=3|constexpr=c++20|1=
size_type find_last_not_of( const CharT* s, size_type pos = npos ) const;
}}
{{dcla|anchor=no|num=4|noexcept=c++11|constexpr=c++20|1=
size_type find_last_not_of( CharT ch, size_type pos = npos ) const;
}}
{{dcla|anchor=no|num=5|since=c++17|constexpr=c++20|1=
template&lt; class StringViewLike &gt;
size_type
    find_last_not_of( const StringViewLike&amp; t,
                      size_type pos = npos ) const noexcept(/* 见下文 */);
}}
{{dcl end}}

寻找最后一个不等于给定字符序列中任何字符的字符。搜索只考虑范围 {{closed range|0|pos}}。如果范围中的所有字符都能在给定字符序列中找到，那么就会返回 {{lc|npos}}。

@1@ 寻找最后一个不等于 {{c|str}} 中任何字符的字符。

@2@ 寻找最后一个不等于范围 {{range|s|s + count}} 中任何字符的字符。此范围可以包含空字符。

@@ 如果 {{range|s|s + count}} 不是[[cpp/iterator#范围|有效范围]]，那么行为未定义。

@3@ 寻找最后一个不等于 {{c|s}} 所指向的字符串中任何字符的字符。该字符串的长度由首个空字符，通过 {{c|Traits::length(s)}} 确定。

@@ 如果 {{range|s|s + Traits::length(s)}} 不是[[cpp/iterator#范围|有效范围]]，那么行为未定义。

@4@ 寻找最后一个不等于 {{c|ch}} 的字符。

@5@ {{cpp/string/sv hack|寻找最后一个不等于 {{c|sv}} 中任何字符的字符}}

所有情况下均调用 {{l2tt|cpp/string/char_traits/cmp|eq|Traits}} 检查相等性。

===参数===
{{par begin}}
{{par|str|鉴别要搜索的字符的字符串}}
{{par|pos|搜索结束的位置}}
{{par|count|鉴别要搜索的字符的字符串长度}}
{{par|s|指向鉴别要搜索的字符的字符串的指针}}
{{par|ch|鉴别要搜索的字符的字符}}
{{par|t|鉴别要搜索的字符的对象（可转换到 {{lc|std::basic_string_view}}）}}
{{par end}}

===返回值===
找到的字符位置，在找不到这种字符时返回 {{lc|npos}}。

===异常===
@1,4@ 不抛出。
@5@ {{noexcept|std::is_nothrow_convertible_v&lt;const T&amp;, std::basic_string_view&lt;charT, traits&gt;&gt;}}

{{cpp/strong exception safety guarantee}}

===示例===
{{example|
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;

void show_pos(const std::string&amp; str, std::string::size_type found)
{
    if (found != std::string::npos)
        std::cout &lt;&lt; "[" &lt;&lt; found &lt;&lt; "] = \'" &lt;&lt; str[found] &lt;&lt; "\'\n";
    else
        std::cout &lt;&lt; "没有找到" "\n";
}

int main()
{
    std::string str{"abc_123"};
    char const* skip_set{"0123456789"};
    std::string::size_type str_last_pos{std::string::npos};
    
    show_pos(str, str.find_last_not_of(skip_set)); // [3] = '_'
    
    str_last_pos = 2;
    show_pos(str, str.find_last_not_of(skip_set, str_last_pos)); // [2] = 'c'
    
    str_last_pos = 2;
    show_pos(str, str.find_last_not_of('c', str_last_pos)); // [1] = 'b'
    
    const char arr[]{'3', '4', '5'};
    show_pos(str, str.find_last_not_of(arr)); // [5] = '2'
    
    str_last_pos = 2;
    std::string::size_type skip_set_size{4};
    show_pos(str, str.find_last_not_of(skip_set,
                                       str_last_pos,
                                       skip_set_size)); // [2] = 'c'
    
    show_pos(str, str.find_last_not_of("abc")); // [6] = '3'
    
    str_last_pos = 2;
    show_pos(str, str.find_last_not_of("abc", str_last_pos)); // 没有找到
}
|output=
[3] = '_'
[2] = 'c'
[1] = 'b'
[5] = '2'
[2] = 'c'
[6] = '3'
没有找到
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=141|std=C++98|before=重载 (1) 在 {{c|1=pos &gt;= size()}} 时只能返回 {{lc|npos}}|after=此时搜索范围是 {{range|0|size()}}}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=没有异常安全保证|after=添加强异常安全保证}}
{{dr list item|wg=lwg|dr=2064|std=C++11|before=重载 {{v|3,4}} 是 noexcept 的|after=移除}}
{{dr list item|wg=lwg|dr=2946|std=C++17|before=重载 {{v|5}} 在某些情况下会导致歧义|after=通过使之为模板来避免}}
{{dr list item|paper=P1148R0|std=C++11&lt;br&gt;C++17|before=重载 {{v|4,5}} 的 noexcept 意外地被 LWG2064/LWG2946 丢弃|after=恢复}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc find}}
{{dsc inc|cpp/string/basic_string/dsc rfind}}
{{dsc inc|cpp/string/basic_string/dsc find_first_of}}
{{dsc inc|cpp/string/basic_string/dsc find_first_not_of}}
{{dsc inc|cpp/string/basic_string/dsc find_last_of}}
{{dsc inc|cpp/string/basic_string_view/dsc {{SUBPAGENAMEE}}}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/string/basic_string/title|operator{{=}}}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|anchor=no|num=1|constexpr=c++20|1=
basic_string&amp; operator=( const basic_string&amp; str );
}}
{{dcla|anchor=no|num=2|since=c++11|constexpr=c++20|1=
basic_string&amp; operator=( basic_string&amp;&amp; str )
    noexcept(/* 见下文 */);
}}
{{dcla|anchor=no|num=3|constexpr=c++20|1=
basic_string&amp; operator=( const CharT* s );
}}
{{dcla|anchor=no|num=4|constexpr=c++20|1=
basic_string&amp; operator=( CharT ch );
}}
{{dcla|anchor=no|num=5|since=c++11|constexpr=c++20|1=
basic_string&amp; operator=( std::initializer_list&lt;CharT&gt; ilist );
}}
{{dcla|num=6|since=c++17|constexpr=c++20|1=
template&lt;class StringViewLike&gt;
basic_string&amp; operator=( const StringViewLike&amp; t );
}}
{{dcl|num=7|since=c++23|1=
basic_string&amp; operator=( std::nullptr_t ) = delete;
}}
{{dcl end}}

替换字符串的内容。

@1@ 以 {{c|str}} 的副本替换字符串的内容。如果 {{c|*this}} 和 {{c|str}} 为同一对象，那么此函数无效果。
@2@ 用{{named req|SequenceContainer}}的移动赋值语义以 {{c|str}} 的内容替换字符串的内容。
@@ 与其他顺序容器移动赋值不同，指向 {{c|str}} 的元素的引用、指针和迭代器可能会失效。
@3@ 如同用 {{c|assign(s, Traits::length(s))}} 以 {{c|s}} 所指向的空终止字符串的内容替换字符串的内容。
@4@ 如同用 {{c|assign(std::addressof(ch), 1)}} 以字符 {{c|ch}} 的内容替换字符串的内容。
@5@ 如同用 {{c|assign(ilist.begin(), ilist.size())}} 以初始化式列表 {{c|ilist}} 的内容替换字符串的内容。
@6@ {{cpp/string/sv hack|如同用 {{c|assign(sv)}}，以 {{c|sv}} 的内容替换内容}}
@7@ 不能将 {{c|nullptr}} 赋值给 {{tt|std::basic_string}}。

===参数===
{{par begin}}
{{par|ch|用以初始化字符串的字符}}
{{par|str|用作源初始化字符串的字符串}}
{{par|s|指向空终止字符串的指针，用作源初始化字符串}}
{{par|init|用作源初始化字符串的 {{lc|std::initializer_list}}}}
{{par|t|可转换为用以初始化字符串的 {{lc|std::basic_string_view}} 的对象}}
{{par end}} 

===返回值===
{{c|*this}}

===复杂度===
@1@ 与 {{c|str}} 的大小成线性。

@2@ 与 {{c|*this}} 的大小成线性（正式而言，必须销毁每个 {{tt|CharT}}）。如果分配器比较不相等且不传播，那么也与 {{c|str}} 的大小成线性（必须进行复制）。

@3@ 与 {{c|s}} 的大小成线性。

@4@ 常数。

@5@ 与 {{c|init}} 的大小成线性。

@6@ 与 {{c|t}} 的大小成线性。

===异常===
@2@ {{noexcept|std::allocator_traits&lt;Allocator&gt;::
             propagate_on_container_move_assignment::value {{!!}}
         std::allocator_traits&lt;Allocator&gt;::is_always_equal::value}}

{{cpp/string/basic_string/length error note}}

{{cpp/strong exception safety guarantee}}
 
===示例===
{{example|
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::string str1;
    std::string str2{"alpha"};
    
    // (1) operator=(const basic_string&amp;);
    str1 = str2;
    std::cout &lt;&lt; std::quoted(str1) &lt;&lt; ' '   // "alpha"
              &lt;&lt; std::quoted(str2) &lt;&lt; '\n'; // "alpha"
    
    // (2) operator=(basic_string&amp;&amp;);
    str1 = std::move(str2);
    std::cout &lt;&lt; std::quoted(str1) &lt;&lt; ' '   // "alpha"
              &lt;&lt; std::quoted(str2) &lt;&lt; '\n'; // "" 或 "alpha"（未指定）
    
    // (3) operator=(const CharT*);
    str1 = "beta";
    std::cout &lt;&lt; std::quoted(str1) &lt;&lt; '\n'; // "beta"
    
    // (4) operator=(CharT);
    str1 = '!'; 
    std::cout &lt;&lt; std::quoted(str1) &lt;&lt; '\n'; // "!"
    
    // (5) operator=(std::initializer_list&lt;CharT&gt;);
    str1 = {'g', 'a', 'm', 'm', 'a'};
    std::cout &lt;&lt; std::quoted(str1) &lt;&lt; '\n'; // "gamma"
    
    // (6) operator=(const T&amp;);
    str1 = 35U; // 等价于 str1 = static_cast&lt;char&gt;(35U);
    std::cout &lt;&lt; std::quoted(str1) &lt;&lt; '\n'; // "#" (ASCII = 35)
}
|p=true
|output=
"alpha" "alpha"
"alpha" ""
"beta"
"!"
"gamma"
"#"
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=没有异常安全保证|after=添加强异常安全保证}}
{{dr list item|wg=lwg|dr=2063|std=C++11|before=移动赋值运算符没有遵循&lt;br&gt;{{named req|SequenceContainer}}的语义要求|after=遵循}}
{{dr list item|wg=lwg|dr=2946|std=C++17|before=重载 {{vl|6}} 在某些情况下会导致歧义|after=通过使之为模板来避免}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc constructor}}
{{dsc inc|cpp/string/basic_string/dsc assign}}
{{dsc inc|cpp/string/basic_string_view/dsc operator{{=}}}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
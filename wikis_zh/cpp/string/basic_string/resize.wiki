{{cpp/string/basic_string/title|resize}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|num=1|constexpr=c++20|
void resize( size_type count );
}}
{{dcla|num=2|constexpr=c++20|
void resize( size_type count, CharT ch );
}}
{{dcl end}}

重设字符串大小，使其包含 {{c|count}} 个字符。

如果当前大小小于 {{c|count}}，那么后附额外的字符：

@1@ 将后附的字符初始化为 {{c|CharT()}}（在 {{tt|CharT}} 是 {{c/core|char}} 时就是 {{c|'\0'}}）。
@2@ 将后附的字符初始化为 {{c|ch}}。

如果当前大小大于 {{c|count}}，那么字符串会缩减到首 {{c|count}} 个元素。

===参数===
{{par begin}}
{{par|count|字符串的新大小}}
{{par|ch|用以初始化新字符的字符}}
{{par end}}

===异常===
在 {{c|count &gt; max_size()}} 是 {{c|true}} 时抛出 {{lc|std::length_error}}。也会抛出对应 {{tt|Allocator}} 所抛的任何异常。

{{cpp/strong exception safety guarantee}}

===示例===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
 
int main()
{
    const unsigned desired_length{8};
    std::string long_string("Where is the end?");
    std::string short_string("H");
    
    std::cout &lt;&lt; "基础功能：\n"
              &lt;&lt; "缩短：\n"
              &lt;&lt; "1. resize 前：" &lt;&lt; quoted(long_string) &lt;&lt; '\n';
    long_string.resize(desired_length);
    std::cout &lt;&lt; "2. resize 后：" &lt;&lt; quoted(long_string) &lt;&lt; '\n';
    
    std::cout &lt;&lt; "以给定字符 'a' 加长：\n"
              &lt;&lt; "3. resize 前：" &lt;&lt; quoted(short_string) &lt;&lt; '\n';
    short_string.resize(desired_length, 'a');
    std::cout &lt;&lt; "4. resize 后：" &lt;&lt; quoted(short_string) &lt;&lt; '\n';
    
    std::cout &lt;&lt; "以 char() == " &lt;&lt; static_cast&lt;int&gt;(char()) &lt;&lt; " 加长：\n"
              &lt;&lt; "5. resize 前：" &lt;&lt; quoted(short_string) &lt;&lt; '\n';
    short_string.resize(desired_length + 3);
    std::cout &lt;&lt; "6. resize 后：\"";
    for (char c : short_string)
        std::cout &lt;&lt; (c == char() ? '@' : c);
    std::cout &lt;&lt; "\"\n\n";
    
    std::cout &lt;&lt; "错误：\n";
    std::string s;
    
    try
    {
        // 大小 OK，没有 length_error（可能会抛出 bad_alloc）
        s.resize(s.max_size() - 1, 'x');
    }
    catch (const std::bad_alloc&amp; ex)
    {
        std::cout &lt;&lt; "1. 异常：" &lt;&lt; ex.what() &lt;&lt; '\n';
    }
    
    try
    {
        // 大小 OK，没有 length_error（可能会抛出 bad_alloc）
        s.resize(s.max_size(), 'x');
    }
    catch (const std::bad_alloc&amp; ex)
    {
        std::cout &lt;&lt; "3. 异常：" &lt;&lt; ex.what() &lt;&lt; '\n';
    }
    
    try
    {
        // 大小错误，抛出 length_error
        s.resize(s.max_size() + 1, 'x');
    }
    catch (const std::length_error&amp; ex)
    {
        std::cout &lt;&lt; "3. length_error：" &lt;&lt; ex.what() &lt;&lt; '\n';
    }
}
|p=true
|output=
基础功能：
缩短：
1. resize 前："Where is the end?"
2. resize 后："Where is"
以给定字符 'a' 加长：
3. resize 前："H"
4. resize 后："Haaaaaaa"
以 char() == 0 加长：
5. resize 前："Haaaaaaa"
6. resize 后："Haaaaaaa@@@"
 
错误：
1. 异常：std::bad_alloc
2. 异常：std::bad_alloc
3. length_error：basic_string::_M_replace_aux
}}

===复杂度===
与字符串大小成线性。

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=没有异常安全保证|after=添加强异常安全保证}}
{{dr list item|wg=lwg|dr=2250|std=C++98|before={{c|count &gt; max_size()}} 是 {{c|true}} 时的行为未定义|after=此时始终会抛出异常}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc size}}
{{dsc inc|cpp/string/basic_string/dsc reserve}}
{{dsc inc|cpp/string/basic_string/dsc shrink_to_fit}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/string/basic_string/title|insert}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|
basic_string&amp; insert( size_type index, size_type count, CharT ch );
}}
{{dcl|num=2|notes={{mark constexpr since c++20}}|
basic_string&amp; insert( size_type index, const CharT* s );
}}
{{dcl|num=3|notes={{mark constexpr since c++20}}|
basic_string&amp; insert( size_type index, const CharT* s, size_type count );
}}
{{dcl|num=4|notes={{mark constexpr since c++20}}|
basic_string&amp; insert( size_type index, const basic_string&amp; str );
}}
{{dcl rev multi|num=5
|dcl1=
basic_string&amp; insert( size_type index, const basic_string&amp; str,
                      size_type s_index, size_type count );
|since2=c++14|notes2={{mark constexpr since c++20}}|dcl2=
basic_string&amp; insert( size_type index, const basic_string&amp; str,
                      size_type s_index, size_type count = npos );
}}
{{dcl rev multi|num=6
|dcl1=
iterator insert( iterator pos, CharT ch );
|since2=c++11|notes2={{mark constexpr since c++20}}|dcl2=
iterator insert( const_iterator pos, CharT ch );
}}
{{dcl rev multi|num=7
|dcl1=
void insert( iterator pos, size_type count, CharT ch );
|since2=c++11|notes2={{mark constexpr since c++20}}|dcl2=
iterator insert( const_iterator pos, size_type count, CharT ch );
}}
{{dcl rev multi|num=8
|dcl1=
template&lt; class InputIt &gt;
void insert( iterator pos, InputIt first, InputIt last );
|since2=c++11|notes2={{mark constexpr since c++20}}|dcl2=
template&lt; class InputIt &gt;
iterator insert( const_iterator pos, InputIt first, InputIt last );
}}
{{dcl|num=9|since=c++11|notes={{mark constexpr since c++20}}|
iterator insert( const_iterator pos, std::initializer_list&lt;CharT&gt; ilist );
}}
{{dcl|num=10|since=c++17|notes={{mark constexpr since c++20}}|
template&lt; class StringViewLike &gt;
basic_string&amp; insert( size_type index, const StringViewLike&amp; t );
}}
{{dcl|num=11|since=c++17|notes={{mark constexpr since c++20}}|1=
template&lt; class StringViewLike &gt;
basic_string&amp; insert( size_type index, const StringViewLike&amp; t,
                      size_type t_index, size_type count = npos );
}}
{{dcl end}}

插入字符到字符串中。

@1@ 在位置 {{c|index}} 插入 {{c|count}} 个字符 {{c|ch}} 的副本。

@2@ 在位置 {{c|index}} 插入 {{c|s}} 所指向的空终止字符串。字符串的长度由首个空字符，通过 {{c|Traits::length(s)}} 确定。

@3@ 在位置 {{c|index}} 插入范围 {{range|s|s + count}} 中的字符。范围可以包含空字符。

@4@ 在位置 {{c|index}} 插入字符串 {{c|str}}。

@5@ 在位置 {{c|index}} 插入由 {{c|str.substr(s_index, count)}} 获得的字符串。

@6@ 在 {{c|pos}} 所指向的字符前插入字符 {{c|ch}}。

@7@ 在 {{c|pos}} 所指向的元素（如果存在）前插入 {{c|count}} 个字符 {{c|ch}} 的副本。

@8@ 如同用 {{c|insert(pos - begin(), basic_string(first, last, get_allocator()))}} 在 {{c|pos}} 所指向的元素（如果存在）前插入来自范围 {{range|first|last}} 的元素。
{{rrev|since=c++11|
如果 {{tt|InputIt}} 不满足{{named req|InputIterator}}，那么此重载不参与重载决议。
}}

@9@ 在 {{c|pos}} 所指向的元素（如果存在）前插入来自初始化式列表 {{c|ilist}} 的字符。

@10@ {{cpp/string/sv hack|如同用 {{c|insert(pos, sv.data(), sv.size())}} 在 {{c|pos}} 所指向的元素（如果存在）前插入来自 {{c|sv}} 的元素}}

@11@ {{cpp/string/sv hack|在 {{c|pos}} 所指向的元素（如果存在）前插入来自 {{c|sv}} 的子视图 {{range|t_index|t_index + count}} 的元素。
* 如果请求的子视图越过 {{c|sv}} 的末尾或 {{c|1=count == npos}}，那么作为结果的子视图是 {{range|t_index|sv.size()}}。
* 如果 {{c|t_index &gt; sv.size()}} 或 {{c|index &gt; size()}}，那么抛出 {{lc|std::out_of_range}}}}

如果 {{c|pos}} 不是 {{c|*this}} 上的有效迭代器，那么行为未定义。

===参数===
{{par begin}}
{{par|index|插入内容到的位置}}
{{par|pos|将插入字符到它之前的迭代器}}
{{par|ch|要插入的字符}}
{{par|count|要插入的字符数}}
{{par|s|指向要插入的字符串的指针}}
{{par|str|要插入的字符串}}
{{par|first, last|定义要插入字符的范围}}
{{par|s_index|{{c|str}} 中要插入的首字符位置}}
{{par|ilist|要插入的字符来源的 {{lc|std::initializer_list}}}}
{{par|t|要插入的字符来源对象（可转换到 {{lc|std::basic_string_view}}）}}
{{par|t_index|{{c|t}} 中要插入的首字符位置}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par end}}

===返回值===
@1-5@ {{c|*this}}

@6-9@ 指代首个被插入字符的迭代器，或者在未插入字符时就是 {{c|pos}}（{{c|1=count == 0}}，{{c|1=ilist.size() == 0}} 或 {{c|1=first == last}}）

@10,11@ {{c|*this}}

===异常===
@1-4,10@ 在 {{c|index &gt; size()}} 时抛出 {{lc|std::out_of_range}}。
@5@ 在 {{c|index &gt; size()}} 或 {{c|s_index &gt; str.size()}} 时抛出 {{lc|std::out_of_range}}。
@11@ 在 {{c|index &gt; size()}} 或 {{c|t_index &gt; sv.size()}} 时抛出 {{lc|std::out_of_range}}。

在所有情况下，当 {{c|size() + ins_count &gt; max_size()}} 时抛出 {{lc|std::length_error}}，其中 {{c|ins_count}} 是将要插入的字符数。

{{rrev|since=c++20|
在所有情况下，如果 {{c/core|std::allocator_traits&lt;Allocator&gt;::allocate}} 抛出了异常，那么它会被重抛。
}}

{{cpp/strong exception safety guarantee}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;

using namespace std::string_literals;

int main()
{
    std::string s = "xmplr";
    
    // insert(size_type index, size_type count, char ch)
    s.insert(0, 1, 'E');
    assert("Exmplr" == s);
    
    // insert(size_type index, const char* s)
    s.insert(2, "e");
    assert("Exemplr" == s);
    
    // insert(size_type index, string const&amp; str)
    s.insert(6, "a"s);
    assert("Exemplar" == s);
    
    // insert(size_type index, string const&amp; str,
    //        size_type s_index, size_type count)
    s.insert(8, " is an example string."s, 0, 14);
    assert("Exemplar is an example" == s);
    
    // insert(const_iterator pos, char ch)
    s.insert(s.cbegin() + s.find_first_of('n') + 1, ':');
    assert("Exemplar is an: example" == s);
    
    // insert(const_iterator pos, size_type count, char ch)
    s.insert(s.cbegin() + s.find_first_of(':') + 1, 2, '=');
    assert("Exemplar is an:== example" == s);
    
    // insert(const_iterator pos, InputIt first, InputIt last)
    {
        std::string seq = " string";
        s.insert(s.begin() + s.find_last_of('e') + 1,
            std::begin(seq), std::end(seq));
        assert("Exemplar is an:== example string" == s);
    }
    
    // insert(const_iterator pos, std::initializer_list&lt;char&gt;)
    s.insert(s.cbegin() + s.find_first_of('g') + 1, {'.'});
    assert("Exemplar is an:== example string." == s);
}
|output=
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=7|std=C++98|before=重载 {{v|8}} 的效果错误地涉及了实际不存在的重载|after=修正为正确地涉及重载 {{v|4}}}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=没有异常安全保证|after=添加强异常安全保证}}
{{dr list item|wg=lwg|dr=2946|std=C++17|before=重载 {{v|10}} 在某些情况下会导致歧义|after=通过使之为模板来避免}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc insert_range}}
{{dsc inc|cpp/string/basic_string/dsc append}}
{{dsc inc|cpp/string/basic_string/dsc push_back}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
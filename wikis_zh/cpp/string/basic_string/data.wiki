{{cpp/string/basic_string/title|data}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl|num=1|notes={{mark noexcept since c++11}}&lt;br&gt;{{mark constexpr since c++20}}|
const CharT* data() const;
}}
{{dcl|num=2|notes={{mark constexpr since c++20}}|since=c++17|
CharT* data() noexcept;
}}
{{dcl end}}

返回指向用作字符存储的底层数组的指针。此指针满足范围 

{{rrev multi|until1=c++11
|rev1=
{{range|data()|data() + size()}}
|rev2=
{{closed range|data()|data() + size()}}
}}

有效，且其中的值对应存储于字符串的值。

{{rrev multi|until1=c++11|rev1=
不要求返回的数组是空终止的。

若 {{lc|empty()}} 返回 {{c|true}}，则指针指向不应解引用的非空指针。
|rev2=
返回的数组是空终止的，即 {{tt|data()}} 与 {{lc|c_str()}} 进行同一功能。

若 {{lc|empty()}} 返回 {{c|true}}，则指针指向单个空字符。
}}

指向 {{tt|data()}} 的指针可能因以下情况失效：
* 传递此字符串的非 const 引用给任何标准库函数，或
* 在此字符串上调用非 const 成员函数，除了 {{rlpt|operator_at|operator[]()}}、{{lc|at()}}、{{lc|front()}}、{{lc|back()}}、{{lc|begin()}}、{{lc|end()}}、{{lc|rbegin()}}、{{lc|rend()}}。

@1@ 通过 {{tt|data}} 的 const 重载修改数组有未定义行为。
@2@ 修改存储于 {{tt|data() + }}{{lc|size()}} 的尾后空终止符为任何异于 {{tt|CharT()}} 的值有未定义行为。

===参数===
（无）

===返回值===
指向底层字符存储的指针。

{{rrev multi|until1=c++11|rev1=
对 {{range|0|size()}} 中的每个 {{tt|i}} 有 {{c|1=data()[i] == operator[](i)}}。
|rev2=
对 {{closed range|0|size()}} 中的每个 {{tt|i}} 有 {{c|1=data() + i == std::addressof(operator[](i))}}。
}}

===复杂度===
常数。

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;cstring&gt;
#include &lt;string&gt;

int main()
{
    std::string const s("Emplary");
    assert(s.size() == std::strlen(s.data()));
    assert(std::equal(s.begin(), s.end(), s.data()));
    assert(std::equal(s.data(), s.data() + s.size(), s.begin()));
    assert('\0' == *(s.data() + s.size()));
}
|output=
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc front}}
{{dsc inc|cpp/string/basic_string/dsc back}}
{{dsc inc|cpp/string/basic_string/dsc c_str}}
{{dsc inc|cpp/string/basic_string_view/dsc {{SUBPAGENAMEE}}}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
{{cpp/string/basic_string/title|reserve}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl rev multi|num=1|until1=c++20
|dcl1=
void reserve( size_type new_cap = 0 );
|dcl2=
constexpr void reserve( size_type new_cap );
}}
{{dcl|num=2|since=c++20|deprecated=c++20|removed=c++26|
void reserve();
}}
{{dcl end}}

@1@ 告知 {{tt|std::basic_string}} 对象大小的有计划更改，使得它能准确地管理存储分配。
* 如果 {{c|new_cap}} 大于当前 {{lc|capacity()}}，那么分配新存储，并使 {{lc|capacity()}} 大于或等于 {{c|new_cap}}。
{{rrev multi|until1=c++20|rev1=
* 如果 {{c|new_cap}} 小于当前 {{lc|capacity()}}，那么这是非强制的收缩请求。
* 如果 {{c|new_cap}} 小于当前 {{lc|size()}}，那么这是非强制的收缩到适合（shrink-to-fit）请求{{rev inl|since=c++11|，等价于 {{lc|shrink_to_fit()}}}}。
|rev2=
* 如果 {{c|new_cap}} 小于或等于当前 {{lc|capacity()}}，那么没有效果。
}}

@@ 如果容量有更改，那么所有迭代器与引用（包含尾后迭代器）都会失效。

@2@ 非强制的收缩到适合请求。调用后 {{lc|capacity()}} 拥有大于或等于 {{lc|size()}} 的未指定值。

===参数===
{{par begin}}
{{par|new_cap|字符串的新容量}}
{{par end}}

===返回值===
（无）

===异常===
如果 {{c|new_cap}} 大于 {{lc|max_size()}}，那么就会抛出 {{lc|std::length_error}}。

可能抛出任何 {{c|std::allocator_traits&lt;Allocator&gt;::allocate()}} 抛出的异常，如 {{lc|std::bad_alloc}}。

{{cpp/strong exception safety guarantee}}

===复杂度===
至多与字符串的 {{lc|size()}} 成线性。

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::string s;
    std::cout &lt;&lt; "1) 起初: " &lt;&lt; s.capacity() &lt;&lt; '\n';
    
    const std::string::size_type new_cap{101u};
    s.reserve(new_cap);
    assert(s.capacity() &gt;= new_cap);
    std::cout &lt;&lt; "2) reserve(" &lt;&lt; new_cap &lt;&lt; ") 之后: " &lt;&lt; s.capacity() &lt;&lt; '\n';
    
    // 观察容量增长因子
    auto cap{s.capacity()};
    for (int check{}; check != 4; ++check)
    {
        while (cap == s.capacity())
            s += '$';
        cap = s.capacity();
        std::cout &lt;&lt; (3) + check &lt;&lt; ") 容量: " &lt;&lt; cap &lt;&lt; '\n';
    }
    
//  s.reserve(); // C++20/26 中弃用/移除，应使用:
    s.shrink_to_fit();
    std::cout &lt;&lt; "7) shrink_to_fit 之后: " &lt;&lt; s.capacity() &lt;&lt; '\n';
}
|p=true
|output=
1) 起初: 15
2) reserve(101) 之后: 101
3) 容量: 202
4) 容量: 404
5) 容量: 808
6) 容量: 1616
7) shrink_to_fit 之后: 809
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=没有异常安全保证|after=添加强异常安全保证}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc capacity}}
{{dsc inc|cpp/string/basic_string/dsc resize}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
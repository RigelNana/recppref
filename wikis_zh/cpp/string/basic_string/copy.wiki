{{cpp/string/basic_string/title|copy}}
{{cpp/string/basic_string/navbar}}
{{ddcl|notes={{mark constexpr since c++20}}|1=
size_type copy( CharT* dest, size_type count, size_type pos = 0 ) const;
}}

复制子串 {{range|pos|pos + count}} 到 {{c|dest}} 指向的字符串。如果请求的子串越过字符串结尾，或 {{c|1=count == npos}}，那么复制的子串是 {{range/core|{{c|pos}}|{{rlpf|size}}}}。

产生的字符串不是空终止的。

===参数===
{{par begin}}
{{par|dest|指向目标字符串的指针}}
{{par|count|子串长度}}
{{par|pos|所包含的首字符位置}}
{{par end}}

===返回值===
复制的字符数。

===异常===
在 {{c|pos &gt; size()}} 时抛出 {{lc|std::out_of_range}}。

{{cpp/strong exception safety guarantee}}

===复杂度===
与 {{c|count}} 成线性。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::string foo("WINE");
    
    // 花括号初始化会将所有字符初始化为 0，提供空终止符
    char bar[4]{};
    
    // 为确保空终止，不复制最后一个字符
    foo.copy(bar, sizeof bar - 1);
 
    std::cout &lt;&lt; bar &lt;&lt; '\n'; // bar 需要是空终止的
}
|output=
WIN
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=没有异常安全保证|after=添加强异常安全保证}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc substr}}
{{dsc inc|cpp/string/basic_string_view/dsc copy}}
{{dsc inc|cpp/algorithm/dsc copy}}
{{dsc inc|cpp/string/byte/dsc memcpy}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
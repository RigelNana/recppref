{{cpp/title|to_wstring}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl header|string}}
{{dcl|num=1|since=c++11|
std::wstring to_wstring( int value );
}}
{{dcl|num=2|since=c++11|
std::wstring to_wstring( long value );
}}
{{dcl|num=3|since=c++11|
std::wstring to_wstring( long long value );
}}
{{dcl|num=4|since=c++11|
std::wstring to_wstring( unsigned value );
}}
{{dcl|num=5|since=c++11|
std::wstring to_wstring( unsigned long value );
}}
{{dcl|num=6|since=c++11|
std::wstring to_wstring( unsigned long long value );
}}
{{dcl|num=7|since=c++11|
std::wstring to_wstring( float value );
}}
{{dcl|num=8|since=c++11|
std::wstring to_wstring( double value );
}}
{{dcl|num=9|since=c++11|
std::wstring to_wstring( long double value );
}}
{{dcl end}}

转换数值为 {{lc|std::wstring}}。

{{rrev multi|until1=c++26
|rev1=
令 {{tti|buf}} 为一个足够容纳结果的内部转换函数缓冲区。

@1@ 转换有符号十进制整数为宽字符串，其内容与 {{c|std::swprintf(buf, sz, L"%d", value)}} 对于充分大的 {{tt|buf}} 将会生成的内容相同。
@2@ 转换有符号十进制整数为宽字符串，其内容与 {{c|std::swprintf(buf, sz, L"%ld", value)}} 对于充分大的 {{tt|buf}} 将会生成的内容相同。
@3@ 转换有符号十进制整数为宽字符串，其内容与 {{c|std::swprintf(buf, sz, L"%lld", value)}} 对于充分大的 {{tt|buf}} 将会生成的内容相同。
@4@ 转换无符号十进制整数为宽字符串，其内容与 {{c|std::swprintf(buf, sz, L"%u", value)}} 对于充分大的 {{tt|buf}} 将会生成的内容相同。
@5@ 转换无符号十进制整数为宽字符串，其内容与 {{c|std::swprintf(buf, sz, L"%lu", value)}} 对于充分大的 {{tt|buf}} 将会生成的内容相同。
@6@ 转换无符号十进制整数为宽字符串，其内容与 {{c|std::swprintf(buf, sz, L"%llu", value)}} 对于充分大的 {{tt|buf}} 将会生成的内容相同。
@7,8@ 转换浮点数为宽字符串，其内容与 {{c|std::swprintf(buf, sz, L"%f", value)}} 对于充分大的 {{tt|buf}} 将会生成的内容相同。
@9@ 转换浮点数为宽字符串，其内容与 {{c|std::swprintf(buf, sz, L"%Lf", value)}} 对于充分大的 {{tt|buf}} 将会生成的内容相同。
|rev2=
@1-9@ 如同 {{c|std::format(L"{}", value)}} 转换数值为宽字符串。
}}

===参数===
{{par begin}}
{{par|value|要转换的数值}}
{{par end}}

===返回值===
保有转换后值的宽字符串

===异常===
可能从 {{lc|std::wstring}} 的构造函数抛出 {{lc|std::bad_alloc}}。

===示例===
{{example|
|code= 
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    for (const double f : {23.43, 1e-9, 1e40, 1e-40, 123456789.0})
        std::wcout &lt;&lt; "std::wcout: " &lt;&lt; f &lt;&lt; '\n'
                   &lt;&lt; "to_wstring: " &lt;&lt; std::to_wstring(f) &lt;&lt; "\n\n";
}
|output=
std::wcout: 23.43
to_wstring: 23.430000

std::wcout: 1e-09
to_wstring: 0.000000

std::wcout: 1e+40
to_wstring: 10000000000000000303786028427003666890752.000000

std::wcout: 1e-40
to_wstring: 0.000000

std::wcout: 1.23457e+08
to_wstring: 123456789.000000
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc to_string}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
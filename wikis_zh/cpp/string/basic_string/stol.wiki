{{cpp/title|stoi|stol|stoll}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl header|string}}
{{dcl|num=1|since=c++11|1=
int       stoi ( const std::string&amp; str,
                 std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl|num=2|since=c++11|1=
int       stoi ( const std::wstring&amp; str,
                 std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl|num=3|since=c++11|1=
long      stol ( const std::string&amp; str,
                 std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl|num=4|since=c++11|1=
long      stol ( const std::wstring&amp; str,
                 std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl|num=5|since=c++11|1=
long long stoll( const std::string&amp; str,
                 std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl|num=6|since=c++11|1=
long long stoll( const std::wstring&amp; str,
                 std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl end}}

转译字符串 {{c|str}} 中的有符号整数值。

令 {{c|ptr}} 为（提供给转换函数的）一个类型是 {{c/core|char*}} {{v|1,3,5}} 或 {{c/core|wchar_t*}} {{v|2,4,6}} 的内部指针：

@1@ 调用 {{c|std::strtol(str.c_str(), &amp;ptr, base)}}。
@2@ 调用 {{c|std::wcstol(str.c_str(), &amp;ptr, base)}}。
@3@ 调用 {{c|std::strtol(str.c_str(), &amp;ptr, base)}}。
@4@ 调用 {{c|std::wcstol(str.c_str(), &amp;ptr, base)}}。
@5@ 调用 {{c|std::strtoll(str.c_str(), &amp;ptr, base)}}。
@6@ 调用 {{c|std::wcstoll(str.c_str(), &amp;ptr, base)}}。

{{cpp/string/cvt str2int base|base={{c|base}}}}

如果 {{c|pos}} 不是空指针，那么指针 {{c|ptr}} 会接收 {{c|str.c_str()}} 中首个未转换字符的地址，将计算该字符的下标将它存储到 {{c|*pos}}，该对象会给出转换所处理的字符数。

===参数===
{{par begin}}
{{par|str|要转换的字符串}}
{{par|pos|存储已处理字符数的整数的地址}}
{{par|base|数的底}}
{{par end}}

===返回值===
对应 {{c|str}} 内容的整数值。

===异常===
* 无法进行转换时会抛出 {{lc|std::invalid_argument}}。
* 转换值会落在结果类型的范围外，或底层函数（即 {{lc|std::strtol}} 或 {{lc|std::strtoll}}）将 {{c|errno}} 设置为 {{c|ERANGE}} 时会抛出 {{lc|std::out_of_range}}。

===示例===
{{example|
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;
#include &lt;utility&gt;

int main()
{
    const auto data =
    {
        "45",
        "+45",
        " -45",
        "3.14159",
        "31337 with words",
        "words and 2",
        "12345678901",
    };
    
    for (const std::string s : data)
    {
        std::size_t pos{};
        try
        {
            std::cout &lt;&lt; "std::stoi(" &lt;&lt; std::quoted(s) &lt;&lt; ")：";
            const int i{std::stoi(s, &amp;pos)};
            std::cout &lt;&lt; i &lt;&lt; "；pos：" &lt;&lt; pos &lt;&lt; '\n';
        }
        catch (std::invalid_argument const&amp; ex)
        {
            std::cout &lt;&lt; "std::invalid_argument::what()：" &lt;&lt; ex.what() &lt;&lt; '\n';
        }
        catch (std::out_of_range const&amp; ex)
        {
            std::cout &lt;&lt; "std::out_of_range::what()：" &lt;&lt; ex.what() &lt;&lt; '\n';
            const long long ll{std::stoll(s, &amp;pos)};
            std::cout &lt;&lt; "std::stoll(" &lt;&lt; std::quoted(s) &lt;&lt; ")：" &lt;&lt; ll
                      &lt;&lt; "；pos：" &lt;&lt; pos &lt;&lt; '\n';
        }
    }
    
    std::cout &lt;&lt; "\n以不同的底进行调用：\n";
    for (const auto&amp; [s, base] : {std::pair&lt;const char*, int&gt;
        {"11",  2}, {"22",  3}, {"33",  4}, {"77",  8},
        {"99", 10}, {"FF", 16}, {"jJ", 20}, {"Zz", 36}&lt;!----&gt;})
    {
        const int i{std::stoi(s, nullptr, base)};
        std::cout &lt;&lt; "std::stoi(" &lt;&lt; std::quoted(s)
                  &lt;&lt; ", nullptr, " &lt;&lt; base &lt;&lt; ")：" &lt;&lt; i &lt;&lt; '\n';
    }
}
|p=true
|output=
std::stoi("45")：45；pos：2
std::stoi("+45")：45；pos：3
std::stoi(" -45")：-45；pos：4
std::stoi("3.14159")：3；pos：1
std::stoi("31337 with words")：31337；pos：5
std::stoi("words and 2")：std::invalid_argument::what()：stoi
std::stoi("12345678901")：std::out_of_range::what()：stoi
std::stoll("12345678901")：12345678901；pos：11

以不同的底进行调用：
std::stoi("11", nullptr, 2)：3
std::stoi("22", nullptr, 3)：8
std::stoi("33", nullptr, 4)：15
std::stoi("77", nullptr, 8)：63
std::stoi("99", nullptr, 10)：99
std::stoi("FF", nullptr, 16)：255
std::stoi("jJ", nullptr, 20)：399
std::stoi("Zz", nullptr, 36)：1295
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2009|std=C++11|before=在 {{lc|std::strtol}} 或 {{lc|std::strtoll}} 将 {{lc|errno}} 设置为 {{lc|ERANGE}} 时不会抛出 {{lc|std::out_of_range}}|after=会抛出}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc stoul}}
{{dsc inc|cpp/string/basic_string/dsc stof}}
{{dsc inc|cpp/string/byte/dsc strtol}}
{{dsc inc|cpp/string/byte/dsc strtoul}}
{{dsc inc|cpp/string/byte/dsc strtoimax}}
{{dsc inc|cpp/utility/dsc from_chars}}
{{dsc inc|cpp/string/byte/dsc atoi}}
{{dsc inc|cpp/string/basic_string/dsc to_string}}
{{dsc inc|cpp/string/basic_string/dsc to_wstring}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
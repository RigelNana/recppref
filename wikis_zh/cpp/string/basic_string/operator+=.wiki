{{cpp/string/basic_string/title|operator+{{=}}}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl|num=1|notes={{mark constexpr since c++20}}|1=
basic_string&amp; operator+=( const basic_string&amp; str );
}}
{{dcl|num=2|notes={{mark constexpr since c++20}}|1=
basic_string&amp; operator+=( CharT ch );
}}
{{dcl|num=3|notes={{mark constexpr since c++20}}|1=
basic_string&amp; operator+=( const CharT* s );
}}
{{dcl|num=4|notes={{mark constexpr since c++20}}|since=c++11|1=
basic_string&amp; operator+=( std::initializer_list&lt;CharT&gt; ilist );
}}
{{dcl|num=5|notes={{mark constexpr since c++20}}|since=c++17|1=
template&lt; class StringViewLike &gt;
basic_string&amp; operator+=( const StringViewLike&amp; t );
}}
{{dcl end}}

向字符串后附额外字符。

@1@ 后附字符串 {{c|str}}。

@2@ 后附字符 {{c|ch}}。

@3@ 后附 {{c|s}} 所指向的空终止字符串。

@4@ 后附初始化式列表 {{c|ilist}} 中的字符。

@5@ {{cpp/string/sv hack|如同用 {{c|append(sv)}} 后附字符串视图 {{c|sv}} 中的字符}}

===参数===
{{par begin}}
{{par|str|要后附的字符串}}
{{par|ch|要后附的字符}}
{{par|s|指向要后附的空终止字符串的指针}}
{{par|ilist|拥有要后附的字符的 {{lc|std::initializer_list}}}}
{{par|t|拥有要后附的字符的（可转换到 {{lc|std::basic_string_view}} 的）对象}}
{{par end}} 

===返回值===
{{c|*this}}

===复杂度===
无标准的复杂度保证，典型实现表现类似 {{l2tf std|cpp/container/vector/insert}}。

===异常===
{{cpp/string/basic_string/length error note}}

{{cpp/strong exception safety guarantee}}

===注解===
重载 {{v|2}} 能接受任何可隐式转换到 {{tt|CharT}} 的类型。对于 {{tt|CharT}} 是 {{c/core|char}} 的 {{tt|std::string}}，可接受类型的集合包含任何算术类型。这可能具有意料之外的效果。

===示例===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::string str;

    // 预留足够的存储空间以避免内存重新分配
    str.reserve(50);

    std::cout &lt;&lt; std::quoted(str) &lt;&lt; '\n'; // 空字符串
    
    str += "This";
    std::cout &lt;&lt; std::quoted(str) &lt;&lt; '\n';
    
    str += std::string(" is ");
    std::cout &lt;&lt; std::quoted(str) &lt;&lt; '\n';
    
    str += 'a';
    std::cout &lt;&lt; std::quoted(str) &lt;&lt; '\n';
    
    str += {' ', 's', 't', 'r', 'i', 'n', 'g', '.'};
    std::cout &lt;&lt; std::quoted(str) &lt;&lt; '\n';
    
    str += 69.96; // 等价于 str += static_cast&lt;char&gt;(69.96)；
                  // 用重载 (2) 后附 'E'（ASCII 码为 69），可能不合意图

    // 为添加数值，应考虑使用 std::to_string()：
    str += std::to_string(1729);

    std::cout &lt;&lt; std::quoted(str) &lt;&lt; '\n';
}
|output=
""
"This"
"This is "
"This is a"
"This is a string."
"This is a string.E1729"
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=没有异常安全保证|after=添加强异常安全保证}}
{{dr list item|wg=lwg|dr=2946|std=C++17|before=重载 {{v|5}} 在某些情况下会导致歧义|after=通过使之为模板来避免}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc append}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
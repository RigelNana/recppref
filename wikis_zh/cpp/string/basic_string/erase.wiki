{{cpp/string/basic_string/title|erase}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl rev multi|num=1
|until1=c++20|dcl1=
basic_string&amp; erase( size_type index = 0, size_type count = npos );
|dcl2=
constexpr basic_string&amp; erase( size_type index = 0, size_type count = npos );
}}
{{dcl rev multi|num=2|anchor=2
|until1=c++11|dcl1=
iterator erase( iterator position );
|until2=c++20|dcl2=
iterator erase( const_iterator position );
|dcl3=
constexpr iterator erase( const_iterator position );
}}
{{dcl rev multi|num=3|anchor=3
|until1=c++11|dcl1=
iterator erase( iterator first, iterator last );
|until2=c++20|dcl2=
iterator erase( const_iterator first, const_iterator last );
|dcl3=
constexpr iterator erase( const_iterator first, const_iterator last );
}}
{{dcl end}}

从字符串移除指定的字符。

@1@ 移除从 {{c|index}} 开始的 {{c|std::min(count, size() - index)}} 个字符。

@2@ 移除位于 {{c|position}} 的字符。

@@ 如果 {{c|position}} 不是 {{c|*this}} 上的[[cpp/iterator#可解引用性与有效性|可解引用迭代器]]，那么行为未定义。

@3@ 移除范围 {{range|first|last}} 中的字符。

@@ 如果 {{c|first}} 或 {{c|last}} 不是 {{c|*this}} 上的[[cpp/iterator#可解引用性与有效性|有效迭代器]]，或者 {{range|first|last}} 不是[[cpp/iterator#范围|有效范围]]，那么行为未定义。

===参数===
{{par begin}}
{{par|index|要移除的首个字符}}
{{par|count|要移除的字符数}}
{{par|position|指向要移除的字符的迭代器}}
{{par|first, last|要移除的字符范围}}
{{par end}} 

===返回值===
@1@ {{c|*this}}

@2@ 指向紧跟被擦除字符之后的迭代器，或者在不存在这种字符的情况下返回 {{lc|end()}}。

@3@ 指向擦除前 {{c|last}} 指向的字符的迭代器，或者在不存在这种字符的情况下返回 {{lc|end()}}。

===异常===
@1@ 在 {{c|index &gt; size()}} 时抛出 {{lc|std::out_of_range}}。
@2,3@ 不抛出。

{{cpp/strong exception safety guarantee}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;

int main()
{
    std::string s = "This Is An Example";
    std::cout &lt;&lt; "1) " &lt;&lt; s &lt;&lt; '\n';
    
    s.erase(7, 3); // 使用重载 (1) 擦除 " An"
    std::cout &lt;&lt; "2) " &lt;&lt; s &lt;&lt; '\n';
    
    s.erase(std::find(s.begin(), s.end(), ' ')); // 使用重载 (2) 擦除第一个 ' '
    std::cout &lt;&lt; "3) " &lt;&lt; s &lt;&lt; '\n';
    
    s.erase(s.find(' ')); // 使用重载 (1) 截掉从 ' ' 到字符串结尾的部分
    std::cout &lt;&lt; "4) " &lt;&lt; s &lt;&lt; '\n';
    
    auto it = std::next(s.begin(), s.find('s')); // 获取指向第一个 's' 的迭代器
    s.erase(it, std::next(it, 2)); // 使用重载 (3) 擦除 "sI"
    std::cout &lt;&lt; "5) " &lt;&lt; s &lt;&lt; '\n';
}
|output=
1) This Is An Example
2) This Is Example
3) ThisIs Example
4) ThisIs
5) This
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=27|std=C++98|before=重载 {{v|3}} 没有擦除 {{c|last}} 指向的字符，但它返回了指向立即后随该字符的迭代器|after=返回指向该字符的迭代器}}
{{dr list item|wg=lwg|dr=428|std=C++98|before=重载 {{v|2}} 显式要求 {{c|position}} 合法，但&lt;br&gt;{{named req|SequenceContainer}}要求它可解引用（更严格）|after=移除该显式要求}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=没有异常安全保证|after=添加强异常安全保证}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc clear}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
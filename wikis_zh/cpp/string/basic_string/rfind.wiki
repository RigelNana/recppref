{{cpp/string/basic_string/title|rfind}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|anchor=no|num=1|noexcept=c++11|constexpr=c++20|1=
size_type rfind( const basic_string&amp; str, size_type pos = npos ) const;
}}
{{dcla|anchor=no|num=2|constexpr=c++20|1=
size_type rfind( const CharT* s, size_type pos, size_type count ) const;
}}
{{dcla|anchor=no|num=3|constexpr=c++20|1=
size_type rfind( const CharT* s, size_type pos = npos ) const;
}}
{{dcla|anchor=no|num=4|noexcept=c++11|constexpr=c++20|1=
size_type rfind( CharT ch, size_type pos = npos ) const;
}}
{{dcla|anchor=no|num=5|since=c++17|constexpr=c++20|1=
template&lt; class StringViewLike &gt;
size_type rfind( const StringViewLike&amp; t,
                 size_type pos = npos ) const noexcept(/* 见下文 */);
}}
{{dcl end}}

寻找最后一个等于给定字符序列的子串。搜索从 {{c|pos}} 开始并从右向左进行（因此，找到的子串不会从 {{c|pos}} 之后的位置开始）。如果将 {{lc|npos}} 或任何不小于 {{box|{{lc|size()}}{{c/core| - 1}}}} 的值作为 {{c|pos}} 传递，那么就会在整个字符串中搜索。

@1@ 寻找最后一个等于 {{c|str}} 的子串。

@2@ 寻找最后一个等于范围 {{range|s|s + count}} 的子串。此范围可以包含空字符。

@@ 如果 {{range|s|s + count}} 不是[[cpp/iterator#范围|有效范围]]，那么行为未定义。

@3@ 寻找最后一个等于 {{c|s}} 所指向的字符串的子串。该字符串的长度由首个空字符，通过 {{c|Traits::length(s)}} 确定。

@@ 如果 {{range|s|s + Traits::length(s)}} 不是[[cpp/iterator#范围|有效范围]]，那么行为未定义。

@4@ 寻找最后一个等于 {{c|ch}} 的字符。

@5@ {{cpp/string/sv hack|寻找最后一个等于 {{c|sv}} 内容的子串}}

所有情况下均调用 {{ltt|cpp/string/char_traits/cmp|Traits::eq}} 检查相等性。

===参数===
{{par begin}}
{{par|str|要搜索的字符串}}
{{par|pos|开始搜索的位置}}
{{par|count|要搜索的子串长度}}
{{par|s|指向要搜索的字符串的指针}}
{{par|ch|要搜索的字符}}
{{par|t|要搜索的对象（可转换到 {{lc|std::basic_string_view}}）}}
{{par end}}

===返回值===
找到的子串的首字符位置，或者在找不到这种子串则时返回 {{lc|npos}}。注意这是从字符串开始，而非末尾的偏移。

如果搜索的是空字符串（{{c|str.size()}}，{{c|count}} 或 {{c|Traits::length(s)}} 为零），那么立即找到空字符串并返回：
* {{c|pos}}，如果 {{c|pos &lt; size()}}；
* 否则是 {{c|size()}}，包括 {{c|1=pos == npos}} 的情况。

否则，如果 {{lc|size()}} 为零，那么始终返回 {{lc|npos}}。

===异常===
@1,4@ 不抛出。
@5@ {{noexcept|std::is_nothrow_convertible_v&lt;const T&amp;, std::basic_string_view&lt;CharT, Traits&gt;&gt;}}

{{cpp/strong exception safety guarantee}}

===示例===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

void print(std::string::size_type n,
           std::string::size_type len,
           std::string const &amp;s)
{
    if (n == std::string::npos)
        std::cout &lt;&lt; "没有找到\n";
    else
        std::cout &lt;&lt; "在位置 " &lt;&lt; n &lt;&lt; " 找到了 " &lt;&lt; std::quoted(s.substr(n, len)) &lt;&lt; '\n';
}

int main()
{
    std::string::size_type n;
    std::string const s = "This is a string";
    
    // 从字符串尾反向搜索
    n = s.rfind("is");
    print(n, 2, s);
    
    // 从位置 4 反向搜索
    n = s.rfind("is", 4);
    print(n, 2, s);
    
    // 寻找单个字符
    n = s.rfind('s');
    print(n, 1, s);
    
    // 寻找单个字符
    n = s.rfind('q');
    print(n, 1, s);
    
    // 寻找前缀（参见 s.starts_with("This")）
    n = s.rfind("This", 0);
    print(n, 4, s);
}
|output=
在位置 5 找到了 "is"
在位置 2 找到了 "is"
在位置 10 找到了 "s"
没有找到
在位置 0 找到了 "This"
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=没有异常安全保证|after=添加强异常安全保证}}
{{dr list item|wg=lwg|dr=2064|std=C++11|before=重载 {{v|3,4}} 是 noexcept 的|after=移除}}
{{dr list item|wg=lwg|dr=2946|std=C++17|before=重载 {{v|5}} 在某些情况下会导致歧义|after=通过使之为模板来避免}}
{{dr list item|paper=P1148R0|std=C++11&lt;br&gt;C++17|before=重载 {{v|4,5}} 的 noexcept 意外地被 LWG2064/LWG2946 丢弃|after=恢复}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc find}}
{{dsc inc|cpp/string/basic_string/dsc find_first_of}}
{{dsc inc|cpp/string/basic_string/dsc find_first_not_of}}
{{dsc inc|cpp/string/basic_string/dsc find_last_of}}
{{dsc inc|cpp/string/basic_string/dsc find_last_not_of}}
{{dsc inc|cpp/string/basic_string_view/dsc rfind}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|to_string}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl header|string}}
{{dcl|num=1|since=c++11|
std::string to_string( int value );
}}
{{dcl|num=2|since=c++11|
std::string to_string( long value );
}}
{{dcl|num=3|since=c++11|
std::string to_string( long long value );
}}
{{dcl|num=4|since=c++11|
std::string to_string( unsigned value );
}}
{{dcl|num=5|since=c++11|
std::string to_string( unsigned long value );
}}
{{dcl|num=6|since=c++11|
std::string to_string( unsigned long long value );
}}
{{dcl|num=7|since=c++11|
std::string to_string( float value );
}}
{{dcl|num=8|since=c++11|
std::string to_string( double value );
}}
{{dcl|num=9|since=c++11|
std::string to_string( long double value );
}}
{{dcl end}}

将数值转换为 {{lc|std::string}}。

{{rrev multi|until1=c++26
|rev1=
令 {{tti|buf}} 为一个足够容纳结果的内部转换函数缓冲区。

@1@ 把有符号十进制整数转换为字符串，如同 {{c|std::sprintf(buf, "%d", value)}}。
@2@ 把有符号十进制整数转换为字符串，如同 {{c|std::sprintf(buf, "%ld", value)}}。
@3@ 把有符号十进制整数转换为字符串，如同 {{c|std::sprintf(buf, "%lld", value)}}。
@4@ 把无符号十进制整数转换为字符串，如同 {{c|std::sprintf(buf, "%u", value)}}。
@5@ 把无符号十进制整数转换为字符串，如同 {{c|std::sprintf(buf, "%lu", value)}}。
@6@ 把无符号十进制整数转换为字符串，如同 {{c|std::sprintf(buf, "%llu", value)}}。
@7,8@ 把浮点数转换为字符串，如同 {{c|std::sprintf(buf, "%f", value)}}。
@9@ 把浮点数转换为字符串，如同 {{c|std::sprintf(buf, "%Lf", value)}}。
|rev2=
@1-9@ 如同 {{c|std::format("{}", value)}} 转换数值为字符串。
}}

===参数===
{{par begin}}
{{par|value|需要转换的数值}}
{{par end}}

===返回值===
包含转换后数值的字符串

===异常===
可能从 {{lc|std::string}} 的构造函数抛出 {{lc|std::bad_alloc}}。

===注解===
* 对于浮点数类型，{{tt|std::to_string}} 可能产生不期待的结果，因为返回的字符串中的有效位数能为零，见示例。
* 返回值可以明显地有别于 {{tt|std::cout}} 所默认打印的结果，见示例。
{{rrev|until=c++26|
* {{tt|std::to_string}} 由于格式化目的依赖当前 C 本地环境，从而从多个线程同时调用 {{tt|std::to_string}} 可能会导致调用的部分序列化结果。
** 对整数类型的重载的结果不依赖当前 C 本地环境，从而实现通常为了正确性和性能，在这些重载中避免访问当前 C 本地环境。然而标准不保证避免这点。
}}

C++17 提供高性能、不依赖本地环境的替用品 {{ltt|cpp/utility/to_chars|std::to_chars}}。

{{feature test macro|__cpp_lib_to_string|用 {{lc|std::format}} 重新定义 {{tt|std::to_string}}|std=C++26|value=202306L}}

===示例===
{{example
|code=
#include &lt;cstdio&gt;
#include &lt;format&gt;
#include &lt;initializer_list&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

#if __cpp_lib_to_string &gt;= 202306L
constexpr auto revision() { return " (C++26 后)"; }
#else
constexpr auto revision() { return " (C++26 前)"; }
#endif

int main()
{
    for (const double f : {1.23456789555555, 23.43, 1e-9, 1e40, 1e-40, 123456789.0})
    {
        std::cout &lt;&lt; "to_string:\t" &lt;&lt; std::to_string(f) &lt;&lt; revision() &lt;&lt; '\n';

        // C++26 之前，std::to_string 的输出与 std::printf 匹配。
        std::printf("printf:\t\t%f\n", f);

        // C++26 起，std::to_string 的输出与 std::format 匹配。
        std::cout &lt;&lt; std::format("format:\t\t{}\n", f);

        std::cout &lt;&lt; "std::cout:\t" &lt;&lt; f &lt;&lt; "\n\n";
    }
}
|p=true
|output=
to_string:      1.234568 (C++26 前)
printf:         1.234568
format:         1.23456789555555
std::cout:      1.23457

to_string:      23.430000 (C++26 前)
printf:         23.430000
format:         23.43
std::cout:      23.43

to_string:      0.000000 (C++26 前)
printf:         0.000000
format:         1e-09
std::cout:      1e-09

to_string:      10000000000000000303786028427003666890752.000000 (C++26 前)
printf:         10000000000000000303786028427003666890752.000000
format:         1e+40
std::cout:      1e+40

to_string:      0.000000 (C++26 前)
printf:         0.000000
format:         1e-40
std::cout:      1e-40

to_string:      123456789.000000 (C++26 前)
printf:         123456789.000000
format:         123456789
std::cout:      1.23457e+08
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc to_wstring}}
{{dsc inc|cpp/string/basic_string/dsc stoul}}
{{dsc inc|cpp/string/basic_string/dsc stol}}
{{dsc inc|cpp/string/basic_string/dsc stof}}
{{dsc inc|cpp/utility/dsc to_chars}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
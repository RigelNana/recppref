{{cpp/string/basic_string/title|append}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|num=1|constexpr=c++20|
basic_string&amp; append( size_type count, CharT ch );
}}
{{dcla|num=2|constexpr=c++20|
basic_string&amp; append( const CharT* s, size_type count );
}}
{{dcla|num=3|constexpr=c++20|
basic_string&amp; append( const CharT* s );
}}
{{dcla|num=4|since=c++17|constexpr=c++20|
template&lt; class SV &gt;
basic_string&amp; append( const SV&amp; t );
}}
{{dcla|num=5|since=c++17|constexpr=c++20|1=
template&lt; class SV &gt;
basic_string&amp; append( const SV&amp; t, size_type pos,
                      size_type count = npos );
}}
{{dcla|num=6|constexpr=c++20|
basic_string&amp; append( const basic_string&amp; str );
}}
{{dcl rev begin|num=7}}
{{dcl|until=c++14|
basic_string&amp; append( const basic_string&amp; str,
                      size_type pos, size_type count );
}}
{{dcla|since=c++14|constexpr=c++20|1=
basic_string&amp; append( const basic_string&amp; str,
                      size_type pos, size_type count = npos );
}}
{{dcl rev end}}
{{dcla|num=8|constexpr=c++20|
template&lt; class InputIt &gt;
basic_string&amp; append( InputIt first, InputIt last );
}}
{{dcla|num=9|since=c++11|constexpr=c++20|
basic_string&amp; append( std::initializer_list&lt;CharT&gt; ilist );
}}
{{dcl end}}

后附额外字符到字符串。

@1@ 后附 {{c|count}} 个 {{c|ch}} 的副本。

@2@ 后附范围 {{range|s|s + count}} 中的字符。
@@ 如果 {{range|s|s + count}} 不是[[cpp/iterator#范围|有效范围]]，那么行为未定义。

@3@ 等价于 {{c|return append(s, Traits::length(s));}}。

@4,5@ 后附从 {{c|t}} 构造的字符串视图 {{c|sv}} 中的字符。
* 如果只提供了 {{c|t}}，那么就会后附 {{c|sv}} 中的所有字符。
* 如果也提供了 {{c|pos}}：
** 如果 {{c|count}} 是 {{box|{{rlpt|/#数据成员|npos}}}}，那么就会后附 {{c|sv}} 中从 {{c|pos}} 处开始的所有字符。
** 否则会后附 {{c|sv}} 中从 {{c|pos}} 处开始的 {{c|std::min(count, sv.size() - pos)}} 个字符。
@@ {{cpp/enable if|plural=yes|满足以下所有条件}}：
* {{c|std::is_convertible_v&lt;const SV&amp;, std::basic_string_view&lt;CharT, Traits&gt;&gt;}} 是 {{c|true}}。
* {{c|std::is_convertible_v&lt;const SV&amp;, const CharT*&gt;}} 是 {{c|false}}。
:@4@ 等价于 {{c multi|std::basic_string_view&lt;CharT, Traits&gt; sv {{=}} t;|return append(sv.data(), sv.size());}}。
:@5@ 等价于 {{c multi|std::basic_string_view&lt;CharT, Traits&gt; sv {{=}} t;|return append(sv.substr(pos, count));}}。

@6,7@ 后附另一字符串 {{c|str}} 中的字符。
* 如果只提供了 {{c|str}}，那么就会后附 {{c|str}} 中的所有字符。
* 如果也提供了 {{c|pos}}：
** 如果 {{c|count}} 是 {{box|{{rlpt|/#数据成员|npos}}}}，那么就会后附 {{c|str}} 中从 {{c|pos}} 处开始的所有字符。
** 否则会后附 {{c|str}} 中从 {{c|pos}} 处开始的 {{c|std::min(count, str.size() - pos)}} 个字符。
:@6@ 等价于 {{c|return append(str.data(), str.size());}}。

{{rrev|since=c++20|
:@7@ 等价于 {{c multi|return append(std::basic_string_view&lt;CharT, Traits&gt;|                  (str).substr(pos, count));}}。
}}

@8@ 等价于 {{c|return append(basic_string(first, last, get_allocator()));}}。
{{rev begin}}
{{rev|until=c++11|
如果 {{tt|InputIt}} 为整数类型，那么此重载与重载 {{v|1}} 拥有相同效果。
}}
{{rev|since=c++11|
{{cpp/enable if| {{tt|InputIt}} 满足 {{named req|InputIterator}} 的要求}}。
}}
{{rev end}}

@9@ 等价于 {{c|return append(ilist.begin(), ilist.size());}}。

===参数===
{{par begin}}
{{par|count|要后附的字符数}}
{{par|ch|要后附的字符值}}
{{par|s|指向要后附的字符串的指针}}
{{par|t|可转换为带要后附的字符的可以转换到 {{lc|std::basic_string_view}} 的对象}}
{{par|pos|要后附的首个字符下标}}
{{par|str|要后附的字符串}}
{{par|first, last|要后附的字符范围}}
{{par|ilist|拥有要后附的字符的初始化器列表}}
{{par end}} 

===返回值===
{{c|*this}}

===复杂度===
无标准复杂度保证，典型实现表现类似 {{l2tf std|cpp/container/vector/insert}}。

===异常===
{{cpp/string/basic_string/length error note}}

@5@ 如果 {{c|pos &gt; sv.size()}} 是 {{c|true}}，那么就会抛出 {{lc|std::out_of_range}}。

@7@ 如果 {{c|pos &gt; str.size()}} 是 {{c|true}}，那么就会抛出 {{lc|std::out_of_range}}。

{{cpp/strong exception safety guarantee}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;string&gt;

int main()
{
    std::basic_string&lt;char&gt; str = "string";
    const char* cptr = "C-string";
    const char carr[] = "Two and one";

    std::string result;

    // 1) 后附 char 3 次。
    // 注意：这是仅有的接受 “CharT” 的重载。
    result.append(3, '*');
    assert(result == "***");

    // 2) 后附定长 C 风格字符串
    result.append(cptr, 5);
    assert(result == "***C-str");

    // 3) 后附空终止 C 风格字符串
    // 注意：因为 “append” 返回 *this，所以我们能一同链式调用。
    result.append(1, ' ').append(cptr);
    assert(result == "***C-str C-string");

    // 6) 后附整个字符串
    result.append(1, ' ').append(str);
    assert(result == "***C-str C-string std::string");

    // 7) 后附字符串的一部分
    result.append(str, 3, 2);
    assert(result == "***C-str C-string std::string::");

    // 8) 后附范围
    result.append(&amp;carr[2], &amp;carr[3]);
    assert(result == "***C-str C-string std::string::n");

    // 9) 后附初始化器列表
    result.append({'p', 'o', 's'});
    assert(result == "***C-str C-string std::string::npos");
}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=没有异常安全保证|after=添加强异常安全保证
}}
{{dr list item|wg=lwg|dr=2250|std=C++98|before={{c|pos &gt; str.size()}} 是 {{c|true}} 时重载 {{v|7}} 的行为未定义|after=此时始终会抛出异常}}
{{dr list item|wg=lwg|dr=2788|std=C++98|before=重载 {{v|8}} 使用默认构造的分配器来构造临时字符串|after=从 {{lc|get_allocator()}} 获取分配器}}
{{dr list item|wg=lwg|dr=2946|std=C++17|before=重载 {{v|4}} 在某些情况下会导致歧义|after=通过使之为模板来避免}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc append_range}}
{{dsc inc|cpp/string/basic_string/dsc operator+{{=}}}}
{{dsc inc|cpp/string/byte/dsc strcat}}
{{dsc inc|cpp/string/byte/dsc strncat}}
{{dsc inc|cpp/string/wide/dsc wcscat}}
{{dsc inc|cpp/string/wide/dsc wcsncat}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
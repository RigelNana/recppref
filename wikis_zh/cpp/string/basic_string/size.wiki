{{cpp/string/basic_string/title|size|length}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl|num=1|notes={{mark noexcept since c++11}}&lt;br&gt;{{mark constexpr since c++20}}|
size_type size() const;
}}
{{dcl|num=2|notes={{mark noexcept since c++11}}&lt;br&gt;{{mark constexpr since c++20}}|
size_type length() const;
}}
{{dcl end}}

返回字符串中的 {{tt|CharT}} 元素数，即 {{c|std::distance(begin(), end())}}。

===参数===
（无）

===返回值===
字符串中的 {{tt|CharT}} 元素数。

===复杂度===
{{rrev multi|until1=c++11
|rev1=未指定
|rev2=常数
}}

===注解===
对于 {{lc|std::string}}，元素是字节（{{c/core|char}} 类型的对象），若使用如 UTF-8 的多字节编码，则它与字符不同。

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;

int main()
{
    std::string s("Exemplar");
    assert(8 == s.size());
    assert(s.size() == s.length());
    assert(s.size() == static_cast&lt;std::string::size_type&gt;(
        std::distance(s.begin(), s.end())));

    std::u32string a(U"ハロー・ワールド"); // 8 个码点
    assert(8 == a.size()); // 8 个 UTF-32 的编码单元
 
    std::u16string b(u"ハロー・ワールド"); // 8 个码点
    assert(8 == b.size()); // 8 个 UTF-16 的编码单元
 
    std::string c(u8"ハロー・ワールド"); // 8 个码点
    assert(24 == c.size()); // 24 个 UTF-8 的编码单元

    #if __cpp_lib_char8_t &gt;= 201907L
    std::u8string d(u8"ハロー・ワールド"); // 8 个码点
    assert(24 == d.size()); // 24 个 UTF-8 的编码单元
    #endif
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc empty}}
{{dsc inc|cpp/string/basic_string/dsc max_size}}
{{dsc inc|cpp/string/basic_string_view/dsc size}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
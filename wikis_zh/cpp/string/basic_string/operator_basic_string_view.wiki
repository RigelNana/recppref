{{cpp/string/basic_string/title|operator basic_string_view}}
{{cpp/string/basic_string/navbar}}
{{ddcl|since=c++17|notes={{mark constexpr since c++20}}|
operator std::basic_string_view&lt;CharT, Traits&gt;() const noexcept;
}}

返回如同用 {{c|std::basic_string_view&lt;CharT, Traits&gt;(data(), size())}} 构造的 {{lc|std::basic_string_view}}。

===参数===
（无）

===返回值===
表示整个字符串内容的字符串视图。

===注解===
程序员负责确保返回的字符串视图不会生存超过字符串的生存期。

{{source|1=
std::string get_string();
int f(std::string_view sv);

int x = f(get_string()); // OK
std::string_view sv = get_string(); // 不好：保有悬垂指针
std::string s = get_string();
}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;

void show_wstring_size(std::wstring_view wcstr_v)
{
    std::cout &lt;&lt; wcstr_v.size() &lt;&lt; " 个代码点\n";
}

int main()
{
  std::string cppstr = "ラーメン";   // 窄字符串
  std::wstring wcstr = L"ラーメン";  // 宽字符串

  // 经由 std::string::operator string_view
  // 从 string 隐式转换到 string_view：
  std::string_view cppstr_v = cppstr;

  std::cout &lt;&lt; cppstr_v &lt;&lt; '\n'
            &lt;&lt; cppstr_v.size() &lt;&lt; " 个代码单元\n";

  // 经由 std::wstring::operator wstring_view
  // 从 wstring 隐式转换到 wstring_view：
  show_wstring_size(wcstr);
}
|output=
ラーメン
12 个代码单元
4 个代码点
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string_view/dsc constructor}}
{{dsc end}}

{{langlinks|en|es|fr|ja|ru}}
{{cpp/string/basic_string/title|operator[]}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|num=1|constexpr=c++20|
CharT&amp; operator[]( size_type pos );
}}
{{dcla|anchor=no|num=2|constexpr=c++20|
const CharT&amp; operator[]( size_type pos ) const;
}}
{{dcl end}}

在 {{c|pos &lt; size()}} 时返回到位于指定位置 {{c|pos}} 的字符的引用，或在 {{c|1=pos == size()}} 时：

@1@ {{rel|
{{rrev multi|until1=c++11|rev1=
行为未定义。
|rev2=
返回到 {{c|CharT()}} 的引用，如果返回的引用指代的对象被修改成 {{c|CharT()}} 以外的值，那么行为未定义。
}}
}}

@2@ 返回到 {{c|CharT()}} 的引用。

{{p}}
{{cpp/hardened ub if|since=c++26| {{c|pos &gt; size()}} 是 {{c|true}}}}

===参数===
{{par begin}}
{{par|pos|要返回的字符位置}}
{{par end}}

===返回值===
@1@ 在 {{c|pos &lt; size()}} 时返回 {{c|*(begin() + pos)}}{{rev inl|since=c++11|，或在 {{c|1=pos == size()}} 时返回到 {{c|CharT()}} 的引用}}。

@2@ 在 {{c|pos &lt; size()}} 时返回 {{c|*(begin() + pos)}}，或在 {{c|1=pos == size()}} 时返回到 {{c|CharT()}} 的引用。

===复杂度===
常数。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
 
int main()
{
    std::string const e("Exemplar");
    for (unsigned i = e.length() - 1; i != 0; i /= 2)
        std::cout &lt;&lt; e[i];
    std::cout &lt;&lt; '\n';
    
    const char* c = &amp;e[0];
    std::cout &lt;&lt; c &lt;&lt; '\n'; // 作为 C 字符串打印
    
    // 将 s 的最后一个字符改成 'y'
    std::string s("Exemplar ");
    s[s.size() - 1] = 'y'; // 等价于 s.back() = 'y';
    std::cout &lt;&lt; s &lt;&lt; '\n';
}
|output=
rmx
Exemplar
Exemplary
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=259|std=C++98|before=重载 {{vl|1}} 能返回 const 左值 {{c|data()[pos]}}，而这是非良构的|after=更改为返回 {{c|*(begin() + pos)}}}}
{{dr list item|wg=lwg|dr=2475|std=C++11|before=如果 {{c|1=pos == size()}}，那么修改返回的引用指代的对象的行为未定义|after=修改成 {{c|CharT()}} 具有良好定义}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc at}}
{{dsc inc|cpp/string/basic_string/dsc front}}
{{dsc inc|cpp/string/basic_string/dsc back}}
{{dsc inc|cpp/string/basic_string_view/dsc operator at}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
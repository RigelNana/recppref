{{cpp/string/basic_string/title|replace}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl|notes={{mark constexpr since c++20}}|num=1|
basic_string&amp; replace( size_type pos, size_type count,
                       const basic_string&amp; str );
}}
{{dcl|notes={{mark constexpr since c++20}}|num=2|
basic_string&amp; replace( const_iterator first, const_iterator last,
                       const basic_string&amp; str );
}}
{{dcl rev multi|num=3
|dcl1=
basic_string&amp; replace( size_type pos, size_type count,
                       const basic_string&amp; str,
                       size_type pos2, size_type count2 );
|since2=c++14|notes2={{mark constexpr since c++20}}|dcl2=
basic_string&amp; replace( size_type pos, size_type count,
                       const basic_string&amp; str,
                       size_type pos2, size_type count2 = npos );
}}
{{dcl|notes={{mark constexpr since c++20}}|num=4|
basic_string&amp; replace( size_type pos, size_type count,
                       const CharT* cstr, size_type count2 );
}}
{{dcl|notes={{mark constexpr since c++20}}|num=5|
basic_string&amp; replace( const_iterator first, const_iterator last,
                       const CharT* cstr, size_type count2 );
}}
{{dcl|notes={{mark constexpr since c++20}}|num=6|
basic_string&amp; replace( size_type pos, size_type count,
                       const CharT* cstr );
}}
{{dcl|notes={{mark constexpr since c++20}}|num=7|
basic_string&amp; replace( const_iterator first, const_iterator last,
                       const CharT* cstr );
}}
{{dcl|notes={{mark constexpr since c++20}}|num=8|
basic_string&amp; replace( size_type pos, size_type count,
                       size_type count2, CharT ch );
}}
{{dcl|notes={{mark constexpr since c++20}}|num=9|
basic_string&amp; replace( const_iterator first, const_iterator last,
                       size_type count2, CharT ch );
}}
{{dcl|notes={{mark constexpr since c++20}}|num=10|
template&lt; class InputIt &gt;
basic_string&amp; replace( const_iterator first, const_iterator last,
                       InputIt first2, InputIt last2 );
}}
{{dcl|since=c++11|notes={{mark constexpr since c++20}}|num=11|
basic_string&amp; replace( const_iterator first, const_iterator last,
                       std::initializer_list&lt;CharT&gt; ilist );
}}
{{dcl|since=c++17|notes={{mark constexpr since c++20}}|num=12|
template&lt; class StringViewLike &gt;
basic_string&amp; replace( size_type pos, size_type count,
                       const StringViewLike&amp; t );
}}
{{dcl|since=c++17|notes={{mark constexpr since c++20}}|num=13|
template&lt; class StringViewLike &gt;
basic_string&amp; replace( const_iterator first, const_iterator last,
                       const StringViewLike&amp; t );
}}
{{dcl|since=c++17|notes={{mark constexpr since c++20}}|num=14|1=
template&lt; class StringViewLike &gt;
basic_string&amp; replace( size_type pos, size_type count,
                       const StringViewLike&amp; t,
                       size_type pos2, size_type count2 = npos );
}}
{{dcl end}}

以若干给定字符替换范围 {{range|begin() + pos|begin() + std::min(pos + count, size())}} 或 {{range|first|last}} 中的字符。

@1,2@ 以 {{c|str}} 替换那些字符。

@3@ 以 {{c|str}} 的 {{range|pos2|std::min(pos2 + count2, str.size())}} 子串替换那些字符。

@4,5@ 以范围 {{range|cstr|cstr + count2}} 中的字符替换那些字符。
@@ 如果 {{range|cstr|cstr + count2}} 不是[[cpp/iterator#范围|有效范围]]，那么行为未定义。

@6,7@ 以范围 {{range|cstr|cstr + Traits::length(cstr)}} 中的字符替换那些字符。

@8,9@ 以 {{c|count2}} 个 {{c|ch}} 的副本替换那些字符。

@10@ 如同用 {{c|replace(first, last, basic_string(first2, last2, get_allocator()))}} 以范围&lt;br&gt;{{range|first2|last2}} 中的字符替换那些字符。

@11@ 以 {{c|ilist}} 中的字符替换那些字符。

@12,13@ {{cpp/string/sv hack|plural=yes|以 {{c|sv}} 中的字符替换那些字符}}

@14@ {{cpp/string/sv hack|以子视图 {{c|sv.substr(pos2, count2)}} 中的字符替换那些字符}}

如果 {{range|begin()|first}} 或 {{range|first|last}} 不是[[cpp/iterator#范围|有效范围]]，那么行为未定义。

===参数===
{{par begin}}
{{par|pos|将被替换的子串起始位置}}
{{par|count|将被替换的子串长度}}
{{par|first, last|将被替换的字符范围}}
{{par|str|用于替换的字符串}}
{{par|pos2|用于替换的子串起始位置}}
{{par|count2|用于替换的字符数}}
{{par|cstr|指向用于替换的字符串的指针}}
{{par|ch|用于替换的字符值}}
{{par|first2, last2|用于替换的字符范围}}
{{par|ilist|拥有用于替换的字符的初始化式列表}}
{{par|t|拥有用于替换的字符的对象（可转换到 {{lc|std::basic_string_view}}）}}
{{par hreq}}
{{par req named|InputIt|InputIterator}}
{{par end}}

===返回值===
{{c|*this}}

===异常===
@1@ 在 {{c|pos &gt; size()}} 时抛出 {{lc|std::out_of_range}}。
@3@ 在 {{c|pos &gt; size()}} 或 {{c|pos2 &gt; str.size()}} 时抛出 {{lc|std::out_of_range}}。
@4,6,8@ 在 {{c|pos &gt; size()}} 时抛出 {{lc|std::out_of_range}}。
@12,14@ 在 {{c|pos &gt; size()}} 时抛出 {{lc|std::out_of_range}}。

{{cpp/string/basic_string/length error note}}

{{cpp/strong exception safety guarantee}}

===示例===
{{example
 | code=
#include &lt;string&gt;
#include &lt;iostream&gt;

int main()
{
    const std::string str = "C++ primer 4ths";
    const std::string replace = "is a books";
    
    // 从位置 11 开始删除 4 个字符并添加 "5th"
    std::string replace_str1 = str;
    replace_str1.replace(11, 4, "5th");
    std::cout &lt;&lt; replace_str1 &lt;&lt; '\n';

    // 同上
    std::string replace_str2 = str;
    replace_str2.replace(replace_str2.end() - 4,replace_str2.end(),"6th");
    std::cout &lt;&lt; replace_str2 &lt;&lt; '\n';

    // 从位置 11 开始删除 4 个字符并添加 "is a book"
    std::string replace_str3 = str;
    replace_str3.replace(11, 4, replace, 0, replace.size() - 1);
    std::cout &lt;&lt; replace_str3 &lt;&lt; '\n';
}
| output=
1) C++ primer 5th
2) C++ primer 6th
3) C++ primer is a book
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=没有异常安全保证|after=添加强异常安全保证}}
{{dr list item|wg=lwg|dr=1323|std=C++98|before={{c|first}} 和 {{c|last}} 的类型是 {{tt|iterator}}|after=改成 {{tt|const_iterator}}}}
{{dr list item|wg=lwg|dr=2946|std=C++17|before=重载 {{v|12,13}} 在某些情况下会导致歧义|after=通过使之为模板来避免}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc replace_with_range}}
{{dsc inc|cpp/regex/dsc regex_replace}}
{{dsc inc|cpp/algorithm/dsc replace}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
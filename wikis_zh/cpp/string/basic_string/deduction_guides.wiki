{{title|{{tt|std::basic_string}} 的推导指引}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl header|string}}
{{dcl|since=c++17|num=1|1=
template&lt; class InputIt, class Alloc = std::allocator&lt;
                             typename std::iterator_traits&lt;InputIt&gt;::value_type&gt; &gt;
basic_string( InputIt, InputIt, Alloc = Alloc() )
    -&gt; basic_string&lt;typename std::iterator_traits&lt;InputIt&gt;::value_type,
                    std::char_traits&lt;
                        typename std::iterator_traits&lt;InputIt&gt;::value_type&gt;, Alloc&gt;;
}}
{{dcla|since=c++17|num=2|1=
template&lt; class CharT,
          class Traits,
          class Alloc = std::allocator&lt;CharT&gt; &gt;
explicit basic_string( std::basic_string_view&lt;CharT, Traits&gt;, const Alloc&amp; = Alloc() )
    -&gt; basic_string&lt;CharT, Traits, Alloc&gt;;
}}
{{dcl|since=c++17|num=3|1=
template&lt; class CharT,
          class Traits,
          class Alloc = std::allocator&lt;CharT&gt;&gt; &gt;
basic_string( std::basic_string_view&lt;CharT, Traits&gt;,
              typename /* 见下文 */::size_type,
              typename /* 见下文 */::size_type,
              const Alloc&amp; = Alloc() )
    -&gt; basic_string&lt;CharT, Traits, Alloc&gt;;
}}
{{dcla|since=c++23|num=4|1=
template&lt; ranges::input_range R,
          class Alloc = std::allocator&lt;ranges::range_value_t&lt;R&gt;&gt; &gt;
basic_string( std::from_range_t, R&amp;&amp;, Alloc = Alloc() )
    -&gt; basic_string&lt;ranges::range_value_t&lt;R&gt;,
                       std::char_traits&lt;ranges::range_value_t&lt;R&gt;&gt;, Alloc&gt;;
}}
{{dcl end}}

@1@ 为 {{lc|std::basic_string}} 提供此[[cpp/language/class template argument deduction|推导指引]]，以允许从迭代器范围推导。{{cpp/enable_if| {{tt|InputIt}} 满足{{named req|InputIterator}}且 {{tt|Alloc}} 满足{{named req|Allocator}}}}。

@2,3@ 为 {{lc|std::basic_string}} 提供这些推导指引以允许从 {{lc|std::basic_string_view}} 推导。{{v|3}} 中的 {{c|size_type}} 形参指代推导指引所推出类型的 {{c|size_type}} 成员类型。{{cpp/enable_if| {{tt|Alloc}} 满足{{named req|Allocator}}|plural=yes}}。

@4@ 为 {{lc|std::basic_string}} 提供此推导指引，以允许从一个 {{ltt|cpp/ranges/from_range|std::from_range_t}} 标签和一个 {{lconcept|input_range}} 推导。

{{cpp/container/inputit_allocator_detection}}

===注解===
指引 {{vl|2,3}} 是必要的，因为 {{lc|std::basic_string}} 对于 {{lc|std::basic_string_view}} 的构造函数被设为模板，以避免既存代码中的歧义，而这些模板不支持类模板实参推导。

===注解===
{{ftm begin|std=yes|comment=yes}}
{{ftm|__cpp_lib_containers_ranges|[[cpp/ranges/to#容器兼容范围|知范围]]的构造和插入；重载 {{vl|4}}|value=202202L|std=C++23}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;char&gt; v = {'a', 'b', 'c'};
    std::basic_string s1(v.begin(), v.end()); // 使用推导指引 (1)
    assert(s1 == "abc");

#if __cpp_lib_containers_ranges &gt;= 202202L
    std::vector&lt;wchar_t&gt; v4{0x43, 43, 053, 0x32, 0x33};
    std::basic_string s4(std::from_range, v4); // 使用推导指引 (4)
    assert(s4 == L"C++23");
#endif
}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3075|std=c++17|before=不支持从 {{tt|basic_string_view}} 推导（为 {{lwg|2946}} 所恶化）|after=添加推导指引}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
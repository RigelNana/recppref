{{cpp/string/basic_string/title|swap}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl rev multi
|until1=c++17|dcl1=
void swap( basic_string&amp; other );
|notes2={{mark constexpr since c++20}}|dcl2=
void swap( basic_string&amp; other ) noexcept(/* 见下文 */);
}}
{{dcl end}}

交换字符串与 {{c|other}} 的内容。所有迭代器和引用都可能会失效。

{{rrev|since=c++11|
{{anchor|ub}}
如果 {{c|std::allocator_traits&lt;allocator_type&gt;::propagate_on_container_swap::value}} 为 {{c|true}}，那么使用对非成员 {{tt|swap}} 进行无限定调用来交换这些分配器。否则，不交换它们（且若 {{c|1=get_allocator() != other.get_allocator()}} 则其行为未定义）。}}

===参数===
{{par begin}}
{{par|other|要与之交换内容的字符串}}
{{par end}}

===复杂度===
常数。

===异常===
{{rev begin}}
{{rev|until=c++11|
不会抛出异常。
}}
{{rev|since=c++11|
只有在行为未定义的情况下才有可能会抛出异常。

{{cpp/strong exception safety guarantee}}
}}
{{rev end}}


{{rrev|since=c++17|
{{noexcept|std::allocator_traits&lt;Allocator&gt;::propagate_on_container_swap::value {{!!}}
         std::allocator_traits&lt;Allocator&gt;::is_always_equal::value}}
}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;

int main() 
{
    std::string a = "AAA";
    std::string b = "BBBB";
    
    std::cout &lt;&lt; "交换前：\n"
                 "a = " &lt;&lt; a &lt;&lt; "\n"
                 "b = " &lt;&lt; b &lt;&lt; "\n\n";
    
    a.swap(b);
    
    std::cout &lt;&lt; "交换后：\n"
                 "a = " &lt;&lt; a &lt;&lt; "\n"
                 "b = " &lt;&lt; b &lt;&lt; '\n';
}
|output=
交换前：
a = AAA
b = BBBB

交换后：
a = BBBB
b = AAA
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=403|std=C++98|before={{tt|swap()}} 可能会抛出异常|after=不会抛出异常}}
{{dr list item|wg=lwg|dr=535|std=C++98|before=交换字符串不会保留字符顺序|after=也保留字符顺序}}
{{dr list item|wg=lwg|dr=2151|paper=P1148R0|std=C++11|before=在分配器不相等且不传播的情况下不会抛出异常|after=此时行为未定义}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc swap}}
{{dsc inc|cpp/algorithm/dsc swap_ranges}}
{{dsc inc|cpp/string/basic_string_view/dsc {{SUBPAGENAMEE}}}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/string/basic_string/title|assign}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|num=1|constexpr=c++20|
basic_string&amp; assign( const basic_string&amp; str );
}}
{{dcla|num=2|since=c++11|constexpr=c++20|
basic_string&amp; assign( basic_string&amp;&amp; str ) noexcept(/* 见下文 */);
}}
{{dcla|num=3|constexpr=c++20|
basic_string&amp; assign( size_type count, CharT ch );
}}
{{dcla|num=4|constexpr=c++20|
basic_string&amp; assign( const CharT* s, size_type count );
}}
{{dcla|num=5|constexpr=c++20|
basic_string&amp; assign( const CharT* s );
}}
{{dcla|num=6|since=c++17|constexpr=c++20|
template&lt; class SV &gt;
basic_string&amp; assign( const SV&amp; t );
}}
{{dcla|num=7|since=c++17|constexpr=c++20|1=
template&lt; class SV &gt;
basic_string&amp; assign( const SV&amp; t,
                      size_type pos, size_type count = npos);
}}
{{dcl rev begin|num=8}}
{{dcl|until=c++14|
basic_string&amp; assign( const basic_string&amp; str,
                      size_type pos, size_type count );
}}
{{dcla|anchor=版本_8|since=c++14|constexpr=c++20|1=
basic_string&amp; assign( const basic_string&amp; str,
                      size_type pos, size_type count = npos);
}}
{{dcl rev end}}
{{dcla|num=9|constexpr=c++20|
template&lt; class InputIt &gt;
basic_string&amp; assign( InputIt first, InputIt last );
}}
{{dcla|num=10|since=c++11|constexpr=c++20|
basic_string&amp; assign( std::initializer_list&lt;CharT&gt; ilist );
}}
{{dcl end}}

替换字符串的内容。

@1@ 等价于 {{c|1=return *this = str;}}。

@2@ 等价于 {{c|1=return *this = std::move(str);}}。

@3@ 以字符 {{c|ch}} 的 {{c|count}} 个副本替换字符串的内容。
@@ 等价于 {{c|clear(); resize(n, c); return *this;}}。

@4@ 以范围 {{range|s|s + count}} 中的字符的副本替换字符串的内容。
@@ 如果 {{range|s|s + count}} 不是[[cpp/iterator#范围|有效范围]]，那么行为未定义。

@5@ 等价于 {{c|return assign(s, Traits::length(s));}}。

@6,7@ 以从 {{c|t}} 构造的字符串视图 {{c|sv}} 中的字符替换字符串的内容。
* 如果只提供了 {{c|t}}，那么就会以 {{c|sv}} 中的所有字符进行替换。
* 如果也提供了 {{c|pos}}：
** 如果 {{c|count}} 是 {{box|{{rlpt|/#数据成员|npos}}}}，那么就会以 {{c|sv}} 中从 {{c|pos}} 处开始的所有字符进行替换。
** 否则会以 {{c|sv}} 中从 {{c|pos}} 处开始的 {{c|std::min(count, sv.size() - pos)}} 个字符进行替换。
@@ {{cpp/enable if|plural=yes|满足以下所有条件}}：
* {{c|std::is_convertible_v&lt;const SV&amp;, std::basic_string_view&lt;CharT, Traits&gt;&gt;}} 是 {{c|true}}。
* {{c|std::is_convertible_v&lt;const SV&amp;, const CharT*&gt;}} 是 {{c|false}}。
:@6@ 等价于 {{c multi|std::basic_string_view&lt;CharT, Traits&gt; sv {{=}} t;|return assign(sv.data(), sv.size());}}。
:@7@ 等价于 {{c multi|std::basic_string_view&lt;CharT, Traits&gt; sv {{=}} t;|return assign(sv.substr(pos, count));}}。

@8@ 以 {{c|str}} 中的字符替换字符串的内容。
* 如果 {{c|count}} 是 {{box|{{rlpt|/#数据成员|npos}}}}，那么就会以 {{c|str}} 中从 {{c|pos}} 处开始的所有字符进行替换。
* 否则会以 {{c|str}} 中从 {{c|pos}} 处开始的 {{c|std::min(count, str.size() - pos)}} 个字符进行替换。

{{rrev|since=c++20|
@@ 等价于 {{c multi|return assign(std::basic_string_view&lt;CharT, Traits&gt;|                  (str).substr(pos, count));}}。
}}

@9@ 等价于 {{c|return assign(basic_string(first, last, get_allocator()));}}。
{{rrev|since=c++11|
{{cpp/enable if| {{tt|InputIt}} 满足{{named req|InputIterator}}的要求}}。
}}

@10@ 等价于 {{c|return assign(ilist.begin(), ilist.size());}}。

===参数===
{{par begin}}
{{par|str|用作源以初始化字符的字符串}}
{{par|count|产生的字符串大小}}
{{par|ch|用以初始化字符串的字符的值}}
{{par|s|指向用作源初始化字符串字符串的指针}}
{{par|t|用以初始化字符串字符的对象（可转换到 {{lc|std::basic_string_view}}）}}
{{par|pos|要取的首字符下标}}
{{par|first, last|复制字符来源的范围}}
{{par|ilist|用以初始化字符串字符的 {{lc|std::initializer_list}}}}
{{par end}} 

===返回值===
{{c|*this}}

===异常===
@2@ {{noexcept|std::allocator_traits&lt;Allocator&gt;::
             propagate_on_container_move_assignment::value {{!!}}
         std::allocator_traits&lt;Allocator&gt;::is_always_equal::value}}

{{cpp/string/basic_string/length error note}}

@7@ 如果 {{c|pos &gt; sv.size()}} 是 {{c|true}}，那么就会抛出 {{lc|std::out_of_range}}。

@8@ 如果 {{c|pos &gt; str.size()}} 是 {{c|true}}，那么就会抛出 {{lc|std::out_of_range}}。

{{cpp/strong exception safety guarantee}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;

int main()
{
    std::string s;
    // assign(size_type count, CharT ch)
    s.assign(4, '=');
    std::cout &lt;&lt; s &lt;&lt; '\n'; // "===="
    
    std::string const c("Exemplary");
    // assign(const basic_string&amp; str)
    s.assign(c);
    std::cout &lt;&lt; c &lt;&lt; " == " &lt;&lt; s &lt;&lt;'\n'; // "Exemplary == Exemplary"
    
    // assign(const basic_string&amp; str, size_type pos, size_type count)
    s.assign(c, 0, c.length() - 1);
    std::cout &lt;&lt; s &lt;&lt; '\n'; // "Exemplar";
    
    // assign(basic_string&amp;&amp; str)
    s.assign(std::string("C++ by ") + "example");
    std::cout &lt;&lt; s &lt;&lt; '\n'; // "C++ by example"
    
    // assign(const CharT* s, size_type count)
    s.assign("C-style string", 7);
    std::cout &lt;&lt; s &lt;&lt; '\n'; // "C-style"
    
    // assign(const CharT* s)
    s.assign("C-style\0string");
    std::cout &lt;&lt; s &lt;&lt; '\n'; // "C-style"
    
    char mutable_c_str[] = "C-style string";
    // assign(InputIt first, InputIt last)
    s.assign(std::begin(mutable_c_str), std::end(mutable_c_str) - 1);
    std::cout &lt;&lt; s &lt;&lt; '\n'; // "C-style string"
    
    // assign(std::initializer_list&lt;CharT&gt; ilist)
    s.assign({'C', '-', 's', 't', 'y', 'l', 'e'});
    std::cout &lt;&lt; s &lt;&lt; '\n'; // "C-style"
}
|output=
====
Exemplary == Exemplary
Exemplar
C++ by example
C-style
C-style
C-style string
C-style
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=没有异常安全保证|after=添加强异常安全保证}}
{{dr list item|wg=lwg|dr=2063|std=C++11|before=非正式注释说可以通过交换实现重载 {{vl|2}}|after=更正为要求移动赋值}}
{{dr list item|wg=lwg|dr=2250|std=C++98|before={{c|pos &gt; str.size()}} 是 {{c|true}} 时重载 {{vl|8}} 的行为未定义|after=此时始终会抛出异常}}
{{dr list item|wg=lwg|dr=2579|std=C++98|before=重载 {{vl|1}} 与复制赋值运算符的行为不同|after=它们的行为相同}}
{{dr list item|wg=lwg|dr=2946|std=C++17|before=重载 {{vl|6}} 在某些情况下会导致歧义|after=通过使之为模板避免}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc assign_range}}
{{dsc inc|cpp/string/basic_string/dsc constructor}}
{{dsc inc|cpp/string/basic_string/dsc operator{{=}}}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
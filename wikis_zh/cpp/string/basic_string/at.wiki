{{cpp/string/basic_string/title|at}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|anchor=no|num=1|constexpr=c++20|
CharT&amp; at( size_type pos );
}}
{{dcla|anchor=no|num=2|constexpr=c++20|
const CharT&amp; at( size_type pos ) const;
}}
{{dcl end}}

返回到位于指定位置 {{c|pos}} 的字符的引用。进行边界检查，非法访问时抛出 {{lc|std::out_of_range}} 类型的异常。

===参数===
{{par begin}}
{{par|pos|要返回的字符位置}}
{{par end}}

===返回值===
到请求的字符的引用。

===异常===
在 {{c|1=pos &gt;= size()}} 时抛出 {{lc|std::out_of_range}}。

{{cpp/strong exception safety guarantee}}

===复杂度===
常数。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;

int main()
{
    std::string s("message"); // 为容量
    
    s = "abc";
    s.at(2) = 'x'; // OK
    std::cout &lt;&lt; s &lt;&lt; '\n';
    
    std::cout &lt;&lt; "字符串大小 = " &lt;&lt; s.size() &lt;&lt; '\n';
    std::cout &lt;&lt; "字符串容量 = " &lt;&lt; s.capacity() &lt;&lt; '\n';
    
    try
    {
        // 抛出，即使容量允许访问元素
        s.at(3) = 'x';
    }
    catch (std::out_of_range const&amp; exc)
    {
        std::cout &lt;&lt; exc.what() &lt;&lt; '\n';
    }
}
|p=true
|output=
abx
字符串大小 = 3
字符串容量 = 7
basic_string::at
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=没有异常安全保证|after=添加强异常安全保证}}
{{dr list item|wg=lwg|dr=2207|std=C++98|before={{c|1=pos &gt;= size()}} 是 {{c|true}} 时的行为未定义|after=此时始终会抛出异常}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc operator at}}
{{dsc inc|cpp/string/basic_string_view/dsc {{SUBPAGENAMEE}}}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
{{cpp/string/basic_string/title|shrink_to_fit}}
{{cpp/string/basic_string/navbar}}
{{ddcla|constexpr=c++20|
void shrink_to_fit();
}}

请求移除未使用的容量。

这是减少 {{lc|capacity()}} 到 {{lc|size()}} 的非强制请求。是否满足请求取依赖于实现。

当且仅当发生重分配时使所有指针、引用和迭代器失效。

===复杂度===
与字符串的大小成线性。

===注解===
在 libstdc++ 中，{{tt|shrink_to_fit()}} [https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.shrink 不能]在 C++98 模式中使用。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
 
int main()
{
    std::string s;
    std::cout &lt;&lt; "std::string 的大小是 " &lt;&lt; sizeof s &lt;&lt; " 个字节\n"
        &lt;&lt; "默认构造后的容量是 " &lt;&lt; s.capacity() 
        &lt;&lt; "，大小是 " &lt;&lt; s.size() &lt;&lt; '\n';
    
    for (int i = 0; i &lt; 42; i++)
        s.append(" 42 ");
    std::cout &lt;&lt; "后附 42 次后的容量是 " &lt;&lt; s.capacity() 
        &lt;&lt; "，大小是 " &lt;&lt; s.size() &lt;&lt; '\n';
    
    s.clear();
    std::cout &lt;&lt; "clear() 后的容量是 " &lt;&lt; s.capacity() 
        &lt;&lt; "，大小是 " &lt;&lt; s.size() &lt;&lt; '\n';
    
    s.shrink_to_fit();
    std::cout &lt;&lt; "shrink_to_fit() 后的容量是 " &lt;&lt; s.capacity() 
        &lt;&lt; "，大小是 " &lt;&lt; s.size() &lt;&lt; '\n';
}
|p=true
|output=
GCC 输出：
std::string 的大小是 32 个字节
默认构造后的容量是 15，大小是 0
后附 42 次后的容量是 240，大小是 168
clear() 后的容量是 240，大小是 0
shrink_to_fit() 后的容量是 15，大小是 0
 
clang 输出（-stdlib=libc++）：
std::string 的大小是 24 个字节
默认构造后的容量是 22，大小是 0
后附 42 次后的容量是 191，大小是 168
clear() 后的容量是 191，大小是 0
shrink_to_fit() 后的容量是 22，大小是 0
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=755|std=C++98|before={{tt|std::string}} 缺少显式的移除未使用的容量的操作|after=已提供}}
{{dr list item|wg=lwg|dr=2223|std=C++98|before=1. 引用、指针和迭代器不会失效&lt;br&gt;2. 没有复杂度要求|after=1. 可能会失效&lt;br&gt;2. 要求为线性}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc size}}
{{dsc inc|cpp/string/basic_string/dsc capacity}}
{{dsc inc|cpp/string/basic_string/dsc resize}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/string/basic_string/title|compare}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcla|num=1|noexcept=c++11|constexpr=c++20|1=
int compare( const basic_string&amp; str ) const;
}}
{{dcla|anchor=no|num=2|constexpr=c++20|
int compare( size_type pos1, size_type count1,
             const basic_string&amp; str ) const;
}}
{{dcl rev multi|num=3
|dcl1=
int compare( size_type pos1, size_type count1,
             const basic_string&amp; str,
             size_type pos2, size_type count2 ) const;
|since2=c++14|notes2={{mark constexpr since c++20}}|dcl2=
int compare( size_type pos1, size_type count1,
             const basic_string&amp; str,
             size_type pos2, size_type count2 = npos ) const;
}}
{{dcla|anchor=no|num=4|constexpr=c++20|
int compare( const CharT* s ) const;
}}
{{dcla|anchor=no|num=5|constexpr=c++20|
int compare( size_type pos1, size_type count1,
             const CharT* s ) const;
}}
{{dcla|anchor=no|num=6|constexpr=c++20|
int compare( size_type pos1, size_type count1,
             const CharT* s, size_type count2 ) const;
}}
{{dcla|anchor=no|num=7|since=c++17|constexpr=c++20|
template&lt; class StringViewLike &gt;
int compare( const StringViewLike&amp; t ) const noexcept(/* 见下文 */);
}}
{{dcla|anchor=no|num=8|since=c++17|constexpr=c++20|
template&lt; class StringViewLike &gt;
int compare( size_type pos1, size_type count1,
             const StringViewLike&amp; t ) const;
}}
{{dcla|anchor=no|num=9|since=c++17|constexpr=c++20|1=
template&lt; class StringViewLike &gt;
int compare( size_type pos1, size_type count1,
             const StringViewLike&amp; t,
             size_type pos2, size_type count2 = npos) const;
}}
{{dcl end}}

比较两个字符序列。

@1@ 比较此字符串与 {{c|str}}。

@2@ 比较此字符串的 {{range|pos1|pos1 + count1}} 子串与 {{c|str}}。
* 如果 {{c|count1 &gt; size() - pos1}}，那么子串是 {{range|pos1|size()}}。

@3@ 比较此字符串的 {{range|pos1|pos1 + count1}} 子串与 {{c|str}} 的子串 {{range|pos2|pos2 + count2}}。
* 如果 {{c|count1 &gt; size() - pos1}}，那么第一子串是 {{range|pos1|size()}}。
* 如果 {{c|count2 &gt; str.size() - pos2}}，那么第二子串是 {{range|pos2|str.size()}}。

@4@ 比较此字符串与始于 {{c|s}} 所指向字符的长度为 {{c|Traits::length(s)}} 的空终止字符序列。

@5@ 比较此字符串的 {{range|pos1|pos1 + count1}} 子串与始于 {{c|s}} 所指向字符的长度为 {{c|Traits::length(s)}} 的空终止字符序列。
* 如果 {{c|count1 &gt; size() - pos1}}，那么子串是 {{range|pos1|size()}}。

@6@ 比较此字符串的 {{range|pos1|pos1 + count1}} 子串与范围 {{range|s|s + count2}} 中的字符。{{range|s|s + count2}} 中的字符可包含空字符。
* 如果 {{c|count1 &gt; size() - pos1}}，那么子串是 {{range|pos1|size()}}。

@7-9@ {{cpp/string/sv hack|plural=yes|
:@7@ 比较此字符串与 {{c|sv}}。
:@8@ 如同用 {{c|std::basic_string_view&lt;CharT, Traits&gt;(*this).substr(pos1, count1).compare(sv)}} 比较此字符串的 {{range|pos1|pos1 + count1}} 子串与 {{c|sv}}。
:@9@ 如同用 {{c multi|
std::basic_string_view&lt;CharT, Traits&gt;(*this)|
    .substr(pos1, count1).compare(sv.substr(pos2, count2))}}&lt;br&gt;
比较此字符串的 {{range|pos1|pos1 + count1}} 子串与 {{c|sv}} 的 {{range|pos2|pos2 + count2}} 子串}}

按下列方式比较始于 {{c|data1}} 的 {{c|count1}} 个字符组成的字符序列与始于 {{c|data2}} 的 {{c|count2}} 个字符组成的字符序列。首先，如同用 {{c|1=size_type rlen = std::min(count1, count2)}} 计算要比较的字符数。然后调用 {{c|Traits::compare(data1, data2, rlen)}} 比较序列。对于标准字符特性，此函数进行逐字符字典序比较。如果结果为零（到此为止的字符序列相等），那么按下列方式比较大小：

{| class="wikitable" style="text-align:center;"
! colspan=2 |条件
!结果
!返回值
|-
| colspan=2 style="text-align:left;" | {{tt|Traits::compare({{spar|data1}}, {{spar|data2}}, {{spar|rlen}}) &lt; 0}}
| {{spar|data1}} ''小于'' {{spar|data2}}
| {{c|&lt;0}}
|-
| rowspan=3 | {{tt|1=Traits::compare({{spar|data1}}, {{spar|data2}}, {{spar|rlen}}) == 0}}
| {{spar|size1}} &lt; {{spar|size2}}
| {{spar|data1}} ''小于'' {{spar|data2}}
| {{c|&lt;0}}
|-
&lt;!-- --&gt;
| {{spar|size1}} {{==}} {{spar|size2}}
| {{spar|data1}} ''等于'' {{spar|data2}}
| {{c|0}}
|-
&lt;!-- --&gt;
| {{spar|size1}} &gt; {{spar|size2}}
| {{spar|data1}} ''大于'' {{spar|data2}}
| {{c|&gt;0}}
|-
| colspan=2 style="text-align:left;" | {{tt|Traits::compare({{spar|data1}}, {{spar|data2}}, {{spar|rlen}}) &gt; 0}}
| {{spar|data1}} ''大于'' {{spar|data2}}
| {{c|&gt;0}}
|}

===参数===
{{par begin}}
{{par|str|要比较的另一字符串}}
{{par|s|指向要比较的字符串的指针}}
{{par|count1|此字符串要比较的字符数}}
{{par|pos1|此字符串中要比较的首字符的位置}}
{{par|count2|给定字符串要比较的字符数}}
{{par|pos2|给定字符串的要比较的首字符位置}}
{{par|t|要比较的（可转换到 {{lc|std::basic_string_view}} 的）对象}}
{{par end}}

===返回值===
* {{c|*this}} 在字典序中先出现于实参所指定的字符序列时是负值。
* 两个序列比较等价时为零。
* {{c|*this}} 在字典序中后出现于实参所指定的字符序列时是正值。

===异常===
接收名为 {{c|pos1}} 或 {{c|pos2}} 的形参的重载在实参处于范围外的情况下抛出 {{lc|std::out_of_range}}。

@7@ {{noexcept|std::is_nothrow_convertible_v&lt;const T&amp;, std::basic_string_view&lt;CharT, Traits&gt;&gt;}}
@8,9@ 抛出任何到 {{lc|std::basic_string_view}} 的转换所抛的异常。

{{cpp/strong exception safety guarantee}}

===可能的实现===
{{eq impl
|title1=overload (1)|ver1=1|1=
template&lt;class CharT, class Traits, class Alloc&gt;
int std::basic_string&lt;CharT, Traits, Alloc&gt;::compare
    (const std::basic_string&amp; s) const noexcept
{
    size_type lhs_sz = size();
    size_type rhs_sz = s.size();
    int result = traits_type::compare(data(), s.data(), std::min(lhs_sz, rhs_sz));
    if (result != 0)
        return result;
    if (lhs_sz &lt; rhs_sz)
        return -1;
    if (lhs_sz &gt; rhs_sz)
        return 1;
    return 0;
}
}}

===注解===
对于不要求三路比较的情形，{{lc|std::basic_string}} 提供通常的{{rlp|operator cmp|关系运算符}}（{{tt|&lt;}}、{{tt|1=&lt;=}}、{{tt|1===}}、{{tt|&gt;}} 等）。

此函数默认（以默认 {{lc|std::char_traits}}）不会考虑本地环境。具本地环境的三路比较见 {{lc|std::collate::compare}}。

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;

void print_compare_result(std::string_view str1,
                          std::string_view str2,
                          int compare_result)
{
    if (compare_result &lt; 0)
        std::cout &lt;&lt; std::quoted(str1) &lt;&lt; " 在 "
                  &lt;&lt; std::quoted(str2) &lt;&lt; " 前面。\n";
    else if (compare_result &gt; 0)
        std::cout &lt;&lt; std::quoted(str2) &lt;&lt; " 在 "
                  &lt;&lt; std::quoted(str1) &lt;&lt; " 前面。\n";
    else
        std::cout &lt;&lt; std::quoted(str1) &lt;&lt; " 和 "
                  &lt;&lt; std::quoted(str2) &lt;&lt; " 一样。\n";
}

int main()
{
    std::string batman{"Batman"};
    std::string superman{"Superman"};
    int compare_result{0};
    
    // 1) 与另一字符串比较
    compare_result = batman.compare(superman);
    std::cout &lt;&lt; "1) ";
    print_compare_result("Batman", "Superman", compare_result);
    
    // 2) 与另一字符串比较子串
    compare_result = batman.compare(3, 3, superman);
    std::cout &lt;&lt; "2) ";
    print_compare_result("man", "Superman", compare_result);
    
    // 3) 与另一子串比较子串
    compare_result = batman.compare(3, 3, superman, 5, 3);
    std::cout &lt;&lt; "3) ";
    print_compare_result("man", "man", compare_result);
    
    // 与另一子串比较子串
    // 默认到为另一字符串的末尾
    assert(compare_result == batman.compare(3, 3, superman, 5));
    
    // 4) 与另一 char 指针比较
    compare_result = batman.compare("Superman");
    std::cout &lt;&lt; "4) ";
    print_compare_result("Batman", "Superman", compare_result);
    
    // 5) 与另一 char 指针比较子串
    compare_result = batman.compare(3, 3, "Superman");
    std::cout &lt;&lt; "5) ";
    print_compare_result("man", "Superman", compare_result);
    
    // 6) 与另一 char 指针子串比较子串
    compare_result = batman.compare(0, 3, "Superman", 5);
    std::cout &lt;&lt; "6) ";
    print_compare_result("Bat", "Super", compare_result);
}
|output=
1) Batman 在 Superman 前面。
2) Superman 在 man 前面。
3) man 和 man 一样。
4) Batman 在 Superman 前面。
5) Superman 在 man 前面。
6) Bat 在 Super 前面。
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=5|std=C++98|before=重载 {{v|6}} 的形参 {{c|count2}} 有默认实参 {{c|npos}}|after=移除默认实参，将该重载分为重载 {{v|5}} 和重载 {{v|6}}}}
{{dr list item|wg=lwg|dr=847|std=C++98|before=没有异常安全保证|after=添加强异常安全保证}}
{{dr list item|wg=lwg|dr=2946|std=C++17|before=重载 {{v|7}} 在某些情况下会导致歧义|after=通过使之为模板来避免}}
{{dr list item|paper=P1148R0|std=C++17|before=重载 {{v|7}} 的 noexcept 被 LWG2946 的解决方案意外丢弃|after=恢复}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc operator cmp}}
{{dsc inc|cpp/string/basic_string/dsc substr}}
{{dsc inc|cpp/locale/dsc collate}}
{{dsc inc|cpp/string/byte/dsc strcoll}}
{{dsc inc|cpp/algorithm/dsc lexicographical_compare}}
{{dsc inc|cpp/string/basic_string_view/dsc compare}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
{{cpp/title|stoul|stoull}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl header|string}}
{{dcl|num=1|since=c++11|1=
unsigned long      stoul ( const std::string&amp; str,
                           std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl|num=2|since=c++11|1=
unsigned long      stoul ( const std::wstring&amp; str,
                           std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl|num=3|since=c++11|1=
unsigned long long stoull( const std::string&amp; str,
                           std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl|num=4|since=c++11|1=
unsigned long long stoull( const std::wstring&amp; str,
                           std::size_t* pos = nullptr, int base = 10 );
}}
{{dcl end}}

转译字符串 {{c|str}} 中的无符号整数值。

令 {{c|ptr}} 为（提供给转换函数的）一个类型是 {{c/core|char*}} {{v|1,3}} 或 {{c/core|wchar_t*}} {{v|2,4}} 的内部指针：

@1@ 调用 {{c|std::strtoul(str.c_str(), &amp;ptr, base)}}。
@2@ 调用 {{c|std::wcstoul(str.c_str(), &amp;ptr, base)}}。
@3@ 调用 {{c|std::strtoull(str.c_str(), &amp;ptr, base)}}。
@4@ 调用 {{c|std::wcstoull(str.c_str(), &amp;ptr, base)}}。

{{cpp/string/cvt str2int base|base={{c|base}}|u=true}}

如果 {{c|pos}} 不是空指针，那么指针 {{c|ptr}} 会接收首个 {{c|str.c_str()}} 中未转换字符的地址，然后将该字符的下标在计算后存储到 {{c|*pos}}，给出转换所处理的字符数。

===参数===
{{par begin}}
{{par|str|要转换的字符串}}
{{par|pos|存储被处理字符数的整数的地址}}
{{par|base|数字基底}}
{{par end}}

===返回值===
转换到指定无符号整数类型的字符串。

===异常===
* 无法进行转换时会抛出 {{lc|std::invalid_argument}}。
* 转换值会落在结果类型的范围外，或底层函数（{{lc|std::strtoul}} 或 {{lc|std::strtoull}}）将 {{c|errno}} 设置为 {{c|ERANGE}} 时会抛出 {{lc|std::out_of_range}}。

===示例===
{{example}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2009|std=C++11|before=在 {{lc|std::strtoul}} 或 {{lc|std::strtoull}} 将 {{lc|errno}} 设置为 {{lc|ERANGE}} 时不会抛出 {{lc|std::out_of_range}}|after=会抛出}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc stol}}
{{dsc inc|cpp/string/basic_string/dsc stof}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
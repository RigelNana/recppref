{{title|1=operator==,!=,&lt;,&lt;=,&gt;,&gt;=,&lt;=&gt;{{small|(std::basic_string)}}}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl header|string}}
{{dcl h|比较两个 {{tt|basic_string}} 对象}}
{{dcl|num=1|notes={{mark noexcept since c++11}}&lt;br&gt;{{mark constexpr since c++20}}|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator==( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=2|until=c++20|notes={{mark noexcept since c++11}}|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator!=( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=3|until=c++20|notes={{mark noexcept since c++11}}|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&lt;( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=4|until=c++20|notes={{mark noexcept since c++11}}|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&lt;=( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=5|until=c++20|notes={{mark noexcept since c++11}}|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&gt;( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=6|until=c++20|notes={{mark noexcept since c++11}}|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&gt;=( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=7|since=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
constexpr /*comp-cat*/
    operator&lt;=&gt;( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs ) noexcept;
}}
{{dcl h|比较 {{tt|basic_string}} 对象与 {{tt|T}} 的空终止数组}}
{{dcl|num=8|notes={{mark constexpr since c++20}}|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator==( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const CharT* rhs );
}}
{{dcl|num=9|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator==( const CharT* lhs,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=10|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator!=( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const CharT* rhs );
}}
{{dcl|num=11|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator!=( const CharT* lhs,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=12|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&lt;( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                const CharT* rhs );
}}
{{dcl|num=13|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&lt;( const CharT* lhs,
                const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=14|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&lt;=( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const CharT* rhs );
}}
{{dcl|num=15|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&lt;=( const CharT* lhs,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=16|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&gt;( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                const CharT* rhs );
}}
{{dcl|num=17|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&gt;( const CharT* lhs,
                const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=18|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&gt;=( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const CharT* rhs );
}}
{{dcl|num=19|until=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
bool operator&gt;=( const CharT* lhs,
                 const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; rhs );
}}
{{dcl|num=20|since=c++20|1=
template&lt; class CharT, class Traits, class Alloc &gt;
constexpr /*comp-cat*/
    operator&lt;=&gt;( const std::basic_string&lt;CharT,Traits,Alloc&gt;&amp; lhs,
                 const CharT* rhs );
}}
{{dcl end}}

比较字符串与另一字符串或 {{tt|CharT}} 的空终止数组的内容。

所有比较通过 {{lc|compare()}} 成员函数进行（它自身以 {{tt|Traits::compare()}} 定义）：

* 若 {{c|lhs}} 与 {{c|rhs}} 的大小相等，且 {{c|lhs}} 中的每个字符有在 {{c|rhs}} 中在同一位置的等价字符，则两个字符串相等。

* 按字典序进行顺序比较——以等价于 {{lc|std::lexicographical_compare}} {{rev inl|since=c++20|或 {{lc|std::lexicographical_compare_three_way}} }}的函数进行比较。

@1-7@ 比较两个 {{tt|basic_string}} 对象。

@8-20@ 比较 {{tt|basic_string}} 对象和 {{tt|CharT}} 的空终止数组。

{{rrev|since=c++20|
三路比较运算符的返回类型（{{c|/*comp-cat*/}}）为 {{c|Traits::comparison_category}}，若该限定标识合法并指代类型，否则为 {{lc|std::weak_ordering}}。若 {{c|/*comp-cat*/}} 不是比较类别类型，则程序非良构。

{{cpp/note synthesized compare}}
}}

===参数===
{{par begin}}
{{par|lhs, rhs|要比较内容的字符串}}
{{par end}}

===返回值===
@1-6,8-19@ 若对应比较关系成立则为 {{c|true}}，否则为 {{c|false}}。
@7,20@ {{c|1=static_cast&lt;/*comp-cat*/&gt;(lhs.compare(rhs) &lt;=&gt; 0)}}。

===复杂度===
与字符串大小成线性。

===注解===
{{rrev|since=c++20|
若至少一个形参的类型为 {{lc|std::string}}、{{lc|std::wstring}}、{{lc|std::u8string}}、{{lc|std::u16string}} 或 {{lc|std::u32string}}，则 {{tt|1=operator&lt;=&gt;}} 的返回类型是 {{lc|std::strong_ordering}}。
}}

===示例===
{{example
|code=
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2064|std=C++11|before=接收二个 {{tt|basic_string}} 的重载是否为 noexcept 不一致；&lt;br&gt;接收一个 {{tt|CharT*}} 的重载为 noexcept 但可能引发 UB|after=使之一致；&lt;br&gt;移除 noexcept}}
{{dr list item|wg=lwg|dr=3432|std=C++20|before=未要求 {{tt|1=operator&lt;=&gt;}} 的返回类型为比较类别类型|after=已要求}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
{{cpp/string/basic_string/title|capacity}}
{{cpp/string/basic_string/navbar}}
{{ddcla|noexcept=c++11|constexpr=c++20|
size_type capacity() const;
}}

返回当前已为字符串分配空间的字符数。

===参数===
（无）

===返回值===
当前分配的存储，即可用于存储元素的存储的容量。

===复杂度===
常数。

===注解===
从分配器获得，但不可用于存储任何元素的内存位置不计入分配的存储。注意空终止符不是 {{tt|basic_string}} 的元素。

===示例===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

void show_capacity(std::string const&amp; s)
{
    std::cout &lt;&lt; std::quoted(s) &lt;&lt; " 的容量为 " &lt;&lt; s.capacity() &lt;&lt; "。\n";
}

int main()
{
    std::string s{"Exemplar"};
    show_capacity(s);

    s += " is an example string.";
    show_capacity(s);

    s.clear();
    show_capacity(s);

    std::cout &lt;&lt; "\n演示容量增长策略。"
                 "\n大小:  容量:  比率:\n" &lt;&lt; std::left;

    std::string g;
    auto old_cap{g.capacity()};

    for (int mark{}; mark != 5; ++mark)
    {
        while (old_cap == g.capacity())
            g.push_back('.');

        std::cout &lt;&lt; std::setw( 7) &lt;&lt; g.size()
                  &lt;&lt; std::setw( 7) &lt;&lt; g.capacity()
                  &lt;&lt; std::setw(10) &lt;&lt; g.capacity() / static_cast&lt;float&gt;(old_cap) &lt;&lt; '\n';

        old_cap = g.capacity();
    }
}
|p=true
|output=
"Exemplar" 的容量为 15。
"Exemplar is an example string." 的容量为 30。
"" 的容量为 30。

演示容量增长策略。
大小:  容量:  比率:
16     30     2
31     60     2
61     120    2
121    240    2
241    480    2
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc size}}
{{dsc inc|cpp/string/basic_string/dsc reserve}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
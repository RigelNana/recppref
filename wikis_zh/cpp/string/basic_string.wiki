{{cpp/title|basic_string}}
{{cpp/string/basic_string/navbar}}
{{dcl begin}}
{{dcl header|string}}
{{dcl|num=1|1=
template&lt; 
    class CharT, 
    class Traits = std::char_traits&lt;CharT&gt;, 
    class Allocator = std::allocator&lt;CharT&gt;
&gt; class basic_string;
}}
{{dcl|since=c++17|num=2|1=
namespace pmr {
template&lt;
    class CharT,
    class Traits = std::char_traits&lt;CharT&gt;
&gt; using basic_string =
    std::basic_string&lt;CharT, Traits, std::pmr::polymorphic_allocator&lt;CharT&gt;&gt;;
}
}}
{{dcl end}}

类模板 {{tt|basic_string}} 存储和处理[[cpp/language/types#字符类型|字符]]式对象的序列，这种对象是满足{{named req|TrivialType}}和{{named req|StandardLayoutType}}的非数组对象。该类既不依赖字符类型，也不依赖该类型上的原生操作。操作的定义通过 {{tt|Traits}} 模板形参（{{lc|std::char_traits}} 的特化或兼容的特征类）提供。

{{tt|basic_string}} 的元素是连续存储的，即对于 {{tt|basic_string}} {{c|s}}，对 {{range|0|s.size()}} 中的任意 {{c|n}} 有 {{c|1=&amp;*(s.begin() + n) == &amp;*s.begin() + n}}，或等价地，指向 {{c|s[0]}} 的指针能传递给期待指向 {{tt|CharT}} 的{{rev inl|since=c++11|空终止}}数组首元素指针的函数。

{{tt|std::basic_string}} 满足{{named req|AllocatorAwareContainer}}（但不使用定制的 {{tt|construct}}/{{tt|destroy}} 构造/析构元素）、{{named req|SequenceContainer}}{{rev inl|since=c++17|及{{named req|ContiguousContainer}}}}。

如果 {{tt|Traits::char_type}} 或者 {{tt|Allocator::char_type}} 与 {{tt|CharT}} 不同，那么程序非良构。

{{cpp/is_constexpr|since=c++20|transient=yes}}

提供数个对于常用字符类型的 typedef：
{{dsc begin}}
{{dsc header|string}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|std::string}}|{{c/core|std::basic_string&lt;char&gt;}}}}
{{dsc|{{tt|std::wstring}}|{{c/core|std::basic_string&lt;wchar_t&gt;}}}}
{{dsc|{{tt|std::u8string}} {{mark c++20}}|{{c/core|std::basic_string&lt;char8_t&gt;}}}}
{{dsc|{{tt|std::u16string}} {{mark c++11}}|{{c/core|std::basic_string&lt;char16_t&gt;}}}}
{{dsc|{{tt|std::u32string}} {{mark c++11}}|{{c/core|std::basic_string&lt;char32_t&gt;}}}}
{{dsc|{{tt|std::pmr::string}} {{mark c++17}}|{{c/core|std::pmr::basic_string&lt;char&gt;}}}}
{{dsc|{{tt|std::pmr::wstring}} {{mark c++17}}|{{c/core|std::pmr::basic_string&lt;wchar_t&gt;}}}}
{{dsc|{{tt|std::pmr::u8string}} {{mark c++20}}|{{c/core|std::pmr::basic_string&lt;char8_t&gt;}}}}
{{dsc|{{tt|std::pmr::u16string}} {{mark c++17}}|{{c/core|std::pmr::basic_string&lt;char16_t&gt;}}}}
{{dsc|{{tt|std::pmr::u32string}} {{mark c++17}}|{{c/core|std::pmr::basic_string&lt;char32_t&gt;}}}}
{{dsc end}}

===模板形参===
{{par begin}}
{{par|CharT|字符类型}}
{{par|Traits|指定字符类型上操作的特性类}}
{{par|Allocator|用于分配内部存储的{{named req|Allocator}}类型}}
{{par end}}

===嵌套类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|traits_type}}|{{tt|Traits}}}}
{{dsc|{{tt|value_type}}|{{tt|CharT}}}}
{{dsc inc|cpp/container/dsc allocator_type|basic_string}}
{{dsc inc|cpp/container/dsc size_type|basic_string}}
{{dsc inc|cpp/container/dsc difference_type|basic_string}}
{{dsc inc|cpp/container/dsc reference|basic_string}}
{{dsc inc|cpp/container/dsc const_reference|basic_string}}
{{dsc inc|cpp/container/dsc pointer|basic_string}}
{{dsc inc|cpp/container/dsc const_pointer|basic_string}}
{{dsc inc|cpp/container/dsc iterator|basic_string}}
{{dsc inc|cpp/container/dsc const_iterator|basic_string}}
{{dsc inc|cpp/container/dsc reverse_iterator|basic_string}}
{{dsc inc|cpp/container/dsc const_reverse_iterator|basic_string}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{cpp/string/basic string/dsc npos}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc constructor}}
{{dsc inc|cpp/string/basic_string/dsc destructor}}
{{dsc inc|cpp/string/basic_string/dsc operator{{=}}}}
{{dsc inc|cpp/string/basic_string/dsc assign}}
{{dsc inc|cpp/string/basic_string/dsc assign_range}}
{{dsc inc|cpp/string/basic_string/dsc get_allocator}}

{{dsc h2|元素访问}}
{{dsc inc|cpp/string/basic_string/dsc at}}
{{dsc inc|cpp/string/basic_string/dsc operator_at}}
{{dsc inc|cpp/string/basic_string/dsc front}}
{{dsc inc|cpp/string/basic_string/dsc back}}
{{dsc inc|cpp/string/basic_string/dsc data}}
{{dsc inc|cpp/string/basic_string/dsc c_str}}
{{dsc inc|cpp/string/basic_string/dsc operator_string_view}}

{{dsc h2|迭代器}}
{{dsc inc|cpp/string/basic_string/dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc end}}
{{dsc inc|cpp/string/basic_string/dsc rbegin}}
{{dsc inc|cpp/string/basic_string/dsc rend}}

{{dsc h2|容量}}
{{dsc inc|cpp/string/basic_string/dsc empty}}
{{dsc inc|cpp/string/basic_string/dsc size}}
{{dsc inc|cpp/string/basic_string/dsc max_size}}
{{dsc inc|cpp/string/basic_string/dsc reserve}}
{{dsc inc|cpp/string/basic_string/dsc capacity}}
{{dsc inc|cpp/string/basic_string/dsc shrink_to_fit}}

{{dsc h2|修改器}}
{{dsc inc|cpp/string/basic_string/dsc clear}}
{{dsc inc|cpp/string/basic_string/dsc insert}}
{{dsc inc|cpp/string/basic_string/dsc insert_range}}
{{dsc inc|cpp/string/basic_string/dsc erase}}
{{dsc inc|cpp/string/basic_string/dsc push_back}}
{{dsc inc|cpp/string/basic_string/dsc pop_back}}
{{dsc inc|cpp/string/basic_string/dsc append}}
{{dsc inc|cpp/string/basic_string/dsc append_range}}
{{dsc inc|cpp/string/basic_string/dsc operator+{{=}}}}
{{dsc inc|cpp/string/basic_string/dsc replace}}
{{dsc inc|cpp/string/basic_string/dsc replace_with_range}}
{{dsc inc|cpp/string/basic_string/dsc copy}}
{{dsc inc|cpp/string/basic_string/dsc resize}}
{{dsc inc|cpp/string/basic_string/dsc resize_and_overwrite}}
{{dsc inc|cpp/string/basic_string/dsc swap}}

{{dsc h2|查找}}
{{dsc inc|cpp/string/basic_string/dsc find}}
{{dsc inc|cpp/string/basic_string/dsc rfind}}
{{dsc inc|cpp/string/basic_string/dsc find_first_of}}
{{dsc inc|cpp/string/basic_string/dsc find_first_not_of}}
{{dsc inc|cpp/string/basic_string/dsc find_last_of}}
{{dsc inc|cpp/string/basic_string/dsc find_last_not_of}}

{{dsc h2|操作}}
{{dsc inc|cpp/string/basic_string/dsc compare}}
{{dsc inc|cpp/string/basic_string/dsc starts_with}}
{{dsc inc|cpp/string/basic_string/dsc ends_with}}
{{dsc inc|cpp/string/basic_string/dsc contains}}
{{dsc inc|cpp/string/basic_string/dsc substr}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc operator+}}
{{dsc inc|cpp/string/basic_string/dsc operator_cmp}}
{{dsc inc|cpp/string/basic_string/dsc swap2}}
{{dsc inc|cpp/container/dsc erase seq|basic_string}}
{{dsc h2|输入/输出}}
{{dsc inc|cpp/string/basic_string/dsc operator_ltltgtgt}}
{{dsc inc|cpp/string/basic_string/dsc getline}}

{{dsc h2|数值转换}}
{{dsc inc|cpp/string/basic_string/dsc stol}}
{{dsc inc|cpp/string/basic_string/dsc stoul}}
{{dsc inc|cpp/string/basic_string/dsc stof}}
{{dsc inc|cpp/string/basic_string/dsc to_string}}
{{dsc inc|cpp/string/basic_string/dsc to_wstring}}
{{dsc end}}

===字面量===
{{dsc begin}}
{{dsc namespace|std::literals::string_literals|inline=true}}
{{dsc inc|cpp/string/basic_string/dsc operator""s}}
{{dsc end}}

===辅助类===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc hash}}
{{dsc end}}

===[[cpp/string/basic_string/deduction_guides|推导指引]] {{mark since c++17}}===

===迭代器失效===
指代 {{tt|basic_string}} 元素的引用、指针和迭代器，可能会因任何接受非 const {{tt|basic_string}} 的引用的标准库函数而失效，比如 {{lc|std::getline}}、{{lc|std::swap}} 或 {{ltt|cpp/string/basic_string/operator_ltltgtgt|operator&gt;&gt;}}，或因调用除了 {{ltt|cpp/string/basic_string/operator_at|operator[]}}、{{rlt|at}}、{{rlt|data}}、{{rlt|front}}、{{rlt|back}}、{{rlt|begin}}、{{rlt|rbegin}}、{{rlt|end}} 和 {{rlt|rend}} 之外的非 const 成员函数而失效。

===注解===
尽管在 C++23 前要求在构造或销毁 {{tt|std::basic_string}} 的元素时使用定制的 {{tt|construct}} 或 {{tt|destroy}}，所有实现都使用默认机制。{{wg21|P1072R10}} 更正了该要求以匹配既存实践。

{{ftm begin|std=1|value=1|comment=1|sort=1}}
{{ftm|std=C++14|value=201304L|__cpp_lib_string_udls|[[#字面量|字符串类型的用户定义字面量]]}}
{{ftm|std=C++20|value=201711L|__cpp_lib_starts_ends_with|{{rlt|starts_with}} 和 {{rlt|ends_with}}}}
{{ftm|std=C++20|value=201907L|__cpp_lib_constexpr_string|constexpr 的 {{tt|std::basic_string}}}}
{{ftm|std=C++20|value=201907L|__cpp_lib_char8_t|{{tt|std::u8string}}}}
{{ftm|std=C++20|value=202002L|__cpp_lib_erase_if|{{rlt|erase2|erase}} 和 {{rlt|erase2|erase_if}}}}
{{ftm|std=C++23|value=202011L|__cpp_lib_string_contains|{{rlt|contains}}}}
{{ftm|std=C++23|value=202110L|__cpp_lib_string_resize_and_overwrite|{{rlt|resize_and_overwrite}}}}
{{ftm|std=C++23|value=202202L|__cpp_lib_containers_ranges|接受{{ls|cpp/ranges/to#容器兼容范围}}的构造、插入、替换成员函数}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    using namespace std::literals;
    
    // 从 const char* 创建 string
    std::string str1 = "hello";
    
    // 从字符串字面量创建 string
    auto str2 = "world"s;
    
    // 拼接 string
    std::string str3 = str1 + " " + str2;
    
    // 打印结果
    std::cout &lt;&lt; str3 &lt;&lt; '\n';
    
    std::string::size_type pos = str3.find(" ");
    str1 = str3.substr(pos + 1); // 空格后的部分
    str2 = str3.substr(0, pos);  // 空格前的部分

    std::cout &lt;&lt; str1 &lt;&lt; ' ' &lt;&lt; str2 &lt;&lt; '\n';

    // 用下标运算符 operator[] 访问元素
    std::cout &lt;&lt; str1[0] &lt;&lt; '\n';
    str1[0] = 'W';
    std::cout &lt;&lt; str1 &lt;&lt; '\n';
}
|output=
hello world
world hello
w
World
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=530|std=C++98|before={{wg21|LWG259}} 意外的使得 {{tt|basic_string}} 的元素存储的连续性不被要求|after=再次要求}}
{{dr list item|wg=lwg|dr=2861|std=C++98|before={{tt|value_type}} 是 {{tt|Traits::char_type}}|after=改为 {{tt|CharT}}}}
{{dr list item|wg=lwg|dr=2994|paper=P1148R0|std=C++98|before={{tt|Traits::char_type}}&lt;ref&gt;{{tt|Traits::char_type}} 的情况已在 {{stddoc|P1148R0}} 中解决。&lt;/ref&gt; 或 {{tt|Allocator::char_type}} 与 {{tt|CharT}} 不同时的行为未定义|after=此时程序非良构}}
{{dr list end}}
&lt;references/&gt;

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/dsc basic_string_view}}
{{dsc end}}

===外部链接===
{{eli|{{enwiki|C%2B%2B_string_handling|C++ string handling}}}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
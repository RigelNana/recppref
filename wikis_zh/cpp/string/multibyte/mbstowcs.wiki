{{cpp/title|mbstowcs}}
{{cpp/string/multibyte/navbar}}
{{ddcl|header=cstdlib|
std::size_t mbstowcs( wchar_t* dst, const char* src, std::size_t len );
}}

转换来自首元素为 {{c|src}} 所指向的数组的多字节字符串到其宽字符表示。被转换的字符存储于 {{c|dst}} 所指向数组的相继元素。写入目标数组的宽字符数不多于 {{c|len}}。

如同以调用 {{lc|std::mbtowc}} 转换每个字符，除了 {{tt|mbtowc}} 转换状态不受影响。若满足下列条件则转换停止：
* 转换并存储了多字节空字符。
* 遇到（当前 C 本地环境中的）非法多字节字符。
* 本要存储的下个宽字符会超出 {{c|len}}。

===注解===
大多数实现中，此函数在处理过字符串时更新 {{lc|std::mbstate_t}} 类型的全局静态对象，而且不能为两个线程所同时调用，这种情况应该用 {{lc|std::mbsrtowcs}}。

POSIX 指定一个常见扩展：若 {{c|dst}} 是空指针，则此函数返回假设转换则写入 {{c|dst}} 的宽字符数。类似行为对于 {{lc|std::mbsrtowcs}} 是标准。

===参数===
{{par begin}}
{{par|dst|指向将存储宽字符串的宽字符数组的指针}}
{{par|src|指向要转换的空终止多字节字符串的首元素的指针}}
{{par|len|{{c|dst}} 所指向的数组中的可用宽字符数}}
{{par end}}

===返回值===
成功时，返回目标数组的宽字符数，不含终止符 {{c|L'\0'}}。

转换错误时（若遇到非法多字节字符），返回 {{c|static_cast&lt;std::size_t&gt;(-1)}}。

===示例===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;

int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    std::wcout.imbue(std::locale("en_US.utf8"));
    const char* mbstr = "z\u00df\u6c34\U0001f34c"; // or u8"zß水🍌"
                        // or "\x7a\xc3\x9f\xe6\xb0\xb4\xf0\x9f\x8d\x8c";
    wchar_t wstr[5];
    std::mbstowcs(wstr, mbstr, 5);
    std::wcout &lt;&lt; "宽字符串: " &lt;&lt; wstr &lt;&lt; '\n';
}
|output=
宽字符串: zß水🍌
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/multibyte/dsc mbsrtowcs}}
{{dsc inc|cpp/string/multibyte/dsc wcstombs}}
{{dsc inc|cpp/locale/codecvt/dsc do_in}}
{{dsc see c|c/string/multibyte/mbstowcs}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
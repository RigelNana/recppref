{{cpp/title|wcrtomb}}
{{cpp/string/multibyte/navbar}}
{{ddcl|header=cwchar|
std::size_t wcrtomb( char* s, wchar_t wc, std::mbstate_t* ps );
}}

转换宽字符为其窄多字节表示。

若 {{c|s}} 不是空指针，则函数检测存储 {{c|wc}} 的多字节字符表示所需的字节数（包含任何迁移序列，并考虑当前多字节转换状态 {{c|*ps}}，并存储多字节字符表示于首元素为 {{c|s}} 所指向的字符数组，按需更新 {{c|*ps}}。此函数至多能写入 {{c|MB_CUR_MAX}} 字节。

若 {{c|s}} 为空指针，则调用等价于对某内部缓冲区 {{tt|buf}} 的 {{c|std::wcrtomb(buf, L'\0', ps)}}。

若 {{c|wc}} 是空宽字符 {{c|L'\0'}}，则存储空字节，前接任何恢复到初始迁移状态所需的迁移序列，并更新转换状态形参 {{c|*ps}} 以表示初始迁移状态。

===参数===
{{par begin}}
{{par|s|指向窄字符数组的指针，其中将存储多字节字符串}}
{{par|wc|要转换的宽字符}}
{{par|ps|指向转译多字节字符串时所用的转换状态对象的指针}}
{{par end}}

===返回值===
成功时，返回写入首元素为 {{c|s}} 所指向的字符数组的字节数（包含任何迁移序列）。

失败时（若 {{c|wc}} 不是合法宽字符），返回 {{c|static_cast&lt;std::size_t&gt;(-1)}}，存储 {{lc|EILSEQ}} 于 {{lc|errno}}，并使 {{c|*ps}} 留在未指定状态。

===示例===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cwchar&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

void print_wide(const std::wstring&amp; wstr)
{
    std::mbstate_t state{};
    for (wchar_t wc : wstr)
    {
        std::string mb(MB_CUR_MAX, '\0');
        std::size_t ret = std::wcrtomb(&amp;mb[0], wc, &amp;state);
        std::cout &lt;&lt; "多字节字符 " &lt;&lt; mb &lt;&lt; " 有 " &lt;&lt; ret &lt;&lt; " 个字符\n";
    }
}

int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    std::wstring wstr = L"z\u00df\u6c34\U0001f34c"; // 或 L"zß水🍌"
    print_wide(wstr);
}
|output=
多字节字符 z 有 1 个字符
多字节字符 ß 有 2 个字符
多字节字符 水 有 3 个字符
多字节字符 🍌 有 4 个字符
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/multibyte/dsc wctomb}}
{{dsc inc|cpp/string/multibyte/dsc mbrtowc}}
{{dsc inc|cpp/locale/codecvt/dsc do_out}}
{{dsc see c|c/string/multibyte/wcrtomb}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|btowc}}
{{cpp/string/multibyte/navbar}}
{{ddcl|header=cwchar|
std::wint_t btowc( int c );
}}

加宽单字节字符 {{c|c}} 为其宽字符等价物。

大多数多字节字符编码用单字节码表示来自 ASCII 字符集的字符。此函数可用于转换这种字符为 {{c|wchar_t}}。

===参数===
{{par begin}}
{{par|c|要加宽的单字节字符}}
{{par end}}

===返回值===
若 {{c|c}} 为 {{lc|EOF}} 则为 {{lc|WEOF}}。

若 {{c|(unsigned char)c}} 在初始迁移状态为合法单字节字符，则为 {{c|c}} 的宽字符表示，否则为 {{lc|WEOF}}。

===示例===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cwchar&gt;
#include &lt;iostream&gt;

void try_widen(char c)
{
    std::wint_t w = std::btowc(c);
    if (w != WEOF)
        std::cout &lt;&lt; "单字节字符 " &lt;&lt; +(unsigned char)c
                  &lt;&lt; " 被加宽为 " &lt;&lt; +w &lt;&lt; '\n';
    else
        std::cout &lt;&lt; "单字节字符 " &lt;&lt; +(unsigned char)c
                  &lt;&lt; " 加宽失败\n";
}

int main()
{
    std::setlocale(LC_ALL, "lt_LT.iso88594");
    std::cout &lt;&lt; std::hex &lt;&lt; std::showbase &lt;&lt; "在立陶宛语 ISO-8859-4 本地环境中:\n";
    try_widen('A');
    try_widen('\xdf'); // ISO-8859-4 中的德文字母 ß (U+00df)
    try_widen('\xf9'); // ISO-8859-4 中的立陶宛字母 ų (U+0173)

    std::setlocale(LC_ALL, "lt_LT.utf8");
    std::cout &lt;&lt; "在立陶宛语 UTF-8 本地环境中:\n";
    try_widen('A');
    try_widen('\xdf');
    try_widen('\xf9');
}
|p=true
|output=
在立陶宛语 ISO-8859-4 本地环境中:
被加宽为 0x41 被加宽为 0x41
被加宽为 0xdf 被加宽为 0xdf
被加宽为 0xf9 被加宽为 0x173
在立陶宛语  UTF-8 本地环境中:
被加宽为 0x41 被加宽为 0x41
被加宽为 0xdf 加宽失败
被加宽为 0xf9 加宽失败
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/multibyte/dsc wctob}}
{{dsc inc|cpp/locale/ctype/dsc do_widen}}
{{dsc see c|c/string/multibyte/btowc}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
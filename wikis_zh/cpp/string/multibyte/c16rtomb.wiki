{{cpp/title|c16rtomb}}
{{cpp/string/multibyte/navbar}}
{{ddcl|header=cuchar|since=c++11|
std::size_t c16rtomb( char* s, char16_t c16, std::mbstate_t* ps );
}}

从变长 16 位宽字符表示（典型地为 UTF-16）转换单个编码点到其窄多字节字符表示。

若 {{c|s}} 不是空指针且 {{c|c16}} 是合法的编码点变长编码中的最后一个 16 位编码单元，则函数确定存储该编码点所需的字节数（包含任何迁移序列，并考虑当前多字节转换状态 {{c|*ps}}），并存储多字节表示于首元素为 {{c|s}} 所指向的字符数组，若必要则更新 {{c|*ps}}。此函数最能写入 {{lc|MB_CUR_MAX}} 个字节。

若 {{c|s}} 是空指针，则调用等价于对于某内部缓冲区 {{tt|buf}} 的 {{c|std::c16rtomb(buf, u'\0', ps)}} 。

若 {{c|c16}} 是空宽字符 {{c|u'\0'}}，则存储空字节，前附恢复到初始迁移状态所需的任何迁移序列，并更新 {{c|*ps}} 以表示初始迁移状态。

若 {{c|c16}} 不是宽字符的 16 位表示中最终编码单元，则不写入 {{c|s}} 所指向的数组，只更新 {{c|*ps}}。

此函数所用的宽字符编码为当前活跃的 C 本地环境所指定。

===参数===
{{par begin}}
{{par|s|指向将存储多字节字符的窄字符数组的指针}}
{{par|c16|要转换的 16 位宽字符}}
{{par|ps|指向转译多字节字符串时所用转换状态对象的指针}}
{{par end}}

===返回值===
成功时，返回写入首元素为 {{c|s}} 所指向的字符数组的字节数（包含任何迁移序列）。此值可以是 {{c|0}}，例如在处理代用对的前导 {{c/core|char16_t}} 单元时。

失败时（若 {{c|c16}} 不是合法的 16 位编码单元），则返回 {{c|-1}}，并存储 {{lc|EILSEQ}} 于 {{lc|errno}}，把 {{c|*ps}} 置于未指定状态。

===注解===
C++ 标准将此函数的语义委派到 C 标准。在 C11 刚发布时，不同于转换变宽多字节（如 UTF-8）到变宽 16 位（如 UTF-16）编码的 {{lc|std::mbrtoc16}}，此函数只能转换单个单元的 16 位编码，这表示尽管此函数的原目的如此，它仍不能转换 UTF-16 到 UTF-8。这为 C11 后的缺陷报告 {{stddoc|n2059.htm#dr_488|DR488|lang=c}} 所更正。

===示例===
{{example|此示例假设已应用{{stddoc|n2059.htm#dr_488|缺陷报告 488|lang=c}} 的修复
|code=
#include &lt;climits&gt;
#include &lt;clocale&gt;
#include &lt;cuchar&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;
 
int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    std::u16string_view strv = u"zß水🍌"; // 或 z\u00df\u6c34\U0001F34C
    std::cout &lt;&lt; "处理 " &lt;&lt; strv.size() &lt;&lt; " UTF-16 代码单元: [ ";
    for (char16_t c : strv)
        std::cout &lt;&lt; std::showbase &lt;&lt; std::hex &lt;&lt; static_cast&lt;int&gt;(c) &lt;&lt; ' ';
    std::cout &lt;&lt; "]\n";
 
    std::mbstate_t state{};
    char out[MB_LEN_MAX]{};
    for (char16_t c : strv)
    {
        std::size_t rc = std::c16rtomb(out, c, &amp;state);
        std::cout &lt;&lt; static_cast&lt;int&gt;(c) &lt;&lt; " 转换为 [ ";
        if (rc != (std::size_t) - 1)
            for (unsigned char c8 : std::string_view{out, rc})
                std::cout &lt;&lt; +c8 &lt;&lt; ' ';
        std::cout &lt;&lt; "]\n";
    }
}
|output=
处理 5 UTF-16 代码单元: [ 0x7a 0xdf 0x6c34 0xd83c 0xdf4c ]
0x7a 转换为 [ 0x7a ]
0xdf 转换为 [ 0xc3 0x9f ]
0x6c34 转换为 [ 0xe6 0xb0 0xb4 ]
0xd83c 转换为 [ ]
0xdf4c 转换为 [ 0xf0 0x9f 0x8d 0x8c ]
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/multibyte/dsc mbrtoc16}}
{{dsc inc|cpp/string/multibyte/dsc c8rtomb}}
{{dsc inc|cpp/locale/codecvt/dsc do_out|mem=std::codecvt&lt;char16_t, char, std::mbstate_t&gt;}}
{{dsc see c|c/string/multibyte/c16rtomb}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
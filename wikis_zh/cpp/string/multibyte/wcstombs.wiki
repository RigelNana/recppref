{{cpp/title|wcstombs}}
{{cpp/string/multibyte/navbar}}
{{ddcl|header=cstdlib|
std::size_t wcstombs( char* dst, const wchar_t* src, std::size_t len );
}}

转换来自首元素为 {{c|src}} 所指向的数组到其始于初始迁移状态的多字节表示。转换出的字符被存储于 {{c|dst}} 所指向的数组的相继元素。写入目标数组的字节数不多于 {{c|len}} 。

如同以调用 {{lc|std::wctomb}} 每个字符，但 {{tt|wctomb}} 的转换状态不受影响。若满足下列条件则转换停止：
* 转换并存储空字符。
* 找到当前 C 本地环境中不对应合法字符的 {{c|wchar_t}}。
* 下个要存储的多字节字符会超出 {{tt|len}}。

===注解===
大多数实现中，此函数在处理过字符串时更新 {{lc|std::mbstate_t}} 类型的全局静态对象，而且不能为两个线程同时调用，这种情况下应使用 {{lc|std::wcsrtombs}}。

POSIX 指定一个常见扩展：若 {{c|dst}} 是空指针，则此函数返回假设转换则会写入 {{c|dst}} 的字节数。类似行为对于  {{lc|std::wcsrtombs}} 是标准。

===参数===
{{par begin}}
{{par|dst|指向窄字符数组的指针，其中将存储多字节字符}}
{{par|src|指向要转换的空终止宽字符串首字符的指针}}
{{par|len|{{c|dst}} 所指向数组中的可用字节数}}
{{par end}}

===返回值===
成功时，返回写入首元素为 {{c|dst}} 所指向的字符数组的字节数（包含任何迁移序列，但不含终止的 {{c|'\0'}}）。

转换错误时（若遇到非法宽字符），返回 {{c|static_cast&lt;std::size_t&gt;(-1)}}。

===示例===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;

int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    // UTF-8 窄多字节编码
    const wchar_t* wstr = L"z\u00df\u6c34\U0001d10b"; // 或 L"zß水𝄋"
    char mbstr[11];
    std::wcstombs(mbstr, wstr, 11);
    std::cout &lt;&lt; "multibyte string: " &lt;&lt; mbstr &lt;&lt; '\n';
}
|output=
multibyte string: zß水𝄋
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/multibyte/dsc wcsrtombs}}
{{dsc inc|cpp/string/multibyte/dsc mbstowcs}}
{{dsc inc|cpp/locale/codecvt/dsc do_out}}
{{dsc see c|c/string/multibyte/wcstombs}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/string/char_traits/title|eq/lt}}
{{cpp/string/char_traits/navbar}}
{{dcl begin}}
{{dcl|num=1|notes={{mark constexpr since c++11}}&lt;br&gt;{{mark noexcept since c++11}}|
static bool eq( char_type a, char_type b );
}}
{{dcl|num=2|notes={{mark constexpr since c++11}}&lt;br&gt;{{mark noexcept since c++11}}|
static bool lt( char_type a, char_type b );
}}
{{dcl end}}

比较两个字符。

@1@ 比较 {{c|a}} 与 {{c|b}} 是否相等，行为等同于
* {{c|1=static_cast&lt;unsigned char&gt;(a) == static_cast&lt;unsigned char&gt;(b)}}，如果 {{tt|char_type}} 是 {{c/core|char}}，
* 否则等同于 {{c|1=a == b}}。

@2@ 以全序的方式比较 {{c|a}} 是否小于 {{c|b}}，行为等同于
* {{c|static_cast&lt;unsigned char&gt;(a) &lt; static_cast&lt;unsigned char&gt;(b)}}，如果 {{tt|char_type}} 是 {{c/core|char}}，
* 否则等同于 {{c|a &lt; b}}。

对字符特征的关于 {{tt|X::eq}} 和 {{tt|X::lt}} 的通用要求请参考{{named req|CharTraits}}。

===参数===
{{par begin}}
{{par|a, b|要比较的字符值}}
{{par end}}

===返回值===
@1@ 在 {{c|a}} 等于 {{c|b}} 时返回 {{c|true}}，否则返回 {{c|false}}。
@2@ 在 {{c|a}} 小于 {{c|b}} 时返回 {{c|true}}，否则返回 {{c|false}}。

===复杂度===
常数。

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=467|std=C++98|before=对于 {{c/core|std::char_traits&lt;char&gt;}}，{{tt|eq()}} 和&lt;br&gt;{{tt|lt()}} 的语义与 {{c/core|char}} 的内建 {{c|1===}} 和 {{c|&lt;}} 一致&lt;ref&gt;大部分实现会追求效率而调用 {{lc|std::memcmp()}}，它会将数据视为 {{c/core|unsigned char}} 的数组。如果此类实现中 {{c/core|char}} [[cpp/language/type#字符类型|有符号]]，那么 {{c/core|std::char_traits&lt;char&gt;}} 不能满足{{named req|CharTraits}}的类型要求。&lt;/ref&gt;|after=改成与 {{c/core|unsigned char}}&lt;br&gt;的内建 {{c|1===}} 和 {{c|&lt;}} 一致}}
{{dr list end}}
&lt;references/&gt;

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
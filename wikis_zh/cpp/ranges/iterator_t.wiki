{{cpp/ranges/title|iterator_t|const_iterator_t|sentinel_t|const_sentinel_t}}
{{cpp/ranges/navbar}}
{{dcl begin}}
{{dcl header|ranges}}

{{dcl|num=1|since=c++20|1=
template&lt; class T &gt;
using iterator_t = decltype(ranges::begin(std::declval&lt;T&amp;&gt;()));
}}
{{dcl|num=2|since=c++23|1=
template&lt; ranges::range R &gt;
using const_iterator_t = decltype(ranges::cbegin(std::declval&lt;R&amp;&gt;()));
}}
{{dcl|num=3|since=c++20|1=
template&lt; ranges::range R &gt;
using sentinel_t = decltype(ranges::end(std::declval&lt;R&amp;&gt;()));
}}
{{dcl|num=4|since=c++23|1=
template&lt; ranges::range R &gt;
using const_sentinel_t = decltype(ranges::cend(std::declval&lt;R&amp;&gt;()));
}}
{{dcl end}}

@1@ 用于获得 {{tt|T}} 的迭代器类型。
@2@ 用于获得 {{lconcept|range}} 类型 {{tt|R}} 的常量迭代器类型。
@3@ 用于获得 {{lconcept|range}} 类型 {{tt|R}} 的哨位类型。
@4@ 用于获得 {{lconcept|range}} 类型 {{tt|R}} 的常量哨位类型。

===模板形参===
{{par begin}}
{{par|T|能用于 {{l2tt std|cpp/ranges/begin}} 的类型}}
{{par|R|{{lconcept|range}} 类型或 {{lconcept|sized_range}} 类型}}
{{par end}}

===注解===
{{tt|iterator_t}} 能应用到非范围类型，例如未知边界数组。

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3946|std=C++23|before={{tt|const_iterator_t}} 和 {{tt|const_sentinel_t}} 分别与 {{tt|ranges::cbegin}} 和 {{tt|ranges::cend}} 的结果不一致|after=已修正}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc iter_t}}
{{dsc inc|cpp/ranges/dsc range_size_t}}
{{dsc inc|cpp/ranges/dsc range_reference_t}}
{{dsc end}}

{{langlinks|en|es|ja}}
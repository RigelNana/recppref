{{cpp/ranges/adjacent_view/title|size}}
{{cpp/ranges/adjacent_view/navbar}}

{{dcl begin}}
{{dcl|since=c++23|
constexpr auto size() requires ranges::sized_range&lt;V&gt;;
}}
{{dcl|since=c++23|
constexpr auto size() const requires ranges::sized_range&lt;const V&gt;;
}}
{{dcl end}}

返回元素的数量。

令 {{rlpi|/#数据成员|base_}} 为底层视图。等价于：
{{source|1=
using SizeType = decltype(ranges::size(base_));
using CommonType = ranges::common_type_t&lt;SizeType, std::size_t&gt;;
auto size = static_cast&lt;CommonType&gt;(ranges::size(base_));
size -= std::min&lt;CommonType&gt;(size, N - 1);
return static_cast&lt;SizeType&gt;(size);
}}

===参数===
（无）

===返回值===
元素的数量，当 {{c|ranges::size(base_)}} 小于 {{c|N}} 值时可能为 {{c|0}}。 

===示例===
{{example
|code=
#include &lt;ranges&gt;

int main()
{
    constexpr static auto v = {1, 2, 3, 4, 5, 6};

    constexpr int width1 {4};
    constexpr auto view1 {std::views::adjacent&lt;width1&gt;(v)};
    static_assert(view1.size() == 3);
    static_assert(view1.size() == (v.size() - width1 + 1));

    constexpr int width2 {8};
    constexpr auto view2 {std::views::adjacent&lt;width2&gt;(v)};
    // 窗口过宽，所以 view2 无元素：
    static_assert(view2.size() == 0);
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc size}}
{{dsc inc|cpp/ranges/dsc ssize}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/ranges/adjacent_view/iterator/title|1=operator++,--,+=,-=}}
{{cpp/ranges/adjacent_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr /*iterator*/&amp; operator++();
}}
{{dcl|num=2|since=c++23|
constexpr /*iterator*/ operator++( int );
}}
{{dcl|num=3|since=c++23|
constexpr /*iterator*/&amp; operator--()
  requires ranges::bidirectional_range&lt;Base&gt;;
}}
{{dcl|num=4|since=c++23|
constexpr /*iterator*/ operator--( int )
  requires ranges::bidirectional_range&lt;Base&gt;;
}}
{{dcl|num=5|since=c++23|1=
constexpr /*iterator*/&amp; operator+=( difference_type n )
  requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=6|since=c++23|1=
constexpr /*iterator*/&amp; operator-=( difference_type n )
  requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl end}}

递增或递减迭代器。

令 {{rlpi|/#数据成员|current_}} 为底层迭代器数组。

@1@ 等价于：
{{source|1=
for (auto&amp; i : current_)
    i = std::ranges::next(i);
return *this;
}}
如果在调用之前，{{c|current_.back()}} 不可递增，则行为未定义。

@2@ 等价于：
{{source|1=
auto tmp = *this;
++*this;
return tmp;
}}

@3@ 等价于：
{{source|1=
for (auto&amp; i : current_)
    i = std::ranges::prev(i);
return *this;
}}
如果调用之前，{{c|current_.front()}} 不可递减，则行为未定义。

@4@ 等价于：
{{source|1=
auto tmp = *this;
--*this;
return tmp;
}}

@5@ 等价于：
{{source|1=
for (auto&amp; i : current_)
    i = i += n;
return *this;
}}
如果调用之前，{{c|current_.back() + n}} 无良定义的行为，则行为未定义。

@6@ 等价于：
{{source|1=
for (auto&amp; i : current_)
    i = i -= n;
return *this;
}}
如果调用之前，{{c|current_.front() - n}} 无良定义的行为，则行为未定义。

===参数===
{{par begin}}
{{par|n|相对于当前位置的偏移量}}
{{par end}}

===返回值===
@1,3,5,6@ {{c|*this}}。
@2,4@ {{c|*this}} 被修改前的副本。

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;list&gt;
#include &lt;ranges&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;

int main()
{
    {
        auto v = std::vector{0, 1, 2, 3, 4, 5};
        auto i = (v {{!}} std::views::pairwise).begin();
        assert((*i == std::pair{0, 1}));
        ++i;                            // 重载 (1)
        assert((*i == std::pair{1, 2}));
        --i;                            // 重载 (3)
        assert((*i == std::pair{0, 1}));
        i += 2;                         // 重载 (5)
        assert((*i == std::pair{2, 3}));
        i -= 2;                         // 重载 (6)
        assert((*i == std::pair{0, 1}));
    }
    {
        auto v = std::list{0, 1, 2, 3, 4, 5};
        auto i = (v {{!}} std::views::pairwise).begin();
        assert((*i == std::pair{0, 1}));
        ++i;                            // 重载 (1)
        assert((*i == std::pair{1, 2}));
        --i;                            // 重载 (3)
        assert((*i == std::pair{0, 1}));
//      i += 2; // 错误: v 不是 random_access_range; 重载 (5)
//      i -= 2; // 错误: v 不是 random_access_range; 重载 (6)
    }
}
}}

===参阅===
{{dsc begin}}
{{dsc mem fun|cpp/ranges/adjacent_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|进行迭代器算数|notes={{mark c++23}}}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
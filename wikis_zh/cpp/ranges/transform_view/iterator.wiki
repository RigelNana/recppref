{{cpp/ranges/transform_view/title|''iterator''}}
{{cpp/ranges/transform_view/navbar}}

{{ddcl|since=c++20|notes={{mark expos}}|
template&lt; bool Const &gt;
class /*iterator*/
}}

{{rlpt|begin|transform_view::begin}} 的返回类型，及底层视图为 {{lconcept|common_range}} 时 {{rlpt|end|transform_view::end}} 的返回类型。

const 限定的重载返回 {{c|/*iterator*/&lt;true&gt;}}。非 const 限定的重载返回 {{c|/*iterator*/&lt;false&gt;}}。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc expos mem type|Parent|private=yes|{{cpp/ranges/maybe-const|ranges::transform_view&lt;V, F&gt;}}}}
{{dsc expos mem type|Base|private=yes|{{cpp/ranges/maybe-const|V}}}}
{{dsc|{{tt|iterator_concept}}|
* 若 {{tti|Base}} 实现 {{lconcept|random_access_range}} 则为 {{lc|std::random_access_iterator_tag}}，
* 若 {{tti|Base}} 实现 {{lconcept|bidirectional_range}} 则为 {{lc|std::bidirectional_iterator_tag}}，
* 若 {{tti|Base}} 实现 {{lconcept|forward_range}} 则为 {{lc|std::forward_iterator_tag}}，
* 否则为 {{lc|std::input_iterator_tag}}。}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{small|（仅当 {{tti|Base}} 实现&lt;br&gt;{{lconcept|forward_range}} 时提供）}}|令 {{tt|MCF}} 为 {{cpp/ranges/maybe-const|F}}。
* 若 {{c/core|std::invoke_result_t&lt;MCF&amp;, ranges::range_reference_t&lt;Base&gt;&gt;}} 不是引用则为 {{lc|std::input_iterator_tag}}。
否则，令 {{tt|C}} 为 {{c/core|std::iterator_traits&lt;ranges::iterator_t&lt;Base&gt;&gt;::iterator_category}}。
* 若 {{tt|C}} 为 {{lc|std::contiguous_iterator_tag}}，则该类型为 {{lc|std::random_access_iterator_tag}}；
* 否则，该类型为 {{tt|C}}。}}
{{dsc|{{tt|value_type}}|{{c/core|std::remove_cvref_t&lt;std::invoke_result_t&lt;MCF&amp;, ranges::range_reference_t&lt;Base&gt;&gt;&gt;}}，其中 {{tt|MCF}} 代表 {{cpp/ranges/maybe-const|F}}}}
{{dsc|{{tt|difference_type}}|{{c/core|ranges::range_difference_t&lt;Base&gt;}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员名称|定义}}
{{dsc expos mem obj|current_|private=yes|指向（可能 const 限定的）{{tt|V}} 的迭代器。}}
{{dsc expos mem obj|parent_|private=yes|指向父 {{tt|transform_view}} 的指针。}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/transform_view/iterator/iterator|构造迭代器}}
{{dsc mem fun|cpp/ranges/transform_view/iterator/base|返回底层迭代器}}
{{dsc mem fun|cpp/ranges/transform_view/iterator/operator*|访问变换的元素}}
{{dsc mem fun|cpp/ranges/transform_view/iterator/operator_at|title=operator[]|按索引访问元素}}
{{dsc mem fun|cpp/ranges/transform_view/iterator/operator_arith|title=operator++&lt;br&gt;operator++{{small|(int)}}&lt;br&gt;operator--&lt;br&gt;operator--{{small|(int)}}&lt;br&gt;operator+=&lt;br&gt;operator-=|推进或减少底层迭代器}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc fun|cpp/ranges/transform_view/iterator/operator_cmp|title=operator==&lt;br&gt;operator&lt;&lt;br&gt;operator&gt;&lt;br&gt;operator&lt;=&lt;br&gt;operator&gt;=&lt;br&gt;operator&lt;=&gt;|比较底层迭代器|notes={{mark c++20}}}}
{{dsc fun|cpp/ranges/transform_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|进行迭代器算术|notes={{mark c++20}}}}
{{dsc fun|cpp/ranges/transform_view/iterator/iter_move|获得到变换的元素的右值引用|notes={{mark c++20}}}}
{{dsc end}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2259R1|std=C++20|before=始终定义成员类型 {{tt|iterator_category}}|after=仅若 {{tt|''Base''}} 实现 {{lconcept|forward_range}} 才定义}}
{{dr list item|wg=lwg|dr=3555|std=C++20|before={{tt|iterator_concept}} 的定义忽略 const|after=使之考虑}}
{{dr list item|wg=lwg|dr=3798|std=C++20|before=当转换结果为右值引用时 {{tt|iterator_category}} 仅为输入|after=可以有更强的类别}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
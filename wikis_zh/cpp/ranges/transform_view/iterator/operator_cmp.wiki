{{title|1=operator==,&lt;,&gt;,&lt;=,&gt;=,&lt;=&gt;{{small|(ranges::transform_view::''iterator'')}}}}
{{cpp/ranges/transform_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++20|1=
friend constexpr bool operator==( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    requires std::equality_comparable&lt;ranges::iterator_t&lt;Base&gt;&gt;;
}}
{{dcl|num=2|since=c++20|1=
friend constexpr bool operator&lt;( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=3|since=c++20|1=
friend constexpr bool operator&gt;( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=4|since=c++20|1=
friend constexpr bool operator&lt;=( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=5|since=c++20|1=
friend constexpr bool operator&gt;=( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=6|since=c++20|1=
friend constexpr auto operator&lt;=&gt;( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    requires ranges::random_access_range&lt;Base&gt; &amp;&amp;
             std::three_way_comparable&lt;ranges::iterator_t&lt;Base&gt;&gt;;
}}
{{dcl end}}

比较底层迭代器。

@1@ 等价于 {{c|1=return x.current_ == y.current_;}}，其中 {{tti|current_}} 是底层迭代器。
@2@ 等价于 {{c|1=return x.current_ &lt; y.current_;}}，其中 {{tti|current_}} 是底层迭代器。
@3@ 等价于 {{c|1=return y &lt; x;}}
@4@ 等价于 {{c|1=return !(y &lt; x);}}
@5@ 等价于 {{c|1=return !(x &lt; y);}}
@6@ 等价于 {{c|1=return x.current_ &lt;=&gt; y.current_;}}，其中 {{tti|current_}} 是底层迭代器。

{{cpp/hidden friend|{{tt|std::ranges::transform_view::''iterator''&lt;Const&gt;}}|plural=yes}}

{{cpp/note synthesized eq}}

===参数===
{{par begin}}
{{par|x, y|要比较的迭代器}}
{{par end}}

===返回值===
比较的结果

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/sentinel/dsc operator cmp|transform_view}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
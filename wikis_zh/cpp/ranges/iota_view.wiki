{{cpp/ranges/view title|iota}}
{{cpp/ranges/iota_view/navbar}}
{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++20|1=
template&lt; std::weakly_incrementable W,
          std::semiregular Bound = std::unreachable_sentinel_t &gt;
    requires /*weakly-equality-comparable-with*/&lt;W, Bound&gt; &amp;&amp; std::copyable&lt;W&gt;
class iota_view
    : public ranges::view_interface&lt;iota_view&lt;W, Bound&gt;&gt;
}}
{{dcl|num=2|since=c++20|1=
namespace views {
    inline constexpr /* 未指定 */ iota = /* 未指定 */;
}
}}
{{dcl h|调用签名}}
{{dcl|since=c++20|1=
template&lt; class W &gt;
    requires /* 见下文 */
constexpr /* 见下文 */ iota( W&amp;&amp; value );
}}
{{dcl|since=c++20|1=
template&lt; class W, class Bound &gt;
    requires /* 见下文 */
constexpr /* 见下文 */ iota( W&amp;&amp; value, Bound&amp;&amp; bound );
}}
{{dcl end}}

@1@ 以重复自增初值生成序列的范围工厂。可以有界或无界（无限）。
@2@ {{c|views::iota(e)}} 与 {{c|views::iota(e, f)}} 对于适合的子表达式 {{c|e}} 和 {{c|f}} 分别{{ls|cpp/language/expressions#表达式等价}}于 {{c|iota_view&lt;std::decay_t&lt;decltype((e))&gt;&gt;(e)}} 与 {{c|iota_view(e, f)}}。

{{cpp/ranges/cpo|views|iota}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|定义}}
{{dsc expos mem obj|spec={{tt|W}}|value_|id=value|起始值}}
{{dsc expos mem obj|spec={{tt|Bound}}|bound_|id=bound|哨位值，不一定可及}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/iota_view/iota_view|创建 {{tt|iota_view}}}}
{{dsc mem fun|cpp/ranges/iota_view/begin|获得 {{tt|iota_view}} 的起始迭代器}}
{{dsc mem fun|cpp/ranges/iota_view/end|获得代表 {{tt|iota_view}} 末尾的哨位}}
{{dsc mem fun|cpp/ranges/iota_view/empty|测试 {{tt|iota_view}} 是否为空（即迭代器与哨位是否比较相等）}}
{{dsc mem fun|cpp/ranges/iota_view/size|notes={{mark optional}}|在 {{tt|iota_view}} 具有大小时获得它的大小（有界时提供）}}

{{cpp/ranges/view_interface/inherit|embedded=yes|data=invalid|empty=invalid|size=yes}}
{{dsc end}}

==={{rl|deduction guides|推导指引}}===

===嵌套类===
{{dsc begin}}
{{dsc expos mem class|cpp/ranges/iota_view/iterator|迭代器类型}}
{{dsc expos mem class|cpp/ranges/iota_view/sentinel|当 {{tt|iota_view}} 有界且 {{tt|Bound}} 与 {{tt|W}} 不是同一类型时使用的哨位类型}}
{{dsc end}}

===辅助模板===
{{ddcl|since=c++20|1=
template&lt;std::weakly_incrementable W, std::semiregular Bound&gt;
constexpr bool ranges::enable_borrowed_range&lt;ranges::iota_view&lt;W, Bound&gt;&gt; = true;
}}
{{c/core|ranges::enable_borrowed_range}} 的此特化使得 {{tt|iota_view}} 满足 {{lconcept|borrowed_range}}。

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;

struct Bound
{
    int bound;
    bool operator==(int x) const { return x == bound; }
};

int main()
{
    for (int i : std::ranges::iota_view{1, 10})
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    for (int i : std::views::iota(1, 10))
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    for (int i : std::views::iota(1, Bound{10}))
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    for (int i : std::views::iota(1) {{!}} std::views::take(9))
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    std::ranges::for_each(std::views::iota(1, 10),
                          [](int i){ std::cout &lt;&lt; i &lt;&lt; ' '; });
    std::cout &lt;&lt; '\n';
}
|output=
1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=4096|std=C++20|before={{tt|views::iota}} 能照原样复制 {{tt|iota_view}}|after=已禁止}}
{{dr list item|paper=P2325R3|std=C++20|before={{tt|iota_view}} 要求 {{tt|W}} 是 {{lconcept|semiregular}} 因为 {{lconcept|view}} 要求 {{lconcept|default_initializable}}|after=仅要求 {{tt|W}} 是 {{lconcept|copyable}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc iota}}
{{dsc inc|cpp/algorithm/ranges/dsc iota}}
{{dsc inc|cpp/ranges/dsc repeat_view}}
{{dsc inc|cpp/ranges/dsc enumerate_view}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/ranges/title|rbegin}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl header|iterator}}
{{dcl|notes={{mark custpt}}|since=c++20|1=
inline namespace /* 未指定 */ {
    inline constexpr /* 未指定 */ rbegin = /* 未指定 */;
}
}}
{{dcl h|调用签名}}
{{dcl|since=c++20|1=
template&lt; class T &gt;
    requires /* 见下文 */
constexpr std::input_or_output_iterator auto rbegin( T&amp;&amp; t );
}}
{{dcl end}}

返回指向实参末元素的迭代器。

{{image|range-rbegin-rend.svg}}

如果 {{tt|T}} 是数组类型且 {{c/core|std::remove_all_extents_t&lt;std::remove_reference_t&lt;T&gt;&gt;}} 不完整，那么调用 {{tt|ranges::rbegin}} 非良构，不要求诊断。

如果实参是左值，或者 {{c|ranges::enable_borrowed_range&lt;std::remove_cv_t&lt;T&gt;&gt;}} 是 {{c|true}}，那么对 {{tt|ranges::rbegin}} 的调用[[cpp/language/expressions#表达式等价|表达式等价]]于：
# {{rev inl|until=c++23|{{box|{{lti|cpp/standard library/decay-copy}}{{c/core|(t.rbegin())}}}}}}{{rev inl|since=c++23|{{c|auto(t.rbegin())}}}}，如果该表达式合法且它的类型实现 {{lc|std::input_or_output_iterator}}。
# 否则是 {{rev inl|until=c++23|{{box|{{lti|cpp/standard library/decay-copy}}{{c/core|(rbegin(t))}}}}}}{{rev inl|since=c++23|{{c|auto(rbegin(t))}}}}，如果 {{tt|T}} 是类或枚举类型，而该表达式合法且它的类型实现 {{lc|std::input_or_output_iterator}}，其中如同仅通过进行[[cpp/language/adl|实参依赖查找]]来设立 {{tt|rbegin}} 的含义。
# 否则是 {{c|std::make_reverse_iterator(ranges::end(std::forward&lt;T&gt;(t)))}}，如果 {{c|ranges::begin(std::forward&lt;T&gt;(t))}} 和 {{c|ranges::end(std::forward&lt;T&gt;(t))}} 都是合法表达式，拥具有同一类型，且该类型实现 {{lc|std::bidirectional_iterator}}。

所有其他情况下，调用 {{tt|ranges::rbegin}} 非良构，这能在 {{c|ranges::rbegin(t)}} 出现于模板实例化的立即语境时导致[[cpp/language/sfinae|代换失败]]。

{{cpp/ranges/cpo}}

===注解===
如果实参是右值（即 {{tt|T}} 是对象类型）且 {{c|ranges::enable_borrowed_range&lt;std::remove_cv_t&lt;T&gt;&gt;}} 是 {{c|false}}，那么调用 {{tt|ranges::rbegin}} 非良构，这也会导致代换失败。

返回类型在所有情况下都实现 {{lc|std::input_or_output_iterator}}。

{{cpp/ranges/prv}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;span&gt;
#include &lt;vector&gt;

int main() 
{
    std::vector&lt;int&gt; v = {3, 1, 4};
    auto vi = std::ranges::rbegin(v);
    std::cout &lt;&lt; *vi &lt;&lt; '\n';
    *vi = 42; // OK
    
    int a[] = {-5, 10, 15};
    auto ai = std::ranges::rbegin(a);
    std::cout &lt;&lt; *ai &lt;&lt; '\n';
    *ai = 42; // OK
    
    // auto x_x = std::ranges::rbegin(std::vector{6, 6, 6});
    // 非良构：实参是右值（见注解 ↑）
    
    auto si = std::ranges::rbegin(std::span{a}); // OK
    static_assert(std::ranges::enable_borrowed_range&lt;
        std::remove_cv_t&lt;decltype(std::span{a})&gt;&gt;);
    *si = 42; // OK
}
|output=
4
15
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2602R2|std=C++20|before=存在禁止 [[cpp/language/adl|ADL]] 找到特定的非成员 {{tt|rbegin}} 的机制|after=移除这种机制}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc crbegin}}
{{dsc inc|cpp/iterator/dsc rbegin}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
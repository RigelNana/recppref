{{cpp/ranges/title|end}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl header|iterator}}
{{dcl|notes={{mark custpt}}|since=c++20|1=
inline namespace /* 未指定 */ {
    inline constexpr /* 未指定 */ end = /* 未指定 */;
}
}}
{{dcl h|调用签名}}
{{dcl|since=c++20|1=
template&lt; class T &gt;
    requires /* 见下文 */
constexpr std::sentinel_for&lt;ranges::iterator_t&lt;T&gt;&gt; auto end( T&amp;&amp; t );
}}
{{dcl end}}

返回指示范围末尾的哨位。

{{image|range-begin-end.svg}}

如果实参是左值，或者 {{c|ranges::enable_borrowed_range&lt;std::remove_cv_t&lt;T&gt;&gt;}} 是 {{c|true}}，那么调用 {{tt|ranges::end}} [[cpp/language/expressions#表达式等价|表达式等价]]于：
# {{c|t + std::extent_v&lt;T&gt;}}，如果 {{c|t}} 具有已知边界数组类型。
#* 如果 {{c/core|std::remove_all_extents_t&lt;std::remove_reference_t&lt;T&gt;&gt;}} 不完整，那么调用 {{tt|ranges::end}} 非良构，[[cpp/language/ndr|不要求诊断]]。
# 否则是 {{rev inl|until=c++23|{{box|{{lti|cpp/standard library/decay-copy}}{{c/core|(t.end())}}}}}}{{rev inl|since=c++23|{{c|auto(t.end())}}}}，如果该表达式合法且它的类型实现 {{c|std::sentinel_for&lt;ranges::iterator_t&lt;T&gt;&gt;}}。
# 否则是 {{rev inl|until=c++23|{{box|{{lti|cpp/standard library/decay-copy}}{{c/core|(end(t))}}}}}}{{rev inl|since=c++23|{{c|auto(end(t))}}}}，如果 {{tt|T}} 是类或枚举类型，而该表达式合法且它的类型实现 {{c|std::sentinel_for&lt;ranges::iterator_t&lt;T&gt;&gt;}}，其中如同仅进行[[cpp/language/adl|实参依赖查找]]来设立 {{tt|end}} 的含义。

所有其他情况下，调用 {{tt|ranges::end}} 都非良构，这能在 {{tt|ranges::end}} 的调用在模板实例化的立即语境出现时导致[[cpp/language/sfinae|代换失败]]。

{{cpp/ranges/cpo}}

===注解===
如果实参是右值（即 {{tt|T}} 是对象类型）且 {{c|ranges::enable_borrowed_range&lt;std::remove_cv_t&lt;T&gt;&gt;}} 是 {{c|false}}，或它拥有未知边界数组类型，那么调用 {{tt|ranges::end}} 非良构，这也会导致代换失败。

如果 {{c|ranges::end(std::forward&lt;T&gt;(t))}} 合法，那么当 {{tt|T}} 实现 {{lc|std::ranges::range}} 时，在所有情况下 {{c/core|decltype(ranges::end(std::forward&lt;T&gt;(t)))}} 和 {{c/core|decltype(ranges::begin(std::forward&lt;T&gt;(t)))}} 都实现 {{lc|std::sentinel_for}}。

{{cpp/ranges/prv}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;vector&gt;

int main() 
{
    std::vector&lt;int&gt; vec{3, 1, 4};
    if (std::ranges::find(vec, 5) != std::ranges::end(vec))
        std::cout &lt;&lt; "在 vector v 中找到了 5！\n";
    
    int arr[]{5, 10, 15};
    if (std::ranges::find(arr, 5) != std::ranges::end(arr))
        std::cout &lt;&lt; "在数组 a 中找到了 5！\n";
}
|output=
在数组 a 中找到了 5！
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2602R2|std=C++20|before=存在妨碍[[cpp/language/adl|ADL]]找到特定非成员 {{tt|end}} 的机制|after=移除这种机制}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc cend}}
{{dsc inc|cpp/ranges/dsc begin}}
{{dsc inc|cpp/iterator/dsc end}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
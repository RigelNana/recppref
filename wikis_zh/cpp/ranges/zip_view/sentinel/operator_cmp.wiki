{{title|1= operator=={{small|(ranges::zip_view::''iterator'', ranges::zip_view::''sentinel'')}}}}
{{cpp/ranges/zip_view/navbar}}

{{dcl begin}}
{{dcl|since=c++23|1=
template&lt; bool OtherConst &gt;
    requires (std::sentinel_for&lt;
        ranges::sentinel_t&lt;/*maybe-const*/&lt;Const, Views&gt;&gt;,
        ranges::iterator_t&lt;/*maybe-const*/&lt;OtherConst, Views&gt;&gt;&gt; &amp;&amp; ...)
friend constexpr bool operator==( const /*iterator*/&lt;OtherConst&gt;&amp; x,
                                  const /*sentinel*/&amp; y  );
}}
{{dcl end}}

比较 {{c|x}} 的底层迭代器元组和 {{c|y}} 的底层哨位元组。

{{cpp/hidden friend|{{tt|zip_view::''sentinel''&lt;Const&gt;}}}}

{{cpp/note synthesized eq}}

===参数===
{{par begin}}
{{par|x|要比较的{{lt|cpp/ranges/zip_view/iterator|迭代器}}}}
{{par|y|要比较的{{lt|cpp/ranges/zip_view/sentinel|哨位}}}}
{{par end}}

===返回值===
令 {{c|x.current_}} 代表底层迭代器元组，并令 {{c|y.end_}} 代表底层哨位元组。

返回
* {{c|true}}，如果从等价于 {{c|std::get&lt;i&gt;(x.current_)}} 的表达式所获取的至少一个底层迭代器，（使用适当的 {{c|1= operator==}}）求值等于从等价于 {{c|std::get&lt;i&gt;(y.end_)}} 的表达式所获取的底层哨位，其中索引 {{tt|i}} 属于范围 {{tt|1= 0 &lt;= i &lt; sizeof...(Views)}}，
* 否则为 {{c|false}}。

===示例===
{{example
|code=
|output=
}}

{{langlinks|en|es|ja|ru}}
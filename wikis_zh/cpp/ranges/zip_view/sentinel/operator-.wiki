{{title|operator-{{small|(ranges::zip_view::''sentinel'')}}}}
{{cpp/ranges/zip_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|
template&lt; bool OtherConst &gt;
    requires (std::sized_sentinel_for&lt;
                ranges::sentinel_t&lt;/*maybe-const*/&lt;Const, Views&gt;&gt;,
                ranges::iterator_t&lt;/*maybe-const*/&lt;OtherConst, Views&gt;&gt;&gt; &amp;&amp; ...)
friend constexpr
    std::common_type_t&lt;ranges::range_difference_t&lt;/*maybe-const*/&lt;OtherConst, Views&gt;&gt;...&gt;
operator-( const iterator&lt;OtherConst&gt;&amp; x, const sentinel&amp; y );
}}
{{dcl|num=2|since=c++23|
template&lt; bool OtherConst &gt;
    requires (std::sized_sentinel_for&lt;
                ranges::sentinel_t&lt;/*maybe-const*/&lt;Const, Views&gt;&gt;,
                ranges::iterator_t&lt;/*maybe-const*/&lt;OtherConst, Views&gt;&gt;&gt; &amp;&amp; ...)
friend constexpr
    std::common_type_t&lt;ranges::range_difference_t&lt;/*maybe-const*/&lt;OtherConst, Views&gt;&gt;...&gt;
operator-( const sentinel&amp; y, const iterator&lt;OtherConst&gt;&amp; x );
}}
{{dcl end}}

计算 {{c|x}} 的底层迭代器元组和 {{c|y}} 的底层哨位元组之间的最小距离。

{{cpp/hidden friend|{{tt|zip_view::''sentinel''&lt;Const&gt;}}|plural=yes}}

===参数===
{{par begin}}
{{par|x|{{lt|cpp/ranges/zip_view/iterator}}}}
{{par|y|{{lt|cpp/ranges/zip_view/sentinel}}}}
{{par end}}

===返回值===
令 {{tti|current_}} 代表 {{c|x}} 的底层迭代器元组，并令 {{tti|end_}} 代表 {{c|y}} 的底层哨位元组。

令 {{tt|''DIST''(x, y, i)}} 为对于某个整数 {{tt|i}} 通过等价于 {{c|std::get&lt;i&gt;(x.current_) - std::get&lt;i&gt;(y.end_)}} 的表达式计算所得的距离。

@1@ 范围 {{tt|0 ≤ i &lt; sizeof...(Views)}} 中的所有 {{tt|i}} 中的 {{tt|''DIST''(x, y, i)}} 的最小绝对值
@2@ {{c|1= -(x - y)}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;deque&gt;
#include &lt;list&gt;
#include &lt;ranges&gt;
#include &lt;vector&gt;

int main()
{
    auto x = std::vector{1, 2, 3, 4};
    auto y = std::deque{'a', 'b', 'c'};
    auto z = {1.1, 2.2};
    auto w = std::list{1, 2, 3};

    auto p = std::views::zip(x, y, z);
    assert(p.begin() - p.end() == +2);
    assert(p.end() - p.begin() == -2);

    [[maybe_unused]]
    auto q = std::views::zip(x, y, w);

    // 以下代码会引发编译时错误，因为 std::list::iterator 并不支持计算距离所需的 operator-：
    // auto e = q.begin() - q.end();
}
}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/ranges/zip_view/title|''iterator''}}
{{cpp/ranges/zip_view/navbar}}
{{dcl begin}}
{{dcla|anchor=no|expos=yes|
template&lt; bool Const &gt;
class /*iterator*/;
}}
{{dcl h|辅助概念}}
{{dcl|num=2|notes={{mark expos}}|1=
template&lt; bool C, class... Views &gt;
concept /*all-forward*/ =
    (ranges::forward_range&lt;std::conditional_t&lt;C, const Views, Views&gt;&gt; &amp;&amp; ...);
}}
{{dcl|num=3|notes={{mark expos}}|1=
template&lt; bool C, class... Views &gt;
concept /*all-bidirectional*/ =
    (ranges::bidirectional_range&lt;std::conditional_t&lt;C, const Views, Views&gt;&gt; &amp;&amp; ...);
}}
{{dcl|num=4|notes={{mark expos}}|1=
template&lt; bool C, class... Views &gt;
concept /*all-random-access*/ =
    (ranges::random_access_range&lt;std::conditional_t&lt;C, const Views, Views&gt;&gt; &amp;&amp; ...);
}}
{{dcl end}}

可能 const 限定的 {{tt|zip_view}} 的迭代器类型，由 {{rlpt|begin|zip_view::begin}} 返回，并在特定情况下由 {{rlpt|end|zip_view::end}} 返回。

类型 {{c|/*iterator*/&lt;true&gt;}} 或 {{c|/*iterator*/&lt;false&gt;}} 分别将底层视图当作 const 限定或未 const 限定。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|iterator_concept}}|
* {{lc|std::random_access_iterator_tag}}，若 {{box|{{lsi|cpp/ranges#all-random-access}}{{c/core|&lt;Const, Views...&gt;}}}} 为 {{c|true}}，
* 否则为 {{lc|std::bidirectional_iterator_tag}}，若 {{box|{{lsi|cpp/ranges#all-bidirectional}}{{c/core|&lt;Const, Views...&gt;}}}} 为 {{c|true}}，
* 否则为 {{lc|std::forward_iterator_tag}}，若 {{box|{{lsi|cpp/ranges#all-forward}}{{c/core|&lt;Const, Views...&gt;}}}} 为 {{c|true}}，
* 否则为 {{lc|std::input_iterator_tag}}。}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{mark cond present}}|
* {{lc|std::input_iterator_tag}}，若 {{box|{{lsi|cpp/ranges#all-forward}}{{c/core|&lt;Const, Views...&gt;}}}} 为 {{c|true}}，
* 否则不定义。}}
{{dsc|{{tt|value_type}}|
* {{c|std::tuple&lt;ranges::range_value_t&lt;Views&gt;...&gt;}}，若 {{tt|Const}} 为 {{c|false}}，
* 否则为 {{c|std::tuple&lt;ranges::range_value_t&lt;const Views&gt;...&gt;}}。}}
{{dsc|{{tt|difference_type}}|
* {{c|std::common_type_t&lt;ranges::range_difference_t&lt;Views&gt;...&gt;}}，若 {{tt|Const}} 为 {{c|false}}，
* 否则为 {{c|std::common_type_t&lt;ranges::range_difference_t&lt;const Views&gt;...&gt;}}。}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员名称|定义}}
{{dsc expos mem obj|current_|private=yes|
* {{c|std::tuple&lt;ranges::iterator_t&lt;Views&gt;...&gt;}}，如果 {{tt|Const}} 为 {{c|false}}，
* 否则为 {{c|std::tuple&lt;ranges::iterator_t&lt;const Views&gt;...&gt;}}。}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/zip_view/iterator/iterator|构造迭代器}}
{{dsc mem fun|cpp/ranges/zip_view/iterator/operator*|获取由底层被指向元素构成的元组式值}}
{{dsc mem fun|cpp/ranges/zip_view/iterator/operator_at|title=operator[]|获取由给定偏移处的元素构成的元组式值}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|zip_view}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc fun|cpp/ranges/zip_view/iterator/operator_cmp|title=operator==&lt;br&gt;operator&lt;&lt;br&gt;operator&gt;&lt;br&gt;operator&lt;=&lt;br&gt;operator&gt;=&lt;br&gt;operator&lt;=&gt;|比较底层迭代器|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/zip_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|在底层迭代器上实施迭代器算术|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/zip_view/iterator/iter_move|获取一个元组式值，代表要移动的底层被指向元素|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/zip_view/iterator/iter_swap|交换底层的被指向元素|notes={{mark c++23}}}}
{{dsc end}}

===示例===
{{example}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
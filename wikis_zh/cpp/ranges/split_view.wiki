{{cpp/ranges/view title|split}}
{{cpp/ranges/split_view/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++20|1=
template&lt; ranges::forward_range V, ranges::forward_range Pattern &gt;
requires ranges::view&lt;V&gt; &amp;&amp;
         ranges::view&lt;Pattern&gt; &amp;&amp;
         std::indirectly_comparable&lt;ranges::iterator_t&lt;V&gt;,
                                    ranges::iterator_t&lt;Pattern&gt;,
                                    ranges::equal_to&gt;
class split_view
    : public ranges::view_interface&lt;split_view&lt;V, Pattern&gt;&gt;
}}
{{dcl|num=2|since=c++20|1=
namespace views {
    inline constexpr /* 未指定 */ split = /* 未指定 */;
}
}}
{{dcl h|调用签名}}
{{dcl|since=c++20|1=
template&lt; ranges::viewable_range R, class Pattern &gt;
    requires /* 见下文 */
constexpr ranges::view auto split( R&amp;&amp; r, Pattern&amp;&amp; pattern );
}}
{{dcl|since=c++20|1=
template&lt; class Pattern &gt;
constexpr /* 范围适配器闭包 */ split( Pattern&amp;&amp; pattern );
}}
{{dcl end}}
&lt;!-- add an extended wording --&gt;

@1@ {{tt|split_view}} 接收一个 {{lconcept|view}} 与一个分隔符，并按分隔符切割 {{lconcept|view}} 为子范围。

@2@ {{named req|RangeAdaptorObject}}。对于任何合适的子表达式 {{c|e}} 和 {{c|p}}，表达式 {{c|views::split(e, p)}} [[cpp/language/expressions#表达式等价|表达式等价]]于 {{c|split_view(e, p)}}&lt;!-- LWG 3524 --&gt;。

当底层 {{lconcept|view}} {{tt|V}} 实现概念 {{lconcept|forward_range}} 和 {{lconcept|common_range}} 时，{{tt|split_view}} 实现对应概念。

内层范围（{{c/core|ranges::range_reference_t&lt;split_view&gt;}}）是一个实现了 {{lconcept|common_range}} 的 {{c/core|ranges::subrange&lt;ranges::iterator_t&lt;V&gt;&gt;}}，并且在 {{c/core|ranges::iterator_t&lt;V&gt;}} 实现了 {{c|std::sized_sentinel_for&lt;ranges::iterator_t&lt;V&gt;&gt;}} 时实现 {{lconcept|sized_range}}，并且在 {{tt|V}} 实现了 {{lconcept|contiguous_range}}，{{lconcept|random_access_range}}，{{lconcept|bidirectional_range}} 和 {{lconcept|forward_range}} 时实现对应概念。

和 {{rlpt|lazy_split_view}} 不同，{{tt|split_view}} 可以保持子范围的连续性，使其适用于字符串分割。

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|描述}}
{{dsc expos mem obj|base_|id=base|private=yes|spec={{tt|V}}|底层（适配的）{{lconcept|view}}}}
{{dsc expos mem obj|pattern_|id=pattern|private=yes|spec={{tt|Pattern}}|用作切分底层 {{lconcept|view}} 的分隔符的模式对象}}
{{dsc expos mem obj|cached_begin_|id=cached_begin|private=yes|spec={{lti|cpp/ranges/non-propagating-cache}}&lt;br&gt;{{nbspt|4}}{{c/core|&lt;ranges::subrange}}&lt;br&gt;{{nbspt|8}}{{c/core|&lt;ranges::iterator_t&lt;V&gt;&gt;&gt;}}|第一次调用 {{rltf|begin}} 的结果的对象}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc constructor|split_view}}
{{dsc inc|cpp/ranges/adaptor/dsc base|split_view}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|split_view}}
{{dsc inc|cpp/ranges/adaptor/dsc end|split_view}}
{{dsc expos mem fun|cpp/ranges/split_view/find_next|寻找模式的下一次出现}}

{{cpp/ranges/view_interface/inherit|embedded=yes|data=invalid|back=invalid|size=invalid|operator[]=invalid}}
{{dsc end}}

===嵌套类===
{{dsc begin}}
{{dsc expos mem class|cpp/ranges/split_view/iterator|迭代器类型}}
{{dsc expos mem class|cpp/ranges/split_view/sentinel|哨位类型}} 
{{dsc end}}

==={{rl|deduction guides|推导指引}}===

===注解===
在 {{wg21|P2210R2}} 之前，{{tt|split_view}} 在切分时使用了一种''惰性''{{sep}}机制，这使得其无法保持底层视图的双向、随机访问和连续性质，也无法使内部范围的迭代器类型与底层视图相同。因此，它被 {{wg21|P2210R2}} 重新设计，而惰性机制被移动到了 {{lc|ranges::lazy_split_view|lazy_split_view}}。

分隔符 {{tt|pattern}} 通常不应当是普通字符串字面量，因为它会把空终止符也当做分隔符的必要部分；建议代之以使用 {{lc|std::string_view}} 字面量。

===示例===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string_view&gt;

int main()
{
    using std::operator""sv;
    constexpr auto words{"Hello^_^C++^_^20^_^!"sv};
    constexpr auto delim{"^_^"sv};

    for (const auto word : std::views::split(words, delim))
        // 使用 string_view 的 C++23 范围构造函数：
        std::cout &lt;&lt; std::quoted(std::string_view(word)) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
"Hello" "C++" "20" "!"
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2210R2|std=C++20|before=旧的 {{tt|split_view}} 过于惰性而无法易用|after=其被重新设计}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc lazy_split_view}}
{{dsc inc|cpp/ranges/dsc join_view}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
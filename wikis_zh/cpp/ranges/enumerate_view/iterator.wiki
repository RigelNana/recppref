{{cpp/ranges/enumerate_view/title|''iterator''}}
{{cpp/ranges/enumerate_view/navbar}}

{{ddcl|since=c++23|notes={{mark expos}}|
template&lt; bool Const &gt;
class /*iterator*/
}}

{{rlpt|begin|enumerate_view::begin}} 的返回类型，并且在底层视图 {{tt|V}} 是 {{lconcept|common_range}} 时也是 {{rlpt|end|enumerate_view::end}} 的返回类型。

对于 const 限定的重载返回类型 {{c/core|/*iterator*/&lt;true&gt;}}。对非 const 限定的重载返回类型 {{c/core|/*iterator*/&lt;false&gt;}}。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc expos mem type|Base|private=yes|在 {{tt|Const}} 是 {{c|true}} 时是 {{c|const V}}，否则是 {{tt|V}}。}}
{{dsc|{{tt|iterator_category}}|{{lc|std::input_iterator_tag}}}}
{{dsc|{{tt|iterator_concept}}|
* 在 {{tti|Base}} 实现 {{lconcept|random_access_range}} 时是 {{lc|std::random_access_iterator_tag}}。
* 否则在 {{tti|Base}} 实现 {{lconcept|bidirectional_range}} 时是 {{lc|std::bidirectional_iterator_tag}}。
* 否则在 {{tti|Base}} 实现 {{lconcept|forward_range}} 时是 {{lc|std::forward_iterator_tag}}。
* 否则是 {{lc|std::input_iterator_tag}}。}}
{{dsc|{{tt|difference_type}}|{{c/core|ranges::range_difference_t&lt;Base&gt;}}}}
{{dsc|{{tt|value_type}}|{{c/core|std::tuple&lt;difference_type, ranges::range_value_t&lt;Base&gt;&gt;}}}}
{{dsc expos mem type|reference-type|private=yes|{{c/core|std::tuple&lt;difference_type, ranges::range_reference_t&lt;Base&gt;&gt;}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员名字|定义}}
{{dsc expos mem obj|current_|private=yes|指向当前元素的 {{c/core|ranges::iterator_t&lt;Base&gt;}} 类型的迭代器}}
{{dsc expos mem obj|pos_|private=yes|类型是 {{tt|difference_type}} 的当前索引}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/enumerate_view/iterator/iterator|构造迭代器}}
{{dsc mem fun|cpp/ranges/enumerate_view/iterator/base|返回指向当前元素的迭代器}}
{{dsc mem fun|cpp/ranges/enumerate_view/iterator/index|返回当前的索引}}
{{dsc mem fun|cpp/ranges/enumerate_view/iterator/operator*|访问元素}}
{{dsc mem fun|cpp/ranges/enumerate_view/iterator/operator at|title=operator[]|通过索引访问元素}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|enumerate_view}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc fun|cpp/ranges/enumerate_view/iterator/operator cmp|title=operator==&lt;br&gt;operator&lt;=&gt;|比较底层迭代器|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/enumerate_view/iterator/operator arith2|title=operator+&lt;br&gt;operator-|执行迭代器算术运算|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/enumerate_view/iterator/iter_move|将底层迭代器解引用结果的类型转换为它关联的右值引用类型|notes={{mark c++23}}}}
{{dsc end}}

===示例===
{{example}}

===引用===
{{ref std c++23}}
{{ref std|title=Class template {{tt|enumerate_view::iterator}}|id=range.enumerate.iterator|section=26.7.23.3}}
{{ref std end}}

&lt;!--===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/elements_view/dsc iterator}}
{{dsc end}}--&gt;

{{langlinks|de|en|es|ja|ru}}
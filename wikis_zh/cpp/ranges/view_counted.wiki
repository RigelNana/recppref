{{cpp/ranges/views/title|counted}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl|since=c++20|1=
inline constexpr /* 未指明 */ counted = /* 未指明 */;
}}
{{dcl h|调用签名}}
{{dcl|since=c++20|1=
template&lt; class Iterator, class DifferenceType &gt;
    requires /* 见下文 */
constexpr /*span-or-subrange*/ counted( Iterator&amp;&amp; it, DifferenceType&amp;&amp; count );
}}
{{dcl end}}

计数视图是表示某迭代器 {{tt|i}} 与非负整数 {{tt|n}} 的''计数范围'' {{range/core|i|n}} 的元素的 {{lconcept|view}}。

计数范围 {{range/core|i|n}} 是始于以 {{tt|i}} 所指向的元素，直到但不包含应用 {{tt|n}} 次 {{c|++i}} 的结果所指向的元素的 {{tt|n}} 个元素。

若 {{c|1=n == 0}}，则计数范围合法且为空。否则，计数范围仅若 {{tt|n}} 为正，{{tt|i}} 可解引用，且 {{range|++i|--n}} 为合法的计数范围才合法。

正式而言，若 {{c|it}} 与 {{c|count}} 为表达式，{{tt|T}} 为 {{c|std::decay_t&lt;decltype((it))&gt;}}，而 {{tt|D}} 为 {{c|std::iter_difference_t&lt;T&gt;}}，则
: 若 {{tt|T}} 实现 {{lconcept|input_or_output_iterator}} 且 {{c|decltype((count))}} 实现 {{c|std::convertible_to&lt;D&gt;}}，
:* 否则，若 {{tt|T}} 实现 {{lconcept|contiguous_iterator}}，则 {{c|views::counted(it, count)}} [[cpp/language/expressions#表达式等价|表达式等价]]于 {{c|std::span(it, static_cast&lt;std::size_t&gt;(static_cast&lt;D&gt;(count)))}}，
:* 否则，若 {{tt|T}} 实现 {{lconcept|random_access_iterator}}，则 {{c|views::counted(it, count)}} [[cpp/language/expressions#表达式等价|表达式等价]]于 {{c|ranges::subrange(it, it + static_cast&lt;D&gt;(count))}}，
:* 否则，{{c|views::counted(it, count)}} [[cpp/language/expressions#表达式等价|表达式等价]]于 {{c|ranges::subrange(std::counted_iterator(it, count), std::default_sentinel)}}。
: 否则 {{c|views::counted(it, count)}} 非良构。

{{cpp/ranges/cpo|views|counted}}

===注解===
{{ttt|views::counted}} 并不检查范围长度是否足以提供全部 {{c|count}} 个元素：当必须检查时，应使用 {{c/core|views::take}}。

=== 示例 ===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;

int main()
{
    const int a[]{1, 2, 3, 4, 5, 6, 7};
    for (int i : std::views::counted(a, 3))
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    const auto il = {1, 2, 3, 4, 5};
    for (int i : std::views::counted(il.begin() + 1, 3))
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
1 2 3
2 3 4
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2393R1|std=C++20|before=从整数类类型到 {{tt|size_t}} 的隐式转换可能非法|after=使之为显式}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc take_view}}
{{dsc inc|cpp/ranges/dsc subrange}}
{{dsc inc|cpp/iterator/dsc counted_iterator}}
{{dsc inc|cpp/algorithm/ranges/dsc count}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
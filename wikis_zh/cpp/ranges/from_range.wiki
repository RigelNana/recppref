{{cpp/title|from_range|from_range_t}}
{{cpp/ranges/navbar}}
{{dcl begin}}
{{dcl header|ranges}}
{{dcl|since=c++23|1=
struct from_range_t { explicit from_range_t() = default; };
}}
{{dcl|since=c++23|
inline constexpr std::from_range_t from_range {};
}}
{{dcl end}}

{{tt|std::from_range}} 是消歧标签，可以传递给合适容器的构造函数，以表示所包含的成员是可范围构造的。

在构造函数的参数列表中使用相应的类型 {{tt|std::from_range_t}} 可以匹配目的标记。

===标准库===
下列标准库类型在构造函数中使用类型 {{tt|std::from_range_t}}：

{{dsc begin}}
{{dsc h2|容器库}}

{{dsc mem ctor|cpp/container/vector/vector|从范围构造 {{tt|vector}}|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/inplace_vector/inplace_vector|从范围构造 {{tt|inplace_vector}}|notes={{mark c++26}}}}
{{dsc mem ctor|cpp/container/hive/hive|从范围构造 {{tt|hive}}|notes={{mark c++26}}}}
{{dsc mem ctor|cpp/container/deque/deque|从范围构造 {{tt|deque}}|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/forward_list/forward_list|从范围构造 {{tt|forward_list}}|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/list/list|从范围构造 {{tt|list}}|notes={{mark c++23}}}}

{{dsc mem ctor|cpp/container/set/set|从范围构造 {{tt|set}}|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/map/map|从范围构造 {{tt|map}}|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/multiset/multiset|从范围构造 {{tt|multiset}}|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/multimap/multimap|从范围构造 {{tt|multimap}}|notes={{mark c++23}}}}

{{dsc mem ctor|cpp/container/unordered_set/unordered_set|从范围构造 {{tt|unordered_set}}|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/unordered_map/unordered_map|从范围构造 {{tt|unordered_map}}|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/unordered_multiset/unordered_multiset|从范围构造 {{tt|unordered_multiset}}|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/unordered_multimap/unordered_multimap|从范围构造 {{tt|unordered_multimap}}|notes={{mark c++23}}}}

{{dsc mem ctor|cpp/container/priority_queue/priority_queue|从范围构造 {{tt|priority_queue}}|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/queue/queue|从范围构造 {{tt|queue}}|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/stack/stack|从范围构造 {{tt|stack}}|notes={{mark c++23}}}}

{{dsc mem ctor|cpp/container/flat_set/flat_set|从范围构造 {{tt|flat_set}}|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/flat_map/flat_map|从范围构造 {{tt|flat_map}}|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/flat_multiset/flat_multiset|从范围构造 {{tt|flat_multiset}}|notes={{mark c++23}}}}
{{dsc mem ctor|cpp/container/flat_multimap/flat_multimap|从范围构造 {{tt|flat_multimap}}|notes={{mark c++23}}}}

{{dsc h2|字符串库}}
{{dsc mem ctor|cpp/string/basic_string/basic_string|从范围构造 {{tt|basic_string}}|notes={{mark c++23}}}}
{{dsc end}}

===注解===
{{feature test macro|__cpp_lib_containers_ranges|value=202202L|std=C++23|从范围构造的{{ls|cpp/ranges/to#容器兼容范围}}标签构造函数}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;string&gt;

int main()
{
#ifdef __cpp_lib_containers_ranges
    auto const range = {0x43, 43, 43};
    std::string str{std::from_range, range}; // 使用带标签构造函数
    assert(str == "C++");
#endif
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc in_place}}
{{dsc inc|cpp/container/dsc sorted_equivalent}}
{{dsc inc|cpp/container/dsc sorted_unique}}
{{dsc inc|cpp/ranges/dsc to}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
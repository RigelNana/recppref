{{cpp/ranges/view title|empty}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++20|1=
template&lt;class T&gt;
    requires std::is_object_v&lt;T&gt;
class empty_view : public ranges::view_interface&lt;empty_view&lt;T&gt;&gt;
}}
{{dcl|num=2|since=c++20|1=
namespace views {
    template&lt;class T&gt;
    constexpr empty_view&lt;T&gt; empty{};
}
}}
{{dcl end}}

@1@ 产生无特定类型元素的 {{lconcept|view}} 的范围工厂。
@2@ {{tt|empty_view}} 的变量模板。

===成员函数===
{{dsc begin}}
{{dsc mem sfun|begin|nolink=true|返回 {{c|nullptr}}}}
{{dsc mem sfun|end|nolink=true|返回 {{c|nullptr}}}}
{{dsc mem sfun|data|nolink=true|返回 {{c|nullptr}}}}
{{dsc mem sfun|size|nolink=true|返回 {{c|0}}}}
{{dsc mem sfun|empty|nolink=true|返回 {{c|true}}}}

{{cpp/ranges/view_interface/inherit|embedded=yes|empty=yes|data=yes|size=yes}}
{{dsc end}}

{{member|{{small|std::ranges::empty_view::}}begin|
{{ddcl|since=c++20|
static constexpr T* begin() noexcept { return nullptr; }
}}

{{tt|empty_view}} 不引用任何元素。
}}

{{member|{{small|std::ranges::empty_view::}}end|
{{ddcl|since=c++20|
static constexpr T* end() noexcept { return nullptr; }
}}

{{tt|empty_view}} 不引用任何元素。
}}

{{member|{{small|std::ranges::empty_view::}}data|
{{ddcl|since=c++20|
static constexpr T* data() noexcept { return nullptr; }
}}

{{tt|empty_view}} 不引用任何元素。
}}

{{member|{{small|std::ranges::empty_view::}}size|
{{ddcl|since=c++20|
static constexpr std::size_t size() noexcept { return 0; }
}}

{{tt|empty_view}} 始终为空。
}}

{{member|{{small|std::ranges::empty_view::}}empty|
{{ddcl|since=c++20|
static constexpr bool empty() noexcept { return true; }
}}

{{tt|empty_view}} 始终为空。
}}

===辅助模板===
{{ddcl|since=c++20|1=
template&lt;class T&gt;
constexpr bool ranges::enable_borrowed_range&lt;ranges::empty_view&lt;T&gt;&gt; = true;
}}
{{c/core|ranges::enable_borrowed_range}} 的此特化使得 {{tt|empty_view}} 满足 {{lconcept|borrowed_range}} 。

===注解===
尽管 {{tt|empty_view}} 从 {{tt|view_interface}} 获得成员函数 {{tt|front}}、 {{tt|back}} 及 {{c|operator[]}} ，对它们的调用始终导致未定义行为，因为 {{tt|empty_view}} 始终为空。

继承的 {{c|operator bool}} 转换函数始终返回 {{c|false}} 。

===示例===
{{example
|code=
#include &lt;ranges&gt;

int main()
{
    namespace ranges = std::ranges;

    ranges::empty_view&lt;long&gt; e;
    static_assert(ranges::empty(e)); // 使用 operator bool
    static_assert(0 == e.size());
    static_assert(nullptr == e.data());
    static_assert(nullptr == e.begin());
    static_assert(nullptr == e.end());
    static_assert(nullptr == e.cbegin());
    static_assert(nullptr == e.cend());
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc optional}}
{{dsc inc|cpp/ranges/dsc single_view}}
{{dsc inc|cpp/ranges/dsc all_view}}
{{dsc inc|cpp/ranges/dsc ref_view}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
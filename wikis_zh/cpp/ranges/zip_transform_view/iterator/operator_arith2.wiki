{{title|operator+,-{{small|(ranges::zip_transform_view::''iterator'')}}}}
{{cpp/ranges/zip_transform_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|1=
friend constexpr /*iterator*/ operator+( const /*iterator*/&amp; i, difference_type n )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=2|since=c++23|1=
friend constexpr /*iterator*/ operator+( difference_type n, const /*iterator*/&amp; i )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=3|since=c++23|1=
friend constexpr /*iterator*/ operator-( const /*iterator*/&amp; i, difference_type n )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=4|since=c++23|1=
friend constexpr difference_type operator-( const /*iterator*/&amp; i, 
                                            const /*iterator*/&amp; j )
    requires std::sized_sentinel_for&lt;/*ziperator*/&lt;Const&gt;, /*ziperator*/&lt;Const&gt;&gt;;
}}
{{dcl end}}

令 {{rlpi|/#数据成员|inner_}} 代表底层迭代器。

@1,2@ 返回增加 {{c|n}} 后的迭代器 {{c|i}}。等价于：{{c|1=return /*iterator*/(*i.parent_, i.inner_ + n);}}。
@3@ 返回减小 {{c|n}} 后的迭代器 {{c|i}}。等价于：{{c|1=return /*iterator*/(*i.parent_, i.inner_ - n);}}。
@4@ 计算 {{c|i}} 和 {{c|j}} 之间的''距离''。等价于：{{c|return i.inner_ - j.inner_;}}。

{{cpp/hidden friend|{{tt|zip_transform_view::''iterator''&lt;Const&gt;|plural=yes}}}}

===参数===
{{par begin}}
{{par|i, j|迭代器}}
{{par|n|相对于当前位置的位置}}
{{par end}}

===返回值===
@1,2@ {{c|/*iterator*/{ inner_ + n }&lt;!----&gt;}}
@3@ {{c|/*iterator*/{ inner_ - n }&lt;!----&gt;}}
@4@ {{c|i.inner_ - j.inner_}}

===示例===
{{example
|code=
|output=
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|zip_transform_view}}
{{dsc end}}

{{langlinks|de|en|es|fr|ja|ru}}
{{cpp/ranges/zip_transform_view/title|''iterator''}}
{{cpp/ranges/zip_transform_view/navbar}}
{{ddcl|since=c++23|notes={{mark expos}}|
template&lt; bool Const &gt;
class /*iterator*/;
}}

可能 const 限定的 {{tt|zip_transform_view}} 的迭代器类型，由 {{rlpt|begin|zip_transform_view::begin}} 返回，以及特定情况下由 {{rlpt|end|zip_transform_view::end}} 返回。

类型 {{c|/*iterator*/&lt;true&gt;}} 或 {{c|/*iterator*/&lt;false&gt;}} 分别将底层视图当作 const 限定或非 const 限定。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc expos mem type|Parent|private=yes|当 {{c|Const}} 为 {{c|false}} 时为 {{rlpt|/|zip_transform_view}}，否则为 {{c|const zip_transform_view}}。}}
{{dsc expos mem type|Base|private=yes|当 {{c|Const}} 为 {{c|false}} 时为 [[cpp/ranges/zip_transform_view#成员类型|{{tti|InnerView}}]]，否则为 {{c|const InnerView}}。}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{mark cond present}}|
令 {{c|/*maybe-const*/&lt;Const, F&gt;&amp;}} 当 {{c|Const}} 为 {{c|true}} 时代表 {{c|const F&amp;}}，否则代表 {{c|F&amp;}}。&lt;br&gt;
令 {{c|/*maybe-const*/&lt;Const, Views&gt;}} 当 {{c|Const}} 为 {{c|true}} 时代表 {{c|const Views}}，否则代表 {{c|Views}}。&lt;br&gt;

令 {{c|/*POT*/}} 代表类型包
{{c multi
|std::iterator_traits&lt;std::iterator_t&lt;
|    /*maybe-const*/&lt;Const, Views&gt;&gt;&gt;::iterator_category...
}}&lt;br&gt;

如果 {{c|/*Base*/}} 实现 {{lconcept|forward_range}}，那么 {{tt|iterator_category}}：
* 代表 {{lc|std::input_iterator_tag}}，若 {{c multi
|std::invoke_result_t&lt;/*maybe-const*/&lt;Const, F&gt;&amp;,
|    ranges::range_reference_t&lt;/*maybe-const*/&lt;Const, Views&gt;&gt;...&gt;}}
: 不是引用。
* 否则，
:* {{lc|std::random_access_iterator_tag}}，若&lt;br&gt;
:: {{c|(std::derived_from&lt;/*POT*/, std::random_access_iterator_tag&gt; &amp;&amp; ...)}} 为 {{c|true}}。&lt;br&gt;
:* 否则为 {{lc|std::bidirectional_iterator_tag}}，若&lt;br&gt;
:: {{c|(std::derived_from&lt;/*POT*/, std::bidirectional_iterator_tag&gt; &amp;&amp; ...)}} 为 {{c|true}}。&lt;br&gt;
:* 否则为 {{lc|std::forward_iterator_tag}}，若&lt;br&gt;
:: {{c|(std::derived_from&lt;/*POT*/, std::forward_iterator_tag&gt; &amp;&amp; ...)}} 为 {{c|true}}。&lt;br&gt;
:* 否则为 {{lc|std::input_iterator_tag}}。
如果 {{c|/*Base*/}} 并不实现 {{lconcept|forward_range}} 则它不出现。}}
{{dsc|{{tt|iterator_concept}}|{{c|/*ziperator*/&lt;Const&gt;::iterator_concept}}}}
{{dsc|{{tt|value_type}}|
令 {{c|/*RREF*/}} 为 {{c|ranges::range_reference_t&lt;Views&gt;...}}，&lt;br&gt;
并令 {{c|/*CRREF*/}} 为 {{c|ranges::range_reference_t&lt;const Views&gt;...}}。则为：
* {{c|std::remove_cvref_t&lt;std::invoke_result_t&lt;F&amp;, /*RREF*/&gt;&gt;}}，若 {{c|Const}} 为 {{c|false}}，
* 否则为 {{c|std::remove_cvref_t&lt;std::invoke_result_t&lt;const F&amp;, /*CRREF*/&gt;&gt;}}。}}
{{dsc|{{tt|difference_type}}|{{c|range::range_difference_t&lt;/*Base*/&gt;}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员对象|定义}}
{{dsc expos mem obj|parent_|private=yes|指向父对象的 [[#成员类型|{{tti|Parent*}}]] 指针}}
{{dsc expos mem type|inner_|private=yes|An iterator of type [[cpp/ranges/zip_transform_view#成员类型|{{tti|ziperator&lt;Const&gt;}}]].}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/zip_transform_view/iterator/iterator|构造迭代器}}
{{dsc mem fun|cpp/ranges/zip_transform_view/iterator/operator*|获取对所指向的底层元素应用可调用对象的结果}}
{{dsc mem fun|cpp/ranges/zip_transform_view/iterator/operator_at|title=operator[]|获取对给定偏移处的底层元素应用可调用对象的结果}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|zip_transform_view}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc fun|cpp/ranges/zip_transform_view/iterator/operator_cmp|title=operator==&lt;br&gt;operator&lt;=&gt;|比较底层迭代器|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/zip_transform_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|在底层迭代器上实施迭代器算术|notes={{mark c++23}}}}
{{dsc end}}

===示例===
{{example}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
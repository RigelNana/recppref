{{cpp/title|tuple_size&lt;small&gt;&lt;std:ranges::subrange&gt;&lt;/small&gt;}}
{{cpp/ranges/subrange/navbar}}
{{ddcl|header=ranges|since=c++20|
template&lt; class I, class S, ranges::subrange_kind K &gt;
struct tuple_size&lt;ranges::subrange&lt;I, S, K&gt;&gt;
    : std::integral_constant&lt;std::size_t, 2&gt; {};
}}

{{ltt|cpp/utility/tuple_size|std::tuple_size}} 针对 {{lc|std::ranges::subrange}} 的部分特化提供编译时获得 {{tt|subrange}} 的组分数量的方式，该数始终为 2。它是为支持结构化绑定而提供的。

{{cpp/types/integral_constant/inherit2 |常量值 2 |std::size_t}}

===示例===
{{example
|code=
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;ranges&gt;

int main()
{
    static_assert(2 == std::tuple_size_v&lt;std::ranges::subrange&lt;int*, int*&gt;&gt;);

    using array5 = std::array&lt;int, 5&gt;;

    static_assert(2 == std::tuple_size&lt;std::ranges::subrange&lt;
        array5::const_iterator, array5::const_iterator&gt;&gt;{});

    constexpr array5 a{1, 2, 3, 4, 5};

    std::ranges::subrange sub_a1{a};

    for (std::cout &lt;&lt; "sub_a1: { "; int e : sub_a1)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; "}\n";

    std::ranges::subrange sub_a2{std::next(cbegin(a)), std::prev(cend(a))};

    const auto [first, last] = sub_a2;
    std::cout &lt;&lt; "sub_a2 size = " &lt;&lt; std::distance(first, last) &lt;&lt; '\n';

    for (std::cout &lt;&lt; "sub_a2: { "; int e : sub_a2)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; "}\n";
}
|output=
sub_a1: { 1 2 3 4 5 }
sub_a2 size = 3
sub_a2: { 2 3 4 }
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/language/dsc structured binding}}
{{dsc inc|cpp/utility/dsc tuple_size}}
{{dsc inc|cpp/utility/tuple/dsc tuple_size}}
{{dsc inc|cpp/utility/pair/dsc tuple_size}}
{{dsc inc|cpp/container/array/dsc tuple_size}}
{{dsc inc|cpp/ranges/subrange/dsc tuple_element}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
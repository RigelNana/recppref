{{cpp/ranges/subrange/title|next}}
{{cpp/ranges/subrange/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr subrange next( std::iter_difference_t&lt;I&gt; n = 1 ) const&amp;
    requires std::forward_iterator&lt;I&gt;;
}}
{{dcla|num=2|since=c++20|1=
constexpr subrange next( std::iter_difference_t&lt;I&gt; n = 1 ) &amp;&amp;;
}}
{{dcl end}}

返回一个 {{rlpsi|/#begin_}} 被自增（或在 {{c|n}} 为负时被自减）后的 {{rlpt|/|subrange}}。由 {{rlpf|advance}} 进行实际自增（或自减）操作。

@1@ 返回 {{c|*this}} 的副本。
@@ 等价于：{{c multi
|1=auto tmp = *this;
|2=tmp.advance(n);
|3=return tmp;
}}。

@2@ 返回从 {{c|*this}} 移动得到的 {{tt|subrange}}。
@@ 等价于：{{c multi
|1=advance(n);
|2=return std::move(*this);
}}。

===参数===
{{par begin}}
{{par|n|迭代器上的最大自增次数}}
{{par end}}

===返回值===
如上所述。

===注解===
此函数与 {{rlpf|advance}} 的不同之处在于后者会原地进行自增（或自减）操作。

===示例===
{{example
|code=
#include &lt;array&gt;
#include &lt;iterator&gt;
#include &lt;print&gt;
#include &lt;ranges&gt;

int main()
{
    std::array arr{1, 2, 3, 4, 5, 6, 7};
    std::ranges::subrange sub{std::next(arr.begin(), 2), std::prev(arr.end(), 2)};
    std::println("1) sub: {}", sub);
    std::println("2) sub: {}", sub.next());
    std::println("3) sub: {}", sub.next(2));
}
|output=
1) sub: [3, 4, 5]
2) sub: [4, 5]
3) sub: [5]
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/subrange/dsc prev}}
{{dsc inc|cpp/ranges/subrange/dsc advance}}
{{dsc inc|cpp/iterator/dsc next}}
{{dsc inc|cpp/iterator/ranges/dsc next}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/ranges/subrange/title|prev}}
{{cpp/ranges/subrange/navbar}}
{{ddcl|since=c++20|1=
constexpr subrange prev( std::iter_difference_t&lt;I&gt; n = 1 ) const
    requires std::bidirectional_iterator&lt;I&gt;;
}}

返回一个 {{c|*this}} 的 {{rlpsi|/#begin_}} 被自减（或在 {{c|n}} 为负时被自增）后的副本。由 {{rlpf|advance}} 进行实际自减（或自增）操作。

等价于：{{c multi
|1=auto tmp = *this;
|2=tmp.advance(-n);
|3=return tmp;
}}。

===参数===
{{par begin}}
{{par|n|迭代器的自减次数}}
{{par end}}

===返回值===
如上所述。

===注解===
此函数与 {{rlpf|advance}} 的不同之处在于后者会原地进行自减（或自增）操作。

===示例===
{{example
|code=
#include &lt;iterator&gt;
#include &lt;list&gt;
#include &lt;print&gt;
#include &lt;ranges&gt;

int main()
{
    std::list list{1, 2, 3, 4, 5};
    std::ranges::subrange sub{std::next(list.begin(), 2), std::prev(list.end(), 2)};
    std::println("{} {} {}", sub, sub.prev(), sub.prev(2));
}
|output=
[3] [2, 3] [1, 2, 3]
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/subrange/dsc next}}
{{dsc inc|cpp/ranges/subrange/dsc advance}}
{{dsc inc|cpp/iterator/dsc prev}}
{{dsc inc|cpp/iterator/ranges/dsc prev}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
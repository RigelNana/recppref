{{cpp/ranges/view title|take_while}}
{{cpp/ranges/take_while_view/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++20|1=
template&lt; ranges::view V, class Pred &gt;
    requires ranges::input_range&lt;V&gt; &amp;&amp;
             std::is_object_v&lt;Pred&gt; &amp;&amp;
             std::indirect_unary_predicate&lt;const Pred, ranges::iterator_t&lt;V&gt;&gt;
class take_while_view
    : public ranges::view_interface&lt;take_while_view&lt;V, Pred&gt;&gt;
}}
{{dcl|num=2|since=c++20|1=
namespace views {
    inline constexpr /* 未指定 */ take_while = /* 未指定 */;
}
}}
{{dcl h|调用签名}}
{{dcl|since=c++20|1=
template&lt; ranges::viewable_range R, class Pred &gt;
    requires /* 见下文 */
constexpr ranges::view auto take_while( R&amp;&amp; r, Pred&amp;&amp; pred );
}}
{{dcl|since=c++20|1=
template&lt; class Pred &gt;
constexpr /* 范围适配器闭包 */ take_while( Pred&amp;&amp; pred );
}}
{{dcl end}}

@1@ 范围适配器，表示来自底层序列的元素的 {{lconcept|view}}，它始于序列的起始，终于首个对其应用谓词返回 {{c|false}} 的元素。
@2@ {{named req|RangeAdaptorObject}}。表达式 {{c|views::take_while(e, f)}} 对任何适合的子表达式 {{c|e}} 与 {{c|f}} [[cpp/language/expressions#表达式等价|表达式等价]]于 {{c|take_while_view(e, f)}}&lt;!-- LWG 3524 --&gt;。

{{tt|take_while_view}} 分别在底层视图 {{tt|V}} 实现 {{lconcept|contiguous_range}}、{{lconcept|random_access_range}}、{{lconcept|bidirectional_range}}、{{lconcept|forward_range}} 和 {{lconcept|input_range}} 时实现对应概念。

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|描述}}
{{dsc expos mem obj|base_|id=base|private=yes|spec={{tt|V}}|底层视图}}
{{dsc expos mem obj|pred_|id=pred|private=yes|spec={{rev inl|until=c++23|{{rlpi|copyable_wrapper|copyable-box&lt;!--P2325R3--&gt;}}{{tt|&lt;Pred&gt;}}}}{{rev inl|since=c++23|{{rlpi|copyable_wrapper|movable-box}}{{tt|&lt;Pred&gt;}}}}|底层函数对象}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc constructor|take_while_view}}
{{dsc inc|cpp/ranges/adaptor/dsc base|take_while_view}}
{{dsc inc|cpp/ranges/adaptor/dsc pred|take_while_view}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|take_while_view}}
{{dsc inc|cpp/ranges/adaptor/dsc end|take_while_view}}

{{cpp/ranges/view_interface/inherit|embedded=yes|size=invalid|back=invalid}}
{{dsc end}}

==={{rl|deduction guides|推导指引}}===

===嵌套类===
{{dsc begin}}
{{dsc expos mem tclass|cpp/ranges/take_while_view/sentinel|哨位类型}} 
{{dsc end}}

===注解===
对于 {{lconcept|forward_iterator}}，{{c|views::take_while(v, pred)}} 与 {{c|ranges::subrange{ranges::begin(v), ranges::find_if_not(v, pred)} }} 相似，但后者仅在构造过程中调用 {{c|pred}}，而前者每当将有效 {{tt|take_while}} 迭代器与哨位相比较时都会调用  {{c|pred}}。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;

int main()
{
    for (int year : std::views::iota(2020)
                  {{!}} std::views::take_while([](int y){ return y &lt; 2026; }))
        std::cout &lt;&lt; year &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    const char note[] {"Today is yesterday's tomorrow!..."};
    auto not_dot = [](char c){ return c != '.'; };
    for (char x : std::ranges::take_while_view(note, not_dot))
        std::cout &lt;&lt; x;
    std::cout &lt;&lt; '\n';
}
|output=
2020 2021 2022 2023 2024 2025 
Today is yesterday's tomorrow!
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc take_view}}
{{dsc inc|cpp/ranges/dsc drop_while_view}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
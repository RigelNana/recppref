{{cpp/ranges/view title|as_const}}
{{cpp/ranges/navbar}}
{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++23|1=
template&lt; ranges::view V &gt;
    requires ranges::input_range&lt;V&gt;
class as_const_view
    : public ranges::view_interface&lt;as_const_view&lt;V&gt;&gt;
}}
{{dcl|num=2|since=c++23|1=
namespace views {
    inline constexpr /* 未指明 */ as_const = /* 未指明 */;
}
}}
{{dcl h|调用签名}}
{{dcl|since=c++23|1=
template&lt; ranges::viewable_range R &gt;
    requires /* 见下文 */
constexpr ranges::view auto as_const( R&amp;&amp; r );
}}
{{dcl end}}

@1@ 范围适配器，表示底层 {{lconcept|view}} 的视图，也是 {{lconcept|constant_range}}。{{tt|as_const_view}} 总是具有只读元素（如果不为空）。

@2@ {{named req|RangeAdaptorObject}}。令 {{c|e}} 是子表达式，令 {{tt|T}} 是 {{c|decltype((e))}}，并令 {{tt|U}} 是 {{c|std::remove_cvref_t&lt;T&gt;}}。那么表达式 {{c|views::as_const(e)}} 就[[cpp/language/expressions#Expression-equivalence|表达式等价于]]：
* {{c|views::all(e)}}，当它是良好定义的表达式且 {{c|views::all_t&lt;T&gt;}} 实现 {{lconcept|constant_range}}，
* 否则是 {{c|std::span&lt;X, Extent&gt;(e)}}，对于某个类型 {{tt|X}} 和某个尺度 {{tt|Extent}}，当 {{tt|U}} 代表 {{c|std::span&lt;const X, Extent&gt;(e)}}；
* 否则是 {{c|ranges::ref_view(static_cast&lt;const X&amp;&gt;(e.base())}}，当对于某个类型 {{tt|X}}，{{tt|U}} 代表 {{c|ranges::ref_view&lt;X&gt;}}，且 {{c/core|const X}} 实现 {{lconcept|constant_range}}；
* 否则是 {{c|ranges::ref_view(static_cast&lt;const U&amp;&gt;(e))}}，当 {{tt|e}} 是左值，{{c/core|const U}} 实现 {{lconcept|constant_range}} 且 {{tt|U}} 不实现 {{lconcept|view}}；
* 否则是 {{c|as_const_view{e}&lt;!----&gt;}}。

{{tt|as_const_view}} 始终实现 {{lconcept|constant_range}}，并且当底层视图 {{tt|V}} 实现 {{lconcept|contiguous_range}}、{{lconcept|random_access_range}}、{{lconcept|bidirectional_range}}、{{lconcept|forward_range}}、{{lconcept|borrowed_range}}、{{lconcept|common_range}} 和 {{lconcept|sized_range}} 时，它也实现相应概念。

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|说明}}
{{dsc expos mem obj|base_|id=base|private=yes|spec={{tt|V}}|底层视图}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|{{PAGENAME}}#ctor|构造一个 {{tt|as_const_view}}}}
{{dsc mem fun|{{PAGENAME}}#base|title=base|返回底层视图 {{tt|V}}}}
{{dsc mem fun|{{PAGENAME}}#begin|title=begin|返回 {{tt|as_const_view}} 的首迭代器}}
{{dsc mem fun|{{PAGENAME}}#end|title=end|返回 {{tt|as_const_view}} 的尾迭代器}}
{{dsc mem fun|{{PAGENAME}}#size|title=size|如果其有界则返回视图的大小}}
{{dsc mem fun|{{PAGENAME}}#reserve_hint|title=reserve_hint|返回底层 {{rlpt|approximately_sized_range}} 的估计大小|notes={{mark c++26}}}}

{{cpp/ranges/view_interface/inherit|embedded=yes|size=yes}}
{{dsc end}}

{{anchor|ctor}}
{{member|{{small|std::ranges::as_const_view::}}as_const_view|
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
as_const_view() requires std::default_initializable&lt;V&gt; = default;
}}
{{dcl|num=2|since=c++23|
constexpr explicit as_const_view( V base );
}}
{{dcl end}}

@1@ 使用默认成员初始化式（{{c|1== V()}}）值初始化 {{lsi|#base_}}。
@2@ 使用 {{c|std::move(base)}} 初始化 {{lsi|#base_}}。

===参数===
{{par begin}}
{{par|base|视图}}
{{par end}}
}}

{{anchor|base}}
{{member|{{small|std::ranges::as_const_view::}}base|
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr V base() const&amp; requires std::copy_constructible&lt;V&gt;;
}}
{{dcl|num=2|since=c++23|
constexpr V base() &amp;&amp;;
}}
{{dcl end}}

返回底层视图。
@1@ 从底层视图复制构造结果。等价于 {{box|{{c/core|return}}{{nbspt}}{{lsi|#base_}}{{sep}}{{c/core|;}}}}。
@2@ 从底层视图移动构造结果。等价于 {{box|{{c/core|return std::move(}}{{lsi|#base_}}{{sep}}{{c/core|);}}}}。
}}

{{anchor|begin}}
{{member|{{small|std::ranges::as_const_view::}}begin|
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr auto begin() requires (!/*simple_view*/&lt;V&gt;);
}}
{{dcl|num=2|since=c++23|
constexpr auto begin() const requires ranges::range&lt;const V&gt;;
}}
{{dcl end}}
返回视图的常量迭代器。等价于 {{box|{{c/core|return ranges::cbegin(}}{{lsi|#base_}}{{sep}}{{c/core|);}}}}。
}}

{{anchor|end}}
{{member|{{small|std::ranges::as_const_view::}}end|
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr auto end() requires (!/*simple_view*/&lt;V&gt;);
}}
{{dcl|num=2|since=c++23|
constexpr auto end() const requires ranges::range&lt;const V&gt;;
}}
{{dcl end}}
返回视图的常量哨位。等价于 {{box|{{c/core|return ranges::cend(}}{{lsi|#base_}}{{sep}}{{c/core|);}}}}。
}}

{{anchor|size}}
{{member|{{small|std::ranges::as_const_view::}}size|
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr auto size() requires ranges::sized_range&lt;V&gt;;
}}
{{dcl|num=2|since=c++23|
constexpr auto size() const requires ranges::sized_range&lt;const V&gt;;
}}
{{dcl end}}
如果视图有界，则返回视图的大小。等价于 {{box|{{c/core|return ranges::size(}}{{lsi|#base_}}{{sep}}{{c/core|);}}}}
}}

{{anchor|reserve_hint}}
{{member|{{small|std::ranges::as_rvalue_view::}}reserve_hint|
{{dcl begin}}
{{dcl|num=1|since=c++26|
constexpr auto reserve_hint()
    requires ranges::approximately_sized_range&lt;V&gt;;
}}
{{dcl|num=2|since=c++26|
constexpr auto reserve_hint() const
    requires ranges::approximately_sized_range&lt;const V&gt;;
}}
{{dcl end}}

返回 {{box|{{c/core|ranges::reserve_hint(}}{{lsi|#base_}}{{sep}}{{c/core|)}}}}。
}}

===推导指引===
{{ddcl|since=c++23|
template&lt; class R &gt;
as_const_view( R&amp;&amp; ) -&gt; as_const_view&lt;views::all_t&lt;R&gt;&gt;;
}}

===辅助模板===
{{ddcl|since=c++23|1=
template&lt; class T &gt;
constexpr bool enable_borrowed_range&lt;std::ranges::as_const_view&lt;T&gt;&gt; =
    ranges::enable_borrowed_range&lt;T&gt;;
}}
{{lc|ranges::enable_borrowed_range}} 的特化使得 {{tt|as_const_view}} 在底层视图满足 {{lconcept|borrowed_range}} 时，也满足 {{lconcept|borrowed_range}}。

===注解===
{{ftm begin|sort=yes}}
{{ftm|__cpp_lib_ranges_as_const|value=202207L|std=C++23|{{tt|std::ranges::as_const_view}}, {{c/core|std::const_iterator}}}}
{{ftm|__cpp_lib_ranges_reserve_hint|std=C++26|value=202502L|{{lc|ranges::approximately_sized_range}} 与 {{lst|#reserve_hint}}}}
{{ftm end}}

===示例===
{{example|code=
#include &lt;cassert&gt;
#include &lt;ranges&gt;

int main()
{
    int x[]{1, 2, 3, 4, 5};

    auto v1 = x {{!}} std::views::drop(2);
    assert(v1.back() == 5);
    v1[0]++; // OK，可以修改非 const 元素

    auto v2 = x {{!}} std::views::drop(2) {{!}} std::views::as_const;
    assert(v2.back() == 5);
    // v2[0]++; // 编译错误，无法修改只读元素
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc as_rvalue_view}}
{{dsc inc|cpp/ranges/dsc cbegin}}
{{dsc inc|cpp/ranges/dsc cend}}
{{dsc inc|cpp/utility/dsc as_const}}
{{dsc inc|cpp/iterator/dsc basic_const_iterator}}
{{dsc end}}

{{langlinks|de|es|fr|it|ja|pt|ru|en}}
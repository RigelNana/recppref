{{cpp/ranges/title|{{small|repeat_view&lt;W, Bound&gt;::}}''iterator''}}
{{cpp/ranges/repeat_view/navbar}}
{{dcl begin}}
{{dcla|expos=yes|
struct /*iterator*/;
}}
{{dcl end}}

{{c/core|ranges::repeat_view&lt;W, Bound&gt;::}}{{tti|iterator}} 是 {{c/core|ranges::repeat_view&lt;W, Bound&gt;}} 的 {{rlpt|/#begin|begin()}} 和 {{rlpt|/#end|end()}} 返回的迭代器的类型。

===嵌套类型===
{{dsc begin}}
{{dsc h2|仅用于阐述的类型}}
{{dsc hitem|类型|定义}}
{{dsc expos mem type|index-type|{{c/core|std::conditional_t&lt;std::same_as&lt;Bound, std::unreachable_sentinel_t&gt;,}}&lt;br&gt;{{nbspt|19}}{{c/core|std::ptrdiff_t, Bound&gt;}}}}
{{dsc h2|迭代器属性类型}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|iterator_concept}}|{{lc|std::random_access_iterator_tag}}}}
{{dsc|{{tt|iterator_category}}|{{lc|std::random_access_iterator_tag}}}}
{{dsc|{{tt|value_type}}|{{tt|W}}}}
{{dsc|{{tt|difference_type}}{{anchor|difference_type}}|{{c/core|std::conditional_t&lt;}}{{lti|cpp/iterator/is-integer-like|is-signed-integer-like}}{{sep}}{{c/core|&lt;}}{{tti|index-type}}{{sep}}{{c/core|&gt;,}}&lt;br&gt;{{nbspt|19}}{{tti|index-type}}{{sep}}{{c/core|,}}{{nbspt}}{{lti|cpp/ranges/iota_view/iterator|iota-diff-t}}{{sep}}{{c/core|&lt;}}{{tti|index-type}}{{sep}}{{c/core|&gt;&gt;}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|定义}}
{{dsc expos mem obj|spec={{c/core|const W*}}|value_|id=value|指向要重复的值的指针}}
{{dsc expos mem obj|spec={{tti|index-type}}|current_|id=current|当前位置}}
{{dsc end}}

===成员函数===
{{member|{{small|std::ranges::repeat_view::''iterator''::}}''iterator''|2=
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
/*iterator*/() = default;
}}
{{dcla|num=2|since=c++23|expos=yes|1=
constexpr explicit /*iterator*/
    ( const W* value, /*index-type*/ b = /*index-type*/() );
}}
{{dcl end}}

构造迭代器。{{rlpt|/|ranges::repeat_view}} 的 {{rlpt|/#begin|begin()}} 和 {{rlpt|/#end|end()}} 会调用重载 {{v|2}}。

@1@ 以 {{c|nullptr}} 初始化 {{lsi|#value_}}{{sep}}，并值初始化 {{lsi|#current_}}{{sep}}。

@2@ 以 {{c|value}} 初始化 {{lsi|#value_}}{{sep}}，并以 {{c|b}} 初始化 {{lsi|#current_}}{{sep}}。
@@ 如果 {{tt|Bound}} 不是 {{lc|std::unreachable_sentinel_t}} 且 {{c|b}} 为负，那么行为未定义。
}}

{{member|{{small|std::ranges::repeat_view::''iterator''::}}operator*|2=
{{ddcl|since=c++23|
constexpr const W&amp; operator*() const noexcept;
}}

返回 {{box|{{c/core|*}}{{lsi|#value_}}}}。
}}

{{member|{{small|std::ranges::repeat_view::''iterator''::}}operator[]|2=
{{ddcl|since=c++23|
constexpr const W&amp; operator[]( difference_type n ) const noexcept;
}}

返回 {{c|*(*this + n)}}。
}}

{{member|{{small|std::ranges::repeat_view::''iterator''::}}operator++|2=
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
constexpr /*iterator*/&amp; operator++();
}}
{{dcl|num=2|since=c++23|1=
constexpr void operator++(int);
}}
{{dcl end}}

@1@ 等价于 {{box|{{c/core|++}}{{lsi|#current_}}{{sep}}{{c/core|; return *this;}}}}。

@2@ 等价于 {{c|1=auto tmp = *this; ++*this; return tmp;}}。
}}

{{member|{{small|std::ranges::repeat_view::''iterator''::}}operator--|2=
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
constexpr /*iterator*/&amp; operator--();
}}
{{dcl|num=2|since=c++23|1=
constexpr /*iterator*/ operator--(int);
}}
{{dcl end}}

@1@ 等价于 {{box|{{c/core|--}}{{lsi|#current_}}{{sep}}{{c/core|; return *this;}}}}。
@@ 如果 {{tt|Bound}} 不是 {{lc|std::unreachable_sentinel_t}} 且 {{box|{{lsi|#current_}}}} 非正，那么行为未定义。

@2@ 等价于 {{c|1=auto tmp = *this; --*this; return tmp;}}。
}}

{{member|1={{small|std::ranges::repeat_view::''iterator''::}}operator+=|2=
{{ddcl|since=c++23|1=
constexpr /*iterator*/&amp; operator+=( difference_type n );
}}

等价于 {{box|{{lsi|#current_}}{{nbspt}}{{c/core|1=+= n; return *this;}}}}。

如果 {{tt|Bound}} 不是 {{lc|std::unreachable_sentinel_t}} 且 {{box|{{lsi|#current_}}{{nbspt}}{{c/core|+ n}}}} 为负，那么行为未定义。
}}

{{member|1={{small|std::ranges::repeat_view::''iterator''::}}operator-=|2=
{{ddcl|since=c++23|1=
constexpr /*iterator*/&amp; operator-=( difference_type n );
}}

等价于 {{box|{{lsi|#current_}}{{nbspt}}{{c/core|1=-= n; return *this;}}}}。

如果 {{tt|Bound}} 不是 {{lc|std::unreachable_sentinel_t}} 且 {{box|{{lsi|#current_}}{{nbspt}}{{c/core|- n}}}} 为负，那么行为未定义。
}}

===非成员函数===
{{member|1=operator==, &lt;=&gt;{{small|(std::ranges::repeat_view::''iterator'')}}|2=
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
friend constexpr bool operator==
    ( const /*iterator*/&amp; x, const /*iterator*/&amp; y );
}}
{{dcl|num=2|since=c++23|1=
friend constexpr auto operator&lt;=&gt;
    ( const /*iterator*/&amp; x, const /*iterator*/&amp; y );
}}
{{dcl end}}

@1@ 返回 {{box|{{c/core|x.}}{{lsi|#current_}}{{nbspt}}{{c/core|1=== y.}}{{lsi|#current_}}}}。

@2@ 返回 {{box|{{c/core|x.}}{{lsi|#current_}}{{nbspt}}{{c/core|1=&lt;=&gt; y.}}{{lsi|#current_}}}}。

{{cpp/note synthesized eq}}

{{cpp/hidden friend|{{tt|''iterator''}}|plural=yes}}
}}

{{member|1=operator+{{small|(std::ranges::repeat_view::''iterator'')}}|2=
{{dcl begin}}
{{dcl|num=1|since=c++23|
friend constexpr /*iterator*/ operator+( /*iterator*/ i, difference_type n );
}}
{{dcl|num=2|since=c++23|
friend constexpr /*iterator*/ operator+( difference_type n, /*iterator*/ i );
}}
{{dcl end}}

等价于 {{c|1=i += n; return i;}}。

{{cpp/hidden friend|{{tt|''iterator''}}|plural=yes}}
}}

{{member|1=operator-{{small|(std::ranges::repeat_view::''iterator'')}}|2=
{{dcl begin}}
{{dcl|num=1|since=c++23|
friend constexpr /*iterator*/ operator-( /*iterator*/ i, difference_type n );
}}
{{dcl|num=2|since=c++23|
friend constexpr difference_type operator-( const /*iterator*/&amp; x,
                                            const /*iterator*/&amp; y );
}}
{{dcl end}}

@1@ 等价于 {{c|1=i -= n; return i;}}。

@2@ 返回 {{box|{{c/core|static_cast&lt;}}{{lst|#difference_type}}{{c/core|&gt;(x.}}{{lsi|#current_}}{{sep}}{{c/core|) -}}&lt;br&gt;{{nbspt|4}}{{c/core|static_cast&lt;}}{{lst|#difference_type}}{{c/core|&gt;(y.}}{{lsi|#current_}}{{sep}}{{c/core|)}}}}。

{{cpp/hidden friend|{{tt|''iterator''}}|plural=yes}}
}}

===注解===
{{tti|iterator}} 始终是 {{lconcept|random_access_iterator}}。

{{langlinks|de|en|es|ja|ru}}
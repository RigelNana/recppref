{{cpp/ranges/stride_view/title|''iterator''}}
{{cpp/ranges/stride_view/navbar}}

{{ddcl|since=c++23|notes={{mark expos}}|
template&lt; bool Const &gt;
class /*iterator*/
}}

{{rlpt|begin|stride_view::begin}} 的返回类型，以及当底层视图 {{tt|V}} 为 {{lconcept|common_range}} 时，也是 {{rlpt|end|stride_view::end}} 的返回类型。

const 限定的重载返回类型 {{c|/*iterator*/&lt;true&gt;}}，非 const 限定的重载返回{{c|/*iterator*/&lt;false&gt;}}。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc expos mem type|Parent|private=yes|{{cpp/ranges/maybe-const|ranges::stride_view}}}}
{{dsc expos mem type|Base|private=yes|{{cpp/ranges/maybe-const|V}}}}
{{dsc|{{tt|difference_type}}|{{c/core|ranges::range_difference_t&lt;Base&gt;}}}}
{{dsc|{{tt|value_type}}|{{c/core|ranges::range_value_t&lt;Base&gt;}}}}
{{dsc|{{tt|iterator_concept}}|
* 如果 {{tti|Base}} 实现 {{lconcept|random_access_range}}，则为 {{lc|std::random_access_iterator_tag}}。
* 如果 {{tti|Base}} 实现 {{lconcept|bidirectional_range}}，则为 {{lc|std::bidirectional_iterator_tag}}。
* 如果 {{tti|Base}} 实现 {{lconcept|forward_range}}，则为 {{lc|std::forward_iterator_tag}}。
* 否则为 {{lc|std::input_iterator_tag}}。}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{small|（仅当 {{tti|Base}} 实现&lt;br&gt;{{lconcept|forward_range}} 时予以定义）|令 {{tti|C}} 代表类型 {{c/core|iterator_traits&lt;iterator_t&lt;Base&gt;&gt;::iterator_category}}。
* 当 {{tti|C}} 实现 {{c/core|std::derived_from&lt;std::random_access_iterator_tag&gt;}} 时，为 {{lc|std::random_access_iterator_tag}}。
* 否则为 {{tti|C}}。}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员对象|定义}}
{{dsc expos mem obj|current_|private=yes|{{c|ranges::iterator_t&lt;Base&gt;}}，持有指向当前元素的迭代器。}}
{{dsc expos mem obj|end_|private=yes|{{c|ranges::sentinel_t&lt;Base&gt;}}，持有指向末尾的哨位。}}
{{dsc expos mem obj|stride_|private=yes|{{c|ranges::range_difference_t&lt;Base&gt;}}，持有步长值。}}
{{dsc expos mem obj|missing_|private=yes|{{c|ranges::range_difference_t&lt;Base&gt;}}，通常持有 {{c|ranges::advance(current_, stride_, end_)}} 的结果。}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/stride_view/iterator/iterator|构造迭代器}}
{{dsc mem fun|cpp/ranges/stride_view/iterator/base|返回指向当前元素的迭代器}}
{{dsc mem fun|cpp/ranges/stride_view/iterator/operator*|访问元素}}
{{dsc mem fun|cpp/ranges/stride_view/iterator/operator_at|title=operator[]|按索引访问元素}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|stride_view}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc fun|cpp/ranges/stride_view/iterator/operator_cmp|title=operator==&lt;br&gt;operator&lt;&lt;br&gt;operator&gt;&lt;br&gt;operator&lt;=&lt;br&gt;operator&gt;=&lt;br&gt;operator&lt;=&gt;|比较底层迭代器|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/stride_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|执行迭代器算数|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/stride_view/iterator/iter_move|将底层迭代器解引用的结果转型为相关的右值引用类型|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/stride_view/iterator/iter_swap|交换被指向的底层元素|notes={{mark c++23}}}}
{{dsc end}}

===示例===
{{example}}

===引用===
{{ref std c++23}}
{{ref std|title=Class template stride_view::iterator|id=range.stride.iterator|section=26.7.31.3}}
{{ref std end}}

===参阅===
{{dsc begin}}&lt;!--
{{dsc inc|cpp/ranges/slide_view/dsc iterator}}--&gt;
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
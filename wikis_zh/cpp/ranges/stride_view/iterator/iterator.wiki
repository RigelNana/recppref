{{cpp/ranges/stride_view/iterator/title|''iterator''}}
{{cpp/ranges/stride_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|1=
/*iterator*/()
    requires std::default_initializable&lt;ranges::iterator_t&lt;Base&gt;&gt; = default;
}}
{{dcl|num=2|since=c++23|1=
constexpr /*iterator*/( /*iterator*/&lt;!Const&gt; i )
    requires Const and
        std::convertible_to&lt;ranges::iterator_t&lt;V&gt;, ranges::iterator_t&lt;Base&gt;&gt; and
        std::convertible_to&lt;ranges::sentinel_t&lt;V&gt;, ranges::sentinel_t&lt;Base&gt;&gt;;
}}
{{dcl|num=3|notes={{mark expos}}|1=
private:
constexpr /*iterator*/( /*Parent*/&amp; parent,
                        ranges::iterator_t&lt;Base&gt; current,
                        ranges::range_difference_t&lt;Base&gt; missing = 0 );
}}
{{dcl end}}

构造{{rlp|/|迭代器}}。

@1@ 默认构造函数。[[cpp/language/value initialization|值初始化]]：
* {{rlpi|/#数据成员|current_}} 以 {{c|ranges::iterator_t&lt;Base&gt;()}} 初始化，
* {{rlpi|/#数据成员|end_}} 以 {{c|ranges::sentinel_t&lt;Base&gt;()}} 初始化，
* {{rlpi|/#数据成员|stride_}} 以 {{c|0}} 初始化，
* {{rlpi|/#数据成员|missing_}} 以 {{c|0}} 初始化。

@2@ 从 {{c|/*iterator*/&lt;false&gt;}} 到 {{c|/*iterator*/&lt;true&gt;}} 的转换，
* {{rlpi|/#数据成员|current_}} 以 {{c|std::move(i.current_)}} 初始化，
* {{rlpi|/#数据成员|end_}} 以 {{c|std::move(i.end_)}} 初始化，
* {{rlpi|/#数据成员|stride_}} 以 {{c|i.stride_}} 初始化，
* {{rlpi|/#数据成员|missing_}} 以 {{c|i.missing_}} 初始化。

@3@ 被 {{lc|stride_view::begin}} 与 {{lc|stride_view::end}} 使用的私有构造函数，此构造函数无法被用户访问。
* {{rlpi|/#数据成员|current_}} 以 {{c|std::move(current)}} 初始化，
* {{rlpi|/#数据成员|end_}} 以 {{c|ranges::end(parent-&gt;base_)}} 初始化，
* {{rlpi|/#数据成员|stride_}} 以 {{c|parent-&gt;stride_}} 初始化，
* {{rlpi|/#数据成员|missing_}} 以 {{c|missing}} 初始化，

===参数===
{{par begin}}
{{par|i|{{c|/*iterator*/&lt;false&gt;}}}}
{{par end}}

===示例===
{{example
|code=
|output=
}}

{{langlinks|de|en|es|ja|ru}}
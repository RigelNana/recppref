{{cpp/ranges/stride_view/title|end}}
{{cpp/ranges/stride_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
constexpr auto end() requires (!/*simple-view*/&lt;V&gt;);
}}
{{dcl|num=2|since=c++23|1=
constexpr auto end() const requires ranges::range&lt;const V&gt;
}}
{{dcl end}}

返回代表 {{rlpt|/|stride_view}} 末尾的{{rlp|iterator|迭代器}}或{{rlp|sentinel|哨位}}。

令 {{rlpi|/#数据成员|base_}} 与 {{rlpi|/#数据成员|stride_}} 为底层数据成员。

@1@ 定义 {{c|Const}} 为 {{c|1=using Const = false;}} 且 {{c|Base}} 为 {{c|1=using Base = V;}}。
@2@ 定义 {{c|Const}} 为 {{c|1=using Const = true;}} 且 {{c|Base}} 为 {{c|1=using Base = const V;}}。

等价于：
{{source|1=
if constexpr (ranges::common_range&lt;Base&gt; &amp;&amp;
              ranges::sized_range&lt;Base&gt; &amp;&amp;
              ranges::forward_range&lt;Base&gt;)
{
    auto missing = (stride_ - ranges::distance(base_) % stride_) % stride_;
    return iterator&lt;Const&gt;(this, ranges::end(base_), missing);
}
else if constexpr (ranges::common_range&lt;Base&gt; &amp;&amp;
                   !ranges::bidirectional_range&lt;Base&gt;)
{
    return iterator&lt;Const&gt;(this, ranges::end(base_));
}
else
{
    return std::default_sentinel;
}
}}

===参数===
（无）

===返回值===
如果底层视图 {{c|V}} 实现 {{lconcept|common_range}}，返回指向最后一个元素之后元素的{{rlp|iterator|迭代器}}。否则返回 {{lc|std::default_sentinel}}，它与尾迭代器比较相等。

===注解===
只要底层视图 {{c|V}} 实现 {{lconcept|common_range}}，则 {{c|stride_view&lt;V&gt;}} 也实现它。

===示例===
{{example
|code=
|output=
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|stride_view}}
{{dsc inc|cpp/ranges/dsc end}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
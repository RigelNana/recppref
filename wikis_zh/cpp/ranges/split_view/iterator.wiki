{{cpp/ranges/title|n=split_view&lt;V,Pattern&gt;::|''iterator''}}
{{cpp/ranges/split_view/navbar}}
{{ddcla|since=c++20|expos=yes|
class /*iterator*/;
}}

{{ltt|cpp/ranges/split_view|split_view::begin}} 的返回类型。这是一种 {{lconcept|forward_iterator}}，因此预期 {{tt|V}} 至少实现了 {{lconcept|forward_range}}。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|iterator_concept}}|{{lc|std::forward_iterator_tag}}}}
{{dsc|{{tt|iterator_category}}|{{lc|std::input_iterator_tag}}}}
{{dsc|{{tt|value_type}}|{{c/core|ranges::subrange&lt;ranges::iterator_t&lt;V&gt;&gt;}}}}
{{dsc|{{tt|difference_type}}|{{c/core|ranges::range_difference_t&lt;V&gt;}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|描述}}
{{dsc expos mem obj|parent_|id=parent|private=yes|spec={{c/core|ranges::split_view&lt;V, Pattern&gt;*}}|指向父 {{lc|ranges::split_view|split_view}} 对象的指针}}
{{dsc expos mem obj|cur_|id=cur|private=yes|spec={{c/core|ranges::iterator_t&lt;V&gt;}}|指向底层 {{lconcept|view}} 中当前子范围的起始的迭代器}}
{{dsc expos mem obj|next_|id=next|private=yes|spec={{c/core|ranges::subrange&lt;ranges::iterator_t&lt;V&gt;&gt;}}|表示当前子范围之后的模式位置的子范围}}
{{dsc expos mem obj|trailing_empty_|id=trailing_empty|private=yes|spec={{c/core|bool}}|指示是否抵达空尾部子范围（若存在）的标记}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|nolink=true|inlinemem=true|构造迭代器|notes={{mark c++20}}}}
{{dsc mem fun|nolink=true|inlinemem=true|base|返回底层迭代器|notes={{mark c++20}}}}
{{dsc mem fun|nolink=true|inlinemem=true|operator*|返回当前子范围|notes={{mark c++20}}}}
{{dsc mem fun|nolink=true|inlinemem=true|operator++&lt;br&gt;operator++{{dsc small|(int)}}|推进迭代器|notes={{mark c++20}}}}
{{dsc end}}

{{member|{{small|std::ranges::split_view::''iterator''::}}''iterator''|2=
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
/*iterator*/() = default;
}}
{{dcl|since=c++20|num=2|1=
constexpr /*iterator*/( split_view&amp; parent, ranges::iterator_t&lt;V&gt; current,
                        ranges::subrange&lt;ranges::iterator_t&lt;V&gt;&gt; next );
}}
{{dcl end}}

@1@ 以各自的默认成员初始化式对各非静态数据成员进行值初始化，即：
* {{c|1=ranges::split_view* parent_ = nullptr;}}，
* {{c|1=ranges::iterator_t&lt;V&gt; cur_ = ranges::iterator_t&lt;V&gt;();}}，
* {{c|1=ranges::subrange&lt;ranges::iterator_t&lt;V&gt;&gt; next_ = ranges::subrange&lt;ranges::iterator_t&lt;V&gt;&gt;();}}，以及
* {{c|1=bool trailing_empty_ = false;}}。

@2@ 初始化各非静态数据成员：
* {{c|1=ranges::split_view* parent_ = std::addressof(parent);}}，
* {{c|1=ranges::iterator_t&lt;V&gt; cur_ = std::move(current);}}，
* {{c|1=ranges::subrange&lt;ranges::iterator_t&lt;V&gt;&gt; next_ = std::move(next);}}，以及
* {{c|1=bool trailing_empty_ = false;}}。
}}

{{member|{{small|std::ranges::split_view::''iterator''::}}base|2=

{{dcl begin}}
{{dcl|since=c++20|1=
constexpr const ranges::iterator_t&lt;V&gt; base() const;
}}
{{dcl end}}

等价于 {{c|return cur_;}}。
}}

{{member|{{small|std::ranges::split_view::''iterator''::}}operator*|2=
{{dcl begin}}
{{dcl|since=c++20|1=
constexpr value_type operator*() const;
}}
{{dcl end}}

等价于 {{c|1=return {cur_, next_.begin()};}}。
}}

{{member|{{small|std::ranges::split_view::''iterator''::}}operator++|2=
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
constexpr /*iterator*/&amp; operator++();
}}
{{dcl|since=c++20|num=2|1=
constexpr void operator++( int );
}}
{{dcl end}}

@1@ 等价于&lt;br&gt;{{c|1=
cur_ = next_.begin();
if (cur_ != ranges::end(parent_-&gt;base_))
{
    if (cur_ = next_.end(); cur_ == ranges::end(parent_-&gt;base_))
    {
        trailing_empty_ = true;
        next_ = {cur_, cur_};
    }
    else
        next_ = parent_-&gt;find_next(cur_);
}
else
    trailing_empty_ = false;

return *this;
}}

@2@ 等价于 {{c|1=auto tmp = *this; ++*this; return tmp;}}。
}}

===非成员函数===
{{dsc begin}}
{{dsc fun|nolink=true|operator{{==}}|比较底层迭代器|notes={{mark c++20}}}}
{{dsc end}}

{{member|1=operator=={{small|(std::ranges::split_view::''iterator'', std::ranges::split_view::''iterator'')}}|2=
{{ddcl|since=c++20|1=
friend constexpr bool operator==( const /*iterator*/&amp; x, const /*iterator*/&amp; y );
}}

等价于 {{c|1=return x.cur_ == y.cur_ and x.trailing_empty_ == y.trailing_empty_;}}。

{{cpp/note synthesized eq}}

{{cpp/hidden friend|plural=no|std::ranges::split_view::''iterator''}}
}}

{{langlinks|en|es|ja|ru}}
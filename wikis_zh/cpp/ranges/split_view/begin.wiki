{{cpp/ranges/split_view/title|begin}}
{{cpp/ranges/split_view/navbar}}

{{dcl begin}}
{{dcl|since=c++20|1=
constexpr /*iterator*/ begin();
}}
{{dcl end}}

返回指向找到的第一个子范围的{{rlp|iterator|迭代器}}。

为提供 {{lconcept|range}} 概念要求的均摊常数复杂度，此函数在 {{tt|split_view}} 中缓存了结果（通过 {{rlpsi|/#cached_begin_}} 成员）以供后续调用所用。

让 {{rlpsi|/#base_}} 作为底层数据成员。等价于：

{{source|1=
constexpr /*iterator*/ begin()
{
    if (!cached_begin_.has_value())
        cached_begin_ = this-&gt;find_next(ranges::begin(base_));
    return {*this, ranges::begin(base_), cached_begin_.value()};
}
}}

===返回值===
{{rlp|iterator|迭代器}}。

===复杂度===
均摊的 {{mathjax-or|\(\scriptsize \mathcal{O}(1)\)|O(1)}}。

===示例===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string_view&gt;

int main()
{
    constexpr std::string_view sentence{"Keep..moving..forward.."};
    constexpr std::string_view delim{".."};
    std::ranges::split_view words{sentence, delim};

    std::cout &lt;&lt; "begin(): " &lt;&lt; std::quoted(std::string_view{*words.begin()})
              &lt;&lt; "\n子字符串: ";
    for (auto word : words)
        std::cout &lt;&lt; std::quoted(std::string_view(word)) &lt;&lt; ' ';

    std::ranges::split_view letters{sentence, std::string_view{""}&lt;!----&gt;};
    std::cout &lt;&lt; "\nbegin(): " &lt;&lt; std::quoted(std::string_view{*letters.begin()})
              &lt;&lt; "\n字母: ";
    for (auto letter : letters)
        std::cout &lt;&lt; std::string_view(letter) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
begin(): "Keep"
子字符串: "Keep" "moving" "forward" ""
begin(): "K"
字母: K e e p . . m o v i n g . . f o r w a r d . . 
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc end|split_view}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|lazy_split_view}}
{{dsc inc|cpp/ranges/dsc begin}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
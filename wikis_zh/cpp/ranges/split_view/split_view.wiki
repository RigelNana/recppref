{{cpp/ranges/split_view/title|split_view}}
{{cpp/ranges/split_view/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++20|1=
split_view()
    requires std::default_initializable&lt;V&gt; &amp;&amp; 
             std::default_initializable&lt;Pattern&gt; = default;
}}
{{dcl|num=2|since=c++20|1=
constexpr explicit split_view( V base, Pattern pattern );
}}
{{dcl|num=3|since=c++20|1=
template&lt; ranges::forward_range R &gt;
    requires std::constructible_from&lt;V, views::all_t&lt;R&gt;&gt; &amp;&amp;
             std::constructible_from&lt;Pattern, ranges::single_view&lt;
                                                  ranges::range_value_t&lt;R&gt;&gt;&gt;
constexpr explicit split_view( R&amp;&amp; r, ranges::range_value_t&lt;R&gt; e );
}}
{{dcl end}}

构造 {{tt|split_view}}。

令 {{rlpsi|/#base_}} 为底层视图，并令 {{rlpsi|/#pattern_}} 为分隔符。

@1@ 默认构造函数。分别以各自的默认成员初始化式[[cpp/language/value initialization|值初始化]] {{tti|base_}} 和 {{tti|pattern_}}。
@2@ 以 {{c|std::move(base)}} 初始化 {{tti|base_}} 并以 {{c|std::move(pattern)}} 初始化 {{tti|pattern_}}。
@3@ 以 {{c|views::all(std::forward&lt;R&gt;(r))}} 初始化 {{tti|base_}} 并以 {{c|ranges::single_view{std::move(e)}&lt;!----&gt;}} 初始化 {{tti|pattern_}}。

===参数===
{{par begin}}
{{par|base|（要切分的）视图}}
{{par|pattern|用作分隔符的视图}}
{{par|e|用作分隔符的元素}}
{{par end}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;cctype&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;ranges&gt;
#include &lt;string_view&gt;
#include &lt;vector&gt;

int main()
{
    {
        auto view = std::views::iota(1, 20)
                  {{!}} std::views::transform([](int x) { return x % 5; });
        auto splitts = std::views::split(view, 0); // (2)
        for (const auto&amp; split : splitts)
        {
            std::cout &lt;&lt; "{ ";
            std::ranges::copy(split, std::ostream_iterator&lt;int&gt;(std::cout, " "));
            std::cout &lt;&lt; "} ";
        }
    }
    std::cout &lt;&lt; '\n';
 
    {
        const std::vector nums{1, -1, -1, 2, 3, -1, -1, 4, 5, 6};
        const std::array delim{-1, -1};
        auto splitter = std::views::split(nums, delim); // (3)
        for (const auto&amp; split : splitter)
        {
            std::cout &lt;&lt; "{ ";
            std::ranges::copy(split, std::ostream_iterator&lt;int&gt;(std::cout, " "));
            std::cout &lt;&lt; "} ";
        }
    }
    std::cout &lt;&lt; '\n';

    {
        constexpr std::string_view JupiterMoons
        {
            "Callisto, Europa, Ganymede, Io, and 91 more"
        };
        constexpr std::string_view delim{", "};
        std::ranges::split_view moons_extractor{JupiterMoons, delim}; // (3)
        auto is_moon = std::views::filter([](auto str)
        {
            return std::isupper(str[0]);
        });
        std::cout &lt;&lt; "木星的几个月亮: ";
        for (const auto moon : moons_extractor {{!}} is_moon)
            std::cout &lt;&lt; std::string_view(moon) &lt;&lt; ' ';
    }
    std::cout &lt;&lt; '\n';
}
|output=
{ 1 2 3 4 } { 1 2 3 4 } { 1 2 3 4 } { 1 2 3 4 }
{ 1 } { 2 3 } { 4 5 6 }
木星的几个月亮: Callisto Europa Ganymede Io
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3714|paper=P2711R1|std=C++20|before=多形参构造函数并非显式|after=使其显式}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc constructor|lazy_split_view}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/ranges/title|{{small|lazy_split_view&lt;V, Pattern&gt;::''outer_iterator''&lt;Const&gt;::}}value_type}}
{{cpp/ranges/lazy_split_view/navbar}}

{{ddcl|since=c++20|
struct value_type : ranges::view_interface&lt;value_type&gt;
}}

迭代器 {{c/core|ranges::lazy_split_view&lt;V, Pattern&gt;::}}{{rlpi|outer_iterator}}{{c/core|&lt;Const&gt;}} 的值类型。

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|描述}}
{{dsc expos mem obj|i_|id=i|private=yes|spec={{rlpi|outer_iterator}}|指向外层类的底层 {{lconcept|view}} 的迭代器}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc|{{dsc member|value_type|(构造函数)|nolink=true|nobold=true}}|构造 {{tt|value_type}} 对象&lt;br&gt;{{mark expos mem fun}}}}
{{dsc mem fun|nolink=true|begin|返回指向内层范围起始的 {{rlpi|inner_iterator}}}}
{{dsc mem fun|nolink=true|end|返回 {{lc|std::default_sentinel}}}}
{{cpp/ranges/view_interface/inherit|embedded=yes|size=invalid|data=invalid|back=invalid|operator[]=invalid}}
{{dsc end}}

===成员函数===
{{member|{{small|std::ranges::lazy_split_view::''outer_iterator''::value_type::}}value_type|2=
{{ddcl|since=c++20|
constexpr explicit value_type(/*outer_iterator*/ i); // 仅用于阐述
}}

以 {{c|std::move(i)}} 初始化 {{lsi|#i_}}。
}}

{{member|{{small|std::ranges::lazy_split_view::''outer_iterator''::value_type::}}begin|2=
{{ddcl|since=c++20|
constexpr /*inner_iterator*/&lt;Const&gt; begin() const;
}}
等价于 {{box|{{c/core|return /*inner_iterator*/&lt;Const&gt;{}}{{tti|i_}}{{c/core|};}}}}。
}}

{{member|{{small|std::ranges::lazy_split_view::''outer_iterator''::value_type::}}end|2=
{{ddcl|since=c++20|
constexpr std::default_sentinel_t end() const noexcept;
}}
返回 {{lc|std::default_sentinel}}。
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3593|std=C++20|before={{tt|end}} 不是 noexcept 的|after=是 noexcept 的}}
{{dr list item|wg=lwg|dr=4013|std=C++20|before={{tt|value_type}} 可默认初始化|after=不可默认初始化}}
{{dr list end}}

{{langlinks|de|en|es|ja|ru}}
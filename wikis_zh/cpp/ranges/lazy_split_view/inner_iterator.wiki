{{cpp/ranges/title|{{small|lazy_split_view&lt;V, Pattern&gt;::}}''inner_iterator''}}
{{cpp/ranges/lazy_split_view/navbar}}
{{ddcla|num=1|since=c++20|expos=yes|
template&lt; bool Const &gt;
struct /*inner_iterator*/;
}}

{{rlpt|value_type|lazy_split_view::}}{{rlpi|outer_iterator}}{{c/core|::value_type::begin()}} 的返回类型。

{{tt|Const}} 匹配 {{rlpi|outer_iterator}} 的模板实参。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员|定义}}
{{dsc expos mem type|Base|{{cpp/ranges/maybe-const|V}}}}
{{dsc|{{tt|iterator_concept}}|
* {{rlpi|outer_iterator}}{{c/core|&lt;Const&gt;::iterator_concept}}，即当 {{tti|Base}} 实现 {{lconcept|forward_range}} 时为 {{lc|std::forward_iterator_tag}}。
* 否则为 {{lc|std::input_iterator_tag}}。}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{mark cond present}}|
仅当 {{tti|Base}} 实现 {{lconcept|forward_range}} 时提供。
* 如果 {{c/core|std::iterator_traits&lt;ranges::iterator_t&lt;Base&gt;&gt;::iterator_category}} 实现 {{c/core|std::derived_from&lt;std::forward_iterator_tag&gt;}} 则为 {{lc|std::forward_iterator_tag}}。
* 否则为 {{c/core|std::iterator_traits&lt;ranges::iterator_t&lt;Base&gt;&gt;::iterator_category}}。}}
{{dsc|{{tt|value_type}}|{{c/core|ranges::range_value_t&lt;Base&gt;}}}}
{{dsc|{{tt|difference_type}}|{{c/core|ranges::range_difference_t&lt;Base&gt;}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|描述}}
{{dsc expos mem obj|i_|id=i|private=yes|spec={{rlpi|outer_iterator}}{{c/core|&lt;Const&gt;}}|指向父对象 {{rlpt|lazy_split_view}} 的底层 {{lconcept|view}} 的迭代器}}
{{dsc expos mem obj|incremented_|id=incremented|private=yes|spec=bool|指示是否在此对象上至少调用过 {{c/core|operator++}} 一次的标志。}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|nolink=true|构造迭代器|notes={{mark c++20}}}}
{{dsc mem fun|nolink=true|base|返回底层迭代器|notes={{mark c++20}}}}
{{dsc mem fun|nolink=true|operator*|返回当前元素|notes={{mark c++20}}}}
{{dsc mem fun|nolink=true|operator++&lt;br&gt;operator++{{dsc small|(int)}}|推进迭代器|notes={{mark c++20}}}}
{{dsc end}}

===成员函数===
{{member|{{small|std::ranges::lazy_split_view::''inner_iterator''::}}''inner_iterator''|2=
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
/*inner_iterator*/() = default;
}}
{{dcl|num=2|since=c++20|
constexpr explicit /*inner_iterator*/( /*outer_iterator*/&lt;Const&gt; i );
}}
{{dcl end}}

@1@ 数据成员 {{lsi|#i_}} 通过其默认成员初始化式（= {{c|/*outer_iterator*/&lt;Const&gt;()}}）进行值初始化。
@2@ 以 {{c|std::move(i)}} 初始化 {{lsi|#i_}}。

数据成员 {{lsi|#incremented_}} 以其默认成员初始化式进行初始化为 {{c/core|false}}。
}}

{{member|{{small|std::ranges::lazy_split_view::''inner_iterator''::}}''base''|2=
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr const ranges::iterator_t&lt;Base&gt;&amp; base() const &amp; noexcept;
}}
{{dcl|num=2|since=c++20|
constexpr ranges::iterator_t&lt;Base&gt; base() &amp;&amp;
    requires ranges::forward_range&lt;V&gt;;
}}
{{dcl end}}

返回底层迭代器的副本。

@1@ 从底层迭代器复制构造结果。等价于 {{c|return i_./*cur*/();}}。
@2@ 从底层迭代器移动构造结果。等价于 {{c|return std::move(i_./*cur*/());}}。
}}

{{member|{{small|std::ranges::lazy_split_view::''inner_iterator''::}}operator*|2=
{{ddcl|since=c++20|
constexpr decltype(auto) operator*() const;
}}

返回底层迭代器所指向的元素。

等价于 {{c|return *i_./*cur*/();}}。
}}

{{member|{{small|std::ranges::lazy_split_view::''inner_iterator''::}}operator++|2=
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr /*inner_iterator*/&amp; operator++();
}}
{{dcl|num=2|since=c++20|1=
constexpr decltype(auto) operator++(int);
}}
{{dcl end}}

@1@ 函数体等价于&lt;br&gt;{{c|1=
incremented_ = true;
if constexpr (!ranges::forward_range&lt;Base&gt;)
{
    if constexpr (Pattern::size() == 0)
        return *this;
}
++i_./*cur*/();
return *this;
}}

@2@ 等价于&lt;br&gt;{{c|1=
if constexpr (ranges::forward_range&lt;Base&gt;)
{
    auto tmp = *this;
    ++*this;
    return tmp;
}
else
    ++*this; // 没有返回语句
}}
}}

===非成员函数===
{{dsc begin}}
{{dsc fun|nolink=true|operator{{==}}|比较迭代器或者迭代器和 {{lc|std::default_sentinel}}|notes={{mark c++20}}}}
{{dsc fun|nolink=true|iter_move|将解引用底层迭代器的结果转型为其关联右值引用类型|notes={{mark c++20}}}}
{{dsc fun|nolink=true|iter_swap|交换两个底层迭代器指向的对象|notes={{mark c++20}}}}
{{dsc end}}

{{member|1= operator=={{petty|(std::ranges::split_view::''inner_iterator'')}}|2=
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
friend constexpr bool operator==( const /*inner_iterator*/&amp; x,
                                  const /*inner_iterator*/&amp; y )
      requires forward_range&lt;Base&gt;;
}}
{{dcl|num=2|since=c++20|1=
friend constexpr bool operator==( const /*inner_iterator*/&amp; x,
                                  std::default_sentinel_t );
}}
{{dcl end}}

@1@ 等价于 {{c|1=return x.i_./*cur*/() == y.i_./*cur*/();}}。
@2@ 函数体等价于
{{source|1=
auto [pcur, pend] = ranges::subrange{x.i_.parent_-&gt;pattern_};
auto end = ranges::end(x.i_.parent_-&gt;base_);
if constexpr (/*tiny_range*/&lt;Pattern&gt;)
{
    const auto&amp; cur = x.i_./*cur*/();
    if (cur == end)
        return true;
    if (pcur == pend)
        return x.incremented_;
    return *cur == *pcur;
}
else
{
    auto cur = x.i_./*cur*/();
    if (cur == end)
        return true;
    if (pcur == pend)
        return x.incremented_;
    do
    {
        if (*cur != *pcur)
            return false;
        if (++pcur == pend)
            return true;
    }
    while (++cur != end);
    return false;
}
}}

{{cpp/note synthesized eq}}

{{cpp/hidden friend|plural=yes|{{tt|std::ranges::split_view::''inner_iterator''}}}}
}}

{{member|1= iter_move{{small|(std::ranges::split_view::''inner_iterator'')}}|2=
{{ddcl|since=c++20|
friend constexpr decltype(auto) iter_move( const /*inner_iterator*/&amp; i )
    noexcept(noexcept(ranges::iter_move(i.i_./*cur*/())));
}}
等价于 {{c|1=return ranges::iter_move(i.i_./*cur*/());}}。

{{cpp/hidden friend|plural=yes|{{tt|std::ranges::split_view::''inner_iterator''}}}}
}}

{{member|1= iter_swap{{small|(std::ranges::split_view::''inner_iterator'')}}|2=
{{ddcl|since=c++20|
friend constexpr void iter_swap( const /*inner_iterator*/&amp; x,
                                 const /*inner_iterator*/&amp; y )
    noexcept(noexcept(ranges::iter_swap(x.i_.current, y.i_.current)))
    requires std::indirectly_swappable&lt;ranges::iterator_t&lt;Base&gt;&gt;;
}}
等价于 {{c|ranges::iter_swap(x.i_./*cur*/(), y.i_./*cur*/())}}。

{{cpp/hidden friend|plural=yes|{{tt|std::ranges::split_view::''inner_iterator''}}}}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3591|std=C++20|before={{tt|base}} 的 {{c|&amp;&amp;}} 重载可能使外层迭代器失效|after=添加约束}}
{{dr list item|wg=lwg|dr=3593|std=C++20|before={{tt|base}} 的 {{c|const&amp;}} 重载返回引用但可能不为 noexcept|after=使其为 noexcept}}
{{dr list end}}

{{langlinks|de|en|es|ja|ru}}
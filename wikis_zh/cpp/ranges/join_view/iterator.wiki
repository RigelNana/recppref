{{cpp/ranges/join_view/title|''iterator''}}
{{cpp/ranges/join_view/navbar}}

{{ddcl|since=c++20|notes={{mark expos}}|
template&lt; bool Const &gt;
class /*iterator*/
}}

{{rlpt|begin|join_view::begin}} 的返回类型，并且当外部范围 {{tt|V}} 和内部范围 {{c/core|ranges::range_reference_t&lt;V&gt;}} 都满足 {{lconcept|common_range}} 且父 {{tt|join_view}} 是 {{lconcept|forward_range}}时，为 {{rlpt|end|join_view::end}} 的返回类型。

若 {{tt|V}} 不是[[cpp/ranges#辅助概念|简单视图]]（如当 {{c/core|ranges::iterator_t&lt;const V&gt;}} 无效或与 {{c/core|ranges::iterator_t&lt;V&gt;}} 不同），则 {{tt|Const}} 对于 const 重载所返回的迭代器为 {{tt|true}}，否则为 {{tt|false}}。若 {{tt|V}} 是简单视图，则 {{tt|Const}} 当且仅当 {{c/core|ranges::range_reference_t&lt;V&gt;}} 是引用时为 {{tt|true}}。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员|定义}}
{{dsc expos mem type|Parent|{{cpp/ranges/maybe-const|ranges::join_view&lt;V&gt;}}}}
{{dsc expos mem type|Base|{{cpp/ranges/maybe-const|V}}}}
{{dsc expos mem type|OuterIter|{{c/core|1=ranges::iterator_t&lt;Base&gt;}}}}
{{dsc expos mem type|InnerIter|{{c/core|1=ranges::iterator_t&lt;ranges::range_reference_t&lt;Base&gt;&gt;}}}}
{{dsc|{{tt|iterator_concept}}|
* {{lc|std::bidirectional_iterator_tag}}，若 {{c/core|ranges::range_reference_t&lt;Base&gt;}} 为引用类型，且 {{tti|Base}} 和 {{c/core|ranges::range_reference_t&lt;Base&gt;}} 都实现 {{lconcept|bidirectional_range}}；&lt;br&gt;
* {{lc|std::forward_iterator_tag}}，若 {{c/core|ranges::range_reference_t&lt;Base&gt;}} 为引用类型，且 {{tti|Base}} 和 {{c/core|ranges::range_reference_t&lt;Base&gt;}} 都实现 {{lconcept|forward_range}}；&lt;br&gt;
* 否则为 {{lc|std::input_iterator_tag}}。}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{mark cond present}}|仅当 {{tt|iterator::iterator_concept}}（见上文）代表 {{lc|std::forward_iterator_tag}} 时有定义。&lt;br&gt;
令 {{tti|OUTERC}} 为 {{c/core|1=std::iterator_traits&lt;ranges::iterator_t&lt;Base&gt;&gt;::iterator_category}}，并令 {{tti|INNERC}} 为 {{c multi
|std::iterator_traits&lt;ranges::iterator_t&lt;ranges::range_reference_t&lt;Base&gt;&gt;&gt;::
|    iterator_category}}.&lt;br&gt;
* {{lc|std::bidirectional_iterator_tag}}，若 {{tti|OUTERC}} 和 {{tti|INNERC}} 都实现 {{c/core|1=std::derived_from&lt;std::bidirectional_iterator_tag&gt;}}；&lt;br&gt;
* {{lc|std::forward_iterator_tag}}，若 {{tti|OUTERC}} 和 {{tti|INNERC}} 都实现 {{c/core|1=std::derived_from&lt;std::forward_iterator_tag&gt;}}；&lt;br&gt;
* 否则为 {{lc|std::input_iterator_tag}}。}}
{{dsc|{{tt|value_type}}|{{c/core|ranges::range_value_t&lt;ranges::range_reference_t&lt;Base&gt;&gt;}}}}
{{dsc|{{tt|difference_type}}|{{c multi
|std::common_type_t&lt;ranges::range_difference_t&lt;Base&gt;,
|                   ranges::range_difference_t&lt;ranges::range_reference_t&lt;Base&gt;&gt;&gt;}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员名|定义}}
{{dsc expos mem obj|outer_|private=yes|spec={{tti|OuterIter}}|外部迭代器}}
{{dsc expos mem obj|inner_|private=yes|spec={{tti|InnerIter}}|内部迭代器}}
{{dsc expos mem obj|parent_|private=yes|spec={{tti|Parent*}}|指向父对象的指针}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/join_view/iterator/iterator|构造迭代器}}
{{dsc mem fun|cpp/ranges/join_view/iterator/operator*|title=operator*&lt;br&gt;operator-&gt;|访问元素}}
{{dsc mem fun|cpp/ranges/join_view/iterator/operator_arith|title=operator++&lt;br&gt;operator++{{small|(int)}}&lt;br&gt;operator--&lt;br&gt;operator--{{small|(int)}}|推进或减少各底层迭代器}}
{{dsc expos mem fun|cpp/ranges/join_view/iterator/satisfy|跳过空的内部范围}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc fun|cpp/ranges/join_view/iterator/operator_cmp|title=operator==|比较底层迭代器|notes={{mark c++20}}}}
{{dsc fun|cpp/ranges/join_view/iterator/iter_move|将解引用底层迭代器的结果转型为其关联的右值引用类型|notes={{mark c++20}}}}
{{dsc fun|cpp/ranges/join_view/iterator/iter_swap|交换两个底层迭代器所指向的对象|notes={{mark c++20}}}}
{{dsc end}}

&lt;!--
===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2259R1|std=C++20|before=成员 {{tt|iterator_category}} 总被定义|after=仅当 {{tt|Base}} 实现 {{lconcept|forward_range}} 时定义}}
{{dr list end}}
--&gt;

{{langlinks|en|es|ja|ru}}
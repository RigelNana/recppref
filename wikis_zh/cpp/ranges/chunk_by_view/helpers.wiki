{{cpp/ranges/chunk_by_view/title|''find_next''|''find_prev''}}
{{cpp/ranges/chunk_by_view/navbar}}

{{anchor|find_next}}
{{member|{{small|std::ranges::chunk_by_view::}}''next''|2=
{{ddcl|since=c++23|notes={{mark expos}}|1=
constexpr ranges::iterator_t&lt;V&gt;
    /*find-next*/( ranges::iterator_t&lt;V&gt; current );
}}

查找下一个区块。

令
{{rlpi|/#数据成员|base_}} 和
{{rlpi|/#数据成员|pred_}} 为 {{rlpt|/|chunk_by_view}} 的适当的底层数据成员。

等价于：
{{source|1=
return ranges::next
(
    ranges::adjacent_find
    (
        current, ranges::end(base_), std::not_fn(std::ref(*pred_))
    ),
    1, ranges::end(base_)
);
}}

如果在调用该函数前 {{c|pred_.has_value()}} 是 {{c|false}}，则其行为未定义。

在以下非静态成员函数中使用：
* {{lc|ranges::chunk_by_view|ranges::chunk_by_view::''iterator''::}}{{rlpt|iterator/operator_arith|operator++}}

===参数===
{{par begin}}
{{par|current|指向所适配视图中的当前元素的迭代器}}
{{par end}}

===返回值===
指向下一个区块的迭代器，如上所述。
}}

{{anchor|find_prev}}
{{member|{{small|std::ranges::chunk_by_view::}}''prev''|2=
{{ddcl|since=c++23|notes={{mark expos}}|1=
constexpr ranges::iterator_t&lt;V&gt;
    /*find-prev*/( ranges::iterator_t&lt;V&gt; current )
        requires ranges::bidirectional_range&lt;V&gt;;
}}

查找前一个区块。

令
{{rlpi|/#数据成员|base_}} 和
{{rlpi|/#数据成员|pred_}} 为 {{rlpt|/|chunk_by_view}} 的适当的底层数据成员。

返回范围 {{range|ranges::begin(base_)|current}} 内的迭代器 {{tt|i}}，条件如下：
* {{c|ranges::adjacent_find(i, current, std::not_fn(std::ref(*pred_)))}} 等于 {{c|current}}，并且
* 如果 {{tt|i}} 不等于 {{c|ranges::begin(base_)}}，那么 {{c|bool(std::invoke(*pred_, *ranges::prev(i), *i))}} 是 {{c|false}}。

如果在调用该函数前 {{c|1=current == ranges::begin(base_)}} 或者 {{c|1=pred_.has_value() != true}}，则其行为未定义。

在以下非静态成员函数中使用：
* {{lc|ranges::chunk_by_view|ranges::chunk_by_view::''iterator''::}}{{rlpt|iterator/operator_arith|operator--}}

===参数===
{{par begin}}
{{par|current|指向所适配视图中的当前元素的迭代器}}
{{par end}}

===返回值===
指向前一个区块的迭代器，如上所述。
}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/ranges/view title|common}}
{{cpp/ranges/common_view/navbar}}
{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++20|1=
template&lt; ranges::view V &gt;
    requires (not ranges::common_range&lt;V&gt; and
              std::copyable&lt;ranges::iterator_t&lt;V&gt;&gt;)
class common_view
    : public ranges::view_interface&lt;common_view&lt;V&gt;&gt;
}}
{{dcl|num=2|since=c++20|1=
namespace views {
    inline constexpr /* 未指明 */ common = /* 未指明 */;
}
}}
{{dcl h|调用签名}}
{{dcl|since=c++20|1=
template&lt; ranges::viewable_range R &gt;
    requires /* 见下文 */
constexpr ranges::view auto common( R&amp;&amp; r );
}}
{{dcl end}}

@1@ 将给定的拥有相异迭代器/哨位类型的 {{lconcept|view}} 适配成亦为 {{lconcept|common_range}} 的 {{lconcept|view}}。{{tt|common_view}} 始终拥有相同的迭代器/哨位类型。

@2@ {{named req|RangeAdaptorObject}}。令 {{c|e}} 为子表达式。则表达式 {{c|views​::​common(e)}} [[cpp/language/expressions#表达式等价|表达式等价]]于：
* {{c|views​::​all(e)}}，若它为''良构''表达式且 {{c|decltype((e))}} 实现 {{lconcept|common_range}}；
* 否则为 {{c|common_view{e}&lt;!----&gt;}} 。

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|说明}}
{{dsc expos mem obj|base_|id=base|private=yes|spec={{tt|V}}|底层视图}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc constructor|common_view}}
{{dsc inc|cpp/ranges/adaptor/dsc base|common_view}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|common_view}}
{{dsc inc|cpp/ranges/adaptor/dsc end|common_view}}
{{dsc inc|cpp/ranges/adaptor/dsc size|common_view}}
{{dsc inc|cpp/ranges/adaptor/dsc reserve_hint|common_view}}
{{cpp/ranges/view_interface/inherit|embedded=yes|size=yes}}
{{dsc end}}

==={{rl|deduction guides|推导指引}}===

===辅助模板===
{{ddcl|since=c++20|1=
template&lt; class T &gt;
constexpr bool enable_borrowed_range&lt;std::ranges::common_view&lt;T&gt;&gt; =
    ranges::enable_borrowed_range&lt;T&gt;;
}}
{{lc|std::ranges::enable_borrowed_range}} 的此特化使得 {{tt|common_view}} 在底层类型实现 {{lconcept|borrowed_range}} 时也实现它。

===注解===
{{tt|common_view}} 对于使用期待迭代器与哨位为相同类型的传统算法有用。

===示例===
{{example
|code=
#include &lt;initializer_list&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;list&gt;
#include &lt;numeric&gt;
#include &lt;ranges&gt;

int main()
{
    auto v1 = {1, 2, 3, 4, 5};
    auto i1 = std::counted_iterator{v1.begin(), std::ssize(v1)};
    auto r1 = std::ranges::subrange{i1, std::default_sentinel};
//  auto e1 = std::accumulate(r1.begin(), r1.end(), 0); // 错误：要求“共同范围”
    auto c1 = std::ranges::common_view{r1};
    std::cout &lt;&lt; "accumulate: " &lt;&lt; std::accumulate(c1.begin(), c1.end(), 0) &lt;&lt; '\n';

    // 从 ranges::view_interface 继承：
    std::cout &lt;&lt; "c1.front(): " &lt;&lt; c1.front() &lt;&lt; '\n';
    std::cout &lt;&lt; "c1.back(): " &lt;&lt; c1.back() &lt;&lt; '\n';
    std::cout &lt;&lt; "c1.data(): " &lt;&lt; c1.data() &lt;&lt; '\n';
    std::cout &lt;&lt; "c1[0]: " &lt;&lt; c1[0] &lt;&lt; '\n';

    auto v2 = std::list{ 1, 2, 3, 4, 5 };
    auto i2 = std::counted_iterator{v2.begin(), std::ssize(v2)};
    auto r2 = std::ranges::subrange{i2, std::default_sentinel};
//  auto e2 = std::accumulate(r2.begin(), r2.end(), 0); // 错误：要求“共同范围”
    auto c2 = std::ranges::common_view{r2};
    std::cout &lt;&lt; "accumulate: " &lt;&lt; std::accumulate(c2.begin(), c2.end(), 0) &lt;&lt; '\n';

    // 从 ranges::view_interface 继承:
    std::cout &lt;&lt; "c2.front(): " &lt;&lt; c2.front() &lt;&lt; '\n';
//  auto e3 = c2.back(); // 错误：要求“双向范围”
//  auto e4 = c2.data(); // 错误：要求“连续范围”
//  auto e5 = c2[0];     // 错误：要求“随机访问范围”
}
|p=true
|output=
accumulate: 15
c1.front(): 1
c1.back(): 5
c1.data(): 0x7f19937f00d0
c1[0]: 1
accumulate: 15
c2.front(): 1
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3494|std=C++20|before={{tt|common_view}} 始终不是 {{tt|borrowed_range}}|after=若底层视图是 {{tt|borrowed_range}} 则它也是}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc common_range}}
{{dsc inc|cpp/iterator/dsc common_iterator}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
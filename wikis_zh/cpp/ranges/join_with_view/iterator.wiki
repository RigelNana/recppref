{{cpp/ranges/join_with_view/title|''iterator''}}
{{cpp/ranges/join_with_view/navbar}}

{{dcl begin}}
{{dcla|expos=yes|
template&lt; bool Const &gt;
class /*iterator*/
}}
{{dcl end}}

{{c/core|ranges::join_with_view&lt;V, Pattern&gt;::}}{{tti|iterator}} 是 {{c/core|ranges::join_with_view&lt;V, Pattern&gt;}} 的 {{rlpf|begin}} 和 {{rlpf|end}} 返回的迭代器的类型。

此类型的迭代器的状态如同包含两个嵌套迭代器：
* 指向父范围 {{box|{{c/core|*}}{{lsi|#parent_}}}} 中的''外部迭代器''
:* 如果 {{tti|Base}} 实现了 {{lconcept|forward_range}}，那么它是 {{box|{{lsi|#outer_it_}}}}。
:* 否则它是 {{box|{{lsi|#parent_}}{{sep}}{{c/core|-&gt;}}{{rlpsi|/#outer_it_}}}}。
* 指向模式范围 {{box|{{lsi|#parent_}}{{sep}}{{c/core|-&gt;}}{{rlpsi|/#pattern_}}}} 中或父范围的某个子范围中的''内部迭代器'' {{box|{{lsi|#inner_it_}}}}

此迭代器类具有在外部迭代器可解引用时内部迭代器也保证可解引用的不变式。在构造、自增或自减迭代器时可能会调整外部迭代器以保持不变式。

===模板形参===
{{par begin}}
{{par|Const|迭代器是否为常迭代器}}
{{par end}}

===嵌套类型===
{{dsc begin}}
{{dsc h2|仅用于阐述的类型}}
{{dsc hitem|类型|定义}}
{{dsc expos mem type|Parent|id=Parent|{{cpp/ranges/maybe-const|ranges::join_with_view&lt;V, Pattern&gt;}}}}
{{dsc expos mem type|Base|id=Base|{{cpp/ranges/maybe-const|V}}}}
{{dsc expos mem type|InnerBase|id=InnerBase|{{c/core|ranges::range_reference_t&lt;}}{{tti|Base}}{{sep}}{{c/core|&gt;}}}}
{{dsc expos mem type|PatternBase|id=PatternBase|{{cpp/ranges/maybe-const|Pattern}}}}
{{dsc expos mem type|OuterIter|id=OuterIter|{{c/core|ranges::iterator_t&lt;}}{{tti|Base}}{{sep}}{{c/core|&gt;}}}}
{{dsc expos mem type|InnerIter|id=InnerIter|{{c/core|ranges::iterator_t&lt;}}{{tti|InnerBase}}{{sep}}{{c/core|&gt;}}}}
{{dsc expos mem type|PatternIter|id=PatternIter|{{c/core|ranges::iterator_t&lt;}}{{tti|PatternBase}}{{sep}}{{c/core|&gt;}}}}
{{dsc h2|迭代器属性类型}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|iterator_concept}}|[[cpp/iterator/iterator tags|迭代器标签]]，[[#确定迭代器概念|见下文]]}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{mark cond present}}|迭代器标签，[[#确定迭代器类别|见下文]]}}
{{dsc|{{tt|value_type}}|
{{c/core|std::common_type_t&lt;ranges::range_value_t&lt;}}{{tti|InnerBase}}{{sep}}{{c/core|&gt;,}}&lt;br&gt;
{{nbspt|19}}{{c/core|ranges::range_value_t&lt;}}{{tti|PatternBase}}{{sep}}{{c/core|&gt;&gt;}}}}
{{dsc|{{tt|difference_type}}|
{{c/core|std::common_type_t&lt;ranges::range_difference_t&lt;}}{{tti|Base}}{{sep}}{{c/core|&gt;,}}&lt;br&gt;
{{nbspt|19}}{{c/core|ranges::range_difference_t&lt;}}{{tti|InnerBase}}{{sep}}{{c/core|&gt;,}}&lt;br&gt;
{{nbspt|19}}{{c/core|ranges::range_difference_t&lt;}}{{tti|PatternBase}}{{sep}}{{c/core|&gt;&gt;}}}}
{{dsc end}}

====确定迭代器概念====
{{tt|iterator_concept}} 定义如下：
* 如果满足以下所有条件，那么 {{tt|iterator_concept}} 表示 {{lc|std::bidirectional_iterator_tag}}：
** {{box|{{c/core|std::is_reference_v&lt;}}{{tti|InnerBase}}{{sep}}{{c/core|&gt;}}}} 是 {{c|true}}。
** {{tti|Base}} 实现了 {{lconcept|bidirectional_range}}。
** {{tti|InnerBase}} 和 {{tti|PatternBase}} 都实现了 {{lconcept|common_range}}。
* 否则，如果满足以下所有条件，那么 {{tt|iterator_concept}} 表示 {{lc|std::forward_iterator_tag}}：
** {{box|{{c/core|std::is_reference_v&lt;}}{{tti|InnerBase}}{{sep}}{{c/core|&gt;}}}} 是 {{c|true}}。
** {{tti|Base}} 和 {{tti|InnerBase}} 都实现了 {{lconcept|forward_range}}。
* 否则 {{tt|iterator_concept}} 表示 {{lc|std::input_iterator_tag}}。

====确定迭代器类别====
给定以下类型：
* 设 {{tt|OuterC}} 为 {{c/core|std::iterator_traits&lt;}}{{tti|OuterIter}}{{sep}}{{c/core|&gt;::iterator_category}}。
* 设 {{tt|InnerC}} 为 {{c/core|std::iterator_traits&lt;}}{{tti|InnerIter}}{{sep}}{{c/core|&gt;::iterator_category}}。
* 设 {{tt|PatternC}} 为 {{c/core|std::iterator_traits&lt;}}{{tti|PatternIter}}{{sep}}{{c/core|&gt;::iterator_category}}。

{{tt|iterator_category}} 当且仅当 {{box|{{c/core|std::is_reference_v&lt;}}{{tti|InnerBase}}{{sep}}{{c/core|&gt;}}}} 是 {{c|true}}，且 {{tti|Base}} 和 {{tti|InnerBase}} 都实现了 {{lconcept|forward_range}} 时才有定义。这种情况下它定义如下：
* 如果 {{box|{{c/core|std::is_reference_v&lt;std::common_reference_t&lt;ranges::range_reference_t&lt;}}{{tti|InnerBase}}{{sep}}{{c/core|&gt;,}}&lt;br&gt;{{nbspt|44}}{{c/core|ranges::range_reference_t&lt;}}{{tti|PatternBase}}{{sep}}{{c/core|&gt;&gt;}}}} 是 {{c|false}}，那么 {{tt|iterator_category}} 表示 {{lc|std::input_iterator_tag}}。
* 否则，如果满足以下所有条件，那么 {{tt|iterator_category}} 表示 {{lc|std::bidirectional_iterator_tag}}：
** {{tt|OuterC}}、{{tt|InnerC}} 和 {{tt|PatternC}} 都实现了 {{c|std::derived_from&lt;std::bidirectional_iterator_tag&gt;}}。
** {{tti|InnerBase}} 和 {{tti|PatternBase}} 都实现了 {{lconcept|common_range}}。
* 否则，如果 {{tt|OuterC}}、{{tt|InnerC}} 和 {{tt|PatternC}} 都实现了 {{c|std::derived_from&lt;std::forward_iterator_tag&gt;}}，那么 {{tt|iterator_category}} 表示 {{lc|std::forward_iterator_tag}}。
* 否则 {{tt|iterator_category}} 表示 {{lc|std::input_iterator_tag}}。

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|描述}}
{{dsc expos mem obj|spec={{tti|Parent}}{{sep}}{{c/core|*}}|parent_|id=parent|指向父 {{rlpt|/|join_with_view}} 的指针}}
{{dsc expos mem obj|spec={{tti|OuterIter}}|outer_it_|id=outer_it|maybe=（仅当 {{tti|Base}} 实现 {{lconcept|forward_range}} 时提供）|外部迭代器}}
{{dsc expos mem obj|spec={{c/core|std::variant&lt;}}{{tti|PatternIter}}{{sep}}{{c/core|,}}{{nbspt}}{{tti|InnerIter}}{{sep}}{{c/core|&gt;}}|inner_it_|id=inner_it|内部迭代器}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/join_with_view/iterator/iterator|构造迭代器}}
{{dsc mem fun|cpp/ranges/join_with_view/iterator/operator*|title=operator*|访问元素}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|join_with_view}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc fun|cpp/ranges/join_with_view/iterator/operator cmp|title=operator==|比较底层迭代器|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/join_with_view/iterator/iter_move|将解引用底层迭代器的结果转型到它关联的右值引用类型|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/join_with_view/iterator/iter_swap|交换两个底层迭代器所指向的对象|notes={{mark c++23}}}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
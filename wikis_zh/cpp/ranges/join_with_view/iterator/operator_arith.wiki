{{cpp/ranges/join_with_view/iterator/title|operator++,--}}
{{cpp/ranges/join_with_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr /*iterator*/&amp; operator++();
}}
{{dcl|num=2|since=c++23|
constexpr void operator++( int );
}}
{{dcl|num=3|since=c++23|
constexpr /*iterator*/ operator++( int )
    requires std::is_reference_v&lt;/*InnerBase*/&gt; &amp;&amp;
             ranges::forward_range&lt;/*Base*/&gt; &amp;&amp;
             ranges::forward_range&lt;/*InnerBase*/&gt;;
}}
{{dcl|num=4|since=c++23|
constexpr /*iterator*/&amp; operator--()
    requires std::is_reference_v&lt;/*InnerBase*/&gt; &amp;&amp;
             ranges::bidirectional_range&lt;/*Base*/&gt; &amp;&amp;
             ranges::bidirectional_range&lt;/*InnerBase*/&gt; &amp;&amp;
             ranges::common_range&lt;/*InnerBase*/&gt; &amp;&amp;
             ranges::bidirectional_range&lt;/*PatternBase*/&gt; &amp;&amp;
             ranges::common_range&lt;/*PatternBase*/&gt;;
}}
{{dcl|num=5|since=c++23|
constexpr /*iterator*/ operator--( int )
    requires std::is_reference_v&lt;/*InnerBase*/&gt; &amp;&amp;
             ranges::bidirectional_range&lt;/*Base*/&gt; &amp;&amp;
             ranges::bidirectional_range&lt;/*InnerBase*/&gt; &amp;&amp;
             ranges::common_range&lt;/*InnerBase*/&gt; &amp;&amp;
             ranges::bidirectional_range&lt;/*PatternBase*/&gt; &amp;&amp;
             ranges::common_range&lt;/*PatternBase*/&gt;;
}}
{{dcl end}}

进行迭代器的自增或自减。

@1@ 以 {{box|{{c/core|std::visit([](auto&amp; it){ ++it; },}}{{nbspt}}{{rlpsi|/#inner_it_}}{{sep}}{{c/core|);}}}} 自增{{rlp|/|内部迭代器}}。
@@ 然后按以下方式调整内部和外部迭代器：
* 如果自增后的内部迭代器是模式范围的尾后迭代器，那么就会将它设为指向下一个内部范围的开头的迭代器。
* 如果自增后的内部迭代器是某个内部范围的尾后迭代器，那么就会自增外部迭代器。然后：
:* 如果自增后的外部迭代器不是外部范围的尾后迭代器，那么就会将内部迭代器设为指向模式范围的开头的迭代器。
:* 否则，如果 {{box|{{c/core|std::is_reference_v&lt;}}{{rlpsi|/#InnerBase}}{{sep}}{{c/core|﻿&gt;}}}} 是 {{c|true}}，那么就会将内部迭代器设为持有[[cpp/iterator#可解性与有效性|奇异值]]的模式迭代器。
* 重复以上操作，直到内部迭代器不是尾后迭代器或者外部迭代器是尾后迭代器为止。

@2@ 等价于 {{c|++*this;}}。

@3@ 等价于 {{c multi|1=auto tmp = *this;|2=++*this;|3=return tmp;}}。

@4@ 如果外部迭代器是外部范围的尾后迭代器，那么就会对它进行自减并将内部迭代器设为最后一个内部范围的尾后迭代器，否则什么也不做。
@@ 然后按以下方式调整内部和外部迭代器：
* 如果内部迭代器指向某个内部范围的开头，那么就会将它设为模式范围的尾后迭代器。
* 如果内部迭代器指向模式范围的开头，那么就会自减外部迭代器并将内部迭代器设为上一个内部范围的尾后迭代器。
* 重复以上操作，直到内部迭代器不再指向任何范围的开头为止。
@@ 最后以 {{box|{{c/core|std::visit([](auto&amp; it){ --it; },}}{{nbspt}}{{rlpsi|/#inner_it_}}{{sep}}{{c/core|);}}}} 自减内部迭代器。

@5@ 等价于 {{c multi|1=auto tmp = *this;|2=--*this;|3=return tmp;}}。

===返回值===
@1,4@ {{c|*this}}
@3,5@ {{c|*this}} 在修改前的副本。

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
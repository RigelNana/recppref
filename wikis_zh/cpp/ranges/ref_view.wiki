{{cpp/ranges/title|ref_view}}
{{cpp/ranges/navbar}}

{{ddcl|header=ranges|since=c++20|1=
template&lt; ranges::range R &gt;
    requires std::is_object_v&lt;R&gt;
class ref_view
    : public ranges::view_interface&lt;ref_view&lt;R&gt;&gt;
}}

{{tt|ref_view}} 是某个其他 {{lconcept|range}} 的元素的 {{lconcept|view}}。它包装一个到该 {{tt|range}} 的引用。

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|定义}}
{{dsc expos mem obj|spec={{tt|R*}}|r_|id=r|指向底层范围的指针}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|{{PAGENAME}}#ctor|构造引用给定范围的 {{tt|ref_view}}}}
{{dsc mem fun|title=base|{{PAGENAME}}#base|返回到被引用范围的引用}}
{{dsc mem fun|title=begin|{{PAGENAME}}#begin|返回被引用范围的起始迭代器}}
{{dsc mem fun|title=end|{{PAGENAME}}#end|返回被引用范围的哨位}}
{{dsc mem fun|title=empty|{{PAGENAME}}#empty|检查被引用范围是否为空}}
{{dsc mem fun|title=size|{{PAGENAME}}#size|返回被引用 {{lconcept|sized_range}} 的大小}}
{{dsc mem fun|title=reserve_hint|{{PAGENAME}}#reserve_hint|返回被引用 {{rlpt|approximately_sized_range}} 的大致大小|notes={{mark c++26}}}}
{{dsc mem fun|title=data|{{PAGENAME}}#data|返回指向被引用 {{lconcept|contiguous_range}} 起始的指针}}

{{cpp/ranges/view_interface/inherit|embedded=yes|empty=yes|size=yes|data=yes}}
{{dsc end}}

{{anchor|ctor}}
{{member|{{small|std::ranges::ref_view::}}ref_view|2=
{{ddcl|since=c++20|
template&lt; /*different-from*/&lt;ref_view&gt; T &gt;
    requires std::convertible_to&lt;T, R&amp;&gt; &amp;&amp;
                 requires { _FUN(std::declval&lt;T&gt;()); }
constexpr ref_view( T&amp;&amp; t );
}}

以 {{c|std::addressof(static_cast&lt;R&amp;&gt;(std::forward&lt;T&gt;(t)))}} 初始化 {{lsi|#r_}}。

{{c|/*different-from*/&lt;T, U&gt;}} 当且仅当 {{c/core|std::remove_cvref_t&lt;T&gt;}} 与 {{c/core|std::remove_cvref_t&lt;U&gt;&gt;}} 不是同一类型才会得到满足，而 {{tti|_FUN}} 的重载声明为 {{c|1=void _FUN(R&amp;); void _FUN(R&amp;&amp;) = delete;}}。

===参数===
{{par begin}}
{{par|t|要引用的范围}}
{{par end}}
}}

{{anchor|base}}
{{member|{{small|std::ranges::ref_view::}}base|
{{ddcl|since=c++20|
constexpr R&amp; base() const;
}}

返回 {{box|{{c/core|*}}{{lsi|#r_}}}}。
}}

{{anchor|begin}}
{{member|{{small|std::ranges::ref_view::}}begin|
{{ddcl|since=c++20|
constexpr ranges::iterator_t&lt;R&gt; begin() const;
}}

返回 {{box|{{c/core|ranges::begin(*}}{{lsi|#r_}}{{sep}}{{c/core|)}}}}。
}}

{{anchor|end}}
{{member|{{small|std::ranges::ref_view::}}end|
{{ddcl|since=c++20|
constexpr ranges::sentinel_t&lt;R&gt; end() const;
}}

返回 {{box|{{c/core|ranges::end(*}}{{lsi|#r_}}{{sep}}{{c/core|)}}}}。
}}

{{anchor|empty}}
{{member|{{small|std::ranges::ref_view::}}empty|
{{ddcl|since=c++20|
constexpr bool empty() const
    requires requires { ranges::empty(*r_); };
}}

返回 {{box|{{c/core|ranges::empty(*}}{{lsi|#r_}}{{sep}}{{c/core|)}}}}。
}}

{{anchor|size}}
{{member|{{small|std::ranges::ref_view::}}size|
{{ddcl|since=c++20|
constexpr auto size() const
    requires ranges::sized_range&lt;R&gt;;
}}

返回 {{box|{{c/core|ranges::size(*}}{{lsi|#r_}}{{sep}}{{c/core|)}}}}。
}}

{{anchor|reserve_hint}}
{{member|{{small|std::ranges::ref_view::}}reserve_hint|
{{ddcl|since=c++26|
constexpr auto size() const
    requires ranges::approximately_sized_range&lt;R&gt;;
}}

返回 {{box|{{c/core|ranges::reserve_hint(*}}{{lsi|#r_}}{{sep}}{{c/core|)}}}}。
}}

{{anchor|data}}
{{member|{{small|std::ranges::ref_view::}}data|
{{ddcl|since=c++20|
constexpr auto data() const
    requires ranges::contiguous_range&lt;R&gt;;
}}

返回 {{box|{{c/core|ranges::data(*}}{{lsi|#r_}}{{sep}}{{c/core|)}}}}。
}}

===推导指引===
{{ddcl|since=c++20|
template&lt;class R&gt;
ref_view(R&amp;) -&gt; ref_view&lt;R&gt;;
}}

===辅助模板===
{{ddcl|since=c++20|1=
template&lt; class T &gt;
constexpr bool enable_borrowed_range&lt;ranges::ref_view&lt;T&gt;&gt; = true;
}}
{{ltt|cpp/ranges/borrowed_range|std::ranges::enable_borrowed_range}} 的此特化使得 {{tt|ref_view}} 满足 {{lconcept|borrowed_range}}。

===注解===
{{feature test macro|__cpp_lib_ranges_reserve_hint|std=C++26|value=202502L|{{lc|ranges::approximately_sized_range}} 与 {{lst|#reserve_hint}}}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;

int main()
{
    const std::string s{"cosmos"};
    
    const std::ranges::take_view tv{s, 3};
    const std::ranges::ref_view rv{tv};
    
    std::cout
        &lt;&lt; std::boolalpha
        &lt;&lt; "调用 empty()：" &lt;&lt; rv.empty() &lt;&lt; '\n'
        &lt;&lt; "调用 size() ：" &lt;&lt; rv.size() &lt;&lt; '\n'
        &lt;&lt; "调用 begin()：" &lt;&lt; *rv.begin() &lt;&lt; '\n'
        &lt;&lt; "调用 end()  ：" &lt;&lt; *(rv.end()-1) &lt;&lt; '\n'
        &lt;&lt; "调用 data() ：" &lt;&lt; rv.data() &lt;&lt; '\n'
        &lt;&lt; "调用 base() ：" &lt;&lt; rv.base().size() &lt;&lt; '\n' // ~&gt; tv.size()
        &lt;&lt; "范围 for    ：";
    
    for (const auto c: rv) { std::cout &lt;&lt; c; }
    std::cout &lt;&lt; '\n';
}
|output=
调用 empty()：false
调用 size() ：3
调用 begin()：c
调用 end()  ：s
调用 data() ：cosmos
调用 base() ：3
范围 for    ：cos
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2325R3|std=C++20|before=由于 {{lconcept|view}} 必须为 {{lconcept|default_initializable}} 提供了默认构造函数|after=与该要求一同移除}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc reference_wrapper}}
{{dsc inc|cpp/ranges/dsc owning_view}}
{{dsc inc|cpp/ranges/dsc all_view}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
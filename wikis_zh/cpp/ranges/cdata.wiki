{{cpp/ranges/title|cdata}}
{{cpp/ranges/navbar}}
{{dcl begin}}
{{dcl header|ranges}}
{{dcl header|iterator}}
{{dcl|notes={{mark custpt}}|since=c++20|1=
inline namespace /* 未指明 */ {
    inline constexpr /* 未指明 */ cdata = /* 未指明 */;
}
}}
{{dcl h|调用签名}}
{{dcl|since=c++20|1=
template&lt; class T &gt;
    requires /* 见下文 */
constexpr /* 见下文 */ cdata( T&amp;&amp; t );
}}
{{dcl end}}

返回指向{{rev inl|until=c++23| const 限定的}}实参所代表的连续范围的{{rev inl|since=c++23|常量类型的}}首元素的指针。

{{rrev|until=c++23|
令 {{tt|CT}}
* 若实参为左值（即 {{tt|T}} 为左值引用类型）则为 {{c|const std::remove_reference_t&lt;T&gt;&amp;}}，
* 否则为 {{c|const T}}。
则对 {{tt|ranges::cdata}} 的调用[[cpp/language/expressions#表达式等价|表达式等价]]于
* {{box|{{rlpsi|/#as-const-pointer}}{{c/core|(ranges::data(}}{{rlpsi|/#possibly-const-range}}{{c/core|(t)))}}}}。

返回类型等价于 {{c|std::remove_reference_t&lt;ranges::range_reference_t&lt;CT&gt;&gt;*}}。
}}

{{rrev|since=c++23|
若实参为作者，或者 {{c|ranges::enable_borrowed_range&lt;std::remove_cv_t&lt;T&gt;&gt;}} 为 {{c|true}}，则对 {{tt|ranges::cdata}} 的调用[[cpp/language/expressions#表达式等价|表达式等价]]于：
* {{c|/*as-const-pointer*/(ranges::data(/*possibly-const-range*/(t)))}}。

返回类型等价于 {{c|std::remove_reference_t&lt;ranges::range_const_reference_t&lt;T&gt;&gt;*}}。

所有其他情况下，对 {{tt|ranges::cdata}} 的调用都非良构，在调用出现于模板实例化的立即语境中时会导致[[cpp/language/sfinae|代换失败]]。
}}

{{cpp/ranges/cpo}}

===示例===
{{example
|code=
#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string&gt;

int main()
{
    std::string src {"hello world!\n"};

//  std::ranges::cdata(src)[0] = 'H'; // 错误，src.data() 被当作只读
    std::ranges::data(src)[0] = 'H'; // OK，src.data() 为非 const 存储

    char dst[20]; // C 风格字符串的存储
    std::strcpy(dst, std::ranges::cdata(src));
    // [data(src), data(src) + size(src)] 保证为 NTBS

    std::cout &lt;&lt; dst;
}
|output=
Hello world!
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc data}}
{{dsc inc|cpp/iterator/dsc data}}
{{dsc end}}

{{langlinks|en|es|ja}}
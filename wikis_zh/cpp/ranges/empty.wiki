{{cpp/ranges/title|empty}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl header|iterator}}
{{dcl|notes={{mark custpt}}|since=c++20|1=
inline namespace /* 未指明 */ {
    inline constexpr auto empty = /* 未指明 */;
}
}}
{{dcl h|调用签名}}
{{dcl|since=c++20|1=
template&lt; class T &gt;
    requires /* 见下文 */
constexpr bool empty( T&amp;&amp; t );
}}
{{dcl end}}

确定 {{c|t}} 是否拥有任何元素。

对 {{tt|ranges::empty}} 的调用[[cpp/language/expressions#表达式等价|表达式等价]]于：
# {{c|bool(t.empty())}}，若该表达式合法。
# 否则为 {{c|1=(ranges::size(t) == 0)}}，若该表达式合法。
# 否则为 {{c|1=bool(ranges::begin(t) == ranges::end(t))}}，若该表达式合法且 {{c|decltype(ranges::begin(t))}} 实现 {{lc|std::forward_iterator}}。

所有其他情况下，对 {{tt|ranges::empty}} 的调用非良构，这能在 {{c|ranges::empty(t)}} 出现于模板实例化的立即语境中时导致[[cpp/language/sfinae|代换失败]]。

{{cpp/ranges/cpo}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;vector&gt;

template&lt;std::ranges::input_range R&gt;
void print(char id, R&amp;&amp; r)
{
    if (std::ranges::empty(r))
    {
        std::cout &lt;&lt; '\t' &lt;&lt; id &lt;&lt; ") 为空\n";
        return;
    }

    std::cout &lt;&lt; '\t' &lt;&lt; id &lt;&lt; ") 包含元素:";
    for (const auto&amp; element : r)
        std::cout &lt;&lt; ' ' &lt;&lt; element;
    std::cout &lt;&lt; '\n';
}

int main()
{
    {
        auto v = std::vector&lt;int&gt;{1, 2, 3};
        std::cout &lt;&lt; "(1) ranges::empty 使用 std::vector::empty:\n";
        print('a', v);

        v.clear();
        print('b', v);
    }
    {
        std::cout &lt;&lt; "(2) ranges::empty 使用 ranges::size(initializer_list):\n";
        auto il = {7, 8, 9};
        print('a', il);

        print('b', std::initializer_list&lt;int&gt;{});
    }
    {
        std::cout &lt;&lt; "(2) ranges::empty 在原生数组上使用 ranges::size:\n";
        int array[] = {4, 5, 6}; // 数组拥有已知边界
        print('a', array);
    }
    {
        struct Scanty : private std::vector&lt;int&gt;
        {
            using std::vector&lt;int&gt;::begin;
            using std::vector&lt;int&gt;::end;
            using std::vector&lt;int&gt;::push_back;
            // 注：empty() 和 size() 都被隐藏
        };

        std::cout &lt;&lt; "(3) 在没有 empty() 或 size() 的对象上调用 ranges::empty:\n";
        Scanty y;
        print('a', y);
        y.push_back(42);
        print('b', y);
    }
}
|output=
(1) ranges::empty 使用 std::vector::empty:
        a) 包含元素: 1 2 3
        b) 为空
(2) ranges::empty 使用 ranges::size(initializer_list):
        a) 包含元素: 7 8 9
        b) 为空
(2) ranges::empty 在原生数组上使用 ranges::size:
        a) 包含元素: 4 5 6
(3) 在没有 empty() 或 size() 的对象上调用 ranges::empty:
        a) 为空
        b) 包含元素: 42
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc empty}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
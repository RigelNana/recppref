{{cpp/ranges/title|owning_view}}
{{cpp/ranges/navbar}}

{{ddcl|header=ranges|since=c++20|
template&lt; ranges::range R &gt;
    requires std::movable&lt;R&gt; &amp;&amp; (!/*is-initializer-list*/&lt;R&gt;)
class owning_view
    : public ranges::view_interface&lt;owning_view&lt;R&gt;&gt;
}}

{{tt|owning_view}} 是拥有 {{lconcept|range}} 的独占所有权的 {{lconcept|view}}。它仅可移动，并在其内部存储该 {{tt|range}}。

{{c/core|requires}} 子句中的常量 {{c|/*is-initializer-list*/&lt;R&gt;}}，当且仅当 {{c/core|std::remove_cvref_t&lt;R&gt;}} 是 {{lc|std::initializer_list}} 的特化时是 {{c|true}}。

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|描述}}
{{dsc expos mem obj|spec={{tt|R}}|r_|id=r|底层范围}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|{{PAGENAME}}#ctor|通过值初始化或移动构造存储的范围来构造 {{tt|owning_view}}}}
{{dsc mem fun|title=operator{{=}}|{{PAGENAME}}#assign|移动赋值存储的范围}}
{{dsc mem fun|title=base|{{PAGENAME}}#base|返回到存储的范围的引用}}
{{dsc mem fun|title=begin|{{PAGENAME}}#begin|返回存储的范围的起始迭代器}}
{{dsc mem fun|title=end|{{PAGENAME}}#end|返回存储的范围的哨位}}
{{dsc mem fun|title=empty|{{PAGENAME}}#empty|检查存储的范围是否为空}}
{{dsc mem fun|title=size|{{PAGENAME}}#size|返回存储的 {{lconcept|sized_range}} 的大小}}
{{dsc mem fun|title=reserve_hint|{{PAGENAME}}#reserve_hint|返回存储的大致大小 {{lconcept|approximately_sized_range}}|notes={{mark c++26}}}}
{{dsc mem fun|title=data|{{PAGENAME}}#data|返回存储的 {{lconcept|contiguous_range}} 起始的指针}}

{{cpp/ranges/view_interface/inherit|embedded=yes|empty=yes|size=yes|data=yes}}
{{dsc end}}

{{anchor|ctor}}
{{member|{{small|std::ranges::owning_view::}}owning_view|2=
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
owning_view() requires std::default_initializable&lt;R&gt; = default;
}}
{{dcl|num=2|since=c++20|1=
owning_view( owning_view&amp;&amp; other ) = default;
}}
{{dcl|num=3|since=c++20|1=
constexpr owning_view( R&amp;&amp; t );
}}
{{dcl end}}

@1@ 默认构造函数。由其默认成员初始化器（{{c|1== R()}}）值初始化 {{lsi|#r_}}。

@2@ 移动构造函数。从 {{c|other}} 的存储范围移动构造 {{lsi|#r_}}。

@3@ 从 {{c|t}} 移动构造 {{lsi|#r_}}。

===参数===
{{par begin}}
{{par|other|要从之移动的另一 {{tt|owning_view}}}}
{{par|t|要移动的范围}}
{{par end}}

===注解===
{{tt|owning_view}} 没有显式定义复制构造函数。{{tt|owning_view}} 仅可移动。
}}

{{anchor|assign}}
{{member|{{small|std::ranges::owning_view::}}operator{{=}}|
{{ddcl|since=c++20|1=
owning_view&amp; operator=( owning_view&amp;&amp; other ) = default;
}}

移动赋值运算符。从 {{c|other}} 的存储范围移动赋值存储范围。

===参数===
{{par begin}}
{{par|other|要从之移动的另一 {{tt|owning_view}}}}
{{par end}}

===返回值===
{{c|*this}}

===注解===
{{tt|owning_view}} 没有显式定义复制赋值运算符。{{tt|owning_view}} 仅可移动。
}}

{{anchor|base}}
{{member|{{small|std::ranges::owning_view::}}base|
{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr R&amp; base() &amp; noexcept;
}}
{{dcl|num=2|since=c++20|
constexpr const R&amp; base() const &amp; noexcept;
}}
{{dcl|num=3|since=c++20|
constexpr R&amp;&amp; base() &amp;&amp; noexcept;
}}
{{dcl|num=4|since=c++20|
constexpr const R&amp;&amp; base() const &amp;&amp; noexcept;
}}
{{dcl end}}
返回到存储的范围的引用，保持其值类别与 const 限定。

===返回值===
@1,2@ {{box|{{lsi|#r_}}}}

@3,4@ {{box|{{c/core|std::move(}}{{lsi|#r_}}{{sep}}{{c/core|)}}}}
}}

{{anchor|begin}}
{{member|{{small|std::ranges::owning_view::}}begin|
{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr ranges::iterator_t&lt;R&gt; begin();
}}
{{dcl|num=2|since=c++20|
constexpr auto begin() const requires ranges::range&lt;const R&gt;;
}}
{{dcl end}}

返回 {{box|{{c/core|ranges::begin(}}{{lsi|#r_}}{{sep}}{{c/core|)}}}}。
}}

{{anchor|end}}
{{member|{{small|std::ranges::owning_view::}}end|
{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr ranges::sentinel_t&lt;R&gt; end();
}}
{{dcl|num=2|since=c++20|
constexpr auto end() const requires ranges::range&lt;const R&gt;;
}}
{{dcl end}}

返回 {{box|{{c/core|ranges::end(}}{{lsi|#r_}}{{sep}}{{c/core|)}}}}。
}}

{{anchor|empty}}
{{member|{{small|std::ranges::owning_view::}}empty|
{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr bool empty() requires requires { ranges::empty(r_); };
}}
{{dcl|num=2|since=c++20|
constexpr bool empty() const requires requires { ranges::empty(r_); };
}}
{{dcl end}}

返回 {{box|{{c/core|ranges::empty(}}{{lsi|#r_}}{{sep}}{{c/core|)}}}}。
}}

{{anchor|size}}
{{member|{{small|std::ranges::owning_view::}}size|
{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr auto size() requires ranges::sized_range&lt;R&gt;;
}}
{{dcl|num=2|since=c++20|
constexpr auto size() const requires ranges::sized_range&lt;const R&gt;;
}}
{{dcl end}}

返回 {{box|{{c/core|ranges::size(}}{{lsi|#r_}}{{sep}}{{c/core|)}}}}。
}}

{{anchor|reserve_hint}}
{{member|{{small|std::ranges::owning_view::}}reserve_hint|
{{dcl begin}}
{{dcl|num=1|since=c++26|
constexpr auto reserve_hint()
    requires ranges::approximately_sized_range&lt;R&gt;;
}}
{{dcl|num=2|since=c++26|
constexpr auto reserve_hint() const
    requires ranges::approximately_sized_range&lt;const R&gt;;
}}
{{dcl end}}

返回 {{box|{{c/core|ranges::reserve_hint(}}{{lsi|#r_}}{{sep}}{{c/core|)}}}}。
}}

{{anchor|data}}
{{member|{{small|std::ranges::owning_view::}}data|
{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr auto data() requires ranges::contiguous_range&lt;R&gt;;
}}
{{dcl|num=2|since=c++20|
constexpr auto data() const requires ranges::contiguous_range&lt;const R&gt;;
}}
{{dcl end}}

返回 {{box|{{c/core|ranges::data(}}{{lsi|#r_}}{{sep}}{{c/core|)}}}}。
}}

===辅助模板===
{{ddcl|since=c++20|1=
template&lt;class T&gt;
constexpr bool enable_borrowed_range&lt;std::ranges::owning_view&lt;T&gt;&gt; =
    ranges::enable_borrowed_range&lt;T&gt;;
}}

{{c/core|ranges::enable_borrowed_range}} 的此特化使得 {{tt|owning_view}} 在底层范围满足 {{lconcept|borrowed_range}} 时满足它。

===注解===
{{feature test macro|__cpp_lib_ranges_reserve_hint|std=C++26|value=202502L|{{lc|ranges::approximately_sized_range}} 与 {{lst|#reserve_hint}}}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string&gt;

int main()
{
    using namespace std::literals;
    std::ranges::owning_view ov{"cosmos"s}; // 推导的 R 类型是 std::string；
                                            // “ov” 是此字符串的唯一所有者
    assert(
        ov.empty() == false &amp;&amp;
        ov.size() == 6 &amp;&amp;
        ov.size() == ov.base().size() &amp;&amp;
        ov.front() == 'c' &amp;&amp;
        ov.front() == *ov.begin() &amp;&amp;
        ov.back() == 's' &amp;&amp;
        ov.back() == *(ov.end() - 1) &amp;&amp;
        ov.data() == ov.base()
    );
    
    std::cout &lt;&lt; "sizeof(ov)：" &lt;&lt; sizeof ov &lt;&lt; '\n' // 通常等于 sizeof(R)
              &lt;&lt; "范围 for：";
    for (const char ch: ov)
        std::cout &lt;&lt; ch;
    std::cout &lt;&lt; '\n';
    
    std::ranges::owning_view&lt;std::string&gt; ov2;
    assert(ov2.empty());
//  ov2 = ov; // 编译时错误：复制赋值运算符被弃置
    ov2 = std::move(ov); // OK
    assert(ov2.size() == 6);
}
|p=true
|output=
sizeof(ov)：32
范围 for：cosmos
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc ref_view}}
{{dsc inc|cpp/ranges/dsc all_view}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
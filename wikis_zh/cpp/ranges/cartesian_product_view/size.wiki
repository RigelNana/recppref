{{cpp/ranges/cartesian_product_view/title|size}}
{{cpp/ranges/cartesian_product_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr /* 见描述 */ size()
    requires /*cartesian-product-is-sized*/&lt;First, Vs...&gt;;
}}
{{dcl|num=2|since=c++23|
constexpr /* 见描述 */ size() const
    requires /*cartesian-product-is-sized*/&lt;const First, const Vs...&gt;;
}}
{{dcl end}}

返回元素的个数。返回类型是实现定义的 {{c/core|/*unsigned-integer-like*/}} 类型 {{c|U}}。

令 {{rlpi|/#数据成员|base_}} 为底层的视图元组，并令 {{c|prod}} 为 {{tti|bases_}} 中所有范围大小的乘积。

@1,2@ 返回 {{c|prod}}。若 {{c|prod}} 不能以 {{c|U}} 表示则行为未定义。
等价于：
{{source|1=
return [&amp;]&lt;std::size_t... Is&gt;(std::index_sequence&lt;Is...&gt;)
{
    auto prod = static_cast&lt;U&gt;(1);
    prod = (static_cast&lt;U&gt;(ranges::size(std::get&lt;Is&gt;(bases_))) * ...);
    return prod;
}
(std::make_index_sequence&lt;1U + sizeof...(Vs)&gt;{});
}}

===参数===
（无）

===返回值===
元素的个数，也即是所有底层范围大小的乘积。

===注解===
返回类型是最小的 {{c/core|/*unsigned-integer-like*/}} 类型，其宽度足以存储所有底层范围最大值的乘积（如果存在这种类型的话）。

===示例===
{{example
|code=
#include &lt;ranges&gt;

int main()
{
    constexpr static auto w = { 1 };
    constexpr static auto x = { 2, 3 };
    constexpr static auto y = { 4, 5, 6 };
    constexpr static auto z = { 7, 8, 9, 10, 11, 12, 13 };
    constexpr auto v = std::ranges::cartesian_product_view(w, x, y, z);
    static_assert(v.size() == w.size() * x.size() * y.size() * z.size() and v.size() == 42);
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc size}}
{{dsc inc|cpp/ranges/dsc ssize}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
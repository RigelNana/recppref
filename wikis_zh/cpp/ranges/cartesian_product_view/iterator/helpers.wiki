{{cpp/ranges/cartesian_product_view/iterator/title|''next''|''prev''|''distance_from''}}
{{cpp/ranges/cartesian_product_view/navbar}}

{{anchor|next}}
{{member|{{small|std::ranges::cartesian_product_view::''iterator''::}}''next''|2=
{{ddcl|since=c++23|notes={{mark expos}}|1=
template&lt; std::size_t N = sizeof...(Vs) &gt;
constexpr void /*next*/();
}}

如果以默认模板形参调用，递归的生成 {{tt|cartesian_product_view}} 中的下一个元素（迭代器的元组）。

令 {{rlpi|/#数据成员|current_}} 代表底层的迭代器元素。等价于：
{{source|1=
auto&amp; it = std::get&lt;N&gt;(current_);
++it;
if constexpr (N &gt; 0)
{
    if (it == ranges::end(std::get&lt;N&gt;(parent_-&gt;bases_)))
    {
        it = ranges::begin(std::get&lt;N&gt;(parent_-&gt;bases_));
        next&lt;N - 1&gt;();
    }
}
}}

用于如下非静态成员函数：
* {{c/core|ranges::cartesian_product_view::}}{{rlpt|operator_arith|operator+}}
}}

{{anchor|prev}}
{{member|{{small|std::ranges::cartesian_product_view::''iterator''::}}''prev''|2=
{{ddcl|since=c++23|notes={{mark expos}}|1=
template&lt; std::size_t N = sizeof...(Vs) &gt;
constexpr void /*prev*/();
}}

如果以默认模板形参调用，递归的生成 {{tt|cartesian_product_view}} 中的上一个元素（迭代器的元组）。

令 {{rlpi|/#数据成员|current_}} 代表底层的迭代器元组。等价于：
{{source|1=
auto&amp; it = std::get&lt;N&gt;(current_);
if constexpr (N &gt; 0)
{
    if (it == ranges::begin(std::get&lt;N&gt;(parent_-&gt;bases_)))
    {
        it = /*cartesian-common-arg-end*/(std::get&lt;N&gt;(parent_-&gt;bases_));
        prev&lt;N - 1&gt;();
    }
}
--it;
}}

用于如下非静态成员函数：
* {{c/core|ranges::cartesian_product_view::}}{{rlpt|operator_arith|operator-}}
}}

{{anchor|distance from}}
{{member|{{small|std::ranges::cartesian_product_view::''iterator''::}}''distance_from''|2=
{{ddcl|since=c++23|notes={{mark expos}}|1=
template&lt; class Tuple &gt;
constexpr difference_type
    /*distance-from*/( const Tuple&amp; t ) const;
}}

返回两个{{rlp|/|迭代器}}之间的“距离”（即跳数）。

令：
* {{rlpt|/#数据成员|''parent_''}} 为指向 {{tt|cartesian_product_view}} 的底层迭代器
* {{c|/*scaled-size*/(N)}} 为：
** 若 {{c|N ≤ sizeof...(Vs)}} 则为 {{c|static_cast&lt;difference_type&gt;(ranges::size(std::get&lt;N&gt;(parent_-&gt;bases_)))}} 和 {{c|/*scaled-size*/(N + 1)}} 的乘积，否则为
** {{c|static_cast&lt;difference_type&gt;(1);}}
* {{c|/*scaled-distance*/(N)}} 为 {{c|static_cast&lt;difference_type&gt;(std::get&lt;N&gt;(current_) - std::get&lt;N&gt;(t))}} 和 {{c|/*scaled-size*/(N + 1);}} 的乘积。
* {{c|/*scaled-sum*/}} 为 {{c|/*scaled-distance*/(N)}} 取遍所有整数 {{c|0 ≤ N ≤ sizeof...(Vs)}} 的和。

返回：{{c|/*scaled-sum*/}}。

若 {{c|/*scaled-sum*/}} 不能以 {{tt|difference_type}} 表示则行为未定义。

用于如下的函数：
* {{rlpt|operator_arith2|operator-}}{{c/core|(const /*iterator*/&amp;, const /*iterator*/&amp;)}}
* {{rlpt|operator_arith2|operator-}}{{c/core|(const /*iterator*/&amp;, std::default_sentinel_t)}}

===参数===
{{par begin}}
{{par|t|用于计算距离的迭代器元组}}
{{par end}}

}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/ranges/cartesian_product_view/title|''iterator''}}
{{cpp/ranges/cartesian_product_view/navbar}}

{{ddcl|since=c++23|notes={{mark expos}}|
template&lt; bool Const &gt;
class /*iterator*/
}}

{{rlpt|begin|cartesian_product_view::begin}} 的返回类型，且若底层视图 {{tt|V}} 是 {{lconcept|common_range}} 时为 {{rlpt|end|cartesian_product_view::end}} 的返回类型。

const 限定的重载所返回类型 {{c|/*iterator*/&lt;true&gt;}}。无 const 限定的重载所返回类型 {{c|/*iterator*/&lt;false&gt;}}。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员|定义}}
{{dsc expos mem type|Parent|private=yes|{{cpp/ranges/maybe-const|ranges::cartesian_product_view&gt;}}}}
{{dsc|{{tt|iterator_category}}|{{c/core|std::input_iterator_tag}}}}
{{dsc|{{tt|iterator_concept}}|
* {{lc|std::random_access_iterator_tag}}，若实现 {{c/core|/*cartesian-product-is-random-access*/&lt;Const, First, Vs...&gt;}}，
* {{lc|std::bidirectional_iterator_tag}}，若实现 {{c/core|/*cartesian-product-is-bidirectional*/&lt;Const, First, Vs...&gt;}}，
* {{lc|std::forward_iterator_tag}}，若 {{cpp/ranges/maybe-const|First}} 实现 {{lconcept|forward_range}}，
* 否则是 {{lc|std::input_iterator_tag}}。}}
{{dsc|{{tt|value_type}}|{{cc multi
|std::tuple&lt;ranges::range_value_t&lt;/*maybe-const*/&lt;Const, First&gt;&gt;,
|           ranges::range_value_t&lt;/*maybe-const*/&lt;Const, Vs&gt;&gt;...&gt;;}}
}}
{{dsc|{{tt|reference}}|{{cc multi
|std::tuple&lt;ranges::range_reference_t&lt;/*maybe-const*/&lt;Const, First&gt;&gt;,
|           ranges::range_reference_t&lt;/*maybe-const*/&lt;Const, Vs&gt;&gt;...&gt;;}}
}}
{{dsc|{{tt|difference_type}}|实现定义的''有符号整数式''类型。可能是宽度足以储存所有底层范围最大值的乘积的（可能最小的）有符号整数类型（如果存在这种类型的话）。}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|定义}}
{{dsc expos mem obj|parent_|private=yes|spec={{tti|Parent*}}|指向父对象 {{tt|cartesian_product_view}} 的指针}}
{{dsc expos mem obj|current_|private=yes|指向当前底层元素的迭代器构成的元组，其类型为 {{cc multi
|std::tuple&lt;ranges::iterator_t&lt;/*maybe-const*/&lt;Const, First&gt;&gt;,
|           ranges::iterator_t&lt;/*maybe-const*/&lt;Const, Vs&gt;&gt;...&gt;}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/cartesian_product_view/iterator/iterator|构造迭代器}}
{{dsc mem fun|cpp/ranges/cartesian_product_view/iterator/operator*|访问元素}}
{{dsc mem fun|cpp/ranges/cartesian_product_view/iterator/operator_at|title=operator[]|通过索引访问元素}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|cartesian_product_view}}
{{dsc expos mem fun|cpp/ranges/cartesian_product_view/iterator/helpers#next|title=''next''|推进迭代器}}
{{dsc expos mem fun|cpp/ranges/cartesian_product_view/iterator/helpers#prev|title=''prev''|减少迭代器}}
{{dsc expos mem fun|cpp/ranges/cartesian_product_view/iterator/helpers#distance_from|title=''distance_from''|返回两个迭代器间的距离}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc fun|cpp/ranges/cartesian_product_view/iterator/operator_cmp|title=operator==&lt;br&gt;operator&lt;=&gt;|比较底层迭代器|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/cartesian_product_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|执行迭代器算术运算 |notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/cartesian_product_view/iterator/iter_move|将底层迭代器解引用结果的类型转换为它关联的右值引用类型|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/cartesian_product_view/iterator/iter_swap|交换底层迭代器所指代的元素|notes={{mark c++23}}}}
{{dsc end}}

===示例===
{{example}}

===引用===
{{ref std c++23}}
{{ref std|title=Class template {{tt|cartesian_product_view::iterator}}|id=range.cartesian.iterator|section=26.7.32.3}}
{{ref std end}}

===参阅===
{{dsc begin}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
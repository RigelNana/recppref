{{cpp/ranges/title|begin}}
{{cpp/ranges/navbar}}
{{dcl begin}}
{{dcl header|ranges}}
{{dcl header|iterator}}
{{dcl|notes={{mark custpt}}|since=c++20|1=
inline namespace /* 未指定 */ {
    inline constexpr /* 未指定 */ begin = /* 未指定 */;
}
}}
{{dcl h|调用签名}}
{{dcl|since=c++20|1=
template&lt; class T &gt;
    requires /* 见下文 */
constexpr std::input_or_output_iterator auto begin( T&amp;&amp; t );
}}
{{dcl end}}

返回指向实参首元素的迭代器。

{{image|range-begin-end.svg}}

如果实参是左值，或者 {{c|ranges::enable_borrowed_range&lt;std::remove_cv_t&lt;T&gt;&gt;}} 是 {{c|true}}，那么调用 {{tt|ranges::begin}} [[cpp/language/expressions#表达式等价|表达式等价]]于：
# {{c|t + 0}}，如果 {{c|t}} 具有数组类型。
#* 如果 {{c/core|std::remove_all_extents_t&lt;std::remove_reference_t&lt;T&gt;&gt;}} 不完整，那么调用 {{tt|ranges::begin}} 非良构，不要求诊断。
# 否则是 {{rev inl|until=c++23|{{box|{{lti|cpp/standard library/decay-copy}}{{c/core|(t.begin())}}}}}}{{rev inl|since=c++23|{{c|auto(t.begin())}}}}，如果该表达式合法且它的类型实现 {{lc|std::input_or_output_iterator}}。
# 否则是 {{rev inl|until=c++23|{{box|{{lti|cpp/standard library/decay-copy}}{{c/core|(begin(t))}}}}}}{{rev inl|since=c++23|{{c|auto(begin(t))}}}}，如果 {{tt|T}} 是类或枚举类型，而该表达式合法且它的类型实现 {{tt|std::input_or_output_iterator}}，其中如同只进行[[cpp/language/adl|实参依赖查找]]来确立 {{tt|begin}} 的含义。

所有其他情况下，对 {{tt|ranges::begin}} 的调用都非良构，这在此调用于模板实例化的立即语境中出现时会导致[[cpp/language/sfinae|代换失败]]。

{{cpp/ranges/cpo}}

===注解===
如果实参是右值（即 {{tt|T}} 是对象类型）且 {{c|ranges::enable_borrowed_range&lt;std::remove_cv_t&lt;T&gt;&gt;}} 是 {{c|false}}，那么对 {{tt|ranges::begin}} 的调用非良构，这也会导致代换失败。

所有情况下，返回类型都实现 {{lc|std::input_or_output_iterator}}。

{{cpp/ranges/prv}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;ranges&gt;
#include &lt;vector&gt;
 
int main() 
{
    std::vector v{3, 1, 4};
    auto vi = std::ranges::begin(v);
    auto vci = std::ranges::cbegin(v);
    assert(*vi == 3 and *vi == *vci);
    ++vi;
    ++vci; // OK: vci 是可改动对象
    *vi = 42; // OK: vi 指向可改动元素
    // *vci = 13; // 错误: vci 指向不可改动元素

    int a[]{-5, 10, 15};
    auto ai = std::ranges::begin(a); // 也可以用于 C 数组
    assert(*ai == -5);
    *ai = 42; // OK
}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2602R2|std=C++20|before=存在妨碍 [[cpp/language/adl|ADL]] 找到的特定非成员 {{tt|begin}} 的机制|after=移除这种机制}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc cbegin}}
{{dsc inc|cpp/iterator/dsc begin}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
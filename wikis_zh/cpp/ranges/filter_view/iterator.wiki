{{cpp/ranges/title|n=filter_view&lt;V,Pred&gt;::|''iterator''}}
{{cpp/ranges/filter_view/navbar}}
{{ddcla|since=c++20|expos=yes|
class /*iterator*/;
}}

{{ltt|cpp/ranges/filter_view|filter_view::begin}} 的返回类型。

若 {{tt|V}} 实现 {{lconcept|bidirectional_range}} 则这是 {{lconcept|bidirectional_iterator}}，若 {{tt|V}} 实现 {{lconcept|forward_range}} 则这是 {{lconcept|forward_iterator}}，否则是 {{lconcept|input_iterator}}。

容许修改此迭代器所指向的元素，但若结果值不满足滤的谓词则导致未定义行为。

===成员类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|iterator_concept}}|
* 若 {{tt|V}} 实现 {{lconcept|bidirectional_range}} 则为 {{lc|std::bidirectional_iterator_tag}}，
* 若 {{tt|V}} 实现 {{lconcept|forward_iterator}} 则为 {{lc|std::forward_iterator_tag}}，
* 否则为 {{lc|std::input_iterator_tag}}。
}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{small|(当且仅当 {{tt|V}} 实现 {{lconcept|forward_range}} 时提供)}}|
令 {{tt|C}} 为类型 {{c/core|std::iterator_traits&lt;ranges::iterator_t&lt;V&gt;&gt;​::​iterator_category}}。
* 若 {{tt|C}} 实现 {{c/core|std::derived_from&lt;std::bidirectional_iterator_tag&gt;}} 则为 {{lc|std::bidirectional_iterator_tag}}，
* 若 {{tt|C}} 实现 {{lc|std::forward_iterator_tag}} 则为 {{c/core|std::derived_from&lt;std::forward_iterator_tag&gt;}}，
* 否则为 {{tt|C}}。
}}
{{dsc|{{tt|value_type}}|{{c/core|ranges::range_value_t&lt;V&gt;}}}}
{{dsc|{{tt|difference_type}}|{{c/core|ranges::range_difference_t&lt;V&gt;}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|描述}}
{{dsc expos mem obj|current_|private=yes|spec={{c/core|ranges::iterator_t&lt;V&gt;}}|指向底层 {{lconcept|view}} 的迭代器}}
{{dsc expos mem obj|parent_|private=yes|spec={{c/core|ranges::filter_view&lt;V, Pred&gt;*}}|指向父 {{tt|filter_view}} 对象的指针}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|{{PAGENAME}}#ctor|构造迭代器}}
{{dsc mem fun|{{PAGENAME}}#base|title=base|返回底层迭代器}}
{{dsc mem fun|{{PAGENAME}}#dereference|title=operator*&lt;br&gt;operator-&gt;|转发到底层迭代器}}
{{dsc mem fun|{{PAGENAME}}#increment|title=operator++&lt;br&gt;operator++{{dsc small|(int)}}|推进迭代器}}
{{dsc mem fun|{{PAGENAME}}#decrement|title=operator--&lt;br&gt;operator--{{dsc small|(int)}}|减小迭代器}}
{{dsc end}}

{{anchor|ctor}}
{{member|{{small|std::ranges::filter_view::''iterator''::}}''iterator''|2=
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
/*iterator*/()
    requires std::default_initializable&lt;ranges::iterator_t&lt;V&gt;&gt; = default;&lt;!-- P2325R3 --&gt;
}}
{{dcl|since=c++20|num=2|1=
constexpr /*iterator*/( filter_view&amp; parent,
                        ranges::iterator_t&lt;V&gt; current );
}}
{{dcl end}}

@1@ 分别以其默认成员初始化式初始化 {{tti|current_}} 与 {{tti|parent_}}，它们分别为 {{c|1== ranges::iterator_t&lt;V&gt;()}} 与 {{c|1== nullptr}}。
@2@ 以 {{c|std​::​move(current)}} 初始化 {{tti|current_}} 并以 {{c|std::addressof(parent)}} 初始化 {{tti|parent_}}。
}}

{{anchor|base}}
{{member|{{small|std::ranges::filter_view::''iterator''::}}base|2=
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
constexpr const ranges::iterator_t&lt;V&gt;&amp; base() const &amp; noexcept;
}}
{{dcl|since=c++20|num=2|1=
constexpr ranges::iterator_t&lt;V&gt; base() &amp;&amp;;
}}
{{dcl end}}

@1@ 等价于 {{c|return current_;}}。
@2@ 等价于 {{c|return std​::​move(current_);}}。
}}

{{anchor|dereference}}
{{member|{{small|std::ranges::filter_view::''iterator''::}}operator*,-&gt;|2=
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
constexpr ranges::range_reference_t&lt;V&gt; operator*() const;
}}
{{dcl|since=c++20|num=2|1=
constexpr ranges::iterator_t&lt;V&gt; operator-&gt;() const
    requires /*has-arrow*/&lt;ranges::iterator_t&lt;V&gt;&gt; &amp;&amp;
             std::copyable&lt;ranges::iterator_t&lt;V&gt;&gt;;
}}
{{dcl end}}

@1@ 等价于 {{c|return *current_;}}。
@2@ 等价于 {{c|return current_;}}。&lt;br&gt;
对于类型 {{tt|I}}，当且仅当 {{tt|I}} 分别实现或满足 {{lconcept|input_iterator}}，并且 {{tt|I}} 为指针类型或 {{c|requires(I i){ i.operator-&gt;();} }} 为 {{c|true}} 是，{{c|/*has-arrow*/&lt;I&gt;}} 得到实现或满足。
}}

{{anchor|increment}}
{{member|{{small|std::ranges::filter_view::''iterator''::}}operator++|2=
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
constexpr /*iterator*/&amp; operator++();
}}
{{dcl|since=c++20|num=2|1=
constexpr void operator++( int );
}}
{{dcl|since=c++20|num=3|1=
constexpr /*iterator*/ operator++( int )
    requires ranges::forward_range&lt;V&gt;;
}}
{{dcl end}}

@1@ 等价于&lt;br&gt;{{c multi
|current_ {{=}} ranges::find_if(std::move(++current_), ranges::end(parent_-&gt;base_),
|                           std::ref(*parent_-&gt;pred_));
|return *this;
}}。

@2@ 等价于 {{c|++*this;}}。

@3@ 等价于 {{c|1=auto tmp = *this; ++*this; return tmp;}}。
}}

{{anchor|decrement}}
{{member|{{small|std::ranges::filter_view::''iterator''::}}operator--|2=
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
constexpr /*iterator*/&amp; operator--()
    requires ranges::bidirectional_range&lt;V&gt;;
}}
{{dcl|since=c++20|num=2|1=
constexpr /*iterator*/ operator--( int )
    requires ranges::bidirectional_range&lt;V&gt;;
}}
{{dcl end}}

@1@ 等价于&lt;br&gt;{{c multi
|do
|    --current_;
|while (!std::invoke(*parent_-&gt;pred_, *current_));
|return *this;
}}。

@2@ 等价于 {{c|1=auto tmp = *this; --*this; return tmp;}}。
}}

===非成员函数===
{{dsc begin}}
{{dsc fun|{{PAGENAME}}#compare|title=operator{{==}}|比较底层迭代器|notes={{mark c++20}}}}
{{dsc fun|{{PAGENAME}}#move|title=iter_move|将解引用底层迭代器的结果转型到其关联右值引用类型|notes={{mark c++20}}}}
{{dsc fun|{{PAGENAME}}#swap|title=iter_swap|交换两个底层迭代器所指向的对象|notes={{mark c++20}}}}
{{dsc end}}

{{anchor|compare}}
{{member|1= operator=={{small|(std::ranges::filter_view::''iterator'')}}|2=
{{ddcl|since=c++20|1=
friend constexpr bool operator==( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    requires std::equality_comparable&lt;ranges::iterator_t&lt;V&gt;&gt;;
}}

等价于 {{c|1=return x.current_ == y.current_;}}。

{{cpp/note synthesized eq}}

{{cpp/hidden friend|plural=no|{{tt|std::ranges::filter_view::''iterator''}}}}
}}

{{anchor|move}}
{{member|1= iter_move{{small|(std::ranges::filter_view::''iterator'')}}|2=
{{ddcl|since=c++20|1=
friend constexpr ranges::range_rvalue_reference_t&lt;V&gt;
iter_move( const /*iterator*/&amp; i )
    noexcept(noexcept(ranges::iter_move(i.current_)));
}}

等价于 {{c|1=return ranges​::​iter_move(i.current_);}}。

{{cpp/hidden friend|plural=no|{{tt|std::ranges::filter_view::''iterator''}}}}
}}

{{anchor|swap}}
{{member|1= iter_swap{{small|(std::ranges::filter_view::''iterator'')}}|2=
{{ddcl|since=c++20|1=
friend constexpr void iter_swap( const /*iterator*/&amp; x, const /*iterator*/&amp; y )
    noexcept(noexcept(ranges::iter_swap(x.current_, y.current_)))
        requires std::indirectly_swappable&lt;ranges::iterator_t&lt;V&gt;&gt;;
}}

等价于 {{c|1=ranges​::​iter_swap(x.current_, y.current_)}}。

{{cpp/hidden friend|plural=no|{{tt|std::ranges::filter_view::''iterator''}}}}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2259R1|std=C++20|before=始终定义成员类型 {{tt|iterator_category}} |after=仅若 {{tt|V}} 为 {{lconcept|forward_range}} 才定义}}
{{dr list item|wg=lwg|dr=3533|std=C++20|before={{tt|base}} 的 {{c|const&amp;}} 重载复制底层迭代器|after=返回到它的引用}}
{{dr list item|wg=lwg|dr=3593|std=C++20|before={{tt|base}} 的 {{c|const&amp;}} 重载可能不是 noexcept|after=使之为 noexcept}}
{{dr list end}}

{{langlinks|de|en|es|ja|ru}}
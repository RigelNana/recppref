{{cpp/ranges/title|reserve_hint}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl header|iterator}}
{{dcl|notes={{mark custpt}}|since=c++26|1=
inline namespace /* 未指定 */ {
    inline constexpr auto reserve_hint = /* 未指定 */;
}
}}
{{dcl h|调用签名}}
{{dcl|since=c++26|1=
template&lt; class T &gt;
    requires /* 见下文 */
constexpr auto reserve_hint( T&amp;&amp; t );
}}
{{dcl end}}

在常量时间内估计 {{c|t}} 的元素数。

给定其（可能经[[cpp/language/implicit conversion#临时量实质化|实质化]]的）结果对象以 {{c|t}} 表示的[[cpp/language/expressions#完整表达式|子表达式]]为 {{c|E}}，以及 {{c|E}} 的类型为 {{tt|T}}：
* 如果 {{c|ranges::size(E)}} 是合法表达式，那么 {{c|ranges::reserve_hint(E)}} {{ls|cpp/language/expressions#表达式等价}}于 {{c|ranges::size(E)}}。
* 否则，如果 {{c|auto(t.reserve_hint())}} 是合法的[[cpp/iterator/is-integer-like|整数式类型]]表达式，那么 {{c|ranges::reserve_hint(E)}} 表达式等价于 {{c|auto(t.reserve_hint())}}。
* 否则，如果满足以下所有条件，那么 {{c|ranges::reserve_hint(E)}} 表达式等价于 {{c|auto(reserve_hint(t))}}：
** {{tt|T}} 是类类型或枚举类型。
** {{c|auto(reserve_hint(t))}} 是合法的表达式，其中 {{tt|reserve_hint}} 的含义只能通过进行[[cpp/language/adl|实参依赖查找]]来建立。
* 否则 {{c|ranges::reserve_hint(E)}} 非良构。

以上非良构的情况能在 {{c|ranges::reserve_hint(t)}} 出现于模板实例化的立即语境中时会导致[[cpp/language/sfinae|代换失败]]。

{{cpp/ranges/cpo}}

===注解===
只要 {{c|ranges::reserve_hint(e)}} 对表达式 {{c|e}} 合法，那么返回类型是[[cpp/iterator/is-integer-like|整数式类型]]。

{{feature test macro|__cpp_lib_ranges_reserve_hint|std=C++26|value=202502L|{{lc|ranges::reserve_hint}}}}

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc size}}
{{dsc inc|cpp/ranges/dsc ssize}}
{{dsc inc|cpp/ranges/dsc approximately_sized_range}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/ranges/drop_view/title|drop_view}}
{{cpp/ranges/drop_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++20|1=
drop_view() requires std::default_initializable&lt;V&gt; = default;&lt;!-- P2325R3 --&gt;
}}
{{dcl|num=2|since=c++20|
constexpr explicit drop_view( V base, ranges::range_difference_t&lt;V&gt; count );
}}
{{dcl end}}

构造 {{tt|drop_view}}。

@1@ 默认构造函数。[[cpp/language/value initialization|值初始化]]底层视图 {{rlpsi|/#base_}} 并初始化计数 {{rlpsi|/#count_}} 为 {{c|0}}。构造后 {{rlpf|base}} 返回 {{c|V()}} 的副本而 {{rlpf|size}} 等于底层视图的大小。

@2@ 以 {{c|std::move(base)}} 初始化底层视图 {{tti|base_}} 并以 {{c|count}} 初始化计数 {{tti|count_}}。构造后 {{rlpf|base}} 返回 {{c|base}} 的副本而 {{rlpf|size}} 在 {{c|base}} 的大小不小于 {{c|count}} 时返回 {{c|ranges::size(base) - count}}，否则返回 {{c|0}}。

===参数===
{{par begin}}
{{par|base|底层视图}}
{{par|count|要跳过的元素数}}
{{par end}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;ranges&gt;

int main()
{
    constexpr std::array hi{'H', 'e', 'l', 'l', 'o', ',',
                            ' ', 'C', '+', '+', '2', '0'};
    
    std::ranges::for_each(hi, [](const char c){ std::cout &lt;&lt; c; });
    std::cout &lt;&lt; '\n';
    
    constexpr auto n = std::distance(hi.cbegin(), std::ranges::find(hi, 'C'));
    
    auto cxx = std::ranges::drop_view{hi, n};
    
    std::ranges::for_each(cxx, [](const char c){ std::cout &lt;&lt; c; });
    std::cout &lt;&lt; '\n';
}
|output=
Hello, C++20
C++20
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3714|paper=P2711R1|std=C++20|before=多参数构造函数不是显式的|after=改成显式的}}
{{dr list end}}

{{langlinks|de|en|es|ja|ru}}
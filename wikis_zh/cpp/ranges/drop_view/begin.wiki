{{cpp/ranges/drop_view/title|begin}}
{{cpp/ranges/drop_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr auto begin()
    requires (!(/*simple-view*/&lt;V&gt; &amp;&amp;
                 ranges::random_access_range&lt;const V&gt; &amp;&amp;
                 ranges::sized_range&lt;const V&gt;));
}}
{{dcl|num=2|since=c++20|
constexpr auto begin() const
    requires ranges::random_access_range&lt;const V&gt; &amp;&amp;
             ranges::sized_range&lt;const V&gt;;
}}
{{dcl end}}

返回指向 {{tt|drop_view}} 的首元素的迭代器，即指向底层视图第 ''N'' 元素的迭代器，或若它有少于 ''N'' 个元素则为指向底层视图末尾的迭代器。

若 {{tt|V}} 不是 {{lconcept|random_access_range}} 或 {{lconcept|sized_range}}，为提供 {{lconcept|range}} 概念所要求的的均摊常数时间复杂度，重载 {{v|1}} 在底层的 {{rlpsi|/#cache_}} 对象内缓存结果以供后继调用。

===参数===
（无）

===返回值===
{{box|{{c/core|ranges::next(ranges::begin(}}{{rlpsi|/#base_}}{{c/core|),}}{{nbspt}}{{rlpsi|/#count_}}{{c/core|, ranges::end(}}{{rlpsi|/#base_}}{{c/core|))}}}}。

===示例===
{{example
|code=
#include &lt;array&gt;
#include &lt;concepts&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;ranges&gt;

void println(std::ranges::range auto const&amp; range)
{
    for (auto const&amp; elem : range)
        std::cout &lt;&lt; elem;
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::array hi{'H', 'e', 'l', 'l', 'o', ',', ' ', 'C', '+', '+', '2', '0', '!'};
    println(hi);

    const auto pos = std::distance(hi.begin(), std::ranges::find(hi, 'C'));
    auto cxx = std::ranges::drop_view{hi, pos};
    std::cout &lt;&lt; "*drop_view::begin() == '" &lt;&lt; *cxx.begin() &lt;&lt; "'\n";
//  *cxx.begin() = 'c'; // 未定义： 'views' 要用作观察器
    println(cxx);
}
|output=
Hello, C++20!
*drop_view::begin() == 'C'
C++20!
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3482|std=C++20|before=const 重载能以不具大小范围调用|after=const 重载要求 {{tt|sized_range}}}} 
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc end|drop_view}}
{{dsc inc|cpp/ranges/dsc begin}}
{{dsc inc|cpp/ranges/dsc end}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/ranges/view title|repeat}}
{{cpp/ranges/repeat_view/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++23|1=
template&lt; std::move_constructible W,
          std::semiregular Bound = std::unreachable_sentinel_t &gt;
    requires (std::is_object_v&lt;W&gt; &amp;&amp; std::same_as&lt;W, std::remove_cv_t&lt;W&gt;&gt; &amp;&amp;
             (/*is-integer-like*/&lt;Bound&gt; {{!!}}
              std::same_as&lt;Bound, std::unreachable_sentinel_t&gt;))
class repeat_view : public ranges::view_interface&lt;repeat_view&lt;W, Bound&gt;&gt;
}}
{{dcl|num=2|since=c++23|1=
namespace views {
    inline constexpr /* 未指定 */ repeat = /* 未指定 */;
}
}}
{{dcl h|调用签名}}
{{dcl|since=c++23|
template&lt; class W &gt;
    requires /* 见下文 */
constexpr /* 见下文 */ repeat( W&amp;&amp; value );
}}
{{dcl|since=c++23|
template&lt; class W, class Bound &gt;
    requires /* 见下文 */
constexpr /* 见下文 */ repeat( W&amp;&amp; value, Bound&amp;&amp; bound );
}}
{{dcl h|辅助概念}}
{{dcla|num=3|expos=yes|1=
concept /*integer-like-with-usable-difference-type*/ =
    /*is-signed-integer-like*/&lt;T&gt; {{!!}}
    (/*is-integer-like*/ &lt;T&gt; &amp;&amp; std::weakly_incrementable&lt;T&gt;)
}}
{{dcl end}}

@1@ 通过重复产生相同的值来生成一系列元素的范围工厂。可以是有界或无界（无限）。

@2@ 对于任何合适的子表达式 {{c|e}} 和 {{c|f}}，{{c|views::repeat(e)}} 和 {{c|views::repeat(e, f)}}[[cpp/language/expressions#表达式等价|表达式等价]]（有相同效果）于 {{c|repeat_view&lt;std::decay_t&lt;decltype((E))&gt;&gt;(e)}} 和 {{c|repeat_view(e, f)}}。

@3@ 确定类型是否为[[cpp/iterator/is-integer-like|整数式类型]]并具有可用的[[cpp/iterator#类型与可写性|差类型]]。

{{tt|repeat_view}} 实现 {{lconcept|random_access_range}}。如果 {{tt|Bound}} 不是 {{lc|std::unreachable_sentinel_t}}，那么 {{tt|repeat_view}} 会实现 {{lconcept|sized_range}} 和 {{lconcept|common_range}}。

{{cpp/ranges/cpo|views|repeat}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|定义}}
{{dsc expos mem obj|spec={{rlpi|copyable_wrapper|movable-box}}{{sep}}{{c/core|&lt;W&gt;}}|value_|视图包含的重复元素}}
{{dsc expos mem obj|spec={{tt|Bound}}|bound_|哨位值}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|{{PAGENAME}}#ctor|创建一个 {{tt|repeat_view}}}}
{{dsc mem fun|title=begin|{{PAGENAME}}#begin|获取 {{ttt|repeat_view}} 的起始迭代器}}
{{dsc mem fun|title=end|{{PAGENAME}}#end|获取代表 {{ttt|repeat_view}} 末尾的哨位}}
{{dsc mem fun|title=size|{{PAGENAME}}#size|如果有边界，获取 {{ttt|repeat_view}} 的大小}}

{{cpp/ranges/view_interface/inherit|embedded=yes|data=invalid|size=yes}}
{{dsc end}}

{{anchor|ctor}}
{{member|{{small|std::ranges::repeat_view::}}repeat_view|2=
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
repeat_view() requires std::default_initializable&lt;W&gt; = default;
}}
{{dcl|num=2|since=c++23|1=
constexpr explicit repeat_view( const W&amp; value, Bound bound = Bound() );
}}
{{dcl|num=3|since=c++23|1=
constexpr explicit repeat_view( W&amp;&amp; value, Bound bound = Bound() );
}}
{{dcl|num=4|since=c++23|1=
template &lt; class... WArgs, class... BoundArgs &gt;
    requires std::constructible_from&lt;W, WArgs...&gt;
          &amp;&amp; std::constructible_from&lt;Bound, BoundArgs...&gt;
constexpr explicit
    repeat( std::piecewise_construct_t, std::tuple&lt;WArgs...&gt; value_args,
            std::tuple&lt;BoundArgs...&gt; bound_args = std::tuple&lt;&gt;{} );
}}
{{dcl end}}

@1@ 默认初始化 {{lsi|#value_}} 并值初始化 {{lsi|#bound_}}{{sep}}。

@2@ 以 {{c|value}} 初始化 {{lsi|#value_}} 并以 {{c|bound}} 初始化 {{lsi|#bound_}}{{sep}}。
@@ 如果 {{tt|Bound}} 不是 {{lc|std::unreachable_sentinel_t}} 且 {{c|1=bool(bound &gt;= 0)}} 是 {{c|false}}，那么行为未定义。

@3@ 以 {{c|std::move(value)}} 初始化 {{lsi|#value_}} 并以 {{c|bound}} 初始化 {{lsi|#bound_}}{{sep}}。
@@ 如果 {{tt|Bound}} 不是 {{lc|std::unreachable_sentinel_t}} 且 {{c|1=bool(bound &gt;= 0)}} 是 {{c|false}}，那么行为未定义。

@4@ 以 {{c|std::make_from_tuple&lt;T&gt;(std::move(value_args))}} 初始化 {{lsi|#value_}} 并以 {{c|std::make_from_tuple&lt;Bound&gt;(std::move(bound_args))}} 初始化 {{lsi|#bound_}}{{sep}}。
@@ 如果 {{tt|Bound}} 不是 {{lc|std::unreachable_sentinel_t}} 且 {{c|1=bool(bound &gt;= 0)}} 是 {{c|false}}，那么行为未定义。

===参数===
{{par begin}}
{{par|value|重复产生的值}}
{{par|bound|边界}}
{{par|value_args|包含 {{lsi|#value_}} 的初始化器的元组}}
{{par|bound_args|包含 {{lsi|#bound_}} 的初始化器的元组}}
{{par end}}
}}

{{anchor|begin}}
{{member|{{small|std::ranges::repeat_view::}}begin|2=
{{ddcl|since=c++23|
constexpr /*iterator*/ begin() const;
}}

返回 {{box|{{rli|iterator}}{{sep}}{{c/core|(std::addressof(*}}{{lsi|#value_}}{{sep}}{{c/core|))}}}}。
}}

{{anchor|end}}
{{member|{{small|std::ranges::repeat_view::}}end|2=
{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr /*iterator*/ end() const
    requires (!std::same_as&lt;Bound, std::unreachable_sentinel_t&gt;);
}}
{{dcl|num=2|since=c++23|
constexpr std::unreachable_sentinel_t end() const;
}}
{{dcl end}}

@1@ 返回 {{box|{{rli|iterator}}{{sep}}{{c/core|(std::addressof(*}}{{lsi|#value_}}{{sep}}{{c/core|),}}{{nbspt}}{{lsi|#bound_}}{{sep}}{{c/core|)}}}}。

@2@ 返回 {{c|std::unreachable_sentinel}}。
}}

{{anchor|size}}
{{member|{{small|std::ranges::repeat_view::}}size|2=
{{ddcl|since=c++23|
constexpr auto size() const
    requires (!std::same_as&lt;Bound, std::unreachable_sentinel_t&gt;);
}}

返回 {{box|{{rlpsi|/#to-unsigned-like}}{{sep}}{{c/core|(}}{{lsi|#bound_}}{{sep}}{{c/core|)}}}}。
}}

===推导指引===
{{dcl begin}}
{{dcl|since=c++23|1=
template&lt; class W, class Bound = std::unreachable_sentinel_t &gt;
repeat_view( W, Bound = Bound() ) -&gt; repeat_view&lt;W, Bound&gt;;
}}
{{dcl end}}

===嵌套类===
{{dsc begin}}
{{dsc expos mem class|cpp/ranges/repeat_view/iterator|迭代器类型}}
{{dsc end}}

===注解===
{{feature test macro|__cpp_lib_ranges_repeat|std=C++23|value=202207L|{{ttt|std::ranges::repeat_view}}}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string_view&gt;
using namespace std::literals;

int main()
{
    // 有边界的重载
    for (auto s: std::views::repeat("C++"sv, 3))
        std::cout &lt;&lt; s &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    
    // 无边界的重载
    for (auto s : std::views::repeat("我知道你知道的是"sv)
                {{!}} std::views::take(3))
        std::cout &lt;&lt; s &lt;&lt; ' ';
    std::cout &lt;&lt; "...\n";
}
|output=
C++ C++ C++
我知道你知道的是我知道你知道的是我知道你知道的是 ...
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=4053|std=C++20|before=对 {{tt|views::repeat}} 的单实参调用不会退化实参|after=会退化实参}}
{{dr list item|wg=lwg|dr=4054|std=C++20|before=以 {{tt|repeat_view}} 调用 {{tt|views::repeat}} 不会创建嵌套的 {{tt|repeat_view}}|after=会创建嵌套的 {{tt|repeat_view}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc iota_view}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
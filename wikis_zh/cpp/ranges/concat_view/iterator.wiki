{{cpp/ranges/concat_view/title|''iterator''}}
{{cpp/ranges/concat_view/navbar}}

{{dcl begin}}
{{dcla|num=1|expos=yes|
template&lt; bool Const &gt;
class /*iterator*/
}}
{{dcl h|辅助概念}}
{{dcla|num=2|expos=yes|anchor=concat-is-random-access|1=
template&lt; bool Const, class... Rs &gt;
concept /*concat-is-random-access*/ = /* 见描述 */;
}}
{{dcla|num=3|expos=yes|anchor=concat-is-bidirectional|1=
template&lt; bool Const, class... Rs &gt;
concept /*concat-is-bidirectional*/ = /* 见描述 */;
}}
{{dcl end}}

@1@ {{c/core|ranges::concat_view&lt;Views...&gt;::}}{{tti|iterator}} 是 {{c/core|ranges::concat_view&lt;Views...&gt;}} 的 {{rlpf|begin}} 和 {{rlpf|end}} 返回的迭代器的类型。

@2@ 设 {{tt|Fs}} 为由 {{tt|Rs}} 中末尾元素之外的所有元素组成的包。等价于
@@ {{box|
{{c/core|template&lt;bool Const, class... Rs&gt;}}&lt;br&gt;
{{c/core|concept}}{{nbspt}}{{tti|concat-is-random-access}}{{nbspt}}{{c/core|1== // 仅用于阐述}}&lt;br&gt;
{{nbspt|4}}{{lsi|cpp/ranges#all-random-access}}{{sep}}{{c/core|&lt;Const, Rs...&gt; &amp;&amp;}}&lt;br&gt;
{{nbspt|4}}{{c/core|(ranges::common_range&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Fs&gt;&gt; &amp;&amp; ...);}}
}}。

@3@ 设 {{tt|Fs}} 为由 {{tt|Rs}} 中末尾元素之外的所有元素组成的包。等价于
@@ {{box|
{{c/core|template&lt;bool Const, class... Rs&gt;}}&lt;br&gt;
{{c/core|concept}}{{nbspt}}{{tti|concat-is-bidirectional}}{{nbspt}}{{c/core|1== // 仅用于阐述}}&lt;br&gt;
{{nbspt|4}}{{lsi|cpp/ranges#all-bidirectional}}{{sep}}{{c/core|&lt;Const, Rs...&gt; &amp;&amp;}}&lt;br&gt;
{{nbspt|4}}{{c/core|(ranges::common_range&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Fs&gt;&gt; &amp;&amp; ...);}}
}}。

===模板形参===
{{par begin}}
{{par|Const|迭代器是否为常迭代器}}
{{par end}}

===嵌套类型===
{{dsc begin}}
{{dsc h2|仅用于阐述的类型}}
{{dsc hitem|类型|定义}}
{{dsc expos mem type|base-iter|id=base-iter|{{c/core|std::variant&lt;ranges::iterator_t&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Views&gt;&gt;...&gt;}}}}
{{dsc h2|迭代器属性类型}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|iterator_concept}}|[[cpp/iterator/iterator tags|迭代器标签]]，[[#确定迭代器概念|见下文]]}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{mark cond present}}|迭代器标签，[[#确定迭代器类别|见下文]]}}
{{dsc|{{tt|value_type}}|{{rlpsi|/#concat-value-t}}{{sep}}{{c/core|&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Views&gt;...&gt;}}}}
{{dsc|{{tt|difference_type}}|
{{c/core|std::common_type_t&lt;ranges::range_difference_t&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Views&gt;&gt;...&gt;}}}}
{{dsc end}}

====确定迭代器概念====
{{tt|iterator_concept}} 定义如下：
* 如果 {{box|{{lsi|#concat-is-random-access}}{{sep}}{{c/core|&lt;Const, Views...&gt;}}}} 得到实现，那么 {{tt|iterator_concept}} 表示 {{lc|std::random_access_iterator_tag}}。
* 否则，如果 {{box|{{lsi|#concat-is-bidirectional}}{{sep}}{{c/core|&lt;Const, Views...&gt;}}}} 得到实现，那么 {{tt|iterator_concept}} 表示 {{lc|std::bidirectional_iterator_tag}}。
* 否则，如果 {{box|{{lsi|cpp/ranges#all-forward}}{{sep}}{{c/core|&lt;Const, Views...&gt;}}}} 得到实现，那么 {{tt|iterator_concept}} 表示 {{lc|std::forward_iterator_tag}}。
* 否则 {{tt|iterator_concept}} 表示 {{lc|std::input_iterator_tag}}。

====确定迭代器类别====
{{tt|iterator_category}} 当且仅当 {{box|{{lsi|cpp/ranges#all-forward}}{{sep}}{{c/core|&lt;Const, Views...&gt;}}}} 得到实现时才有定义。这种情况下它定义如下：
* 如果 {{box|{{c/core|std::is_reference_v&lt;}}{{rlpsi|/#concat-reference-t}}{{sep}}{{c/core|&lt;}}{{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, Views&gt;...&gt;&gt;}}}} 是 {{c|false}}，那么 {{tt|iterator_category}} 表示 {{lc|std::input_iterator_tag}}。
** 如果 {{box|({{c/core|std::derived_from&lt;Cs, std::random_access_iterator_tag&gt; &amp;&amp; ...) &amp;&amp;}}&lt;br&gt;{{nbspt|4}}{{lsi|#concat-is-random-access}}{{sep}}{{c/core|&lt;Const, Views...&gt;}}}} 是 {{c|true}}，那么 {{tt|iterator_category}} 表示 {{lc|std::random_access_iterator_tag}}。
** 否则，如果 {{box|({{c/core|std::derived_from&lt;Cs, std::bidirectional_iterator_tag&gt; &amp;&amp; ...) &amp;&amp;}}&lt;br&gt;{{nbspt|4}}{{lsi|#concat-is-bidirectional}}{{sep}}{{c/core|&lt;Const, Views...&gt;}}}} 是 {{c|true}}，那么 {{tt|iterator_category}} 表示 {{lc|std::bidirectional_iterator_tag}}。
** 否则，如果 {{c|(std::derived_from&lt;Cs, std::forward_iterator_tag&gt; &amp;&amp; ...)}} 是 {{c|true}}，那么 {{tt|iterator_category}} 表示 {{lc|std::forward_iterator_tag}}。
** 否则 {{tt|iterator_category}} 表示 {{lc|std::input_iterator_tag}}。

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|定义}}
{{dsc expos mem obj|spec={{lsi|cpp/ranges#maybe-const}}{{sep}}{{c/core|&lt;Const, ranges::concat_view&gt;*}}|parent_|id=parent|指向父 {{rlpt|/|concat_view}} 的指针}}
{{dsc expos mem obj|spec={{tti|base-iter}}|it_|id=it|指向当前视图中的迭代器}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/concat_view/iterator/iterator|构造迭代器}}
{{dsc mem fun|cpp/ranges/concat_view/iterator/operator*|访问元素}}
{{dsc mem fun|cpp/ranges/concat_view/iterator/operator_at|title=operator[]|按索引访问元素}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|concat_view}}
{{dsc h2|仅用于阐述的函数模板}}
{{dsc expos mem fun|cpp/ranges/concat_view/iterator/helpers#satisfy|title=''satisfy''|如果 {{tti|it_}} 是当前视图的末尾，那么将 {{tti|it_}} 替换为下一个视图的起始}}
{{dsc expos mem fun|cpp/ranges/concat_view/iterator/helpers#prev|title=''prev''|减少 {{tti|it_}}，使它指向前一个位置}}
{{dsc expos mem fun|cpp/ranges/concat_view/iterator/helpers#advance-fwd|title=''advance-fwd''|按给定偏移量推进当前位置}}
{{dsc expos mem fun|cpp/ranges/concat_view/iterator/helpers#advance-bwd|title=''advance-bwd''|按给定值减少当前位置}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc fun|cpp/ranges/concat_view/iterator/operator cmp|title=operator==&lt;br&gt;operator&lt;&lt;br&gt;operator&gt;&lt;br&gt;operator&lt;=&lt;br&gt;operator&gt;=&lt;br&gt;operator&lt;=&gt;|比较底层迭代器|notes={{mark c++26}}}}
{{dsc fun|cpp/ranges/concat_view/iterator/operator arith2|title=operator+&lt;br&gt;operator-|实施迭代器算术|notes={{mark c++26}}}}
{{dsc fun|cpp/ranges/concat_view/iterator/iter_move|将底层迭代器的解引用结果转型为其关联的右值引用类型|notes={{mark c++26}}}}
{{dsc fun|cpp/ranges/concat_view/iterator/iter_swap|交换两个底层迭代器所指向的对象|notes={{mark c++26}}}}
{{dsc end}}

===示例===
{{example
|基础版本可以在 [https://godbolt.org/z/TGv8v84xz Compiler Explorer] 测试。
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;ranges&gt;
 
int main()
{
    namespace views = std::views;
    static constexpr int p[]{1, 2, 3};
    static constexpr auto e = {4, 5};
    auto t = views::iota(6, 9);
    auto cat = views::concat(p, e, t);
    auto dog = views::concat(cat, cat);
    for (auto i{dog.begin()}; i != std::default_sentinel; ++i)
        std::cout &lt;&lt; *i &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8
}}

===引用===
{{ref std c++26}}
{{ref std|title=Class template {{tt|concat_view::iterator}}|id=range.concat.iterator|section=26.7.18.3}}
{{ref std end}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/ranges/view title|join}}
{{cpp/ranges/join_view/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++20|
template&lt; ranges::input_range V &gt;
    requires ranges::view&lt;V&gt; and
             ranges::input_range&lt;ranges::range_reference_t&lt;V&gt;&gt;
class join_view
    : public ranges::view_interface&lt;join_view&lt;V&gt;&gt;
}}
{{dcl|num=2|since=c++20|1=
namespace views {
    inline constexpr /* 未指定 */ join = /* 未指定 */;
}
}}
{{dcl h|调用签名}}
{{dcl|since=c++20|1=
template&lt; ranges::viewable_range R &gt;
    requires /* 见下文 */
constexpr ranges::view auto join( R&amp;&amp; r );
}}
{{dcl end}}

@1@ 表示由从拉平范围的视图获得的序列组成的 {{lconcept|view}}。

@2@ {{named req|RangeAdaptorObject}}（也是 {{named req|RangeAdaptorClosureObject}}）。对于任何适合的子表达式 {{c|e}} 表达式 {{c|views::join(e)}} [[cpp/language/expressions#表达式等价|表达式等价]]于 {{c|join_view&lt;views::all_t&lt;decltype((e))&gt;&gt;{e}&lt;!----&gt;}}。

{{tt|join_view}} 实现 {{lconcept|input_range}}。

以下情况下 {{tt|join_view}} 实现 {{lconcept|forward_range}}：
* {{c|ranges::range_reference_t&lt;V&gt;}} 是引用类型，且
* {{c|V}} 和 {{c|ranges::range_reference_t&lt;V&gt;}} 都实现 {{lconcept|forward_range}}。

以下情况下 {{tt|join_view}} 实现 {{lconcept|bidirectional_range}}：
* {{c|ranges::range_reference_t&lt;V&gt;}} 是引用类型，
* {{c|V}} 实现 {{lconcept|bidirectional_range}}，且
* {{c|ranges::range_reference_t&lt;V&gt;}} 同时实现 {{lconcept|bidirectional_range}} 和 {{lconcept|common_range}}。

以下情况下 {{tt|join_view}} 实现 {{lconcept|common_range}}：
* {{c|ranges::range_reference_t&lt;V&gt;}} 是引用类型，且
* {{c|V}} 和 {{c|ranges::range_reference_t&lt;V&gt;}} 都实现 {{lconcept|forward_range}} 和 {{lconcept|common_range}}。

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc constructor|join_view}}
{{dsc inc|cpp/ranges/adaptor/dsc base|join_view}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|join_view}}
{{dsc inc|cpp/ranges/adaptor/dsc end|join_view}}

{{cpp/ranges/view_interface/inherit|embedded=yes|data=invalid|size=invalid|operator[]=invalid}}
{{dsc end}}

==={{rl|deduction guides|推导指引}}===

===嵌套类===
{{dsc begin}}
{{dsc expos mem tclass|cpp/ranges/join_view/iterator|迭代器类型}}
{{dsc expos mem tclass|cpp/ranges/join_view/sentinel|哨位类型}}
{{dsc end}}

===注解===
在接纳 {{wg21|P2328R1}} 前，内层范围类型（{{c/core|ranges::range_reference_t&lt;V&gt;}}）不能是容器类型（但可以是容器的引用）。例如不允许接合 {{lc|std::string}} 纯右值的 {{rlpt|transform_view}}。

{{source|1=
struct Person { int age; std::string name; };

auto f(std::vector&lt;Person&gt;&amp; v) {
//  return v {{!}} std::views::transform([](auto&amp; p){ return p.name; })
//           {{!}} std::views::join; // P2328R1 前错误
    return v {{!}} std::views::transform([](auto&amp; p) -&gt; std::string&amp; { return p.name; })
             {{!}} std::views::join; // OK
}
}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string_view&gt;
#include &lt;vector&gt;

int main()
{
    using namespace std::literals;

    const auto bits = {"https:"sv, "//"sv, "cppreference"sv, "."sv, "com"sv};
    for (char const c : bits {{!}} std::views::join)
        std::cout &lt;&lt; c;
    std::cout &lt;&lt; '\n';
    
    const std::vector&lt;std::vector&lt;int&gt;&gt; v{&lt;!----&gt;{1, 2}, {3, 4, 5}, {6}, {7, 8, 9}&lt;!----&gt;};
    auto jv = std::ranges::join_view(v);
    for (int const e : jv)
        std::cout &lt;&lt; e &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
https://cppreference.com
1 2 3 4 5 6 7 8 9
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3474|std=C++20|before={{c|views::join(e)}} 在 {{c|e}} 是 {{tt|join_view}} 时会返回 {{c|e}} 的副本|after=返回嵌套的 {{tt|join_view}}}}
{{dr list item|paper=P2328R1|std=C++20|before={{tt|join_view}} 无法接合非视图 {{lconcept|range}} 纯右值|after=使得可接合}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc join_with_view}}
{{dsc inc|cpp/ranges/dsc concat_view}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/ranges/title|sized_range|disable_sized_range}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl rev begin|num=1}}
{{dcl|since=c++20|until=c++26|1=
template&lt; class T &gt;
concept sized_range = ranges::range&lt;T&gt; &amp;&amp;
    requires(T&amp; t) {
        ranges::size(t);
    };
}}
{{dcl|since=c++26|1=
template&lt; class T &gt;
concept sized_range = ranges::approximately_sized_range&lt;T&gt; &amp;&amp;
    requires(T&amp; t) {
        ranges::size(t);
    };
}}
{{dcl rev end}}
{{dcl|num=2|since=c++20|1=
template&lt; class &gt;
constexpr bool disable_sized_range = false;
}}
{{dcl end}}

@1@ {{tt|sized_range}} 概念指定在常数时间内以 {{tt|size}} 函数知晓其大小的 {{rev inl|until=c++26|{{lconcept|range}}}}{{rev inl|since=c++26|{{rlpt|approximately_sized_range}}}} 类型。

@2@ {{tt|disable_sized_range}} 为允许使用（成员或非成员）提供 {{tt|size}} 函数但不实际实现 {{tt|sized_range}} 的范围类型存在。用户可对无 cv 限定的程序定义类型特化 {{tt|disable_sized_range}}。这些特化应当可用于{{lt|cpp/language/constant expression|常量表达式}}并拥有 {{c/core|const bool}} 类型。

===语义要求===
@1@ 给定 {{c/core|std::remove_reference_t&lt;T&gt;}} 类型的左值 {{c|t}}，{{tt|T}} 只有在满足以下所有条件时才会实现 {{tt|sized_range}}：
* {{c|ranges::size(t)}}
:* 拥有均摊的常数时间复杂度，
:* 不以对于保持相等性的表达式可观察的方式更改 {{c|t}} 的值，且
:* 等于 {{c|ranges::distance(ranges::begin(t), ranges::end(t))}}&lt;!-- LWG 3559 --&gt;，并且
* 如果 {{c/core|ranges::iterator_t&lt;T&gt;}} 实现了 {{lconcept|forward_iterator}}，那么无论对 {{c|ranges::begin(t)}} 的求值的行为如何，{{c|ranges::size(t)}} 都具有良好定义（换言之，单趟有大小范围可以只在首次调用 {{tt|begin}} 前支持调用 {{tt|size}}，但向前范围必须在所有时间支持）。

===注解===
{{tt|disable_sized_range}} 不能用于手动禁用迭代器与哨位满足 {{lconcept|sized_sentinel_for}} 的范围；必须用 {{tt|disable_sized_sentinel_for}} 代替。

不能对数组类型或引用类型特化 {{tt|disable_sized_range}}。

{{feature test macro|__cpp_lib_ranges_reserve_hint|std=C++26|value=202502L|{{lc|ranges::approximately_sized_range}} 与 {{lc|ranges::reserve_hint}}}}

===示例===
{{example
|code=
#include &lt;forward_list&gt;
#include &lt;list&gt;
#include &lt;ranges&gt;

static_assert
(
    std::ranges::sized_range&lt;std::list&lt;int&gt;&gt; and
    not std::ranges::sized_range&lt;std::forward_list&lt;int&gt;&gt;
);

int main() {}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc random_access_range}}
{{dsc inc|cpp/ranges/dsc contiguous_range}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
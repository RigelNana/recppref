{{cpp/ranges/view title|cartesian_product}}
{{cpp/ranges/cartesian_product_view/navbar}}
{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++23|1=
template&lt; ranges::input_range First, ranges::forward_range... Vs &gt;
    requires (ranges::view&lt;First&gt; &amp;&amp; ... &amp;&amp; ranges::view&lt;Vs&gt;)
class cartesian_product_view
    : public ranges::view_interface&lt;cartesian_product_view&lt;First, Vs...&gt;&gt;
}}
{{dcl|num=2|since=c++23|1=
namespace views {
    inline constexpr /* 未指定 */ cartesian_product = /* 未指定 */;
}
}}
{{dcl h|调用签名}}
{{dcl|since=c++23|1=
template&lt; ranges::viewable_range... Rs &gt;
    requires /* 见下文 */
constexpr ranges::view auto cartesian_product( Rs&amp;&amp;... rs );
}}
{{dcl h|辅助概念}}
{{dcl|num=3|notes={{mark expos}}|1=
template&lt; bool Const, class First, class... Vs &gt;
concept /*cartesian-product-is-random-access*/ =
    (ranges::random_access_range&lt;/*maybe-const*/&lt;Const, First&gt;&gt; &amp;&amp; ... &amp;&amp;
        (ranges::random_access_range&lt;/*maybe-const*/&lt;Const, Vs&gt;&gt; &amp;&amp;
            ranges::sized_range&lt;/*maybe-const*/&lt;Const, Vs&gt;&gt;));
}}
{{dcl|num=4|notes={{mark expos}}|1=
template&lt; class R &gt;
concept /*cartesian-product-common-arg*/ =
    ranges::common_range&lt;R&gt; {{!!}}
        (ranges::sized_range&lt;R&gt; &amp;&amp; ranges::random_access_range&lt;R&gt;);
}}
{{dcl|num=5|notes={{mark expos}}|1=
template&lt; bool Const, class First, class... Vs &gt;
concept /*cartesian-product-is-bidirectional*/ =
    (ranges::bidirectional_range&lt;/*maybe-const*/&lt;Const, First&gt;&gt; &amp;&amp; ... &amp;&amp;
        (ranges::bidirectional_range&lt;/*maybe-const*/&lt;Const, Vs&gt;&gt; &amp;&amp;
            /*cartesian-product-common-arg*/&lt;/*maybe-const*/&lt;Const, Vs&gt;&gt;));
}}
{{dcl|num=6|notes={{mark expos}}|1=
template&lt; class First, class... Vs &gt;
concept /*cartesian-product-is-common*/ =
    /*cartesian-product-common-arg*/&lt;First&gt;;
}}
{{dcl|num=7|notes={{mark expos}}|1=
template&lt; class... Vs &gt;
concept /*cartesian-product-is-sized*/ =
    (ranges::sized_range&lt;Vs&gt; &amp;&amp; ...);
}}
{{dcl|num=8|notes={{mark expos}}|1=
template&lt; bool Const, template&lt;class&gt; class FirstSent, class First, class... Vs &gt;
concept /*cartesian-is-sized-sentinel*/ =
    (std::sized_sentinel_for&lt;FirstSent&lt;/*maybe-const*/&lt;Const, First&gt;&gt;,
        ranges::iterator_t&lt;/*maybe-const*/&lt;Const, First&gt;&gt;&gt; &amp;&amp; ... &amp;&amp;
            (ranges::sized_range&lt;/*maybe-const*/&lt;Const, Vs&gt;&gt; &amp;&amp;
                std::sized_sentinel_for&lt;ranges::iterator_t&lt;
                    /*maybe-const*/&lt;Const, Vs&gt;&gt;,
                        ranges::iterator_t&lt;/*maybe-const*/&lt;Const, Vs&gt;&gt;&gt;));
}}
{{dcl h|辅助函数模板}}
{{dcl|num=9|notes={{mark expos}}|1=
template&lt; /*cartesian-product-common-arg*/ R &gt;
constexpr auto /*cartesian-common-arg-end*/( R&amp; r )
    if constexpr (ranges::common_range&lt;R&gt;)
        return ranges::end(r);
    else
        return ranges::begin(r) + ranges::distance(r);
}
}}
{{dcl end}}

@1@ {{tt|cartesian_product_view}} 是接受 ''n'' 个 {{lconcept|view}} 的范围适配器，其中 ''n &gt; 0''，它产生对给定的范围计算 {{enwiki|Cartesian product#n-ary Cartesian product|n-元笛卡儿积}} 所得的元组的 {{lconcept|view}}。所产生视图的大小是给定的范围大小的乘积，而其各个元素是大小为 ''n'' 的（引用的）元组。

@2@ {{tt|views::cartesian_product}} 是定制点对象。
* 以无参数形式调用时，{{c|views::cartesian_product()}} [[cpp/language/expressions#表达式等价|表达式等价]]于{{c|views::single(std::tuple())}}。
* 否则，{{c|views::cartesian_product(rs...)}} [[cpp/language/expressions#表达式等价|表达式等价]]于{{c|ranges::cartesian_product_view&lt;views::all_t&lt;decltype((rs))&gt;...&gt;(rs...)}}。

@3@ 确定 {{tt|cartesian_product}} 是否是随机访问范围（另见 {{lconcept|random_access_range}}）。

@4@ 确定 {{tt|cartesian_product}} 是否是公共范围（另见 {{lconcept|common_range}}）。

@5@ 确定 {{tt|cartesian_product}} 是否是双向范围（另见 {{lconcept|bidirectional_range}}）。

@6@ 确定 {{tt|cartesian_product}} 是否满足辅助概念 {{c/core|/*cartesian-product-is-common*/}}（另见 {{lconcept|common_range}}）。

@7@ 确定 {{tt|cartesian_product}} 是否是有大小范围（另见 {{lconcept|sized_range}}）。

@8@ 确定 {{tt|cartesian_product}} 是否使用了有大小哨位 [[cpp/iterator/sized_sentinel_for|sized_sentinel]]。

@9@ 返回所产生 {{lconcept|view}} 的末尾。仅当 {{tt|cartesian_product}} 满足辅助概念 {{c/core|/*cartesian-product-common-arg*/}} 时才参与重载决议。

传递给 {{tt|cartesian_product_view}} 的首个 ({{tt|First}}) {{lconcept|range}} 受到特殊处理，因为它仅传递一次。结果而言，对它的一些限制被放宽了：
* {{tt|First}} 是 {{lconcept|input_range}} 而不要求是 {{lconcept|forward_range}}；
* 不要求 {{tt|First}} 是 {{lconcept|sized_range}} 以使 {{tt|cartesian_product_view}} 是 {{lconcept|random_access_range}} 或 {{lconcept|common_range}}；
* 不要求 {{tt|First}} 是 {{lconcept|common_range}} 以使 {{tt|cartesian_product_view}} 是 {{lconcept|bidirectional_range}}。
&lt;!----&gt;
{{cpp/ranges/cpo|views|cartesian_product}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|定义}}
{{dsc expos mem obj|base_|private=yes|spec={{c/core|std::tuple&lt;First, Vs...&gt;}}|保存所有被适配的 {{lconcept|view}} 对象的对象。}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc constructor|cartesian_product_view}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|cartesian_product_view}}
{{dsc inc|cpp/ranges/adaptor/dsc end|cartesian_product_view}}
{{dsc inc|cpp/ranges/adaptor/dsc size|cartesian_product_view}}
{{cpp/ranges/view_interface/inherit|embedded=yes|size=invalid|data=invalid}}
{{dsc end}}

==={{rl|deduction guides|推导指引}}===

===嵌套类===
{{dsc begin}}
{{dsc expos mem tclass|cpp/ranges/cartesian_product_view/iterator|迭代器类型}}
{{dsc end}}

===注解===
{{feature test macro|__cpp_lib_ranges_cartesian_product|std=C++23|value=202207L|{{tt|std::ranges::cartesian_product_view}}}}

===示例===
{{example
|code=
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;list&gt;
#include &lt;ranges&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

void print(std::tuple&lt;char const&amp;, int const&amp;, std::string const&amp;&gt; t, int pos)
{
    const auto&amp; [a, b, c] = t;
    std::cout &lt;&lt; '(' &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; ' ' &lt;&lt; c &lt;&lt; ')' &lt;&lt; (pos % 4 ? " " : "\n");
}

int main()
{
    const auto x = std::array{'A', 'B'};
    const auto y = std::vector{1, 2, 3};
    const auto z = std::list&lt;std::string&gt;{"α", "β", "γ", "δ"};

    for (int i{1}; auto const&amp; tuple : std::views::cartesian_product(x, y, z))
        print(tuple, i++);
}
|output=
(A 1 α) (A 1 β) (A 1 γ) (A 1 δ)
(A 2 α) (A 2 β) (A 2 γ) (A 2 δ)
(A 3 α) (A 3 β) (A 3 γ) (A 3 δ)
(B 1 α) (B 1 β) (B 1 γ) (B 1 δ)
(B 2 α) (B 2 β) (B 2 γ) (B 2 δ)
(B 3 α) (B 3 β) (B 3 γ) (B 3 δ)
}}

===引用===
{{ref std c++23}}
{{ref std|title=Cartesian product view|id=range.cartesian|section=26.7.32}}
{{ref std end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc zip_view}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru|zh}}
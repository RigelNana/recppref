{{cpp/ranges/view title|single}}
{{cpp/ranges/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl rev multi|num=1|since1=c++20|dcl1=
template&lt; std::copy_constructible T &gt;
    requires std::is_object_v&lt;T&gt;
class single_view
    : public ranges::view_interface&lt;single_view&lt;T&gt;&gt;
|since2=c++23|dcl2=
template&lt; std::move_constructible T &gt;
    requires std::is_object_v&lt;T&gt;
class single_view
    : public ranges::view_interface&lt;single_view&lt;T&gt;&gt;
}}
{{dcl|num=2|since=c++20|1=
namespace views {
    inline constexpr /* 未指定 */ single = /* 未指定 */;
}
}}
{{dcl h|调用签名}}
{{dcl|since=c++20|1=
template&lt; class T &gt;
    requires /* 见下文 */
constexpr /* 见下文 */ single( T&amp;&amp; t );
}}
{{dcl end}}

@1@ 产生准确含有一个具有指定值的元素的 {{lconcept|view}}。
@2@ 表达式 {{c|views::single(e)}} 对任何适合的子表达式 {{c|e}} [[cpp/language/expressions#表达式等价|表达式等价]]于 {{c|single_view&lt;std::decay_t&lt;decltype((e))&gt;&gt;(e)}}。

元素的生存期与父 {{tt|single_view}} 绑定。复制 {{tt|single_view}} 会产生元素的副本。

{{cpp/ranges/cpo|views|single}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员名|定义}}
{{dsc expos mem obj|spec={{rlpi|copyable_wrapper|copyable-box}}{{sep}}{{tt|&lt;T&gt;}}|value_|视图包含的单个元素|notes={{mark until c++23}}}}
{{dsc expos mem obj|spec={{rlpi|copyable_wrapper|movable-box}}{{sep}}{{tt|&lt;T&gt;}}|value_|视图包含的单个元素|notes={{mark since c++23}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|{{PAGENAME}}#ctor|构造 {{tt|single_view}}}}
{{dsc mem fun|{{PAGENAME}}#begin|title=begin|返回指向元素的指针}}
{{dsc mem fun|{{PAGENAME}}#end|title=end|返回元素后一位置的指针}}
{{dsc mem sfun|{{PAGENAME}}#empty|title=empty|返回 {{c|false}}}}
{{dsc mem sfun|{{PAGENAME}}#size|title=size|返回 {{c|1}}}}
{{dsc mem fun|{{PAGENAME}}#data|title=data|返回指向元素的指针}}

{{cpp/ranges/view_interface/inherit|embedded=yes|data=yes|empty=invalid|size=invalid}}
{{dsc end}}

{{anchor|ctor}}
{{member|{{small|std::ranges::single_view::}}single_view|
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
single_view() requires std::default_initializable&lt;T&gt; = default;&lt;!--P2325R3--&gt;
}}
{{dcl rev multi|num=2|since1=c++20|dcl1=
constexpr explicit single_view( const T&amp; t );
|since2=c++23|dcl2=
constexpr explicit single_view( const T&amp; t )
    requires std::copy_constructible&lt;T&gt;;
}}
{{dcl|num=3|since=c++20|1=
constexpr explicit single_view( T&amp;&amp; t );
}}
{{dcl|num=4|since=c++20|1=
template&lt; class... Args &gt;
    requires std::constructible_from&lt;T, Args...&gt;
constexpr explicit single_view( std::in_place_t, Args&amp;&amp;... args );
}}
{{dcl end}}

构造 {{tt|single_view}}。

@1@ 默认初始化 {{tti|value_}}，它会值初始化其所含的值。
@2@ 以 {{c|t}} 初始化 {{tti|value_}}。
@3@ 以 {{c|std::move(t)}} 初始化 {{tti|value_}}。
@4@ 如同以 {{c|value_{std::in_place, std::forward&lt;Args&gt;(args)...}&lt;!----&gt;}} 初始化 {{tti|value_}}。
}}

{{anchor|begin}}
{{member|{{small|std::ranges::single_view::}}begin|
{{ddcl|since=c++20|
constexpr T* begin() noexcept;
constexpr const T* begin() const noexcept;
}}

等价于 {{c|return data();}}。
}}

{{anchor|end}}
{{member|{{small|std::ranges::single_view::}}end|
{{ddcl|since=c++20|
constexpr T* end() noexcept;
constexpr const T* end() const noexcept;
}}

等价于 {{c|return data() + 1;}}。
}}

{{anchor|empty}}
{{member|{{small|std::ranges::single_view::}}empty|
{{ddcl|since=c++20|
static constexpr bool empty() noexcept;
}}

等价于 {{c|return false;}}。
}}

{{anchor|size}}
{{member|{{small|std::ranges::single_view::}}size|
{{ddcl|since=c++20|
static constexpr std::size_t size() noexcept;
}}

等价于 {{c|return 1;}}。

这使得 {{tt|single_view}} 实现 {{rlpt|split_view}} 所要求的 {{c|/*tiny-range*/}}。
}}

{{anchor|data}}
{{member|{{small|std::ranges::single_view::}}data|
{{ddcl|since=c++20|
constexpr T* data() noexcept;
constexpr const T* data() const noexcept;
}}

返回指向 {{tti|value_}} 的所含值的指针。如果 {{tti|value_}} 不含值，那么行为未定义。
}}

===推导指引===
{{ddcl|since=c++20|1=
template&lt; class T &gt;
single_view( T ) -&gt; single_view&lt;T&gt;;
}}

===注解===
对于一个 {{ttt|single_view}}，继承的 {{tt|empty}} 成员函数始终返回 {{c|false}}，而继承的 {{c|operator bool}} 转换函数始终返回 {{c|true}}。

===示例===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string&gt;
#include &lt;tuple&gt;

int main()
{
    constexpr std::ranges::single_view sv1{3.1415}; // 使用 (const T&amp;) 构造函数
    static_assert(sv1);
    static_assert(not sv1.empty());
    
    std::cout &lt;&lt; "1) *sv1.data()：" &lt;&lt; *sv1.data() &lt;&lt; '\n'
              &lt;&lt; "2) *sv1.begin()：" &lt;&lt; *sv1.begin() &lt;&lt; '\n'
              &lt;&lt; "3)  sv1.size()：" &lt;&lt; sv1.size() &lt;&lt; '\n'
              &lt;&lt; "4)  距离：" &lt;&lt; std::distance(sv1.begin(), sv1.end()) &lt;&lt; '\n';
    
    std::string str{"C++20"};
    std::cout &lt;&lt; "5)  str = " &lt;&lt; std::quoted(str) &lt;&lt; '\n';
    std::ranges::single_view sv2{std::move(str)}; // 使用 (T&amp;&amp;) 构造函数
    std::cout &lt;&lt; "6) *sv2.data()：" &lt;&lt; std::quoted(*sv2.data()) &lt;&lt; '\n'
              &lt;&lt; "7)  str = " &lt;&lt; std::quoted(str) &lt;&lt; '\n';
    
    std::ranges::single_view&lt;std::tuple&lt;int, double, std::string&gt;&gt;
        sv3{std::in_place, 42, 3.14, "😄"}; // 使用 (std::in_place_t, Args&amp;&amp;... args)
    
    std::cout &lt;&lt; "8)  sv3 持有一个元组：{ "
              &lt;&lt; std::get&lt;0&gt;(sv3[0]) &lt;&lt; ", "
              &lt;&lt; std::get&lt;1&gt;(sv3[0]) &lt;&lt; ", "
              &lt;&lt; std::get&lt;2&gt;(sv3[0]) &lt;&lt; " }\n";
}
|output=
1) *sv1.data()：3.1415
2) *sv1.begin()：3.1415
3)  sv1.size()：1
4)  距离：1
5)  str = "C++20"
6) *sv2.data()："C++20"
7)  str = ""
8)  sv3 持有一个元组：{ 42, 3.14, 😄 }
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3428|std=C++20|before={{tt|single_view}} 可从 {{lc|std::in_place_t}} 转换|after=使该构造函数为 explicit}}
{{dr list item|wg=lwg|dr=4035|std=C++20|before={{tt|single_view}} 没有提供成员函数 {{tt|empty()}}|after=提供 {{tt|empty()}}}}
{{dr list item|paper=P2367R0|std=C++20|before={{tt|single_view}} 的推导指引无法衰变参数；&lt;br&gt;{{tt|views::single}} 复制但不包装 {{tt|single_view}}|after=提供衰变的推导指引；&lt;br&gt;使之始终包装}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc optional}}
{{dsc inc|cpp/ranges/dsc empty_view}}
{{dsc inc|cpp/ranges/dsc split_view}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
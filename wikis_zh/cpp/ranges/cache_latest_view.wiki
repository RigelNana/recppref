{{cpp/ranges/view title|cache_latest}}
{{cpp/ranges/cache_latest_view/navbar}}
{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++26|
template&lt; ranges::input_range V &gt;
    requires ranges::view&lt;V&gt;
class cache_latest_view
    : public ranges::view_interface&lt;cache_latest_view&lt;V&gt;&gt;
}}
{{dcl|num=2|since=c++26|1=
namespace views {
    inline constexpr /* 未指明 */ cache_latest = /* 未指明 */;
}
}}
{{dcl h|调用签名}}
{{dcl|since=c++26|1=
template&lt; ranges::viewable_range R &gt;
    requires /* 见下文 */
constexpr ranges::view auto cache_latest( R&amp;&amp; r );
}}
{{dcl end}}

@1@ 一种范围适配器，缓存其最近一次访问的底层 {{lconcept|view}} 的元素，使得重复访问该元素时无需重复计算。

@2@ {{named req|RangeAdaptorObject}}。对于任何适当的子表达式 {{c|e}}，表达式 {{c|views::cache_latest(e)}} [[cpp/language/expressions#表达式等价|表达式等价]]于 {{c|cache_latest_view(e)}}。

{{tt|cache_latest_view}} 是一种仅为 {{lconcept|input_range}} 且从不实现 {{lconcept|borrowed_range}} 或 {{lconcept|common_range}} 的视图。

===嵌套类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc expos mem type|CacheT|private=yes|{{cc multi|
std::conditional_t&lt;std::is_reference_v&lt;ranges::range_reference_t&lt;V&gt;&gt;,|
                   std::add_pointer_t&lt;ranges::range_reference_t&lt;V&gt;&gt;,|
                   ranges::range_reference_t&lt;V&gt;&gt;}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|说明}}
{{dsc expos mem obj|base_|id=base|private=yes|spec={{tt|V}}|底层视图}}
{{dsc expos mem obj|cache_|id=cache|private=yes|spec={{lti|cpp/ranges/non-propagating-cache}}{{c/core|&lt;CacheT&gt;}}|缓存当前迭代器最近一次间接的结果的对象}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|{{PAGENAME}}#ctor|构造 {{tt|cache_latest_view}}}}
{{dsc mem fun|{{PAGENAME}}#base_fun|title=base|返回底层（适配的）视图的副本}}
{{dsc mem fun|{{PAGENAME}}#begin|title=begin|返回指向起始的迭代器}}
{{dsc mem fun|{{PAGENAME}}#end|title=end|返回指向末尾的迭代器或哨位}}
{{dsc mem fun|{{PAGENAME}}#size|title=size|返回元素的数量。仅当底层（适配的）范围满足 {{lconcept|sized_range}} 时提供。}}
{{cpp/ranges/view_interface/inherit|embedded=yes|size=yes}}
{{dsc end}}

{{anchor|ctor}}
{{member|{{small|std::ranges::cache_latest_view::}}cache_latest_view|
{{dcl begin}}
{{dcl|num=1|since=c++26|1=
cache_latest_view() requires std::default_initializable&lt;V&gt; = default;
}}
{{dcl|num=2|since=c++26|
constexpr explicit cache_latest_view( V base );
}}
{{dcl end}}

@1@ 以默认成员初始化器（{{c|1== V()}}）值初始化 {{tti|base_}}。
@2@ 以 {{c|std::move(base)}} 初始化 {{tti|base_}}。

===参数===
{{par begin}}
{{par|base|a view}}
{{par end}}
}}

{{anchor|base_fun}}
{{member|{{small|std::ranges::cache_latest_view::}}base|
{{dcl begin}}
{{dcl|num=1|since=c++26|
constexpr V base() const&amp; requires std::copy_constructible&lt;V&gt;;
}}
{{dcl|num=2|since=c++26|
constexpr V base() &amp;&amp;;
}}
{{dcl end}}
@1@ 从底层视图复制构造结果。等价于 {{c|return base_;}}
@2@ 从底层视图移动构造结果。等价于 {{c|return std::move(base_);}}
}}

{{anchor|begin}}
{{member|{{small|std::ranges::cache_latest_view::}}begin|
{{dcl begin}}
{{dcl|since=c++26|
constexpr auto begin();
}}
{{dcl end}}
等价于 {{c|return /*iterator*/(*this);}}.
}}

{{anchor|end}}
{{member|{{small|std::ranges::cache_latest_view::}}end|
{{dcl begin}}
{{dcl|since=c++26|
constexpr auto end();
}}
{{dcl end}}
等价于 {{c|return /*sentinel*/(*this);}}.
}}

{{anchor|size}}
{{member|{{small|std::ranges::cache_latest_view::}}size|
{{dcl begin}}
{{dcl|num=1|since=c++26|
constexpr auto size() requires ranges::sized_range&lt;V&gt;;
}}
{{dcl|num=2|since=c++26|
constexpr auto size() const requires ranges::sized_range&lt;const V&gt;;
}}
{{dcl end}}
@1,2@ 等价于 {{c|return ranges::size(base_);}}
}}

===推导指引===
{{ddcl|since=c++26|
template&lt; class R &gt;
cache_latest_view( R&amp;&amp; ) -&gt; cache_latest_view&lt;views::all_t&lt;R&gt;&gt;;
}}

===嵌套类===
{{dsc begin}}
{{dsc expos mem tclass|cpp/ranges/cache_latest_view/iterator|the iterator type}}
{{dsc expos mem tclass|cpp/ranges/cache_latest_view/sentinel|the sentinel type}}
{{dsc end}}

===注解===
要产生元素的计算较昂贵时，{{tt|cache_latest_view}} 很有用。

{{ftm begin}}
{{ftm|__cpp_lib_ranges_cache_latest|value=202411L|std=C++26|{{tt|std::ranges::cache_latest_view}}}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;print&gt;
#include &lt;ranges&gt;
 
int main()
{
    const auto v = {1, 2, 3, 4, 5};
 
    auto square = [](int i)
    {
        std::print("变换: {} ", i);
        return i * i;
    };
 
    auto is_even = [](int i)
    {
        std::print("过滤: {} ", i);
        return i % 2 == 0;
    };
 
    auto print = [](auto v)
    {
        std::ranges::for_each(v, [](int i){ std::println("得: {}", i); });
        std::println();
    };
 
    std::println("无最近值缓存（注意重复计算）: ");
    auto even_squares = v
        | std::views::transform(square)
        | std::views::filter(is_even);
    print(even_squares);
 
    std::println("有最近值缓存:");
    auto fast_even_squares = v
        | std::views::transform(square)
        | std::views::cache_latest
        | std::views::filter(is_even);
    print(fast_even_squares);
}
|output=
无最近值缓存（注意重复计算）: 
变换: 1 过滤: 1 变换: 2 过滤: 4 变换: 2 得: 4
变换: 3 过滤: 9 变换: 4 过滤: 16 变换: 4 得: 16
变换: 5 过滤: 25
有最近值缓存:
变换: 1 过滤: 1 变换: 2 过滤: 4 得: 4
变换: 3 过滤: 9 变换: 4 过滤: 16 得: 16
变换: 5 过滤: 25
}}

{{langlinks|en|es|ja|ru}}
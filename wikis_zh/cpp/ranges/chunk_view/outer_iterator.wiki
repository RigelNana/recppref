{{cpp/ranges/chunk_view/title|''outer-iterator''}}
{{cpp/ranges/chunk_view/navbar}}

{{ddcl|since=c++23|notes={{mark expos}}|
class /*outer-iterator*/
}}

如果 {{tt|V}} 实现 {{lconcept|input_range}}，则为 {{rlpt|begin|chunk_view::begin}} 的返回类型。 

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|iterator_concept}}|{{c|std::input_iterator_tag}}}}
{{dsc|{{tt|difference_type}}|{{c|ranges::range_difference_t&lt;V&gt;}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员对象|定义}}
{{dsc expos mem obj|parent_|private=yes|指向类型为 {{c|ranges::chunk_view*}} 的“父对象”的指针}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/chunk_view/outer_iterator/outer_iterator|构造迭代器|notes={{mark c++23}}}}
{{dsc mem fun|cpp/ranges/chunk_view/outer_iterator/operator{{=}}|移动赋值另一迭代器|notes={{mark c++23}}}}
{{dsc mem fun|cpp/ranges/chunk_view/outer_iterator/operator*|访问元素|notes={{mark c++23}}}}
{{dsc mem fun|cpp/ranges/chunk_view/outer_iterator/operator_inc|title=operator++|增加迭代器|notes={{mark c++23}}}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc fun|cpp/ranges/chunk_view/outer_iterator/operator_cmp|title=operator==|比较迭代器与 {{lt|cpp/iterator/default_sentinel_t|default sentinel}}|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/chunk_view/outer_iterator/operator-|title=operator-|计算剩余区块数量|notes={{mark c++23}}}}
{{dsc end}}

===嵌套类===
{{dsc begin}}
{{dsc mem class|cpp/ranges/chunk_view/outer_iterator/value_type|notes={{mark c++23}}|{{c|/*output-iterator*/}} 的值类型}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;ranges&gt;
#include &lt;sstream&gt;

int main()
{
    const std::string source{"ABCDEFGHIJ"};

    auto letters = std::istringstream{source};
    auto chunks = std::ranges::istream_view&lt;char&gt;(letters)
                {{!}} std::views::chunk(4);

    for (auto outer_iter = chunks.begin(); outer_iter != std::default_sentinel;
         ++outer_iter)
    {
        auto chunk = *outer_iter; // chunk 是 chunk_view::outer_iterator::value_type 类型的对象
        std::cout &lt;&lt; '[';
        for (auto inner_iter = chunk.begin(); inner_iter != std::default_sentinel;
             ++inner_iter)
            std::cout &lt;&lt; *inner_iter;
        std::cout &lt;&lt; "] ";
    }
    std::cout &lt;&lt; '\n';

    // 使用范围 for 循环的相同输出
    auto letters2 = std::istringstream{source};
    auto chunks2 = std::ranges::istream_view&lt;char&gt;(letters2)
                 {{!}} std::views::chunk(4);
    for (auto chunk : chunks2)
    {
        std::cout &lt;&lt; '[';
        for (auto ch : chunk)
            std::cout &lt;&lt; ch;
        std::cout &lt;&lt; "] ";
    }
    std::cout &lt;&lt; '\n';
}
|output=
[ABCD] [EFGH] [IJ]
[ABCD] [EFGH] [IJ]
}}

===引用===
{{ref std c++23}}
{{ref std|title=Class chunk_view::outer-iterator|id=range.chunk.outer.iter|section=26.7.28.3}}
{{ref std end}}

===参阅===
{{dsc begin}}&lt;!--
{{dsc inc|cpp/ranges/chunk_view/dsc iterator}}--&gt;
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/ranges/chunk_view/title|end}}
{{cpp/ranges/chunk_view/navbar}}
{{dcl begin}}
{{dcl h|{{tt|V}} 仅实现 {{lconcept|input_range}}}}
{{dcl|num=1|since=c++23|
constexpr std::default_sentinel_t end() const noexcept;
}}
{{dcl h|{{tt|V}} 实现 {{lconcept|forward_range}}}}
{{dcl|num=2|since=c++23|
constexpr auto end() requires (!__simple_view&lt;V&gt;);
}}
{{dcl|num=3|since=c++23|
constexpr auto end() const requires ranges::forward_range&lt;const V&gt;;
}}
{{dcl end}}

返回比较等于 {{rlpt|/|chunk_view}} 的尾迭代器的 {{rlp|/#嵌套类|iterator}} 或 {{lc|std::default_sentinel}}。

@1@ 仅当 {{c|V}} 实现 {{lconcept|input_range}} 时可用，等价于：{{c|return std::default_sentinel}}。

@2,3@ 仅当 {{c|V}} 实现 {{lconcept|forward_range}} 时可用，令 {{rlpsi|/#base_}} 代表底层适配的视图，{{rlpsi|/#n_}} 表示存储的区块大小，且 {{rlpi|iterator}} 代表嵌套的迭代器类。
@2@ 等价于
{{source|1=
if constexpr (ranges::common_range&lt;V&gt; &amp;&amp; ranges::sized_range&lt;V&gt;)
{
    auto missing = (n_ - ranges::distance(base_) % n_) % n_;
    return iterator&lt;false&gt;(this, ranges::end(base_), missing);
}
else if constexpr (ranges::common_range&lt;V&gt; &amp;&amp; !ranges::bidirectional_range&lt;V&gt;)
    return iterator&lt;false&gt;(this, ranges::end(base_));
else
    return std::default_sentinel;
}}

@3@ 等价于
{{source|1=
if constexpr (ranges::common_range&lt;const V&gt; &amp;&amp; ranges::sized_range&lt;const V&gt;)
{
    auto missing = (n_ - ranges::distance(base_) % n_) % n_;
    return iterator&lt;true&gt;(this, ranges::end(base_), missing);
}
else if constexpr (ranges::common_range&lt;const V&gt; &amp;&amp; !ranges::bidirectional_range&lt;const V&gt;)
    return iterator&lt;true&gt;(this, ranges::end(base_));
else
    return std::default_sentinel;
}}

===返回值===
表示 {{rlpt|/|chunk_view}} 的末尾的迭代器或哨位，如上所述。

===示例===
{{example
|code=
|output=
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|chunk_view}}
{{dsc inc|cpp/ranges/dsc end}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
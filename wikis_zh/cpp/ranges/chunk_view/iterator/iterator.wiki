{{cpp/ranges/chunk_view/iterator/title|''iterator''}}
{{cpp/ranges/chunk_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|1=
/*iterator*/() = default;
}}
{{dcl|num=2|since=c++23|1=
constexpr /*iterator*/( /*iterator*/&lt;!Const&gt; i )
    requires
        Const and
        std::convertible_to&lt;ranges::iterator_t&lt;V&gt;, ranges::iterator_t&lt;Base&gt;&gt; and
        std::convertible_to&lt;ranges::sentinel_t&lt;V&gt;, ranges::sentinel_t&lt;Base&gt;&gt;;
}}
{{dcl|num=3|notes={{mark expos}}|1=
private:
constexpr /*iterator*/( Parent* parent,
                        ranges::iterator_t&lt;Base&gt; current,
                        ranges::range_difference_t&lt;Base&gt; missing = 0 );
}}
{{dcl end}}

构造迭代器。

@1@ 默认构造函数，[[cpp/language/value_initialization|值初始化]]底层{{rlp|/#数据成员|数据成员}}：
* {{tti|current_}} 以 {{c|ranges::iterator_t&lt;Base&gt;()}} 初始化，
* {{tti|end_}} 以 {{c|ranges::sentinel_t&lt;Base&gt;()}} 初始化，
* {{tti|n_}} 以 {{c|0}} 初始化，
* {{tti|missing_}} 以 {{c|0}} 初始化。

@2@ 从 {{c|/*iterator*/&lt;false&gt;}} 到 {{c|/*iterator*/&lt;true&gt;}} 的转换，初始化底层{{rlp|/#数据成员|数据成员}}：
* {{tti|current_}} 以 {{c|std::move(i.current_)}} 初始化，
* {{tti|end_}} 以 {{c|std::move(i.end_)}} 初始化，
* {{tti|n_}} 以 {{c|i.n_}} 初始化，
* {{tti|missing_}} 以 {{c|i.missing_}} 初始化。

@3@ 用于 {{lc|ranges::chunk_view::begin}} 和 {{lc|ranges::chunk_view::end}} 的私有构造函数，此构造函数无法被用户访问，初始化底层{{rlp|/#数据成员|数据成员}}：
* {{tti|current_}} 以 {{c|current}} 初始化，
* {{tti|end_}} 以 {{c|ranges::end(parent-&gt;base_)}} 初始化，
* {{tti|n_}} 以 {{c|parent-&gt;n_}} 初始化，
* {{tti|missing_}} 以 {{c|missing}} 初始化。

===参数===
{{par begin}}
{{par|i|{{c|/*iterator*/&lt;false&gt;}}}}
{{par|parent|指向所持有的 {{tt|chunk_view}} 的指针}}
{{par|current|指向当前块首部的迭代器}}
{{par|missing|当前块的预期大小（{{rlpi|/#数据成员|n_}}）与实际大小的差值}}
{{par end}}

===示例===
{{example
|code=
|output=
}}

{{langlinks|de|en|es|ja|ru}}
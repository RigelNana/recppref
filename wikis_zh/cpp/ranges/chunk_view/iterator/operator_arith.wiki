{{cpp/ranges/chunk_view/iterator/title|1=operator++,--,+=,-=}}
{{cpp/ranges/chunk_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr /*iterator*/&amp; operator++();
}}
{{dcl|num=2|since=c++23|
constexpr /*iterator*/ operator++( int );
}}
{{dcl|num=3|since=c++23|
constexpr /*iterator*/&amp; operator--()
    requires ranges::bidirectional_range&lt;Base&gt;;
}}
{{dcl|num=4|since=c++23|
constexpr /*iterator*/ operator--( int )
    requires ranges::bidirectional_range&lt;Base&gt;;
}}
{{dcl|num=5|since=c++23|1=
constexpr /*iterator*/&amp; operator+=( difference_type x )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl|num=6|since=c++23|1=
constexpr /*iterator*/&amp; operator-=( difference_type x )
    requires ranges::random_access_range&lt;Base&gt;;
}}
{{dcl end}}

递增或递减{{rlp|iterator|迭代器}}。

令 {{tti|current_}}，{{tti|end_}}，{{tti|n_}} 为 {{rlpt|/|chunk_view::iterator}} 的底层{{rlp|/#数据成员|数据成员}}。

@1@ 等价于：
{{source|1=
missing_ = ranges::advance(current_, n_, end_);
return *this;
}}
调用前，表达式 {{c|1=current_ != end_}} 必须为 {{c|true}}，否则其行为未定义。

@2@ 等价于：{{c|1=auto tmp = *this; ++*this; return tmp;}}。

@3@ 等价于：
{{source|1=
ranges::advance(current_, missing_ - n_);
missing_ = 0;
return *this;
}}

@4@ 等价于：{{c|1=auto tmp = *this; --*this; return tmp;}}。

@5@ 等价于：
{{source|1=
if (x &gt; 0)
{
    ranges::advance(current_, n_ * (x - 1));
    missing_ = ranges::advance(current_, n_, end_);
}
else if (x &lt; 0)
{
    ranges::advance(current_, n_ * x + missing_);
    missing_ = 0;
}
return *this;
}}
如果 {{c|x}} 为正，那么调用前表达式 {{c|ranges::distance(current_, end_) &gt; n_ * (x - 1)}} 必须为 {{c/core|true}}（即，非正式地说，所请求的块应位于底层序列的“内部”）。如果 {{c|x}} 为负，则条件恒成立。

@6@ 等价于 {{c|1=return *this += -x;}}。

===参数===
{{par begin}}
{{par|x|相对于当前位置的偏移量}}
{{par end}}

===返回值===
@1,3,5,6@ {{c|*this}}
@2,4@ {{c|*this}} 被修改前的副本

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc fun|cpp/ranges/chunk_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|执行迭代器算术|notes={{mark c++23}}}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/ranges/elements_view/title|''iterator''}}
{{cpp/ranges/elements_view/navbar}}
{{ddcl|notes={{mark expos}}|
template&lt; bool Const &gt;
class /*iterator*/;
}}

{{rlpt|begin|elements_view::begin}} 的返回类型，及 {{rlpt|end|elements_view::end}} 在底层类型为 {{lconcept|common_range}} 时的返回类型。

const 限定重载返回 {{c|/*iterator*/&lt;true&gt;}}。非 const 限定重载返回 {{c|/*iterator*/&lt;false&gt;}}。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc expos mem type|Base|private=yes|若 {{c|Const}} 为 {{c|true}} 则为 {{c|const V}}，否则为 {{tt|V}}。}}
{{dsc|{{tt|iterator_concept}}|代表：
* 否则若 {{tti|Base}} 实现 {{lconcept|random_access_range}} 则该类型为 {{lc|std::random_access_iterator_tag}}。
* 否则若 {{tti|Base}} 实现 {{lconcept|bidirectional_range}} 则该类型为 {{lc|std::bidirectional_iterator_tag}}。
* 否则若 {{tti|Base}} 实现 {{lconcept|forward_range}} 则该类型为 {{lc|std::forward_iterator_tag}}。
* 否则该类型为 {{lc|std::input_iterator_tag}}。}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{mark cond present}}|若 {{tti|Base}} 不实现 {{lconcept|forward_range}} 则未予定义。
* 否则若 {{c|std::get&lt;N&gt;(*current_)}} 是右值则改类型为 {{lc|std::input_iterator_tag}}。
* 否则，令 {{tti|C}} 为类型 {{c|std::iterator_traits&lt;std::iterator_t&lt;Base&gt;&gt;::iterator_category}}。则若 {{tti|C}} 实现 {{c|std::derived_from&lt;std::random_access_iterator_tag&gt;}} 则该类型为 {{lc|std::random_access_iterator_tag}}。
* 否则该类型为 {{tti|C}}。}}
{{dsc|{{tt|value_type}}|{{c|std::remove_cvref_t&lt;std::tuple_element_t&lt;N, ranges::range_value_t&lt;Base&gt;&gt;&gt;}}}}
{{dsc|{{tt|difference_type}}|{{c|ranges::range_difference_t&lt;Base&gt;}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员对象|定义}}
{{dsc expos mem obj|current_|private=yes|指向底层序列的当前元素的 {{c|ranges::iterator_t&lt;Base&gt;}} 类型的迭代器。}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/elements_view/iterator/iterator|构造迭代器}}
{{dsc mem fun|cpp/ranges/elements_view/iterator/base|返回底层迭代器}}
{{dsc mem fun|cpp/ranges/elements_view/iterator/operator*|访问第 {{tt|N}} 个元组元素}}
{{dsc mem fun|cpp/ranges/elements_view/iterator/operator_at|title=operator[]|按索引访问元素}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|elements_view}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc fun|cpp/ranges/elements_view/iterator/operator_cmp|title=operator==&lt;br&gt;operator&lt;&lt;br&gt;operator&gt;&lt;br&gt;operator&lt;=&lt;br&gt;operator&gt;=&lt;br&gt;operator&lt;=&gt;|比较底层迭代器|notes={{mark c++20}}}}
{{dsc fun|cpp/ranges/elements_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|进行迭代器算术|notes={{mark c++20}}}}
{{dsc end}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2259R1|std=C++20|before=始终定义成员 {{tt|iterator_category}}|after=仅若 {{tt|''Base''}} 实现 {{lconcept|forward_range}} 才定义}}
{{dr list item|wg=lwg|dr=3555|std=C++20|before={{tt|iterator_concept}} 的定义忽略 const|after=使之考虑}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/transform_view/dsc iterator}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/ranges/adjacent_transform_view/iterator/title|''iterator''}}
{{cpp/ranges/adjacent_transform_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|1=
/*iterator*/() = default;
}}
{{dcl|num=2|since=c++23|1=
constexpr /*iterator*/( /*iterator*/&lt;!Const&gt; i )
    requires Const &amp;&amp;
        std::convertible_to&lt;/*inner-iterator*/&lt;false&gt;, /*inner-iterator*/&lt;Const&gt;&gt;;
}}
{{dcl|num=3|notes={{mark expos}}|1=
private:
constexpr /*iterator*/( Parent&amp; parent, /*inner-iterator*/&lt;Const&gt; inner );
}}
{{dcl end}}

构造一个迭代器。

@1@ 默认构造函数。用 {{c/core|nullptr}} [[cpp/language/value_initialization|值初始化]]底层指针 {{rlpi|/#数据成员|parent_}}，并[[cpp/language/default_initialization|默认初始化]]底层迭代器 {{rlpi|/#数据成员|inner_}}。

@2@ 从 {{c|/*iterator*/&lt;false&gt;}} 到 {{c|/*iterator*/&lt;true&gt;}} 的转换。用 {{c|i.parent_}} 初始化底层指针 {{rlpi|/#数据成员|parent_}}，并用{{box|{{ltt std|cpp/utility/move}}{{c/core|(i.inner_)}}}}移动构造底层迭代器 {{rlpi|/#数据成员|inner_}}。

@3@ 此迭代器同样拥有一个私有构造函数被用于构造 {{lc|ranges::adjacent_transform_view::begin}} 和 {{lc|ranges::adjacent_transform_view::end}}。用户无法访问此构造函数。使用 {{c|std::addressof(parent)}} 初始化 {{rlpi|/#数据成员|parent_}}，并使用{{c|std::move(inner)}} 移动构造 {{rlpi|/#数据成员|inner_}}。

===参数===
{{par begin}}
{{par|i|{{c|/*iterator*/&lt;false&gt;}}}}
{{par|parent|拥有它的 {{lc|ranges::adjacent_transform_view|adjacent_transform_view}} 类型的对象}}
{{par|inner|{{lc|ranges::adjacent_transform_view|adjacent_transform_view::}}{{ltt|cpp/ranges/adjacent_transform_view#成员类型|''inner_iterator''}} 类型的迭代器}}
{{par end}}

===示例===
{{example
|code=
|output=
}}

{{langlinks|de|en|es|ja|ru}}
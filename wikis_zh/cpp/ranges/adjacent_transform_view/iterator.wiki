{{cpp/ranges/adjacent_transform_view/title|''iterator''}}
{{cpp/ranges/adjacent_transform_view/navbar}}

{{ddcl|since=c++23|notes={{mark expos}}|
template&lt; bool Const &gt;
class /*iterator*/
}}

{{rlpt|begin|adjacent_transform_view::begin}}的返回类型，以及当底层视图 {{tt|V}} 为 {{lconcept|common_range}} 时 {{rlpt|end|adjacent_transform_view::end}} 的返回类型。

const 限定的重载返回 {{c|/*iterator*/&lt;true&gt;}}，非 const 限定的重载返回 {{c|/*iterator*/&lt;false&gt;}}。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc expos mem type|Parent|private=yes|当 {{tt|Const}} 为 {{c|true}} 时为 {{c|const ranges::adjacent_transform_view}}。否则为 {{c|ranges::adjacent_transform_view}}.}}
{{dsc expos mem type|Base|private=yes|当 {{tt|Const}} 为 {{c|true}} 时为 {{c|const V}}。否则为 {{c|V}}。}}
{{dsc|{{tt|iterator_category}}|
* 如果
: {{c multi
|std::invoke_result_t&lt;/*maybe-const*/&lt;Const, F&gt;&amp;,
|                     /*REPEAT*/(ranges::range_reference_t&lt;Base&gt;, N)...&gt;}}
:不是引用则为 {{lc|std::input_iterator_tag}}。否则，
* 令 {{tti|C}} 代表类型 {{c|std::iterator_traits&lt;iterator_t&lt;Base&gt;&gt;::iterator_category}}。
** 如果 &lt;br&gt;{{c|std::derived_from&lt;C, std::random_access_iterator_tag&gt;}} 为 {{c|true}} 则为 {{lc|std::random_access_iterator_tag}}。
** 如果 &lt;br&gt;{{c|std::derived_from&lt;C, std::bidirectional_iterator_tag&gt;}} 为 {{c|true}} 则为 {{lc|std::bidirectional_iterator_tag}}。
** 如果 &lt;br&gt;{{c|std::derived_from&lt;C, std::forward_iterator_tag&gt;}} 为 {{c|true}} 则为 {{lc|std::forward_iterator_tag}}。否则为
** {{lc|std::input_iterator_tag}}.}}
{{dsc|{{tt|iterator_concept}}|{{c|typename /*inner-iterator*/&lt;Const&gt;::iterator_concept;}}。}}
{{dsc|{{tt|value_type}}|
{{c multi
|std::remove_cvref_t&lt;std::invoke_result_t&lt;/*maybe-const*/&lt;Const, F&gt;&amp;,
|                    /*REPEAT*/(ranges::range_reference_t&lt;Base&gt;, N)...&gt;&gt;;
}}}}
{{dsc|{{tt|difference_type}}|{{c|ranges::range_difference_t&lt;Base&gt;}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员名称|定义}}
{{dsc expos mem obj|parent_|private=yes|[[#成员类型|{{tti|Parent*}}]] 类型的指针。}}
{{dsc expos mem obj|inner_|private=yes|{{rlpi|/#成员类型|inner_iterator}} 类型的迭代器。}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/ranges/adjacent_transform_view/iterator/iterator|构造一个迭代器}}
{{dsc mem fun|cpp/ranges/adjacent_transform_view/iterator/operator*|访问元素}}
{{dsc mem fun|cpp/ranges/adjacent_transform_view/iterator/operator_at|title=operator[]|按索引访问元素}}
{{dsc inc|cpp/ranges/adaptor/iterator/dsc operator arith|adjacent_transform_view}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc fun|cpp/ranges/adjacent_transform_view/iterator/operator_cmp|title=operator==&lt;br&gt;operator&lt;&lt;br&gt;operator&gt;&lt;br&gt;operator&lt;=&lt;br&gt;operator&gt;=&lt;br&gt;operator&lt;=&gt;|比较底层迭代器|notes={{mark c++23}}}}
{{dsc fun|cpp/ranges/adjacent_transform_view/iterator/operator_arith2|title=operator+&lt;br&gt;operator-|进行迭代器算数|notes={{mark c++23}}}}
{{dsc end}}

===示例===
{{example}}

===引用===
{{ref std c++23}}
{{ref std|title=Class template adjacent_transform_view::''iterator''|id=range.adjacent_transform.iterator|section=26.7.27.3}}
{{ref std end}}

===参阅===
{{dsc begin}}&lt;!--
{{dsc inc|cpp/ranges/zip_transform_view/dsc iterator}}--&gt;
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
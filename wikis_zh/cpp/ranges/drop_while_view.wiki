{{cpp/ranges/view title|drop_while}}
{{cpp/ranges/drop_while_view/navbar}}

{{dcl begin}}
{{dcl header|ranges}}
{{dcl|num=1|since=c++20|1=
template&lt; ranges::view V, class Pred &gt;
    requires ranges::input_range&lt;V&gt; &amp;&amp;
             std::is_object_v&lt;Pred&gt; &amp;&amp;
             std::indirect_unary_predicate&lt;const Pred, ranges::iterator_t&lt;V&gt;&gt;
class drop_while_view
    : public ranges::view_interface&lt;drop_while_view&lt;V, Pred&gt;&gt;
}}
{{dcl|num=2|since=c++20|1=
namespace views {
    inline constexpr /* 未指定 */ drop_while = /* 未指定 */;
}
}}
{{dcl h|调用签名}}
{{dcl|since=c++20|1=
template&lt; ranges::viewable_range R, class Pred &gt;
    requires /* 见下文 */
constexpr ranges::view auto drop_while( R&amp;&amp; r, Pred&amp;&amp; pred );
}}
{{dcl|since=c++20|1=
template&lt; class Pred &gt;
constexpr /* 范围适配器闭包 */ drop_while( Pred&amp;&amp; pred );
}}
{{dcl end}}

@1@ 范围适配器，表示来自底层序列的元素的 {{lconcept|view}}，始于首个对其应用谓词返回 {{c|false}} 的元素。
@2@ {{named req|RangeAdaptorObject}}。表达式 {{c|views::drop_while(e, f)}} 对任何适合的子表达式 {{c|e}} 与 {{c|f}} [[cpp/language/expressions#表达式等价|表达式等价]]于 {{c|drop_while_view(e, f)}}&lt;!-- LWG 3524 --&gt;。

{{c|drop_while_view}} 在底层视图 {{c|V}} 实现 {{lconcept|contiguous_range}}、{{lconcept|random_access_range}}、{{lconcept|bidirectional_range}}、 {{lconcept|forward_range}}、{{lconcept|input_range}} 和 {{lconcept|common_range}} 时实现对应概念。如果 {{c|ranges::forward_range&lt;V&gt;}} 与 {{c|std::sized_sentinel_for&lt;ranges::sentinel_t&lt;D&gt;, ranges::iterator_t&lt;D&gt;&gt;}} 都得到实现，那么它也实现 {{lconcept|sized_range}}。

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|说明}}
{{dsc expos mem obj|base_|private=yes|spec={{tt|V}}|底层视图}}
{{dsc expos mem obj|pred_|private=yes|spec={{rev inl|until=c++23|{{rlpi|copyable_wrapper|copyable-box&lt;!--P2325R3--&gt;}}{{tt|&lt;Pred&gt;}}}}{{rev inl|since=c++23|{{rlpi|copyable_wrapper|movable-box}}{{tt|&lt;Pred&gt;}}}}|地城函数对象}}
{{dsc expos mem obj|cache_|private=yes|maybe=(仅当 {{tt|V}} 满足 {{lconcept|forward_range}} 时提供)|spec={{lti|cpp/ranges/non-propagating-cache}}{{c/core|&lt;ranges::iterator_t&lt;V&gt;&gt;}}|缓存调用 {{rlpf|drop_while_view/begin|begin}} 的结果的对象}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc constructor|drop_while_view}}
{{dsc inc|cpp/ranges/adaptor/dsc base|drop_while_view}}
{{dsc inc|cpp/ranges/adaptor/dsc pred|drop_while_view}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|drop_while_view}}
{{dsc inc|cpp/ranges/adaptor/dsc end|drop_while_view}}

{{cpp/ranges/view_interface/inherit|embedded=yes}}
{{dsc end}}

==={{rl|deduction guides|推导指引}}===

===辅助模板===
{{ddcl|since=c++20|1=
template&lt; class T, class Pred &gt;
constexpr bool enable_borrowed_range&lt;std::ranges::drop_while_view&lt;T, Pred&gt;&gt; =
    ranges::enable_borrowed_range&lt;T&gt;;
}}
{{c/core|std::ranges::enable_borrowed_range}} 的此特化使得 {{tt|drop_while_view}} 在底层视图满足 {{lconcept|borrowed_range}} 时满足它。

===注解===
为提供 {{lconcept|range}} 概念所要求的均摊常数时间复杂度，{{rlt|begin}} 的结果缓存于 {{tt|drop_while_view}} 对象内。如果在首次调用 {{lc|begin()}} 修改底层范围，那么 {{tt|drop_while_view}} 对象的后继使用可能导致非本意的行为。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;

using std::operator""sv;

[[nodiscard]]
constexpr bool is_space(char p) noexcept
{
    auto ne = [p](auto q) { return p != q; };
    return !!(" \t\n\v\r\f" {{!}} std::views::drop_while(ne));
};

[[nodiscard("trims the output")]]
constexpr std::string_view trim_left(std::string_view const in) noexcept
{
    auto view = in {{!}} std::views::drop_while(is_space);
    return {view.begin(), view.end()};
}

[[nodiscard("trims the output")]]
constexpr std::string_view trim(std::string_view const in)
{
    auto view = in
              {{!}} std::views::drop_while(is_space)
              {{!}} std::views::reverse
              {{!}} std::views::drop_while(is_space)
              {{!}} std::views::reverse
              ;
    return {view.begin(), view.end()};
}

int main()
{
    static_assert(trim_left(" \n C++23") == "C++23"sv);

    constexpr auto src{" \f\n\t\r\vHello, C++20!\f\n\t\r\v "sv};
    static_assert(trim(src) == "Hello, C++20!");

    static constexpr auto v = {0, 1, 2, 3, 4, 5};
    for (int n : v {{!}} std::views::drop_while([](int i) { return i &lt; 3; }))
        std::cout &lt;&lt; n &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
3 4 5
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3494|std=C++20|before={{tt|drop_while_view}} 始终不是 {{tt|borrowed_range}}|after=在底层视图是 {{tt|borrowed_range}} 时它是}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc drop_view}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
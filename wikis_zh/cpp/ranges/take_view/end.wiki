{{cpp/ranges/take_view/title|end}}
{{cpp/ranges/take_view/navbar}}

{{dcl begin}}
{{dcla|num=1|since=c++20|
constexpr auto end() requires (!/*simple-view*/&lt;V&gt;);
}}
{{dcla|num=2|since=c++20|
constexpr auto end() const requires ranges::range&lt;const V&gt;;
}}
{{dcl end}}

返回表示 {{tt|take_view}} 末尾的迭代器或哨位。{{tt|take_view}} 的末尾是底层范围的第 {{tt|count}} 元素的后一位置，或若后者拥有少于 {{tt|count}} 个元素则为其末尾。

@1@ 返回 {{c|take_view::/*sentinel*/&lt;false&gt;}}、{{c|std::default_sentinel_t}} 或 {{c|ranges::range_iterator_t&lt;V&gt;}}。

@2@ 返回 {{c|take_view::/*sentinel*/&lt;true&gt;}}、{{c|std::default_sentinel_t}} 或 {{c|ranges::range_iterator_t&lt;const V&gt;}}。

重载 {{v|1}} 仅若 {{tt|V}} 是[[cpp/ranges#辅助概念|简单视图]]（即若 {{tt|V}} 与 {{tt|const V}} 均为视图且拥有相同迭代器与哨位类型）才参与重载决议。

===参数===
（无）

===返回值===
结果依赖于可能为 const 限定的底层视图类型 {{tti|Base}}，即对于 {{vl|1}} 为 {{tt|V}} 或对于 {{vl|2}} 为 {{tt|const V}}。

令 {{rlpi|/#数据成员|base_}} 为底层视图。

{| class="wikitable"
|-
!rowspan=2 colspan=2|底层视图类型满足……
!colspan=2|{{lconcept|random_access_range}}
|-
! 是
! 否
|-
! rowspan=2|{{lconcept|sized_range}}
! 是
|{{c multi|ranges::begin(base_) +
|    ranges::range_difference_t&lt;Base_&gt;(this-&gt;size())}}
|{{c|std::default_sentinel}}
|-
! 否
|colspan=2|
@1@ {{c|/*sentinel*/&lt;false&gt;{ranges::end(base_)}&lt;!----&gt;}}
@2@ {{c|/*sentinel*/&lt;true&gt;{ranges::end(base_)}&lt;!----&gt;}}
|}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;list&gt;
#include &lt;ranges&gt;
#include &lt;type_traits&gt;
namespace ranges = std::ranges;
namespace views = std::views;

int main()
{
    const auto list1 = {3, 1, 4, 1, 5};
    const auto seq1{list1 {{!}} views::take(4)};
    static_assert(ranges::sized_range&lt;decltype(seq1)&gt; and
                  ranges::random_access_range&lt;decltype(seq1)&gt; and
                  std::is_same_v&lt;decltype(seq1.end()), decltype(list1.end())&gt;);
    for (auto it = seq1.begin(); it != seq1.end(); ++it)
        std::cout &lt;&lt; *it &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    std::list list2{2, 7, 1, 8, 2};
    const auto seq2{list2 {{!}} views::take(4)};
    static_assert(ranges::sized_range&lt;decltype(seq2)&gt; and
                  not ranges::random_access_range&lt;decltype(seq2)&gt; and
                  std::is_same_v&lt;decltype(seq2.end()), std::default_sentinel_t&gt;);
    for (auto it = seq2.begin(); it != std::default_sentinel; ++it)
        std::cout &lt;&lt; *it &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
3 1 4 1
2 7 1 8
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2393R1|std=C++20|before=有符号与无符号整数类间的隐式转换可能失败|after=使之为显式}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|take_view}}
{{dsc inc|cpp/iterator/dsc counted_iterator}}
{{dsc inc|cpp/ranges/adaptor/sentinel/dsc operator cmp|take_view}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
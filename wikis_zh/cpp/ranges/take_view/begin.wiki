{{cpp/ranges/take_view/title|begin}}
{{cpp/ranges/take_view/navbar}}

{{dcl begin}}
{{dcla|num=1|since=c++20|
constexpr auto begin() requires (!/*simple-view*/&lt;V&gt;);
}}
{{dcla|num=2|since=c++20|
constexpr auto begin() const requires ranges::range&lt;const V&gt;;
}}
{{dcl end}}

返回指向 {{tt|take_view}} 首元素的迭代器。

@1@ 返回 {{c|std::counted_iterator}} 或 {{c|ranges::iterator_t&lt;V&gt;}}。
@2@ 返回 {{c|std::counted_iterator}} 或 {{c|ranges::iterator_t&lt;const V&gt;}}。

重载 {{v|1}} 仅若 {{tt|V}} 是[[cpp/ranges#辅助概念|简单视图]]（即若 {{tt|V}} 与 {{tt|const V}} 均为视图且拥有相同迭代器与哨位类型）才参与重载决议。

===参数===
（无）

===返回值===
结果依赖于可能为 const 限定的底层视图类型 {{tti|Base}}，即对于 {{vl|1}} 为 {{tt|V}} 或对于 {{vl|2}} 为 {{tt|const V}}。

令 {{rlpi|/#数据成员|base_}} 为底层视图，{{rlpi|/#数据成员|count_}} 为底层计数器（若 {{tt|take_view}} 默认初始化则等于 {{c|0}}）。

{| class="wikitable"
|-
! rowspan=2 colspan=2 | 底层视图类型满足……
! colspan=2 | {{lconcept|random_access_range}}
|-
! 是
! 否
|-
! rowspan=2 | {{lconcept|sized_range}}
! 是
|{{c|ranges::begin(base_)}}
|{{c multi|std::counted_iterator(ranges::begin(base_),
|    ranges::range_difference_t&lt;Base_&gt;(this-&gt;size()))}}
|-
! 否
|colspan=2|{{c|std::counted_iterator(ranges::begin(base_), count_)}}
|}

===示例===
{{example
|code=
#include &lt;concepts&gt;
#include &lt;forward_list&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string_view&gt;
#include &lt;type_traits&gt;
using namespace std::literals;

int main()
{
    {
        static constexpr auto v = {"∀x"sv, "∃y"sv, "ε"sv, "δ"sv};
        auto view = std::ranges::take_view(v, 8);
        auto iter = view.begin();
        std::cout &lt;&lt; *iter &lt;&lt; '\n';
        static_assert(
            std::ranges::sized_range&lt;decltype(v)&gt; and
            std::ranges::random_access_range&lt;decltype(v)&gt; and
            std::is_same_v&lt;decltype(iter), decltype(std::ranges::begin(v))&gt;
        );
    }

    {
        std::forward_list v = {"Ax"sv, "Ey"sv, "p"sv, "q"sv};
        auto view = std::ranges::take_view(v, 8);
        auto iter = view.begin();
        std::cout &lt;&lt; *iter &lt;&lt; '\n';
        static_assert(
            not std::ranges::sized_range&lt;decltype(v)&gt; and
            not std::ranges::random_access_range&lt;decltype(v)&gt; and
            std::is_same_v&lt;decltype(iter),
                std::counted_iterator&lt;
                    std::forward_list&lt;std::string_view&gt;::iterator&gt;&gt;
        );
    }
}
|output=
∀x
Ax
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2393R1|std=C++20|before=有符号与无符号整数类间的隐式转换可能失败|after=使之为显式}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc end|take_view}}
{{dsc inc|cpp/iterator/dsc counted_iterator}}
{{dsc inc|cpp/ranges/adaptor/sentinel/dsc operator cmp|take_view}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/ranges/view_interface/title|data}}
{{cpp/ranges/view_interface/navbar}}
{{dcl begin}}
{{dcl | num=1 | since=c++20 | 1=
constexpr auto data()
    requires std::contiguous_iterator&lt;ranges::iterator_t&lt;D&gt;&gt;;
}}
{{dcl | num=2 | since=c++20 | 1=
constexpr bool data() const
    requires std::contiguous_iterator&lt;ranges::iterator_t&lt;const D&gt;&gt;;
}}
{{dcl end}}

{{tt|data}} 成员函数的默认实现，经由 {{lc|std::to_address}} 获得起始迭代器所代表的地址，在视图非空时，它亦是视图所引用的连续存储（为 {{lconcept|contiguous_iterator}} 所蕴含）的最低地址。

@1@ 令 {{tt|derived}} 为 {{c|static_cast&lt;D&amp;&gt;(*this)}}。等价于 {{c|return std::to_address(ranges::begin(derived));}}。

@2@ 同 {{v|1}}，但 {{tt|derived}} 为 {{c|static_cast&lt;const D&amp;&gt;(*this)}}。

===返回值===
起始迭代器所代表的地址。

===注解===
下列派生类型可能使用 {{tt|data}} 的默认实现：
* {{lc|     ranges::common_view|std::ranges::common_view}}
* {{lc|std::ranges::drop_view}}
* {{lc|std::ranges::drop_while_view}}
* {{lc|std::ranges::ref_view}}
* {{lc|std::ranges::subrange}}
* {{lc|std::ranges::take_view}}
* {{lc|std::ranges::take_while_view}}

下列类型派生自 {{lc|ranges::view_interface|std::ranges::view_interface}} 并且不声明其自身的 {{tt|data}} 成员函数，但它们无法使用默认实现，因为其迭代器类型决不满足 {{lconcept|contiguous_iterator}}：
* {{lc|ranges::basic_istream_view|std::ranges::basic_istream_view}}
* {{lc|     ranges::elements_view|std::ranges::elements_view}}
* {{lc|std::ranges::filter_view}}
* {{lc|std::ranges::iota_view}}
* {{lc|     ranges::join_view|std::ranges::join_view}}
* {{lc|     ranges::lazy_split_view|std::ranges::lazy_split_view}}
* {{lc|std::ranges::reverse_view}}
* {{lc|     ranges::split_view|std::ranges::split_view}}
* {{lc|std::ranges::transform_view}}
&lt;!--* {{lc|std::ranges::zip_view}}--&gt;

===示例===
{{example|code=
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;
#include &lt;string_view&gt;

int main() {
    constexpr std::string_view str { "Hello, C++20!" };
    std::cout &lt;&lt; (str {{!}} std::views::drop(7)).data() &lt;&lt; '\n';
    constexpr static std::array a { 1,2,3,4,5 };
    constexpr auto v { a {{!}} std::views::take(3) };
    static_assert( &amp;a[0] == v.data() );
}
| output=C++20!
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/iterator/dsc data}}
{{dsc inc | cpp/ranges/dsc data}}
{{dsc inc | cpp/ranges/dsc cdata}}
{{dsc inc | cpp/memory/dsc to_address}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
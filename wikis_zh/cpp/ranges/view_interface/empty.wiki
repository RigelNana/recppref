{{cpp/ranges/view_interface/title|empty}}
{{cpp/ranges/view_interface/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr bool empty()
    requires ranges::sized_range&lt;D&gt; {{!!}} ranges::forward_range&lt;D&gt;;
}}
{{dcl|num=2|since=c++20|1=
constexpr bool empty() const
    requires ranges::sized_range&lt;const D&gt; {{!!}} ranges::forward_range&lt;const D&gt;;
}}
{{dcl end}}

{{tt|empty}} 成员函数的默认实现检查派生类型的大小是否为 {{c|0}}（若其合法），或起始迭代器与哨位是否比较相等。

@1@ 令 {{tt|derived}} 为绑定到 {{c|static_cast&lt;D&amp;&gt;(*this)}} 的引用。当 {{tt|D}} 满足 {{lconcept|sized_range}} 时等价于 {{c|1=return ranges::size(derived) == 0;}}。否则，等价于 {{c|1=return ranges::begin(derived) == ranges::end(derived);}}。

@2@ 同 {{v|1}}，但 {{tt|derived}} 为 {{c|static_cast&lt;const D&amp;&gt;(*this)}}。

===返回值===
若派生类型对象的大小为 {{c|0}}（当 {{tt|D}} 满足 {{lc|std::ranges::sized_range}}），或其起始迭代器与哨位比较相等，则为 {{c|true}}，否则为 {{c|false}}。

===注解===
下列派生类型可使用 {{tt|empty}} 的默认实现：
* {{ltt|cpp/ranges/common_view|std::ranges::common_view}}
* {{ltt|cpp/ranges/drop_view|std::ranges::drop_view}}
* {{ltt|cpp/ranges/drop_while_view|std::ranges::drop_while_view}}
* {{ltt|cpp/ranges/elements_view|std::ranges::elements_view}}
* {{ltt|cpp/ranges/filter_view|std::ranges::filter_view}}
* {{ltt|cpp/ranges/join_view|std::ranges::join_view}}
* {{ltt|cpp/ranges/lazy_split_view|std::ranges::lazy_split_view}}
* {{ltt|cpp/ranges/reverse_view|std::ranges::reverse_view}}
* {{ltt|cpp/ranges/single_view|std::ranges::single_view}}
* {{ltt|cpp/ranges/split_view|std::ranges::split_view}}
* {{ltt|cpp/ranges/take_view|std::ranges::take_view}}
* {{ltt|cpp/ranges/take_while_view|std::ranges::take_while_view}}
* {{ltt|cpp/ranges/transform_view|std::ranges::transform_view}}
{{rrev|since=c++23|
* {{ltt|cpp/ranges/adjacent_transform_view|std::ranges::adjacent_transform_view}}
* {{ltt|cpp/ranges/adjacent_view|std::ranges::adjacent_view}}
* {{ltt|cpp/ranges/as_const_view|std::ranges::as_const_view}}
* {{ltt|cpp/ranges/as_rvalue_view|std::ranges::as_rvalue_view}}
* {{ltt|cpp/ranges/cartesian_product_view|std::ranges::cartesian_product_view}}
* {{ltt|cpp/ranges/chunk_view|std::ranges::chunk_view}}
* {{ltt|cpp/ranges/chunk_by_view|std::ranges::chunk_by_view}}
* {{ltt|cpp/ranges/join_with_view|std::ranges::join_with_view}}
* {{ltt|cpp/ranges/repeat_view|std::ranges::repeat_view}}
* {{ltt|cpp/ranges/slide_view|std::ranges::slide_view}}
* {{ltt|cpp/ranges/stride_view|std::ranges::stride_view}}
* {{ltt|cpp/ranges/zip_view|std::ranges::zip_view}}
* {{ltt|cpp/ranges/zip_transform_view|std::ranges::zip_transform_view}}
}}
{{rrev|since=c++26|
* {{ltt|cpp/ranges/cache_latest_view|std::ranges::cache_latest_view}}
* {{ltt|cpp/ranges/concat_view|std::ranges::concat_view}}
* {{ltt|cpp/ranges/to_input_view|std::ranges::to_input_view}}
}}

尽管 {{lc|ranges::basic_istream_view|std::ranges::basic_istream_view}} 继承自 {{lc|ranges::view_interface|std::ranges::view_interface}} 并且不声明 {{tt|empty}} 成员函数，它仍无法使用默认实现，因为它决不满足 {{lc|std::ranges::sized_range}} 或者 {{lc|std::ranges::forward_range}}。

===示例===
{{example|code=
#include &lt;array&gt;
#include &lt;ranges&gt;

int main()
{
    constexpr std::array a{0, 1, 2, 3, 4};
    static_assert(!std::ranges::single_view(a).empty());
    static_assert((a {{!}} std::views::take(0)).empty());
    static_assert(!(a {{!}} std::views::take(5)).empty());
    static_assert((a {{!}} std::views::drop(5)).empty());
    static_assert(!(a {{!}} std::views::drop(3)).empty());
    static_assert(std::views::iota(0,0).empty());
    static_assert(!std::views::iota(0).empty());
}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3715|std=C++20|before={{tt|empty()}} 仅支持 {{lconcept|forward_range}} 类型|after=也支持仅为 {{lconcept|sized_range}} 的类型}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc empty}}
{{dsc inc|cpp/ranges/dsc empty}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
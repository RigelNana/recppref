{{cpp/ranges/view_interface/title|front}}
{{cpp/ranges/view_interface/navbar}}
{{dcl begin}}
{{dcl | num=1 | since=c++20 | 1=
constexpr decltype(auto) front()
    requires ranges::forward_range&lt;D&gt;;
}}
{{dcl | num=2 | since=c++20 | 1=
constexpr decltype(auto) front() const
    requires ranges::forward_range&lt;const D&gt;;
}}
{{dcl end}}

{{tt|front}} 成员函数的默认实现返回派生类型的视图中的首个元素。元素是按值还是按引用返回取决于迭代器类型的 {{c|operator*}}。

@1@ 令 {{tt|derived}} 为 {{c|static_cast&lt;D&amp;&gt;(*this)}}。等价于 {{c|return *ranges::begin(derived);}}。若 {{rlpt|empty|empty()}} 为 {{c|true}}（即起始迭代器比较等于哨位）则行为未定义，即使以同样方式获得的迭代器可解引用也是如此。

@2@ 同 {{v|1}}，但 {{tt|derived}} 为 {{c|static_cast&lt;const D&amp;&gt;(*this)}}。

===返回值===
视图中的首个元素。

===注解===
C++20 中，标准库派生自 {{lc|ranges::view_interface|std::ranges::view_interface}} 的类型都不提供其自身的 {{tt|front}} 成员函数。几乎所有这些类型都使用默认实现。

一个值得注意的例外是 {{lc|ranges::basic_istream_view|std::ranges::basic_istream_view}}。由于它决不满足 {{lconcept|forward_range}}，该视图无法使用继承的 {{tt|front}}。

继承的 {{tt|front}} 成员函数对 {{lc|std::ranges::empty_view}} 可用，但对它的调用始终导致未定义行为。

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/iterator/dsc begin}}
{{dsc inc | cpp/ranges/dsc begin}}
{{dsc inc | cpp/ranges/dsc cbegin}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
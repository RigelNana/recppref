{{cpp/ranges/view_interface/title|operator[]}}
{{cpp/ranges/view_interface/navbar}}
{{dcl begin}}
{{dcl | num=1 | since=c++20 | 1=
template&lt;ranges::random_access_range R = D&gt;
constexpr decltype(auto) operator[]( ranges::range_difference_t&lt;R&gt; n );
}}
{{dcl | num=2 | since=c++20 | 1=
template&lt;ranges::random_access_range R = const D&gt;
constexpr decltype(auto) operator[]( ranges::range_difference_t&lt;R&gt; n ) const;
}}
{{dcl end}}

{{c|operator[]}} 成员函数的默认实现获得相对于迭代器在指定偏移的元素，复用迭代器类型的 {{c|operator[]}}。

@1@ 令 {{tt|derived}} 为 {{c|static_cast&lt;D&amp;&gt;(*this)}}。等价于 {{c|return ranges::begin(derived)[n];}}。

@2@ 同 {{v|1}}，但 {{tt|derived}} 为 {{c|static_cast&lt;const D&amp;&gt;(*this)}}。

===参数===
{{par begin}}
{{par | n | 要返回元素的位置}}
{{par end}}

===返回值===
相对于起始迭代器偏移为 {{tt|n}} 的元素。

===注解===
C++20 中，标准库派生自 {{lc|ranges::view_interface|std::ranges::view_interface}} 的类型都不提供其自身的 {{c|operator[]}} 成员函数。

然而，下列派生类型不能使用默认实现，因为它们决不满足 {{lconcept|random_access_range}}：
* {{lc|ranges::basic_istream_view|std::ranges::basic_istream_view}}
* {{lc|std::ranges::filter_view}}
* {{lc|     ranges::join_view|std::ranges::join_view}}
* {{lc|     ranges::lazy_split_view|std::ranges::lazy_split_view}}
* {{lc|     ranges::split_view|std::ranges::split_view}}

继承的 {{c|operator[]}} 成员函数对 {{lc|std::ranges::empty_view}} 可用，但对它的调用始终导致未定义行为。

===示例===
{{example}}

{{langlinks|en|es|ja|ru}}
{{cpp/ranges/slide_view/title|end}}
{{cpp/ranges/slide_view/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++23|1=
constexpr auto end()
    requires (!(/*simple-view*/&lt;V&gt; &amp;&amp; /*slide-caches-nothing*/&lt;const V&gt;));
}}
{{dcl|num=2|since=c++23|1=
constexpr auto end() const
    requires /*slide-caches-nothing*/&lt;const V&gt;;
}}
{{dcl end}}

返回代表 {{tt|slide_view}} 末尾的{{rlp|sentinel|哨位}}或{{rlp|iterator|迭代器}}。

@1@ 令 {{rlpsi|/#base_}} 与 {{rlpsi|/#n_}} 为底层数据成员。
* 如果 {{c/core|V}} 实现 {{rlpsi|#slide-caches-nothing}}，等价于 {{c|return iterator&lt;false&gt;(ranges::begin(base_) + ranges::range_difference_t&lt;V&gt;(size()), n_);}}。
* 如果 {{c/core|V}} 实现 {{rlpsi|#slide-caches-last}}，等价于 {{c|return iterator&lt;false&gt;(ranges::prev(ranges::end(base_), n_ - 1, ranges::begin(base_)), n_);}}。
* 如果 {{c/core|V}} 实现 {{lconcept|common_range}}，等价于 {{c|return iterator&lt;false&gt;(ranges::end(base_), ranges::end(base_), n_);}}。
* 否则，等价于 {{c|return sentinel(ranges::end(base_));}}。

@@ 如果 {{c/core|V}} 实现 {{rlpsi|#slide-caches-last}}，该函数将结果缓存在 {{rlpsi|/#cached_end_}} 中以供后续调用。这对于保证 {{lconcept|range}} 所需的均摊常数复杂度是必要的。

@2@ 等价于 {{c|begin() + ranges::range_difference_t&lt;const V&gt;(size())}}。

===参数===
（无）

===返回值===
代表 {{rlpt|/|slide_view}} 末尾的{{rlp|sentinel|哨位}}或{{rlp|iterator|迭代器}}。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;ranges&gt;

int main()
{
    static constexpr auto source = {'A', 'B', 'C', 'D'};

    for (const auto subrange: source {{!}} std::views::slide(3))
    {
        std::cout &lt;&lt; "[ ";
        for (auto it = subrange.begin(); it != subrange.end(); ++it)
            std::cout &lt;&lt; *it &lt;&lt; ' ';
        std::cout &lt;&lt; "]\n";
    }
}
|output=
[ A B C ]
[ B C D ]
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/adaptor/dsc begin|slide_view}}
{{dsc inc|cpp/ranges/dsc begin}}
{{dsc inc|cpp/ranges/dsc end}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
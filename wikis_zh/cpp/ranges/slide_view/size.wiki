{{cpp/ranges/slide_view/title|size}}
{{cpp/ranges/slide_view/navbar}}

{{dcl begin}}
{{dcl|num=1|since=c++23|
constexpr auto size()
  requires ranges::sized_range&lt;V&gt;;
}}
{{dcl|num=2|since=c++23|
constexpr auto size() const
  requires ranges::sized_range&lt;const V&gt;;
}}
{{dcl end}}

返回元素的数量。

令 {{rlpsi|/#base_}} 与 {{rlpsi|/#n_}} 分别为底层视图与“窗口大小”，等价于

{{source|1=
auto sz = ranges::distance(base_) - n_ + 1;
if (sz &lt; 0)
    sz = 0;
return /*to-unsigned-like*/(sz);
}}

===返回值===
元素的数量。如果底层视图 {{rlpsi|/#base_}} 的元素数量（{{box|{{c/core|ranges::size(}}{{rlpsi|/#base_}}{{c/core|)}}}}）小于“窗口大小” {{rlpsi|/#n_}}，则返回{{c|0}}。

===示例===
{{example
|code=
#include &lt;forward_list&gt;
#include &lt;iostream&gt;
#include &lt;list&gt;
#include &lt;ranges&gt;

int main()
{
    constexpr static auto v = {1, 2, 3, 4, 5, 6};

    constexpr int width1{4};
    constexpr auto view1{std::views::slide(v, width1)};
    static_assert(view1.size() == 3);
    static_assert(view1.size() == (v.size() - width1 + 1));

    constexpr int width2{8};
    constexpr auto view2{std::views::slide(v, width2)};
    // 窗口过宽，因此 view2 没有元素：
    static_assert(view2.size() == 0);

    std::forward_list forward_list = v;
    const auto view3{std::views::slide(forward_list, width1)};
//  auto x = view3.size(); // 错误：不满足 sized_range 的约束

    std::list list = v;
    const auto view4{std::views::slide(list, width1)};
    std::cout &lt;&lt; view4.size() &lt;&lt; '\n'; // 打印 3
}
|output=
3
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc size}}
{{dsc inc|cpp/ranges/dsc ssize}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
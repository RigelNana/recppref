{{cpp/title|n=regex_constants::|error_type}}
{{cpp/regex/navbar}}
{{dcl begin}}
{{dcl header|regex}}
{{dcl|num=1|since=c++11|1=
using error_type = /* 由实现定义 */;
}}
{{dcl|num=2|since=c++11|notes={{mark|C++17 起 inline}}|1=
constexpr error_type error_collate =    /* 未指定 */;
constexpr error_type error_ctype =      /* 未指定 */;
constexpr error_type error_escape =     /* 未指定 */;
constexpr error_type error_backref =    /* 未指定 */;
constexpr error_type error_brack =      /* 未指定 */;
constexpr error_type error_paren =      /* 未指定 */;
constexpr error_type error_brace =      /* 未指定 */;
constexpr error_type error_badbrace =   /* 未指定 */;
constexpr error_type error_range =      /* 未指定 */;
constexpr error_type error_space =      /* 未指定 */;
constexpr error_type error_badrepeat =  /* 未指定 */;
constexpr error_type error_complexity = /* 未指定 */;
constexpr error_type error_stack =      /* 未指定 */;
}}
{{dcl end}}

@1@ {{tt|error_type}} 是描述可能在正则表达式解析过程中发生的错误的类型。

===常量===
{{dsc begin}}
{{dsc hitem|名称|解释}}
{{dsc|{{tt|error_collate}}|表达式含有无效的校排字符名}}
{{dsc|{{tt|error_ctype}}|表达式含有无效的字符类名}}
{{dsc|{{tt|error_escape}}|表达式含有无效的转义字符或尾随转义}}
{{dsc|{{tt|error_backref}}|表达式含有无效的回溯引用}}
{{dsc|{{tt|error_brack}}|表达式含有不匹配的方括号对（{{c|'['}} 和 {{c|']'}}）}}
{{dsc|{{tt|error_paren}}|表达式含有不匹配的括号对（{{c|'('}} 和 {{c|')'}}）}}
{{dsc|{{tt|error_brace}}|表达式含有不匹配的花括号对（{{c|'{'}} 和 {{c|'}'}}）}}
{{dsc|{{tt|error_badbrace}}|表达式在 {{c|{}&lt;!----&gt;}} 表达式中含有无效范围}}
{{dsc|{{tt|error_range}}|表达式含有无效字符范围（例如 [b-a]）}}
{{dsc|{{tt|error_space}}|没有将表达式转换成有限状态机的足够内存}}
{{dsc|{{tt|error_badrepeat}}|{{c|'*'}}、{{c|'?'}}、{{c|'+'}} 或 {{c|'{'}} 的前面没有有效的正则表达式}}
{{dsc|{{tt|error_complexity}}|尝试的匹配的复杂度超过了预定义的等级}}
{{dsc|{{tt|error_stack}}|没有足够内存进行匹配}}
{{dsc end}}

===示例===
{{example
|实现正则表达式检测器：
|code=
#include &lt;cstddef&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;regex&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;

void regular_expression_checker(const std::string&amp; text,
                                const std::string&amp; regex,
                                const std::regex::flag_type flags)
{
    std::cout &lt;&lt; "文本：" &lt;&lt; std::quoted(text) &lt;&lt; '\n'
              &lt;&lt; "正则：" &lt;&lt; std::quoted(regex) &lt;&lt; '\n';
    
    try
    {
        const std::regex re{regex, flags};
        const bool matched = std::regex_match(text, re);
        
        std::stringstream out;
        out &lt;&lt; (matched ? "匹配！\n" : "不匹配！\n");
        
        std::smatch m;
        if (std::regex_search(text, m, re); !m.empty())
        {
            out &lt;&lt; "前缀 = [" &lt;&lt; m.prefix().str().data() &lt;&lt; "]\n";
            
            for (std::size_t i{}; i != m.size(); ++i)
                out &lt;&lt; "  m[" &lt;&lt; i &lt;&lt; "] = [" &lt;&lt; m[i].str().data() &lt;&lt; "]\n";
            
            out &lt;&lt; "后缀 = [" &lt;&lt; m.suffix().str().data() &lt;&lt; "]\n";
        }
        std::cout &lt;&lt; out.str() &lt;&lt; '\n';
    }
    catch (std::regex_error&amp; e)
    {
        std::cout &lt;&lt; "错误：" &lt;&lt; e.what() &lt;&lt; ".\n\n";
    }
}

int main()
{
    constexpr std::regex::flag_type your_flags
        = std::regex::flag_type{0}
    // 选择以下语法之一：
        {{!}} std::regex::ECMAScript
    //  {{!}} std::regex::basic
    //  {{!}} std::regex::extended
    //  {{!}} std::regex::awk
    //  {{!}} std::regex::grep
    //  {{!}} std::regex::egrep
    // 选择以下任意选项：
    //  {{!}} std::regex::icase
    //  {{!}} std::regex::nosubs
    //  {{!}} std::regex::optimize
    //  {{!}} std::regex::collate
    //  {{!}} std::regex::multiline
        ;
    
    const std::string your_text = "Hello regular expressions.";
    const std::string your_regex = R"(([a-zA-Z]+) ([a-z]+) ([a-z]+)\.)";
    regular_expression_checker(your_text, your_regex, your_flags);
    
    regular_expression_checker("Invalid!", R"(((.)(.))", your_flags);
    regular_expression_checker("Invalid!", R"([.)", your_flags);
    regular_expression_checker("Invalid!", R"([.]{})", your_flags);
    regular_expression_checker("Invalid!", R"([1-0])", your_flags);
}
|p=true
|output=
文本："Hello regular expressions."
正则："([a-zA-Z]+) ([a-z]+) ([a-z]+)\\."
MATCH!
前缀 = []
  m[0] = [Hello regular expressions.]
  m[1] = [Hello]
  m[2] = [regular]
  m[3] = [expressions]
后缀 = []

文本："Invalid!"
正则："((.)(.)"
错误：Mismatched '(' and ')' in regular expression.

文本："Invalid!"
正则："[."
错误：Unexpected character within '[...]' in regular expression.

文本："Invalid!"
正则："[.]{}"
错误：Invalid range in '{}' in regular expression.

文本："Invalid!"
正则："[1-0]"
错误：Invalid range in bracket expression..

}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2053|std=C++11|before=常量被声明为 {{c/core|static}}|after=移除 {{c/core|static}} 说明符}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/regex/dsc regex_error}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
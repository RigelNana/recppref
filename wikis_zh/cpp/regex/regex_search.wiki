{{cpp/title|regex_search}}
{{cpp/regex/navbar}}
{{dcl begin}}
{{dcl header|regex}}
{{dcl|num=1|since=c++11|1=
template&lt; class BidirIt, class Alloc, class CharT, class Traits &gt;
bool regex_search( BidirIt first, BidirIt last,
                   std::match_results&lt;BidirIt, Alloc&gt;&amp; m,
                   const std::basic_regex&lt;CharT, Traits&gt;&amp; e,
                   std::regex_constants::match_flag_type flags =
                       std::regex_constants::match_default );
}}
{{dcl|num=2|since=c++11|1=
template&lt; class BidirIt, class CharT, class Traits &gt;
bool regex_search( BidirIt first, BidirIt last,
                   const std::basic_regex&lt;CharT, Traits&gt;&amp; e,
                   std::regex_constants::match_flag_type flags =
                       std::regex_constants::match_default );
}}
{{dcl|num=3|since=c++11|1=
template&lt; class CharT, class Alloc, class Traits &gt;
bool regex_search( const CharT* str,
                   std::match_results&lt;const CharT*, Alloc&gt;&amp; m,
                   const std::basic_regex&lt;CharT, Traits&gt;&amp; e,
                   std::regex_constants::match_flag_type flags =
                       std::regex_constants::match_default );
}}
{{dcl|num=4|since=c++11|1=
template&lt; class CharT, class Traits &gt;
bool regex_search( const CharT* str, const std::basic_regex&lt;CharT, Traits&gt;&amp; e,
                   std::regex_constants::match_flag_type flags =
                       std::regex_constants::match_default );
}}
{{dcl|num=5|since=c++11|1=
template&lt; class STraits, class SAlloc, class Alloc,
          class CharT, class Traits &gt;
bool regex_search
    ( const std::basic_string&lt;CharT, STraits, SAlloc&gt;&amp; s,
      std::match_results
          &lt;typename std::basic_string&lt;CharT, STraits, SAlloc&gt;::const_iterator,
           Alloc&gt;&amp; m,
      const std::basic_regex&lt;CharT, Traits&gt;&amp; e,
      std::regex_constants::match_flag_type flags =
          std::regex_constants::match_default );
}}
{{dcl|num=6|since=c++11|1=
template&lt; class STraits, class SAlloc, class CharT, class Traits &gt;
bool regex_search( const std::basic_string&lt;CharT, STraits, SAlloc&gt;&amp; s,
                   const std::basic_regex&lt;CharT, Traits&gt;&amp; e,
                   std::regex_constants::match_flag_type flags =
                       std::regex_constants::match_default );
}}
{{dcl|num=7|since=c++11|1=
template&lt; class STraits, class SAlloc, class Alloc,
          class CharT, class Traits &gt;
bool regex_search
    ( const std::basic_string&lt;CharT, STraits, SAlloc&gt;&amp;&amp;,
      std::match_results
          &lt;typename std::basic_string&lt;CharT, STraits, SAlloc&gt;::const_iterator,
           Alloc&gt;&amp;,
      const std::basic_regex&lt;CharT, Traits&gt;&amp;,
      std::regex_constants::match_flag_type flags =
          std::regex_constants::match_default ) = delete;
}}
{{dcl end}}

确定正则表达式 {{c|e}} 和目标字符序列中的某个子序列间是否有匹配。匹配结果详情会存储到 {{c|m}}（如果存在）中。

@1,2@ 目标字符序列以范围 {{range|first|last}} 表示。
{{rev begin}}
{{rev|until=c++23|
如果 {{tt|BidirIt}} 不满足{{named req|BidirectionalIterator}}的要求，那么行为未定义。
}}
{{rev|since=c++23|
如果 {{tt|BidirIt}} 未实现 {{lconcept|bidirectional_iterator}}，那么行为未定义。
}}
{{rev end}}

@3,4@ 目标字符序列以范围 {{range|str|str + std::char_traits&lt;CharT&gt;::length(str)}} 表示。

@5,6@ 目标字符序列以字符串 {{c|s}} 表示。

@7@ 不能以 {{lc|std::string}} 右值表示目标字符序列。

如果匹配不存在，那么以下涉及 {{c|m}}（如果存在）的表达式会产生以下指定的值：
{|class="wikitable" style="text-align: center;"
!表达式
!值
|-
|{{nbsp}}{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/ready}}{{c/core|()}}}}{{nbsp}}
|{{nbsp}}{{c|true}}{{nbsp}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/size}}{{c/core|()}}}}
|{{c|0}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/empty}}{{c/core|()}}}}
|{{c|true}}
|}

如果匹配存在，那么给定 {{open range|​0|m.size()}} 中的任意整数为 {{c|n}}，对于下面列出的各个重载，以下涉及 {{c|m}} 的表达式会产生以下指定的值：
{|class="wikitable" style="text-align: center;"
!rowspan=2|表达式
!colspan=3|值
|-
!{{nbsp|16}}重载 {{v|1}}{{nbsp|16}}
!{{nbsp|16}}重载 {{v|3}}{{nbsp|16}}
!{{nbsp|16}}重载 {{v|5}}{{nbsp|16}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/ready}}{{c/core|()}}}}
|colspan=3|{{c|true}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/size}}{{c/core|()}}}}
|colspan=3|{{box|{{c/core|1 + e.}}{{ltt|cpp/regex/basic_regex/mark_count}}{{c/core|()}}}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/empty}}{{c/core|()}}}}
|colspan=3|{{c|false}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/prefix}}{{c/core|().first}}}}
|{{c|first}}
|{{c|str}}
|{{c|s.begin()}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/prefix}}{{c/core|().second}}}}
|colspan=3|{{c|m[0].first}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/prefix}}{{c/core|().matched}}}}
|colspan=3|{{c|1=m.prefix().first != m.prefix().second}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/suffix}}{{c/core|().first}}}}
|colspan=3|{{c|m[0].second}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/suffix}}{{c/core|().second}}}}
|{{c|last}}
|&lt;span style="text-align: start;"&gt;{{c multi|std::char_traits&lt;CharT&gt;::|    length(str) + str}}&lt;/span&gt;
|{{c|s.end()}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/suffix}}{{c/core|().matched}}}}
|colspan=3|{{c|1=m.suffix().first != m.suffix().second}}
|-
|{{box|{{c/core|m}}{{ltt|cpp/regex/match_results/operator at|[0]}}{{c/core|.first}}}}
|colspan=3|匹配 {{c|e}} 的序列的起始
|-
|{{box|{{c/core|m}}{{ltt|cpp/regex/match_results/operator at|[0]}}{{c/core|.second}}}}
|colspan=3|匹配 {{c|e}} 的序列的结尾
|-
|{{box|{{c/core|m}}{{ltt|cpp/regex/match_results/operator at|[0]}}{{c/core|.matched}}}}
|colspan=3|{{c|true}}
|-
|{{box|{{c/core|m}}{{ltt|cpp/regex/match_results/operator at|[n]}}{{c/core|.first}}}}
|colspan=3|
* [[cpp/regex/ecmascript#子表达式|有标记子表达式]] {{c|n}} 未参与匹配时是 {{c|last}}
* 否则是匹配子表达式 {{c|n}} 的序列的起始
|-
|{{box|{{c/core|m}}{{ltt|cpp/regex/match_results/operator at|[n]}}{{c/core|.second}}}}
|colspan=3|
* [[cpp/regex/ecmascript#子表达式|有标记子表达式]] {{c|n}} 未参与匹配时是 {{c|last}}
* 否则是匹配子表达式 {{c|n}} 的序列的结尾
|-
|{{box|{{c/core|m}}{{ltt|cpp/regex/match_results/operator at|[n]}}{{c/core|.matched}}}}
|colspan=3|
* [[cpp/regex/ecmascript#子表达式|有标记子表达式]] {{c|n}} 未参与匹配时是 {{c|false}}
* 否则是 {{c|true}}
|}

===参数===
{{par begin}}
{{par|first, last|以应用正则表达式的目标字符范围，以迭代器给出}}
{{par|str|目标 C 风格字符串}}
{{par|s|目标 {{lc|std::basic_string}}}}
{{par|m|匹配结果}}
{{par|e|正则表达式}}
{{par|flags|用于确定将如何进行匹配的标志}}
{{par end}}

===返回值===
整个目标序列匹配 {{c|e}} 时返回 {{c|true}}，否则返回 {{c|false}}。

===注解===
为在目标序列内检验所有匹配，可在循环中调用 {{tt|std::regex_search}}，每次从先前调用的 {{c|m[0].second}} 重新开始。{{lc|std::regex_iterator}} 提供对此迭代的简易接口。

===示例===
{{example
|code=
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
#include &lt;regex&gt;
#include &lt;string&gt;

int main()
{
    std::string lines[] = {"Roses are #ff0000",
                           "violets are #0000ff",
                           "all of my base are belong to you"};
    
    std::regex color_regex("#([a-f0-9]{2})"
                            "([a-f0-9]{2})"
                            "([a-f0-9]{2})");
    
    // 简单匹配
    for (const auto&amp; line : lines)
        std::cout &lt;&lt; line &lt;&lt; "：" &lt;&lt; std::boolalpha
                  &lt;&lt; std::regex_search(line, color_regex) &lt;&lt; '\n';
    std::cout &lt;&lt; '\n';
    
    // 展示每个匹配中有标记子表达式的内容
    std::smatch color_match;
    for (const auto&amp; line : lines)
        if (std::regex_search(line, color_match, color_regex))
        {
            std::cout &lt;&lt; "'" &lt;&lt; line &lt;&lt; "' 的匹配\n";
            std::cout &lt;&lt; "前缀：'" &lt;&lt; color_match.prefix() &lt;&lt; "'\n";
            for (std::size_t i = 0; i &lt; color_match.size(); ++i) 
                std::cout &lt;&lt; i &lt;&lt; "：" &lt;&lt; color_match[i] &lt;&lt; '\n';
            std::cout &lt;&lt; "后缀：'" &lt;&lt; color_match.suffix() &lt;&lt; "\'\n\n";
        }
    
    // 重复搜索（参阅 std::regex_iterator）
    std::string log(R"(
        Speed:	366
        Mass:	35
        Speed:	378
        Mass:	32
        Speed:	400
	Mass:	30)");
    std::regex r(R"(Speed:\t\d*)");
    for (std::smatch sm; regex_search(log, sm, r);)
    {
        std::cout &lt;&lt; sm.str() &lt;&lt; '\n';
        log = sm.suffix();
    }
    
    // C 风格字符串演示
    std::cmatch cm;
    if (std::regex_search("this is a test", cm, std::regex("test"))) 
        std::cout &lt;&lt; "\n在位置 " &lt;&lt; cm.prefix().length()
                  &lt;&lt; " 找到 " &lt;&lt; cm[0] &lt;&lt; '\n';
}
|output=
Roses are #ff0000：true
violets are #0000ff：true
all of my base are belong to you：false

'Roses are #ff0000' 的匹配
前缀：'Roses are '
0：#ff0000
1：ff
2：00
3：00
后缀：''

'violets are #0000ff' 的匹配
前缀：'violets are '
0：#0000ff
1：00
2：00
3：ff
后缀：''

Speed:	366
Speed:	378
Speed:	400

在位置 10 找到 test
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2205|std=C++11|before=在后条件中 {{c|n}} 可以为零|after=只能为正}}
{{dr list item|wg=lwg|dr=2329|std=C++11|before=重载 {{v|5}} 接受 {{tt|basic_string}} 右值，这可能会导致悬垂迭代器|after=通过被删除的重载 {{v|7}} 拒绝}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/regex/dsc basic_regex}}
{{dsc inc|cpp/regex/dsc match_results}}
{{dsc inc|cpp/regex/dsc regex_match}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
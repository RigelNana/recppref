{{cpp/title|regex_match}}
{{cpp/regex/navbar}}
{{dcl begin}}
{{dcl header|regex}}
{{dcl|num=1|since=c++11|1=
template&lt; class BidirIt, class Alloc, class CharT, class Traits &gt;
bool regex_match( BidirIt first, BidirIt last,
                  std::match_results&lt;BidirIt, Alloc&gt;&amp; m,
                  const std::basic_regex&lt;CharT, Traits&gt;&amp; e,
                  std::regex_constants::match_flag_type flags =
                      std::regex_constants::match_default );
}}
{{dcl|num=2|since=c++11|1=
template&lt; class BidirIt, class CharT, class Traits &gt;
bool regex_match( BidirIt first, BidirIt last,
                  const std::basic_regex&lt;CharT, Traits&gt;&amp; e,
                  std::regex_constants::match_flag_type flags =
                      std::regex_constants::match_default );
}}
{{dcl|num=3|since=c++11|1=
template&lt; class CharT, class Alloc, class Traits &gt;
bool regex_match( const CharT* str,
                  std::match_results&lt;const CharT*, Alloc&gt;&amp; m,
                  const std::basic_regex&lt;CharT, Traits&gt;&amp; e,
                  std::regex_constants::match_flag_type flags =
                      std::regex_constants::match_default );
}}
{{dcl|num=4|since=c++11|1=
template&lt; class CharT, class Traits &gt;
bool regex_match( const CharT* str, const std::basic_regex&lt;CharT, Traits&gt;&amp; e,
                  std::regex_constants::match_flag_type flags =
                      std::regex_constants::match_default );
}}
{{dcl|num=5|since=c++11|1=
template&lt; class STraits, class SAlloc, class Alloc,
          class CharT, class Traits &gt;
bool regex_match
    ( const std::basic_string&lt;CharT, STraits, SAlloc&gt;&amp; s,
      std::match_results
          &lt;typename std::basic_string&lt;CharT, STraits, SAlloc&gt;::const_iterator,
           Alloc&gt;&amp; m,
      const std::basic_regex&lt;CharT, Traits&gt;&amp; e,
      std::regex_constants::match_flag_type flags =
          std::regex_constants::match_default );
}}
{{dcl|num=6|since=c++11|1=
template&lt; class STraits, class SAlloc, class CharT, class Traits &gt;
bool regex_match( const std::basic_string&lt;CharT, STraits, SAlloc&gt;&amp; s,
                  const std::basic_regex&lt;CharT, Traits&gt;&amp; e,
                  std::regex_constants::match_flag_type flags =
                      std::regex_constants::match_default );
}}
{{dcl|num=7|since=c++11|1=
template&lt; class STraits, class SAlloc, class Alloc,
          class CharT, class Traits &gt;
bool regex_match
    ( const std::basic_string&lt;CharT, STraits, SAlloc&gt;&amp;&amp;,
      std::match_results
          &lt;typename std::basic_string&lt;CharT, STraits, SAlloc&gt;::const_iterator,
           Alloc&gt;&amp;,
      const std::basic_regex&lt;CharT, Traits&gt;&amp;,
      std::regex_constants::match_flag_type flags =
          std::regex_constants::match_default ) = delete;
}}
{{dcl end}}

确定正则表达式 {{c|e}} 是否匹配整个目标字符序列。匹配结果详情会存储到 {{c|m}}（如果存在）中。

@1,2@ 目标字符序列以范围 {{range|first|last}} 表示。
{{rev begin}}
{{rev|until=c++23|
如果 {{tt|BidirIt}} 不满足{{named req|BidirectionalIterator}}的要求，那么行为未定义。
}}
{{rev|since=c++23|
如果 {{tt|BidirIt}} 未实现 {{lconcept|bidirectional_iterator}}，那么行为未定义。
}}
{{rev end}}

@3,4@ 目标字符序列以范围 {{range|str|str + std::char_traits&lt;CharT&gt;::length(str)}} 表示。

@5,6@ 目标字符序列以字符串 {{c|s}} 表示。

@7@ 不能以 {{lc|std::string}} 右值表示目标字符序列。

如果匹配不存在，那么以下涉及 {{c|m}}（如果存在）的表达式会产生以下指定的值：
{|class="wikitable" style="text-align: center;"
!表达式
!值
|-
|{{nbsp}}{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/ready}}{{c/core|()}}}}{{nbsp}}
|{{nbsp}}{{c|true}}{{nbsp}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/size}}{{c/core|()}}}}
|{{c|0}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/empty}}{{c/core|()}}}}
|{{c|true}}
|}

如果匹配存在，那么给定 {{open range|​0|m.size()}} 中的任意整数为 {{c|n}}，对于下面列出的各个重载，以下涉及 {{c|m}} 的表达式会产生以下指定的值：
{|class="wikitable" style="text-align: center;"
!rowspan=2|表达式
!colspan=3|值
|-
!{{nbsp|16}}重载 {{v|1}}{{nbsp|16}}
!{{nbsp|16}}重载 {{v|3}}{{nbsp|16}}
!{{nbsp|16}}重载 {{v|5}}{{nbsp|16}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/ready}}{{c/core|()}}}}
|colspan=3|{{c|true}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/size}}{{c/core|()}}}}
|colspan=3|{{box|{{c/core|1 + e.}}{{ltt|cpp/regex/basic_regex/mark_count}}{{c/core|()}}}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/empty}}{{c/core|()}}}}
|colspan=3|{{c|false}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/prefix}}{{c/core|().first}}}}
|rowspan=2|{{c|first}}
|rowspan=2|{{c|str}}
|rowspan=2|{{c|s.begin()}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/prefix}}{{c/core|().second}}}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/prefix}}{{c/core|().matched}}}}
|colspan=3|{{nbsp|4}}{{c|false}}&lt;ref&gt;匹配前缀为空。&lt;/ref&gt;
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/suffix}}{{c/core|().first}}}}
|rowspan=2|{{c|last}}
|rowspan=2|&lt;span style="text-align: start;"&gt;{{c multi|std::char_traits&lt;CharT&gt;::|    length(str) + str}}&lt;/span&gt;
|rowspan=2|{{c|s.end()}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/suffix}}{{c/core|().second}}}}
|-
|{{box|{{c/core|m.}}{{ltt|cpp/regex/match_results/suffix}}{{c/core|().matched}}}}
|colspan=3|{{nbsp|4}}{{c|false}}&lt;ref&gt;匹配后缀为空。&lt;/ref&gt;
|-
|{{box|{{c/core|m}}{{ltt|cpp/regex/match_results/operator at|[0]}}{{c/core|.first}}}}
|{{c|first}}
|{{c|str}}
|{{c|s.begin()}}
|-
|{{box|{{c/core|m}}{{ltt|cpp/regex/match_results/operator at|[0]}}{{c/core|.second}}}}
|{{c|last}}
|&lt;span style="text-align: start;"&gt;{{c multi|std::char_traits&lt;CharT&gt;::|    length(str) + str}}&lt;/span&gt;
|{{c|s.end()}}
|-
|{{box|{{c/core|m}}{{ltt|cpp/regex/match_results/operator at|[0]}}{{c/core|.matched}}}}
|colspan=3|{{nbsp|4}}{{c|true}}&lt;ref&gt;匹配到了整个序列。&lt;/ref&gt;
|-
|{{box|{{c/core|m}}{{ltt|cpp/regex/match_results/operator at|[n]}}{{c/core|.first}}}}
|colspan=3|
* [[cpp/regex/ecmascript#子表达式|有标记子表达式]] {{c|n}} 未参与匹配时是 {{c|last}}
* 否则是匹配子表达式 {{c|n}} 的序列的起始
|-
|{{box|{{c/core|m}}{{ltt|cpp/regex/match_results/operator at|[n]}}{{c/core|.second}}}}
|colspan=3|
* [[cpp/regex/ecmascript#子表达式|有标记子表达式]] {{c|n}} 未参与匹配时是 {{c|last}}
* 否则是匹配子表达式 {{c|n}} 的序列的结尾
|-
|{{box|{{c/core|m}}{{ltt|cpp/regex/match_results/operator at|[n]}}{{c/core|.matched}}}}
|colspan=3|
* [[cpp/regex/ecmascript#子表达式|有标记子表达式]] {{c|n}} 未参与匹配时是 {{c|false}}
* 否则是 {{c|true}}
|}
&lt;references/&gt;

===参数===
{{par begin}}
{{par|first, last|以应用正则表达式的目标字符范围，以迭代器给出}}
{{par|str|目标 C 风格字符串}}
{{par|s|目标 {{lc|std::basic_string}}}}
{{par|m|匹配结果}}
{{par|e|正则表达式}}
{{par|flags|用于确定将如何进行匹配的标志}}
{{par end}}

===返回值===
整个目标序列匹配 {{c|e}} 时返回 {{c|true}}，否则返回 {{c|false}}。

===示例===
{{example
|code=
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
#include &lt;regex&gt;
#include &lt;string&gt;

int main()
{
    // 简单正则表达式匹配
    const std::string fnames[] = {"foo.txt", "bar.txt", "baz.dat", "zoidberg"};
    const std::regex txt_regex("[a-z]+\\.txt");
    
    for (const auto&amp; fname : fnames)
        std::cout &lt;&lt; fname &lt;&lt; "：" &lt;&lt; std::regex_match(fname, txt_regex) &lt;&lt; '\n';
    
    // 提取子匹配
    const std::regex base_regex("([a-z]+)\\.txt");
    std::smatch base_match;
    
    for (const auto&amp; fname : fnames)
        if (std::regex_match(fname, base_match, base_regex))
            // 首个 sub_match 是整个字符串；下个
            // sub_match 是首个有括号表达式。
            if (base_match.size() == 2)
            {
                std::ssub_match base_sub_match = base_match[1];
                std::string base = base_sub_match.str();
                std::cout &lt;&lt; fname &lt;&lt; " 的基本名是 " &lt;&lt; base &lt;&lt; '\n';
            }
    
    // 提取几个子匹配
    const std::regex pieces_regex("([a-z]+)\\.([a-z]+)");
    std::smatch pieces_match;
    
    for (const auto&amp; fname : fnames)
        if (std::regex_match(fname, pieces_match, pieces_regex))
        {
            std::cout &lt;&lt; fname &lt;&lt; '\n';
            for (std::size_t i = 0; i &lt; pieces_match.size(); ++i)
            {
                std::ssub_match sub_match = pieces_match[i];
                std::string piece = sub_match.str();
                std::cout &lt;&lt; "  submatch " &lt;&lt; i &lt;&lt; "：" &lt;&lt; piece &lt;&lt; '\n';
            }
        }
}
|output=
foo.txt：1
bar.txt：1
baz.dat：0
zoidberg：0
foo.txt 的基本名是 foo
bar.txt 的基本名是 bar
foo.txt
  submatch 0：foo.txt
  submatch 1：foo
  submatch 2：txt
bar.txt
  submatch 0：bar.txt
  submatch 1：bar
  submatch 2：txt
baz.dat
  submatch 0：baz.dat
  submatch 1：baz
  submatch 2：dat
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2205|std=C++11|before=在后条件中 {{c|n}} 可以为零|after=只能为正}}
{{dr list item|wg=lwg|dr=2273|std=C++11|before=不明确是否考虑部分匹配|after=只考虑完全匹配}}
{{dr list item|wg=lwg|dr=2329|std=C++11|before=重载 {{v|5}} 接受 {{tt|basic_string}} 右值，这可能会导致悬垂迭代器|after=通过被删除的重载 {{v|7}} 拒绝}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/regex/dsc basic_regex}}
{{dsc inc|cpp/regex/dsc match_results}}
{{dsc inc|cpp/regex/dsc regex_search}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
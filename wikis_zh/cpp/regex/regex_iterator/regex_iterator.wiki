{{cpp/regex/regex_iterator/title|regex_iterator}}
{{cpp/regex/regex_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1= 
regex_iterator();
}}
{{dcl|num=2|since=c++11|1= 
regex_iterator( BidirIt a, BidirIt b,
                const regex_type&amp; re,
                std::regex_constants::match_flag_type m =
                    std::regex_constants::match_default );
}}
{{dcl|num=3|since=c++11|1= 
regex_iterator( const regex_iterator&amp; );
}}
{{dcl|num=4|since=c++11|1= 
regex_iterator( BidirIt, BidirIt,
                const regex_type&amp;&amp;,
                std::regex_constants::match_flag_type =
                    std::regex_constants::match_default ) = delete;
}}
{{dcl end}}

构造新的 {{tt|regex_iterator}}：

@1@ 默认构造函数。构造序列尾迭代器。

@2@ 从字符序列 {{range|a|b}}、正则表达式 {{c|re}} 和掌管匹配行为的标志 {{c|m}} 构造 {{tt|regex_iterator}}。此构造函数以此数据进行 {{lc|std::regex_search}} 的初始调用。若此初始调用结构为 {{c|false}}，则设置 {{c|*this}} 为序列尾迭代器。

@3@ 复制 {{tt|regex_iterator}}。

@4@ 不允许以正则表达式临时量调用重载 {{tt|2}}，因为返回的迭代器会立即失效。

===参数===
{{par begin}}
{{par|a|指向目标字符序列起始的{{named req|BidirectionalIterator}}}}
{{par|b|指向目标字符序列末尾的{{named req|BidirectionalIterator}}}}
{{par|re|用于搜索目标字符序列的正则表达式}}
{{par|m|掌管 {{c|re}} 行为的标志}}
{{par end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;regex&gt;
#include &lt;string_view&gt;

int main()
{
    constexpr std::string_view str{R"(
        #ONE: *p = &amp;Mass;
        #Two: MOV %rd, 42
    )"};
    const std::regex re("[a-w]");

    // 创建 regex_iterator，重载 (2)
    auto it = std::regex_iterator&lt;std::string_view::iterator&gt;
    {
        str.cbegin(), str.cend(),
        re // re 是左值；如果改用立即表达式，如 std::regex{"[a-z]"}
           // 则会由于重载 (4) 被弃置而产生错误
    };

    for (decltype(it) last /* overload (1) */; it != last; ++it)
        std::cout &lt;&lt; (*it).str();
    std::cout &lt;&lt; '\n';
}
|output=
password
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2332|std=C++11|before=从临时 {{tt|basic_regex}} 构造的 {{tt|regex_iterator}} 会立即失效|after=通过被弃置的重载禁止这种构造}}
{{dr list end}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/regex/regex_iterator/title|operator++, operator++{{small|(int)}}}}
{{cpp/regex/regex_iterator/navbar}}
{{dcl begin}}
{{dcl|since=c++11|1=
regex_iterator&amp; operator++();
}}
{{dcl|since=c++11|1=
regex_iterator operator++( int );
}}
{{dcl end}}

推进迭代器到下个匹配。

{{todo|更好地解释}}

首先以 {{c|match[0].second}} 的值构造 {{tt|BidirIt}} 类型的局部变量。

若迭代器保有零长匹配且 {{c|start {{==}} end}}，则设置 {{c|*this}} 为序列尾迭代器，函数返回。

否则，若迭代器保有零长匹配，则运算符调用以下内容：

{{cc|regex_search(start, end, match, *pregex, 
             flags {{!}} regex_constants::match_not_null {{!}} 
                     regex_constants::match_continuous);}} 

若调用返回 {{c|true}}，则函数返回。

否则运算符自增 {{tt|start}} 并持续，如同最近匹配不是零长匹配。

若最近匹配不是零长匹配，则运算符设置 {{tt|flags}} 为 {{c|flags {{!}} regex_constants::match_prev_avail}} 并调用以下内容：

{{cc|regex_search(start, end, match, *pregex, flags);}}

若调用返回 {{c|false}}，则运算符设置 {{c|*this}} 为序列尾迭代器，函数返回。

在调用 {{c|regex_search}} 返回 {{c|true}} 的所有情况下，{{c|match.prefix().first}} 将等于 {{c|match[0].second}} 的先前值，而且对于范围 {{range|0|match.size()}} 中满足 {{c|match[i].matched}} 为 {{c|true}} 的每个索引 ''i''，{{c|match[i].position()}} 将返回 {{c|distance(begin, match[i].first)}}。

这表明 {{c|match[i].position()}} 给出自目标序列起始的偏移，它通常与从传递给 {{c|regex_search}} 调用中的序列偏移不同。

实现如何进行这些调整是未指定的。这表明编译器可以调用实现限定的搜索函数，该情况下将不调用用户定义的 {{c|regex_search}} 特化。

若迭代器是序列尾迭代器则行为未定义。

===参数===
（无）

===返回值===
@1@ {{c|*this}}

@2@ 迭代器的先前值。

{{langlinks|de|en|es|ja|ru}}
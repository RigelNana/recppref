{{cpp/regex/regex_traits/title|value}}
{{cpp/regex/regex_traits/navbar}}
{{dcl begin}}
{{dcl|since=c++11|1=
int value( CharT ch, int radix ) const;
}}
{{dcl end}}

给定当前浸染的本地环境，确定数字 {{c|ch}} 在数值底 {{c|radix}} 中表示的值。{{lc|std::regex}} 在处理如 {{tt|{1}}} 或 {{tt|{2,5}}} 的[[cpp/regex/ecmascript#数量词|数量词]]、如 {{tt|\1}} 的[[cpp/regex/ecmascript#回溯引用|回溯引用]]和十六进制及 Unicode 字符转义时调用此函数。

===参数===
{{par begin}}
{{par|ch|可以表示数字的字符}}
{{par|radix|8、10 或 16 之一}}
{{par end}}

===返回值===
若 {{c|ch}} 在当前浸染的本地环境中确实表示对于数值底 {{c|radix}} 合法的数字，则为其数值，错误时为 {{c|-1}}。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;map&gt;
#include &lt;regex&gt;

// 这个自定义的正则表达式特征允许日文数字
struct jnum_traits : std::regex_traits&lt;wchar_t&gt;
{   
    static std::map&lt;wchar_t, int&gt; data;
    int value(wchar_t ch, int radix) const
    {
        wchar_t up = std::toupper(ch, getloc());
        return data.count(up) ? data[up] : regex_traits::value(ch, radix);
    }
};
std::map&lt;wchar_t, int&gt; jnum_traits::data = {{L'〇',0}, {L'一',1}, {L'二',2},
                                            {L'三',3}, {L'四',4}, {L'五',5},
                                            {L'六',6}, {L'七',7}, {L'八',8},
                                            {L'九',9}, {L'Ａ',10}, {L'Ｂ',11},
                                            {L'Ｃ',12}, {L'Ｄ',13}, {L'Ｅ',14},
                                            {L'Ｆ',15}};
int main()
{   
    std::locale::global(std::locale("ja_JP.utf8"));
    std::wcout.sync_with_stdio(false);
    std::wcout.imbue(std::locale());

    std::wstring in = L"風";

    if (std::regex_match(in, std::wregex(L"\\u98a8")))
        std::wcout &lt;&lt; "\\u98a8 匹配 " &lt;&lt; in &lt;&lt; '\n';

    if (std::regex_match(in, std::basic_regex&lt;wchar_t, jnum_traits&gt;(L"\\u九八ａ八")))
        std::wcout &lt;&lt; L"\\u九八ａ八 以自定义特征匹配 " &lt;&lt; in &lt;&lt; '\n';
}
|output=
\u98a8 匹配 風
\u九八ａ八 以自定义特征匹配 風
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
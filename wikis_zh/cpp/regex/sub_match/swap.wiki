{{cpp/regex/sub_match/title|swap}}
{{cpp/regex/sub_match/navbar}}
{{ddcl|since=c++11|
void swap( sub_match&amp; s ) noexcept(/* 见下文 */);
}}

互换两个子匹配对象的内容。等价于

{{c multi|
this-&gt;pair&lt;BidirIt, BidirIt&gt;::swap(s);|
std::swap(matched, s.matched);
}}

===参数===
{{par begin}}
{{par|s|要交换的 {{tt|sub_match}}}}
{{par hreq}}
{{par req named|BidirIt|LegacySwappable}}
{{par end}}

===异常===
{{noexcept|std::is_nothrow_swappable_v&lt;BidirIt&gt;}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;regex&gt;

int main()
{
    const char* s = "Quick red cat";
    std::sub_match&lt;const char*&gt; x, y;

    x.first = &amp;s[0];
    x.second = &amp;s[5];
    x.matched = false;

    y.first = &amp;s[012];
    y.second = &amp;s[13];
    y.matched = true;

    std::cout &lt;&lt; "swap 前:\n";
    std::cout &lt;&lt; "x.str() = [" &lt;&lt; x.str() &lt;&lt; "]\n";
    std::cout &lt;&lt; "y.str() = [" &lt;&lt; y.str() &lt;&lt; "]\n";
    assert(!x.matched and y.matched);

    x.swap(y);

    std::cout &lt;&lt; "swap 后:\n";
    std::cout &lt;&lt; "x.str() = [" &lt;&lt; x.str() &lt;&lt; "]\n";
    std::cout &lt;&lt; "y.str() = [" &lt;&lt; y.str() &lt;&lt; "]\n";
    assert(x.matched and !y.matched);
}
|output=
swap 前:
x.str() = []
y.str() = [cat]
swap 后:
x.str() = [cat]
y.str() = []
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3204|std=C++11
|before={{lc|std::sub_match}} 曾继承于 {{c|std::pair::swap(pair&amp;)}} 而导致切片
|after=添加 {{c|std::sub_match::swap(sub_match&amp;)}}
}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{title|operator&lt;&lt;{{small|(std::sub_match)}}}}
{{cpp/regex/sub_match/navbar}}
{{dcl begin}}
{{dcl|since=c++11|
template&lt; class CharT, class Traits, class BidirIt &gt;
std::basic_ostream&lt;CharT,Traits&gt;&amp;
    operator&lt;&lt;( std::basic_ostream&lt;CharT,Traits&gt;&amp; os, const sub_match&lt;BidirIt&gt;&amp; m );
}}
{{dcl end}}

写入匹配子序列 {{c|m}} 的表示到输出流 {{c|os}}。
等价于 {{c|os &lt;&lt; m.str()}}。

===参数===
{{par begin}}
{{par|os|要写入表示的输出流}}
{{par|m|要输出的子匹配对象}}
{{par end}}

===返回值===
{{tt|os}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;regex&gt;
#include &lt;string&gt;

int main()
{
    std::string sentence{"Quick red fox jumped over a lazy hare."};
    const std::regex re{"([A-z]+) ([a-z]+) ([a-z]+)"};
    std::smatch words;
    std::regex_search(sentence, words, re);
    for (const auto&amp; m : words)
        // m 类型为 `const std::sub_match&lt;std::string::const_iterator&gt;&amp;`
        std::cout &lt;&lt; '[' &lt;&lt; m &lt;&lt; "] ";
    std::cout &lt;&lt; '\n';
}
|output=
[Quick red fox] [Quick] [red] [fox]
}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/title|n=regex_constants::|syntax_option_type}}
{{cpp/regex/navbar}}

{{dcl begin}}
{{dcl header|regex}}
{{dcl|num=1|since=c++11|1=
using syntax_option_type = /* 由实现定义 */;
}}
{{dcl|num=2|since=c++11|notes={{mark|C++17 起 inline}}|1=
constexpr syntax_option_type icase      = /* 未指定 */;
constexpr syntax_option_type nosubs     = /* 未指定 */;
constexpr syntax_option_type optimize   = /* 未指定 */;
constexpr syntax_option_type collate    = /* 未指定 */;
constexpr syntax_option_type ECMAScript = /* 未指定 */;
constexpr syntax_option_type basic      = /* 未指定 */;
constexpr syntax_option_type extended   = /* 未指定 */;
constexpr syntax_option_type awk        = /* 未指定 */;
constexpr syntax_option_type grep       = /* 未指定 */;
constexpr syntax_option_type egrep      = /* 未指定 */;
}}
{{dcl|num=3|since=c++17|1=
inline constexpr syntax_option_type multiline = /* 未指定 */;
}}
{{dcl end}}

@1@ {{tt|syntax_option_type}} 是含有掌控正则表达式行为方式的选项的{{named req|BitmaskType}}。

@2,3@ 类型 {{v|1}} 的可能值（{{tt|icase}}、{{tt|optimize}} 等）被复制到 {{ltt|cpp/regex/basic_regex/constants|std::basic_regex}} 中。

===常量===
{{cpp/regex/syntax option type consts}}

===注解===
因为 POSIX 使用“最左最长”匹配规则（最长的匹配子序列得到匹配，且若存在数个这种子序列，则匹配最左者），故它不适用的例子之一是剖析标签语言：如 {{c|"&lt;tag[^&gt;]*&gt;.*&lt;/tag&gt;"}} 这种 POSIX 正则表达式会匹配从首个 {{c|"&lt;tag"}} 到最末 {{c|"&lt;/tag&gt;"}} 的任何内容，包含中间的每个 {{c|"&lt;/tag&gt;"}} 和 {{c|"&lt;tag&gt;"}} 。另一方面， ECMAScript 支持非贪心匹配，且 ECMAScript 正则表达式 {{c|"&lt;tag[^&gt;]*&gt;.*?&lt;/tag&gt;"}} 会只匹配到首个闭标签。

===示例===
{{example
|展示 ECMAScript 和 POSIX 正则表达式的匹配算法的差异：
|code=
#include &lt;iostream&gt;
#include &lt;regex&gt;
#include &lt;string&gt;

int main()
{
    std::string str = "zzxayyzz";
    std::regex re1(".*(a{{!}}xayy)"); // ECMA
    std::regex re2(".*(a{{!}}xayy)", std::regex::extended); // POSIX
    
    std::cout &lt;&lt; "在 zzxayyzz 中搜索 .*(a{{!}}xayy)：\n";
    std::smatch m;
    std::regex_search(str, m, re1);
    std::cout &lt;&lt; "  ECMA（深度优先搜索） 匹配到：" &lt;&lt; m[0] &lt;&lt; '\n';
    std::regex_search(str, m, re2);
    std::cout &lt;&lt; "  POSIX（最左最长序列）匹配到：" &lt;&lt; m[0] &lt;&lt; '\n';
}
|output=
在 zzxayyzz 中搜索 .*(a{{!}}xayy)：
  ECMA（深度优先搜索） 匹配到：zzxa
  POSIX（最左最长序列）匹配到：zzxayy
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2053|std=C++11|before=常量被声明为 {{c/core|static}}|after=移除 {{c/core|static}} 说明符}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/regex/dsc basic_regex}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
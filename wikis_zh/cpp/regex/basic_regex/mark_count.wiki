{{cpp/regex/basic_regex/title|mark_count}}
{{cpp/regex/basic_regex/navbar}}
{{ddcl|since=c++11|
unsigned mark_count() const;
}}

返回正则表达式内有标记的子表达式（又称捕获组）个数。

===参数===
（无）

===返回值===
正则表达式内有标记的子表达式个数。

{{cpp/impldef exception}}

===示例===
{{example
|code= 
#include &lt;iostream&gt;
#include &lt;regex&gt;

int main()
{    
    std::regex r1{"abcde"};
    std::cout &lt;&lt; "r1 有 " &lt;&lt; r1.mark_count() &lt;&lt; " 个子表达式" &lt;&lt;  '\n';
    //  期待： 0
    
    std::regex r2{"ab(c)de"};
    std::cout &lt;&lt; "r2 有 " &lt;&lt; r2.mark_count() &lt;&lt; " 个子表达式" &lt;&lt; '\n';
    //  期待： 1
    
    std::regex r3{"a(bc)d(e)"}; 
    std::cout &lt;&lt; "r3 有 " &lt;&lt; r3.mark_count() &lt;&lt; " 个子表达式" &lt;&lt; '\n';
    //  期待： 2
    
    //  嵌套的子表达式
    std::regex r4{"abc(de(fg))"};
    std::cout &lt;&lt; "r4 有 " &lt;&lt; r4.mark_count() &lt;&lt; " 个子表达式" &lt;&lt; '\n';
    //  期待： 2
    
    //  转义的括号
    std::regex r5{"a(bc\\(\\)de)"};
    std::cout &lt;&lt; "r5 有 " &lt;&lt; r5.mark_count() &lt;&lt; " 个子表达式" &lt;&lt; '\n';
    //  期待： 1
    
    //  使用 nosubs 标志
    std::regex r6 {"ab(c)de", std::regex_constants::nosubs};
    std::cout &lt;&lt; "r6 有 " &lt;&lt; r6.mark_count() &lt;&lt; " 个子表达式" &lt;&lt; '\n';
    //  Expected: 0
}
|output=
r1 有 0 个子表达式
r2 有 1 个子表达式
r3 有 2 个子表达式
r4 有 2 个子表达式
r5 有 1 个子表达式
r6 有 0 个子表达式
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
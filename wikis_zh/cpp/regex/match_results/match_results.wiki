{{cpp/regex/match_results/title|match_results}}
{{cpp/regex/match_results/navbar}}
{{dcl begin}}
{{dcl|num=1|
match_results() : match_results(Allocator()) {}
}}
{{dcl|num=2|
explicit match_results( const Allocator&amp; a );
}}
{{dcl|num=3|
match_results( const match_results&amp; rhs );
}}
{{dcl|num=4|
match_results( const match_results&amp; rhs, const Allocator&amp; a );
}}
{{dcl|num=5|
match_results( match_results&amp;&amp; rhs ) noexcept;
}}
{{dcl|num=6|
match_results( match_results&amp;&amp; rhs, const Allocator&amp; a );
}}
{{dcl end}}

@1,2@ 构造未建立结果状态的匹配结果。
:@1@ 默认构造函数。
:@2@ 以 {{c|a}} 的副本作为分配器构造匹配结果。
@@ 构造完成时，{{rlpf|ready}} 会返回 {{c|false}}，{{rlpf|size}} 会返回 {{c|0}}。

@3-6@ 从 {{c|rhs}} 构造匹配结果。
:@3@ 复制构造函数。
:@4@ 以 {{c|a}} 的副本作为分配器构造匹配结果。
:@5@ 移动构造函数。构造完成时，{{c|rhs}} 在合法但未指定的状态。
:@6@ 以 {{c|a}} 的副本作为分配器构造匹配结果。构造完成时，{{c|rhs}} 在合法但未指定的状态。
@@ 给定 {{c|rhs}} 在构造前的值为 {{c|m}}，{{range|0|m.size()}} 中的任意整数为 {{c|n}}，构造完成时，以下成员函数应返回指定的值：
{|class="wikitable" style="text-align: center;"
!成员函数
!值
|-
|{{rlpf|ready}}
|{{c|m.ready()}}
|-
|{{rlpf|size}}
|{{c|m.size()}}
|-
|{{rlpf|str|args=n}}
|{{c|m.str(n)}}
|-
|{{rlpf|prefix}}
|{{c|m.prefix()}}
|-
|{{rlpf|suffix}}
|{{c|m.suffix()}}
|-
|{{nbsp}}{{rlpf|operator at|operator[]|args=n}}{{nbsp}}
|{{c|m[n]}}
|-
|{{rlpf|length|args=n}}
|{{c|m.length(n)}}
|-
|{{rlpf|position|args=n}}
|{{nbsp}}{{c|m.position(n)}}{{nbsp}}
|}

===参数===
{{par begin}}
{{par|a|用于此容器所有内存分配的分配器}}
{{par|rhs|用作源以初始化 {{tt|match_results}} 的另一 {{tt|match_results}}}}
{{par end}}

===异常===
@1-4@ {{cpp/impldef exception item}}
@6@ 在 {{c|1=a == rhs.get_allocator()}} 是 {{c|true}} 时不会抛出异常。

===示例===
{{example}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2191|std=C++11|before=在重载 {{v|3-6}} 的后条件中 {{c|n}} 可以为负|after=只能非负}}
{{dr list item|wg=lwg|dr=2195|std=C++11|before=缺失了{{named req|AllocatorAwareContainer}}要求的构造函数|after=已补充}}
{{dr list item|paper=P0935R0|std=C++11|before=默认构造函数是显式的|after=改成隐式的}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/regex/match_results/title|operator[]}}
{{cpp/regex/match_results/navbar}}
{{ddcl|since=c++11|
const_reference operator[]( size_type n ) const;
}}

若 {{c|n &gt; 0}} 且 {{c|n &lt; size()}}，则返回到 {{lc|std::sub_match}} 的引用，它表示第 {{c|n}} 个捕获的[[cpp/regex/ecmascript#子表达式|有标记子表达式]]所匹配的目标序列部分。

若 {{c|1=n == 0}}，则返回到 {{lc|std::sub_match}} 的引用，它表示返回整个匹配的正则表达式所匹配的目标序列部分。

若 {{c|1=n &gt;= size()}}，则返回到 {{lc|std::sub_match}} 的引用，它表示不配的子表达式（目标序列的空子范围）。

{{cpp/precondition|{{rlpf|ready}} 必须为 {{c|true}}。}}

===参数===
{{par begin}}
{{par|n|指定要返回哪个匹配的整数}}
{{par end}}

===返回值===
返回到表示目标序列中指定的匹配子范围的 {{lc|std::sub_match}} 的引用。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;regex&gt;
#include &lt;string&gt;

int main()
{
    std::string target("baaaby");
    std::smatch sm;

    std::regex re1("a(a)*b");
    std::regex_search(target, sm, re1);
    std::cout &lt;&lt; "整个匹配: " &lt;&lt; sm[0] &lt;&lt; '\n'
              &lt;&lt; "子匹配 #1: " &lt;&lt; sm[1] &lt;&lt; '\n';

    std::regex re2("a(a*)b");
    std::regex_search(target, sm, re2);
    std::cout &lt;&lt; "整个匹配: " &lt;&lt; sm[0] &lt;&lt; '\n'
              &lt;&lt; "子匹配 #1: " &lt;&lt; sm[1] &lt;&lt; '\n';

}
|output=
整个匹配: aaab
子匹配 #1: a
整个匹配: aaab
子匹配 #1: aa
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/regex/match_results/dsc str}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
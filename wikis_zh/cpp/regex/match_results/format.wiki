{{cpp/regex/match_results/title|format}}
{{cpp/regex/match_results/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1=
template&lt; class OutputIt &gt;
OutputIt format( OutputIt out,
                 const char_type* fmt_first, const char_type* fmt_last,
                 std::regex_constants::match_flag_type flags =
                     std::regex_constants::format_default ) const;
}}
{{dcl|num=2|since=c++11|1=
template&lt; class OutputIt, class ST, class SA &gt;
OutputIt format( OutputIt out,
                 const basic_string&lt;char_type,ST,SA&gt;&amp; fmt,
                 std::regex_constants::match_flag_type flags =
                     std::regex_constants::format_default ) const;
}}
{{dcl|num=3|since=c++11|1=
template&lt; class ST, class SA &gt;
std::basic_string&lt;char_type,ST,SA&gt; 
    format( const std::basic_string&lt;char_type,ST,SA&gt;&amp; fmt,
            std::regex_constants::match_flag_type flags =
                std::regex_constants::format_default ) const;
}}
{{dcl|num=4|since=c++11|1=
string_type format( const char_type* fmt_s,
                    std::regex_constants::match_flag_type flags =
                        std::regex_constants::format_default ) const;
}}
{{dcl end}}

{{tt|format}} 输出一个格式字符串，它将字符串中的任何格式说明符或转义序列替换为来自 {{c|*this}} 的数据。

@1@ 格式字符序列以范围 {{range|fmt_first|fmt_last}} 定义。将结果字符序列复制到 {{c|out}}。
@2@ 格式字符序列以 {{c|fmt}} 中的字符定义。将结果字符序列复制到 {{c|out}}。
@3,4@ 格式字符序列分别以 {{c|fmt}} 和 {{c|fmt_s}} 中的字符定义。将结果字符序列复制到新构造的 {{lc|std::basic_string}}，并返回它。

{{tt|flags}} 位掩码决定辨识哪些格式说明符和转义序列。

若 {{c|1=ready() != true}} 则 {{tt|format}} 的行为未定义。

===参数===
{{par begin}}
{{par|fmt_begin, fmt_end|指向定义格式字符序列的字符范围的指针}}
{{par|fmt|定义格式字符序列的 {{lc|std::basic_string}}}}
{{par|fmt_s|指向定义格式字符序列的空终止字符串的指针}}
{{par|out|要复制结果字符串到的迭代器}}
{{par|flags|指定辨识哪些格式指定符和转义序列的 {{lc|std::regex_constants::match_flag_type}} 位掩码}}
{{par hreq}}
{{par req named|OutputIt|OutputIterator}}
{{par end}}

===返回值===
@1,2@ {{tt|out}}
@3,4@ 含结果字符序列的新构造字符串。

{{cpp/impldef exception}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;regex&gt;

int main()
{
    std::string s = "for a good time, call 867-5309";
    std::regex phone_regex("\\d{3}-\\d{4}");
    std::smatch phone_match;

    if (std::regex_search(s, phone_match, phone_regex))
    {
        std::string fmt_s = phone_match.format(
            "$`"    // $` 意味着匹配之前的字符
            "[$&amp;]"  // $&amp; 意味着匹配的字符
            "$'");  // $' 意味着后随匹配的字符
        std::cout &lt;&lt; fmt_s &lt;&lt; '\n';
    }   
}
|output=
for a good time, call [867-5309]
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/regex/dsc regex_replace }}
{{dsc inc|cpp/regex/dsc match_flag_type}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
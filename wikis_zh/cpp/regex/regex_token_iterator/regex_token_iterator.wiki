{{cpp/regex/regex_token_iterator/title|regex_token_iterator}}
{{cpp/regex/regex_token_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1= 
regex_token_iterator();
}}
{{dcl|num=2|since=c++11|1= 
regex_token_iterator( BidirIt a, BidirIt b,
                      const regex_type&amp; re,
                      int submatch = 0,
                      std::regex_constants::match_flag_type m =
                          std::regex_constants::match_default );
}}
{{dcl|num=3|since=c++11|1= 
regex_token_iterator( BidirIt a, BidirIt b,
                      const regex_type&amp; re,
                      const std::vector&lt;int&gt;&amp; submatches,
                      std::regex_constants::match_flag_type m =
                          std::regex_constants::match_default );
}}
{{dcl|num=4|since=c++11|1= 
regex_token_iterator( BidirIt a, BidirIt b,
                      const regex_type&amp; re,
                      std::initializer_list&lt;int&gt; submatches,
                      std::regex_constants::match_flag_type m =
                          std::regex_constants::match_default );
}}
{{dcl|num=5|since=c++11|1= 
template&lt; std::size_t N &gt;
regex_token_iterator( BidirIt a, BidirIt b,
                      const regex_type&amp; re,
                      const int (&amp;submatches)[N],
                      std::regex_constants::match_flag_type m =
                          std::regex_constants::match_default );
}}
{{dcl|num=6|since=c++11|1= 
regex_token_iterator( const regex_token_iterator&amp; other );
}}
{{dcl|num=7|since=c++11|1= 
regex_token_iterator( BidirIt a, BidirIt b,
                      const regex_type&amp;&amp; re,
                      int submatch = 0,
                      std::regex_constants::match_flag_type m =
                          std::regex_constants::match_default ) = delete;
}}
{{dcl|num=8|since=c++11|1= 
regex_token_iterator( BidirIt a, BidirIt b,
                      const regex_type&amp;&amp; re,
                      const std::vector&lt;int&gt;&amp; submatches,
                      std::regex_constants::match_flag_type m =
                          std::regex_constants::match_default ) = delete;
}}
{{dcl|num=9|since=c++11|1= 
regex_token_iterator( BidirIt a, BidirIt b,
                      const regex_type&amp;&amp; re,
                      std::initializer_list&lt;int&gt; submatches,
                      std::regex_constants::match_flag_type m =
                          std::regex_constants::match_default ) = delete;
}}
{{dcl|num=10|since=c++11|1= 
template&lt; std::size_t N &gt;
regex_token_iterator( BidirIt a, BidirIt b,
                      const regex_type&amp;&amp; re,
                      const int (&amp;submatches)[N],
                      std::regex_constants::match_flag_type m =
                          std::regex_constants::match_default ) = delete;
}}
{{dcl end}}

构造新的 {{tt|regex_token_iterator}}：

@1@ 默认构造函数。构造序列尾迭代器。

@2-5@ 首先，将 {{c|submatches}} 或 {{c|submatch}} 实参的请求的子匹配列表，复制到存储于迭代器的成员列表中，再通过传递 {{c|a}}、{{c|b}}、{{c|re}} 和 {{c|m}} 到其四参数构造函数（该构造函数进行对 {{lc|std::regex_search}} 的初始调用）构造成员 {{lc|std::regex_iterator}}，然后设置 {{c|submatches}} 的内部计数器为零。
* 若构造后，成员 {{tt|regex_iterator}} 不是序列尾迭代器，则设置成员指针为当前 {{lc|std::sub_match}} 的地址。
* 否则（若成员 {{tt|regex_iterator}} 是序列尾迭代器），但值 {{c|-1}} 是 {{tt|submatches}}/{{tt|submatch}} 中的值之一，则将 {{c|*this}} 转变为指向范围 {{range|a|b}} 的''后缀迭代器''（整个字符串是非匹配的后缀）。
* 否则，（若 {{c|-1}} 不在子匹配列表中），将 {{c|*this}} 转变为序列尾迭代器。

若 {{c|submatches}} 中任何值小于 {{c|-1}} 则行为未定义。

@6@ 复制构造函数：进行逐元素复制（包含对成员 {{tt|regex_iterator}} 和指向 {{lc|sub_match}} 的成员指针的复制）。

@7-10@ 禁止以临时 regex 调用重载 {{v|2-5}} ，因为否则返回的迭代器会被立即非法化。

===参数===
{{par begin}}
{{par|a|指向目标字符序列起始的{{named req|BidirectionalIterator}}}}
{{par|b|指向目标字符序列末尾的{{named req|BidirectionalIterator}}}}
{{par|re|用于在目标字符序列中搜索的正则表达式}}
{{par|submatch|应当返回的子匹配的索引。"0" 表示整体匹配，而 "-1" 表示未匹配的部分（例如匹配间的部分）}}
{{par|submatches|应当在每个匹配内迭代的子匹配的索引的序列，可能包含代表非匹配片段的特殊值 {{c|-1}}}}
{{par|m|掌管 {{c|re}} 行为的标志}}
{{par end}}

===参阅===
{{example}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2332|std=C++11|before=从临时 {{tt|basic_regex}} 构造的 {{tt|regex_token_iterator}} 立即变为非法|after=通过被删除的重载禁止这种构造}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
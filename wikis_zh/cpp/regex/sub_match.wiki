{{cpp/title|sub_match}}
{{cpp/regex/sub_match/navbar}}
{{ddcl|header=regex|since=c++11|
template&lt;class BidirIt&gt;
class sub_match;
}}

正则表达式引擎用类模板 {{tt|std::sub_match}} 表示有标记子表达式所匹配的字符序列。
匹配是目标范围中匹配正则表达式的 {{range|begin|end}} 对，不过拥有附加的观察器函数以增进代码清晰度。

只有默认构造函数是可公开访问的。在处理正则表达式算法期间，{{tt|std::sub_match}} 的实例作为 {{lc|std::match_results}} 容器的一部分正常构造并移居。

成员函数返回定义的默认值，除非 [[#数据成员|{{tt|matched}}]] 成员是 {{c|true}}。

{{tt|std::sub_match}} 继承自 {{c/core|std::pair&lt;BidirIt, BidirIt&gt;}}，尽管它不能当做 {{lc|std::pair}} 对象，因为成员函数，如赋值，不会有预计效果。

===类型要求===
{{par begin}}
{{par req named|BidirIt|BidirectionalIterator}}
{{par end}}

===特化===
为常见字符类型提供数个特化：

{{dsc begin}}
{{dsc header|regex}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|std::csub_match}}|{{c/core|std::sub_match&lt;const char*&gt;}}}}
{{dsc|{{tt|std::wcsub_match}}|{{c/core|std::sub_match&lt;const wchar_t*&gt;}}}}
{{dsc|{{tt|std::ssub_match}}|{{c/core|std::sub_match&lt;std::string::const_iterator&gt;}}}}
{{dsc|{{tt|std::wssub_match}}|{{c/core|std::sub_match&lt;std::wstring::const_iterator&gt;}}}}
{{dsc end}}

===成员类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|iterator}}|{{tt|BidirIt}}}}
{{dsc|{{tt|value_type}}|{{c/core|std::iterator_traits&lt;BidirIt&gt;::value_type}}}}
{{dsc|{{tt|difference_type}}|{{c/core|std::iterator_traits&lt;BidirIt&gt;::difference_type}}}}
{{dsc|{{tt|string_type}}|{{c/core|std::basic_string&lt;value_type&gt;}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|描述}}
{{dsc mem obj|nolink=true|{{dsc small|{{c/core|bool}}}} {{tt|matched}}|此匹配是否成功}}
{{dsc end}}

{{inherited|[[cpp/utility/pair|{{small|std::}}pair]]|
{{dsc begin}}
{{dsc mem obj|nolink=true|{{dsc small|BidirIt}} first|匹配序列的开始}}
{{dsc mem obj|nolink=true|{{dsc small|BidirIt}} second|匹配序列的结尾后一位置}}
{{dsc end}}
}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/regex/sub_match/dsc constructor}}
{{dsc h2|观察器}}
{{dsc inc|cpp/regex/sub_match/dsc length}}
{{dsc inc|cpp/regex/sub_match/dsc str}}
{{dsc inc|cpp/regex/sub_match/dsc compare}}
{{dsc h2|修改器}}
{{dsc inc|cpp/regex/sub_match/dsc swap}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/regex/sub_match/dsc operator_cmp}}
{{dsc inc|cpp/regex/sub_match/dsc operator_ltlt}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;regex&gt;
#include &lt;string&gt;
 
int main()
{
    std::string sentence{"Friday the thirteenth."};
    const std::regex re{"([A-z]+) ([a-z]+) ([a-z]+)"};
    std::smatch words;
    std::regex_search(sentence, words, re);
    std::cout &lt;&lt; std::boolalpha;
    for (const auto&amp; m : words)
    {
        assert(m.matched);
        std::cout &lt;&lt; "m: [" &lt;&lt; m &lt;&lt; "], m.length(): " &lt;&lt; m.length() &lt;&lt; ", "
                     "*m.first: '" &lt;&lt; *m.first &lt;&lt; "', "
                     "*m.second: '" &lt;&lt; *m.second &lt;&lt; "'\n";
    }
}
|output=
m: [Friday the thirteenth], m.length(): 21, *m.first: 'F', *m.second: '.'
m: [Friday], m.length(): 6, *m.first: 'F', *m.second: ' '
m: [the], m.length(): 3, *m.first: 't', *m.second: ' '
m: [thirteenth], m.length(): 10, *m.first: 't', *m.second: '.'
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/regex/dsc regex_token_iterator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
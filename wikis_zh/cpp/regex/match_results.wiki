{{cpp/title|match_results}}
{{cpp/regex/match_results/navbar}}
{{dcl begin}}
{{dcl header|regex}}
{{dcl|num=1|since=c++11|1=
template&lt;
    class BidirIt,
    class Alloc = std::allocator&lt;std::sub_match&lt;BidirIt&gt;&gt;
&gt; class match_results;
}}
{{dcl|num=2|since=c++17|1=
namespace pmr {
    template &lt;class BidirIt&gt;
    using match_results = std::match_results&lt;BidirIt,
                              std::pmr::polymorphic_allocator&lt;
                                  std::sub_match&lt;BidirIt&gt;&gt;&gt;;
}
}}
{{dcl end}}

类模板 {{tt|std::match_results}} 保有表示正则表达式匹配结果的字符序列的汇集。

这是特殊的知分配器容器。它只能默认创建、从 {{lc|std::regex_iterator}} 获得，或通过 {{lc|std::regex_search}} 或 {{lc|std::regex_match}} 修改。因为 {{tt|std::match_results}} 保有一组 {{lc|std::sub_match}}，它们每个都是一对指向匹配的原初字符序列中的迭代器，所以如果原初字符序列被销毁，或指向它的迭代器因为其他原因失效，那么检验 {{tt|std::match_results}} 的行为未定义。

{{tt|std::match_results}} 中所含的首个 {{lc|std::sub_match}}（索引 0）始终表示正则表达式所做的目标序列内的完整匹配，而后继的 {{lc|std::sub_match}} 表示按顺序对应分隔正则表达式中子表达式的左括号的子表达式匹配。

{{tt|std::match_results}} 满足{{named req|AllocatorAwareContainer}}与{{named req|SequenceContainer}}的要求，但仅支持复制赋值、移动赋值和为常容器定义的操作，并且比较函数的语义与对容器要求的语义不同。

===类型要求===
{{par begin}}
{{par req named|BidirIt|BidirectionalIterator}}
{{par req named|Alloc|Allocator}}
{{par end}}

===特化===
提供几个对常用字符序列类型的特化：

{{dsc begin}}
{{dsc header|regex}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|std::cmatch}}|{{c/core|std::match_results&lt;const char*&gt;}}}}
{{dsc|{{tt|std::wcmatch}}|{{c/core|std::match_results&lt;const wchar_t*&gt;}}}}
{{dsc|{{tt|std::smatch}}|{{c/core|std::match_results&lt;std::string::const_iterator&gt;}}}}
{{dsc|{{tt|std::wsmatch}}|{{c/core|std::match_results&lt;std::wstring::const_iterator&gt;}}}}
{{dsc|{{tt|std::pmr::cmatch}} {{mark c++17}}|{{c/core|std::pmr::match_results&lt;const char*&gt;}}}}
{{dsc|{{tt|std::pmr::wcmatch}} {{mark c++17}}|{{c/core|std::pmr::match_results&lt;const wchar_t*&gt;}}}}
{{dsc|{{tt|std::pmr::smatch}} {{mark c++17}}|{{c/core|std::pmr::match_results&lt;std::string::const_iterator&gt;}}}}
{{dsc|{{tt|std::pmr::wsmatch}} {{mark c++17}}|{{c/core|std::pmr::match_results&lt;std::wstring::const_iterator&gt;}}}}
{{dsc end}}

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|allocator_type}}|{{tt|Allocator}}}}
{{dsc|{{tt|value_type}}|{{c/core|std::sub_match&lt;BidirIt&gt;}}}}
{{dsc|{{tt|const_reference}}|{{c/core|const value_type&amp;}}}}
{{dsc|{{tt|reference}}|{{tt|value_type&amp;}}}}
{{dsc|{{tt|const_iterator}}|''由实现定义''（取决于底层容器）}}
{{dsc|{{tt|iterator}}|{{tt|const_iterator}}}}
{{dsc|{{tt|difference_type}}|{{c/core|std::iterator_traits&lt;BidirIt&gt;::difference_type}}}}
{{dsc|{{tt|size_type}}|{{c/core|std::allocator_traits&lt;Alloc&gt;::size_type}}}}
{{dsc|{{tt|char_type}}|{{c/core|std::iterator_traits&lt;BidirIt&gt;::value_type}}}}
{{dsc|{{tt|string_type}}|{{c/core|std::basic_string&lt;char_type&gt;}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/regex/match_results/dsc constructor}}
{{dsc inc|cpp/regex/match_results/dsc destructor}}
{{dsc inc|cpp/regex/match_results/dsc operator{{=}}}}
{{dsc inc|cpp/regex/match_results/dsc get_allocator}}

{{dsc h2|状态}}
{{dsc mem fun|cpp/regex/match_results/ready|检查结果是否可用}}

{{dsc h2|大小}}
{{dsc inc|cpp/regex/match_results/dsc empty}}
{{dsc inc|cpp/regex/match_results/dsc size}}
{{dsc inc|cpp/regex/match_results/dsc max_size}}

{{dsc h2|元素访问}}
{{dsc inc|cpp/regex/match_results/dsc length}}
{{dsc inc|cpp/regex/match_results/dsc position}}
{{dsc inc|cpp/regex/match_results/dsc str}}
{{dsc inc|cpp/regex/match_results/dsc operator_at}}
{{dsc inc|cpp/regex/match_results/dsc prefix}}
{{dsc inc|cpp/regex/match_results/dsc suffix}}

{{dsc h2|迭代器}}
{{dsc inc|cpp/regex/match_results/dsc begin}}
{{dsc inc|cpp/regex/match_results/dsc end}}

{{dsc h2|格式}}
{{dsc inc|cpp/regex/match_results/dsc format}}

{{dsc h2|修改器}}
{{dsc inc|cpp/regex/match_results/dsc swap}}

{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/regex/match_results/dsc operator_cmp}}
{{dsc inc|cpp/regex/match_results/dsc swap2}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|ko|pt|ru}}
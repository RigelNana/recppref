{{title|C++17}}
{{cpp/version/navbar}}

C++17 是小版本 C++14 之后的一个大版本，它提供了新的语言和库功能特性。该标准于 2017 年 12 月发布。

下列特性被合并入 C++17：
* 来自[[cpp/experimental/fs|文件系统 TS]]：[[cpp/filesystem|文件系统库]]
* 来自[[cpp/experimental/lib_extensions|库基础 v1 TS]]：{{lc|std::any}}、{{lc|std::optional}}、{{lc|std::string_view}}、{{lc|std::apply}}、[[cpp/memory#分配器|多态分配器]]、{{ls|cpp/utility/functional#搜索器}}等等
* 来自[[cpp/experimental/lib_extensions_2|库基础 v2 TS]]：{{lc|std::void_t}}、{{lc|std::conjunction}}、{{lc|std::disjunction}}、{{lc|std::negation}}、{{lc|std::not_fn}}、{{lc|std::gcd}}、{{lc|std::lcm}}
* 来自[[cpp/experimental/parallelism|并行 v1 TS]]：[[cpp/algorithm/execution_policy_tag_t|执行策略]]、{{lc|std::reduce}}、{{lc|std::inclusive_scan}}、{{lc|std::exclusive_scan}} 等等，但不包括 {{tt|exception_list}}
* 来自[[cpp/experimental/special_functions|数学特殊函数 IS]]：[[cpp/numeric/special_functions|数学特殊函数]]
* 来自 [[c/11|C11]]：{{lc|std::aligned_alloc}}、{{lc|std::timespec_get}}

{{todo}}

==过时特性==

=====已移除特性=====
* {{lc|std::auto_ptr}}
* [[cpp/utility/functional#旧式绑定器与适配器|已弃用的函数对象]]
* {{lc|std::random_shuffle}}
* {{lc|std::unexpected}}
* [[cpp/io/ios_base#弃用的成员类型|过时的 {{tt|iostream}} 别名]]
* [[cpp/language/operator_alternative#三标符 (C++17 中移除)|三标符]]
* {{ltt|cpp/keyword/register}} 关键字
* [[cpp/language/operator_incdec|{{tt|bool}} 类型的自增操作]]
* [[cpp/language/except_spec|动态异常说明]]

=====弃用特性=====
* {{lc|std::iterator}}
* {{lc|std::raw_storage_iterator}}
* {{lc|std::get_temporary_buffer}}
* {{lc|std::is_literal_type}}
* {{lc|std::result_of}}
* 整个 {{header|codecvt}} 头文件

== 新的语言特性 ==

* [[cpp/language/character literal|{{tt|u8}} 字符字面量]]
* 将 {{ltt|cpp/language/noexcept_spec|noexcept}} 作为类型系统的一部分
* 新的[[cpp/language/eval order|求值顺序]]规则
* [[cpp/language/lambda#Lambda 捕获|lambda 表达式捕获 {{c|*this}}]]

* '''{{ltt|cpp/keyword/constexpr}}'''
*: 编译期的 [[cpp/language/if|constexpr if 语句]]
*: [[cpp/language/lambda|constexpr 的 lambda 表达式]]

* '''变量'''
*: [[cpp/language/inline|inline 变量]]
*: [[cpp/language/structured binding|结构化绑定]]
*: {{ltt|cpp/language/if}} 和 {{ltt|cpp/language/switch}} 语句中的初始化器
*: 强制的[[cpp/language/copy elision|复制消除]]
*: {{ls|cpp/language/implicit_conversion#临时量实质化}}

* '''模板'''
*: [[cpp/language/fold|折叠表达式]] {{c|( ... )}}
*: [[cpp/language/class template argument deduction|类模板实参推导]] {{c|tuple t(4, 3, 2.5)}}
*: {{ltt|cpp/keyword/auto}} 占位的非类型[[cpp/language/template parameters|模板形参]]

* '''[[cpp/language/namespace|命名空间]]'''
*: 简化的嵌套命名空间
*: {{tt|using}} 声明语句可以声明多个名称
*: [[cpp/language/attributes|属性命名空间]]不必重复
* '''新[[cpp/language/attributes|属性]]：'''
** {{attr|fallthrough}}
** {{attr|maybe_unused}}
** {{attr|nodiscard}}
* {{ltt|cpp/preprocessor/include|__has_include}}

== 新的头文件 ==

* {{header|any}}
* {{header|charconv}}
* {{header|execution}}
* {{header|filesystem}}
* {{header|memory_resource}}
* {{header|optional}}
* {{header|string_view}}
* {{header|variant}}

== 新的库特性 ==

===工具类型===
* {{lc|std::tuple}}：
** {{lc|std::apply}}
** {{lc|std::make_from_tuple}}
** [[cpp/utility/tuple/deduction_guides|推导指引]]
* {{lc|std::any}}
* {{lc|std::optional}}
* {{lc|std::variant}}
* {{ls|cpp/utility/functional#搜索器}}
* {{lc|std::as_const}}
* {{lc|std::not_fn}}

===内存管理===
* 未初始化内存算法
** {{lc|std::destroy_at}}
** {{lc|std::destroy}}
** {{lc|std::destroy_n}}
** {{lc|std::uninitialized_move}}
** {{lc|std::uninitialized_value_construct}}
* {{ltt|cpp/memory/enable_shared_from_this/weak_from_this}}
* {{lc|std::pmr::memory_resource}} 与 {{lc|std::pmr::polymorphic_allocator}}
* {{lc|std::aligned_alloc}}
* ''通透''的 {{lc|std::owner_less}}
* {{lc|std::shared_ptr}} 的数组支持
* 带有显式对齐的[[cpp/memory/new/operator_new|分配函数]]

===编译时编程===
* {{ltt|cpp/types/byte|std::byte}} &lt;!-- lc 链接呢 --&gt;
* {{lc|std::conjunction}}/{{lc|std::disjunction}}/{{lc|std::negation}}
* [[cpp/types|类型特征]]变量模板（{{tt|''xxx''_v}}，如 {{lc|std::is_same_v}}）
* {{lc|std::is_swappable}}
* {{ltt std|cpp/types/is_invocable}} &lt;!-- lc 链接呢 --&gt;
* {{ltt std|cpp/types/is_aggregate}} &lt;!-- 同上 --&gt;
* {{lc|std::has_unique_object_representations}}

===算法===
* {{lc|std::clamp}}
* 并行算法与[[cpp/algorithm/execution_policy_tag_t|执行策略]]
* {{lc|std::inclusive_scan}}
* {{lc|std::exclusive_scan}}
* {{lc|std::gcd}}
* {{lc|std::lcm}}
* {{lc|std::reduce}}

===迭代器与容器===
* map/set {{ltt|cpp/container/map/extract}} 与 map/set {{ltt|cpp/container/map/merge}}
* map/unordered_map {{ltt|cpp/container/map/try_emplace|try_emplace}} 与 {{ltt|cpp/container/map/insert_or_assign|insert_or_assign}}
* 连续迭代器（{{named req|ContiguousIterator}}）
* 非成员 {{lc|std::size}}/{{lc|std::empty}}/{{lc|std::data}}

===数值===
* [[cpp/numeric/special_functions|数学特殊函数]]
* 三维 {{lc|std::hypot}}

===其他=== &lt;!-- 怎么这么多没有 lc 链接的 --&gt;
* [[cpp/thread/hardware_destructive_interference_size|缓存线接口]]
* {{lc|std::launder}}
* {{lc|std::uncaught_exceptions}}
* {{ltt|cpp/utility/to_chars|std::to_chars}}/{{ltt|cpp/utility/from_chars|std::from_chars}}
* {{ltt|cpp/atomic/atomic/is_always_lock_free|std::atomic&lt;T&gt;::is_always_lock_free}}
* {{ltt|cpp/thread/scoped_lock|std::scoped_lock}}
* {{lc|std::timespec_get}}
* {{lc|std::chrono::duration}} 与 {{lc|std::chrono::time_point}} 的取整函数

== 缺陷报告 ==

{{cpp/language/history/DR17}}

== 编译器支持 ==
{{cpp/compiler support/17}}
{{cpp/compiler support/note}}

===外部链接===
{{elink begin}}
{{elink|{{enwiki|C++17}} - Wikipedia}}
{{elink|[https://github.com/makelinux/examples/blob/HEAD/cpp/17.cpp 可运行的 C++17 示例]}}
{{elink end}}

{{langlinks|de|en|es|ja|ru}}
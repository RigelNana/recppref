{{title|C++11}}
{{cpp/version/navbar}}

'''C++11''' 是 C++ 的第二个主要版本，并且是从 C++98 起的最重要更新。它引入了大量更改，标准化了既有实践，并改进了对 C++ 程序员可用的抽象。

在它最终由 ISO 在 2011 年 8 月 12 日采纳前，人们曾使用名称“C++0x”，因为它曾被期待在 2010 年之前发布。C++03 与 C++11 期间花了 8 年时间，故而这是迄今为止最长的版本间隔。从那时起，C++ 有规律地每 3 年更新一次。

{{todo|reason=更详细的描述}}

下列功能特性已并入 C++11：
* 来自 [[cpp/experimental|TR1]]：TR1 中除了[[cpp/numeric/special_functions|数学特殊函数]]之外的全部内容。
* 来自 Boost：[[cpp/thread|线程库]]、{{ltt|cpp/error/exception_ptr}}、{{ltt|cpp/error/error_code}} 与 {{ltt|cpp/error/error_condition}}、迭代器改进（{{ltt|cpp/iterator/begin}}、{{ltt|cpp/iterator/end}}、{{ltt|cpp/iterator/next}}、{{ltt|cpp/iterator/prev}}）
* 来自 C：C 风格 Unicode 转换函数

==核心语言功能特性==
* {{ltt|cpp/language/auto}} 与 {{ltt|cpp/language/decltype}}
* [[cpp/language/function#函数定义|预置]]与[[cpp/language/function#弃置函数|弃置]]的函数
* {{ltt|cpp/language/final}} 与 {{ltt|cpp/language/override}}
* [[cpp/language/function#函数声明|尾随返回类型]]
* [[cpp/language/reference|右值引用]]
* [[cpp/language/move constructor|移动构造函数]]与[[cpp/language/move assignment|移动赋值运算符]]
* [[cpp/language/enum|有作用域枚举]]
* {{ltt|cpp/language/constexpr}} 与[[cpp/named req/LiteralType|字面类型]]
* [[cpp/language/list initialization|列表初始化]]
* [[cpp/language/initializer list#委托的构造函数|委托]]与[[cpp/language/using declaration|继承]]的构造函数
* 花括号或等号[[cpp/language/initialization|初始化器]]
* {{ltt|cpp/language/nullptr}}
* {{ltt|cpp/language/types#整数类型|long long}}
* [[cpp/language/types#字符类型|{{c/core|char16_t}} 与 {{c/core|char32_t}}]]
* [[cpp/language/type_alias|类型别名]]
* [[cpp/language/parameter_pack|变参数模板]]
* [[cpp/language/union|推广的（非平凡）联合体]]
* [[cpp/named req/PODType|推广的 POD]]（[[cpp/named req/TrivialType|平凡类型]]与[[cpp/named req/StandardLayoutType|标准布局类型]]）
* [[cpp/language/string_literal|Unicode 字符串字面量]]
* [[cpp/language/user_literal|用户定义字面量]]
* [[cpp/language/attributes|属性]]
* [[cpp/language/lambda|lambda 表达式]]
* {{ltt|cpp/language/noexcept_spec|noexcept}} 说明符与 {{ltt|cpp/language/noexcept}} 运算符
* {{ltt|cpp/language/alignof}} 与 {{ltt|cpp/language/alignas}}
* 多线程[[cpp/language/memory_model|内存模型]]
* [[cpp/language/storage_duration#存储期|线程局部存储]]
* [[cpp/memory#垃圾收集器支持|GC 接口]] {{mark life|removed=c++23}}
* [[cpp/language/range-for|范围 {{c/core|for}}]] （基于 Boost 库）
* {{ltt|cpp/language/static_assert}}（基于 Boost 库）
{{todo}}

==库功能特性==
===标头===
* {{header|array}}
* {{header|atomic}}
* {{header|cfenv}}
* {{header|chrono}}
* {{header|cinttypes}}
* {{header|condition_variable}}
* {{header|cstdint}}
* {{header|cuchar}}
* {{header|forward_list}}
* {{header|future}}
* {{header|initializer_list}}
* {{header|mutex}}
* {{header|random}}
* {{header|ratio}}
* {{header|regex}}
* {{header|scoped_allocator}}
* {{header|system_error}}
* {{header|thread}}
* {{header|tuple}}
* {{header|typeindex}}
* {{header|type_traits}}
* {{header|unordered_map}}
* {{header|unordered_set}}

===库功能特性===
* [[cpp/thread|并发支持库]]
* {{tt|emplace()}} 与其他既存标准库所有部分的右值引用使用
* {{lc|std::unique_ptr}}
* {{lc|std::move_iterator}}
* {{lc|std::initializer_list}}
* [[cpp/named_req/Allocator#有状态与无状态分配器|有状态]]及[[cpp/memory/scoped_allocator_adaptor|有作用域]]分配器
* {{lc|std::forward_list}}
* [[cpp/chrono|chrono 库]]
* [[cpp/numeric/ratio|ratio 库]]
* 新[[cpp/algorithm|算法]]：
:* {{lc|std::all_of}}、{{lc|std::any_of}}、{{lc|std::none_of}}、
:* {{lc|std::find_if_not}}、
:* {{lc|std::copy_if}}、{{lc|std::copy_n}}、
:* {{lc|std::move (algorithm)|std::move}}、{{lc|std::move_backward}}、
:* {{lc|std::random_shuffle}}、{{lc|std::shuffle}}、
:* {{lc|std::is_partitioned}}、{{lc|std::partition_copy}}、{{lc|std::partition_point}}、
:* {{lc|std::is_sorted}}、{{lc|std::is_sorted_until}}、
:* {{lc|std::is_heap}}、{{lc|std::is_heap_until}}、
:* {{lc|std::minmax}}、{{lc|std::minmax_element}}、
:* {{lc|std::is_permutation}}、
:* {{lc|std::iota}}、
:* {{lc|std::uninitialized_copy_n}}
* [[cpp/locale#独立于本地环境的 Unicode 转换平面|Unicode 转换平面]]
* {{lc|std::function}}
* {{lc|std::exception_ptr}}
* {{lc|std::error_code}} 与 {{lc|std::error_condition}}
* [[cpp/iterator|迭代器]]改进：
:* {{lc|std::begin}}
:* {{lc|std::end}}
:* {{lc|std::next}}
:* {{lc|std::prev}}
* [[cpp/string/multibyte|Unicode 转换函数]]
{{todo}}

==缺陷报告==
{{cpp/language/history/DR11}}

==编译器支持==
{{cpp/compiler support/11}}
{{cpp/compiler support/note}}

===外部链接===
{{elink begin}}
{{elink|{{enwiki|C++11}} - Wikipedia}}
{{elink|[https://github.com/makelinux/examples/blob/HEAD/cpp/11.cpp 可运行的 C++11 示例]}}
{{elink end}}

{{langlinks|en|es|ja|ru}}
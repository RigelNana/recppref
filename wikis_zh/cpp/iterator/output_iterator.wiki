{{cpp/title|output_iterator}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl|since=c++20|1=
template&lt; class I, class T &gt;
    concept output_iterator =
        std::input_or_output_iterator&lt;I&gt; &amp;&amp;
        std::indirectly_writable&lt;I, T&gt; &amp;&amp;
        requires(I i, T&amp;&amp; t) {
            *i++ = std::forward&lt;T&gt;(t); /* 不要求保持相等性 */
        };
}}
{{dcl end}}

{{tt|output_iterator}} 概念是 {{lconcept|input_or_output_iterator}} 的精化，添加了“能用于写入以 {{tt|T}} 编码值类型和值类别的值”的要求（经由 {{lconcept|indirectly_writable}}）。不要求 {{lconcept|equality_comparable}}。

===语义要求===
令 {{tt|E}} 为满足 {{c|decltype((E))}} 为 {{tt|T}} 的表达式，而 {{tt|i}} 为 {{tt|I}} 类型的可解引用对象。{{tt|output_iterator&amp;lt;I, T&gt;}} 仅若其所蕴含的概念均被实现，且 {{c|1=*i++ = E;}} 拥有等价于 {{c|1=*i = E; ++i;}} 的效果时，它才得以实现。

{{cpp/concepts/equality preservation|skip-requires=yes}}

===注解===
不同于{{named req|OutputIterator}}要求，{{tt|output_iterator}} 概念不要求定义迭代器类别标签。

输出迭代器上的算法应该为单趟。

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc input_or_output_iterator}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
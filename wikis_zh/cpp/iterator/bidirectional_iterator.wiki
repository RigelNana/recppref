{{cpp/title|bidirectional_iterator}}
{{cpp/iterator/navbar}}
{{ddcl|header=iterator|since=c++20|1=
template&lt; class I &gt;
    concept bidirectional_iterator =
        std::forward_iterator&lt;I&gt; &amp;&amp;
        std::derived_from&lt;/*ITER_CONCEPT*/&lt;I&gt;, std::bidirectional_iterator_tag&gt; &amp;&amp;
        requires(I i) {
            { --i } -&gt; std::same_as&lt;I&amp;&gt;;
            { i-- } -&gt; std::same_as&lt;I&gt;;
        };
}}

概念 {{tt|bidirectional_iterator}} 精化了 {{lconcept|forward_iterator}}，添加向后移动迭代器的能力。

{{cpp/iterator/iter concept}}

===语义要求===
当且仅当存在某个 {{tt|s}} 使得 {{c|1=++s == r}} 时，称双向迭代器 {{tt|r}} ''可自减''。

仅当 {{co|bidirectional_iterator&lt;I&gt;}} 所纳入的概念均被实现，并且给定两个 {{tt|I}} 类型对象 {{tt|a}} 与 {{tt|b}} 满足以下条件时，它得到实现：
* 若 {{tt|a}} 可自减，则 {{tt|a}} 处于表达式 {{c|--a}} 与 {{c|a--}} 的定义域中。
* 前自减生成指代操作数的左值：{{c|1=std::addressof(--a) == std::addressof(a)}}。
* 后自减生成操作数先前的值：若 {{c|1=bool(a == b)}}，则 {{c|1=bool(a-- == b)}}。
* 后自减和前自减在操作数上设施相同修改：若 {{c|1=bool(a == b)}}，则求值 {{tt|a--}} 与 {{tt|--b}} 两者后，{{c|1=bool(a == b)}} 仍然成立。
* 自增和自减互逆：
:* 若 {{tt|a}} 可自增且 {{c|1=bool(a == b)}}，则 {{c|1=bool(--(++a) == b)}}。
:* 若 {{tt|a}} 可自减且 {{c|1=bool(a == b)}}，则 {{c|1=bool(++(--a) == b)}}。

{{cpp/concepts/equality preservation}}

===注解===
不同于{{named req|BidirectionalIterator}}的要求，{{tt|bidirectional_iterator}} 概念不要求解引用返回左值。

===示例===
最小化的双向迭代器。

{{source|1=
#include &lt;cstddef&gt;
#include &lt;iterator&gt;

struct SimpleBidiIterator
{
    using difference_type = std::ptrdiff_t;
    using value_type = int;

    int operator*() const;

    SimpleBidiIterator&amp; operator++();

    SimpleBidiIterator operator++(int)
    {
        auto tmp = *this;
        ++*this;
        return tmp;
    }

    SimpleBidiIterator&amp; operator--();

    SimpleBidiIterator operator--(int)
    {
        auto tmp = *this;
        --*this;
        return tmp;
    }

    bool operator==(const SimpleBidiIterator&amp;) const;
};

static_assert(std::bidirectional_iterator&lt;SimpleBidiIterator&gt;);
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc forward_iterator}}
{{dsc inc|cpp/iterator/dsc random_access_iterator}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
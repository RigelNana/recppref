{{cpp/iterator/ostream_iterator/title|ostream_iterator}}
{{cpp/iterator/ostream_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|1=
ostream_iterator( ostream_type&amp; stream, const CharT* delim );
}}
{{dcl|num=2|1=
ostream_iterator( ostream_type&amp; stream );
}}
{{dcl end}}

以 {{c|stream}}（通过存储地址）作为关联流并构造迭代器。

@1@ 以 {{c|delim}} 作为分隔符。

@2@ 以空指针作为分隔符。

===参数===
{{par begin}}
{{par|stream|此迭代器所访问的输出流}}
{{par|delim|在每次输出后插入流的空终止字符串}}
{{par end}}

===示例===
{{example
| 
|code=

#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;numeric&gt;

int main()
{
    std::ostream_iterator&lt;char&gt; oo{std::cout};
    std::ostream_iterator&lt;int&gt; i1{std::cout, ", "};
    std::fill_n(i1, 5, -1);
    *oo++ = '\n';
    
    std::ostream_iterator&lt;double&gt; i2{std::cout, "; "};
    *i2++ = 3.14;
    *i2++ = 2.71;
    *oo++ = '\n';
    
    std::common_iterator&lt;std::counted_iterator&lt;std::ostream_iterator&lt;float&gt;&gt;,
                         std::default_sentinel_t&gt;
        first{std::counted_iterator{std::ostream_iterator&lt;float&gt;{std::cout," ~ "}, 5}&lt;!----&gt;},
        last{std::default_sentinel};
    std::iota(first, last, 2.2);
    *oo++ = '\n';
}
|output=
-1, -1, -1, -1, -1,
3.14; 2.71;
2.2 ~ 3.2 ~ 4.2 ~ 5.2 ~ 6.2 ~
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=1280|std=C++98|before={{c|stream}} 会被直接存储|after=改为存储它的地址}}
{{dr list item|paper=P2325R3|std=C++20|before=由于 C++20 迭代器必须实现 {{lconcept|default_initializable}} 而提供默认构造函数|after=与该要求一同移除}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
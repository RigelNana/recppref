{{cpp/iterator/ostream_iterator/title|operator{{=}}}}
{{cpp/iterator/ostream_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|1=
ostream_iterator&amp; operator=( const ostream_iterator&amp; );
}}
{{dcl|num=2|1=
ostream_iterator&amp; operator=( const T&amp; value );
}}
{{dcl end}}

@1@ 复制赋值运算符。赋值 {{c|other}} 的内容。
@2@ 插入 {{c|value}} 到关联的流，然后插入分隔符，若在构造时指定它。

若 {{tt|out_stream}} 是指向关联 {{lc|std::basic_ostream}} 的指针而 {{tt|delim}} 是在此对象构造时指定的分隔符，则效果等价于

{{c|1=
*out_stream &lt;&lt; value;
if(delim != 0)
    *out_stream &lt;&lt; delim;
return *this;
}}

===参数===
{{par begin}}
{{par|value|要插入的对象}}
{{par end}}

===返回值===
{{c|*this}}

===注解===
{{tt|T}} 可以是任何拥有用户定义 {{tt|operator&lt;&lt;}} 的类。

C++20 以前，复制赋值运算符的存在依赖于[[cpp/language/copy_assignment#隐式定义的复制赋值运算符|已弃用的隐式生成]]。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;

int main()
{
    std::ostream_iterator&lt;int&gt; i1(std::cout, ", ");
    *i1++ = 1; // 通常形式，为标准算法所用
    *++i1 = 2;
    i1 = 3; // * 或 ++ 皆非必须
    std::ostream_iterator&lt;double&gt; i2(std::cout);
    i2 = 3.14;
    std::cout &lt;&lt; '\n';
}
|output=
1, 2, 3, 3.14
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
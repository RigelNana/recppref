{{cpp/iterator/istream_iterator/title|istream_iterator}}
{{cpp/iterator/istream_iterator/navbar}}
{{dcl begin}}
{{dcl rev multi|num=1
|until1=c++11|dcl1=
istream_iterator();
|dcl2=
constexpr istream_iterator();
}}
{{dcl|num=2|since=c++20|1=
constexpr istream_iterator( std::default_sentinel_t );
}}
{{dcl|num=3|1=
istream_iterator( istream_type&amp; stream );
}}
{{dcl rev multi|num=4
|until1=c++11|dcl1=
istream_iterator( const istream_iterator&amp; other );
|dcl2=
istream_iterator( const istream_iterator&amp; other ) = default;
}}
{{dcl end}}

@1,2@ 构造流尾迭代器{{rev inl|since=c++11|，值初始化存储的值。如果在定义 {{c|1=auto x = T();}} 中的初始化器是常量初始化器，那么此构造函数是 constexpr 的}}。
@3@ 初始化迭代器，在数据成员中存储 {{c|stream}} 的地址，再从输入流进行首次读取以初始化数据成员中的缓存值。
@4@ 构造 {{c|other}} 的副本。{{rev inl|since=c++11|如果 {{c|std::is_trivially_copy_constructible&lt;T&gt;::value}} 是 {{c|true}}&lt;!-- P0503R0 --&gt;，那么此构造函数是平凡复制构造函数。}}

===参数===
{{par begin}}
{{par|stream|用于初始化 {{tt|istream_iterator}} 的流}}
{{par|other|同类型的另一 {{tt|istream_iterator}}}}
{{par end}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;sstream&gt;

int main()
{
    std::istringstream stream("1 2 3 4 5");
    std::copy(
        std::istream_iterator&lt;int&gt;(stream),
        std::istream_iterator&lt;int&gt;(),
        std::ostream_iterator&lt;int&gt;(std::cout, " ")
    );
}
|output=
1 2 3 4 5
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=1280|std=C++98|before=重载 {{v|3}} 会直接存储 {{c|stream}}|after=改为存储它的地址}}
{{dr list item|paper=P0738R2|std=C++98|before=首次读取可以延迟到首次解引用|after=一定会在构造函数中进行}}
{{dr list end}}

{{langlinks|en|es|ja|ru}}
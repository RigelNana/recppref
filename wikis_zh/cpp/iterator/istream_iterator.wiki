{{cpp/title|istream_iterator}}
{{cpp/iterator/istream_iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl rev begin}}
{{dcl|until=c++17|1=
template&lt; class T,
          class CharT = char,
          class Traits = std::char_traits&lt;CharT&gt;,
          class Distance = std::ptrdiff_t &gt;
class istream_iterator
    : public std::iterator&lt;std::input_iterator_tag, T, Distance, const T*, const T&amp;&gt;
}}
{{dcl|since=c++17|1=
template&lt; class T,
          class CharT = char,
          class Traits = std::char_traits&lt;CharT&gt;,
          class Distance = std::ptrdiff_t &gt;
class istream_iterator;
}}
{{dcl rev end}}
{{dcl end}}

{{tt|std::istream_iterator}} 是一种单趟输入迭代器，通过调用适当的 {{tt|operator&gt;&gt;}}，从为之创建迭代器的 {{lc|std::basic_istream}} 对象读取 {{tt|T}} 类型的相继对象。实际读取操作在自增，而非解引用迭代器时进行。在构造迭代器时读取首个对象。解引用只返回最近读取的对象的副本。

默认构造的 {{tt|std::istream_iterator}} 被称为''流尾''迭代器。有效的 {{tt|std::istream_iterator}} 抵达底层流尾时，它变得等于流尾迭代器。解引用和进一步自增它导致未定义行为。流尾迭代器在生存期结束前保持流尾状态，它无法再变成非流尾迭代器。

{{tt|std::istream_iterator}} 的典型实现保有两个数据成员：指向关联 {{lc|std::basic_istream}} 对象的指针和最近读取的 {{tt|T}} 类型的值。

{{tt|T}} 必须满足{{named req|DefaultConstructible}}、{{named req|CopyConstructible}}和{{named req|CopyAssignable}}要求。{{mark unreviewed dr|LWG|2878}}

{{cpp/iterator/iterator/inherit|std::input_iterator_tag|T|Distance|const T*|const T&amp;|ext=
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc|{{tt|traits_type}}|{{tt|Traits}}}}
{{dsc|{{tt|istream_type}}|{{c/core|std::basic_istream&lt;CharT, Traits&gt;}}}}
}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/iterator/istream_iterator/dsc constructor}}
{{dsc inc|cpp/iterator/istream_iterator/dsc destructor}}
{{dsc inc|cpp/iterator/istream_iterator/dsc operator*}}
{{dsc inc|cpp/iterator/istream_iterator/dsc operator arith}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/iterator/istream_iterator/dsc operator cmp}}
{{dsc end}}

===注解===
读字符时，{{tt|std::istream_iterator}} 默认跳过空白（除非用 {{lc|std::noskipws}} 或等价物禁用，而 {{lc|std::istreambuf_iterator}} 不跳过。另外，{{lc|std::istreambuf_iterator}} 更有效率，因为它避免对每个字符构造并析构一次 sentry 对象的开销。

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;numeric&gt;
#include &lt;sstream&gt;

int main()
{
    std::istringstream str("0.1 0.2 0.3 0.4");
    std::partial_sum(std::istream_iterator&lt;double&gt;(str),
                     std::istream_iterator&lt;double&gt;(),
                     std::ostream_iterator&lt;double&gt;(std::cout, " "));
    
    std::istringstream str2("1 3 5 7 8 9 10");
    auto it = std::find_if(std::istream_iterator&lt;int&gt;(str2),
                           std::istream_iterator&lt;int&gt;(),
                           [](int i){ return i % 2 == 0; });
    
    if (it != std::istream_iterator&lt;int&gt;())
        std::cout &lt;&lt; "\n第一个偶数是 " &lt;&lt; *it &lt;&lt; "。\n";
    // " 9 10" 留在流中
}
|output=
0.1 0.3 0.6 1 
第一个偶数是 8。
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P0738R2|std=C++98|before=首次读取可以延迟到首次解引用|after=一定会在构造函数中进行}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc ostream_iterator}}
{{dsc inc|cpp/iterator/dsc istreambuf_iterator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|ostreambuf_iterator}}
{{cpp/iterator/ostreambuf_iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl rev begin}}
{{dcl|until=c++17|1=
template&lt; class CharT, class Traits = std::char_traits&lt;CharT&gt; &gt;
class ostreambuf_iterator
    : public std::iterator&lt;std::output_iterator_tag, void, void, void, void&gt;
}}
{{dcl|since=c++17|1=
template&lt; class CharT, class Traits = std::char_traits&lt;CharT&gt; &gt;
class ostreambuf_iterator;
}}
{{dcl rev end}}
{{dcl end}}

{{tt|std::ostreambuf_iterator}} 是单趟{{named req|OutputIterator|输出迭代器}}，写入相继元素到为之创建迭代器的 {{lc|std::basic_streambuf}} 对象。实际写操作在赋值给迭代器（无论是否解引用）时进行。自增 {{tt|std::ostreambuf_iterator}} 是无操作。

典型实现中，{{tt|std::ostreambuf_iterator}} 仅有的数据成员是指向关联 {{tt|std::basic_streambuf}} 的指针，和指示是否抵达文件尾条件的布尔标志。

{{cpp/iterator/iterator/inherit|std::output_iterator_tag|void|void|void|void|ext=
{{dsc|{{tt|char_type}}|{{tt|CharT}}}}
{{dsc|{{tt|traits_type}}|{{tt|Traits}}}}
{{dsc|{{tt|streambuf_type}}|{{c/core|std::basic_streambuf&lt;CharT, Traits&gt;}}}}
{{dsc|{{tt|ostream_type}}|{{c/core|std::basic_ostream&lt;CharT, Traits&gt;}}}}
}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/iterator/ostreambuf_iterator/dsc constructor}}
{{dsc inc|cpp/iterator/ostreambuf_iterator/dsc destructor}}
{{dsc inc|cpp/iterator/ostreambuf_iterator/dsc operator{{=}}}}
{{dsc inc|cpp/iterator/ostreambuf_iterator/dsc operator*}}
{{dsc inc|cpp/iterator/ostreambuf_iterator/dsc operator_arith}}
{{dsc inc|cpp/iterator/ostreambuf_iterator/dsc failed}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;

int main()
{
    std::string s = "This is an example\n";
    std::copy(s.begin(), s.end(), std::ostreambuf_iterator&lt;char&gt;(std::cout));
}
|output=
This is an example
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc istreambuf_iterator}}
{{dsc inc|cpp/iterator/dsc ostream_iterator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
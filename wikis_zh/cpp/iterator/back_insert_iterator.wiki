{{cpp/title|back_insert_iterator}}
{{cpp/iterator/back_insert_iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl rev begin}}
{{dcl|until=c++17|1=
template&lt; class Container &gt;
class back_insert_iterator
    : public std::iterator&lt;std::output_iterator_tag, void, void, void, void&gt;
}}
{{dcl|since=c++17|1=
template&lt; class Container &gt;
class back_insert_iterator;
}}
{{dcl rev end}}
{{dcl end}}

{{tt|std::back_insert_iterator}} 是一种{{named req|OutputIterator|输出迭代器}}，向创建它的容器追加元素。每当迭代器被赋值（无论是否解引用）就调用容器的 {{tt|push_back()}} 成员函数。自增 {{tt|std::back_insert_iterator}} 是空操作。

{{cpp/iterator/iterator/inherit|std::output_iterator_tag|void|void|void|void|ext=
{{dsc | {{tt|container_type}} | {{tt|Container}}}}
}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/iterator/inserter/dsc constructor|back_insert_iterator}}
{{dsc inc|cpp/iterator/inserter/dsc operator{{=}}|back_insert_iterator}}
{{dsc inc|cpp/iterator/inserter/dsc operator*|back_insert_iterator}}
{{dsc inc|cpp/iterator/inserter/dsc operator_arith|back_insert_iterator}}
{{dsc end}}

===成员对象===
{{dsc begin}}
{{dsc hitem |成员名称|定义}}
{{dsc|{{tt|container}} {{mark|受保护}}|{{tt|Container*}} 类型的指针}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;int&gt; v;

    std::generate_n(
        std::back_insert_iterator&lt;std::vector&lt;int&gt;&gt;(v),
            // 也可使用 std::back_inserter 辅助函数
            // 也可使用 C++17 语法 std::back_insert_iterator(v)
        10,
        [n = 0]() mutable { return ++n; }
    );

    for (int n : v)
        std::cout &lt;&lt; n &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
1 2 3 4 5 6 7 8 9 10
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc back_inserter}}
{{dsc inc|cpp/iterator/dsc front_insert_iterator}}
{{dsc inc|cpp/iterator/dsc insert_iterator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
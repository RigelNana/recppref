{{cpp/title|iterator}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl|deprecated=c++17|1=
template&lt; 
    class Category,
    class T,
    class Distance = std::ptrdiff_t,
    class Pointer = T*,
    class Reference = T&amp; 
&gt; struct iterator;
}}
{{dcl end}}

{{tt|std::iterator}} 是为简化迭代器所要求的类型定义而提供的基类。

===模板形参===
{{par begin}}
{{par|Category|迭代器类别。必须是[[cpp/iterator/iterator_tags|迭代器类别标签]]之一。}}
{{par|T|能通过解引用迭代器获得的值的类型。此类型对于输出迭代器应为 {{tt|void}}。}}
{{par|Distance|能用于标识迭代器间距离的类型}}
{{par|Pointer|定义指向被迭代的类型（{{tt|T}}）的指针}}
{{par|Reference|定义到被迭代的类型（{{tt|T}}）的引用}}
{{par end}}

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|iterator_category}}|{{tt|Category}}}}
{{dsc|{{tt|value_type}}|{{tt|T}}}}
{{dsc|{{tt|difference_type}}|{{tt|Distance}}}}
{{dsc|{{tt|pointer}}|{{tt|Pointer}}}}
{{dsc|{{tt|reference}}|{{tt|Reference}}}}
{{dsc end}}

===示例===
{{example
|以下示例演示如何通过继承 {{tt|std::iterator}} 实现[[cpp/named req/InputIterator|输入迭代器]]
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;

template&lt;long FROM, long TO&gt;
class Range
{
public:
    // 通过继承自 std::iterator 提供成员 typedef
    class iterator : public std::iterator&lt;
                                std::input_iterator_tag, // iterator_category
                                long,                    // value_type
                                long,                    // difference_type
                                const long*,             // pointer
                                long                     // reference
                            &gt; {
        long num = FROM;
    public:
        explicit iterator(long _num = 0) : num(_num) {}
        iterator&amp; operator++() { num = TO &gt;= FROM ? num + 1: num - 1; return *this; }
        iterator operator++(int) { iterator retval = *this; ++(*this); return retval; }
        bool operator==(iterator other) const { return num == other.num; }
        bool operator!=(iterator other) const { return !(*this == other); }
        reference operator*() const { return num; }
    };
    iterator begin() { return iterator(FROM); }
    iterator end() { return iterator(TO &gt;= FROM? TO + 1 : TO - 1); }
};

int main()
{
    // std::find 要求输入迭代器
    auto range = Range&lt;15, 25&gt;();
    auto itr = std::find(range.begin(), range.end(), 18);
    std::cout &lt;&lt; *itr &lt;&lt; '\n'; // 18

    // Range::iterator 亦满足基于范围的 for 要求
    for (long l : Range&lt;3, 5&gt;())
        std::cout &lt;&lt; l &lt;&lt; ' '; // 3 4 5
    std::cout &lt;&lt; '\n';
}
|output=
18
3 4 5 
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc iterator_traits}}
{{dsc inc|cpp/iterator/dsc iterator_tags}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
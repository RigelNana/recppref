{{cpp/title|begin|cbegin}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{cpp/iterator/range access headers}}
{{dcla|anchor=no|num=1|since=c++11|constexpr=c++17|
template&lt; class C &gt; 
auto begin( C&amp; c ) -&gt; decltype(c.begin());
}}
{{dcla|anchor=no|num=2|since=c++11|constexpr=c++17|
template&lt; class C &gt; 
auto begin( const C&amp; c ) -&gt; decltype(c.begin());
}}
{{dcla|anchor=no|num=3|since=c++11|constexpr=c++14|noexcept=c++14|
template&lt; class T, std::size_t N &gt; 
T* begin( T (&amp;array)[N] );
}}
{{dcl|num=4|since=c++14|
template&lt; class C &gt; 
constexpr auto cbegin( const C&amp; c ) noexcept(/* 见下文 */)
    -&gt; decltype(std::begin(c));
}}
{{dcl end}}

返回指向给定范围起始的迭代器。

@1,2@ 返回 {{c|c.begin()}}，它通常是指向 {{c|c}} 所代表的序列起始的迭代器。
:@1@ 如果 {{tt|C}} 是标准{{named req|Container}}，那么就会返回 {{tt|C::iterator}} 对象。
:@2@ 如果 {{tt|C}} 是标准{{named req|Container}}，那么就会返回 {{tt|C::const_iterator}} 对象。

@3@ 返回指向 {{c|array}} 起始的指针。

@4@ 返回 {{c|std::begin(c)}}，这里 {{c|c}} 始终被视为 const 限定。
@@ 如果 {{tt|C}} 是标准{{named req|Container}}，那么就会返回 {{tt|C::const_iterator}} 对象。

{{image|range-begin-end.svg}}

===参数===
{{par begin}}
{{par|c|带 {{tt|begin}} 成员函数的容器或视图}}
{{par|array|任意类型的数组}}
{{par end}}

===返回值===
@1,2@ {{c|c.begin()}}
@3@ {{c|array}}
@4@ {{c|c.begin()}}

===异常===
@4@ {{noexcept|noexcept(std::begin(c))}}

===重载===
可以为未暴露适合的 {{tt|begin()}} 成员函数的类或枚举提供 {{tt|begin}} 的自定义重载，从而能迭代它。标准库已提供了下列重载：

{{dsc begin}}
{{dsc inc|cpp/utility/initializer_list/dsc begin2}}
{{dsc inc|cpp/numeric/valarray/dsc begin2}}
{{dsc inc|cpp/filesystem/directory_iterator/dsc begin}}
{{dsc inc|cpp/filesystem/recursive_directory_iterator/dsc begin}}
{{dsc end}}

同 {{tt|swap}} 的用法（在{{named req|Swappable}}描述），{{tt|begin}} 函数在泛型语境中的典型用法等价于 {{c|using std::begin; begin(arg);}}，这允许[[cpp/language/adl|实参依赖查找]]为用户定义类型所选的重载和标准库函数模板出现于同一重载集中。
{{source|1=
template&lt;typename Container, typename Function&gt;
void for_each(Container&amp;&amp; cont, Function f)
{
    using std::begin;
    auto it = begin(cont);
    using std::end;
    auto end_it = end(cont);
    while (it != end_it)
    {
        f(*it);
        ++it;
    }
}
}}

{{rrev|since=c++20|
[[cpp/language/adl|实参依赖查找]]找到的 {{tt|begin}} 重载可用于定制 {{lc|std::ranges::begin}}、{{lc|std::ranges::cbegin}} 及其他依赖于 {{lc|std::ranges::begin}} 的定制点对象的行为。
}}

===注解===
非数组重载准确地反映了 {{tt|C::begin}} 的行为。如果该成员函数的实现不合理，那么就会有意外的效果。

{{tt|std::cbegin}} 是为统一成员与非成员的范围访问而引入的。参阅 {{lwg|2128}}。

如果 {{tt|C}} 是浅 const 的视图，那么 {{tt|std::cbegin}} 可能返回可变的迭代器。某些用户不期待这种行为。参阅 {{wg21|P2276}} 与 {{wg21|P2278}}。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main() 
{
    std::vector&lt;int&gt; v = {3, 1, 4};
    auto vi = std::begin(v);
    std::cout &lt;&lt; std::showpos &lt;&lt; *vi &lt;&lt; '\n'; 
    
    int a[] = {-5, 10, 15};
    auto ai = std::begin(a);
    std::cout &lt;&lt; *ai &lt;&lt; '\n';
}
|output=
+3
-5
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc end}}
{{dsc inc|cpp/ranges/dsc begin}}
{{dsc inc|cpp/ranges/dsc cbegin}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
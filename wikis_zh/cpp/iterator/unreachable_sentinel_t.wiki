{{cpp/title|unreachable_sentinel_t|unreachable_sentinel}}
{{cpp/iterator/navbar}}

{{dcl begin}}
{{dcl header|iterator}}
{{dcl|num=1|since=c++20|
struct unreachable_sentinel_t;
}}
{{dcl|num=2|since=c++20|
inline constexpr unreachable_sentinel_t unreachable_sentinel{};
}}
{{dcl end}}

@1@ {{tt|unreachable_sentinel_t}} 是能用于表示无界区间“上界”的空类类型。
@2@ {{tt|unreachable_sentinel}} 是 {{tt|unreachable_sentinel_t}} 类型的常量。

===非成员函数===
{{dsc begin}}
{{dsc tfun|cpp/iterator/unreachable_sentinel_t|inlinemem=true|title=operator==|比较一个 {{tt|unreachable_sentinel_t}} 与任何 {{lconcept|weakly_incrementable}} 类型的值|notes={{mark c++20}}}}
{{dsc end}}

{{member|operator{{==}}{{small|(std::unreachable_sentinel_t)}}|
{{ddcl|since=c++20|1=
template&lt;std::weakly_incrementable I&gt;
friend constexpr bool operator==( unreachable_sentinel_t, const I&amp; ) noexcept
{ return false; }
}}

{{tt|unreachable_sentinel_t}} 能与任何 {{lconcept|weakly_incrementable}} 类型比较，而结果始终为 {{c|false}}。

{{cpp/hidden friend|tmpl=yes|{{tt|std::unreachable_sentinel_t}}}}
}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;

template&lt;class CharT&gt;
constexpr std::size_t strlen(const CharT* s)
{
    return std::ranges::find(s, std::unreachable_sentinel, CharT{}) - s;
}

template&lt;class CharT&gt;
constexpr std::size_t find_first(const CharT *haystack, const CharT *needle)
{
    const char* needle_end = needle + strlen(needle);
    // search(begin, unreachable_sentinel) 通常由于每次循环少一次比较而比
    // search(begin, end) 更加高效。
    // 但 "needle" **必须出现于** "haystack" 中，否则此调用为 UB，
    // （这在 constexpr 语境中是编译期错误）。
    auto found = std::ranges::search(haystack, std::unreachable_sentinel,
                                     needle, needle_end);
    return found.begin() - haystack;
}

int main()
{
    static_assert(strlen("The quick brown fox jumps over a lazy dog.") == 42);
    static_assert(find_first("unsigned short int", "short") == 9);
//  static_assert(find_first("long int", "float")); // 编译期错误
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc iota_view}}
{{dsc end}}

{{langlinks|en|ja}}
{{cpp/title|indirect_binary_predicate}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl|since=c++20|1=
template&lt; class F, class I1, class I2 &gt;
concept indirect_binary_predicate =
    std::indirectly_readable&lt;I1&gt; &amp;&amp;
    std::indirectly_readable&lt;I2&gt; &amp;&amp;
    std::copy_constructible&lt;F&gt; &amp;&amp;
    std::predicate&lt;F&amp;, /*indirect-value-t*/&lt;I1&gt;, /*indirect-value-t*/&lt;I2&gt;&gt; &amp;&amp;
    std::predicate&lt;F&amp;, /*indirect-value-t*/&lt;I1&gt;, std::iter_reference_t&lt;I2&gt;&gt; &amp;&amp;
    std::predicate&lt;F&amp;, std::iter_reference_t&lt;I1&gt;, /*indirect-value-t*/&lt;I2&gt;&gt; &amp;&amp;
    std::predicate&lt;F&amp;, std::iter_reference_t&lt;I1&gt;, std::iter_reference_t&lt;I2&gt;&gt;;
}}
{{dcl end}}

概念 {{tt|indirect_binary_predicate}} 指定对于“调用作为它的实参的二元谓词的算法”的要求。此概念与 {{lc|std::predicate}} 的关键区别是它被应用到 {{tt|I1}} 与 {{tt|I2}} 所引用的类型，而非 {{tt|I1}} 与 {{tt|I2}} 自身。

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2609R3|std=C++20|before=一些要求是基于 {{c|std::iter_value_t&lt;I&gt;&amp;}} 定义的&lt;br&gt;但它未能正确处理一些投影而导致与可调用的 {{c|F&amp;}} 不兼容|after=基于 {{c|/*indirect-value-t*/&lt;I&gt;}} 定义以正确处理这些投影}}
{{dr list item|paper=P2997R1|std=C++20|before=对应的概念分别要求 {{c|F&amp;}} 满足 {{lconcept|invocable}} 和&lt;br&gt;{{lconcept|regular_invocable}} 以及 {{c|std::iter_common_reference_t&lt;I&gt;}}|after=不作此要求}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
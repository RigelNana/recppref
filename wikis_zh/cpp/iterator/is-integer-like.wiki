{{title|''is-integer-like''{{sep}}, ''is-signed-integer-like''}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{dcla|num=1|since=c++20|expos=yes|1=
template&lt; class T &gt;
constexpr bool /*is-integer-like*/ = /* 见描述 */;
}}
{{dcla|num=2|since=c++20|expos=yes|1=
template&lt; class T &gt;
constexpr bool /*is-signed-integer-like*/ = /* 见描述 */;
}}
{{dcl end}}

@1@ {{c|/*is-integer-like*/&lt;T&gt;}} 当且仅当 {{tt|T}} 是整数式类型时是 {{c|true}}。

@2@ {{c|/*is-signed-integer-like*/&lt;T&gt;}} 当且仅当 {{tt|T}} 是有符号整数式类型时是 {{c|true}}。

===整数类类型===
如果类型 {{tt|T}} 在某个包含由实现定义的表现为{{ls|cpp/language/types#整数类型}}（[[#要求的行为|定义如下]]）的类型集合中，那么它是''整数类类型''。整数类类型不一定是[[cpp/language/classes|类类型]]。

一个整数类类型可以表示 {{mathjax-or|\(\scriptsize 2^N \)|2{{su|p=N}}}} 个连续整数，其中正整数 {{c|N}} 被称为该整数类类型的''宽度''。

整数类类型要么是有符号的，要么是无符号的：
* ''有符号整数类类型''{{sep}}可以表示 {{closed range/core|{{mathjax-or|\(\scriptsize -2^{N-1} \)|-2{{su|p=N-1}}}}|{{mathjax-or|\(\scriptsize 2^{N-1}-1 \)|2{{su|p=N-1}}-1}}}} 中的所有整数，其中 {{c|N}} 大于所有有符号整数类型的宽度。
* ''无符号整数类类型''{{sep}}可以表示 {{closed range/core|{{mathjax-or|\(\scriptsize 0 \)|0}}|{{mathjax-or|\(\scriptsize 2^N-1 \)|2{{su|p=N}}-1}}}} 中的所有整数，其中 {{c|N}} 大于所有无符号整数类型的宽度。

所有整数类类型都实现了 {{lconcept|regular}} 和 {{lconcept|three_way_comparable}}{{c/core|&lt;std::strong_ordering&gt;}}。

[[cpp/language/value initialization|值初始化]]的整数类类型对象的值是 {{c|0}}。

具有整数类类型 {{tt|T}} 的表达式 {{c|E}} 可以如同通过 {{c|1=bool(E != T(0))}} {{ls|cpp/language/implicit conversion#按语境转换}}到 {{c/core|bool}}。

===整数式类型===
除了（可有 cv 限定的）{{c/core|bool}} 以外的实现了 {{lconcept|integral}} 的类型或整数类类型是''整数式类型''。
* 实现了 {{lconcept|signed_integral}} 或者是有符号整数类类型的整数式类型是''有符号整数式类型''。
* 实现了 {{lconcept|unsigned_integral}} 或者是无符号整数类类型的整数式类型是''无符号整数式类型''。

===要求的行为===
整数类类型的表达式可以显式转换到任意整数式类型，也可以隐式转换到符号相同且宽度更大或相等的任意整数类类型。整数类型的表达式可以显式转换和隐式转换到任意整数类类型。整数类型和整数类类型之间的转换以及两个整数类类型之间的转换都不会以异常退出。此类转换的结果是一个具有转换目标类型的独特值该值与源值与 {{mathjax-or|\(\scriptsize 2^N \)|2{{su|p=N}}}} 的模同余，其中 {{c|N}} 是转换目标类型的宽度。

以 {{tt|Int&lt;T&gt;}} 表示以下类型：
* 如果 {{tt|T}} 是整数类类型，那么 {{tt|Int&lt;T&gt;}} 是一个独特的虚设{{ls|cpp/language/types#扩展整数类型}}，该类型的符号和宽度与 {{tt|T}} 相同。
* 如果 {{tt|T}} 是整数类型，那么 {{tt|Int&lt;T&gt;}} 就是 {{tt|T}}。

给定以下类型、值和运算符：
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|IC}}|某个整数类类型}}
{{dsc|{{tt|IL}}|某个整数式类型}}
{{dsc hitem|值|定义}}
{{dsc|{{c|a}}|{{tt|IC}} 类型对象}}
{{dsc|{{c|b}}|{{tt|IL}} 类型对象}}
{{dsc|{{c|c}}|整数类型左值}}
{{dsc|{{c|x}}|与 {{c|a}} 表示相同的值的 {{tt|Int&lt;IC&gt;}} 类型对象}}
{{dsc|{{c|y}}|与 {{c|b}} 表示相同的值的 {{tt|Int&lt;IL&gt;}} 类型对象}}
{{dsc hitem|运算符|定义}}
{{dsc|{{c|1=@=}}|{{c|1=+=}}、{{c|1=-=}}、{{c|1=*=}}、{{c|1=/=}}、{{c|1=%=}}、{{c|1=&amp;=}}、{{c|1={{!}}=}}、{{c|1=^=}}、{{c|1=&lt;&lt;=}} 和 {{c|1=&gt;&gt;=}} 之一}}
{{dsc|{{c|@}}|{{c|+}}、{{c|-}}、{{c|*}}、{{c|/}}、{{c|%}}、{{c|&amp;}}、{{c|{{!}}}}、{{c|^}}、{{c|&lt;&lt;}}、{{c|&gt;&gt;}}、{{c|&amp;&amp;}}、{{c|{{!!}}}}、{{c|1===}}、{{c|1=!=}}、{{c|&lt;}}、{{c|&gt;}}、{{c|1=&lt;=}}、{{c|1=&gt;=}}、{{c|1=&lt;=&gt;}} 和 {{c|,}} 之一}}
{{dsc end}}

在满足对应条件时，以下表达式必须良构，并且具有指定的结果和效果：
{|class="wikitable"
!style="word-break: keep-all;"|{{nbsp|3}}表达式{{nbsp|3}}
!style="word-break: keep-all;"|{{nbsp|8}}条件{{nbsp|8}}
!结果
!效果
|-
|{{c|a++}}
|rowspan=2 {{n/a|无条件}}
|rowspan=2|值与 {{c|a}} 在求值该表达式前的值相等的 {{tt|IC}} 类型纯右值
|以向其加 {{c|1}} 的方式修改 {{c|a}} 的值
|-
|{{c|a--}}
|以向其减 {{c|1}} 的方式修改 {{c|a}} 的值
|-
|{{c|++a}}
|colspan=3|{{ls|cpp/language/expressions#表达式等价}}于 {{c|1=a += 1}}
|-
|{{c|--a}}
|colspan=3|表达式等价于 {{c|1=a -= 1}}
|-
|{{c|&amp;a}}
|colspan=3|表达式等价于 {{c|std::addressof(a)}}
|-
|{{c|!a}}
|{{c|!x}} 良构
|colspan=2|与 {{c|!x}} 相同
|-
|{{c|+a}}
|{{c|+x}} 良构
|与 {{c|+x}} 相同，但具有 {{tt|IC}} 类型
|与 {{c|+x}} 相同
|-
|{{c|-a}}
|{{c|-x}} 良构
|与 {{c|-x}} 相同，但具有 {{tt|IC}} 类型
|与 {{c|-x}} 相同
|-
|{{c|~a}}
|{{c|~x}} 良构
|与 {{c|~x}} 相同，但具有 {{tt|IC}} 类型
|与 {{c|~x}} 相同
|-
|{{c|1=c @= a}}
|{{c|1=c @= x}} 良构
|指代 {{c|c}} 的左值
|与 {{c|1=c @= x}} 相同
|-
|{{c|1=a @= b}}
|{{c|1=x @= y}} 良构
|指代 {{c|a}} 的左值
|与 {{c|1=x @= y}} 相同，除了要存储到 {{c|x}} 中的值会改为存储到 {{c|a}} 中
|-
|{{c|a @ b}}
|{{c|x @ y}} 良构
|与 {{c|x @ y}} 相同，但结果类型不同：
* 如果 {{c|x @ y}} 具有 {{tt|Int&lt;IC&gt;}} 类型，那么结果具有 {{tt|IC}} 类型。
* 如果 {{c|x @ y}} 具有 {{tt|Int&lt;IL&gt;}} 类型，那么结果具有 {{tt|IL}} 类型。
* 如果 {{c|x @ y}} 具有其他任何类型 {{tt|T}}，那么结果具有 {{tt|T}} 类型。
|与 {{c|x @ y}} 相同
|-
|{{c|b @ a}}
|{{c|y @ x}} 良构
|与 {{c|y @ x}} 相同，但结果类型不同：
* 如果 {{c|y @ x}} 具有 {{tt|Int&lt;IC&gt;}} 类型，那么结果具有 {{tt|IC}} 类型。
* 如果 {{c|y @ x}} 具有 {{tt|Int&lt;IL&gt;}} 类型，那么结果具有 {{tt|IL}} 类型。
* 如果 {{c|y @ x}} 具有其他任何类型 {{tt|T}}，那么结果具有 {{tt|T}} 类型。
|与 {{c|y @ x}} 相同
|}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3366|paper=P2393R1|std=C++20|before=整数类类型与它对应的整数类型之间的转换不保证会产生可以表示的值|after=保证会产生}}
{{dr list item|wg=lwg|dr=3376|paper=P2393R1|std=C++20|before=整数类类型只能是类类型|after=可以不是类类型}}
{{dr list item|wg=lwg|dr=3467|std=C++20|before={{c/core|bool}} 被认为是整数式类型|after=已排除}}
{{dr list item|wg=lwg|dr=3575|paper=P2393R1|std=C++20|before=整数类类型不保证能进行三路比较|after=保证能进行}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc weakly_incrementable}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/title|sized_sentinel_for|disable_sized_sentinel_for}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl|num=1|since=c++20|1=
template&lt; class S, class I &gt;
    concept sized_sentinel_for =
        std::sentinel_for&lt;S, I&gt; &amp;&amp;
        !std::disable_sized_sentinel_for&lt;std::remove_cv_t&lt;S&gt;,
                                         std::remove_cv_t&lt;I&gt;&gt; &amp;&amp;
        requires(const I&amp; i, const S&amp; s) {
            { s - i } -&gt; std::same_as&lt;std::iter_difference_t&lt;I&gt;&gt;;
            { i - s } -&gt; std::same_as&lt;std::iter_difference_t&lt;I&gt;&gt;;
        };
}}
{{dcl|num=2|since=c++20|1=
template&lt; class S, class I &gt;
    inline constexpr bool disable_sized_sentinel_for = false;
}}
{{dcl end}}

@1@ {{tt|sized_sentinel_for}} 概念指定，迭代器类型 {{tt|I}} 的对象和哨位类型 {{tt|S}} 的对象可以在常数时间内相减以计算它们之间的距离。

@2@ {{tt|disable_sized_sentinel_for}} 变量模板可以用于防止能相减但不实际实现 {{tt|sized_sentinel_for}} 的迭代器与哨位满足该概念。
@@ 程序可以对无 cv 限定的非数组对象类型 {{tt|S}} 与 {{tt|I}} 特化该变量模板，只要其中之一是{{ls|cpp/language/type#由程序定义的类型}}。这种特化必须可用于[[cpp/language/constant expression|常量表达式]]并拥有 {{c/core|const bool}} 类型。

===语义要求===
令 {{c|i}} 为 {{tt|I}} 类型的迭代器，而 {{c|s}} 为 {{tt|S}} 类型的哨位，使得 {{range|i|s}} 代表一个范围。令 {{c|n}} 为需要应用 {{c|++i}} 以令 {{c|1=bool(i == s)}} 为 {{c|true}} 的最小次数。那么 {{tt|S}} 和 {{tt|I}} 只有在满足以下所有条件时才会实现 {{tt|sized_sentinel_for&amp;lt;S, I&gt;}}：
* 如果 {{c|n}} 能以 {{c/core|ranges::difference_type_t&lt;I&gt;}} 表示，那么 {{c|s - i}} 良定义并等于 {{c|n}}。
* 如果 {{c|-n}} 能以 {{c/core|ranges::difference_type_t&lt;I&gt;}} 表示，那么 {{c|i - s}} 良定义并等于 {{c|-n}}。

{{cpp/concepts/equality preservation}}
{{cpp/concepts/implicit expression variations}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc sized_range}}
{{dsc inc|cpp/ranges/dsc size}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
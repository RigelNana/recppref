{{cpp/title|front_insert_iterator}}
{{cpp/iterator/front_insert_iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl rev begin}}
{{dcl|until=c++17|1=
template&lt; class Container &gt;
class front_insert_iterator
    : public std::iterator&lt;std::output_iterator_tag, void, void, void, void&gt;
}}
{{dcl|since=c++17|1=
template&lt; class Container &gt;
class front_insert_iterator;
}}
{{dcl rev end}}
{{dcl end}}

{{tt|std::front_insert_iterator}} 是一种{{named req|OutputIterator|输出迭代器}}，它向为之构造的容器前附元素。每当赋值给（无论是否解引用）迭代器时就调用容器的 {{tt|push_front()}} 成员函数。自增 {{tt|std::front_insert_iterator}} 是无操作。

{{cpp/iterator/iterator/inherit|std::output_iterator_tag|void|void|void|void|ext=
{{dsc|{{tt|container_type}}|{{tt|Container}}}}
}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/iterator/inserter/dsc constructor|front_insert_iterator}}
{{dsc inc|cpp/iterator/inserter/dsc operator{{=}}|front_insert_iterator}}
{{dsc inc|cpp/iterator/inserter/dsc operator*|front_insert_iterator}}
{{dsc inc|cpp/iterator/inserter/dsc operator_arith|front_insert_iterator}}
{{dsc end}}

===成员对象===
{{dsc begin}}
{{dsc hitem|成员名|定义}}
{{dsc|{{tt|container}} {{mark|受保护}}|{{tt|Container*}} 类型的指针}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;deque&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

namespace stb
{
    void println(auto, auto const&amp; d)
    {
        std::ranges::copy(d, std::ostream_iterator&lt;int&gt;(std::cout, " "));
        std::cout &lt;&lt; '\n';
    }
}

int main()
{
    std::vector&lt;int&gt; v{1, 2, 3, 4, 5};
    std::deque&lt;int&gt; d;

    std::copy(v.begin(), v.end(),
              std::front_insert_iterator&lt;std::deque&lt;int&gt;&gt;(d));
              // 或用 std::front_inserter(d)

    stb::println("{}", d);
}
|output=
5 4 3 2 1
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc front_inserter}}
{{dsc inc|cpp/iterator/dsc back_insert_iterator}}
{{dsc inc|cpp/iterator/dsc insert_iterator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
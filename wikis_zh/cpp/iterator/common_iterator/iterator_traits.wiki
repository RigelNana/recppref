{{cpp/title|iterator_traits&lt;small&gt;&lt;std::common_iterator&gt;&lt;/small&gt;}}
{{cpp/iterator/common_iterator/navbar}}
{{ddcl|since=c++20|header=iterator|
template&lt; std::input_iterator I, class S &gt;
struct iterator_traits&lt;std::common_iterator&lt;I, S&gt;&gt;;
}}

提供对于 {{lc|std::common_iterator}} 类型的属性的统一接口。

===成员类型===
{{dsc begin}}
{{dsc hitem|类型名称|定义}}
{{dsc|{{tt|iterator_concept}}|
* {{lc|std::forward_iterator_tag}}，如果 {{tt|I}} 实现了 {{lc|std::forward_iterator}}。
* 否则是 {{lc|std::input_iterator_tag}}。
}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{mark cond present}}|
* 未定义，如果 {{c/core|std::iter_difference_t&lt;I&gt;}} 不是整数类型。
* 否则是 {{lc|std::forward_iterator_tag}}，如果 {{c/core|std::iterator_traits&lt;I&gt;​::​iterator_category}} 合法并指代实现了 {{c|std::derived_from&lt;std::forward_iterator_tag&gt;}} 的类型。
* 否则是 {{lc|std::input_iterator_tag}}。}}
{{dsc|{{tt|value_type}}|{{c/core|std::iter_value_t&lt;I&gt;}}}}
{{dsc|{{tt|difference_type}}|{{c/core|std::iter_difference_t&lt;I&gt;}}}}
{{dsc|{{tt|pointer}}|
* {{c/core|decltype(c.operator-&gt;())}}，如果它良构（其中 {{c|c}} 是 {{c/core|const std::common_iterator&lt;I, S&gt;}} 类型的左值。
* 否则是 {{c/core|void}}。}}
{{dsc|{{tt|reference}}|{{c/core|std::iter_reference_t&lt;I&gt;}}}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;iterator&gt;
#include &lt;type_traits&gt;
#include &lt;vector&gt;

int main()
{
    std::vector v{1, 2, 3, 4};
    using CV = std::common_iterator&lt;
                    std::counted_iterator&lt;std::vector&lt;int&gt;::iterator&gt;,
                    std::default_sentinel_t&gt;;
    CV i{std::counted_iterator{v.begin(), 3}&lt;!----&gt;};
    using TRCV = std::iterator_traits&lt;decltype(i)&gt;;
    static_assert(std::is_same&lt;TRCV::iterator_concept, std::forward_iterator_tag&gt;());
    static_assert(std::is_same&lt;TRCV::iterator_category, std::forward_iterator_tag&gt;());
    static_assert(std::is_same&lt;TRCV::value_type, int&gt;());
    static_assert(std::is_same&lt;TRCV::difference_type,
                  std::vector&lt;int&gt;::difference_type&gt;());
    static_assert(std::is_same&lt;TRCV::pointer, decltype(i.operator-&gt;())&gt;());
    static_assert(std::is_same&lt;TRCV::reference, int&amp;&gt;());

    CV s{std::default_sentinel};
    using TRCS = std::iterator_traits&lt;decltype(s)&gt;;
    static_assert(std::is_same&lt;TRCS::iterator_concept, std::forward_iterator_tag&gt;());
    static_assert(std::is_same&lt;TRCS::iterator_category, std::forward_iterator_tag&gt;());
    static_assert(std::is_same&lt;TRCS::value_type, int&gt;());
    static_assert(std::is_same&lt;TRCS::difference_type,
                  std::vector&lt;int&gt;::difference_type&gt;());
    static_assert(std::is_same&lt;TRCS::pointer, decltype(s.operator-&gt;())&gt;());
    static_assert(std::is_same&lt;TRCS::reference, int&amp;&gt;());
}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3749|std=C++20|before=如果 {{c/core|std::iter_difference_t&lt;I&gt;}} 不是整数类型，&lt;br&gt;那么 {{tt|iterator_category}} 是 {{lc|std::input_iterator_tag}}|after=此时 {{tt|iterator_category}} 未定义}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc iterator_traits}}
{{dsc inc|cpp/iterator/common_iterator/dsc incrementable_traits}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|ko|pt|ru}}
{{title|1=operator{{==}}&lt;small&gt;(std::common_iterator)&lt;/small&gt;}}
{{cpp/iterator/common_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
template &lt;class I2, std::sentinel_for&lt;I&gt; S2&gt;
    requires std::sentinel_for&lt;S, I2&gt;
friend constexpr bool operator==( const common_iterator&amp; x, 
                                  const std::common_iterator&lt;I2, S2&gt;&amp; y );
}}
{{dcl|num=2|since=c++20|1=
template &lt;class I2, std::sentinel_for&lt;I&gt; S2&gt;
    requires std::sentinel_for&lt;S, I2&gt; &amp;&amp; std::equality_comparable_with&lt;I, I2&gt;
friend constexpr bool operator==( const common_iterator&amp; x, 
                                  const std::common_iterator&lt;I2, S2&gt;&amp; y );
}}
{{dcl end}}

比较底层 {{lc|std::variant}} 成员对象 {{tt|''var''}} 所保有的迭代器与/或哨位。认为两个不可比较的迭代器或两个哨位相等。

若 {{c|x}} 或 {{c|y}} 处于无效状态，即
{{c|x.var.valueless_by_exception() {{!!}} y.var.valueless_by_exception()}} 等于 {{c|true}}，则行为未定义。

令 {{tt|i}} 为 {{c|1=x.var.index()}}，{{tt|j}} 为 {{c|1=y.var.index()}}。

@1@ 若 {{c|1= i == j}}（即 {{c|x}} 与 {{c|y}} 均保有迭代器或哨位）则返回 {{c|true}}，否则返回 {{c|1= std::get&lt;i&gt;(x.var) == std::get&lt;j&gt;(y.var)}}；

@2@ 若 {{c|1= i == 1 &amp;&amp; j == 1}}（即 {{c|x}} 与 {{c|y}} 均保有哨位）则返回 {{c|true}}，否则返回 {{c|1= std::get&lt;i&gt;(x.var) == std::get&lt;j&gt;(y.var)}}。

{{cpp/note synthesized eq}}

{{cpp/hidden friend|std::common_iterator&amp;lt;I&gt;|plural=yes|tmpl=yes}}

===参数===
{{par begin}}
{{par|x, y|要比较的迭代器适配器}}
{{par end}}

===返回值===
若底层迭代器与/或哨位相等则为 {{c|true}}。

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iterator&gt;

int main()
{
    int a[]{0, 1, 2, 3};

    using CI = std::common_iterator&lt;
                   std::counted_iterator&lt;int*&gt;,
                   std::default_sentinel_t
                   &gt;;

    CI i1{std::counted_iterator{a + 0, 2}&lt;!----&gt;};
    CI i2{std::counted_iterator{a + 1, 2}&lt;!----&gt;};
    CI i3{std::counted_iterator{a + 0, 3}&lt;!----&gt;};
    CI i4{std::counted_iterator{a + 0, 0}&lt;!----&gt;};
    CI s1{std::default_sentinel};
    CI s2{std::default_sentinel};

    assert((i1 == i2) == true);
    assert((i1 == i3) == false);
    assert((i2 == i3) == false);
    assert((s1 == s2) == true);
    assert((i1 == s1) == false);
    assert((i4 == s1) == true);
}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3574|std=C++20|before={{tt|variant}} 为完全 constexpr (P2231R1) 但 {{tt|common_iterator}} 不是|after=亦使之为 constexpr}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/common_iterator/dsc operator-}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
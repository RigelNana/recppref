{{cpp/iterator/common_iterator/title|operator*,-&gt;}}
{{cpp/iterator/common_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|
constexpr decltype(auto) operator*();
}}
{{dcl|num=2|since=c++20|
constexpr decltype(auto) operator*() const
    requires /*dereferenceable*/&lt;const I&gt;;
}}
{{dcl|num=3|since=c++20|
constexpr auto operator-&gt;() const
    requires /* 见描述 */;
}}
{{dcl h|Helper types}}
{{dcl|num=4|notes={{mark expos}}|
class /*proxy*/ {
    std::iter_value_t&lt;I&gt; keep_;
    constexpr proxy(std::iter_reference_t&lt;I&gt;&amp;&amp; x)
        : keep_(std::move(x)) {}
public:
    constexpr const std::iter_value_t&lt;I&gt;* operator-&gt;() const noexcept {
        return std::addressof(keep_);
    }
};
}}
{{dcl end}}

返回指向当前元素的指针或引用，或保有它的代理。

若底层 {{lc|std::variant}} 成员对象 {{tt|''var''}} 不保有 {{tt|I}} 类型的对象，即 {{c|std::holds_alternative&lt;I&gt;(var)}} 等于 {{c|false}}，则行为未定义。

令 {{tt|it}} 代表 {{tt|''var''}} 所保有的 {{tt|I}} 类型迭代器，即 {{c|std::get&lt;I&gt;(var)}}。

@1,2@ 返回解引用 {{tt|it}} 的结果。

@3@ 返回指向当前元素的指针或底层迭代器，或保有它的代理：
* 若 {{tt|I}} 为指针类型或若表达式 {{c|it.operator-&gt;()}} 为良构，则等价于 {{c|return it;}}。
* 否则，若 {{c|std::iter_reference_t&lt;I&gt;}} 为引用类型，则等价于 {{c|1=auto&amp;&amp; tmp = *it; return std::addressof(tmp);}}。
* 否则，等价于 {{c|return proxy(*it);}}，其中 {{tt|''proxy''}} 为仅用于阐释的类 {{v|4}}。

@@ {{tt|requires}} 子句中的表达式等价于&lt;br&gt;&lt;!--
--&gt;{{c|
std::indirectly_readable&lt;const I&gt; &amp;&amp; (
    requires(const I&amp; i) { i.operator-&gt;(); } {{!!}}
    std::is_reference_v&lt;std::iter_reference_t&lt;I&gt;&gt; {{!!}}
    std::constructible_from&lt;std::iter_value_t&lt;I&gt;, std::iter_reference_t&lt;I&gt;&gt;
)}}。

===参数===
（无）

===返回值===
@1,2@ 到当前元素的引用或纯右值临时量。等价于 {{c|*it}}。
@3@ 前述的指向当前元素的指针或迭代器，或保有它的代理。

===示例===
{{example
|code=
#include &lt;complex&gt;
#include &lt;initializer_list&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;

using std::complex_literals::operator""i;

int main()
{
    const auto il = {1i, 3.14 + 2i, 3i, 4i, 5i};

    using CI = std::common_iterator&lt;
        std::counted_iterator&lt;decltype(il)::iterator&gt;,
        std::default_sentinel_t&gt;;

    CI ci{std::counted_iterator{std::next(begin(il), 1), std::ssize(il) - 1}&lt;!----&gt;};

    std::cout &lt;&lt; *ci &lt;&lt; ' ' &lt;&lt; ci-&gt;real() &lt;&lt; '\n';
}
|output=
(3.14,2) 3.14
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3574|std=C++20|before={{tt|variant}} 为完全 constexpr (P2231R1) 但 {{tt|common_iterator}} 不是|after=亦使之为 constexpr}}
{{dr list item|wg=lwg|dr=3595|std=C++20|before=代理类型的函数缺少 constexpr 与 noexcept|after=已添加}}
{{dr list item|wg=lwg|dr=3672|std=C++20|before={{tt|operator-&gt;}} 可以在常用情况下按引用返回|after=始终按值返回}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc constructor|common_iterator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{title|iter_move&lt;small&gt;(std::common_iterator)&lt;/small&gt;}}
{{cpp/iterator/common_iterator/navbar}}
{{ddcl|since=c++20|
friend constexpr decltype(auto) iter_move( const std::common_iterator&amp; i )
    noexcept(noexcept(ranges::iter_move(std::declval&lt;const I&amp;&gt;()))
        requires std::input_iterator&lt;I&gt;;
}}

将解引用底层迭代器的结果转型成它关联的右值引用类型。

函数体等价于 {{c|return std::ranges​::​iter_move(std::get&lt;I&gt;(i.var));}}。

{{cpp/hidden friend|{{c/core|std::common_iterator&lt;I, S&gt;}}}}

如果 {{c|i.var}} 并未保有一个 {{tt|I}} 对象（即迭代器），那么行为未定义。

===参数===
{{par begin}}
{{par|i|作为源的迭代器适配器}}
{{par end}}

===返回值===
右值引用或纯右值临时量。

===复杂度===
常数。

===示例===
{{example|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

void print(auto const&amp; rem, auto const&amp; v)
{
    std::cout &lt;&lt; rem &lt;&lt; '[' &lt;&lt; size(v) &lt;&lt; "] { ";
    for (int o{}; auto const&amp; s : v)
        std::cout &lt;&lt; (o++ ? ", " : "") &lt;&lt; std::quoted(s);
    std::cout &lt;&lt; " }\n";
}

int main()
{
    std::vector&lt;std::string&gt; p{"Andromeda", "Cassiopeia", "Phoenix"}, q;
    print("p", p);
    print("q", q);
    
    using CTI = std::counted_iterator&lt;std::vector&lt;std::string&gt;::iterator&gt;;
    using CI = std::common_iterator&lt;CTI, std::default_sentinel_t&gt;;
    CI last{std::default_sentinel};
    
    for (CI first{&lt;!----&gt;{p.begin(), 2}&lt;!----&gt;}; first != last; ++first)
        q.emplace_back(/* ADL */ iter_move(first));
    
    print("p", p);
    print("q", q);
}
|p=true
|output=
p[3] { "Andromeda", "Cassiopeia", "Phoenix" }
q[0] {  }
p[3] { "", "", "Phoenix" }
q[2] { "Andromeda", "Cassiopeia" }
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3953|std=C++20|before=返回类型是 {{c/core|std::iter_rvalue_reference_t&lt;I&gt;}}|after=改为 {{c/core|decltype(auto)}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/ranges/dsc iter_move}}
{{dsc inc|cpp/iterator/adaptor/dsc iter_move|counted_iterator}}
{{dsc inc|cpp/utility/dsc move}}
{{dsc inc|cpp/utility/dsc move_if_noexcept}}
{{dsc inc|cpp/utility/dsc forward}}
{{dsc inc|cpp/algorithm/ranges/dsc move}}
{{dsc inc|cpp/algorithm/ranges/dsc move_backward}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{title|operator-{{small|(std::common_iterator)}}}}
{{cpp/iterator/common_iterator/navbar}}
{{ddcl|since=c++20|
template&lt; std::sized_sentinel_for&lt;I&gt; I2, std::sized_sentinel_for&lt;I&gt; S2 &gt;
    requires std::sized_sentinel_for&lt;S, I2&gt;
friend constexpr std::iter_difference_t&lt;I2&gt;
    operator-( const common_iterator&amp; x, const std::common_iterator&lt;I2, S2&gt;&amp; y );
}}

计算两个迭代器适配器间的差。认为两个哨位相等。

令 {{tt|''var''}} 代表 {{lc|std::common_iterator}} 中的底层 {{lc|std::variant}} 成员对象，若 {{c|x}} 或 {{c|y}} 非法，即 {{c|x.var.valueless_by_exception() {{!!}} y.var.valueless_by_exception()}} 为 {{c|true}}，则行为未定义。

{{cpp/hidden friend|std::common_iterator&amp;lt;I&gt;|tmpl=yes}}

===参数===
{{par begin}}
{{par|x, y|要计算差的迭代器适配器}}
{{par end}}

===返回值===
* {{c|0}}，若 {{c|x.var}} 保有一个 {{tt|S}} 对象而 {{c|y.var}} 保有一个 {{tt|S2}} 对象，即它们都保有一个哨位。
* 否则为 {{c|alt_x - alt_y}}，其中 {{tt|alt_x}} 与 {{tt|alt_y}} 分别为 {{c|x.var}} 与 {{c|y.var}} 所保有的可选项（要么是两个迭代器，要么是一个迭代器与一个哨位）。

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;

int main()
{
    int a[]{0, 1, 2, 3, 4, 5};

    using CI = std::common_iterator&lt;
                   std::counted_iterator&lt;int*&gt;,
                   std::default_sentinel_t
                   &gt;;

    CI i1{std::counted_iterator{a + 1, 2}&lt;!----&gt;};
    CI i2{std::counted_iterator{a, 3}&lt;!----&gt;};
    CI s1{std::default_sentinel};
    CI s2{std::default_sentinel};

    std::cout &lt;&lt; (s2 - s1) &lt;&lt; ' '
              &lt;&lt; (i2 - i1) &lt;&lt; ' '
              &lt;&lt; (i1 - s1) &lt;&lt; '\n';
}
|output=0 -1 -2
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3574|std=C++20|before={{tt|variant}} 为完全 constexpr (P2231R1) 但 {{tt|common_iterator}} 不是|after=亦使之为 constexpr}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/common_iterator/dsc operator_arith}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru|}}
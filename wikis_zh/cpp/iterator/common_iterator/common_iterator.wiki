{{cpp/iterator/common_iterator/title|common_iterator}}
{{cpp/iterator/common_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr common_iterator() requires std::default_initializable&lt;I&gt; = default;&lt;!--P2325R3--&gt;
}}
{{dcl|num=2|since=c++20|
constexpr common_iterator( I i );
}}
{{dcl|num=3|since=c++20|
constexpr common_iterator( S s );
}}
{{dcl|num=4|since=c++20|
template&lt; class I2, class S2 &gt;
requires std::convertible_to&lt;const I2&amp;, I&gt; &amp;&amp; 
         std::convertible_to&lt;const S2&amp;, S&gt;
constexpr common_iterator( const common_iterator&lt;I2, S2&gt;&amp; x );
}}
{{dcl end}}

构造新的迭代器适配器，相当于初始化底层 {{c|std::variant&lt;I, S&gt;}} 成员对象 {{tt|''var''}} 以保有一个 {{tt|I}}（迭代器）或 {{tt|S}}（哨位）对象。

@1@ 默认构造函数。默认初始化 {{tt|''var''}}。构造后，{{tt|''var''}} 保有一个值初始化的 {{tt|I}} 对象。
当且仅当值初始化的 {{tt|I}} 上的操作拥有有定义行为时，在产生的迭代器适配器上的对应操作拥有有定义行为。

@2@ 构造后 {{tt|''var''}} 保有一个从 {{tt|i}} 移动构造的 {{tt|I}} 对象。

@3@ 构造后 {{tt|''var''}} 保有一个从 {{tt|s}} 移动构造的 {{tt|S}} 对象。

@4@ 若 {{c|x.var}} 保有一个 {{tt|I2}} 或 {{tt|S2}}，则构造后 {{tt|''var''}} 分别保有一个从 {{c|x.var}} 所保有的该可选项初始化的 {{tt|I}} 或 {{tt|S}} 对象。若 {{c|x}} 处于无效状态，即 {{c|x.var.valueless_by_exception()}} 为 {{c|true}}，则行为未定义。

===参数===
{{par begin}}
{{par|i|要适配的迭代器}}
{{par|s|要适配的哨位}}
{{par|x|要复制的迭代器适配器}}
{{par end}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;numeric&gt;
#include &lt;vector&gt;

int main()
{
    std::vector v{3, 1, 4, 1, 5, 9, 2};

    using CI = std::common_iterator&lt;
                   std::counted_iterator&lt;std::vector&lt;int&gt;::iterator&gt;,
                   std::default_sentinel_t&gt;;
    CI unused; // (1)
    CI start{std::counted_iterator{std::next(begin(v)), ssize(v) - 2}&lt;!----&gt;}; // (2)
    CI finish{std::default_sentinel}; // (3)
    CI first{start}; // (4)
    CI last{finish}; // (4)

    std::copy(first, last, std::ostream_iterator&lt;int&gt;{std::cout, " "});
    std::cout &lt;&lt; '\n';

    std::common_iterator&lt;
        std::counted_iterator&lt;
            std::ostream_iterator&lt;double&gt;&gt;,
            std::default_sentinel_t&gt;
            beg{std::counted_iterator{std::ostream_iterator&lt;double&gt;{std::cout,";  "}, 5}&lt;!----&gt;},
            end{std::default_sentinel};
    std::iota(beg, end, 3.1);
    std::cout &lt;&lt; '\n';
}
|output=
1 4 1 5 9
3.1;  4.1;  5.1;  6.1;  7.1;
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator{{=}}|common_iterator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/iterator/common_iterator/title|operator{{=}}}}
{{cpp/iterator/common_iterator/navbar}}
{{ddcl|since=c++20|1=
template&lt; class I2, class S2 &gt;
requires std::convertible_to&lt;const I2&amp;, I&gt; &amp;&amp;
         std::convertible_to&lt;const S2&amp;, S&gt; &amp;&amp;
         std::assignable_from&lt;I&amp;, const I2&amp;&gt; &amp;&amp;
         std::assignable_from&lt;S&amp;, const S2&amp;&gt;
constexpr common_iterator&amp; operator=( const common_iterator&lt;I2, S2&gt;&amp; x );
}}

从 {{c|x}} 的底层 {{lc|std::variant}} 成员对象 {{tt|''var''}} 赋值给 {{c|*this}} 的该成员。

令 {{tt|i}} 为 {{c|x.var.index()}}。则此赋值运算符等价于：
* {{c|1=std::get&lt;i&gt;(var) = std::get&lt;i&gt;(x.var)}}，若 {{c|1=var.index() == i}}，
* 否则为 {{c|1=var.emplace&lt;i&gt;(std::get&lt;i&gt;(x.var))}}。

若 {{c|x}} 处于无效状态，即 {{c|x.var.valueless_by_exception()}} 等于 {{c|true}}，则行为未定义。

===参数===
{{par begin}}
{{par|x|要从之赋值的迭代器适配器}}
{{par end}}

===返回值===
{{c|*this}}

===参数===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;initializer_list&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;

int main()
{
    const auto il = {1, 2, 3, 4, 5, 6};
    using CI = std::common_iterator&lt;
                   std::counted_iterator&lt;std::initializer_list&lt;int&gt;::iterator&gt;,
                   std::default_sentinel_t&gt;;
    CI first{std::counted_iterator{std::next(begin(il), 1), ssize(il) - 1}&lt;!----&gt;};
    const CI first2{std::counted_iterator{std::next(begin(il), 2), ssize(il) - 2}&lt;!----&gt;};
    const CI last{std::default_sentinel};
    std::copy(first, last, std::ostream_iterator&lt;int&gt;{std::cout, " "});
    std::cout &lt;&lt; '\n';
    first = first2;
    std::copy(first, last, std::ostream_iterator&lt;int&gt;{std::cout, " "});
    std::cout &lt;&lt; '\n';
}
|output=
2 3 4 5 6 
3 4 5 6
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3574|std=C++20|before={{tt|variant}} 为完全 constexpr (P2231R1) 但 {{tt|common_iterator}} 不是|after=亦使之为 constexpr}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc constructor|common_iterator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
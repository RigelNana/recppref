{{cpp/title|basic_const_iterator}}
{{cpp/iterator/basic_const_iterator/navbar}}
{{ddcl|header=iterator|since=c++23|1=
template&lt; std::input_iterator Iter &gt;
class basic_const_iterator;
}}

{{tt|std::basic_const_iterator}} 是一种迭代器适配器，其行为与底层迭代器（必须至少是{{named req|InputIterator}}或实现 {{lconcept|input_iterator}}）完全相同，只是其解引用会将底层迭代器返回的值转换为不可变值。{{tt|std::basic_const_iterator}} 的特化都是常量迭代器，也就是说，此迭代器永远不能用作输出迭代器，因为不允许修改元素。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|iterator_category}}&lt;br&gt;{{mark cond present}}|
如果 {{tt|Iter}} 实现 {{lconcept|forward_iterator}}：
* 成员 {{tt|iterator_category}} 和 {{c|std::iterator_traits&lt;Iter&gt;::iterator_category}} 是同一类型。
否则没有成员 {{tt|iterator_category}}。
}}
{{dsc|{{tt|iterator_concept}}|
* {{lc|std::contiguous_iterator_tag}}，如果 {{tt|Iter}} 实现 {{lconcept|contiguous_iterator}}；&lt;br&gt;
* 否则是 {{lc|std::random_access_iterator_tag}}，如果 {{tt|Iter}} 实现 {{lconcept|random_access_iterator}}；&lt;br&gt;
* 否则是 {{lc|std::bidirectional_iterator_tag}}，如果 {{tt|Iter}} 实现 {{lconcept|bidirectional_iterator}}；&lt;br&gt;
* 否则是 {{lc|std::forward_iterator_tag}}，如果 {{tt|Iter}} 实现 {{lconcept|forward_iterator}}；&lt;br&gt;
* 否则是 {{lc|std::input_iterator_tag}}}}
{{dsc|{{tt|value_type}}|{{c/core|std::iter_value_t&lt;Iter&gt;}}}}
{{dsc|{{tt|difference_type}}|{{c/core|std::iter_difference_t&lt;Iter&gt;}}}}
{{dsc|{{tti|reference}} {{mark|private}}|{{c/core|std::iter_const_reference_t&lt;Iter&gt;}}&lt;br&gt;{{mark expos mem type}}}}
{{dsc end}}

===成员对象===
{{dsc begin}}
{{dsc hitem|成员名|定义}}
{{dsc|{{tti|current}} {{mark|private}}|{{rlt|base|base()}} 从中复制或移动的底层迭代器&lt;br&gt;{{mark expos mem obj}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc constructor|basic_const_iterator}}
{{dsc inc|cpp/iterator/adaptor/dsc base|basic_const_iterator}}
{{dsc inc|cpp/iterator/adaptor/dsc operator*|basic_const_iterator}}
{{dsc inc|cpp/iterator/adaptor/dsc operator_at|basic_const_iterator}}
{{dsc inc|cpp/iterator/basic_const_iterator/dsc operator arith}}
{{dsc inc|cpp/iterator/basic_const_iterator/dsc operator constant_iterator}}
{{dsc inc|cpp/iterator/basic_const_iterator/dsc operator cmp}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/iterator/basic_const_iterator/dsc operator cmp2}}
{{dsc inc|cpp/iterator/basic_const_iterator/dsc operator arith2}}
{{dsc inc|cpp/iterator/adaptor/dsc operator-|basic_const_iterator}}
{{dsc inc|cpp/iterator/adaptor/dsc iter_move|basic_const_iterator}}
{{dsc end}}

===辅助类===
{{dsc begin}}
{{dsc inc|cpp/iterator/basic_const_iterator/dsc common_type}}
{{dsc end}}

===辅助别名模板===
{{dcl begin}}
{{dcl|since=c++23|1=
template&lt; std::input_iterator I &gt;
using const_iterator = /* 见下文 */;
}}
{{dcl end}}
如果 {{tt|I}} 实现 [[cpp/ranges/constant_range|{{tti|constant-iterator}}]]（仅用于阐述的概念），那么 {{c|const_iterator&lt;I&gt;}} 代表类型 {{tt|I}}。否则是 {{c|basic_const_iterator&lt;I&gt;}}。
{{dcl begin}}
{{dcl|since=c++23|1=
template&lt; std::semiregular S &gt;
using const_sentinel = /* 见下文 */;
}}
{{dcl end}}
如果 {{tt|S}} 实现 {{lconcept|input_iterator}}，那么 {{c|const_sentinel&lt;S&gt;}} 代表 {{c|const_iterator&lt;S&gt;}}。否则是 {{tt|S}}。

===辅助函数模板===
{{dcl begin}}
{{dcl|since=c++23|1=
template&lt; std::input_iterator T &gt;
constexpr const_iterator&lt;T&gt; make_const_iterator( I it ) { return it; }
}}
{{dcl|since=c++23|1=
template&lt; std::semiregular S &gt;
constexpr const_sentinel&lt;S&gt; make_const_sentinel( S s ) { return s; }
}}
{{dcl end}}

===注解===
{{ftm begin|sort=1}}
{{ftm|std=C++23|value=202207L|__cpp_lib_ranges_as_const|{{tt|std::basic_const_iterator}}|rowspan="2"}}
{{ftm|std=C++23|dr=yes|value=202311L|-|{{tt|std::basic_const_iterator}} 必须遵循其底层类型的可转换性}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main()
{
    std::vector v{1, 2, 3};
    std::vector&lt;int&gt;::iterator i = v.begin();
    *i = 4;   // OK，现在 v[0] == 4
    i[1] = 4; // OK，与 *(i + 1) = 4; 相同

    auto ci = std::make_const_iterator(i);
    assert(*ci == 4);   // OK，可以读取底层对象
    assert(ci[0] == 4); // OK，同上
    // *ci = 13;        // 错误：该位置只读
    // ci[0] = 13;      // 错误：同上
    ci.base()[0] = 42;  // OK，底层迭代器可写
    assert(*ci == 42);  // OK，修改了底层位置 v[0]
}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P2836R1|std=C++23|before={{tt|basic_const_iterator}} 不遵循其底层类型的可转换性|after=提供转换运算符}}
{{dr list end}}

{{langlinks|de|es|fr|it|ja|pt|ru|en}}
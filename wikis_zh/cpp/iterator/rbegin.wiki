{{cpp/title|rbegin|crbegin}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{cpp/iterator/range access headers}}
{{dcla|anchor=no|num=1|since=c++14|constexpr=c++17|
template&lt; class C &gt;
auto rbegin( C&amp; c ) -&gt; decltype(c.rbegin());
}}
{{dcla|anchor=no|num=2|since=c++14|constexpr=c++17|
template&lt; class C &gt;
auto rbegin( const C&amp; c ) -&gt; decltype(c.rbegin());
}}
{{dcl rev multi|num=3
{{dcla|anchor=no|num=3|since=c++14|constexpr=c++17|
template&lt; class T, std::size_t N &gt;
std::reverse_iterator&lt;T*&gt; rbegin( T (&amp;array)[N] );
}}
{{dcla|anchor=no|num=4|since=c++14|constexpr=c++17|
template&lt; class T &gt;
std::reverse_iterator&lt;const T*&gt; rbegin( std::initializer_list&lt;T&gt; il );
}}
{{dcla|anchor=no|num=5|since=c++14|constexpr=c++17|
template&lt; class C &gt;
auto crbegin( const C&amp; c ) -&gt; decltype(std::rbegin(c));
}}
{{dcl end}}

返回指向给定范围的逆向起始的迭代器。

@1,2@ 返回 {{c|c.rbegin()}}，它通常是指向 {{c|c}} 所代表的序列逆向起始的迭代器。
:@1@ 如果 {{tt|C}} 是标准{{named req|Container}}，那么就会返回 {{tt|C::reverse_iterator}} 对象。
:@2@ 如果 {{tt|C}} 是标准{{named req|Container}}，那么就会返回 {{tt|C::const_reverse_iterator}} 对象。

@3@ 返回指向 {{c|array}} 的逆向起始的 {{c/core|std::reverse_iterator&lt;T*&gt;}} 对象。

@4@ 返回指向 {{c|il}} 的逆向起始的 {{c/core|std::reverse_iterator&lt;const T*&gt;}} 对象。

@5@ 返回 {{c|std::begin(c)}}，这里 {{c|c}} 始终被视为 const 限定。
@@ 如果 {{tt|C}} 是标准{{named req|Container}}，那么就会返回 {{tt|C::const_reverse_iterator}} 对象。

{{image|range-rbegin-rend.svg}}

===参数===
{{par begin}}
{{par|c|拥有 {{tt|rbegin}} 方法的容器或视图}}
{{par|array|任意类型的数组}}
{{par|il|{{tt|initializer_list}}}}
{{par end}}

===返回值===
@1,2@ {{c|c.rbegin()}}
@3@ {{c|std::reverse_iterator&lt;T*&gt;(array + N)}}
@4@ {{c|std::reverse_iterator&lt;const T*&gt;(il.end())}}
@5@ {{c|c.rbegin()}}

{{cpp/impldef exception}}

===重载===
可以为未暴露适合的 {{tt|rbegin()}} 成员函数的类或枚举提供 {{tt|rbegin}} 的自定义重载，从而能迭代它。

{{rrev|since=c++20|
[[cpp/language/adl|实参依赖查找]]找到的 {{tt|rbegin}} 重载能用于定制 {{c/core|std::ranges::rbegin}} 与 {{lc|std::ranges::crbegin}} 的行为。
}}

===注解===
需要针对 {{lc|std::initializer_list}} 的重载，因为它没有成员函数 {{tt|rbegin}}。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;int&gt; v = {3, 1, 4};
    auto vi = std::rbegin(v); // “vi” 的类型是 std::vector&lt;int&gt;::reverse_iterator
    std::cout &lt;&lt; "*vi = " &lt;&lt; *vi &lt;&lt; '\n';
    
    *std::rbegin(v) = 42; // OK：赋值后 v[2] == 42
//  *std::crbegin(v) = 13; // 错误：此位置只读
    
    int a[] = {-5, 10, 15};
    auto ai = std::rbegin(a); // “ai” 的类型是 std::reverse_iterator&lt;int*&gt;
    std::cout &lt;&lt; "*ai = " &lt;&lt; *ai &lt;&lt; '\n';
    
    auto il = {3, 1, 4};
    // 下面的 “it” 的类型是 std::reverse_iterator&lt;int const*&gt;:
    for (auto it = std::rbegin(il); it != std::rend(il); ++it)
        std::cout &lt;&lt; *it &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
*vi = 4
*ai = 15
4 1 3
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc begin}}
{{dsc inc|cpp/iterator/dsc end}}
{{dsc inc|cpp/iterator/dsc rend}}
{{dsc inc|cpp/ranges/dsc rbegin}}
{{dsc inc|cpp/ranges/dsc crbegin}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
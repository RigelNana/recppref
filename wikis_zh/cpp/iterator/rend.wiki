{{cpp/title|rend|crend}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{cpp/iterator/range access headers}}
{{dcla|anchor=no|num=1|since=c++14|constexpr=c++17|
template&lt; class C &gt;
auto rend( C&amp; c ) -&gt; decltype(c.rend());
}}
{{dcla|anchor=no|num=2|since=c++14|constexpr=c++17|
template&lt; class C &gt;
auto rend( const C&amp; c ) -&gt; decltype(c.rend());
}}
{{dcla|anchor=no|num=3|since=c++14|constexpr=c++17|
template&lt; class T, std::size_t N &gt;
std::reverse_iterator&lt;T*&gt; rend( T (&amp;array)[N] );
}}
{{dcla|anchor=no|num=4|since=c++14|constexpr=c++17|
template&lt; class T &gt;
std::reverse_iterator&lt;const T*&gt; rend( std::initializer_list&lt;T&gt; il );
}}
{{dcla|anchor=no|num=5|since=c++14|constexpr=c++17|
template&lt; class C &gt;
auto crend( const C&amp; c ) -&gt; decltype(std::rend(c));
}}
{{dcl end}}

返回值向给定范围的逆向结尾的迭代器。

@1,2@ 返回 {{c|c.rend()}}，通常是指向 {{c|c}} 所代表的逆序序列末尾后一位置的迭代器。
:@1@ 如果 {{tt|C}} 是标准{{named req|Container}}，那么就会返回 {{tt|C::reverse_iterator}} 对象。
:@2@ 如果 {{tt|C}} 是标准{{named req|Container}}，那么就会返回 {{tt|C::const_reverse_iterator}} 对象。

@3@ 返回指向数组 {{c|array}} 的逆向结尾的 {{c/core|std::reverse_iterator&lt;T*&gt;}} 对象。

@4@ 返回指向 {{c|il}} 的逆向结尾的 {{c/core|std::reverse_iterator&lt;const T*&gt;}} 对象。

@5@ 返回 {{c|std::rend(c)}}，这里 {{c|c}} 始终当做 const 限定。
@@ 如果 {{tt|C}} 是标准{{named req|Container}}，那么就会返回 {{tt|C::const_reverse_iterator}} 对象。

{{image|range-rbegin-rend.svg}}

===参数===
{{par begin}}
{{par|c|拥有 {{tt|rend}} 成员函数的容器或视图}}
{{par|array|任意类型的数组}}
{{par|il|{{c/core|std::initializer_list}}}}
{{par end}}

===返回值===
@1,2@ {{c|c.rend()}}
@3@ {{c|std::reverse_iterator&lt;T*&gt;(array)}}
@4@ {{c|std::reverse_iterator&lt;const T*&gt;(il.begin())}}
@5@ {{c|c.rend()}}

{{cpp/impldef exception}}

===重载===
可对未暴露适合的 {{tt|rend()}} 成员函数的类或枚举提供 {{tt|rend}} 的定制重载，从而能迭代它们。

{{rrev|since=c++20|
[[cpp/language/adl|实参依赖查找]]找到的 {{tt|rend}} 重载能用于定制 {{c/core|std::ranges::rend}} 与 {{lc|std::ranges::crend}} 的行为。
}}

===注解===
需要针对 {{lc|std::initializer_list}} 的重载，因为它没有成员函数 {{tt|rend}}。

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main()
{
    int a[]{4, 6, -3, 9, 10};
    std::cout &lt;&lt; "C 风格数组 `a` 逆序：";
    std::copy(std::rbegin(a), std::rend(a), std::ostream_iterator&lt;int&gt;(std::cout, " "));
    
    auto il = {3, 1, 4};
    std::cout &lt;&lt; "\nstd::initializer_list `il` 逆序：";
    std::copy(std::rbegin(il), std::rend(il), std::ostream_iterator&lt;int&gt;(std::cout, " "));
    
    std::vector&lt;int&gt; v{4, 6, -3, 9, 10};
    std::cout &lt;&lt; "\nstd::vector `v` 逆序：";
    std::copy(std::rbegin(v), std::rend(v), std::ostream_iterator&lt;int&gt;(std::cout, " "));
    std::cout &lt;&lt; '\n';
}
|output=
C 风格数组 `a` 逆序：10 9 -3 6 4
std::initializer_list `il` 逆序：4 1 3
std::vector `v` 逆序：10 9 -3 6 4
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc end}}
{{dsc inc|cpp/iterator/dsc rbegin}}
{{dsc inc|cpp/iterator/dsc begin}}
{{dsc inc|cpp/ranges/dsc rend}}
{{dsc inc|cpp/ranges/dsc crend}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
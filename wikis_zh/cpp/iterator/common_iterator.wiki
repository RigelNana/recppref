{{cpp/title|common_iterator}}
{{cpp/iterator/common_iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl|since=c++20|1=
template&lt; std::input_or_output_iterator I, std::sentinel_for&lt;I&gt; S &gt;
    requires ( !std::same_as&lt;I, S&gt; &amp;&amp; std::copyable&lt;I&gt; )
class common_iterator;
}}
{{dcl end}}

{{tt|std::common_iterator}} 是一种迭代器 {{tt|I}} / 哨位 {{tt|S}} 适配器，可以通过包含迭代器或哨位之一，并定义适合的比较运算符 {{c|1=operator==}}，从而将非公共范围（其中 {{tt|I}} 与 {{tt|S}} 不同）表示成一种 {{lconcept|common_range}}。

{{tt|std::common_iterator}} 可以作为由迭代器/哨位对所表示的序列与期待 {{lconcept|common_range}} 式序列的遗留函数之间的“桥梁”。

===数据成员===
{{dsc begin}}
{{dsc hitem|成员名|定义}}
{{dsc expos mem obj|var|{{c/core|std::variant&lt;I, S&gt;}} 类型的对象}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc constructor|common_iterator}}
{{dsc inc|cpp/iterator/adaptor/dsc operator{{=}}|common_iterator}}
{{dsc inc|cpp/iterator/adaptor/dsc operator*|common_iterator}}
{{dsc inc|cpp/iterator/common_iterator/dsc operator arith}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/iterator/common_iterator/dsc operator cmp}}
{{dsc inc|cpp/iterator/common_iterator/dsc operator-}}
{{dsc inc|cpp/iterator/adaptor/dsc iter_move|common_iterator}}
{{dsc inc|cpp/iterator/adaptor/dsc iter_swap|common_iterator}}
{{dsc end}}

===辅助类===
{{dsc begin}}
{{dsc inc|cpp/iterator/common_iterator/dsc incrementable_traits}}
{{dsc inc|cpp/iterator/common_iterator/dsc iterator_traits}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;list&gt;
#include &lt;string&gt;

template&lt;class ForwardIter&gt;
void fire(ForwardIter first, ForwardIter last)
{
    std::copy(first, last, std::ostream_iterator&lt;std::string&gt;{std::cout, " "});    
}

int main()
{
    std::list&lt;std::string&gt; stars{"Pollux", "Arcturus", "Mira", "Aldebaran", "Sun"};

    using IT = std::common_iterator&lt;
                   std::counted_iterator&lt;std::list&lt;std::string&gt;::iterator&gt;,
                   std::default_sentinel_t&gt;;

    fire(IT(std::counted_iterator(stars.begin(), stars.size() - 1)),
         IT(std::default_sentinel));
}
|output=
Pollux Arcturus Mira Aldebaran
}}

===引用===
{{ref std c++23}}
{{ref std|section=23.5.5|title=Common iterators|id=iterators.common}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=23.5.4|title=Common iterators|id=iterators.common}}
{{ref std end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/ranges/dsc common_range}}
{{dsc inc|cpp/ranges/dsc common_view}}
{{dsc end}}

{{langlinks|cs|de|en|es|fr|it|ja|ko|pl|pt|ru}}
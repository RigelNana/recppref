{{title|1=operator==,!=,&lt;,&lt;=,&gt;,&gt;=,&lt;=&gt;{{petty|(std::move_iterator)}}}}
{{cpp/iterator/move_iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcla|num=1|constexpr=c++17|1=
template&lt; class Iter1, class Iter2 &gt;
bool operator==( const std::move_iterator&lt;Iter1&gt;&amp; lhs,
                 const std::move_iterator&lt;Iter2&gt;&amp; rhs );
}}
{{dcla|num=2|constexpr=c++17|until=c++20|1=
template&lt; class Iter1, class Iter2 &gt;
bool operator!=( const std::move_iterator&lt;Iter1&gt;&amp; lhs,
                 const std::move_iterator&lt;Iter2&gt;&amp; rhs );
}}
{{dcla|num=3|constexpr=c++17|
template&lt; class Iter1, class Iter2 &gt;
bool operator&lt; ( const std::move_iterator&lt;Iter1&gt;&amp; lhs,
                 const std::move_iterator&lt;Iter2&gt;&amp; rhs );
}}
{{dcla|num=4|constexpr=c++17|1=
template&lt; class Iter1, class Iter2 &gt;
bool operator&lt;=( const std::move_iterator&lt;Iter1&gt;&amp; lhs,
                 const std::move_iterator&lt;Iter2&gt;&amp; rhs );
}}
{{dcla|num=5|constexpr=c++17|
template&lt; class Iter1, class Iter2 &gt;
bool operator&gt; ( const std::move_iterator&lt;Iter1&gt;&amp; lhs,
                 const std::move_iterator&lt;Iter2&gt;&amp; rhs );
}}
{{dcla|num=6|constexpr=c++17|1=
template&lt; class Iter1, class Iter2 &gt;
bool operator&gt;=( const std::move_iterator&lt;Iter1&gt;&amp; lhs,
                 const std::move_iterator&lt;Iter2&gt;&amp; rhs );
}}
{{dcl|num=7|since=c++20|1=
template&lt; class Iter1, std::three_way_comparable_with&lt;Iter1&gt; Iter2 &gt;
constexpr std::compare_three_way_result_t&lt;Iter1, Iter2&gt;
    operator&lt;=&gt;( const std::move_iterator&lt;Iter1&gt;&amp; lhs,
                 const std::move_iterator&lt;Iter2&gt;&amp; rhs );
}}
{{dcl end}}

比较 {{c|lhs}} 与 {{c|rhs}} 的底层迭代器。

{{rrev|since=c++20|
@1@ {{cpp/enable if| {{c|1=lhs.base() == rhs.base()}} 良构并且可转换到 {{c/core|bool}} }}。

@3-6@ {{cpp/enable if| {{c|lhs.base() &lt; rhs.base()}} 良构并且可转换到 {{c/core|bool}} }}。

{{cpp/note synthesized eq}}
}}

===参数===
{{par begin}}
{{par|lhs, rhs|要比较的迭代器适配器}}
{{par end}}

===返回值===
@1@ {{c|1=lhs.base() == rhs.base()}}
@2@ {{c|1=lhs.base() != rhs.base()}}
@3@ {{c|lhs.base() &gt; rhs.base()}}
@4@ {{c|1=lhs.base() &gt;= rhs.base()}}
@5@ {{c|lhs.base() &lt; rhs.base()}}
@6@ {{c|1=lhs.base() &lt;= rhs.base()}}
@7@ {{c|1=rhs.base() &lt;=&gt; lhs.base()}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iterator&gt;

int main()
{
    int a[]{9, 8, 7, 6};
    //            │  └───── x, y
    //            └──────── z

    // “x” 与 “y” 相等，但 “x” 大于 “z”
    std::move_iterator&lt;int*&gt;
        x{std::end(a) - 1},
        y{std::end(a) - 1},
        z{std::end(a) - 2};

    // 双路比较
    assert(  x == y );
    assert(!(x != y));
    assert(!(x &lt;  y));
    assert(  x &lt;= y );
    assert(!(x == z));
    assert(  x != z );
    assert(!(x &lt;  z));
    assert(!(x &lt;= z));

    // 三路比较
    assert(  x &lt;=&gt; y == 0 );
    assert(!(x &lt;=&gt; y &lt;  0));
    assert(!(x &lt;=&gt; y &gt;  0));
    assert(!(x &lt;=&gt; z == 0));
    assert(!(x &lt;=&gt; z &lt;  0));
    assert(  x &lt;=&gt; z &gt;  0 );
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/move_iterator/dsc operator cmp2}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/iterator/move_iterator/title|operator[]}}
{{cpp/iterator/move_iterator/navbar}}
{{dcl begin}}
{{dcl rev begin}}
{{dcla|constexpr=c++17|until=c++20|
/* 未指定 */ operator[]( difference_type n ) const; 
}}
{{dcl|since=c++20|
constexpr reference operator[]( difference_type n ) const; 
}}
{{dcl end}}

返回到位于指定相对位置的元素的引用。

===参数===
{{par begin}}
{{par|n|相对于当前位置的位置}}
{{par end}}

===返回值===
{{rev inl|until=c++20|{{box|{{c/core|std::move(}}{{rlpsi|/#current}}{{sep}}{{c/core|[n])}}}}}}{{rev inl|since=c++20|{{box|{{c/core|ranges::iter_move(}}{{rlpsi|/#current}}{{nbspt}}{{c/core|+ n)}}}}}}

===注解===
{{rrev|until=c++20|
不指定返回类型的原因是底层迭代器的 {{c/core|operator[]}} 也没有指定返回类型（见{{named req|RandomAccessIterator}}）。
}}

===示例===
{{example
|code=
#include &lt;cstddef&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;list&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

void print(auto rem, const auto&amp; v)
{
    for (std::cout &lt;&lt; rem; const auto&amp; e : v)
        std::cout &lt;&lt; std::quoted(e) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::vector&lt;std::string&gt; p{"alpha", "beta", "gamma", "delta"}, q;
    print("1) p: ", p);
    
    std::move_iterator it{p.begin()};
    
    for (std::size_t t{}; t != p.size(); ++t)
        q.emplace_back(it[t]); 
    
    print("2) p: ", p);
    print("3) q: ", q);
    
    std::list l{1, 2, 3};
    std::move_iterator it2{l.begin()};
//  it2[1] = 13; // 编译错误：底层迭代器未实现随机访问迭代器
//  *it2 = 999;  // 编译错误：以右值为左值
}
|p=true
|output=
1) p: "alpha" "beta" "gamma" "delta"
2) p: "" "" "" ""
3) q: "alpha" "beta" "gamma" "delta"
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator*|move_iterator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
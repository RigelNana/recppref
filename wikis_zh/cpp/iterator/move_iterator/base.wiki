{{cpp/iterator/move_iterator/title|base}}
{{cpp/iterator/move_iterator/navbar}}
{{dcl begin}}
{{dcl rev begin|num=1}}
{{dcla|anchor=1|constexpr=c++17|until=c++20|
iterator_type base() const;
}}
{{dcl|since=c++20|
constexpr const iterator_type&amp; base() const&amp; noexcept;
}}
{{dcl rev end}}
{{dcl|num=2|since=c++20|
constexpr iterator_type base() &amp;&amp;;
}}
{{dcl end}}

返回底层迭代器。

@1@ 返回{{rev inl|until=c++20|底层迭代器的副本}}{{rev inl|since=c++20|到底层迭代器的引用}}。

@2@ 返回从底层迭代器移动构造的迭代器。

===返回值===
@1@ {{box|{{rlpsi|/#current}}}}

@2@ {{box|{{c/core|std::move(}}{{rlpsi|/#current}}{{sep}}{{c/core|)}}}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;int&gt; v{0, 1, 2, 3, 4};
    std::move_iterator&lt;std::vector&lt;int&gt;::reverse_iterator&gt;
        m1{v.rbegin()},
        m2{v.rend()};
    
    std::copy(m1.base(), m2.base(), std::ostream_iterator&lt;int&gt;(std::cout, " "));
    std::cout &lt;&lt; '\n';
}
|output=4 3 2 1 0
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3391|std=C++20|before=重载 {{vl|1}} 会复制底层迭代器|after=改为返回底层迭代器的引用}}
{{dr list item|wg=lwg|dr=3593|std=C++20|before=重载 {{vl|1}} 不是 noexcept|after=使之为 noexcept}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator*|move_iterator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
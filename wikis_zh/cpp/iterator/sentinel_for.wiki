{{cpp/title|sentinel_for}}
{{cpp/iterator/navbar}}
{{ddcl|header=iterator|since=c++20|1=
template&lt; class S, class I &gt;
    concept sentinel_for =
        std::semiregular&lt;S&gt; &amp;&amp;
        std::input_or_output_iterator&lt;I&gt; &amp;&amp;
        __WeaklyEqualityComparableWith&lt;S, I&gt;;
}}

{{tt|sentinel_for}} 概念描述的 {{lconcept|input_or_output_iterator}} 与 {{lconcept|semiregular}} 类型间的关系，二者的值代表范围。仅用于阐释的概念 {{tt|''__WeaklyEqualityComparableWith''}} 描述于 {{lconcept|equality_comparable}}。

===语义要求===
令 {{tt|s}} 与 {{tt|i}} 分别为 {{tt|S}} 与 {{tt|I}} 类型的值，使得 {{range|i|s}} 代表一个[[cpp/iterator#范围|范围]]。{{tt|sentinel_for&amp;lt;S, I&gt;}} 仅若下列条件成立才得到实现：

* {{c|1=i == s}} 良构。
* 若 {{c|1=bool(i != s)}} 则 {{tt|i}} 可解引用且 {{range|++i|s}} 代表一个范围。
* {{c|std::assignable_from&lt;I&amp;, S&gt;}} 要么得到实现，要么不被满足。

{{tt|1===}} 的定义域能随时间而更改。给定迭代器 {{tt|i}} 和哨位 {{tt|s}} 并使得 {{range|i|s}} 代表范围且 {{c|1=i != s}}，不要求自增任何等于 {{tt|i}} 的迭代器后 {{range|i|s}} 继续代表范围（从而这种自增后不再要求 {{c|1=i == s}} 是良定义的）。

===注解===
不要求哨位类型与其对应的迭代器类型实现 {{lconcept|equality_comparable_with}}，因为可能哨位类型不能与自身比较，而且不要求它们拥有公共引用类型。

C++17 起已容许在[[cpp/language/range-for|基于范围的 {{tt|for}} 循环]]中使用异于迭代器类型的哨位类型。

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3453|std=C++20|before={{tt|sentinel_for}} 的语义要求对 {{tt|ranges::advance}} 过于宽松|after=已强化}}
{{dr list end}}

{{langlinks|es|ja|zh}}
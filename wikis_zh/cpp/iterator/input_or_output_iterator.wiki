{{cpp/title|input_or_output_iterator}}
{{cpp/iterator/navbar}}
{{ddcl|header=iterator|since=c++20|1=
template&lt; class I &gt;
    concept input_or_output_iterator =
        requires(I i) {
            { *i } -&gt; /*can-reference*/;
        } &amp;&amp;
        std::weakly_incrementable&lt;I&gt;;
}}

{{tt|input_or_output_iterator}} 概念组成迭代器分类法的基础；每个迭代器类型都满足 {{tt|input_or_output_iterator}} 要求。

当且仅当类型[[cpp/meta#定义|可引用]]时，仅用于阐述的的概念 {{c|/*can-reference*/}} 得到满足。&lt;!--{{cpp/concepts/equality preservation}}--&gt;

=== 注解 ===
{{tt|input_or_output_iterator}} 自身仅指定解引用和自增迭代器的操作。大多数算法会要求额外的操作：
* 对迭代器与哨位的比较（见 {{lconcept|sentinel_for}}）；
* 从迭代器读取值（见 {{lconcept|indirectly_readable}} 及 {{lconcept|input_iterator}}）；
* 向迭代器写入值（见 {{lconcept|indirectly_writable}} 及 {{lconcept|output_iterator}}）；
* 一组更丰富的迭代器移动（见 {{lconcept|forward_iterator}}、{{lconcept|bidirectional_iterator}}、{{lconcept|random_access_iterator}}）。

不同于{{named req|Iterator}}要求，{{tt|input_or_output_iterator}} 概念不要求可复制性。

要求 {{c/core|*i}} 保持相等性，尽管不对 {{lconcept|weakly_incrementable}}} 所要求的自增操作如此要求。

===示例===
最小化的迭代器。

{{source|1=
#include &lt;cstddef&gt;
#include &lt;iterator&gt;

struct SimpleIterator
{
    using difference_type = std::ptrdiff_t;
    
    int operator*();
    
    SimpleIterator&amp; operator++();
    void operator++(int) { ++*this; }
};

static_assert(std::input_or_output_iterator&lt;SimpleIterator&gt;);
}}

{{langlinks|en|es|ja}}
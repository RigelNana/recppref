{{cpp/title|indirectly_readable}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl|notes={{mark expos}}|1=
template&lt; class In &gt;
    concept __IndirectlyReadableImpl =
        requires(const In in) {
            typename std::iter_value_t&lt;In&gt;;
            typename std::iter_reference_t&lt;In&gt;;
            typename std::iter_rvalue_reference_t&lt;In&gt;;
            { *in } -&gt; std::same_as&lt;std::iter_reference_t&lt;In&gt;&gt;;
            { ranges::iter_move(in) } -&gt; std::same_as&lt;std::iter_rvalue_reference_t&lt;In&gt;&gt;;
        } &amp;&amp;
        std::common_reference_with&lt;
            std::iter_reference_t&lt;In&gt;&amp;&amp;, std::iter_value_t&lt;In&gt;&amp;
        &gt; &amp;&amp;
        std::common_reference_with&lt;
            std::iter_reference_t&lt;In&gt;&amp;&amp;, std::iter_rvalue_reference_t&lt;In&gt;&amp;&amp;
        &gt; &amp;&amp;
        std::common_reference_with&lt;
            std::iter_rvalue_reference_t&lt;In&gt;&amp;&amp;, const std::iter_value_t&lt;In&gt;&amp;
        &gt;;
}}
{{dcl|since=c++20|1=
template&lt; class In &gt;
    concept indirectly_readable =
        __IndirectlyReadableImpl&lt;std::remove_cvref_t&lt;In&gt;&gt;;
}}
{{dcl end}}

概念 {{tt|indirectly_readable}} 由通过应用 {{c|operator*}} 可读的类型实现，例如指针、智能指针及输入迭代器。

===语义要求===
给定 {{tt|I}} 类型的值 {{tt|i}}，仅若被蕴含的所有概念均得到实现且表达式 {{c|*i}} 保持相等性，{{tt|I}} 才实现 {{tt|indirectly_readable}}。

{{cpp/concepts/equality preservation}}

{{langlinks|cs|de|en|es|fr|it|ja|ko|pl|pt|ru}}
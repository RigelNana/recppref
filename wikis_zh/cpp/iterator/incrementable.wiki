{{cpp/title|incrementable}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator|since=c++20}}
{{dcl|since=c++20|1=
template&lt; class I &gt;
    concept incrementable =
        std::regular&lt;I&gt; &amp;&amp;
        std::weakly_incrementable&lt;I&gt; &amp;&amp;
        requires(I i) {
            { i++ } -&gt; std::same_as&lt;I&gt;;
        };
}}
{{dcl end}}

此概念指定对于“能以前后自增运算符自增的类型”的要求，其自增运算必须[[cpp/concepts#保持相等性|保持相等性]]，且类型为 {{lc|std::equality_comparable}}。

不同于仅支持单趟算法的 {{lc|std::weakly_incrementable}}，实现 {{tt|std::incrementable}} 的类型可用于多趟单方向算法。

===语义要求===
{{tt|I}} 仅若满足下列条件才实现 {{tt|std::incrementable}}。给定类型 {{tt|I}} 的两个可自增对象 {{tt|a}} 与 {{tt|b}}：
* {{c|1=bool(a == b)}} 蕴含 {{c|1=bool(a++ == b)}}，且
* {{c|1=bool(a == b)}} 蕴含 {{c|1=bool(((void)a++, a) == ++b)}}。

{{cpp/concepts/equality preservation}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc weakly_incrementable}}
{{dsc inc|cpp/concepts/dsc same_as}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
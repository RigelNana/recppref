{{title|1=operator-{{petty|(std::reverse_iterator)}}}}
{{cpp/iterator/reverse_iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl rev begin}}
{{dcl|until=c++11|
template&lt; class Iter1, class Iter2 &gt;
typename reverse_iterator&lt;Iter&gt;::difference_type 
    operator-( const reverse_iterator&lt;Iter1&gt;&amp; lhs,
               const reverse_iterator&lt;Iter2&gt;&amp; rhs );
}}
{{dcla|since=c++11|constexpr=c++17|
template&lt; class Iter1, class Iter2 &gt;
auto operator-( const reverse_iterator&lt;Iter1&gt;&amp; lhs,
                const reverse_iterator&lt;Iter2&gt;&amp; rhs )
    -&gt; decltype(rhs.base() - lhs.base());
}}
{{dcl rev end}}
{{dcl end}}

返回两个迭代器适配器间的距离。

===参数===
{{par begin}}
{{par|lhs, rhs|要计算距离的迭代器适配器}}
{{par end}}

===返回值===
{{c|rhs.base() - lhs.base()}}

===注解===
因为这是逆向迭代器，所以 {{c/core|operator-}} 返回的是 {{c|rhs.base() - lhs.base()}} 而不是 {{c|lhs.base() - rhs.base()}}。

===示例===
{{example|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;list&gt;
#include &lt;vector&gt;

int main()
{
    std::vector vec{0, 1, 2, 3};
    std::reverse_iterator&lt;std::vector&lt;int&gt;::iterator&gt;
        vec_ri1{std::reverse_iterator{vec.rbegin()}&lt;!----&gt;},
        vec_ri2{std::reverse_iterator{vec.rend()}&lt;!----&gt;};
    std::cout &lt;&lt; (vec_ri2 - vec_ri1) &lt;&lt; ' '; // 4
    std::cout &lt;&lt; (vec_ri1 - vec_ri2) &lt;&lt; '\n'; // -4
    
    std::list lst{5, 6, 7, 8};
    std::reverse_iterator&lt;std::list&lt;int&gt;::iterator&gt;
        lst_ri1{std::reverse_iterator{lst.rbegin()}&lt;!----&gt;},
        lst_ri2{std::reverse_iterator{lst.rend()}&lt;!----&gt;};
//  auto n = (lst_ri1 - lst_ri2); // 错误：底层迭代器未实现随机访问迭代器
}
|output=4 -4
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=280|std=C++98|before=不允许异质相减|after=允许异质相减}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator arith|reverse_iterator}}
{{dsc inc|cpp/iterator/adaptor/dsc operator+|reverse_iterator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
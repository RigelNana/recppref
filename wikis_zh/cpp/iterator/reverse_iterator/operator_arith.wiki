{{cpp/iterator/reverse_iterator/title|1=operator++,+,+=,--,-,-=}}
{{cpp/iterator/reverse_iterator/navbar}}
{{dcl begin}}
{{dcla|num=1|constexpr=c++17|
reverse_iterator&amp; operator++();
}}
{{dcla|num=2|constexpr=c++17|
reverse_iterator&amp; operator--();
}}
{{dcla|num=3|constexpr=c++17|
reverse_iterator operator++( int );
}}
{{dcla|num=4|constexpr=c++17|
reverse_iterator operator--( int );
}}
{{dcla|num=5|constexpr=c++17|
reverse_iterator operator+( difference_type n ) const;
}}
{{dcla|num=6|constexpr=c++17|
reverse_iterator operator-( difference_type n ) const;
}}
{{dcla|num=7|constexpr=c++17|1=
reverse_iterator&amp; operator+=( difference_type n );
}}
{{dcla|num=8|constexpr=c++17|1=
reverse_iterator&amp; operator-=( difference_type n );
}}
{{dcl end}}

反向自增或自减底层迭代器。

{|class="wikitable" style="text-align: center;"
!{{nbsp|2}}重载{{nbsp|2}}
!等价于
|-
|{{v|1}}
|{{box|{{c/core|--}}{{rlpst|/#current}}{{c/core|; return *this;}}}}
|-
|{{v|2}}
|{{box|{{c/core|++}}{{rlpst|/#current}}{{c/core|; return *this;}}}}
|-
|{{v|3}}
|{{nbsp}}{{box|{{c/core|1=reverse_iterator tmp = *this; --}}{{rlpst|/#current}}{{c/core|; return tmp;}}}}{{nbsp}}
|-
|{{v|4}}
|{{box|{{c/core|1=reverse_iterator tmp = *this; ++}}{{rlpst|/#current}}{{c/core|; return tmp;}}}}
|-
|{{v|5}}
|{{box|{{c/core|return reverse_iterator(}}{{rlpst|/#current}}{{nbspt}}{{c/core|- n);}}}}
|-
|{{v|6}}
|{{box|{{c/core|return reverse_iterator(}}{{rlpst|/#current}}{{nbspt}}{{c/core|+ n);}}}}
|-
|{{v|7}}
|{{box|{{rlpst|/#current}}{{nbspt}}{{c/core|1=-= n; return *this;}}}}
|-
|{{v|8}}
|{{box|{{rlpst|/#current}}{{nbspt}}{{c/core|1=+= n; return *this;}}}}
|}

===参数===
{{par begin}}
{{par|n|相对于当前位置的位置}}
{{par end}}

===返回值===
如上所述。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;list&gt;
#include &lt;vector&gt;

int main()
{
    std::vector v{0, 1, 2, 3, 4};
    auto rv = std::reverse_iterator{v.rbegin()};
    std::cout &lt;&lt; *(++rv) &lt;&lt; ' '; // 3
    std::cout &lt;&lt; *(--rv) &lt;&lt; ' '; // 4
    std::cout &lt;&lt; *(rv + 3) &lt;&lt; ' '; // 1
    rv += 3;
    std::cout &lt;&lt; rv[0] &lt;&lt; ' '; // 1
    rv -= 3;
    std::cout &lt;&lt; rv[0] &lt;&lt; '\n'; // 4
    
    std::list l{5, 6, 7, 8};
    auto rl = std::reverse_iterator{l.rbegin()};
    std::cout &lt;&lt; *(++rl) &lt;&lt; ' '; // OK：3
    std::cout &lt;&lt; *(--rl) &lt;&lt; '\n'; // OK：4
    // 以下语句会产生编译错误，因为底层迭代器未实现随机访问迭代器：
//  *(rl + 3) = 13;
//  rl += 3;
//  rl -= 3;
}
|output=
3 4 1 1 4
7 8
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator+|reverse_iterator}}
{{dsc inc|cpp/iterator/adaptor/dsc operator-|reverse_iterator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
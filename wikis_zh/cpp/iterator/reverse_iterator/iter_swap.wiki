{{cpp/title|iter_swap{{petty|(std::reverse_iterator)}}}}
{{cpp/iterator/reverse_iterator/navbar}}
{{ddcl|since=c++20|
template&lt; std::indirectly_swappable&lt;Iter&gt; Iter2 &gt;
friend constexpr void iter_swap( const reverse_iterator&amp; x,
                                 const std::reverse_iterator&lt;Iter2&gt;&amp; y )
    noexcept(/* 见下文 */);
}}

交换两个调整后的底层迭代器所指向的元素。

等价于 {{c multi|auto tmp_x {{=}} x.base();|auto tmp_y {{=}} y.base();|ranges::iter_swap(--tmp_x, --tmp_y);}}。

{{cpp/hidden friend|{{c/core|std::reverse_iterator&lt;Iter&gt;}}|tmpl=yes}}

===参数===
{{par begin}}
{{par|x, y|要交换元素的逆向迭代器}}
{{par end}}

===复杂度===
常数。

===异常===
{{noexcept|
    std::is_nothrow_copy_constructible_v&lt;Iter&gt; &amp;&amp;
    std::is_nothrow_copy_constructible_v&lt;Iter2&gt; &amp;&amp;
    noexcept(ranges::iter_swap(--std::declval&lt;Iter&amp;&gt;(), --std::declval&lt;Iter2&amp;&gt;()))
}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;list&gt;
#include &lt;vector&gt;

int main()
{
    std::vector v{1, 2, 3};
    std::list l{4, 5, 6};
    
    std::reverse_iterator&lt;std::vector&lt;int&gt;::iterator&gt; r1{v.rbegin()};
    std::reverse_iterator&lt;std::list&lt;int&gt;::iterator&gt; r2{l.rbegin()};
    
    std::cout &lt;&lt; *r1 &lt;&lt; ' ' &lt;&lt; *r2 &lt;&lt; '\n';
    
    iter_swap(r1, r2); // 实参依赖查找
    
    std::cout &lt;&lt; *r1 &lt;&lt; ' ' &lt;&lt; *r2 &lt;&lt; '\n';
}
|output=
3 6
6 3
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/algorithm/dsc swap}}
{{dsc inc|cpp/algorithm/dsc swap_ranges}}
{{dsc inc|cpp/algorithm/dsc iter_swap}}
{{dsc inc|cpp/iterator/ranges/dsc iter_swap}}
{{dsc inc|cpp/iterator/adaptor/dsc iter_swap|move_iterator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/iterator/reverse_iterator/title|reverse_iterator}}
{{cpp/iterator/reverse_iterator/navbar}}
{{dcl begin}}
{{dcla|num=1|constexpr=c++17|
reverse_iterator();
}}
{{dcla|num=2|constexpr=c++17|
explicit reverse_iterator( iterator_type x );
}}
{{dcla|num=3|constexpr=c++17|
template&lt; class U &gt;
reverse_iterator( const reverse_iterator&lt;U&gt;&amp; other );
}}
{{dcl end}}

构造新的 {{tt|reverse_iterator}}。

{|class="wikitable" style="text-align: center;"
!{{nbsp|2}}重载{{nbsp|2}}
!style="font-weight: normal;"|{{rlpst|/#current}}
|-
|{{v|1}}
|[[cpp/language/value initialization|值初始化]]
|-
|{{v|2}}
|以 {{c|x}} 初始化
|-
|{{v|3}}
|{{nbsp}}以 {{box|{{c/core|other.}}{{rlpst|/#current}}}} 初始化{{nbsp}}
|}

@3@ 转换构造函数。
{{rrev|since=c++20|
{{cpp/enable if| {{c|std::is_same_v&lt;U, Iter&gt;}} 是 {{c|false}} 且 {{c|std::convertible_to&lt;const U&amp;, Iter&gt;}} 得到实现}}。
}}

===参数===
{{par begin}}
{{par|x|要适配的迭代器}}
{{par|other|要复制的迭代器适配器}}
{{par end}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;concepts&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main()
{
    std::vector v{0, 1, 2, 3, 4};

    using ReverseIt = std::reverse_iterator&lt;std::vector&lt;int&gt;::const_iterator&gt;;

    ReverseIt i1; // 重载 (1)
    i1 = v.crbegin();
    assert(*i1 == 4);

    ReverseIt i2(i1); // 重载 (2)
    assert(i2[0] == 4);

    int x[]{1, 2, 3};
    auto i3 = std::reverse_iterator&lt;int*&gt;(x + std::size(x)); // 重载 (1)
    i3[0] = -3;
    assert(x[2] == -3);
    std::reverse_iterator&lt;int const*&gt; i4(i3); // 重载 (3): int =&gt; const int
    static_assert(std::convertible_to&lt;decltype(i3)::value_type,
                                      decltype(i4)::value_type&gt;);
    // i4[0] = 5; // 错误：对只读位置赋值
}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=235|std=C++98|before=未指定重载 {{vl|1}} 的效果|after=已指定}}
{{dr list item|wg=lwg|dr=1012|std=C++98|before=重载 {{vl|1}} 会默认初始化 {{rlpst|/#current}}|after=改为值初始化}}
{{dr list item|wg=lwg|dr=3435|std=C++20|before=重载 {{vl|3}} 没有被约束|after=添加约束}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator{{=}}|reverse_iterator}}
{{dsc inc|cpp/iterator/dsc make_reverse_iterator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/iterator/reverse_iterator/title|operator[]}}
{{cpp/iterator/reverse_iterator/navbar}}
{{ddcla|constexpr=c++17|
/* 未指定 */ operator[]( difference_type n ) const;
}}

返回对处于指定相对位置的元素的引用。

===参数===
{{par begin}}
{{par|n|相对于当前位置的位置}}
{{par end}}

===返回值===
{{box|{{rlpst|/#current}}{{c/core|[-n - 1]}}}}

===注解===
返回类型被 {{lwg|386}} 改为未指定，因为当时底层迭代器的 {{c/core|operator[]}} 的返回类型也未指定。

然而，到了 {{stddoc|N3066}} 时，{{named req|RandomAccessIterator}}的 {{c/core|operator[]}} 的返回值规定可以转换为 {{c/core|reference}}。所有的常见实现中，{{c/core|operator[]}} 的返回类型均被声明为 {{c/core|reference}}。另见 {{lwg|2595}}。

===示例===
{{example
|code=
#include &lt;array&gt;
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;list&gt;
#include &lt;vector&gt;

int main()
{
    int a[]{0, 1, 2, 3};
    std::reverse_iterator&lt;int*&gt; iter1{std::rbegin(a)};
    for (std::size_t i{}; i != std::size(a); ++i)
        std::cout &lt;&lt; iter1[i] &lt;&lt; ' '; // decltype(iter1[i]) 是 int&amp;
    std::cout &lt;&lt; '\n';
    
    std::vector v{0, 1, 2, 3};
    std::reverse_iterator&lt;std::vector&lt;int&gt;::iterator&gt; iter2{std::rbegin(v)};
    for (std::size_t i{}; i != std::size(v); ++i)
        std::cout &lt;&lt; iter2[i] &lt;&lt; ' '; // decltype(iter2[i]) 是 int&amp;
    std::cout &lt;&lt; '\n';
    
    // constexpr 语境
    constexpr static std::array&lt;int, 4&gt; z{0, 1, 2, 3};
    constexpr std::reverse_iterator&lt;decltype(z)::const_iterator&gt; iter3{std::crbegin(z)};
    static_assert(iter3[1] == 2);
    
    std::list li{0, 1, 2, 3};
    std::reverse_iterator&lt;std::list&lt;int&gt;::iterator&gt; iter4{std::rbegin(li)};
    *iter4 = 42;   // OK
//  iter4[0] = 13; // 编译错误：底层迭代器并未实现随机访问迭代器
}
|output=
3 2 1 0
3 2 1 0
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=386|std=C++98|before=返回类型是 {{tt|reference}}|after=改为未指定}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator*|reverse_iterator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
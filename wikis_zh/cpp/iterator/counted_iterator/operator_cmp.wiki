{{title|1=operator==,&lt;=&gt;&lt;small&gt;(std::counted_iterator)&lt;/small&gt;}}
{{cpp/iterator/counted_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
template&lt; std::common_with&lt;I&gt; I2 &gt;
    friend constexpr bool operator==(
        const counted_iterator&amp; x, const counted_iterator&lt;I2&gt;&amp; y );
}}
{{dcl|num=2|since=c++20|1=
template&lt; std::common_with&lt;I&gt; I2 &gt;
    friend constexpr strong_ordering operator&lt;=&gt;(
        const counted_iterator&amp; x, const counted_iterator&lt;I2&gt;&amp; y );
}}
{{dcl end}}

比较底层长度（即到末尾的距离）。

@1@ 检查长度是否相等。

@2@ 用运算符 {{tt|1=&lt;=&gt;}} 比较底层长度。

若 {{c|x}} 与 {{c|y}} 不指向同一序列的元素则行为未定义。即必须存在某个 {{c|n}} 使得 {{c|1=std::next(x.base(), x.count() + n)}} 与 {{c|std::next(y.base(), y.count() + n)}} 指代同一元素。

{{cpp/note synthesized compare}}

{{cpp/hidden friend|std::counted_iterator&amp;lt;I&gt;|tmpl=yes}}

===参数===
{{par begin}}
{{par|x, y|迭代器适配器}}
{{par end}}

===返回值===
@1@ {{c|1=x.count() == y.count()}}
@2@ {{c|1=y.count() &lt;=&gt; x.count()}}

===注解===
由于''长度''向下计数，而非向上，{{c|1=operator&lt;=&gt;}} 的实参在底层比较表达式中的顺序是逆转的，即 {{c|y}} 为 ''lhs''，{{c|x}} 为 ''rhs''。

===示例===
{{example
|code=
#include &lt;initializer_list&gt;
#include &lt;iterator&gt;

int main()
{
    static constexpr auto v = {1, 2, 3, 4, 5, 6};
    constexpr std::counted_iterator&lt;std::initializer_list&lt;int&gt;::iterator&gt;
        it1{v.begin(), 5},
        it2{v.begin(), 5},
        it3{v.begin() + 1, 4},
        it4{v.begin(), 0};
    static_assert(it1 == it2);
    static_assert(it2 != it3);
    static_assert(it2 &lt;  it3);
    static_assert(it1 &lt;= it2);
    static_assert(it3 != std::default_sentinel);
    static_assert(it4 == std::default_sentinel);

//  it2 == std::counted_iterator{v.begin(), 4}; // UB：操作数不指代同一序列的元素
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/counted_iterator/dsc operator_cmp2}}
{{dsc inc|cpp/iterator/adaptor/dsc operator+|counted_iterator}}
{{dsc inc|cpp/iterator/adaptor/dsc operator-|counted_iterator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
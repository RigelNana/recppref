{{cpp/iterator/counted_iterator/title|1=operator++,+,+=,--,-,-= }}
{{cpp/iterator/counted_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr counted_iterator&amp; operator++();
}}
{{dcl|num=2|since=c++20|1=
constexpr decltype(auto) operator++( int );
}}
{{dcl|num=3|since=c++20|1=
constexpr counted_iterator operator++( int )
    requires std::forward_iterator&lt;I&gt;;
}}
{{dcl|num=4|since=c++20|1=
constexpr counted_iterator&amp; operator--()
    requires std::bidirectional_iterator&lt;I&gt;;
}}
{{dcl|num=5|since=c++20|1=
constexpr counted_iterator operator--( int )
    requires std::bidirectional_iterator&lt;I&gt;;
}}
{{dcl|num=6|since=c++20|1=
constexpr counted_iterator operator+( std::iter_difference_t&lt;I&gt; n ) const
    requires std::random_access_iterator&lt;I&gt;;
}}
{{dcl|num=7|since=c++20|1=
constexpr counted_iterator&amp; operator+=( std::iter_difference_t&lt;I&gt; n )
    requires std::random_access_iterator&lt;I&gt;;
}}
{{dcl|num=8|since=c++20|1=
constexpr counted_iterator operator-( std::iter_difference_t&lt;I&gt; n ) const
    requires std::random_access_iterator&lt;I&gt;;
}}
{{dcl|num=9|since=c++20|1=
constexpr counted_iterator&amp; operator-=( std::iter_difference_t&lt;I&gt; n )
    requires std::random_access_iterator&lt;I&gt;;
}}
{{dcl end}}

增或减底层迭代器 {{tt|''current''}} 和到末尾的距离 {{tt|''length''}}。

若 {{tt|''length''}} 会被设为负值则这些函数的行为未定义。

@1@ 前自增一。等价于 {{c|1=++current; --length; return *this; }}。

@2@ 后自增一。等价于 {{c|1=--length; try { return current++; } catch(...) { ++length; throw; } }}。

@3@ 后自增一。等价于 {{c|1=counted_iterator temp{*this}; ++*this; return temp; }}。

@4@ 前自减一。等价于 {{c|1=--current; ++length; return *this; }}。

@5@ 后自减一。等价于 {{c|1=counted_iterator temp{*this}; --*this; return temp; }}。

@6@ 返回前进 {{c|n}} 的迭代器。等价于 {{c|1=return counted_iterator(current + n, length - n); }}。

@7@ 令迭代器前进 {{c|n}}。等价于 {{c|1=current += n; length -= n; return *this; }}。

@8@ 返回前进 {{c|-n}} 的迭代器。等价于 {{c|1=return counted_iterator(current - n, length + n); }}。

@9@ 令迭代器前进 {{c|-n}}。等价于 {{c|1=current -= n; length += n; return *this; }}。

===参数===
{{par begin}}
{{par|n|要增或减迭代器适配器的位置数}}
{{par end}}

===返回值===
@1@ {{c|*this}}
@2,3@ 更改前创建的 {{c|*this}} 的副本。
@4@ {{c|*this}}
@5@ 更改前创建的 {{c|*this}} 的副本。
@6@ 前进 {{c|n}} 的迭代器适配器。
@7@ {{c|*this}}
@8@ 前进 {{c|-n}} 的迭代器适配器。
@9@ {{c|*this}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;initializer_list&gt;
#include &lt;iterator&gt;

int main()
{
    const auto v = {1, 2, 3, 4, 5, 6};
    std::counted_iterator&lt;std::initializer_list&lt;int&gt;::iterator&gt; it1{v.begin(), 5};

    ++it1;              assert(*it1 == 2 &amp;&amp; it1.count() == 4); // (1)
    auto it2 = it1++;   assert(*it2 == 2 &amp;&amp; *it1 == 3);        // (3)
    --it1;              assert(*it1 == 2 &amp;&amp; it1.count() == 4); // (4)
    auto it3 = it1--;   assert(*it3 == 2 &amp;&amp; *it1 == 1);        // (5)
    auto it4 = it1 + 3; assert(*it4 == 4 &amp;&amp; it4.count() == 2); // (6)
    auto it5 = it4 - 3; assert(*it5 == 1 &amp;&amp; it5.count() == 5); // (8)
    it1 += 3;           assert(*it1 == 4 &amp;&amp; it1.count() == 2); // (7)
    it1 -= 3;           assert(*it1 == 1 &amp;&amp; it1.count() == 5); // (9)
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator+|counted_iterator}}
{{dsc inc|cpp/iterator/adaptor/dsc operator-|counted_iterator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
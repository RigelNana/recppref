{{cpp/iterator/counted_iterator/title|base}}
{{cpp/iterator/counted_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr const I&amp; base() const&amp; noexcept;
}}
{{dcl|num=2|since=c++20|1=
constexpr I base() &amp;&amp;;
}}
{{dcl end}}

返回底层迭代器。

@1@ 返回到底层迭代器的引用。

@2@ 从底层迭代器移动构造返回值。

===参数===
（无）

===返回值===
@1@ 到底层迭代器的引用。
@1@ 从底层迭代器移动构造的迭代器。

{{cpp/impldef exception}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;type_traits&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;int&gt; v{0, 1, 2, 3, 4};

    std::reverse_iterator&lt;std::vector&lt;int&gt;::iterator&gt; reverse{v.rbegin()};

    std::counted_iterator counted{reverse, 3};

    static_assert(std::is_same&lt;
        decltype(counted.base()),
        std::reverse_iterator&lt;std::vector&lt;int&gt;::iterator&gt; const&amp;
    &gt;{});

    std::cout &lt;&lt; "Print with reverse_iterator: ";
    for (auto r = counted.base(); r != v.rend(); ++r)
        std::cout &lt;&lt; *r &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    std::cout &lt;&lt; "Print with counted_iterator: ";
    for (; counted != std::default_sentinel; ++counted)
        std::cout &lt;&lt; counted[0] &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|output=
Print with reverse_iterator: 4 3 2 1 0
Print with counted_iterator: 4 3 2
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3391|std=C++20|before={{tt|base}} 的 const 版本返回底层迭代器的副本|after=返回引用}}
{{dr list item|wg=lwg|dr=3593|std=C++20|before={{tt|base}} 的 const 版本返回引用但可以不是 noexcept|after=使之为 noexcept}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator*|counted_iterator}}
{{dsc inc|cpp/iterator/counted_iterator/dsc count}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
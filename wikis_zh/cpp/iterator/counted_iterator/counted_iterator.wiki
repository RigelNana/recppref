{{cpp/iterator/counted_iterator/title|counted_iterator}}
{{cpp/iterator/counted_iterator/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
constexpr counted_iterator() requires std::default_initializable&lt;I&gt; = default;&lt;!--P2325R3--&gt;
}}
{{dcl|num=2|since=c++20|1=
constexpr counted_iterator( I x, std::iter_difference_t&lt;I&gt; n );
}}
{{dcl|num=3|since=c++20|1=
template&lt; class I2 &gt;
    requires std::convertible_to&lt;const I2&amp;, I&gt;
        constexpr counted_iterator( const counted_iterator&lt;I2&gt;&amp; other );
}}
{{dcl end}}

构造新的迭代器适配器。

@1@ 默认构造函数。[[cpp/language/value initialization|值初始化]]底层迭代器,并以 {{c|0}} 初始化底层''长度''。当且仅当值初始化的 {{tt|I}} 上的操作拥有有定义行为时，结果迭代器上的对应操作拥有有定义行为。

@2@ 以 {{c|std::move(x)}} 初始化底层迭代器并以 {{c|n}} 初始化底层''长度''。若 {{c|n}} 为负则行为未定义。

@3@ 以 {{c|other}} 的对应组分初始化底层迭代器与''长度''。

===参数===
{{par begin}}
{{par|x|要适配的迭代器}}
{{par|n|到末尾的距离}}
{{par|other|要转换的迭代器适配器}}
{{par end}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;initializer_list&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;

int main()
{
    static constexpr auto pi = {3, 1, 4, 1, 5, 9, 2};

    // (1) 默认构造函数：
    constexpr std::counted_iterator&lt;std::initializer_list&lt;int&gt;::iterator&gt; i1{};
    static_assert(i1 == std::default_sentinel);
    static_assert(i1.count() == 0);

    // (2) 分别初始化迭代器与长度：
    constexpr std::counted_iterator&lt;std::initializer_list&lt;int&gt;::iterator&gt; i2{
        pi.begin(), pi.size() - 2
    };
    static_assert(i2.count() == 5);
    static_assert(*i2 == 3 &amp;&amp; i2[1] == 1);

    // (3) 转换构造函数：
    std::counted_iterator&lt;std::initializer_list&lt;const int&gt;::iterator&gt; i3{i2};

    std::ranges::copy(i3, std::default_sentinel,
        std::ostream_iterator&lt;const int&gt;{std::cout, " "});
}
|output=3 1 4 1 5
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator{{=}}|counted_iterator}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{title|operator+&lt;small&gt;(std::counted_iterator)&lt;/small&gt;}}
{{cpp/iterator/counted_iterator/navbar}}
{{dcl begin}}
{{dcl|since=c++20|
friend constexpr counted_iterator operator+(
    std::iter_difference_t&lt;I&gt; n, const counted_iterator&amp; x )
        requires std::random_access_iterator&lt;I&gt;;
}}
{{dcl end}}

返回前进 {{c|n}} 个位置的迭代器适配器。若 {{c|n}} 大于 {{c|x}} 内记录的长度（即若 {{c|x + n}} 导致未定义行为）则行为未定义。

{{cpp/hidden friend|std::counted_iterator&amp;lt;I&gt;}}

===参数===
{{par begin}}
{{par|n|要增加迭代器的位置数}}
{{par|x|要增加的迭代器}}
{{par end}}

===返回值===
等于 {{c|x + n}} 的迭代器适配器。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;list&gt;
#include &lt;vector&gt;

int main()
{
    std::vector v{0, 1, 2, 3, 4, 5};
    std::counted_iterator&lt;std::vector&lt;int&gt;::iterator&gt; p{v.begin() + 1, 4};
    std::cout &lt;&lt; "*p:" &lt;&lt; *p &lt;&lt; ", count:" &lt;&lt; p.count() &lt;&lt; '\n';
    std::counted_iterator&lt;std::vector&lt;int&gt;::iterator&gt; q{2 + p};
    std::cout &lt;&lt; "*q:" &lt;&lt; *q &lt;&lt; ", count:" &lt;&lt; q.count() &lt;&lt; '\n';

    std::list l{6, 7, 8, 9};
    std::counted_iterator&lt;std::list&lt;int&gt;::iterator&gt; r{l.begin(), 3};
    std::cout &lt;&lt; "*r:" &lt;&lt; *r &lt;&lt; ", count:" &lt;&lt; r.count() &lt;&lt; '\n';
//  auto s { 2 + r }; // 错误：底层迭代器不实现 std::random_access_iterator
}
|output=
*p:1, count:4
*q:3, count:2
*r:6, count:3
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/adaptor/dsc operator_arith|counted_iterator}}
{{dsc inc|cpp/iterator/adaptor/dsc operator-|counted_iterator}}
{{dsc inc|cpp/iterator/counted_iterator/dsc operator-2}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
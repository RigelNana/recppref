{{cpp/title|input_iterator}}
{{cpp/iterator/navbar}}
{{ddcl|header=iterator|since=c++20|1=
template&lt; class I &gt;
    concept input_iterator =
        std::input_or_output_iterator&lt;I&gt; &amp;&amp;
        std::indirectly_readable&lt;I&gt; &amp;&amp;
        requires { typename /*ITER_CONCEPT*/&lt;I&gt;; } &amp;&amp;
        std::derived_from&lt;/*ITER_CONCEPT*/&lt;I&gt;, std::input_iterator_tag&gt;;
}}

{{tt|input_iterator}} 概念是 {{lconcept|input_or_output_iterator}} 的精化，添加了能读取被引用值的要求（经由 {{lconcept|indirectly_readable}}），和存在迭代器概念标签的要求。

{{cpp/iterator/iter concept}}

===注解===
不同于{{named req|InputIterator}}要求，{{tt|input_iterator}} 概念不要求 {{lconcept|equality_comparable}}，因为输入迭代器常与哨位比较。

===示例===
最小化的输入迭代器。

{{source|1=
#include &lt;cstddef&gt;
#include &lt;iterator&gt;

struct SimpleInputIterator
{
    using difference_type = std::ptrdiff_t;
    using value_type = int;

    int operator*() const;

    SimpleInputIterator&amp; operator++();
    void operator++(int) { ++*this; }
};

static_assert(std::input_iterator&lt;SimpleInputIterator&gt;);
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/dsc input_or_output_iterator}}
{{dsc inc|cpp/iterator/dsc forward_iterator}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
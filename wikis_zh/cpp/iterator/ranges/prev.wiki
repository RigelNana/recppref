{{cpp/ranges/title|prev}}
{{cpp/iterator/navbar}}
{{dcl begin}}
{{dcl header|iterator}}
{{dcl h|调用签名}}
{{dcl|num=1|since=c++20|1=
template&lt; std::bidirectional_iterator I &gt;
constexpr I prev( I i );
}}
{{dcl|num=2|since=c++20|1=
template&lt; std::bidirectional_iterator I &gt;
constexpr I prev( I i, std::iter_difference_t&lt;I&gt; n );
}}
{{dcl|num=3|since=c++20|1=
template&lt; std::bidirectional_iterator I &gt;
constexpr I prev( I i, std::iter_difference_t&lt;I&gt; n, I bound );
}}
{{dcl end}}

返回迭代器 {{c|i}} 的第 {{c|n}} 个前驱。

{{cpp/ranges/niebloid}}

===参数===
{{par begin}}
{{par|i|迭代器}}
{{par|n|要减少 {{c|i}} 的次数}}
{{par|bound |迭代器，代表 {{c|i}} 所指向的范围的起始}}
{{par end}}

===返回值===
@1@ {{c|i}} 的前驱。
@2@ 迭代器 {{c|i}} 的第 {{c|n}} 个前驱
@3@ 迭代器 {{c|i}} 的第 {{c|n}} 个前驱，或首个比较等于 {{c|bound}} 的迭代器，取决于何者先达成。

===复杂度===
@1@ 常数。
@2,3@ 若 {{tt|I}} 实现 {{c|std::random_access_iterator&lt;I&gt;}} 则为常数；否则为线性。

===可能的实现===
{{eq fun|1=
struct prev_fn
{
    template&lt;std::bidirectional_iterator I&gt;
    constexpr I operator()(I i) const
    {
        --i;
        return i;
    }

    template&lt;std::bidirectional_iterator I&gt;
    constexpr I operator()(I i, std::iter_difference_t&lt;I&gt; n) const
    {
        ranges::advance(i, -n);
        return i;
    }

    template&lt;std::bidirectional_iterator I&gt;
    constexpr I operator()(I i, std::iter_difference_t&lt;I&gt; n, I bound) const
    {
        ranges::advance(i, -n, bound);
        return i;
    }
};

inline constexpr auto prev = prev_fn();
}}

===注解===
尽管对于容器，表达式 {{c|--r.end()}} 经常能编译，但不保证如此：{{c|r.end()}} 是右值表达式，而没有“指定右值的自减保证可用”的迭代器要求。尤其是迭代器实现为指针或其 {{tt|operator--}} 带有左值引用限定时，{{c|--r.end()}} 不能编译，而 {{c|ranges::prev(r.end())}} 能。

不实现 {{c|ranges::common_range}} 的范围加剧了这一情况。例如对于某些底层类型，{{c|ranges::transform_view::end}} 与 {{c|ranges::transform_view::begin}} 拥有不同的返回类型，故 {{c|--r.end()}} 将不能编译。此非 {{tt|ranges::prev}} 所能帮助，但有一些变通方法。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main() 
{
    std::vector&lt;int&gt; v{3, 1, 4};
    auto pv = std::ranges::prev(v.end(), 2);
    std::cout &lt;&lt; *pv &lt;&lt; '\n';

    pv = std::ranges::prev(pv, 42, v.begin());
    std::cout &lt;&lt; *pv &lt;&lt; '\n';
}
|output=
1
3
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/iterator/ranges/dsc next}}
{{dsc inc|cpp/iterator/ranges/dsc advance}}
{{dsc inc|cpp/iterator/dsc prev}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|boolean {{mark since c++20}}{{mark until c++23}}}}
{{cpp/concepts/navbar}}
&lt;div style="tab-size: 2!important"&gt;
{{ddcl|header=concepts|since=c++20|until=c++23|notes={{mark|1}}|1=
template&lt;class B&gt;
  concept boolean =
    std::movable&lt;std::remove_cvref_t&lt;B&gt;&gt; &amp;&amp;
    requires(const std::remove_reference_t&lt;B&gt;&amp; b1,
             const std::remove_reference_t&lt;B&gt;&amp; b2, const bool a) {
      { b1 } -&gt; std::convertible_to&lt;bool&gt;;
      { !b1 } -&gt; std::convertible_to&lt;bool&gt;;
      { b1 &amp;&amp; b2 } -&gt; std::same_as&lt;bool&gt;;
      { b1 &amp;&amp;  a } -&gt; std::same_as&lt;bool&gt;;
      {  a &amp;&amp; b2 } -&gt; std::same_as&lt;bool&gt;;
      { b1 {{!!}} b2 } -&gt; std::same_as&lt;bool&gt;;
      { b1 {{!!}}  a } -&gt; std::same_as&lt;bool&gt;;
      {  a {{!!}} b2 } -&gt; std::same_as&lt;bool&gt;;
      { b1 == b2 } -&gt; std::convertible_to&lt;bool&gt;;
      { b1 ==  a } -&gt; std::convertible_to&lt;bool&gt;;
      {  a == b2 } -&gt; std::convertible_to&lt;bool&gt;;
      { b1 != b2 } -&gt; std::convertible_to&lt;bool&gt;;
      { b1 !=  a } -&gt; std::convertible_to&lt;bool&gt;;
      {  a != b2 } -&gt; std::convertible_to&lt;bool&gt;;
    };
}}
&lt;/div&gt;

* {{mark|1}} — 仅当满足以下情况时，{{tt|B}} 实现 {{tt|boolean}}：
** {{c/core|bool(b1) {{==}} !bool(!b1)}}。
** {{c/core|(b1 &amp;&amp; b2)}}、{{c/core|(b1 &amp;&amp; bool(b2))}} 和 {{c/core|(bool(b1) &amp;&amp; b2)}} 都等于 {{c/core|(bool(b1) &amp;&amp; bool(b2))}}。{{mark|2}}
** {{c/core|(b1 {{!!}} b2)}}、{{c/core|(b1 {{!!}} bool(b2))}} 和 {{c/core|(bool(b1) {{!!}} b2)}} 都等于 {{c/core|(bool(b1) {{!!}} bool(b2))}}。{{mark|2}}
** {{c/core|bool(b1 {{==}} b2)}}、{{c/core|bool(b1 {{==}} bool(b2))}} 和 {{c/core|bool(bool(b1) {{==}} b2)}} 都等于 {{c/core|(bool(b1) {{==}} bool(b2))}}。
** {{c/core|bool(b1 !{{=}} b2)}}、{{c/core|bool(b1 !{{=}} bool(b2))}} 和 {{c/core|bool(bool(b1) !{{=}} b2)}} 都等于 {{c/core|(bool(b1) !{{=}} bool(b2))}}。
* {{mark|2}} — 并且进行相同的短路求值。

===注解===
{{tt|boolean}} 类型的例子：
* [[cpp/language/types#布尔类型|{{c/core|bool}}]]
* [[cpp/types/integral_constant#特化|{{c/core|std::true_type}}]]
* {{ltt|cpp/utility/bitset/reference|std::bitset&lt;N&gt;::reference}}

非 {{tt|boolean}} 类型的例子：
* [[cpp/language/pointer|Pointers]]
* [[cpp/memory#智能指针|智能指针]]
* 只带有向 [[cpp/language/types#布尔类型|{{c/core|bool}}]] 的[[cpp/language/explicit|显式]]转换的类型

===示例===
{{source|1=
#include &lt;bitset&gt; // std::bitset
#include &lt;concepts&gt; // std::boolean
#include &lt;cstddef&gt; // nullptr_t
#include &lt;memory&gt; // std::weak_ptr
#include &lt;string&gt; // std::string
#include &lt;type_traits&gt; // std::true_type

static_assert(std::boolean&lt;bool&gt;);
static_assert(std::boolean&lt;std::true_type&gt;);
static_assert(std::boolean&lt;std::bitset&lt;42&gt;::reference&gt;);
static_assert(std::boolean&lt;int&gt;);

static_assert(!std::boolean&lt;void*&gt;);
static_assert(!std::boolean&lt;nullptr_t&gt;);
static_assert(!std::boolean&lt;std::weak_ptr&lt;bool&gt;&gt;);
static_assert(!std::boolean&lt;std::string&gt;);

struct s0 {[[nodiscard]] constexpr /* implicit */ operator bool() const noexcept;};
struct s1 {[[nodiscard]] constexpr    explicit    operator bool() const noexcept;};

static_assert(std::boolean&lt;s0&gt;);
static_assert(!std::boolean&lt;s1&gt;);

int main() noexcept {};
}}

===引用===
{{ref std c++20}}
{{ref std|section=18.5.2|title=Concept {{tt|boolean}}|id=concept.boolean}}
{{ref std end}}
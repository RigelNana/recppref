{{cpp/title|floating_point}}
{{cpp/concepts/navbar}}
{{ddcl|header=concepts|since=c++20|1=
template&lt; class T &gt;
concept floating_point = std::is_floating_point_v&lt;T&gt;;
}}

概念 {{c|floating_point&lt;T&gt;}} 当且仅当 {{tt|T}} 为浮点数类型时得到满足。

=== 示例 ===
{{example
|code=
#include &lt;concepts&gt;
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

constexpr std::floating_point auto x2(std::floating_point auto x)
{
    return x + x;
}

constexpr std::integral auto x2(std::integral auto x)
{
    return x &lt;&lt; 1;
}

int main()
{
    constexpr auto d = x2(1.1);
    static_assert(std::is_same_v&lt;double const, decltype(d)&gt;);
    std::cout &lt;&lt; d &lt;&lt; '\n';

    constexpr auto f = x2(2.2f);
    static_assert(std::is_same_v&lt;float const, decltype(f)&gt;);
    std::cout &lt;&lt; f &lt;&lt; '\n';

    constexpr auto i = x2(444);
    static_assert(std::is_same_v&lt;int const, decltype(i)&gt;);
    std::cout &lt;&lt; i &lt;&lt; '\n';
}
|output=
2.2
4.4
888
}}

===引用===
{{ref std c++23}}
{{ref std|section=18.4.7|title=Arithmetic concepts|id=concepts.arithmetic}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=18.4.7|title=Arithmetic concepts|id=concepts.arithmetic}}
{{ref std end}}

=== 参阅 ===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_floating_point}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
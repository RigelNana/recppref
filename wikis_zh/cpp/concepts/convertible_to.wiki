{{cpp/title|convertible_to}}
{{cpp/concepts/navbar}}
{{ddcl|header=concepts|since=c++20|1=
template&lt; class From, class To &gt;
concept convertible_to =
    std::is_convertible_v&lt;From, To&gt; &amp;&amp;
    requires {
        static_cast&lt;To&gt;(std::declval&lt;From&gt;());&lt;!--LWG 3557--&gt;
    };
}}

概念 {{c|convertible_to&lt;From, To&gt;}} 指定类型和值类别均与 {{c|std::declval&lt;From&gt;()}} 相同的表达式能隐式和显式转换成 {{tt|To}} 类型，而二种转换形式产生相等的结果。

===语义要求===
给定 {{c|std::add_rvalue_reference_t&lt;From&gt;()}} 类型的函数 {{tt|fun}}，使得表达式 {{c|fun()}} [[cpp/concepts#相等性保持|保持相等性]]，仅当满足以下条件时，{{c|convertible_to&lt;From, To&gt;}} 得以实现：
* 以下任一成立
** {{tt|To}} 既非对象类型亦非到对象引用类型，或
** {{c|static_cast&lt;To&gt;(fun())}} 等于 {{c|[]() -&gt; To { return fun(); }()}}，且

* 下列之一为真：
** {{c|std::add_rvalue_reference_t&lt;From&gt;}} 不是到对象引用类型，或
** {{c|std::add_rvalue_reference_t&lt;From&gt;}} 是到非 const 限定类型的右值引用，而 {{c|fun()}} 所引用对象的结果状态在上述任一表达式后合法但未指定；或
** 上述任一表达式不修改 {{c|fun()}} 所引用的对象。

{{cpp/concepts/equality_preservation}}

===引用===
{{ref std c++23}}
{{ref std|section=18.4.4|title=Concept {{tt|convertible_to}}|id=concept.convertible}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=18.4.4|title=Concept {{tt|convertible_to}}|id=concept.convertible}}
{{ref std end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_convertible}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/title|copy_constructible}}
{{cpp/concepts/navbar}}
{{ddcl|header=concepts|since=c++20|1=
template&lt; class T &gt;
concept copy_constructible =
    std::move_constructible&lt;T&gt; &amp;&amp;
    std::constructible_from&lt;T, T&amp;&gt; &amp;&amp; std::convertible_to&lt;T&amp;, T&gt; &amp;&amp;
    std::constructible_from&lt;T, const T&amp;&gt; &amp;&amp; std::convertible_to&lt;const T&amp;, T&gt; &amp;&amp;
    std::constructible_from&lt;T, const T&gt; &amp;&amp; std::convertible_to&lt;const T, T&gt;;
}}

概念 {{tt|copy_constructible}} 若符合这些条件则得到满足：{{c|T}} 为左值引用类型，或若它是 {{lconcept|move_constructible}} 对象类型，而能从（可为 const 的）该类型左值或 const 右值，在直接和复制初始化语境中以通常语义构造该类型的对象（构造副本而不更改源）。

===语义要求===

若 {{c|T}} 为对象类型，则 {{tt|copy_constructible&lt;T&gt;}} 仅若符合下列条件才得到实现。给定
* {{c|v}}，（可为 {{c|const}} 的）{{c|T}} 类型的左值或为 {{c|const T}} 类型的右值，
下列均为真：
* 定义 {{c|1=T u = v;}} 后，{{c|u}} 等于 {{c|v}} 且 {{c|v}} 不被修改；
* {{c|T(v)}} 等于 {{c|v}} 且不修改 {{c|v}}。

===引用===
{{ref std c++23}}
{{ref std|section=18.4.14|title=Concept {{tt|copy_constructible}}|id=concept.copyconstructible}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=18.4.14|title=Concept {{tt|copy_constructible}}|id=concept.copyconstructible}}
{{ref std end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_copy_constructible}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
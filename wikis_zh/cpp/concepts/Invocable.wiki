{{cpp/title|invocable|regular_invocable}}
{{cpp/concepts/navbar}}
{{dcl begin}}
{{dcl header|concepts}}
{{dcl|since=c++20|1=
template&lt; class F, class... Args &gt;
concept invocable =
    requires(F&amp;&amp; f, Args&amp;&amp;... args) {
        std::invoke(std::forward&lt;F&gt;(f), std::forward&lt;Args&gt;(args)...); 
            /* 不要求保持相等性 */
    };
}}
{{dcl|since=c++20|1=
template&lt; class F, class... Args &gt;
concept regular_invocable = std::invocable&lt;F, Args...&gt;;
}}
{{dcl end}}

{{tt|invocable}} 概念指定能用函数模板 {{lc|std::invoke}} 以实参包 {{tt|Args...}} 来调用可调用类型 {{tt|F}}。

{{tt|regular_invocable}} 概念对 {{tt|invocable}} 概念增加了 {{tt|invoke}} 必须[[cpp/concepts#相等性保持|保持相等性]]且不修改可调用对象或实参的要求。

{{cpp/concepts/equality preservation}}

===注解===
{{tt|invocable}} 与 {{tt|regular_invocable}} 间的区别纯粹是语义上的。

随机数生成器可满足 {{tt|invocable}} 但不可满足 {{tt|regular_invocable}}（不包括[[#外部链接|漫画里的]]）。

===引用===
{{ref std c++23}}
{{ref std|section=18.7.2|title=Concept {{tt|invocable}}|id=concept.invocable}}
{{ref std|section=18.7.3|title=Concept {{tt|regular_invocable}}|id=concept.regularinvocable}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=18.7.2|title=Concept {{tt|invocable}}|id=concept.invocable}}
{{ref std|section=18.7.3|title=Concept {{tt|regular_invocable}}|id=concept.regularinvocable}}
{{ref std end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_invocable}}
{{dsc end}}

===外部链接===
{{eli|一种随机数生成器的[https://xkcd.com/221/ 玩笑例子]，它同时满足 {{tt|invocable}} 和 {{tt|regular_invocable}}。}}

{{langlinks|de|en|es|ja|ru}}
{{title|C++ 关键词}}
{{cpp/keyword/navbar}}

这是 C++ 中的保留关键词的列表。因为它们用于语言本身，所以这些关键词不能用于重定义或重载。{{rev inl|since=c++11|有一点例外是，它们在[[cpp/language/attributes|属性]]中（排除属性实参列表）并不被保留。}}

{|class="wikitable"
|-
!A – C!!D – P!!R – Z
|-style="vertical-align:top;"
|
{{rlt|alignas}} {{mark c++11}}&lt;br&gt;
{{rlt|alignof}} {{mark c++11}}&lt;br&gt;
{{rlt|and}}&lt;br&gt;
{{rlt|and_eq}}&lt;br&gt;
{{rlt|asm}}&lt;br&gt;
{{rlt|atomic_cancel}} {{mark since tm ts}}&lt;br&gt;
{{rlt|atomic_commit}} {{mark since tm ts}}&lt;br&gt;
{{rlt|atomic_noexcept}} {{mark since tm ts}}&lt;br&gt;
{{rlt|auto}} {{mark|1}} {{mark|3}} {{mark|4}} {{mark|5}}&lt;br&gt;
{{rlt|bitand}}&lt;br&gt;
{{rlt|bitor}}&lt;br&gt;
{{rlt|bool}}&lt;br&gt;
{{rlt|break}}&lt;br&gt;
{{rlt|case}}&lt;br&gt;
{{rlt|catch}}&lt;br&gt;
{{rlt|char}}&lt;br&gt;
{{rlt|char8_t}} {{mark c++20}}&lt;br&gt;
{{rlt|char16_t}} {{mark c++11}}&lt;br&gt;
{{rlt|char32_t}} {{mark c++11}}&lt;br&gt;
{{rlt|class}} {{mark|1}}&lt;br&gt;
{{rlt|compl}}&lt;br&gt;
{{rlt|concept}} {{mark c++20}}&lt;br&gt;
{{rlt|const}}&lt;br&gt;
{{rlt|consteval}} {{mark c++20}} {{mark|5}}&lt;br&gt;
{{rlt|constexpr}} {{mark c++11}} {{mark|3}}&lt;br&gt;
{{rlt|constinit}} {{mark c++20}}&lt;br&gt;
{{rlt|const_cast}}&lt;br&gt;
{{rlt|continue}}&lt;br&gt;
{{rlt|contract_assert}} {{mark c++26}}&lt;br&gt;
{{rlt|co_await}} {{mark c++20}}&lt;br&gt;
{{rlt|co_return}} {{mark c++20}}&lt;br&gt;
{{rlt|co_yield}} {{mark c++20}}&lt;br&gt;
|
{{rlt|decltype}} {{mark c++11}} {{mark|2}}&lt;br&gt;
{{rlt|default}} {{mark|1}}&lt;br&gt;
{{rlt|delete}} {{mark|1}}&lt;br&gt;
{{rlt|do}}&lt;br&gt;
{{rlt|double}}&lt;br&gt;
{{rlt|dynamic_cast}}&lt;br&gt;
{{rlt|else}}&lt;br&gt;
{{rlt|enum}} {{mark|1}}&lt;br&gt;
{{rlt|explicit}}&lt;br&gt;
{{rlt|export}} {{mark|1}} {{mark|4}}&lt;br&gt; 
{{rlt|extern}} {{mark|1}}&lt;br&gt;
{{rlt|false}}&lt;br&gt;
{{rlt|float}}&lt;br&gt;
{{rlt|for}} {{mark|1}}&lt;br&gt;
{{rlt|friend}}&lt;br&gt;
{{rlt|goto}}&lt;br&gt;
{{rlt|if}} {{mark|3}} {{mark|5}}&lt;br&gt;
{{rlt|inline}} {{mark|1}} {{mark|3}}&lt;br&gt;
{{rlt|int}} {{mark|1}}&lt;br&gt;
{{rlt|long}}&lt;br&gt;
{{rlt|mutable}} {{mark|1}}&lt;br&gt;
{{rlt|namespace}}&lt;br&gt;
{{rlt|new}}&lt;br&gt;
{{rlt|noexcept}} {{mark c++11}}&lt;br&gt;
{{rlt|not}}&lt;br&gt;
{{rlt|not_eq}}&lt;br&gt;
{{rlt|nullptr}} {{mark c++11}}&lt;br&gt;
{{rlt|operator}} {{mark|1}}&lt;br&gt;
{{rlt|or}}&lt;br&gt;
{{rlt|or_eq}}&lt;br&gt;
{{rlt|private}} {{mark|4}}&lt;br&gt;
{{rlt|protected}}&lt;br&gt;
{{rlt|public}}&lt;br&gt;
|
{{rlt|reflexpr}} {{mark since reflection ts}}&lt;br&gt;
{{rlt|register}} {{mark|3}}&lt;br&gt;
{{rlt|reinterpret_cast}}&lt;br&gt;
{{rlt|requires}} {{mark c++20}}&lt;br&gt;
{{rlt|return}}&lt;br&gt;
{{rlt|short}}&lt;br&gt;
{{rlt|signed}}&lt;br&gt;
{{rlt|sizeof}} {{mark|1}}&lt;br&gt;
{{rlt|static}}&lt;br&gt;
{{rlt|static_assert}} {{mark c++11}}&lt;br&gt;
{{rlt|static_cast}}&lt;br&gt;
{{rlt|struct}} {{mark|1}}&lt;br&gt;
{{rlt|switch}}&lt;br&gt;
{{rlt|synchronized}} {{mark since tm ts}}&lt;br&gt;
{{rlt|template}}&lt;br&gt;
{{rlt|this}} {{mark|5}}&lt;br&gt;
{{rlt|thread_local}} {{mark c++11}}&lt;br&gt;
{{rlt|throw}} {{mark|3}} {{mark|4}}&lt;br&gt;
{{rlt|true}}&lt;br&gt;
{{rlt|try}}&lt;br&gt;
{{rlt|typedef}}&lt;br&gt;
{{rlt|typeid}}&lt;br&gt;
{{rlt|typename}} {{mark|3}} {{mark|4}}&lt;br&gt;
{{rlt|union}}&lt;br&gt;
{{rlt|unsigned}}&lt;br&gt;
{{rlt|using}} {{mark|1}} {{mark|4}}&lt;br&gt;
{{rlt|virtual}}&lt;br&gt;
{{rlt|void}}&lt;br&gt;
{{rlt|volatile}}&lt;br&gt;
{{rlt|wchar_t}}&lt;br&gt;
{{rlt|while}}&lt;br&gt;
{{rlt|xor}}&lt;br&gt;
{{rlt|xor_eq}}
|}

* {{mark|1}} — C++11 中含义改变或添加新含义。
* {{mark|2}} — C++14 中添加新含义。
* {{mark|3}} — C++17 中含义改变或添加新含义。
* {{mark|4}} — C++20 中含义改变或添加新含义。
* {{mark|5}} — C++23 中添加新含义。
注意 {{rlt|and}}、{{rlt|bitor}}、{{rlt|or}}、{{rlt|xor}}、{{rlt|compl}}、{{rlt|bitand}}、{{rlt|and_eq}}、{{rlt|or_eq}}、{{rlt|xor_eq}}、{{rlt|not}} 和 {{rlt|not_eq}}（还有双标符 {{c|&lt;%}}、{{c|%&gt;}}、{{c|&lt;:}}、{{c|:&gt;}}、{{c|%:}} 和 {{c|%:%:}}{{rev inl|until=c++17|removed=yes| 以及三标符 {{c|??&lt;}}、{{c|??&gt;}}、{{c|??(}}、{{c|??)}}、{{c|1=??=}}、{{c|??/}}、{{c|??'}}、{{c|??!}}、{{c|??-}}}}）提供了[[cpp/language/operator alternative|标准记号的代用表示方法]]。{{rev inl|since=c++11|这些关键词在属性中（排除属性实参列表）也被保留，但部分实现会将它们实现的和其他关键词一样。}}

除了关键词外，还有''拥有特殊含义的标识符''，它们可以用作对象或函数的名字，但在特定语境拥有特殊含义。

{|class="wikitable"
|-
|
[[cpp/identifier_with_special_meaning/final|{{tt|final}}]] {{mark c++11}}&lt;br&gt;
[[cpp/identifier_with_special_meaning/override|{{tt|override}}]] {{mark c++11}}&lt;br&gt;
{{rlt|transaction_safe}} {{mark since tm ts}}&lt;br&gt;
{{rlt|transaction_safe_dynamic}} {{mark since tm ts}}&lt;br&gt;
[[cpp/identifier_with_special_meaning/import|{{tt|import}}]] {{mark c++20}}&lt;br&gt;
[[cpp/identifier_with_special_meaning/module|{{tt|module}}]] {{mark c++20}}&lt;br&gt;
[[cpp/identifier_with_special_meaning/pre|{{tt|pre}}]] {{mark c++26}}&lt;br&gt;
[[cpp/identifier_with_special_meaning/post|{{tt|post}}]] {{mark c++26}}&lt;br&gt;
[[cpp/identifier_with_special_meaning/trivially_relocatable_if_eligible|{{tt|trivially_relocatable_if_eligible}}]] {{mark c++26}}&lt;br&gt;
[[cpp/identifier_with_special_meaning/replaceable_if_eligible|{{tt|replaceable_if_eligible}}]] {{mark c++26}}
|}

还有，在任何位置含双下划线 __ 的所有[[cpp/language/identifiers|标识符]]，和以一个下划线后随一个大写字母开始的所有标识符，都始终受保留，而所有以单下划线开始的标识符，保留用作全局命名空间中的名称。更多细节见{{lt|cpp/language/identifiers|标识符}}。

命名空间 {{tt|std}} 用于放置标准 C++ 库中的名称。关于向它添加名称的规则，见[[cpp/language/extending std|扩充命名空间 std]]。

{{rrev|since=c++11|名称 {{tt|posix}} 保留作为未来的顶级命名空间。如果程序在该命名空间声明或定义任何内容，那么行为未定义。}}

{{rlp|preprocessor|预处理器}}在预处理指令的语境中识别下列记号：
{|class="wikitable"
|-
|
{{ltt|cpp/preprocessor/conditional|if}}&lt;br&gt;
{{ltt|cpp/preprocessor/conditional|elif}}&lt;br&gt;
{{ltt|cpp/preprocessor/conditional|else}}&lt;br&gt;
{{ltt|cpp/preprocessor/conditional|endif}}
|
{{ltt|cpp/preprocessor/conditional|ifdef}}&lt;br&gt;
{{ltt|cpp/preprocessor/conditional|ifndef}}&lt;br&gt;
{{ltt|cpp/preprocessor/conditional|elifdef}} {{mark c++23}}&lt;br&gt;
{{ltt|cpp/preprocessor/conditional|elifndef}} {{mark c++23}}&lt;br&gt;
{{ltt|cpp/preprocessor/replace|define}}&lt;br&gt;
{{ltt|cpp/preprocessor/replace|undef}}
|
{{ltt|cpp/preprocessor/include|include}}&lt;br&gt;
{{ltt|cpp/preprocessor/embed|embed}} {{mark c++26}}&lt;br&gt;
{{ltt|cpp/preprocessor/line|line}}
|
{{ltt|cpp/preprocessor/error|error}}&lt;br&gt;
{{ltt|cpp/preprocessor/error|warning}} {{mark c++23}}&lt;br&gt;
{{ltt|cpp/preprocessor/impl|pragma}}
|
{{ltt|cpp/preprocessor/conditional|defined}}&lt;br&gt;
{{ltt|cpp/feature test|__has_include}} {{mark c++17}}&lt;br&gt;
{{ltt|cpp/feature test|__has_cpp_attribute}} {{mark c++20}}&lt;br&gt;
{{ltt|cpp/feature test|__has_embed}} {{mark c++26}}
|
{{rlt|export}} {{mark c++20}}&lt;br&gt;
[[cpp/identifier_with_special_meaning/import|{{tt|import}}]] {{mark c++20}}&lt;br&gt;
[[cpp/identifier_with_special_meaning/module|{{tt|module}}]] {{mark c++20}}
|}

{{rlp|preprocessor|预处理器}}在预处理指令的语境''之外''{{sep}}识别下列记号：
{|class="wikitable"
|-
|
{{ltt|cpp/preprocessor/impl|_Pragma}} {{mark c++11}}
|}

===参阅===
{{dsc begin}}
{{dsc see c|c/keyword|C 关键词|nomono=true}}
{{dsc end}}

{{langlinks|ar|de|en|es|fr|it|ja|ko|pl|pt|ru}}
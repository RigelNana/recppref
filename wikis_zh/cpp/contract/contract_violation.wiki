{{cpp/contract/title|contract_violation}}
{{cpp/contract/navbar}}
{{ddcl|header=contracts|since=c++26|
class contract_violation;
}}

类 {{tt|std::contracts::contract_violation}} 定义了用来表示在以特定的求值语义对[[cpp/language/contracts|契约断言]]进行求值时检测到的契约违背的对象的类型。

此类型的对象只能在需要调用契约断言处理函数时由实现创建。用户不能直接创建这些对象。

===成员函数===
{{dsc begin}}
{{dsc mem ctor|nolink=true|notes={{cmark deleted}}|用户无法构造 {{tt|contract_violation}} 对象}}
{{dsc mem fun|operator{{=}}|nolink=true|notes={{cmark deleted}}|无法对 {{tt|contract_violation}} 对象复制}}
{{dsc mem dtor|nolink=true|notes={{cmark|可能为虚}}|析构 {{tt|contract_violation}} 对象}}
{{dsc h2|通用契约违背信息}}
{{dsc mem fun|kind|nolink=true|返回违背的异常契约的种类}}
{{dsc mem fun|semantic|nolink=true|返回契约违背发生时的求值语义}}
{{dsc mem fun|is_terminating|nolink=true|返回求值语义是否为终止语义}}
{{dsc mem fun|detection_mode|nolink=true|返回导致异常违背发生的原因}}
{{dsc mem fun|evaluation_exception|nolink=true|返回指向从谓词求值中抛出的异常的 {{lc|std::exception_ptr}}}}
{{dsc h2|其他契约违背信息}}
{{dsc mem fun|comment|nolink=true|返回关于契约违背的解释性字符串}}
{{dsc mem fun|location|nolink=true|返回指示契约违背位置的 {{lc|std::source_location}}}}
{{dsc end}}

{{member|{{small|std::contracts::contract_violation::}}contract_violation|
{{ddcl|since=c++26|1=
contract_violation( const contract_violation&amp; ) = delete;
}}

复制构造函数被定义为弃置。{{tt|std::contracts::contract_violation}} 不{{named req|CopyConstructible}}。

===注解===
其他构造函数仅供内部使用，用户无法访问。
}}

{{member|{{small|std::contracts::contract_violation::}}operator{{=}}|
{{ddcl|since=c++26|1=
contract_violation&amp; operator=( const contract_violation&amp; ) = delete;
}}

复制赋值运算符被定义为弃置。{{tt|std::contracts::contract_violation}} 不{{named req|CopyAssignable}}。
}}

{{member|{{small|std::contracts::contract_violation::}}~contract_violation|
{{ddcl|since=c++26|1=
/* 见下文 */ ~contract_violation();
}}

析构 {{tt|contract_violation}} 对象。

===注解===
析构函数是否为虚由实现定义。
}}

{{member|{{small|std::contracts::contract_violation::}}kind|
{{ddcl|since=c++26|
std::contracts::assertion_kind kind() const noexcept;
}}

===返回值===
返回与违背的契约断言的语法形式对应的枚举项的值。
}}

{{member|{{small|std::contracts::contract_violation::}}semantic|
{{ddcl|since=c++26|
std::contracts::evaluation_semantic semantic() const noexcept;
}}

===返回值===
返回与对违背的契约断言求值时的求值语义对应的枚举项的值。
}}

{{member|{{small|std::contracts::contract_violation::}}is_terminating|
{{ddcl|since=c++26|
bool is_terminating() const noexcept;
}}

===返回值===
如果求值语义是[[cpp/language/contracts#对契约断言求值|终止语义]]，那么就会返回 {{c|true}}。否则返回 {{c|false}}。
}}

{{member|{{small|std::contracts::contract_violation::}}detection_mode|
{{ddcl|since=c++26|
std::contracts::detection_mode detection_mode() const noexcept;
}}

===返回值===
返回与发生契约违背的原因对应的枚举项的值。
}}

{{member|{{small|std::contracts::contract_violation::}}evaluation_exception|
{{ddcl|since=c++26|
std::exception_ptr evaluation_exception() const noexcept;
}}

===返回值===
如果契约违背因在对谓词求值的过程中抛出异常而发生，那么返回指代该异常或其副本的 {{lc|std::exception_ptr}} 对象。否则返回空 {{lc|std::exception_ptr}} 对象。
}}

{{member|{{small|std::contracts::contract_violation::}}comment|
{{ddcl|since=c++26|
const char* comment() const noexcept;
}}

===返回值===
返回[[cpp/language/charset#代码单元与字面量编码|普通字面量编码]]下由实现定义的[[cpp/string/multibyte|空终止多字节字符串]]。

===注解===
C++ 标准建议返回的字符串应该包含违背的契约断言的谓词的文本表示，或在不希望存储文本表示的情况下返回空字符串。
}}

{{member|{{small|std::contracts::contract_violation::}}location|
{{ddcl|since=c++26|
std::source_location location() const noexcept;
}}

===返回值===
返回其值由实现定义的 {{lc|std::source_location}} 对象。

===注解===
C++ 标准建议返回的值应该是默认构造的 {{lc|std::source_location}} 对象或以下指定的标识了违背的契约断言的值：
* 只要有可能的情况下，如果违背的契约断言是{{ls|cpp/language/function#前条件断言}}，那么应该返回函数调用的源位置。
* 否则应该返回契约断言的源位置。
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
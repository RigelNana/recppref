{{cpp/header/experimental/title|experimental/any}}
{{cpp/header/experimental/navbar}}

此头文件是库基础 TS ([[cpp/experimental/lib extensions|v1]], [[cpp/experimental/lib extensions 2|v2]]) 的一部分。

===类===
{{dsc begin}}
{{dsc hitem | 名字| 描述}}
{{dsc class | notes={{mark since libfund ts}} | cpp/experimental/bad_any_cast | 由失败的 {{tt|any_cast}} 所抛出的异常。 }}
{{dsc class | notes={{mark since libfund ts}} | cpp/experimental/any | 保有满足 {{tt|ValueType}} 要求的任意类型的实例的对象。 }}
{{dsc end}}

===函数===
{{dsc begin}}
{{dsc inc | cpp/experimental/any/dsc swap2}}
{{dsc inc | cpp/experimental/any/dsc any_cast}}
{{dsc end}}

===概要===
{{source|1=

namespace std {
namespace experimental {
inline namespace fundamentals_v1 {

  class bad_any_cast : public bad_cast
  {
  public:
    virtual const char* what() const noexcept;
  };

  class any
  {
  public:
    // 6.3.1，any 构造/析构
    any() noexcept;

    any(const any&amp; other);
    any(any&amp;&amp; x) noexcept;

    template &lt;class ValueType&gt;
        any(ValueType&amp;&amp; value);

    ~any();

    // 6.3.2，any 赋值
    any&amp; operator=(const any&amp; rhs);
    any&amp; operator=(any&amp;&amp; rhs) noexcept;

    template &lt;class ValueType&gt;
      any&amp; operator=(ValueType&amp;&amp; rhs);

    // 6.3.3，any 修改函数
    void clear() noexcept;
    void swap(any&amp; rhs) noexcept;

    // 6.3.4，any 探察函数
    bool empty() const noexcept;
    const type_info&amp; type() const noexcept;
  };

  // 6.4，非成员函数
  void swap(any&amp; x, any&amp; y) noexcept;

  template&lt;class ValueType&gt;
    ValueType any_cast(const any&amp; operand);
  template&lt;class ValueType&gt;
    ValueType any_cast(any&amp; operand);
  template&lt;class ValueType&gt;
    ValueType any_cast(any&amp;&amp; operand);

  template&lt;class ValueType&gt;
    const ValueType* any_cast(const any* operand) noexcept;
  template&lt;class ValueType&gt;
    ValueType* any_cast(any* operand) noexcept;

} // namespace fundamentals_v1
} // namespace experimental
} // namespace std
}}

{{langlinks|en|ja}}
{{cpp/header/title|experimental/ranges/range}}
{{cpp/header/navbar}}

此头文件是[[cpp/experimental/ranges|范围]]库的一部分。

=== 范围概念 ===
{{dsc begin}}
{{dsc namespace | std::experimental::ranges}}
{{dsc inc | cpp/experimental/ranges/range/dsc Range}}
{{dsc inc | cpp/experimental/ranges/range/dsc SizedRange}}
{{dsc inc | cpp/experimental/ranges/range/dsc View}}
{{dsc inc | cpp/experimental/ranges/range/dsc BoundedRange}}
{{dsc inc | cpp/experimental/ranges/range/dsc InputRange}}
{{dsc inc | cpp/experimental/ranges/range/dsc OutputRange}}
{{dsc inc | cpp/experimental/ranges/range/dsc ForwardRange}}
{{dsc inc | cpp/experimental/ranges/range/dsc BidirectionalRange}}
{{dsc inc | cpp/experimental/ranges/range/dsc RandomAccessRange}}
{{dsc end}}

=== 范围访问 ===
{{dsc begin}}
{{dsc namespace | std::experimental::ranges}}
{{dsc inc | cpp/experimental/ranges/range/dsc begin}}
{{dsc inc | cpp/experimental/ranges/range/dsc end}}
{{dsc inc | cpp/experimental/ranges/range/dsc rbegin}}
{{dsc inc | cpp/experimental/ranges/range/dsc rend}}
{{dsc end}}

=== 范围原语 ===
{{dsc begin}}
{{dsc namespace | std::experimental::ranges}}
{{dsc inc | cpp/experimental/ranges/range/dsc size}}
{{dsc inc | cpp/experimental/ranges/range/dsc empty}}
{{dsc inc | cpp/experimental/ranges/range/dsc data}}
{{dsc inc | cpp/experimental/ranges/range/dsc iterator_t}}
{{dsc end}}

=== 概要 ===
{{source|1=

#include &lt;experimental/ranges/iterator&gt;

namespace std { namespace experimental { namespace ranges { inline namespace v1 {

namespace {
  constexpr /* 未指明 */ begin = /* 未指明 */;
  constexpr /* 未指明 */ end = /* 未指明 */;
  constexpr /* 未指明 */ cbegin = /* 未指明 */;
  constexpr /* 未指明 */ cend = /* 未指明 */;
  constexpr /* 未指明 */ rbegin = /* 未指明 */;
  constexpr /* 未指明 */ rend = /* 未指明 */;
  constexpr /* 未指明 */ crbegin = /* 未指明 */;
  constexpr /* 未指明 */ crend = /* 未指明 */;
}

namespace {
  constexpr /* 未指明 */ size = /* 未指明 */;
  constexpr /* 未指明 */ empty = /* 未指明 */;
  constexpr /* 未指明 */ data = /* 未指明 */;
  constexpr /* 未指明 */ cdata = /* 未指明 */;
}

template &lt;class T&gt;
using iterator_t = decltype(ranges::begin(declval&lt;T&amp;&gt;()));

template &lt;class T&gt;
using sentinel_t = decltype(ranges::end(declval&lt;T&amp;&gt;()));

template &lt;class&gt;
constexpr bool disable_sized_range = false;

template &lt;class T&gt;
struct enable_view { };

struct view_base { };

template &lt;class T&gt;
concept bool Range = /* 见定义 */;

template &lt;class T&gt;
concept bool SizedRange = /* 见定义 */;

template &lt;class T&gt;
concept bool View = /* 见定义 */;

template &lt;class T&gt;
concept bool BoundedRange = /* 见定义 */;

template &lt;class T&gt;
concept bool InputRange = /* 见定义 */;

template &lt;class R, class T&gt;
concept bool OutputRange = /* 见定义 */;

template &lt;class T&gt;
concept bool ForwardRange = /* 见定义 */;

template &lt;class T&gt;
concept bool BidirectionalRange = /* 见定义 */;

template &lt;class T&gt;
concept bool RandomAccessRange = /* 见定义 */;

{{))}}{{))}}

}}
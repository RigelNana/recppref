{{cpp/header/experimental/title|experimental/optional}}
{{cpp/header/experimental/navbar}}

此头文件是库基础 TS ([[cpp/experimental/lib extensions|v1]], [[cpp/experimental/lib extensions 2|v2]]) 的一部分。

===类===
{{dsc begin}}
{{dsc hitem | 名字 | 说明}}
{{dsc inc | cpp/experimental/optional/dsc optional}}
{{dsc inc | cpp/experimental/optional/dsc bad_optional_access}}
{{dsc inc | cpp/experimental/optional/dsc in_place_t}}
{{dsc inc | cpp/experimental/optional/dsc hash}}
{{dsc inc | cpp/experimental/optional/dsc nullopt_t}}
{{dsc end}}

===函数===

{{dsc begin}}

{{dsc h2 | 比较}}
{{dsc inc | cpp/experimental/optional/dsc operator_cmp}}

{{dsc h2 | 特化的算法}}
{{dsc inc | cpp/experimental/optional/dsc swap2}}
{{dsc inc | cpp/experimental/optional/dsc make_optional}}

{{dsc h2 | 散列支持}}
{{dsc end}}

===概要===
{{source|1=

namespace std {
  namespace experimental {
  inline namespace fundamentals_v1 {

    // 5.4，用于对象类型的 optional
    template &lt;class T&gt; class optional;

    // 5.5，就地构造
    struct in_place_t{};
    constexpr in_place_t in_place{};

    // 5.6，无值状态指示器
    struct nullopt_t{see below};
    constexpr nullopt_t nullopt(unspecified);

    // 5.7，类 bad_optional_access
    class bad_optional_access;

    // 5.8，关系运算符
    template &lt;class T&gt;
      constexpr bool operator==(const optional&lt;T&gt;&amp;, const optional&lt;T&gt;&amp;);
    template &lt;class T&gt;
      constexpr bool operator!=(const optional&lt;T&gt;&amp;, const optional&lt;T&gt;&amp;);
    template &lt;class T&gt;
      constexpr bool operator&lt;(const optional&lt;T&gt;&amp;, const optional&lt;T&gt;&amp;);
    template &lt;class T&gt;
      constexpr bool operator&gt;(const optional&lt;T&gt;&amp;, const optional&lt;T&gt;&amp;);
    template &lt;class T&gt;
      constexpr bool operator&lt;=(const optional&lt;T&gt;&amp;, const optional&lt;T&gt;&amp;);
    template &lt;class T&gt;
      constexpr bool operator&gt;=(const optional&lt;T&gt;&amp;, const optional&lt;T&gt;&amp;);

    // 5.9，与 nullopt 比较
    template &lt;class T&gt; constexpr bool operator==(const optional&lt;T&gt;&amp;, nullopt_t) noexcept;
    template &lt;class T&gt; constexpr bool operator==(nullopt_t, const optional&lt;T&gt;&amp;) noexcept;
    template &lt;class T&gt; constexpr bool operator!=(const optional&lt;T&gt;&amp;, nullopt_t) noexcept;
    template &lt;class T&gt; constexpr bool operator!=(nullopt_t, const optional&lt;T&gt;&amp;) noexcept;
    template &lt;class T&gt; constexpr bool operator&lt;(const optional&lt;T&gt;&amp;, nullopt_t) noexcept;
    template &lt;class T&gt; constexpr bool operator&lt;(nullopt_t, const optional&lt;T&gt;&amp;) noexcept;
    template &lt;class T&gt; constexpr bool operator&lt;=(const optional&lt;T&gt;&amp;, nullopt_t) noexcept;
    template &lt;class T&gt; constexpr bool operator&lt;=(nullopt_t, const optional&lt;T&gt;&amp;) noexcept;
    template &lt;class T&gt; constexpr bool operator&gt;(const optional&lt;T&gt;&amp;, nullopt_t) noexcept;
    template &lt;class T&gt; constexpr bool operator&gt;(nullopt_t, const optional&lt;T&gt;&amp;) noexcept;
    template &lt;class T&gt; constexpr bool operator&gt;=(const optional&lt;T&gt;&amp;, nullopt_t) noexcept;
    template &lt;class T&gt; constexpr bool operator&gt;=(nullopt_t, const optional&lt;T&gt;&amp;) noexcept;

    // 5.10，与 T 比较
    template &lt;class T&gt; constexpr bool operator==(const optional&lt;T&gt;&amp;, const T&amp;);
    template &lt;class T&gt; constexpr bool operator==(const T&amp;, const optional&lt;T&gt;&amp;);
    template &lt;class T&gt; constexpr bool operator!=(const optional&lt;T&gt;&amp;, const T&amp;);
    template &lt;class T&gt; constexpr bool operator!=(const T&amp;, const optional&lt;T&gt;&amp;);
    template &lt;class T&gt; constexpr bool operator&lt;(const optional&lt;T&gt;&amp;, const T&amp;);
    template &lt;class T&gt; constexpr bool operator&lt;(const T&amp;, const optional&lt;T&gt;&amp;);
    template &lt;class T&gt; constexpr bool operator&lt;=(const optional&lt;T&gt;&amp;, const T&amp;);
    template &lt;class T&gt; constexpr bool operator&lt;=(const T&amp;, const optional&lt;T&gt;&amp;);
    template &lt;class T&gt; constexpr bool operator&gt;(const optional&lt;T&gt;&amp;, const T&amp;);
    template &lt;class T&gt; constexpr bool operator&gt;(const T&amp;, const optional&lt;T&gt;&amp;);
    template &lt;class T&gt; constexpr bool operator&gt;=(const optional&lt;T&gt;&amp;, const T&amp;);
    template &lt;class T&gt; constexpr bool operator&gt;=(const T&amp;, const optional&lt;T&gt;&amp;);

    // 5.11，特化的算法
    template &lt;class T&gt; void swap(optional&lt;T&gt;&amp;, optional&lt;T&gt;&amp;) noexcept(see below);
    template &lt;class T&gt; constexpr optional&lt;see below&gt; make_optional(T&amp;&amp;);

  } // namespace fundamentals_v1
  } // namespace experimental

  // 5.12，散列支持
  template &lt;class T&gt; struct hash;
  template &lt;class T&gt; struct hash&lt;experimental::optional&lt;T&gt;&gt;;

} // namespace std
}}

{{langlinks|en|ja}}
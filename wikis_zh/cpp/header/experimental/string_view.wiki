{{cpp/header/experimental/title|experimental/string_view}}
{{cpp/header/experimental/navbar}}

此头文件是库基础 TS ([[cpp/experimental/lib extensions|v1]], [[cpp/experimental/lib extensions 2|v2]]) 的一部分。

===类===
{{dsc begin}}
{{dsc hitem | 名字| 说明}}
{{dsc| {{lc|std::experimental::basic_string_view}} {{mark since libfund ts}} | 表示到某个字符串的引用的类模板 {{mark tclass}} }}
{{dsc| {{lc|std::experimental::string_view}} {{mark since libfund ts}} | {{c|std::experimental::basic_string_view&lt;char&gt;}} {{mark typedef}} }}
{{dsc | {{lc|std::experimental::wstring_view}} {{mark since libfund ts}} | {{c|std::experimental::basic_string_view&lt;wchar_t&gt;}} {{mark typedef}} }}
{{dsc | {{lc|std::experimental::u16string_view}} {{mark since libfund ts}} | {{c|std::experimental::basic_string_view&lt;char16_t&gt;}}  {{mark typedef}} }}
{{dsc | {{lc|std::experimental::u32string_view}} {{mark since libfund ts}} | {{c|std::experimental::basic_string_view&lt;char32_t&gt;}} {{mark typedef}}}}

{{dsc | {{c|std::hash&lt;std::experimental::string_view&gt;}} {{mark since libfund ts}} | {{mark ptclass}} }}
{{dsc | {{c|std::hash&lt;std::experimental::u16string_view&gt;}} {{mark since libfund ts}} | {{mark ptclass}} }}
{{dsc | {{c|std::hash&lt;std::experimental::u32string_view&gt;}} {{mark since libfund ts}} | {{mark ptclass}}}}
{{dsc | {{c|std::hash&lt;std::experimental::wstring_view&gt;}}  {{mark since libfund ts}} | {{mark ptclass}}}}
{{dsc end}}

===函数===

{{dsc begin}}
{{dsc inc | cpp/experimental/basic_string_view/dsc operator_cmp}}

{{dsc h2 | 输出}}
{{dsc inc | cpp/experimental/basic_string_view/dsc operator_ltlt}}
{{dsc end}}

===概要===
{{source|1=

namespace std {
  namespace experimental {
  inline namespace fundamentals_v1 {

    // 7.2，类模板 basic_string_view
    template&lt;class charT, class traits = char_traits&lt;charT&gt;&gt;
        class basic_string_view;

    // 7.9，basic_string_view 的非成员比较函数
    template&lt;class charT, class traits&gt;
    constexpr bool operator==(basic_string_view&lt;charT, traits&gt; x,
                              basic_string_view&lt;charT, traits&gt; y) noexcept;
    template&lt;class charT, class traits&gt;
    constexpr bool operator!=(basic_string_view&lt;charT, traits&gt; x,
                              basic_string_view&lt;charT, traits&gt; y) noexcept;
    template&lt;class charT, class traits&gt;
    constexpr bool operator&lt; (basic_string_view&lt;charT, traits&gt; x,
                                 basic_string_view&lt;charT, traits&gt; y) noexcept;
    template&lt;class charT, class traits&gt;
    constexpr bool operator&gt; (basic_string_view&lt;charT, traits&gt; x,
                              basic_string_view&lt;charT, traits&gt; y) noexcept;
    template&lt;class charT, class traits&gt;
    constexpr bool operator&lt;=(basic_string_view&lt;charT, traits&gt; x,
                                 basic_string_view&lt;charT, traits&gt; y) noexcept;
    template&lt;class charT, class traits&gt;
    constexpr bool operator&gt;=(basic_string_view&lt;charT, traits&gt; x,
                              basic_string_view&lt;charT, traits&gt; y) noexcept;
    // 见下文，充足的比较函数的额外重载 

    // 7.10，插入符与提取符
    template&lt;class charT, class traits&gt;
      basic_ostream&lt;charT, traits&gt;&amp;
        operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os,
                   basic_string_view&lt;charT, traits&gt; str);

    // basic_string_view typedef 名
    typedef basic_string_view&lt;char&gt; string_view;
    typedef basic_string_view&lt;char16_t&gt; u16string_view;
    typedef basic_string_view&lt;char32_t&gt; u32string_view;
    typedef basic_string_view&lt;wchar_t&gt; wstring_view;

  }  // namespace fundamentals_v1
  }  // namespace experimental

  // 7.11，散列支持
  template &lt;class T&gt; struct hash;
  template &lt;&gt; struct hash&lt;experimental::string_view&gt;;
  template &lt;&gt; struct hash&lt;experimental::u16string_view&gt;;
  template &lt;&gt; struct hash&lt;experimental::u32string_view&gt;;
  template &lt;&gt; struct hash&lt;experimental::wstring_view&gt;;

}  // namespace std
}}

{{langlinks|en|ja}}
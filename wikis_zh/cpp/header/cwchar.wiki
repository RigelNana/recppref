{{cpp/header/title|cwchar}}
{{cpp/header/navbar}}
{{cpp/header/c}}

此头文件是空终止[[cpp/string/wide|宽]]及[[cpp/string/multibyte|多字节]]字符串库的一部分。
它也提供了一些 [[cpp/io/c|C 风格输入/输出]]函数和源自 [[cpp/chrono/c|C 风格日期]]的转换。

===宏===
{{dsc begin}}
{{dsc inc|cpp/types/dsc NULL}}
{{dsc macro const|WEOF|nolink=true|指示错误的 {{tt|std::wint_t}} 类型非字符值}}
{{dsc macro const|WCHAR_MIN|nolink=true|{{c/core|wchar_t}} 的最小合法值}}
{{dsc macro const|WCHAR_MAX|nolink=true|{{c/core|wchar_t}} 的最大合法值}}
{{dsc end}}

===类型===
{{dsc begin}}
{{dsc inc|cpp/string/multibyte/dsc mbstate_t}}
{{dsc inc|cpp/types/dsc size_t}}
{{dsc|{{ttb|wint_t}}|能保有任何合法宽字符和至少多一个值的整数类型}}
{{dsc inc|cpp/chrono/c/dsc tm}}
{{dsc end}}

===函数===
{{dsc begin}}
{{dsc h2 |字符串操纵}}
{{dsc inc|cpp/string/wide/dsc wcscpy}}
{{dsc inc|cpp/string/wide/dsc wcsncpy}}
{{dsc inc|cpp/string/wide/dsc wcscat}}
{{dsc inc|cpp/string/wide/dsc wcsncat}}
{{dsc inc|cpp/string/wide/dsc wcsxfrm}}

{{dsc h2 |字符串检验}}
{{dsc inc|cpp/string/wide/dsc wcslen}}
{{dsc inc|cpp/string/wide/dsc wcscmp}}
{{dsc inc|cpp/string/wide/dsc wcsncmp}}
{{dsc inc|cpp/string/wide/dsc wcscoll}}
{{dsc inc|cpp/string/wide/dsc wcschr}}
{{dsc inc|cpp/string/wide/dsc wcsrchr}}
{{dsc inc|cpp/string/wide/dsc wcsspn}}
{{dsc inc|cpp/string/wide/dsc wcscspn}}
{{dsc inc|cpp/string/wide/dsc wcspbrk}}
{{dsc inc|cpp/string/wide/dsc wcsstr}}
{{dsc inc|cpp/string/wide/dsc wcstok}}

{{dsc h2 |宽字符数组操纵}}
{{dsc inc|cpp/string/wide/dsc wmemcpy}}
{{dsc inc|cpp/string/wide/dsc wmemmove}}
{{dsc inc|cpp/string/wide/dsc wmemcmp}}
{{dsc inc|cpp/string/wide/dsc wmemchr}}
{{dsc inc|cpp/string/wide/dsc wmemset}}

{{dsc h2 |多字节/宽字符转换}}
{{dsc inc|cpp/string/multibyte/dsc mbsinit}}
{{dsc inc|cpp/string/multibyte/dsc btowc}}
{{dsc inc|cpp/string/multibyte/dsc wctob}}
{{dsc inc|cpp/string/multibyte/dsc mbrlen}}
{{dsc inc|cpp/string/multibyte/dsc mbrtowc}}
{{dsc inc|cpp/string/multibyte/dsc wcrtomb}}
{{dsc inc|cpp/string/multibyte/dsc mbsrtowcs}}
{{dsc inc|cpp/string/multibyte/dsc wcsrtombs}}

{{dsc h2 |输入/输出}}
{{dsc inc|cpp/io/c/dsc fgetwc}}
{{dsc inc|cpp/io/c/dsc fgetws}}
{{dsc inc|cpp/io/c/dsc fputwc}}
{{dsc inc|cpp/io/c/dsc fputws}}
{{dsc inc|cpp/io/c/dsc getwchar}}
{{dsc inc|cpp/io/c/dsc putwchar}}
{{dsc inc|cpp/io/c/dsc ungetwc}}
{{dsc inc|cpp/io/c/dsc fwide}}
{{dsc inc|cpp/io/c/dsc fwscanf}}
{{dsc inc|cpp/io/c/dsc vfwscanf}}
{{dsc inc|cpp/io/c/dsc fwprintf}}
{{dsc inc|cpp/io/c/dsc vfwprintf}}

{{dsc h2|字符串转换}}
{{dsc inc|cpp/chrono/c/dsc wcsftime}}
{{dsc inc|cpp/string/wide/dsc wcstol}}
{{dsc inc|cpp/string/wide/dsc wcstoul}}
{{dsc inc|cpp/string/wide/dsc wcstof}}

{{dsc end}}

===注解===
* {{lc|NULL}} 也在以下标头定义：
** {{header|cstddef}}
** {{header|cstring}}
** {{header|ctime}}
** {{header|clocale}}
** {{header|cstdio}}
* {{lc|std::size_t}} 也在以下标头定义：
** {{header|cstddef}}
** {{header|ctime}}
** {{header|cstdio}}
* {{tt|std::wint_t}} 也在以下标头定义：
** {{header|cwctype}}
* {{lc|std::tm}} 也在以下标头定义：
** {{header|ctime}}

===Synopsis===
{{source|1=
namespace std {
  using size_t =    /* 见描述 */; // 独立
  using mbstate_t = /* 见描述 */; // 独立
  using wint_t =    /* 见描述 */; // 独立

  struct tm;

  int fwprintf(FILE* stream, const wchar_t* format, ...);
  int fwscanf(FILE* stream, const wchar_t* format, ...);
  int swprintf(wchar_t* s, size_t n, const wchar_t* format, ...);
  int swscanf(const wchar_t* s, const wchar_t* format, ...);
  int vfwprintf(FILE* stream, const wchar_t* format, va_list arg);
  int vfwscanf(FILE* stream, const wchar_t* format, va_list arg);
  int vswprintf(wchar_t* s, size_t n, const wchar_t* format, va_list arg);
  int vswscanf(const wchar_t* s, const wchar_t* format, va_list arg);
  int vwprintf(const wchar_t* format, va_list arg);
  int vwscanf(const wchar_t* format, va_list arg);
  int wprintf(const wchar_t* format, ...);
  int wscanf(const wchar_t* format, ...);
  wint_t fgetwc(FILE* stream);
  wchar_t* fgetws(wchar_t* s, int n, FILE* stream);
  wint_t fputwc(wchar_t c, FILE* stream);
  int fputws(const wchar_t* s, FILE* stream);
  int fwide(FILE* stream, int mode);
  wint_t getwc(FILE* stream);
  wint_t getwchar();
  wint_t putwc(wchar_t c, FILE* stream);
  wint_t putwchar(wchar_t c);
  wint_t ungetwc(wint_t c, FILE* stream);
  double wcstod(const wchar_t* nptr, wchar_t** endptr);
  float wcstof(const wchar_t* nptr, wchar_t** endptr);
  long double wcstold(const wchar_t* nptr, wchar_t** endptr);
  long int wcstol(const wchar_t* nptr, wchar_t** endptr, int base);
  long long int wcstoll(const wchar_t* nptr, wchar_t** endptr, int base);
  unsigned long int wcstoul(const wchar_t* nptr, wchar_t** endptr, int base);
  unsigned long long int wcstoull(const wchar_t* nptr, wchar_t** endptr, int base);
  wchar_t* wcscpy(wchar_t* s1, const wchar_t* s2);                // 独立
  wchar_t* wcsncpy(wchar_t* s1, const wchar_t* s2, size_t n);     // 独立
  wchar_t* wmemcpy(wchar_t* s1, const wchar_t* s2, size_t n);     // 独立
  wchar_t* wmemmove(wchar_t* s1, const wchar_t* s2, size_t n);    // 独立
  wchar_t* wcscat(wchar_t* s1, const wchar_t* s2);                // 独立
  wchar_t* wcsncat(wchar_t* s1, const wchar_t* s2, size_t n);     // 独立
  int wcscmp(const wchar_t* s1, const wchar_t* s2);               // 独立
  int wcscoll(const wchar_t* s1, const wchar_t* s2);
  int wcsncmp(const wchar_t* s1, const wchar_t* s2, size_t n);    // 独立
  size_t wcsxfrm(wchar_t* s1, const wchar_t* s2, size_t n);
  int wmemcmp(const wchar_t* s1, const wchar_t* s2, size_t n);    // 独立
  const wchar_t* wcschr(const wchar_t* s, wchar_t c);             // 独立
  wchar_t* wcschr(wchar_t* s, wchar_t c);                         // 独立
  size_t wcscspn(const wchar_t* s1, const wchar_t* s2);           // 独立
  const wchar_t* wcspbrk(const wchar_t* s1, const wchar_t* s2);   // 独立
  wchar_t* wcspbrk(wchar_t* s1, const wchar_t* s2);               // 独立
  const wchar_t* wcsrchr(const wchar_t* s, wchar_t c);            // 独立
  wchar_t* wcsrchr(wchar_t* s, wchar_t c);                        // 独立
  size_t wcsspn(const wchar_t* s1, const wchar_t* s2);            // 独立
  const wchar_t* wcsstr(const wchar_t* s1, const wchar_t* s2);    // 独立
  wchar_t* wcsstr(wchar_t* s1, const wchar_t* s2);                // 独立
  wchar_t* wcstok(wchar_t* s1, const wchar_t* s2, wchar_t** ptr); // 独立
  const wchar_t* wmemchr(const wchar_t* s, wchar_t c, size_t n);  // 独立
  wchar_t* wmemchr(wchar_t* s, wchar_t c, size_t n);              // 独立
  size_t wcslen(const wchar_t* s);                                // 独立
  wchar_t* wmemset(wchar_t* s, wchar_t c, size_t n);              // 独立
  size_t wcsftime(wchar_t* s, size_t maxsize, const wchar_t* format, const tm* timeptr);
  wint_t btowc(int c);
  int wctob(wint_t c);

  // multibyte / wide string and character conversion functions
  int mbsinit(const mbstate_t* ps);
  size_t mbrlen(const char* s, size_t n, mbstate_t* ps);
  size_t mbrtowc(wchar_t* pwc, const char* s, size_t n, mbstate_t* ps);
  size_t wcrtomb(char* s, wchar_t wc, mbstate_t* ps);
  size_t mbsrtowcs(wchar_t* dst, const char** src, size_t len, mbstate_t* ps);
  size_t wcsrtombs(char* dst, const wchar_t** src, size_t len, mbstate_t* ps);
}

#define NULL      /* 见描述 */ // 独立
#define WCHAR_MAX /* 见描述 */ // 独立
#define WCHAR_MIN /* 见描述 */ // 独立
#define WEOF      /* 见描述 */ // 独立
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=345|std=C++98|before={{tt|&lt;cwchar&gt;}} 没有提供 {{lc|std::tm}}|after=已提供}}
{{dr list end}}

{{langlinks|en|es|ja|ru}}
{{cpp/title|atomic_is_lock_free, ATOMIC_xxx_LOCK_FREE}}
{{cpp/thread/navbar}}
{{dcl begin}}
{{dcl header|atomic}}
{{dcl|num=1|since=c++11|
template&lt; class T &gt;
bool atomic_is_lock_free( const volatile std::atomic&lt;T&gt;* obj ) noexcept;
}}
{{dcl|num=2|since=c++11|
template&lt; class T &gt;
bool atomic_is_lock_free( const std::atomic&lt;T&gt;* obj ) noexcept;
}}
{{dcl|num=3|since=c++11|
#define ATOMIC_BOOL_LOCK_FREE     /* 未指定 */
#define ATOMIC_CHAR_LOCK_FREE     /* 未指定 */
#define ATOMIC_CHAR16_T_LOCK_FREE /* 未指定 */
#define ATOMIC_CHAR32_T_LOCK_FREE /* 未指定 */
#define ATOMIC_WCHAR_T_LOCK_FREE  /* 未指定 */
#define ATOMIC_SHORT_LOCK_FREE    /* 未指定 */
#define ATOMIC_INT_LOCK_FREE      /* 未指定 */
#define ATOMIC_LONG_LOCK_FREE     /* 未指定 */
#define ATOMIC_LLONG_LOCK_FREE    /* 未指定 */
#define ATOMIC_POINTER_LOCK_FREE  /* 未指定 */
}}
{{dcl|num=4|since=c++20|
#define ATOMIC_CHAR8_T_LOCK_FREE  /* 未指定 */
}}
{{dcl end}}

@1,2@ 如同通过调用 {{c|obj-&gt;is_lock_free()}}，确定 {{c|obj}} 指向的原对象是否以免锁方式实现。任何给定的程序执行中，免锁查询的结果对于所有同类型的原子对象均相同。

@3,4@ 展开成整数常量表达式，它的值
*对于绝不免锁的内建原子类型是 {{c|0}}；
*对于''有时''{{sep}}免锁的内建原子类型是 {{c|1}}；
*对于始终免锁的内建原子类型是 {{c|2}}。

===参数===
{{par begin}}
{{par|obj|指向要检验的原子对象的指针}}
{{par end}} 

===返回值===
在 {{c|*obj}} 是免锁原子对象时返回 {{c|true}}，否则返回 {{c|false}}。

===注解===
{{lc|std::atomic_flag}} 以外的所有原子类型可用互斥体或其他锁定操作实现，而不一定用免锁的原子 CPU 指令。也允许原子类型''有时''{{sep}}免锁：例如，如果只有某些子架构上才支持给定类型的免锁原子访问（比如 x86-64 上的 [https://www.felixcloutier.com/x86/cmpxchg8b:cmpxchg16b CMPXCHG16B] 指令），那么只有到运行时才知道原子操作是否是免锁的。

C++ 标准推荐（但不要求）免锁操作同时免地址，即适用于使用共享内存的进程间通信。

===示例===
{{example
|code=
#include &lt;atomic&gt;
#include &lt;iostream&gt;
#include &lt;utility&gt;

struct A { int a[4]; };
struct B { int x, y; };

int main()
{
    std::atomic&lt;A&gt; a;
    std::atomic&lt;B&gt; b;
    std::cout &lt;&lt; std::boolalpha
              &lt;&lt; "std::atomic&lt;A&gt; 是否免锁？"
              &lt;&lt; std::atomic_is_lock_free(&amp;a) &lt;&lt; '\n'
              &lt;&lt; "std::atomic&lt;B&gt; 是否免锁？"
              &lt;&lt; std::atomic_is_lock_free(&amp;b) &lt;&lt; '\n';
}
|p=true
|output=
std::atomic&lt;A&gt; 是否免锁？false
std::atomic&lt;B&gt; 是否免锁？true
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3249|std=C++11|before={{tt|atomic_is_lock_free}} 通过指针说明，这有歧义并可能接受非法指针值|after=通过原子对象说明}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/atomic/atomic/dsc is_lock_free}}
{{dsc inc|cpp/atomic/dsc atomic_flag}}
{{dsc inc|cpp/atomic/atomic/dsc is_always_lock_free}}
{{dsc break}}
{{dsc tfun|cpp/memory/shared_ptr/atomic|notes={{mark life|deprecated=c++20|removed=c++26|br=yes}}|title=std::atomic_is_lock_free{{dsc small|(std::shared_ptr)}}|对 {{lc|std::shared_ptr}} 特化的原子操作}}
{{dsc see c|c/atomic/atomic_is_lock_free}}
{{dsc see c|c/atomic/ATOMIC_LOCK_FREE_consts|ATOMIC_*_LOCK_FREE}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|atomic_fetch_min|atomic_fetch_min_explicit}}
{{cpp/thread/navbar}}
{{dcl begin}}
{{dcl header|atomic}}
{{dcl|num=1|since=c++26|
template&lt; class T &gt;
T atomic_fetch_min( std::atomic&lt;T&gt;* obj,
                    typename std::atomic&lt;T&gt;::value_type arg ) noexcept;
}}
{{dcl|num=2|since=c++26|
template&lt; class T &gt;
T atomic_fetch_min( volatile std::atomic&lt;T&gt;* obj,
                    typename std::atomic&lt;T&gt;::value_type arg ) noexcept;
}}
{{dcl|num=3|since=c++26|
template&lt; class T &gt;
T atomic_fetch_min_explicit( std::atomic&lt;T&gt;* obj,
                             typename std::atomic&lt;T&gt;::value_type arg,
                             std::memory_order order ) noexcept;
}}
{{dcl|num=4|since=c++26|
template&lt; class T &gt;
T atomic_fetch_min_explicit( volatile std::atomic&lt;T&gt;* obj,
                             typename std::atomic&lt;T&gt;::value_type arg,
                             std::memory_order order ) noexcept;
}}
{{dcl end}}

以 {{c|obj}} 的旧值和 {{c|arg}} 的 {{lc|std::min}} 结果原子地替换 {{c|obj}} 所指向的值。如同执行下列内容一般进行运算：
@1,2@ {{c|obj-&gt;fetch_min(arg)}}
@3,4@ {{c|obj-&gt;fetch_min(arg, order)}}

如果 {{tt|std::atomic&lt;T&gt;}} 没有 {{tt|fetch_min}} 成员（此成员仅对 {{c/core|bool}} 以外的{{rlp|atomic#对整数类型的特化|整数}}和{{rlp|atomic#部分特化|指针}}类型提供），那么程序非良构。

===参数===
{{par begin}}
{{par|obj|指向要修改的原子对象的指针}}
{{par|arg|与存储于原子对象的值 {{lc|std::min}} 的值}}
{{par|order|内存同步定序}}
{{par end}} 

===返回值===
{{c|*obj}} 的{{ls|cpp/atomic/memory order#修改顺序}}中，紧接此函数生效之前的值。

===注解===
{{feature test macro|__cpp_lib_atomic_min_max|原子最小/最大操作|value=202403L|std=C++26}}

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/atomic/atomic/dsc fetch_min}}
{{dsc inc|cpp/atomic/dsc atomic_fetch_max}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
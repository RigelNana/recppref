{{cpp/atomic/atomic/title|1=operator&amp;=,{{!}}=,^=}}
{{cpp/atomic/atomic/navbar}}
{{dcl begin}}
{{dcl h|{{tt|atomic&lt;}}''整数类型''{{sep}}{{tt|&gt;}} 特化才有的成员}}
{{dcl|num=1|since=c++11|1=
T operator&amp;=( T arg ) noexcept;
}}
{{dcl|num=2|since=c++11|1=
T operator&amp;=( T arg ) volatile noexcept;
}}
{{dcl|num=3|since=c++11|1=
T operator{{!}}=( T arg ) noexcept;
}}
{{dcl|num=4|since=c++11|1=
T operator{{!}}=( T arg ) volatile noexcept;
}}
{{dcl|num=5|since=c++11|1=
T operator^=( T arg ) noexcept;
}}
{{dcl|num=6|since=c++11|1=
T operator^=( T arg ) volatile noexcept;
}}
{{dcl end}}

以先前值和 {{c|arg}} 的计算结果原子地替换当前值。操作是读-修改-写操作。
* {{c/core|1=operator&amp;=}} 进行原子逐位与。等价于 {{c|return fetch_and(arg) &amp; arg;}}。
* {{c/core|1=operator{{!}}=}} 进行原子逐位或。等价于 {{c|return fetch_or(arg) {{!}} arg;}}。
* {{c/core|1=operator^=}} 进行原子逐位异或。等价于 {{c|return fetch_xor(arg) ^ arg;}}。
{{rrev|since=c++20|
{{c/core|volatile}} 重载在参与重载决议且 {{c|std::atomic&lt;T&gt;::is_always_lock_free}} 是 {{c|false}} 时被弃用。
}}

===参数===
{{par begin}}
{{par|arg|算术运算的实参}}
{{par end}}

===返回值===
结果值（即在 {{c|*this}} 的{{ls|cpp/atomic/memory order#修改顺序}}中紧接对应成员函数生效之前的值上应用相应二元运算符的结果）。

===注解===
与大多数复合赋值运算符不同，原子类型的复合赋值运算符不返回到其左侧运算数的引用。它们代之以返回存储的值的副本。

===参阅===
{{dsc begin}}
{{dsc inc|cpp/atomic/atomic/dsc fetch_and}}
{{dsc inc|cpp/atomic/atomic/dsc fetch_or}}
{{dsc inc|cpp/atomic/atomic/dsc fetch_xor}}
{{dsc inc|cpp/atomic/atomic/dsc operator arith}}
{{dsc inc|cpp/atomic/atomic/dsc operator arith2}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
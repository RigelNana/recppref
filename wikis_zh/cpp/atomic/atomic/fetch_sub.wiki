{{cpp/atomic/atomic/title|fetch_sub}}
{{cpp/atomic/atomic/navbar}}
{{dcl begin}}
{{dcl h|{{tt|atomic&lt;}}''整数类型''{{sep}}{{tt|&gt;}} 特化{{rev inl|since=c++20|和 {{tt|atomic&lt;}}''浮点类型''{{sep}}{{tt|&gt;}} 特化}}才有的成员}}
{{dcl|num=1|since=c++11|1=
T fetch_sub( T arg, std::memory_order order =
                        std::memory_order_seq_cst ) noexcept;
}}
{{dcl|num=2|since=c++11|1=
T fetch_sub( T arg, std::memory_order order =
                        std::memory_order_seq_cst ) volatile noexcept;
}}
{{dcl h|{{tt|atomic&lt;T*&gt;}} 部分特化才有的成员}}
{{dcl|num=3|since=c++11|1=
T* fetch_sub( std::ptrdiff_t arg,
              std::memory_order order =
                  std::memory_order_seq_cst ) noexcept;
}}
{{dcl|num=4|since=c++11|1=
T* fetch_sub( std::ptrdiff_t arg,
              std::memory_order order =
                  std::memory_order_seq_cst ) volatile noexcept;
}}
{{dcl end}}

以当前值和 {{c|arg}} 的算术减法结果原子地替换当前值。运算是读-修改-写操作。按照 {{c|order}} 的值影响内存。

@1,2@ 对于有符号整数类型，定义算术使用补码表示进行。没有未定义的结果。
{{rrev|since=c++20|
对于浮点类型，生效的[[cpp/numeric/fenv|浮点环境]]可能异于调用方线程的浮点环境。操作不必遵循对应的 {{lc|std::numeric_limits}} 特征，但鼓励这么做。如果结果不是它的类型所能表示的值，那么结果未指定，但该操作没有未定义行为。
}}

@3,4@ 结果可能是未定义的地址，但该运算无未定义行为。
@@ 如果 {{tt|T}} 不是完整对象类型，那么程序非良构。


{{rrev|since=c++20|
重载 {{v|2}} 或 {{v|4}} 在参与重载决议且 {{c|std::atomic&lt;T&gt;::is_always_lock_free}} 是 {{c|false}} 时被弃用。
}}

===参数===
{{par begin}}
{{par | arg |算术减法的另一实参}}
{{par | order |强制的内存定序制约}}
{{par end}}

===返回值===
{{tt|*this}} 的[[cpp/atomic/memory_order#修改顺序|修改顺序]]中，紧接此函数生效之前的值。

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P0558R1|std=c++11|before=曾容许指向 ''cv'' void 或函数的指针|after=使之非良构}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/atomic/dsc atomic_fetch_sub}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/atomic/atomic_ref/title|fetch_max}}
{{cpp/atomic/atomic_ref/navbar}}
{{dcl begin}}
{{dcl h|仅当 {{tt|T}} 为 ''cv'' {{c/core|bool}} 以外的整数类型或指向对象的指针类型时提供}}
{{dcl|since=c++26|1=
value_type fetch_max( value_type arg,
                      std::memory_order order =
                          std::memory_order_seq_cst ) const noexcept;
}}
{{dcl end}}

以值和 {{c|arg}} 的 {{lc|std::max}} 结果原子地替换被引用对象的当前值。运算是读-修改-写操作。按照 {{c|order}} 的值影响内存。

如果 {{tt|T}} 为指针类型且指针指向不同的对象（或不同对象的子对象），那么[[cpp/language/operator comparison#内建指针关系比较|指针比较]]不会建立{{enwiki|strict weak ordering|严格弱序}}。

{{cpp/enable if| {{c/core|std::is_const_v&lt;T&gt;}} 是 {{c|false}} }}。

===参数===
{{par begin}}
{{par|arg|{{lc|std::max}} 的另一实参}}
{{par|order|强制的内存定序约束}}
{{par end}}

===返回值===
{{c|*this}} 的{{ls|cpp/atomic/memory order#修改顺序}}中，紧接此函数生效之前的值。

===注解===
{{feature test macro|__cpp_lib_atomic_min_max|原子最小/最大操作|value=202403L|std=C++26}}

===示例===
{{example}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
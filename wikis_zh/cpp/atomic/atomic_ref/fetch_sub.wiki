{{cpp/atomic/atomic_ref/title|fetch_sub}}
{{cpp/atomic/atomic_ref/navbar}}
{{dcl begin}}
{{dcl h|仅当 {{tt|T}} 为 ''cv'' {{c/core|bool}} 以外的算术类型或指向对象的指针类型时提供}}
{{dcla|constexpr=c++26|1=
value_type fetch_sub( difference_type arg,
                      std::memory_order order =
                          std::memory_order_seq_cst ) const noexcept;
}}
{{dcl end}}

原子地以被 {{box|{{c/core|*}}{{rlpsi|/#ptr}}}} 引用的当前值和 {{c|arg}} 的算术减法结果替换该值。此操作为读修改写操作。按照 {{c|order}} 的值影响内存。

* 对于有符号整数类型，定义算术为使用补码进行。不会有未定义的结果。
* 对于浮点类型，生效的[[cpp/numeric/fenv|浮点环境]]可能异于调用方线程的浮点环境。不需要操作服从对应的 {{lc|std::numeric_limits}} 特性，但鼓励这么做。如果结果无法以它的类型表示，那么结果未指定，但操作不会另有未定义行为。
* 对于指针类型，结果可以是未定义的地址，但操作不会另有未定义行为。
** 如果 {{c/core|std::remove_pointer_t&lt;T&gt;}} 不是完整对象类型，那么程序非良构。

{{cpp/enable if|{{c/core|std::is_const_v&lt;T&gt;}} 是 {{c|false}} }}。

===参数===
{{par begin}}
{{par|arg|算术减法的另一实参}}
{{par|order|施加的内存定序制约}}
{{par end}}

===返回值===
紧接此函数生效前的被 {{box|{{c/core|*}}{{rlpsi|/#ptr}}}} 引用的值。

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3508|paper=P3323R1|std=C++20|before={{tt|fetch_sub}} 对 {{c/core|const T}} 无意义|after=受约束以仅接受非 const 的 {{tt|T}}}}
{{dr list end}}

===示例===
{{example}}

{{langlinks|en|es|ja}}
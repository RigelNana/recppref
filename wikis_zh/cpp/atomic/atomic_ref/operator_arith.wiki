{{cpp/atomic/atomic_ref/title|1=operator++,++{{small|(int)}},--,--{{small|(int)}}}}
{{cpp/atomic/atomic_ref/navbar}}
{{dcl begin}}
{{dcl h|仅当 {{tt|T}} 为 ''cv'' {{c/core|bool}} 以外的整数类型或指向对象的指针类型时提供}}
{{dcl|num=1|since=c++20|1=
value_type operator++() const noexcept;
}}
{{dcl|num=2|since=c++20|1=
value_type operator++( int ) const noexcept;
}}
{{dcl|num=3|since=c++20|1=
value_type operator--() const noexcept;
}}
{{dcl|num=4|since=c++20|1=
value_type operator--( int ) const noexcept;
}}
{{dcl end}}

原子地自增或自减被引用对象的当前值。这些操作是读修改写操作。

@1@ 进行原子的前自增。等价于 {{c|return fetch_add(1) + 1;}}。
@2@ 进行原子的后自增。等价于 {{c|return fetch_add(1);}}。
@3@ 进行原子的前自减。等价于 {{c|return fetch_sub(1) - 1;}}。
@4@ 进行原子的后自减。等价于 {{c|return fetch_sub(1);}}。

* 对于有符号整数类型，定义算术为使用补码进行。无未定义结果。
* 对于指向对象指针类型，结果可为未定义地址，但操作不会另有未定义行为。如果 {{c/core|std::remove_pointer_t&lt;T&gt;}} 不是完整对象类型，那么程序非良构。

{{cpp/enable if|plural=yes| {{c/core|std::is_const_v&lt;T&gt;}} 是 {{c|false}} }}。

===返回值===
@1,3@ 被引用对象在修改后的值。
@2,4@ 被引用对象在修改前的值。

===注解===
与大多数前自增和前自减运算符不同，{{tt|atomic_ref}} 的前自增和前自减运算符并不返回到被修改对象的引用。它们代之以返回存储的值的副本。

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3508|paper=P3323R1|std=C++20|before=自增与自减运算符对 {{c/core|const T}} 无意义|after=受约束以仅接受非 const 的 {{tt|T}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/atomic/atomic_ref/dsc fetch_add}}
{{dsc inc|cpp/atomic/atomic_ref/dsc fetch_sub}}
{{dsc inc|cpp/atomic/atomic_ref/dsc operator arith2}}
{{dsc inc|cpp/atomic/atomic_ref/dsc operator arith3}}
{{dsc end}}

{{langlinks|en|es|ja}}
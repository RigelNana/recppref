{{cpp/atomic/atomic_ref/title|1=operator&amp;=,{{!}}=,^=}}
{{cpp/atomic/atomic_ref/navbar}}
{{dcl begin}}
{{dcl h|仅当 {{tt|T}} 为 ''cv'' {{c/core|bool}} 以外的整数类型时提供}}
{{dcl|num=1|since=c++20|1=
value_type operator&amp;=( value_type arg ) const noexcept;
}}
{{dcl|num=2|since=c++20|1=
value_type operator{{!}}=( value_type arg ) const noexcept;
}}
{{dcl|num=3|since=c++20|1=
value_type operator^=( value_type arg ) const noexcept;
}}
{{dcl end}}

原子地以涉及先前值和 {{c|arg}} 的运算的结果替换被引用对象的当前值。这些操作是读修改写操作。
* {{c/core|1=operator&amp;=}} 进行原子逐位与。等价于 {{c|return fetch_and(arg) &amp; arg;}}。
* {{c/core|1=operator!=}} 进行原子逐位或。等价于 {{c|return fetch_or(arg) {{!}} arg;}}。
* {{c/core|1=operator^=}} 进行原子逐位异或。等价于 {{c|return fetch_xor(arg) ^ arg;}}。

{{cpp/enable if|plural=yes| {{c/core|std::is_const_v&lt;T&gt;}} 是 {{c|false}} }}。

===参数===
{{par begin}}
{{par|arg|算术运算的实参}}
{{par end}}

===返回值===
结果值（即对紧接对应的成员函数生效之前的值应用对应的二元运算符的结果）。

===注解===
不同于大多数复合赋值运算符，{{tt|atomic_ref}} 的复合赋值运算符并不返回到其左侧实参的引用。它们代之以返回存储的值的副本。

===示例===
{{example}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3508|paper=P3323R1|std=C++20|before=复合赋值运算符对 {{c/core|const T}} 无意义|after=受约束以仅接受非 const 的 {{tt|T}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/atomic/atomic_ref/dsc fetch_and}}
{{dsc inc|cpp/atomic/atomic_ref/dsc fetch_or}}
{{dsc inc|cpp/atomic/atomic_ref/dsc fetch_xor}}
{{dsc inc|cpp/atomic/atomic_ref/dsc operator arith}}
{{dsc inc|cpp/atomic/atomic_ref/dsc operator arith2}}
{{dsc end}}

{{langlinks|en|es|ja}}
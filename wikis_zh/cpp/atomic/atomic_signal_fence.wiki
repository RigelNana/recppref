{{cpp/title | atomic_signal_fence }}
{{cpp/thread/navbar}}
{{dcl begin}}
{{dcl header | atomic }}
{{dcl | since=c++11 | 1=
extern "C" void atomic_signal_fence( std::memory_order order ) noexcept;
}}
{{dcl end}}

在线程和同一线程上执行的信号处理函数之间，建立以 {{tt|order}} 指示的非原子和宽松原子访问的内存同步定序。这等价于 {{lc|std::atomic_thread_fence}}，除了不为内存定序发出 CPU 指令。只会根据 {{tt|order}} 指示抑制编译器的指令重排。例如，拥有释放语义的栅栏阻止把读或写操作移动到后继的写入操作之后，而拥有获得语义的栅栏阻止把读或写操作移动到前驱的读取操作之前。

===参数===
{{par begin}}
{{par | order |此栅栏执行的内存定序}}
{{par end}} 

===返回值===
（无）

===示例===
{{example}} &lt;!-- 从 http://stackoverflow.com/a/14594071/273767 接纳 --&gt;

===参阅===
{{dsc begin}}
{{dsc inc | cpp/atomic/dsc memory_order}}
{{dsc inc | cpp/atomic/dsc atomic_thread_fence}}
{{dsc see c | c/atomic/atomic_signal_fence}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|atomic_fetch_sub|atomic_fetch_sub_explicit}}
{{cpp/thread/navbar}}
{{dcl begin}}
{{dcl header|atomic}}
{{dcl|num=1|since=c++11|
template&lt; class T &gt;
T atomic_fetch_sub( std::atomic&lt;T&gt;* obj,
                    typename std::atomic&lt;T&gt;::difference_type arg ) noexcept;
}}
{{dcl|num=2|since=c++11|
template&lt; class T &gt;
T atomic_fetch_sub( volatile std::atomic&lt;T&gt;* obj,
                    typename std::atomic&lt;T&gt;::difference_type arg ) noexcept;
}}
{{dcl|num=3|since=c++11|
template&lt; class T &gt;
T atomic_fetch_sub_explicit( std::atomic&lt;T&gt;* obj, 
                             typename std::atomic&lt;T&gt;::difference_type arg, 
                             std::memory_order order ) noexcept;
}}
{{dcl|num=4|since=c++11|
template&lt; class T &gt;
T atomic_fetch_sub_explicit( volatile std::atomic&lt;T&gt;* obj,
                             typename std::atomic&lt;T&gt;::difference_type arg, 
                             std::memory_order order ) noexcept;
}}
{{dcl end}}

进行原子减法。从 {{c|obj}} 所指向的值原子地减去 {{c|arg}}，并返回 {{c|obj}} 先前保有的值。如同执行下列内容一样进行运算：
@1,2@ {{c|obj-&gt;fetch_sub(arg)}}
@3,4@ {{c|obj-&gt;fetch_sub(arg, order)}}

如果 {{tt|std::atomic&lt;T&gt;}} 没有 {{tt|fetch_sub}} 成员（此成员仅对 {{c/core|bool}} 以外的{{rlp|atomic#对整数类型的特化|整数}}{{rev inl|since=c++20|、{{rlp|atomic#对浮点类型的特化|浮点}}}}和{{rlp|atomic#部分特化|指针}}类型提供），那么程序非良构。

===参数===
{{par begin}}
{{par|obj|指向要修改的原子对象的指针}}
{{par|arg|要从存储于原子对象的值减去的值}}
{{par|order|内存同步定序}}
{{par end}} 

===返回值===
{{c|*obj}} 的{{ls|cpp/atomic/memory order#修改顺序}}中，紧接此函数生效之前的值。

===示例===
{{example
|多个线程可用 {{tt|std::atomic_fetch_sub}} 同时处理有下标的容器。
|code=
#include &lt;atomic&gt;
#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;string&gt;
#include &lt;thread&gt;
#include &lt;vector&gt;

const int N = 50;
std::atomic&lt;int&gt; cnt;
std::vector&lt;int&gt; data(N);

void reader(int id) 
{
    for (;;)
    {
        int idx = atomic_fetch_sub_explicit(&amp;cnt, 1, std::memory_order_relaxed);
        if (idx &gt;= 0)
            std::cout &lt;&lt; "读者 " &lt;&lt; std::to_string(id) &lt;&lt; " 已处理第 "
                      &lt;&lt; std::to_string(data[idx]) &lt;&lt; " 项\n";
        else
        {
            std::cout &lt;&lt; "读者 " &lt;&lt; std::to_string(id) &lt;&lt; " 已完成\n";
            break;
        }
    }
}

int main()
{
    std::iota(data.begin(), data.end(), 1);
    cnt = data.size() - 1;
    
    std::vector&lt;std::thread&gt; v;
    for (int n = 0; n &lt; 5; ++n)
        v.emplace_back(reader, n);
    for (auto&amp; t : v)
        t.join();
}
|output=
读者 2 已处理第 50 项
读者 1 已处理第 44 项
读者 4 已处理第 46 项
&lt;....&gt;
读者 0 已完成
读者 4 已完成
读者 3 已完成
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|std=C++11|paper=P0558R1|before=要求准确类型匹配，因为会从多个参数推导 {{tt|T}}|after=只会从 {{c|obj}} 推导 {{tt|T}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/atomic/atomic/dsc fetch_sub}}
{{dsc inc|cpp/atomic/dsc atomic_fetch_add}}
{{dsc see c|c/atomic/atomic_fetch_sub|atomic_fetch_sub|atomic_fetch_sub_explicit}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
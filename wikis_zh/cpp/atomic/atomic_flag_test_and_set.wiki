{{cpp/title|atomic_flag_test_and_set|atomic_flag_test_and_set_explicit}}
{{cpp/thread/navbar}}
{{dcl begin}}
{{dcl header|atomic}}
{{dcl|num=1|since=c++11|
bool atomic_flag_test_and_set( volatile std::atomic_flag* obj ) noexcept;
}}
{{dcl|num=2|since=c++11|
bool atomic_flag_test_and_set( std::atomic_flag* obj ) noexcept;
}}
{{dcl|num=3|since=c++11|
bool atomic_flag_test_and_set_explicit( volatile std::atomic_flag* obj, 
                                        std::memory_order order ) noexcept;
}}
{{dcl|num=4|since=c++11|
bool atomic_flag_test_and_set_explicit( std::atomic_flag* obj, 
                                        std::memory_order order ) noexcept;
}}
{{dcl end}}

将 {{lc|std::atomic_flag}} 的状态原子地更改为设置（{{c|true}}），并返回它先前保有的值。
@1,2@ 内存同步定序是 {{c|std::memory_order_seq_cst}}。
@3,4@ 内存同步定序是 {{c|order}}。

===参数===
{{par begin}}
{{par|obj|指向要访问的 {{lc|std::atomic_flag}} 的指针}}
{{par|order|内存同步定序}}
{{par end}} 

===返回值===
{{c|obj}} 所指向的标志先前保有的值。

===示例===
{{example
|可以通过 {{tt|std::atomic_flag}} 在用户空间实现自旋锁互斥体。
|code=
#include &lt;atomic&gt;
#include &lt;iostream&gt;
#include &lt;thread&gt;
#include &lt;vector&gt;

std::atomic_flag lock = ATOMIC_FLAG_INIT;

void f(int n)
{
    for (int cnt = 0; cnt &lt; 100; ++cnt)
    {
        while (std::atomic_flag_test_and_set_explicit(&amp;lock, std::memory_order_acquire))
            ; // 在获取到锁之前自旋
        std::cout &lt;&lt; "从线程 " &lt;&lt; n &lt;&lt; " 输出\n";
        std::atomic_flag_clear_explicit(&amp;lock, std::memory_order_release);
    }
}

int main()
{
    std::vector&lt;std::thread&gt; v;
    for (int n = 0; n &lt; 10; ++n)
        v.emplace_back(f, n);
    for (auto&amp; t : v)
        t.join();
}
|output=
从线程 2 输出
从线程 6 输出
从线程 7 输出
...&lt; 1000 行 &gt;...
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/atomic/dsc atomic_flag}}
{{dsc inc|cpp/atomic/dsc atomic_flag_clear}}
{{dsc inc|cpp/atomic/dsc memory_order}}
{{dsc see c|c/atomic/atomic_flag_test_and_set|atomic_flag_test_and_set|atomic_flag_test_and_set_explicit}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
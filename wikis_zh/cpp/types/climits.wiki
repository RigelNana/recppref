{{title|C 数值极限接口}}
{{cpp/types/navbar}}

参阅 {{lc|std::numeric_limits}} 接口。

===整数类型极限===
{{dsc begin}}
{{dsc h2|核心语言整数类型的极限}}
{{dsc header|climits}}
{{dsc inc|cpp/types/dsc CHAR_BIT}}
{{dsc inc|cpp/types/dsc MB_LEN_MAX}}
{{dsc inc|cpp/types/dsc CHAR_MIN}}
{{dsc inc|cpp/types/dsc CHAR_MAX}}
{{dsc inc|cpp/types/dsc signed_MIN}}
{{dsc inc|cpp/types/dsc signed_MAX}}
{{dsc inc|cpp/types/dsc unsigned_MAX}}
{{dsc header|cwchar}}
{{dsc header|cstdint}}
{{dsc inc|cpp/types/dsc WCHAR_MIN}}
{{dsc inc|cpp/types/dsc WCHAR_MAX}}
{{dsc h2|库类型别名的极限}}
{{dsc header|cstdint}}
{{dsc inc|cpp/types/dsc PTRDIFF_MIN}}
{{dsc inc|cpp/types/dsc PTRDIFF_MAX}}
{{dsc inc|cpp/types/dsc SIZE_MAX}}
{{dsc inc|cpp/types/dsc SIG_ATOMIC_MIN}}
{{dsc inc|cpp/types/dsc SIG_ATOMIC_MAX}}
{{dsc inc|cpp/types/dsc WINT_MIN}}
{{dsc inc|cpp/types/dsc WINT_MAX}}
{{dsc end}}

====注解====
这些常量中除了 {{c|CHAR_BIT}} 和 {{c|MB_LEN_MAX}}，都要求它们的类型匹配[[cpp/language/implicit conversion#整数提升|整数提升]]的结果，如同应用于它们描述的类型的对象：{{c|CHAR_MAX}} 可能拥有类型 {{c/core|int}} 或 {{c/core|unsigned int}}，但不会是 {{c/core|char}}。同样， 
{{c|USHRT_MAX}} 可能不为无符号类型：它的类型可能是 {{c/core|int}}。

{{lt|cpp/freestanding|独立}}实现可能缺少 typedef 名 {{lc|std::sig_atomic_t}} 和/或 [[cpp/string/wide#类型|{{tt|std::wint_t}}]]，此情况下对应地缺少 {{tt|SIG_ATOMIC_*}} 和/或 {{tt|WINT_*}} 宏。&lt;!-- C DR 248, LWG 2820 --&gt;

====示例====
{{example
|code=
#include &lt;climits&gt;
#include &lt;cstdint&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;

int main()
{
    constexpr int w = 14;
    std::cout &lt;&lt; std::left;
#   define COUT(x) std::cout &lt;&lt; std::setw(w) &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; '\n'

    COUT( CHAR_BIT       );
    COUT( MB_LEN_MAX     );
    COUT( CHAR_MIN       );
    COUT( CHAR_MAX       );
    COUT( SCHAR_MIN      );
    COUT( SHRT_MIN       );
    COUT( INT_MIN        );
    COUT( LONG_MIN       );
    COUT( LLONG_MIN      );
    COUT( SCHAR_MAX      );
    COUT( SHRT_MAX       );
    COUT( INT_MAX        );
    COUT( LONG_MAX       );
    COUT( LLONG_MAX      );
    COUT( UCHAR_MAX      );
    COUT( USHRT_MAX      );
    COUT( UINT_MAX       );
    COUT( ULONG_MAX      );
    COUT( ULLONG_MAX     );
    COUT( PTRDIFF_MIN    );
    COUT( PTRDIFF_MAX    );
    COUT( SIZE_MAX       );
    COUT( SIG_ATOMIC_MIN );
    COUT( SIG_ATOMIC_MAX );
    COUT( WCHAR_MIN      );
    COUT( WCHAR_MAX      );
    COUT( WINT_MIN       );
    COUT( WINT_MAX       );
}
|p=true
|output=
CHAR_BIT       = 8
MB_LEN_MAX     = 16
CHAR_MIN       = -128
CHAR_MAX       = 127
SCHAR_MIN      = -128
SHRT_MIN       = -32768
INT_MIN        = -2147483648
LONG_MIN       = -9223372036854775808
LLONG_MIN      = -9223372036854775808
SCHAR_MAX      = 127
SHRT_MAX       = 32767
INT_MAX        = 2147483647
LONG_MAX       = 9223372036854775807
LLONG_MAX      = 9223372036854775807
UCHAR_MAX      = 255
USHRT_MAX      = 65535
UINT_MAX       = 4294967295
ULONG_MAX      = 18446744073709551615
ULLONG_MAX     = 18446744073709551615
PTRDIFF_MIN    = -9223372036854775808
PTRDIFF_MAX    = 9223372036854775807
SIZE_MAX       = 18446744073709551615
SIG_ATOMIC_MIN = -2147483648
SIG_ATOMIC_MAX = 2147483647
WCHAR_MIN      = -2147483648
WCHAR_MAX      = 2147483647
WINT_MIN       = 0
WINT_MAX       = 4294967295
}}

===浮点数类型极限===
{{dsc begin}}
{{dsc header|cfloat}}
{{dsc inc|cpp/types/dsc FLT_RADIX}}
{{dsc inc|cpp/types/dsc DECIMAL_DIG}}
{{dsc inc|cpp/types/dsc fp_DECIMAL_DIG}}
{{dsc inc|cpp/types/dsc fp_MIN}}
{{dsc inc|cpp/types/dsc fp_TRUE_MIN}}
{{dsc inc|cpp/types/dsc fp_MAX}}
{{dsc inc|cpp/types/dsc fp_EPSILON}}
{{dsc inc|cpp/types/dsc fp_DIG}}
{{dsc inc|cpp/types/dsc fp_MANT_DIG}}
{{dsc inc|cpp/types/dsc fp_MIN_EXP}}
{{dsc inc|cpp/types/dsc fp_MIN_10_EXP}}
{{dsc inc|cpp/types/dsc fp_MAX_EXP}}
{{dsc inc|cpp/types/dsc fp_MAX_10_EXP}}
{{dsc inc|cpp/types/dsc FLT_ROUNDS}}
{{dsc inc|cpp/types/dsc FLT_EVAL_METHOD}}
{{dsc inc|cpp/types/dsc fp_HAS_SUBNORM}}
{{dsc end}}

====示例====
{{example
|code=
#include &lt;cfloat&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;

int main()
{
    int w = 16;
    std::cout &lt;&lt; std::left; // std::cout &lt;&lt; std::setprecision(53);
#   define COUT(x) std::cout &lt;&lt; std::setw(w) &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; '\n'

    COUT( FLT_RADIX        );
    COUT( DECIMAL_DIG      );
    COUT( FLT_DECIMAL_DIG  );
    COUT( DBL_DECIMAL_DIG  );
    COUT( LDBL_DECIMAL_DIG );
    COUT( FLT_MIN          );
    COUT( DBL_MIN          );
    COUT( LDBL_MIN         );
    COUT( FLT_TRUE_MIN     );
    COUT( DBL_TRUE_MIN     );
    COUT( LDBL_TRUE_MIN    );
    COUT( FLT_MAX          );
    COUT( DBL_MAX          );
    COUT( LDBL_MAX         );
    COUT( FLT_EPSILON      );
    COUT( DBL_EPSILON      );
    COUT( LDBL_EPSILON     );
    COUT( FLT_DIG          );
    COUT( DBL_DIG          );
    COUT( LDBL_DIG         );
    COUT( FLT_MANT_DIG     );
    COUT( DBL_MANT_DIG     );
    COUT( LDBL_MANT_DIG    );
    COUT( FLT_MIN_EXP      );
    COUT( DBL_MIN_EXP      );
    COUT( LDBL_MIN_EXP     );
    COUT( FLT_MIN_10_EXP   );
    COUT( DBL_MIN_10_EXP   );
    COUT( LDBL_MIN_10_EXP  );
    COUT( FLT_MAX_EXP      );
    COUT( DBL_MAX_EXP      );
    COUT( LDBL_MAX_EXP     );
    COUT( FLT_MAX_10_EXP   );
    COUT( DBL_MAX_10_EXP   );
    COUT( LDBL_MAX_10_EXP  );
    COUT( FLT_ROUNDS       );
    COUT( FLT_EVAL_METHOD  );
    COUT( FLT_HAS_SUBNORM  );
    COUT( DBL_HAS_SUBNORM  );
    COUT( LDBL_HAS_SUBNORM );
}
|p=true
|output=
FLT_RADIX        = 2
DECIMAL_DIG      = 21
FLT_DECIMAL_DIG  = 9
DBL_DECIMAL_DIG  = 17
LDBL_DECIMAL_DIG = 21
FLT_MIN          = 1.17549e-38
DBL_MIN          = 2.22507e-308
LDBL_MIN         = 3.3621e-4932
FLT_TRUE_MIN     = 1.4013e-45
DBL_TRUE_MIN     = 4.94066e-324
LDBL_TRUE_MIN    = 3.6452e-4951
FLT_MAX          = 3.40282e+38
DBL_MAX          = 1.79769e+308
LDBL_MAX         = 1.18973e+4932
FLT_EPSILON      = 1.19209e-07
DBL_EPSILON      = 2.22045e-16
LDBL_EPSILON     = 1.0842e-19
FLT_DIG          = 6
DBL_DIG          = 15
LDBL_DIG         = 18
FLT_MANT_DIG     = 24
DBL_MANT_DIG     = 53
LDBL_MANT_DIG    = 64
FLT_MIN_EXP      = -125
DBL_MIN_EXP      = -1021
LDBL_MIN_EXP     = -16381
FLT_MIN_10_EXP   = -37
DBL_MIN_10_EXP   = -307
LDBL_MIN_10_EXP  = -4931
FLT_MAX_EXP      = 128
DBL_MAX_EXP      = 1024
LDBL_MAX_EXP     = 16384
FLT_MAX_10_EXP   = 38
DBL_MAX_10_EXP   = 308
LDBL_MAX_10_EXP  = 4932
FLT_ROUNDS       = 1
FLT_EVAL_METHOD  = 0
FLT_HAS_SUBNORM  = 1
DBL_HAS_SUBNORM  = 1
LDBL_HAS_SUBNORM = 1
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=416|std=C++98|before=不明确 {{header|climits}} 中的宏是否保证具有与它们自身对应的类型（C++ 这里参考 C，而 C 不保证）|after=明确不保证}}
{{dr list end}}

===参阅===
* [[cpp/types/integer|定宽整数类型]]
* [[cpp/language/types|算术类型]]
* [[cpp/language/type|C++ 类型系统综述]]
* [[cpp/types|类型支持（基础类型、RTTI、类型特性）]]
{{dsc begin}}
{{dsc see c|c/types/limits|数值极限|nomono=true}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
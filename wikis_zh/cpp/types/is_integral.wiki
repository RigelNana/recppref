{{cpp/types/traits/is|1=is_integral
|description=
检查 {{tt|T}} 是否为[[cpp/language/type|整数类型]]。如果 {{tt|T}} 是类型 {{c/core|bool}}、{{c/core|char}}{{rev inl|since=c++20|、{{c/core|char8_t}}}}、{{c/core|char16_t}}、{{c/core|char32_t}}、{{c/core|wchar_t}}、{{c/core|short}}、{{c/core|int}}、{{c/core|long}}、{{c/core|long long}}，或任何实现定义的扩展整数类型，包含任何有符号、无符号及 cv 限定的变体，那么提供的成员常量 {{c|value}} 等于 {{c|true}}。否则，{{c|value}} 等于 {{c|false}}。
|inherit_desc={{tt|T}} 是整数类型
}}

===可能的实现===
{{eq fun|1=
// 注意：这个实现使用了 C++20 的设施
template&lt;class T&gt;
struct is_integral : std::bool_constant&lt;
    requires (T t, T* p, void (*f)(T)) // T* 形参排除引用类型
    {
        reinterpret_cast&lt;T&gt;(t); // 排除类类型
        f(0); // 排除枚举类型
        p + t; // 排除除整型以外所有尚未排除的类型
    }&gt; {};
}}

===示例===
{{example
|code=
#include &lt;type_traits&gt;

static_assert
(
    std::is_integral_v&lt;float&gt; == false &amp;&amp;
    std::is_integral_v&lt;int*&gt; == false &amp;&amp;
    std::is_integral_v&lt;int&gt; == true &amp;&amp;
    std::is_integral_v&lt;const int&gt; == true &amp;&amp;
    std::is_integral_v&lt;bool&gt; == true &amp;&amp;
    std::is_integral_v&lt;char&gt; == true
);

class A {};
static_assert(std::is_integral_v&lt;A&gt; == false);

struct B { int x:4; };
static_assert(std::is_integral_v&lt;B&gt; == false);
using BF = decltype(B::x); // 位域的类型
static_assert(std::is_integral_v&lt;BF&gt; == true);

enum E : int {};
static_assert(std::is_integral_v&lt;E&gt; == false);

template &lt;class T&gt;
constexpr T same(T i)
{
    static_assert(std::is_integral&lt;T&gt;::value, "必须为整数。");
    return i;
}
static_assert(same('"') == 042);

int main() {}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/concepts/dsc integral}}
{{dsc inc|cpp/types/numeric_limits/dsc is_integer}}
{{dsc inc|cpp/types/dsc is_floating_point}}
{{dsc inc|cpp/types/dsc is_arithmetic}}
{{dsc inc|cpp/types/dsc is_enum}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
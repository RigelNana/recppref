{{cpp/title|ptrdiff_t}}
{{cpp/types/navbar}}
{{dcl begin}}
{{dcl header|cstddef}}
{{dcl|
typedef /* 由实现定义 */ ptrdiff_t;
}}
{{dcl end}}

{{tt|std::ptrdiff_t}} 是两个指针相减结果的有符号整数类型。

{{rrev|since=c++11|
{{tt|std::ptrdiff_t}} 的位宽不小于 17。
}}

===注解===
{{tt|std::ptrdiff_t}} 被用于[[cpp/language/operator_arithmetic#加性运算符|指针算术]]及数组下标，如果允许出现负值。程序使用如 {{c/core|int}} 的其他类型，当索引超过 {{lc|INT_MAX}} 或依赖 32 位模算术时，可能在 64 位系统失败。

在使用 C++ 容器库时，迭代器的差的正确类型是成员 typedef {{c|difference_type}}，它通常与 {{tt|std::ptrdiff_t}} 相同。

只有指向同一数组元素的指针（包括指向数组结尾后一位置的指针）才可以相减。

若数组过大（大于 {{lc|PTRDIFF_MAX}} 个元素，而小于 {{lc|SIZE_MAX}} 字节），则两个指针的差可能无法以 {{tt|std::ptrdiff_t}} 表示，这两个指针相减的结果是未定义的。

对于短于 {{lc|PTRDIFF_MAX}} 的 char 数组，{{tt|std::ptrdiff_t}} 表现为 {{lc|std::size_t}} 的有符号对应物：它可以存储数组的大小，而且在多数平台上等同于 {{lc|std::intptr_t}}。

未指定 {{tt|std::ptrdiff_t}} 的声明是否在任何其他标准库头文件中可用。即使当标准要求使用 {{tt|std::ptrdiff_t}} 时，实现仍可避免引入此名字。

===可能的实现===
{{eq fun|1=
// C++11 起合法
using ptrdiff_t = decltype(static_cast&lt;int*&gt;(nullptr) - static_cast&lt;int*&gt;(nullptr));
}}

===示例===
{{example
|code=
#include &lt;cstddef&gt;
#include &lt;iostream&gt;

int main()
{
    const std::size_t N = 10;
    int* a = new int[N];
    int* end = a + N;
    for (std::ptrdiff_t i = N; i &gt; 0; --i)
        std::cout &lt;&lt; (*(end - i) = i) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    delete[] a;
}
|output=
10 9 8 7 6 5 4 3 2 1
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc size_t}}
{{dsc inc|cpp/types/dsc offsetof}}
{{dsc see c|c/types/ptrdiff_t}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
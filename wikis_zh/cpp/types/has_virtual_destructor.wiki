{{cpp/types/traits/is|1=has_virtual_destructor
|description= 
如果 {{tt|T}} 是拥有虚析构函数的类型，那么基特征为 {{lc|std::true_type}}。对于其它任意类型，基特征为 {{lc|std::false_type}}。

如果 {{tt|T}} 是不完整的非联合类类型，那么行为未定义。
|inherit_desc={{nbsp}}{{tt|T}} 拥有虚析构函数
}}

===注解===
如果类 {{tt|C}} 拥有公开虚析构函数，那么可以从它派生，且可以通过指向基类的指针安全地删除派生对象（[http://www.gotw.ca/publications/mill18.htm GotW #18]）。此时 {{c|std::is_polymorphic&lt;C&gt;::value}} 等于 {{c|true}}。

===示例===
{{example
|code=
#include &lt;type_traits&gt;

struct S {};
static_assert(!std::has_virtual_destructor_v&lt;S&gt;);

struct B { virtual ~B() {} };
static_assert(std::has_virtual_destructor_v&lt;B&gt;);

struct D : B { ~D() {} };
static_assert(std::has_virtual_destructor_v&lt;D&gt;);

int main()
{
    B* pd = new D;
    delete pd;
}
|output=
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2015|std=C++11|before=在 {{tt|T}} 是不完整的联合体类型时行为未定义|after=此时 {{tt|value}} 等于 {{c|true}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_destructible}}
{{dsc inc|cpp/types/dsc is_polymorphic}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
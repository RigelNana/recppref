{{cpp/title|numeric_limits}}
{{cpp/types/numeric_limits/navbar}}

{{ddcl|header=limits|
template&lt; class T &gt; class numeric_limits;
}}

{{tt|std::numeric_limits}} 类模板提供查询算术类型的各种属性的标准化方式（例如 {{c/core|int}} 类型的最大可能值是 {{c|std::numeric_limits&lt;int&gt;::max()}}）。

这些信息是通过 {{tt|std::numeric_limits}} 模板的特化提供的。{{lt|cpp/standard library|标准库}}为所有算术类型都制定可用的特化（以下只列出对无 cv 限定的算术类型的特化）：

{{dcl begin}}
{{dcl header|limits}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;bool&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;char&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;signed char&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;unsigned char&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;wchar_t&gt;;
}}
{{dcl|since=c++20|
template&lt;&gt; class numeric_limits&lt;char8_t&gt;;
}}
{{dcl|since=c++11|
template&lt;&gt; class numeric_limits&lt;char16_t&gt;;
}}
{{dcl|since=c++11|
template&lt;&gt; class numeric_limits&lt;char32_t&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;short&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;unsigned short&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;int&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;unsigned int&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;long&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;unsigned long&gt;;
}}
{{dcl|since=c++11|
template&lt;&gt; class numeric_limits&lt;long long&gt;;
}}
{{dcl|since=c++11|
template&lt;&gt; class numeric_limits&lt;unsigned long long&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;float&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;double&gt;;
}}
{{dcl|
template&lt;&gt; class numeric_limits&lt;long double&gt;;
}}
{{dcl end}}

{{tt|std::numeric_limits}} 针对有 cv 限定的类型 ''cv'' {{tt|T}} 的特化的每个成员的值都与对无 cv 限定的类型 {{tt|T}} 的特化的对应成员的值相同。例如 {{c|std::numeric_limits&lt;int&gt;::digits}} 等于 {{c|std::numeric_limits&lt;const int&gt;::digits}}。

算术类型的别名（例如 {{lc|std::size_t}} 或 {{lc|std::streamsize}}）也可以用 {{tt|std::numeric_limits}} 类型特征予以检测。

非算术标准类型，例如 {{c/core|std::complex&lt;T&gt;}} 或 {{lc|std::nullptr_t}}，没有特化。

{{rrev|since=c++20|
如果实现定义了任何[[cpp/iterator/weakly_incrementable#整数式类型|整数类类型]]，则必须也提供 {{tt|std::numeric_limits}} 针对它们的特化。}}

实现可以对实现特定的类型提供 {{c/core|std::numeric_limits}} 的特化：例如 GCC 提供 {{tt|std::numeric_limits&lt;__int128&gt;}}。非标准的库可以为库所提供的类型[[cpp/language/extending_std|添加特化]]，例如 [http://openexr.com/ OpenEXR] 为 16 位浮点数类型提供 {{tt|std::numeric_limits&lt;half&gt;}}。

===模板参数===
{{par begin}}
{{par|T|要获取数值属性的类型}}
{{par end}}

===成员常量===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc is_specialized}}
{{dsc inc|cpp/types/numeric_limits/dsc is_signed}}
{{dsc inc|cpp/types/numeric_limits/dsc is_integer}}
{{dsc inc|cpp/types/numeric_limits/dsc is_exact}}
{{dsc inc|cpp/types/numeric_limits/dsc has_infinity}}
{{dsc inc|cpp/types/numeric_limits/dsc has_quiet_NaN}}
{{dsc inc|cpp/types/numeric_limits/dsc has_signaling_NaN}}
{{dsc inc|cpp/types/numeric_limits/dsc has_denorm}}
{{dsc inc|cpp/types/numeric_limits/dsc has_denorm_loss}}
{{dsc inc|cpp/types/numeric_limits/dsc round_style}}
{{dsc inc|cpp/types/numeric_limits/dsc is_iec559}}
{{dsc inc|cpp/types/numeric_limits/dsc is_bounded}}
{{dsc inc|cpp/types/numeric_limits/dsc is_modulo}}
{{dsc inc|cpp/types/numeric_limits/dsc digits}}
{{dsc inc|cpp/types/numeric_limits/dsc digits10}}
{{dsc inc|cpp/types/numeric_limits/dsc max_digits10}}
{{dsc inc|cpp/types/numeric_limits/dsc radix}}
{{dsc inc|cpp/types/numeric_limits/dsc min_exponent}}
{{dsc inc|cpp/types/numeric_limits/dsc min_exponent10}}
{{dsc inc|cpp/types/numeric_limits/dsc max_exponent}}
{{dsc inc|cpp/types/numeric_limits/dsc max_exponent10}}
{{dsc inc|cpp/types/numeric_limits/dsc traps}}
{{dsc inc|cpp/types/numeric_limits/dsc tinyness_before}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc min}}
{{dsc inc|cpp/types/numeric_limits/dsc lowest}}
{{dsc inc|cpp/types/numeric_limits/dsc max}}
{{dsc inc|cpp/types/numeric_limits/dsc epsilon}}
{{dsc inc|cpp/types/numeric_limits/dsc round_error}}
{{dsc inc|cpp/types/numeric_limits/dsc infinity}}
{{dsc inc|cpp/types/numeric_limits/dsc quiet_NaN}}
{{dsc inc|cpp/types/numeric_limits/dsc signaling_NaN}}
{{dsc inc|cpp/types/numeric_limits/dsc denorm_min}}
{{dsc end}}

===辅助类===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc float_round_style}}
{{dsc inc|cpp/types/numeric_limits/dsc float_denorm_style}}
{{dsc end}}

===与 C 库宏常量的关系===
{| class="wikitable" style="font-size:85%; white-space: nowrap;"
|-
! rowspan=2 | 特化&lt;br&gt;{{tt|std::numeric_limits&lt;T&gt;}}&lt;br&gt;其中 {{tt|T}} 是
! colspan=11 | 成员
|-
&lt;!-- --&gt;
! {{tt|min()}}
! {{tt|lowest()}}&lt;br&gt;{{mark c++11}}
! {{tt|max()}}
! {{tt|radix}}
|-
|-
| {{c/core|bool}}
| {{c|false}}
| {{c|false}}
| {{c|true}}
| {{c|2}}
|-
| {{c/core|char}}
| {{lc|CHAR_MIN}}
| {{lc|CHAR_MIN}}
| {{lc|CHAR_MAX}} 
| {{c|2}}
|-
| {{c/core|signed char}}
| {{lc|SCHAR_MIN}}
| {{lc|SCHAR_MIN}}
| {{lc|SCHAR_MAX}}
| {{c|2}}
|-
| {{c/core|unsigned char}}
| {{c|0}}
| {{c|0}}
| {{lc|UCHAR_MAX}}
| {{c|2}}
|-
| {{c/core|wchar_t}}
| {{lc|WCHAR_MIN}}
| {{lc|WCHAR_MIN}}
| {{lc|WCHAR_MAX}}
| {{c|2}}
|-
| {{c/core|char8_t}}
| {{c|0}}
| {{c|0}}
| {{lc|UCHAR_MAX}}
| {{c|2}}
|-
| {{c/core|char16_t}}
| {{c|0}}
| {{c|0}}
| {{lc|UINT_LEAST16_MAX}}
| {{c|2}}
|-
| {{c/core|char32_t}}
| {{c|0}}
| {{c|0}}
| {{lc|UINT_LEAST32_MAX}}
| {{c|2}}
|-
| {{c/core|short}}
| rowspan=2 | {{lc|SHRT_MIN}}
| rowspan=2 | {{lc|SHRT_MIN}}
| rowspan=2 | {{lc|SHRT_MAX}}
| rowspan=2 | {{c|2}}
|-
| {{c/core|signed short}}
&lt;!-- --&gt;
&lt;!-- --&gt;
&lt;!-- --&gt;
&lt;!-- --&gt;
|-
| {{c/core|unsigned short}}
| {{c|0}}
| {{c|0}}
| {{lc|USHRT_MAX}}
| {{c|2}}
|-
| {{c/core|int}}
| rowspan=2 | {{lc|INT_MIN}}
| rowspan=2 | {{lc|INT_MIN}}
| rowspan=2 | {{lc|INT_MAX}}
| rowspan=2 | {{c|2}}
|-
| {{c/core|signed int}}
&lt;!-- --&gt;
&lt;!-- --&gt;
&lt;!-- --&gt;
&lt;!-- --&gt;
|-
| {{c/core|unsigned int}}
| {{c|0}}
| {{c|0}}
| {{lc|UINT_MAX}}
| {{c|2}}
|-
| {{c/core|long}}
| rowspan=2 | {{lc|LONG_MIN}}
| rowspan=2 | {{lc|LONG_MIN}}
| rowspan=2 | {{lc|LONG_MAX}}
| rowspan=2 | {{c|2}}
|-
| {{c/core|signed long}}
&lt;!-- --&gt;
&lt;!-- --&gt;
&lt;!-- --&gt;
&lt;!-- --&gt;
|-
| {{c/core|unsigned long}}
| {{c|0}}
| {{c|0}}
| {{lc|ULONG_MAX}}
| {{c|2}}
|-
| {{c/core|long long}}
| rowspan=2 | {{lc|LLONG_MIN}}
| rowspan=2 | {{lc|LLONG_MIN}}
| rowspan=2 | {{lc|LLONG_MAX}}
| rowspan=2 | {{c|2}}
|-
| {{c/core|signed long long}}
&lt;!-- --&gt;
&lt;!-- --&gt;
&lt;!-- --&gt;
&lt;!-- --&gt;
|-
| {{c/core|unsigned long long}}
| {{c|0}}
| {{c|0}}
| {{lc|ULLONG_MAX}}
| {{c|2}}
|}

{| class="wikitable" style="font-size:85%; white-space: nowrap;"
|-
! rowspan=2 | 特化&lt;br&gt;{{tt|std::numeric_limits&lt;T&gt;}}&lt;br&gt;其中 {{tt|T}} 是
! colspan=11 | 成员
|-
&lt;!-- --&gt;
! {{tt|denorm_min()}}
! {{tt|min()}}
! {{tt|lowest()}}&lt;br&gt;{{mark c++11}}
! {{tt|max()}}
! {{tt|epsilon()}}
! {{tt|digits}}
! {{tt|digits10}}
|-
|-
| {{c/core|float}}
| {{lc|FLT_TRUE_MIN}}
| {{lc|FLT_MIN}}
| {{c|-FLT_MAX}}
| {{lc|FLT_MAX}}
| {{lc|FLT_EPSILON}}
| {{lc|FLT_MANT_DIG}}
| {{lc|FLT_DIG}}
|-
| {{c/core|double}}
| {{lc|DBL_TRUE_MIN}}
| {{lc|DBL_MIN}}
| {{c|-DBL_MAX}}
| {{lc|DBL_MAX}}
| {{lc|DBL_EPSILON}}
| {{lc|DBL_MANT_DIG}}
| {{lc|DBL_DIG}}
|-
| {{c/core|long double}}
| {{lc|LDBL_TRUE_MIN}}
| {{lc|LDBL_MIN}}
| {{c|-LDBL_MAX}}
| {{lc|LDBL_MAX}}
| {{lc|LDBL_EPSILON}}
| {{lc|LDBL_MANT_DIG}}
| {{lc|LDBL_DIG}}
|}

{| class="wikitable" style="font-size:85%; white-space: nowrap;"
|-
! rowspan=2 | 特化&lt;br&gt;{{tt|std::numeric_limits&lt;T&gt;}}&lt;br&gt;其中 {{tt|T}} 是
! colspan=11 | 成员（续）
|-
&lt;!-- --&gt;
! {{tt|min_exponent}}
! {{tt|min_exponent10}}
! {{tt|max_exponent}}
! {{tt|max_exponent10}}
! {{tt|radix}}
|-
|-
| {{c/core|float}}
| {{lc|FLT_MIN_EXP}}
| {{lc|FLT_MIN_10_EXP}}
| {{lc|FLT_MAX_EXP}}
| {{lc|FLT_MAX_10_EXP}}
| {{lc|FLT_RADIX}}
|-
| {{c/core|double}}
| {{lc|DBL_MIN_EXP}}
| {{lc|DBL_MIN_10_EXP}}
| {{lc|DBL_MAX_EXP}}
| {{lc|DBL_MAX_10_EXP}}
| {{lc|FLT_RADIX}}
|-
| {{c/core|long double}}
| {{lc|LDBL_MIN_EXP}}
| {{lc|LDBL_MIN_10_EXP}}
| {{lc|LDBL_MAX_EXP}}
| {{lc|LDBL_MAX_10_EXP}}
| {{lc|FLT_RADIX}}
|}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;limits&gt;

int main() 
{
    std::cout &lt;&lt; "type\t│ lowest()\t│ min()\t\t│ max()\n"
              &lt;&lt; "bool\t│ "
              &lt;&lt; std::numeric_limits&lt;bool&gt;::lowest() &lt;&lt; "\t\t│ "
              &lt;&lt; std::numeric_limits&lt;bool&gt;::min() &lt;&lt; "\t\t│ "
              &lt;&lt; std::numeric_limits&lt;bool&gt;::max() &lt;&lt; '\n'
              &lt;&lt; "uchar\t│ "
              &lt;&lt; +std::numeric_limits&lt;unsigned char&gt;::lowest() &lt;&lt; "\t\t│ "
              &lt;&lt; +std::numeric_limits&lt;unsigned char&gt;::min() &lt;&lt; "\t\t│ "
              &lt;&lt; +std::numeric_limits&lt;unsigned char&gt;::max() &lt;&lt; '\n'
              &lt;&lt; "int\t│ "
              &lt;&lt; std::numeric_limits&lt;int&gt;::lowest() &lt;&lt; "\t│ "
              &lt;&lt; std::numeric_limits&lt;int&gt;::min() &lt;&lt; "\t│ "
              &lt;&lt; std::numeric_limits&lt;int&gt;::max() &lt;&lt; '\n'
              &lt;&lt; "float\t│ "
              &lt;&lt; std::numeric_limits&lt;float&gt;::lowest() &lt;&lt; "\t│ "
              &lt;&lt; std::numeric_limits&lt;float&gt;::min() &lt;&lt; "\t│ "
              &lt;&lt; std::numeric_limits&lt;float&gt;::max() &lt;&lt; '\n'
              &lt;&lt; "double\t│ "
              &lt;&lt; std::numeric_limits&lt;double&gt;::lowest() &lt;&lt; "\t│ "
              &lt;&lt; std::numeric_limits&lt;double&gt;::min() &lt;&lt; "\t│ "
              &lt;&lt; std::numeric_limits&lt;double&gt;::max() &lt;&lt; '\n';
}
|output=
type	│ lowest()	│ min()		│ max()
bool	│ 0		│ 0		│ 1
uchar	│ 0		│ 0		│ 255
int	│ -2147483648	│ -2147483648	│ 2147483647
float	│ -3.40282e+38	│ 1.17549e-38	│ 3.40282e+38
double	│ -1.79769e+308	│ 2.22507e-308	│ 1.79769e+308
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=201|std=C++98|before=需要为所有基础类型提供特化|after=仅限算术类型}}
{{dr list item|wg=lwg|dr=559|std=C++98|before=不明确 {{tt|std::numeric_limits}} 对有 cv 限定类型的特化与对无 cv 限定的对应类型的特化是否行为一致|after=行为一致}}
{{dr list end}}

===参阅===
* {{rlp|integer|定宽整数类型}}
* [[cpp/language/types|算术类型]]
* [[cpp/language/type|C++ 类型系统概览]]
* {{rlp|/|类型支持（基础类型、RTTI、类型特征）}}
* {{rlp|climits|C 数值极限接口}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
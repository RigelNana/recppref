{{cpp/types/traits/is|1=is_trivially_copyable
|description=
如果 {{tt|T}} 是{{named req|TriviallyCopyable}}类型，那么提供的成员常量 {{tt|value}} 等于 {{c|true}}。对于其它任何类型，{{tt|value}} 等于 {{c|false}}。

如果 {{c/core|std::remove_all_extents_t&lt;T&gt;}} 是不完整类型且并非（可有 cv 限定的）{{c/core|void}} ，那么行为未定义。
|inherit_desc={{tt|T}} 是可平凡复制类型
}}

===注解===
并非潜在重叠子对象的可平凡复制类型的对象，是仅有的能以 {{lc|std::memcpy}} 安全复制或以 {{l2tf|cpp/io/basic_ostream/write||std::ofstream}} / {{l2tf|cpp/io/basic_istream/read||std::ifstream}} 序列化自/到二进制文件的 C++ 对象。

===示例===
{{example
|code=
#include &lt;type_traits&gt;

struct A { int m; };
static_assert(std::is_trivially_copyable_v&lt;A&gt; == true);

struct B { B(B const&amp;) {} };
static_assert(std::is_trivially_copyable_v&lt;B&gt; == false);

struct C { virtual void foo(); };
static_assert(std::is_trivially_copyable_v&lt;C&gt; == false);

struct D
{
    int m;
    
    D(D const&amp;) = default; // -&gt; 可平凡复制
    D(int x) : m(x + 1) {}
};
static_assert(std::is_trivially_copyable_v&lt;D&gt; == true);

int main() {}
|output=
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2015|std=C++11|before={{tt|T}} 可以是不完整类类型的未知边界数组|after=此时行为未定义}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_trivial}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
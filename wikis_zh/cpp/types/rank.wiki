{{cpp/title|rank}}
{{cpp/meta/navbar}}
{{ddcl|header=type_traits|since=c++11|
template&lt; class T &gt;
struct rank;
}}

若 {{tt|T}} 是数组类型，则提供的成员常量 {{c|value}} 等于该数组的维数。对于其他任何类型，{{c|value}} 等于 {{c|0}}。

{{cpp/types/nospec|v}}

=== 辅助变量模板 ===
{{ddcl|since=c++17|1=
template&lt; class T &gt;
constexpr std::size_t rank_v = rank&lt;T&gt;::value;
}}

{{cpp/types/integral_constant/inherit2|{{tt|T}} 的维数或者零|std::size_t}}

===可能的实现===
{{eq fun
|1=
template&lt;class T&gt;
struct rank : public std::integral_constant&lt;std::size_t, 0&gt; {};

template&lt;class T&gt;
struct rank&lt;T[]&gt; : public std::integral_constant&lt;std::size_t, rank&lt;T&gt;::value + 1&gt; {};

template&lt;class T, std::size_t N&gt;
struct rank&lt;T[N]&gt; : public std::integral_constant&lt;std::size_t, rank&lt;T&gt;::value + 1&gt; {};
}}

===示例===
{{example
|code=
#include &lt;type_traits&gt;

static_assert(std::rank&lt;int&gt;{} == 0);
static_assert(std::rank&lt;int[5]&gt;{} == 1);
static_assert(std::rank&lt;int[5][5]&gt;{} == 2);
static_assert(std::rank&lt;int[][5][5]&gt;{} == 3);

int main()
{
    [[maybe_unused]] int ary[][3] = {&lt;!----&gt;{1, 2, 3}&lt;!----&gt;};

    // 引用类型（如 ary[0]，即 int(&amp;)[3]）的秩为 0：
    static_assert(std::rank_v&lt;decltype(ary[0])&gt; == 0);
    static_assert(std::is_same_v&lt;decltype(ary[0]), int(&amp;)[3]&gt;);

    // 解决方案是移除引用类型。
    static_assert(std::rank_v&lt;std::remove_cvref_t&lt;decltype(ary[0])&gt;&gt; == 1);
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_array}}
{{dsc inc|cpp/types/dsc extent}}
{{dsc inc|cpp/types/dsc remove_extent}}
{{dsc inc|cpp/types/dsc remove_all_extents}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
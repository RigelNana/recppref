{{cpp/types/traits/is|1=is_bounded_array
|std=c++20
|description=
检查 {{tt|T}} 是否为边界已知的数组类型。如果 {{tt|T}} 是边界已知的数组类型，那么提供的成员常量 {{tt|value}} 等于 {{c|true}}。否则，{{tt|value}} 等于 {{c|false}}。
|inherit_desc={{tt|T}} 是边界已知的数组类型
}}

===可能的实现===
{{eq fun
|1=
template&lt;class T&gt;
struct is_bounded_array : std::false_type {};

template&lt;class T, std::size_t N&gt;
struct is_bounded_array&lt;T[N]&gt; : std::true_type {};
}}

===注解===
{{feature test macro|__cpp_lib_bounded_array_traits|{{tt|std::is_bounded_array}}, {{lc|std::is_unbounded_array}}|value=201902L|std=C++20}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

#define OUT(...) std::cout &lt;&lt; #__VA_ARGS__ &lt;&lt; " : " &lt;&lt; __VA_ARGS__ &lt;&lt; '\n'

class A {};

int main() 
{
    std::cout &lt;&lt; std::boolalpha;
    OUT(std::is_bounded_array_v&lt;A&gt;);
    OUT(std::is_bounded_array_v&lt;A[]&gt;);
    OUT(std::is_bounded_array_v&lt;A[3]&gt;);
    OUT(std::is_bounded_array_v&lt;float&gt;);
    OUT(std::is_bounded_array_v&lt;int&gt;);
    OUT(std::is_bounded_array_v&lt;int[]&gt;);
    OUT(std::is_bounded_array_v&lt;int[3]&gt;);
}
|output=
std::is_bounded_array_v&lt;A&gt; : false
std::is_bounded_array_v&lt;A[]&gt; : false
std::is_bounded_array_v&lt;A[3]&gt; : true
std::is_bounded_array_v&lt;float&gt; : false
std::is_bounded_array_v&lt;int&gt; : false
std::is_bounded_array_v&lt;int[]&gt; : false
std::is_bounded_array_v&lt;int[3]&gt; : true
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_array}}
{{dsc inc|cpp/types/dsc is_unbounded_array}}
{{dsc inc|cpp/types/dsc extent}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
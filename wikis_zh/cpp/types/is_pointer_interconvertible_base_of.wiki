{{cpp/title|is_pointer_interconvertible_base_of}}
{{cpp/meta/navbar}}
{{ddcl|header=type_traits|since=c++20|1=
template&lt; class Base, class Derived &gt;
struct is_pointer_interconvertible_base_of;
}}

如果 {{tt|Derived}} 无歧义地派生自 {{tt|Base}} 且每个 {{tt|Derived}} 对象均与其 {{tt|Base}} 子对象[[cpp/language/static_cast#指针可以互相转换|指针可以互相转换]]，或它们均为相同的非联合类类型（两种情况下都忽略 cv 限定），那么提供的成员常量 {{tt|value}} 等于 {{c|true}}。否则，{{tt|value}} 等于 {{c|false}}。

如果 {{tt|Base}} 与 {{tt|Derived}} 均为非联合类类型且不是同一类型（忽略 cv 限定），那么 {{tt|Derived}} 应当为[[cpp/language/type#不完整类型|完整类型]]；否则行为未定义。

{{cpp/types/nospec|pv}}

===辅助变量模板===
{{ddcl|since=c++20|1=
template&lt; class Base, class Derived &gt;
inline constexpr bool is_pointer_interconvertible_base_of_v =
    is_pointer_interconvertible_base_of&lt;Base, Derived&gt;::value;
}}
{{cpp/types/integral_constant/inherit|{{tt|Derived}} 无歧义地派生自 {{tt|Base}} 且每个 {{tt|Derived}} 对象均与其 {{tt|Base}} 子对象[[cpp/language/static_cast#指针可以互相转换|指针可以互相转换]]，或它们均为相同的非联合类类型（两种情况下都忽略 cv 限定）}}

===注解===
即使 {{tt|T}} 为 {{tt|U}} 的私有或受保护基类，{{c|std::is_pointer_interconvertible_base_of_v&lt;T, U&gt;}} 亦可以为 {{c|true}}。

令
* {{tt|U}} 为完整对象类型，
* {{tt|T}} 为 cv 限定不少于 {{tt|U}} 的完整对象类型，
* {{tt|u}} 为任何合法的 {{tt|U}} 左值，
若 {{c|std::is_pointer_interconvertible_base_of_v&lt;T, U&gt;}} 为 {{c|true}}，则 {{c|reinterpret_cast&lt;T&amp;&gt;(u)}} 始终有良定义的结果。

若 {{tt|T}} 与 {{tt|U}} 不是同一类型（忽略 cv 限定）且 {{tt|T}} 为 {{tt|U}} 的指针可以互相转换基类，则 {{c|std::is_standard_layout_v&lt;T&gt;}} 与 {{c|std::is_standard_layout_v&lt;U&gt;}} 均为 {{c|true}}。

若 {{tt|T}} 为标准布局类类型，则 {{tt|T}} 的所有基类（若存在）均为 {{tt|T}} 的指针可以互相转换基类。

{{feature test macro|__cpp_lib_is_pointer_interconvertible|value=201907L|std=C++20|指针可以互相换性特征：
* {{tt|std::is_pointer_interconvertible_base_of}}
* {{lc|std::is_pointer_interconvertible_with_class}}
}}

===示例===
{{example
|code=
#include &lt;type_traits&gt;

struct Foo {};

struct Bar {};

class Baz : Foo, public Bar { int x; };

class NonStdLayout : public Baz { int y; };

static_assert(std::is_pointer_interconvertible_base_of_v&lt;Bar, Baz&gt;);
static_assert(std::is_pointer_interconvertible_base_of_v&lt;Foo, Baz&gt;);
static_assert(not std::is_pointer_interconvertible_base_of_v&lt;Baz, NonStdLayout&gt;);
static_assert(std::is_pointer_interconvertible_base_of_v&lt;NonStdLayout, NonStdLayout&gt;);

int main() {}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_base_of}}
{{dsc inc|cpp/types/dsc is_empty}}
{{dsc inc|cpp/types/dsc is_standard_layout}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
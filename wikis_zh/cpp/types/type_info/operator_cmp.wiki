{{cpp/types/type_info/title|operator{{==}}|operator!{{=}}}}
{{cpp/types/type_info/navbar}}
{{dcl begin}}
{{dcla|anchor=no|num=1|noexcept=c++11|constexpr=c++23|1=
bool operator==( const type_info&amp; rhs ) const;
}}
{{dcla|anchor=no|num=2|noexcept=c++11|until=c++20|1=
bool operator!=( const type_info&amp; rhs ) const;
}}
{{dcl end}}

检查对象是否指代相同类型。

{{rrev|since=c++20|
{{cpp/note synthesized eq}}
}}

===参数===
{{par begin}}
{{par|rhs|要比较的另一个类型信息对象}}
{{par end}} 

===返回值===
若比较关系成立则为 {{c|true}}，否则为 {{c|false}}。

===注解===
{{feature test macro|__cpp_lib_constexpr_typeinfo|value=202106L|std=C++23|{{tt|1=std::type_info::operator==}} 的 constexpr}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;typeinfo&gt;
#include &lt;utility&gt;

class person
{
public:
    explicit person(std::string n) : name_(std::move(n)) {}
    virtual const std::string&amp; name() const { return name_; }

private:
    std::string name_;
};

class employee : public person
{
public:
    employee(std::string n, std::string p)
        : person(std::move(n)), profession_(std::move(p)) {}

    const std::string&amp; profession() const { return profession_; }

private:
    std::string profession_;
};

void print_info(const person&amp; p)
{
    if (typeid(person) == typeid(p))
        std::cout &lt;&lt; p.name() &lt;&lt; " 不是雇员\n";
    else if (typeid(employee) == typeid(p))
    {
        std::cout &lt;&lt; p.name() &lt;&lt; " 是雇员，";
        auto&amp; emp = dynamic_cast&lt;const employee&amp;&gt;(p);
        std::cout &lt;&lt; "工作于 " &lt;&lt; emp.profession() &lt;&lt; '\n';
    }
}

int main()
{
    print_info(employee{"Paul","经济学"});
    print_info(person{"Kate"});

#if __cpp_lib_constexpr_typeinfo
    if constexpr (typeid(employee) != typeid(person)) // C++23
        std::cout &lt;&lt; "class `employee` != class `person`\n";
#endif
}
|p=true
|output=
Paul 是雇员，工作于 经济学
Kate 不是雇员
class `employee` != class `person`
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/type_info/dsc before}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/types/type_info/title|name}}
{{cpp/types/type_info/navbar}}
{{dcl begin}}
{{dcla|anchor=no|noexcept=c++11|1=
const char* name() const;
}}
{{dcl end}}

返回实现定义的，含有类型名称的空终止字符串。不给出保证，尤其是返回的字符串对于数个类型可以相同，而且在同一程序的不同调用之间可以改变。

===参数===
（无）

===返回值===
含有类型名称的{{lt|cpp/string/byte|空终止字符串}}。

===注解===
未指定所返回指针所指向的数组的生存期，但实践中只要给定类型的 RTTI 数据结构存在，它就得到保持，这拥有应用程序生存期，除非从动态库加载它（可被卸载）。

一些实现（如 MSVC、IBM、Oracle）生成人类可读的类型名。其他的，最值得注意的是 gcc 与 clang，返回重整名，这是由 [https://itanium-cxx-abi.github.io/cxx-abi/abi.html#typeid Itanium C++ ABI] 指定的。重整名可以用实现指定的 API 转换到人类可读的形式，例如直接用 [https://gcc.gnu.org/onlinedocs/libstdc++/manual/ext_demangling.html abi::__cxa_demangle] 或通过 [http://www.boost.org/doc/libs/release/libs/core/doc/html/core/demangle.html boost::core::demangle]。它亦可通过命令行工具 {{tt|c++filt -t}} 输送往管道。

===示例===
{{example
|code=
#include &lt;boost/core/demangle.hpp&gt;
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;typeinfo&gt;

struct Base { virtual ~Base() = default; };
struct Derived : Base {};

int main()
{
    Base b1;
    Derived d1;

    const Base* pb = &amp;b1;
    std::cout &lt;&lt; typeid(*pb).name() &lt;&lt; '\n';
    pb = &amp;d1;
    std::cout &lt;&lt; typeid(*pb).name() &lt;&lt; '\n';

    std::string real_name = boost::core::demangle(typeid(pb).name());
    std::cout &lt;&lt; typeid(pb).name() &lt;&lt; " =&gt; " &lt;&lt; real_name &lt;&lt; '\n';

    std::cout &lt;&lt; "c++filt =&gt; " &lt;&lt; std::flush;
    std::string s = typeid(pb).name();
    std::system(("c++filt -t " + s).data());
}
|p=true
|output=
// GCC/Clang:
4Base
7Derived
PK4Base =&gt; Base const*
c++filt =&gt; Base const*

// MSVC:
struct Base
struct Derived
struct Base const * __ptr64 =&gt; struct Base const * __ptr64
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/type_info/dsc hash_code}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
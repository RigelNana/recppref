{{cpp/types/traits/is|1=is_fundamental
|description=
如果 {{tt|T}} 为[[cpp/language/types|基础类型]]（即算术类型、{{c/core|void}} 或 {{c/core|nullptr_t}}），那么提供的成员常量 {{c|value}} 等于 {{c|true}}。对于其它任何类型，{{c|value}} 等于 {{c|false}}。
|inherit_desc={{tt|T}} 为基础类型
}}

===可能的实现===
{{eq fun
|1=
template&lt;class T&gt;
struct is_fundamental
    : std::integral_constant&lt;
        bool,
        std::is_arithmetic&lt;T&gt;::value {{!!}}
        std::is_void&lt;T&gt;::value {{!!}}
        std::is_same&lt;std::nullptr_t, typename std::remove_cv&lt;T&gt;::type&gt;::value
        // C++14 中还可以改为使用 'std::is_null_pointer&lt;T&gt;::value'
&gt; {};
}}

===示例===
{{example
|code=
#include &lt;type_traits&gt;

static_assert(std::is_fundamental_v&lt;int&gt; == true);
static_assert(std::is_fundamental_v&lt;int&amp;&gt; == false);
static_assert(std::is_fundamental_v&lt;int*&gt; == false);
static_assert(std::is_fundamental_v&lt;void&gt; == true);
static_assert(std::is_fundamental_v&lt;void*&gt; == false);
static_assert(std::is_fundamental_v&lt;float&gt; == true);
static_assert(std::is_fundamental_v&lt;float&amp;&gt; == false);
static_assert(std::is_fundamental_v&lt;float*&gt; == false);
static_assert(std::is_fundamental_v&lt;std::nullptr_t&gt; == true);
static_assert(std::is_fundamental_v&lt;std::is_fundamental&lt;int&gt;&gt; == false);

class A {};
static_assert(std::is_fundamental_v&lt;A&gt; == false);
static_assert(std::is_fundamental_v&lt;std::is_fundamental&lt;A&gt;::value_type&gt;);

int main() {}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_compound}}
{{dsc inc|cpp/types/dsc is_arithmetic}}
{{dsc inc|cpp/types/dsc is_void}}
{{dsc inc|cpp/types/dsc is_null_pointer}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/types/traits/is|1=is_standard_layout
|description=
如果 {{tt|T}} 是[[cpp/named req/StandardLayoutType|标准布局类型]]，那么提供的成员常量 {{tt|value}} 等于 {{c|true}}。对于其它任何类型，{{tt|value}} 等于 {{c|false}}。

如果 {{c/core|std::remove_all_extents_t&lt;T&gt;}} 是不完整类型且不是（可有 cv 限定的）{{c/core|void}}，那么行为未定义。
|inherit_desc={{tt|T}} 是标准布局类型
}}

===注解===
指向标准布局类的指针能（通过 {{c/core|reinterpret_cast}}）转换成指向其首个非静态数据成员的指针，反之亦然。

如果标准布局联合体保有多个标准布局结构体，那么可以查看它们的公共前导部分。

宏 {{lc|offsetof}} 只保证能用于标准布局类。

===示例===
{{example
|code=
#include &lt;type_traits&gt;

struct A { int m; };
static_assert(std::is_standard_layout_v&lt;A&gt; == true);

class B: public A { int m; };
static_assert(std::is_standard_layout_v&lt;B&gt; == false);

struct C { virtual void foo(); };
static_assert(std::is_standard_layout_v&lt;C&gt; == false);

int main() {}
|output=
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2015|std=C++11|before={{tt|T}} 可以是不完整类类型的未知边界数组|after=此时行为未定义}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_trivially_copyable}}
{{dsc inc|cpp/types/dsc is_pod}}
{{dsc inc|cpp/types/dsc offsetof}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
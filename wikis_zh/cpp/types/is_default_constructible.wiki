{{cpp/title|is_default_constructible|is_trivially_default_constructible|is_nothrow_default_constructible}}
{{cpp/meta/navbar}}
{{dcl begin}}
{{dcl header|type_traits}}
{{dcl|since=c++11|num=1|
template&lt; class T &gt;
struct is_default_constructible;
}}
{{dcl|since=c++11|num=2|
template&lt; class T &gt;
struct is_trivially_default_constructible;
}}
{{dcl|since=c++11|num=3|
template&lt; class T &gt;
struct is_nothrow_default_constructible;
}}
{{dcl end}}

@1@ 提供的成员常量 {{tt|value}} 等于 {{c|std::is_constructible&lt;T&gt;::value}}。

@2@ 提供的成员常量 {{tt|value}} 等于 {{c|std::is_trivially_constructible&lt;T&gt;::value}}。

@3@ 提供的成员常量 {{tt|value}} 等于 {{c|std::is_nothrow_constructible&lt;T&gt;::value}}。

{{cpp/types/cvaub}}

{{cpp/types/nospec|any}}

=== 辅助变量模板 ===
{{dcl begin}}

{{dcl|since=c++17|1=
template&lt; class T &gt;
inline constexpr bool is_default_constructible_v =
    is_default_constructible&lt;T&gt;::value;
}}

{{dcl|since=c++17|1=
template&lt; class T &gt;
inline constexpr bool is_trivially_default_constructible_v =
    is_trivially_default_constructible&lt;T&gt;::value;
}}

{{dcl|since=c++17|1=
template&lt; class T &gt;
inline constexpr bool is_nothrow_default_constructible_v =
    is_nothrow_default_constructible&lt;T&gt;::value;
}}
{{dcl end}}

{{cpp/types/integral_constant/inherit|{{tt|T}} 可默认构造}}

===可能的实现===
{{eq fun
|1=
template&lt;class T&gt;
struct is_default_constructible : std::is_constructible&lt;T&gt; {};

template&lt;class T&gt;
struct is_trivially_default_constructible : std::is_trivially_constructible&lt;T&gt; {};

template&lt;class T&gt;
struct is_nothrow_default_constructible : std::is_nothrow_constructible&lt;T&gt; {};
}}

===注解===
多数实现中，{{tt|is_nothrow_default_constructible}} 也检查析构函数是否抛出，因为它相当于 {{c|noexcept(T())}}。同样的情况适用于 {{tt|is_trivially_default_constructible}}，它在这些实现中也要求析构函数为平凡：[https://gcc.gnu.org/bugzilla/show_bug.cgi?id=51452 GCC 漏洞 51452]、{{lwg|2116}}。 

{{c|std::is_default_constructible&lt;T&gt;}} 并不测试 {{c|T x;}} 是否可编译；它尝试以空实参列表进行[[cpp/language/direct_initialization|直接初始化]]（见 {{lc|std::is_constructible}}）。因此，{{c|std::is_default_constructible_v&lt;const int&gt;}} 和 {{c|std::is_default_constructible_v&lt;const int[10]&gt;}} 都为 {{c|true}}。

===示例===
{{example
|code=
#include &lt;string&gt;
#include &lt;type_traits&gt;

struct S1
{
    std::string str; // 成员拥有非平凡默认构造函数
};
static_assert(std::is_default_constructible_v&lt;S1&gt; == true);
static_assert(std::is_trivially_default_constructible_v&lt;S1&gt; == false);

struct S2
{
    int n;
    S2() = default; // 平凡且不抛出
};
static_assert(std::is_trivially_default_constructible_v&lt;S2&gt; == true);
static_assert(std::is_nothrow_default_constructible_v&lt;S2&gt; == true);

int main() {}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_constructible}}
{{dsc inc|cpp/types/dsc is_copy_constructible}}
{{dsc inc|cpp/types/dsc is_move_constructible}}
{{dsc inc|cpp/concepts/dsc default_initializable}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
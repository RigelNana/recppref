{{title|offsetof}}
{{cpp/types/navbar}}
{{dcl begin}}
{{dcl header|cstddef}}
{{dcl|
#define offsetof(type, member) /* 由实现定义 */
}}
{{dcl end}}

宏 {{lc|offsetof}} 会展开成 {{lc|std::size_t}} 类型的整数常量表达式，它的值是从指定类型对象的开始到其指定子对象的字节数偏移，其中包括可能有的[[cpp/language/object#对象表示与值表示|填充位]]。

给定拥有静态存储期的 {{tt|type}} 类型的对象 {{c|o}}，{{c|o.member}} 应当是指代 {{c|o}} 的子对象的左值常量表达式，否则行为未定义。特别是 {{tt|member}} 是[[cpp/language/static|静态数据成员]]、[[cpp/language/bit field|位域]]或[[cpp/language/member functions|成员函数]]的情况下行为未定义。

如果 {{tt|type}} 不是{{rev inl|until=c++11|{{named req|PODType}}}}{{rev inl|since=c++11|[[cpp/language/data_members#标准布局|标准布局类型]]}}，那么{{rev inl|until=c++17|{{tt|offsetof}} 的结果未定义}}{{rev inl|since=c++17| {{tt|offsetof}} 宏的使用受条件性支持}}。

表达式 {{c|offsetof(type, member)}} 不会[[cpp/language/dependent name#待决类型|类型待决]]，而且它当且仅当 {{tt|type}} 是待决类型时才会是值待决的。

===异常===
{{tt|offsetof}} 不会抛出异常。
{{rrev|since=c++11|
表达式 {{c|noexcept(offsetof(type, member))}} 始终求值为 {{c|true}}。
}}

===注解===
{{rrev|since=c++11|
标准布局类型的首个成员的偏移始终是零（[[cpp/language/ebo|空基类优化]]是强制的）。
}}

{{tt|offsetof}} 不能以标准 C++ 实现，并要求编译器支持：[https://github.com/gcc-mirror/gcc/blob/68ec60c4a377b532ec2d265ea542107c36b1d15c/gcc/ginclude/stddef.h#L406 GCC]、[https://github.com/llvm-mirror/clang/blob/release_70/lib/Headers/stddef.h#L120 LLVM]。

不限制 {{tt|member}} 为直接成员。它能指代某个给定成员的子对象，例如数组成员的元素。这是由 {{stddoc|lang=c|n2396.htm#dr_496|C 缺陷报告 496}} 指定的。

C23 中指定在 {{tt|offsetof}} 中定义含有不带括号的逗号的新类型为未定义行为，而这种用法通常不被实现在 C++ 模式支持：所有已知实现都拒绝 {{c|offsetof(struct Foo { int a, b; }, a)}}。

===示例===
{{example
|
|code=
#include &lt;cstddef&gt;
#include &lt;iostream&gt;

struct S
{
    char   m0;
    double m1;
    short  m2;
    char   m3;
//  private: int z; // 警告：'S' 不是标准布局类型
};
 
int main()
{
    std::cout
        &lt;&lt; "char   m0 的偏移 = " &lt;&lt; offsetof(S, m0) &lt;&lt; '\n'
        &lt;&lt; "double m1 的偏移 = " &lt;&lt; offsetof(S, m1) &lt;&lt; '\n'
        &lt;&lt; "short  m2 的偏移 = " &lt;&lt; offsetof(S, m2) &lt;&lt; '\n'
        &lt;&lt; "char   m3 的偏移 = " &lt;&lt; offsetof(S, m3) &lt;&lt; '\n';
}
|p=true
|output=
char   m0 的偏移 = 0
double m1 的偏移 = 8
short  m2 的偏移 = 16
char   m3 的偏移 = 18
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=cwg|dr=273|std=C++98|before=重载了一元 {{tt|operator&amp;}} 时 {{tt|offsetof}} 可能无法正常使用|after=即使重载了 {{tt|operator&amp;}} 也必须正常使用}}
{{dr list item|wg=lwg|dr=306|std=C++98|before=未指定在 {{tt|type}} 不是 {{named req|PODType}} 的情况下的行为|after=此时结果未定义}}
{{dr list item|wg=lwg|dr=449|std=C++98|before={{lwg|306}} 的解决方案移除了 {{tt|offsetof}} 的其他要求|after=重新添加这些要求}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc size_t}}
{{dsc inc|cpp/types/dsc is_standard_layout}}
{{dsc see c|c/types/offsetof}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
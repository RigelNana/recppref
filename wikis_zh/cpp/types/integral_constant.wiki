{{cpp/title|integral_constant}}
{{cpp/meta/navbar}}
{{dcl begin}}
{{dcl header|type_traits}}
{{dcl|since=c++11|1=
template&lt; class T, T v &gt;
struct integral_constant;
}}
{{dcl end}}

{{tt|std::integral_constant}} 包装特定类型的静态常量。它是 C++ 类型特征的基类。

{{cpp/types/nospec}} 

===辅助别名模板===
针对 {{tt|T}} 是 {{c/core|bool}} 的常用情况定义辅助别名模板 {{tt|std::bool_constant}}。
{{ddcl|since=c++17|1=
template&lt; bool B &gt;
using bool_constant = integral_constant&lt;bool, B&gt;;
}}

===特化===
针对 {{tt|T}} 是 {{c/core|bool}} 的两种常用情形提供 typedef： 

{{dsc begin}}
{{dsc header|type_traits}}
{{dsc hitem|名字|定义}}
{{dsc|{{tt|true_type}}|{{c/core|std::integral_constant&lt;bool, true&gt;}}}}
{{dsc|{{tt|false_type}}|{{c/core|std::integral_constant&lt;bool, false&gt;}}}}
{{dsc end}}

===成员类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|value_type}}|{{c/core|T}}}}
{{dsc|{{tt|type}}|{{c/core|std::integral_constant&lt;T, v&gt;}}}}
{{dsc end}}

===成员常量===
{{dsc begin}}
{{dsc hitem|名字|值}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|constexpr T}}}} value|{{c|v}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/types/integral_constant/dsc operator value_type}}
{{dsc inc|cpp/types/integral_constant/dsc operator()}}
{{dsc end}}

{{member|{{small|std::integral_constant::}}operator value_type|2=
{{ddcl|1=
constexpr operator value_type() const noexcept;
}}
转换函数。返回包装的值。
}}

{{member|{{small|std::integral_constant::}}operator()|2=
{{ddcl|since=c++14|1=
constexpr value_type operator()() const noexcept;
}}
返回包装的值。此函数允许 {{c|std::integral_constant}} 被用作编译时函数对象的源。
}}

===可能的实现===
{{eq fun
|1=
template&lt;class T, T v&gt;
struct integral_constant
{
    static constexpr T value = v;
    using value_type = T;
    using type = integral_constant; // 使用注入类名
    constexpr operator value_type() const noexcept { return value; }
    constexpr value_type operator()() const noexcept { return value; } // C++14 起
};
}}

===注解===
{{ftm begin|std=yes|comment=yes}}
{{ftm|__cpp_lib_integral_constant_callable|{{tt|std::integral_constant::operator()}}|value=201304L|std=C++14}}
{{ftm|__cpp_lib_bool_constant|{{tt|std::bool_constant}}|value=201505L|std=C++17}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;type_traits&gt;
 
using two_t = std::integral_constant&lt;int, 2&gt;;
using four_t = std::integral_constant&lt;int, 4&gt;;

static_assert(not std::is_same_v&lt;two_t, four_t&gt;);
static_assert(two_t::value * 2 == four_t::value, "2*2 != 4");
static_assert(two_t() &lt;&lt; 1 == four_t() &gt;&gt; 0, "2*2 != 4");

enum class E{ e1, e2 };
using c1 = std::integral_constant&lt;E, E::e1&gt;;
using c2 = std::integral_constant&lt;E, E::e2&gt;;
static_assert(c1::value != E::e2);
static_assert(c1() == E::e1);
static_assert(std::is_same_v&lt;c2, c2&gt;);

int main() {}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/dsc integer_sequence}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
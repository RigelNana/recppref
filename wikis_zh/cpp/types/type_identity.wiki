{{cpp/title|type_identity}}
{{cpp/meta/navbar}}
{{dcl begin}}
{{dcl header|type_traits}}
{{dcl|since=c++20|
template&lt; class T &gt;
struct type_identity;
}}
{{dcl end}}

提供指名 {{tt|T}} 的成员 typedef {{tt|type}}（即恒等变换）。

{{cpp/types/nospec}}

===成员类型===
{{dsc begin}}
{{dsc hitem|名称|定义}}
{{dsc|{{tt|type}}|{{tt|T}}}}
{{dsc end}}

===辅助类型===
{{ddcl|since=c++20|1=
template&lt; class T &gt;
using type_identity_t = type_identity&lt;T&gt;::type;
}}

===可能的实现===
{{eq fun
|1=
template&lt;class T&gt;
struct type_identity { using type = T; };
}}

===注解===
{{tt|type_identity}} 能用于在模板实参推导中建立[[cpp/language/template_argument_deduction#不推导语境|不推导语境]]。

{{feature test macro|__cpp_lib_type_identity|{{tt|std::type_identity}}|value=201806L|std=C++20}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

template&lt;class T&gt;
T foo(T a, T b) { return a + b; }

template&lt;class T&gt;
T bar(T a, std::type_identity_t&lt;T&gt; b) { return a + b; }

int main()
{
    // foo(4.2, 1); // 错误：对 'T' 推导的类型冲突
    std::cout &lt;&lt; bar(4.2, 1) &lt;&lt; '\n';  // OK：调用 bar&lt;double&gt;
}
|p=false
|output=
5.2
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/utility/functional/dsc identity}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
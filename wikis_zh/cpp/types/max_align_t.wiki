{{cpp/title|max_align_t}}
{{cpp/types/navbar}}

{{ddcl|header=cstddef|since=c++11|
typedef /* 由实现定义 */ max_align_t;
}}

{{tt|std::max_align_t}} 是一个{{rev inl|until=c++26|[[cpp/named req/TrivialType|平凡的]]}}{{rev inl|since=c++26|{{named req|TriviallyCopyable}}}}[[cpp/named req/StandardLayoutType|标准布局类型]]，它的[[cpp/language/object#对齐|对齐要求]]至少与每个标量类型一样严格（一样大）。

{{c|std::is_trivially_default_constructible_v&lt;std::max_align_t&gt;}} 是 {{c|true}}。

===注解===
分配函数（如 {{lc|std::malloc}}）所返回的指针，适于为任何对象对齐，这表示它的对齐至少与 {{tt|std::max_align_t}} 一样严格。

===示例===
{{example
|&lt;!-- todo: 更聪明的例子，最好用对齐存储？ --&gt;
|code=
#include &lt;cstddef&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; alignof(std::max_align_t) &lt;&lt; '\n';
}
|p=true
|output=
16
}}

===引用===
{{ref std c++23}}
{{ref std|section=17.2.4|title=Sizes, alignments, and offsets|id=support.types.layout|p=504-505}}
{{ref std c++20}}
{{ref std|section=17.2.4|title=Sizes, alignments, and offsets|id=support.types.layout|p=507-508}}
{{ref std c++17}}
{{ref std|section=21.2.4|title=Sizes, alignments, and offsets|id=support.types.layout|p=479}}
{{ref std c++14}}
{{ref std|section=18.2|title=Types|id=support.types|p=443-444}}
{{ref std c++11}}
{{ref std|section=18.2|title=Types|id=support.types|p=454-455}}
{{ref std end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/language/dsc alignof}}
{{dsc inc|cpp/types/dsc alignment_of}}
{{dsc inc|cpp/types/dsc is_scalar}}
{{dsc see c|c/types/max_align_t}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
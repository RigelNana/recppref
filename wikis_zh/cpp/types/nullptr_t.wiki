{{cpp/title|nullptr_t}}
{{cpp/types/navbar}}
{{ddcl|header=cstddef|since=c++11|1=
using nullptr_t = decltype(nullptr);
}}

{{tt|std::nullptr_t}} 是空指针字面量 {{c|nullptr}} 的类型。它是指针类型和成员指针类型以外的独立类型。该类型的所有纯右值都是[[cpp/language/pointer#空指针|空指针常量]]，并且可以[[cpp/language/implicit conversion|隐式转换]]成任何指针或成员指针类型。

{{c|sizeof(std::nullptr_t)}} 等于 {{c|sizeof(void *)}}。

===注解===
C++ 标准要求 {{header|stddef.h|lang=c}} 把 {{header|cstddef}} 的内容放入全局命名空间，因而要求当包含了 {{header|stddef.h|lang=c}} 时 {{tt|nullptr_t}} 在全局命名空间中可用。

{{tt|nullptr_t}} 自 C23 起也是 C 的一部分。

{{tt|std::nullptr_t}} 的声明是否在任何其他标准库头文件中可用是未指定的。即使当标准要求使用 {{tt|std::nullptr_t}} 时，实现仍可避免引入此名字，例如通过拼写 {{c|decltype(nullptr)}} 代替。

===示例===
{{example
|如果两个或更多重载接受不同的指针类型，那么就需要 {{tt|std::nullptr_t}} 的重载以接受空指针实参。
|code=
#include &lt;cstddef&gt;
#include &lt;iostream&gt;

void f(int*)
{
    std::cout &lt;&lt; "整数指针重载\n";
}

void f(double*)
{
    std::cout &lt;&lt; "double 指针重载\n";
}

void f(std::nullptr_t)
{
    std::cout &lt;&lt; "空指针重载\n";
}

int main()
{
    int* pi{};
    double* pd{};
    
    f(pi);
    f(pd);
    f(nullptr); // 无 void f(nullptr_t) 可能有歧义
    // f(0);    // 歧义调用：三个函数全部为候选
    // f(NULL); // 如果 NULL 是整数空指针常量就会有歧义
                // （如在大部分实现中的情况）
}
|output=
整数指针重载
double 指针重载
空指针重载
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/language/dsc nullptr}}
{{dsc inc|cpp/types/dsc NULL}}
{{dsc inc|cpp/types/dsc is_null_pointer}}
{{dsc see c|c/types/nullptr_t}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
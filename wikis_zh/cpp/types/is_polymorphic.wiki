{{cpp/types/traits/is|1=is_polymorphic
|description=
如果 {{tt|T}} 是[[cpp/language/object#多态对象|多态类]]（即声明或继承至少一个虚函数的非联合类），那么提供的成员常量 {{tt|value}} 等于 {{c|true}}。对于其它任何类型，{{tt|value}} 等于 {{c|false}}。

如果 {{tt|T}} 是不完整的非联合类类型，那么行为未定义。
|inherit_desc={{tt|T}} 是[[cpp/language/object#多态对象|多态]]类类型
}}

===可能的实现===
{{eq fun|1=
namespace detail
{
    template&lt;class T&gt;
    std::true_type detect_is_polymorphic(
        decltype(dynamic_cast&lt;const volatile void*&gt;(static_cast&lt;T*&gt;(nullptr)))
    );
    template&lt;class T&gt;
    std::false_type detect_is_polymorphic(...);
} // namespace detail

template&lt;class T&gt;
struct is_polymorphic : decltype(detail::detect_is_polymorphic&lt;T&gt;(nullptr)) {};
}}

===示例===
{{example
|code=
#include &lt;type_traits&gt;
 
struct A { int m; };
static_assert(!std::is_polymorphic_v&lt;A&gt;);

struct B { virtual void foo(); };
static_assert(std::is_polymorphic_v&lt;B&gt;);

struct C : B {};
static_assert(std::is_polymorphic_v&lt;C&gt;);
 
struct D { virtual ~D() = default; };
static_assert(std::is_polymorphic_v&lt;D&gt;);
 
// Uses inheritance, but not the virtual keyword:
struct E : A {};
static_assert(!std::is_polymorphic_v&lt;E&gt;);

struct F : virtual A {};
static_assert(!std::is_polymorphic_v&lt;F&gt;);

struct AX : A {};
struct AY : A {};
struct XY : virtual AX, virtual AY {};
static_assert(!std::is_polymorphic_v&lt;XY&gt;);
 
int main() {}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2015|std=C++11|before=在 {{tt|T}} 是不完整的联合体类型时行为未定义|after=此时基特征是 {{lc|std::false_type}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_class}}
{{dsc inc|cpp/types/dsc is_abstract}}
{{dsc inc|cpp/types/dsc has_virtual_destructor}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
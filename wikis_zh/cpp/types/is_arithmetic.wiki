{{cpp/types/traits/is| 1=is_arithmetic
|std=c++11
|description=如果 {{tt|T}} 为算术类型（即整数类型或浮点类型）或其 {{tt|cv}} 限定版本，那么提供的成员常量 {{tt|value}} 等于 {{c|true}}。对于其它任何类型，{{tt|value}} 等于 {{c|false}}。

|inherit_desc= {{tt|T}} 为算术类型
}}

===注解===
算术类型是定义了[[cpp/language/operator_arithmetic|算术运算符]]（{{tt|+}}、{{tt|-}}、{{tt|*}}、{{tt|/}}）的内建类型（可能与一般算术转换结合）。

为所有算术类型都提供了 {{lc|std::numeric_limits}} 的特化。

===可能的实现===
{{eq fun
|1=
template&lt;class T&gt;
struct is_arithmetic : std::integral_constant&lt;bool,
                                              std::is_integral&lt;T&gt;::value {{!!}}
                                              std::is_floating_point&lt;T&gt;::value&gt; {};
}}

===示例===
{{example
|code=
#include &lt;atomic&gt;
#include &lt;cstddef&gt;
#include &lt;type_traits&gt;

class A {};

enum class B : int { e };

static_assert(
    std::is_arithmetic_v&lt;bool&gt;            == true  and
    std::is_arithmetic_v&lt;char&gt;            == true  and
    std::is_arithmetic_v&lt;char const&gt;      == true  and
    std::is_arithmetic_v&lt;int&gt;             == true  and
    std::is_arithmetic_v&lt;int const&gt;       == true  and
    std::is_arithmetic_v&lt;float&gt;           == true  and
    std::is_arithmetic_v&lt;float const&gt;     == true  and
    std::is_arithmetic_v&lt;std::size_t&gt;     == true  and

    std::is_arithmetic_v&lt;char&amp;&gt;           == false and
    std::is_arithmetic_v&lt;char*&gt;           == false and
    std::is_arithmetic_v&lt;int&amp;&gt;            == false and
    std::is_arithmetic_v&lt;int*&gt;            == false and
    std::is_arithmetic_v&lt;float&amp;&gt;          == false and
    std::is_arithmetic_v&lt;float*&gt;          == false and
    std::is_arithmetic_v&lt;A&gt;               == false and
    std::is_arithmetic_v&lt;B&gt;               == false and
    std::is_arithmetic_v&lt;decltype(B::e)&gt;  == false and
    std::is_arithmetic_v&lt;std::byte&gt;       == false and
    std::is_arithmetic_v&lt;std::atomic_int&gt; == false
);

int main() {}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_integral}}
{{dsc inc|cpp/types/dsc is_floating_point}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
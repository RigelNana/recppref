{{cpp/title|size_t}}
{{cpp/types/navbar}}
{{dcl begin}}
{{dcl header|cstddef}}
{{dcl header|cstdio}}
{{dcl header|cstdlib}}
{{dcl header|cstring}}
{{dcl header|ctime}}
{{dcl sep}}
{{dcl header|cuchar|notes={{mark since c++17}}}}
{{dcl sep}}
{{dcl header|cwchar}}
{{dcl|
typedef /* 由实现定义 */ size_t;
}}
{{dcl end}}

{{tt|std::size_t}} 是以下运算符的结果类型：
* {{ltt|cpp/language/sizeof}}
{{rrev|since=c++11|
* {{ltt|cpp/language/sizeof...}}
* {{ltt|cpp/language/alignof}}
}}

如果程序试图组成一个过大类型（即该类型的[[cpp/language/object#对象表示与值表示|对象表示]]的字节数超出 {{tt|std::size_t}} 能表示的最大值），那么程序非良构。

{{rrev|since=c++11|
{{tt|std::size_t}} 的位宽度不小于 16。
}}

===注解===
{{tt|std::size_t}} 可以存放下理论上可能存在的对象的最大大小，该对象可以是任何类型（包括数组）。大小无法以 {{tt|std::size_t}} 表示的类型是非良构的。在许多平台上（使用分段寻址的系统除外），{{tt|std::size_t}} 可以存放任何非成员的指针的值，此时它与 {{lc|std::uintptr_t}} 同义。

{{tt|std::size_t}} 通常用于数组索引和循环计数。使用其他类型来进行数组索引操作的程序可能会在某些情况下出错，例如在 64 位系统中使用 {{c/core|unsigned int}} 进行索引时，如果索引号超过 {{lc|UINT_MAX}} 或者依赖于 32 位取模运算的话，程序就会出错。

在对诸如 {{lc|std::string}}、{{lc|std::vector}} 等 C++ 容器进行索引操作时，正确的类型是该容器的嵌套类型 {{tt|size_type}}，而该类型通常被定义为 {{tt|std::size_t}} 的同义词。

未指定 {{tt|std::size_t}} 的声明是否在其他标准库标头中可用。即使当标准要求使用 {{tt|std::size_t}} 时，实现仍可避免引入此名字。

{{rrev|since=c++23|
{{tt|std::size_t}} 的[[cpp/language/integer literal|整数字面量后缀]]是 {{tt|z}} 或 {{tt|Z}} 与 {{tt|u}} 或 {{tt|U}} 的任意组合（即 {{tt|zu}}、{{tt|zU}}、{{tt|Zu}}、{{tt|ZU}}、{{tt|uz}}、{{tt|uZ}}、{{tt|Uz}} 或 {{tt|UZ}}）。
}}

===示例===
{{example
|code=
#include &lt;array&gt;
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
 
int main()
{
    std::array&lt;std::size_t, 10&gt; a;

    // 使用 C++23 std::size_t 字面量的例子
    for (auto i = 0uz; i != a.size(); ++i)
        std::cout &lt;&lt; (a[i] = i) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    // 自减循环的例子
    for (std::size_t i = a.size(); i--;)
        std::cout &lt;&lt; a[i] &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    // 注意以下自减循环的简单实现：
    //  for (std::size_t i = a.size() - 1; i &gt;= 0; --i) ...
    // 是无限循环，因为无符号数不会是负数
}
|output=
0 1 2 3 4 5 6 7 8 9 
9 8 7 6 5 4 3 2 1 0
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=cwg|dr=1122|std=C++98|before={{tt|std::size_t}} 被循环定义&lt;ref&gt;{{tt|std::size_t}} 的定义曾与 C 中的 {{tt|size_t}} 完全一致，即“{{ltt|cpp/language/sizeof}} 的结果类型”。在 C 中不存在循环定义是因为 C 中 {{tt|sizeof}} 的结果类型是由实现定义的无符号整数类型。&lt;/ref&gt;|after=按与 C 中相同的方式定义}}
{{dr list item|wg=cwg|dr=1464|std=C++98|before=对象大小可以不能以 {{tt|std::size_t}} 表示|after=这种类型非良构}}
{{dr list end}}
&lt;references/&gt;

===引用===
{{ref std c++23}}
{{ref std|section=6.8.4|title=Compound types|id=basic.compound|p=79-80}}
{{ref std|section=7.6.2.5|title=Sizeof|id=expr.sizeof|p=136}}
{{ref std|section=7.6.2.6|title=Alignof|id=expr.alignof|p=136}}
{{ref std|section=17.2.4|title=Sizes, alignments, and offsets|id=support.types.layout|p=504-505}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=6.8.3|title=Compound types|id=basic.compound|p=75-76}}
{{ref std|section=7.6.2.5|title=Sizeof|id=expr.sizeof|p=129-130}}
{{ref std|section=7.6.2.6|title=Alignof|id=expr.alignof|p=130}}
{{ref std|section=17.2.4|title=Sizes, alignments, and offsets|id=support.types.layout|p=507-508}}
{{ref std end}}
{{ref std c++17}}
{{ref std|section=6.9.2|title=Compound types|id=basic.compound|p=81-82}}
{{ref std|section=8.3.3|title=Sizeof|id=expr.sizeof|p=121-122}}
{{ref std|section=8.3.6|title=Alignof|id=expr.alignof|p=129}}
{{ref std|section=21.2.4|title=Sizes, alignments, and offsets|id=support.types.layout|p=479}}
{{ref std end}}
{{ref std c++14}}
{{ref std|section=3.9.2|title=Compound types|id=basic.compound|p=73-74}}
{{ref std|section=5.3.3|title=Sizeof|id=expr.sizeof|p=109-110}}
{{ref std|section=5.3.6|title=Alignof|id=expr.alignof|p=116}}
{{ref std|section=18.2|title=Types|id=support.types|p=443-444}}
{{ref std end}}
{{ref std c++11}}
{{ref std|section=5.3.3|title=Sizeof|id=expr.sizeof|p=111}}
{{ref std|section=5.3.6|title=Alignof|id=expr.alignof|p=116}}
{{ref std|section=18.2|title=Types|id=support.types|p=454-455}}
{{ref std end}}
{{ref std c++03}}
{{ref std|section=5.3.3|title=Sizeof|id=expr.sizeof|p=79}}
{{ref std end}}
{{ref std c++98}}
{{ref std|section=5.3.3|title=Sizeof|id=expr.sizeof|p=77}}
{{ref std end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc ptrdiff_t}}
{{dsc inc|cpp/types/dsc offsetof}}
{{dsc inc|cpp/language/dsc integer literal}}
{{dsc see c|c/types/size_t}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
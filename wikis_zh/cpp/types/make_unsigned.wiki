{{cpp/title|make_unsigned}}
{{cpp/meta/navbar}}
{{dcl begin}}
{{dcl header|type_traits}}
{{dcl|since=c++11|1=
template&lt; class T &gt;
struct make_unsigned;
}}
{{dcl end}}

若 {{tt|T}} 是整数（除 {{c/core|bool}}）或枚举类型，则提供 {{tt|T}} 的对应无符号整数类型的成员 typedef {{tt|type}}，它拥有相同的 cv 限定符。

若 {{tt|T}} 为有符号或无符号的 {{c/core|char}}、{{c/core|short}}、{{c/core|int}}、{{c/core|long}}、{{c/core|long long}}，则提供此列表中的 {{tt|T}} 的对应无符号类型。

若 {{tt|T}} 为枚举类型或 {{c/core|char}}、{{c/core|wchar_­t}}{{rev inl|since=c++20|、{{c/core|char8_­t}}}}、{{c/core|char16_­t}}、{{c/core|char32_­t}}，则提供与 {{tt|T}} 有相同 {{tt|sizeof}} 的有最小[[cpp/language/implicit_conversion#整型提升|等级]]的无符号整数类型。

{{rrev multi|until1=c++20
|rev1=否则，行为未定义。
|rev2=否则，程序非良构。
}}

{{cpp/types/nospec}}

===成员类型===
{{dsc begin}}
{{dsc hitem|成员|定义}}
{{dsc|{{tt|type}}|{{tt|T}} 的对应无符号整数类型}}
{{dsc end}}

===辅助类型===
{{dcl begin}}
{{dcl|since=c++14|1=
template&lt; class T &gt;
using make_unsigned_t = typename make_unsigned&lt;T&gt;::type;
}}
{{dcl end}}

===示例===
{{example
|code=
#include &lt;type_traits&gt;

int main()
{
    using uchar_type = std::make_unsigned_t&lt;char&gt;;
    using uint_type  = std::make_unsigned_t&lt;int&gt;;
    using ulong_type = std::make_unsigned_t&lt;volatile long&gt;;
    
    static_assert(
        std::is_same_v&lt;uchar_type, unsigned char&gt; and
        std::is_same_v&lt;uint_type, unsigned int&gt; and
        std::is_same_v&lt;ulong_type, volatile unsigned long&gt;
    );
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_signed}}
{{dsc inc|cpp/types/dsc is_unsigned}}
{{dsc inc|cpp/types/dsc make_signed}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
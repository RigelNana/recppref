{{cpp/title|add_cv|add_const|add_volatile}}
{{cpp/types/navbar}}
{{dcl begin}}
{{dcl header | type_traits}}
{{dcl | since=c++11 | num=1 |
template&lt; class T &gt;
struct add_cv;
}}
{{dcl | since=c++11 | num=2 |
template&lt; class T &gt;
struct add_const;
}}
{{dcl | since=c++11 | num=3 |
template&lt; class T &gt;
struct add_volatile;
}}
{{dcl end}}

提供成员 typedef {{tt|type}}，它与 {{tt|T}} 相同，但它拥有添加的 cv 限定符（除非 {{tt|T}} 是函数、引用或已拥有此 cv 限定符）。

@1@ 添加 {{c|const}} 和 {{c|volatile}}

@2@ 添加 {{c|const}}

@3@ 添加 {{c|volatile}}

{{cpp/types/nospec|any}}

===成员类型===
{{dsc begin}}
{{dsc hitem |名称|定义}}
{{dsc | {{tt|type}} |带 cv 限定符的类型 {{tt|T}}}}
{{dsc end}}

===辅助类型===
{{dcl begin}}
{{dcl | since=c++14 | 1=
template&lt; class T &gt;
using add_cv_t       = typename add_cv&lt;T&gt;::type;
}}
{{dcl | since=c++14 | 1=
template&lt; class T &gt;
using add_const_t    = typename add_const&lt;T&gt;::type;
}}
{{dcl | since=c++14 | 1=
template&lt; class T &gt;
using add_volatile_t = typename add_volatile&lt;T&gt;::type;
}}
{{dcl end}}

===可能的实现===
{{eq fun
 | 1=
template&lt;class T&gt; struct add_cv { typedef const volatile T type; };

template&lt;class T&gt; struct add_const { typedef const T type; };

template&lt;class T&gt; struct add_volatile { typedef volatile T type; };
}}

===注解===
这些变换特征能用于在模板实参推导中建立[[cpp/language/template_argument_deduction#非推导语境|非推导语境]]：

{{source|1=
template&lt;class T&gt;
void f(const T&amp;, const T&amp;);
 
template&lt;class T&gt;
void g(const T&amp;, std::add_const_t&lt;T&gt;&amp;);

f(4.2, 0); // 错误：对 'T' 推导出冲突的类型
g(4.2, 0); // OK：调用 g&lt;double&gt;
}}

===示例===
{{example
 |
 | code=
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

struct foo
{
    void m() { std::cout &lt;&lt; "无 cv\n"; }
    void m() const { std::cout &lt;&lt; "const\n"; }
    void m() volatile { std::cout &lt;&lt; "volatile\n"; }
    void m() const volatile { std::cout &lt;&lt; "const-volatile\n"; }
};

int main()
{
    foo{}.m();
    std::add_const&lt;foo&gt;::type{}.m();
    std::add_volatile&lt;foo&gt;::type{}.m();
    std::add_cv&lt;foo&gt;::type{}.m();
}
|output=
无cv
const
volatile
const-volatile
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/types/dsc is_const}}
{{dsc inc | cpp/types/dsc is_volatile}}
{{dsc inc | cpp/types/dsc remove_cv}}
{{dsc inc | cpp/utility/dsc as_const}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
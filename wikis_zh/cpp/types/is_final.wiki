{{cpp/types/traits/is|1=is_final
|std=c++14
|description=如果 {{tt|T}} 是{{lt|cpp/language/final|最终}}类，那么提供的成员常量 {{tt|value}} 等于 {{c|true}}。对于其它任何类型，{{tt|value}} 等于 {{c|false}}。

如果 {{tt|T}} 是不完整的类类型，那么行为未定义。
|inherit_desc={{tt|T}} 是最终类类型
}}

===注解===
{{tt|std::is_final}} 由 {{lwg|2112}} 的解决方案引入。

[[cpp/language/union|联合体]]可以被声明为 {{tt|final}}（而 {{tt|std::is_final}} 将检测到它），尽管联合体在任何情况下都不能作为基类。

{{feature test macro|__cpp_lib_is_final|{{tt|std::is_final}}|value=201402L|std=C++14}}

===示例===
{{example
|code=
#include &lt;type_traits&gt;

class A {};
static_assert(std::is_final_v&lt;A&gt; == false);

class B final {};
static_assert(std::is_final_v&lt;B&gt; == true);

union U final
{
    int x;
    double d;
};
static_assert(std::is_final_v&lt;U&gt; == true);

int main()
{
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_class}}
{{dsc inc|cpp/types/dsc is_polymorphic}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
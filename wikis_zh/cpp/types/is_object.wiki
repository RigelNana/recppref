{{cpp/types/traits/is|1=is_object
|description=
如果 {{tt|T}} 为[[cpp/language/type|对象类型]]（即除了函数、引用或 {{c|void}} 类型外的任何可有 cv 限定的类型），那么提供的成员常量 {{tt|value}} 等于 {{c|true}}。对于其它任何类型，{{tt|value}} 等于 {{c|false}}。
|inherit_desc={{tt|T}} 为对象类型
}}

===可能的实现===
{{eq fun
|1=
template&lt; class T&gt;
struct is_object : std::integral_constant&lt;bool,
                     std::is_scalar&lt;T&gt;::value {{!!}}
                     std::is_array&lt;T&gt;::value {{!!}}
                     std::is_union&lt;T&gt;::value {{!!}}
                     std::is_class&lt;T&gt;::value&gt; {};
}}

===示例===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

#define IS_OBJECT(...) \
    std::cout &lt;&lt; std::boolalpha &lt;&lt; std::left &lt;&lt; std::setw(9) &lt;&lt; #__VA_ARGS__ \
              &lt;&lt; (std::is_object_v&lt;__VA_ARGS__&gt; ? " 是对象\n" \
                                                : " 不是对象\n")

int main()
{
    class cls {};

    IS_OBJECT(void);
    IS_OBJECT(int);
    IS_OBJECT(int&amp;);
    IS_OBJECT(int*);
    IS_OBJECT(int*&amp;);
    IS_OBJECT(cls);
    IS_OBJECT(cls&amp;);
    IS_OBJECT(cls*);
    IS_OBJECT(int());
    IS_OBJECT(int(*)());
    IS_OBJECT(int(&amp;)());
}
|output=
void      不是对象
int       是对象
int&amp;      不是对象
int*      是对象
int*&amp;     不是对象
cls       是对象
cls&amp;      不是对象
cls*      是对象
int()     不是对象
int(*)()  是对象
int(&amp;)()  不是对象
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_scalar}}
{{dsc inc|cpp/types/dsc is_array}}
{{dsc inc|cpp/types/dsc is_union}}
{{dsc inc|cpp/types/dsc is_class}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
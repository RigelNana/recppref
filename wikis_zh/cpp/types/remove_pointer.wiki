{{cpp/title|remove_pointer}}
{{cpp/meta/navbar}}
{{dcl begin}}
{{dcl header|type_traits}}
{{dcl|since=c++11|1=
template&lt; class T &gt;
struct remove_pointer;
}}
{{dcl end}}

提供成员 typedef {{tt|type}}，它是 {{tt|T}} 所指向的类型，或若 {{tt|T}} 不是指针，则 {{tt|type}} 与 {{tt|T}} 相同。

{{cpp/types/nospec}}

===成员类型===
{{dsc begin}}
{{dsc hitem|名称|定义}}
{{dsc|{{tt|type}}|{{tt|T}} 所指向的类型，或若 {{tt|T}} 不是指针则为 {{tt|T}}}}
{{dsc end}}

===辅助类型===
{{dcl begin}}
{{dcl|since=c++14|1=
template&lt; class T &gt;
using remove_pointer_t = typename remove_pointer&lt;T&gt;::type;
}}
{{dcl end}}

===可能的实现===
{{eq fun
|1=
template&lt;class T&gt; struct remove_pointer { typedef T type; };
template&lt;class T&gt; struct remove_pointer&lt;T*&gt; { typedef T type; };
template&lt;class T&gt; struct remove_pointer&lt;T* const&gt; { typedef T type; };
template&lt;class T&gt; struct remove_pointer&lt;T* volatile&gt; { typedef T type; };
template&lt;class T&gt; struct remove_pointer&lt;T* const volatile&gt; { typedef T type; };
}}

===示例===
{{example
|code=
#include &lt;type_traits&gt;

static_assert
(
    std::is_same_v&lt;int, int&gt; == true &amp;&amp;
    std::is_same_v&lt;int, int*&gt; == false &amp;&amp;
    std::is_same_v&lt;int, int**&gt; == false &amp;&amp;
    std::is_same_v&lt;int, std::remove_pointer_t&lt;int&gt;&gt; == true &amp;&amp;
    std::is_same_v&lt;int, std::remove_pointer_t&lt;int*&gt;&gt; == true &amp;&amp;
    std::is_same_v&lt;int, std::remove_pointer_t&lt;int**&gt;&gt; == false &amp;&amp;
    std::is_same_v&lt;int, std::remove_pointer_t&lt;int* const&gt;&gt; == true &amp;&amp;
    std::is_same_v&lt;int, std::remove_pointer_t&lt;int* volatile&gt;&gt; == true &amp;&amp;
    std::is_same_v&lt;int, std::remove_pointer_t&lt;int* const volatile&gt;&gt; == true
);

int main() {}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_pointer}}
{{dsc inc|cpp/types/dsc add_pointer}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
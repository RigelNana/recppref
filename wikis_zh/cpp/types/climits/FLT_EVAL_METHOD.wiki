{{title|FLT_EVAL_METHOD}}
{{cpp/types/climits/navbar}}
{{ddcl|header=cfloat|since=c++11|
#define FLT_EVAL_METHOD /* 由实现定义 */
}}

指定除了赋值和转型之外的所有浮点算术运算中所用的精度。

{{dsc begin}}
{{dsc hitem |值|解释}}
{{dsc|除 {{c|-1}} 以外的负值|实现定义行为}}
{{dsc|{{c|-1}}|默认精度未知}}
{{dsc|{{c|0}}|以所用类型的范围和精度进行所有运算和常量求值。而且，{{c/core|float_t}} 和 {{c/core|double_t}} 分别等价于 {{c/core|float}} 和 {{c/core|double}}}}
{{dsc|{{c|1}}|以 {{c/core|double}} 的范围和精度进行所有运算和常量求值。而且，{{c/core|float_t}} 和 {{c/core|double_t}} 都等价于 {{c/core|double}}}}
{{dsc|{{c|2}}|以 {{c/core|long double}} 的范围和精度进行所有运算和常量求值。而且，{{c/core|float_t}} 和 {{c/core|double_t}} 都等价于 {{c/core|long double}}}}
{{dsc end}}

===注解===
无关乎 {{c|FLT_EVAL_METHOD}} 的值，任何浮点表达式都可以被''缩短''，即如同所有中间结果拥有无限范围和精度一般进行（除非关闭 {{ltt|cpp/preprocessor/impl|#pragma}} {{c|STDC FP_CONTRACT}}）

转型和复制会剥除任何额外的范围和精度：这模拟从扩展精度 FPU 寄存器存储值到标准大小内存位置的动作。

===参阅===
{{dsc begin}}
{{dsc see c|c/types/limits/FLT_EVAL_METHOD}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
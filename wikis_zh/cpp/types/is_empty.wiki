{{cpp/types/traits/is|1=is_empty
|description=如果 {{tt|T}} 是空类型（即没有除了 0 大小位域以外的非静态数据成员，没有虚函数，没有虚基类，且没有非空基类的非联合类类型），那么提供的成员常量 {{tt|value}} 等于 {{c|true}}。对于其它任何类型，{{tt|value}} 等于 {{c|false}}。

如果 {{tt|T}} 是不完整的非联合类类型，那么行为未定义。
|inherit_desc={{tt|T}} 是空类类型 
}}

===注解===
因为[[cpp/language/ebo|空基类优化]]，从空类类型继承通常不增加类的大小。

{{tt|std::is_empty&lt;T&gt;}} 和所有其他类型特征都是空类。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

struct A {};
static_assert(std::is_empty_v&lt;A&gt; == true);

struct B { int m; };
static_assert(std::is_empty_v&lt;B&gt; == false);

struct C { static int m; };
static_assert(std::is_empty_v&lt;C&gt; == true);

struct D { virtual ~D(); };
static_assert(std::is_empty_v&lt;D&gt; == false);

union E {};
static_assert(std::is_empty_v&lt;E&gt; == false);

struct F { [[no_unique_address]] E e; };

struct G
{
    int:0;
    // C++ 标准允许“作为特殊情况，无名的长度为零的位域指定下个位域在分配单元边界对齐。
    // 仅当声明无名位域时宽度可为零。”
};
static_assert(std::is_empty_v&lt;G&gt; == true); // 宽度为 0 的无名位域

int main()
{
    std::cout &lt;&lt; std::boolalpha;
    std::cout &lt;&lt; "F：" &lt;&lt; std::is_empty_v&lt;F&gt; &lt;&lt; '\n'; // 结果依赖 API
}
|p=true
|output=
F：true
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2015|std=C++11|before=在 {{tt|T}} 是不完整的联合体类型时行为未定义|after=此时基特征是 {{lc|std::false_type}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_class}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
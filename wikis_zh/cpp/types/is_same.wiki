{{cpp/title|is_same}}
{{cpp/meta/navbar}}
{{ddcl|header=type_traits|since=c++11|
template&lt; class T, class U &gt;
struct is_same;
}}

如果 {{tt|T}} 与 {{tt|U}} 指名同一类型（考虑 const/volatile 限定），那么提供的成员常量 {{c|value}} 等于 {{c|true}}。否则，{{c|value}} 等于 {{c|false}}。

满足交换律，即对于任何类型 {{tt|T}} 与 {{tt|U}}，{{c|1=is_same&lt;T, U&gt;::value == true}} 当且仅当 {{c|1=is_same&lt;U, T&gt;::value == true}}。

{{cpp/types/nospec|v}}

=== 辅助变量模板 ===
{{ddcl|since=c++17|1=
template&lt; class T, class U &gt;
constexpr bool is_same_v = is_same&lt;T, U&gt;::value;
}}
{{cpp/types/integral_constant/inherit|{{tt|T}} 与 {{tt|U}} 是同一类型}}

===可能的实现===
{{eq fun
|1=
template&lt;class T, class U&gt;
struct is_same : std::false_type {};

template&lt;class T&gt;
struct is_same&lt;T, T&gt; : std::true_type {};
}}

===示例===
{{example
|code=
#include &lt;cstdint&gt;
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

#define SHOW(...) std::cout &lt;&lt; #__VA_ARGS__ &lt;&lt; " : " &lt;&lt; __VA_ARGS__ &lt;&lt; '\n'

int main()
{
    std::cout &lt;&lt; std::boolalpha;

    // 一些由实现定义的状况

    // 若 'int' 为 32 位则通常为 true
    SHOW( std::is_same&lt;int, std::int32_t&gt;::value ); // 可能为 true
    // 若使用 ILP64 数据模型则可能为 true
    SHOW( std::is_same&lt;int, std::int64_t&gt;::value ); // 可能为 false

    // 与上面相同的测试，但使用了 C++17 的 std::is_same_v&lt;T, U&gt; 格式
    SHOW( std::is_same_v&lt;int, std::int32_t&gt; ); // 可能为 true
    SHOW( std::is_same_v&lt;int, std::int64_t&gt; ); // 可能为 false

    // 比较一对变量的类型
    long double num1 = 1.0;
    long double num2 = 2.0;
    static_assert( std::is_same_v&lt;decltype(num1), decltype(num2)&gt; == true );

    // 'float' 决非整数类型
    static_assert( std::is_same&lt;float, std::int32_t&gt;::value == false );

    // 'int' 为隐式的 'signed'
    static_assert( std::is_same_v&lt;int, int&gt; == true );
    static_assert( std::is_same_v&lt;int, unsigned int&gt; == false );
    static_assert( std::is_same_v&lt;int, signed int&gt; == true );

    // 不同于其他类型，'char' 既非 'unsigned' 亦非 'signed'
    static_assert( std::is_same_v&lt;char, char&gt; == true );
    static_assert( std::is_same_v&lt;char, unsigned char&gt; == false );
    static_assert( std::is_same_v&lt;char, signed char&gt; == false );

    // const 限定的类型 T 与非 const T 不同
    static_assert( !std::is_same&lt;const int, int&gt;() );
}
#undef SHOW
|p=true
|output=
std::is_same&lt;int, std::int32_t&gt;::value : true
std::is_same&lt;int, std::int64_t&gt;::value : false
std::is_same_v&lt;int, std::int32_t&gt; : true
std::is_same_v&lt;int, std::int64_t&gt; : false
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/concepts/dsc same_as}}
{{dsc inc|cpp/language/dsc decltype}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
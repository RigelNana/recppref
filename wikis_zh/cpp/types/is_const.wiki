{{cpp/types/traits/is|1=is_const
|description=如果 {{tt|T}} 为 const 限定的类型（即为 {{c/core|const}} 或 {{c/core|const volatile}}），那么提供的成员常量 {{c|value}} 等于 {{c|true}}。对于其它任何类型，{{c|value}} 等于 {{c|false}}。
|inherit_desc= {{tt|T}} 为 const 限定的类型
}}

===注解===
若 {{c|T}} 为引用类型则 {{c|is_const&lt;T&gt;::value}} 始终为 {{c|false}}。检查可能为引用的类型的常性的正确方式是移除引用：{{c|is_const&lt;typename remove_reference&lt;T&gt;::type&gt;}}。

===可能的实现===
{{eq fun
|1=
template&lt;class T&gt; struct is_const          : std::false_type {};
template&lt;class T&gt; struct is_const&lt;const T&gt; : std::true_type {};
}}

===示例===
{{example
|code=
#include &lt;type_traits&gt;

static_assert(std::is_same_v&lt;const int*, int const*&gt;,
    "要记住，const 是紧密绑定到指针内部的。");
static_assert(!std::is_const_v&lt;int&gt;);
static_assert(std::is_const_v&lt;const int&gt;);
static_assert(!std::is_const_v&lt;int*&gt;);
static_assert(std::is_const_v&lt;int* const&gt;,
    "因为可以改变指针自身而非其所指向的 int。");
static_assert(!std::is_const_v&lt;const int*&gt;,
    "因为不能改变指针自身但可以改变其所指向的 int。");
static_assert(!std::is_const_v&lt;const int&amp;&gt;);
static_assert(std::is_const_v&lt;std::remove_reference_t&lt;const int&amp;&gt;&gt;);

struct S
{
    void foo() const {}
    void bar() const {}
};

int main() 
{
    // const 成员函数作为 const 的方式是不同的：

    static_assert(!std::is_const_v&lt;decltype(&amp;S::foo)&gt;,
        "Because &amp;S::foo is a pointer.");

    using S_mem_fun_ptr = void(S::*)() const;

    S_mem_fun_ptr sfp = &amp;S::foo;
    sfp = &amp;S::bar; // OK，可以改变指向
    static_assert(!std::is_const_v&lt;decltype(sfp)&gt;,
        "因为 sfp 具有相同的指针类型所以可以改变指向。");

    const S_mem_fun_ptr csfp = &amp;S::foo;
    // csfp = &amp;S::bar; // 错误
    static_assert(std::is_const_v&lt;decltype(csfp)&gt;,
        "因为 csfp 不能改变指向。");
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_volatile}}
{{dsc inc|cpp/utility/dsc as_const}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/types/traits/is|1=is_unsigned
|description=
检查 {{tt|T}} 是否为无符号算术类型。
* 如果 {{c|std::is_arithmetic&lt;T&gt;::value}} 是 {{c|true}}，那么提供的成员常量 {{tt|value}} 等于 {{c|T(0) &lt; T(-1)}}。
* 否则提供的成员常量 {{tt|value}} 等于 {{c|false}}。
|inherit_desc={{tt|T}} 是无符号算术类型
}}

===可能的实现===
{{eq fun|1=
namespace detail
{
    template&lt;typename T,bool = std::is_arithmetic&lt;T&gt;::value&gt;
    struct is_unsigned : std::integral_constant&lt;bool, T(0) &lt; T(-1)&gt; {};

    template&lt;typename T&gt;
    struct is_unsigned&lt;T,false&gt; : std::false_type {};
} // namespace detail

template&lt;typename T&gt;
struct is_unsigned : detail::is_unsigned&lt;T&gt;::type {};
}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

class A {};
static_assert(std::is_unsigned_v&lt;A&gt; == false);

enum B : unsigned {};
static_assert(std::is_unsigned_v&lt;B&gt; == false);

enum class C : unsigned {};
static_assert(std::is_unsigned_v&lt;C&gt; == false);

struct S { unsigned p : 1; int q : 1; };
static_assert
(
    std::is_unsigned_v&lt;decltype(S::p)&gt; not_eq
    std::is_unsigned_v&lt;decltype(S::q)&gt;
);

static_assert
(
    std::is_unsigned_v&lt;float&gt; == false &amp;&amp;
    std::is_unsigned_v&lt;signed int&gt; == false &amp;&amp;
    std::is_unsigned_v&lt;unsigned int&gt; == true &amp;&amp;
    std::is_unsigned_v&lt;bool&gt; == true
);

int main() 
{
    // char 是否有符号由实现定义：
    std::cout &lt;&lt; std::boolalpha &lt;&lt; std::is_unsigned&lt;char&gt;::value &lt;&lt; '\n';
}
|p=true
|output=
false
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2197|std=C++11|before={{tt|T}} 不是算术类型时 {{tt|value}} 也有可能是 {{c|true}}|after=此时只能是 {{c|false}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_signed}}
{{dsc inc|cpp/types/numeric_limits/dsc is_signed}}
{{dsc inc|cpp/types/dsc is_arithmetic}}
{{dsc inc|cpp/types/dsc make_signed}}
{{dsc inc|cpp/types/dsc make_unsigned}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
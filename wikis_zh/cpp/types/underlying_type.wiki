{{cpp/title|underlying_type}}
{{cpp/meta/navbar}}
{{dcl begin}}
{{dcl header|type_traits}}
{{dcl|since=c++11|1=
template&lt; class T &gt;
struct underlying_type;
}}
{{dcl end}}

若 {{tt|T}} 是完整枚举类型，则提供指名 {{tt|T}} 的底层类型的成员 typedef {{tt|type}}。

{{rrev multi|until1=c++20|rev1=
否则，行为未定义。
|rev2=
否则，若 {{tt|T}} 不是枚举类型，则无成员 {{tt|type}}。否则（{{tt|T}} 为不完整枚举类型）程序为非良构。
}}

{{cpp/types/nospec}}

===成员类型===
{{dsc begin}}
{{dsc hitem|名称|定义}}
{{dsc|{{tt|type}}|{{tt|T}} 的底层类型}}
{{dsc end}}

===辅助类型===
{{dcl begin}}
{{dcl|since=c++14|1=
template&lt; class T &gt;
using underlying_type_t = typename underlying_type&lt;T&gt;::type;
}}
{{dcl end}}

===注解===
每个[[cpp/language/enum|枚举类型]]都拥有''底层类型''，它可以是

# 显式指定（有作用域和无作用域枚举均可）
# 省略，该情况下对于有作用域枚举是 {{c|int}}，或（对于无作用域枚举）是足以表示枚举所有值的实现定义的整数类型

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

enum e1 {};
enum class e2 {};
enum class e3: unsigned {};
enum class e4: int {};

int main()
{
    constexpr bool e1_t = std::is_same_v&lt;std::underlying_type_t&lt;e1&gt;, int&gt;;
    constexpr bool e2_t = std::is_same_v&lt;std::underlying_type_t&lt;e2&gt;, int&gt;;
    constexpr bool e3_t = std::is_same_v&lt;std::underlying_type_t&lt;e3&gt;, int&gt;;
    constexpr bool e4_t = std::is_same_v&lt;std::underlying_type_t&lt;e4&gt;, int&gt;;

    std::cout
        &lt;&lt; "'e1' 的底层类型" &lt;&lt; (e1_t ? "是 int" : "不是 int") &lt;&lt; '\n'
        &lt;&lt; "'e2' 的底层类型" &lt;&lt; (e2_t ? "是 int" : "不是 int") &lt;&lt; '\n'
        &lt;&lt; "'e3' 的底层类型" &lt;&lt; (e3_t ? "是 int" : "不是 int") &lt;&lt; '\n'
        &lt;&lt; "'e4' 的底层类型" &lt;&lt; (e4_t ? "是 int" : "不是 int") &lt;&lt; '\n';
}
|p=true &lt;!-- 对于无作用域枚举：实现定义的整数类型 --&gt;
|output=
'e1' 的底层类型不是 int
'e2' 的底层类型是 int
'e3' 的底层类型不是 int
'e4' 的底层类型是 int
}}

=== 缺陷报告 ===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2396|std=C++11|before=允许不完整枚举类型|after=要求完整枚举类型}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_enum}}
{{dsc inc|cpp/types/dsc is_scoped_enum}}
{{dsc inc|cpp/utility/dsc to_underlying}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
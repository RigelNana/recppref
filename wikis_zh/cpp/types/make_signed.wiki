{{cpp/title|make_signed}}
{{cpp/meta/navbar}}
{{ddcl|header=type_traits|since=c++11|1=
template&lt; class T &gt;
struct make_signed;
}}

若 {{tt|T}} 是整数（除 {{c/core|bool}}）或枚举类型，则提供 {{tt|T}} 的对应有符号整数类型的成员 typedef {{tt|type}}，它拥有相同的 cv 限定符。

若 {{tt|T}} 为有符号或无符号的 {{c/core|char}}、{{c/core|short}}、{{c/core|int}}、{{c/core|long}}、{{c/core|long long}}，则提供此列表中的 {{tt|T}} 的对应有符号类型。

若 {{tt|T}} 为枚举类型或 {{c/core|char}}、{{c/core|wchar_t}}{{rev inl|since=c++20|、{{c/core|char8_t}}}}、{{c/core|char16_t}}、{{c/core|char32_t}}，则提供与 {{tt|T}} 有相同 {{tt|sizeof}} 的有最小[[cpp/language/implicit_conversion#整型提升|等级]]的有符号整数类型。

{{rrev multi|until1=c++20
|rev1=否则，行为未定义。
|rev2=否则，程序非良构。
}}

{{cpp/types/nospec}}

===成员类型===
{{dsc begin}}
{{dsc hitem|名称|定义}}
{{dsc|{{tt|type}}|{{tt|T}} 的对应有符号整数类型}}
{{dsc end}}

===辅助类型===
{{dcl begin}}
{{dcl|since=c++14|1=
template&lt; class T &gt;
using make_signed_t = typename make_signed&lt;T&gt;::type;
}}
{{dcl end}}

===示例===
{{example
|code=
#include &lt;type_traits&gt;

enum struct E : unsigned short {};

int main()
{
    using char_type = std::make_signed_t&lt;unsigned char&gt;;
    using int_type  = std::make_signed_t&lt;unsigned int&gt;;
    using long_type = std::make_signed_t&lt;volatile unsigned long&gt;;
    using enum_type = std::make_signed_t&lt;E&gt;;

    static_assert(
        std::is_same_v&lt;char_type, signed char&gt; and
        std::is_same_v&lt;int_type, signed int&gt; and
        std::is_same_v&lt;long_type, volatile signed long&gt; and
        std::is_same_v&lt;enum_type, signed short&gt;
    );
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_signed}}
{{dsc inc|cpp/types/dsc is_unsigned}}
{{dsc inc|cpp/types/dsc make_unsigned}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|is_layout_compatible}}
{{cpp/meta/navbar}}

{{ddcl|header=type_traits|since=c++20|1=
template&lt; class T, class U &gt;
struct is_layout_compatible;
}}

如果 {{tt|T}} 与 {{tt|U}} 是[[cpp/language/data members#标准布局|''布局兼容''{{sep}}]]的类型，那么提供的成员常量 {{c|value}} 等于 {{c|true}}。否则，{{c|value}} 等于 {{c|false}}。

每个类型均与其任意 cv 限定版本布局兼容，即使它不是对象类型。

{{cpp/types/cvaub|type1=T|type2=U}}

{{cpp/types/nospec|pv}}

===辅助变量模板===
{{ddcl|since=c++20|1=
template&lt; class T, class U &gt;
constexpr bool is_layout_compatible_v = is_layout_compatible&lt;T, U&gt;::value;
}}
{{cpp/types/integral_constant/inherit| {{tt|T}} 与 {{tt|U}} 布局兼容}}

===注解===
有符号整数类型与其无符号对应类型之间并非布局兼容。{{c/core|char}} 既不与 {{c/core|signed char}} 也不与 {{c/core|unsigned char}} 布局兼容。

[[cpp/language/reinterpret_cast#类型别名化|相似类型]]之间，如果它们在忽略顶层 cv 限定后不是同一类型，则并非布局兼容。

枚举类型与其底层类型非布局兼容。

具有布局兼容但不相同（忽略 cv 限定）的元素类型的数组类型之间并非布局兼容，即使它们长度相等。

{{feature test macro|__cpp_lib_is_layout_compatible|{{tt|std::is_layout_compatible}}|value=201907L|std=C++20}}

===示例===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

struct Foo
{
    int x;
    char y;
};

struct FooNua
{
    int x;
    [[no_unique_address]] char y;
};

class Bar
{
    const int u = 42;
    volatile char v = '*';
};

enum E0 : int {};
enum class E1 : int {};

static_assert
(
    std::is_layout_compatible_v&lt;const void, volatile void&gt; == true  and
    std::is_layout_compatible_v&lt;Foo, Bar&gt;                  == true  and
    std::is_layout_compatible_v&lt;Foo[2], Bar[2]&gt;            == false and
    std::is_layout_compatible_v&lt;int, E0&gt;                   == false and
    std::is_layout_compatible_v&lt;E0, E1&gt;                    == true  and
    std::is_layout_compatible_v&lt;long, unsigned long&gt;       == false and
    std::is_layout_compatible_v&lt;char*, const char*&gt;        == false and
    std::is_layout_compatible_v&lt;char*, char* const&gt;        == true  and
    std::is_layout_compatible_v&lt;Foo, FooNua&gt;               == false // Note [1]
);

// [1] MSVC 错误地断言失败

int main() {}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_standard_layout}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
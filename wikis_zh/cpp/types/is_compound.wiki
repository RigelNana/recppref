{{cpp/types/traits/is|1=is_compound
|description=
如果 {{tt|T}} 是复合类型（即数组、函数、对象指针、函数指针、成员对象指针、成员函数指针、引用、类、联合体或枚举，以及前述类型的任何 cv 限定变体），那么提供的成员常量 {{tt|value}} 等于 {{c|true}}。对于其它任何类型，{{tt|value}} 等于 {{c|false}}。
|inherit_desc={{tt|T}} 为复合类型
}}

===注解===
复合类型是从基础类型构造的类型。任何 C++ 类型要么为基础类型，要么为复合类型。

===可能的实现===
{{eq fun
|1=
template&lt;class T&gt;
struct is_compound : std::integral_constant&lt;bool, !std::is_fundamental&lt;T&gt;::value&gt; {};
}}

===示例===
{{example
|code=
#include &lt;type_traits&gt;
#include &lt;iostream&gt;

static_assert(not std::is_compound_v&lt;int&gt;);
static_assert(std::is_compound_v&lt;int*&gt;);
static_assert(std::is_compound_v&lt;int&amp;&gt;);

void f();
static_assert(std::is_compound_v&lt;decltype(f)&gt;);
static_assert(std::is_compound_v&lt;decltype(&amp;f)&gt;);

static_assert(std::is_compound_v&lt;char[100]&gt;);

class C {};
static_assert(std::is_compound_v&lt;C&gt;);

union U {};
static_assert(std::is_compound_v&lt;U&gt;);

enum struct E { e };
static_assert(std::is_compound_v&lt;E&gt;);
static_assert(std::is_compound_v&lt;decltype(E::e)&gt;);

struct S
{
    int i : 8;
    int j;
    void foo();
};
static_assert(not std::is_compound_v&lt;decltype(S::i)&gt;);
static_assert(not std::is_compound_v&lt;decltype(S::j)&gt;);
static_assert(std::is_compound_v&lt;decltype(&amp;S::j)&gt;);
static_assert(std::is_compound_v&lt;decltype(&amp;S::foo)&gt;);

int main()
{
    std::cout &lt;&lt; "通过所有检查\n";
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_fundamental}}
{{dsc inc|cpp/types/dsc is_scalar}}
{{dsc inc|cpp/types/dsc is_object}}
{{dsc inc|cpp/types/dsc is_array}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
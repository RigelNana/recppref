{{cpp/title|remove_cvref}}
{{cpp/meta/navbar}}
{{dcl begin}}
{{dcl header|type_traits}}
{{dcl|since=c++20|1=
template&lt; class T &gt;
struct remove_cvref;
}}
{{dcl end}}

若类型 {{tt|T}} 为引用类型，则提供成员 {{tt|type}}，它是移除了最顶层 cv 限定符的 {{tt|T}} 所引用的类型。否则 {{tt|type}} 为移除最顶层 cv 限定符的 {{tt|T}}。

{{cpp/types/nospec}}

===成员类型===
{{dsc begin}}
{{dsc hitem|名称|定义}}
{{dsc|{{tt|type}}|{{tt|T}} 所引用的类型，或若 {{tt|T}} 不是引用则为其自身，移除顶层 cv 限定符}}
{{dsc end}}

===辅助类型===
{{ddcl|since=c++20|1=
template&lt; class T &gt;
using remove_cvref_t = remove_cvref&lt;T&gt;::type;
}}

===可能的实现===
{{eq fun
|1=
template&lt;class T&gt;
struct remove_cvref
{
    using type = std::remove_cv_t&lt;std::remove_reference_t&lt;T&gt;&gt;;
};
}}

===注解===
{{feature test macro|__cpp_lib_remove_cvref|{{tt|std::remove_cvref}}|value=201711L|std=C++20}}

===示例===
{{example
|code=
#include &lt;type_traits&gt;

int main()
{
    static_assert(std::is_same_v&lt;std::remove_cvref_t&lt;int&gt;, int&gt;);
    static_assert(std::is_same_v&lt;std::remove_cvref_t&lt;int&amp;&gt;, int&gt;);
    static_assert(std::is_same_v&lt;std::remove_cvref_t&lt;int&amp;&amp;&gt;, int&gt;);
    static_assert(std::is_same_v&lt;std::remove_cvref_t&lt;const int&amp;&gt;, int&gt;);
    static_assert(std::is_same_v&lt;std::remove_cvref_t&lt;const int[2]&gt;, int[2]&gt;);
    static_assert(std::is_same_v&lt;std::remove_cvref_t&lt;const int(&amp;)[2]&gt;, int[2]&gt;);
    static_assert(std::is_same_v&lt;std::remove_cvref_t&lt;int(int)&gt;, int(int)&gt;);
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc remove_cv}}
{{dsc inc|cpp/types/dsc remove_reference}}
{{dsc inc|cpp/types/dsc decay}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/types/traits/is|1=is_class
|description=
检查 {{tt|T}} 是否为非联合类类型。如果 {{tt|T}} 为类类型（但非联合体），那么提供的成员常量 {{c|value}} 等于 {{c|true}}。否则，{{c|value}} 等于 {{c|false}}。
|inherit_desc={{tt|T}} 为非联合类类型
}}

===可能的实现===
{{eq fun
|1=
namespace detail
{
    template&lt;class T&gt;
    std::integral_constant&lt;bool, !std::is_union&lt;T&gt;::value&gt; test(int T::*);

    template&lt;class&gt;
    std::false_type test(...);
}

template&lt;class T&gt;
struct is_class : decltype(detail::test&lt;T&gt;(nullptr)) {};
}}

===示例===
{{example
|code=
#include &lt;type_traits&gt;

struct A {};
static_assert(std::is_class&lt;A&gt;::value);

class B {};
static_assert(std::is_class_v&lt;B&gt;);
static_assert(not std::is_class_v&lt;B*&gt;);
static_assert(not std::is_class_v&lt;B&amp;&gt;);
static_assert(std::is_class_v&lt;const B&gt;);

enum class C {};
static_assert(not std::is_class&lt;E&gt;::value);

union U { class UC {}; };
static_assert(not std::is_class_v&lt;U&gt;);
static_assert(std::is_class_v&lt;U::UC&gt;);

static_assert(not std::is_class_v&lt;int&gt;);

static_assert(std::is_class_v&lt;struct S&gt;, "incomplete class");
static_assert(std::is_class_v&lt;class C&gt;, "incomplete class");

int main() {}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_union}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|remove_all_extents}}
{{cpp/types/navbar}}
{{dcl begin}}
{{dcl header | type_traits}}
{{dcl | since=c++11 |
template&lt; class T &gt;
struct remove_all_extents;
}}
{{dcl end}}

若 {{tt|T}} 是某类型 {{tt|X}} 的多维数组，则提供的成员 typedef {{tt|type}} 等于 {{tt|X}}，否则 {{tt|type}} 等于 {{tt|T}}。

{{cpp/types/nospec}}

===成员类型===
{{dsc begin}}
{{dsc hitem |名称|定义}}
{{dsc | {{tt|type}} |{{tt|T}} 的元素类型}}
{{dsc end}}

===辅助类型===
{{dcl begin}}
{{dcl | since=c++14 | 1=
template&lt; class T &gt;
using remove_all_extents_t = typename remove_all_extents&lt;T&gt;::type;
}}
{{dcl end}}

===可能的实现===
{{eq fun
 | 1=
template&lt;class T&gt;
struct remove_all_extents { typedef T type; };

template&lt;class T&gt;
struct remove_all_extents&lt;T[]&gt; {
    typedef typename remove_all_extents&lt;T&gt;::type type;
};

template&lt;class T, std::size_t N&gt;
struct remove_all_extents&lt;T[N]&gt; {
    typedef typename remove_all_extents&lt;T&gt;::type type;
};
}}

===示例===
{{example
 |
 | code=
#include &lt;iostream&gt;
#include &lt;type_traits&gt;
#include &lt;typeinfo&gt;

template&lt;class A&gt;
void foo(const A&amp;)
{
    typedef typename std::remove_all_extents&lt;A&gt;::type Type;
    std::cout &lt;&lt; "底层类型: " &lt;&lt; typeid(Type).name() &lt;&lt; '\n';
}

int main()
{
    float a0;
    float a1[1][2][3];
    float a2[1][1][1][1][2];
    float* a3;
    int a4[3][2];
    double a5[2][3];
    struct X { int m; } x0[3][3];

    info(a0);
    info(a1);
    info(a2);
    info(a3);
    info(a4);
    info(a5);
    info(x0);
}
 | p=true
 | output=
底层类型: float
底层类型: float
底层类型: float
底层类型: float*
底层类型: int
底层类型: double
底层类型: main::X
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/types/dsc is_array}}
{{dsc inc | cpp/types/dsc rank}}
{{dsc inc | cpp/types/dsc extent}}
{{dsc inc | cpp/types/dsc remove_extent}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
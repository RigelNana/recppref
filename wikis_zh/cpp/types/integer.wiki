{{title|定宽整数类型 {{mark since c++11}}}}
{{cpp/types/navbar}}

===类型===
{{dsc begin}}
{{dsc header|cstdint}}
{{dsc inc|cpp/types/dsc intN_t}}
{{dsc inc|cpp/types/dsc int_fastN_t}}
{{dsc inc|cpp/types/dsc int_leastN_t}}
{{dsc inc|cpp/types/dsc intmax_t}}
{{dsc inc|cpp/types/dsc intptr_t}}
{{dsc inc|cpp/types/dsc uintN_t}}
{{dsc inc|cpp/types/dsc uint_fastN_t}}
{{dsc inc|cpp/types/dsc uint_leastN_t}}
{{dsc inc|cpp/types/dsc uintmax_t}}
{{dsc inc|cpp/types/dsc uintptr_t}}
{{dsc end}}

实现可在 ''N'' 不是 8、 16、 32 或 64 时定义 typedef 名 {{tt|int''N''_t}}、{{tt|int_fast''N''_t}}、{{tt|int_least''N''_t}}、{{tt|uint''N''_t}}、{{tt|uint_fast''N''_t}} 及 {{tt|uint_least''N''_t}}。形为 {{tt|int''N''_t}} 的 typedef 名只有在实现支持有该宽度而无填充的整数类型才可以定义。从而 {{tt|std::uint24_t}} 代表宽度正好是 24 位的无符号整数类型。

下面列出的每个宏当且仅当实现定义了对应的 typedef 名时才得以定义。宏 {{tt|INT''N''_C}} 与 {{tt|UINT''N''_C}} 分别对应 typedef 名 {{tt|int_least''N''_t}} 与 {{tt|uint_least''N''_t}}。

===宏常量===
{{dsc begin}}
{{dsc header|cstdint}}
{{dsc h2|有符号整数：最小值}}
{{dsc inc|cpp/types/dsc INTn_MIN}}
{{dsc inc|cpp/types/dsc INT_FASTn_MIN}}
{{dsc inc|cpp/types/dsc INT_LEASTn_MIN}}
{{dsc inc|cpp/types/dsc INTPTR_MIN}}
{{dsc inc|cpp/types/dsc INTMAX_MIN}}
{{dsc h2|有符号整数：最大值|nolink=true}}
{{dsc inc|cpp/types/dsc INTn_MAX}}
{{dsc inc|cpp/types/dsc INT_FASTn_MAX}}
{{dsc inc|cpp/types/dsc INT_LEAST8_MAX}}
{{dsc inc|cpp/types/dsc INTPTR_MAX}}
{{dsc inc|cpp/types/dsc INTMAX_MAX}}
{{dsc h2|无符号整数：最大值|nolink=true}}
{{dsc inc|cpp/types/dsc UINTn_MAX}}
{{dsc inc|cpp/types/dsc UINT_FASTn_MAX}}
{{dsc inc|cpp/types/dsc UINT_LEASTn_MAX}}
{{dsc inc|cpp/types/dsc UINTPTR_MAX}}
{{dsc inc|cpp/types/dsc UINTMAX_MAX}}
{{dsc end}}

===最小宽度整数常量的函数宏===
{{dsc begin}}
{{dsc inc|cpp/types/dsc INTn_C}}
{{dsc inc|cpp/types/dsc INTMAX_C}}
{{dsc inc|cpp/types/dsc UINTn_C}}
{{dsc inc|cpp/types/dsc UINTMAX_C}}
{{dsc end}}

{{source|
#include &lt;cstdint&gt;
UINT64_C(0x123) // 展开成类型为 uint64_t 而值为 0x123 的字面量
}}

===格式宏常量===
{{dsc begin}}
{{dsc header|cinttypes}}
{{dsc end}}

===={{lc|std::fprintf}} 系列函数的格式宏常量====
此处列出的每个 {{tt|PRI}} 宏当且仅当实现定义了对应的 typedef 名时才得以定义。

{| class="wikitable" style="text-align:center; font-size:85%; max-width:90em;"
|-
! rowspan=2 | {{c/core|int}} 或&lt;br&gt;{{c/core|unsigned int}}&lt;br&gt;的等价者
! rowspan=2 | 描述
! colspan=5 | 数据类型的宏
|-
| &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;{{vertical|{{tt|std::int}}'''x'''{{tt|_t}}}}&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
| {{vertical|{{tt|std::int_least}}'''x'''{{tt|_t}}}}
| {{vertical|{{tt|std::int_fast}}'''x'''{{tt|_t}}}}
| {{vertical|{{tt|std::intmax_t}}}}
| {{vertical|{{tt|std::intptr_t}}}}
|-
! {{tt|d}}
| rowspan=2 style="text-align:left;" | 有符号十进制整数值的输出
| PRId'''x'''
| PRIdLEAST'''x'''
| PRIdFAST'''x'''
| PRIdMAX
| PRIdPTR
|-
! {{tt|i}}
| PRIi'''x'''
| PRIiLEAST'''x'''
| PRIiFAST'''x'''
| PRIiMAX
| PRIiPTR
|-
! {{tt|u}}
| style="text-align:left;" | 无符号十进制整数值的输出
| PRIu'''x'''
| PRIuLEAST'''x'''
| PRIuFAST'''x'''
| PRIuMAX
| PRIuPTR
|-
! {{tt|o}}
| style="text-align:left;" | 无符号八进制整数值的输出
| PRIo'''x'''
| PRIoLEAST'''x'''
| PRIoFAST'''x'''
| PRIoMAX
| PRIoPTR
|-
! {{tt|x}}
| style="text-align:left;" | 无符号小写十六进制整数值的输出
| PRIx'''x'''
| PRIxLEAST'''x'''
| PRIxFAST'''x'''
| PRIxMAX
| PRIxPTR
|-
! {{tt|X}}
| style="text-align:left;" | 无符号大写十六进制整数值的输出
| PRIX'''x'''
| PRIXLEAST'''x'''
| PRIXFAST'''x'''
| PRIXMAX
| PRIXPTR
|}

===={{lc|std::fscanf}} 系列函数的格式宏常量====
此处列出的每个 {{tt|SCN}} 宏当且仅当实现定义了对应的 typedef 名且拥有适合该类型的 {{lc|std::fscanf}} 长度修饰符时才得以定义。

{| class="wikitable" style="text-align:center; font-size:85%; max-width:90em;"
|-
! rowspan=2 | {{c/core|int}} 或&lt;br&gt;{{c/core|unsigned int}}&lt;br&gt;的等价者
! rowspan=2 | 描述
! colspan=5 | 数据类型的宏
|-
| &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;{{vertical|{{tt|std::int}}'''x'''{{tt|_t}}}}&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
| {{vertical|{{tt|std::int_least}}'''x'''{{tt|_t}}}}
| {{vertical|{{tt|std::int_fast}}'''x'''{{tt|_t}}}}
| {{vertical|{{lc|std::intmax_t}}}}
| {{vertical|{{lc|std::intptr_t}}}}
|-
! {{tt|d}}
| style="text-align:left;" | 有符号十进制整数值的输入
| SCNd'''x'''
| SCNdLEAST'''x'''
| SCNdFAST'''x'''
| SCNdMAX
| SCNdPTR
|-
! {{tt|i}}
| style="text-align:left;" | 有符号整数值的输入
| SCNi'''x'''
| SCNiLEAST'''x'''
| SCNiFAST'''x'''
| SCNiMAX
| SCNiPTR
|-
! {{tt|u}}
| style="text-align:left;" | 无符号十进制整数值的输入
| SCNu'''x'''
| SCNuLEAST'''x'''
| SCNuFAST'''x'''
| SCNuMAX
| SCNuPTR
|-
! {{tt|o}}
| style="text-align:left;" | 无符号八进制整数值的输入
| SCNo'''x'''
| SCNoLEAST'''x'''
| SCNoFAST'''x'''
| SCNoMAX
| SCNoPTR
|-
! {{tt|x}}
| style="text-align:left;" | 无符号十六进制整数值的输入
| SCNx'''x'''
| SCNxLEAST'''x'''
| SCNxFAST'''x'''
| SCNxMAX
| SCNxPTR
|}
&lt;!-- 注意：不存在列于 C++11 和 C++14 的 [c.files] 中的 SCNX* 宏；它们是编辑错误，并在 C++14 后的标准草案中更正 --&gt;

===注解===
因为 C++ 会将后面紧跟一个字符的字符串字面量判读为[[cpp/language/user literal|用户定义字面量]]，所以诸如 {{c|printf("%"PRId64"\n",n);}} 这样的 C 代码在 C++ 中非法，并要求 {{tt|PRId64}} 前要有空格。

C99 标准建议 C++ 实现不应定义上述极限、常量或格式化宏，除非在包含相对的 C 标头（{{tt|stdint.h}} 或 {{tt|inttypes.h}}）前（分别）定义了宏 {{c|__STDC_LIMIT_MACROS}}、{{c|__STDC_CONSTANT_MACROS}} 或 {{c|__STDC_FORMAT_MACROS}}。此建议未被任何 C++ 标准采纳，并在 C11 中被移除。然而，某些实现（例如 glibc 2.17）尝试应用此规则，而可能需要定义 {{tt|__STDC}} 宏；C++ 编译器可以通过在某些环境中自动定义它们来做变通。

{{tt|std::int8_t}} 可以是 {{c/core|signed char}}，{{tt|std::uint8_t}} 也可以是 {{c/core|unsigned char}}，但两者都不能是 {{c/core|char}}（因为 {{c/core|char}} 既不视为“有符号整数类型”也不视为“无符号整数类型”）。

===示例===
{{example
|参见有关此示例中在[[#格式宏常量|格式宏]]前面使用空格的一条[[cpp/language/user_literal#注解|注解]]。
|code=
#include &lt;cinttypes&gt;
#include &lt;cstdio&gt;

int main()
{
    std::printf("%zu\n", sizeof(std::int64_t));
    std::printf("%s\n", PRId64);
    std::printf("%+" PRId64 "\n", INT64_MIN);
    std::printf("%+" PRId64 "\n", INT64_MAX);
    
    std::int64_t n = 7;
    std::printf("%+" PRId64 "\n", n);
}
|p=true
|output=
8
lld
-9223372036854775808
+9223372036854775807
+7
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2820|std=C++11|before=可选的 typedef 名与宏的要求与 C 不一致|after=使得一致}}
{{dr list end}}

===引用===
{{ref std c++23}}
{{ref std|section=17.4.1|title=Header &lt;cstdint&gt; synopsis|id=cstdint.syn}}
{{ref std|section=31.13.2|title=Header &lt;cinttypes&gt; synopsis|id=cinttypes.syn}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=17.4|title=Integer types|id=cstdint}}
{{ref std|section=29.12.2|title=Header &lt;cinttypes&gt; synopsis|id=cinttypes.syn}}
{{ref std end}}
{{ref std c++17}}
{{ref std|section=21.4|title=Integer types|id=cstdint}}
{{ref std|section=30.11.2|title=Header &lt;cinttypes&gt; synopsis|id=cinttypes.syn}}
{{ref std end}}
{{ref std c++14}}
{{ref std|section=18.4|title=Integer types|id=cstdint}}
{{ref std|section=27.9.2|title=C library files|id=c.files}}
{{ref std end}}
{{ref std c++11}}
{{ref std|section=18.4|title=Integer types|id=cstdint}}
{{ref std|section=27.9.2|title=C library files|id=c.files}}
{{ref std end}}

===参阅===
* [[cpp/language/types|基础类型]]
{{dsc begin}}
{{dsc see c|c/types/integer|定宽整数类型|nomono=true}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/types/numeric_limits/title|lowest}}
{{cpp/types/numeric_limits/navbar}}
{{dcl begin}}
{{dcl|since=c++11|
static constexpr T lowest() noexcept;
}}
{{dcl end}}

返回数值类型 {{tt|T}} 可表示的最低有限值，即满足无其他有限值 {{c|y}} 符合 {{c|y &lt; x}} 的有限值 {{c|x}}。这对于浮点数类型与 {{c|std::numeric_limits&lt;T&gt;::min()}} 不同。只对有界类型有意义。

===返回值===
{{dsc begin}}
{{dsc hitem | {{tt|T}} | {{c|std::numeric_limits&lt;T&gt;::lowest()}} }}
{{dsc | {{c/core|/* 未特化 */}}    | {{c|T()}}        }}
{{dsc | {{c/core|bool}}               | {{c|false}}      }}
{{dsc | {{c/core|char}}               | {{lc|CHAR_MIN}}  }}
{{dsc | {{c/core|signed char}}        | {{lc|SCHAR_MIN}} }}
{{dsc | {{c/core|unsigned char}}      | {{c|0}}          }}
{{dsc | {{c/core|wchar_t}}            | {{lc|WCHAR_MIN}} }}
{{dsc | {{c/core|char8_t}} {{mark since c++20}}            | {{c|0}}          }}
{{dsc | {{c/core|char16_t}}           | {{c|0}}          }}
{{dsc | {{c/core|char32_t}}           | {{c|0}}          }}
{{dsc | {{c/core|short}}              | {{lc|SHRT_MIN}}  }}
{{dsc | {{c/core|unsigned short}}     | {{c|0}}          }}
{{dsc | {{c/core|int}}                | {{lc|INT_MIN}}   }}
{{dsc | {{c/core|unsigned int}}       | {{c|0}}          }}
{{dsc | {{c/core|long}}               | {{lc|LONG_MIN}}  }}
{{dsc | {{c/core|unsigned long}}      | {{c|0}}          }}
{{dsc | {{c/core|long long}}          | {{lc|LLONG_MIN}} }}
{{dsc | {{c/core|unsigned long long}} | {{c|0}}          }}
{{dsc | {{c/core|float}}              | {{c|-FLT_MAX}}   }}
{{dsc | {{c/core|double}}             | {{c|-DBL_MAX}}   }}
{{dsc | {{c/core|long double}}        | {{c|-LDBL_MAX}}  }}
{{dsc end}}

===注解===
对每个标准 C++ 浮点数类型 {{tt|T}} 均有 {{c|1=std::numeric_limits&lt;T&gt;::lowest() == -std::numeric_limits&lt;T&gt;::max()}}，但这不必对任何第三方特化成立。

===示例===
{{example
|演示对于浮点数类型的 {{lc|min()}}、{{lc|max()}} 及 {{tt|lowest()}}：
|code=
#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;string_view&gt;

template&lt;typename T&gt;
void print_twice(std::string_view type, T value)
{
    std::cout &lt;&lt; '\t' &lt;&lt; type &lt;&lt; "："
              &lt;&lt; std::defaultfloat &lt;&lt; value &lt;&lt; " 或 "
              &lt;&lt; std::hexfloat &lt;&lt; value &lt;&lt; '\n';
}

int main()
{
    // min()
    std::cout &lt;&lt; "std::numeric_limits&lt;T&gt;::min()：\n";
    print_twice("float", std::numeric_limits&lt;float&gt;::min());
    print_twice("double", std::numeric_limits&lt;double&gt;::min());
    print_twice("long double", std::numeric_limits&lt;long double&gt;::min());
    
    // lowest()
    std::cout &lt;&lt; "std::numeric_limits&lt;T&gt;::lowest()：\n";
    print_twice("float", std::numeric_limits&lt;float&gt;::lowest());
    print_twice("double", std::numeric_limits&lt;double&gt;::lowest());
    print_twice("long double", std::numeric_limits&lt;long double&gt;::lowest());
    
    // max()
    std::cout &lt;&lt; "std::numeric_limits&lt;T&gt;::max()：\n";
    print_twice("float", std::numeric_limits&lt;float&gt;::max());
    print_twice("double", std::numeric_limits&lt;double&gt;::max());
    print_twice("long double", std::numeric_limits&lt;long double&gt;::max());
}
|output=
std::numeric_limits&lt;T&gt;::min()：
	float：1.17549e-38 或 0x1p-126
	double：2.22507e-308 或 0x1p-1022
	long double：3.3621e-4932 或 0x8p-16385
std::numeric_limits&lt;T&gt;::lowest()：
	float：-3.40282e+38 或 -0x1.fffffep+127
	double：-1.79769e+308 或 -0x1.fffffffffffffp+1023
	long double：-1.18973e+4932 或 -0xf.fffffffffffffffp+16380
std::numeric_limits&lt;T&gt;::max()：
	float：3.40282e+38 或 0x1.fffffep+127
	double：1.79769e+308 或 0x1.fffffffffffffp+1023
	long double：1.18973e+4932 或 0xf.fffffffffffffffp+16380
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc min}}
{{dsc inc|cpp/types/numeric_limits/dsc denorm_min}}
{{dsc inc|cpp/types/numeric_limits/dsc max}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
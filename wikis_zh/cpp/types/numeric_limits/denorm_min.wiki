{{cpp/types/numeric_limits/title|denorm_min}}
{{cpp/types/numeric_limits/navbar}}
{{dcl begin}}
{{dcl rev multi|until1=c++11
|dcl1=
static T denorm_min() throw();
|dcl2=
static constexpr T denorm_min() noexcept;
}}
{{dcl end}}

在 {{c|1=std::numeric_limits&lt;T&gt;::has_denorm != std::denorm_absent}} 的情况下返回 {{tt|T}} 类型的最小正[[enwiki:Denormal number|非正规值]]，否则返回 {{c|std::numeric_limits&lt;T&gt;::min()}}。只对浮点数类型有意义。

===返回值===
{{dsc begin}}
{{dsc hitem | {{tt|T}} | {{c|std::numeric_limits&lt;T&gt;::denorm_min()}} }}
{{dsc | {{c/core|/* 未特化 */}} | {{c|T()}} }}
{{dsc | {{c/core|bool}}              | {{c|false}} }}
{{dsc | {{c/core|char}}              | {{c|0}} }}
{{dsc | {{c/core|signed char}}       | {{c|0}} }}
{{dsc | {{c/core|unsigned char}}     | {{c|0}} }}
{{dsc | {{c/core|wchar_t}}           | {{c|0}} }}
{{dsc | {{c/core|char8_t}} {{mark since c++20}}  | {{c|0}} }}
{{dsc | {{c/core|char16_t}} {{mark since c++11}} | {{c|0}} }}
{{dsc | {{c/core|char32_t}} {{mark since c++11}} | {{c|0}} }}
{{dsc | {{c/core|short}}             | {{c|0}} }}
{{dsc | {{c/core|unsigned short}}    | {{c|0}} }}
{{dsc | {{c/core|int}}               | {{c|0}} }}
{{dsc | {{c/core|unsigned int}}      | {{c|0}} }}
{{dsc | {{c/core|long}}              | {{c|0}} }}
{{dsc | {{c/core|unsigned long}}     | {{c|0}} }}
{{dsc | {{c/core|long long}} {{mark since c++11}}          | {{c|0}} }}
{{dsc | {{c/core|unsigned long long}} {{mark since c++11}} | {{c|0}} }}
{{dsc | {{c/core|float}}             | {{lc|FLT_TRUE_MIN}}（在 {{c|std::numeric_limits&lt;float&gt;::is_iec559}}&lt;br&gt;是 {{c|true}} 的情况下就是 {{mathjax-or|\(\scriptsize 2^{-149}\)|2{{su|p=-149}}}}） }}
{{dsc | {{c/core|double}}            | {{lc|DBL_TRUE_MIN}}（在 {{c|std::numeric_limits&lt;double&gt;::is_iec559}}&lt;br&gt;是 {{c|true}} 的情况下就是 {{mathjax-or|\(\scriptsize 2^{-1074}\)|2{{su|p=-1074}}}}） }}
{{dsc | {{c/core|long double}}       | {{lc|LDBL_TRUE_MIN}} }}
{{dsc end}}

===示例===
{{example
|演示 {{tt|denorm_min()}} 的底层位结构并打印值：
|code=
#include &lt;cassert&gt;
#include &lt;cstdint&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;

int main()
{
    // 最小非正规值拥有符号位 = 0，指数 = 0
    // 且只有尾数的最小有效数字位是 1
    std::uint32_t denorm_bits = 0x0001;
    float denorm_float;
    std::memcpy(&amp;denorm_float, &amp;denorm_bits, sizeof(float));
    
    assert(denorm_float == std::numeric_limits&lt;float&gt;::denorm_min());
    
    std::cout &lt;&lt; "float\tmin()\t\tdenorm_min()\n";
    std::cout &lt;&lt; "\t" &lt;&lt; std::numeric_limits&lt;float&gt;::min() &lt;&lt; '\t';
    std::cout &lt;&lt;         std::numeric_limits&lt;float&gt;::denorm_min() &lt;&lt; '\n';
    
    std::cout &lt;&lt; "double\tmin()\t\tdenorm_min()\n";
    std::cout &lt;&lt; "\t" &lt;&lt; std::numeric_limits&lt;double&gt;::min() &lt;&lt; '\t';
    std::cout &lt;&lt;         std::numeric_limits&lt;double&gt;::denorm_min() &lt;&lt; '\n';
}
|p=true
|output=
float	min()		denorm_min()
	1.17549e-38	1.4013e-45
double	min()		denorm_min()
	2.22507e-308	4.94066e-324
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc min}}
{{dsc inc|cpp/types/numeric_limits/dsc has_denorm}}
{{dsc inc|cpp/types/numeric_limits/dsc lowest}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
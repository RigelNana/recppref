{{cpp/types/numeric_limits/title|traps}}
{{cpp/types/numeric_limits/navbar}}
{{dcl begin}}
{{dcl rev multi|until1=c++11
|dcl1=
static const bool traps;
|dcl2=
static constexpr bool traps;
}}
{{dcl end}}

{{c|std::numeric_limits&lt;T&gt;::traps}} 的值，对所有在程序启动时至少有一个在用作算术运算实参时会生成{{enwiki|Trap (computing)|陷阱}}的值的算术类型 {{tt|T}} 是 {{c|true}}。 

===标准特化===
{{dsc begin}}
{{dsc hitem | {{tt|T}} | {{c|std::numeric_limits&lt;T&gt;::traps}} 的值}}
{{dsc | {{c/core|/* 未特化 */}}  | {{c|false}} }}
{{dsc | {{c/core|bool}}              | {{c|false}} }}
{{dsc | {{c/core|char}}              | 通常是 {{c|true}} }}
{{dsc | {{c/core|signed char}}       | 通常是 {{c|true}} }}
{{dsc | {{c/core|unsigned char}}     | 通常是 {{c|true}} }}
{{dsc | {{c/core|wchar_t}}           | 通常是 {{c|true}} }}
{{dsc | {{c/core|char8_t}} {{mark since c++20}}  | 通常是 {{c|true}} }}
{{dsc | {{c/core|char16_t}} {{mark since c++11}} | 通常是 {{c|true}} }}
{{dsc | {{c/core|char32_t}} {{mark since c++11}} | 通常是 {{c|true}} }}
{{dsc | {{c/core|short}}             | 通常是 {{c|true}} }}
{{dsc | {{c/core|unsigned short}}    | 通常是 {{c|true}} }}
{{dsc | {{c/core|int}}               | 通常是 {{c|true}} }}
{{dsc | {{c/core|unsigned int}}      | 通常是 {{c|true}} }}
{{dsc | {{c/core|long}}              | 通常是 {{c|true}} }}
{{dsc | {{c/core|unsigned long}}     | 通常是 {{c|true}} }}
{{dsc | {{c/core|long long}} {{mark since c++11}}         | 通常是 {{c|true}} }}
{{dsc | {{c/core|unsigned long long}} {{mark since c++11}} | 通常是 {{c|true}} }}
{{dsc | {{c/core|float}}             | 通常是 {{c|false}} }}
{{dsc | {{c/core|double}}            | 通常是 {{c|false}} }}
{{dsc | {{c/core|long double}}       | 通常是 {{c|false}} }}
{{dsc end}}

===注解===
大多数平台上，除以零始终会产生陷阱，而对所有支持值 {{c|0}} 的整数类型，{{c|std::numeric_limits&lt;T&gt;::traps}} 都是 {{c|true}}。类型 {{c/core|bool}} 例外：即使除以 {{c|false}} 因为从 {{c/core|bool}} 整数提升到 {{c/core|int}} 而产生陷阱，这也是零值的 {{c/core|int}} 所产生的陷阱。零不是 {{c/core|bool}} 的值。

大多数平台上，浮点数异常可以在运行时开关（例如 Linux 上的 {{c|feenableexcept()}} 或 Windows 上的 {{c|_controlfp}}），这种情况下 {{c|std::numeric_limits&lt;T&gt;::traps}} 对浮点数类型的值反映程序启动时的浮点数陷阱设施，它在大多数现代系统上是 {{c|false}}。{{enwiki|DEC Alpha}} 程序可以是例外，不以 {{tt|-ieee}} 编译程序时是 {{c|true}}。

===示例===
{{example
|
|code=
#include &lt;iostream&gt;
#include &lt;limits&gt;

int main()
{
    std::cout &lt;&lt; std::boolalpha
              &lt;&lt; "bool:     traps = " &lt;&lt; std::numeric_limits&lt;bool&gt;::traps &lt;&lt; '\n'
              &lt;&lt; "char:     traps = " &lt;&lt; std::numeric_limits&lt;char&gt;::traps &lt;&lt; '\n'
              &lt;&lt; "char16_t: traps = " &lt;&lt; std::numeric_limits&lt;char16_t&gt;::traps &lt;&lt; '\n'
              &lt;&lt; "long:     traps = " &lt;&lt; std::numeric_limits&lt;long&gt;::traps &lt;&lt; '\n'
              &lt;&lt; "float:    traps = " &lt;&lt; std::numeric_limits&lt;float&gt;::traps &lt;&lt; '\n';
}
|p=true
|output=
// GCC 输出:
bool:     traps = true
char:     traps = true
char16_t: traps = true
long:     traps = true
float:    traps = false

// Clang 输出:
bool:     traps = false
char:     traps = true
char16_t: traps = true
long:     traps = true
float:    traps = false
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=497|std=C++98|before=不明确在运行时启用或禁用陷阱后返回的值|after=返回在程序启动时的启用状态}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc|[[cpp/numeric/fenv|浮点环境]]}}
{{dsc inc|cpp/types/numeric_limits/dsc tinyness_before}}
{{dsc inc|cpp/types/numeric_limits/dsc has_denorm_loss}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/types/numeric_limits/title|min}}
{{cpp/types/numeric_limits/navbar}}
{{dcl begin}}
{{dcl header|limits}}
{{dcl rev multi|until1=c++11
|dcl1=
static T min() throw();
|dcl2=
static constexpr T min() noexcept; 
}}
{{dcl end}}

返回数值类型 {{tt|T}} 可表示的最小有限值。

对于有非正规化的浮点数类型，{{tt|min()}} 返回最小的正规值。''注意此行为可能是非预期的''，特别是在与 {{tt|min()}} 对整数类型的行为比较时。{{rev inl|since=c++11|需要找到没有比它更小的值的值可以使用 {{rlpf|lowest}}}}。

{{tt|min()}} 只对有界类型和无界无符号类型意义。

===返回值===
{{dsc begin}}
{{dsc hitem | {{tt|T}} | {{c|std::numeric_limits&lt;T&gt;::min()}} }}
{{dsc | {{c/core|/* 未特化 */}}   | {{c|T()}}       }}
{{dsc | {{c/core|bool}}              | {{c|false}}      }}
{{dsc | {{c/core|char}}              | {{c|CHAR_MIN}}  }}
{{dsc | {{c/core|signed char}}       | {{c|SCHAR_MIN}} }}
{{dsc | {{c/core|unsigned char}}     | {{c|0}}          }}
{{dsc | {{c/core|wchar_t}}           | {{c|WCHAR_MIN}} }}
{{dsc | {{c/core|char8_t}} {{mark since c++20}}  | {{c|0}}          }}
{{dsc | {{c/core|char16_t}} {{mark since c++11}} | {{c|0}}          }}
{{dsc | {{c/core|char32_t}} {{mark since c++11}} | {{c|0}}          }}
{{dsc | {{c/core|short}}             | {{c|SHRT_MIN}}  }}
{{dsc | {{c/core|unsigned short}}    | {{c|0}}          }}
{{dsc | {{c/core|int}}               | {{c|INT_MIN}}   }}
{{dsc | {{c/core|unsigned int}}      | {{c|0}}          }}
{{dsc | {{c/core|long}}              | {{c|LONG_MIN}}  }}
{{dsc | {{c/core|unsigned long}}     | {{c|0}}          }}
{{dsc | {{c/core|long long}} {{mark since c++11}}          | {{c|LLONG_MIN}} }}
{{dsc | {{c/core|unsigned long long}} {{mark since c++11}} | {{c|0}}          }}
{{dsc | {{c/core|float}}             | {{c|FLT_MIN}}   }}
{{dsc | {{c/core|double}}            | {{c|DBL_MIN}}   }}
{{dsc | {{c/core|long double}}       | {{c|LDBL_MIN}}  }}
{{dsc end}}

===示例===
{{example
|演示以 typedef 类型使用，及整数和浮点数类型间结果符号的差异：
|code=
#include &lt;cstddef&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;

// 我们需要把 char 类型按没有前导 F 的整数打印
auto p(auto x) { return x; }
auto p(char x) { return x &amp; static_cast&lt;unsigned char&gt;(-1); }

template &lt;typename T&gt;
void print_one(std::string_view type_name)
{
    constexpr T min = std::numeric_limits&lt;T&gt;::min();
    std::cout 
        &lt;&lt; std::dec &lt;&lt; std::defaultfloat &lt;&lt; std::setw(14) &lt;&lt; type_name
        &lt;&lt; " (" &lt;&lt; std::setw(2) &lt;&lt; sizeof(T) &lt;&lt; " 字节): " &lt;&lt; +min;

    if constexpr (min != 0)
        std::cout &lt;&lt; " 或 " &lt;&lt; std::showbase &lt;&lt; std::hex &lt;&lt; std::hexfloat &lt;&lt; p(min);

    std::cout &lt;&lt; '\n';
}

#define SHOW(T) print_one&lt;T&gt;(#T)

int main()
{
    SHOW(bool);
    SHOW(char);
    SHOW(unsigned char);
    SHOW(short);
    SHOW(unsigned short);
    SHOW(signed);
    SHOW(unsigned);
    SHOW(std::ptrdiff_t);
    SHOW(std::size_t);
    SHOW(float);
    SHOW(double);
    SHOW(long double);
}
|p=true
|output=&lt;nowiki/&gt;
          bool ( 1 字节): 0
          char ( 1 字节): -128 或 0x80
 unsigned char ( 1 字节): 0
         short ( 2 字节): -32768 或 0x8000
unsigned short ( 2 字节): 0
        signed ( 4 字节): -2147483648 或 0x80000000
      unsigned ( 4 字节): 0
std::ptrdiff_t ( 8 字节): -9223372036854775808 或 0x8000000000000000
   std::size_t ( 8 字节): 0
         float ( 4 字节): 1.17549e-38 或 0x1p-126
        double ( 8 字节): 2.22507e-308 或 0x1p-1022
   long double (16 字节): 3.3621e-4932 或 0x8p-16385
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc lowest}}
{{dsc inc|cpp/types/numeric_limits/dsc denorm_min}}
{{dsc inc|cpp/types/numeric_limits/dsc max}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
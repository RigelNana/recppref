{{cpp/types/numeric_limits/title|round_style}}
{{cpp/types/numeric_limits/navbar}}
{{dcl begin}}
{{dcl rev multi|until1=c++11
|dcl1=
static const std::float_round_style round_style;
|dcl2=
static constexpr std::float_round_style round_style;
}}
{{dcl end}}

{{c|std::numeric_limits&lt;T&gt;::round_style}} 的值鉴别浮点数类型 {{tt|T}} 要存储无法以 {{tt|T}} 表示的值时所用的舍入模式。

===标准特化===
{{dsc begin}}
{{dsc hitem | {{tt|T}} | {{c|std::numeric_limits&lt;T&gt;::round_style}} 的值}}
{{dsc | {{c/core|/* 未特化 */}}     | {{lc|std::round_toward_zero}} }}
{{dsc | {{c/core|bool}}              | {{lc|std::round_toward_zero}} }}
{{dsc | {{c/core|char}}              | {{lc|std::round_toward_zero}} }}
{{dsc | {{c/core|signed char}}       | {{lc|std::round_toward_zero}} }}
{{dsc | {{c/core|unsigned char}}     | {{lc|std::round_toward_zero}} }}
{{dsc | {{c/core|wchar_t}}           | {{lc|std::round_toward_zero}} }}
{{dsc | {{c/core|char8_t}} {{mark since c++20}}  | {{lc|std::round_toward_zero}} }}
{{dsc | {{c/core|char16_t}} {{mark since c++11}} | {{lc|std::round_toward_zero}} }}
{{dsc | {{c/core|char32_t}} {{mark since c++11}} | {{lc|std::round_toward_zero}} }}
{{dsc | {{c/core|short}}             | {{lc|std::round_toward_zero}} }}
{{dsc | {{c/core|unsigned short}}    | {{lc|std::round_toward_zero}} }}
{{dsc | {{c/core|int}}               | {{lc|std::round_toward_zero}} }}
{{dsc | {{c/core|unsigned int}}      | {{lc|std::round_toward_zero}} }}
{{dsc | {{c/core|long}}              | {{lc|std::round_toward_zero}} }}
{{dsc | {{c/core|unsigned long}}     | {{lc|std::round_toward_zero}} }}
{{dsc | {{c/core|long long}} {{mark since c++11}}         | {{lc|std::round_toward_zero}} }}
{{dsc | {{c/core|unsigned long long}} {{mark since c++11}}| {{lc|std::round_toward_zero}} }}
{{dsc | {{c/core|float}}             | 通常是 {{lc|std::round_to_nearest}} }}
{{dsc | {{c/core|double}}            | 通常是 {{lc|std::round_to_nearest}} }}
{{dsc | {{c/core|long double}}       | 通常是 {{lc|std::round_to_nearest}} }}
{{dsc end}}

===注解===
这些值是常量，且不反映 {{lc|std::fesetround}} 所做的舍入模式更改。可从 {{lc|FLT_ROUNDS}} 或 {{lc|std::fegetround}} 获得更改后的值。

===示例===
十进制值 {{c|0.1}} 不能表示成二进制浮点数类型。在存储于 IEEE-754 {{c/core|double}} 时，它落入 {{math|0x1.9999999999999*2{{su|p=-4}}}} 与 {{math|0x1.999999999999a*2{{su|p=-4}}}} 之间。舍入到最近可表示结果导致 {{math|0x1.999999999999a*2{{su|p=-4}}}}。 

同样地，十进制值 {{c|0.3}} 在 {{math|0x1.3333333333333*2{{su|p=-2}}}} 与 {{math|0x1.3333333333334*2{{su|p=-2}}}} 之间，舍入到最近值后存储为 {{math|0x1.3333333333333*2{{su|p=-2}}}}。

{{example
| 
|code=
#include &lt;iostream&gt;
#include &lt;limits&gt;

auto print(std::float_round_style frs)
{
    switch (frs)
    {
        case std::round_indeterminate:
            return "无法确定舍入风格";
        case std::round_toward_zero:
            return "向零舍入";
        case std::round_to_nearest:
            return "向最近可表示值舍入";
        case std::round_toward_infinity:
            return "向正无穷舍入";
        case std::round_toward_neg_infinity:
            return "向负无穷舍入";
    }
    return "未知舍入风格";
}

int main()
{
    std::cout &lt;&lt; std::hexfloat 
              &lt;&lt; "小数 0.1 作为 "
              &lt;&lt; 0.1 &lt;&lt; " 在 double 中存储\n"
              &lt;&lt; "小数 0.3 作为 "
              &lt;&lt; 0.3 &lt;&lt; " 在 double 中存储\n"
              &lt;&lt; print(std::numeric_limits&lt;double&gt;::round_style) &lt;&lt; '\n';
}
|output=
小数 0.1 作为 0x1.999999999999ap-4 在 double 中存储
小数 0.3 作为 0x1.3333333333333p-2 在 double 中存储
向最近可表示值舍入
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc float_round_style}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
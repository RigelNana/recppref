{{cpp/types/numeric_limits/title|max_digits10}}
{{cpp/types/numeric_limits/navbar}}

{{dcl begin}}
{{dcl|since=c++11|1=
static constexpr int max_digits10
}}
{{dcl end}}

{{c|std::numeric_limits&lt;T&gt;::max_digits10}} 的值是唯一地表示类型 {{tt|T}} 的所有值所需的以 10 为底的位数，序列化/反序列化到文本需要用到该值。此常量对所有浮点数类型都有意义。 

===标准特化===
{{dsc begin}}
{{dsc hitem|{{tt|T}}|{{c|std::numeric_limits&lt;T&gt;::max_digits10}} 的值}}
{{dsc|{{c/core|/* 未特化 */}}|{{c|0}}}}
{{dsc|{{c/core|bool}}|{{c|0}}}}
{{dsc|{{c/core|char}}|{{c|0}}}}
{{dsc|{{c/core|signed char}}|{{c|0}}}}
{{dsc|{{c/core|unsigned char}}|{{c|0}}}}
{{dsc|{{c/core|wchar_t}}|{{c|0}}}}
{{dsc|{{c/core|char8_t}} {{mark since c++20}}|{{c|0}}}}
{{dsc|{{c/core|char16_t}}|{{c|0}}}}
{{dsc|{{c/core|char32_t}}|{{c|0}}}}
{{dsc|{{c/core|short}}|{{c|0}}}}
{{dsc|{{c/core|unsigned short}}|{{c|0}}}}
{{dsc|{{c/core|int}}|{{c|0}}}}
{{dsc|{{c/core|unsigned int}}|{{c|0}}}}
{{dsc|{{c/core|long}}|{{c|0}}}}
{{dsc|{{c/core|unsigned long}}|{{c|0}}}}
{{dsc|{{c/core|long long}}|{{c|0}}}}
{{dsc|{{c/core|unsigned long long}}|{{c|0}}}}
{{dsc|{{c/core|float}}|{{lc|FLT_DECIMAL_DIG}} 或 {{c|std::ceil(std::numeric_limits&lt;float&gt;::digits * std::log10(2) + 1)}}}}
{{dsc|{{c/core|double}}|{{lc|DBL_DECIMAL_DIG}} 或 {{c|std::ceil(std::numeric_limits&lt;double&gt;::digits * std::log10(2) + 1)}}}}
{{dsc|{{c/core|long double}}|{{lc|DECIMAL_DIG}} 或 {{lc|LDBL_DECIMAL_DIG}} 或 {{c|std::ceil(std::numeric_limits&lt;long double&gt;::digits * std::log10(2) + 1)}}}}
{{dsc end}}

===注解===
与多数数学运算不同，只要用至少 {{tt|max_digits10}}（对于 {{c/core|float}} 是 {{c|9}}，对于 {{c/core|double}} 是 {{c|17}}）位，那么从浮点数转换到文本并转换回来是''准确''{{sep}}的：保证产生同一浮点数，即使中间文本表示不准确。但以小数点记法，可能需要超过一百个十进制数字来表示 {{c/core|float}} 的精确值。

===示例===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;sstream&gt;

int main()
{
    float value = 10.0000086;
    
    constexpr auto digits10 = std::numeric_limits&lt;decltype(value)&gt;::digits10;
    constexpr auto max_digits10 = std::numeric_limits&lt;decltype(value)&gt;::max_digits10;
    constexpr auto submax_digits10 = max_digits10 - 1;
    
    std::cout &lt;&lt; "float:\n"
                 "       digits10 是 " &lt;&lt; digits10 &lt;&lt; " 位\n"
                 "   max_digits10 是 " &lt;&lt; max_digits10 &lt;&lt; " 位\n"
                 "submax_digits10 是 " &lt;&lt; submax_digits10 &lt;&lt; " 位\n\n";

    const auto original_precision = std::cout.precision();
    for (auto i = 0; i &lt; 5; ++i)
    {
        std::cout
            &lt;&lt; "   max_digits10：" &lt;&lt; std::setprecision(max_digits10) &lt;&lt; value &lt;&lt; '\n'
            &lt;&lt; "submax_digits10：" &lt;&lt; std::setprecision(submax_digits10) &lt;&lt; value &lt;&lt; '\n'
            &lt;&lt; '\n';
        
        value = std::nextafter(value, std::numeric_limits&lt;decltype(value)&gt;::max());
    }
    std::cout.precision(original_precision);
}
|output=
float：
       digits10 是 6 位
   max_digits10 是 9 位
submax_digits10 是 8 位

   max_digits10：10.0000086
submax_digits10：10.000009

   max_digits10：10.0000095
submax_digits10：10.00001

   max_digits10：10.0000105
submax_digits10：10.00001

   max_digits10：10.0000114
submax_digits10：10.000011

   max_digits10：10.0000124
submax_digits10：10.000012
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc radix}}
{{dsc inc|cpp/types/numeric_limits/dsc digits}}
{{dsc inc|cpp/types/numeric_limits/dsc digits10}}
{{dsc inc|cpp/types/numeric_limits/dsc min_exponent}}
{{dsc inc|cpp/types/numeric_limits/dsc max_exponent}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/types/numeric_limits/title | digits10}}
{{cpp/types/numeric_limits/navbar}}
{{dcl begin}}
{{dcl rev multi | until1=c++11
| dcl1=
static const int digits10;
| dcl2=
static constexpr int digits10;
}}
{{dcl end}}

{{c|std::numeric_limits&lt;T&gt;::digits10}} 的值是类型 {{tt|T}} 能无更改地表示的以 10 为底的位数，即任何拥有这么多十进制有效数字的数能转换成 {{tt|T}} 的值并转换回十进制形式，而不因舍入或上溢而更改。对于以 {{rlp|radix}} 为底的类型，它是 {{rlpf|digits}}（对于浮点数类型是 {{c|digits - 1}}）的值乘以 {{mathjax-or|\(\small \log_{10}{radix}\)|log{{su|b=10}}(radix)}} 并向下取整。

===标准特化===
{{dsc begin}}
{{dsc hitem | {{tt|T}} |{{c|std::numeric_limits&lt;T&gt;::digits10}} 的值}}
{{dsc | {{c/core|/* 未特化 */}}   | {{c|0}} }}
{{dsc | {{c/core|bool}}              | {{c|0}} }}
{{dsc | {{c/core|char}}              | {{c|std::numeric_limits&lt;char&gt;::digits * std::log10(2)}} }}
{{dsc | {{c/core|signed char}}       | {{c|std::numeric_limits&lt;signed char&gt;::digits * std::log10(2)}} }}
{{dsc | {{c/core|unsigned char}}     | {{c|std::numeric_limits&lt;unsigned char&gt;::digits * std::log10(2)}} }}
{{dsc | {{c/core|wchar_t}}           | {{c|std::numeric_limits&lt;wchar_t&gt;::digits * std::log10(2)}} }}
{{dsc | {{c/core|char8_t}} {{mark since c++20}}  | {{c|std::numeric_limits&lt;char8_t&gt;::digits * std::log10(2)}} }}
{{dsc | {{c/core|char16_t}} {{mark since c++11}} | {{c|std::numeric_limits&lt;char16_t&gt;::digits * std::log10(2)}} }}
{{dsc | {{c/core|char32_t}} {{mark since c++11}} | {{c|std::numeric_limits&lt;char32_t&gt;::digits * std::log10(2)}} }}
{{dsc | {{c/core|short}}             | {{c|std::numeric_limits&lt;short&gt;::digits * std::log10(2)}} }}
{{dsc | {{c/core|unsigned short}}    | {{c|std::numeric_limits&lt;unsigned short&gt;::digits * std::log10(2)}} }}
{{dsc | {{c/core|int}}               | {{c|std::numeric_limits&lt;int&gt;::digits * std::log10(2)}} }}
{{dsc | {{c/core|unsigned int}}      | {{c|std::numeric_limits&lt;unsigned int&gt;::digits * std::log10(2)}} }}
{{dsc | {{c/core|long}}              | {{c|std::numeric_limits&lt;long&gt;::digits * std::log10(2)}} }}
{{dsc | {{c/core|unsigned long}}     | {{c|std::numeric_limits&lt;unsigned long&gt;::digits * std::log10(2)}} }}
{{dsc | {{c/core|long long}} {{mark since c++11}}          | {{c|std::numeric_limits&lt;long long&gt;::digits * std::log10(2)}} }}
{{dsc | {{c/core|unsigned long long}} {{mark since c++11}} | {{c|std::numeric_limits&lt;unsigned long long&gt;::digits * std::log10(2)}} }}
{{dsc | {{c/core|float}}             | {{lc|FLT_DIG}}（对于 IEEE {{c/core|float}} 是 {{c|6}}） }}
{{dsc | {{c/core|double}}            | {{lc|DBL_DIG}}（对于 IEEE {{c/core|double}} 是 {{c|15}}） }}
{{dsc | {{c/core|long double}}       | {{lc|LDBL_DIG}}（对于 80 位英特尔 {{c/core|long double}} 是 {{c|15}}；对于 IEEE 四倍精度是 {{c|33}}） }}
{{dsc end}}

===示例===
8 位二进制类型能准确表示任何二位十进制数，但不能表示 3 位十进制数 256..999。{{tt|digits10}} 对 8 位类型的值是 2（{{c|1=8 * std::log10(2)}} 是 2.41）。

标准 32 位 IEEE 754 浮点数类型拥有 24 位小数部分（写出 23 位，隐含一位），这可能意味着它能表示 7 位十进制数字（{{c|1=24 * std::log10(2)}} 是 7.22），但相对误差不统一，且一些有 7 位十进制数的浮点数值不能在转换到 32 位浮点数再转换回来后保留原值：最小的正数例子是 {{c|8.589973e9}}，它在来回舍入后变成 {{c|8.589974e9}}。这些误差在表示中不能超过一位，而 {{tt|digits10}} 按 {{c|1=(24-1)*std::log10(2)}} 计算，即 6.92。向下取整结果为值 6。

类似地，16 位字符串 {{c|9007199254740993}} 在文本-&gt;double-&gt;文本回环中无法保持，它变成 {{c|9007199254740992}}：64 位 IEEE 754 {{c/core|double}} 类型只保证 15 位的舍入回环。

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc max_digits10}}
{{dsc inc|cpp/types/numeric_limits/dsc radix}}
{{dsc inc|cpp/types/numeric_limits/dsc digits}}
{{dsc inc|cpp/types/numeric_limits/dsc min_exponent}}
{{dsc inc|cpp/types/numeric_limits/dsc max_exponent}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|reference_constructs_from_temporary}}
{{cpp/meta/navbar}}
{{ddcl|header=type_traits|since=c++23|
template&lt; class T, class U &gt;
struct reference_constructs_from_temporary;
}}

若 {{tt|U}} 为标量类型或 ''cv'' {{tt|void}}，则令 {{tt|V}} 为 {{c|std::remove_cv_t&lt;U&gt;}}，否则为 {{tt|U}}。若 {{tt|T}} 为引用类型，并且给定假想的表达式 {{c|e}} 使得 {{c|decltype(e)}} 为 {{tt|V}}，而变量定义 {{c|T ref(e);}} 良构并[[cpp/language/reference_initialization#临时量的生存期|绑定临时对象]]到 {{tt|ref}}，则提供的成员常量 {{tt|value}} 等于 {{c|true}}。否则 {{tt|value}} 等于 {{c|false}}。

&lt;!-- LWG 3697 ，但提出的解决方案看起来仍然错误。 ---&gt;若 {{tt|T}} 为到 const 但非 volatile 限定的对象类型的左值引用类型，或为右值引用类型，则 {{c|std::remove_reference_t&lt;T&gt;}} 与 {{c|std::remove_reference_t&lt;U&gt;}} 应当均为[[cpp/language/type#不完整类型|完整类型]]、''cv'' {{c|void}} 或[[cpp/language/array#未知边界数组|未知边界数组]]；否则行为未定义。

若模板的实例化直接或间接依赖于不完整类型，而假如将令类型完整则实例化能导致不同的结果，则行为未定义。

{{cpp/types/nospec|pv}}

===辅助变量模板===
{{ddcl|since=c++23|1=
template&lt; class T, class U &gt;
inline constexpr bool reference_constructs_from_temporary_v =
    std::reference_constructs_from_temporary&lt;T, U&gt;::value;
}}

{{cpp/types/integral_constant/inherit |{{tt|T}} 为引用类型，能在直接初始化中绑定 {{tt|U}} 到 {{tt|T}}，且临时对象会被绑定到引用}}

===注解===
{{tt|reference_constructs_from_temporary}} 能用于拒绝一些始终导致悬垂引用的情况。

若编译器实现 {{wg21|CWG1696}}，则亦可用成员初始化式列表拒绝绑定临时对象到引用。

===示例===
{{example
|code=
#include &lt;type_traits&gt;

static_assert(std::reference_constructs_from_temporary_v&lt;int&amp;&amp;, int&gt; == true);
static_assert(std::reference_constructs_from_temporary_v&lt;const int&amp;, int&gt; == true);
static_assert(std::reference_constructs_from_temporary_v&lt;int&amp;&amp;, int&amp;&amp;&gt; == false);
static_assert(std::reference_constructs_from_temporary_v&lt;const int&amp;, int&amp;&amp;&gt; == false);
static_assert(std::reference_constructs_from_temporary_v&lt;int&amp;&amp;, long&amp;&amp;&gt; == true);
static_assert(std::reference_constructs_from_temporary_v&lt;int&amp;&amp;, long&gt; == true);

int main() {}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_constructible}}
{{dsc inc|cpp/utility/tuple/dsc constructor}}
{{dsc inc|cpp/utility/pair/dsc constructor}}
{{dsc inc|cpp/utility/dsc make_from_tuple}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
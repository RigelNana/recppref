{{cpp/types/traits/is|1=is_pod
|deprecated=c++20
|description=如果 {{tt|T}} 是[[cpp/named req/PODType|简旧数据（POD）类型]]，那么提供的成员常量 {{tt|value}} 等于 {{c|true}}。对于其它任何类型，{{tt|value}} 等于 {{c|false}}。

如果 {{c/core|std::remove_all_extents_t&lt;T&gt;}} 是除了（可有 cv 限定的）{{c/core|void}} 以外的不完整类型，那么行为未定义。
|inherit_desc={{tt|T}} 是简旧数据（POD）类型
}}

===示例===
{{example
|code=
#include &lt;type_traits&gt;

struct A { int m; };
static_assert(std::is_pod_v&lt;A&gt; == true);

class B: public A { int m; };
static_assert(std::is_pod_v&lt;B&gt; == false);

struct C { virtual void foo(); };
static_assert(std::is_pod_v&lt;C&gt; == false);

int main() {}
|output=
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2015|std=C++11|before={{tt|T}} 可以是不完整类类型的未知边界数组|after=此时行为未定义}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/dsc is_standard_layout}}
{{dsc inc|cpp/types/dsc is_trivial}}
{{dsc inc|cpp/types/dsc is_scalar}}
{{dsc end}}

===外部链接===
{{eli|[https://stackoverflow.com/questions/48225673 Why is {{tt|std::is_pod}} deprecated in C++20?] &amp;mdash; StackOverflow}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{title|C++23}}
{{cpp/version/navbar}}

C++ 标准的当前版本。

{{todo|检查是否提到所有的重大功能特性。使用下面的编译期支持表。添加更多链接，一些行可能要重新组织。}}

==新的语言特性==
* 新[[cpp/feature test#语言功能特性|语言功能特性测试宏]]
* {{ls|cpp/language/function#显式对象形参}}，{{lsd|cpp/language/member functions#显式对象成员函数}}，亦称“推导 {{c/core|this}}” ({{stddoc|P0847R7}})
* [[cpp/language/operators#数组下标运算符|多维下标运算符]]（例如 {{c|1=v[1, 3, 7] = 42;}}）({{stddoc|P2128R6}})
* {{c|static operator[]}} ({{stddoc|P2589R1}}) 和 {{c|static operator[]}} 以及静态 lambda ({{stddoc|P1169R4}})
* {{c|auto(x)}} 与 {{c|auto{x}&lt;!----&gt;}}：语言支持的[[cpp/language/explicit cast#语法|衰退复制]] ({{stddoc|P0849R8}})
* 通过新属性 {{attr|assume|3=(''表达式'')}} 进行假设 ({{stddoc|P1774R8}})
* [[cpp/language/lambda#语法|lambda 表达式]]上的属性 ({{stddoc|P2173R1}})
* 可选支持的[[cpp/types/floating-point|扩展浮点类型]]：{{c/core|std::float{16{{!}}32{{!}}64{{!}}128}_t}} 和 {{c/core|std::bfloat16_t}} ({{stddoc|P1467R9}})
* 新预处理器指令：[[cpp/preprocessor/conditional|{{tt|#elifdef}}、{{tt|#elifndef}}]] 与 {{ltt|cpp/preprocessor/error|#warning}} ({{stddoc|P2437R1}})
* （{{c/core|signed}}）{{lc|std::size_t}} 字面量的[[cpp/language/integer literal#字面量的类型|字面量后缀 '{{tt|Z}}'/'{{tt|z}}']] ({{stddoc|P0330R8}})，例如 {{c|1=auto ouz = 0uz;}}
* 行拼合之前修剪空白 ({{stddoc|P2223R2}})
* 更简单的隐式移动 ({{stddoc|P2266R3}})
* 延展基于范围的 for 循环初始化式中临时量的生存期 ({{stddoc|P2718R0}})
* 继承构造函数的 CTAD ({{stddoc|P2582R1}})
* 复合语句末尾的标号 ({{stddoc|P2324R2}})，例如&lt;br&gt;
: {{c multi|
void f(int&amp; x)|
{|
    if (x)|
        goto END;|
    x {{=}} 42;|
END:|
}&lt;!----&gt;}}
* 初始化语句中的别名声明（{{c/core|using}}）({{stddoc|P2360R0}})，例如&lt;br&gt;
: {{c multi
|for (using T {{=}} int; T e : v)
|    /* ... */
}}
* 进一步让 lambda 表达式中的 {{ttb|()}} 可选 ({{stddoc|P1102R2}})
* {{c/core|static_assert}} 和 {{c/core|if constexpr}} 中允许窄化的按语境转换为 {{c/core|bool}} ({{stddoc|P1401R5}})
* 令声明顺序决定（非静态类数据成员的）布局 ({{stddoc|P1847R4}})
* 文本编码的改动：
** [[cpp/language/charset|字符集与编码]] ({{stddoc|P2314R4}})
** 统一的字符字面量编码 ({{stddoc|P2316R2}})
** {{ls|cpp/language/escape#具名通用字符转义}}，如 {{c|"\N{CAT FACE}"}} 表示 {{c|"🐱"}} ({{stddoc|P2071R2}})
** [[cpp/language/escape|带分隔的转义序列]]，如 {{c|"\o{7777}"}}、{{c|"\x{C0DE}"}}、{{c|"\u{CAFE}"}} ({{stddoc|P2290R3}})
** [[cpp/language/translation_phases#阶段 1|支持 UTF-8 作为可移植源文件编码]] ({{stddoc|P2295R6}})
* {{ltt|cpp/language/if#consteval if|if consteval}} / {{ltt|cpp/language/if#consteval if|if not consteval}} ({{stddoc|P1938R3}})
* {{c/core|constexpr}} 的改动：
** {{c/core|constexpr}} 函数中使用非字面量变量、标号和 {{c/core|goto}} ({{stddoc|P2242R3}})
** 允许 {{c/core|constexpr}} 函数中的常量表达式中使用 {{c/core|static}} 和 {{c/core|thread_local}} 变量 ({{stddoc|P2647R1}})
** {{c/core|constexpr}} 函数的返回类型和形参类型不必为字面类型 ({{stddoc|P2448R2}})
** 不存在满足核心常量表达式要求的调用的 {{c/core|constexpr}} 函数 ({{stddoc|P2448R2}})

==新的库特性==
* 新的[[cpp/feature test#库功能特性|库功能特性测试宏]]
===新模块===
* [[cpp/standard library#导入模块|{{c|std}} 及 {{c|std.compat}}]] ({{stddoc|P2465R3}})

===新标头===
* {{header|expected}}
* {{header|flat_map}}
* {{header|flat_set}}
* {{header|generator}}
* {{header|mdspan}}
* {{header|print}}
* {{header|spanstream}}
* {{header|stacktrace}}
* {{header|stdfloat}}

C 兼容性标头:
* {{header|stdatomic.h}} ({{stddoc|P0943R6}})

===库特性===
=====通用工具=====
* {{c/core|std::expected}}：一种用于返回函数结果的新词汇类型 ({{header|expected}}) ({{stddoc|P0323R12}}, {{stddoc|P2549R1}})
* {{c/core|std::move_only_function}}：一种仅可移动的可调用包装器 ({{stddoc|P0288R9}})
* {{c/core|std::bind_back}}：一种调用包装器 ({{stddoc|p2387r3}})
* {{c/core|std::byteswap}}：反转字节 ({{stddoc|P1272R4}})
* {{c/core|std::forward_like}} ({{stddoc|P2445R1}})
* {{c/core|std::invoke_r}}：调用{{named req|Callable}}对象 ({{stddoc|p2136r3}})
* {{c/core|std::to_underlying}}：用于获取 {{c/core|enum}} 的底层值的工具函数 ({{stddoc|P1682R3}})
* {{c/core|std::unreachable}}：用于标记不可达代码的函数 ({{stddoc|p0627r6}})
* {{c/core|std::optional}} 和 {{c/core|std::expected}} 的单子式操作（{{tt|transform}}、{{tt|or_else}} 与 {{tt|and_then}}）({{stddoc|P0798R8}}, {{stddoc|P2505R5}})
* {{c/core|std::tuple}} 与其他元组式对象的兼容 ({{stddoc|p2165r4}})
* 为 {{c/core|std::pair}} 的转发构造函数添加默认实参 ({{stddoc|p2718r0}})
* {{c/core|std::basic_common_reference}} 针对 {{c/core|std::reference_wrapper}} 的特化产生引用类型 ({{stddoc|p2655r3}})

=====协程库=====
* {{c/core|std::generator}}：用于范围的同步{{lt|cpp/language/coroutines|协程}}生成器 ({{stddoc|P2502R2}}, {{stddoc|P2787R0}})

=====诊断=====
* {{ls|cpp/error#栈踪迹}}（stacktrace）库 ({{stddoc|p0881r7}})

=====算法，迭代器与范围=====
* 新的范围适配器：
** {{c/core|views::adjacent}} 与 {{c/core|views::adjacent_transform}} ({{stddoc|P2321R2}})
** {{c/core|views::as_const}} ({{stddoc|P2278R4}})
** {{c/core|views::as_rvalue}} ({{stddoc|P2446R2}})
** {{c/core|views::cartesian_product}} ({{stddoc|p2374r4}})
** {{c/core|views::chunk_by}} ({{stddoc|P2443R1}})
** {{c/core|views::chunk}} ({{stddoc|P2442R1}})
** {{c/core|views::enumerate}} ({{stddoc|p2164r9}})
** {{c/core|views::join_with}} ({{stddoc|p2441r2}})
** {{c/core|views::repeat}} ({{stddoc|p2474r2}})
** {{c/core|views::slide}} ({{stddoc|P2442R1}})
** {{c/core|views::stride}} ({{stddoc|p1899r3}})
** {{c/core|views::zip}}, {{c/core|views::zip_transform}} ({{stddoc|P2321R2}})
* {{c/core|ranges::range_adaptor_closure}}：用于程序定义的范围适配器闭包的辅助类 ({{stddoc|p2387r3}})
* {{c/core|ranges::to}}：范围转换函数 ({{stddoc|p1206r7}})
* 新的受约束范围算法：
** {{c/core|ranges::starts_with}} 与 {{c/core|ranges::ends_with}} ({{stddoc|p1659r3}})
** {{c/core|ranges::contains}} 与 {{c/core|ranges::contains_subrange}} ({{stddoc|p2302r4}})
** {{c/core|ranges::find_last}}、{{c/core|ranges::find_last_if}} 与 {{c/core|ranges::find_last_if_not}} ({{stddoc|p1223r5}})
** {{c/core|ranges::iota}}、{{c/core|ranges::shift_left}} 与 {{c/core|ranges::shift_right}}：无约束算法的范围化版本 ({{stddoc|p2440r1}})
** {{c/core|ranges::fold_left}} 等：[[cpp/algorithm/ranges#受约束的折叠操作|范围折叠算法]] ({{stddoc|p2322r6}})
* 修补常量迭代器、哨位和范围，意为 {{c/core|ranges::cbegin}} 与其他类似的返回常量迭代器的工具，即使对浅 {{c/core|const}} 视图（如 {{c/core|std::span}}）也应提供完全保证 ({{stddoc|p2278r4}})
* 使一些视图的多参数构造函数为显式的 ({{stddoc|p2711r1}})
* 以范围迭代器作为非范围算法的输入 ({{stddoc|p2408r5}})
* 放宽范围适配器以允许仅移动类型 ({{stddoc|p2494r2}})

=====容器=====
* {{c/core|std::mdspan}}：无所有权多维数组引用 ({{stddoc|P0009R18}}, {{stddoc|P2599R2}}, {{stddoc|P2604R0}}, {{stddoc|P2613R1}}, {{stddoc|P2763R1}})
* 容器从其他兼容范围的可构造性与可赋值性 ({{stddoc|p1206r7}})
* {{c/core|std::flat_set}}, {{c/core|std::flat_multiset}} ({{stddoc|P1222R4}}), {{c/core|std::flat_map}}, {{c/core|std::flat_multimap}} ({{stddoc|P0429R9}})：平铺集合与平铺映射——对底层有序随机访问容器进行包装的容器适配器
* 允许 {{c/core|std::stack}} 与 {{c/core|std::queue}} 从迭代器对构造 ({{stddoc|p1425r4}})
* 关联容器的异质擦除重载 ({{stddoc|p2077r2}})
* 容器推导指引中对于分配器的非推导语境 ({{stddoc|p1518r2}})
* 要求 {{c/core|std::span}} 和 {{c/core|std::basic_string_view}} 可平凡复制 ({{stddoc|p2251r1}})

=====编译时支持=====
* 对以下各项的 {{c/core|constexpr}} 支持：
** {{c/core|std::bitset}} ({{stddoc|p2417r2}})
** {{c/core|std::unique_ptr}} ({{stddoc|p2273r3}})
** {{ltt|cpp/types/type_info/operator_cmp|2=std::type_info::operator==}} ({{stddoc|p1328r1}})
** 一些 {{header|cmath}} 函数 ({{stddoc|p0533r9}})
** {{c/core|std::to_chars}} 和 {{c/core|std::from_chars}} 的整型重载 ({{stddoc|p2291r3}})
* [[cpp/meta|元编程]]工具：
** 添加比较概念对仅移动类型的支持 ({{stddoc|p2404r3}})
** 类型特征：
*** {{c/core|std::is_scoped_enum}} ({{stddoc|p1048r1}})
*** {{c/core|std::is_implicit_lifetime}} ({{stddoc|p2674r1}})
*** {{c/core|std::reference_constructs_from_temporary}}, {{c/core|std::reference_converts_from_temporary}} ({{stddoc|p2255r2}})

=====内存管理=====
* {{c/core|std::out_ptr}} 与 {{c/core|std::inout_ptr}}：用于 C 互操作性的智能指针适配器 ({{stddoc|p1132r7}})
* {{c/core|std::allocate_at_least}} 与 {{c/core|std::allocator::allocate_at_least}} ({{stddoc|p0401r6}})
* {{c/core|std::start_lifetime_as}}：用于隐式生存期类型的显式生存期管理函数 ({{stddoc|p2590r2}})
* 禁止用户对 {{c/core|std::allocator_traits}} 的特化 ({{stddoc|p2652r2}})

=====字符串与文本处理=====
* 新成员函数与字符串类型的改动：
** {{c/core|std::basic_string::contains}} 与 {{c/core|std::basic_string_view::contains}} ({{stddoc|p1679r3}})
** 禁止从 {{c|nullptr}} 构造 {{c/core|std::basic_string}} 和 {{c/core|std::basic_string_view}} ({{stddoc|p2166r1}})
** {{c/core|std::basic_string_view}} 的显式范围构造函数 ({{stddoc|p1989r2}})
** {{c/core|std::basic_string::resize_and_overwrite}} ({{stddoc|p1072r10}})
** 用于高效切片的 {{c/core|std::basic_string::substr}} 右值引用重载 ({{stddoc|p2438r2}})
* 范围、元组、字符与字符串的转义表示、{{c/core|std::thread::id}} 以及{{lsd|cpp/error#栈踪迹}}的格式化 ({{stddoc|p2286r8}}) ({{stddoc|p2585r1}}) ({{stddoc|p2693r1}})

=====I/O 和打印=====
* 标头 {{header|print}} 中提供的格式化输出函数 {{c/core|std::print}} 和 {{c/core|std::println}} ({{stddoc|p2093r14}})
* 标头 {{header|spanstream}} 中提供的 {{tt|spanstream}} 库（基于 {{c/core|std::span}} 的字符串流）({{stddoc|p0448r4}})
* {{c/core|std::fstreams}} 支持独占模式 ({{stddoc|p2467r1}})
* 支持打印 {{c|volatile T*}}：{{c|std::basic_ostream::operator&lt;&lt;(const volatile void*)}} ({{stddoc|P1147R1}})

==过时特性==
=====已移除特性=====
* 垃圾收集的支持和基于可达性的泄漏检测。({{stddoc|P2186R2}})
* 混合宽字符串字面量{{lsd|cpp/language/string literal#拼接}}（如 {{c|1=const auto* no = u"q" U"p"}}）非良构。({{stddoc|P2201R1}})
* 不可编码宽字符字面量和多字节宽字符字面量（如 {{c|1=wchar_t x = 'db'}}）非良构。({{stddoc|P2362R3}})

=====已弃用特性=====
* {{c/core|std::aligned_storage}} 与 {{c/core|std::aligned_union}} ({{stddoc|P1413R3}})
* {{c/core|std::numeric_limits::has_denorm}} ({{stddoc|P2614R2}})

=====撤销弃用=====
* 下表表达式中的 {{c|operator,}}（逗号运算符）（但已改变其语义以支持可重载的多维下标 {{c|operator[]}}）。
* 一些 C 标头（用于 C 兼容性的相应 {{tt|&lt;*.h&gt;}} 标头）({{stddoc|P2340R1}})

== 缺陷报告 ==
&lt;!-- {{cpp/language/history/DR23}} --&gt;

== 编译器支持情况 ==
主条目： [[cpp/compiler_support#C++23 功能特性|C++23 编译器支持]]
{{cpp/compiler support/23}}
{{cpp/compiler support/note}}

===外部链接===
{{elink begin}}
{{elink|{{enwiki|C++23}} - Wikipedia}}
&lt;!--
{{elink|[https://github.com/makelinux/examples/blob/HEAD/cpp/23.cpp Working C++23 examples]}}
--&gt;
{{elink end}}

{{langlinks|en|es|ko|ru}}
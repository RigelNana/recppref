{{cpp/chrono/title|1=operator==,&lt;=&gt;{{small|(std::chrono::day)}}}}
{{cpp/chrono/day/navbar}}
{{dcl begin}}
{{dcl header|chrono}}
{{dcl|since=c++20|num=1|1=
constexpr bool operator==( const std::chrono::day&amp; x,
                           const std::chrono::day&amp; y ) noexcept;
}}
{{dcl|since=c++20|num=2|1=
constexpr std::strong_ordering operator&lt;=&gt;( const std::chrono::day&amp; x,
                                            const std::chrono::day&amp; y ) noexcept;
}}
{{dcl end}}
比较两个 {{lc|std::chrono::day}} {{tt|x}} 和 {{tt|y}}。

{{cpp/note synthesized compare}}

=== 返回值 ===
@1@ {{c|1=unsigned(x) == unsigned(y)}}
@2@ {{c|1=unsigned(x) &lt;=&gt; unsigned(y)}}

=== 示例 ===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    constexpr std::chrono::day x{13}, y{31};
    static_assert(x != y);

    if constexpr (constexpr auto res = x &lt;=&gt; y; res &lt; 0)
        std::cout &lt;&lt; "x is less than y\n";
    else if constexpr (res &gt; 0)
        std::cout &lt;&lt; "x is greater than y\n";
    else
        std::cout &lt;&lt; "x and y are equal\n";

    using namespace std::literals::chrono_literals;

    static_assert
    (
        (6d &lt; 9d) &amp;&amp; (6d == 6d) &amp;&amp; (6d &lt;= 9d) &amp;&amp;
        (9d &gt; 6d) &amp;&amp; (9d != 6d) &amp;&amp; (9d &gt;= 6d)
    );
}
|output=
x is less than y
}}

{{langlinks|en|es|ja|ru}}
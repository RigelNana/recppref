{{cpp/chrono/time_point/title|min}}
{{cpp/chrono/time_point/navbar}}
{{dcl begin}}
{{dcl rev multi|until1=c++20|dcl1=
static constexpr time_point min();
|dcl2=
static constexpr time_point min() noexcept;
}}
{{dcl end}}

返回拥有最小可能时长的 {{tt|time_point}}，即 {{c|time_point(duration::min())}}。

===参数===
（无）

===返回值===
最小的可能的 {{tt|time_point}}。

===示例===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;ratio&gt;
#include &lt;string&gt;

constexpr auto steady_min = std::chrono::steady_clock::time_point::min();

void animate_frame_at_time_offset(double game_time)
{
    std::cout &lt;&lt; std::string(static_cast&lt;int&gt;(game_time) % 10 + 1, '*') &lt;&lt; '\n';
}

int main()
{
    auto last_frame = steady_min;
    std::chrono::duration&lt;double, std::micro&gt; game_time{0.0};

    for (int n = 0; n &lt; 5; ++n)
    {
        const auto current_frame = std::chrono::steady_clock::now();
        // initialize timer if first frame ever:
        if (last_frame == steady_min)
            last_frame = current_frame;
        game_time += current_frame - last_frame;
        std::cout &lt;&lt; "Drawing frame at " &lt;&lt; std::setprecision(10)
                  &lt;&lt; std::setw(8) &lt;&lt; game_time.count() &lt;&lt; " μs ";
        animate_frame_at_time_offset(game_time.count());
    }
}
|p=true
|output=
Drawing frame at        0 μs *
Drawing frame at  134.499 μs *****
Drawing frame at  274.337 μs *****
Drawing frame at  416.571 μs *******
Drawing frame at  561.124 μs **
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
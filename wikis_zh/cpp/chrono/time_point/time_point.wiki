{{cpp/chrono/time_point/title|time_point}}
{{cpp/chrono/time_point/navbar}}
{{dcl begin}}
{{dcl rev begin|num=1}}
{{dcl|since=c++11|notes={{mark constexpr since c++14}}|
time_point();
}}
{{dcl rev end}}
{{dcl rev begin|num=2}}
{{dcl|since=c++11|notes={{mark constexpr since c++14}}|
explicit time_point( const duration&amp; d );
}}
{{dcl rev end}}
{{dcl rev begin|num=3}}
{{dcl|since=c++11|notes={{mark constexpr since c++14}}|
template&lt; class Duration2 &gt;
time_point( const time_point&lt;Clock, Duration2&gt;&amp; t );
}}
{{dcl rev end}}
{{dcl end}}

从数个可选数据源之一构造新的 {{tt|time_point}}。

@1@ 默认构造函数，创建表示 {{tt|Clock}} 的纪元（即 {{lc|time_since_epoch()}} 为零）的 {{tt|time_point}}。

@2@ 构造位于 {{tt|Clock}} 的纪元加上 {{c|d}} 的 {{tt|time_point}}。

@3@ 通过转换 {{c|t}} 为 {{tt|duration}} 构造 {{tt|time_point}}。此构造函数仅当 {{tt|Duration2}} 可隐式转换为 {{tt|duration}} 时才参与重载决议。

===参数===
{{par begin}}
{{par | d  |复制来源的 {{tt|duration}}}}
{{par | t  |转换来源的 {{tt|time_point}}}}
{{par end}}

===示例===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

using Clock = std::chrono::steady_clock;
using TimePoint = std::chrono::time_point&lt;Clock&gt;;

void print_ms(const TimePoint&amp; point) 
{
    using Ms = std::chrono::milliseconds;
    const Clock::duration since_epoch = point.time_since_epoch();
    std::cout &lt;&lt; std::chrono::duration_cast&lt;Ms&gt;(since_epoch) &lt;&lt; '\n';
}

int main() 
{
    const TimePoint default_value = TimePoint(); // (1)
    print_ms(default_value); // 0ms

    const Clock::duration duration_4_seconds = std::chrono::seconds(4);
    const TimePoint time_point_4_seconds(duration_4_seconds); // (2)
    // 自纪元起 4 秒
    print_ms(time_point_4_seconds); // 4000ms

    const TimePoint time_point_now = Clock::now(); // (3)
    print_ms(time_point_now); // 212178842ms
}
|p=true
|output=
0ms
4000ms
212178842ms
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/chrono/duration/dsc constructor}}
{{dsc inc|cpp/chrono/duration/dsc duration_cast}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
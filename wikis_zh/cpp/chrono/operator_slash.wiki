{{cpp/chrono/title|operator/{{small|(日历)}}}}
{{cpp/chrono/navbar}}
{{dcl begin}}
{{dcl header|chrono}}
{{dcl h|{{tt|year_month}}}}
{{dcl|num=1|since=c++20|
constexpr auto operator/( const std::chrono::year&amp; y,
                          const std::chrono::month&amp; m ) noexcept
    -&gt; std::chrono::year_month;
}}
{{dcl|num=2|since=c++20|
constexpr auto operator/( const std::chrono::year&amp; y, int m ) noexcept
    -&gt; std::chrono::year_month;
}}
{{dcl h|{{tt|month_day}}}}
{{dcl|num=3|since=c++20|
constexpr auto operator/( const std::chrono::month&amp; m,
                          const std::chrono::day&amp; d ) noexcept
    -&gt; std::chrono::month_day;
}}
{{dcl|num=4|since=c++20|
constexpr auto operator/( const std::chrono::month&amp; m, int d ) noexcept
    -&gt; std::chrono::month_day;
}}
{{dcl|num=5|since=c++20|
constexpr auto operator/( int m, const std::chrono::day&amp; d ) noexcept
    -&gt; std::chrono::month_day;
}}
{{dcl|num=6|since=c++20|
constexpr auto operator/( const std::chrono::day&amp; d,
                          const std::chrono::month&amp; m ) noexcept
   -&gt; std::chrono::month_day;
}}
{{dcl|num=7|since=c++20|
constexpr auto operator/( const std::chrono::day&amp; d, int m ) noexcept
    -&gt; std::chrono::month_day;
}}
{{dcl h|{{tt|month_day_last}}}}
{{dcl|num=8|since=c++20|
constexpr auto operator/( const std::chrono::month&amp; m,
                         std::chrono::last_spec ) noexcept
    -&gt; std::chrono::month_day_last;
}}
{{dcl|num=9|since=c++20|
constexpr auto operator/( int m, std::chrono::last_spec ) noexcept
    -&gt; std::chrono::month_day_last;
}}
{{dcl|num=10|since=c++20|
constexpr auto operator/( std::chrono::last_spec,
                          const std::chrono::month&amp; m ) noexcept
    -&gt; std::chrono::month_day_last;
}}
{{dcl|num=11|since=c++20|
constexpr auto operator/( std::chrono::last_spec, int m ) noexcept
    -&gt; std::chrono::month_day_last;
}}
{{dcl h|{{tt|month_weekday}}}}
{{dcl|num=12|since=c++20|
constexpr auto operator/( const std::chrono::month&amp; m,
                          const std::chrono::weekday_indexed&amp; wdi ) noexcept
    -&gt; std::chrono::month_weekday;
}}
{{dcl|num=13|since=c++20|
constexpr auto operator/( int m, const std::chrono::weekday_indexed&amp; wdi ) noexcept
    -&gt; std::chrono::month_weekday;
}}
{{dcl|num=14|since=c++20|
constexpr auto operator/( const std::chrono::weekday_indexed&amp; wdi,
                          const std::chrono::month&amp; m ) noexcept
    -&gt; std::chrono::month_weekday;
}}
{{dcl|num=15|since=c++20|
constexpr auto operator/( const std::chrono::weekday_indexed&amp; wdi, int m ) noexcept
    -&gt; std::chrono::month_weekday;
}}
{{dcl h|{{tt|month_weekday_last}}}}
{{dcl|num=16|since=c++20|
constexpr auto operator/( const std::chrono::month&amp; m,
                          const std::chrono::weekday_last&amp; wdl ) noexcept
    -&gt; std::chrono::month_weekday_last;
}}
{{dcl|num=17|since=c++20|
constexpr auto operator/( int m, const std::chrono::weekday_last&amp; wdl ) noexcept
    -&gt; std::chrono::month_weekday_last;
}}
{{dcl|num=18|since=c++20|
constexpr auto operator/( const std::chrono::weekday_last&amp; wdl,
                          const std::chrono::month&amp; m ) noexcept
    -&gt; std::chrono::month_weekday_last;
}}
{{dcl|num=19|since=c++20|
constexpr auto operator/( const std::chrono::weekday_last&amp; wdl, int m ) noexcept
    -&gt; std::chrono::month_weekday_last;
}}
{{dcl h|{{tt|year_month_day}}}}
{{dcl|num=20|since=c++20|
constexpr auto operator/( const std::chrono::year_month&amp; ym,
                          const std::chrono::day&amp; d ) noexcept
    -&gt; std::chrono::year_month_day;
}}
{{dcl|num=21|since=c++20|
constexpr auto operator/( const std::chrono::year_month&amp; ym, int d ) noexcept
    -&gt; std::chrono::year_month_day;
}}
{{dcl|num=22|since=c++20|
constexpr auto operator/( const std::chrono::year&amp; y,
                          const std::chrono::month_day&amp; md ) noexcept
    -&gt; std::chrono::year_month_day;
}}
{{dcl|num=23|since=c++20|
constexpr auto operator/( int y, const std::chrono::month_day&amp; md ) noexcept
    -&gt; std::chrono::year_month_day;
}}
{{dcl|num=24|since=c++20|
constexpr auto operator/( const std::chrono::month_day&amp; md,
                          const std::chrono::year&amp; y ) noexcept
    -&gt; std::chrono::year_month_day;
}}
{{dcl|num=25|since=c++20|
constexpr auto operator/( const std::chrono::month_day&amp; md, int y ) noexcept
    -&gt; std::chrono::year_month_day;
}}
{{dcl h|{{tt|year_month_day_last}}}}
{{dcl|num=26|since=c++20|
constexpr auto operator/( const std::chrono::year_month&amp; ym,
                         std::chrono::last_spec ) noexcept
    -&gt; std::chrono::year_month_day_last;
}}
{{dcl|num=27|since=c++20|
constexpr auto operator/( const std::chrono::year&amp; y,
                          const std::chrono::month_day_last&amp; mdl ) noexcept
    -&gt; std::chrono::year_month_day_last;
}}
{{dcl|num=28|since=c++20|
constexpr auto operator/( int y, const std::chrono::month_day_last&amp; mdl ) noexcept
    -&gt; std::chrono::year_month_day_last;
}}
{{dcl|num=29|since=c++20|
constexpr auto operator/( const std::chrono::month_day_last&amp; mdl,
                          const std::chrono::year&amp; y ) noexcept
    -&gt; std::chrono::year_month_day_last;
}}
{{dcl|num=30|since=c++20|
constexpr auto operator/( const std::chrono::month_day_last&amp; mdl, int y ) noexcept
    -&gt; std::chrono::year_month_day_last;
}}
{{dcl h|{{tt|year_month_weekday}}}}
{{dcl|num=31|since=c++20|
constexpr auto operator/( const std::chrono::year_month&amp; ym,
                          const std::chrono::weekday_indexed&amp; wdi ) noexcept
    -&gt; std::chrono::year_month_weekday;
}}
{{dcl|num=32|since=c++20|
constexpr auto operator/( const std::chrono::year&amp; y,
                          const std::chrono::month_weekday&amp; mwd ) noexcept
    -&gt; std::chrono::year_month_weekday;
}}
{{dcl|num=33|since=c++20|
constexpr auto operator/( int y, const std::chrono::month_weekday&amp; mwd ) noexcept
    -&gt; std::chrono::year_month_weekday;
}}
{{dcl|num=34|since=c++20|
constexpr auto operator/( const std::chrono::month_weekday&amp; mwd,
                          const std::chrono::year&amp; y ) noexcept
    -&gt; std::chrono::year_month_weekday;
}}
{{dcl|num=35|since=c++20|
constexpr auto operator/( const std::chrono::month_weekday&amp; mwd, int y ) noexcept
    -&gt; std::chrono::year_month_weekday;
}}
{{dcl h|{{tt|year_month_weekday_last}}}}
{{dcl|num=36|since=c++20|
constexpr auto operator/( const std::chrono::year_month&amp; ym,
                          const std::chrono::weekday_last&amp; wdl ) noexcept
    -&gt; std::chrono::year_month_weekday_last;
}}
{{dcl|num=37|since=c++20|
constexpr auto operator/( const std::chrono::year&amp; y,
                          const std::chrono::month_weekday_last&amp; mwdl ) noexcept
    -&gt; std::chrono::year_month_weekday_last;
}}
{{dcl|num=38|since=c++20|
constexpr auto operator/( int y, const std::chrono::month_weekday_last&amp; mwdl ) noexcept
    -&gt; std::chrono::year_month_weekday_last;
}}
{{dcl|num=39|since=c++20|
constexpr auto operator/( const std::chrono::month_weekday_last&amp; mwdl,
                          const std::chrono::year&amp; y ) noexcept
    -&gt; std::chrono::year_month_weekday_last;
}}
{{dcl|num=40|since=c++20|
constexpr auto operator/( const std::chrono::month_weekday_last&amp; mwdl, int y ) noexcept
    -&gt; std::chrono::year_month_weekday_last;
}}
{{dcl end}}

这些 {{c|operator/}} 为创建{{enwiki|Proleptic Gregorian calendar|外推格里高利历}}日期提供约定语法。

对于创建完整日期，任何下列三种顺序都可接受：
* {{tti|year/month/day}}，
* {{tti|month/day/year}}，
* {{tti|day/month/year}}。

每种情况中，能以下列之一替换 {{tti|day}}：
* {{lc|std::chrono::last}}，用于月的最后一日；
* {{tt|''weekday''[''i'']}}，用于月的第 {{tti|i}} 个 ''weekday''；
* {{tt|''weekday''[{{lc|std::chrono::last}}]}}，用于该月的最后一个 ''weekday''。

若单纯的整数的含义相对于其他运算数的类型无歧义，则可接受它：允许 {{c|2005y/4/5}}，但不允许 {{c|5/April/2005}}。

可以不应用三种顺序之一的第二个 {{c|operator/}}，以创建部分日期类型（{{rlpt|year_month}}、{{rlpt|month_day}} 等）。

=== 返回值 ===
@1@ {{c|std::chrono::year_month(y, m)}}
@2@ {{c|std::chrono::year_month(y, std::chrono::month(m))}}
@3,6@ {{c|std::chrono::month_day(m, d)}}
@4@ {{c|std::chrono::month_day(m, std::chrono::day(d))}}
@5,7@ {{c|std::chrono::month_day(std::chrono::month(m), d)}}
@8,10@ {{c|std::chrono::month_day_last(m)}}
@9,11@ {{c|std::chrono::month_day_last(std::chrono::month(m))}}
@12,14@ {{c|std::chrono::month_weekday(m, wdi)}}
@13,15@ {{c|std::chrono::month_weekday(std::chrono::month(m), wdi)}}
@16,18@ {{c|std::chrono::month_weekday_last(m, wdl)}}
@17,19@ {{c|std::chrono::month_weekday_last(std::chrono::month(m), wdl)}}
@20@ {{c|std::chrono::year_month_day(ym.year(), ym.month(), d)}}
@21@ {{c|std::chrono::year_month_day(ym.year(), ym.month(), std::chrono::day(d))}}
@22,24@ {{c|std::chrono::year_month_day(y, md.month(), md.day())}}
@23,25@ {{c|std::chrono::year_month_day(std::chrono::year(y), md.month(), md.day())}}
@26@ {{c|std::chrono::year_month_day_last(ym.year(), std::chrono::month_day_last(ym.month()))}}
@27,29@ {{c|std::chrono::year_month_day_last(y, mdl)}}
@28,30@ {{c|std::chrono::year_month_day_last(std::chrono::year(y), mdl)}}
@31@ {{c|std::chrono::year_month_weekday(ym.year(), ym.month(), wdi)}}
@32,34@ {{c|std::chrono::year_month_weekday(y, mwd.month(), mwd.weekday_indexed())}}
@33,35@ {{c|std::chrono::year_month_weekday(std::chrono::year(y), mwd.month(), mwd.weekday_indexed())}}
@36@ {{c|std::chrono::year_month_weekday_last(ym.year(), ym.month(), wdl)}}
@37,39@ {{c|std::chrono::year_month_weekday_last(y, mwdl.month(), mwdl.weekday_last())}}
@38,40@ {{c|std::chrono::year_month_weekday_last(std::chrono::year(y), mwdl.month(), mwdl.weekday_last())}}

===示例===
{{example
|code=
#include &lt;chrono&gt;
using namespace std::chrono;

constexpr auto ym{2021y/8};
static_assert(ym == year_month(year(2021), August));

constexpr auto md{9/15d};
static_assert(md == month_day(September, day(15)));

constexpr auto mdl{October/last};
static_assert(mdl == month_day_last(month(10)));

constexpr auto mw{11/Monday[3]};
static_assert(mw == month_weekday(November, Monday[3]));

constexpr auto mwdl{December/Sunday[last]};
static_assert(mwdl == month_weekday_last(month(12), weekday_last(Sunday)));

// 这个世界内外人们实际使用的三种年/月/日顺序：
constexpr auto ymd{year(2021)/January/day(23)};
static_assert(ymd == month{1}/23/2021);
static_assert(ymd == day{23}/1/2021);
static_assert(ymd == year_month_day(2021y, month(January), 23d));

int main() {}
}}

{{langlinks|en|es|ja|ru}}
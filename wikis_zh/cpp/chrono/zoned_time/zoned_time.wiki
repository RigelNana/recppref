{{cpp/chrono/zoned_time/title|zoned_time}}
{{cpp/chrono/zoned_time/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|
zoned_time();
}}
{{dcl|since=c++20|num=2|
zoned_time( const std::chrono::sys_time&lt;Duration&gt;&amp; st );
}}
{{dcl|since=c++20|num=3|1=
zoned_time( const zoned_time&amp; other ) = default;
}}
{{dcl|since=c++20|num=4|
template&lt; class Duration2 &gt;
zoned_time( const std::chrono::zoned_time&lt;Duration2, TimeZonePtr&gt;&amp; other );
}}
{{dcl|since=c++20|num=5|
explicit zoned_time( TimeZonePtr z );
}}
{{dcl|since=c++20|num=6|
explicit zoned_time( std::string_view name );
}}
{{dcl|since=c++20|num=7|
zoned_time( TimeZonePtr z, const std::chrono::sys_time&lt;Duration&gt;&amp; st );
}}
{{dcl|since=c++20|num=8|
zoned_time( std::string_view name, const std::chrono::sys_time&lt;Duration&gt;&amp; st );
}}
{{dcl|since=c++20|num=9|
zoned_time( TimeZonePtr z, const std::chrono::local_time&lt;Duration&gt;&amp; tp );
}}
{{dcl|since=c++20|num=10|
zoned_time( std::string_view name, const std::chrono::local_time&lt;Duration&gt;&amp; tp );
}}
{{dcl|since=c++20|num=11|
zoned_time( TimeZonePtr z, const std::chrono::local_time&lt;Duration&gt;&amp; tp,
            std::chrono::choose c );
}}
{{dcl|since=c++20|num=12|
zoned_time( std::string_view name,
            const std::chrono::local_time&lt;Duration&gt;&amp; tp, std::chrono::choose c );
}}
{{dcl|since=c++20|num=13|
template&lt; class Duration2, class TimeZonePtr2 &gt;
zoned_time( TimeZonePtr z,
            const std::chrono::zoned_time&lt;Duration2, TimeZonePtr2&gt;&amp; zt );
}}
{{dcl|since=c++20|num=14|
template&lt; class Duration2, class TimeZonePtr2 &gt;
zoned_time( TimeZonePtr z,
            const std::chrono::zoned_time&lt;Duration2, TimeZonePtr2&gt;&amp; zt,
            std::chrono::choose );
}}
{{dcl|since=c++20|num=15|
template&lt; class Duration2, class TimeZonePtr2 &gt;
zoned_time( std::string_view name,
            const std::chrono::zoned_time&lt;Duration2, TimeZonePtr2&gt;&amp; zt );
}}
{{dcl|since=c++20|num=16|
template&lt; class Duration2, class TimeZonePtr2 &gt;
zoned_time( std::string_view name,
            const std::chrono::zoned_time&lt;Duration2, TimeZonePtr2&gt;&amp; zt,
            std::chrono::choose );
}}
{{dcl end}}

构造 {{tt|zoned_time}} 对象，按照下表初始化存储的时区指针和时间点，其中 {{tt|traits}} 为 {{c|std::chrono::zoned_traits&lt;TimeZonePtr&gt;}}：

{| class="wikitable" style="font-size:85%; max-width:90em;"
|-
! 重载
! 时区指针（记为 {{tt|zone}}）
! 时间点（{{c|std::chrono::sys_time&lt;duration&gt;}}）
! 注解
|-
| {{v|1}}
| rowspan="2" | {{c|traits::default_zone()}}
| 默认构造
| rowspan="2" | {{v|a}}
|-
| {{v|2}}
| {{tt|st}}
|-
| {{v|3}}
| {{c|other.get_time_zone()}}
| {{c|other.get_sys_time()}}
| {{v|b}}
|-
| {{v|4}}
| {{c|other.get_time_zone()}}
| {{c|other.get_sys_time()}}
| {{v|e}}
|-
| {{v|5}}
| {{c|std::move(z)}}
| rowspan="2" | 默认构造
|
|-
| {{v|6}}
| {{c|traits::locate_zone(name)}}
| {{v|c}}
|-
| {{v|7}}
| {{c|std::move(z)}}
| rowspan="2" | {{tt|st}}
|
|-
| {{v|8}}
| {{c|traits::locate_zone(name)}}
| {{v|c}}
|-
| {{v|9}}
| {{c|std::move(z)}}
| rowspan="2"| {{c|zone-&gt;to_sys(tp)}}
| {{v|d}}
|-
| {{v|10}}
| {{c|traits::locate_zone(name)}}
| {{v|c,d}}
|-
| {{v|11}}
| {{c|std::move(z)}}
| rowspan="2"| {{c|zone-&gt;to_sys(tp, c)}}
| {{v|d}}
|-
| {{v|12}}
| {{c|traits::locate_zone(name)}}
| {{v|c,d}}
|-
| {{v|13,14}}
| {{c|std::move(z)}}
|rowspan="2"| {{c|zt.get_sys_time()}}
| {{v|e}}
|-
| {{v|15,16}}
| {{c|traits::locate_zone(name)}}
| {{v|c,e}}
|}
@a@ 若 {{c|traits::default_zone()}} 非良构，则指定来调用该表达式的构造函数 {{v|1,2}} 不参与重载决议。
@b@ 若 {{c|std::is_copy_constructible_v&lt;TimeZonePtr&gt;}} 为 false 则预置的复制构造函数 {{v|3}} 被定义为弃置。
@c@ 若 {{c|traits::locate_zone(name)}} 非良构或若该表达式不可转换成 {{tt|TimeZonePtr}}，则带 {{lc|std::string_view}} 形参 {{tt|name}} 的构造函数 {{v|6,8,10,12,15-16}} 不参与重载决议。
@d@ 若 {{c|zone-&gt;to_sys}} 非良构或其结果不可转换成 {{c|std::chrono::sys_time&lt;duration&gt;}}，则指定来调用该调用表达式的构造函数 {{v|9-12}} 不参与重载决议。
@e@ 若 {{tt|Duration2}} 不可转换成 {{tt|Duration}}，则带模板形参 {{tt|Duration2}} 的构造函数 {{v|4,13-16}} 不参与重载决议。

若（按上述方式初始化的）时区指针不指代合法时区，则行为未定义。

===注解===
{{tt|zoned_time}} 无移动构造函数，而移动它的尝试将代之以用预置的复制构造函数 {{v|3}} 进行复制。从而当 {{tt|TimeZonePtr}} 是仅移动的类型时，{{tt|zoned_time}} 不可移动：既不能复制亦不能移动它。

构造函数 {{v|14,16}} 接受 {{lc|std::chrono::choose}} 形参，但该形参无效果。

===Example===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;

int main()
{
    using std::chrono_literals::operator""y;
    using std::operator""sv;

    std::cout &lt;&lt; std::chrono::zoned_time{} &lt;&lt; " : default\n";

    constexpr std::string_view location1{"America/Phoenix"sv};
    std::cout &lt;&lt; std::chrono::zoned_time{location1} &lt;&lt; " : " &lt;&lt; location1 &lt;&lt; '\n';

    const std::chrono::time_zone* timeZonePtr = std::chrono::locate_zone("UTC");
    std::cout &lt;&lt; std::chrono::zoned_time{timeZonePtr} &lt;&lt; " : UTC time zone\n";

    constexpr auto location2{"Europe/Rome"sv};
    std::cout &lt;&lt; std::chrono::zoned_time{location2, std::chrono::local_days{2021y/12/31}&lt;!----&gt;}
              &lt;&lt; " : " &lt;&lt; location2 &lt;&lt; '\n';

    constexpr auto location3{"Europe/Rome"sv};
    constexpr auto some_date = std::chrono::sys_time&lt;std::chrono::days&gt;{2021y/12/31};
    std::cout &lt;&lt; std::chrono::zoned_time{location3, some_date}
              &lt;&lt; " : " &lt;&lt; location3 &lt;&lt; '\n';

    const auto now =
        std::chrono::floor&lt;std::chrono::minutes&gt;(std::chrono::system_clock::now());
    constexpr auto location4{"Europe/Rome"sv};
    std::cout &lt;&lt; std::chrono::zoned_time{location4, now} &lt;&lt; " : " &lt;&lt; location4 &lt;&lt; '\n';

    constexpr auto NewYork{"America/New_York"sv};
    constexpr auto Tokyo{"Asia/Tokyo"sv};
    const std::chrono::zoned_time tz_Tokyo{Tokyo, now};
    const std::chrono::zoned_time tz_NewYork{NewYork, now};
    std::cout &lt;&lt; std::chrono::zoned_time{Tokyo, tz_NewYork} &lt;&lt; " : " &lt;&lt; Tokyo &lt;&lt; '\n';
    std::cout &lt;&lt; std::chrono::zoned_time{NewYork, tz_Tokyo} &lt;&lt; " : " &lt;&lt; NewYork &lt;&lt; '\n';
}
|p=true
|output=
1970-01-01 00:00:00 UTC : default
1969-12-31 17:00:00 MST : America/Phoenix
1970-01-01 00:00:00 UTC : UTC time zone
2021-12-31 00:00:00 CET : Europe/Rome
2021-12-31 01:00:00 CET : Europe/Rome
2021-09-20 23:04:00 CEST : Europe/Rome
2021-09-21 06:04:00 JST : Asia/Tokyo
2021-09-20 17:04:00 EDT : America/New_York
}}

{{langlinks|de|en|es|ja|ru}}
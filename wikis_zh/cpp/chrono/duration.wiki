{{cpp/chrono/title|duration}}
{{cpp/chrono/duration/navbar}}
{{ddcl|header=chrono|since=c++11|1=
template&lt;
    class Rep,
    class Period = std::ratio&lt;1&gt;
&gt; class duration;
}}

类模板 {{tt|std::chrono::duration}} 表示时间间隔。

它由 {{tt|Rep}} 类型的计次数和计次周期组成，其中计次周期是一个编译期有理{{ltt|cpp/numeric/ratio/ratio|f}}，表示从一个计次到下一个的秒数。

在 {{tt|duration}} 存储的数据只有 {{tt|Rep}} 类型的计次数。&lt;!-- 由 N2661 ，不是确实地以标准用词 --&gt;若 {{tt|Rep}} 是浮点类型，则 {{tt|duration}} 能表示小数的计次数。{{tt|Period}} 被包含为时长类型的一部分，且只在不同时长间转换时使用。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|rep}}|{{tt|Rep}}，表示计次数的算术类型或模仿算术类型的类}}
{{dsc|{{tt|period}}|{{rev inl|until=c++17|{{tt|Period}}}}{{rev inl|since=c++17|{{c/core|typename Period::type}}}}，表示计次周期的 {{lc|std::ratio}}（即每次的秒数）}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/chrono/duration/dsc constructor}}
{{dsc inc|cpp/chrono/duration/dsc operator{{=}}}}
{{dsc inc|cpp/chrono/duration/dsc count}}
{{dsc inc|cpp/chrono/duration/dsc zero}}
{{dsc inc|cpp/chrono/duration/dsc min}}
{{dsc inc|cpp/chrono/duration/dsc max}}
{{dsc inc|cpp/chrono/duration/dsc operator arith}}
{{dsc inc|cpp/chrono/duration/dsc operator arith2}}
{{dsc inc|cpp/chrono/duration/dsc operator arith3}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/chrono/duration/dsc operator arith4}}
{{dsc inc|cpp/chrono/duration/dsc operator cmp}}
{{dsc inc|cpp/chrono/duration/dsc duration cast}}
{{dsc inc|cpp/chrono/duration/dsc floor}}
{{dsc inc|cpp/chrono/duration/dsc ceil}}
{{dsc inc|cpp/chrono/duration/dsc round}}
{{dsc inc|cpp/chrono/duration/dsc abs}}
{{dsc inc|cpp/chrono/duration/dsc operator ltlt}}
{{dsc inc|cpp/chrono/duration/dsc from_stream}}
{{dsc end}}

===辅助类型===
下表中用到的类型 {{c/core|/* intXX */}} 表示至少 XX 位的有符号整数类型。
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{ttb|std::chrono::nanoseconds}}|{{c/core|std::chrono::duration&lt;/* int64 */, std::nano&gt;}}}}
{{dsc|{{ttb|std::chrono::microseconds}}|{{c/core|std::chrono::duration&lt;/* int55 */, std::micro&gt;}}}}
{{dsc|{{ttb|std::chrono::milliseconds}}|{{c/core|std::chrono::duration&lt;/* int45 */, std::milli&gt;}}}}
{{dsc|{{ttb|std::chrono::seconds}}|{{c/core|std::chrono::duration&lt;/* int35 */&gt;}}}}
{{dsc|{{ttb|std::chrono::minutes}}|{{c/core|std::chrono::duration&lt;/* int29 */, std::ratio&lt;60&gt;&gt;}}}}
{{dsc|{{ttb|std::chrono::hours}}|{{c/core|std::chrono::duration&lt;/* int23 */, std::ratio&lt;3600&gt;&gt;}}}}
{{dsc|{{ttb|std::chrono::days}} {{mark since c++20}}|{{c/core|std::chrono::duration&lt;/* int25 */, std::ratio&lt;86400&gt;&gt;}}}}
{{dsc|{{ttb|std::chrono::weeks}} {{mark since c++20}}|{{c/core|std::chrono::duration&lt;/* int22 */, std::ratio&lt;604800&gt;&gt;}}}}
{{dsc|{{ttb|std::chrono::months}} {{mark since c++20}}|{{c/core|std::chrono::duration&lt;/* int20 */, std::ratio&lt;2629746&gt;&gt;}}}}
{{dsc|{{ttb|std::chrono::years}} {{mark since c++20}}|{{c/core|std::chrono::duration&lt;/* int17 */, std::ratio&lt;31556952&gt;&gt;}}}}
{{dsc end}}
注意：到 {{tt|hours}} 为止的每个预定义时长类型至少涵盖 ±292 年的范围。

{{rrev|since=c++20|
每个预定义时长类型 {{tt|days}}、{{tt|weeks}}、{{tt|months}} 和 {{tt|years}} 至少涵盖 ±40000 年范围。{{tt|years}} 等于 365.2425 {{tt|days}}（格里高利年的平均长度）。{{tt|months}} 等于 30.436875 {{tt|days}}（恰好为 {{tt|years}} 的 1/12）。
}}

===辅助类===
{{dsc begin}}
{{dsc inc|cpp/chrono/duration/dsc common_type}}
{{dsc inc|cpp/chrono/dsc treat_as_floating_point}}
{{dsc inc|cpp/chrono/dsc duration_values}}
{{dsc inc|cpp/chrono/dsc formatter|duration}}
{{dsc hash|cpp/chrono/duration|nested=true|notes={{mark c++26}}}}
{{dsc end}}

===辅助特化===
{{dcl begin}}
{{dcl|since=c++23|1=
template&lt; class Rep, class Period &gt;
constexpr bool enable_nonlocking_formatter_optimization&lt;chrono::duration&lt;Rep, Period&gt;&gt; 
    = enable_nonlocking_formatter_optimization&lt;Rep&gt;;
}}
{{dcl end}}

这个 {{ltt std|cpp/utility/format/enable_nonlocking_formatter_optimization}} 针对模板形参 {{tt|Rep}} 已启用的 {{tt|chrono::duration}} 对象的打印启用 {{ltt std|cpp/io/print}} 和 {{ltt std|cpp/io/println}} 的高效实现。

===字面量===
{{dsc begin}}
{{dsc namespace|std::literals::chrono_literals|inline=true}}
{{dsc inc|cpp/chrono/dsc operator""h}}
{{dsc inc|cpp/chrono/dsc operator""min}}
{{dsc inc|cpp/chrono/dsc operator""s}}
{{dsc inc|cpp/chrono/dsc operator""ms}}
{{dsc inc|cpp/chrono/dsc operator""us}}
{{dsc inc|cpp/chrono/dsc operator""ns}}
{{dsc end}}

{{rrev|since=c++20|
注意：字面量后缀 {{tt|d}} 和 {{tt|y}} 不指代 {{tt|days}} 和 {{tt|years}}，而是分别指代 {{ltt|cpp/chrono/day}} 和 {{ltt|cpp/chrono/year}}。
}}

===注解===
时长对象 {{c|d}} 持有的实际时间间隔（以秒计）大致等于 {{c|1=d.count() * D::period::num / D::period::den}}，其中 {{tt|D}} 是类型 {{tt|chrono::duration&lt;&gt;}}，{{c|d}} 是具有该类型的对象。

{{feature test macro|__cpp_lib_chrono_udls|value=201304L|std=C++14|[[#字面量|时间类型的用户定义字面量]]}}

===示例===
{{example
|此示例演示如何定义几种自定义时长类型及在类型间转换：
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

using namespace std::chrono_literals;

template&lt;typename T1, typename T2&gt;
using mul = std::ratio_multiply&lt;T1, T2&gt;;

int main()
{
    using microfortnights = std::chrono::duration&lt;float,
        mul&lt;mul&lt;std::ratio&lt;2&gt;, std::chrono::weeks::period&gt;, std::micro&gt;&gt;;
    using nanocenturies = std::chrono::duration&lt;float,
        mul&lt;mul&lt;std::hecto, std::chrono::years::period&gt;, std::nano&gt;&gt;;
    using fps_24 = std::chrono::duration&lt;double, std::ratio&lt;1, 24&gt;&gt;;
    
    std::cout &lt;&lt; "1 秒是：\n";
    
    // 无精度损失的整数尺度转换：无转型
    std::cout &lt;&lt; std::chrono::milliseconds(1s).count() &lt;&lt; " 毫秒\n"
              &lt;&lt; std::chrono::microseconds(1s).count() &lt;&lt; " 微秒\n"
              &lt;&lt; std::chrono::nanoseconds(1s).count()  &lt;&lt; " 纳秒\n";
    
    // 有精度损失的整数尺度转换：需要转型
    std::cout &lt;&lt; std::chrono::duration_cast&lt;std::chrono::minutes&gt;(1s).count()
              &lt;&lt; " 分\n";
    // 不用 duration_cast 的替代方法：
    std::cout &lt;&lt; 1s / 1min &lt;&lt; " 分\n";
    
    // 浮点尺度转换：无转型
    std::cout &lt;&lt; microfortnights(1s).count() &lt;&lt; " 微两周\n"
              &lt;&lt; nanocenturies(1s).count() &lt;&lt; " 纳世纪\n"
              &lt;&lt; "24fps 下的 " &lt;&lt; fps_24(1s).count() &lt;&lt; " 帧\n";
}
|output=
1 秒是：
1000 毫秒
1000000 微秒
1000000000 纳秒
0 分
0 分
0.82672 微两周
0.316887 纳世纪
24fps 下的 24 帧
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
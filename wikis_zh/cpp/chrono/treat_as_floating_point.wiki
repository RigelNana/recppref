{{cpp/chrono/title|treat_as_floating_point}}
{{cpp/chrono/duration/navbar}}
{{dcl begin}}
{{dcl header|chrono}}
{{dcl|since=c++11|1=
template&lt; class Rep &gt; 
struct treat_as_floating_point : std::is_floating_point&lt;Rep&gt; {};
}}
{{dcl end}}

{{tt|std::chrono::treat_as_floating_point}} 特征帮助确定时长是否能转换成拥有另一种不同计次周期的时长。

两个时长间的隐式转换通常依赖于时长的计次周期。然而若 {{c|std::chrono::treat_as_floating_point&lt;Rep&gt;::value}} 为 {{true}} 则不管计次周期如何，均可发生隐式转换。

=== 辅助变量模板 ===
{{ddcl|since=c++17|1=
template&lt; class Rep &gt;
constexpr bool treat_as_floating_point_v = treat_as_floating_point&lt;Rep&gt;::value;
}}

===特化===
可针对程序定义的类型特化 {{tt|std::chrono::treat_as_floating_point}}。

===示例===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;thread&gt;

void timed_piece_of_code() 
{
    std::chrono::milliseconds simulated_work(2);
    std::this_thread::sleep_for(simulated_work);
}

int main() 
{
    auto start = std::chrono::high_resolution_clock::now();

    std::cout &lt;&lt; "运行一些耗时代码...\n";
    timed_piece_of_code();

    auto stop = std::chrono::high_resolution_clock::now();

    // 浮点毫秒类型
    using FpMilliseconds = 
        std::chrono::duration&lt;float, std::chrono::milliseconds::period&gt;;

    static_assert(std::chrono::treat_as_floating_point&lt;FpMilliseconds::rep&gt;::value, 
                  "Rep required to be floating point");

    // 注意此处不允许隐式转换
    auto i_ms = std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(stop - start);

    // 注意此处允许隐式转换
    auto f_ms = FpMilliseconds(stop - start);

    std::cout &lt;&lt; "计时统计:\n";

    std::cout &lt;&lt; "  使用默认表示的按毫秒计时间: "
              &lt;&lt; i_ms.count() &lt;&lt; '\n';

    std::cout &lt;&lt; "  使用浮点表示的按毫秒计时间: "
              &lt;&lt; f_ms.count() &lt;&lt; '\n';
}
|output=
运行一些耗时代码...
计时统计:
  使用默认表示的按毫秒计时间: 2
  使用浮点表示的按毫秒计时间: 2.57307
|p=true
}}

===参阅===
{{dsc begin}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
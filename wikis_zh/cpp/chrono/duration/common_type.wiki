{{cpp/title|common_type{{small|&lt;std::chrono::duration&gt;}}}}
{{cpp/chrono/duration/navbar}}
{{ddcl|header=chrono|since=c++11|
template&lt; class Rep1, class Period1, class Rep2, class Period2 &gt;
struct common_type&lt;std::chrono::duration&lt;Rep1, Period1&gt;,
                   std::chrono::duration&lt;Rep2, Period2&gt;&gt;;
}}

暴露名为 {{tt|type}} 的类型，它是两个 {{lc|std::chrono::duration}} 的公共类型，其周期为 {{tt|Period1}} 与 {{tt|Period2}} 的最大公约数。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|type}}|{{c/core|std::chrono::duration&lt;typename std::common_type&lt;Rep1, Rep2&gt;::type, /* 见注解 */&gt;}}}}
{{dsc end}}

===注解===
所产生的时长周期能通过构成 {{c|Period1::num}} 和 {{c|Period2::num}} 的最大公约数与 {{c|Period1::den}} 和 {{c|Period2::den}} 的最小公倍数之间的比值计算而得。

===示例===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;type_traits&gt;

// std::chrono 已找到最大公约数，类似使用 std::common_type&lt;&gt;。
// 我们令类型推导外化。 

template&lt;typename T,typename S&gt;
constexpr auto durationDiff(const T&amp; t, const S&amp; s)
    -&gt; typename std::common_type&lt;T,S&gt;::type
{
    typedef typename std::common_type&lt;T,S&gt;::type Common;
    return Common(t) - Common(s);
}

int main() 
{
    using namespace std::literals;

    constexpr auto ms = 30ms;
    constexpr auto us = 1100us;
    constexpr auto diff = durationDiff(ms, us);

    std::cout &lt;&lt; ms &lt;&lt; " - " &lt;&lt; us &lt;&lt; " = " &lt;&lt; diff &lt;&lt; '\n';
}
|output=
30ms - 1100us = 28900us
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/chrono/time_point/dsc common_type}}
{{dsc inc|cpp/types/dsc common_type}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
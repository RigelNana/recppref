{{cpp/chrono/duration/title|duration}}
{{cpp/chrono/duration/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1=
constexpr duration() = default;
}}
{{dcl|num=2|since=c++11|1=
duration( const duration&amp; ) = default;
}}
{{dcl|num=3|since=c++11|
template&lt; class Rep2 &gt;
constexpr explicit duration( const Rep2&amp; r );
}}
{{dcl|num=4|since=c++11|
template&lt; class Rep2, class Period2 &gt;
constexpr duration( const duration&lt;Rep2, Period2&gt;&amp; d );
}}
{{dcl end}}

从数个可选数据源之一构造新的 {{tt|duration}}。

@1@ 默认构造函数。

@2@ 复制构造函数。

@3@ 构造拥有计次 {{c|r}} 的时长。
@@ {{cpp/enable if|满足以下所有条件}}：
* {{c|is_convertible&lt;const Rep2&amp;, Rep&gt;::value}} 是 {{c|true}}。
* 满足以下任意条件：&lt;ref&gt;也就是说，不能从浮点值构造拥有整数计次的时长，但能从整数值构造拥有浮点计次的时长。&lt;/ref&gt;
:* {{c|std::chrono::treat_as_floating_point&lt;Rep&gt;::value}} 是 {{c|true}}。
:* {{c|std::chrono::treat_as_floating_point&lt;Rep2&gt;::value}} 是 {{c|false}}。

@4@ 通过转换 {{c|d}} 到适当的周期和计次来构造时长，如同用 {{c|std::chrono::duration_cast&lt;duration&gt;(d).count()}}。
@@ {{cpp/enable if|转换不会引发溢出，并且满足以下任意条件}}：&lt;ref&gt;也就是说，要么时长使用浮点计次，要么 {{tt|Period2}} 能被 {{tt|Period}} 整除。&lt;/ref&gt;
* {{c|std::chrono::treat_as_floating_point&lt;Rep&gt;::value}} 是 {{c|true}}。
* 满足以下所有条件：
:* {{c|std::ratio_divide&lt;Period2, Period&gt;::den}} 是 {{c|1}}。
:* {{c|std::chrono::treat_as_floating_point&lt;Rep2&gt;::value}} 是 {{c|false}}。

&lt;references/&gt;

===参数===
{{par begin}}
{{par|r|计次数}}
{{par|d|要被复制的时长}}
{{par end}}

===示例===
{{example
|下列代码展示数个如何构造时长的示例（既有有效方式也有无效方式）：
|code=
#include &lt;chrono&gt;

int main()
{
    std::chrono::hours h(1); // 一小时
    std::chrono::milliseconds ms{3}; // 3 毫秒
    std::chrono::duration&lt;int, std::kilo&gt; ks(3); // 3000 秒
    
    // 错误：treat_as_floating_point&lt;int&gt;::value == false,
    // 此时长只允许整数计次
//  std::chrono::duration&lt;int, std::kilo&gt; d3(3.5);
    
    // 使用小数计次的 30Hz 时钟
    std::chrono::duration&lt;double, std::ratio&lt;1, 30&gt;&gt; hz30(3.5);
    
    // 从 3 毫秒构造 3000 微秒
    std::chrono::microseconds us = ms;
    // 错误：1/1000000 不能被 1/1000 除净
//  std::chrono::milliseconds ms2 = us
    std::chrono::duration&lt;double, std::milli&gt; ms2 = us; // 3.0 毫秒
}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2094|std=C++11|before=对于重载 {{v|4}}，对 {{c|std::ratio_divide&lt;Period2, period&gt;::den}} 求值&lt;br&gt;可能会导致 {{c|std::ratio_divide&lt;Period2, period&gt;::num}} 溢出|after=此时重载 {{v|4}} 不会参与重载决议}}
{{dr list item|wg=lwg|dr=3050|std=C++11|before=可转换性制约使用非 const 亡值|after=改为使用 const 左值}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/chrono/duration/dsc operator{{=}}}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
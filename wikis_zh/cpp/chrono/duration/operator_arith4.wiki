{{title|1=operator+,-,*,/,%{{small|(std::chrono::duration)}}}}
{{cpp/chrono/duration/navbar}}
{{dcl begin}}
{{dcl|since=c++11|num=1|1=
template&lt; class Rep1, class Period1, class Rep2, class Period2 &gt;
typename std::common_type&lt;duration&lt;Rep1,Period1&gt;, duration&lt;Rep2,Period2&gt;&gt;::type
    constexpr operator+( const duration&lt;Rep1,Period1&gt;&amp; lhs,
                         const duration&lt;Rep2,Period2&gt;&amp; rhs );
}}
{{dcl|since=c++11|num=2|1=
template&lt; class Rep1, class Period1, class Rep2, class Period2 &gt;
typename std::common_type&lt;duration&lt;Rep1,Period1&gt;, duration&lt;Rep2,Period2&gt;&gt;::type
    constexpr operator-( const duration&lt;Rep1,Period1&gt;&amp; lhs,
                         const duration&lt;Rep2,Period2&gt;&amp; rhs );
}}
{{dcl|since=c++11|num=3|1=
template&lt; class Rep1, class Period, class Rep2 &gt;
duration&lt;typename std::common_type&lt;Rep1,Rep2&gt;::type, Period&gt;
    constexpr operator*( const duration&lt;Rep1,Period&gt;&amp; d,
                         const Rep2&amp; s );
}}
{{dcl|since=c++11|num=4|1=
template&lt; class Rep1, class Rep2, class Period &gt;
duration&lt;typename std::common_type&lt;Rep1,Rep2&gt;::type, Period&gt;
    constexpr operator*( const Rep1&amp; s,
                         const duration&lt;Rep2,Period&gt;&amp; d );
}}
{{dcl|since=c++11|num=5|1=
template&lt; class Rep1, class Period, class Rep2 &gt;
duration&lt;typename std::common_type&lt;Rep1,Rep2&gt;::type, Period&gt;
    constexpr operator/( const duration&lt;Rep1,Period&gt;&amp; d,
                         const Rep2&amp; s );
}}
{{dcl|since=c++11|num=6|1=
template&lt; class Rep1, class Period1, class Rep2, class Period2 &gt;
typename std::common_type&lt;Rep1,Rep2&gt;::type
    constexpr operator/( const duration&lt;Rep1,Period1&gt;&amp; lhs,
                         const duration&lt;Rep2,Period2&gt;&amp; rhs );
}}
{{dcl|since=c++11|num=7|1=
template&lt; class Rep1, class Period, class Rep2 &gt;
duration&lt;typename std::common_type&lt;Rep1,Rep2&gt;::type, Period&gt;
    constexpr operator%( const duration&lt;Rep1, Period&gt;&amp; d,
                         const Rep2&amp; s );
}}
{{dcl|since=c++11|num=8|1=
template&lt; class Rep1, class Period1, class Rep2, class Period2 &gt;
typename std::common_type&lt;duration&lt;Rep1,Period1&gt;, duration&lt;Rep2,Period2&gt;&gt;::type
    constexpr operator%( const duration&lt;Rep1,Period1&gt;&amp; lhs,
                         const duration&lt;Rep2,Period2&gt;&amp; rhs );
}}
{{dcl end}}

在两个时长或时长和计次数之间进行基本算术运算。

@1@ 转换两个时长为其公共类型，并创建计次数为转换后计次数之和的时长。

@2@ 转换两个时长为其公共类型，并创建计次数为转换后从 {{c|lhs}} 的计次数减去 {{c|rhs}} 的计次数的时长。

@3,4@ 转换时长 {{c|d}} 到其 {{tt|rep}} 为 {{tt|Rep1}} 与 {{tt|Rep2}} 之间的公共类型的时长，并将转换后的计次数乘以 {{c|s}}。{{cpp/enable_if| {{c|s}} 可转换到 {{c|typename std::common_type&lt;Rep1, Rep2&gt;::type}} |plural=yes}}。

@5@ 转换时长 {{c|d}} 到其 {{tt|rep}} 为 {{tt|Rep1}} 与 {{tt|Rep2}} 之间的公共类型的时长，并将转换后的计次数除以 {{c|s}}。{{cpp/enable_if| {{c|s}} 可转换到 {{c|typename std::common_type&lt;Rep1, Rep2&gt;::type}} 且 {{tt|Rep2}} 不是 {{tt|duration}} 的特化}}。

@6@ 转换两个时长到其公共类型，并将 {{c|lhs}} 转换后的计次数除以 {{c|rhs}} 转换后的计次数。注意此运算符的返回值不是时长。

@7@ 转换时长 {{c|d}} 到其 {{tt|rep}} 为 {{tt|Rep1}} 与 {{tt|Rep2}} 之间的公共类型的时长，并创建计次数为此时长的计次数除以 {{c|s}} 的时长。{{cpp/enable_if| {{c|s}} 可转换到 {{c|typename std::common_type&lt;Rep1, Rep2&gt;::type}} 且 {{tt|Rep2}} 不是 {{tt|duration}} 的特化}}。

@8@ 转换两个时长到其公共类型，并创建计次数为转换后计次数取余的时长。

===参数===
{{par begin}}
{{par | lhs |运算符左侧的 duration}}
{{par | rhs |运算符右侧的 duration}}
{{par | d |混合参数运算符的时长实参}}
{{par | s |混合参数运算符的计次实参}}
{{par end}}

===返回值===
假设 {{c|CD}} 为函数返回类型且 {{c|CD&lt;A, B&gt; {{=}} std::common_type&lt;A, B&gt;::type}}，则：

@1@ {{c|CD(CD(lhs).count() + CD(rhs).count())}}
@2@ {{c|CD(CD(lhs).count() - CD(rhs).count())}}
@3,4@ {{c|CD(CD(d).count() * s)}} 
@5@ {{c|CD(CD(d).count() / s)}}
@6@ {{c|CD(lhs).count() / CD(rhs).count()}}（此运算符的返回类型非 duration）
@7@ {{c|CD(CD(d).count() % s)}}
@8@ {{c|CD(CD(lhs).count() % CD(rhs).count())}}

===示例===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    // 简单算术
    std::chrono::seconds s = std::chrono::hours(1)
                           + 2 * std::chrono::minutes(10)
                           + std::chrono::seconds(70) / 10;
    std::cout &lt;&lt; "1 时 + 2*10 分 + 70/10 秒 = " &lt;&lt; s &lt;&lt; " (秒)\n";

    using namespace std::chrono_literals;

    // 时长除以一个数和时长除以另一时长的区别
    std::cout &lt;&lt; "将其除以 2 分得到 "
              &lt;&lt; s / 2min &lt;&lt; '\n'
              &lt;&lt; "将其除以 2 得到 "
              &lt;&lt; (s / 2).count() &lt;&lt; " 秒\n";

   // 余数运算符在确定此特定时长在时间框架的场合有用，
   // 例如，拆分它为时、分和秒：
    std::cout &lt;&lt; s &lt;&lt; " (秒) = "
              &lt;&lt; std::chrono::duration_cast&lt;std::chrono::hours&gt;(
                 s) &lt;&lt; " (时) + "
              &lt;&lt; std::chrono::duration_cast&lt;std::chrono::minutes&gt;(
                 s % 1h) &lt;&lt; " (分) + "
              &lt;&lt; std::chrono::duration_cast&lt;std::chrono::seconds&gt;(
                 s % 1min) &lt;&lt; " (秒)\n";

    constexpr auto sun_earth_distance{150'000'000ULL}; // km
    constexpr auto speed_of_light{300000ULL}; // km/sec
    std::chrono::seconds t(sun_earth_distance / speed_of_light); // sec
    std::cout &lt;&lt; "光子从太阳飞到地球需要  "
              &lt;&lt; t / 1min &lt;&lt; " 分 " &lt;&lt; t % 1min &lt;&lt; " (秒)\n";
}
 | output=
1 时 + 2*10 分 + 70/10 秒 = 4807s (秒)
将其除以 2 分得到 40
将其除以 2 得到 2403 秒
4807s (秒) = 1h (时) + 20min (分) + 7s (秒)
光子从太阳飞到地球需要 8 分 20s (秒)
}}

===缺陷报告===
{{dr list begin}}
{{dr list item | wg=lwg | std=C++11 | dr=3050 | before=可转换性约束使用非 const 亡值 | after=替而使用 const 左值}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
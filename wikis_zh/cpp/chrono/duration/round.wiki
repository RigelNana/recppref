{{cpp/chrono/title|round{{small|(std::chrono::duration)}}}}
{{cpp/chrono/duration/navbar}}
{{ddcl|since=c++17|header=chrono|
template&lt; class ToDuration, class Rep, class Period &gt;
constexpr ToDuration round( const std::chrono::duration&lt;Rep, Period&gt;&amp; d );
}}

返回 {{tt|ToDuration}} 可以表示的最接近 {{tt|d}} 的 {{tt|t} 。若有两个这样的值，则返回偶数值（即使得 {{c|1=t % 2 == 0}} 的值 {{tt|t}}）。

除非 {{tt|ToDuration}} 是 {{lc|std::chrono::duration}} 的特化且 {{c|std::chrono::treat_as_floating_point_v&lt;typename ToDuration::rep&gt;}} 为 {{c|false}}，否则函数不参与重载决议。

===参数===
{{par begin}}
{{par | d | 要转换的时长}}
{{par end}}

===返回值===
取整到 {{tt|ToDuration}} 类型的最接近 {{c|d}} 时长，两值正中的情况取到偶数。

===可能的实现===
{{eq fun|1=
namespace detail
{
    template&lt;class&gt; inline constexpr bool is_duration_v = false;
    template&lt;class Rep, class Period&gt; inline constexpr bool is_duration_v&lt;
        std::chrono::duration&lt;Rep, Period&gt;&gt; = true;
}

template&lt;class To, class Rep, class Period,
         class = std::enable_if_t&lt;detail::is_duration_v&lt;To&gt; &amp;&amp;
                !std::chrono::treat_as_floating_point_v&lt;typename To::rep&gt;&gt;&gt;
constexpr To round(const std::chrono::duration&lt;Rep, Period&gt;&amp; d)
{
    To t0 = std::chrono::floor&lt;To&gt;(d);
    To t1 = t0 + To{1};
    auto diff0 = d - t0;
    auto diff1 = t1 - d;
    if (diff0 == diff1)
    {
        if (t0.count() &amp; 1)
            return t1;
        return t0;
    }
    else if (diff0 &lt; diff1)
        return t0;
    return t1;
}
}}

===示例===
{{chrono_duration_floor_round_ceil_example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/chrono/duration/dsc duration_cast}}
{{dsc inc|cpp/chrono/duration/dsc floor}}
{{dsc inc|cpp/chrono/duration/dsc ceil}}
{{dsc inc|cpp/chrono/time_point/dsc round}}
{{dsc inc|cpp/numeric/math/dsc round}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/chrono/duration/title|operator{{=}}}}
{{cpp/chrono/duration/navbar}}
{{dcl begin}}
{{dcl|since=c++11|1=
duration&amp; operator{{=}}( const duration &amp;other ) {{=}} default;
}}
{{dcl end}}

赋值一个 {{tt|duration}} 的内容到另一个。

===参数===
{{par begin}}
{{par | other  | 复制来源的 {{tt|duration}} }}
{{par end}}

===示例===
{{example|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    using namespace std::chrono_literals;

    std::chrono::hours z_hours{};
    std::chrono::seconds z_seconds{};

    z_hours = 2h; // ok，无需转换

    z_seconds = z_hours;
    // 首先，用转换构造函数来创建左操作数类型的临时对象。
    // 此构造函数隐含调用了转换函数 chrono::duration_cast&lt;std::seconds&gt;(z_hours)。
    // 所得的右操作数右值与左操作数类型相同，`operator=` 实施最终的赋值。

    std::cout &lt;&lt; "时: " &lt;&lt; z_hours.count() &lt;&lt; '\n';
    std::cout &lt;&lt; "秒: " &lt;&lt; z_seconds.count() &lt;&lt; '\n';

    z_seconds -= 42s;

//  z_hours = z_seconds; // 编译期错误（这是好事）：类型不兼容。
    // 库中避免进行隐式转型，以防止潜在的精度损失。

    z_hours = std::chrono::duration_cast&lt;std::chrono::hours&gt;(z_seconds); // ok
    z_hours = std::chrono::duration_cast&lt;decltype(z_hours)&gt;(z_seconds);  // 同上

    std::cout &lt;&lt; "hours: " &lt;&lt; z_hours.count() &lt;&lt; '\n';
    std::cout &lt;&lt; "seconds: " &lt;&lt; z_seconds.count() &lt;&lt; '\n';

    std::chrono::duration&lt;double, std::ratio&lt;3600&gt;&gt; z2_hours{};

    z2_hours = z_seconds; // ok，未截断，隐式转型

    std::cout &lt;&lt; "hours: " &lt;&lt; z2_hours.count() &lt;&lt; '\n';
}
|output=
时: 2
秒: 7200
时: 1
秒: 7158
时: 1.98833
}}
===参阅===
{{dsc begin}}
{{dsc inc|cpp/chrono/duration/dsc constructor}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
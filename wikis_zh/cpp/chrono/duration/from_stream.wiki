{{cpp/chrono/title|from_stream {{small|(std::chrono::duration)}}}}
{{cpp/chrono/duration/navbar}}
{{dcl begin}}
{{dcl header|chrono}}
{{dcl|since=c++20|1=
template&lt; class CharT, class Traits, class Rep, class Period,
          class Alloc = std::allocator&lt;CharT&gt; &gt;
std::basic_istream&lt;CharT, Traits&gt;&amp;
    from_stream( std::basic_istream&lt;CharT, Traits&gt;&amp; is, const CharT* fmt,
                 std::chrono::duration&lt;Rep, Period&gt;&amp; d,
                 std::basic_string&lt;CharT, Traits, Alloc&gt;* abbrev = nullptr,
                 std::chrono::minutes* offset = nullptr );
}}
{{dcl end}}

尝试按照格式字符串 {{c|fmt}} 将输入流 {{c|is}} 分析到 {{lc|std::chrono::duration}} {{tt|d}} 中，判读为自午夜起的当天时间。

表现为{{named req|UnformattedInputFunction|无格式输入函数}}，但它在 {{c|is.gcount()}} 上有未指定的效果。构造并检查 {{tt|sentry}} 对象后，尝试按照 {{c|fmt}} 所指定的格式分析输入流 {{tt|is}} 到 {{tt|d}} 中。若分析无法解码合法的 {{tt|duration}}，则调用 {{c|is.setstate(std::ios_base::failbit)}} 并且不修改 {{c|d}}。

若使用并格式指定符 {{tt|%Z}} 并成功分析，则若 {{c|abbrev}} 非空则将分析的值赋给 {{c|*abbrev}}。若使用 {{tt|%z}} 或带修饰的变体并成功分析，则若 {{c|offset}} 非空则将分析的值赋给 {{c|*offset}}。

===参数===
{{par begin}}
{{par|is|输入流}}
{{par|fmt|格式字符串（见下文）}}
{{par|d|将持有分析结果的 {{lc|std::chrono::duration}} 对象}}
{{par|abbrev|若非空，则为指向对象的指针，它将持有对应于 {{tt|%Z}} 说明符的时区缩写或名字}}
{{par|offset|若非空，则为指向对象的指针，它将持有对应于 {{tt|%z}} 说明符的 UTC 偏移值}}
{{par end}}

=== 格式字符串 ===
{{cpp/chrono/from_stream format}}

=== 返回值 ===
{{c|is}}

===示例===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;
#include &lt;sstream&gt;

int main()
{
    std::istringstream is{"18:14:21"};
    is.imbue(std::locale("en_US.utf-8"));
    std::chrono::hours hh{};
    std::chrono::from_stream(is, "%H:%M:%S", hh);
    is.fail() ? std::cout &lt;&lt; "Parse failed!\n" : std::cout &lt;&lt; hh.count() &lt;&lt; '\n';
}
|p=true
|output=
18
}}

=== 参阅 ===
{{dsc begin}}
{{dsc inc|cpp/chrono/dsc parse}}
{{dsc end}}

{{langlinks|de|en|es|ja|ru}}
{{cpp/chrono/year_month_weekday/title|operator sys_days|operator local_days}}
{{cpp/chrono/year_month_weekday/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|
constexpr operator std::chrono::sys_days() const noexcept;
}}
{{dcl|since=c++20|num=2|
constexpr explicit operator std::chrono::local_days() const noexcept;
}}
{{dcl end}}

转换 {{c|*this}} 为与此 {{tt|year_month_weekday}} 表示同一日期的 {{lc|std::chrono::time_point}}。

@1@ 若 {{c|year().ok() &amp;&amp; month().ok() &amp;&amp; weekday().ok()}}：
:* 若 {{c|1=index() == 0}}，则返回表示该年月的首个 {{lc|weekday()}} 的 7 日前的日期的 {{tt|sys_days}}。
:* 其他情况下，返回表示该年月的首个 {{lc|weekday()}} 的 {{c|(index() - 1) * 7}} 日后的日期的 {{tt|sys_days}}。 
@@ 否则，返回值未指定。

@2@ 同 {{v|1}}，但返回 {{tt|local_days}} 而非 {{tt|sys_days}}。等价于 {{c|local_days(sys_days(*this).time_since_epoch())}}。

===示例===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
using namespace std::chrono;

int main()
{
    constexpr auto ymwd{Tuesday[2]/11/2021};
    std::cout &lt;&lt; ymwd &lt;&lt; '\n';
    // 从基于字段转换为基于序数，以便添加小时
    constexpr auto sd = sys_days{ymwd} + 24h;
    std::cout &lt;&lt; sd &lt;&lt; '\n';
    constexpr auto ymd = floor&lt;days&gt;(sd);
    static_assert(ymd == November/10/2021);
}
|output=
2021/Nov/Tue[2]
2021-11-10 00:00:00
}}

{{langlinks|en|es|ja|ru}}
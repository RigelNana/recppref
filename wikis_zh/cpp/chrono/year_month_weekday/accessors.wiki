{{cpp/chrono/year_month_weekday/title|year|month|weekday|index|weekday_indexed}}
{{cpp/chrono/year_month_weekday/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|
constexpr std::chrono::year year() const noexcept;
}}
{{dcl|since=c++20|num=2|
constexpr std::chrono::month month() const noexcept;
}}
{{dcl|since=c++20|num=3|
constexpr std::chrono::weekday weekday() const noexcept;
}}
{{dcl|since=c++20|num=4|
constexpr unsigned index() const noexcept;
}}
{{dcl|since=c++20|num=5|
constexpr std::chrono::weekday_indexed weekday_indexed() const noexcept;
}}
{{dcl end}}

返回存储于此 {{tt|year_month_weekday}} 对象中的各域的值。

=== 返回值 ===
@1@ 返回存储的 {{lc|std::chrono::year}} 值。
@2@ 返回存储的 {{lc|std::chrono::month}} 值。
@3@ 返回存储的 {{lc|std::chrono::weekday}} 值。
@4@ 返回存储的星期之日索引。
@5@ {{c|weekday()[index()]}}。

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;chrono&gt;

int main()
{
    constexpr auto ym{std::chrono::year(2021)/std::chrono::January};
    constexpr auto wdi{std::chrono::Wednesday[1]};
    auto ymwdi{ym/wdi};
    const auto index{ymwdi.index() + 1};
    auto weekday{ymwdi.weekday() + std::chrono::days(1)};
    ymwdi = {ymwdi.year()/ymwdi.month()/weekday[index]};
    // 2021 年一月第二个星期四
    assert(std::chrono::year_month_day{ymwdi} == std::chrono::January/14/2021);
}
}}

{{langlinks|en|ja|ru}}
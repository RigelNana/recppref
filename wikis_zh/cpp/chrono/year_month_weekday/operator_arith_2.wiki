{{cpp/chrono/title|operator+|operator- {{small|(std::chrono::year_month_weekday)}}}}
{{cpp/chrono/year_month_weekday/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|
constexpr std::chrono::year_month_weekday 
    operator+( const std::chrono::year_month_weekday&amp; ymwd,
               const std::chrono::months&amp; dm ) noexcept;
}}
{{dcl|since=c++20|num=2|
constexpr std::chrono::year_month_weekday 
    operator+( const std::chrono::months&amp; dm,
               const std::chrono::year_month_weekday&amp; ymwd ) noexcept;
}}
{{dcl|since=c++20|num=3|
constexpr std::chrono::year_month_weekday 
    operator+( const std::chrono::year_month_weekday&amp; ymwd,
               const std::chrono::years&amp; dy ) noexcept;
}}
{{dcl|since=c++20|num=4|
constexpr std::chrono::year_month_weekday 
    operator+( const std::chrono::years&amp; dy,
               const std::chrono::year_month_weekday&amp; ymwd ) noexcept;
}}
{{dcl|since=c++20|num=5|
constexpr std::chrono::year_month_weekday
    operator-( const std::chrono::year_month_weekday&amp; ymwd,
               const std::chrono::months&amp; dm ) noexcept;
}}
{{dcl|since=c++20|num=6|
constexpr std::chrono::year_month_weekday 
    operator-( const std::chrono::year_month_weekday&amp; ymwd,
               const std::chrono::years&amp; dy ) noexcept;
}}
{{dcl end}}

@1,2@ 将 {{c|dm.count()}} 月加到 {{c|ymwd}} 所表示的日期。结果与 {{c|std::chrono::year_month(ymwd.year(), ymwd.month()) + dm}} 拥有相同的 {{rlpf|accessors|year}} 和 {{rlpf|accessors|month}}，并与 {{c|ymwd}} 拥有相同的 {{rlpf|accessors|weekday}} 和 {{rlpf|accessors|index}}。
@3,4@ 将 {{c|dy.count()}} 年加到 {{c|ymwd}} 所表示的日期。结果等价于 {{c|std::chrono::year_month_weekday(ymwd.year() + dy, ymwd.month(), ymwd.weekday_indexed())}}。
@5@ 从 {{c|ymwd}} 所表示的日期减去 {{c|dm.count()}} 月。等价于 {{c|ymwd + -dm}}。
@6@ 从 {{c|ymwd}} 所表示的日期减去 {{c|dy.count()}} 年。等价于 {{c|ymwd + -dy}}。

对于能转换到 {{lc|std::chrono::years}} 与 {{lc|std::chrono::months}} 两者的时长，若调用本会有歧义则偏好 {{tt|years}} 的重载 {{v|3,4,6}}。

=== 注解 ===
即使 {{c|ymwd.ok()}} 为 {{c|true}}，若 {{c|ymwd.index()}} 为 {{c|5}} 则生成的 {{tt|year_month_weekday}} 仍可能不表示合法日期。

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    auto ymwdi{1/std::chrono::Wednesday[1]/2021};
    std::cout &lt;&lt; ymwdi &lt;&lt; '\n';

    ymwdi = std::chrono::years(5) + ymwdi;
    // 2026 年一月的第一个星期三
    std::cout &lt;&lt; ymwdi &lt;&lt; '\n';
    assert(static_cast&lt;std::chrono::year_month_day&gt;(ymwdi) ==
           std::chrono::January/7/2026);

    ymwdi = ymwdi - std::chrono::months(6);
    // 2025 年七月的第一个星期三
    std::cout &lt;&lt; ymwdi &lt;&lt; '\n';
    assert(static_cast&lt;std::chrono::year_month_day&gt;(ymwdi) ==
           std::chrono::July/2/2025);
}
|output=
2021/Jan/Wed[1]
2026/Jan/Wed[1]
2025/Jul/Wed[1]
}}

{{langlinks|en|es|ja|ru}}
{{cpp/chrono/title|clock_time_conversion}}
{{cpp/chrono/navbar}}
{{dcl begin}}
{{dcl header|chrono}}
{{dcl|since=c++20|1=
template&lt; class Dest, class Source &gt;
struct clock_time_conversion {};
}}
{{dcl end}}

{{tt|std::chrono::clock_time_conversion}} 是特征类，指定如何转换 {{tt|Source}} 时钟的 {{lc|std::chrono::time_point}} 到 {{tt|Dest}} 时钟的时间点。它通过提供 const 可调用的，接受 {{c|std::chrono::time_point&lt;Source, Duration&gt;}} 类型的实参并返回表示等价时间点的 {{c|std::chrono::time_point&lt;Dest, OtherDuration&gt;}} 的 {{tt|operator()}} 进行转换。以对每个特化有所变化的方式，计算返回时间点的时长。通常只通过 {{lc|std::chrono::clock_cast}} 间接使用 {{tt|clock_time_conversion}}。

当至少一个模板形参是用户定义的时钟类型时，程序可以特化 {{tt|clock_time_conversion}}。

主模板是空结构体。标准定义了下列特化：

{{dcl begin}}
{{dcl|since=c++20|num=1|1=
template&lt; class Clock &gt;
struct clock_time_conversion&lt;Clock, Clock&gt;;
}}
{{dcl|since=c++20|num=2|1=
template&lt;&gt;
struct clock_time_conversion&lt;std::chrono::system_clock, std::chrono::system_clock&gt;;
}}
{{dcl|since=c++20|num=3|1=
template&lt;&gt;
struct clock_time_conversion&lt;std::chrono::utc_clock, std::chrono::utc_clock&gt;;
}}
{{dcl|since=c++20|num=4|1=
template&lt;&gt;
struct clock_time_conversion&lt;std::chrono::system_clock, std::chrono::utc_clock&gt;;
}}
{{dcl|since=c++20|num=5|1=
template&lt;&gt;
struct clock_time_conversion&lt;std::chrono::utc_clock, std::chrono::system_clock&gt;;
}}
{{dcl|since=c++20|num=6|1=
template&lt; class Clock &gt;
struct clock_time_conversion&lt;Clock, std::chrono::system_clock&gt;;
}}
{{dcl|since=c++20|num=7|1=
template&lt; class Clock &gt;
struct clock_time_conversion&lt;std::chrono::system_clock, Clock&gt;;
}}
{{dcl|since=c++20|num=8|1=
template&lt; class Clock &gt;
struct clock_time_conversion&lt;Clock, std::chrono::utc_clock&gt;;
}}
{{dcl|since=c++20|num=9|1=
template&lt; class Clock &gt;
struct clock_time_conversion&lt;std::chrono::utc_clock, Clock&gt;;
}}
{{dcl end}}

@1-3@ 恒等转换：{{tt|operator()}} 返回实参的副本。
@4-5@ {{lc|std::chrono::sys_time}} 与 {{lc|std::chrono::utc_time}} 间的转换：{{tt|operator()}} 分别调用 {{lc|std::chrono::utc_clock::to_sys}} 和 {{lc|std::chrono::utc_clock::from_sys}}。
@6-7@ 当 {{tt|Clock}} 支持 {{tt|from_sys}} 和 {{tt|to_sys}} 时，来自和到 {{lc|std::chrono::sys_time}} 的转换：{{tt|operator()}} 分别调用 {{c|Clock::to_sys}} 和 {{c|Clock::from_sys}}。
@8-9@ 当 {{tt|Clock}} 支持 {{tt|from_utc}} 和 {{tt|to_utc}} 时，来自和到 {{lc|std::chrono::utc_time}} 的转换：{{tt|operator()}} 分别调用 {{c|Clock::to_utc}} 和 {{c|Clock::from_utc}}。

=== 成员函数 ===

每个特化都具有隐式声明的默认构造函数、复制构造函数、移动构造函数、复制赋值运算符、移动赋值运算符和析构函数。

{{member|{{small|std::chrono::clock_time_conversion::}}operator()|2=
{{dcl begin}}
{{dcl|num=1|notes={{mark|member of specialization {{v|1}}}}|1=
template&lt; class Duration &gt;
std::chrono::time_point&lt;Clock, Duration&gt;
    operator()( const std::chrono::time_point&lt;Clock, Duration&gt;&amp; t ) const;
}}
{{dcl|num=2|notes={{mark|member of specialization {{v|2}}}}|1=
template&lt; class Duration &gt;
std::chrono::sys_time&lt;Duration&gt;
    operator()( const std::chrono::sys_time&lt;Duration&gt; &amp; t ) const;
}}
{{dcl|num=3|notes={{mark|member of specialization {{v|3}}}}|1=
template&lt; class Duration &gt;
std::chrono::utc_time&lt;Duration&gt;
    operator()( const std::chrono::utc_time&lt;Duration&gt;&amp; t ) const;
}}
{{dcl|num=4|notes={{mark|member of specialization {{v|4}}}}|1=
template&lt; class Duration &gt;
std::chrono::sys_time&lt;Duration&gt;
    operator()( const std::chrono::utc_time&lt;Duration&gt;&amp; t ) const;
}}
{{dcl|num=5|notes={{mark|member of specialization {{v|5}}}}|1=
template&lt; class Duration &gt;
std::chrono::utc_time&lt;Duration&gt;
    operator()( const std::chrono::sys_time&lt;Duration&gt;&amp; t ) const;
}}
{{dcl|num=6|notes={{mark|member of specialization {{v|6}}}}|1=
template&lt; class Duration &gt;
auto operator()( const std::chrono::sys_time&lt;Duration&gt;&amp; t ) const
    -&gt; decltype(Clock::from_sys(t));
}}
{{dcl|num=7|notes={{mark|member of specialization {{v|7}}}}|1=
template&lt; class Duration &gt;
auto operator()( const std::chrono::time_point&lt;SourceClock, Duration&gt;&amp; t ) const
    -&gt; decltype(Clock::to_sys(t));
}}
{{dcl|num=8|notes={{mark|member of specialization {{v|8}}}}|1=
template&lt; class Duration &gt;
auto operator()( const std::chrono::utc_time&lt;Duration&gt;&amp; t ) const
    -&gt; decltype(Clock::from_utc(t));
}}
{{dcl|num=9|notes={{mark|member of specialization {{v|9}}}}|1=
template&lt; class Duration &gt;
auto operator()( const std::chrono::time_point&lt;Clock, Duration&gt;&amp; t ) const
    -&gt; decltype(Clock::to_utc(t));
}}
{{dcl end}}

转换实参 {{lc|std::chrono::time_point}} 为目标时钟。

@1-3@ 恒等转换。返回不更改的 {{tt|t}}。
@4@ 返回 {{c|std::chrono::utc_clock::to_sys(t)}}。
@5@ 返回 {{c|std::chrono::utc_clock::from_sys(t)}}。
@6@ 返回 {{c|Clock::from_sys(t)}}。{{cpp/enable_if|表达式 {{c|Clock::from_sys(t)}} 良构}}。若 {{c|Clock::from_sys(t)}} 不返回 {{c|std::chrono::time_point&lt;Clock, Duration&gt;}}，其中 {{tt|Duration}} 是 {{lc|std::chrono::duration}} 的某个合法特化，则程序非良构。
@7@ 返回 {{c|Clock::to_sys(t)}}。{{cpp/enable_if|表达式 {{c|Clock::to_sys(t)}} 良构}}。若 {{c|Clock::to_sys(t)}} 不返回 {{c|std::chrono::sys_time&lt;Duration&gt;}}，其中 {{tt|Duration}} 是 {{lc|std::chrono::duration}} 的某个合法特化，则程序非良构。
@8@ 返回 {{c|Clock::from_utc(t)}}。{{cpp/enable_if|表达式 {{c|Clock::from_utc(t)}} 良构}}。若 {{c|Clock::from_utc(t)}}不返回 {{c|std::chrono::time_point&lt;Clock, Duration&gt;}}，其中 {{tt|Duration}} 是 {{lc|std::chrono::duration}} 的某个合法特化，则程序非良构。
@9@ 返回 {{c|Clock::to_utc(t)}}。{{cpp/enable_if|表达式 {{c|Clock::to_utc(t)}} 良构}}。若 {{c|Clock::to_utc(t)}} 不返回 {{c|std::chrono::utc_time&lt;Duration&gt;}} ，其中 {{tt|Duration}} 是 {{lc|std::chrono::duration}} 的某个合法特化，则程序非良构。

===参数===
{{par begin}}
{{par | t |要转化的时间点}}
{{par end}}

===返回值===
上述的转换结果：
@1-3@ {{tt|t}}。
@4@ {{c|std::chrono::utc_clock::to_sys(t)}}。
@5@ {{c|std::chrono::utc_clock::from_sys(t)}}。
@6@ {{c|Clock::from_sys(t)}}。
@7@ {{c|Clock::to_sys(t)}}。
@8@ {{c|Clock::from_utc(t)}}。
@9@ {{c|Clock::to_utc(t)}}。

}}

=== 参阅 ===
{{dsc begin}}
{{dsc inc|cpp/chrono/dsc clock_cast}}
{{dsc end}}

{{langlinks|en|ja|ru}}
{{cpp/chrono/year/title|1=ok}}
{{cpp/chrono/year/navbar}}
{{ddcl|since=c++20|1=
constexpr bool ok() const noexcept;
}}

检查存储于 {{c|*this}} 的年份值是否在合法范围，即 {{closed range|-32767|32767}} 中。

=== 返回值 ===
若存储于 {{c|*this}} 的年份值在范围 {{closed range|-32767|32767}} 中则为 {{c|true}} 。否则为 {{c|false}} 。

===可能的实现===
参见
[https://github.com/gcc-mirror/gcc/blob/919858077f4b768c8472f29b977edf0aa6e0f1e5/libstdc%2B%2B-v3/include/std/chrono#L1606 libstdc++]、
[https://github.com/llvm-mirror/libcxx/blob/78d6a7767ed57b50122a161b91f59f19c9bd0d19/include/chrono#L1832 libc++] 和 Howard Hinnant 的
[https://github.com/HowardHinnant/date/blob/0b72599bd43f72d8935e507e25e4f0063f9bb34e/include/date/date.h#L1630 date.h] 中的实现。
{{eq fun
|1=
class Year
{
    short year_;   // 仅用于阐释

public:

    bool ok() const noexcept { return year_ != std::numeric_limits&lt;short&gt;::min(); }

    /*...*/
};
}}

===示例===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
 
int main()
{
    std::cout &lt;&lt; "输入年份 │ 内部值 │ ok()\n" &lt;&lt; std::boolalpha;

    for (const int i : {2020, 0x8000, 0x8001, 0xFFFF, 0x18000})
    {
        const std::chrono::year y{i};
        std::cout &lt;&lt; std::setw(7) &lt;&lt; i &lt;&lt; " │ "
                  &lt;&lt; std::setw(6) &lt;&lt; static_cast&lt;int&gt;(y) &lt;&lt; " │ "
                  &lt;&lt; y.ok() &lt;&lt; '\n';
    }
}
|p=true &lt;!-- out of range values are not specified --&gt;
|output=
输入年份 │  内部值 │ ok()
   2020 │   2020 │ true
  32768 │ -32768 │ false
  32769 │ -32767 │ true
  65535 │     -1 │ true
  98304 │ -32768 │ false
}}

{{langlinks|en|es|ja|ru}}
{{cpp/chrono/year/title|1=year}}
{{cpp/chrono/year/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|1=
year() = default;
}}
{{dcl|num=2|since=c++20|
constexpr explicit year( int y ) noexcept;
}}
{{dcl end}}

构造 {{tt|year}} 对象。
@1@ 默认构造函数保留年份值未初始化。
@2@ 若 {{c|y}} 在范围 {{closed range|-32767|32767}} 中，则构造保有年份值 {{c|y}} 的 {{tt|year}} 对象。否则保有值未指定。

===示例===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    using namespace std::chrono;

    constexpr int leap_years = []
    {
        int count{};
        for (int i{year::min()}; i &lt;= int{year::max()}; ++i)
            if (year{i}.is_leap()) // 使用构造函数 (2)
                ++count;
        return count;
    } ();

    static_assert(15891 == leap_years);

    std::cout &lt;&lt; "在范围 [" &lt;&lt; int(year::min()) &lt;&lt; ", " &lt;&lt; int(year::max())
              &lt;&lt; "] 中有 " &lt;&lt; leap_years &lt;&lt; " 个闰年。\n";
}
|output=在范围 [-32767, 32767] 中有 15891 个闰年。
}}

{{langlinks|en|es|ja|ru}}
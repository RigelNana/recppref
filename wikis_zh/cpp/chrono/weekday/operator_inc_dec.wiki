{{cpp/chrono/weekday/title|operator++|operator--}}
{{cpp/chrono/weekday/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|
constexpr std::chrono::weekday&amp; operator++() noexcept;
}}
{{dcl|since=c++20|num=2|
constexpr std::chrono::weekday operator++( int ) noexcept;
}}
{{dcl|since=c++20|num=3|
constexpr std::chrono::weekday&amp; operator--() noexcept;
}}
{{dcl|since=c++20|num=4|
constexpr std::chrono::weekday operator--( int ) noexcept;
}}
{{dcl end}}

对星期之日值加或减 {{c|1}}，将结果对 {{c/core|7}} 取余，规约成范围 {{closed range|0|6}} 中的整数。
@1,2@ 实施 {{c|1=*this += std::chrono::days{1};}}。
@3,4@ 实施 {{c|1=*this -= std::chrono::days{1};}}。

===参数===
（无）

===返回值===
@1,3@ 到修改后的此 {{tt|weekday}} 的引用。
@2,4@ 修改前所作的 {{tt|weekday}} 的副本。

===注意===
调用这些函数之一后，{{rlpf|ok()}} 始终为 {{c|true}}。

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; std::boolalpha;

    std::chrono::weekday wd{0}; // 星期日为 0 或 7

    --wd;
    std::cout &lt;&lt; (wd == std::chrono::Saturday) &lt;&lt; ' ';

    ++wd;
    std::cout &lt;&lt; (wd == std::chrono::Sunday) &lt;&lt; '\n';

    wd = std::chrono::weekday{13};
    assert(!wd.ok());
    wd++;
    assert(wd.ok());
}
|output=
true true
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/chrono/weekday/dsc operator_arith}}
{{dsc inc|cpp/chrono/weekday/dsc operator_arith 2}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
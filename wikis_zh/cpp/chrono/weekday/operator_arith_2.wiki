{{cpp/chrono/title|operator+|operator- {{small|(std::chrono::weekday)}}}}
{{cpp/chrono/weekday/navbar}}
{{dcl begin}}
{{dcl header|chrono}}
{{dcl|since=c++20|num=1|
constexpr std::chrono::weekday operator+( const std::chrono::weekday&amp; wd,
                                          const std::chrono::days&amp; d ) noexcept;
}}
{{dcl|since=c++20|num=2|
constexpr std::chrono::weekday operator+( const std::chrono::days&amp; d,
                                          const std::chrono::weekday&amp; wd ) noexcept;
}}
{{dcl|since=c++20|num=3|
constexpr std::chrono::weekday operator-( const std::chrono::weekday&amp; wd,
                                          const std::chrono::days&amp; d ) noexcept;
}}
{{dcl|since=c++20|num=4|
constexpr std::chrono::days operator-( const std::chrono::weekday&amp; wd1,
                                       const std::chrono::weekday&amp; wd2 ) noexcept;
}}
{{dcl end}}

@1,2@ 向 {{c|wd}} 加上 {{tt|d.count()}} 日。通过首先求值 {{c|static_cast&lt;long long&gt;(wd.c_encoding()) + d.count()}} 再将它对 7 取余，得到范围 {{closed range|0|6}} 中的整数，以此计算结果中保有的星期之日值。
@3@ 从 {{c|wd}} 减去 {{tt|d.count()}} 日。等价于 {{c|return wd + -d;}}。
@4@ 若 {{c|1=wd1.ok()}} 与 {{c|1=wd2.ok()}} 均为 {{c|true}}，则返回 {{lc|std::chrono::days}} 值 {{c|d}}，满足 {{c|d.count()}} 在范围 {{closed range|0|6}} 中且 {{c|1=wd2 + d == wd1}}。否则返回值未指定。

===返回值===
@1-3@ 保有按上述方式计算的星期之日值的 {{lc|std::chrono::weekday}}。
@4@ 表示 {{c|wd1}} 与 {{c|wd2}} 间距离的 {{lc|std::chrono::days}}。

===注解===
只要计算不溢出，{{v|1-3}} 就始终返回合法的 {{tt|weekday}}，即使 {{c|wd.ok()}} 为 {{c|false}}。

===示例===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
 
int main()
{
    std::cout &lt;&lt; std::boolalpha;
 
    std::chrono::weekday wd{4};
    wd = wd + std::chrono::days(2);
    std::cout &lt;&lt; (wd == std::chrono::weekday(6)) &lt;&lt; ' '
              &lt;&lt; (wd == std::chrono::Saturday) &lt;&lt; ' ';
 
    wd = wd - std::chrono::days(3);
    std::cout &lt;&lt; (wd == std::chrono::weekday(3)) &lt;&lt; ' '
              &lt;&lt; (wd == std::chrono::Wednesday) &lt;&lt; ' ';
 
    wd = std::chrono::Tuesday;
    wd = wd + std::chrono::days{8}; // (((2 + 8) == 10) % 7) == 3;
    std::cout &lt;&lt; (wd == std::chrono::Wednesday) &lt;&lt; ' ';
 
    wd = wd + (std::chrono::Sunday - std::chrono::Thursday); // (3 + 3) == 6
    std::cout &lt;&lt; (wd == std::chrono::Saturday) &lt;&lt; '\n';
}
|output=
true true true true true true
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/chrono/weekday/dsc operator_inc dec}}
{{dsc inc|cpp/chrono/weekday/dsc operator_arith}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
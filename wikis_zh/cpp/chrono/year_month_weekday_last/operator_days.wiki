{{cpp/chrono/year_month_weekday_last/title|operator sys_days|operator local_days}}
{{cpp/chrono/year_month_weekday_last/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|
constexpr operator std::chrono::sys_days() const noexcept;
}}
{{dcl|since=c++20|num=2|
constexpr explicit operator std::chrono::local_days() const noexcept;
}}
{{dcl end}}
将 {{c|*this}} 转换成与此 {{tt|year_month_weekday_last}} 表示相同时间点的 {{lc|std::chrono::time_point}}。

@1@ 若 {{lc|ok()}} 为 {{c|true}}，则返回表示该 {{rlpf|accessors|year}} 和 {{rlpf|accessors|month}} 的最后一个 {{rlpf|accessors|weekday}} 的 {{tt|sys_days}}。否则返回值未指定。

@2@ 同 {{v|1}}，但返回 {{tt|local_days}} 而非 {{tt|sys_days}}。等价于 {{c|local_days(sys_days(*this).time_since_epoch())}}。

===示例===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
using namespace std::chrono;

int main()
{
    constexpr auto ymwdl{Tuesday[last]/11/2021};
    static_assert(static_cast&lt;local_days&gt;(ymwdl) ==
                  static_cast&lt;local_days&gt;(November/30/2021));
    // 从基于域转换为基于序数，以加上日数
    constexpr auto sd = static_cast&lt;sys_days&gt;(ymwdl);
    constexpr year_month_day ymd{sd + days(42)};
    std::cout &lt;&lt; ymd &lt;&lt; '\n';
}
|output=
2022-01-11
}}

{{langlinks|en|es|ja|ru}}
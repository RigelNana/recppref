{{cpp/chrono/year_month_day_last/title|operator sys_days|operator local_days}}
{{cpp/chrono/year_month_day_last/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|
constexpr operator std::chrono::sys_days() const noexcept;
}}
{{dcl|since=c++20|num=2|
constexpr explicit operator std::chrono::local_days() const noexcept;
}}
{{dcl end}}

转换 {{c|*this}} 为与此 {{tt|year_month_day_last}} 表示相同日期的 {{lc|std::chrono::time_point}}。这等价于从 {{tt|year()}}、{{tt|month()}} 和 {{tt|day()}} 合成 {{tt|year_month_day}}，再将该 {{tt|year_month_day}} 转换成目标类型。

@1@ 等价于 {{c|std::chrono::sys_days(year()/month()/day())}}。
@2@ 等价于 {{c|std::chrono::local_days(year()/month()/day())}}。

=== 示例 ===
{{example
|code=
#include &lt;array&gt;
#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;
using namespace std::chrono;
using namespace std::literals;

int main()
{
    constexpr std::chrono::year y{2023y};
    constexpr std::array quarters{"1st"sv, "2nd"sv, "3rd"sv, "4th"sv};
    constexpr auto mq{12 / 4}; // 每季度的月数

    std::cout &lt;&lt; static_cast&lt;int&gt;(y) &lt;&lt; " 年中\n“;
    for (auto q = 1; q &lt; 5; ++q)
    {
        const auto ls = y / std::chrono::month(q * mq) / Sunday[last];
        const auto ld = y / std::chrono::month(q * mq) / last;
        // 从最后一天减去最后一个星期日获得星期之日数
        const auto index = (sys_days(ld) - sys_days(ls)).count();
        std::cout &lt;&lt; "第 " &lt;&lt; quarters[q - 1] &lt;&lt; " 季度结束于 "  
                  &lt;&lt; std::chrono::weekday(index) &lt;&lt; '\n';
    }
}
|output=
2023 年中
第 1st 季度结束于 Fri
第 2nd 季度结束于 Fri
第 3rd 季度结束于 Sat
第 4th 季度结束于 Sun
}}

=== 参阅 ===
{{dsc begin}}
{{dsc inc|cpp/chrono/year_month_day/dsc operator days}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
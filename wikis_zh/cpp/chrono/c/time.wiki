{{cpp/title|time}}
{{cpp/chrono/c/navbar}}
{{ddcl|header=ctime|
std::time_t time( std::time_t* arg );
}}

返回编码为 {{lc|std::time_t}} 对象的当前日历时间，并将它存储于 {{c|arg}} 所指向的对象，除非 {{c|arg}} 是空指针。

===参数===
{{par begin}}
{{par|arg|指向要存储时间的 {{lc|std::time_t}} 对象的指针，或空指针}}
{{par end}}

===返回值===
成功时为编码为 {{lc|std::time_t}} 的当前日历时间，错误时为 {{c|(std::time_t)(-1)}}。若 {{c|arg}} 非空，则亦存储返回值于 {{c|arg}} 所指向的对象。

===注解===
日历时间在 {{lc|std::time_t}} 中的编码是未指定的，但多数系统遵循 {{posix|time||POSIX 规范}}，返回整数类型的值，保有从{{posix/core|basedefs/V1_chap04.html#tag_04_16 纪元}}开始至今日历天数的 86400 倍数，加上从前一个 UTC 午夜起所经历的秒数。最需注意的是，POSIX 时间并未（且无法）纳入闰秒，因而这个整数并不等于从纪元开始所经过的{{enwiki|SI base unit#Definitions|国际公制单位（S.I.）秒}}数，而是减去了从纪元至今发生过的闰秒数。{{lc|std::time_t}} 为 32 位有符号整数的实现（许多历史上的实现）会在 {{enwiki|Year 2038 problem|2038}} 年出错。

===示例===
{{example
|code=
#include &lt;ctime&gt;
#include &lt;iostream&gt;

int main()
{
    std::time_t result = std::time(nullptr);
    std::cout &lt;&lt; std::asctime(std::localtime(&amp;result))
              &lt;&lt; result &lt;&lt; " 自纪元起的秒数\n";
}
|p=true
|output=
Wed Sep 21 10:27:52 2011
1316615272 自纪元起的秒数
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/chrono/c/dsc timespec_get}}
{{dsc inc|cpp/chrono/c/dsc localtime}}
{{dsc inc|cpp/chrono/c/dsc gmtime}}
{{dsc inc|cpp/chrono/dsc system_clock}}
{{dsc see c|c/chrono/time}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
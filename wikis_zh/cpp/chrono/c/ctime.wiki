{{cpp/title|ctime}}
{{cpp/chrono/c/navbar}}
{{ddcl|header=ctime|
char* ctime( const std::time_t* time );
}}

转换给定的从纪元起时间为日历本地时间，再转换为文本表示，如同通过调用 {{c|std::asctime(std::localtime(time))}}。产生的字符串拥有如下格式：

{{source|Www Mmm dd hh:mm:ss yyyy\n}}

*{{tt|Www}} - 周内日期（{{tt|Mon}}、{{tt|Tue}}、{{tt|Wed}}、{{tt|Thu}}、{{tt|Fri}}、{{tt|Sat}}、{{tt|Sun}} 之一）。
*{{tt|Mmm}} - 月份（{{tt|Jan}}、{{tt|Feb}}、{{tt|Mar}}、{{tt|Apr}}、{{tt|May}}、{{tt|Jun}}、{{tt|Jul}}、{{tt|Aug}}、{{tt|Sep}}、{{tt|Oct}}、{{tt|Nov}}、{{tt|Dec}} 之一）。
*{{tt|dd}} - 月内日期。
*{{tt|hh}} - 时。
*{{tt|mm}} - 分。
*{{tt|ss}} - 秒。
*{{tt|yyyy}} - 年。

此函数不支持本地化。

===参数===
{{par begin}}
{{par | time | 指向 {{lc|std::time_t}} 对象的指针，指定要打印的时间}}
{{par end}}

===返回值===
返回指向静态空终止字符串的指针，该字符串保有上述的日期和时间的文本表示。字符串可以在 {{lc|std::asctime}} 和 {{tt|std::ctime}} 间共享，并且可以被每次对这些函数的调用重写。

===注解===
此函数返回指向静态数据的指针，而且非线程安全。另外它修改可能会为 {{lc|std::gmtime}} 及 {{lc|std::localtime}} 所共享的静态 {{lc|std::tm}} 对象。POSIX 标记此函数为过时，并推荐用 {{lc|std::strftime}} 替代。

对于导致字符串长于 25 字符（例如，10000 年）的 {{lc|std::time_t}} 的值，其行为可能未定义。

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;cstring&gt;
#include &lt;ctime&gt;
#include &lt;iostream&gt;
 
int main()
{
    std::time_t result = std::time(nullptr);
    std::cout &lt;&lt; std::ctime(&amp;result);

    char buffer[32];
    std::strncpy(buffer, std::ctime(&amp;result), 26);
    assert('\n' == buffer[std::strlen(buffer) - 1]);
    std::cout &lt;&lt; buffer;
}
|p=true
|output=
Mon Oct 11 17:10:55 2021
Mon Oct 11 17:10:55 2021
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/chrono/c/dsc asctime}}
{{dsc inc|cpp/chrono/c/dsc strftime}}
{{dsc inc|cpp/io/manip/dsc put_time}}
{{dsc see c|c/chrono/ctime}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|gmtime}}
{{cpp/chrono/c/navbar}}
{{ddcl|header=ctime|
std::tm* gmtime( const std::time_t* time );
}}

将给定的作为 {{lc|std::time_t}} 值的从纪元起时间转换为以协调世界时（UTC）表达的日历时间。 

===参数===
{{par begin}}
{{par | time |指向要转换的 time_t 对象的指针}}
{{par end}}

===返回值===
成功时为指向静态内部 {{lc|std::tm}} 对象的指针，否则为 {{lc|NULL}}。该结构体可能在 {{lc|std::gmtime}}、{{lc|std::localtime}} 和 {{lc|std::ctime}} 之间共享，并可能在每次调用时被覆写。

===注意===
此函数可能不是线程安全的。

POSIX 要求若此函数因实参过大而失败，则设置 {{lc|errno}} 为 {{lc|EOVERFLOW}}。

===示例===
{{example
|code=
#include &lt;ctime&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
 
int main()
{
    setenv("TZ", "/usr/share/zoneinfo/Europe/London", 1); // POSIX-specific
 
    std::tm tm{}; // get_time 并不设置所有字段，故使用 {}
    tm.tm_year = 2020 - 1900; // 2020
    tm.tm_mon = 7 - 1; // 七月
    tm.tm_mday = 15; // 15日
    tm.tm_hour = 10;
    tm.tm_min = 15;
    tm.tm_isdst = 1; // 伦敦夏令时
    std::time_t t = std::mktime(&amp;tm); 
 
    std::cout &lt;&lt; "UTC:   " &lt;&lt; std::put_time(std::gmtime(&amp;t), "%c %Z") &lt;&lt; '\n';
    std::cout &lt;&lt; "local: " &lt;&lt; std::put_time(std::localtime(&amp;t), "%c %Z") &lt;&lt; '\n';
}
|p=true
|output=
UTC:   Wed Jul 15 09:15:00 2020 GMT
local: Wed Jul 15 10:15:00 2020 BST
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/chrono/c/dsc localtime}}
{{dsc see c|c/chrono/gmtime}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
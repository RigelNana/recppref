{{cpp/title|strftime}}
{{cpp/chrono/c/navbar}}
{{ddcl|header=ctime|
std::size_t strftime( char* str, std::size_t count, const char* format, const std::tm* tp );
}}

按照[[#格式字符串|格式字符串]] {{c|format}}，转换来自给定的日历时间 {{c|tp}} 的日期和时间信息，为空终止多字节字符串 {{c|str}}。最多写入 {{c|count}} 个字节。

===参数===
{{par begin}}
{{par | str |指向输出用的字符数组首元素的指针}}
{{par | count |写入的最大字节数}}
{{par | format |指向空终止多字节字符串的指针，字符串指定转换格式}}
{{par | tp|指向待转换日期和时间信息的指针}}
{{par end}}

===格式字符串===
{{cpp/chrono/c/strftime format}}

===返回值===
成功时，返回写入 {{c|str}} 所指向的字符数组的字节数，不包含终止 {{c|'\0'}}。若在能存储整个字符串前抵达 {{c|count}}，则返回 {{c|0}} 且写入内容是不确定的。

===示例===
{{example
|code=
#include &lt;ctime&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;locale&gt;

void utcExample()
{
    // 非常流行的 RFC 3339 格式 UTC 时间的例子
    std::time_t time = std::time({});
    char timeString[std::size("yyyy-mm-ddThh:mm:ssZ")];
    std::strftime(std::data(timeString), std::size(timeString),
                  "%FT%TZ", std::gmtime(&amp;time));
    std::cout &lt;&lt; timeString &lt;&lt; '\n';
}

int main()
{
    std::time_t t = std::time(nullptr);
    char mbstr[100];
    
    if (std::strftime(mbstr, sizeof(mbstr), "%A %c", std::localtime(&amp;t)))
        std::cout &lt;&lt; mbstr &lt;&lt; '\n';

    std::locale::global(std::locale("ja_JP.utf8"));
    if (std::strftime(mbstr, sizeof(mbstr), "%A %c", std::localtime(&amp;t)))
        std::cout &lt;&lt; mbstr &lt;&lt; '\n';

    utcExample();
}
|p=true
|output=
Tuesday Tue Sep  7 19:40:35 2021
火曜日 2021年09月07日 19時40分35秒
2021-09-07T19:40:35Z
}}

===See also===
{{dsc begin}}
{{dsc inc|cpp/chrono/c/dsc asctime}}
{{dsc inc|cpp/chrono/c/dsc ctime}}
{{dsc inc|cpp/chrono/c/dsc wcsftime}}
{{dsc inc|cpp/io/manip/dsc put_time}}
{{dsc inc|cpp/chrono/dsc formatter|hh_mm_ss}}
{{dsc see c|c/chrono/strftime}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|localtime}}
{{cpp/chrono/c/navbar}}
{{ddcl|header=ctime|
std::tm* localtime( const std::time_t* time );
}}

转换作为 {{lc|std::time_t}} 值的从纪元起时间到以本地时间表达的日历时。

===参数===
{{par begin}}
{{par | time |指向要转换的 time_t 对象的指针}}
{{par end}}

===返回值===
成功时为指向内部静态 {{lc|std::tm}} 对象的指针，否则为 {{lc|NULL}}。该结构体可能在 {{lc|std::gmtime}}、{{lc|std::localtime}} 和 {{lc|std::ctime}} 之间共享，而且可能在每次调用时被覆盖。

===注意===
此函数可能不是线程安全的。

POSIX 要求若此函数因实参过大而失败，则设置 {{lc|errno}} 为 {{lc|EOVERFLOW}}。

[https://pubs.opengroup.org/onlinepubs/9699919799/functions/localtime.html POSIX 指定]此函数如同以调用 [http://pubs.opengroup.org/onlinepubs/9699919799/functions/tzset.html tzset] 确定时区信息，该函数调用环境变量 {{c|TZ}}。

===示例===
{{example
|code=
#include &lt;ctime&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
 
int main()
{
    setenv("TZ", "/usr/share/zoneinfo/America/Los_Angeles", 1); // POSIX 专有
 
    std::tm tm{}; // 零初始化
    tm.tm_year = 2020 - 1900; // 2020
    tm.tm_mon = 2 - 1; // 二月
    tm.tm_mday = 15; // 15日
    tm.tm_hour = 10;
    tm.tm_min = 15;
    tm.tm_isdst = 0; // 无夏令时
    std::time_t t = std::mktime(&amp;tm); 
 
    std::cout &lt;&lt; "UTC:   " &lt;&lt; std::put_time(std::gmtime(&amp;t), "%c %Z") &lt;&lt; '\n';
    std::cout &lt;&lt; "local: " &lt;&lt; std::put_time(std::localtime(&amp;t), "%c %Z") &lt;&lt; '\n';
}
|p=true
|output=
UTC:   Sat Feb 15 18:15:00 2020 GMT
local: Sat Feb 15 10:15:00 2020 PST
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/chrono/c/dsc gmtime}}
{{dsc inc|c/chrono/dsc localtime}}
{{dsc see c|c/chrono/localtime}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
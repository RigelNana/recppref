{{cpp/title|mktime}}
{{cpp/chrono/c/navbar}}
{{ddcl|header=ctime|
std::time_t mktime( std::tm* time );
}}

转换本地日历时间为从纪元起的时间，作为 {{lc|std::time_t}} 对象。忽略 {{c|time-&gt;tm_wday}} 与 {{c|time-&gt;tm_yday}}。容许 {{c|time}} 中的值在其正常范围外。

{{c|time-&gt;tm_isdst}} 的负值会导致 {{tt|mktime}} 尝试确定在指定时间夏时令是否有效。

若转换成功，则 {{c|time}} 对象会被修改。更新 {{c|time}} 的所有字段为符合其正确范围的值。用其他字段的可用信息重新计算 {{c|time-&gt;tm_wday}} 与 {{c|time-&gt;tm_yday}}。

===参数===
{{par begin}}
{{par | time |指向 {{lc|std::tm}} 对象的指针，它指定要转换的本地日历时间}}
{{par end}}

===返回值===
成功时为表示从纪元开始时间的 {{lc|std::time_t}} 对象，若 {{c|time}} 不能表示成 {{lc|std::time_t}} 对象则返回 {{c|-1}}（POSIX 亦要求此情况下存储 {{tt|EOVERFLOW}} 于 {{lc|errno}} 中）。

===注解===
若 {{lc|std::tm}} 对象是从 {{lc|std::get_time}} 或 POSIX [https://pubs.opengroup.org/onlinepubs/009695399/functions/strptime.html {{tt|strptime}}] 获得的，则 {{tt|tm_isdst}} 的值不确定，而且需要在调用 {{tt|mktime}} 前明确设置。

===示例===
{{example
|显示创建一个本地时间。
|code=
#include &lt;ctime&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
 
int main()
{
    setenv("TZ", "/usr/share/zoneinfo/America/Los_Angeles", 1); // POSIX 专有
 
    std::tm tm{}; // 零初始化
    tm.tm_year = 2020 - 1900; // 2020
    tm.tm_mon = 2 - 1; // 二月
    tm.tm_mday = 15; // 15日
    tm.tm_hour = 10;
    tm.tm_min = 15;
    tm.tm_isdst = 0; // 无夏令时
    std::time_t t = std::mktime(&amp;tm); 
    std::tm local = *std::localtime(&amp;t);
 
    std::cout &lt;&lt; "local: " &lt;&lt; std::put_time(&amp;local, "%c %Z") &lt;&lt; '\n';
}
|p=true
|output=
local: Sat Feb 15 10:15:00 2020 PST
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/chrono/c/dsc localtime}}
{{dsc see c|c/chrono/mktime}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
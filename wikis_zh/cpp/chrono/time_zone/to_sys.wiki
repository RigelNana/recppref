{{cpp/chrono/time_zone/title|to_sys}}
{{cpp/chrono/time_zone/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++20|
template&lt; class Duration &gt;
auto to_sys( const std::chrono::local_time&lt;Duration&gt;&amp; tp ) const
    -&gt; std::chrono::sys_time&lt;std::common_type_t&lt;Duration, std::chrono::seconds&gt;&gt;;
}}
{{dcl|num=2|since=c++20|
template&lt; class Duration &gt;
auto to_sys( const std::chrono::local_time&lt;Duration&gt;&amp; tp, std::chrono::choose z ) const
    -&gt; std::chrono::sys_time&lt;std::common_type_t&lt;Duration, std::chrono::seconds&gt;&gt;;
}}
{{dcl end}}

转换此时区中的 {{tt|local_time}} {{c|tp}} 为对应的 {{tt|sys_time}}。

@1@ 若转换有歧义或 {{c|tp}} 表示不存在的时间则抛出异常。
@2@ 按照 {{c|z}} 的值解决歧义：
*若 {{c|1=z == std::chrono::choose::earliest}}，则返回较早的 {{tt|sys_time}}。
*若 {{c|1=z == std::chrono::choose::latest}}，则返回较晚的 {{tt|sys_time}}。
@@ 若 {{c|tp}} 表示两个 UTC {{tt|time_point}} 间不存在的时间，则两个 {{tt|time_point}} 将相同，并将返回该 {{tt|time_point}}。

=== 返回值 ===
按照此时区规则的 {{c|tp}} 的 UTC 等价版本。

=== 异常 ===
@1@ 若转换有歧义则抛出 {{lc|std::chrono::ambiguous_local_time}}。若 {{c|tp}} 表示不存在的时间则抛出 {{lc|std::chrono::nonexistent_local_time}}。

=== 注解 ===
结果的精度至少为 {{tt|std::chrono::seconds}}，而且若参数有更精细的精度则将更精细。

歧义和不存在的本地时间能作为时区转变（例如夏令时）的结果出现。例如，"2016-03-13 02:30:00" 不存在于 {{c|"America/New_York"}} 时区，而该时区中的 "2016-11-06 01:30:00" 能对应两个 UTC 时间点：2016-11-06 05:30:00 UTC 和 2016-11-06 06:30:00 UTC。

===示例===
{{example}}

{{langlinks|en|es|ja|ru}}
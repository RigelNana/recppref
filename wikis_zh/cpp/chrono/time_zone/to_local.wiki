{{cpp/chrono/time_zone/title|to_local}}
{{cpp/chrono/time_zone/navbar}}
{{dcl begin}}
{{dcl|since=c++20|
template&lt; class Duration &gt;
auto to_local( const std::chrono::sys_time&lt;Duration&gt;&amp; tp ) const
    -&gt; std::chrono::local_time&lt;std::common_type_t&lt;Duration, std::chrono::seconds&gt;&gt;;
}}
{{dcl end}}

转换 {{tt|sys_time}} {{c|tp}} 为此时区中对应的 {{tt|local_time}}。

=== 返回值 ===
与 {{c|tp}} 和此时区关联的 {{tt|local_time}}。

=== 注解 ===
结果的精度至少为 {{tt|std::chrono::seconds}}，而若实参拥有更精细的精度则将更精细。

===示例===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    const auto some_zone_name{"Australia/Sydney"};
    const auto time_pt_utc{std::chrono::system_clock::now()};
    std::cout &lt;&lt; "当前时间（UTC）为：\t" &lt;&lt; time_pt_utc &lt;&lt; '\n';

    try
    {
        std::cout &lt;&lt; "当前时间（本地）为：\t\t"
                  &lt;&lt; std::chrono::current_zone()-&gt; // 可能抛出异常
                     to_local(time_pt_utc) &lt;&lt; '\n'
                  &lt;&lt; "当前时间（" &lt;&lt; some_zone_name &lt;&lt; "）为：\t\t"
                  &lt;&lt; std::chrono::locate_zone(some_zone_name)-&gt; // 可能抛出异常
                     to_local(time_pt_utc) &lt;&lt; '\n';
    }
    catch(const std::runtime_error&amp; ex)
    {
        std::cout &lt;&lt; ex.what() &lt;&lt; '\n';
    }
}
|p=true
|output=
当前时间（UTC）为：		2025-02-10 13:38:13.233872158
当前时间（本地）为：		2025-02-10 16:38:13.233872158
当前时间（Australia/Sydney）为：	2025-02-11 00:38:13.233872158
}}

{{langlinks|en|es|ja|ru}}
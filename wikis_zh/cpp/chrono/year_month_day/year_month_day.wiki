{{cpp/chrono/year_month_day/title|year_month_day}}
{{cpp/chrono/year_month_day/navbar}}
{{dcl begin}}
{{dcl|since=c++20|num=1|1=
year_month_day() = default;
}}
{{dcl|since=c++20|num=2|
constexpr year_month_day( const std::chrono::year&amp; y,
                          const std::chrono::month&amp; m,
                          const std::chrono::day&amp; d ) noexcept;
}}
{{dcl|since=c++20|num=3|
constexpr year_month_day( const std::chrono::year_month_day_last&amp; ymdl ) noexcept;
}}
{{dcl|since=c++20|num=4|
constexpr year_month_day( const std::chrono::sys_days&amp; dp ) noexcept;
}}
{{dcl|since=c++20|num=5|
constexpr explicit year_month_day( const std::chrono::local_days&amp; dp ) noexcept;
}}
{{dcl end}}

构造 {{tt|year_month_day}} 对象。
@1@ 默认构造函数保留日期未初始化。
@2@ 构造存储年 {{c|y}}、月 {{c|m}} 和日 {{c|d}} 的 {{tt|year_month_day}} 对象。
@3@ 构造存储年 {{c|ymdl.year()}}、月 {{c|ymdl.month()}} 和日 {{c|ymdl.day()}} 的 {{tt|year_month_day}} 对象。
@4@ 构造与 {{c|dp}} 表示相同日期的 {{tt|year_month_day}} 对象。
@5@ 如同用 {{c|year_month_day(sys_days(dp.time_since_epoch()))}} 构造与 {{c|dp}} 表示相同日期的 {{tt|year_month_day}} 对象。

构造函数 {{v|3,4}} 分别定义来自 {{lc|std::chrono::year_month_day_last}} 和 {{lc|std::chrono::sys_days}} 的隐式转换。

对于任何表示合法日期的 {{tt|year_month_day}} 对象 {{tt|ymd}}（{{c|ymd.ok() {{==}} true}}），转换 {{tt|ymd}} 为 {{lc|std::chrono::sys_days|sys_days}} 再转换回来将生成相同值。

=== 注解 ===
亦能由将部分日期类型 {{lc|std::chrono::year_month}} 及 {{lc|std::chrono::month_day}} 与缺失组分（分别为 {{tt|day}} 和 {{tt|year}}）结合，用 {{tt|operator/}} 创建 {{tt|year_month_day}}。

===示例===
{{example|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    using namespace std::chrono;

    constexpr auto ymd2 = std::chrono::year_month_day(
        2020y, std::chrono::January, 31d // overload (2)
    );
    std::cout &lt;&lt; "ymd2: " &lt;&lt; ymd2 &lt;&lt; '\n';

    constexpr auto ymd3 = std::chrono::year_month_day(
        std::chrono::April / std::chrono::Monday[last] / 2023y // 重载 (3)
    );
    std::cout &lt;&lt; "ymd3: " &lt;&lt; ymd3 &lt;&lt; '\n';

    const auto now = std::chrono::system_clock::now();
    const auto ymd4 = std::chrono::year_month_day(
        std::chrono::floor&lt;std::chrono::days&gt;(now) // 重载 (4)
    );
    std::cout &lt;&lt; "ymd4: " &lt;&lt; ymd4 &lt;&lt; '\n';
}
|p=true
|output=
ymd2: 2020-01-31
ymd3: 2023-04-24
ymd4: 2023-08-30
}}

=== 参阅 ===
{{dsc begin}}
{{dsc inc|cpp/chrono/dsc operator/}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
{{cpp/chrono/title|1=operator==,&lt;=&gt;{{small|(std::chrono::year_month)}}}}
{{cpp/chrono/year_month/navbar}}
{{dcl begin}}
{{dcl header|chrono}}
{{dcl|since=c++20|num=1|1=
constexpr bool operator==( const std::chrono::year_month&amp; x,
                           const std::chrono::year_month&amp; y ) noexcept;
}}
{{dcl|since=c++20|num=2|1=
constexpr std::strong_ordering operator&lt;=&gt;( const std::chrono::year_month&amp; x,
                                            const std::chrono::year_month&amp; y ) noexcept;
}}
{{dcl end}}

比较两个 {{tt|year_month}} 值 {{c|x}} 与 {{c|y}}。

{{cpp/note synthesized compare}}

=== 返回值 ===
@1@ {{c|1=x.year() == y.year() &amp;&amp; x.month() == y.month()}}
@2@ {{c|1=x.year() &lt;=&gt; y.year() != 0 ? x.year() &lt;=&gt; y.year() : x.month() &lt;=&gt; y.month()}}

=== 示例 ===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

int main()
{
    using namespace std::chrono;

    constexpr year_month ym1{year(2021), month(7)};
    constexpr year_month ym2{year(2021)/7};
    static_assert(ym1 == ym2);
    std::cout &lt;&lt; ym1 &lt;&lt; '\n';

    static_assert((2020y/1 &lt; 2020y/2) &amp;&amp; (2020y/2 == 2020y/2) &amp;&amp; (2020y/3 &lt;= 2021y/3) &amp;&amp;
                  (2023y/1 &gt; 2020y/2) &amp;&amp; (3020y/2 != 2020y/2) &amp;&amp; (2020y/3 &gt;= 2020y/3));
}
|output=
2021/Jul
}}

{{langlinks|en|es|ja|ru}}
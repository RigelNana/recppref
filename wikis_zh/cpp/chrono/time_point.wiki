{{cpp/chrono/title|time_point}}
{{cpp/chrono/time_point/navbar}}
{{dcl begin}}
{{dcl header|chrono}}
{{dcl|since=c++11|1=
template&lt;
    class Clock,
    class Duration = typename Clock::duration
&gt; class time_point;
}}
{{dcl end}}

类模板 {{tt|std::chrono::time_point}} 表示时间中的一个点。它被实现成如同存储一个 {{tt|Duration}} 类型的值，指定自 {{tt|Clock}} 的纪元起始开始的时间间隔。

{{rrev|until=c++23|{{tt|Clock}} 必须满足{{named req|Clock}}的要求{{rev inl|since=c++20|或者是 {{lc|std::chrono::local_t}}}}。}}

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|clock}}|{{tt|Clock}}，此时间点在此时钟上计量}}
{{dsc|{{tt|duration}}|{{tt|Duration}}，用于计量从纪元起时间的 {{lc|std::chrono::duration}} 类型}}
{{dsc|{{tt|rep}}|{{tt|Rep}}，表示时长的计次数的算术类型}}
{{dsc|{{tt|period}}|{{tt|Period}}，表示时长周期的 {{lc|std::ratio}} 类型}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/chrono/time_point/dsc constructor}}
{{dsc inc|cpp/chrono/time_poind/dsc time_since_epoch}}
{{dsc inc|cpp/chrono/time_point/dsc operator_arith}}
{{dsc inc|cpp/chrono/time_point/dsc operator_inc_dec}}
{{dsc inc|cpp/chrono/time_point/dsc min}}
{{dsc inc|cpp/chrono/time_point/dsc max}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/chrono/time_point/dsc operator_arith2}}
{{dsc inc|cpp/chrono/time_point/dsc operator_cmp}}
{{dsc inc|cpp/chrono/time_point/dsc time_point_cast}}
{{dsc inc|cpp/chrono/time_point/dsc floor}}
{{dsc inc|cpp/chrono/time_point/dsc ceil}}
{{dsc inc|cpp/chrono/time_point/dsc round}}
{{dsc end}}

===辅助类===
{{dsc begin}}
{{dsc inc|cpp/chrono/time_point/dsc common_type}}
{{dsc hash|cpp/chrono/time_point|nested=true|notes={{mark c++26}}}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;chrono&gt;
#include &lt;ctime&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;

void slow_motion()
{
    static int a[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
    // 生成 Γ(13) == 12! 的排列:
    while (std::ranges::next_permutation(a).found) {}
}

int main()
{
    using namespace std::literals; // 允许用字面量后缀，如 24h、1ms、1s。

    const std::chrono::time_point&lt;std::chrono::system_clock&gt; now =
        std::chrono::system_clock::now();
    
    const std::time_t t_c = std::chrono::system_clock::to_time_t(now - 24h);
    std::cout &lt;&lt; "24 小时前，时间是 "
              &lt;&lt; std::put_time(std::localtime(&amp;t_c), "%F %T。\n") &lt;&lt; std::flush;
    
    const std::chrono::time_point&lt;std::chrono::steady_clock&gt; start =
        std::chrono::steady_clock::now();
    
    std::cout &lt;&lt; "不同的时钟无法比较：\n"
                 "  系统时间：" &lt;&lt; now.time_since_epoch() &lt;&lt; "\n"
                 "  稳定时间：" &lt;&lt; start.time_since_epoch() &lt;&lt; '\n';
    
    slow_motion();
    
    const auto end = std::chrono::steady_clock::now();
    std::cout
        &lt;&lt; "缓慢的计算花费了 "
        &lt;&lt; std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(end - start) &lt;&lt; " ≈ "
        &lt;&lt; (end - start) / 1ms &lt;&lt; "ms ≈ " // 几乎等价于以上形式，
        &lt;&lt; (end - start) / 1s &lt;&lt; "s。\n";  // 但分别使用毫秒和秒
}
|p=true
|output=
24 小时前，时间是 2021-02-15 18:28:52。
不同的时钟无法比较：
  系统时间：1666497022681282572ns
  稳定时间：413668317434475ns
缓慢的计算花费了 2090448µs ≈ 2090ms ≈ 2s。
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/chrono/dsc duration}}
{{dsc inc|cpp/chrono/dsc year_month_day}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
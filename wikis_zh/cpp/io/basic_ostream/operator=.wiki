{{cpp/io/basic_ostream/title|operator{{=}}}}
{{cpp/io/basic_ostream/navbar}}
{{dcl begin}}
{{dcl|num=1|1=
protected:
basic_ostream&amp; operator=( const basic_ostream&amp; rhs ) = delete;
}}
{{dcl|num=2|since=c++11|1=
protected:
basic_ostream&amp; operator=( basic_ostream&amp;&amp; rhs );
}}
{{dcl end}}

@1@ 复制赋值运算符受保护，且被弃置。输出流不{{named req|CopyAssignable}}。

@2@ 移动赋值运算符如同通过调用 {{c|swap(*rhs)}}，与 {{c|rhs}} 交换基类的除了 {{ltf|cpp/io/basic_ios/rdbuf}} 以外所有数据成员。此移动赋值运算符受保护：它只为派生的可移动输出流类 {{lc|std::basic_ofstream}} 和 {{lc|std::basic_ostringstream}} 的移动赋值运算符所调用，它们知道如何正确移动赋值关联的流缓冲。

===参数===
{{par begin}}
{{par|rhs|要赋值给 {{c|*this}} 的 {{tt|basic_ostream}} 对象}}
{{par end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;utility&gt;

int main()
{
    std::ostringstream s;
//  std::cout = s;                             // 错误：复制赋值运算符被弃置
//  std::cout = std::move(s);                  // 错误：移动赋值运算符受保护
    s = std::move(std::ostringstream() &lt;&lt; 42); // OK：通过派生类移动
    std::cout &lt;&lt; s.str() &lt;&lt; '\n';
}
|output=
42
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2067|std=C++11|before=1. 重载 {{v|1}} 的参数类型是 {{tt|basic_ostream&amp;}}&lt;br&gt;2. 重载 {{v|2}} 的参数类型是 {{c/core|const basic_ostream&amp;&amp;}}|after=1. 添加 {{c/core|const}}&lt;br&gt;2. 移除 {{c/core|const}}}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
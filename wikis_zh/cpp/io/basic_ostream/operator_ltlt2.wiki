{{title|operator&lt;&lt;{{small|(std::basic_ostream)}}}}
{{cpp/io/basic_ostream/navbar}}
{{dcl begin}}
{{dcl header|ostream}}
{{dcl h|{{tt|basic_ostream}} 与字符}}
{{dcl rev begin|num=1}}
{{dcl|
template&lt; class CharT, class Traits&gt;
basic_ostream&lt;CharT, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;CharT, Traits&gt;&amp; os, CharT ch );
}}
{{dcl|
template&lt; class CharT, class Traits&gt;
basic_ostream&lt;CharT, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;CharT, Traits&gt;&amp; os, char ch );
}}
{{dcl|
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, char ch );
}}
{{dcl|
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, signed char ch );
}}
{{dcl|
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, unsigned char ch );
}}
{{dcl rev end}}
{{dcl h|{{tt|basic_ostream}} 与字符数组}}
{{dcl rev begin|num=2}}
{{dcl|
template&lt; class CharT, class Traits &gt;
basic_ostream&lt;CharT, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;CharT, Traits&gt;&amp; os, const CharT* s );
}}
{{dcl|
template&lt; class CharT, class Traits &gt;
basic_ostream&lt;CharT, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;CharT, Traits&gt;&amp; os, const char* s );
}}
{{dcl|
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, const char* s );
}}
{{dcl|
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, const signed char* s );
}}
{{dcl|
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, const unsigned char* s );
}}
{{dcl rev end}}
{{dcl h|{{tt|basic_ostream}} 右值}}
{{dcl|num=3|since=c++11|
template&lt; class Ostream, class T &gt;
Ostream&amp;&amp; operator&lt;&lt;( Ostream&amp;&amp; os, const T&amp; value );
}}
{{dcl h|{{tt|basic_ostream}} 与 UTF 字符/数组的被删除重载}}
{{dcl rev begin|num=4|since=c++20}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, wchar_t ch ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, char8_t ch ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, char16_t ch ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, char32_t ch ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;wchar_t, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;wchar_t, Traits&gt;&amp; os, char8_t ch ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;wchar_t, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;wchar_t, Traits&gt;&amp; os, char16_t ch ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;wchar_t, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;wchar_t, Traits&gt;&amp; os, char32_t ch ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, const wchar_t* s ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, const char8_t* s ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, const char16_t* s ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;char, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;char, Traits&gt;&amp; os, const char32_t* s ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;wchar_t, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;wchar_t, Traits&gt;&amp; os, const char8_t* s ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;wchar_t, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;wchar_t, Traits&gt;&amp; os, const char16_t* s ) = delete;
}}
{{dcl|1=
template&lt; class Traits &gt;
basic_ostream&lt;wchar_t, Traits&gt;&amp;
    operator&lt;&lt;( basic_ostream&lt;wchar_t, Traits&gt;&amp; os, const char32_t* s ) = delete;
}}
{{dcl rev end}}
{{dcl end}}

插入字符或字符串。

@1@ 表现为{{named req|FormattedOutputFunction}}。在构造并检查 sentry 对象后，插入字符 {{c|ch}}。如果 {{c|ch}} 具有 {{c/core|char}} 类，而 {{c|os}} 的[[cpp/string|字符容器类型]]不是 {{c/core|char}}，那么改为插入 {{c|os.widen(ch)}}。
@@ 按下列方式确定填充：
* 如果 {{c|os.width() &gt; 1}}，那么向输出字符添加 {{c|os.width() - 1}} 个 {{c|os.fill()}} 的副本，以组成输出字符序列。
* 如果 {{c|1=(out.flags() &amp; std::ios_base::adjustfield) == std::ios_base::left}}，那么填充字符被置于输出字符之后，否则在其之前。
@@ 在插入后，调用 {{c|os.width(0)}} 以取消 {{lc|std::setw}} 的效果（如果存在）。

@2@ 表现为{{named req|FormattedOutputFunction}}。在构造并检查 sentry 对象后，插入来自以 {{c|s}} 指向其首元素的字符数组中的相继字符。
* 对于第一和第三重载（其中 {{tt|CharT}} 匹配 {{c|ch}} 的类型），恰好插入 {{c|traits::length(s)}} 个字符。
* 对于第二重载，恰好插入 {{c|std::char_traits&lt;char&gt;::length(s)}} 个字符。
* 对于最后两个重载，恰好插入 {{c|traits::length(reinterpret_cast&lt;const char*&gt;(s))}} 个字符。
@@ 在插入前，首先用 {{c|os.widen()}} 加宽所有字符，然后按下列方式确定填充：
* 如果要插入的字符数少于 {{c|os.width()}}，那么向字符序列添加足够数量的 {{c|os.fill()}} 副本，使得它的长度等于 {{c|os.width()}}。
* 如果 {{c|1=(out.flags() &amp; std::ios_base::adjustfield) == std::ios_base::left}}，那么向输出序列的末尾添加填充字符，否则将它们添加到序列之前。
@@ 在插入后，调用 {{c|os.width(0)}} 以取消 {{lc|std::setw}} 的效果（如果存在）。
@@ 在 {{c|s}} 是空指针时行为未定义。

@3@ 给定到输出流对象的右值引用，调用适当的插入运算符（等价于 {{c|os &lt;&lt; value}}）。{{cpp/enable if|表达式 {{c|os &lt;&lt; value}} 良构且 {{tt|Ostream}} 是公开且无歧义地派生自 {{lc|std::ios_base}} 的类类型}}。

@4@ 接受 {{c/core|char16_t}}、{{c/core|char32_t}} 等类型（或它们的空终止序列）的重载被弃置：不允许 {{c|std::cout &lt;&lt; u'X'}}。这些重载之前会打印整数或指针值。

===参数===
{{par begin}}
{{par|os|要插入数据的输出流}}
{{par|ch|要插入的字符}}
{{par|s|指向要插入的字符串的指针}}
{{par end}}

===返回值===
@1,2@ {{c|os}}
@3@ {{c|std::move(os)}}

===注解===
在解决 {{lwg|1203}} 前，如 {{c|(std::ostringstream() &lt;&lt; 1.2).str()}} 的代码无法编译。

===示例===
{{example 
|code=
#include &lt;fstream&gt;
#include &lt;iostream&gt;
 
void foo()
{
    // 错误：operator&lt;&lt; (basic_ostream&lt;char, _Traits&gt;&amp;, char8_t) 被弃置
//  std::cout &lt;&lt; u8'z' &lt;&lt; '\n';
}
 
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, char8_t const&amp; ch)
{
    return os &lt;&lt; static_cast&lt;char&gt;(ch);
}

int main()
{
    std::cout &lt;&lt; "Hello, world" // 使用 const char* 重载
              &lt;&lt; '\n';          // 使用 char 重载
    std::ofstream("test.txt") &lt;&lt; 1.2; // 使用右值重载
    
    std::cout &lt;&lt; u8'!' &lt;&lt; '\n'; // 使用程序定义的 operator&lt;&lt;(os, char8_t const&amp;)
}
|output=
Hello, world
!
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=167|std=C++98|before={{v|2}} 中的所有重载插入的字符数&lt;br&gt;都是 {{c|traits::length(s)}}|after=更新 {{tt|CharT}} 与 {{c|ch}} 的类型&lt;br&gt;不匹配的重载插入的字符数}}
{{dr list item|wg=lwg|dr=1203|std=C++11|before=右值流的重载返回到基类的左值引用|after=返回到派生类的右值引用}}
{{dr list item|wg=lwg|dr=2011|std=C++98|before=填充由 {{lc|std::num_put::do_put()}} 确定|after=由运算符自身确定}}
{{dr list item|wg=lwg|dr=2534|std=C++11|before=右值流的重载未被制约|after=已制约}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/basic_ostream/dsc operator_ltlt}}
{{dsc inc|cpp/io/basic_ostream/dsc print}}
{{dsc inc|cpp/io/basic_ios/dsc widen}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
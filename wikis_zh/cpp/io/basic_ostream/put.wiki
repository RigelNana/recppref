{{cpp/io/basic_ostream/title | put}}
{{cpp/io/basic_ostream/navbar}}
{{ddcl |
basic_ostream&amp; put( char_type ch );
}}

表现为{{named req|UnformattedOutputFunction}}。构造并检查 sentry 对象后，将字符 {{tt|ch}} 写入输出流。

若输出因任何原因失败，则设置 {{tt|badbit}}。

===参数===
{{par begin}}
{{par | ch |要写入的字符}}
{{par end}}

===返回值===
{{c|*this}}

===注解===
不同于有格式的 {{rlp|operator_ltlt2|operator&lt;&lt;}}，此函数不对 {{c|signed char}} 或 {{c|unsigned char}} 类型重载。

不同于有格式输出函数，若输出失败，则此函数不设置 {{tt|failbit}}。

===示例===
{{example
 | code=
#include &lt;fstream&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout.put('a'); // 正常用法
    std::cout.put('\n');

    std::ofstream s("/does/not/exist/");
    s.clear(); // 假装流是好的
    std::cout &lt;&lt; "未格式化输出: ";
    s.put('c'); // 这将设置 badbit ，但非 failbit
    std::cout &lt;&lt; " fail=" &lt;&lt; bool(s.rdstate() &amp; s.failbit);
    std::cout &lt;&lt; " bad=" &lt;&lt; s.bad() &lt;&lt; '\n';
    s.clear();
    std::cout &lt;&lt; "格式化输出:   ";
    s &lt;&lt; 'c'; // 这将设置 badbit 和 failbit
    std::cout &lt;&lt; " fail=" &lt;&lt; bool(s.rdstate() &amp; s.failbit);
    std::cout &lt;&lt; " bad=" &lt;&lt; s.bad() &lt;&lt; '\n';
}
 | output=
a
未格式化输出:  fail=0 bad=1
格式化输出:    fail=1 bad=1 &lt;!-- 注意：少数编译器正确实现这点。 CLang++ 中工作 --&gt;
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/io/basic_ostream/dsc operator_ltlt2}}
{{dsc inc | cpp/io/basic_ostream/dsc write}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/io/basic_ostream/title|operator&lt;&lt;}}
{{cpp/io/basic_ostream/navbar}}
{{dcl begin}}
{{dcl|num=1|
basic_ostream&amp; operator&lt;&lt;( bool value );
}}
{{dcla|num=2|
basic_ostream&amp; operator&lt;&lt;( long value );
}}
{{dcl|num=3|
basic_ostream&amp; operator&lt;&lt;( unsigned long value );
}}
{{dcl|num=4|since=c++11|
basic_ostream&amp; operator&lt;&lt;( long long value );
}}
{{dcl|num=5|since=c++11|
basic_ostream&amp; operator&lt;&lt;( unsigned long long value );
}}
{{dcl|num=6|
basic_ostream&amp; operator&lt;&lt;( double value );
}}
{{dcl|num=7|
basic_ostream&amp; operator&lt;&lt;( long double value );
}}
{{dcla|num=8|
basic_ostream&amp; operator&lt;&lt;( const void* value );
}}
{{dcl|num=9|since=c++23|
basic_ostream&amp; operator&lt;&lt;( const volatile void* value );
}}
{{dcl|num=10|since=c++17|
basic_ostream&amp; operator&lt;&lt;( std::nullptr_t );
}}
{{dcla|num=11|
basic_ostream&amp; operator&lt;&lt;( short value );
}}
{{dcl|num=12|
basic_ostream&amp; operator&lt;&lt;( int value );
}}
{{dcl|num=13|
basic_ostream&amp; operator&lt;&lt;( unsigned short value );
}}
{{dcl|num=14|
basic_ostream&amp; operator&lt;&lt;( unsigned int value );
}}
{{dcl|num=15|
basic_ostream&amp; operator&lt;&lt;( float value );
}}
{{dcl|num=16|since=c++23|
basic_ostream&amp; operator&lt;&lt;( /* 扩展浮点数类型 */ value );
}}
{{dcl|num=17|
basic_ostream&amp; operator&lt;&lt;( std::basic_streambuf&lt;CharT, Traits&gt;* sb );
}}
{{dcla|num=18|
basic_ostream&amp; operator&lt;&lt;(
    std::ios_base&amp; (*func)(std::ios_base&amp;) );
}}
{{dcl|num=19|
basic_ostream&amp; operator&lt;&lt;(
    std::basic_ios&lt;CharT, Traits&gt;&amp; (*func)(std::basic_ios&lt;CharT, Traits&gt;&amp;) );
}}
{{dcl|num=20|
basic_ostream&amp; operator&lt;&lt;(
    std::basic_ostream&lt;CharT, Traits&gt;&amp; (*func)
        (std::basic_ostream&lt;CharT, Traits&gt;&amp;) );
}}
{{dcl end}}

将数据插入到流。

@1-8@ 插入 {{c|value}}。

@@ 此函数表现为{{named req|FormattedOutputFunction}}。在构造并检查 sentry 对象后，通过调用 {{l2tf std|cpp/locale/num_put/put}} 插入值。如果在输出中遇到文件尾（{{c|1=put().failed() == true}}），那么就会设置 {{tt|badbit}}。

@9@ 等价于 {{c|return operator&lt;&lt;(const_cast&lt;const void*&gt;(p));}}。

@10@ 等价于 {{c|return *this &lt;&lt; s;}}，其中 {{c|s}} 是由实现定义的空终止字符类型字符串。

@11@ 插入来自 {{c/core|short}} {{c|value}} 的值。

@@ 此函数表现为{{named req|FormattedOutputFunction}}。在构造并检查 sentry 对象后，按 {{v|2}} 中的方式插入 {{c/core|long}} 值 {{c|lval}}，其中 {{c|lval}}：
* 在 {{c|flags() &amp; std::ios_base::basefield}} 是 {{lc|std::ios_base::oct}} 或 {{lc|std::ios_base::hex}} 时是 {{c|static_cast&lt;long&gt;(static_cast&lt;unsigned short&gt;(value))}}；
* 否则是 {{c|static_cast&lt;long&gt;(value)}}。

@12@ 插入来自 {{c/core|int}} {{c|value}} 的值。

@@ 此函数表现为{{named req|FormattedOutputFunction}}。在构造并检查 sentry 对象后，按 {{v|2}} 中的方式插入 {{c/core|long}} 值 {{c|lval}}，其中 {{c|lval}}：
* 在 {{c|flags() &amp; std::ios_base::basefield}} 是 {{lc|std::ios_base::oct}} 或 {{lc|std::ios_base::hex}} 时是 {{c|static_cast&lt;long&gt;(static_cast&lt;unsigned int&gt;(value))}}；
* 否则是 {{c|static_cast&lt;long&gt;(value)}}。

@13,14@ 插入来自 {{c/core|unsigned short}} 或 {{c/core|unsigned int}} {{c|value}} 的值。

@@ 此函数表现为{{named req|FormattedOutputFunction}}。在构造并检查 sentry 对象后，按 {{v|3}} 中的方式插入 {{c|static_cast&lt;unsigned long&gt;(value)}}。

@15@ 插入来自 {{c/core|float}} {{c|value}} 的值。

@@ 此函数表现为{{named req|FormattedOutputFunction}}。在构造并检查 sentry 对象后，按 {{v|6}} 中的方式插入 {{c|static_cast&lt;double&gt;(value)}}。

@16@ 插入来自 {{c|value}} 的值。标准库提供所有以无 cv 限定的[[cpp/language/types#扩展浮点数类型|扩展浮点数类型]]作为参数 {{c|value}} 类型的重载。

@@ 此函数表现为{{named req|FormattedOutputFunction}}。在构造并检查 sentry 对象后，检查 {{c/core|/* 扩展浮点数类型 */}} 的[[cpp/language/usual arithmetic conversions#浮点数转换等级|浮点数转换等级]]：
* 如果该等级低于或等于 {{c/core|double}} 的等级，按 {{v|6}} 中的方式插入 {{c|static_cast&lt;double&gt;(value)}}。
* 否则，如果该等级低于或等于 {{c/core|long double}} 的等级，按 {{v|7}} 中的方式插入 {{c|static_cast&lt;long double&gt;(value)}}。
* 否则，对此重载的调用受条件性支持，并且语义由实现定义。

@17@ 表现为{{named req|UnformattedOutputFunction}}。在构造并检查 sentry 对象后，检查 {{c|sb}} 是否为空指针。是的情况下执行 {{c|setstate(badbit)}} 并退出。否则，从 {{c|sb}} 控制的输入序列提取字符，并将它们插入到 {{c|*this}}，直到满足下列条件之一为止：
:* 输入序列上出现文件尾；
:* 插入输出序列失败（此时不会提取要被插入的字符）；
:* 发生异常（此时异常会被捕获）。
如果没有插入字符，那么执行 {{c|setstate(failbit)}}。如果在提取中抛出异常，那么就会设置 {{tt|failbit}}，而且如果在 {{c|exceptions()}} 设置里 {{tt|failbit}}，那么就会重抛异常。

@18-20@ 调用 {{c|func(*this)}}。这些重载用于实现用于输出的输入/输出操纵符，例如 {{lc|std::endl}}。

===参数===
{{par begin}}
{{par|value|要插入的整数、浮点数、布尔值或指针}}
{{par|func|要调用的函数}}
{{par|sb|指向要从之读取数据的流缓冲区的指针}}
{{par end}}

===返回值===
@1-19@ {{c|*this}}
@20@ {{c|func(*this)}}

===注解===
没有对指向非静态数据成员指针{{rev inl|until=c++23|、指向 volatile 指针}}或函数指针（除了拥有 {{v|18-20}} 重载所接受之签名者）的重载。
* 试图输出这种对象会引发到 {{c/core|bool}} 的隐式转换，并对于任何非空指针值将打印值 {{c|1}}（除非设置了 {{tt|boolalpha}}，此时会打印 {{c|true}}）。

字符与字符串实参（例如拥有 {{c/core|char}} 类型或 {{c/core|const char*}} 类型者）由 {{c/core|operator&lt;&lt;}} 的{{rlp|operator ltlt2|非成员重载}}处理。
* 试图用成员函数调用语法输出字符（例如 {{c|std::cout.operator&lt;&lt;('c');}}）会调用重载 {{v|2-5|2}} 或 {{v|11-14|11}} 之一，并输出数字值。
* 试图用成员函数调用语法输出字符串会调用重载 {{v|8}} 而改为打印指针值。

重载 {{v|10}} 由 {{lwg|2221}}的解决方案添加，但是没有任何标准库实现在 C++11/14 模式下实现它。

===示例===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;

int fun() { return 42; }

int main()
{
    std::istringstream input(" \"Some text.\" ");
    double f = 3.14;
    bool b = true;
    
    std::cout 
        &lt;&lt; fun()          // int 重载 (12)
        &lt;&lt; ' '            // 非成员重载
        &lt;&lt; std::boolalpha // 函数重载 (18)
        &lt;&lt; b              // bool 重载 (1)
        &lt;&lt; " "            // 非成员重载
        &lt;&lt; std::fixed     // 又是函数重载 (18)
        &lt;&lt; f              // double 重载 (6)
        &lt;&lt; input.rdbuf()  // streambuf 重载
        &lt;&lt; fun            // bool 重载 (1)：没有 int(*)() 的重载
        &lt;&lt; std::endl;     // 又是函数重载 (18)
    
    int x = 0;
    int* p1 = &amp;x;
    volatile int* p2 = &amp;x;
    std::cout
        &lt;&lt; "p1: " &lt;&lt; p1 &lt;&lt; '\n'  // `const void*` 重载，打印地址
        &lt;&lt; "p2: " &lt;&lt; p2 &lt;&lt; '\n'; // C++23 (P1147) 之前: bool 重载 :)
            // 因为其并不匹配 operator&lt;&lt;(const void*)，由于它舍弃了 `volatile` 限定符。
            // 为修正这点，C++23 添加了 `const volatile void*` 的重载 (9)，
            // 它按预期打印了地址。
}
|p=true
|output=
42 true 3.140000 "Some text." true
p1: 0x7ffcea766600
p2: 0x7ffcea766600
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=117|std=C++98|before=重载 {{v|1-8,11-15}} 通过 {{l2tt|cpp/locale/num_put/put}} 代理插入操作，但它没有为&lt;br&gt;{{c/core|short}}，{{c/core|unsigned short}}，{{c/core|int}}，{{c/core|unsigned int}} 以及 {{c/core|float}} 重载|after=它们在传递到 {{tt|num_put::put}}&lt;br&gt;之前会先进行转换}}
{{dr list item|wg=lwg|dr=567|std=C++98|before=重载 {{v|17}} 因 {{lwg|60}} 的解决方案而表现为&lt;br&gt;{{named req|FormattedOutputFunction}}|after=表现为&lt;br&gt;{{named req|UnformattedOutputFunction}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/basic_ostream/dsc operator ltlt2}}
{{dsc inc|cpp/string/basic_string/dsc operator ltltgtgt}}
{{dsc inc|cpp/string/basic_string_view/dsc operator ltlt}}
{{dsc inc|cpp/utility/bitset/dsc operator ltltgtgt2}}
{{dsc inc|cpp/numeric/complex/dsc operator ltltgtgt}}
{{dsc inc|cpp/numeric/random/engine/dsc operator ltltgtgt|linear_congruential_engine}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator ltltgtgt|uniform_int_distribution}}
{{dsc inc|cpp/io/basic_ostream/dsc put}}
{{dsc inc|cpp/io/basic_ostream/dsc write}}
{{dsc inc|cpp/utility/dsc to_chars}} 
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
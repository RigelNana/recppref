{{cpp/io/strstreambuf/title|strstreambuf}}
{{cpp/io/strstreambuf/navbar}}
{{dcl begin}}
{{dcl rev multi|num=1|notes1={{mark deprecated c++98}}&lt;br&gt;{{mark until c++11}}|dcl1=
explicit strstreambuf( std::streamsize alsize = 0 );
|notes2={{mark life|since=c++11|removed=c++26}}|dcl2=
strstreambuf() : strstreambuf(0) {}
explicit strstreambuf( std::streamsize alsize );
}}
{{dcl|num=2|deprecated=c++98|removed=c++26|1=
strstreambuf( void* (*palloc)(std::size_t), void (*pfree)(void*) );
}}
{{dcl|num=3|deprecated=c++98|removed=c++26|1=
strstreambuf( char* gnext, std::streamsize n, char* pbeg = 0 );
}}
{{dcl|num=4|deprecated=c++98|removed=c++26|1=
strstreambuf( signed char* gnext, std::streamsize n, signed char* pbeg = 0 );
}}
{{dcl|num=5|deprecated=c++98|removed=c++26|1=
strstreambuf( unsigned char* gnext, std::streamsize n, unsigned char* pbeg = 0 );
}}
{{dcl|num=6|deprecated=c++98|removed=c++26|1=
strstreambuf( const char* gnext, std::streamsize n );
}}
{{dcl|num=7|deprecated=c++98|removed=c++26|1=
strstreambuf( const signed char* gnext, std::streamsize n );
}}
{{dcl|num=8|deprecated=c++98|removed=c++26|1=
strstreambuf( const unsigned char* gnext, std::streamsize n );
}}
{{dcl end}}

@1@ 构造 {{tt|std::strstreambuf}} 对象：通过调用 {{lc|std::streambuf}} 的默认构造函数初始化基类，初始化缓冲状态为“动态”（将按需分配缓冲区），初始化已分配大小为提供的 {{c|alsize}}，初始化分配和解分配函数为空值（将使用 {{c/core|new[]}} 与 {{c/core|delete[]}}）。

@2@ 构造 {{tt|std::strstreambuf}} 对象：通过调用 {{lc|std::streambuf}} 的默认构造函数初始化基类，初始化缓冲状态为“动态”（将按需分配缓冲区），初始化已分配大小为未指定值，初始化分配函数为 {{c|palloc}}，解分配函数为 {{c|pfree}}。

@3-5@ 依下列步骤构造 {{tt|std::strstreambuf}} 对象：
:@a@ 通过调用 {{lc|std::streambuf}} 的默认构造函数初始化基类
:@b@ 初始化缓冲状态为“冻结”（缓冲区为用户提供的固定大小缓冲区）
:@c@ 以下列方式确定用户提供的数组中的元素数：若 {{c|n}} 大于零，则使用 {{c|n}}。若 {{c|n}} 为零，则执行 {{c|std::strlen(gnext)}} 确定缓冲区大小。若 {{c|n}} 为负，则使用 {{lc|INT_MAX}}。
:@d@ 以下列方式配置 {{lc|std::basic_streambuf}} 的指针：若 {{c|pbeg}} 为空指针，则调用 {{c|setg(gnext, gnext, gnext + N)}}。若 {{c|pbeg}} 不是空指针，则执行 {{c|setg(gnext, gnext, pbeg)}} 和 {{c|setp(pbeg, pbeg + N)}}，其中 N 是之前确定的数组中的元素数。

@6-8@ 同 {{c|strstreambuf((char*)gnext, n)}}，除了在缓冲状态位掩码中设置“常量”（不允许输出到此缓冲区）。

===参数===
{{par begin}}
{{par|alsize|动态分配的缓冲区的初始大小}}
{{par|palloc|指向用户提供的分配函数的指针}}
{{par|pfree|指向用户提供的解分配函数的指针}}
{{par|gnext|指向用户提供的数组中获取区起始的指针}}
{{par|pbeg|指向用户提供的数组中放置区起始的指针}}
{{par|n|用户提供数组的获取区（若 pbeg 为空）或放置区（若 pbeg 非空）中的字节数}}
{{par end}}

===注解===
这些构造函数常为 {{c|std::strstream}} 的构造函数所调用。

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P0935R0|std=C++11|before=默认构造函数曾为 explicit|after=使之为隐式}}
{{dr list end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;strstream&gt;

int main()
{
    std::strstreambuf dyn; // 动态
    std::strstream dyn_s; // 等价的流
    dyn_s &lt;&lt; 1.23 &lt;&lt; std::ends;
    std::cout &lt;&lt; dyn_s.str() &lt;&lt; '\n';
    dyn_s.freeze(false);

    char buf[10];
    std::strstreambuf user(buf, 10, buf); // 用户提供的输出缓冲区
    std::ostrstream user_s(buf, 10); // 等价的流
    user_s &lt;&lt; 1.23 &lt;&lt; std::ends;
    std::cout &lt;&lt; buf &lt;&lt; '\n';

    std::strstreambuf lit("1 2 3", 5); // 常量
    std::istrstream lit_s("1 2 3"); // 等价的流
    int i, j, k;
    lit_s &gt;&gt; i &gt;&gt; j &gt;&gt; k;
    std::cout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; j &lt;&lt; ' ' &lt;&lt; k &lt;&lt; '\n';
}
|output=
1.23
1.23
1 2 3
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/strstream/dsc constructor|strstream}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
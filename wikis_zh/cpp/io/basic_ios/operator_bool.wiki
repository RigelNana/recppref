{{cpp/io/basic_ios/title|operator bool}}
{{cpp/io/basic_ios/navbar}}
{{dcl begin}}
{{dcl|num=1|until=c++11|
operator /* 未指定的布尔类型 */() const;
}}
{{dcl|num=2|since=c++11|
explicit operator bool() const;
}}
{{dcl end}}

检查流是否无错误。

@1@ 在 {{c|fail()}} 返回 {{c|true}} 时返回在布尔语境求值为 {{c|false}} 的值，否则返回在布尔语境求值为 {{c|true}} 的值。

@2@ 在流无错误且已为输入/输出操作就绪时返回 {{c|true}}。明确说即返回 {{c|!fail()}}。

此运算符使得以流和返回到流引用的函数为循环条件可行，导致惯用的 C++ 输入循环，例如 {{c|while (stream &gt;&gt; value) {...}&lt;!----&gt;}} 或 {{c|while (std::getline(stream, string)) {...}&lt;!----&gt;}}。这种循环只有在输入操作成功时才会执行循环体。

===参数===
（无）

===返回值===
@1@ 在流无错误时返回在布尔语境求值为 {{c|true}} 的值，否则返回在布尔语境求值为 {{c|false}} 的值。

@2@ 在流无错误时返回 {{c|true}}，否则返回 {{c|false}}。

===注解===
可以在期待 {{c/core|bool}} 的语境（例如 [[cpp/language/if|if 条件]]）使用此转换。然而不允许适用于 {{c/core|bool}} 的[[cpp/language/implicit conversion|隐式转换]]（例如到 {{c/core|int}}）。

C++98 由于[[cpp/language/implicit conversion#安全 bool 问题|安全 bool 问题]]无法直接提供 {{c/core|operator bool}}。因此 C++98 在最开始提供了 {{c/core|operator void*}}，它会在 {{c|fail()}} 返回 {{c|true}} 时返回一个空指针，在其他情况下返回一个非空指针。它被 {{lwg|468}} 的解决方案（即重载 {{v|1}}）替换，以允许使用[http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Safe_bool 安全 bool 手法]。

从 C++11 开始，转换函数可以是 {{ltt|cpp/language/explicit}} 的。{{lwg|1094}} 的解决方案引入了显式的 {{c/core|operator bool}}，从此可以安全转换到布尔值。

===示例===
{{example
|
|code=
#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
{
    std::istringstream s("1 2 3 error");
    int n;
    
    std::cout &lt;&lt; std::boolalpha &lt;&lt; "s 是 " &lt;&lt; static_cast&lt;bool&gt;(s) &lt;&lt; '\n';
    while (s &gt;&gt; n)
        std::cout &lt;&lt; n &lt;&lt; '\n';
    std::cout &lt;&lt; "s 是 " &lt;&lt; static_cast&lt;bool&gt;(s) &lt;&lt; '\n';
}
|output=
s 是 true
1
2
3
s 是 false
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=468|std=C++98|before=提供了 {{c/core|operator void*}}|after=改成提供到未指定的布尔类型的转换函数}}
{{dr list end}}

===参阅===
{{cpp/io/basic ios/iostate accessors}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
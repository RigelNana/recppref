{{cpp/io/basic_ios/title | init}}
{{cpp/io/basic_ios/navbar}}
{{ddcl |
protected:
void init( std::basic_streambuf&lt;CharT,Traits&gt;* sb );
}}

设置关联流缓冲为 {{c|sb}} 并初始化内部状态。

后置条件如下：

{| class="wikitable"
|-
!元素
!值
|-
| {{lc|rdbuf()}} || {{tt|sb}}
|-
| {{lc|tie()}} || 空指针
|-
| {{lc|rdstate()}} || 若 {{c|sb}} 不是空指针, 则为 {{c|goodbit}}，否则为 {{c|badbit}}
|-
| {{lc|exceptions()}} || {{c|goodbit}}
|-
| {{ltf|cpp/io/ios_base/flags}} || {{c|skipws {{!}} dec}}
|-
| {{ltf|cpp/io/ios_base/width}} || {{c|0}}
|-
| {{ltf|cpp/io/ios_base/precision}} || {{c|6}}
|-
| {{lc|fill()}} || {{c|widen(' ')}}
|-
| {{ltf|cpp/io/ios_base/getloc}} || {{c|std::locale()}} 所返回的值的副本
|}

此成员函数为受保护：一旦知晓实际缓冲区类型，则它为派生流类 {{lc|std::basic_istream}} 和 {{lc|std::basic_ostream}} 的构造函数所调用。直至调用此函数前，默认构造的 {{lc|std::basic_ios}} 每个成员函数（包括析构函数）都引发未定义行为。注意 {{tt|basic_ios}} 是虚基类，从而其构造函数不为直接派生类的构造函数所调用，此乃必须进行二阶段初始化的原因。

===参数===
{{par begin}}
{{par | sb |要关联到的流缓冲}}
{{par end}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/io/basic_ios/dsc constructor}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
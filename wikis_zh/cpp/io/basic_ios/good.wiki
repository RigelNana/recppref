{{cpp/io/basic_ios/title|good}}
{{cpp/io/basic_ios/navbar}}
{{dcl begin}}
{{dcl|1=
bool good() const;
}}
{{dcl end}}

若流上的最近 I/O 操作成功完成则返回 {{c|true}}。明确说即返回 {{c|rdstate() {{==}} 0}} 的结果。

设置流状态位的条件列表，见 {{l2tt|cpp/io/ios_base/iostate}}。

===参数===
（无）

===返回值===
若流未出现错误则为 {{c|true}}，否则为 {{c|false}}。

===示例===
{{example
|code=
#include &lt;cstdlib&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;

int main()
{
    const char* fname = "/tmp/test.txt";
    std::ofstream ofile{fname};
    ofile &lt;&lt; "10 " &lt;&lt; "11 " &lt;&lt; "12 " &lt;&lt; "non-int";
    ofile.close();

    std::ifstream file{fname};
    if (!file.good())  
    {  
        std::cout &lt;&lt; "#1. 打开文件 test.txt 失败 - "
                     "错误标记之一为 true\n";
        return EXIT_FAILURE;
    }

    // 典型的 C++ I/O 循环使用 I/O 函数的返回值为循环控制条件，此处使用 operator bool()
    for (int n; file &gt;&gt; n;)
        std::cout &lt;&lt; n &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';

    if (file.bad()) 
    {
        std::cout &lt;&lt; "#2. 读取时发生 I/O 错误 - badbit 为 true\n";
        return EXIT_FAILURE;
    } 
    else if (file.eof())
        std::cout &lt;&lt; "#3. 成功抵达文件末尾 - eofbit 为 true\n"
            "这没问题，即便 file.good() 为 false\n"; 
    else if (file.fail())
        std::cout &lt;&lt; "#4. 遇到非整数数据 - failbit 为 true\n";
}
|p=true
|output=
10 11 12 
#4. 遇到非整数数据 - failbit 为 true
}}

===参阅===
{{cpp/io/basic ios/iostate accessors}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/io/ostrstream/title|ostrstream}}
{{cpp/io/ostrstream/navbar}}
{{dcl begin}}
{{dcl|num=1|deprecated=c++98|removed=c++26|1=
ostrstream();
}}
{{dcl|num=2|deprecated=c++98|removed=c++26|1=
ostrstream(char* s, int n, std::ios_base::openmode mode = std::ios_base::out);
}}
{{dcl end}}

构造新的输出 strstream 及其底层 {{lc|std::strstreambuf}}。

@1@ 默认构造底层 {{lc|std::strstreambuf}}，这会创建一个动态成长的缓冲区，并以该 {{tt|strstreambuf}} 成员的地址初始化基类。

@2@ 以底层 {{lc|std::strstreambuf}} 成员的地址初始化基类，该成员以两种可能方式之一初始化，两者都写入用户提供的数组：
:@a@ 若 {{c|mode}} 中未设置 {{tt|app}} 位，则通过调用 {{c|strstreambuf(s, n, s)}} 构造缓冲区。若以 {{c|s}} 指向其首元素的数组中的元素少于 {{c|n}} 个，则行为未定义。
:@b@ 若 {{c|mode}} 中设置了 {{tt|app}} 位，则通过调用 {{c|strstreambuf(s, n, s + std::strlen(s))}} 构造缓冲区。若以 {{c|s}} 指向其首元素的数组中的元素少于 {{c|n}} 个，或若数组不含合法的空终止字符序列，则行为未定义。

===参数===
{{par begin}}
{{par|s|用作输出缓冲区的 char 数组}}
{{par|n|用作输出缓冲区的数组大小}}
{{par|mode|指定流打开模式。它是位掩码类型，定义了下列常量（尽管只使用 {{tt|app}}）：
{{cpp/io/ios_base/openmode consts}}}}
{{par end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;strstream&gt;

int main()
{
    std::ostrstream s1; // 动态缓冲区
    s1 &lt;&lt; 1 &lt;&lt; ' ' &lt;&lt; 3.14 &lt;&lt; " example\n" &lt;&lt; std::ends;
    std::cout &lt;&lt; s1.str();
    s1.freeze(false);

    char arr[15] = "Hello";

    std::ostrstream s2(arr, sizeof arr, std::ios_base::app);
    s2 &lt;&lt; ", world!" &lt;&lt; std::ends;
    std::cout &lt;&lt; s2.str() &lt;&lt; '\n';
    std::cout &lt;&lt; arr &lt;&lt; '\n'; // 流使用提供的数组
}
|output=
1 3.14 example
Hello, world!
Hello, world!
}}


===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/strstreambuf/dsc strstreambuf}}
{{dsc inc|cpp/io/strstream/dsc constructor|istrstream}}
{{dsc inc|cpp/io/strstream/dsc constructor|strstream}}
{{dsc end}}

{{langlinks|en|ja}}
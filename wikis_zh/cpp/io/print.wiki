{{cpp/title|print}}
{{cpp/io/print/navbar}}

{{dcl begin}}
{{dcl header|print}}
{{dcl|num=1|since=c++23|
template&lt; class... Args &gt;
void print( std::format_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl|num=2|since=c++23|
template&lt; class... Args &gt;
void print( std::FILE* stream,
            std::format_string&lt;Args...&gt; fmt, Args&amp;&amp;... args );
}}
{{dcl end}}

根据格式字符串 {{c|fmt}} 格式化 {{c|args}}，并将结果打印到流中。

@1@ 等价于 {{c|std::print(stdout, fmt, std::forward&lt;Args&gt;(args)...)}}。

@2@ [[cpp/language/charset#代码单元和字面量编码|通常字面量编码]]是 UTF-8 时等价于 {{c multi
|(std::enable_nonlocking_formatter_optimization&lt;std::remove_cvref_t&lt;Args&gt;&gt; &amp;&amp; ...)
|    ? std::vprint_unicode(stream, fmt.str, std::make_format_args(args...))
|    : std::vprint_unicode_buffered(stream, fmt.str, std::make_format_args(args...));}}。
@@ 否则等价于 {{c multi
|(std::enable_nonlocking_formatter_optimization&lt;std::remove_cvref_t&lt;Args&gt;&gt; &amp;&amp; ...)
|    ? std::vprint_nonunicode(stream, fmt.str, std::make_format_args(args...))
|    : std::vprint_nonunicode_buffered(stream, fmt.str, std::make_format_args(args...));}}。

如果 {{tt|Args}} 中存在任何 {{tt|Ti}} 导致 {{c/core|std::formatter&lt;Ti, char&gt;}} 不满足{{named req|BasicFormatter}}（如 {{lc|std::make_format_args}} 所要求），那么行为未定义。

===参数===
{{par begin}}
{{par|stream|要写入的输出文件流}}
{{par|fmt|{{include|cpp/utility/format/format string}}}}
{{par|args...|要格式化的实参}}
{{par end}}

===异常===
{{std print exceptions}}

===注解===
{{ftm begin|std=1|value=1|comment=1}}
{{ftm|__cpp_lib_print|格式化输出|value=202207L|std=C++23|rowspan=3}}
{{ftm|-|无缓冲的格式化输出|value=202403L|std=C++26|dr=23}}
{{ftm|-|为更多可格式化类型启用无缓冲的格式化输出|value=202406L|std=C++26|dr=23}}
{{ftm|__cpp_lib_format|暴露 {{lc|std::basic_format_string}}|value=202207L|std=C++23}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;cstdio&gt;
#include &lt;filesystem&gt;
#include &lt;print&gt;

int main()
{
    std::print("{2} {1}{0}!\n", 23, "C++", "Hello");  // 重载 (1)
    
    const auto tmp{std::filesystem::temp_directory_path() / "test.txt"};
    if (std::FILE* stream {std::fopen(tmp.c_str(), "w")})
    {
        std::print(stream, "File: {}", tmp.string()); // 重载 (2)
        std::fclose(stream);
    }
}
|output=
Hello C++23!
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P3107R5|std=C++23|before=只能进行有缓冲的打印操作|after=可以进行无缓冲的打印操作}}
{{dr list item|paper=P3235R3|std=C++23|before={{stddoc|P3107R5}}新增的函数的名字会导致误解|after=更换函数名}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/dsc println}}
{{dsc inc|cpp/io/basic_ostream/dsc print}}
{{dsc inc|cpp/utility/format/dsc format}}
{{dsc inc|cpp/utility/format/dsc format_to}}
{{dsc inc|cpp/io/c/dsc fprintf}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
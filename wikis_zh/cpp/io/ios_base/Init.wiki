{{cpp/io/ios_base/title|Init}}
{{cpp/io/ios_base/navbar}}
{{ddcl|
class Init;
}}

此类用以确保默认 C++ 流（{{lc|std::cin}}、{{lc|std::cout}} 等）会被正确初始化及析构。该类会跟踪它被创建的实例数量，在构造首个实例时创建并初始化 C++ 流，并且在析构最后实例时清除输出流缓冲区。

标头 {{header|iostream}} 表现如同它定义（直接或间接）一个有静态存储期的 {{tt|std::ios_base::Init}} 实例：这使得在具有[[cpp/language/initialization#非局部变量|有序初始化]]的静态对象的构造函数及析构函数中，访问标准输入/输出流是安全的（只要在翻译单元中，定义该对象前包含 {{header|iostream}}）。

{{rrev|since=c++23|
在[[cpp/freestanding|有宿主实现]]中，每个 [[cpp/standard library#导入模块|C++ 库模块]]表现如同它包含了某个[[cpp/language/modules#模块声明|接口单元]]，该单元定义了一个[[cpp/language/modules#导出声明和定义|未导出]]且具有[[cpp/language/initialization#非局部变量|有序初始化]]的 {{tt|std::ios_base::Init}} 变量。

这会使得该变量的定义按顺序在 C++ 库模块导入点后的所有声明之前出现。如果程序没有引用任何标准输入/输出流对象，那么它也无法观测到该定义是否存在。
}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|nolink=true|在默认 C++ 流未被初始化的情况下初始化默认 C++ 流}}
{{dsc mem dtor|nolink=true|在 {{c|*this}} 是最后要被销毁的实例的情况下清除默认 C++ 流的缓冲区}}
{{dsc end}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=1123|std=C++98|before=构造函数和析构函数的行为依赖了一个仅用于阐述的静态数据成员 {{tt|init_cnt}}|after=移除依赖}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/dsc cin}}
{{dsc inc|cpp/io/dsc cout}}
{{dsc inc|cpp/io/dsc cerr}}
{{dsc inc|cpp/io/dsc clog}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/io/ios_base/title|pword}}
{{cpp/io/ios_base/navbar}}
{{ddcl|
void*&amp; pword( int index );
}}

首先，充分地分配或重置能确保 {{c|index}} 是有效索引的私有存储（{{c|void*}} 的动态数组或其他可索引数据结构），然后返回到带索引 {{c|index}} 的私有存储 {{c|void*}} 元素的引用。

此 {{tt|ios_base}} 对象上任何其他操作都可能使返回的引用失效，包含对 {{tt|pword()}} 的另一调用，但存储的值会保持，使得以相同索引从 {{c|pword(index)}} 读取将产生相同值，直到下次调用 {{c|copyfmt()}}。此值可用于任何目的。元素索引必须由 {{lc|xalloc()}} 获得，否则行为未定义&lt;!-- LWG 3083 --&gt;。初始化新元素为[[cpp/language/pointer#空指针|空指针]]。

如果函数失败（可能由分配失败导致）并且 {{c|*this}} 是一个 {{tt|basic_ios&lt;&gt;}} 对象或子对象的基类子对象，那么调用 {{c|std::basic_ios&lt;&gt;::setstate(badbit)}}，其可能会抛出 {{lc|std::ios_base::failure}}。

===参数===
{{par begin}}
{{par|index|元素的索引值}}
{{par end}}

===返回值===
到元素的引用。

===异常===
设置 badbit 时可能会抛出 {{lc|std::ios_base::failure}}。

===注解===
如果在 {{tt|pword}} 存储的指针要求管理，那么可以使用 {{lc|register_callback()}} 安装按需执行深复制或解分配的处理函数。

===示例===
{{include|cpp/io/ios_base/xalloc_example}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=36|std=C++98|before=存储的值在返回的引用失效的情况下不一定会保持|after=存储的值在下次调用 {{tt|copyfmt()}} 前会一直保持}}
{{dr list item|wg=lwg|dr=41|std=C++98|before=此函数在失败时会自己设置 badbit，&lt;br&gt;但 {{tt|ios_base}} 没有提供这样的接口|after=由 {{tt|basic_ios}} 设置 badbit&lt;br&gt;（如果 {{c|*this}} 是它的基类子对象）}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/ios_base/dsc iword}}
{{dsc inc|cpp/io/ios_base/dsc xalloc}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
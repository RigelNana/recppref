{{cpp/title|unitbuf|nounitbuf}}
{{cpp/io/manip/navbar}}
{{dcl begin}}
{{dcl header|ios}}
{{dcl|num=1|
std::ios_base&amp; unitbuf( std::ios_base&amp; str );
}}
{{dcl|num=2|
std::ios_base&amp; nounitbuf( std::ios_base&amp; str );
}}
{{dcl end}}

启用或禁用任何输出操作后的自动冲洗。在输入时无效果。

@1@ 如同用调用 {{c|str.setf(std::ios_base::unitbuf)}} 启用流 {{c|str}} 中的 {{tt|unitbuf}} 标志。

@2@ 如同用调用 {{c|str.unsetf(std::ios_base::unitbuf)}} 禁用流 {{c|str}} 中的 {{tt|unitbuf}} 标志。

这是一个 I/O 操纵符，可用如 {{c|out &lt;&lt; std::unitbuf}} 的表达式对任何 {{lc|std::basic_ostream}} 类型的 {{tt|out}} 或用如 {{c|in &gt;&gt; std::unitbuf}} 的表达式对任何 {{lc|std::basic_istream}} 类型的 {{tt|in}} 调用。

===注解===
在 {{lc|std::basic_ostream::sentry}} 对象的析构函数中进行冲洗，若 {{c|str.flags() &amp; std::ios_base::unitbuf}} 为 {{c|true}} 则析构函数调用 {{c|str.rdbuf()-&gt;pubsync()}}。

标准输出对象 {{lc|std::cerr}} 及 {{lc|std::wcerr}} 默认已设置其 {{tt|unitbuf}} 位。

===参数===
{{par begin}}
{{par|str|到 I/O 流的引用}}
{{par end}}

===返回值===
{{c|str}}（到操纵后的流的引用）。

===示例===
{{example
|无 {{tt|std::unitbuf}} 或另一显式冲洗时，输出相同，但不实时出现。
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;

template&lt;typename Diff&gt;
void log_progress(Diff d)
{
    std::cout &lt;&lt; std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(d)
              &lt;&lt; " ... ";
}

int main()
{
    volatile int sink = 0;
    std::cout &lt;&lt; std::unitbuf; // 启用自动冲入

    const auto start = std::chrono::high_resolution_clock::now();
    for (int j = 0; j &lt; 5; ++j)
    {
        for (int n = 0; n &lt; 10000; ++n)
            for (int m = 0; m &lt; 20000; ++m)
                sink += m * n; // 做一些工作
        log_progress(std::chrono::high_resolution_clock::now() - start);
    }
    std::cout &lt;&lt; '\n';
}
|output=
571ms ... 1146ms ... 1722ms ... 2294ms ... 2865ms ...
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/manip/dsc flush}}
{{dsc inc|cpp/io/manip/dsc endl}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
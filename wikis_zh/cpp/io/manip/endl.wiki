{{cpp/title|endl}}
{{cpp/io/manip/navbar}}
{{ddcl|header=ostream|
template&lt; class CharT, class Traits &gt;
std::basic_ostream&lt;CharT, Traits&gt;&amp; endl( std::basic_ostream&lt;CharT, Traits&gt;&amp; os );
}}

插入换行符到输出序列 {{c|os}} 并冲洗它，如同调用 {{c|os.put(os.widen('\n'))}} 后随 {{c|os.flush()}}。

这是仅输出的 I/O 操纵符，可对任何 {{lc|std::basic_ostream}} 类型的 {{tt|out}} 以表达式 {{c|out &lt;&lt; std::endl}} 调用它。

===注解===
可用此操纵符立即产生新行的输出，例如从长时间运行的进程中显示输出，记录多个线程的活动，或记录可能非预期地崩溃的程序活动。若产生的进程进行任何屏幕 I/O，则在调用 {{lc|std::system}} 前亦需要 {{lc|std::cout}} 的显式冲洗。&lt;!--不能复现于 VS2013 ，需要更改？ ——（常用示例为 Windows 上的 {{c|std::system("pause")}} ）。--&gt;多数其他常见的交互 I/O 场景中，使用 {{lc|std::cout}} 时 {{tt|std::endl}} 是冗余的，因为任何来自 {{lc|std::cin}} 的输入、到 {{lc|std::cerr}} 的输出或程序终止都会强制调用 {{c|std::cout.flush()}}。某些源代码中鼓励用 {{tt|std::endl}} 代替 {{c/core|'\n'}}，这可能显著地降低输出性能。

多数实现中，标准输出是行缓冲的，而写入 {{c/core|'\n'}} 就会导致冲洗，除非执行 {{c|std::ios::sync_with_stdio(false)}}。这些情形中，不必要的 {{tt|endl}} 只会降低文件输出而非标准输出的的性能。

此维基上的代码示例[http://www.stroustrup.com/3rd_code.html 遵循 Bjarne Stroustrup] 和[https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rio-endl 《C++ 核心方针》]，只在需要时冲洗标准输出。

需要冲洗不完整的行时，可使用 {{lc|std::flush}} 操纵符。

需要冲洗每个字节的输出时，可使用 {{lc|std::unitbuf}} 操纵符。

===参数===
{{par begin}}
{{par|os|到输出流的引用}}
{{par end}}

===返回值===
{{c|os}}（到操纵后流的引用）。

===示例===
{{example
|以 {{c/core|'\n'}} 替代 {{tt|endl}}，输出会相同，但可能不会实时出现。
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
 
template&lt;typename Diff&gt;
void log_progress(Diff d)
{
    std::cout &lt;&lt; std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(d)
              &lt;&lt; " passed" &lt;&lt; std::endl;
}
 
int main()
{
    std::cout.sync_with_stdio(false); // 一些平台上 stdout 在写 \n 时冲洗
 
    static volatile int sink{};
    const auto t1 = std::chrono::high_resolution_clock::now();
    for (int i = 0; i &lt; 5; ++i)
    {
        for (int j = 0; j &lt; 10000; ++j)
            for (int k = 0; k &lt; 20000; ++k)
                sink += i * j * k; // 做一些工作
        log_progress(std::chrono::high_resolution_clock::now() - t1);
    }
}
|p=true
|output=
566ms passed
1133ms passed
1699ms passed
2262ms passed
2829ms passed
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/manip/dsc unitbuf}}
{{dsc inc|cpp/io/manip/dsc flush}}
{{dsc inc|cpp/io/basic_ostream/dsc flush}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
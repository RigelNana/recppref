{{cpp/title|ws}}
{{cpp/io/manip/navbar}}
{{ddcl|header=istream|
template&lt; class CharT, class Traits &gt;
std::basic_istream&lt;CharT, Traits&gt;&amp; ws( std::basic_istream&lt;CharT, Traits&gt;&amp; is );
}}

从输入流舍弃前导空白符。

表现为{{named req|UnformattedInputFunction}}，但不修改 {{c|is.gcount()}}。在构造并检查 sentry 对象后，从流提取并舍弃字符，直到出现下列任一条件：

* 输入序列中出现文件尾条件（此时函数会调用 {{c|setstate(eofbit)}} 但不会设置 {{tt|failbit}}；如果调用 {{tt|ws}} 前已在 {{c|is}} 上设置 {{tt|eofbit}}，那么不适用这条，此时 sentry 对象的构造会设置 {{tt|failbit}}）。

* 输入序列中下个可用字符 {{c|c}} 不是以 {{c|std::isspace(c, is.getloc())}} 确定的空白字符。不会提取该非空白字符。

这是只输入的输入/输出操纵符，可用类似 {{c|in &gt;&gt; std::ws}} 的表达式对任何 {{lc|std::basic_istream}} 类型的 {{c|in}} 调用。

===参数===
{{par begin}}
{{par|is|到输入流的引用}}
{{par end}}

===返回值===
{{c|is}}（到提取连续空白符后的流的引用）。

===注解===
如果在调用前在流上设置了 {{tt|eofbit}}，那么构造 sentry 对象就会设置 {{tt|failbit}}。

===示例===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;istream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;

int main()
{
    for (const char* str : {"     #1 test", "\t #2 test", "#3 test"})
    {
        std::string line;
        std::getline(std::istringstream{str}, line);
        std::cout &lt;&lt; "getline 返回：\t\t" &lt;&lt; quoted(line) &lt;&lt; '\n';
        
        std::istringstream iss{str};
        std::getline(iss &gt;&gt; std::ws, line);
        std::cout &lt;&lt; "ws + getline 返回：\t" &lt;&lt; quoted(line) &lt;&lt; '\n';
    }
}
|output=
getline 返回：		"     #1 test"
ws + getline 返回：	"#1 test"
getline 返回：		"	 #2 test"
ws + getline 返回：	"#2 test"
getline 返回：		"#3 test"
ws + getline 返回：	"#3 test"
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=415|std=C++98|before=调用 {{tt|std::ws}} 不一定会构造 sentry 对象（与其他输入函数不一致）|after=需要构造 sentry 对象}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/basic_istream/dsc ignore|mem=std::basic_istream}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
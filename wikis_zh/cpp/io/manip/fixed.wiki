{{cpp/title|fixed|scientific|hexfloat|defaultfloat}}
{{cpp/io/manip/navbar}}
{{dcl begin}}
{{dcl header|ios}}
{{dcl|num=1|
std::ios_base&amp; fixed( std::ios_base&amp; str );
}}
{{dcl|num=2|
std::ios_base&amp; scientific( std::ios_base&amp; str );
}}
{{dcl|num=3|since=c++11|
std::ios_base&amp; hexfloat( std::ios_base&amp; str );
}}
{{dcl|num=4|since=c++11|
std::ios_base&amp; defaultfloat( std::ios_base&amp; str );
}}
{{dcl end}}

修改浮点数输出的默认格式化。

@1@ 如同以调用 {{c|str.setf(std::ios_base::fixed, std::ios_base::floatfield)}}，设置流 {{c|str}} 的 {{tt|floatfield}} 为 {{tt|fixed}}。

@2@ 如同以调用 {{c|str.setf(std::ios_base::scientific, std::ios_base::floatfield)}}，设置流 {{c|str}} 的 {{tt|floatfield}} 为 {{tt|scientific}}。

@3@ 如同以调用 {{c|str.setf(std::ios_base::fixed {{!}} std::ios_base::scientific, std::ios_base::floatfield)}}，设置流 {{c|str}} 的 {{tt|floatfield}} 同时为 {{tt|fixed}} 和 {{tt|scientific}}。这启用十六进制浮点数格式化。

@4@ 如同以调用 {{c|str.unsetf(std::ios_base::floatfield)}}，设置流 {{c|str}} 的 {{tt|floatfield}} 为零，这与 fixed 和 scientific 不同。

这是一个 I/O 操纵符，可用如 {{c|out &lt;&lt; std::fixed}} 的表达式对任何 {{lc|std::basic_ostream}} 类型的 {{tt|out}} 或用如 {{c|in &gt;&gt; std::scientific}} 的表达式对任何 {{lc|std::basic_istream}} 类型的 {{tt|in}} 调用。

===参数===
{{par begin}}
{{par|str|到 I/O 流的引用}}
{{par end}}

===返回值===
{{c|str}}（到操纵后的流的引用）。

===注解===
十六进制浮点数格式化忽略流精度规定，此为 {{lc|std::num_put::do_put}} 的规定所要求。

这些操纵符不影响浮点数的分析。

===示例===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;

enum class cap { title, middle, end };

void print(const char* text, double num, cap c)
{
    if (c == cap::title)
        std::cout &lt;&lt;
            "┌──────────┬────────────┬──────────────────────────┐\n"
            "│  number  │   iomanip  │      representation      │\n"
            "├──────────┼────────────┼──────────────────────────┤\n";
    std::cout &lt;&lt; std::left
         &lt;&lt; "│ " &lt;&lt; std::setw(8) &lt;&lt; text &lt;&lt;      " │ fixed      │ "
         &lt;&lt; std::setw(24) &lt;&lt; std::fixed  &lt;&lt; num &lt;&lt;            " │\n"
         &lt;&lt; "│ " &lt;&lt; std::setw(8) &lt;&lt; text &lt;&lt;      " │ scientific │ "
         &lt;&lt; std::setw(24) &lt;&lt; std::scientific &lt;&lt; num &lt;&lt;        " │\n"
         &lt;&lt; "│ " &lt;&lt; std::setw(8) &lt;&lt; text &lt;&lt;      " │ hexfloat   │ "
         &lt;&lt; std::setw(24) &lt;&lt; std::hexfloat &lt;&lt; num &lt;&lt;          " │\n"
         &lt;&lt; "│ " &lt;&lt; std::setw(8) &lt;&lt; text &lt;&lt;      " │ default    │ "
         &lt;&lt; std::setw(24) &lt;&lt; std::defaultfloat &lt;&lt; num &lt;&lt;      " │\n";
    std::cout &lt;&lt; (c != cap::end ?
            "├──────────┼────────────┼──────────────────────────┤\n" :
            "└──────────┴────────────┴──────────────────────────┘\n");
}

int main()
{
    print("0.0", 0.0, cap::title);
    print("0.01", 0.01, cap::middle);
    print("0.00001", 0.00001, cap::end);

    // 注意；选用 clang 以得到正确输出
    double f;
    std::istringstream("0x1.8p+0") &gt;&gt; f;
    std::cout &lt;&lt; "Parsing 0x1.8p+0 gives " &lt;&lt; f &lt;&lt; '\n';

    std::istringstream("0x1P-1022") &gt;&gt; f;
    std::cout &lt;&lt; "Parsing 0x1P-1022 gives " &lt;&lt; f &lt;&lt; '\n';
}
|output=
┌──────────┬────────────┬──────────────────────────┐
│  number  │   iomanip  │      representation      │
├──────────┼────────────┼──────────────────────────┤
│ 0.0      │ fixed      │ 0.000000                 │
│ 0.0      │ scientific │ 0.000000e+00             │
│ 0.0      │ hexfloat   │ 0x0p+0                   │
│ 0.0      │ default    │ 0                        │
├──────────┼────────────┼──────────────────────────┤
│ 0.01     │ fixed      │ 0.010000                 │
│ 0.01     │ scientific │ 1.000000e-02             │
│ 0.01     │ hexfloat   │ 0x1.47ae147ae147bp-7     │
│ 0.01     │ default    │ 0.01                     │
├──────────┼────────────┼──────────────────────────┤
│ 0.00001  │ fixed      │ 0.000010                 │
│ 0.00001  │ scientific │ 1.000000e-05             │
│ 0.00001  │ hexfloat   │ 0x1.4f8b588e368f1p-17    │
│ 0.00001  │ default    │ 1e-05                    │
└──────────┴────────────┴──────────────────────────┘
Parsing 0x1.8p+0 gives 1.5
Parsing 0x1P-1022 gives 2.22507e-308
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/manip/dsc setprecision}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
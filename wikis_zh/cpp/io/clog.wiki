{{cpp/title|clog|wclog}}
{{cpp/io/basic_ostream/navbar}}
{{dcl begin}}
{{dcl header|iostream}}
{{dcl|num=1|
extern std::ostream clog;
}}
{{dcl|num=2|
extern std::wostream wclog;
}}
{{dcl end}}

全局对象 {{tt|std::clog}} 和 {{tt|std::wclog}} 控制实现定义类型（派生于 {{lc|std::streambuf}}）的流缓冲的输出，它与标准 C 输出流 {{lc|stderr}} 关联，但与 {{lc|std::cerr}}/{{lc|std::wcerr}} 不同，不自动冲洗这些流，且 {{tt|cout}} 并不自动与这些流 {{tt|tie()}}。

保证在首次构造 {{lc|std::ios_base::Init}} 前或期间初始化这些对象，且它们可以在拥有[[cpp/language/initialization#非局部变量|有序初始化]]的静态对象的构造及析构函数中使用（只要在定义该对象前包含 {{header|iostream}}）。

除非发出了 {{c|sync_with_stdio(false)}}，从多个线程访问这些对象，进行有格式和无格式输出是安全的。

===注解===
名称中的 “c” 代表“字符”（[http://www.stroustrup.com/bs_faq2.html#cout stroustrup.com FAQ]）；{{tt|clog}} 表示“字符日志”而 {{tt|wclog}} 表示“宽字符日志”。

===示例===
{{example
|code=
#include &lt;iostream&gt;

struct Foo
{
    int n;
    Foo()
    {
        std::clog &lt;&lt; "构造函数\n";
    }
    ~Foo()
    {
        std::clog &lt;&lt; "析构函数\n";
    }
};

Foo f; // 静态对象

int main()
{
    std::clog &lt;&lt; "main 函数\n";
}
|output=
构造函数
main 函数
析构函数
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/ios_base/dsc Init}}
{{dsc inc|cpp/io/dsc cerr}}
{{dsc inc|cpp/io/dsc cout}}
{{dsc inc|cpp/io/c/dsc std streams}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|vprint_nonunicode|vprint_nonunicode_buffered}}
{{cpp/io/print/navbar}}

{{dcl begin}}
{{dcl header|print}}
{{dcl|num=1|since=c++23|
void vprint_nonunicode( std::FILE* stream,
                        std::string_view fmt, std::format_args args );
}}
{{dcl|num=2|since=c++23|
void vprint_nonunicode_buffered
    ( std::FILE* stream, std::string_view fmt, std::format_args args );
}}
{{dcl|num=3|since=c++23|
void vprint_nonunicode_buffered
    ( std::string_view fmt, std::format_args args );
}}
{{dcl end}}

根据格式字符串 {{c|fmt}} 格式化 {{c|args}}，并将结果写入输出流。

@1@ 在持有 {{c|stream}} 的锁的情况下，将由 {{c|args}} 提供的格式化实参在按 {{c|fmt}} 指定的格式说明格式化后的字符表示写入 {{c|stream}}。
@@ 如果 {{c|stream}} 不是指向输出 C 流的有效指针，那么行为未定义。

@2@ 等价于 {{c multi
|1=std::string out = std::vformat(fmt, args);
|2=std::vprint_nonunicode(stream, "{}", std::make_format_args(out));}}。

@3@ 等价于 {{c|std::vprint_nonunicode_buffered(stdout, fmt, args)}}。


{{rrev|since=c++26|
在向输出流写入字符后建立一个[[cpp/language/as if|可观察检查点]]。
}}

===参数===
{{par begin}}
{{par|stream|要写入的输出文件流}}
{{par|fmt|{{include|cpp/utility/format/format string}}}}
{{par|args|要格式化的实参}}
{{par end}}

===异常===
{{std print exceptions}}

===注解===
{{ftm begin|std=1|value=1|comment=1}}
{{ftm|__cpp_lib_print|格式化输出|value=202207L|std=C++23|rowspan=3}}
{{ftm|-|无缓冲的格式化输出|value=202403L|std=C++26|dr=23}}
{{ftm|-|为更多可格式化类型启用无缓冲的格式化输出|value=202406L|std=C++26|dr=23}}
{{ftm|__cpp_lib_format|暴露 {{lc|std::basic_format_string}}|value=202207L|std=C++23}}
{{ftm end}}

===示例===
{{example
|code=
&lt;!--
#include &lt;print&gt;

int main()
{
}
--&gt;
|output=
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P3107R5|std=C++23|before=打印操作始终有缓冲|after=提供无缓冲的打印操作}}
{{dr list item|paper=P3235R3|std=C++23|before={{stddoc|P3107R5}}新增的函数的名字会导致误解|after=更换函数名}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/dsc vprint_unicode}}
{{dsc inc|cpp/io/basic_ostream/dsc vprint_nonunicode}}
{{dsc inc|cpp/io/dsc print}}
{{dsc inc|cpp/utility/format/dsc format}}
{{dsc end}}

{{langlinks|de|en|es|fr|ja|pl|ru}}
{{cpp/title|basic_osyncstream}}
{{cpp/io/basic_osyncstream/navbar}}
{{dcl begin}}
{{dcl header|syncstream}}
{{dcl|since=c++20|1=
template&lt;
    class CharT,
    class Traits = std::char_traits&lt;CharT&gt;,
    class Allocator = std::allocator&lt;CharT&gt;
&gt; class basic_osyncstream : public std::basic_ostream&lt;CharT, Traits&gt;
}}
{{dcl end}}

类模板 {{tt|std::basic_osyncstream}} 是 {{ltt|cpp/io/basic_syncbuf|std::basic_syncbuf}} 的便利包装。它提供机制以对写入同一流的各线程进行同步。

它能用作具名变量：
{{source|1=
{
    std::osyncstream sync_out(std::cout); // std::cout 的同步包装
    sync_out &lt;&lt; "Hello, ";
    sync_out &lt;&lt; "World!";
    sync_out &lt;&lt; std::endl; // 标记冲洗，但仍未进行
    sync_out &lt;&lt; "and more!\n";
} // 传输各字符并冲洗 std::cout
}}

还有临时量：
{{source|1=
std::osyncstream(std::cout) &lt;&lt; "Hello, " &lt;&lt; "World!" &lt;&lt; '\n';
}}

它提供保证：所有对最终目标缓冲区（上例中是 {{lc|std::cout}}）作出的输出将免除数据竞争，而且将不以任何方式穿插或截断，只要每次对该最终目标缓冲区的写入都通过 {{tt|std::basic_osyncstream}}（可以不同的）实例进行。

{{tt|std::basic_osyncstream}} 的典型实现仅保有一个数据成员：被包装的 {{lc|std::basic_syncbuf}}。&lt;!-- 有的实现从 basic_syncbuf 继承 --&gt;

{{inheritance diagram/std-basic_osyncstream}}

{{cpp/basic char typedefs|osyncstream|syncstream}}

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc inc|cpp/io/dsc char_type}}
{{dsc inc|cpp/io/dsc traits_type}}
{{dsc inc|cpp/io/dsc int_type}}
{{dsc inc|cpp/io/dsc pos_type}}
{{dsc inc|cpp/io/dsc off_type}}
{{dsc|{{tt|allocator_type}}|{{tt|Allocator}}}}
{{dsc|{{tt|streambuf_type }}|{{c/core|std::basic_streambuf&lt;CharT, Traits&gt;}}}}
{{dsc|{{tt|syncbuf_type }}|{{c/core|std::basic_syncbuf&lt;CharT, Traits, Allocator&gt;}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/io/basic_osyncstream/dsc constructor}}
{{dsc inc|1=cpp/io/basic_osyncstream/dsc operator=}}
{{dsc inc|cpp/io/basic_osyncstream/dsc destructor}}
{{dsc inc|cpp/io/basic_osyncstream/dsc rdbuf}}
{{dsc inc|cpp/io/basic_osyncstream/dsc get_wrapped}}
{{dsc inc|cpp/io/basic_osyncstream/dsc emit}}
{{dsc end}}

{{cpp/io/basic_ostream/inherit}}
{{cpp/io/basic_ios/inherit}}
{{cpp/io/ios_base/inherit}}

===注解===
{{feature test macro|__cpp_lib_syncbuf|std=C++20|value=201803L|带同步的缓冲 ostream（[[#Top|{{tt|std::osyncstream}}]]，{{lc|std::syncbuf}}）和操纵符}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
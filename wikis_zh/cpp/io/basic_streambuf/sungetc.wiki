{{cpp/io/basic_streambuf/title | sungetc}}
{{cpp/io/basic_streambuf/navbar}}
{{ddcl | 1=
int_type sungetc();
}}

若回放位置在获取区中可用（{{c|gptr() &gt; eback()}}），则减少下一位置指针（{{lc|gptr()}}）并返回它现在指向的字符。

若回放位置不可用，则调用 {{lc|pbackfail()}} 以在可能的情况下后备输入序列。

I/O 流函数 {{l2tt|cpp/io/basic_istream/unget}} 以此函数实现。

===参数===
（无）

===返回值===
若回放位置可用，则返回下一位置指针现在指向的字符，以 {{c|Traits::to_int_type(*gptr())}} 转换为 {{tt|int_type}}。来自此 streambuf 的下个单字符输入将返回此字符。

若回放位置不可用，则返回 {{lc|pbackfail()}} 所返回者，在失败时为 {{c|Traits::eof()}}。

===示例===
{{example|
 | code=
#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
{
    std::stringstream s("abcdef"); // gptr() 指向 'a'
    char c1 = s.get(); // c = 'a', gptr() 现在指向 'b' 
    char c2 = s.rdbuf()-&gt;sungetc(); // 同 s.unget() ： gptr() 又指向 'a'
    char c3 = s.get(); // c3 = 'a' ， gptr() 现在指向 'b'
    char c4 = s.get(); // c4 = 'b' ， gptr() 现在指向 'c'
    std::cout &lt;&lt; c1 &lt;&lt; c2 &lt;&lt; c3 &lt;&lt; c4 &lt;&lt; '\n';

    s.rdbuf()-&gt;sungetc();  // 回到 'b'
    s.rdbuf()-&gt;sungetc();  // 回到 'a'
    int eof = s.rdbuf()-&gt;sungetc();  // 无内容可反获取： pbackfail() 失败
    if (eof == EOF)
            std::cout &lt;&lt; "Nothing to unget after 'a'\n";
}
 | output=
aaab
Nothing to unget after 'a'
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/io/basic_streambuf/dsc sputbackc}}
{{dsc inc | cpp/io/basic_istream/dsc unget}}
{{dsc end}}

{{langlinks|en|ja}}
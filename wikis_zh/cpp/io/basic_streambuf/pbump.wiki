{{cpp/io/basic_streambuf/title|pbump}}
{{cpp/io/basic_streambuf/navbar}}
{{ddcl|1=
protected:
void pbump( int count );
}}

重寻位''放置指针''（{{lc|pptr()}}）{{c|count}} 个字符，其中 {{c|count}} 可为正或负。不对将指针移出放置区 {{range|pbase()|epptr()}} 做检查。

若指针前进，然后调用 {{lc|overflow()}} 冲入放置区到关联字符序列，则效果是输出拥有未定义值的额外 {{c|count}} 个字符。

===参数===
{{par begin}}
{{par | count |加到放置指针的数}}
{{par end}}

===返回值===
（无）

===注解===
因为此函数接收 {{c|int}}，故它无法操纵大于 {{tt|std::numeric_limits&lt;int&gt;::max()}} 个字符的缓冲区（[http://wg21.link/lwg255 LWG 255]）。

===示例===
{{example
|code=
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

struct showput_streambuf : std::filebuf
{
    using std::filebuf::pbump; // 暴露受保护函数
    std::string showput() const
    {
        return std::string(pbase(), pptr());
    }
};

int main()
{
    showput_streambuf mybuf;
    mybuf.open("test.txt", std::ios_base::out);
    std::ostream str(&amp;mybuf);
    str &lt;&lt; "This is a test" &lt;&lt; std::flush &lt;&lt; "1234";
    std::cout &lt;&lt; "The put area contains: " &lt;&lt; mybuf.showput() &lt;&lt; '\n';
    mybuf.pbump(10);
    std::cout &lt;&lt; "after pbump(10), it contains " &lt;&lt; mybuf.showput() &lt;&lt; '\n';
}
|output=
The put area contains: 1234
after pbump(10), it contains 1234 is a test
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/basic_streambuf/dsc gbump}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
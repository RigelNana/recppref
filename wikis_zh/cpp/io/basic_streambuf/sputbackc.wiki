{{cpp/io/basic_streambuf/title | sputbackc}}
{{cpp/io/basic_streambuf/navbar}}
{{ddcl | 1=
int_type sputbackc( char_type c );
}}

放回字符到获取区。

若回放位置在获取区中可用（{{c|gptr() &gt; eback()}}），而字符 {{tt|c}} 等于 {{lc|gptr()}} 左一位置的字符（以 {{c|Traits::eq(c, gptr()[-1])}} 确定），则简单地减少下一位置指针（{{lc|gptr()}}）。

否则，调用 {{c|pbackfail(Traits::to_int_type(c))}} 放回到获取区，或一同修改获取区和可能的关联字符序列。

I/O 流函数 {{l2tt|cpp/io/basic_istream/putback}} 以此函数实现。

===参数===
{{par begin}}
{{par | c |要回放的字符}}
{{par end}}

===返回值===
若回放位置可用，则返回下一位置指针现在指向的字符，以 {{c|Traits::to_int_type(*gptr())}} 转换为 {{tt|int_type}}。来自此 streambuf 的下个单字符输入将返回此字符。

若回放位置不可用，则返回 {{lc|pbackfail()}} 所返回者，在失败时为 {{c|Traits::eof()}}。

===示例===
{{example|
 | code=
#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
{
    std::stringstream s("abcdef"); // gptr() 指向 "abcdef" 中的 'a'
    std::cout &lt;&lt; "Before putback, string holds " &lt;&lt; s.str() &lt;&lt; '\n';
    char c1 = s.get(); // c1 = 'a'，gptr() 现在指向 "abcdef" 中的 'b'
    char c2 = s.rdbuf()-&gt;sputbackc('z'); // 同 s.putback('z')
                                         // gptr() 现在指向 "zbcdef" 中的 'z'
    std::cout &lt;&lt; "After putback, string holds " &lt;&lt; s.str() &lt;&lt; '\n';
    char c3 = s.get(); // c3 = 'z'，gptr() 现在指向 "zbcdef" 中的 'b'
    char c4 = s.get(); // c4 = 'b'，gptr() 现在指向 "zbcdef" 中的 'c'
    std::cout &lt;&lt; c1 &lt;&lt; c2 &lt;&lt; c3 &lt;&lt; c4 &lt;&lt; '\n';

    s.rdbuf()-&gt;sputbackc('b');  // gptr() 现在指向 "zbcdef" 中的 'b'
    s.rdbuf()-&gt;sputbackc('z');  // gptr() 现在指向 "zbcdef" 中的 'z'
    int eof = s.rdbuf()-&gt;sputbackc('x');  // 无内容能反获取：pbackfail() 失败
    if (eof == EOF)
        std::cout &lt;&lt; "No room to putback after 'z'\n";
}
 | output=
Before putback, string holds abcdef
After putback, string holds zbcdef
azzb
No room to putback after 'z'
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/io/basic_streambuf/dsc sungetc}}
{{dsc inc | cpp/io/basic_istream/dsc putback}}
{{dsc end}}

{{langlinks|en|ja}}
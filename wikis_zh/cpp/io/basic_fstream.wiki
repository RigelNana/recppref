{{cpp/title|basic_fstream}}
{{cpp/io/basic_fstream/navbar}}
{{ddcl|header=fstream|1=
template&lt; 
    class CharT, 
    class Traits = std::char_traits&lt;CharT&gt;
&gt; class basic_fstream : public std::basic_iostream&lt;CharT, Traits&gt;
}}

类模板 {{tt|basic_fstream}} 实现基于文件的流上的高层输入/输出。它将 {{lc|std::basic_iostream}} 的高层接口赋予基于文件的缓冲（{{lc|std::basic_filebuf}}）。

{{tt|std::basic_fstream}} 的典型实现只保有一个非派生数据成员：{{c/core|std::basic_filebuf&lt;CharT, Traits&gt;}} 的一个实例。

{{inheritance diagram/std-basic_fstream}}

{{cpp/basic char typedefs|fstream}}

{{cpp/io/member types}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/io/basic_fstream/dsc constructor|basic_fstream}}
{{dsc inc|cpp/io/basic_fstream/dsc destructor|basic_fstream}}
{{dsc inc|cpp/io/basic_fstream/dsc operator{{=}}|basic_fstream}}
{{dsc inc|cpp/io/basic_fstream/dsc swap|basic_fstream}}
{{dsc inc|cpp/io/basic_fstream/dsc rdbuf|basic_fstream}}
{{dsc inc|cpp/io/basic_fstream/dsc native_handle}}

{{dsc h2|文件操作}}
{{dsc inc|cpp/io/basic_fstream/dsc is_open|basic_fstream}}
{{dsc inc|cpp/io/basic_fstream/dsc open|basic_fstream}}
{{dsc inc|cpp/io/basic_fstream/dsc close|basic_fstream}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/io/basic_fstream/dsc swap2|basic_fstream}}
{{dsc end}}

{{cpp/io/basic_istream/inherit}}
{{cpp/io/basic_ostream/inherit}}
{{cpp/io/basic_ios/inherit}}
{{cpp/io/ios_base/inherit}}

===注解===
{{feature test macro|__cpp_lib_fstream_native_handle|std=C++26|value=202306L|原生句柄支持}}

===示例===
{{example
|code=
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::string filename{"test.bin"};
    std::fstream s{filename, s.binary {{!}} s.trunc {{!}} s.in {{!}} s.out};

    if (!s.is_open())
        std::cout &lt;&lt; "打开 " &lt;&lt; filename &lt;&lt; " 失败\n";
    else
    {
        // 写入
        double d = 3.14;
        s.write(reinterpret_cast&lt;char*&gt;(&amp;d), sizeof d); // 二进制输出
        s &lt;&lt; 123 &lt;&lt; "abc";                              // 文本输出
        
        // 对于 fstream，这会移动文件位置指针（放置与获取）
        s.seekp(0);
        
        // 读取
        d = 2.71828;
        s.read(reinterpret_cast&lt;char*&gt;(&amp;d), sizeof d); // 二进制输入
        int n;
        std::string str;
        if (s &gt;&gt; n &gt;&gt; str)                             // 文本输入
            std::cout &lt;&lt; "从文件读回：" &lt;&lt; d &lt;&lt; ' ' &lt;&lt; n &lt;&lt; ' ' &lt;&lt; str &lt;&lt; '\n';
    }
}
|output=
从文件读回：3.14 123 abc
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/string/basic_string/dsc getline}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
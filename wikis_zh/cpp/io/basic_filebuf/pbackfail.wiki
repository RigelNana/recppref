{{cpp/io/basic_filebuf/title | pbackfail }}
{{cpp/io/basic_filebuf/navbar}}
{{ddcl |1=
protected:
virtual int_type pbackfail( int_type c = Traits::eof() )
}}

此受保护虚函数为公开函数 {{l2tt|cpp/io/basic_streambuf/sungetc}} 和 {{l2tt|cpp/io/basic_streambuf/sputbackc}} 所调用（继而为 {{l2tt|cpp/io/basic_istream/unget}} 和 {{l2tt|cpp/io/basic_istream/putback}} 所调用）。 

@1@ 调用方请求将获取区后备一个字符（以无参数调用 {{tt|pbackfail()}}），该情况下，此函数于前一字节位置开始重读文件，并自减 {{l2tt|cpp/io/basic_streambuf/gptr|gptr()}}，例如通过调用 {{c|gbump(-1)}}。
@2@ 调用方试图回放异于之前取得的字符（以需要放回的字符调用 {{tt|pbackfail()}}），该情况下
:@a@ 首先检查是否有回放位置，若无则通过于前一字节位置开始重读文件，后备获取区。
:@a@ 然后检查什么字符在回放位置。若其处保有的字符已等于 {{tt|c}}，以 {{c|Traits::eq(to_char_type(c), gptr()[-1])}} 确定，则简单地自减 {{l2tt|cpp/io/basic_streambuf/gptr|gptr()}}。
:@b@ 否则，若允许缓冲修改其自身的获取区，则自减 {{l2tt|cpp/io/basic_streambuf/gptr|gptr()}} 并写入 {{tt|c}} 到调整后的 gptr() 所指向的位置。

此函数决不修改文件，仅修改内存中缓冲区的获取区。

若文件未打开（{{c|1=is_open()==false}}），则此函数立即返回 {{c|Traits::eof()}}。

===参数===
{{par begin}}
{{par | c |要放回的字符，或为指示请求后备缓冲区的 Traits::eof()}}
{{par end}}

===返回值===
成功时为 {{c|c}}，除非 {{tt|c}} 为 {{c|Traits::eof()}}，该情况下返回 {{c|Traits::not_eof(c)}}。

失败时为 {{c|Traits::eof()}}。

===示例===
{{example
 |
 | code=
 | output=
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/io/basic_streambuf/dsc pbackfail}}
{{dsc inc | cpp/io/basic_streambuf/dsc sungetc}}
{{dsc inc | cpp/io/basic_streambuf/dsc sputbackc}}
{{dsc inc | cpp/io/basic_istream/dsc unget}}
{{dsc inc | cpp/io/basic_istream/dsc putback}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
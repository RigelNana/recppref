{{cpp/io/basic_filebuf/title|operator{{=}}}}
{{cpp/io/basic_filebuf/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1=
std::basic_filebuf&amp; operator=( std::basic_filebuf&amp;&amp; rhs );
}}
{{dcl|num=2|1=
std::basic_filebuf&amp; operator=( const std::basic_filebuf&amp; rhs ) = delete;
}}
{{dcl end}}

赋值另一 {{tt|basic_filebuf}} 对象。

@1@ 首先调用 {{lc|close()}} 关闭关联文件，然后移动 {{c|rhs}} 的内容到 {{c|*this}} 中：获取与放置缓冲区、本地环境、打开模式、打开标志及任何其他状态。移动后，{{c|rhs}} 不与文件关联且 {{c|1=rhs.is_open() == false}}。

@2@ 复制赋值运算符被弃置；{{tt|basic_filebuf}} 不{{named req|CopyAssignable}}。

===参数===
{{par begin}}
{{par | rhs |将被移动的另一 {{tt|basic_filebuf}}}}
{{par end}}

===返回值===
{{tt|*this}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::ofstream{"test.in"} &lt;&lt; "test\n"; // 通过临时对象进行写入
    std::ifstream fin("test.in"); // 只读流
    std::ofstream fout("test.out"); // 只写流

    std::string s;
    std::getline(fin, s);
    std::cout &lt;&lt; "s = [" &lt;&lt; s &lt;&lt; "]\n"; // s 包含 "test"

    assert(fout.is_open());
    *fin.rdbuf() = std::move(*fout.rdbuf());
    assert(!fout.is_open());

    std::getline(fin, s);
    std::cout &lt;&lt; "s = [" &lt;&lt; s &lt;&lt; "]\n"; // s 为空输入
}
|output=
s = [test]
s = []
}}


===参阅===
{{dsc begin}}
{{dsc inc | cpp/io/basic_filebuf/dsc basic_filebuf}}
{{dsc inc | cpp/io/basic_filebuf/dsc swap}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
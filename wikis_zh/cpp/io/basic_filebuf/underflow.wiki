{{cpp/io/basic_filebuf/title|underflow}}
{{cpp/io/basic_filebuf/navbar}}
{{ddcl|
protected:
virtual int_type underflow()
}}

读取更多数据到输入区中。

表现类似基类 {{c|std::basic_streambuf::underflow}}，但要从关联字符序列（文件）读取数据到获取区中。首先从文件读取字符到临时缓冲区（分配所需大小），然后用浸染的本地环境的 {{c|std::codecvt::in}} 转换外部（典型为多字节）表示为之后用于填充获取区的内部形式。若该本地环境的 {{c|std::codecvt::always_noconv}} 返回 {{c|true}} 则可以跳过转换。

===参数===
（无）

===返回值===
成功情况下为 {{c|Traits::to_int_type(*gptr())}}（待处理序列的首字符），失败情况下为 {{c|Traits::eof()}}。

===示例===
{{example
|code=
#include &lt;fstream&gt;
#include &lt;iostream&gt;

struct mybuf : std::filebuf
{
    int underflow()
    {
         std::cout &lt;&lt; "underflow() 前：获取区大小为 "
                   &lt;&lt; egptr()-eback() &lt;&lt; " 并有 "
                   &lt;&lt; egptr()-gptr() &lt;&lt; " 个可用读取位置\n";
         int rc = std::filebuf::underflow();
         std::cout &lt;&lt; "underflow() 返回 " &lt;&lt; rc &lt;&lt; ".\n调用后，"
                   &lt;&lt; "获取区大小为 "
                   &lt;&lt; egptr()-eback() &lt;&lt; " 并有 "
                   &lt;&lt; egptr()-gptr() &lt;&lt; " 个可用读取位置\n";
        return rc;
    }
};

int main()
{
    mybuf buf;
    buf.open("test.txt", std::ios_base::in);
    std::istream stream(&amp;buf);
    while(stream.get()) ;
}
 | p=true
 | output=
underflow() 前：获取区大小为 0 并有 0 个可用读取位置
underflow() 返回 73.
调用后，获取区大小为 110 并有 110 个可用读取位置
underflow() 前：获取区大小为 110 并有 0 个可用读取位置
underflow() 返回 -1.
调用后，获取区大小为 0 并有 0 个可用读取位置
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/basic_streambuf/dsc underflow}}
{{dsc inc|cpp/io/basic_stringbuf/dsc underflow}}
{{dsc inc|cpp/io/strstreambuf/dsc underflow}}
{{dsc inc|cpp/io/basic_filebuf/dsc uflow}}
{{dsc inc|cpp/io/basic_filebuf/dsc overflow}}
{{dsc inc|cpp/io/basic_streambuf/dsc sgetc}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/io/basic_filebuf/title |seekpos}}
{{cpp/io/basic_filebuf/navbar}}
{{ddcl |1=
protected:
virtual pos_type seekpos( pos_type sp,
                          std::ios_base::openmode which = std::ios_base::in {{!}} std::ios_base::out );
}}

在可能时重寻位文件指针到 {{c|sp}} 指示的位置。关联文件未打开（{{c|1=is_open() == false}}）时立即失败。

重寻位按以下流程进行：
@1@ 如果文件因写入打开，那么用 {{lc|overflow()}} 写入放置区和任何当前浸染的本地环境要求的反迁移序列。

@2@ 如同通过调用 {{lc|std::fsetpos()}} 重寻位指针。

@3@ 如果文件因读取打开，那么在需要时更新获取区。

如果 {{c|sp}} 不是通过在同一文件上调用 {{lc|seekoff()}} 或 {{tt|seekpos()}} 获得的，那么行为未定义。

===参数===
{{par begin}}
{{par|sp|之前在同一文件上调用 {{lc|seekoff()}} 或 {{tt|seekpos()}} 获得的文件位置}}
{{par|which|定义会影响到的输入和/或输出序列。它可以是下列常量之一或它们的组合：
{{cpp/io/ios_base/openmode streambuf consts}}}}
{{par end}}

===返回值===
成功时返回 {{c|sp}}，失败时返回 {{c|pos_type(off_type(-1))}}。

===注解===
{{tt|seekpos()}} 会被 {{lc|std::basic_streambuf::pubseekpos()}} 调用，后者会被 {{lc|std::basic_istream::seekg()}} 和 {{lc|std::basic_ostream::seekp()}} 的单实参版本调用。

许多实现不在 {{tt|seekpos()}} 中更新读取区域，而是委托给下次 {{lc|sgetc()}} 所调用的 {{lc|underflow()}}。

===示例===
{{example
|在一些实现中，{{tt|seekpos()}} 清空读取区域并需要第二个 {{tt|underflow()}} 以观测效果。
|code=
#include &lt;fstream&gt;
#include &lt;iostream&gt;

struct mybuf : std::filebuf
{
    pos_type seekpos(pos_type sp, std::ios_base::openmode which)
    {
        std::cout &lt;&lt; "在 seekpos(" &lt;&lt; sp &lt;&lt; ") 前，读取区域的大小是 "
                  &lt;&lt; egptr() - eback() &lt;&lt; "，其中有 "
                  &lt;&lt; egptr() - gptr() &lt;&lt; " 个可用读取位置。\n";
        
        pos_type rc = std::filebuf::seekpos(sp, which);
        
        std::cout &lt;&lt; "seekpos() 返回 " &lt;&lt; rc &lt;&lt; "。\n在调用后，"
                  &lt;&lt; "读取区域的大小是 "
                  &lt;&lt; egptr() - eback() &lt;&lt; "，其中有 "
                  &lt;&lt; egptr() - gptr() &lt;&lt; " 个可用读取位置。\n";
// 如果 seekpos() 清空获取区就取消注释
//        std::filebuf::underflow();
//        std::cout &lt;&lt; "在强制 underflow() 后，读取区域的大小是 "
//                  &lt;&lt; egptr() - eback() &lt;&lt; "，其中有 "
//                  &lt;&lt; egptr() - gptr() &lt;&lt; " 个可用读取位置。\n";
        
        return rc;
    }
};

int main()
{
    mybuf buf;
    buf.open("test.txt", std::ios_base::in);
    std::istream stream(&amp;buf);
    stream.get(); // 读一个字符以强制 underflow()
    stream.seekg(2);
}
|p=true
|output=
在 seekpos(2) 前，读取区域的大小是 110，其中有 109 个可用读取位置。
seekpos() 返回 2。
在调用后，读取区域的大小是 110，其中有 108 个可用读取位置。
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=55|std=C++98|before={{tt|seekpos}} 在失败时返回了未定义的无效流位置|after=失败时返回 {{c|pos_type(off_type(-1))}}}}
{{dr list item|wg=lwg|dr=171|std=C++98|before=重寻位的流程不明确|after=使之明确}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/basic_streambuf/dsc pubseekpos}}
{{dsc inc|cpp/io/basic_filebuf/dsc seekoff}}
{{dsc inc|cpp/io/c/dsc fseek}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
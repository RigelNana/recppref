{{cpp/io/basic_syncbuf/title | emit}}
{{cpp/io/basic_syncbuf/navbar}}
{{dcl begin}}
{{dcl |1=
bool emit();
}}
{{dcl end}}

原子地传输所有待决输出到被包装流。

所有传输字符到同一被包装流缓冲对象的 {{c|emit()}} 调用以单独全序出现，在该全序中，每个 {{c|emit()}} 调用[[cpp/atomic/memory_order|同步于]]后继的 {{c|emit()}} 调用，即使这些调用通过不同的 {{lc|std::basic_syncbuf}}/{{lc|std::basic_osyncstream}} 实例进行。实践中，这表示 emit() 采用与被包装流对象唯一关联的锁：例如，能在一个静态散列映射中保有锁，其中将被包装流的地址用作键。

若最近对 {{c|emit()}} 的调用导致调用了 {{ltt|cpp/io/basic_syncbuf/sync|sync}}，则它会调用其上的 {{ltt|cpp/io/basic_streambuf/pubsync|pubsync()}} 冲洗被包装流。

===参数===
（无）

===返回值===
若以下均为真则返回 {{c|true}}：
* 有被包装流（被包装的流缓冲指针非空）
* 已成功将所有字符从临时存储发送到被包装流
* 若请求调用 {{ltt|cpp/io/basic_streambuf/pubsync|pubsync()}}，则它亦成功完成。

否则返回 {{c|false}}。

===注解===
通常为占有流缓冲的 {{lc|std::basic_osyncstream}} 或 {{ltt|cpp/io/basic_osyncstream/emit|std::basic_osyncstream::emit}} 所调用。

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/io/basic_osyncstream/dsc destructor}}
{{dsc inc | cpp/io/basic_osyncstream/dsc emit}}
{{dsc inc | cpp/io/basic_syncbuf/dsc constructor}}
{{dsc end}}

{{langlinks|en|es|ja}}
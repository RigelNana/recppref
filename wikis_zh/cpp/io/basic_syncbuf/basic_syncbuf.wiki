{{cpp/io/basic_syncbuf/title|basic_syncbuf}}
{{cpp/io/basic_syncbuf/navbar}}
{{dcl begin}}
{{dcl|num=1|1=
basic_syncbuf()
    : basic_syncbuf( nullptr )
}}
{{dcl|num=2|1=
explicit basic_syncbuf( streambuf_type* obuf )
    : basic_syncbuf( obuf, Allocator() ) {}
}}
{{dcl|num=3|1=
basic_syncbuf( streambuf_type* obuf, const Allocator&amp; a );
}}
{{dcl|num=4|1=
basic_syncbuf( basic_syncbuf&amp;&amp; rhs );
}}
{{dcl end}}

@1@ 默认构造函数：创建 {{tt|std::basic_syncbuf}} 的实例，将其同步时发生（emit-on-sync ）策略设为 {{c|false}}，被包装流缓冲设为 {{c|nullptr}}，并以默认构造的 {{tt|Allocator}} 为临时存储的分配器。
@2,3@ 创建 {{tt|std::basic_syncbuf}} 的实例，将其同步时发生（emit-on-sync ）策略设为 {{c|false}}，被包装流缓冲设为 {{c|obuf}}，并以 {{c|a}} 为临时存储的分配器。
@4@ 移动构造函数：通过从另一 {{tt|std::basic_syncbuf}} 对象 {{c|rhs}} 移动所有内容，包括临时存储、被包装流指针、策略及所有其他状态（例如互斥体指针），移动构造 {{tt|std::basic_syncbuf}} 对象。移动后，{{c|rhs}} 不与流关联，而 {{c|1=rhs.get_wrapped()==nullptr}}。{{c|rhs}} 的基类 {{lc|std::basic_streambuf}} 的放置区指针保证为空。销毁被移动的 {{c|rhs}} 将不产生任何输出。

===参数===
{{par begin}}
{{par| obuf |指向要包装的 {{lc|std::basic_streambuf}} 的指针}}
{{par| a |用于临时存储的分配器}}
{{par| rhs |作为移动来源的另一 {{tt|std::basic_syncbuf}}}}
{{par end}}

===异常===
@2,3@ 可能从内部临时存储的构造函数抛出 {{lc|std::bad_alloc}}，或从互斥体的构造抛出 {{lc|std::system_error}}。

===注解===
通常由 {{lc|std::basic_osyncstream}} 的适当构造函数所调用。

===示例===
{{example}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/basic_streambuf/dsc sync}}
{{dsc inc|cpp/io/basic_syncbuf/dsc emit}}
{{dsc end}}

{{langlinks|en|es|ja}}
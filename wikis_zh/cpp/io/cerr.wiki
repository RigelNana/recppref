{{cpp/title|cerr|wcerr}}
{{cpp/io/basic_ostream/navbar}}
{{dcl begin}}
{{dcl header|iostream}}
{{dcl|num=1|1=
extern std::ostream cerr;
}}
{{dcl|num=2|1=
extern std::wostream wcerr;
}}
{{dcl end}}

全局对象 {{tt|std::cerr}} 和 {{tt|std::wcerr}} 控制到实现定义类型（分别从 {{lc|std::streambuf}} 和 {{lc|std::wstreambuf}} 派生）的流缓冲区的输出，它与标准 C 错误输出流 {{lc|stderr}} 关联。

保证这些对象在构造首个 {{lc|std::ios_base::Init}} 类型对象之前或期间得到初始化，而且可以在带[[cpp/language/initialization#非局部变量|有序初始化]]的静态对象的构造函数和析构函数中使用（只要在定义对象前包含 {{header|iostream}}）。

除非发出了 {{c|std::ios_base::sync_with_stdio(false)}}，从多个线程为进行有格式和无格式输出而访问这些对象是安全的。

一旦初始化，那么 {{c|1=(std::cerr.flags() &amp; unitbuf) != 0}}（{{tt|std::wcerr}} 也一样），这表示任何发送给这些流对象的输出都被立即冲洗到 OS（通过 {{lc|std::basic_ostream::sentry}} 的析构函数）。

另外，{{c|std::cerr.tie()}} 返回 {{c|&amp;std::cout}}（对 {{tt|std::wcerr}} 和 {{lc|std::wcout}} 相同），这表示 {{tt|std::cerr}} 上的任何输出都会（通过 {{lc|std::basic_ostream::sentry}} 的构造函数）首先执行 {{c|std::cout.flush()}}。

===注解===
名称中的 'c' 指代“字符”（[http://www.stroustrup.com/bs_faq2.html#cout stroustrup.com FAQ]）；{{tt|cerr}} 表示“字符错误（流）”而 {{tt|wcerr}} 表示“宽字符错误（流）”。

===示例===
{{example
|通过 {{tt|std::cerr}} 输出到 {{lc|stderr}}，冲洗 {{lc|std::cout}} 上的待处理输出，而通过 {{lc|std::clog}} 输出到 {{lc|stderr}} 则不会。
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;thread&gt;
using namespace std::chrono_literals;

void f()
{
    std::cout &lt;&lt; "从线程输出...";
    std::this_thread::sleep_for(2s);
    std::cout &lt;&lt; "...线程调用 flush()" &lt;&lt; std::endl;
}

int main()
{
    std::jthread t1{f};
    std::this_thread::sleep_for(1000ms);
    std::clog &lt;&lt; "从 main 的这个输出没有绑定到 cout\n";
    std::cerr &lt;&lt; "这个输出绑定到了 cout\n";
}
|p=true
|output=
从 main 的这个输出没有绑定到 cout
从线程输出...这个输出绑定到了 cout
...线程调用 flush()
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=455|std=C++98|before={{c|std::cerr.tie()}} 和 {{c|std::wcerr.tie()}} 都会返回空指针|after=它们分别会返回 {{c|&amp;std::cout}} 和 {{c|&amp;std::wcout}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/ios_base/dsc Init}}
{{dsc inc|cpp/io/dsc clog}}
{{dsc inc|cpp/io/dsc cout}}
{{dsc inc|cpp/io/c/dsc std streams}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/io/basic_stringbuf/title|''init_buf_ptrs''}}
{{cpp/io/basic_stringbuf/navbar}}
{{ddcl|notes={{mark expos}}|1=
void init_buf_ptrs();
}}

根据 {{c|mode}}，以 {{c|buf}} 初始化输入和输出序列。{{c|buf}} 和 {{c|mode}} 是 {{c|*this}} 的 {{rlp|/#仅用于阐述的成员|仅用于阐述的数据成员}}。

在此函数返回后立即满足以下条件：
* 如果 {{c|mode}} 中设置了 {{lc|std::ios_base::out}}，那么 {{ltf|cpp/io/basic_streambuf/pptr|pbase}} 指向 {{c|buf.front()}} 且 {{c|1=epptr() &gt;= pbase() + buf.size()}} 是 {{c|true}}；
** 另外，如果 {{c|mode}} 中设置了 {{lc|std::ios_base::ate}}，那么 {{c|1=pptr() == pbase() + buf.size()}} 是 {{c|true}}，
** 否则 {{c|1=pptr() == pbase()}} 是 {{c|true}}。
* 如果 {{c|mode}} 中设置了 {{lc|std::ios_base::in}}，那么 {{ltf|cpp/io/basic_streambuf/gptr|eback}} 指向 {{c|buf.front()}} 且 {{c|1=gptr() == eback() &amp;&amp; egptr() == eback() + buf.size()}} 是 {{c|true}}。

===注解===
考虑到效率原因，流缓冲区操作可能会违背封装在 {{tt|std::basic_stringbuf}} 中的 {{c|buf}} 的不变式，例如写入范围 {{range|buf.data() + buf.size()|buf.data() + buf.capacity()}} 中的字符。

所有从 {{c|buf}} 中获取 {{lc|std::basic_string}} 的操作都会确保返回值中持有的 {{lc|std::basic_string}} 的不变式不会被违背。

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=1448|std=C++98|before={{tt|''init_buf_ptrs''()}} 对于同时是输入流和输出流的流&lt;br&gt;会使 {{c|1=pptr() == pbase() + buf.data()}}|after=对于后附流会使&lt;br&gt;{{c|1=pptr() == pbase() + buf.size()}}}}
{{dr list end}}

{{langlinks|en|ru}}
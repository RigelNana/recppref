{{cpp/io/basic_stringbuf/title | pbackfail }}
{{cpp/io/basic_stringbuf/navbar}}
{{ddcl |1=
protected:
virtual int_type pbackfail( int_type c = Traits::eof() )
}}

此受保护虚函数为公开函数 {{l2tt|cpp/io/basic_streambuf/sungetc}} 和 {{l2tt|cpp/io/basic_streambuf/sputbackc}} 所调用（转而为 {{l2tt|cpp/io/basic_istream/unget}} 和 {{l2tt|cpp/io/basic_istream/putback}} 所调用）。

@1@ 调用方要求获取区后备一个字符（以无实参或以 {{c|Traits::eof()}} 为实参调用 {{tt|pbackfail()}}）
:@a@ 首先，检查是否有回放位置，而若确实无回放位置则失败（ stringbuf 无重读用的外部字符序列）
:@b@ 若调用方错误而回放位置实际上可用，则简单地自减 {{l2tt|cpp/io/basic_streambuf/gptr|gptr()}}，例如以调用 {{c|gbump(-1)}}。
@2@ 调用方试图回放的字符异于之前取得者（以要需要放回的字符调用 {{tt|pbackfail()}}），该情况下
:@a@ 首先，检查是否有回放位置，若无则失败。
:@b@ 然后检查会放位置中有什么字符。若其处保有的字符已等于 {{tt|c}}，以 {{c|Traits::eq(to_char_type(c), gptr()[-1])}} 确定，则简单地自减 {{l2tt|cpp/io/basic_streambuf/gptr|gptr()}}。
:@c@ 否则，若缓冲区仅为读取打开，则失败。
:@d@ 否则，若缓冲区为写入打开（ {{c|mode &amp;&amp; std::ios_base::out}} 非零），则自减 {{l2tt|cpp/io/basic_streambuf/gptr|gptr()}} 并写入 {{tt|c}} 到调整后的 gptr() 所指向的位置。

===参数===
{{par begin}}
{{par | c |要返回的字符，或若要求指示获取区的后备则为 Traits::eof()}}
{{par end}}

===返回值===
成功时为 {{c|c}}，除非 {{tt|c}} 为 {{c|Traits::eof()}}，该情况下返回 {{c|Traits::not_eof(c)}}。

失败时为 {{c|Traits::eof()}}。

===示例===
{{example
 |
 | code=
 | output=
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/io/basic_streambuf/dsc pbackfail}}
{{dsc inc | cpp/io/basic_streambuf/dsc sungetc}}
{{dsc inc | cpp/io/basic_streambuf/dsc sputbackc}}
{{dsc inc | cpp/io/basic_istream/dsc unget}}
{{dsc inc | cpp/io/basic_istream/dsc putback}}
{{dsc end}}

{{langlinks|en|ja}}
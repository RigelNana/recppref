{{cpp/io/basic_stringbuf/title|operator{{=}}}}
{{cpp/io/basic_stringbuf/navbar}}
{{dcl begin}}
{{dcl|since=c++11|num=1|1=
std::basic_stringbuf&amp; operator=( std::basic_stringbuf&amp;&amp; rhs );
}}
{{dcl|num=2|1=
std::basic_stringbuf&amp; operator=( const std::basic_stringbuf&amp; rhs ) = delete;
}}
{{dcl end}}

@1@ 移动赋值运算符：移动 {{c|rhs}} 的内容到 {{c|*this}} 中。移动后 {{c|*this}} 拥有 {{c|rhs}} 之前保有的关联字符串、打开模式、本地环境和所有其他状态。保证 {{c|*this}} 中 {{lc|std::basic_streambuf}} 的六个指针有别于被移动的 {{c|rhs}} 的对应指针，除非它们为空。
@2@ 复制赋值运算符被弃置；{{tt|basic_stringbuf}} 不{{named req|CopyAssignable}}。

===参数===
{{par begin}}
{{par | rhs |将被移动的另一 {{tt|basic_stringbuf}}}}
{{par end}}

===返回值===
{{c|*this}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;

int main()
{
    std::istringstream one("one");
    std::ostringstream two("two");

    std::cout &lt;&lt; "Before move, one = \"" &lt;&lt; one.str() &lt;&lt; '"'
              &lt;&lt; " two = \"" &lt;&lt; two.str() &lt;&lt; "\"\n";

    *one.rdbuf() = std::move(*two.rdbuf());

    std::cout &lt;&lt; "After move, one = \"" &lt;&lt; one.str() &lt;&lt; '"'
              &lt;&lt; " two = \"" &lt;&lt; two.str() &lt;&lt; "\"\n";
}
|output=
Before move, one = "one" two = "two"
After move, one = "two" two = ""
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/basic_stringbuf/dsc constructor}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
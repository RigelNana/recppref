{{cpp/io/basic_stringbuf/title|basic_stringbuf}}
{{cpp/io/basic_stringbuf/navbar}}
{{dcl begin}}
{{dcl rev multi|num=1|until1=c++11|dcl1=
explicit basic_stringbuf( std::ios_base::openmode which =
                              std::ios_base::in {{!}} std::ios_base::out );
|dcl2=
explicit basic_stringbuf( std::ios_base::openmode which );
}}
{{dcl|num=2|since=c++11|1=
basic_stringbuf()
    : basic_stringbuf( std::ios_base::in {{!}} std::ios_base::out ) {}
}}
{{dcl|num=3|1=
explicit
    basic_stringbuf( const std::basic_string&lt;CharT, Traits, Allocator&gt;&amp; s,
                     std::ios_base::openmode which =
                         std::ios_base::in {{!}} std::ios_base::out );
}}
{{dcl|num=4|since=c++20|1=
explicit basic_stringbuf( std::basic_string&lt;CharT, Traits, Allocator&gt;&amp;&amp; s,
                          std::ios_base::openmode which =
                              std::ios_base::in {{!}} std::ios_base::out );
}}
{{dcl|num=5|since=c++20|1=
basic_stringbuf( std::ios_base::openmode which, const Allocator&amp; a );
}}
{{dcl|num=6|since=c++20|1=
explicit basic_stringbuf( const Allocator&amp; a )
    : basic_stringbuf( std::ios_base::in {{!}} std::ios_base::out, a ) {}
}}
{{dcl|num=7|since=c++20|1=
template&lt; class SAlloc &gt;
explicit basic_stringbuf( const std::basic_string&lt;CharT, Traits, SAlloc&gt;&amp; s,
                          std::ios_base::openmode which =
                              std::ios_base::in {{!}} std::ios_base::out );
}}
{{dcl|num=8|since=c++20|1=
template&lt; class SAlloc &gt;
basic_stringbuf( const std::basic_string&lt;CharT, Traits, SAlloc&gt;&amp; s,
                 std::ios_base::openmode which, const Allocator&amp; a );
}}
{{dcl|num=9|since=c++20|1=
template&lt; class SAlloc &gt;
basic_stringbuf( const std::basic_string&lt;CharT, Traits, SAlloc&gt;&amp; s,
                 const Allocator&amp; a )
    : basic_stringbuf( s, std::ios_base::in {{!}} std::ios_base::out, a ) {}
}}
{{dcl|num=10|since=c++26|1=
template&lt; class StringViewLike &gt;
explicit basic_stringbuf( const StringViewLike&amp; t,
                          std::ios_base::openmode which =
                              std::ios_base::in {{!}} std::ios_base::out );
}}
{{dcl|num=11|since=c++26|1=
template&lt; class StringViewLike &gt;
basic_stringbuf( const StringViewLike&amp; t,
                 std::ios_base::openmode which, const Allocator&amp; a );
}}
{{dcl|num=12|since=c++26|1=
template&lt; class StringViewLike &gt;
basic_stringbuf( const StringViewLike&amp; t, const Allocator&amp; a );
}}
{{dcl|num=13|since=c++11|1=
basic_stringbuf( basic_stringbuf&amp;&amp; rhs );
}}
{{dcl|num=14|since=c++20|1=
basic_stringbuf( basic_stringbuf&amp;&amp; rhs, const Allocator&amp; a );
}}
{{dcl|num=15|since=c++11|1=
basic_stringbuf( const basic_stringbuf&amp; rhs ) = delete;
}}
{{dcl end}}

{{lc|std::basic_streambuf}} 基以及{{rlp|/#仅用于阐述的成员|仅用于阐述的数据成员}} {{tti|buf}} 和 {{tti|mode}} 会按以下方式初始化。

在初始化这些子对象后，重载 {{v|3-12}} 如同以调用 {{rlpf|init_buf_ptrs|''init_buf_ptrs''}} 来初始化输入和输出序列。

{|class="wikitable" style="text-align: center;"
|-
!{{nbsp}}重载{{nbsp}}
!{{nbsp}}{{lc|std::basic_streambuf}} 基{{nbsp}}
!{{tti|buf}}
!{{tti|mode}}
|-
|{{v|1}}
|rowspan=12|默认初始化
|rowspan=2|由实现定义&lt;br&gt;（见下文）
|{{c|which}}
|-
|{{v|2}}
|style="text-align: left;"|{{nbsp}}{{c multi|std::ios_base::in {{!}}|    std::ios_base::out}}{{nbsp}}
|-
|{{v|3}}
|{{c|s}}
|rowspan=3|{{c|which}}
|-
|{{v|4}}
|{{c|std::move(s)}}
|-
|{{v|5}}
|rowspan=2|{{c|a}}
|-
|{{v|6}}
|style="text-align: left;"|{{nbsp}}{{c multi|std::ios_base::in {{!}}|    std::ios_base::out}}
|-
|{{v|7}}
|{{c|s}}
|rowspan=2|{{c|which}}
|-
|{{v|8}}
|rowspan=2|{{c|{s, a}&lt;!----&gt;}}
|-
|{{v|9}}
|style="text-align: left;"|{{nbsp}}{{c multi|std::ios_base::in {{!}}|    std::ios_base::out}}
|-
|{{v|10}}
|{{c|{sv, Allocator()}&lt;!----&gt;}}
|rowspan=2|{{c|which}}
|-
|{{v|11}}
|rowspan=2|{{c|{sv, a}&lt;!----&gt;}}
|-
|{{v|12}}
|style="text-align: left;"|{{nbsp}}{{c multi|std::ios_base::in {{!}}|    std::ios_base::out}}
|-
|{{v|13}}
|rowspan=2|{{c|rhs}}&lt;br&gt;（复制构造）
|{{c|std::move(rhs).str()}}
|rowspan=2|{{c|rhs.mode}}
|-
|{{v|14}}
|{{nbsp}}{{c|{std::move(rhs).str(), a}&lt;!----&gt;}}{{nbsp}}
|}

@1,2@ 重载 {{rev inl|until=c++11|{{v|1}}}}{{rev inl|since=c++11|{{v|2}}}} 是默认构造函数。由实现定义是否将序列指针（{{lc|eback()}}、{{lc|gptr()}}、{{lc|egptr()}}、{{lc|pbase()}}、{{lc|pptr()}}、{{lc|epptr()}}）初始化为空指针。&lt;!-- LWG 2995 --&gt;

@5,6@ 构造完成时，{{c|str.empty()}} 是 {{c|true}}。

@7@ {{cpp/enable if|{{c|std::is_same_v&lt;SAlloc, Allocator&gt;}} 是 {{c|false}}}}。

@10-12@ {{cpp/string/sv hack|将它用于上面的表格中|plural=yes|checkptr=no}}

@13,14@ 重载 {{v|13}} 是移动构造函数。{{c|*this}} 中的六个序列指针是否会获取 {{c|rhs}} 中这些指针先前拥有的值会由实现定义。
@@ 构造完成时，{{c|rhs}} 为空但依然可用，并且
* 以 {{c|rhs_p}} 作为 {{c|rhs}} 在此次构造前一刻的状态，以下表达式都会求值为 {{c|true}}：
:* {{c|1=str() == rhs_p.str()}}
:* {{c|1=getloc() == rhs_p.getloc()}}
:* {{c|1=gptr() - eback() == rhs_p.gptr() - rhs_p.eback()}}
:* {{c|1=egptr() - eback() == rhs_p.egptr() - rhs_p.eback()}}
:* {{c|1=pptr() - pbase() == rhs_p.pptr() - rhs_p.pbase()}}
:* {{c|1=epptr() - pbase() == rhs_p.epptr() - rhs_p.pbase()}}
* 以 {{c|rhs_a}} 作为 {{c|rhs}} 在此次构造后一刻的状态，以下表达式都会求值为 {{c|true}}：
:* {{c|1=!eback() {{!!}} eback() != rhs_a.eback()}}
:* {{c|1=!gptr() {{!!}} gptr() != rhs_a.gptr()}}
:* {{c|1=!egptr() {{!!}} egptr() != rhs_a.egptr()}}
:* {{c|1=!pbase() {{!!}} pbase() != rhs_a.pbase()}}
:* {{c|1=!pptr() {{!!}} pptr() != rhs_a.pptr()}}
:* {{c|1=!epptr() {{!!}} epptr() != rhs_a.epptr()}}

@15@ 复制构造函数被删除；{{tt|std::basic_stringbuf}} 不{{named req|CopyConstructible}}。

===参数===
{{par begin}}
{{par|s|用于初始化缓冲区的 {{lc|std::basic_string}}}}
{{par|t|用于初始化缓冲区的对象（可转换到 {{lc|std::basic_string_view}}）}}
{{par|a|用于构造内部 {{lc|std::basic_string}} 的另一分配器}}
{{par|rhs|另一 {{tt|basic_stringbuf}}}}
{{par|which|指定流打开模式。它是位掩码类型，定义下列常量：
{{cpp/io/ios_base/openmode consts}}}}
{{par end}}

===注解===
常由 {{lc|std::basic_stringstream}} 的构造函数调用。

{{lc|std::ios_base::in}} 和 {{lc|std::ios_base::out}} 以外的打开模式支持级别在实现中各有不同。C++11 显式指定 {{lc|str()}} 中和此构造函数中支持 {{lc|std::ios_base::ate}}，但 {{lc|std::ios_base::app}}、{{lc|std::ios_base::trunc}} 和 {{lc|std::ios_base::binary}} 在不同实现上有不同效果。

{{ftm begin}}
{{ftm|std=C++26|value=202306L|__cpp_lib_sstream_from_string_view|字符串流的 {{lc|std::string_view}} 接口}}
{{ftm end}}

===示例===
{{example
|演示直接调用 {{tt|basic_stringbuf}} 的构造函数。
|code=
#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
{
    // 默认构造函数（mode = in {{!}} out）
    std::stringbuf buf1;
    buf1.sputc('1');
    std::cout &lt;&lt; &amp;buf1 &lt;&lt; '\n';
    
    // 在尾端模式中的字符串构造函数（C++11）
    std::stringbuf buf2("test", std::ios_base::in
                              {{!}} std::ios_base::out
                              {{!}} std::ios_base::ate);
    buf2.sputc('1');
    std::cout &lt;&lt; &amp;buf2 &lt;&lt; '\n';
    
    // 后附模式测试（结果在编译器间有别）
    std::stringbuf buf3("test", std::ios_base::in
                              {{!}} std::ios_base::out
                              {{!}} std::ios_base::app);
    buf3.sputc('1');
    buf3.pubseekpos(1);
    buf3.sputc('2');
    std::cout &lt;&lt; &amp;buf3 &lt;&lt; '\n';
}
|output=
1
test1
est12 (Sun Studio) 2st1 (GCC)
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=432|std=C++98|before=1. 重载 {{v|1}} 不会分配数组对象&lt;br&gt;2. 重载 {{v|3}} 没有指定如何初始化输入和输出序列|after=1. 移除该限制&lt;br&gt;2. 已指定}}
{{dr list item|wg=lwg|dr=562|std=C++98|before=重载 {{v|3}} 在 {{c|1=bool(which &amp; std::ios_base::out) == true}}&lt;br&gt;时会设置 {{lc|epptr()}} 到指向最后一个底层字符的下一位置|after={{lc|epptr()}} 可以设置到更后面的位置}}
{{dr list item|paper=P0935R0|std=C++11|before=默认构造函数是显式的|after=改成隐式的}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/basic_stringstream/dsc constructor|basic_stringstream}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
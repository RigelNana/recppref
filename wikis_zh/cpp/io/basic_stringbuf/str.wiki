{{cpp/io/basic_stringbuf/title|str}}
{{cpp/io/basic_stringbuf/navbar}}
{{dcl begin}}
{{dcl rev multi|num=1|
|until1=c++20|dcl1=
std::basic_string&lt;CharT, Traits, Allocator&gt; str() const;
|dcl2=
std::basic_string&lt;CharT, Traits, Allocator&gt; str() const&amp;;
}}
{{dcl|num=2|since=c++20|
template&lt;class SAlloc&gt;
std::basic_string&lt;CharT, Traits, Allocator&gt; str( const SAlloc&amp; a ) const;
}}
{{dcl|num=3|since=c++20|
std::basic_string&lt;CharT, Traits, Allocator&gt; str() &amp;&amp;;
}}
{{dcl|num=4|
void str( const std::basic_string&lt;CharT, Traits, Allocator&gt;&amp; s );
}}
{{dcl|num=5|since=c++20|
template&lt;class SAlloc&gt;
void str( const std::basic_string&lt;CharT, Traits, SAlloc&gt;&amp; s );
}}
{{dcl|num=6|since=c++20|
void str( std::basic_string&lt;CharT, Traits, Allocator&gt;&amp;&amp; s );
}}
{{dcl|num=7|since=c++26|
template&lt; class StringViewLike &gt;
void str( const StringViewLike&amp; t );
}}
{{dcl end}}

获取和设置底层字符串。

在以下描述中，{{c|buf}} 和 {{c|mode}} 是 {{c|*this}} 的{{rlp|/#仅用于阐述的成员|仅用于阐述的数据成员}}。

@1@ 创建并返回保有此 {{tt|std::basic_stringbuf}} 底层字符序列副本的 {{lc|std::basic_string}}。对于仅输入流，返回的字符串含来自范围 {{range/core|{{lc|eback()}}|{{lc|egptr()}}}} 的字符。对于输入/输出或仅输出流，含有 {{lc|pbase()}} 到序列中末字符的字符，不考虑 {{lc|egptr()}} 和 {{lc|epptr()}}。

::为写入打开的缓冲区中的成员字符序列可以为了效率而进行'''过分配'''。此时只会返回''已初始化的字符''：从构造函数字符串参数获得的字符、最近对 {{tt|str()}} 的设置器重载的字符串参数的字符或来自写入操作的字符。典型的使用过分配的实现维护一个高水位指针，以跟踪缓冲区已初始化部分的结尾，而此重载返回从 {{lc|pbase()}} 到高水位指针的字符。

{{rrev|since=c++20|
::等价于 {{c|return std::basic_string&lt;CharT, Traits, Allocator&gt;(view(), get_allocator());}}。
}}

@2@ 同 {{v|1}}，但用 {{c|a}} 构造返回的 {{lc|std::basic_string}}。等价于 {{c|return std::basic_string&lt;CharT, Traits, SAlloc&gt;(view(), a);}}。
@@ {{cpp/enable if|{{tt|SAlloc}} 满足{{named req|Allocator}}的要求}}。

@3@ 如同以从 {{c|*this}} 的在 {{c|buf}} 中的底层字符序列移动构造来创建 {{lc|std::basic_string}} 对象。可能需要首先调节 {{c|buf}} 以使之含有同 {{v|1}} 的内容。构造完成后设置 {{c|buf}} 为空并调用 {{rlpf|init_buf_ptrs|''init_buf_ptrs''}}，然后返回 {{lc|std::basic_string}} 对象。

@4@ 如同用 {{c|1=buf = s}} 替换底层字符序列，然后调用 {{rlpf|init_buf_ptrs|''init_buf_ptrs''}}。

@5@ 同 {{v|4}}，但 {{c|s}} 的分配器的类型不是 {{tt|Allocator}}。
@@ {{cpp/enable if| {{tt|SAlloc}} 与 {{tt|Allocator}} 不是同一类型}}。

@6@ 如同用 {{c|1=buf = std::move(s)}} 替换底层字符序列，然后调用 {{rlpf|init_buf_ptrs|''init_buf_ptrs''}}。

@7@ {{cpp/string/sv hack|如同用 {{c|1=buf = sv}} 替换底层字符序列，然后调用 {{rlpf|init_buf_ptrs|''init_buf_ptrs''}}|checkptr=false}}

===参数===
{{par begin}}
{{par|s|保有替换字符序列的 {{lc|std::basic_string}} 对象}}
{{par|t|用于初始化缓冲区的对象（可转换到 {{lc|std::basic_string_view}}）}}
{{par|a|返回的 {{lc|std::basic_string}} 的所有内存分配所用的分配器}}
{{par end}}

===返回值===
@1-3@ 保有此缓冲的底层字符序列的 {{lc|std::basic_string}} 对象。
@4-7@ （无）

===注解===
通常会通过 {{lc|std::basic_istringstream::str()}}、{{lc|std::basic_ostringstream::str()}} 或 {{lc|std::basic_stringstream::str()}} 访问此函数。

{{ftm begin|std=yes}}
{{ftm|std=C++26|value=202306L|__cpp_lib_sstream_from_string_view|字符串流的 {{lc|std::string_view}} 接口}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
{
    int n;
    
    std::istringstream in;  // 也可以用 in("1 2")
    in.rdbuf()-&gt;str("1 2"); // 设置获取区
    in &gt;&gt; n;
    std::cout &lt;&lt; "从 \"1 2\" 读取第一个 int 之后，int 是 " 
              &lt;&lt; n &lt;&lt; "，str() = \"" &lt;&lt; in.rdbuf()-&gt;str() &lt;&lt; "\"\n"; // 或 in.str()
    
    std::ostringstream out("1 2");
    out &lt;&lt; 3;
    std::cout &lt;&lt; "将 int '3' 写入输出流 \"1 2\" 之后"
              &lt;&lt; "，str() = \"" &lt;&lt; out.str() &lt;&lt; "\"\n";
    
    std::ostringstream ate("1 2", std::ios_base::ate); // C++11
    ate &lt;&lt; 3;
    std::cout &lt;&lt; "将 int '3' 写入附加流 \"1 2\" 之后"
              &lt;&lt; "，str() = \"" &lt;&lt; ate.str() &lt;&lt; "\"\n";
}
|output=
从 "1 2" 读取第一个 int 之后，int 是 1，str() = "1 2"
将 int '3' 写入输出流 "1 2" 之后，str() = "3 2"
将 int '3' 写入附加流 "1 2" 之后，str() = "1 23"
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=432|std=C++98|before=1. 重载 {{v|1}} 没有指定底层字符序列的内容&lt;br&gt;2. 重载 {{v|4}} 没有指定如何初始化输入和输出序列|after=两者均已指定}}
{{dr list item|wg=lwg|dr=562|std=C++98|before=重载 {{v|4}} 在 {{c|1=bool(mode &amp; std::ios_base::out) == true}}&lt;br&gt;时会设置 epptr() 到指向最后一个底层字符的下一位置|after={{lc|epptr()}} 可以设置到更后面的位置}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/basic_stringstream/dsc str|basic_stringstream}}
{{dsc inc|cpp/io/basic_stringbuf/dsc view}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|vprint_unicode|vprint_unicode_buffered}}
{{cpp/io/print/navbar}}

{{dcl begin}}
{{dcl header|print}}
{{dcl|num=1|since=c++23|
void vprint_unicode( std::FILE* stream,
                     std::string_view fmt, std::format_args args );
}}
{{dcl|num=2|since=c++23|
void vprint_unicode_buffered( std::FILE* stream,
                              std::string_view fmt, std::format_args args );
}}
{{dcl|num=3|since=c++23|
void vprint_unicode_buffered( std::string_view fmt, std::format_args args );
}}
{{dcl end}}

根据格式字符串 {{c|fmt}} 格式化 {{c|args}}，并将结果写入输出流。

@1@ 按顺序执行以下操作：
# 锁定 {{c|stream}}。
# 以 {{c|out}} 表示由 {{c|args}} 提供的格式化实参在按 {{c|fmt}} 指定的格式说明格式化后的字符表示。
# 将 {{c|out}} 写入 {{c|stream}}：
:* 如果 {{c|stream}} 指代的终端仅可通过[[#注解|原生 Unicode API]] 显示 Unicode，那么冲洗 {{c|stream}} 并使用原生 Unicode API 将 {{c|out}} 写入该终端。
:* 否则，将 {{c|out}} 按原样写入 {{c|stream}}。
@@ 在函数退出时会无条件解锁 {{c|stream}}。
@@ 如果满足以下任意条件，那么行为未定义：
* {{c|stream}} 不是指向输出 C 流的有效指针。
* 在使用原生 Unicode API 的情况下，{{c|out}} 包含了无效 Unicode {{enwiki|Character encoding#Terminology|代码单元}}。

@2@ 等价于 {{c multi
|1=std::string out = std::vformat(fmt, args);
|2=std::vprint_unicode(stream, "{}", std::make_format_args(out));}}。

@3@ 等价于 {{c|std::vprint_unicode_buffered(stdout, fmt, args)}}。


{{rrev|since=c++26|
在向输出流写入字符后建立一个[[cpp/language/as if|可观察检查点]]。
}}

===参数===
{{par begin}}
{{par|stream|要写入的输出文件流}}
{{par|fmt|{{include|cpp/utility/format/format string}}}}
{{par|args|要格式化的实参}}
{{par end}}

===异常===
{{std print exceptions}}

===注解===
C++ 标准鼓励实现厂商在 {{c|out}} 包含无效 Unicode 代码单元时给出诊断消息。

在 POSIX 上，因为写入终端是通过通常的标准输入/输出函数进行的，所以不需要将终端与其他文件系统区别对待。

在 Windows 上，当 {{c|GetConsoleMode(_get_osfhandle(_fileno(stream)))}} 返回非零时流代表终端（参见 [https://docs.microsoft.com/en-us/windows/console/getconsolemode {{tt|GetConsoleMode}}]、[https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/get-osfhandle {{tt|_get_osfhandle}}] 和 [https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/fileno {{tt|_fileno}}] 的 Windows 文档）。Windows 的原生 Unicode API 是 [https://docs.microsoft.com/en-us/windows/console/writeconsole {{tt|WriteConsoleW}}]。

如果调用原生 Unicode API 需要进行转码，那么无效代码单元都会被替换成 {{tt|U+FFFD}} REPLACEMENT CHARACTER（参见《Unicode 标准 - 核心规范》，[[#外部链接|章节 3.9]]）。

{{ftm begin|sort=yes}}
{{ftm|__cpp_lib_print|格式化输出|value=202207L|std=C++23|rowspan=3}}
{{ftm|-|无缓冲的格式化输出|value=202403L|std=C++26|dr=23}}
{{ftm|-|为更多可格式化类型启用无缓冲的格式化输出|value=202406L|std=C++26|dr=23}}
{{ftm|__cpp_lib_format|暴露 {{lc|std::basic_format_string}}|value=202207L|std=C++23}}
{{ftm end}}

===示例===
{{example
|code=
&lt;!--
#include &lt;print&gt;

int main()
{
}
--&gt;
|output=
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=4044|std=C++23|before=只要 {{c|stream}} 指代的终端能显示 Unicode，&lt;br&gt;就会使用原生 Unicode API|after=只有在终端仅可通过原生 Unicode API&lt;br&gt;显示 Unicode 时才会使用}}
{{dr list item|paper=P3107R5|std=C++23|before=打印操作始终有缓冲|after=提供无缓冲的打印操作}}
{{dr list item|paper=P3235R3|std=C++23|before={{stddoc|P3107R5}}新增的函数的名字会导致误解|after=更换函数名}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/dsc vprint_nonunicode}}
{{dsc inc|cpp/io/basic_ostream/dsc vprint_unicode}}
{{dsc inc|cpp/io/dsc print}}
{{dsc inc|cpp/utility/format/dsc format}}
{{dsc end}}

===外部链接===
{{elink begin}}
{{elink|{{enwiki|Unicode|Unicode}}}}
{{elink|[https://www.unicode.org/versions/Unicode14.0.0/UnicodeStandard-14.0.pdf Unicode 标准，版本 14.0 - 核心规范]}}
{{elink end}}

{{langlinks|de|en|es|fr|ja|pl|ru}}
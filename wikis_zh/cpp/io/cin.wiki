{{cpp/title|cin|wcin}}
{{cpp/io/basic_istream/navbar}}
{{dcl begin}}
{{dcl header|iostream}}
{{dcl|num=1|
extern std::istream cin;
}}
{{dcl|num=2|
extern std::wistream wcin;
}}
{{dcl end}}

全局对象 {{tt|std::cin}} 和 {{tt|std::wcin}} 控制来自某个与标准 C 输入流 {{lc|stdin}} 关联的实现定义类型（派生于 {{lc|std::streambuf}}）的流缓冲区的输入。

保证在首次构造 {{lc|std::ios_base::Init}} 前或期间初始化这些对象，且它们可以在拥有[[cpp/language/initialization#非局部变量|有序初始化]]的静态对象的构造及析构函数中使用（只要在定义该对象前包含 {{header|iostream}}）。

除非发出了 {{c|sync_with_stdio(false)}}，从多个线程访问这些对象，进行有格式和无格式输入是安全的。

初始化完成时：
@1@ {{box|{{c/core|std::cin.}}{{ltf|cpp/io/basic_ios/tie}}}} 会返回 {{c|&amp;std::cout}}。这表示若有任何等待输出的字符，那么 {{tt|std::cin}} 上的任何输入操作都会强制调用 {{box|{{c/core|std::cout.}}{{ltf|cpp/io/basic_ostream/flush}}}}。
@2@ {{c|std::wcin.tie()}} 会返回 {{c|&amp;std::wcout}}。这表示若有任何等待输出的字符，那么 {{tt|std::wcin}} 上的任何输入操作都会强制调用 {{c|std::wcout.flush()}}。

===注解===
名称中的 “c” 代表 “character”（[http://www.stroustrup.com/bs_faq2.html#cout stroustrup.com FAQ]）；{{tt|cin}} 表示“字符输入”而 {{tt|wcin}} 表示“宽字符输入”。

===示例===
{{example
|code=
#include &lt;iostream&gt;

struct Foo
{
    int n;
    Foo()
    {
        std::cout &lt;&lt; "输入 n："; // 不需要冲入
        std::cin &gt;&gt; n;
    }
};

Foo f; // 静态对象

int main()
{
    std::cout &lt;&lt; "f.n 是 " &lt;&lt; f.n &lt;&lt; '\n';
}
|p=true
|input=10
|output=
输入 n：10
f.n 是 10
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/ios_base/dsc Init}}
{{dsc inc|cpp/io/dsc cout}}
{{dsc inc|cpp/io/c/dsc std streams}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|fgetws}}
{{cpp/io/c/navbar}}
{{ddcl|header=cwchar|
wchar_t* fgetws( wchar_t* str, int count, std::FILE* stream );
}}

从给定的文件流读取至多 {{c|count - 1}} 个宽字符，并将它们存储于 {{c|str}}。产生的宽字符串始终是空终止的。若出现文件尾条件或找到换行宽字符则停止分析，后一情况下 {{c|str}} 将含有该宽换行符。

===参数===
{{par begin}}
{{par|str|要读取字符到的宽字符串}}
{{par|count|{{c|str}} 的长度}}
{{par|stream|读取数据来源的文件流}}
{{par end}}

===返回值===
成功时为 {{c|str}}，错误时为空指针。

===示例===
{{example
|code=
#include &lt;array&gt;
#include &lt;clocale&gt;
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cwchar&gt;
#include &lt;cwctype&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;span&gt;
#include &lt;string&gt;

void dump(std::span&lt;const wchar_t&gt; sp, std::size_t width = 14)
{
    for (wchar_t wc : sp)
        std::wcout &lt;&lt; (std::iswprint(wc) ? wc : L'.');
    std::wcout &lt;&lt; std::wstring(width &gt; sp.size() ? width - sp.size() : 1, L' ')
               &lt;&lt; std::hex &lt;&lt; std::uppercase &lt;&lt; std::setfill(L'0');
    for (wchar_t wc : sp)
        std::wcout &lt;&lt; std::setw(sizeof wc) &lt;&lt; static_cast&lt;unsigned&gt;(wc) &lt;&lt; ' ';
    std::wcout &lt;&lt; '\n';
}

int main()
{
    // 创建包含宽字符的临时文件
    std::setlocale(LC_ALL, "en_US.utf8");
    std::FILE* tmpf = std::tmpfile();
 
    for (const wchar_t* text : {
        L"Tétraèdre"    L"\n",
        L"Cube"         L"\n",
        L"Octaèdre"     L"\n",
        L"Icosaèdre"    L"\n",
        L"Dodécaèdre"   L"\n"
        })
        if (int rc = std::fputws(text, tmpf); rc == EOF)
        {
            std::perror("fputws()"); // POSIX 要求设置 errno
            return EXIT_FAILURE;
        }

    std::rewind(tmpf);

    std::array&lt;wchar_t, 12&gt; buf;
    while (std::fgetws(buf.data(), buf.size(), tmpf) != nullptr)
        dump(std::span(buf.data(), buf.size()));

    return EXIT_SUCCESS;
}
|p=true
|output=
Tétraèdre...  0054 00E9 0074 0072 0061 00E8 0064 0072 0065 000A 0000 0000 
Cube..dre...  0043 0075 0062 0065 000A 0000 0064 0072 0065 000A 0000 0000 
Octaèdre....  004F 0063 0074 0061 00E8 0064 0072 0065 000A 0000 0000 0000 
Icosaèdre...  0049 0063 006F 0073 0061 00E8 0064 0072 0065 000A 0000 0000 
Dodécaèdre..  0044 006F 0064 00E9 0063 0061 00E8 0064 0072 0065 000A 0000
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/c/dsc fwscanf}}
{{dsc inc|cpp/io/c/dsc fgetwc}}
{{dsc inc|cpp/io/c/dsc fputws}}
{{dsc see c|c/io/fgetws}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
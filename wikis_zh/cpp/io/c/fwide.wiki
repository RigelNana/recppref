{{cpp/title|fwide}}
{{cpp/io/c/navbar}}
{{ddcl|header=cwchar|
int fwide( std::FILE* stream, int mode );
}}

若 {{c|1=mode &gt; 0}}，则尝试令 {{c|stream}} 为宽取向。若 {{c|1=mode &lt; 0}}，则尝试令 {{c|stream}} 为字节取向。若 {{c|1=mode == 0}}，则只查询流的当前取向。

若流的当前取向已决定（通过执行输出或通过之前调用 {{tt|fwide}}），则此函数不做任何事。

===参数===
{{par begin}}
{{par|stream|指向要修改或查询的 C I/O 流的指针}}
{{par|mode|大于零的整数值设置流为宽，小于零者设置流为窄，零值仅查询}}
{{par end}}

===返回值===
若此调用后流为宽取向则为大于零的整数，若此调用后流为字节取向则为小于零的整数，若流无取向则为零。

===示例===
{{example
|以下代码设置并重置流的取向。
|code=
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cwchar&gt;
#include &lt;iostream&gt;

void show_orientation(int n)
{
    n &lt; 0 ? std::wcout &lt;&lt; "\t窄取向\n" :
    n &gt; 0 ? std::wcout &lt;&lt; "\t宽取向\n" :
            std::wcout &lt;&lt; "\t无取向\n";
}

void try_read(FILE* fp)
{
    if (const int c = std::fgetc(fp); c == EOF)
        std::wcout &lt;&lt; "\t读取窄字符失败\n";
    else
        std::wcout &lt;&lt; "\t读取窄字符 '" &lt;&lt; static_cast&lt;char&gt;(c) &lt;&lt; "'\n";

    if (const wint_t wc = std::fgetwc(fp); wc == WEOF)
        std::wcout &lt;&lt; "\t读取宽字符失败\n";
    else
        std::wcout &lt;&lt; "\t读取宽字符 '" &lt;&lt; static_cast&lt;wchar_t&gt;(wc) &lt;&lt; "'\n";
}

int main()
{
    enum fwide_orientation : int { narrow = -1, query, wide };

    FILE* fp = std::fopen("main.cpp", "r");
    if (!fp)
    {
        std::wcerr &lt;&lt; "fopen() 失败\n";
        return EXIT_FAILURE;
    }

    std::wcout &lt;&lt; "1) 新打开的流无取向。\n";
    show_orientation(std::fwide(fp, fwide_orientation::query));

    std::wcout &lt;&lt; "2) 设立字节取向。\n";
    show_orientation(std::fwide(fp, fwide_orientation::narrow));
    try_read(fp);

    std::wcout &lt;&lt; "3) 仅有 freopen() 可以重置流的取向。\n";
    if (std::freopen("main.cpp", "r", fp) == NULL)
    {
        std::wcerr &lt;&lt; "freopen() 失败\n";
        return EXIT_FAILURE;
    }

    std::wcout &lt;&lt; "4) 重新打开的流无取向。\n";
    show_orientation(std::fwide(fp, fwide_orientation::query));

    std::wcout &lt;&lt; "5) 设立宽取向。\n";
    show_orientation(std::fwide(fp, fwide_orientation::wide));
    try_read(fp);

    std::fclose(fp);
}
|p=true
|output=
1) 新打开的流无取向。
        无取向
2) 设立字节取向。
        窄取向
        窄字符读取 '#'
        宽字符读取失败
3) 仅有 freopen() 可以重置流的取向。
4) 重新打开的流无取向。
        无取向
5) 设立宽取向。
        宽取向
        窄字符读取失败
        宽字符读取 '#'
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/io/c/dsc fopen}}
{{dsc see c | c/io/fwide}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
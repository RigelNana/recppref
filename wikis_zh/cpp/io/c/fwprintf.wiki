{{cpp/title|wprintf|fwprintf|swprintf}}
{{cpp/io/c/navbar}}
{{dcl begin}}
{{dcl header|cwchar}}
{{dcl|num=1|
int wprintf( const wchar_t* format, ... );
}}
{{dcl|num=2|
int fwprintf( std::FILE* stream, const wchar_t* format, ... );
}}
{{dcl|num=3|
int swprintf( wchar_t* buffer, std::size_t size, const wchar_t* format, ... );
}}
{{dcl end}}

从给定位置加载数据，转换它们到宽字符串等价版本，并写入结果到各种池。

@1@ 写结果到 {{lc|stdout}}。
@2@ 写结果到文件流 {{c|stream}}。
@3@ 写结果到宽字符串 {{c|buffer}}。至多写入 {{c|size - 1}} 个宽字符，后随空宽字符。

===参数===
{{par begin}}
{{par|stream|要写入的输出文件流}}
{{par|buffer|指向要写入的宽字符串的指针}}
{{par|size|至多可写入 {{c|size - 1}} 个字符，再加上空终止符}}
{{par|format|指向指定转译方式的空终止宽字符串的指针}}
{{par|...|指定要打印的数据的实参。若任何实参在[[cpp/language/variadic_arguments#默认转换|默认转换]]后不拥有对应转换指示符所期待的类型，或若实参少于 {{c|format}} 所要求的数量，则行为未定义。若有多于 {{c|format}} 所要求的实参，则求值并忽略额外实参}}
{{par end}}

{{cpp/io/c/printf format|wcs=true}}

===返回值===
@1,2@ 若成功则为写入的宽字符数，若出现错误则为负值。
@3@ 若成功则为写入的宽字符数（不计终止空宽字符），若出现编码错误或若生成的字符数等于或大于 {{c|size}}（包含 {{c|size}} 为零时）则为负值。

===注解===
窄字符串提供 {{lc|std::snprintf}}，它使得程序能够确定要求的输出缓冲区大小。不过宽字符串无等价版本，而为确定缓冲区大小，程序需要调用 {{tt|std::swprintf}}，检查结果值，再重新分配更大的缓冲区，反复尝试直至成功。

===示例===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cwchar&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;

int main()
{
    char narrow_str[] = "z\u00df\u6c34\U0001f34c";
                  // 或 "zß水🍌"
                  // 或 "\x7a\xc3\x9f\xe6\xb0\xb4\xf0\x9f\x8d\x8c";
    wchar_t warr[29]; // 期待的字符串为 28 个字符加 1 个空终止符
    std::setlocale(LC_ALL, "en_US.utf8");

    std::swprintf(warr, sizeof warr/sizeof *warr,
                  L"从 UTF-8 转换: '%s'", narrow_str);

    std::wcout.imbue(std::locale("en_US.utf8"));
    std::wcout &lt;&lt; warr &lt;&lt; '\n';
}
|output=
从 UTF-8 转换: 'zß水🍌'
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/c/dsc fprintf}}
{{dsc inc|cpp/io/c/dsc vfwprintf}}
{{dsc inc|cpp/io/c/dsc fputws}}
{{dsc see c|c/io/fwprintf|wprintf|fwprintf|swprintf}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
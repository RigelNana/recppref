{{cpp/title|vscanf|vfscanf|vsscanf}}
{{cpp/io/c/navbar}}
{{dcl begin}}
{{dcl header|cstdio}}
{{dcl|num=1|since=c++11|
int vscanf( const char* format, std::va_list vlist );
}}
{{dcl|num=2|since=c++11|
int vfscanf( std::FILE* stream, const char* format, std::va_list vlist );
}}
{{dcl|num=3|since=c++11|
int vsscanf( const char* buffer, const char* format, std::va_list vlist );
}}
{{dcl end}}

从各种源读取数据，按照 {{c|format}} 转换并存储结果到 {{c|vlist}} 所定义的位置。

@1@ 从 {{lc|stdin}} 读取数据。
@2@ 从文件流 {{c|stream}} 读取数据。
@3@ 从空终止字符串 {{c|buffer}} 读取数据。

===参数===
{{par begin}}
{{par|stream|要读取的输入文件流}}
{{par|buffer|指向要读取的空终止字符串的指针}}
{{par|format|指向空终止字符串的指针，指定如何读取输入}}
{{par|vlist|含有接收实参的可变参数列表}}
{{par end}}


{{cpp/io/c/scanf format}}

===返回值===
成功读取的实参个数，或若出现失败则为 {{lc|EOF}}。

===注解===
所有这些函数调用 {{lc|va_arg}} 至少一次，返回后 {{tt|arg}} 的值不确定。这些函数不调用 {{lc|va_end}}，而这必须由调用方进行。

===示例===
{{example
|code=
#include &lt;cstdarg&gt;
#include &lt;cstdio&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;

void checked_sscanf(int count, const char* buf, const char *fmt, ...)
{
    std::va_list ap;
    va_start(ap, fmt);
    if (std::vsscanf(buf, fmt, ap) != count)
        throw std::runtime_error("parsing error");
    va_end(ap);
}

int main()
{
    try
    {
        int n, m;
        std::cout &lt;&lt; "Parsing '1 2'... ";
        checked_sscanf(2, "1 2", "%d %d", &amp;n, &amp;m);
        std::cout &lt;&lt; "success\n";
        std::cout &lt;&lt; "Parsing '1 a'... ";
        checked_sscanf(2, "1 a", "%d %d", &amp;n, &amp;m);
        std::cout &lt;&lt; "success\n";
    }
    catch (const std::exception&amp; e)
    {
        std::cout &lt;&lt; e.what() &lt;&lt; '\n';
    }
}
|output=
Parsing '1 2'... success
Parsing '1 a'... parsing error
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/c/dsc fscanf}}
{{dsc inc|cpp/io/c/dsc vfprintf}}
{{dsc see c|c/io/vfscanf|vscanf|vfscanf|vsscanf}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
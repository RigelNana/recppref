{{cpp/title | vwprintf | vfwprintf | vswprintf}}
{{cpp/io/c/navbar}}
{{dcl begin}}
{{dcl header | cwchar}}
{{dcl | num=1 |
int vwprintf( const wchar_t* format, va_list vlist );
}}
{{dcl | num=2 |
int vfwprintf( std::FILE* stream, const wchar_t* format, va_list vlist );
}}
{{dcl | num=3 |
int vswprintf( wchar_t* buffer, std::size_t buf_size, const wchar_t* format, va_list vlist );
}}
{{dcl end}}

从 {{tt|vlist}} 所定义的位置加载数据，转换为宽字符串等价版本，并将结果写入各种池。

@1@ 写入结果到 {{lc|stdout}}。
@2@ 写入结果到文件流 {{tt|stream}}。
@3@ 写入结果到宽字符串 {{tt|buffer}}。至多写入后随空宽字符的 {{c|size-1}} 个宽字符。

===参数===
{{par begin}}
{{par | stream |要写入的输出宽流}}
{{par | buffer |指向要写入的宽字符串的指针}}
{{par | buf_size |要写入的最大宽字符数}}
{{par | format |指向空终止宽字符串的指针，指定如何判读数据}}
{{par | vlist |含有待打印数据的[[cpp/language/variadic arguments|可变实参列表]]}}
{{par end}}


{{cpp/io/c/printf format|wcs=true}}

===返回值===
@1,2@ 若成功则为写入的宽字符数，若出现错误则为负值。
@3@ 若成功则为写入的宽字符数（不包含终止空宽字符），若出现编码错误，或若要生成的字符数等于或大于 {{tt|size}} 则为负值。

===注解===
窄字符串提供 {{lc|std::vsnprintf}}，它使得程序能够确定要求的输出缓冲区大小。不过宽字符串无等价版本，而且为确定缓冲区大小，程序需要调用 {{tt|std::vswprintf}} 并检查结果值，再重新分配更大的缓冲区，反复尝试直至成功。

===示例===
{{example
 | code=
 | output=
}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/io/c/dsc vfprintf}}
{{dsc inc | cpp/io/c/dsc fwprintf}}
{{dsc see c | c/io/vfwprintf | vwprintf | vfwprintf | vswprintf}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|scanf|fscanf|sscanf}}
{{cpp/io/c/navbar}}
{{dcl begin}}
{{dcl header|cstdio}}
{{dcl|num=1|
int scanf( const char* format, ... );
}}
{{dcl|num=2|
int fscanf( std::FILE* stream, const char* format, ... );
}}
{{dcl|num=3|
int sscanf( const char* buffer, const char* format, ... );
}}
{{dcl end}}

从各种源读取数据，按照 {{c|format}} 进行转换并存储结果于给定位置。

@1@ 从 {{lc|stdin}} 读数据。
@2@ 从文件流 {{c|stream}} 读数据。
@3@ 从空终止字符串 {{c|buffer}} 读数据。

===参数===
{{par begin}}
{{par|stream|读取来源的文件流}}
{{par|buffer|指向读取数据来源的空终止字符串}}
{{par|format|指向空终止字符串的指针，指定如何读取输入}}
{{par|...|接收的参数}}
{{par end}}

{{cpp/io/c/scanf format}}

===返回值===
成功赋值的接收实参个数（在首个接收实参被赋值前发生匹配失败的情况下可为零），或若在首个接收实参被赋值前发生输入失败则为 {{lc|EOF}}。

===复杂度===
无保证。请注意，{{tt|std::sscanf}} 的一些实现为 {{math|O(N)}}，其中 {{c|1=N = std::strlen(buffer)}} [https://sourceware.org/bugzilla/show_bug.cgi?id=17577]。对于高性能字符串分析，见 {{tt|[[cpp/utility/from_chars|std::from_chars]]}}。

===注解===
因为大多数转换指示符首先消耗所有连续空白符，如下代码 
{{source|1=
std::scanf("%d", &amp;a);
std::scanf("%d", &amp;b);
}}
会读取输入于不同行（第二个 %d 会消耗第一个剩下的换行符）或同一行中为空格或制表符所分隔的（第二个 %d 会消耗空格或制表符）二个整数。

不消耗前导空白符的转换指示符，如 %c，可通过在格式化字符串中用空白符使得它这么做：{{source|1=
std::scanf("%d", &amp;a);
std::scanf(" %c", &amp;c); // 忽略 %d 后的换行符，然后读一个 char
}}

注意，{{tt|std::sscanf}} 的某些实现需要调用 {{lc|std::strlen}}，这使得运行时间与整个字符串的长度呈线性关系。这意味着，如果在一个循环中调用 {{tt|std::sscanf}} 来重复解析字符串前部的值，那么代码的运行时间可能会达到二次方（[https://nee.lv/2021/02/28/How-I-cut-GTA-Online-loading-times-by-70/#Problem-one-It%E2%80%99s%E2%80%A6-strlen 示例]）。

===示例===
{{example
|code=
#include &lt;clocale&gt;
#include &lt;cstdio&gt;
#include &lt;iostream&gt;

int main()
{
    int i, j;
    float x, y;
    char str1[10], str2[4];
    wchar_t warr[2];
    std::setlocale(LC_ALL, "en_US.utf8");

    char input[] = u8"25 54.32E-1 Thompson 56789 0123 56ß水";
    // 按如下分析：
    // %d：整数 
    // %f：浮点数
    // %9s：至多 9 个非空白字符的字符串
    // %2d：二位整数（数字 5 与 6）
    // %f：浮点数（数字 7、8、9）
    // %*d 不存储于任何位置的整数
    // ' '：所有连续空白符
    // %3[0-9]：至多 3 位数字的字符串（数字 5 与 6）
    // %2lc：两个宽字符，用多字节到宽转换
    const int ret = std::sscanf(input, "%d%f%9s%2d%f%*d %3[0-9]%2lc",
                                &amp;i, &amp;x, str1, &amp;j, &amp;y, str2, warr);

    std::cout &lt;&lt; "转换了 " &lt;&lt; ret &lt;&lt; " 个字段:\n"
                 "i = " &lt;&lt; i &lt;&lt; "\n"
                 "x = " &lt;&lt; x &lt;&lt; "\n"
                 "str1 = " &lt;&lt; str1 &lt;&lt; "\n"
                 "j = " &lt;&lt; j &lt;&lt; "\n"
                 "y = " &lt;&lt; y &lt;&lt; "\n"
                 "str2 = " &lt;&lt; str2 &lt;&lt; std::hex &lt;&lt; "\n"
                 "warr[0] = U+" &lt;&lt; (int)warr[0] &lt;&lt; "\n"
                 "warr[1] = U+" &lt;&lt; (int)warr[1] &lt;&lt; '\n';
}
 | output=
转换了 7 个字段:
i = 25
x = 5.432
str1 = Thompson
j = 56
y = 789
str2 = 56
warr[0] = U+df warr[1] = U+6c34
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/c/dsc vfscanf}}
{{dsc inc|cpp/io/c/dsc fgets}}
{{dsc inc|cpp/io/c/dsc fprintf}}
{{dsc inc|cpp/utility/dsc from_chars}} 
{{dsc see c|c/io/fscanf|scanf|fscanf|sscanf}}
{{dsc end}}

{{langlinks|cs|de|en|es|fr|it|ja|pt|ru}}
{{cpp/io/basic_istream/title|readsome}}
{{cpp/io/basic_istream/navbar}}
{{ddcl|
std::streamsize readsome( char_type* s, std::streamsize count );
}}

从输入流提取至多 {{c|count}} 个立即可用的字符。将提取的字符存储于 {{c|s}} 所指向的字符数组。

表现为{{named req|UnformattedInputFunction}}。构造并检查 sentry 对象后,

* 若 {{c|1=rdbuf()-&gt;in_avail() == -1}}，则调用 {{c|setstate(eofbit)}} 而不提取字符。

* 若 {{c|1=rdbuf()-&gt;in_avail() == 0}}，则不提取字符。

* 若 {{c|1=rdbuf()-&gt;in_avail() &gt; 0}}，则提取 {{c|std::min(rdbuf()-&gt;in_avail(), count)}} 个字符，并将它们存储到以 {{c|s}} 指向其首元素的字符数组中的相继位置。

===参数===
{{par begin}}
{{par | s |指向要存储字符到的字符数组的指针}}
{{par | count |要读取的最大字符数}}
{{par end}}

===返回值===
实际提取的字符数。

===异常===
{{include|cpp/io/stream_exceptions}}

===注解===
此函数的行为是高度实现限定的。例如，对 {{lc|std::ifstream}} 使用 {{tt|readsome()}} 时会导致明显的实现特定的效果。某些库实现在 {{lc|std::ifstream}} 打开文件时立即以数据填充底层 {{tt|filebuf}}，这意味着 {{tt|readsome()}} 总能读取到数据而且甚至可能读取到整个文件。而 {{lc|std::ifstream}} 的其他实现仅在请求实际输入操作时才从文件读取，这意味着文件打开后立即调用 {{tt|readsome()}} 都不会提取到任何字符。类似地，调用 {{c|std::cin.readsome()}} 可能返回所有悬置的未处理控制台输入，或可能始终返回零并且不提取字符。

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
{
    char c[10] = "*********"; // c[9] == '\0'

    // std::stringbuf 的整个缓冲区都可用于无阻塞读取
    std::istringstream input("This is sample text.");

    auto r = input.readsome(c, 5); // 读取 'This ' 并存储于 c[0] .. c[4]
    assert(r == 5);
    std::cout &lt;&lt; c &lt;&lt; '\n';

    r = input.readsome(c, 9); // 读取 'is sample' 并存储于 c[0] .. c[8]
    assert(r == 9);
    std::cout &lt;&lt; c &lt;&lt; '\n';
}
|output=
This ****
is sample
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/basic_istream/dsc read}}
{{dsc inc|cpp/io/basic_streambuf/dsc in_avail}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
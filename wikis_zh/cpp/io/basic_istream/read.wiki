{{cpp/io/basic_istream/title|read}}
{{cpp/io/basic_istream/navbar}}
{{ddcl|
basic_istream&amp; read( char_type* s, std::streamsize count );
}}

从流提取字符。

表现为{{named req|UnformattedInputFunction}}。构造并检查 sentry 对象后，提取字符并将它们存储到以 {{c|s}} 指向其首元素的字符数组中的相继位置。提取并存储字符，直至出现任何下列条件：

* 提取并存储了 {{c|count}} 个字符

* 输入序列上发生文件尾条件（该情况下调用 {{c|setstate(failbit{{!}}eofbit)}}）。成功提取的字符数能用 {{ltf|cpp/io/basic_istream/gcount}} 查询。

===参数===
{{par begin}}
{{par | s |指向要存储字符到的字符数组的指针}}
{{par | count |要读取的字符数}}
{{par end}}

===返回值===
{{c|*this}}

===异常===
{{include|cpp/io/stream_exceptions}}

===注解===
使用非转换的本地环境时（默认本地环境为非转换），此函数在 {{lc|std::basic_ifstream}} 中的覆写函数可以针对零复制的大块 I/O 进行优化（通过覆写 {{lc|std::streambuf::xsgetn}}）。

===示例===
{{example
|code=
#include &lt;cstdint&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;

int main()
{
    // read() 常用于二进制 I/O
    std::string bin = {'\x12', '\x12', '\x12', '\x12'};
    std::istringstream raw(bin);
    std::uint32_t n;
    if(raw.read(reinterpret_cast&lt;char*&gt;(&amp;n), sizeof n))
        std::cout &lt;&lt; std::hex &lt;&lt; std::showbase &lt;&lt; n &lt;&lt; '\n';

    // 为下个片段准备文件
    std::ofstream("test.txt", std::ios::binary) &lt;&lt; "abcd1\nabcd2\nabcd3";

    // 读取整个文件到 string
    if(std::ifstream is{"test.txt", std::ios::binary {{!}} std::ios::ate}) {
        auto size = is.tellg();
        std::string str(size, '\0'); // 构造 string 为流大小
        is.seekg(0);
        if(is.read(&amp;str[0], size))
            std::cout &lt;&lt; str &lt;&lt; '\n';
    }
}
|output=
0x12121212
abcd1
abcd2
abcd3
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/basic_ostream/dsc write}}
{{dsc inc|cpp/io/basic_istream/dsc operator_gtgt}}
{{dsc inc|cpp/io/basic_istream/dsc readsome}}
{{dsc inc|cpp/io/basic_istream/dsc get}}
{{dsc inc|cpp/io/basic_istream/dsc getline}}
{{dsc inc|cpp/io/c/dsc fread}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
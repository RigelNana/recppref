{{cpp/io/basic_istream/title|putback}}
{{cpp/io/basic_istream/navbar}}
{{ddcl|
basic_istream&amp; putback( char_type ch );
}}

将字符 {{c|ch}} 回放到输入流，使得下个提取的字符将为 {{c|ch}}。

首先清除 {{tt|eofbit}}，然后表现为{{named req|UnformattedInputFunction}}。构造并检查 sentry 对象后，如果 {{ltf|cpp/io/basic_ios/rdbuf}} 非空，那么就会调用 {{c|rdbuf()-&gt;sputbackc(ch)}}，它会在 {{c|ch}} 不等于最近输出的字符时调用 {{c|rdbuf()-&gt;pbackfail(ch)}}。

如果 {{tt|rdbuf()}} 为空或 {{c|rdbuf-&gt;sputbackc(ch)}} 返回了 {{c|Traits::eof()}}，那么就会调用 {{c|setstate(badbit)}}。

任何情况下都会将 {{rlpf|gcount}} 计数器设置为零。

===参数===
{{par begin}}
{{par|ch|要放入输入流的字符}}
{{par end}}

===返回值===
{{c|*this}}

===异常===
{{include|cpp/io/stream exceptions}}

===示例===
{{example
|演示修改和非修改 {{tt|putback()}} 间的差异
|code=
#include &lt;iostream&gt;
#include &lt;sstream&gt;
 
int main()
{
    std::stringstream s1("Hello, world"); // IO 流
    s1.get();
    if (s1.putback('Y')) // 修改缓冲区
        std::cout &lt;&lt; s1.rdbuf() &lt;&lt; '\n';
    else
        std::cout &lt;&lt; "putback 失败\n";

    std::cout &lt;&lt; "--\n";

    std::istringstream s2("Hello, world"); // 仅输入流
    s2.get();
    if (s2.putback('Y')) // 不能修改仅输入流
        std::cout &lt;&lt; s2.rdbuf() &lt;&lt; '\n';
    else
        std::cout &lt;&lt; "putback 失败\n";
    s2.clear();

    std::cout &lt;&lt; "--\n";

    s2.clear();
    if (s2.putback('H')) // 非修改回放
        std::cout &lt;&lt; s2.rdbuf() &lt;&lt; '\n';
    else
        std::cout &lt;&lt; "putback 失败\n";
}
|output=
Yello, world
--
putback 失败
--
Hello, world
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2243|std=C++98|before=调用 {{tt|sputbackc()}} 时没有带上实参|after=以 {{c|ch}} 作为实参}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/basic_streambuf/dsc sputbackc}}
{{dsc inc|cpp/io/basic_istream/dsc unget}}
{{dsc inc|cpp/io/basic_istream/dsc peek}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
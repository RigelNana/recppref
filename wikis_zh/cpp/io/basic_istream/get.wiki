{{cpp/io/basic_istream/title|get}}
{{cpp/io/basic_istream/navbar}}
{{dcl begin}}
{{dcl|num=1|
int_type get();
}}
{{dcl|num=2|
basic_istream&amp; get( char_type&amp; ch );
}}
{{dcl|num=3|
basic_istream&amp; get( char_type* s, std::streamsize count );
}}
{{dcl|num=4|
basic_istream&amp; get( char_type* s, std::streamsize count, char_type delim );
}}
{{dcl|num=5|
basic_istream&amp; get( basic_streambuf&amp; strbuf );
}}
{{dcl|num=6|
basic_istream&amp; get( basic_streambuf&amp; strbuf, char_type delim );
}}
{{dcl end}}

从流提取一个或多个字符。

所有版本都表现为{{named req|UnformattedInputFunction}}。构造并检查 {{tt|sentry}} 对象后，这些函数进行下列操作：

@1@ 读取一个字符，如果可用就返回它。否则，返回 {{c|Traits::eof()}} 并设置 {{lc|failbit}} 和 {{lc|eofbit}}。

@2@ 读取一个字符，如果可用就将它存储到 {{c|ch}}。否则，不修改 {{c|ch}} 并设置 {{lc|failbit}} 和 {{lc|eofbit}}。注意与有格式字符输入 {{c/core|operator&gt;&gt;}} 不同，此函数不对类型 {{c/core|signed char}} 和 {{c/core|unsigned char}} 重载。

@3@ 同 {{c|get(s, count, widen('\n'))}}，即读取最多 {{c|std::max(0, count - 1)}} 个字符并将它们存储到 {{c|s}} 所指向的字符串中，直到找到 {{c|'\n'}}。

@4@ 读取字符并将它们存储到以 {{c|s}} 指向首元素的字符数组中的相继位置。提取并存储字符，直到满足下列任一条件：
* {{c|count}} 小于 {{c|1}} 或已存储 {{c|count - 1}} 个字符。
* 输入序列中出现文件尾条件（调用 {{c|setstate(eofbit)}}）。
* 下个可用输入字符 {{c|c}} 等于 {{c|delim}}，以 {{c|Traits::eq(c, delim)}} 确定。不会提取此字符（与 {{rlpf|getline}} 不同）。

@@ 任何情况下，如果 {{c|count &gt; 0}}，那么将空字符（{{c|CharT()}}）存储到数组的下个相继位置。

@5@ 同 {{c|get(strbuf, widen('\n'))}}，即读取可用字符并将它们插入到给定的 {{ltt|cpp/io/basic_streambuf}} 对象，直到找到 {{c|'\n'}}。

@6@ 读取字符并将它们插入到给定的 {{lc|std::basic_streambuf}} 对象所控制的输出序列。提取并插入字符到 {{c|strbuf}} 中，直到满足下列任一条件：
* 输入序列中出现文件尾条件。
* 插入输出序列失败（该情况下不会提取无法插入的字符）。
* 下个可用输入字符 {{c|c}} 等于 {{c|delim}}，以 {{c|Traits::eq(c, delim)}} 确定。不会提取此字符。
* 出现异常（该情况下捕获而不重抛异常）。

没有提取到字符时会调用 {{c|setstate(failbit)}}。

所有版本都设置 {{lc|gcount()}} 的值为提取到的字符数。

===参数===
{{par begin}}
{{par|ch|到要写入结果到的字符的引用}}
{{par|s|指向要存储结果到的字符串的指针}}
{{par|count|{{c|s}} 所指向的字符串的大小}}
{{par|delim|用以停止提取的分隔字符。它不会被提取或存储。}}
{{par|strbuf|要读取内容到的流缓冲}}
{{par end}}

===返回值===
@1@ 提取到的字符或 {{c|Traits::eof()}}。
@2-6@ {{c|*this}}

===异常===
{{include|cpp/io/stream exceptions}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
{
    std::istringstream s1("Hello, world.");
    char c1 = s1.get(); // 读取'H'
    std::cout &lt;&lt; "在读取 " &lt;&lt; c1 &lt;&lt; " 后，gcount() == " &lt;&lt;  s1.gcount() &lt;&lt; '\n';
    
    char c2;
    s1.get(c2);         // 读取 'e'
    char str[5];
    s1.get(str, 5);     // 读取 "llo,"
    std::cout &lt;&lt; "在读取 " &lt;&lt; str &lt;&lt; "后，gcount() == " &lt;&lt;  s1.gcount() &lt;&lt; '\n';
    
    std::cout &lt;&lt; c1 &lt;&lt; c2 &lt;&lt; str;
    s1.get(*std::cout.rdbuf()); // 读取剩余内容，不包括 '\n'
    std::cout &lt;&lt; "\n在最后一次 get() 后，gcount() == " &lt;&lt; s1.gcount() &lt;&lt; '\n';
}
|output=
在读取 H 后，gcount() == 1
在读取 llo, 后，gcount() == 4
Hello, world.
在最后一次 get() 后，gcount() == 7
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=370|std=C++98|before=重载 {{v|5}} 的效果是 {{c|get(s, count, widen('\n'))}}，&lt;br&gt;但这是重载 {{v|3}} 的效果|after=改成&lt;br&gt;{{c|get(strbuf, widen('\n'))}}}}
{{dr list item|wg=lwg|dr=531|std=C++98|before=重载 {{v|3,4}} 无法处理 {{c|count}} 非正的情况|after=此时不会提取字符}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/basic_istream/dsc read}}
{{dsc inc|cpp/io/basic_istream/dsc operator_gtgt}}
{{dsc inc|cpp/io/basic_istream/dsc operator_gtgt2}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
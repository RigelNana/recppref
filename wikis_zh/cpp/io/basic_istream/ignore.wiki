{{cpp/io/basic_istream/title|ignore}}
{{cpp/io/basic_istream/navbar}}
{{dcl begin}}
{{dcl|1=
basic_istream&amp; ignore( std::streamsize count = 1, int_type delim = Traits::eof() );
}}
{{dcl end}}

从输入流提取并舍弃字符，直至并包含 {{c|delim}}。

{{tt|ignore}} 表现为{{named req|UnformattedInputFunction}}。构造并检查 sentry 对象后，它从流提取并舍弃字符，直到满足任一下列条件：

* 已提取 {{c|count}} 个字符。在 {{c|count}} 等于 {{c|std::numeric_limits&lt;std::streamsize&gt;::max()}} 的特殊情况下不进行此测试。

* 输入序列中出现文件尾条件，此时会调用 {{c|setstate(eofbit)}}。

* 输入序列中的下个可用字符 {{c|c}} 是 {{c|delim}}，以 {{c|Traits::eq_int_type(Traits::to_int_type(c), delim)}} 确定。提取并舍弃分隔符。{{c|delim}} 是 {{c|Traits::eof()}} 时不进行此测试。

===参数===
{{par begin}}
{{par|count|要提取的字符数}}
{{par|delim|提取停止处的分隔字符。也会被提取。}}
{{par end}}

===返回值===
{{c|*this}}

===异常===
{{include|cpp/io/stream exceptions}}

===示例===
{{example
|下列代码用 {{tt|ignore}} 跳过非数值输入：
|code=
#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;sstream&gt;

constexpr auto max_size = std::numeric_limits&lt;std::streamsize&gt;::max();

int main()
{
    std::istringstream input("1\n"
                             "some non-numeric input\n"
                             "2\n");
    for (;;)
    {
        int n;
        input &gt;&gt; n;
        
        if (input.eof() {{!!}} input.bad())
            break;
        else if (input.fail())
        {
            input.clear(); // 重置 failbit
            input.ignore(max_size, '\n'); // 跳过坏输入
        }
        else
            std::cout &lt;&lt; n &lt;&lt; '\n';
    }
}
|output=
1
2
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=172|std=C++98|before={{c|count}} 的类型被误指定为 {{c|int}}|after=改成 {{lc|std::streamsize}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/basic_istream/dsc get}}
{{dsc inc|cpp/io/basic_istream/dsc getline}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/io/basic_istream/title|basic_istream}}
{{cpp/io/basic_istream/navbar}}
{{dcl begin}}
{{dcl|num=1|1=
explicit basic_istream( std::basic_streambuf&lt;CharT, Traits&gt;* sb );
}}
{{dcl|num=2|since=c++11|1=
protected:
basic_istream( const basic_istream&amp; rhs ) = delete;
}}
{{dcl|num=3|since=c++11|1=
protected:
basic_istream( basic_istream&amp;&amp; rhs );
}}
{{dcl end}}

1) 构造 {{tt|basic_istream}} 对象，通过调用 {{c|basic_ios::init(sb)}} 赋初始值给基类。初始化 {{tt|gcount()}} 的值为零。

2) 复制构造函数为受保护，且被弃置。输入流不可复制。

3) 移动构造函数从 {{c|rhs}} 复制 {{tt|gcount()}} 的值，设置 {{c|rhs}} 的 {{tt|gcount()}} 值为零，并使用 {{c|basic_ios&lt;CharT, Traits&gt;::move(rhs)}} 从 {{c|rhs}} 移动除了 {{tt|rdbuf()}} 之外的所有 {{tt|basic_ios}} 成员到 {{c|*this}} 中。此移动构造函数受保护：它为可移动输入流类 {{lc|std::basic_ifstream}} 和 {{lc|std::basic_istringstream}} 的移动构造函数所调用，它们知道如何正确地移动关联流缓冲。

===参数===
{{par begin}}
{{par | sb |用作底层设备的流缓冲}}
{{par end}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
{
    std::istringstream s1("hello");
    std::istream s2(s1.rdbuf()); // OK: s2 与 s1 共享缓冲区

//  std::istream s3(std::istringstream("test")); // 错误：移动构造函数为受保护
//  std::istream s4(s2);                         // 错误：复制构造函数被弃置
    std::istringstream s5(std::istringstream("world")); // OK: 派生类调用移动构造函数

    std::cout &lt;&lt; s2.rdbuf() &lt;&lt; ' ' &lt;&lt; s5.rdbuf() &lt;&lt; '\n';
}
| output=
hello world
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
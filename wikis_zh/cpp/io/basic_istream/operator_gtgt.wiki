{{cpp/io/basic_istream/title|operator&gt;&gt;}}
{{cpp/io/basic_istream/navbar}}
{{dcl begin}}
{{dcl|num=1|
basic_istream&amp; operator&gt;&gt;( unsigned short&amp; value );
}}
{{dcl|num=2|
basic_istream&amp; operator&gt;&gt;( unsigned int&amp; value );
}}
{{dcl|num=3|
basic_istream&amp; operator&gt;&gt;( long&amp; value );
}}
{{dcl|num=4|
basic_istream&amp; operator&gt;&gt;( unsigned long&amp; value );
}}
{{dcl|num=5|since=c++11|
basic_istream&amp; operator&gt;&gt;( long long&amp; value );
}}
{{dcl|num=6|since=c++11|
basic_istream&amp; operator&gt;&gt;( unsigned long long&amp; value );
}}
{{dcl|num=7|
basic_istream&amp; operator&gt;&gt;( float&amp; value );
}}
{{dcl|num=8|
basic_istream&amp; operator&gt;&gt;( double&amp; value );
}}
{{dcl|num=9|
basic_istream&amp; operator&gt;&gt;( long double&amp; value );
}}
{{dcl|num=10| 
basic_istream&amp; operator&gt;&gt;( bool&amp; value );
}}
{{dcl|num=11|
basic_istream&amp; operator&gt;&gt;( void*&amp; value );
}}
{{dcl|num=12|
basic_istream&amp; operator&gt;&gt;( short&amp; value );
}}
{{dcl|num=13|
basic_istream&amp; operator&gt;&gt;( int&amp; value );
}}
{{dcla|num=14|since=c++23|
basic_istream&amp; operator&gt;&gt;( /* 扩展浮点数类型 */&amp; value );
}}
{{dcl|num=15|
basic_istream&amp; operator&gt;&gt;( std::ios_base&amp; (*func)(std::ios_base&amp;) );
}}
{{dcl|num=16|
basic_istream&amp; operator&gt;&gt;( std::basic_ios&lt;CharT, Traits&gt;&amp; 
                               (*func)(std::basic_ios&lt;CharT, Traits&gt;&amp;) );
}}
{{dcl|num=17|
basic_istream&amp; operator&gt;&gt;( basic_istream&amp; (*func)(basic_istream&amp;) );
}}
{{dcl|num=18|
basic_istream&amp; operator&gt;&gt;( std::basic_streambuf&lt;CharT, Traits&gt;* sb );
}}
{{dcl end}}

从输入流提取值。

@1-11@ 跳过潜在的前导空格并提取值。将提取到的值存储到给定的引用 {{c|value}}。

@@ 此函数表现为{{named req|FormattedInputFunction}}。构造并检查 sentry 对象（可能会跳过前导空格），通过调用 {{l2tf std|cpp/locale/num_get/get}} 提取值。

@12@ 跳过潜在的前导空格并提取 {{c/core|short}} 值。将提取到的值存储到给定的引用 {{c|value}}。

@@ 此函数表现为{{named req|FormattedInputFunction}}。构造并检查 sentry 对象（可能会跳过前导空格），通过调用 {{l2tf std|cpp/locale/num_get/get}} 提取 {{c/core|long}} 值 {{c|lval}}，然后：
* 如果 {{c|lval &lt; std::numeric_limits&lt;short&gt;::min()}}，那么就会设置 {{tt|failbit}} 并将 {{c|std::numeric_limits&lt;short&gt;::min()}} 存储到 {{c|val}}。
* 否则，如果 {{c|std::numeric_limits&lt;short&gt;::max() &lt; lval}}，那么就会设置 {{tt|failbit}} 并将 {{c|std::numeric_limits&lt;short&gt;::max()}} 存储到 {{c|val}}。
* 否则，将 {{c|static_cast&lt;short&gt;(lval)}} 存储到 {{c|val}}。

@13@ 跳过潜在的前导空格并提取 {{c/core|int}} 值。将提取到的值存储到给定的引用 {{c|value}}。

@@ 此函数表现为{{named req|FormattedInputFunction}}。构造并检查 sentry 对象（可能会跳过前导空格），通过调用 {{l2tf std|cpp/locale/num_get/get}} 提取 {{c/core|long}} 值 {{c|lval}}，然后：
* 如果 {{c|lval &lt; std::numeric_limits&lt;int&gt;::min()}}，那么就会设置 {{tt|failbit}} 并将 {{c|std::numeric_limits&lt;int&gt;::min()}} 存储到 {{c|val}}。
* 否则，如果 {{c|std::numeric_limits&lt;int&gt;::max() &lt; lval}}，那么就会设置 {{tt|failbit}} 并将 {{c|std::numeric_limits&lt;int&gt;::max()}} 存储到 {{c|val}}。
* 否则，将 {{c|static_cast&lt;int&gt;(lval)}} 存储到 {{c|val}}。

@14@ 跳过潜在的前导空格并提取扩展浮点数。将提取到的值存储到给定的引用 {{c|value}}。标准库提供所有以无 cv 限定的[[cpp/language/types#扩展浮点数类型|扩展浮点数类型]]作为参数 {{c|value}} 的被引用类型的重载。

@@ 按以下方法确定标准浮点数类型 {{tt|FP}}：
* 如果 {{c/core|/* 扩展浮点数类型 */}} 的[[cpp/language/usual arithmetic conversions#浮点数转换等级|浮点数转换等级]]小于或等于 {{c/core|float}} 的对应等级，那么 {{tt|FP}} 是 {{c/core|float}}。
* 否则，如果 {{c/core|/* 扩展浮点数类型 */}} 的浮点数转换等级小于或等于 {{c/core|double}} 的对应等级，那么 {{tt|FP}} 是 {{c/core|double}}。
* 否则，{{tt|FP}} 是 {{c/core|long double}}。

@@ 此函数表现为{{named req|FormattedInputFunction}}。构造并检查 sentry 对象（可能会跳过前导空格），通过调用 {{l2tf std|cpp/locale/num_get/get}} 提取 {{tt|FP}} 值 {{c|fval}}，然后：
* 如果 {{c|fval &lt; -std::numeric_limits&lt;/* 扩展浮点数类型 */&gt;::max()}}，那么就会设置 {{tt|failbit}} 并将 {{c|-std::numeric_limits&lt;/* 扩展浮点数类型 */&gt;::max()}} 存储到 {{c|val}}。
* 否则，如果 {{c|std::numeric_limits&lt;/* 扩展浮点数类型 */&gt;::max() &lt; fval}}，那么就会设置 {{tt|failbit}} 并将 {{c|std::numeric_limits&lt;/* 扩展浮点数类型 */&gt;::max()}} 存储到 {{c|val}}。
* 否则，将 {{c|static_cast&lt;/* 扩展浮点数类型 */&gt;(fval)}} 存储到 {{c|val}}。

@15-17@ 调用 {{c|func(*this)}}，其中 {{c|func}} 是输入/输出操纵符。

@18@ 表现为{{named req|UnformattedInputFunction}}。在构造并检查 sentry 对象后，从 {{c|*this}} 提取所有数据并将它存储到 {{c|sb}}。满足下列条件之一时停止提取：
:* 输入序列上出现文件尾；
:* 输出序列中插入失败（此时不会提取要被插入的字符）；
:* 出现异常（此时异常会被捕获，而且只有在未提取到任何字符并且 {{tt|exceptions()}} 中启用了 {{tt|failbit}} 时才会重抛）。
任一情况下，将提取的字符数存储到成员变量中，它的值可以通过对 {{lc|gcount()}} 的后继调用访问。如果 {{c|sb}} 是空指针或未插入字符到 {{c|sb}} 中，那么就会调用 {{c|setstate(failbit)}}（启用时会抛出 {{lc|std::ios_base::failure}}）。

如果提取失败（比如当预期数字时输入了字母），那么写入零到 {{c|value}} 并设置 {{tt|failbit}}。对于有符号整数，如果提取结果对于 {{c|value}} 过大或过小，那么（分别）写入 {{c|std::numeric_limits&lt;T&gt;::max()}} 或 {{c|std::numeric_limits&lt;T&gt;::min()}} 并设置 {{tt|failbit}} 标志。对于无符号整数，如果提取结果对于 {{c|value}} 过大或过小，那么写入 {{c|std::numeric_limits&lt;T&gt;::max()}} 并设置 {{tt|failbit}} 标志。

===参数===
{{par begin}}
{{par|value|到要存储提取值到的整数或浮点数的引用}}
{{par|func|指向输入/输出操纵符函数的指针}}
{{par|sb|指向要写入全部数据到的流缓冲的指针}}
{{par end}}

===返回值===
@1-16,18@ {{c|*this}}
@17@ {{c|func(*this)}}

===注解===
对于重载 {{v|14|14}}，当扩展浮点数类型的浮点数转换等级与任何标准浮点数类型的等级都不相同时，转换过程中的双重舍入会导致不精确结果。在需要最大精确性的场合可以使用 {{ltf std|cpp/utility/from_chars}}。

===示例===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
{
    std::string input = "41 3.14 false hello world";
    std::istringstream stream(input);
    
    int n;
    double f;
    bool b;
    
    stream &gt;&gt; n &gt;&gt; f &gt;&gt; std::boolalpha &gt;&gt; b;
    std::cout &lt;&lt; "n = " &lt;&lt; n &lt;&lt; '\n'
              &lt;&lt; "f = " &lt;&lt; f &lt;&lt; '\n'
              &lt;&lt; "b = " &lt;&lt; std::boolalpha &lt;&lt; b &lt;&lt; '\n';
    
    // 用 streambuf 重载提取剩余内容
    stream &gt;&gt; std::cout.rdbuf();
    std::cout &lt;&lt; '\n';
}
|output=
n = 41
f = 3.14
b = false
hello world
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=64|std=C++98|before=不明确重载 {{v|18}} 是否只能重抛因调用&lt;br&gt;{{c|setstate(failbit)}} 而抛出的 {{l2tt|cpp/io/ios_base/failure}}|after=可以重抛所有异常}}
{{dr list item|wg=lwg|dr=118|std=C++98|before=重载 {{v|12,13}} 通过 {{l2tt|cpp/locale/num_get/get}} 代理提取操作，&lt;br&gt;但它没有为 {{c/core|short}} 以及 {{c/core|int}} 重载|after=输入 {{c/core|short}} 或&lt;br&gt;{{c/core|int}} 时会提取 {{c/core|long}}}}
{{dr list item|wg=lwg|dr=413|std=C++98|before=重载 {{v|18}} 只会重抛在从 {{c|sb}} 提取字符时&lt;br&gt;抛出的异常，但是字符是从 {{c|*this}} 提取的|after=将 {{c|sb}} 改成 {{c|*this}}}}
{{dr list item|wg=lwg|dr=567|std=C++98|before=重载 {{v|18}} 因 {{lwg|60}} 的解决方案而表现为&lt;br&gt;{{named req|FormattedInputFunction}}|after=表现为&lt;br&gt;{{named req|UnformattedInputFunction}}}}
{{dr list item|wg=lwg|dr=661|std=C++98|before=重载 {{v|12,13}} 由于 {{lwg|118}} 的解决&lt;br&gt;方案不会将提取到的数字存储到 {{c|value}}|after=在未发生上溢的情况下会存储}}
{{dr list item|wg=lwg|dr=696|std=C++98|before=提取失败时不会更改 {{c|value}}|after=设为零或最大/最小值}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/io/basic_istream/dsc operator gtgt2}}
{{dsc inc|cpp/string/basic_string/dsc operator ltltgtgt}}
{{dsc inc|cpp/utility/bitset/dsc operator ltltgtgt2}}
{{dsc inc|cpp/numeric/complex/dsc operator ltltgtgt}}
{{dsc inc|cpp/numeric/random/engine/dsc operator ltltgtgt|linear_congruential_engine}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator ltltgtgt|uniform_int_distribution}}
{{dsc inc|cpp/io/basic_istream/dsc read}}
{{dsc inc|cpp/io/basic_istream/dsc readsome}}
{{dsc inc|cpp/io/basic_istream/dsc get}}
{{dsc inc|cpp/io/basic_istream/dsc getline}}
{{dsc inc|cpp/utility/dsc from_chars}} 
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
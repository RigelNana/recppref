{{title|日期和时间库}}
{{cpp/chrono/navbar}}

C++ 包含对二类时间操作的支持：

* {{ls|#chrono 库}}，灵活汇集了一些以各种精度跟踪时间的类型（如 {{lc|std::chrono::time_point}}）。
* C 风格日期和时间工具（如 {{lc|std::time}}）。

{{anchor|chrono 库}}
===[[cpp/header/chrono|{{tt|chrono}} 库]] {{mark since c++11}}===
{{tt|chrono}} 库定义数种主要类型以及工具函数和常用 typedef。
* {{ls|#时钟}}
* {{ls|#时间点}}
* {{ls|#时长}}
{{rrev|since=c++20|
* {{ls|#日历}}
* {{ls|#时区}}
}}

====时钟====
时钟由起点（或纪元）及计次频率组成。例如，时钟可以拥有 1970 年 1 月 1 日的纪元，和每一秒的计次。C++ 定义了以下几种时钟类型：

{{dsc begin}}
{{dsc header|chrono}}
{{dsc namespace|std::chrono}}
{{dsc inc|cpp/chrono/dsc system_clock}}
{{dsc inc|cpp/chrono/dsc steady_clock}}
{{dsc inc|cpp/chrono/dsc high_resolution_clock}}

{{dsc inc|cpp/chrono/dsc is_clock}}
{{dsc inc|cpp/chrono/dsc utc_clock}}
{{dsc inc|cpp/chrono/dsc tai_clock}}
{{dsc inc|cpp/chrono/dsc gps_clock}}
{{dsc inc|cpp/chrono/dsc file_clock}}
{{dsc inc|cpp/chrono/dsc local_t}}
{{dsc end}}

====时间点====
时间点是从特定时钟的纪元开始经过的时间时长。

{{dsc begin}}
{{dsc header|chrono}}
{{dsc namespace|std::chrono}}
{{dsc inc|cpp/chrono/dsc time_point}}
{{dsc inc|cpp/chrono/dsc clock_time_conversion}}
{{dsc inc|cpp/chrono/dsc clock_cast}}
{{dsc end}}

====时长====
时长由时间跨度组成，定义为某时间单位的某个计次数。例如，“42 秒”可表示为由 42 个 1 秒时间点位的计次所组成的时长。

{{dsc begin}}
{{dsc header|chrono}}
{{dsc namespace|std::chrono}}
{{dsc inc|cpp/chrono/dsc duration}}
{{dsc end}}

{{anchor|当天时刻}}
====当天时刻 {{mark since c++20}}====
若适用，{{tt|hh_mm_ss}} 会将表示自午夜起经过时间的时长分割成时、分、秒和秒的小数部分。它主要是一种格式化工具。

{{dsc begin}}
{{dsc header|chrono}}
{{dsc namespace|std::chrono}}
{{dsc inc|cpp/chrono/dsc hh_mm_ss}}
{{dsc inc|cpp/chrono/dsc hour fun}}
{{dsc end}}

{{anchor|日历}}
====日历 {{mark since c++20}}====
{{dsc begin}}
{{dsc header|chrono}}
{{dsc namespace|std::chrono}}
{{dsc inc|cpp/chrono/dsc last_spec}}
{{dsc inc|cpp/chrono/dsc day}}
{{dsc inc|cpp/chrono/dsc month}}
{{dsc inc|cpp/chrono/dsc year}}
{{dsc inc|cpp/chrono/dsc weekday}}
{{dsc inc|cpp/chrono/dsc weekday_indexed}}
{{dsc inc|cpp/chrono/dsc weekday_last}}
{{dsc inc|cpp/chrono/dsc month_day}}
{{dsc inc|cpp/chrono/dsc month_day_last}}
{{dsc inc|cpp/chrono/dsc month_weekday}}
{{dsc inc|cpp/chrono/dsc month_weekday_last}}
{{dsc inc|cpp/chrono/dsc year_month}}
{{dsc inc|cpp/chrono/dsc year_month_day}}
{{dsc inc|cpp/chrono/dsc year_month_day_last}}
{{dsc inc|cpp/chrono/dsc year_month_weekday}}
{{dsc inc|cpp/chrono/dsc year_month_weekday_last}}
{{dsc inc|cpp/chrono/dsc operator/}}
{{dsc end}}

{{anchor|时区}}
====时区 {{mark since c++20}}====
{{dsc begin}}
{{dsc header|chrono}}
{{dsc namespace|std::chrono}}
{{dsc inc|cpp/chrono/dsc tzdb}}
{{dsc inc|cpp/chrono/dsc tzdb_list}}
{{dsc inc|cpp/chrono/dsc tzdb functions}}
{{dsc inc|cpp/chrono/dsc locate_zone}}
{{dsc inc|cpp/chrono/dsc current_zone}}
{{dsc inc|cpp/chrono/dsc time_zone}}
{{dsc inc|cpp/chrono/dsc sys_info}}
{{dsc inc|cpp/chrono/dsc local_info}}
{{dsc inc|cpp/chrono/dsc choose}}
{{dsc inc|cpp/chrono/dsc zoned_traits}}
{{dsc inc|cpp/chrono/dsc zoned_time}}
{{dsc inc|cpp/chrono/dsc leap_second}}
{{dsc inc|cpp/chrono/utc_clock/dsc leap_second_info}}
{{dsc inc|cpp/chrono/utc_clock/dsc get_leap_second_info}}
{{dsc inc|cpp/chrono/dsc time_zone_link}}
{{dsc inc|cpp/chrono/dsc nonexistent_local_time}}
{{dsc inc|cpp/chrono/dsc ambiguous_local_time}}
{{dsc end}}

{{anchor|字面量}}
====字面量 {{mark since c++14}}====
{{dsc begin}}
{{dsc header|chrono}}
{{dsc namespace|std::literals::chrono_literals|inline=true}}
{{dsc inc|cpp/chrono/dsc operator""y}}
{{dsc inc|cpp/chrono/dsc operator""d}}
{{dsc inc|cpp/chrono/dsc operator""h}}
{{dsc inc|cpp/chrono/dsc operator""min}}
{{dsc inc|cpp/chrono/dsc operator""s}}
{{dsc inc|cpp/chrono/dsc operator""ms}}
{{dsc inc|cpp/chrono/dsc operator""us}}
{{dsc inc|cpp/chrono/dsc operator""ns}}
{{dsc end}}

{{anchor|chrono 输入/输出}}
===={{tt|chrono}} 输入/输出 {{mark since c++20}}====
{{dsc begin}}
{{dsc header|chrono}}
{{dsc namespace|std::chrono}}
{{dsc inc|cpp/chrono/dsc parse}}
{{dsc end}}

===注解===
{{ftm begin|sort=yes}}
{{ftm|__cpp_lib_chrono|std=C++17|value=201510L|rowspan="4"|对 {{lc|std::chrono::duration}} 和 {{lc|std::chrono::time_point}} 进行舍入的函数}}
{{ftm|-|std=C++17|value=201611L|std=C++17|{{lc|std::chrono::duration}} 和 {{lc|std::chrono::time_point}} 所有成员函数的 {{c/core|constexpr}}}}
{{ftm|-|std=C++17|value=201907L|std=C++20|{{ls|cpp/chrono#日历}}和{{ls|cpp/chrono#时区}}}}
{{ftm|-|std=C++26|value=202306L|std=C++26|{{tt|std::chrono}} 值类的[[cpp/utility/hash|散列]]支持}}
{{ftm end}}

===[[cpp/chrono/c|C 风格日期与时间库]]===
同时提供 C 风格日期与时间函数，例如 {{lc|std::time_t}}、{{lc|std::difftime}} 和 {{lc|CLOCKS_PER_SEC}}。

===示例===
{{example
|code=
#include &lt;chrono&gt;
#include &lt;iostream&gt;
 
long Fibonacci(unsigned n)
{
    return n &lt; 2 ? n : Fibonacci(n - 1) + Fibonacci(n - 2);
}
 
int main()
{
    // 测量并显示函数调用的执行时间。
    const auto start{std::chrono::steady_clock::now()};
    const auto fb{Fibonacci(42)};
    const auto finish{std::chrono::steady_clock::now()};
    const std::chrono::duration&lt;double&gt; elapsed_seconds = finish - start;
    
    std::cout &lt;&lt; "Fibonacci(42)：" &lt;&lt; fb &lt;&lt; "\n经过时间：";
//  std::cout &lt;&lt; elapsed_seconds.count() &lt;&lt; "s\n"; // C++20 前
    std::cout &lt;&lt; elapsed_seconds &lt;&lt; '\n'; // C++20 的 chrono::duration operator&lt;&lt;

    // 打印 UTC 和本地时间。
    const auto tp_utc{std::chrono::system_clock::now()};
    std::cout &lt;&lt; "当前时间（UTC）为：" &lt;&lt; tp_utc &lt;&lt; "\n当前时间（本地）为："
              &lt;&lt; std::chrono::current_zone()-&gt;to_local(tp_utc) &lt;&lt; '\n';
}
|p=true
|output=
Fibonacci(42)：267914296
经过时间：0.728532s
当前时间（UTC）为：2025-02-10 06:22:39.420666960
当前时间（本地）为：2025-02-10 09:22:39.420666960
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{title|独立与宿主实现}}
{{cpp/navbar}}

C++ 标准定义了两种实现：'''''宿主'''''与'''''独立'''''实现。C++ 标准对{{i|宿主}}实现所规定的标准库标头集合比对{{i|独立}}实现所规定的大很多。{{i|独立}}实现中程序可能在没有操作系统的情况下运行。

实现的种类由实现定义。{{rev inl|since=c++11|预定义宏 {{tt|__STDC_HOSTED__}} 在宿主实现中会展开成 {{c|1}}，在独立实现中会展开成 {{c|0}}。}}

{{rrev|since=c++11|1=
===针对[[cpp/language/memory model|多线程执行与数据竞争]]的规定===
{{(!}} cellpadding=8 {{!}}
! ''独立'' !! ''宿主''
{{!}}-
{{!}} {{i|独立}}实现下，程序能否拥有多于一个[[cpp/thread|执行线程]]由实现定义。
{{!}} {{i|宿主}}实现下，C++ 程序可以拥有同时运行的多于一个[[cpp/thread|线程]]。
{{!)}}
}}

===针对 {{ltt|cpp/language/main function|main}} 函数的要求===
{| cellpadding=8|
|-
! ''独立'' !! ''宿主''
|-
| {{i|独立}}实现中，是否要求程序定义 {{ltt|cpp/language/main function|main}} 函数是由实现定义的。启动与终止过程是由实现定义的；启动过程中包含执行具有静态[[cpp/language/storage duration|存储期]]的[[cpp/language/scope#命名空间作用域|命名空间作用域]]对象的[[cpp/language/constructor|构造函数]]；终止过程中包含执行具有静态[[cpp/language/storage duration|存储期]]的对象的[[cpp/language/destructor|析构函数]]。
| {{i|宿主}}实现中，程序必须包含一个名为 {{ltt|cpp/language/main function|main}} 的全局函数。程序执行时启动一个主[[cpp/thread|执行线程]]，在其中调用 {{tt|main}} 函数，并且具有静态[[cpp/language/storage duration|存储期]]的变量将在其中被初始化和销毁。
|}

{{anchor|标头规定}}
===针对[[cpp/header|标准库标头]]的规定===
{{i|独立}}实现拥有由实现定义的标头集合。此集合至少包含下表中的标头。

对于部分独立的标头，独立实现只需要提供对应概要中的部分实体：
* 如果实体备注为 {{c/core|// 独立}}，那么保证会提供它。
{{rrev|since=c++26|
* 如果实体（函数或函数模板）备注为 {{c/core|// 独立或弃置}}，那么保证会提供或弃置它。
}}
* 如果实体在某个概要以 {{c/core|// 全部独立}} 或 {{c/core|// 基本独立}} 开始的标头中声明，那么在该实体本身没有被备注的情况下保证会提供它。

====独立﻿实现需要的标头====
&lt;div style="width: fit-content; max-height: 80vh; overflow-y: auto;"&gt;
{|class="wikitable" style="margin: 0;"
|-
!库
!组件
!标头
!{{nbsp}}是否独立{{nbsp}}
|-
|rowspan=13|{{ls|cpp/utility#语言支持}}
|通用定义
|{{header|cstddef}}
|{{yes|全部}}
|-
|C 标准库
|{{header|cstdlib}}
|{{maybe|部分}}
|-
|实现的属性
|{{header|cfloat}}&lt;br&gt;{{header|climits}} {{mark since c++11}}&lt;br&gt;{{header|limits}}&lt;br&gt;{{header|version}} {{mark since c++20}}
|{{yes|全部}}
|-
|整数类型
|{{header|cstdint}} {{mark since c++11}}
|{{yes|全部}}
|-
|动态内存管理
|{{header|new}}
|{{yes|全部}}
|-
|类型鉴别
|{{header|typeinfo}}
|{{yes|全部}}
|-
|源代码位置
|{{header|source_location}} {{mark since c++20}}
|{{yes|全部}}
|-
|异常处理
|{{header|exception}}
|{{yes|全部}}
|-
|初始化器列表
|{{header|initializer_list}} {{mark since c++11}}
|{{yes|全部}}
|-
|比较
|{{header|compare}} {{mark since c++20}}
|{{yes|全部}}
|-
|协程支持
|{{header|coroutine}} {{mark since c++20}}
|{{yes|全部}}
|-
|其他运行时支持
|{{header|cstdarg}}
|{{yes|全部}}
|-
|调试支持
|{{header|debugging}} {{mark since c++26}}
|{{yes|全部}}
|-
|colspan=2|[[cpp/concepts|概念]]
|{{header|concepts}} {{mark since c++20}}
|{{yes|全部}}
|-
|rowspan=2|[[cpp/error|诊断]]
|错误号
|{{header|cerrno}} {{mark since c++26}}
|{{maybe|部分}}
|-
|系统错误支持
|{{header|system_error}} {{mark since c++26}}
|{{maybe|部分}}
|-
|[[cpp/memory|内存管理]]{{nbsp}}
|内存
|{{header|memory}} {{mark since c++23}}
|{{maybe|部分}}
|-
|rowspan=2|[[cpp/meta|元编程]]
|类型特性
|{{header|type_traits}} {{mark since c++11}}
|{{yes|全部}}
|-
|编译时有理数算术{{nbsp}}
|{{header|ratio}} {{mark since c++23}}
|{{yes|全部}}
|-
|rowspan=5|[[cpp/utility#通用工具|通用工具]]
|工具组件
|{{header|utility}} {{mark since c++23}}
|{{yes|全部}}
|-
|多元组
|{{header|tuple}} {{mark since c++23}}
|{{yes|全部}}
|-
|函数对象
|{{header|functional}} {{mark since c++20}}
|{{maybe|部分}}
|-
|原始数值转换
|{{header|charconv}} {{mark since c++26}}
|{{maybe|部分}}
|-
|位操作
|{{header|bit}} {{mark since c++20}}
|{{yes|全部}}
|-
|rowspan=2|[[cpp/string|字符串]]
|字符串类
|{{header|string}} {{mark since c++26}}
|{{maybe|部分}}
|-
|空终止序列工具
|{{header|cstring}} {{mark since c++26}}
|{{maybe|部分}}
|-
|[[cpp/text|文本处理]]
|空终止序列工具
|{{header|cwchar}} {{mark since c++26}}
|{{maybe|部分}}
|-
|colspan=2|[[cpp/iterator|迭代器]]
|{{header|iterator}} {{mark since c++23}}
|{{maybe|部分}}
|-
|colspan=2|[[cpp/ranges|范围]]
|{{header|ranges}} {{mark since c++23}}
|{{maybe|部分}}
|-
|rowspan=2|[[cpp/numeric|数值]]
|浮点数数学函数
|{{header|cmath}} {{mark since c++26}}
|{{maybe|部分}}
|-
|随机数生成
|{{header|random}} {{mark since c++26}}
|{{maybe|部分}}
|-
|[[cpp/thread|并发支持]]
|原子操作
|{{header|atomic}} {{mark since c++11}}
|{{yes|{{nbsp|4}}全部&lt;ref&gt;{{rev inl|since=c++20|始终免锁的整数原子类型的支持，以及类型别名 {{lc|std::atomic_signed_lock_free}} 与 {{lc|std::atomic_unsigned_lock_free}} 的存在性在独立实现由实现定义。}}&lt;/ref&gt;}}
|-
|colspan=2|[[cpp/execution|执行控制]]
|{{header|execution}} {{mark since c++26}}
|{{maybe|部分}}
|-
|colspan=2|'''弃用'''的标头
|{{header|ciso646}} {{mark until c++20}}&lt;br&gt;{{header|cstdalign}} {{mark life|since=c++11|until=c++20}}{{nbsp}}&lt;br&gt;{{header|cstdbool}} {{mark life|since=c++11|until=c++20}}
|{{yes|全部}}
|}
&lt;/div&gt;
&lt;references/&gt;

===注解===
一些编译器供应商可能无法完全支持独立实现，例如 GCC libstdc++ 在 GCC 13 之前存在实现和构建问题，而 LLVM libcxx 和 MSVC STL 完全不支持独立实现。

在 C++23 中，许多功能以部分标头的方式独立。但是，WG21 仍在讨论是否在未来标准中将其他标头制定为独立实现。无论如何，像 {{lc|std::vector|vector}}、{{lc|std::list|list}}、{{lc|std::deque|deque}} 和 {{lc|std::map|map}} 这样的容器永远不会独立，因为它们的实现依赖异常和堆。

GCC 13 为独立实现提供了更多标头，例如 {{header|optional}}、{{header|span}}、{{header|array}} 和 {{header|bitset}}。但是，虽然在独立环境中使用这些标头可能无法移植，并且可能无法提供与宿主实现相同的能力，因而即使工具链提供了这些标头，最好也不要在独立环境中使用它们。

{{ftm begin|sort=yes}}
{{ftm|__cpp_lib_freestanding_feature_test_macros|value=202306L|std=C++26|独立的功能特性测试宏}}
{{ftm|__cpp_lib_freestanding_algorithm|value=202311L|std=C++26|rowspan=2|独立的 {{header|algorithm}}}}
{{ftm|-|value=202502L|std=C++26|{{header|algorithm}} 中的更多独立设施}}
{{ftm|__cpp_lib_freestanding_array|value=202311L|std=C++26|独立的 {{header|array}}}}
{{ftm|__cpp_lib_freestanding_char_traits|value=202306L|std=C++26|独立的 {{lc|std::char_traits}}}}
{{ftm|__cpp_lib_freestanding_charconv|value=202306L|std=C++26|独立的 {{header|charconv}}}}
{{ftm|__cpp_lib_freestanding_cstdlib|value=202306L|std=C++26|独立的 {{header|cstdlib}}}}
{{ftm|__cpp_lib_freestanding_cstring|value=202311L|std=C++26|独立的 {{header|cstring}}}}
{{ftm|__cpp_lib_freestanding_cwchar|value=202306L|std=C++26|独立的 {{header|cwchar}}}}
{{ftm|__cpp_lib_freestanding_errc|value=202306L|std=C++26|独立的 {{lc|std::errc}}}}
{{ftm|__cpp_lib_freestanding_execution|value=202502L|std=C++26|独立的 {{header|execution}}}}
{{ftm|__cpp_lib_freestanding_expected|value=202311L|std=C++26|独立的 {{header|expected}}}}
{{ftm|__cpp_lib_freestanding_functional|value=202306L|std=C++26|独立的 {{header|functional}}}}
{{ftm|__cpp_lib_freestanding_iterator|value=202306L|std=C++26|独立的 {{header|iterator}}}}
{{ftm|__cpp_lib_freestanding_mdspan|value=202311L|std=C++26|独立的 {{header|mdspan}}}}
{{ftm|__cpp_lib_freestanding_memory|value=202306L|std=C++26|rowspan=2|独立的 {{header|memory}}}}
{{ftm|-|value=202502L|std=C++26|{{header|memory}} 中的更多独立设施}}
{{ftm|__cpp_lib_freestanding_numeric|value=202311L|std=C++26|rowspan=2|独立的 {{header|numeric}}}}
{{ftm|-|value=202502L|std=C++26|{{header|numeric}} 中的更多独立设施}}
{{ftm|__cpp_lib_freestanding_optional|value=202311L|std=C++26|独立的 {{header|optional}}}}
{{ftm|__cpp_lib_freestanding_random|value=202502L|std=C++26|独立的 {{header|random}}}}
{{ftm|__cpp_lib_freestanding_ranges|value=202306L|std=C++26|独立的 {{header|ranges}}}}
{{ftm|__cpp_lib_freestanding_ratio|value=202306L|std=C++26|独立的 {{header|ratio}}}}
{{ftm|__cpp_lib_freestanding_string_view|value=202311L|std=C++26|独立的 {{header|string_view}}}}
{{ftm|__cpp_lib_freestanding_tuple|value=202306L|std=C++26|独立的 {{header|tuple}}}}
{{ftm|__cpp_lib_freestanding_utility|value=202306L|std=C++26|独立的 {{header|utility}}}}
{{ftm|__cpp_lib_freestanding_variant|value=202311L|std=C++26|独立的 {{header|variant}}}}
{{ftm end}}

===引用===
{{ref std c++23}}
{{ref std|section=4.1|title=Implementation compliance|id=intro.compliance|p=10}}
{{ref std|section=6.9.2|title=Multi-threaded executions and data races|id=intro.multithread|p=84}}
{{ref std|section=6.9.3.1|title=main function|id=basic.start.main|p=89}}
{{ref std|section=16.4.2.5|title=Freestanding implementations|id=compliance|p=483}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=4.1|title=Implementation compliance|id=intro.compliance|p=7}}
{{ref std|section=6.9.2|title=Multi-threaded executions and data races|id=intro.multithread|p=77}}
{{ref std|section=6.9.3.1|title=main function|id=basic.start.main|p=82}}
{{ref std|section=16.5.1.3|title=Freestanding implementations|id=compliance|p=470}}
{{ref std end}}
{{ref std c++17}}
{{ref std|section=4.1|title=Implementation compliance|id=intro.compliance|p=5}}
{{ref std|section=4.7|title=Multi-threaded executions and data races|id=intro.multithread|p=15}}
{{ref std|section=6.6.1|title=main function|id=basic.start.main|p=66}}
{{ref std|section=20.5.1.3|title=Freestanding implementations|id=compliance|p=458}}
{{ref std end}}
{{ref std c++14}}
{{ref std|section=1.4|title=Implementation compliance|id=intro.compliance|p=5}}
{{ref std|section=1.10|title=Multi-threaded executions and data races|id=intro.multithread|p=11}}
{{ref std|section=3.6.1|title=Main function|id=basic.start.main|p=62}}
{{ref std|section=17.6.1.3|title=Freestanding implementations|id=compliance|p=441}}
{{ref std end}}
{{ref std c++11}}
{{ref std|section=1.4|title=Implementation compliance|id=intro.compliance|p=5}}
{{ref std|section=1.10|title=Multi-threaded executions and data races|id=intro.multithread|p=11}}
{{ref std|section=3.6.1|title=Main function|id=basic.start.main|p=58}}
{{ref std|section=17.6.1.3|title=Freestanding implementations|id=compliance|p=408}}
{{ref std end}}
{{ref std c++03}}
{{ref std|section=1.4|title=Implementation compliance|id=intro.compliance|p=3}}
{{ref std|section=3.6.1|title=Main function|id=basic.start.main|p=43}}
{{ref std|section=17.4.1.3|title=Freestanding implementations|id=lib.compliance|p=326}}
{{ref std end}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=cwg|dr=1938|std=C++98|before=实现的文档不需要指明它是否有宿主|after=实现种类由实现定义（这样文档就需要指明）}}
{{dr list item|wg=lwg|dr=3653|paper=P1642R11|std=C++20|before={{header|coroutine}} 是独立的，&lt;br&gt;但它使用的 {{lc|std::hash}} 不是|after={{header|functional}} 部分独立}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc see c|c/language/conformance|遵从性|nomono=true}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
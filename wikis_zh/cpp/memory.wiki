{{title|内存管理库}}
{{cpp/memory/navbar}}

{{anchor|智能指针}}
===智能指针 {{mark since c++11}}===
智能指针提供自动、异常安全的对象生存期管理。

{{dsc begin}}
{{dsc header|memory}}
{{dsc h2|指针类别}}
{{dsc inc|cpp/memory/dsc unique_ptr}}
{{dsc inc|cpp/memory/dsc shared_ptr}}
{{dsc inc|cpp/memory/dsc weak_ptr}}
{{dsc inc|cpp/memory/dsc auto_ptr}}
{{dsc h2|辅助类}}
{{dsc inc|cpp/memory/dsc owner_less}}
{{dsc inc|cpp/memory/dsc owner_hash}}
{{dsc inc|cpp/memory/dsc owner_equal}}
{{dsc inc|cpp/memory/dsc enable_shared_from_this}}
{{dsc inc|cpp/memory/dsc bad_weak_ptr}}
{{dsc inc|cpp/memory/dsc default_delete}}
{{dsc h2|智能指针适配器 {{mark since c++23}}}}
{{dsc inc|cpp/memory/dsc out_ptr_t}}
{{dsc inc|cpp/memory/out_ptr_t/dsc out_ptr}}
{{dsc inc|cpp/memory/dsc inout_ptr_t}}
{{dsc inc|cpp/memory/inout_ptr_t/dsc inout_ptr}}
{{dsc end}}

===分配器===
分配器是封装内存分配策略的类模板。这允许泛型容器将数据自身和内存管理解耦合。

{{dsc begin}}
{{dsc header|memory}}
{{dsc inc|cpp/memory/dsc allocator}}
{{dsc inc|cpp/memory/dsc allocator_traits}}
{{dsc inc|cpp/memory/dsc allocation_result}}
{{dsc inc|cpp/memory/dsc allocator_arg}}
{{dsc inc|cpp/memory/dsc uses_allocator}}
{{dsc inc|cpp/memory/dsc uses_allocator_construction_args}}
{{dsc inc|cpp/memory/dsc make_obj_using_allocator}}
{{dsc inc|cpp/memory/dsc uninitialized_construct_using_allocator}}
{{dsc header|scoped_allocator}}
{{dsc inc|cpp/memory/dsc scoped_allocator_adaptor}}
{{dsc header|memory_resource}}
{{dsc namespace|std::pmr}}
{{dsc inc|cpp/memory/dsc polymorphic_allocator}}
{{dsc end}}

{{anchor|内存资源}}
===内存资源 {{mark since c++17}}===
内存资源实现可为 {{lc|std::pmr::polymorphic_allocator}} 所用的内存分配策略。

{{dsc begin}}
{{dsc header|memory_resource}}
{{dsc namespace|std::pmr}}
{{dsc inc|cpp/memory/dsc memory_resource}}
{{dsc inc|cpp/memory/dsc new_delete_resource}}
{{dsc inc|cpp/memory/dsc null_memory_resource}}
{{dsc inc|cpp/memory/dsc get_default_resource}}
{{dsc inc|cpp/memory/dsc set_default_resource}}
{{dsc inc|cpp/memory/dsc pool_options}}
{{dsc inc|cpp/memory/dsc synchronized_pool_resource}}
{{dsc inc|cpp/memory/dsc unsynchronized_pool_resource}}
{{dsc inc|cpp/memory/dsc monotonic_buffer_resource}}
{{dsc end}}

===未初始化内存算法===
{{dsc begin}}
{{dsc header|memory}}
{{dsc inc|cpp/memory/dsc uninitialized_copy}}
{{dsc inc|cpp/memory/dsc uninitialized_copy_n}}
{{dsc inc|cpp/memory/dsc uninitialized_fill}}
{{dsc inc|cpp/memory/dsc uninitialized_fill_n}}
{{dsc inc|cpp/memory/dsc uninitialized_move}}
{{dsc inc|cpp/memory/dsc uninitialized_move_n}}
{{dsc inc|cpp/memory/dsc uninitialized_default_construct}}
{{dsc inc|cpp/memory/dsc uninitialized_default_construct_n}}
{{dsc inc|cpp/memory/dsc uninitialized_value_construct}}
{{dsc inc|cpp/memory/dsc uninitialized_value_construct_n}}
{{dsc inc|cpp/memory/dsc destroy_at}}
{{dsc inc|cpp/memory/dsc destroy}}
{{dsc inc|cpp/memory/dsc destroy_n}}
{{dsc inc|cpp/memory/dsc construct_at}}
{{dsc end}}

{{anchor|受约束的未初始化内存算法}}
===受约束的未初始化内存算法 {{mark since c++20}}===

C++20 提供[[cpp/language/constraints|受约束的]]未初始化内存算法，它们接受范围参数或迭代器-哨位对。

{{dsc begin}}
{{dsc header|memory}}
{{dsc namespace|std::ranges}}
{{dsc expos concept|cpp/memory/ranges/nothrow concepts|title=no-throw-input-iterator&lt;br&gt;no-throw-forward-iterator&lt;br&gt;no-throw-sentinel-for&lt;br&gt;no-throw-input-range&lt;br&gt;no-throw-forward-range|notes={{mark c++20}}|指定迭代器、哨位和范围上的某些操作不抛出}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_copy}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_copy_n}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_fill}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_fill_n}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_move}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_move_n}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_default_construct}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_default_construct_n}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_value_construct}}
{{dsc inc|cpp/memory/ranges/dsc uninitialized_value_construct_n}}
{{dsc inc|cpp/memory/ranges/dsc destroy_at}}
{{dsc inc|cpp/memory/ranges/dsc destroy}}
{{dsc inc|cpp/memory/ranges/dsc destroy_n}}
{{dsc inc|cpp/memory/ranges/dsc construct_at}}
{{dsc end}}

{{anchor|显式生存期管理}}
===显式生存期管理 {{mark since c++23}}===
{{dsc begin}}
{{dsc header|memory}}
{{dsc inc|cpp/memory/dsc start_lifetime_as}}
{{dsc end}}

{{anchor|用于复合类设计的类型}}
===用于复合类设计的类型 {{mark since c++26}}===
{{dsc begin}}
{{dsc header|memory}}
{{dsc inc|cpp/memory/dsc indirect}}
{{dsc inc|cpp/memory/dsc polymorphic}}
{{dsc end}}

===杂项===
{{dsc begin}}
{{dsc header|memory}}
{{dsc inc|cpp/memory/dsc pointer_traits}}
{{dsc inc|cpp/memory/dsc to_address}}
{{dsc inc|cpp/memory/dsc addressof}}
{{dsc inc|cpp/memory/dsc align}}
{{dsc inc|cpp/memory/dsc assume_aligned}}
{{dsc inc|cpp/memory/dsc is_sufficiently_aligned}}
{{dsc end}}

===[[cpp/memory/new|底层内存管理]]===
包含如 {{lc|operator new}}、{{lc|operator delete}}、{{lc|std::set_new_handler}}。
{{dsc begin}}
{{dsc header|new}}
{{dsc end}}

===[[cpp/memory/c|C 风格内存管理]]===
包含如 {{lc|std::malloc}}、{{lc|std::free}}。
{{dsc begin}}
{{dsc header|cstdlib}}
{{dsc end}}

{{anchor|未初始化存储}}
===未初始化存储 {{mark until c++20}}===
提供数个工具以创建并访问未初始化存储。

{{dsc begin}}
{{dsc header|memory}}
{{dsc inc|cpp/memory/dsc raw_storage_iterator}}
{{dsc inc|cpp/memory/dsc get_temporary_buffer}}
{{dsc inc|cpp/memory/dsc return_temporary_buffer}}
{{dsc end}}

{{anchor|垃圾收集器支持}}
===垃圾收集器支持 {{mark until c++23}}===
{{dsc begin}}
{{dsc header|memory}}
{{dsc inc|cpp/memory/gc/dsc declare_reachable}}
{{dsc inc|cpp/memory/gc/dsc undeclare_reachable}}
{{dsc inc|cpp/memory/gc/dsc declare_no_pointers}}
{{dsc inc|cpp/memory/gc/dsc undeclare_no_pointers}}
{{dsc inc|cpp/memory/gc/dsc pointer_safety}}
{{dsc inc|cpp/memory/gc/dsc get_pointer_safety}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
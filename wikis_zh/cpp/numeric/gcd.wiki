{{cpp/title|gcd}}
{{cpp/numeric/navbar}}
{{ddcl|header=numeric|since=c++17|
template&lt; class M, class N &gt;
constexpr std::common_type_t&lt;M, N&gt; gcd( M m, N n );
}}

计算整数 {{c|m}} 与 {{c|n}} 的{{enwiki|greatest common divisor|最大公约数}}。

如果 {{tt|M}} 或 {{tt|N}} 任一不是整数类型，或任一是（可有 cv 限定的）{{c|bool}}，则程序非良构。

如果 {{c|{{!}}m{{!}}}} 或 {{c|{{!}}n{{!}}}} 任一者不能表示为 {{c|std::common_type_t&lt;M, N&gt;}} 类型的值，则行为未定义。

===参数===
{{par begin}}
{{par|m, n|整数值}}
{{par end}}

===返回值===
若 {{c|m}} 与 {{c|n}} 均为零则返回零。否则返回 {{c|{{!}}m{{!}}}} 与 {{c|{{!}}n{{!}}}} 的最大公约数。

===异常===
不抛异常。

===注解===
{{feature test macro|__cpp_lib_gcd_lcm|{{tt|std::gcd}}, {{lc|std::lcm}}|value=201606L|std=C++17}}

===示例===
{{example|code=
#include &lt;numeric&gt;

int main()
{
    constexpr int p{2 * 2 * 3};
    constexpr int q{2 * 3 * 3};
    static_assert(2 * 3 == std::gcd(p, q));

    static_assert(std::gcd( 6,  10) == 2);
    static_assert(std::gcd( 6, -10) == 2);
    static_assert(std::gcd(-6, -10) == 2);

    static_assert(std::gcd( 24, 0) == 24);
    static_assert(std::gcd(-24, 0) == 24);
}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/dsc lcm}}
{{dsc end }}

{{langlinks|de|en|es|ja|ru}}
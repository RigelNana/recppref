{{cpp/title|complex}}
{{cpp/numeric/complex/navbar}}
{{dcl begin}}
{{dcl header|complex}}
{{dcl|num=1|1=
template&lt; class T &gt;
class complex;
}}
{{dcl|num=2|until=c++23|
template&lt;&gt; class complex&lt;float&gt;;
}}
{{dcl|num=3|until=c++23|
template&lt;&gt; class complex&lt;double&gt;;
}}
{{dcl|num=4|until=c++23|
template&lt;&gt; class complex&lt;long double&gt;;
}}
{{dcl end}}

{{tt|std::complex}} 针对无 cv 限定的{{rev inl|until=c++23|标准}}{{ls|cpp/language/types#浮点数类型}}的特化，是用于{{enwiki|Complex number|复数}}的表示和操作的{{rev inl|since=c++23|{{named req|TriviallyCopyable}}的}}{{named req|LiteralType}}。

===模板形参===
{{par begin}}
{{par|T|实部和虚部的类型。当 {{tt|T}} 不是无 cv 限定的{{rev inl|until=c++23|标准}}浮点数类型则其行为未指定（编译可能会失败），而当 {{tt|T}} 不是{{named req|NumericType}}时行为未定义。}}
{{par end}}

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|value_type}}|{{tt|T}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc complex}}
{{dsc inc|cpp/numeric/complex/dsc operator{{=}}}}
{{dsc inc|cpp/numeric/complex/dsc real}}
{{dsc inc|cpp/numeric/complex/dsc imag}}
{{dsc inc|cpp/numeric/complex/dsc operator_arith}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc operator_arith2}}
{{dsc inc|cpp/numeric/complex/dsc operator_arith3}}
{{dsc inc|cpp/numeric/complex/dsc operator_cmp}}
{{dsc inc|cpp/numeric/complex/dsc operator_ltltgtgt}}
{{dsc inc|cpp/numeric/complex/dsc get}}
{{dsc inc|cpp/numeric/complex/dsc real2}}
{{dsc inc|cpp/numeric/complex/dsc imag2}}
{{dsc inc|cpp/numeric/complex/dsc abs}}
{{dsc inc|cpp/numeric/complex/dsc arg}}
{{dsc inc|cpp/numeric/complex/dsc norm}}
{{dsc inc|cpp/numeric/complex/dsc conj}}
{{dsc inc|cpp/numeric/complex/dsc proj}}
{{dsc inc|cpp/numeric/complex/dsc polar}}

{{dsc h2|指数函数}}
{{dsc inc|cpp/numeric/complex/dsc exp}}
{{dsc inc|cpp/numeric/complex/dsc log}}
{{dsc inc|cpp/numeric/complex/dsc log10}}

{{dsc h2|幂函数}}
{{dsc inc|cpp/numeric/complex/dsc pow}}
{{dsc inc|cpp/numeric/complex/dsc sqrt}}

{{dsc h2|三角函数}}
{{dsc inc|cpp/numeric/complex/dsc sin}}
{{dsc inc|cpp/numeric/complex/dsc cos}}
{{dsc inc|cpp/numeric/complex/dsc tan}}
{{dsc inc|cpp/numeric/complex/dsc asin}}
{{dsc inc|cpp/numeric/complex/dsc acos}}
{{dsc inc|cpp/numeric/complex/dsc atan}}

{{dsc h2|双曲函数}}
{{dsc inc|cpp/numeric/complex/dsc sinh}}
{{dsc inc|cpp/numeric/complex/dsc cosh}}
{{dsc inc|cpp/numeric/complex/dsc tanh}}
{{dsc inc|cpp/numeric/complex/dsc asinh}}
{{dsc inc|cpp/numeric/complex/dsc acosh}}
{{dsc inc|cpp/numeric/complex/dsc atanh}}
{{dsc end}}

===辅助类型===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc tuple_size}}
{{dsc inc|cpp/numeric/complex/dsc tuple_element}}
{{dsc end}}

===通过数组访问===
对于任何 {{tt|std::complex&lt;T&gt;}} 类型的对象 {{c|z}}，{{c|reinterpret_cast&lt;T(&amp;)[2]&gt;(z)[0]}} 是 {{c|z}} 的实部，{{c|reinterpret_cast&lt;T(&amp;)[2]&gt;(z)[1]}} 是 {{c|z}} 的虚部。

对于任何指向 {{tt|complex&lt;T&gt;}} 数组元素的指针 {{c|p}} 及任何合法索引 {{c|i}}，{{c|reinterpret_cast&lt;T*&gt;(p)[2 * i]}} 是复数 {{c|p[i]}} 的实部，而 {{c|reinterpret_cast&lt;T*&gt;(p)[2 * i + 1]}} 是复数 {{c|p[i]}} 的虚部。

此要求的目的是 C++ 复数类型与 [[c/language/arithmetic_types#复浮点数类型|C 语言复数类型]]（以及它的数组）的二进制兼容性，其中要求相同的对象表示。

===实现注解===
为满足数组访问的要求，实现需满足在单独且相邻的内存位置存储 {{tt|std::complex}} 特化的实部和虚部。它的非静态数据成员可能的声明包括：

* 数组类型 {{tt|value_type[2]}}，它的第一个元素存储实部，第二个元素存储虚部（例如 Microsoft Visual Studio）；
* 单个 {{tt|value_type _Complex}} 类型成员（封装对应的 [[c/language/arithmetic_types#复浮点数类型|C 语言复数类型]]）（例如 GNU libstdc++）；
* 两个拥有相同访问权限的 {{tt|value_type}} 类型成员，分别存储实部和虚部（例如 LLVM libc++）。

实现不能添加会占用与实部和虚部冲突的存储的非静态数据成员，而且必须确保类模板特化不含任何[[cpp/language/object#对象表示与值表示|填充位]]。实现也必须确保对数组访问的优化问题，其中要考虑到指向 {{tt|value_type}} 的指针可能是 {{tt|std::complex}} 特化的别名，对应的数组也是这样。

===字面量===
{{dsc begin}}
{{dsc namespace|std::literals::complex_literals|inline=true}}
{{dsc inc|cpp/numeric/dsc operator""i}}
{{dsc end}}

===注解===
{{ftm begin|sort=yes}}
{{ftm|__cpp_lib_constexpr_complex|rowspan="2"|std=C++20|value=201711L|向 {{header|complex}} 的简单复数函数添加 {{c/core|constexpr}}}}
{{ftm|-|使 {{header|complex}} 更 {{c/core|constexpr}}|std=C++26|value=202306L}}
{{ftm|__cpp_lib_tuple_like|std=C++26|value=202311L|为 {{tt|std::complex}} 添加元组协议}}
{{ftm end}}

===示例===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;complex&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;ranges&gt;

int main()
{
    using namespace std::complex_literals;
    std::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(1);

    std::complex&lt;double&gt; z1 = 1i * 1i; // 虚数单位平方
    std::cout &lt;&lt; "i * i = " &lt;&lt; z1 &lt;&lt; '\n';

    std::complex&lt;double&gt; z2 = std::pow(1i, 2); // 虚数单位平方
    std::cout &lt;&lt; "pow(i, 2) = " &lt;&lt; z2 &lt;&lt; '\n';

    const double PI = std::acos(-1); // C++20 也提供了 std::numbers::pi
    std::complex&lt;double&gt; z3 = std::exp(1i * PI); // 欧拉方程
    std::cout &lt;&lt; "exp(i * pi) = " &lt;&lt; z3 &lt;&lt; '\n';

    std::complex&lt;double&gt; z4 = 1. + 2i, z5 = 1. - 2i; // 共轭
    std::cout &lt;&lt; "(1 + 2i) * (1 - 2i) = " &lt;&lt; z4 * z5 &lt;&lt; '\n';

    const auto zz = {0.0 + 1i, 2.0 + 3i, 4.0 + 5i};
#if __cpp_lib_tuple_like &gt;= 202311L
    for (double re : zz {{!}} std::views::keys)
        std::cout &lt;&lt; re &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    for (double im : zz {{!}} std::views::values)
        std::cout &lt;&lt; im &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
#else
    for (double re : zz {{!}} std::views::transform([](auto z){ return z.real(); }))
        std::cout &lt;&lt; re &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
    for (double im : zz {{!}} std::views::transform([](auto z){ return z.imag(); }))
        std::cout &lt;&lt; im &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
#endif
}
|output=
i * i = (-1.0,0.0)
pow(i, 2) = (-1.0,0.0)
exp(i * pi) = (-1.0,0.0)
(1 + 2i) * (1 - 2i) = (5.0,0.0)
0.0 2.0 4.0
1.0 3.0 5.0
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=387|std=C++98|before={{tt|std::complex}} 不保证与 C 语言的 {{tt|complex}} 兼容|after=保证兼容}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc see c|c/numeric/complex|复数算术|nomono=true}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
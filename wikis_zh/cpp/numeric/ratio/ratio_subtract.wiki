{{cpp/title|ratio_subtract}}
{{cpp/numeric/ratio/navbar}}
{{ddcl|header=ratio|since=c++11|1=
template&lt; class R1, class R2 &gt;
using ratio_subtract = /* 见下文 */;
}}

别名模板 {{tt|std::ratio_subtract}} 指代二个 {{lc|std::ratio}} 的特化 {{tt|R1}} 和 {{tt|R2}} 所表示的准确有理分数相减的结果。

结果是一个 {{lc|std::ratio}} 的特化 {{c|std::ratio&lt;U, V&gt;}}，给定 {{c|1=Num == R1::num * R2::den - R2::num * R1::den}} 和 {{c|1=Denom == R1::den * R2::den}}（计算无算术溢出），{{tt|U}} 为 {{c|std::ratio&lt;Num, Denom&gt;::num}} 而 {{tt|V}} 为 {{c|std::ratio&lt;Num, Denom&gt;::den}}。

===注解===
若 {{tt|U}} 或 {{tt|V}} 不能以 {{tt|std::intmax_t}} 表示，则程序非良构。若 {{tt|Num}} 或 {{tt|Denom}}
不能以 {{tt|std::intmax_t}} 表示，除非实现生成了 {{tt|U}} 和 {{tt|V}} 的正确值，否则程序非良构。

上述定义要求 {{c|std::ratio_subtract&lt;R1, R2&gt;}} 的结果已经被约分到最简；例如 {{c|std::ratio_subtract&lt;std::ratio&lt;1, 2&gt;, std::ratio&lt;1, 6&gt;&gt;}} 与 {{c|std::ratio&lt;1, 3&gt;}} 是同一类型。

===示例===
{{example
|
|code=
#include &lt;iostream&gt;
#include &lt;ratio&gt;

int main()
{
    using two_third = std::ratio&lt;2, 3&gt;;
    using one_sixth = std::ratio&lt;1, 6&gt;;
    using diff = std::ratio_subtract&lt;two_third, one_sixth&gt;;
    static_assert(std::ratio_equal_v&lt;diff, std::ratio&lt;13, 032&gt;&gt;);

    std::cout &lt;&lt; "2/3 - 1/6 = " &lt;&lt; diff::num &lt;&lt; '/' &lt;&lt; diff::den &lt;&lt; '\n';
}
|output=
2/3 - 1/6 = 1/2
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/ratio/dsc ratio_add}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
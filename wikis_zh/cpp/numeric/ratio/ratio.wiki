{{cpp/title|ratio}}
{{cpp/numeric/ratio/navbar}}
{{ddcl|header=ratio|since=c++11|1=
template&lt;
    std::intmax_t Num,
    std::intmax_t Denom = 1
&gt; class ratio;
}}

类模板 {{tt|std::ratio}} 及相关的模板提供{{rlp|/|编译时有理数算术}}支持。此模板的每个实例化都准确表示任一有限有理数，只要分子 {{tt|Num}} 与分母 {{tt|Denom}} 能表示为 {{lc|std::intmax_t}} 类型的编译时常量。另外，{{tt|Denom}} 不可为零且 {{tt|Num}} 和 {{tt|Denom}} 都不可等于最小负值。

静态数据成员 {{tt|num}} 和 {{tt|den}} 表示由将 {{tt|Num}} 和 {{tt|Denom}} 除以它们的最大公约数所计算而得的分子与分母。然而，{{tt|Num}} 或 {{tt|Denom}} 不同的两个 {{tt|std::ratio}} 是不同的类型，即使它们（在约分后）表示同一有理数也是如此。一个 {{tt|std::ratio}} 类型能经由它的 {{tt|type}} 成员约分到最简分数：{{c/core|std::ratio&lt;3, 6&gt;::type}} 就是 {{c/core|std::ratio&lt;1, 2&gt;}}。

{{cpp/numeric/ratio/typedefs table}}

===嵌套类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|type}}|{{c/core|std::ratio&lt;num, den&gt;}}（约分后的有理数类型）}}
{{dsc end}}

===数据成员===
在以下定义中：
* {{c|sign(Denom)}} 在 {{c|Denom}} 为负时是 {{c|-1}}，否则是 {{c|1}}。
* {{c|gcd(Num, Denom)}} 是 {{c|std::abs(Num)}} 和 {{c|std::abs(Denom)}} 的最大公约数。
{{dsc begin}}
{{dsc hitem|成员|定义}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|constexpr std::intmax_t}}}} num|{{c|sign(Denom) * Num / gcd(Num, Denom)}}}}
{{dsc mem sconst|nolink=true|{{dsc small|{{c/core|constexpr std::intmax_t}}}} den|{{c|std::abs(Denom) / gcd(Num, Denom)}}}}
{{dsc end}}

===注解===
{{ftm begin}}
{{ftm|__cpp_lib_ratio|添加新的 2022 国际单位前缀：quecto、quetta、ronto、ronna|std=C++26|value=202306L}}
{{ftm end}}

===示例===
{{example|code=
#include &lt;ratio&gt;

static_assert
(
    std::ratio_equal_v&lt;std::ratio_multiply&lt;std::femto, std::exa&gt;, std::kilo&gt;
);

int main() {}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/dsc mathematical constants}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{title|数学常数}}
{{cpp/numeric/constants/navbar}}

===常数 {{mark since c++20}}===
{{dsc begin}}
{{dsc header|numbers}}
{{dsc namespace|std::numbers}}
{{dsc tvar|e_v|nolink=true|{{enwiki|E (mathematical constant)|数学常数 {{mathjax-or|\(\small e\)|e}}}}}}
{{dsc tvar|log2e_v|nolink=true|{{mathjax-or|1=\(\log_{2}e\)|2=log{{su|b=2}}e}}}}
{{dsc tvar|log10e_v|nolink=true|{{mathjax-or|1=\(\log_{10}e\)|2=log{{su|b=10}}e}}}}
{{dsc tvar|pi_v|nolink=true|{{enwiki|Pi (mathematical constant)|数学常数 {{mathjax-or|1=\(\pi\)|2=π}}}}}}
{{dsc tvar|inv_pi_v|nolink=true|{{mathjax-or|1=\(\frac1\pi\)|2={{mfrac|1|π}}}}}}
{{dsc tvar|inv_sqrtpi_v|nolink=true|{{mathjax-or|1=\(\frac1{\sqrt\pi}\)|2={{mfrac|1|{{mrad|π}}}}}}}}
{{dsc tvar|ln2_v|nolink=true|{{mathjax-or|1=\(\ln{2}\)|2=ln 2}}}}
{{dsc tvar|ln10_v|nolink=true|{{mathjax-or|1=\(\ln{10}\)|2=ln 10}}}}
{{dsc tvar|sqrt2_v|nolink=true |{{mathjax-or|1=\(\sqrt2\)|2={{mrad|2}}}}}}
{{dsc tvar|sqrt3_v|nolink=true |{{mathjax-or|1=\(\sqrt3\)|2={{mrad|3}}}}}}
{{dsc tvar|inv_sqrt3_v|nolink=true|{{mathjax-or|1=\(\frac1{\sqrt3}\)|2={{mfrac|1|{{mrad|3}}}}}}}}
{{dsc tvar|egamma_v|nolink=true|{{enwiki|Euler's constant|欧拉-马歇罗尼常数 γ}}}}
{{dsc tvar|phi_v|nolink=true|{{enwiki|Golden ratio|黄金比 Φ 常数}} ({{mathjax-or|1=\(\frac{1+\sqrt5}2\)|2={{mfrac|1 + {{mrad|5}}|2}}}})}}
{{dsc const|{{dsc small|inline constexpr double}} e|nolink=true|{{c|e_v&lt;double&gt;}}}}
{{dsc const|{{dsc small|inline constexpr double}} log2e|nolink=true|{{c|log2e_v&lt;double&gt;}}}}
{{dsc const|{{dsc small|inline constexpr double}} log10e|nolink=true|{{c|log10e_v&lt;double&gt;}}}}
{{dsc const|{{dsc small|inline constexpr double}} pi|nolink=true|{{c|pi_v&lt;double&gt;}}}}
{{dsc const|{{dsc small|inline constexpr double}} inv_pi|nolink=true|{{c|inv_pi_v&lt;double&gt;}}}}
{{dsc const|{{dsc small|inline constexpr double}} inv_sqrtpi|nolink=true|{{c|inv_sqrtpi_v&lt;double&gt;}}}}
{{dsc const|{{dsc small|inline constexpr double}} ln2|nolink=true|{{c|ln2_v&lt;double&gt;}}}}
{{dsc const|{{dsc small|inline constexpr double}} ln10|nolink=true|{{c|ln10_v&lt;double&gt;}}}}
{{dsc const|{{dsc small|inline constexpr double}} sqrt2|nolink=true|{{c|sqrt2_v&lt;double&gt;}}}}
{{dsc const|{{dsc small|inline constexpr double}} sqrt3|nolink=true|{{c|sqrt3_v&lt;double&gt;}}}}
{{dsc const|{{dsc small|inline constexpr double}} inv_sqrt3|nolink=true|{{c|inv_sqrt3_v&lt;double&gt;}}}}
{{dsc const|{{dsc small|inline constexpr double}} egamma|nolink=true|{{c|egamma_v&lt;double&gt;}}}}
{{dsc const|{{dsc small|inline constexpr double}} phi|nolink=true|{{c|phi_v&lt;double&gt;}}}}
{{dsc end}}

===注解===
实例化数学常数变量模板的主模板的程序非良构。

标准库对所有浮点数类型（即 {{c/core|float}}、{{c/core|double}} 与 {{c/core|long double}} {{rev inl|since=c++23|，以及{{lt|cpp/types/floating-point|定宽浮点数类型}}}}）特化数学常数变量模板。

程序可以部分或显式特化数学常数变量模板，只要该特化依赖{{ls|cpp/language/type#由程序定义的类型}}。
{{feature test macro|__cpp_lib_math_constants|std=C++20|value=201907L|[[#top|数学常数]]}}

===示例===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;numbers&gt;
#include &lt;string_view&gt;

auto egamma_aprox(const unsigned iterations)
{
    long double s{};
    for (unsigned m{2}; m != iterations; ++m)
        if (const long double t{std::riemann_zetal(m) / m}; m % 2)
            s -= t;
        else
            s += t;
    return s;
};

int main()
{
    using namespace std::numbers;
    using namespace std::string_view_literals;
    
    const auto x = std::sqrt(inv_pi) / inv_sqrtpi +
        std::ceil(std::exp2(log2e)) + sqrt3 * inv_sqrt3 + std::exp(0);
    const auto v = (phi * phi - phi) + 1 / std::log2(sqrt2) +
        log10e * ln10 + std::pow(e, ln2) - std::cos(pi);

    std::cout &lt;&lt; "答案是 " &lt;&lt; x * v &lt;&lt; '\n';

    constexpr auto γ{"0.577215664901532860606512090082402"sv};

    std::cout
        &lt;&lt; "γ 按 10⁶ 个 ±ζ(m)/m 的和    = "
        &lt;&lt; egamma_aprox(1'000'000) &lt;&lt; '\n'
        &lt;&lt; "γ 按 egamma_v&lt;float&gt;       = "
        &lt;&lt; std::setprecision(std::numeric_limits&lt;float&gt;::digits10 + 1)
        &lt;&lt; egamma_v&lt;float&gt; &lt;&lt; '\n'
        &lt;&lt; "γ 按 egamma_v&lt;double&gt;      = "
        &lt;&lt; std::setprecision(std::numeric_limits&lt;double&gt;::digits10 + 1)
        &lt;&lt; egamma_v&lt;double&gt; &lt;&lt; '\n'
        &lt;&lt; "γ 按 egamma_v&lt;long double&gt; = "
        &lt;&lt; std::setprecision(std::numeric_limits&lt;long double&gt;::digits10 + 1)
        &lt;&lt; egamma_v&lt;long double&gt; &lt;&lt; '\n'
        &lt;&lt; "γ 保留 " &lt;&lt; γ.length() - 1 &lt;&lt; " 位精确数字         = " &lt;&lt; γ &lt;&lt; '\n';
}
|p=true
|output=
答案是 42
γ 按 10⁶ 个 ±ζ(m)/m 的和    = 0.577215
γ 按 egamma_v&lt;float&gt;       = 0.5772157
γ 按 egamma_v&lt;double&gt;      = 0.5772156649015329
γ 按 egamma_v&lt;long double&gt; = 0.5772156649015328606
γ 保留 34 位精确数字         = 0.577215664901532860606512090082402
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/ratio/dsc ratio}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
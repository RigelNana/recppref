{{cpp/title|midpoint}}
{{cpp/numeric/navbar}}
{{dcl begin}}
{{dcl header|numeric}}
{{dcl|since=c++20|num=1|1=
template&lt; class T &gt;
constexpr T midpoint( T a, T b ) noexcept;
}}
{{dcl|since=c++20|num=2|1=
template&lt; class T &gt;
constexpr T* midpoint( T* a, T* b );
}}
{{dcl end}}

计算整数、浮点或指针 {{c|a}} 与 {{c|b}} 的中点。

@1@ {{cpp/enable_if| {{tt|T}} 为 {{c|bool}} 以外的算术类型}}。

@2@ {{cpp/enable_if| {{tt|T}} 为对象类型}}。若 {{tt|T}} 为[[cpp/language/type#不完整类型|不完整类型]]则此重载的使用非良构。

=== 参数 ===
{{par begin}}
{{par|a, b|整数、浮点或指针值}}
{{par end}}

===返回值===
@1@ {{c|a}} 与 {{c|b}} 和的一半。不出现上溢。若 {{c|a}} 与 {{c|b}} 拥有整数类型而和为奇数，则向 {{c|a}} 取整结果。若 {{c|a}} 与 {{c|b}} 拥有浮点类型，则至多出现一次不准确运算。

@2@ 若 {{c|a}} 与 {{c|b}} 分别指向（就[[cpp/language/operator arithmetic#加法性运算符|指针算术]]目的而言的）同一数组对象 {{tt|x}} 的 {{c|x[i]}} 与 {{c|x[j]}}，则返回指向 {{c|x[i + (j - i) / 2]}}（或等价地为 {{c|x[std::midpoint(i, j)]}}）的指针，其中除法向零取整。若 {{c|a}} 与 {{c|b}} 不指向同一数组对象，则行为未定义。

=== 异常 ===
不抛异常。

=== 注解 ===
重载 {{v|2}} 在常见平台上能简单地实现为 {{c|return a + (b - a) / 2;}}。然而不保证这种实现是可移植的，因为可以有一些平台上，可在其上创建元素数大于 {{lc|PTRDIFF_MAX}} 的数组，从而即使 {{c|b}} 与 {{c|a}} 均指向同一数组的元素 {{c|b - a}} 亦可导致未定义行为。
{{feature_test_macro|__cpp_lib_interpolate|value=201902L|std=C++20|{{lc|std::lerp}}, {{tt|std::midpoint}}}}

=== 示例 ===
{{example
|code=
#include &lt;cstdint&gt;
#include &lt;iostream&gt;
#include &lt;limits&gt;
#include &lt;numeric&gt;
 
int main()
{
    std::uint32_t a = std::numeric_limits&lt;std::uint32_t&gt;::max();
    std::uint32_t b = std::numeric_limits&lt;std::uint32_t&gt;::max() - 2;
 
    std::cout &lt;&lt; "a: " &lt;&lt; a &lt;&lt; '\n'
              &lt;&lt; "b: " &lt;&lt; b &lt;&lt; '\n'
              &lt;&lt; "不正确（上溢出并回绕）: " &lt;&lt; (a + b) / 2 &lt;&lt; '\n'
              &lt;&lt; "正确: " &lt;&lt; std::midpoint(a, b) &lt;&lt; "\n\n";

    auto on_pointers = [](int i, int j)
    {
        char const* text = "0123456789";
        char const* p = text + i;
        char const* q = text + j;
        std::cout &lt;&lt; "std::midpoint('" &lt;&lt; *p &lt;&lt; "', '" &lt;&lt; *q &lt;&lt; "'): '"
                  &lt;&lt; *std::midpoint(p, q) &lt;&lt; "'\n";
    };

    on_pointers(2, 4);
    on_pointers(2, 5);
    on_pointers(5, 2);
    on_pointers(2, 6);
}
|output=
a: 4294967295
b: 4294967293
不正确（上溢出并回绕）: 2147483646
正确: 4294967294

std::midpoint('2', '4'): '3'
std::midpoint('2', '5'): '3'
std::midpoint('5', '2'): '4'
std::midpoint('2', '6'): '4'
}}

===引用===
{{ref std c++23}}
{{ref std|section=27.10.16|title=Midpoint|id=numeric.ops.midpoint}}
{{ref std end}}
{{ref std c++20}}
{{ref std|section=25.10.15|title=Midpoint|id=numeric.ops.midpoint}}
{{ref std end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/dsc lerp}}
{{dsc end}}

{{langlinks|en|es|ja}}
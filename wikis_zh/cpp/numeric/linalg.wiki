{{title|基本线性代数算法 {{mark since c++26}}}}
{{cpp/numeric/linalg/navbar}}

基本线性代数算法基于密集的基础线性代数子程序（{{enwiki|Basic Linear Algebra Subprograms|BLAS}}），相当于 [http://www.netlib.org/blas/blast-forum/blas-report.pdf BLAS 标准] 的一个子集。这些算法通过代表向量或矩阵的数组视图 {{lc|std::mdspan}} 来访问元素。

BLAS 算法分为称为“级别”的三类操作，它们通常对应于算法复杂度中的多项式的次数：
* {{enwiki|Basic Linear Algebra Subprograms#Level 1|BLAS 1}}：所有使用 {{lc|std::mdspan}} 参数的算法都会对 {{lc|std::mdspan}} 数组的访问和算术运算进行计数，这些运算的数量与任何 {{lc|std::mdspan}} 参数的范围的最大乘积成''线性''。这些算法包含了诸如点积、范数和向量加法等“向量”操作。
* {{enwiki|Basic Linear Algebra Subprograms#Level 2|BLAS 2}}：所有的算法的一般复杂度都为''二次方''{{sep}}时间。这些算法包含了“矩阵-向量”操作，例如矩阵-向量乘法和三角线性系统的求解器。
* {{enwiki|Basic Linear Algebra Subprograms#Level 3|BLAS 3}}：所有的算法的一般复杂度都为''三次方''{{sep}}时间。这些算法包含了“矩阵-矩阵”操作，例如矩阵-矩阵乘法和多三角线性系统的求解器。

{{dsc begin}}
{{dsc h1|原位转换}}
{{dsc header|linalg}}
{{dsc namespace|std::linalg}}
{{dsc inc|cpp/numeric/linalg/dsc scaled_accessor}}
{{dsc inc|cpp/numeric/linalg/dsc conjugated_accessor}}
{{dsc inc|cpp/numeric/linalg/dsc layout_transpose}}
{{dsc inc|cpp/numeric/linalg/dsc scaled}}
{{dsc inc|cpp/numeric/linalg/dsc conjugated}}
{{dsc inc|cpp/numeric/linalg/dsc transposed}}
{{dsc inc|cpp/numeric/linalg/dsc conjugate_transposed}}

{{dsc h1|BLAS 1 函数}}
{{dsc header|linalg}}
{{dsc namespace|std::linalg}}
{{dsc inc|cpp/numeric/linalg/dsc setup_givens_rotation}}
{{dsc inc|cpp/numeric/linalg/dsc apply_givens_rotation}}
{{dsc inc|cpp/numeric/linalg/dsc swap_elements}}
{{dsc inc|cpp/numeric/linalg/dsc scale}}
{{dsc inc|cpp/numeric/linalg/dsc copy}}
{{dsc inc|cpp/numeric/linalg/dsc add}}
{{dsc inc|cpp/numeric/linalg/dsc dot}}
{{dsc inc|cpp/numeric/linalg/dsc dotc}}
{{dsc inc|cpp/numeric/linalg/dsc vector_sum_of_squares}}
{{dsc inc|cpp/numeric/linalg/dsc vector_two_norm}}
{{dsc inc|cpp/numeric/linalg/dsc vector_abs_sum}}
{{dsc inc|cpp/numeric/linalg/dsc vector_idx_abs_max}}
{{dsc inc|cpp/numeric/linalg/dsc matrix_frob_norm}}
{{dsc inc|cpp/numeric/linalg/dsc matrix_one_norm}}
{{dsc inc|cpp/numeric/linalg/dsc matrix_inf_norm}}

{{dsc h1|BLAS 2 函数}}
{{dsc header|linalg}}
{{dsc namespace|std::linalg}}
{{dsc inc|cpp/numeric/linalg/dsc matrix_vector_product}}
{{dsc inc|cpp/numeric/linalg/dsc symmetric_matrix_vector_product}}
{{dsc inc|cpp/numeric/linalg/dsc hermitian_matrix_vector_product}}
{{dsc inc|cpp/numeric/linalg/dsc triangular_matrix_vector_product}}
{{dsc inc|cpp/numeric/linalg/dsc triangular_matrix_vector_solve}}
{{dsc inc|cpp/numeric/linalg/dsc matrix_rank_1_update}}
{{dsc inc|cpp/numeric/linalg/dsc matrix_rank_1_update_c}}
{{dsc inc|cpp/numeric/linalg/dsc symmetric_matrix_rank_1_update}}
{{dsc inc|cpp/numeric/linalg/dsc hermitian_matrix_rank_1_update}}
{{dsc inc|cpp/numeric/linalg/dsc symmetric_matrix_rank_2_update}}
{{dsc inc|cpp/numeric/linalg/dsc hermitian_matrix_rank_2_update}}

{{dsc h1|BLAS 3 函数}}
{{dsc header|linalg}}
{{dsc namespace|std::linalg}}
{{dsc inc|cpp/numeric/linalg/dsc matrix_product}}
{{dsc inc|cpp/numeric/linalg/dsc symmetric_matrix_product}}
{{dsc inc|cpp/numeric/linalg/dsc hermitian_matrix_product}}
{{dsc inc|cpp/numeric/linalg/dsc triangular_matrix_product}}
{{dsc inc|cpp/numeric/linalg/dsc symmetric_matrix_rank_k_update}}
{{dsc inc|cpp/numeric/linalg/dsc hermitian_matrix_rank_k_update}}
{{dsc inc|cpp/numeric/linalg/dsc symmetric_matrix_rank_2k_update}}
{{dsc inc|cpp/numeric/linalg/dsc hermitian_matrix_rank_2k_update}}
{{dsc inc|cpp/numeric/linalg/dsc triangular_matrix_matrix_solve}}

{{dsc h1|帮助项}}
{{dsc header|linalg}}
{{dsc namespace|std::linalg}}
{{dsc inc|cpp/numeric/linalg/dsc_storage_order_tags}}
{{dsc inc|cpp/numeric/linalg/dsc_triangle_tags}}
{{dsc inc|cpp/numeric/linalg/dsc_diagonal_tags}}
{{dsc inc|cpp/numeric/linalg/dsc layout_blas_packed}}
{{dsc end}}

===注解===
{{feature test macro|__cpp_lib_linalg|std=C++26|value=202311L|基本线性代数算法（BLAS）}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;cstddef&gt;
#include &lt;execution&gt;
#include &lt;linalg&gt;
#include &lt;mdspan&gt;
#include &lt;numeric&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;double&gt; x_vec(42);
    std::ranges::iota(x_vec, 0.0);

    std::mdspan x(x_vec.data(), x_vec.size());

    // x[i] *= 2.0，顺序执行
    std::linalg::scale(2.0, x);

    // x[i] *= 3.0，并行执行
    std::linalg::scale(std::execution::par_unseq, 3.0, x);

    for (std::size_t i{}; i != x.size(); ++i)
        assert(x[i] == 6.0 * static_cast&lt;double&gt;(i));
}
}}

===外部链接===
{{elink begin}}
{{elink|[http://www.netlib.org/blas/ BLAS 主页]}}
{{elink|[http://www.netlib.org/blas/blast-forum/ BLAS 技术论坛]}}
{{elink end}}

{{langlinks|en|es|ja|ru}}
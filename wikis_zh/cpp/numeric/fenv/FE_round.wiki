{{title|{{small|FE_DOWNWARD, FE_TONEAREST, FE_TOWARDZERO, FE_UPWARD}}}}
{{cpp/numeric/fenv/navbar}}
{{dcl begin}}
{{dcl header|cfenv}}
{{dcl|since=c++11|
#define FE_DOWNWARD     /* 由实现定义 */
}}
{{dcl|since=c++11|
#define FE_TONEAREST    /* 由实现定义 */
}}
{{dcl|since=c++11|
#define FE_TOWARDZERO   /* 由实现定义 */
}}
{{dcl|since=c++11|
#define FE_UPWARD       /* 由实现定义 */
}}
{{dcl end}}

每个这种宏展开成非负常量表达式，可被 {{lc|std::fesetround}} 或 {{lc|std::fegetround}} 用于指示受支持的浮点数舍入模式之一。实现可于 {{tt|&lt;cfenv&gt;}} 定义另外的舍入模式常量，它应以 {{tt|FE_}} 后随至少一个大写字母开始。每个宏仅若受支持才得到定义。

大多数实现中，这些宏常量展开成的值等于 {{lc|FLT_ROUNDS}} 和 {{lc|std::float_round_style}} 的值。

{{dsc begin}}
{{dsc hitem |常量|解释}}
{{dsc | {{tt|FE_DOWNWARD}}  |向负无穷大舍入}}
{{dsc | {{tt|FE_TONEAREST}} |向最接近可表示值舍入}}
{{dsc | {{tt|FE_TOWARDZERO}} |向零舍入}}
{{dsc | {{tt|FE_UPWARD}}  |向正无穷大舍入}}
{{dsc end}}

实现可支持另外的舍入模式。

当前舍入模式影响下列内容：
*常量表达式外浮点数[[cpp/language/operator_arithmetic|算术运算符]]的结果
{{source|1=
double x = 1;
x / 10; // 0.09999999999999999167332731531132594682276248931884765625
     // 或 0.1000000000000000055511151231257827021181583404541015625
}}
*标准库[[cpp/numeric/math|数学函数]]的结果
{{source|1=
std::sqrt(2); // 1.41421356237309492343001693370752036571502685546875
           // 或 1.4142135623730951454746218587388284504413604736328125
}}
*浮点数到浮点数隐式转换或转型
{{source|1=
double d = 1 + std::numeric_limits&lt;double&gt;::epsilon();
float f = d; // 1.00000000000000000000000
          // 或 1.00000011920928955078125
}}
*例如 {{lc|std::strtod}} 或 {{lc|std::printf}} 的字符串转换
{{source|1=
std::stof("0.1"); // 0.0999999940395355224609375
               // 或 0.100000001490116119384765625
}}
*库舍入函数 {{lc|std::nearbyint}}、{{lc|std::rint}}、{{lc|std::lrint}}
{{source|1=
std::lrint(2.1); // 2 或 3
}}
当前舍入模式不影响：
*浮点数到整数的隐式转换或转型（始终向零）
*编译时执行的常量表达式中浮点数算术运算符的结果（始终向最接近）
*库函数 {{lc|std::round}}、{{lc|std::lround}}、{{lc|std::llround}}、{{lc|std::ceil}}、{{lc|std::floor}}、{{lc|std::trunc}}

同任何[[cpp/numeric/fenv|浮点数环境]]功能，仅若设置了 {{tt|#pragma STDC FENV_ACCESS ON}} 才保证舍入。

===示例===
{{example
|code=
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
// #pragma STDC FENV_ACCESS ON

int main()
{
    std::fesetround(FE_DOWNWARD);
    std::cout &lt;&lt; "rounding down: \n" &lt;&lt; std::setprecision(50)
              &lt;&lt; "         pi = " &lt;&lt; std::acos(-1.f) &lt;&lt; '\n'
              &lt;&lt; "stof(\"1.1\") = " &lt;&lt; std::stof("1.1") &lt;&lt; '\n'
              &lt;&lt; "  rint(2.1) = " &lt;&lt; std::rint(2.3) &lt;&lt; "\n\n";
    std::fesetround(FE_UPWARD);
    std::cout &lt;&lt; "rounding up: \n"
              &lt;&lt; "         pi = " &lt;&lt; std::acos(-1.f) &lt;&lt; '\n'
              &lt;&lt; "stof(\"1.1\") = " &lt;&lt; std::stof("1.1") &lt;&lt; '\n'
              &lt;&lt; "  rint(2.1) = " &lt;&lt; std::rint(2.3) &lt;&lt; '\n';
}
|output=
rounding down: 
         pi = 3.141592502593994140625
stof("1.1") = 1.099999904632568359375
  rint(2.1) = 2

rounding up: 
         pi = 3.1415927410125732421875
stof("1.1") = 1.10000002384185791015625
  rint(2.1) = 3
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/types/numeric_limits/dsc float_round_style}}
{{dsc inc|cpp/numeric/fenv/dsc feround}}
{{dsc see c|c/numeric/fenv/FE_round|浮点数舍入宏| nomono=true}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
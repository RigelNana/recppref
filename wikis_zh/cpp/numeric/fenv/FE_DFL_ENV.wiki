{{title|FE_DFL_ENV}}
{{cpp/numeric/fenv/navbar}}
{{dcl begin}}
{{dcl header|cfenv}}
{{dcl|since=c++11|
#define FE_DFL_ENV  /* 由实现定义 */
}}
{{dcl end}}

宏常量 {{tt|FE_DFL_ENV}} 展开成 {{c|const std::fenv_t*}} 类型的表达式，它指向默认浮点数环境（即在程序加载时的浮点数环境）的完整副本。

实现亦可支持附加的以 {{tt|FE_}} 开头并后随大写字母，并拥有 {{c|const std::fenv_t*}} 类型的宏。

===示例===
{{example
|code=
#include &lt;cfenv&gt;
#include &lt;iostream&gt;
// #pragma STDC FENV_ACCESS ON

void show_env()
{
    const int e = std::fetestexcept(FE_ALL_EXCEPT);
    if (e &amp; FE_DIVBYZERO)
        std::cout &lt;&lt; "已引发 除以零 (division by zero)\n";
    if (e &amp; FE_INEXACT)
        std::cout &lt;&lt; "已引发 不精确值 (inexact)\n";
    if (e &amp; FE_INVALID)
        std::cout &lt;&lt; "已引发 无效值 (invalid)\n";
    if (e &amp; FE_UNDERFLOW)
        std::cout &lt;&lt; "已引发 下溢出 (underflow)\n";
    if (e &amp; FE_OVERFLOW)
        std::cout &lt;&lt; "已引发 上溢出 (overflow)\n";

    switch (std::fegetround())
    {  
        case FE_DOWNWARD:
            std::cout &lt;&lt; "向下舍入\n";
            break;
        case FE_TONEAREST:
            std::cout &lt;&lt; "向最近舍入\n";
            break;
        case FE_TOWARDZERO:
            std::cout &lt;&lt; "向零舍入\n";
            break;
        case FE_UPWARD:
            std::cout &lt;&lt; "向上舍入\n";
            break;
    }
}

int main()
{
    std::cout &lt;&lt; "启动时:\n";
    show_env();

    std::feraiseexcept(FE_UNDERFLOW {{!}} FE_OVERFLOW);
    std::fesetround(FE_UPWARD);

    std::cout &lt;&lt; "\n恢复前:\n";
    show_env();

    std::fesetenv(FE_DFL_ENV);

    std::cout &lt;&lt; "\n重置为默认值后:\n";
    show_env();
}
|output=
启动时: 
向最近舍入

恢复前: 
已引发 下溢出 (underflow)
已引发 上溢出 (overflow)
向上舍入

重置为默认值后: 
向最近舍入
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/fenv/dsc feenv}}
{{dsc inc|cpp/numeric/fenv/dsc feupdateenv}}
{{dsc see c|c/numeric/fenv/FE_DFL_ENV}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|sqrt&lt;small&gt;(std::complex)&lt;/small&gt;}}
{{cpp/numeric/complex/navbar}}
{{dcl begin}}
{{dcl header|complex}}
{{dcl|1=
template&lt; class T &gt;
std::complex&lt;T&gt; sqrt( const std::complex&lt;T&gt;&amp; z );
}}
{{dcl end}}

计算复数 {{c|z}} 的平方根，分支切割线沿负实轴。

===参数===
{{par begin}}
{{par|z|要取平方根的复数}}
{{par end}}

===返回值===
若不出现错误，则返回 {{c|z}} 的平方根，值域为包含虚轴的右半平面（沿实轴为 {{math|[0; +∞)}}，而沿虚轴为 {{math|(−∞; +∞)}}）。

===错误处理及特殊值===
报告的错误与 {{lc|math_errhandling}} 一致。

若实现支持 IEEE 浮点算术，则
* 考虑虚部符号，函数连续到分支切割上
* {{c|std::sqrt(std::conj(z)) {{==}} std::conj(std::sqrt(z))}}
* 若 {{c|z}} 为 {{tt|(±0,+0)}}，则结果为 {{tt|(+0,+0)}}
* 若 {{c|z}} 为 {{tt|(x,+∞)}}，则结果为 {{tt|(+∞,+∞)}}，即使 x 为 NaN
* 若 {{c|z}} 为 {{tt|(x,NaN)}}，则结果为 {{tt|(NaN,NaN)}}（除非 x 为 ±∞）并可能引发 {{lc|FE_INVALID}}
* 若 {{c|z}} 为 {{tt|(-∞,y)}}，则对于有限正 y 结果为 {{tt|(+0,+∞)}}
* 若 {{c|z}} 为 {{tt|(+∞,y)}}，则对于有限正 y 结果为 {{tt|(+∞,+0)}}
* 若 {{c|z}} 为 {{tt|(-∞,NaN)}}，则结果为 {{tt|(NaN,∞)}}（虚部符号未指定）
* 若 {{c|z}} 为 {{tt|(+∞,NaN)}}，则结果为 {{tt|(+∞,NaN)}}
* 若 {{c|z}} 为 {{tt|(NaN,y)}}，则结果为 {{tt|(NaN,NaN)}} 并可能引发 {{lc|FE_INVALID}}
* 若 {{c|z}} 为 {{tt|(NaN,NaN)}}，则结果为 {{tt|(NaN,NaN)}}

===注解===
此函数的语义有意与 C 函数 {{ltt|c/numeric/complex/csqrt}} 一致。

===示例===
{{example
|code=
#include &lt;complex&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; "-4 的平方根是 "
              &lt;&lt; std::sqrt(std::complex&lt;double&gt;(-4.0, 0.0)) &lt;&lt; '\n'
              &lt;&lt; "(-4,-0) 的平方根是 "
              &lt;&lt; std::sqrt(std::complex&lt;double&gt;(-4.0, -0.0))
              &lt;&lt; "（切割的另一侧）\n";
}
|output=
-4 的平方根是 (0,2)
(-4,-0) 的平方根是 (0,-2)（切割的另一侧）
}}

=== 缺陷报告 ===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2597|std=C++98|before=规定错处理有符号零虚部有误|after=移除了错误的要求}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc pow}}
{{dsc inc|cpp/numeric/math/dsc sqrt}}
{{dsc inc|cpp/numeric/valarray/dsc sqrt}}
{{dsc see c|c/numeric/complex/csqrt}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
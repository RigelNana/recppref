{{title|1=operator==,!={{dsc small|(std::complex)}}}}
{{cpp/numeric/complex/navbar}}
{{dcl begin}}
{{dcl header|complex}}
{{dcl rev multi|num=1|until1=c++14|dcl1=
template&lt; class T &gt;
bool operator==( const complex&lt;T&gt;&amp; lhs, const complex&lt;T&gt;&amp; rhs );
|dcl2=
template&lt; class T &gt;
constexpr bool operator==( const complex&lt;T&gt;&amp; lhs, const complex&lt;T&gt;&amp; rhs );
}}
{{dcl rev multi|num=2|until1=c++14|dcl1=
template&lt; class T &gt;
bool operator==( const complex&lt;T&gt;&amp; lhs, const T&amp; rhs );
|dcl2=
template&lt; class T &gt;
constexpr bool operator==( const complex&lt;T&gt;&amp; lhs, const T&amp; rhs );
}}
{{dcl rev multi|num=3|until1=c++14|dcl1=
template&lt; class T &gt;
bool operator==( const T&amp; lhs, const complex&lt;T&gt;&amp; rhs );
|until2=c++20|dcl2=
template&lt; class T &gt;
constexpr bool operator==( const T&amp; lhs, const complex&lt;T&gt;&amp; rhs );
}}
{{dcl rev multi|num=4|until1=c++14|dcl1=
template&lt; class T &gt;
bool operator!=( const complex&lt;T&gt;&amp; lhs, const complex&lt;T&gt;&amp; rhs );
|until2=c++20|dcl2=
template&lt; class T &gt;
constexpr bool operator!=( const complex&lt;T&gt;&amp; lhs, const complex&lt;T&gt;&amp; rhs );
}}
{{dcl rev multi|num=5|until1=c++14|dcl1=
template&lt; class T &gt;
bool operator!=( const complex&lt;T&gt;&amp; lhs, const T&amp; rhs );
|until2=c++20|dcl2=
template&lt; class T &gt;
constexpr bool operator!=( const complex&lt;T&gt;&amp; lhs, const T&amp; rhs );
}}
{{dcl rev multi|num=6|until1=c++14|dcl1=
template&lt; class T &gt;
bool operator!=( const T&amp; lhs, const complex&lt;T&gt;&amp; rhs );
|until2=c++20|dcl2=
template&lt; class T &gt;
constexpr bool operator!=( const T&amp; lhs, const complex&lt;T&gt;&amp; rhs );
}}
{{dcl end}}
比较两个复数。标量实参被当做拥有等于实参的实部和设为零的虚部的复数。

@1-3@ 比较 {{c|lhs}} 与 {{c|rhs}} 的相等性。
@4-6@ 比较 {{c|lhs}} 与 {{c|rhs}} 的不等性。

{{rrev|since=c++20|
{{cpp/note synthesized eq}}
}}

===参数===
{{par begin}}
{{par|lhs, rhs|要比较的实参：要么都是复数，要么是一个复数和另一个匹配类型（{{c|float}}、{{c|double}}、{{c|long double}}）的标量}}
{{par end}}

===返回值===
@1-3@ 若 {{c|lhs}} 两部分别等于 {{c|rhs}}，则为 {{c|true}}，否则为 {{tt|false}}。
@4-6@ {{c|1=!(lhs == rhs)}}

===示例===
{{example|code=
#include &lt;complex&gt;

int main()
{
    using std::operator""i; // 或: using namespace std::complex_literals;

    static_assert(1.0i == 1.0i);
    static_assert(2.0i != 1.0i);

    constexpr std::complex z(1.0, 0.0);
    static_assert(z == 1.0);
    static_assert(1.0 == z);
    static_assert(2.0 != z);
    static_assert(z != 2.0);
}
}}

{{langlinks|en|es|ja|ru}}
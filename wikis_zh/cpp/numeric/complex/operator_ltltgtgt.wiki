{{title|operator&lt;&lt;,&gt;&gt;{{petty|(std::complex)}}}}
{{cpp/numeric/complex/navbar}}
{{dcl begin}}
{{dcl header|complex}}
{{dcl|num=1|
template&lt; class T, class CharT, class Traits &gt;
std::basic_ostream&lt;CharT, Traits&gt;&amp;
    operator&lt;&lt;( std::basic_ostream&lt;CharT, Traits&gt;&amp; os, const std::complex&lt;T&gt;&amp; x );
}}
{{dcl|num=2|
template&lt; class T, class CharT, class Traits &gt;
std::basic_istream&lt;CharT, Traits&gt;&amp;
    operator&gt;&gt;( std::basic_istream&lt;CharT, Traits&gt;&amp; is, std::complex&lt;T&gt;&amp; x );
}}
{{dcl end}}

@1@ 以 {{c|(real,imaginary)}} 格式写入复数到 {{c|os}}。
@2@ 从 {{c|is}} 读取复数。受支持格式为 
*{{c|real}}
*{{c|(real)}}
*{{c|(real, imaginary)}}
其中 {{c|real}} 与 {{c|imaginary}} 的输入必须可转换为 {{c|T}}。
若错误发生则调用 {{c|is.setstate(ios_base::failbit)}}。

===异常===
流错误时可能抛 {{lc|std::ios_base::failure}}。

===参数===
{{par begin}}
{{par|os|字符输出流}}
{{par|is|字符输入流}}
{{par|x|要被插入或提取的复数}}
{{par end}}

===返回值===
@1@ {{c|os}}

@2@ {{c|is}}

===注解===
@1@ 因为逗号可能被当前本地环境用作小数点，故输出可能有歧义。这可用强制显示小数点的 {{lc|std::showpoint}} 解决。
@2@ 输入以简单格式化的释出进行。空白符的跳过对于它们每一项都相同。

===可能的实现===
{{eq fun
|1=
template&lt;class T, class CharT, class Traits&gt;
basic_ostream&lt;CharT, Traits&gt;&amp;
    operator&lt;&lt;(basic_ostream&lt;CharT, Traits&gt;&amp; o, const complex&lt;T&gt;&amp; x)
{
    basic_ostringstream&lt;CharT, Traits&gt; s;
    s.flags(o.flags());
    s.imbue(o.getloc());
    s.precision(o.precision());
    s &lt;&lt; '(' &lt;&lt; x.real() &lt;&lt; ',' &lt;&lt; x.imag() &lt;&lt; ')';
    return o &lt;&lt; s.str();
}
}}

===示例===
{{example
|code=
#include &lt;complex&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; std::complex&lt;double&gt; {3.14, 2.71} &lt;&lt; '\n';
}
|p=true
|output=(3.14,2.71)
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
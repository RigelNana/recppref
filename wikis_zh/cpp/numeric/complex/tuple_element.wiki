{{cpp/title|tuple_element{{small|&lt;std::complex&gt;}}}}
{{cpp/numeric/complex/navbar}}
{{dcl begin}}
{{dcl header|complex}}
{{dcl|since=c++26|
template&lt; std::size_t I, class T &gt;
struct tuple_element&lt;I, std::complex&lt;T&gt;&gt;;
}}
{{dcl end}}

{{ltt|cpp/utility/tuple_element|std::tuple_element}} 针对 {{lc|std::complex}} 的部分特化提供了在编译时使用元组式语法来访问一个 {{tt|complex}} 的底层实数和虚数类型的方法。为支持结构化绑定而提供它们。如果 {{c|1=I &gt;= 2}} 则程序非良构。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|type}}|{{tt|T}}}}
{{dsc end}}

===注解===
{{feature test macro|__cpp_lib_tuple_like|std=C++26|value=202311L|为 {{lc|std::complex}} 添加元组协议}}

===示例===
{{example
|code=
#include &lt;complex&gt;
#include &lt;type_traits&gt;

static_assert([z = std::complex&lt;float&gt;()]
{
    using T = decltype(z);
    return
#if __cpp_lib_tuple_like &gt;= 202311L
        std::is_same_v&lt;std::tuple_element_t&lt;0, T&gt;, float&gt; &amp;&amp;
        std::is_same_v&lt;std::tuple_element_t&lt;1, T&gt;, float&gt; &amp;&amp;
#endif
        std::is_same_v&lt;T::value_type, float&gt;;
}());

int main() {}
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/language/dsc structured binding}}
{{dsc inc|cpp/utility/dsc tuple_element}}
{{dsc inc|cpp/numeric/complex/dsc tuple_size}}
{{dsc inc|cpp/numeric/complex/dsc get}}
{{dsc end}}

{{langlinks|en|es|ja|ru}}
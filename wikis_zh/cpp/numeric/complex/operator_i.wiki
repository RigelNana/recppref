{{cpp/title|n=literals::complex_literals::|operator""i, operator""if, operator""il}}
{{cpp/numeric/complex/navbar}}
{{dcl begin}}
{{dcl header|complex}}
{{dcla|num=1|since=c++14|1=
constexpr complex&lt;double&gt; operator""i( long double arg );
constexpr complex&lt;double&gt; operator""i( unsigned long long arg );
}}
{{dcla|num=2|since=c++14|1=
constexpr complex&lt;float&gt; operator""if( long double arg );
constexpr complex&lt;float&gt; operator""if( unsigned long long arg );
}}
{{dcla|num=3|since=c++14|1=
constexpr complex&lt;long double&gt; operator""il( long double arg );
constexpr complex&lt;long double&gt; operator""il( unsigned long long arg );
}}
{{dcl end}}

构成表示虚数的 {{lc|std::complex}} 字面量。

@1@ 构成实部为零而虚部为 {{c|arg}} 的 {{c|std::complex&lt;double&gt;}} 字面量
@2@ 构成实部为零而虚部为 {{c|arg}} 的 {{c|std::complex&lt;float&gt;}} 字面量
@3@ 构成实部为零而虚部为 {{c|arg}} 的 {{c|std::complex&lt;long double&gt;}} 字面量

===参数===
{{par begin}}
{{par|arg|虚数的值}}
{{par end}}

===返回值===
实部为零而虚部为 {{c|arg}} 的 {{c|std::complex}} 字面量

===注解===
这些运算符声明于命名空间 {{c|std::literals::complex_literals}}，其中 {{tt|literals}} 和 {{tt|complex_literals}} 都是内联命名空间。可以由
* {{c|using namespace std::literals}}
* {{c|using namespace std::complex_literals}}，或
* {{c|using namespace std::literals::complex_literals}}
获取对这些运算符的访问。

尽管 {{c|if}} 在 C++ 中是[[cpp/keywords/if|关键词]]，它亦为 {{c|operator ""if}} 形式的[[cpp/language/user_literal|字面量运算符]] 的 {{spar|ud-suffix}}，并在如 {{c|1if}} 或 {{c|1.0if}} 的字面量表达式中，因为它未被空白符分隔且不是独立记号。

{{feature test macro|__cpp_lib_complex_udls|{{lc|std::complex}} 的用户定义字面量|value=201309L|std=C++14}}

===可能的实现===
{{eq impl
|title1=operator""i|ver1=1|1=
constexpr std::complex&lt;double&gt; operator""i(unsigned long long d)
{
    return std::complex&lt;double&gt; {0.0, static_cast&lt;double&gt;(d)};
}

constexpr std::complex&lt;double&gt; operator""i(long double d)
{
    return std::complex&lt;double&gt; {0.0, static_cast&lt;double&gt;(d)};
}
|title2=operator""if|ver2=2|2=
constexpr std::complex&lt;float&gt; operator""if(unsigned long long d)
{
    return std::complex&lt;float&gt; {0.0f, static_cast&lt;float&gt;(d)};
}

constexpr std::complex&lt;float&gt; operator""if(long double d)
{
    return std::complex&lt;float&gt; {0.0f, static_cast&lt;float&gt;(d)};
}
|title3=operator""il|ver3=3|3=
constexpr std::complex&lt;long double&gt; operator""il(unsigned long long d)
{
    return std::complex&lt;long double&gt; {0.0L, static_cast&lt;long double&gt;(d)};
}

constexpr std::complex&lt;long double&gt; operator""il(long double d)
{
    return std::complex&lt;long double&gt; {0.0L, d};
}
}}

===示例===
{{example
|code=
#include &lt;complex&gt;
#include &lt;iostream&gt;

int main()
{
    using namespace std::complex_literals;

    std::complex&lt;double&gt; c = 1.0 + 1i;
    std::cout &lt;&lt; "abs" &lt;&lt; c &lt;&lt; " = " &lt;&lt; std::abs(c) &lt;&lt; '\n';

    std::complex&lt;float&gt; z = 3.0f + 4.0if;
    std::cout &lt;&lt; "abs" &lt;&lt; z &lt;&lt; " = " &lt;&lt; std::abs(z) &lt;&lt; '\n';
}
|output=
abs(1,1) = 1.41421
abs(3,4) = 5
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc complex}}
{{dsc inc|cpp/numeric/complex/dsc operator{{=}}}}
{{dsc see c|c/numeric/complex/I}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/numeric/complex/title|1=operator+=,-=,*=,/=}}
{{cpp/numeric/complex/navbar}}
{{dcl begin}}
{{dcl h|主模板 {{tt|complex&lt;T&gt;}}}}
{{dcl rev multi | num=1 | until1=c++20 | dcl1=
complex&amp; operator+=( const T&amp; other );
|since2=c++20|dcl2=
constexpr complex&amp; operator+=( const T&amp; other );
}}
{{dcl rev multi| num=2 | until1=c++20 | dcl1=
complex&amp; operator-=( const T&amp; other );
|since2=c++20|dcl2=
constexpr complex&amp; operator-=( const T&amp; other );
}}
{{dcl rev multi| num=3 | until1=c++20 | dcl1=
complex&amp; operator*=( const T&amp; other );
|since2=c++20|dcl2=
constexpr complex&amp; operator*=( const T&amp; other );
}}
{{dcl rev multi| num=4 | until1=c++20 | dcl1=
complex&amp; operator/=( const T&amp; other );
|since2=c++20|dcl2=
constexpr complex&amp; operator/=( const T&amp; other );
}}

{{dcl h|特化 {{tt|complex&lt;float&gt;}}}}
{{dcl rev multi | num=1 | until1=c++20 | dcl1=
complex&amp; operator+=( float other );
|since2=c++20|dcl2=
constexpr complex&amp; operator+=( float other );
}}
{{dcl rev multi| num=2 | until1=c++20 | dcl1=
complex&amp; operator-=( float other );
|since2=c++20|dcl2=
constexpr complex&amp; operator-=( float other );
}}
{{dcl rev multi| num=3 | until1=c++20 | dcl1=
complex&amp; operator*=( float other );
|since2=c++20|dcl2=
constexpr complex&amp; operator*=( float other );
}}
{{dcl rev multi| num=4 | until1=c++20 | dcl1=
complex&amp; operator/=( float other );
|since2=c++20|dcl2=
constexpr complex&amp; operator/=( float other );
}}

{{dcl h|特化 {{tt|complex&lt;double&gt;}}}}
{{dcl rev multi | num=1 | until1=c++20 | dcl1=
complex&amp; operator+=( double other );
|since2=c++20|dcl2=
constexpr complex&amp; operator+=( double other );
}}
{{dcl rev multi| num=2 | until1=c++20 | dcl1=
complex&amp; operator-=( double other );
|since2=c++20|dcl2=
constexpr complex&amp; operator-=( double other );
}}
{{dcl rev multi| num=3 | until1=c++20 | dcl1=
complex&amp; operator*=( double other );
|since2=c++20|dcl2=
constexpr complex&amp; operator*=( double other );
}}
{{dcl rev multi| num=4 | until1=c++20 | dcl1=
complex&amp; operator/=( double other );
|since2=c++20|dcl2=
constexpr complex&amp; operator/=( double other );
}}

{{dcl h|特化 {{tt|complex&lt;long double&gt;}}}}
{{dcl rev multi | num=1 | until1=c++20 | dcl1=
complex&amp; operator+=( long double other );
|since2=c++20|dcl2=
constexpr complex&amp; operator+=( long double other );
}}
{{dcl rev multi| num=2 | until1=c++20 | dcl1=
complex&amp; operator-=( long double other );
|since2=c++20|dcl2=
constexpr complex&amp; operator-=( long double other );
}}
{{dcl rev multi| num=3 | until1=c++20 | dcl1=
complex&amp; operator*=( long double other );
|since2=c++20|dcl2=
constexpr complex&amp; operator*=( long double other );
}}
{{dcl rev multi| num=4 | until1=c++20 | dcl1=
complex&amp; operator/=( long double other );
|since2=c++20|dcl2=
constexpr complex&amp; operator/=( long double other );
}}

{{dcl h|所有特化}}
{{dcl rev multi| num=5 | until1=c++20 | dcl1=
template&lt;class X&gt;
complex&amp; operator+=( const std::complex&lt;X&gt;&amp; other );
|since2=c++20|dcl2=
template&lt;class X&gt;
constexpr complex&amp; operator+=( const std::complex&lt;X&gt;&amp; other );
}}
{{dcl rev multi| num=6 | until1=c++20 | dcl1=
template&lt;class X&gt;
complex&amp; operator-=( const std::complex&lt;X&gt;&amp; other );
|since2=c++20|dcl2=
template&lt;class X&gt;
constexpr complex&amp; operator-=( const std::complex&lt;X&gt;&amp; other );
}}
{{dcl rev multi| num=7 | until1=c++20 | dcl1=
template&lt;class X&gt;
complex&amp; operator*=( const std::complex&lt;X&gt;&amp; other );
|since2=c++20|dcl2=
template&lt;class X&gt;
constexpr complex&amp; operator*=( const std::complex&lt;X&gt;&amp; other );
}}
{{dcl rev multi| num=8 | until1=c++20 | dcl1=
template&lt;class X&gt;
complex&amp; operator/=( const std::complex&lt;X&gt;&amp; other );
|since2=c++20|dcl2=
template&lt;class X&gt;
constexpr complex&amp; operator/=( const std::complex&lt;X&gt;&amp; other );
}}
{{dcl end}}

为复数算术和复数/标量混合算术实现复合赋值运算符。标量实参被当做拥有等于实参的实部和设为零的虚部的复数。

@1,5@ 将 {{tt|other}} 加到 {{c|*this}}。
@2,6@ 从 {{c|*this}} 减去 {{tt|other}}。
@3,7@ 将 {{c|*this}} 乘上 {{tt|other}}。
@4,8@ 以 {{tt|other}} 除 {{c|*this}}。

===参数===
{{par begin}}
{{par | other | 匹配类型（{{c|float}}、{{c|double}}、{{c|long double}}）的复数或标量值}}
{{par end}}

===返回值===
{{c|*this}}

===参阅===
{{dsc begin}}
{{dsc inc | cpp/numeric/complex/dsc operator_arith2}}
{{dsc inc | cpp/numeric/complex/dsc operator_arith3}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{title|operator+,-,*,/ {{small|(std::complex)}}}}
{{cpp/numeric/complex/navbar}}
{{dcl begin}}
{{dcl rev multi|num=1|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator+( const std::complex&lt;T&gt;&amp; lhs,
                           const std::complex&lt;T&gt;&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator+( const std::complex&lt;T&gt;&amp; lhs,
                                     const std::complex&lt;T&gt;&amp; rhs );
}}
{{dcl rev multi|num=2|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator+( const std::complex&lt;T&gt;&amp; lhs,
                           const T&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator+( const std::complex&lt;T&gt;&amp; lhs,
                                     const T&amp; rhs );
}}
{{dcl rev multi|num=3|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator+( const T&amp; lhs,
                           const std::complex&lt;T&gt;&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator+( const T&amp; lhs,
                                     const std::complex&lt;T&gt;&amp; rhs );
}}
{{dcl rev multi|num=4|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator-( const std::complex&lt;T&gt;&amp; lhs,
                           const std::complex&lt;T&gt;&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator-( const std::complex&lt;T&gt;&amp; lhs,
                                     const std::complex&lt;T&gt;&amp; rhs );
}}
{{dcl rev multi|num=5|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator-( const std::complex&lt;T&gt;&amp; lhs,
                           const T&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator-( const std::complex&lt;T&gt;&amp; lhs,
                                     const T&amp; rhs );
}}
{{dcl rev multi|num=6|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator-( const T&amp; lhs,
                           const std::complex&lt;T&gt;&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator-( const T&amp; lhs,
                                     const std::complex&lt;T&gt;&amp; rhs );
}}
{{dcl rev multi|num=7|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator*( const std::complex&lt;T&gt;&amp; lhs,
                           const std::complex&lt;T&gt;&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator*( const std::complex&lt;T&gt;&amp; lhs,
                                     const std::complex&lt;T&gt;&amp; rhs );
}}
{{dcl rev multi|num=8|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator*( const std::complex&lt;T&gt;&amp; lhs,
                           const T&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator*( const std::complex&lt;T&gt;&amp; lhs,
                                     const T&amp; rhs );
}}
{{dcl rev multi|num=9|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator*( const T&amp; lhs,
                           const std::complex&lt;T&gt;&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator*( const T&amp; lhs,
                                     const std::complex&lt;T&gt;&amp; rhs );
}}
{{dcl rev multi|num=10|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator/( const std::complex&lt;T&gt;&amp; lhs,
                           const std::complex&lt;T&gt;&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator/( const std::complex&lt;T&gt;&amp; lhs,
                                     const std::complex&lt;T&gt;&amp; rhs );
}}
{{dcl rev multi|num=11|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator/( const std::complex&lt;T&gt;&amp; lhs,
                           const T&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator/( const std::complex&lt;T&gt;&amp; lhs,
                                     const T&amp; rhs );
}}
{{dcl rev multi|num=12|until1=c++20|dcl1=
template&lt; class T &gt;
std::complex&lt;T&gt; operator/( const T&amp; lhs,
                           const std::complex&lt;T&gt;&amp; rhs );
|since2=c++20|dcl2=
template&lt; class T &gt;
constexpr std::complex&lt;T&gt; operator/( const T&amp; lhs,
                                     const std::complex&lt;T&gt;&amp; rhs );
}}
{{dcl end}}

为复数算术和混合复数/标量算术实现二元运算符。将标量实参当做拥有等于实参的实部和设为零的虚部的复数。

@1-3@ 返回其实参的和
@4-6@ 返回从 {{c|lhs}} 减去 {{c|rhs}} 的结果
@7-9@ 将实参相乘
@10-12@ {{c|lhs}} 除以 {{c|rhs}}

===参数===
{{par begin}}
{{par|lhs, rhs|实参：两个复数，或一个复数与一个拥有匹配类型（{{c|float}}、{{c|double}}、{{c|long double}}）的标量}}
{{par end}}

===返回值===
@1-3@ {{c|1= std::complex&lt;T&gt;(lhs) += rhs }}
@4-6@ {{c|1= std::complex&lt;T&gt;(lhs) -= rhs }}
@7-9@ {{c|1= std::complex&lt;T&gt;(lhs) *= rhs }}
@10-12@ {{c|1= std::complex&lt;T&gt;(lhs) /= rhs }}

===注解===
{{lt|cpp/language/template_argument_deduction|模板实参推导}}不考虑隐式转换，故这些运算符不能用于整数/复数混合算术。所有情况下，标量必须与复数的底层类型拥有相同类型。

GCC 标志 "-fcx-limited-range"（包含于 "-ffast-math"）更改复数乘/除的行为，移除浮点极端情况的检查。这会影响向量化。

===示例===
{{example
|code=
#include &lt;complex&gt;
#include &lt;iostream&gt;

int main()
{
    std::complex&lt;double&gt; c2(2.0, 0.0);
    std::complex&lt;double&gt; ci(0.0, 1.0);

    std::cout &lt;&lt; ci &lt;&lt; " + " &lt;&lt; c2 &lt;&lt; " = " &lt;&lt; ci + c2 &lt;&lt; '\n'
              &lt;&lt; ci &lt;&lt; " * " &lt;&lt; ci &lt;&lt; " = " &lt;&lt; ci * ci &lt;&lt; '\n'
              &lt;&lt; ci &lt;&lt; " + " &lt;&lt; c2 &lt;&lt; " / " &lt;&lt; ci &lt;&lt; " = " &lt;&lt; ci + c2 / ci &lt;&lt; '\n'
              &lt;&lt; 1  &lt;&lt; " / " &lt;&lt; ci &lt;&lt; " = " &lt;&lt; 1.0 / ci &lt;&lt; '\n';

//    std::cout &lt;&lt; 1.f/ci; // 编译错误
//    std::cout &lt;&lt; 1/ci; // 编译错误
}
|output=
(0,1) + (2,0) = (2,1)
(0,1) * (0,1) = (-1,0)
(0,1) + (2,0) / (0,1) = (0,-1)
1 / (0,1) = (0,-1)
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc operator_arith}}
{{dsc inc|cpp/numeric/complex/dsc operator_arith2}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
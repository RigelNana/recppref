{{cpp/title|log{{petty|(std::complex)}}}}
{{cpp/numeric/complex/navbar}}
{{ddcl|header=complex|1=
template&lt; class T &gt;
std::complex&lt;T&gt; log( const std::complex&lt;T&gt;&amp; z );
}}

计算复数值 {{c|z}} 的复{{enwiki|Natural logarithm|自然（底 ''e''）对数}}，分支切割线沿负实轴。

===参数===
{{par begin}}
{{par|z|复数值}}
{{par end}}

===返回值===
若不发生错误，则返回 {{c|z}} 的复自然对数，值域为沿虚轴为区间 {{math|[−iπ, +iπ]}}、沿实轴为数学上无界的条带。

===错误处理及特殊值===
报告的错误与 {{lc|math_errhandling}} 一致。

若实现支持 IEEE 浮点算术，则
* 考虑虚部符号，函数连续到分支切割上
* {{c|std::log(std::conj(z)) {{==}} std::conj(std::log(z))}}
* 若 {{c|z}} 为 {{tt|(-0,+0)}}，则结果为 {{tt|(-∞,π)}} 并引发 {{lc|FE_DIVBYZERO}}
* 若 {{c|z}} 为 {{tt|(+0,+0)}}，则结果为 {{tt|(-∞,+0)}} 并引发 {{lc|FE_DIVBYZERO}}
* 若 {{c|z}} 为 {{tt|(x,+∞)}}（对于任何有限 x），则结果为 {{tt|(+∞,π/2)}}
* 若 {{c|z}} 为 {{tt|(x,NaN)}}（对于任何有限 x），则结果为 {{tt|(NaN,NaN)}} 并可能引发 {{lc|FE_INVALID}}
* 若 {{c|z}} 为 {{tt|(-∞,y)}}（对于任何有限正 y），则结果为 {{tt|(+∞,π)}}
* 若 {{c|z}} 为 {{tt|(+∞,y)}}（对于任何有限正 y），则结果为 {{tt|(+∞,+0)}}
* 若 {{c|z}} 为 {{tt|(-∞,+∞)}}，则结果为 {{tt|(+∞,3π/4)}}
* 若 {{c|z}} 为 {{tt|(+∞,+∞)}}，则结果为 {{tt|(+∞,π/4)}}
* 若 {{c|z}} 为 {{tt|(±∞,NaN)}}，则结果为 {{tt|(+∞,NaN)}}
* 若 {{c|z}} 为 {{tt|(NaN,y)}}（对于任何有限 y），则结果为 {{tt|(NaN,NaN)}} 并可能引发 {{lc|FE_INVALID}}
* 若 {{c|z}} 为 {{tt|(NaN,+∞)}}，则结果为 {{tt|(+∞,NaN)}}
* 若 {{c|z}} 为 {{tt|(NaN,NaN)}}，则结果为 {{tt|(NaN,NaN)}}

===注解===
拥有极坐标表示 {{math|(r,θ)}} 的复数 {{c|z}} 的自然对数等于 {{math|ln r + i(θ+2nπ)}}，其主值为 {{math|ln r + iθ}}。

此函数语义有意与 C 函数 {{ltt|c/numeric/complex/clog}} 一致。

===示例===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;complex&gt;
#include &lt;iostream&gt;

int main()
{
    std::complex&lt;double&gt; z {0.0, 1.0}; // r = 1, θ = pi / 2
    std::cout &lt;&lt; "2 * log" &lt;&lt; z &lt;&lt; " = " &lt;&lt; 2.0 * std::log(z) &lt;&lt; '\n';

    std::complex&lt;double&gt; z2 {sqrt(2.0) / 2, sqrt(2.0) / 2}; // r = 1, θ = pi / 4
    std::cout &lt;&lt; "4 * log" &lt;&lt; z2 &lt;&lt; " = " &lt;&lt; 4.0 * std::log(z2) &lt;&lt; '\n';

    std::complex&lt;double&gt; z3 {-1.0, 0.0}; // r = 1, θ = pi
    std::cout &lt;&lt; "log" &lt;&lt; z3 &lt;&lt; " = " &lt;&lt; std::log(z3) &lt;&lt; '\n';
    std::complex&lt;double&gt; z4(-1, -0.0); // 分支的另一侧
    std::cout &lt;&lt; "log" &lt;&lt; z4 &lt;&lt; " (the other side of the cut) = " &lt;&lt; std::log(z4) &lt;&lt; '\n';
}
|p=true
|output=
2 * log(0,1) = (0,3.14159)
4 * log(0.707107,0.707107) = (0,3.14159)
log(-1,0) = (0,3.14159)
log(-1,-0) (the other side of the cut) = (0,-3.14159)
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2597|std=C++98|before=规定错误地处理了有符号零虚部|after=移除错误的要求}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc log10}}
{{dsc inc|cpp/numeric/complex/dsc exp}}
{{dsc inc|cpp/numeric/math/dsc log}}
{{dsc inc|cpp/numeric/valarray/dsc log}}
{{dsc see c|c/numeric/complex/clog}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|exp&lt;small&gt;(std::complex)&lt;/small&gt;}}
{{cpp/numeric/complex/navbar}}
{{ddcl|header=complex|1=
template&lt; class T &gt; 
std::complex&lt;T&gt; exp( const std::complex&lt;T&gt;&amp; z );
}}

计算 {{c|z}} 的底 e 指数，即 ''e''（欧拉数，{{tt|2.7182818}}）的 {{c|z}} 次幂。

===参数===
{{par begin}}
{{par|z|复数值}}
{{par end}}

===返回值===

若不出现错误，则返回 ''e'' 的 {{c|z}} 次幂，{{lc|math_errhandling}}。

===错误处理及特殊值===
报告的错误与 {{ltt|cpp/numeric/math/math_errhandling}} 一致。

若实现支持 IEEE 浮点算术，则
* {{c|std::exp(std::conj(z)) {{==}} std::conj(std::exp(z))}}
* 若 {{c|z}} 为 {{tt|(±0,+0)}}，则结果为 {{tt|(1,+0)}}。
* 若 {{c|z}} 为 {{tt|(x,+∞)}}（对于任何有限 x），则结果为 {{tt|(NaN,NaN)}} 并引发 {{lc|FE_INVALID}}。
* 若 {{c|z}} 为 {{tt|(x,NaN)}}（对于任何有限 x），则结果为 {{tt|(NaN,NaN)}} 并可能引发 {{lc|FE_INVALID}}。
* 若 {{c|z}} 为 {{tt|(+∞,+0)}}，则结果为 {{tt|(+∞,+0)}}。
* 若 {{c|z}} 为 {{tt|(-∞,y)}}（对于任何有限 y），则结果为 {{tt|+0cis(y)}}。
* 若 {{c|z}} 为 {{tt|(+∞,y)}}（对于任何有限非零 y），则结果为 {{tt|+∞cis(y)}}。
* 若 {{c|z}} 为 {{tt|(-∞,+∞)}}，则结果为 {{tt|(±0,±0)}}（符号未指定）。
* 若 {{c|z}} 为 {{tt|(+∞,+∞)}}，则结果为 {{tt|(±∞,NaN)}} 并引发 {{lc|FE_INVALID}} （实部符号未指定）
* 若 {{c|z}} 为 {{tt|(-∞,NaN)}}，则结果为 {{tt|(±0,±0)}}（符号未指定）
* 若 {{c|z}} 为 {{tt|(+∞,NaN)}}，则结果为 {{tt|(±∞,NaN)}}（实部符号未指定）
* 若 {{c|z}} 为 {{tt|(NaN,+0)}}，则结果为 {{tt|(NaN,+0)}}
* 若 {{c|z}} 为 {{tt|(NaN,y)}}（对于任何非零 y），则结果为 {{tt|(NaN,NaN)}} 并可能引发 {{lc|FE_INVALID}}。
* 若 {{c|z}} 为 {{tt|(NaN,NaN)}}，则结果为 {{tt|(NaN,NaN)}}。

其中 {{mathjax-or|\(\small{\rm cis}(y)\)|cis(y)}} 为 {{mathjax-or|\(\small \cos(y)+{\rm i}\sin(y)\)|cos(y) + i sin(y)}}。

===注解===
对于 {{mathjax-or|1=\(\small z = x + {\rm i}y\)|2=z = x+iy}}，复指数函数 {{mathjax-or|\(\small e^z\)|e{{su|p=z}}}} 等于 {{mathjax-or|\(\small e^x {\rm cis}(y)\)|e{{su|p=x}} cis(y)}}，或 {{mathjax-or|\(\small e^x (\cos(y)+{\rm i}\sin(y))\)|e{{su|p=x}} (cos(y) + i sin(y))}}。

指数函数在复平面上是''整函数''且无分支切割。
  
下列公式在实部为 0 时有等价的结果：
* {{c|std::exp(std::complex&lt;float&gt;(0, theta))}}
* {{c|std::complex&lt;float&gt;(cosf(theta), sinf(theta))}}
* {{c|std::polar(1.f, theta)}}

此情况下 {{tt|exp}} 可能会有 4.5 倍的耗时。应该以这些形式之一代替参数实部为字面 0 的 {{tt|exp}} 调用。虽然以运行时检查 {{c|1=z.real() == 0}} 避免 {{tt|exp}} 并没有收益。

===示例===
{{example|code=
#include &lt;cmath&gt;
#include &lt;complex&gt;
#include &lt;iostream&gt;

int main()
{
   const double pi = std::acos(-1);
   const std::complex&lt;double&gt; i(0, 1);

   std::cout &lt;&lt; std::fixed &lt;&lt; " exp(i*pi) = " &lt;&lt; std::exp(i * pi) &lt;&lt; '\n';
}
|output=
exp(i*pi) = (-1.000000,0.000000)
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc log}}
{{dsc inc|cpp/numeric/math/dsc exp}}
{{dsc inc|cpp/numeric/valarray/dsc exp}}
{{dsc inc|cpp/numeric/complex/dsc polar}}
{{dsc see c|c/numeric/complex/cexp}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
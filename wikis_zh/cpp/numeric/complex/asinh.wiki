{{cpp/title|asinh{{small|(std::complex)}}}}
{{cpp/numeric/complex/navbar}}
{{ddcl|header=complex|since=c++11|1=
template&lt; class T &gt; 
complex&lt;T&gt; asinh( const complex&lt;T&gt;&amp; z );
}}

计算复数 {{c|z}} 的复反双曲正弦，分支切割在沿虚轴的 {{math|[−i; +i]}} 区间外。

===参数===
{{par begin}}
{{par|z|复数值}}
{{par end}}

===返回值===
若不出现错误，则返回 {{c|z}} 的复反双曲正弦，值域为在沿实轴数学上无界，沿虚轴在区间 {{math|[−iπ/2; +iπ/2]}} 中的条带。

===错误处理及特殊值===
报告的错误与 {{lc|math_errhandling}} 一致。

若实现支持 IEEE 浮点算术，则
* {{c|std::asinh(std::conj(z)) {{==}} std::conj(std::asinh(z))}}
* {{c|std::asinh(-z) {{==}} -std::asinh(z)}}
* 若 {{c|z}} 为 {{tt|(+0,+0)}}，则结果为 {{tt|(+0,+0)}}
* 若 {{c|z}} 为 {{tt|(x,+∞)}}（对于任何有限正 x），则结果为 {{tt|(+∞,π/2)}}
* 若 {{c|z}} 为 {{tt|(x,NaN)}}（对于任何有限 x），则结果为 {{tt|(NaN,NaN)}} 并可能引发 {{lc|FE_INVALID}}
* 若 {{c|z}} 为 {{tt|(+∞,y)}}（对于任何有限正 y），则结果为 {{tt|(+∞,+0)}}
* 若 {{c|z}} 为 {{tt|(+∞,+∞)}}，则结果为 {{tt|(+∞,π/4)}}
* 若 {{c|z}} 为 {{tt|(+∞,NaN)}}，则结果为 {{tt|(+∞,NaN)}}
* 若 {{c|z}} 为 {{tt|(NaN,+0)}}，则结果为 {{tt|(NaN,+0)}}
* 若 {{c|z}} 为 {{tt|(NaN,y)}}（对于任何有限非零 y），则结果为 {{tt|(NaN,NaN)}} 并可能引发 {{lc|FE_INVALID}}
* 若 {{c|z}} 为 {{tt|(NaN,+∞)}}，则结果为 {{tt|(±∞,NaN)}}（实部符号未指定）
* 若 {{c|z}} 为 {{tt|(NaN,NaN)}}，则结果为 {{tt|(NaN,NaN)}}

===注解===
尽管 C++ 标准命名此函数为“复弧双曲正弦”函数，双曲函数的反函数仍是面积函数。其参数是双曲扇形的面积，而非弧长。正确的名称是“复反双曲正弦”或较不常用的“复面积双曲正弦”。

反双曲正弦是多值函数，而在复平面上要求分支切割。约定将分支置于虚轴的线段 {{math|(-''i''∞,-''i'')}} 和 {{math|(''i'',''i''∞)}} 上。

反双曲正弦主值的数学定义是 {{math|asinh z {{=}} ln(z + {{mrad|1+z{{su|p=2}}}})}}。

对于任何 {{c|z}}，{{math|asinh(z) {{=}} {{mfrac|asin(iz)|i}}}}。

===示例===
{{example|
|code=
#include &lt;complex&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; std::fixed;
    std::complex&lt;double&gt; z1(0.0, -2.0);
    std::cout &lt;&lt; "asinh" &lt;&lt; z1 &lt;&lt; " = " &lt;&lt; std::asinh(z1) &lt;&lt; '\n';

    std::complex&lt;double&gt; z2(-0.0, -2);
    std::cout &lt;&lt; "asinh" &lt;&lt; z2 &lt;&lt; " (the other side of the cut) = "
              &lt;&lt; std::asinh(z2) &lt;&lt; '\n';

    // for any z, asinh(z) = asin(iz) / i
    std::complex&lt;double&gt; z3(1.0, 2.0);
    std::complex&lt;double&gt; i(0.0, 1.0);
    std::cout &lt;&lt; "asinh" &lt;&lt; z3 &lt;&lt; " = " &lt;&lt; std::asinh(z3) &lt;&lt; '\n'
              &lt;&lt; "asin" &lt;&lt; z3 * i &lt;&lt; " / i = " &lt;&lt; std::asin(z3 * i) / i &lt;&lt; '\n';
}
|output=
asinh(0.000000,-2.000000) = (1.316958,-1.570796)
asinh(-0.000000,-2.000000) (the other side of the cut) = (-1.316958,-1.570796)
asinh(1.000000,2.000000) = (1.469352,1.063440)
asin(-2.000000,1.000000) / i = (1.469352,1.063440)
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc acosh}}
{{dsc inc|cpp/numeric/complex/dsc atanh}}
{{dsc inc|cpp/numeric/complex/dsc sinh}}
{{dsc inc|cpp/numeric/math/dsc asinh}}
{{dsc see c|c/numeric/complex/casinh}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
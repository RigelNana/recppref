{{cpp/numeric/complex/title|complex}}
{{cpp/numeric/complex/navbar}}
{{dcl begin}}
{{dcl h|主模板（{{c/core|std::complex&lt;T&gt;}}）}}
{{dcl rev begin|num=1}}
{{dcl|until=c++14|1=
complex( const T&amp; re = T(), const T&amp; im = T() );
}}
{{dcl|since=c++14|1=
constexpr complex( const T&amp; re = T(), const T&amp; im = T() );
}}
{{dcl rev end}}
{{dcl rev begin|num=2}}
{{dcl|until=c++14|
complex( const complex&amp; other );
}}
{{dcl|since=c++14|until=c++23|
constexpr complex( const complex&amp; other );
}}
{{dcl|since=c++23|1=
constexpr complex( const complex&amp; other ) = default;
}}
{{dcl rev end}}
{{dcl rev begin|num=3}}
{{dcl|until=c++14|
template&lt; class X &gt;
complex( const complex&lt;X&gt;&amp; other );
}}
{{dcl|since=c++14|until=c++23|
template&lt; class X &gt;
constexpr complex( const complex&lt;X&gt;&amp; other );
}}
{{dcl|since=c++23|
template&lt; class X &gt;
explicit(/* 见下文 */) constexpr complex( const complex&lt;X&gt;&amp; other );
}}
{{dcl rev end}}

{{dcl h|标准显式特化 {{c/core|std::complex&lt;float&gt;}} {{mark until c++23}}}}
{{dcl rev begin|num=1}}
{{dcl|until=c++11|1=
complex( float re = 0.0f, float im = 0.0f );
}}
{{dcl|since=c++11|1=
constexpr complex( float re = 0.0f, float im = 0.0f );
}}
{{dcl rev end}}
{{dcl|num=2|since=c++20|1=
constexpr complex( const complex&lt;float&gt;&amp; other ) = default;
}}
{{dcl rev begin|num=3}}
{{dcl|until=c++11|
explicit complex( const complex&lt;double&gt;&amp; other );
explicit complex( const complex&lt;long double&gt;&amp; other );
}}
{{dcl|since=c++11|
explicit constexpr complex( const complex&lt;double&gt;&amp; other );
explicit constexpr complex( const complex&lt;long double&gt;&amp; other );
}}
{{dcl rev end}}

{{dcl h|标准显式特化 {{c/core|std::complex&lt;double&gt;}} {{mark until c++23}}}}
{{dcl rev begin|num=1}}
{{dcl|until=c++11|1=
complex( double re = 0.0, double im = 0.0 );
}}
{{dcl|since=c++11|1=
constexpr complex( double re = 0.0, double im = 0.0 );
}}
{{dcl rev end}}
{{dcl|num=2|since=c++20|1=
constexpr complex( const complex&lt;double&gt;&amp; other ) = default;
}}
{{dcl rev begin|num=3}}
{{dcl|until=c++11|
complex( const complex&lt;float&gt;&amp; other );
explicit complex( const complex&lt;long double&gt;&amp; other );
}}
{{dcl|since=c++11|
constexpr complex( const complex&lt;float&gt;&amp; other );
explicit constexpr complex( const complex&lt;long double&gt;&amp; other );
}}

{{dcl h|标准显式特化 {{c/core|std::complex&lt;long double&gt;}} {{mark until c++23}}}}
{{dcl rev begin|num=1}}
{{dcl|until=c++11|1=
complex( long double re = 0.0L, long double im = 0.0L );
}}
{{dcl|since=c++11|1=
constexpr complex( long double re = 0.0L, long double im = 0.0L );
}}
{{dcl rev end}}
{{dcl|num=2|since=c++20|1=
constexpr complex( const complex&lt;long double&gt;&amp; other ) = default;
}}
{{dcl rev begin|num=3}}
{{dcl|until=c++11|
complex( const complex&lt;float&gt;&amp; other );
complex( const complex&lt;double&gt;&amp; other );
}}
{{dcl|since=c++11|
constexpr complex( const complex&lt;float&gt;&amp; other );
constexpr complex( const complex&lt;double&gt;&amp; other );
}}
{{dcl end}}

构造 {{lc|std::complex}} 对象。{{rev inl|until=c++23|标准显式特化（{{c/core|std::complex&lt;float&gt;}}、{{c/core|std::complex&lt;double&gt;}} 和 {{c/core|std::complex&lt;long double&gt;}}）的构造函数声明和主模板的有差别。}}

@1@ 从实部 {{c|re}} 和虚部 {{c|im}} 构造复数。
@2@ 复制构造函数。以 {{c|other}} 内容的副本构造复数。{{rev inl|until=c++20|复制构造函数在标准显式特化中隐式声明。}}
@3@ [[cpp/language/converting constructor|转换构造函数]]。从另一个复数类型构造对象。
{{rev begin}}
{{rev|until=c++23|
主模板提供了一个转换构造函数模板，而每个标准显式特化都为其他两个标准显式特化提供了对应的两个非模板构造函数。

这些非模板构造函数当且仅当实虚部转换不会窄化时才是转换构造函数（即非 explicit）。
}}
{{rev|since=c++23|
{{c/core|explicit}} 中的表达式当且仅当 {{tt|T}} 的[[cpp/language/usual arithmetic conversions#浮点转换等级|浮点转换等级]]高于或等于 {{tt|X}} 的浮点转换等级时才会求值为 {{c|false}}。
}}
{{rev end}}

===参数===
{{par begin}}
{{par|re|实部}}
{{par|im|虚部}}
{{par|other|用作源的另一复数}}
{{par end}}

===注解===
从 C++23 起，为满足{{named req|TriviallyCopyable}}的要求，复制构造函数必须是[[cpp/language/copy constructor#平凡的复制构造函数|平凡]]的，但是实现通常会使其在所有 C++ 标准模式下平凡。

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc operator{{=}}}}
{{dsc inc|cpp/numeric/dsc operator""i}}
{{dsc see c|c/numeric/complex/CMPLX}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
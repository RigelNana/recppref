{{cpp/title|acos{{small|(std::complex)}}}}
{{cpp/numeric/complex/navbar}}
{{ddcl|header=complex|since=c++11|1=
template&lt; class T &gt; 
complex&lt;T&gt; acos( const complex&lt;T&gt;&amp; z );
}}

计算复数值 {{tt|z}} 的复弧（反）余弦。分支切割在沿实轴的区间 {{math|[−1, +1]}} 外。

===参数===
{{par begin}}
{{par|z|复数值}}
{{par end}}

===返回值===
若不出现错误，则返回 {{c|z}} 的复弧（反）余弦，值域为沿虚轴的无界且沿实轴的区间 {{math|[0, +π]}} 的条带。

===错误处理及特殊值===
报告的错误与 {{ltt|cpp/numeric/math/math_errhandling}} 一致。

若实现支持 IEEE 浮点算术，则
* {{c|std::acos(std::conj(z)) {{==}} std::conj(std::acos(z))}}
* 若 {{c|z}} 为 {{tt|(±0,+0)}}，则结果为 {{tt|(π/2,-0)}}
* 若 {{c|z}} 为 {{tt|(±0,NaN)}}，则结果为 {{tt|(π/2,NaN)}}
* 若 {{c|z}} 为 {{tt|(x,+∞)}}（对于任何有限 x），则结果为 {{tt|(π/2,-∞)}}
* 若 {{c|z}} 为 {{tt|(x,NaN)}}（对于任何有限非零 x），则结果为 {{tt|(NaN,NaN)}} 并可能引发 {{lc|FE_INVALID}}。
* 若 {{c|z}} 为 {{tt|(-∞,y)}}（对于任何有限正 y），则结果为 {{tt|(π,-∞)}}
* 若 {{c|z}} 为 {{tt|(+∞,y)}}（对于任何有限正 y），则结果为 {{tt|(+0,-∞)}}
* 若 {{c|z}} 为 {{tt|(-∞,+∞)}}，则结果为 {{tt|(3π/4,-∞)}}
* 若 {{c|z}} 为 {{tt|(+∞,+∞)}}，则结果为 {{tt|(π/4,-∞)}}
* 若 {{c|z}} 为 {{tt|(±∞,NaN)}}，则结果为 {{tt|(NaN,±∞)}}（虚部符号未指定）
* 若 {{c|z}} 为 {{tt|(NaN,y)}}（对于任何有限 y），则结果为 {{tt|(NaN,NaN)}} 并可能引发 {{lc|FE_INVALID}}。
* 若 {{c|z}} 为 {{tt|(NaN,+∞)}}，则结果为 {{tt|(NaN,-∞)}}
* 若 {{c|z}} 为 {{tt|(NaN,NaN)}}，则结果为 {{tt|(NaN,NaN)}}

===注解===
反余弦（或弧余弦）是多值函数，要求复平面上的分支切割。约定将分支切割置于实轴的线段 {{math|(-∞,-1)}} 和 {{math|(1,∞)}} 上。

弧（反）余弦主值的数学定义是 {{math|acos z {{=}} {{mfrac|1|2}}π + ''i''ln(''i''z + {{mrad|1-z{{su|p=2}}}})}}。

对于任何 {{c|z}}，{{math|acos(z) {{=}} π - acos(-z)}}。

===示例===
{{example|
|code=
#include &lt;cmath&gt;
#include &lt;complex&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; std::fixed;
    std::complex&lt;double&gt; z1(-2.0, 0.0);
    std::cout &lt;&lt; "acos" &lt;&lt; z1 &lt;&lt; " = " &lt;&lt; std::acos(z1) &lt;&lt; '\n';

    std::complex&lt;double&gt; z2(-2.0, -0.0);
    std::cout &lt;&lt; "acos" &lt;&lt; z2 &lt;&lt; " (the other side of the cut) = "
              &lt;&lt; std::acos(z2) &lt;&lt; '\n';

    // 对于任何 z，acos(z) = pi - acos(-z)
    const double pi = std::acos(-1);
    std::complex&lt;double&gt; z3 = pi - std::acos(z2);
    std::cout &lt;&lt; "cos(pi - acos" &lt;&lt; z2 &lt;&lt; ") = " &lt;&lt; std::cos(z3) &lt;&lt; '\n';
}
|output=
acos(-2.000000,0.000000) = (3.141593,-1.316958)
acos(-2.000000,-0.000000) (the other side of the cut) = (3.141593,1.316958)
cos(pi - acos(-2.000000,-0.000000)) = (2.000000,0.000000)
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc asin}}
{{dsc inc|cpp/numeric/complex/dsc atan}}
{{dsc inc|cpp/numeric/complex/dsc cos}}
{{dsc inc|cpp/numeric/math/dsc acos}}
{{dsc inc|cpp/numeric/valarray/dsc acos}}
{{dsc see c|c/numeric/complex/cacos}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
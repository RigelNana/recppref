{{cpp/numeric/complex/title|operator{{=}}}}
{{cpp/numeric/complex/navbar}}

{{dcl begin}}
{{dcl h|所有特化}}
{{dcl rev multi|num=1|until1=c++20|dcl1=
complex&amp; operator=( const complex&amp; cx );
|since2=c++20|dcl2=
constexpr complex&amp; operator=( const complex&amp; cx );
}}
{{dcl rev multi|num=2|until1=c++20|dcl1=
template&lt; class X &gt;
complex&amp; operator=( const std::complex&lt;X&gt;&amp; cx );
|since2=c++20|dcl2=
template&lt; class X &gt;
constexpr complex&amp; operator=( const std::complex&lt;X&gt;&amp; cx );
}}

{{dcl h|主模板 {{tt|complex&lt;T&gt;}}}}
{{dcl rev multi|num=3|until1=c++20|dcl1=
complex&amp; operator=( const T&amp; x );
|since2=c++20|dcl2=
constexpr complex&amp; operator=( const T&amp; x );
}}
{{dcl h|标准浮点类型特化 {{tt|complex&lt;F&gt;}} {{mark until c++23}}}}
{{dcl rev multi|num=3|until1=c++20|dcl1=
complex&amp; operator=( F x );
|since2=c++20|until2=c++23|dcl2=
constexpr complex&amp; operator=( F x );
}}
{{dcl end}}

把新值赋给内容。

@1,2@ 分别把 {{c|cx.real()}} 和 {{c|cx.imag()}} 赋给复数的实部和虚部。{{rev inl|since=c++23|复制赋值运算符 {{v|1}} 在 {{tt|T}} 是浮点类型时是[[cpp/language/copy assignment#平凡的复制赋值运算符|平凡的]]。}}

@3@ 把 {{c|x}} 赋给复数的实部。虚部设为零。

===参数===
{{par begin}}
{{par|x|要赋值的值}}
{{par|cx|要赋值的复数值}}
{{par end}}

===返回值===
{{c|*this}}

===注解===
复制赋值运算符从 C++23 开始才要求是[[cpp/language/copy assignment#平凡的复制赋值运算符|平凡的]]，但各实现通常在所有模式下都将它实现为平凡的。

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3935|std=C++98|before=缺失了重载 {{v|2}} 的描述|after=已补充}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/complex/dsc complex}}
{{dsc inc|cpp/numeric/dsc operator""i}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
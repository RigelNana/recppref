{{cpp/numeric/valarray/title|operator{{=}}}}
{{cpp/numeric/valarray/navbar}}
{{dcl begin}}
{{dcl|num=1|1=
valarray&lt;T&gt;&amp; operator=( const valarray&lt;T&gt;&amp; other );
}}
{{dcl|num=2|since=c++11|1=
valarray&lt;T&gt;&amp; operator=( valarray&lt;T&gt;&amp;&amp; other ) noexcept;
}}
{{dcl|num=3|1=
valarray&lt;T&gt;&amp; operator=( const T&amp; val );
}}
{{dcl|num=4|1=
valarray&lt;T&gt;&amp; operator=( const std::slice_array&lt;T&gt;&amp; other );
}}
{{dcl|num=5|1=
valarray&lt;T&gt;&amp; operator=( const std::gslice_array&lt;T&gt;&amp; other );
}}
{{dcl|num=6|1=
valarray&lt;T&gt;&amp; operator=( const std::mask_array&lt;T&gt;&amp; other );
}}
{{dcl|num=7|1=
valarray&lt;T&gt;&amp; operator=( const std::indirect_array&lt;T&gt;&amp; other );
}}
{{dcl|num=8|since=c++11|1=
valarray&lt;T&gt;&amp; operator=( std::initializer_list&lt;T&gt; il );
}}
{{dcl end}}

替换数值数组的内容。

@1@ 复制赋值运算符。如果 {{c|1=size() != other.size()}}，那么首先如同通过 {{c|resize(other.size())}} 重置 {{c|*this}} 的大小。{{c|*this}} 的每个元素被赋 {{c|other}} 的对应元素的值。
@2@ 移动赋值运算符。以 {{c|other}} 的内容替换 {{c|*this}} 的内容。此操作后 {{c|other}} 的内容未指定。如果 {{tt|T}} 拥有非平凡的析构函数，那么此操作的复杂度可能是线性，其他情况下通常是常数。
@3@ 以 {{c|val}} 的副本替换 {{c|*this}} 中的每个值。
@4-7@ 以广义的下标运算的结果替换 {{c|*this}} 的内容。如果 {{rlpf|size}} 与 {{c|other}} 的长度不相等，或左侧的任何值依赖右侧的某个值（例如 {{c|1=v = v[v &gt; 2]}}），那么行为未定义。
@8@ 赋值初始化式列表 {{c|il}} 的内容。等价于 {{c|1=*this = valarray(il)}}。

===参数===
{{par begin}}
{{par|other|要赋值的另一数值数组（或掩码）}}
{{par|val|用来初始化每个元素的值}}
{{par|il|要赋值的初始化式列表}}
{{par end}}

===返回值===
{{c|*this}}

===异常===
@1,3-8@ {{cpp/impldef exception item}}

===示例===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;valarray&gt;

void print(const char* rem, const std::valarray&lt;int&gt;&amp; v)
{
    std::cout &lt;&lt; std::left &lt;&lt; std::setw(36) &lt;&lt; rem &lt;&lt; std::right;
    for (int n : v)
        std::cout &lt;&lt; std::setw(3) &lt;&lt; n;
    std::cout &lt;&lt; '\n';
}

int main()
{
    std::valarray&lt;int&gt; v1(3);
    v1 = -1; // （3）从标量
    print("从标量赋值：\t\t    ", v1);
    
    v1 = {1, 2, 3, 4, 5, 6}; // （8）从不同大小的初始化式列表
    print("从初始化式列表赋值：\t    ", v1);
    
    std::valarray&lt;int&gt; v2(3);
    v2 = v1[std::slice(0, 3, 2)]; // （4）从切片数组
    print("从位置 0 开始的每第 2 个元素：   ", v2);
 
    v2 = v1[v1 % 2 == 0]; // （6）从掩码数组
    print("偶数值：\t\t\t     ", v2);
 
    std::valarray&lt;std::size_t&gt; idx = {0, 1, 2, 4}; // 索引数组
    v2.resize(4); // 从生成下标赋值时大小必须匹配
    v2 = v1[idx]; // （7）从间接数组
    print("在位置 0、1、2、4 的值：	     ", v2);
}
|output=
从标量赋值：		    -1 -1 -1
从初始化式列表赋值：	     1  2  3  4  5  6
从位置 0 开始的每第 2 个元素：   1  3  5
偶数值：			     2  4  6
在位置 0、1、2、4 的值：	     1  2  3  5
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=624|std=C++98|before=在 {{c|other}} 的长度不是 {{rlpf|size}} 时，重载 {{v|4-7}} 的行为不明确|after=此时行为未定义}}
{{dr list item|wg=lwg|dr=630|std=C++98|before=复制赋值运算符在 {{c|1=size() != other.size()}} 时的行为未定义|after=此时先重置 {{c|*this}} 的大小}}
{{dr list item|wg=lwg|dr=2071|std=C++98|before=移动赋值运算符在 {{c|1=size() != other.size()}} 时会重置 {{c|*this}} 的大小|after=此时不需要重置大小}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{title|1=operator==,!=,&lt;,&lt;=,&gt;,&gt;={{small|(std::valarray)}}}}
{{cpp/numeric/valarray/navbar}}
{{dcl begin}}
{{dcl header|valarray}}
{{dcl|num=1|1=
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator==( const std::valarray&lt;T&gt;&amp; lhs, const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator!=( const std::valarray&lt;T&gt;&amp; lhs, const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&lt; ( const std::valarray&lt;T&gt;&amp; lhs, const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&lt;=( const std::valarray&lt;T&gt;&amp; lhs, const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&gt; ( const std::valarray&lt;T&gt;&amp; lhs, const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&gt;=( const std::valarray&lt;T&gt;&amp; lhs, const std::valarray&lt;T&gt;&amp; rhs );
}}
{{dcl|num=2|1=
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator==( const typename std::valarray&lt;T&gt;::value_type &amp; lhsv,
                                const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator!=( const typename std::valarray&lt;T&gt;::value_type &amp; lhsv,
                                const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&lt; ( const typename std::valarray&lt;T&gt;::value_type &amp; lhsv,
                                const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&lt;=( const typename std::valarray&lt;T&gt;::value_type &amp; lhsv,
                                const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&gt; ( const typename std::valarray&lt;T&gt;::value_type &amp; lhsv,
                                const std::valarray&lt;T&gt;&amp; rhs );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&gt;=( const typename std::valarray&lt;T&gt;::value_type &amp; lhsv,
                                const std::valarray&lt;T&gt;&amp; rhs );
}}
{{dcl|num=3|1=
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator==( const std::valarray&lt;T&gt;&amp; lhs,
                                const typename std::valarray&lt;T&gt;::value_type &amp; rhsv );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator!=( const std::valarray&lt;T&gt;&amp; lhs,
                                const typename std::valarray&lt;T&gt;::value_type &amp; rhsv );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&lt; ( const std::valarray&lt;T&gt;&amp; lhs,
                                const typename std::valarray&lt;T&gt;::value_type &amp; rhsv );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&lt;=( const std::valarray&lt;T&gt;&amp; lhs,
                                const typename std::valarray&lt;T&gt;::value_type &amp; rhsv );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&gt; ( const std::valarray&lt;T&gt;&amp; lhs,
                                const typename std::valarray&lt;T&gt;::value_type &amp; rhsv );
template&lt; class T &gt; 
std::valarray&lt;bool&gt; operator&gt;=( const std::valarray&lt;T&gt;&amp; lhs,
                                const typename std::valarray&lt;T&gt;::value_type &amp; rhsv );
}}
{{dcl end}}

比较数值数组中的各值和另一个值。

@1@ 返回 {{c|bool}} 的数值数组，含应用指示的比较运算符到 {{c|lhs}} 与 {{c|rhs}} 的对应元素所获得的每个元素。

若 {{c|1=size() != v.size()}} 则行为未定义。

@2@ 返回 {{c|bool}} 的数值数组，含应用指示的比较运算符到 {{c|lhsv}} 与 {{c|rhs}} 的对应值所获得的每个元素。

@3@ 返回 {{c|bool}} 的数值数组，含应用指示的比较运算符到 {{c|lhs}} 的对应值与 {{c|rhsv}} 所获得的每个元素。

===参数===
{{par begin}}
{{par|lhs, rhs|要比较的数值数组}}
{{par|lhsv, rhsv|要与数值数组中每个元素比较的值}}
{{par end}}

===返回值===
含对应元素比较结果的 {{c|bool}} 的数值数组。

{{cpp/impldef exception}}

===注解===
仅若满足下列要求，每个运算符才能实例化：
:* 指示的运算符能应用于类型 {{tt|T}}。
:* 返回值能无歧义地转换为 {{c|bool}}。

{{cpp/numeric/valarray/notes_ret}}

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;valarray&gt;

int main()
{
    // 清零 valarray 中的所有负值
    std::valarray&lt;int&gt; v = {1, -1, 0, -3, 10, -1, -2};
    std::cout &lt;&lt; "之前: ";
    for(auto n: v) {
        std::cout &lt;&lt; n &lt;&lt; ' ';
    }
    std::cout &lt;&lt; '\n';
    v[v &lt; 0] = 0;
    std::cout &lt;&lt; "之后: ";
    for(auto n: v) {
        std::cout &lt;&lt; n &lt;&lt; ' ';
    }
    std::cout &lt;&lt; '\n';

    // 转换 == 的 valarray&lt;bool&gt; 结果为单个 bool
    std::valarray&lt;int&gt; a = {1, 2, 3};
    std::valarray&lt;int&gt; b = {2, 4, 6};

    std::cout &lt;&lt; "2*a == b 为 " &lt;&lt; std::boolalpha
              &lt;&lt; (2*a == b).min() &lt;&lt; '\n';

}
|output=
之前: 1 -1 0 -3 10 -1 -2
之后: 1 0 0 0 10 0 0
2*a == b 为 true
}}

===缺陷报告===
{{dr list begin}}
{{dr list item | wg=lwg|dr=3074|std=C++98|before={{v|2-3}} 从标量和 {{tt|valarray}} 两者推导 {{tt|T}}，禁止混合类型的调用|after=仅从 {{tt|valarray}} 推导 {{tt|T}}}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
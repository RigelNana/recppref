{{cpp/title|atan2{{small|(std::valarray)}}}}
{{cpp/numeric/valarray/navbar}}
{{dcl begin}}
{{dcl header|valarray}}
{{dcl|num=1|
template&lt; class T &gt; 
std::valarray&lt;T&gt; atan2( const std::valarray&lt;T&gt;&amp; y, const std::valarray&lt;T&gt;&amp; x );
}}
{{dcl|num=2|
template&lt; class T &gt; 
std::valarray&lt;T&gt; atan2( const std::valarray&lt;T&gt;&amp; y,
                        const typename std::valarray&lt;T&gt;::value_type&amp; vx );
}}
{{dcl|num=3|
template&lt; class T &gt; 
std::valarray&lt;T&gt; atan2( const typename std::valarray&lt;T&gt;::value_type&amp; vy,
                        const std::valarray&lt;T&gt;&amp; x );
}}
{{dcl end}}

计算 {{c|y / x}} 的反正切，用各实参正负号正确地确定象限。

@1@ 计算每对来自 {{c|y}} 与 {{c|x}} 的对应值的反正切。

若 {{c|1=x.size() != y.size()}} 则行为未定义。
@2@ 计算 {{c|vx}} 与数值数组 {{c|y}} 中每个值的反正切。
@3@ 计算 {{c|vy}} 与数值数组 {{c|x}} 中每个值的反正切。

===参数===
{{par begin}}
{{par|x, y|要计算反正切的数值数组}}
{{par|vy, vx|要计算反正切的值}}
{{par end}}

===返回值===
含反正切计算结果的数值数组。

===注解===
{{cpp/numeric/valarray/notes unq|atan2}}

{{cpp/numeric/valarray/notes ret|atan2}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;valarray&gt;

void show(char const* title, const std::valarray&lt;double&gt;&amp; va)
{
    std::cout &lt;&lt; title &lt;&lt; ' ';
    std::for_each(std::begin(va), std::end(va), [](const double x)
    { 
        std::cout &lt;&lt; ' ' &lt;&lt; std::right &lt;&lt; std::setw(4) &lt;&lt; x &lt;&lt; "°";
    });
    std::cout &lt;&lt; '\n';
}

const double pi = std::acos(-1.0); // C++20: std::numbers::pi

int main()
{
    auto degrees_to_radians = [](double const&amp; x) { return (pi * x / 180); };
    auto radians_to_degrees = [](double const&amp; x) { return (180 * x / pi); };

    const std::valarray&lt;double&gt; degrees{-90, -60, -45, -30, 0, 30, 45, 60, 90};
    const std::valarray&lt;double&gt; radians = degrees.apply(degrees_to_radians);

    const auto sin = std::sin(radians);
    const auto cos = std::cos(radians);

    show("(1)", std::atan2(sin, cos).apply(radians_to_degrees));
    show("(2)", std::atan2(sin/cos, 1.0).apply(radians_to_degrees));
    show("(3)", std::atan2(1.0, cos/sin).apply(radians_to_degrees));
}
|output=
(1)   -90°  -60°  -45°  -30°    0°   30°   45°   60°   90°
(2)   -90°  -60°  -45°  -30°    0°   30°   45°   60°   90°
(3)    90°  120°  135°  150°    0°   30°   45°   60°   90°
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=3074|std=C++98|before={{v|2,3}} 从标量和 {{tt|valarray}} 两者推导 {{tt|T}}，禁止混合类型的调用|after=仅从 {{tt|valarray}} 推导 {{tt|T}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/valarray/dsc asin}}
{{dsc inc|cpp/numeric/valarray/dsc acos}}
{{dsc inc|cpp/numeric/valarray/dsc atan}}
{{dsc inc|cpp/numeric/math/dsc atan2}}
{{dsc inc|cpp/numeric/complex/dsc arg}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
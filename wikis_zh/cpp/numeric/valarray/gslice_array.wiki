{{cpp/title|gslice_array}}
{{cpp/numeric/valarray/gslice_array/navbar}}
{{ddcl|header=valarray|
template&lt; class T &gt;
class gslice_array;
}}

{{tt|std::gslice_array}} 是接受 {{c/core|std::gslice}} 实参的 {{rlp|operator_at|{{tt|valarray}} 下标运算符}}所用的辅助模板。它拥有到 {{c/core|std::gslice}} 对象所指定的数组子集的引用语义。

===成员类型===
{{dsc begin}}
{{dsc hitem|类型|定义 }}
{{dsc|{{tt|value_type}}|{{tt|T}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/numeric/valarray/array/dsc constructor|gslice_array}}
{{dsc inc|cpp/numeric/valarray/array/dsc destructor|gslice_array}}
{{dsc inc|cpp/numeric/valarray/array/dsc operator{{=}}|gslice_array}}
{{dsc inc|cpp/numeric/valarray/array/dsc operator_arith|gslice_array}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;cstddef&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;valarray&gt;

int main()
{
    std::valarray&lt;int&gt; data(32);
    std::iota(std::begin(data), std::end(data), 0);

    const std::size_t offset = 1, z = 2, y = 3, x = 4;
    const std::valarray&lt;std::size_t&gt; sizes{z, y, x};
    const std::valarray&lt;std::size_t&gt; strides{15, 5, 1};
    const std::gslice gslice = std::gslice(offset, sizes, strides);
    // 根据公式生成索引:
    // index[k] = offset + [0,1,2)*15 + [0,1,2,3)*5 + [0,1,2,3,4)*1
    //          = offset + inner_product(sizes[k], strides);
    // 其中 sizes[k] = {[0,z), [0,y), [0,x)}，最右侧索引 (x) 变化最快。
    // 结果是一下索引集合:
    //  index[0]  = 1 + 0*15 + 0*5 + 0*1 = 1
    //  index[1]  = 1 + 0*15 + 0*5 + 1*1 = 2
    //  index[2]  = 1 + 0*15 + 0*5 + 2*1 = 3
    //  index[3]  = 1 + 0*15 + 0*5 + 3*1 = 4
    //  index[4]  = 1 + 0*15 + 1*5 + 0*1 = 6
    //  index[5]  = 1 + 0*15 + 1*5 + 1*1 = 7
    //  index[6]  = 1 + 0*15 + 1*5 + 2*1 = 8
    //  index[7]  = 1 + 0*15 + 1*5 + 3*1 = 9
    //  ...
    //  index[22] = 1 + 1*15 + 2*5 + 2*1 = 28
    //  index[23] = 1 + 1*15 + 2*5 + 3*1 = 29

    const std::valarray&lt;int&gt; indices = data[gslice];
    for (unsigned i = 0; i != indices.size(); ++i)
        std::cout &lt;&lt; std::setfill('0') &lt;&lt; std::setw(2) &lt;&lt; indices[i] &lt;&lt; ' ';
    std::cout &lt;&lt; "\n索引总数: " &lt;&lt; indices.size() &lt;&lt; '\n';
    assert(indices.size() == x * y * z);

    data = 0;
    std::gslice_array&lt;int&gt; gslice_array = data[gslice];
    gslice_array = 1;
    // 对应于生成的索引的单元格 = '1', 跳过的单元格 = '0'.
    for (auto i : data)
        std::cout &lt;&lt; i &lt;&lt; ' ';
    std::cout &lt;&lt; "\n1 的求和 = " &lt;&lt; data.sum() &lt;&lt; '\n';
}
|output=
01 02 03 04 06 07 08 09 11 12 13 14 16 17 18 19 21 22 23 24 26 27 28 29 
索引总数: 24
0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 0 
1 的求和 = 24
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/valarray/dsc slice_array}}
{{dsc inc|cpp/container/dsc mdspan}}
{{dsc end}}

{{langlinks|en|ja}}
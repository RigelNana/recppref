{{cpp/numeric/valarray/title|operator[]}}
{{cpp/numeric/valarray/navbar}}
{{dcl begin}}
{{dcl|num=1|
const T&amp;               operator[]( std::size_t pos ) const;
}}
{{dcl|num=2|
T&amp;                     operator[]( std::size_t pos );
}}
{{dcl|num=3|
std::valarray&lt;T&gt;       operator[]( std::slice slicearr ) const;
}}
{{dcl|num=4|
std::slice_array&lt;T&gt;    operator[]( std::slice slicearr );
}}
{{dcl|num=5|
std::valarray&lt;T&gt;       operator[]( const std::gslice&amp; gslicearr ) const;
}}
{{dcl|num=6|
std::gslice_array&lt;T&gt;   operator[]( const std::gslice&amp; gslicearr );
}}
{{dcl|num=7|
std::valarray&lt;T&gt;       operator[]( const std::valarray&lt;bool&gt;&amp; boolarr ) const;
}}
{{dcl|num=8|
std::mask_array&lt;T&gt;     operator[]( const std::valarray&lt;bool&gt;&amp; boolarr );
}}
{{dcl|num=9|
std::valarray&lt;T&gt;       operator[]( const std::valarray&lt;std::size_t&gt;&amp; indarr ) const;
}}
{{dcl|num=10|
std::indirect_array&lt;T&gt; operator[]( const std::valarray&lt;std::size_t&gt;&amp; indarr );
}}
{{dcl end}}

获取数组的单个元素或一部分。

返回元素序列的 {{c/core|const}} 重载会创建新的 {{lc|std::valarray}} 对象。
非 {{c/core|const}} 重载返回持有到数组元素引用的类。

@1,2@ {{rel|{{cpp/hardened ub if|since=c++26| {{c|pos &lt; size()}} 是 {{c|false}}}}}}

@3-10@ {{cpp/ub if|实参指定的不是 {{c|*this}} 的有效子集}}。

===参数===
{{par begin}}
{{par|pos|要返回的（单个）元素的位置}}
{{par|slicearr|要返回的（单个或多个）元素的{{rlp|slice|切片}}}}
{{par|gslicearr|要返回的（单个或多个）元素的{{rlp|gslice|通用切片}}}}
{{par|boolarr|要返回的（单个或多个）元素的掩码}}
{{par|indarr|要返回的（单个或多个）元素的索引}}
{{par end}}

===返回值===
@1,2@ 到对应元素的引用

@3,5,7,9@ 含有被选择项副本的 {{lc|std::valarray}} 对象

@4,6,8,10@ 包含到被选择项引用的对应数据结构

{{cpp/impldef exception}}

===注解===
对于适当的 {{lc|std::valarray}} 值 {{c|a}}、{{c|b}} 和适当的 {{lc|std::size_t}} 值 {{c|i}}、{{c|j}}，以下所有表达式始终会求值为 {{c|true}}：

@1@ 对于非 const 的 {{c|a}}，{{c|1=(a[i] = q, a[i]) == q}}

@2@ {{c|1=&amp;a[i + j] == &amp;a[i] + j}} 
*这表示 {{lc|std::valarray}} 的元素在内存中相邻。

@3@ 对于每对不是另一方的别名的对象 {{c|a}} 和 {{c|b}}，{{c|1=&amp;a[i] != &amp;b[j]}}
*这表示元素中不存在别名，此特性可以用来进行某些优化。

调用 {{rlpt|resize|resize()}} 或者析构数组会导致引用失效。

对于重载 {{v|3,5,7,9}}，{{cpp/numeric/valarray/notes_ret}}

切片/掩码/间接索引访问不能连锁：{{c|1=v[v == n][std::slice(0, 5, 2)] = x;}} 是错误的，因为 {{lc|std::mask_array}}（{{c|1=v[v == n]}} 的类型）没有 {{c/core|operator[]}}。

===示例===
{{example
|code=
#include &lt;cstddef&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;valarray&gt;

int main() 
{
    std::valarray&lt;int&gt; data = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    
    std::cout &lt;&lt; "初始 valarray：      ";
    for (int n : data)
        std::cout &lt;&lt; std::setw(3) &lt;&lt; n;
    std::cout &lt;&lt; '\n';
    
    data[data &gt; 5] = -1; // operator[] 的 valarray&lt;bool&gt; 重载
    // data &gt; 5 的类型是 std::valarray&lt;bool&gt;
    // data[data &gt; 5] 的类型是 std::mask_array&lt;int&gt;
    
    std::cout &lt;&lt; "在 v[v &gt; 5] = -1 后：";
    for (std::size_t n = 0; n &lt; data.size(); ++n) 
        std::cout &lt;&lt; std::setw(3) &lt;&lt; data[n]; // 常规 operator[]
    std::cout &lt;&lt; '\n';
}
|output=
初始 valarray：      0  1  2  3  4  5  6  7  8  9
在 v[v &gt; 5] = -1 后：0  1  2  3  4  5 -1 -1 -1 -1
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=389|std=C++98|before=重载 {{v|1}} 的返回类型是 {{tt|T}}|after=改成 {{c/core|const T&amp;}}}}
{{dr list item|wg=lwg|dr=430|std=C++98|before=重载 {{v|3-10}} 指定无效子集时的行为不明确|after=此时行为未定义}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
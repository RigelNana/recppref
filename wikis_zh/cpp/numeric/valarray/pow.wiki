{{cpp/title|pow{{small|(std::valarray)}}}}
{{cpp/numeric/valarray/navbar}}
{{dcl begin}}
{{dcl header|valarray}}
{{dcl|num=1|
template&lt; class T &gt; 
std::valarray&lt;T&gt; pow( const std::valarray&lt;T&gt;&amp; base, const std::valarray&lt;T&gt;&amp; exp );
}}
{{dcl|num=2|
template&lt; class T &gt; 
std::valarray&lt;T&gt; pow( const std::valarray&lt;T&gt;&amp; base, 
                      const typename std::valarray&lt;T&gt;::value_type&amp; vexp );
}}
{{dcl|num=3|
template&lt; class T &gt; 
std::valarray&lt;T&gt; pow( const typename std::valarray&lt;T&gt;::value_type&amp; vbase,
                      const std::valarray&lt;T&gt;&amp; exp );
}}
{{dcl end}}

计算值的幂。

@1@ 计算数值数组 {{c|base}} 中各元素的幂，指数由来自数值数组 {{c|exp}} 的对应元素指定。

若 {{c|1=base.size() != exp.size()}} 则行为未定义。
@2@ 计算数值数组 {{c|base}} 中每个元素的 {{c|vexp}} 次幂。
@3@ 计算 {{c|vbase}} 的各值以数值数组 {{c|exp}} 中的元素定义次数的幂。

===参数===
{{par begin}}
{{par|base|含底数值的数值数组}}
{{par|exp|含指数值的数值数组}}
{{par|vbase|定义底数的值}}
{{par|vexp|定义指数的值}}
{{par end}}

===返回值===
含有指数结果的数值数组。

===注解===
{{cpp/numeric/valarray/notes unq|pow}}

{{cpp/numeric/valarray/notes ret|pow}}

===示例===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;cstddef&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;valarray&gt;

class show
{
    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, show const&amp; r)
    {
        constexpr char const* sup[]
        {
            "\u2070", "\u00B9", "\u00B2", "\u00B3", "\u2074",
            "\u2075", "\u2076", "\u2077", "\u2078", "\u2079"
        };

        for (std::size_t n = 0; n != r.bases.size(); ++n)
        {
            os &lt;&lt; std::left &lt;&lt; r.bases[n] &lt;&lt; std::left;
            if (n &lt; r.exponents.size())
                os &lt;&lt; sup[r.exponents[n] % 10] &lt;&lt; ' ';
            else
                os &lt;&lt; "  ";
        }

        if (r.results.size() != 0)
        {
            os &lt;&lt; '=';
            for (std::size_t n = 0; n != r.results.size(); ++n)
                os &lt;&lt; ' ' &lt;&lt; r.results[n];
        }

        return os &lt;&lt; '\n';
    }

public:
    std::valarray&lt;int&gt; bases{}, exponents{}, results{};
};

int main()
{
    constexpr int base{2};
    constexpr int exponent{5};
    const std::valarray&lt;int&gt; bases{1, 2, 3, 4, 5, 6, 7};
    const std::valarray&lt;int&gt; exponents{0, 1, 2, 3, 4, 5, 6};
    const std::valarray&lt;int&gt; powers1 = std::pow(bases, exponents);
    const std::valarray&lt;int&gt; powers2 = std::pow(bases, exponent);
    const std::valarray&lt;int&gt; powers3 = std::pow(base, exponents);

    std::cout
        &lt;&lt; "pow(const std::valarray&lt;T&gt;&amp; base, const std::valarray&lt;T&gt;&amp; exp); (1)\n"
        &lt;&lt; "base : " &lt;&lt; show{bases}
        &lt;&lt; "exp  : " &lt;&lt; show{exponents}
        &lt;&lt; "pow  : " &lt;&lt; show{bases, exponents, powers1}
        &lt;&lt; '\n'
        &lt;&lt; "pow(const std::valarray&lt;T&gt;&amp; base, const value_type&amp; vexp); (2)\n"
        &lt;&lt; "base : " &lt;&lt; show{bases}
        &lt;&lt; "vexp : " &lt;&lt; exponent &lt;&lt; '\n'
        &lt;&lt; "pow  : " &lt;&lt; show{bases, std::valarray&lt;int&gt;(exponent, bases.size()), powers2}
        &lt;&lt; '\n'
        &lt;&lt; "pow(const value_type&amp; vbase, const std::valarray&lt;T&gt;&amp; exp); (3)\n"
        &lt;&lt; "vbase: " &lt;&lt; base &lt;&lt; '\n'
        &lt;&lt; "exp  : " &lt;&lt; show{exponents}
        &lt;&lt; "pow  : " &lt;&lt; show{std::valarray&lt;int&gt;(base, bases.size()), exponents, powers3};
}
|output=
pow(const std::valarray&lt;T&gt;&amp; base, const std::valarray&lt;T&gt;&amp; exp); (1)
base : 1  2  3  4  5  6  7
exp  : 0  1  2  3  4  5  6
pow  : 1⁰ 2¹ 3² 4³ 5⁴ 6⁵ 7⁶ = 1 2 9 64 625 7776 117649

pow(const std::valarray&lt;T&gt;&amp; base, const value_type&amp; vexp); (2)
base : 1  2  3  4  5  6  7
vexp : 5
pow  : 1⁵ 2⁵ 3⁵ 4⁵ 5⁵ 6⁵ 7⁵ = 1 32 243 1024 3125 7776 16807

pow(const value_type&amp; vbase, const std::valarray&lt;T&gt;&amp; exp); (3)
vbase: 2
exp  : 0  1  2  3  4  5  6
pow  : 2⁰ 2¹ 2² 2³ 2⁴ 2⁵ 2⁶ = 1 2 4 8 16 32 64
}}

===缺陷报告===
{{dr list begin}}
{{dr list item | wg=lwg|dr=3074|std=C++98|before={{v|2-3}} 从标量和 {{tt|valarray}} 两者推导 {{tt|T}}，禁止混合类型的调用|after=仅从 {{tt|valarray}} 推导 {{tt|T}}}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/valarray/dsc sqrt}}
{{dsc inc|cpp/numeric/math/dsc pow}}
{{dsc inc|cpp/numeric/complex/dsc pow}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
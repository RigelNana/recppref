{{cpp/title|slice}}
{{cpp/numeric/valarray/navbar}}
{{ddcl|header=valarray|
class slice;
}}

{{tt|std::slice}} 是选择器类，标识 {{lc|std::valarray}} 类似于 {{enwiki|BLAS}} 切片的子集。一个 {{tt|std::slice}} 类型的对象保有三个值：起始索引，跨度，及子集中的值的总数。{{tt|std::slice}} 类型的对象可用作 {{tt|valarray}} 的 {{c/core|operator[]}} 的索引。

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/numeric/valarray/slice|inlinemem=true|构造一个切片}}
{{dsc mem fun|cpp/numeric/valarray/slice|title=start&lt;br/&gt;size&lt;br/&gt;stride|inlinemem=true|返回切片的参数}}
{{dsc end}}

{{member|{{small|std::slice::}}slice|
{{dcl begin}}
{{dcl|num=1|
slice()
}}
{{dcl|num=2|
slice( std::size_t start, std::size_t size, std::size_t stride );
}}
{{dcl|num=3|
slice( const slice&amp; other );
}}
{{dcl end}}

构造一个新切片。

@1@ 默认构造函数。等价于 {{c|slice(0, 0, 0)}}。此构造函数的存在只为允许构造数组的切片。

@2@ 以参数 {{c|start}}、{{c|size}}、{{c|stride}} 构造新切片。此切片将引用 {{c|size}} 个元素，每个处于位置：
:@@ {{math|start + 0 * stride}}
:@@ {{math|start + 1 * stride}}
:@@ {{math|...}}
:@@ {{math|start + (size - 1) * stride}}

@3@ 构造 {{c|other}} 的副本。

===参数===
{{par begin}}
{{par|start|首元素的位置}}
{{par|size|切片中的元素数}}
{{par|stride|切片中前后元素的相对位置}}
{{par|other|要复制的另一切片}}
{{par end}}
}}

{{member|{{small|std::slice::}}start, size, stride|
{{dcl begin}}
{{dcl|num=1|
std::size_t start() const;
}}
{{dcl|num=2|
std::size_t size() const;
}}
{{dcl|num=3|
std::size_t stride() const;
}}
{{dcl end}}

返回构造时传递给切片的参数——分别是起点、大小和跨度。

===参数===
（无）

===返回值===
切片的参数——分别是起点、大小和跨度。

===复杂度===
常数。
}}

===非成员函数===
{{dsc begin}}
{{dsc fun|cpp/numeric/valarray/slice|title=operator=={{dsc small|(std::slice)}}|notes={{mark c++20}}|inlinemem=true|检查两个切片是否相等}}
{{dsc end}}

{{member|1=operator=={{petty|(std::slice)}}|2=
{{dcl begin}}
{{dcl|since=c++20|1=
friend bool operator==( const slice&amp; lhs, const slice&amp; rhs );
}}
{{dcl end}}

检查 {{c|lhs}} 与 {{c|rhs}} 的参数——起点、大小和跨度是否分别相等。

{{cpp/hidden friend|std::slice}}

{{cpp/note synthesized eq}}

===参数===
{{par begin}}
{{par|lhs, rhs|要比较的切片}}
{{par end}}

===返回值===
{{c|1=lhs.start() == rhs.start() &amp;&amp; lhs.size() == rhs.size() &amp;&amp; lhs.stride() == rhs.stride()}}
}}

===示例===
{{example
|建立于 {{tt|valarray}} 的带{{enwiki|Trace (linear algebra)|迹}}计算函数的极简化矩阵类。
|code=
#include &lt;iostream&gt;
#include &lt;valarray&gt;

class Matrix
{
    std::valarray&lt;int&gt; data;
    int dim;
public:
    Matrix(int r, int c) : data(r * c), dim(c) {}
    int&amp; operator()(int r, int c) { return data[r * dim + c]; }
    int trace() const { return data[std::slice(0, dim, dim + 1)].sum(); }
};

int main()
{
    Matrix m(3, 3);
    int n = 0;
    for(int r = 0; r &lt; 3; ++r)
       for(int c = 0; c &lt; 3; ++c)
           m(r, c) = ++n;
    std::cout &lt;&lt; "矩阵 (1,2,3) (4,5,6) (7,8,9) 的迹是 " &lt;&lt; m.trace() &lt;&lt; '\n';
}
|output=
矩阵 (1,2,3) (4,5,6) (7,8,9) 的迹是 15
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=543|std=C++98|before=不明确默认构造的切片是否可用|after=（作为空子集）可用}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/valarray/dsc operator_at}}
{{dsc inc|cpp/numeric/valarray/dsc gslice}}
{{dsc inc|cpp/numeric/valarray/dsc slice_array}}
{{dsc inc|cpp/container/dsc mdspan}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
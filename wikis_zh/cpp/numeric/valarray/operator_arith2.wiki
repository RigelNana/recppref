{{cpp/numeric/valarray/title|1=operator+=,-=,*=,/=,%=,&amp;=,{{!}}=,&lt;&lt;=,&gt;&gt;=}}
{{cpp/numeric/valarray/navbar}}
{{dcl begin}}
{{dcl|num=1|1=
valarray&lt;T&gt;&amp; operator+=( const valarray&lt;T&gt;&amp; v );
valarray&lt;T&gt;&amp; operator-=( const valarray&lt;T&gt;&amp; v );
valarray&lt;T&gt;&amp; operator*=( const valarray&lt;T&gt;&amp; v );
valarray&lt;T&gt;&amp; operator/=( const valarray&lt;T&gt;&amp; v );
valarray&lt;T&gt;&amp; operator%=( const valarray&lt;T&gt;&amp; v );
valarray&lt;T&gt;&amp; operator&amp;=( const valarray&lt;T&gt;&amp; v );
valarray&lt;T&gt;&amp; operator{{!}}=( const valarray&lt;T&gt;&amp; v );
valarray&lt;T&gt;&amp; operator^=( const valarray&lt;T&gt;&amp; v );
valarray&lt;T&gt;&amp; operator&lt;&lt;=( const valarray&lt;T&gt;&amp; v );
valarray&lt;T&gt;&amp; operator&gt;&gt;=( const valarray&lt;T&gt;&amp; v );
}}
{{dcl|num=2|1=
valarray&lt;T&gt;&amp; operator+=( const T&amp; val );
valarray&lt;T&gt;&amp; operator-=( const T&amp; val );
valarray&lt;T&gt;&amp; operator*=( const T&amp; val );
valarray&lt;T&gt;&amp; operator/=( const T&amp; val );
valarray&lt;T&gt;&amp; operator%=( const T&amp; val );
valarray&lt;T&gt;&amp; operator&amp;=( const T&amp; val );
valarray&lt;T&gt;&amp; operator{{!}}=( const T&amp; val );
valarray&lt;T&gt;&amp; operator^=( const T&amp; val );
valarray&lt;T&gt;&amp; operator&lt;&lt;=( const T&amp; val );
valarray&lt;T&gt;&amp; operator&gt;&gt;=( const T&amp; val );
}}
{{dcl end}}

应用复合赋值运算符到数值数组中的每个元素。

@1@ 以对每个元素的先前值和来自 {{c|v}} 的对应元素应用对应运算符所获得的值，赋值给每个元素。

@@ 若 {{c|1=size() != v.size()}} 则行为未定义。

@@ 若 {{c|v}} 中的任何值在赋值过程中计算并依赖任何 {{c|*this}} 中的值，即赋值右侧的表达式引用了赋值左侧的变量，则行为未定义。

@2@ 以对每个元素的先前值和 {{c|val}} 的值应用对应运算符所获得的值，赋值给每个元素。

===参数===
{{par begin}}
{{par|v|另一个数值数组}}
{{par|val|一个值}}
{{par end}}

===返回值===
{{c|*this}}

{{cpp/impldef exception}}

===注解===
仅若满足下列条件，才能实例化各个运算符：
* 所指示的运算符可应用于类型 {{tt|T}}。
* 返回值可以无歧义地转换为 {{tt|T}}。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;string_view&gt;
#include &lt;type_traits&gt;
#include &lt;valarray&gt;

void o(std::string_view rem, auto const&amp; v, bool nl = false)
{
    if constexpr (std::is_scalar_v&lt;std::decay_t&lt;decltype(v)&gt;&gt;)
        std::cout &lt;&lt; rem &lt;&lt; " : " &lt;&lt; v;
    else
    {
        for (std::cout &lt;&lt; rem &lt;&lt; " : { "; auto const e : v)
            std::cout &lt;&lt; e &lt;&lt; ' ';
        std::cout &lt;&lt; '}';
    }
    std::cout &lt;&lt; (nl ? "\n" : ";  ");
}

int main()
{
    std::valarray&lt;int&gt; x, y;

    o("x", x = {1, 2, 3, 4}), o("y", y = {4, 3, 2, 1}), o("x += y", x += y, 1);
    o("x", x = {4, 3, 2, 1}), o("y", y = {3, 2, 1, 0}), o("x -= y", x -= y, 1);
    o("x", x = {1, 2, 3, 4}), o("y", y = {5, 4, 3, 2}), o("x *= y", x *= y, 1);
    o("x", x = {1, 3, 4, 7}), o("y", y = {1, 1, 3, 5}), o("x &amp;= y", x &amp;= y, 1);
    o("x", x = {0, 1, 2, 4}), o("y", y = {4, 3, 2, 1}), o("x &lt;&lt;=y", x &lt;&lt;=y, 1);

    std::cout &lt;&lt; '\n';

    o("x", x = {1, 2, 3, 4}), o("x += 5", x += 5, 1);
    o("x", x = {1, 2, 3, 4}), o("x *= 2", x *= 2, 1);
    o("x", x = {8, 6, 4, 2}), o("x /= 2", x /= 2, 1);
    o("x", x = {8, 4, 2, 1}), o("x &gt;&gt;=1", x &gt;&gt;=1, 1);
}
|output=
x : { 1 2 3 4 };  y : { 4 3 2 1 };  x += y : { 5 5 5 5 }
x : { 4 3 2 1 };  y : { 3 2 1 0 };  x -= y : { 1 1 1 1 }
x : { 1 2 3 4 };  y : { 5 4 3 2 };  x *= y : { 5 8 9 8 }
x : { 1 3 4 7 };  y : { 1 1 3 5 };  x &amp;= y : { 1 1 0 5 }
x : { 0 1 2 4 };  y : { 4 3 2 1 };  x &lt;&lt;=y : { 0 8 8 8 }

x : { 1 2 3 4 };  x += 5 : { 6 7 8 9 }
x : { 1 2 3 4 };  x *= 2 : { 2 4 6 8 }
x : { 8 6 4 2 };  x /= 2 : { 4 3 2 1 }
x : { 8 4 2 1 };  x &gt;&gt;=1 : { 4 2 1 0 }
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/valarray/dsc operator_arith}}
{{dsc inc|cpp/numeric/valarray/dsc operator_arith3}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|bit_ceil}}
{{cpp/utility/bit/navbar}}
{{ddcl|since=c++20|header=bit|
template&lt; class T &gt;
constexpr T bit_ceil( T x );
}}

计算不小于 {{c|x}} 的最小的二的整数次幂。

若值不能以 {{tt|T}} 表示，则行为未定义。仅若不出现未定义行为才容许在[[cpp/language/constant expression|常量求值]]中调用此函数。

{{cpp/enable_if| {{tt|T}} 为无符号整数类型（即 {{c/core|unsigned char}}、{{c/core|unsigned short}}、{{c/core|unsigned int}}、{{c/core|unsigned long}}、{{c/core|unsigned long long}} 或扩展无符号整数类型）}}。

===参数===
{{par begin}}
{{par|x|无符号整数类型的值}}
{{par end}}

===返回值===
不小于 {{c|x}} 的最小的二的整数次幂。

===异常===
不抛出。

===注解===
{{petty|{{stddoc|P1956R1}} 以前，为这个函数模板提出的名字是 {{tt|ceil2}}。}}

{{feature test macro|__cpp_lib_int_pow2|std=C++20|value=202002L|[[cpp/utility/bit|{{math|2}} 的整数次幂运算]]}}

===可能的实现===
见 [https://github.com/gcc-mirror/gcc/blob/62c25d7adb1a5664982449dda0e7f9ca63cf4735/libstdc%2B%2B-v3/include/std/bit#L217-L248 libstdc++ (gcc)] 与 [https://github.com/llvm-mirror/libcxx/blob/78d6a7767ed57b50122a161b91f59f19c9bd0d19/include/bit#L439-L456 libc++ (clang)] 中的可能实现。
{{eq fun|1=
template&lt;typename T, typename ... U&gt;
concept neither = (!std::same_as&lt;T, U&gt; &amp;&amp; ...);

template &lt;std::unsigned_integral T&gt;
    requires neither&lt;T, bool, char, char8_t, char16_t, char32_t, wchar_t&gt;
constexpr T bit_ceil(T x) noexcept
{
    if (x &lt;= 1u)
        return T(1);
    if constexpr (std::same_as&lt;T, decltype(+x)&gt;)
        return T(1) &lt;&lt; std::bit_width(T(x - 1));
    else
    {   // 对于要经受整数提升的类型
        constexpr int offset_for_ub =
            std::numeric_limits&lt;unsigned&gt;::digits - std::numeric_limits&lt;T&gt;::digits;
        return T(1u &lt;&lt; (std::bit_width(T(x - 1)) + offset_for_ub) &gt;&gt; offset_for_ub);
    }
}
}}

===示例===
{{example
|code=
#include &lt;bit&gt;
#include &lt;bitset&gt;
#include &lt;iostream&gt;

int main()
{
    using bin = std::bitset&lt;8&gt;;

    for (auto x{0U}; 0XA != x; ++x)
        std::cout &lt;&lt; "bit_ceil( " &lt;&lt; bin(x) &lt;&lt; " ) = "
                  &lt;&lt; bin(std::bit_ceil(x)) &lt;&lt; '\n';
}
|output=
bit_ceil( 00000000 ) = 00000001
bit_ceil( 00000001 ) = 00000001
bit_ceil( 00000010 ) = 00000010
bit_ceil( 00000011 ) = 00000100
bit_ceil( 00000100 ) = 00000100
bit_ceil( 00000101 ) = 00001000
bit_ceil( 00000110 ) = 00001000
bit_ceil( 00000111 ) = 00001000
bit_ceil( 00001000 ) = 00001000
bit_ceil( 00001001 ) = 00010000
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/dsc bit_floor}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
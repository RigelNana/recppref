{{cpp/title|cyl_neumann|cyl_neumannf|cyl_neumannl}}
{{cpp/numeric/special_functions/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++17|dcl1=
float       cyl_neumann ( float nu, float x );
double      cyl_neumann ( double nu, double x );
long double cyl_neumann ( long double nu, long double x );
|since2=c++23|dcl2=
/* 浮点数类型 */ cyl_neumann( /* 浮点数类型 */ nu,
                                       /* 浮点数类型 */ x );
}}
{{dcl|num=2|since=c++17|
float       cyl_neumannf( float nu, float x );
}}
{{dcl|num=3|since=c++17|
long double cyl_neumannl( long double nu, long double x );
}}
{{dcl h|[[#注解|额外重载]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++17|
template&lt; class Arithmetic1, class Arithmetic2 &gt;
/* 公共浮点数类型 */
    cyl_neumann( Arithmetic1 nu, Arithmetic2 x );
}}
{{dcl end}}

@1-3@ 计算 {{c|nu}} 和 {{c|x}} 的{{enwiki|Bessel function#Bessel functions of the second kind: Y.CE.B1|柱诺依曼函数}}（也称为第二类贝塞尔函数或 Weber 函数）。{{rev inl|since=c++23|标准库提供所有以无 cv 限定的浮点数类型作为形参 {{c|nu}} 和 {{c|x}} 的类型的 {{tt|std::cyl_neumann}} 重载。}}
@A@ 为算术类型的所有其他组合提供额外重载。

===参数===
{{par begin}}
{{par|nu|函数的阶数}}
{{par|x|函数的实参}}
{{par end}}

===返回值===
如果没有发生错误，那么返回 {{c|nu}} 和 {{c|x}} 的柱诺依曼函数（第二类贝塞尔函数）的值，即对于 {{math|x≥0}} 和非整数 {{c|nu}} 的 {{math|1=N{{su|b=nu}}(x) = {{mfrac|J{{su|b=nu}}(x)cos(nuπ)-J{{su|b=-nu}}(x)|sin(nuπ)}}}}（其中 {{math|J{{su|b=nu}}(x)}} 是 {{c|std::cyl_bessel_j(nu, x)}}）；对整数 {{c|nu}} 使用极限。

===错误处理===
可能报告 {{lc|math_errhandling}} 中指定的错误
* 如果实参是 NaN，那么返回 NaN 且不报告定义域错误
* 如果 {{math|1=nu&gt;=128}}，那么行为由实现定义

===注解===
{{cpp/numeric/special functions/older impl note}}

此函数的一种实现参考 [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/bessel/bessel_first.html boost.math]。

{{cpp/numeric/special functions/additional overload note|cyl_neumann}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;
#include &lt;numbers&gt;
 
const double π = std::numbers::pi; // C++20 前使用 std::acos(-1)
 
// 要通过第一类柱贝塞尔函数来计算柱诺依曼函数，我们需要自己实现 J，
// 因为按照上文的公式直接调用 std::cyl_bessel_j(nu, x) 的话
// 在 nu 为负的情况下会引发 std::domain_error：__cyl_bessel_j 参数错误。
 
double J_neg(double nu, double x)
{
    return std::cos(-nu * π) * std::cyl_bessel_j(-nu, x)
          -std::sin(-nu * π) * std::cyl_neumann(-nu, x);
}
 
double J_pos(double nu, double x)
{
    return std::cyl_bessel_j(nu, x);
}
 
double J(double nu, double x)
{
    return nu &lt; 0.0 ? J_neg(nu, x) : J_pos(nu, x);
}
 
int main()
{
    std::cout &lt;&lt; "对 nu == 0.5 点检查\n" &lt;&lt; std::fixed &lt;&lt; std::showpos;
    const double nu = 0.5;
    for (double x = 0.0; x &lt;= 2.0; x += 0.333)
    {
        const double n = std::cyl_neumann(nu, x);
        const double j = (J(nu, x) * std::cos(nu * π) - J(-nu, x)) / std::sin(nu * π);
        std::cout &lt;&lt; "N_.5(" &lt;&lt; x &lt;&lt; ") = " &lt;&lt; n &lt;&lt; "，通过 J 计算 = " &lt;&lt; j &lt;&lt; '\n';
        assert(n == j);
    }
}
|output=
对 nu == 0.5 点检查
N_.5(+0.000000) = -inf，通过 J 计算 = -inf
N_.5(+0.333000) = -1.306713，通过 J 计算 = -1.306713
N_.5(+0.666000) = -0.768760，通过 J 计算 = -0.768760
N_.5(+0.999000) = -0.431986，通过 J 计算 = -0.431986
N_.5(+1.332000) = -0.163524，通过 J 计算 = -0.163524
N_.5(+1.665000) = +0.058165，通过 J 计算 = +0.058165
N_.5(+1.998000) = +0.233876，通过 J 计算 = +0.233876
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/special functions/dsc cyl_bessel_i}}
{{dsc inc|cpp/numeric/special functions/dsc cyl_bessel_j}}
{{dsc inc|cpp/numeric/special functions/dsc cyl_bessel_k}}
{{dsc end}}

===外部链接===
{{eli|[https://mathworld.wolfram.com/BesselFunctionoftheSecondKind.html Weisstein, Eric W. “第二类贝塞尔函数”]来自 MathWorld--A Wolfram Web Resource。}}

{{langlinks|en|es|ja}}
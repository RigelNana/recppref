{{cpp/title|assoc_laguerre|assoc_laguerref|assoc_laguerrel}}
{{cpp/numeric/special_functions/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++17|dcl1=
float       assoc_laguerre ( unsigned int n, unsigned int m, float x );
double      assoc_laguerre ( unsigned int n, unsigned int m, double x );
long double assoc_laguerre ( unsigned int n, unsigned int m, long double x );
|since2=c++23|dcl2=
/* 浮点数类型 */ assoc_laguerre( unsigned int n, unsigned int m,
                                          /* 浮点数类型 */ x );
}}
{{dcl|num=2|since=c++17|
float       assoc_laguerref( unsigned int n, unsigned int m, float x );
}}
{{dcl|num=3|since=c++17|
long double assoc_laguerrel( unsigned int n, unsigned int m, long double x );
}}
{{dcl h|[[#注解|额外重载]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++17|
template&lt; class Integer &gt;
double      assoc_laguerre ( unsigned int n, unsigned int m, Integer x );
}}
{{dcl end}}

@1-3@ 计算实参 {{c|x}} 的 {{c|n}} 次 {{c|m}} 阶{{enwiki|Laguerre polynomials#Generalized_Laguerre_polynomials|关联拉盖尔多项式}}。{{rev inl|since=c++23|标准库提供所有以无 cv 限定的浮点数类型作为参数 {{c|x}} 的类型的 {{tt|std::assoc_laguerre}} 重载。}}
@A@ 为所有整数类型提供额外重载，将它们当做 {{c/core|double}}。

===参数===
{{par begin}}
{{par|n|多项式的次数，无符号整数}}
{{par|m|多项式的阶数，无符号整数}}
{{par|x|实参，浮点数或整数}}
{{par end}}

===返回值===
如果没有发生错误，那么返回 {{c|x}} 的关联拉盖尔多项式的值，即 {{mathjax-or|1=\((-1)^m \: \frac{ \mathsf{d} ^ m}{ \mathsf{d}x ^ m} \, \mathsf{L}_{n+m}(x)\)|2=(-1){{su|p=m}}{{mfrac|d{{su|p=m}}|dx{{su|p=m}}}}L{{su|b=n+m}}(x)}}（其中 {{mathjax-or|1=\(\mathsf{L}_{n+m}(x)\)|2=L{{su|b=n+m}}(x)}} 是非关联拉盖尔多项式，{{c|std::laguerre(n + m, x)}}）。

===错误处理===
可能报告 {{ltt|cpp/numeric/math/math_errhandling}} 中指定的错误。
* 如果参数是 NaN，那么返回 NaN 且不报告定义域错误
* 如果 {{c|x}} 为负，那么可能发生定义域错误
* 如果 {{c|n}} 或 {{c|m}} 大于或等于 128，那么行为由实现定义。

===注解===
{{cpp/numeric/special functions/older impl note}}

此函数的一种实现可参考 [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_poly/laguerre.html boost.math]。

关联拉盖尔多项式是方程 {{mathjax-or|1=\(x\ddot{y} + (m+1-x)\dot{y} + ny = 0\)|2=xy{{su|p=,,}}+(m+1-x)y{{su|p=,}}+ny = 0}} 的多项式解。

前几个解是：
{| class="wikitable" style="font-size:95%; text-align:center;"
|-
! 函数
! 多项式
|- style="height:45px;"
| {{nbsp|4}}{{co|1=assoc_laguerre(0, m, x)}}{{nbsp|4}} || 1
|- style="height:45px;"
| {{co|1=assoc_laguerre(1, m, x)}} || {{math|-x + m + 1}}
|- style="height:45px;"
| {{co|1=assoc_laguerre(2, m, x)}} || {{math|{{mfrac|1|2}}[x{{su|p=2}} - 2(m + 2)x + (m + 1)(m + 2)]}}
|- style="height:45px;"
| {{co|1=assoc_laguerre(3, m, x)}} || {{nbsp|4}}{{math|{{mfrac|1|6}}[-x{{su|p=3}} - 3(m + 3)x{{su|p=2}} - 3(m + 2)(m + 3)x + (m + 1)(m + 2)(m + 3)]}}{{nbsp|4}}
|}

{{cpp/numeric/special functions/additional integer overload note|assoc_laguerre}}

===示例===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;

double L1(unsigned m, double x)
{
    return -x + m + 1;
}

double L2(unsigned m, double x)
{
    return 0.5 * (x * x-2 * (m + 2) * x + (m + 1) * (m + 2));
}

int main()
{
    // 点检查
    std::cout &lt;&lt; std::assoc_laguerre(1, 10, 0.5) &lt;&lt; '=' &lt;&lt; L1(10, 0.5) &lt;&lt; '\n'
              &lt;&lt; std::assoc_laguerre(2, 10, 0.5) &lt;&lt; '=' &lt;&lt; L2(10, 0.5) &lt;&lt; '\n';
}
|output=
10.5=10.5
60.125=60.125
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/special functions/dsc laguerre}}
{{dsc end}}

===外部链接===
{{eli|[https://mathworld.wolfram.com/AssociatedLaguerrePolynomial.html Weisstein, Eric W. “关联拉盖尔多项式”]来自 MathWorld--A Wolfram Web Resource。}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
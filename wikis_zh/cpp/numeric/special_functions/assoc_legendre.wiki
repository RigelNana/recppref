{{cpp/title|assoc_legendre|assoc_legendref|assoc_legendrel}}
{{cpp/numeric/special_functions/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++17|dcl1=
float       assoc_legendre ( unsigned int n, unsigned int m, float x );
double      assoc_legendre ( unsigned int n, unsigned int m, double x );
long double assoc_legendre ( unsigned int n, unsigned int m, long double x );
|since2=c++23|dcl2=
/* 浮点数类型 */ assoc_legendre( unsigned int n, unsigned int m,
                                          /* 浮点数类型 */ x );
}}
{{dcl|num=2|since=c++17|
float       assoc_legendref( unsigned int n, unsigned int m, float x );
}}
{{dcl|num=3|since=c++17|
long double assoc_legendrel( unsigned int n, unsigned int m, long double x );
}}
{{dcl h|[[#注解|额外重载]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++17|
template&lt; class Integer &gt;
double      assoc_legendre ( unsigned int n, unsigned int m, Integer x );
}}
{{dcl end}}

@1-3@ 计算实参 {{c|x}} 的 {{c|n}} 次 {{c|m}} 阶{{enwiki|Associated Legendre polynomials|关联勒让德多项式}}。{{rev inl|since=c++23|标准库提供所有以无 cv 限定的浮点数类型作为形参 {{c|x}} 的类型的 {{tt|std::assoc_legendre}} 重载。}}
@A@ 为所有整数类型提供额外重载，将它们当做 {{c/core|double}}。

===参数===
{{par begin}}
{{par|n|多项式的次数，无符号整数}}
{{par|m|多项式的阶数，无符号整数}}
{{par|x|实参，浮点数或整数}}
{{par end}}

===返回值===
如果没有发生错误，那么返回 {{c|x}} 的关联勒让德多项式 {{mathjax-or|1=\(\mathsf{P}_n^m\)|2=P{{su|p=m|b=n}}}} 的值，即 {{mathjax-or|1=\((1 - x^2) ^ {m/2} \: \frac{ \mathsf{d} ^ m}{ \mathsf{d}x ^ m} \, \mathsf{P}_n(x)\)|2=(1-x{{su|p=2}}){{su|p=m/2}} {{mfrac|d{{su|p=m}}|dx{{su|p=m}}}}P{{su|b=n}}(x)}}（其中 {{mathjax-or|1=\(\mathsf{P}_n(x)\)|2=P{{su|b=n}}(x)}} 是非关勒让德多项式 {{c|std::legendre(n, x)}}）。

注意此定义忽略 [https://mathworld.wolfram.com/Condon-ShortleyPhase.html Condon-Shortley 相位项] {{mathjax-or|1=\((-1)^m\)|2=(-1){{su|p=m}}}}。

===错误处理===
可能报告 {{ltt|cpp/numeric/math/math_errhandling}} 中指定的错误
* 如果参数是 NaN，那么返回 NaN 且不报告定义域错误
* 如果 {{math|{{!}}x{{!}} &gt; 1}}，那么可能发生定义域错误
* 如果 {{c|n}} 大于或等于 128，那么行为由实现定义

===注解===
{{cpp/numeric/special functions/older impl note}}

此函数的一种实现可参考 
{{tt|boost::math::legendre_p}} [http://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_poly/legendre.html boost.math]，但 boost.math 的定义包含 Condon-Shortley 相位项。

前几个关联勒让德多项式是：

{| class="wikitable" style="font-size:95%; text-align:center;"
|-
! 函数
! 多项式
|- style="height:45px;"
| {{nbsp|4}}{{co|1=assoc_legendre(0, 0, x)}}{{nbsp|4}} || 1
|- style="height:45px;"
| {{co|1=assoc_legendre(1, 0, x)}} || {{math|x}}
|- style="height:45px;"
| {{co|1=assoc_legendre(1, 1, x)}} || {{math|(1 - x{{su|p=2}}){{su|p=1/2}}}}
|- style="height:45px;"
| {{co|1=assoc_legendre(2, 0, x)}} || {{math|{{mfrac|1|2}}(3x{{su|p=2}} - 1)}}
|- style="height:45px;"
| {{co|1=assoc_legendre(2, 1, x)}} || {{nbsp|4}}{{math|3x(1 - x{{su|p=2}}){{su|p=1/2}}}}{{nbsp|4}}
|- style="height:45px;"
| {{co|1=assoc_legendre(2, 2, x)}} || {{math|3(1 - x{{su|p=2}})}}
|}

{{cpp/numeric/special functions/additional integer overload note|assoc_legendre}}

===示例===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;

double P20(double x)
{
    return 0.5 * (3 * x * x - 1);
}

double P21(double x)
{
    return 3.0 * x * std::sqrt(1 - x * x);
}

double P22(double x)
{
    return 3 * (1 - x * x);
}

int main()
{
    // 点检查
    std::cout &lt;&lt; std::assoc_legendre(2, 0, 0.5) &lt;&lt; '=' &lt;&lt; P20(0.5) &lt;&lt; '\n'
              &lt;&lt; std::assoc_legendre(2, 1, 0.5) &lt;&lt; '=' &lt;&lt; P21(0.5) &lt;&lt; '\n'
              &lt;&lt; std::assoc_legendre(2, 2, 0.5) &lt;&lt; '=' &lt;&lt; P22(0.5) &lt;&lt; '\n';
}
|output=
-0.125=-0.125
1.29904=1.29904
2.25=2.25
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/special functions/dsc legendre}}
{{dsc end}}

===外部链接===
{{eli|[https://mathworld.wolfram.com/AssociatedLegendrePolynomial.html Weisstein, Eric W. “关联勒让德多项式”]来自 MathWorld--A Wolfram Web Resource。}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
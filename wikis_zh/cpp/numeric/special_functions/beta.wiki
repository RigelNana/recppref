{{cpp/title|beta|betaf|betal}}
{{cpp/numeric/special_functions/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++17|dcl1=
float       beta ( float x, float y );
double      beta ( double x, double y );
long double beta ( long double x, long double y );
|since2=c++23|dcl2=
/* 浮点数类型 */ beta( /* 浮点数类型 */ x,
                                /* 浮点数类型 */ y );
}}
{{dcl|num=2|since=c++17|
float       betaf( float x, float y );
}}
{{dcl|num=3|since=c++17|
long double betal( long double x, long double y );
}}
{{dcl h|[[#注解|额外重载]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++17|
template&lt; class Arithmetic1, class Arithmetic2 &gt;
/* common-浮点数类型 */ beta( Arithmetic1 x, Arithmetic2 y );
}}
{{dcl end}}

@1-3@ 计算 {{c|x}} 和 {{c|y}} 的 {{enwiki|Beta_function|β 函数}}。{{rev inl|since=c++23|标准库提供所有以无 cv 限定的浮点数类型作为形参 {{c|x}} 和 {{c|y}} 的类型的 {{tt|std::beta}} 重载。}}
@A@ 为算术类型的所有其他组合提供额外重载。

===参数===
{{par begin}}
{{par|x, y|浮点数或整数}}
{{par end}}

===返回值===
如果没有发生错误，那么返回 {{c|x}} 和 {{c|y}} 的 beta 函数值，即 {{mathjax-or|\(\int_{0}^{1}{ {t}^{x-1}{(1-t)}^{y-1}\mathsf{d}t}\)|{{minteg|0|1|t{{su|p=x-1}}(1-t){{su|p=(y-1)}}d''t''}}}}，或等价地为 {{mathjax-or|\(\frac{\Gamma(x)\Gamma(y)}{\Gamma(x+y)}\)|{{mfrac|Γ(x)Γ(y)|Γ(x+y)}}}}。

===错误处理===
可能报告 {{ltt|cpp/numeric/math/math_errhandling}} 中指定的错误。
* 如果任一实参是 NaN，那么返回 NaN 且不报告定义域错误
* 仅要求函数在 {{c|x}} 与 {{c|y}} 均大于零的情况有定义，并且允许在其他情况下报告定义域错误。

===注解===
{{cpp/numeric/special functions/older impl note}}

此函数的一种实现参考 [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_beta/beta_function.html boost.math]。

{{c|std::beta(x, y)}} 等于 {{c|std::beta(y, x)}}。

当 {{c|x}} 和 {{c|y}} 都是正整数时，{{c|std::beta(x, y)}} 等于 {{mathjax-or|1=\(\frac{(x-1)!(y-1)!}{(x+y-1)!}\)|2={{mfrac|(x-1)!(y-1)!|(x+y-1)!}}}}。

二项式系数可用 beta 函数表示：{{mathjax-or|1=\(\binom{n}{k} = \frac{1}{(n+1)B(n-k+1,k+1)}\)|2={{mparen|(|)|n|k}}{{=}}{{mfrac|1|(n+1)Β(n-k+1,k+1)}}}}。

{{cpp/numeric/special functions/additional overload note|beta}}

===示例===
{{example
|code=
#include &lt;cassert&gt;
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;numbers&gt;
#include &lt;string&gt;

long binom_via_beta(int n, int k)
{
    return std::lround(1 / ((n + 1) * std::beta(n - k + 1, k + 1)));
}

long binom_via_gamma(int n, int k)
{
    return std::lround(std::tgamma(n + 1) /
                      (std::tgamma(n - k + 1) * 
                       std::tgamma(k + 1)));
}

int main()
{
    std::cout &lt;&lt; "帕斯卡三角形：\n";
    for (int n = 1; n &lt; 10; ++n)
    {
        std::cout &lt;&lt; std::string(20 - n * 2, ' ');
        for (int k = 1; k &lt; n; ++k)
        {
            std::cout &lt;&lt; std::setw(3) &lt;&lt; binom_via_beta(n, k) &lt;&lt; ' ';
            assert(binom_via_beta(n, k) == binom_via_gamma(n, k));
        }
        std::cout &lt;&lt; '\n';
    }

    // 点检查
    const long double p = 0.123; // [0, 1] 中的随机值
    const long double q = 1 - p;
    const long double π = std::numbers::pi_v&lt;long double&gt;;
    std::cout &lt;&lt; "\n\n" &lt;&lt; std::setprecision(19)
              &lt;&lt; "β(p,1-p)   = " &lt;&lt; std::beta(p, q) &lt;&lt; '\n'
              &lt;&lt; "π/sin(π*p) = " &lt;&lt; π / std::sin(π * p) &lt;&lt; '\n';
}
|output=
帕斯卡三角形：
                 
                  2 
                3   3 
              4   6   4 
            5  10  10   5 
          6  15  20  15   6 
        7  21  35  35  21   7 
      8  28  56  70  56  28   8 
    9  36  84 126 126  84  36   9 

β(p,1-p)   = 8.335989149587307836
π/sin(π*p) = 8.335989149587307834
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc tgamma}}
{{dsc end}}

===外部链接===
{{eli|[https://mathworld.wolfram.com/BetaFunction.html Weisstein, Eric W. “ Β 函数。”] 来自 MathWorld--A Wolfram Web Resource。}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
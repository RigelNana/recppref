{{cpp/title|hermite|hermitef|hermitel}}
{{cpp/numeric/special_functions/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++17|dcl1=
double      hermite ( unsigned int n, double x );
float       hermite ( unsigned int n, float x );
long double hermite ( unsigned int n, long double x );
|since2=c++23|dcl2=
/* 浮点数类型 */ hermite( unsigned int n,
                                   /* 浮点数类型 */ x );
}}
{{dcl|num=2|since=c++17|
float       hermitef( unsigned int n, float x );
}}
{{dcl|num=3|since=c++17|
long double hermitel( unsigned int n, long double x );
}}
{{dcl h|[[#注解|额外重载]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++17|
template&lt; class Integer &gt;
double      hermite ( unsigned int n, Integer x );
}}
{{dcl end}}

@1-3@ 计算实参 {{c|x}} 的 {{c|n}} 次（物理学家的）{{enwiki|Hermite polynomials|埃尔米特多项式}}。{{rev inl|since=c++23|标准库提供所有以无 cv 限定的浮点数类型作为形参 {{c|x}} 的类型的 {{tt|std::hermite}} 重载。}}
@A@ 为所有整数类型提供额外重载，将它们当做 {{c/core|double}}。

===参数===
{{par begin}}
{{par|n|多项式的次数}}
{{par|x|实参，浮点数或整数}}
{{par end}}

===返回值===
如果没有发生错误，那么返回 {{c|x}} 的 {{c|n}} 阶埃尔米特多项式的值，即 {{math|(-1){{su|p=n}}{{mexp|x{{su|p=2}}}}{{mfrac|d{{su|p=n}}|dx{{su|p=n}}}}{{mexp|-x{{su|p=2}}}}}}。

===错误处理===
可能报告 {{lc|math_errhandling}} 中指定的错误
* 如果实参是 NaN，那么返回 NaN 且不报告定义域错误
* 如果 {{c|n}} 大于或等于 128，那么行为由实现定义

===注解===
{{cpp/numeric/special functions/older impl note}}

此函数的一种实现参考 [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_poly/hermite.html boost.math]。

埃尔米特多项式是方程 {{math|1=u{{su|p=,,}}-2xu{{su|p=,}} = -2nu}} 的多项式解。

前几个解是：
{| class="wikitable" style="font-size:95%; text-align:center;"
|-
! 函数
! 多项式
|- style="height:45px;"
| {{nbsp|4}}{{co|hermite(0, x)}}{{nbsp|4}} || {{math|1}}
|- style="height:45px;"
| {{co|hermite(1, x)}} || {{math|2x}}
|- style="height:45px;"
| {{co|hermite(2, x)}} || {{math|4x{{su|p=2}} - 2}}
|- style="height:45px;"
| {{co|hermite(3, x)}} || {{math|8x{{su|p=3}} - 12x}}
|- style="height:45px;"
| {{co|hermite(4, x)}} || {{nbsp|4}}{{math|16x{{su|p=4}} - 48x{{su|p=2}} + 12}}{{nbsp|4}}
|}

{{cpp/numeric/special functions/additional integer overload note|hermite}}

===示例===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;

double H3(double x)
{
    return 8 * std::pow(x, 3) - 12 * x;
}

double H4(double x)
{
    return 16 * std::pow(x, 4) - 48 * x * x + 12;
}

int main()
{
    // 点检查
    std::cout &lt;&lt; std::hermite(3, 10) &lt;&lt; '=' &lt;&lt; H3(10) &lt;&lt; '\n'
              &lt;&lt; std::hermite(4, 10) &lt;&lt; '=' &lt;&lt; H4(10) &lt;&lt; '\n';
}
|output=
7880=7880
155212=155212
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/special functions/dsc laguerre}}
{{dsc inc|cpp/numeric/special functions/dsc legendre}}
{{dsc end}}

===外部链接===
{{eli|[https://mathworld.wolfram.com/HermitePolynomial.html Weisstein, Eric W. “埃尔米特多项式”]来自 MathWorld--A Wolfram Web Resource。}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
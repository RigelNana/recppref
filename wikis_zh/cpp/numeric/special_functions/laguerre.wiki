{{cpp/title|laguerre|laguerref|laguerrel}}
{{cpp/numeric/special_functions/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++17|dcl1=
float       laguerre ( unsigned int n, float x );
double      laguerre ( unsigned int n, double x );
long double laguerre ( unsigned int n, long double x );
|since2=c++23|dcl2=
/* 浮点数类型 */ laguerre( unsigned int n,
                                    /* 浮点数类型 */ x );
}}
{{dcl|num=2|since=c++17|
float       laguerref( unsigned int n, float x );
}}
{{dcl|num=3|since=c++17|
long double laguerrel( unsigned int n, long double x );
}}
{{dcl h|[[#注解|额外重载]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++17|
template&lt; class Integer &gt;
double      laguerre ( unsigned int n, Integer x );
}}
{{dcl end}}

@1-3@ 计算实参 {{c|x}} 的 {{c|n}} 次非关联{{enwiki|Laguerre polynomials|拉盖尔多项式}}。{{rev inl|since=c++23|标准库提供所有以无 cv 限定的浮点数类型作为形参 {{c|x}} 的类型的 {{tt|std::laguerre}} 重载。}}
@A@ 为所有整数类型提供额外重载，将它们当做 {{c/core|double}}。

===参数===
{{par begin}}
{{par|n|多项式的次数，无符号整数}}
{{par|x|实参，浮点数或整数}}
{{par end}}

===返回值===
如果没有发生错误，那么返回 {{c|x}} 的 {{c|n}} 阶非关联拉盖尔多项式的值，即 {{math|{{mfrac|{{mexp|x}}|n!}}{{mfrac|d{{su|p=n}}|dx{{su|p=n}}}}(x{{su|p=n}}{{mexp|-x}})}}。

===错误处理===
可能报告 {{lc|math_errhandling}} 中指定的错误
* 如果实参是 NaN，那么返回 NaN 且不报告定义域错误
* 如果 {{c|x}} 为负，那么可能发生定义域错误
* 如果 {{c|n}} 大于或等于 128，那么行为由实现定义

===注解===
{{cpp/numeric/special functions/older impl note}}

此函数的一种实现参考 [https://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/sf_poly/laguerre.html boost.math]。

拉盖尔多项式是方程 {{math|1=xy{{su|p=,,}}+(1-x)y{{su|p=,}}+ny = 0}} 的多项式解。

前几个解是：
{| class="wikitable" style="font-size:95%; text-align:center;"
|-
! 函数
! 多项式
|- style="height:45px;"
| {{nbsp|4}}{{co|laguerre(0, x)}}{{nbsp|4}} || 1
|- style="height:45px;"
| {{co|laguerre(1, x)}} || {{math|-x + 1}}
|- style="height:45px;"
| {{co|laguerre(2, x)}} || {{math|{{mfrac|1|2}}(x{{su|p=2}} - 4x + 2)}}
|- style="height:45px;"
| {{co|laguerre(3, x)}} || {{nbsp|4}}{{math|{{mfrac|1|6}}(-x{{su|p=3}} - 9x{{su|p=2}} - 18x + 6)}}{{nbsp|4}}
|}

{{cpp/numeric/special functions/additional integer overload note|laguerre}}

===示例===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;

double L1(double x)
{
    return -x + 1;
}

double L2(double x)
{
    return 0.5 * (x * x - 4 * x + 2);
}

int main()
{
    // 点检查
    std::cout &lt;&lt; std::laguerre(1, 0.5) &lt;&lt; '=' &lt;&lt; L1(0.5) &lt;&lt; '\n'
              &lt;&lt; std::laguerre(2, 0.5) &lt;&lt; '=' &lt;&lt; L2(0.5) &lt;&lt; '\n'
              &lt;&lt; std::laguerre(3, 0.0) &lt;&lt; '=' &lt;&lt; 1.0 &lt;&lt; '\n';
}
|output=
0.5=0.5
0.125=0.125
1=1
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/special functions/dsc assoc_laguerre}}
{{dsc end}}

===外部链接===
{{eli|[https://mathworld.wolfram.com/LaguerrePolynomial.html Weisstein, Eric W. “拉盖尔多项式”]来自 MathWorld--A Wolfram Web Resource。}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
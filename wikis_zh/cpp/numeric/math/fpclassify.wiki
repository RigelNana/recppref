{{cpp/title|fpclassify}}
{{cpp/numeric/math/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++11|dcl1=
int fpclassify( float num );
int fpclassify( double num );
int fpclassify( long double num );
|since2=c++23|dcl2=
constexpr int fpclassify( /* floating-point-type */ num );
}}
{{dcl h|[[#注解|额外重载]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++11|notes={{mark constexpr since c++23}}|
template&lt; class Integer &gt;
int fpclassify( Integer num );
}}
{{dcl end}}

@1@ 归类浮点数 {{c|num}} 到下列类别中：零、非正规、正规、无穷大、NaN 或实现定义类别。{{rev inl|since=c++23|标准库提供所有以无 cv 限定的浮点数类型作为参数 {{c|num}} 的类型的 {{tt|std::fpclassify}} 重载。}}
@A@ 为所有整数类型提供额外重载，将它们当做 {{c/core|double}}。

===参数===
{{par begin}}
{{par|num|浮点数或整数}}
{{par end}}

===返回值===
指明 {{c|num}} 类别的 {{lc|FP_INFINITE}}、{{lc|FP_NAN}}、{{lc|FP_NORMAL}}、{{lc|FP_SUBNORMAL}}、{{lc|FP_ZERO}} 或实现定义类型之一。

===注解===
{{cpp/numeric/math/additional integer overload note|fpclassify}}

===示例===
{{example|
|code=
#include &lt;cfloat&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;

auto show_classification(double x)
{
    switch (std::fpclassify(x))
    {
        case FP_INFINITE:
            return "无穷大";
        case FP_NAN:
            return "非数";
        case FP_NORMAL:
            return "正规值";
        case FP_SUBNORMAL:
            return "非正规值";
        case FP_ZERO:
            return "零";
        default:
            return "未知值";
    }
}

int main()
{
    std::cout &lt;&lt; "1.0/0.0 是" &lt;&lt; show_classification(1 / 0.0) &lt;&lt; '\n'
              &lt;&lt; "0.0/0.0 是" &lt;&lt; show_classification(0.0 / 0.0) &lt;&lt; '\n'
              &lt;&lt; "DBL_MIN/2 是" &lt;&lt; show_classification(DBL_MIN / 2) &lt;&lt; '\n'
              &lt;&lt; "-0.0 是" &lt;&lt; show_classification(-0.0) &lt;&lt; '\n'
              &lt;&lt; "1.0 是" &lt;&lt; show_classification(1.0) &lt;&lt; '\n';
}
|output=
1.0/0.0 是无穷大
0.0/0.0 是非数
DBL_MIN/2 是非正规值
-0.0 是零
1.0 是正规值
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc isfinite}}
{{dsc inc|cpp/numeric/math/dsc isinf}}
{{dsc inc|cpp/numeric/math/dsc isnan}}
{{dsc inc|cpp/numeric/math/dsc isnormal}}
{{dsc inc|cpp/types/dsc numeric_limits}}
{{dsc see c|c/numeric/math/fpclassify}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
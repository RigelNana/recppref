{{cpp/title|log1p|log1pf|log1pl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=log1p
|param1=num
|constexpr_since=26
|desc=计算 {{c|1 + num}} 的{{enwiki|Natural logarithm|自然（底数为 {{math|e}}）对数}}。如果 {{c|num}} 接近零，那么此函数比表达式 {{c|std::log(1 + num)}} 更精确。
}}

===参数===
{{par begin}}
{{par|num|浮点数或整数}}
{{par end}}

===返回值===
在没有发生错误时返回 {{math|ln(1+num)}}。

如果发生定义域错误，那么返回值由实现定义（在受支持平台上是 NaN）。

如果发生极点错误，那么返回 {{lc|HUGE_VAL|-HUGE_VAL}}、{{tt|-HUGE_VALF}} 或 {{tt|-HUGE_VALL}}。

如果发生下溢导致的值域错误，那么返回（舍入后的）正确结果。

===错误处理===
报告 {{lc|math_errhandling}} 中指定的错误。

如果 {{c|num}} 小于 {{math|-1}}，那么发生定义域错误。

如果 {{c|num}} 是 {{math|-1}}，那么可能发生极点错误。

如果实现支持 IEEE 浮点数算术（IEC 60559），那么
* 如果实参是 ±0，那么返回不修改的参数。
* 如果实参是 -1，那么返回 -∞ 并引发 {{lc|FE_DIVBYZERO}}。
* 如果实参小于 -1，那么返回 NaN 并引发 {{lc|FE_INVALID}}。
* 如果实参是 +∞，那么返回 +∞。
* 如果实参是 NaN，那么返回 NaN。

===注解===
函数 {{lc|std::expm1}} 和 {{tt|std::log1p}} 对于金融计算有用：例如在计算小的日利率时： {{math|(1+x){{su|p=n}}-1}} 能表示为 {{c|std::expm1(n * std::log1p(x))}}。这些函数也简化书写精确的反双曲函数。

{{cpp/numeric/math/additional integer overload note|log1p}}

===示例===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
// #pragma STDC FENV_ACCESS ON

int main()
{
    std::cout &lt;&lt; "log1p(0) = " &lt;&lt; log1p(0) &lt;&lt; '\n'
              &lt;&lt; "在假定每月只有 30 天的日历上每天计算复利时，\n"
              &lt;&lt; "    2 天以 1% 利率可以获得的利息 = "
              &lt;&lt; 100 * expm1(2 * log1p(0.01 / 360)) &lt;&lt; '\n'
              &lt;&lt; "log(1+1e-16) = " &lt;&lt; std::log(1 + 1e-16)
              &lt;&lt; "，但 log1p(1e-16) = " &lt;&lt; std::log1p(1e-16) &lt;&lt; '\n';
    
    // 特殊值
    std::cout &lt;&lt; "log1p(-0) = " &lt;&lt; std::log1p(-0.0) &lt;&lt; '\n'
              &lt;&lt; "log1p(+Inf) = " &lt;&lt; std::log1p(INFINITY) &lt;&lt; '\n';
    
    // 错误处理
    errno = 0;
    std::feclearexcept(FE_ALL_EXCEPT);
    
    std::cout &lt;&lt; "log1p(-1) = " &lt;&lt; std::log1p(-1) &lt;&lt; '\n';
    
    if (errno == ERANGE)
        std::cout &lt;&lt; "    errno == ERANGE: " &lt;&lt; std::strerror(errno) &lt;&lt; '\n';
    if (std::fetestexcept(FE_DIVBYZERO))
        std::cout &lt;&lt; "    发生 FE_DIVBYZERO\n";
}
|p=true
|output=
log1p(0) = 0
在假定每月只有 30 天的日历上每天计算复利时，
    2 天以 1% 利率可以获得的利息 = 0.00555563
log(1+1e-16) = 0，但 log1p(1e-16) = 1e-16
log1p(-0) = -0
log1p(+Inf) = inf
log1p(-1) = -inf
    errno == ERANGE: Result too large
    发生 FE_DIVBYZERO
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc log}}
{{dsc inc|cpp/numeric/math/dsc log10}}
{{dsc inc|cpp/numeric/math/dsc log2}}
{{dsc inc|cpp/numeric/math/dsc expm1}}
{{dsc see c|c/numeric/math/log1p}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
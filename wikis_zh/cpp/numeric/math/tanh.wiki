{{cpp/title|tanh|tanhf|tanhl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=tanh
|param1=num
|constexpr_since=26
|desc=计算 {{c|num}} 的双曲正切。
}}

===参数===
{{par begin}}
{{par|num|浮点数或整数}}
{{par end}}

===返回值===
如果没有发生错误，那么返回 {{c|num}} 的双曲正切（{{math|tanh(num)}} 或 {{math|{{mfrac|e{{su|p=num}}-e{{su|p=-num}}|e{{su|p=num}}+e{{su|p=-num}}}}}}）。

如果发生下溢导致的错误，那么返回（舍入后的）正确结果。

===错误处理===
报告 {{lc|math_errhandling}} 中指定的错误。

如果实现支持 IEEE 浮点数算术（IEC 60559），那么
* 如果实参是 ±0，那么返回 ±0
* 如果实参是 ±∞，那么返回 ±1
* 如果实参是 NaN，那么返回 NaN

===注解===
[https://pubs.opengroup.org/onlinepubs/9699919799/functions/tanh.html POSIX 指定]在下溢的情况中返回不修改的 {{c|num}}，而在不支持这么做的情况下返回不大于 DBL_MIN、FLT_MIN 和 LDBL_MIN 的由实现定义的值。

{{cpp/numeric/math/additional integer overload note|tanh}}

===示例===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;
#include &lt;random&gt;

double get_random_between(double min, double max)
{
    std::random_device rd;
    std::mt19937 gen(rd());
    return std::uniform_real_distribution&lt;&gt;(min, max)(gen);
}

int main()
{
    const double x = get_random_between(-1.0, 1.0);

    std::cout &lt;&lt; std::showpos
              &lt;&lt; "tanh(+1) = " &lt;&lt; std::tanh(+1) &lt;&lt; '\n'
              &lt;&lt; "tanh(-1) = " &lt;&lt; std::tanh(-1) &lt;&lt; '\n'
              &lt;&lt; "tanh(x)*sinh(2*x)-cosh(2*x) = "
              &lt;&lt; std::tanh(x) * std::sinh(2 * x) - std::cosh(2 * x) &lt;&lt; '\n'
              // 特殊值：
              &lt;&lt; "tanh(+0) = " &lt;&lt; std::tanh(+0.0) &lt;&lt; '\n'
              &lt;&lt; "tanh(-0) = " &lt;&lt; std::tanh(-0.0) &lt;&lt; '\n';
}
|output=
tanh(+1) = +0.761594
tanh(-1) = -0.761594
tanh(x)*sinh(2*x)-cosh(2*x) = -1
tanh(+0) = +0
tanh(-0) = -0
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc sinh}}
{{dsc inc|cpp/numeric/math/dsc cosh}}
{{dsc inc|cpp/numeric/math/dsc atanh}}
{{dsc inc|cpp/numeric/complex/dsc tanh}}
{{dsc inc|cpp/numeric/valarray/dsc tanh}}
{{dsc see c|c/numeric/math/tanh}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
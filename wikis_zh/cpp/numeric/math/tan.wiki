{{cpp/title|tan|tanf|tanl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=tan
|param1=num
|constexpr_since=26
|desc=计算 {{c|num}}（以弧度度量）的正切。
}}

===参数===
{{par begin}}
{{par|num|以弧度表示角的浮点数或整数}}
{{par end}}

===返回值===
如果没有发生错误，那么返回 {{c|num}} 的正切（{{math|tan(num)}}）。

{{rrev|until=c++11|
如果 {{c|num}} 的绝对值很大，那么结果可能有较少或无有效数字。
}}

如果发生定义域错误，那么返回值由实现定义（在受支持平台是 NaN）。

如果发生下溢导致的值域错误，那么返回（舍入后的）正确结果。

===错误处理===
报告 {{lc|math_errhandling}} 中指定的错误。

如果实现支持 IEEE 浮点数算术（IEC 60559），那么
* 如果实参是 ±0，那么返回不修改的该值
* 如果实参是 ±∞，那么返回 NaN 并引发 {{lc|FE_INVALID}}
* 如果实参是 NaN，那么返回 NaN

===注解===
（C++ 委派到的）C 中实参为无限大的情况未被指定为定义域错误，但它被定义为 [https://pubs.opengroup.org/onlinepubs/9699919799/functions/tan.html POSIX 中的定义域错误]。

函数在 {{math|π(1/2 + n)}} 有数学上的极点；然而不存在能准确表示 π/2 的常用浮点数表示，所以没有值会导致极点错误发生。

{{cpp/numeric/math/additional integer overload note|tan}}

===示例===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;

// #pragma STDC FENV_ACCESS ON
const double pi = std::acos(-1); // 或用 C++20 的 std::numbers::pi

int main()
{
    // 典型用法
    std::cout &lt;&lt; "tan(1*pi/4) = " &lt;&lt; std::tan(1*pi/4) &lt;&lt; '\n' // 45°
              &lt;&lt; "tan(3*pi/4) = " &lt;&lt; std::tan(3*pi/4) &lt;&lt; '\n' // 135°
              &lt;&lt; "tan(5*pi/4) = " &lt;&lt; std::tan(5*pi/4) &lt;&lt; '\n' // -135°
              &lt;&lt; "tan(7*pi/4) = " &lt;&lt; std::tan(7*pi/4) &lt;&lt; '\n'; // -45°
    
    // 特殊值
    std::cout &lt;&lt; "tan(+0) = " &lt;&lt; std::tan(0.0) &lt;&lt; '\n'
              &lt;&lt; "tan(-0) = " &lt;&lt; std::tan(-0.0) &lt;&lt; '\n';
    
    // 错误处理
    std::feclearexcept(FE_ALL_EXCEPT);
    
    std::cout &lt;&lt; "tan(INFINITY) = " &lt;&lt; std::tan(INFINITY) &lt;&lt; '\n';
    if (std::fetestexcept(FE_INVALID))
        std::cout &lt;&lt; "    发生 FE_INVALID\n";
}
|p=true
|output=
tan(1*pi/4) = 1
tan(3*pi/4) = -1
tan(5*pi/4) = 1
tan(7*pi/4) = -1
tan(+0) = 0
tan(-0) = -0
tan(INFINITY) = -nan
    发生 FE_INVALID
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc sin}}
{{dsc inc|cpp/numeric/math/dsc cos}}
{{dsc inc|cpp/numeric/math/dsc atan}}
{{dsc inc|cpp/numeric/complex/dsc tan}}
{{dsc inc|cpp/numeric/valarray/dsc tan}}
{{dsc see c|c/numeric/math/tan}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{title|FP_NORMAL, FP_SUBNORMAL, FP_ZERO, FP_INFINITE, FP_NAN}}
{{cpp/numeric/math/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl|since=c++11|
#define FP_NORMAL    /* 由实现定义 */
}}
{{dcl|since=c++11|
#define FP_SUBNORMAL /* 由实现定义 */
}}
{{dcl|since=c++11|
#define FP_ZERO      /* 由实现定义 */
}}
{{dcl|since=c++11|
#define FP_INFINITE  /* 由实现定义 */
}}
{{dcl|since=c++11|
#define FP_NAN       /* 由实现定义 */
}}
{{dcl end}}

{{tt|FP_NORMAL}}、{{tt|FP_SUBNORMAL}}、{{tt|FP_ZERO}}、{{tt|FP_INFINITE}}、{{tt|FP_NAN}} 宏各代表一个独自的浮点数类别。它们都展开成整数常量表达式。

{{dsc begin}}
{{dsc hitem|常量|解释}}
{{dsc|{{tt|FP_NORMAL}}|指示值为''正规''{{sep}}值，即不是无穷大、非正规、非数或零}}
{{dsc|{{tt|FP_SUBNORMAL}}|指示值为''非正规''{{sep}}值}}
{{dsc|{{tt|FP_ZERO}}|指示值为正或负零}}
{{dsc|{{tt|FP_INFINITE}}|指示值无法以底层类型表示（正或负无穷大）}}
{{dsc|{{tt|FP_NAN}}|指示值是非数（NaN）}}
{{dsc end}}

===示例===
{{example|
|code=
#include &lt;cfloat&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;

auto show_classification(double x)
{
    switch (std::fpclassify(x))
    {
        case FP_INFINITE:
            return "无穷大";
        case FP_NAN:
            return "非数";
        case FP_NORMAL:
            return "正规值";
        case FP_SUBNORMAL:
            return "非正规值";
        case FP_ZERO:
            return "零";
        default:
            return "未知值";
    }
}

int main()
{
    std::cout &lt;&lt; "1.0/0.0 是" &lt;&lt; show_classification(1 / 0.0) &lt;&lt; '\n'
              &lt;&lt; "0.0/0.0 是" &lt;&lt; show_classification(0.0 / 0.0) &lt;&lt; '\n'
              &lt;&lt; "DBL_MIN/2 是" &lt;&lt; show_classification(DBL_MIN / 2) &lt;&lt; '\n'
              &lt;&lt; "-0.0 是" &lt;&lt; show_classification(-0.0) &lt;&lt; '\n'
              &lt;&lt; "1.0 是" &lt;&lt; show_classification(1.0) &lt;&lt; '\n';
}
|output=
1.0/0.0 是无穷大
0.0/0.0 是非数
DBL_MIN/2 是非正规值
-0.0 是零
1.0 是正规值
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc fpclassify}}
{{dsc see c|c/numeric/math/FP_categories|ntitle=浮点数类别}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|hypot|hypotf|hypotl}}
{{cpp/numeric/math/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl rev multi|num=1|since1=c++11|dcl1=
float       hypot ( float x, float y );
double      hypot ( double x, double y );
long double hypot ( long double x, long double y );
|since2=c++23|dcl2=
/* floating-point-type */ 
            hypot ( /* floating-point-type */ x,
                    /* floating-point-type */ y );
|notes2={{mark constexpr since c++26}}
}}
{{dcla|num=2|since=c++11|constexpr=c++26|
float       hypotf( float x, float y );
}}
{{dcla|num=3|since=c++11|constexpr=c++26|
long double hypotl( long double x, long double y );
}}
{{dcl rev multi|num=4|since1=c++17|dcl1=
float       hypot ( float x, float y, float z );
double      hypot ( double x, double y, double z );
long double hypot ( long double x, long double y, long double z );
|since2=c++23|dcl2=
/*floating-point-type*/
            hypot ( /*floating-point-type*/ x,
                    /*floating-point-type*/ y,
                    /*floating-point-type*/ z );
|notes2={{mark constexpr since c++26}}
}}
{{dcl h|[[#注解|额外重载]]}}
{{dcl header|cmath}}
{{dcla|num=A|since=c++11|constexpr=c++26|
template&lt; class Arithmetic1, Arithmetic2 &gt;
/*common-floating-point-type*/
            hypot ( Arithmetic1 x, Arithmetic2 y );
}}
{{dcl|num=B|since=c++17|constexpr=c++26|
template&lt; class Arithmetic1, Arithmetic2, Arithmetic3 &gt;
/*common-floating-point-type*/
            hypot ( Arithmetic1 x, Arithmetic2 y, Arithmetic3 z );
}}
{{dcl end}}

@1-3@ 计算 {{c|x}} 和 {{c|y}} 的平方和的平方根，而不会在计算的中间阶段有过度的上溢或下溢。{{rev inl|since=c++23|标准库提供所有以无 cv 限定的浮点数类型作为形参 {{c|x}} 和 {{c|y}} 的类型的 {{tt|std::hypot}} 重载。}}
@4@ 计算 {{c|x}}、{{c|y}} 和 {{c|z}} 的平方和的平方根，而不会在计算的中间阶段有过度的上溢或下溢。{{rev inl|since=c++23|标准库提供所有以无 cv 限定的浮点数类型作为形参 {{c|x}}、{{c|y}} 和 {{c|z}} 的类型的 {{tt|std::hypot}} 重载。}}
@A,B@ 为算术类型的所有其他组合提供额外重载。

此函数的双参数版本所计算的是直角边长度分别是 {{c|x}} 和 {{c|y}} 的直角三角形的斜边长，或点 {{tt|(x,y)}} 到原点 {{tt|(0,0)}} 的距离，或复数 {{tt|x+''i''y}} 的绝对值。

此函数的三参数版本所计算的值是点 {{tt|(x,y,z)}} 到原点 {{tt|(0,0,0)}} 的距离。

===参数===
{{par begin}}
{{par|x, y, z|浮点数或整数}}
{{par end}}

===返回值===
@1-3,A@ 如果不出现错误，那么返回直角三角形的斜边，{{mathjax-or|1=\(\scriptsize{\sqrt{x^2+y^2} }\)|2={{mrad|x{{su|p=2}}+y{{su|p=2}}}}}}。
@4,B@ 如果不出现错误，那么返回三维空间中到原点的距离，{{mathjax-or|1=\(\scriptsize{\sqrt{x^2+y^2+z^2} }\)|2={{mrad|x{{su|p=2}}+y{{su|p=2}}+z{{su|p=2}}}}}}。

如果出现上溢所致的值域错误，那么返回 {{lc|HUGE_VAL|+HUGE_VAL}}、{{tt|+HUGE_VALF}} 或 {{tt|+HUGE_VALL}}。

如果出现下溢所致的值域错误，那么返回（舍入后的）正确结果。

===错误处理===
报告 {{lc|math_errhandling}} 中指定的错误。

如果实现支持 IEEE 浮点数算术（IEC 60559），那么
* {{c|std::hypot(x, y)}}、{{c|std::hypot(y, x)}} 及 {{c|std::hypot(x, -y)}} 等价
* 如果实参之一是 ±0，那么 {{tt|std::hypot}} 等价于以非零实参调用 {{lc|std::fabs}}
* 如果实参之一是 ±∞，那么 {{tt|std::hypot}} 返回 +∞ ，即使另一实参是 NaN
* 否则，如果任何实参是 NaN，那么返回 NaN

===注解===
实现通常保证小于 1 {{enwiki|Unit in the last place|ulp}}（最后位置单位—最低精度单位）的精度：[https://sourceware.org/git/?p=glibc.git;a=blob_plain;f=sysdeps/ieee754/dbl-64/e_hypot.c GNU]、[https://www.freebsd.org/cgi/cvsweb.cgi/src/lib/msun/src/e_hypot.c?rev=1.13.4.2;content-type=text%2Fplain BSD]。

{{c|std::hypot(x, y)}} 等价于 {{c|std::abs(std::complex&lt;double&gt;(x,y))}}。

{{posix|hypot||POSIX 指定}}只有在两个实参都非正规且正确结果也非正规时才可以出现下溢（这导致不能以朴素方法实现）。

{{rrev|since=c++17|
能以 {{c|std::hypot(x2 - x1, y2 - y1, z2 - z1)}} 计算两个点 {{tt|(x1, y1, z1)}} 和 {{tt|(x2, y2, z2)}} 在三维空间中的距离。
}}

{{cpp/numeric/math/additional overload note|hypot}}

{{feature test macro|__cpp_lib_hypot|std=C++17|value=201603L|{{tt|std::hypot}} 的三参数重载 {{v|4,B}}}}

===示例===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cfloat&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;

// #pragma STDC FENV_ACCESS ON
 
struct Point3D { float x, y, z; };

int main()
{
    // 通常用法
    std::cout &lt;&lt; "笛卡尔坐标 (1,1) 对应极坐标 (" &lt;&lt; std::hypot(1, 1)
              &lt;&lt; ',' &lt;&lt; std::atan2(1, 1) &lt;&lt; ")\n";
    
    Point3D a{3.14, 2.71, 9.87}, b{1.14, 5.71, 3.87};
    // C++17 有三参数 hypot 重载：
    std::cout &lt;&lt; "distance(a,b) = "
              &lt;&lt; std::hypot(a.x - b.x, a.y - b.y, a.z - b.z) &lt;&lt; '\n';
    
    // 特殊值
    std::cout &lt;&lt; "hypot(NAN,INFINITY) = " &lt;&lt; std::hypot(NAN, INFINITY) &lt;&lt; '\n';
    
    // 错误处理
    errno = 0;
    std::feclearexcept(FE_ALL_EXCEPT);
    std::cout &lt;&lt; "hypot(DBL_MAX,DBL_MAX) = " &lt;&lt; std::hypot(DBL_MAX, DBL_MAX) &lt;&lt; '\n';
    
    if (errno == ERANGE)
        std::cout &lt;&lt; "    errno = ERANGE " &lt;&lt; std::strerror(errno) &lt;&lt; '\n';
    if (fetestexcept(FE_OVERFLOW))
        std::cout &lt;&lt; "    发生 FE_OVERFLOW\n";
}
|output=
笛卡尔坐标 (1,1) 对应极坐标 (1.41421,0.785398)
distance(a,b) = 7
hypot(NAN,INFINITY) = inf
hypot(DBL_MAX,DBL_MAX) = inf
    errno = ERANGE Numerical result out of range
    发生 FE_OVERFLOW
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc pow}}
{{dsc inc|cpp/numeric/math/dsc sqrt}}
{{dsc inc|cpp/numeric/math/dsc cbrt}}
{{dsc inc|cpp/numeric/complex/dsc abs}}
{{dsc see c|c/numeric/math/hypot}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
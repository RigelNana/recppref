{{cpp/title|abs{{small|(float)}}|fabs|fabsf|fabsl}}
{{cpp/numeric/math/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl header|cstdlib}}
{{dcl rev multi|num=1|dcl1=
float       abs( float num );
double      abs( double num );
long double abs( long double num );
|since2=c++23|dcl2=
constexpr /* floating-point-type */
            abs( /* floating-point-type */ num );
}}
{{dcl header|cmath}}
{{dcl rev multi|num=2|dcl1=
float       fabs ( float num );
double      fabs ( double num );
long double fabs ( long double num );
|since2=c++23|dcl2=
constexpr /* floating-point-type */
            fabs ( /* floating-point-type */ num );
}}
{{dcla|anchor=no|num=3|constexpr=c++23|since=c++11|
float       fabsf( float num );
}}
{{dcla|anchor=no|num=4|constexpr=c++23|since=c++11|
long double fabsl( long double num );
}}
{{dcl h|[[#注解|额外重载]] {{mark since c++11}}}}
{{dcl header|cmath}}
{{dcla|anchor=no|num=A|constexpr=c++23|since=c++11|
template&lt; class Integer &gt;
double      fabs ( Integer num );
}}
{{dcl end}}

@1-4@ 计算浮点数值 {{c|num}} 的绝对值。{{rev inl|since=c++23|标准库提供所有以无 cv 限定的浮点数类型作为参数 {{c|num}} 的类型的 {{tt|std::abs}} 和 {{tt|std::fabs}} 重载。}}

{{rrev|since=c++11|
@A@ 为所有整数类型提供额外重载，将它们当做 {{c/core|double}}。
}}

对于整数实参，{{rlp|abs|{{tt|std::abs}} 的整数重载}}通常是更好的匹配。如果以不能由[[cpp/language/implicit conversion#整数提升|整数提升]]转换成 {{c/core|int}} 的无符号整型实参调用 {{tt|std::abs}}，那么程序非良构。

===参数===
{{par begin}}
{{par|arg|浮点数或整数}}
{{par end}}

===返回值===
在成功时返回 {{c|arg}} 的绝对值（{{tt|{{!}}arg{{!}}}}）。值是准确的，且不依赖任何舍入模式。

===错误处理===
此函数不受制于任何指定于 {{lc|math_errhandling}} 的错误条件。

如果实现支持 IEEE 浮点数算术（IEC 60559），那么
* 在实参是 ±0 时返回 +0
* 在实参是 ±∞ 时返回 +∞
* 在实参是 NaN 时返回 NaN

===注解===
{{cpp/numeric/math/additional integer overload note|fabs}}

===示例===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; "abs(+3.0) = " &lt;&lt; std::abs(+3.0) &lt;&lt; '\n'
              &lt;&lt; "abs(-3.0) = " &lt;&lt; std::abs(-3.0) &lt;&lt; '\n';
    
    // 特殊值
    std::cout &lt;&lt; "abs(-0.0) = " &lt;&lt; std::abs(-0.0) &lt;&lt; '\n'
              &lt;&lt; "abs(-Inf) = " &lt;&lt; std::abs(-INFINITY) &lt;&lt; '\n'
              &lt;&lt; "abs(-NaN) = " &lt;&lt; std::abs(-NAN) &lt;&lt; '\n';
}
|p=true
|output=
abs(+3.0) = 3
abs(-3.0) = 3
abs(-0.0) = 0
abs(-Inf) = inf
abs(-NaN) = nan
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|std=C++98|wg=lwg|dr=2192|before={{tt|std::abs}} 的重载不一致地在两个标头声明|after=在两个标头中都声明这些重载}}
{{dr list item|std=C++11|wg=lwg|dr=2735|before=错误地要求了 {{tt|std::abs}} 的对整数类型返回 {{c/core|double}} 的重载|after=移除该要求}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc abs}}
{{dsc inc|cpp/numeric/math/dsc copysign}}
{{dsc inc|cpp/numeric/math/dsc signbit}}
{{dsc inc|cpp/numeric/complex/dsc abs}}
{{dsc inc|cpp/numeric/valarray/dsc abs}}
{{dsc see c|c/numeric/math/fabs}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
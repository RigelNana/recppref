{{cpp/title|exp|expf|expl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=exp
|param1=num
|constexpr_since=26
|desc=计算 {{math|e}}（{{enwiki|E (mathematical constant)|自然常数}}，{{tt|2.7182818...}}）的 {{c|num}} 次幂。
}}

===参数===
{{par begin}}
{{par|num|浮点数或整数}}
{{par end}}

===返回值===
如果没有发生错误，那么返回 {{c|num}} 的底 {{math|e}} 指数（{{math|e{{su|p=num}}}}）。

如果发生上溢导致的值域错误，那么返回 {{tt|+HUGE_VAL}}、{{tt|+HUGE_VALF}} 或 {{tt|+HUGE_VALL}}。

如果发生下溢导致的值域错误，那么返回（舍入后的）正确结果。

===错误处理===
报告 {{lc|math_errhandling}} 中指定的错误。

如果实现支持 IEEE 浮点数算术（IEC 60559），那么
* 如果实参是 ±0，那么返回 1
* 如果实参是 -∞，那么返回 +0
* 如果实参是 +∞，那么返回 +∞
* 如果实参是 NaN，那么返回 NaN

===注解===
对于 IEEE 兼容的 {{c/core|double}} 类型，在 {{math|709.8 &lt; num}} 时保证上溢，并在 {{math|num &lt; -708.4}} 时保证下溢。

{{cpp/numeric/math/additional integer overload note|exp}}

===示例===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;numbers&gt;
 
// #pragma STDC FENV_ACCESS ON

consteval double approx_e()
{
    long double e{1.0};
    for (auto fac{1ull}, n{1llu}; n != 18; ++n, fac *= n)
        e += 1.0 / fac;
    return e;
}

int main()
{
    std::cout &lt;&lt; std::setprecision(16)
              &lt;&lt; "exp(1) = e¹ = " &lt;&lt; std::exp(1) &lt;&lt; '\n'
              &lt;&lt; "numbers::e  = " &lt;&lt; std::numbers::e &lt;&lt; '\n'
              &lt;&lt; "approx_e    = " &lt;&lt; approx_e() &lt;&lt; '\n'
              &lt;&lt; "$100 在 1 年连续复利 3% 后，本金 + 利息 = "
              &lt;&lt; std::setprecision(6) &lt;&lt; 100 * std::exp(0.03) &lt;&lt; '\n';
 
    // 特殊值
    std::cout &lt;&lt; "exp(-0) = " &lt;&lt; std::exp(-0.0) &lt;&lt; '\n'
              &lt;&lt; "exp(-Inf) = " &lt;&lt; std::exp(-INFINITY) &lt;&lt; '\n';
    
    // 错误处理
    errno = 0;
    std::feclearexcept(FE_ALL_EXCEPT);
    
    std::cout &lt;&lt; "exp(710) = " &lt;&lt; std::exp(710) &lt;&lt; '\n';
    
    if (errno == ERANGE)
        std::cout &lt;&lt; "    errno == ERANGE: " &lt;&lt; std::strerror(errno) &lt;&lt; '\n';
    if (std::fetestexcept(FE_OVERFLOW))
        std::cout &lt;&lt; "    发生 FE_OVERFLOW\n";
}
|p=true
|output=
exp(1) = e¹ = 2.718281828459045
numbers::e  = 2.718281828459045
approx_e    = 2.718281828459045
$100 在 1 年连续复利 3% 后，本金 + 利息 = 103.045
exp(-0) = 1
exp(-Inf) = 0
exp(710) = inf
    errno == ERANGE: Numerical result out of range
    发生 FE_OVERFLOW
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc exp2}}
{{dsc inc|cpp/numeric/math/dsc expm1}}
{{dsc inc|cpp/numeric/math/dsc log}}
{{dsc inc|cpp/numeric/complex/dsc exp}}
{{dsc inc|cpp/numeric/valarray/dsc exp}}
{{dsc see c|c/numeric/math/exp}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
{{cpp/title|lgamma|lgammaf|lgammal}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=lgamma
|param1=num
|constexpr_since=26
|desc=计算 {{c|num}} 的{{enwiki|Gamma function|伽马函数}}绝对值的自然对数。
}}

===参数===
{{par begin}}
{{par|num|浮点数或整数}}
{{par end}}

===返回值===
如果没有发生错误，那么返回 {{c|num}} 的伽马函数的自然对数，即 {{mathjax-or|1=\(\log_{e}{{!}}{\int_0^\infty t^{num-1} e^{-t} \mathsf{d}t}{{!}}\)|2=log{{su|b=e}}{{!}}{{minteg|0|∞|''t''{{su|p=num-1}} {{mexp|-t}} d''t''}}{{!}}}}。

如果发生极点错误，那么返回 {{lc|HUGE_VAL|+HUGE_VAL}}、{{tt|+HUGE_VALF}} 或 {{tt|+HUGE_VALL}}。

如果发生上溢导致的值域错误，那么返回 {{lc|HUGE_VAL|±HUGE_VAL}}、{{tt|±HUGE_VALF}} 或 {{tt|±HUGE_VALL}}。

===错误处理===
报告 {{lc|math_errhandling}} 中指定的错误。

如果 {{c|num}} 为零或为小于零的整数，那么可能发生极点错误。

如果实现支持 IEEE 浮点数算术（IEC 60559），那么
* 如果实参是 1，那么返回 +0。
* 如果实参是 2，那么返回 +0。
* 如果实参是 ±0，那么返回 +∞ 并引发 {{lc|FE_DIVBYZERO}}。
* 如果实参是负整数，那么返回 +∞ 并引发 {{lc|FE_DIVBYZERO}}。
* 如果实参是 ±∞，那么则返回 +∞。
* 如果实参是 NaN，那么返回 NaN。

===注解===
如果 {{c|num}} 是自然数，那么 {{c|std::lgamma(num)}} 是 {{c|num - 1}} 阶乘的自然对数。

[https://pubs.opengroup.org/onlinepubs/9699919799/functions/lgamma.html {{tt|lgamma}} 的 POSIX 版本]不是线程安全的：每次执行函数都会存储 {{c|num}} 的伽马函数的符号于静态外部变量 {{tt|signgam}}。一些实现提供 {{tt|lgamma_r}}，它接收指向 singgam 的用户提供存储的指针为第二参数，而且是线程安全的。

许多实现中都有名为 {{tt|gamma}} 的非标准函数，但它们的定义不一致。例如，{{tt|gamma}} 的 glibc 和 4.2BSD 版本执行 {{tt|lgamma}}，但 {{tt|gamma}} 的 4.4BSD 版本执行 {{tt|tgamma}}。

{{cpp/numeric/math/additional integer overload note|lgamma}}

===示例===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;

// #pragma STDC FENV_ACCESS ON

const double pi = std::acos(-1); // C++20 起也可以使用 std::numbers::pi

int main()
{
    std::cout &lt;&lt; "lgamma(10) = " &lt;&lt; std::lgamma(10)
              &lt;&lt; "，log(9!) = " &lt;&lt; std::log(std::tgamma(10))
              &lt;&lt; "，exp(lgamma(10)) = " &lt;&lt; std::exp(std::lgamma(10)) &lt;&lt; '\n'
              &lt;&lt; "lgamma(0.5) = " &lt;&lt; std::lgamma(0.5)
              &lt;&lt; "，log(sqrt(pi)) = " &lt;&lt; std::log(std::sqrt(pi)) &lt;&lt; '\n';
    
    // 特殊值
    std::cout &lt;&lt; "lgamma(1) = " &lt;&lt; std::lgamma(1) &lt;&lt; '\n'
              &lt;&lt; "lgamma(+Inf) = " &lt;&lt; std::lgamma(INFINITY) &lt;&lt; '\n';
    
    // 错误处理
    errno = 0;
    std::feclearexcept(FE_ALL_EXCEPT);
    
    std::cout &lt;&lt; "lgamma(0) = " &lt;&lt; std::lgamma(0) &lt;&lt; '\n';
    
    if (errno == ERANGE)
        std::cout &lt;&lt; "    errno == ERANGE: " &lt;&lt; std::strerror(errno) &lt;&lt; '\n';
    if (std::fetestexcept(FE_DIVBYZERO))
        std::cout &lt;&lt; "    发生 FE_DIVBYZERO\n";
}
|output=
lgamma(10) = 12.8018，log(9!) = 12.8018，exp(lgamma(10)) = 362880
lgamma(0.5) = 0.572365，log(sqrt(pi)) = 0.572365
lgamma(1) = 0
lgamma(+Inf) = inf
lgamma(0) = inf
    errno == ERANGE: Numerical result out of range
    发生 FE_DIVBYZERO
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc tgamma}}
{{dsc see c|c/numeric/math/lgamma}}
{{dsc end}}

===外部链接===
{{eli|[https://mathworld.wolfram.com/LogGammaFunction.html Weisstein, Eric W. “对数伽马函数”]来自 MathWorld--A Wolfram Web Resource。}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|tgamma|tgammaf|tgammal}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=tgamma
|param1=num
|constexpr_since=26
|desc=计算 {{c|num}} 的 {{enwiki|Gamma function|伽马函数}}。
}}

===参数===
{{par begin}}
{{par|num|浮点数或整数}}
{{par end}}

===返回值===
如果没有发生错误，那么返回 {{c|num}} 的 Γ 函数值，即 {{mathjax-or|1=\(\Gamma(\mathtt{num}) = \displaystyle\int_0^\infty\!\! t^{\mathtt{num}-1} e^{-t}\, dt\)|2={{minteg|0|∞|''t''{{su|p=num-1}} {{mexp|-t}} d''t''}}}}。

如果发生定义域错误，那么返回值由实现定义（在受支持平台上是 NaN）。

如果发生极点错误，那么返回 {{lc|HUGE_VAL|±HUGE_VAL}}、{{tt|±HUGE_VALF}} 或 {{tt|±HUGE_VALL}}。

如果发生上溢导致的值域错误，那么返回 {{lc|HUGE_VAL|±HUGE_VAL}}、{{tt|±HUGE_VALF}} 或 {{tt|±HUGE_VALL}}。

如果发生下溢导致的值域错误，那么返回（舍入后的）正确结果。

===错误处理===
报告 {{lc|math_errhandling}} 中指定的错误。

如果 {{c|num}} 为零或为小于零的整数，那么可能发生极点或定义域错误。

如果实现支持 IEEE 浮点数算术（IEC 60559），那么
* 如果实参是 ±0，那么返回 ±∞ 并引发 {{lc|FE_DIVBYZERO}}
* 如果实参是负整数，那么返回 NaN 并引发 {{lc|FE_INVALID}}
* 如果实参是 -∞，那么返回 NaN 并引发 {{lc|FE_INVALID}}
* 如果实参是 +∞，那么返回 +∞
* 如果实参是 NaN，那么返回 NaN

===注解===
如果 {{c|num}} 是自然数，那么 {{c|std::tgamma(num)}} 是 {{c|num - 1}} 的阶乘。许多实现在实参是足够小的整数时计算准确的整数域阶乘。

对于 IEEE 兼容的 {{c/core|double}} 类型，在 {{c|0 &lt; num &amp;&amp; num &lt; 1 / DBL_MAX}} 或 {{c|num &gt; 171.7}} 时发生上溢。

[https://pubs.opengroup.org/onlinepubs/9699919799/functions/tgamma.html POSIX 要求]在参数为零时发生极点错误，但在参数是负整数时发生定义域错误。它也指定在将来，对于负整数，可能替换定义域错误为浮点数错误（这些情况下返回值将从 NaN 更改为 ±∞）。

许多实现中都有名为 {{tt|gamma}} 的非标准函数，但它们的定义不一致。例如，{{tt|gamma}} 的 glibc 和 4.2BSD 版本执行 {{tt|lgamma}}，但 {{tt|gamma}} 的 4.4BSD 版本执行 {{tt|tgamma}}。

{{cpp/numeric/math/additional integer overload note|tgamma}}

===示例===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
// #pragma STDC FENV_ACCESS ON

int main()
{
    std::cout &lt;&lt; "tgamma(10) = " &lt;&lt; std::tgamma(10)
              &lt;&lt; "，9! = " &lt;&lt; 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 &lt;&lt; '\n'
              &lt;&lt; "tgamma(0.5) = " &lt;&lt; std::tgamma(0.5)
              &lt;&lt; "，sqrt(pi) = " &lt;&lt; std::sqrt(std::acos(-1)) &lt;&lt; '\n';
    
    // 特殊值
    std::cout &lt;&lt; "tgamma(1) = " &lt;&lt; std::tgamma(1) &lt;&lt; '\n'
              &lt;&lt; "tgamma(+Inf) = " &lt;&lt; std::tgamma(INFINITY) &lt;&lt; '\n';
    
    // 错误处理
    errno = 0;
    std::feclearexcept(FE_ALL_EXCEPT);
    
    std::cout &lt;&lt; "tgamma(-1) = " &lt;&lt; std::tgamma(-1) &lt;&lt; '\n';
    
    if (errno == EDOM)
        std::cout &lt;&lt; "    errno == EDOM: " &lt;&lt; std::strerror(errno) &lt;&lt; '\n';
    if (std::fetestexcept(FE_INVALID))
        std::cout &lt;&lt; "    发生 FE_INVALID\n";
}
|p=true
|output=
tgamma(10) = 362880，9! = 362880
tgamma(0.5) = 1.77245，sqrt(pi) = 1.77245
tgamma(1) = 1
tgamma(+Inf) = inf
tgamma(-1) = nan
    errno == EDOM: Numerical argument out of domain
    发生 FE_INVALID
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc lgamma}}
{{dsc inc|cpp/numeric/special_math/dsc beta}}
{{dsc see c|c/numeric/math/tgamma}}
{{dsc end}}

===外部链接===
{{eli|[http://mathworld.wolfram.com/GammaFunction.html Weisstein, Eric W. “伽马函数”]来自 MathWorld--A Wolfram Web Resource。}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
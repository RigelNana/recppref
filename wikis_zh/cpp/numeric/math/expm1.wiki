{{cpp/title|expm1|expm1f|expm1l}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=expm1
|param1=num
|constexpr_since=26
|desc=计算 {{math|e}}（{{enwiki|E (mathematical_constant)|自然常数}}，{{c/core|2.7182818...}}）的给定 {{c|num}} 次幂减 {{c|1.0}}。如果 {{c|num}} 接近零，那么此函数比表达式 {{c|std::exp(num) - 1.0}} 更精确。
}}

===参数===
{{par begin}}
{{par|num|浮点数或整数}}
{{par end}}

===返回值===
没有发生错误时返回 {{math|e{{su|p=num}}-1}}。

如果发生上溢导致的值域错误，那么返回 {{tt|+HUGE_VAL}}、{{tt|+HUGE_VALF}} 或 {{tt|+HUGE_VALL}}。

如果发生下溢导致的值域错误，那么返回（舍入后的）正确结果。

===错误处理===
报告 {{lc|math_errhandling}} 中指定的错误。

如果实现支持 IEEE 浮点数算术（IEC 60559），那么
* 如果实参是 ±0，那么返回不修改的参数
* 如果实参是 -∞，那么返回 -1
* 如果实参是 +∞，那么返回 +∞
* 如果实参是 NaN，那么返回 NaN

===注解===
函数 {{tt|std::expm1}} 和 {{lc|std::log1p}} 对于金融计算有用：例如在计算小的日利率时：{{math|(1+x){{su|p=n}}-1}} 能表示为 {{c|std::expm1(n * std::log1p(x))}}。这些函数特能简化书写精确的反双曲函数。

对于 IEEE 兼容的 {{c/core|double}} 类型在 {{math|709.8 &lt; num}} 时保证上溢。

{{cpp/numeric/math/additional integer overload note|expm1}}

===示例===
{{example|
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
// #pragma STDC FENV_ACCESS ON

int main()
{
    std::cout &lt;&lt; "expm1(1) = " &lt;&lt; std::expm1(1) &lt;&lt; '\n'
              &lt;&lt; "在假定每月只有 30 天的日历上每天计算复利时，\n"
              &lt;&lt; "    2 天以 1% 利率可以获得的利息 = "
              &lt;&lt; 100 * std::expm1(2 * std::log1p(0.01 / 360)) &lt;&lt; '\n'
              &lt;&lt; "exp(1e-16)-1 = " &lt;&lt; std::exp(1e-16) - 1
              &lt;&lt; "，但 expm1(1e-16) = " &lt;&lt; std::expm1(1e-16) &lt;&lt; '\n';
    
    // 特殊值
    std::cout &lt;&lt; "expm1(-0) = " &lt;&lt; std::expm1(-0.0) &lt;&lt; '\n'
              &lt;&lt; "expm1(-Inf) = " &lt;&lt; std::expm1(-INFINITY) &lt;&lt; '\n';
    
    // 错误处理
    errno = 0;
    std::feclearexcept(FE_ALL_EXCEPT);
    
    std::cout &lt;&lt; "expm1(710) = " &lt;&lt; std::expm1(710) &lt;&lt; '\n';
    
    if (errno == ERANGE)
        std::cout &lt;&lt; "    errno == ERANGE: " &lt;&lt; std::strerror(errno) &lt;&lt; '\n';
    if (std::fetestexcept(FE_OVERFLOW))
        std::cout &lt;&lt; "    发生 FE_OVERFLOW\n";
}
|p=true
|output=
expm1(1) = 1.71828
在假定每月只有 30 天的日历上每天计算复利时，
    2 天以 1% 利率可以获得的利息 = 0.00555563
exp(1e-16)-1 = 0，但 expm1(1e-16) = 1e-16
expm1(-0) = -0
expm1(-Inf) = -1
expm1(710) = inf
    errno == ERANGE: Result too large
    发生 FE_OVERFLOW
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc exp}}
{{dsc inc|cpp/numeric/math/dsc exp2}}
{{dsc inc|cpp/numeric/math/dsc log1p}}
{{dsc see c|c/numeric/math/expm1}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
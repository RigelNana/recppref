{{cpp/numeric/math/unary_is|isnan
|description=确定给定的浮点数 {{c|num}} 是否为非数（NaN）值。
|condition=为 NaN{{nbsp}}
|note=
有多个拥有不同符号位和载荷的不同 NaN 值，参阅 {{lc|std::nan}} 及 {{lc|std::numeric_limits::quiet_NaN}}。

NaN 值永远不会与自身或其他 NaN 值比较相等。IEEE-754 不要求复制 NaN 保留它的位表示（符号与{{rlp|nan|载荷}}），尽管大多数实现会保留。

另一种测试浮点数是否 NaN 的方式是与自身比较：{{c|1=bool is_nan(double x) { return x != x; }&lt;!----&gt;}}。

[https://gcc.gnu.org/wiki/FloatingPointMath GCC] 和 [https://clang.llvm.org/docs/UsersManual.html#controlling-floating-point-behavior Clang] 支持 {{tt|-ffinite-math}} 选项（并额外由 {{tt|-ffast-math}} 蕴含），此选项允许编译器假设 IEEE-754 特殊浮点数（例如 NaN，无限和负零）不存在。也就是说，在此选项下会假设 {{tt|std::isnan}} 固定返回 {{c|false}}。
}}

===示例===
{{example
|code=
#include &lt;cfloat&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; std::boolalpha
              &lt;&lt; "isnan(NaN) = " &lt;&lt; std::isnan(NAN) &lt;&lt; '\n'
              &lt;&lt; "isnan(Inf) = " &lt;&lt; std::isnan(INFINITY) &lt;&lt; '\n'
              &lt;&lt; "isnan(0.0) = " &lt;&lt; std::isnan(0.0) &lt;&lt; '\n'
              &lt;&lt; "isnan(DBL_MIN/2.0) = " &lt;&lt; std::isnan(DBL_MIN / 2.0) &lt;&lt; '\n'
              &lt;&lt; "isnan(0.0 / 0.0)   = " &lt;&lt; std::isnan(0.0 / 0.0) &lt;&lt; '\n'
              &lt;&lt; "isnan(Inf - Inf)   = " &lt;&lt; std::isnan(INFINITY - INFINITY) &lt;&lt; '\n';
}
|output=
isnan(NaN) = true
isnan(Inf) = false
isnan(0.0) = false
isnan(DBL_MIN/2.0) = false
isnan(0.0 / 0.0)   = true
isnan(Inf - Inf)   = true
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc fnan}}
{{dsc inc|cpp/numeric/math/dsc fpclassify}}
{{dsc inc|cpp/numeric/math/dsc isfinite}}
{{dsc inc|cpp/numeric/math/dsc isinf}}
{{dsc inc|cpp/numeric/math/dsc isnormal}}
{{dsc inc|cpp/numeric/math/dsc isunordered}}
{{dsc see c|c/numeric/math/isnan}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|atan2|atan2f|atan2l}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=atan2
|param1=y
|param2=x
|constexpr_since=26
|desc=计算 {{c|y / x}} 的弧（反）正切，以实参正负号确定正确的象限。
}}

===参数===
{{par begin}}
{{par|y, x|浮点数或整数}}
{{par end}}

===返回值===
如果没有发生错误，那么返回 {{c|y / x}} 在 {{math|[-&amp;pi;, +&amp;pi;]}} 弧度范围中的弧（反）正切（{{math|arctan({{mfrac|y|x}})}}）。

{{plot|math-atan2.png|left={{c|y}} 实参|bottom={{c|x}} 实参|right=返回值|size=x240px}}

如果发生定义域错误，那么返回值由实现定义（在支持的平台上是 NaN）。

如果发生下溢导致的值域错误，那么返回（舍入后的）正确结果。

===错误处理===
报告 {{lc|math_errhandling}} 中指定的错误。

如果 {{c|x}} 与 {{c|y}} 均为零，那么可能发生定义域错误。

如果实现支持 IEEE 浮点数算术（IEC 60559），那么
* 如果 {{c|x}} 与 {{c|y}} 均为零，那么''不发生''定义域错误
* 如果 {{c|x}} 与 {{c|y}} 均为零，那么也不发生值域错误
* 如果 {{c|y}} 为零，那么不发生极点错误
* 如果 {{c|y}} 是 ±0 且 {{c|x}} 为负或是 -0，那么返回 ±&amp;pi;
* 如果 {{c|y}} 是 ±0 且 {{c|x}} 为正或是 +0，那么返回 ±0
* 如果 {{c|y}} 是 ±∞ 且 {{c|x}} 有限，那么返回 ±&amp;pi;/2
* 如果 {{c|y}} 是 ±∞ 且 {{c|x}} 是 -∞，那么返回 ±3&amp;pi;/4
* 如果 {{c|y}} 是 ±∞ 且 {{c|x}} 是 +∞，那么返回 ±&amp;pi;/4
* 如果 {{c|x}} 是 ±0 且 {{c|y}} 为负，那么返回 -&amp;pi;/2
* 如果 {{c|x}} 是 ±0 且 {{c|y}} 为正，那么返回 +&amp;pi;/2
* 如果 {{c|x}} 是 -∞ 且 {{c|y}} 是正有限，那么返回 +&amp;pi;
* 如果 {{c|x}} 是 -∞ 且 {{c|y}} 是负有限，那么返回 -&amp;pi;
* 如果 {{c|x}} 是 +∞ 且 {{c|y}} 是正有限，那么返回 +0
* 如果 {{c|x}} 是 +∞ 且 {{c|y}} 是负有限，那么返回 -0
* 如果 {{c|x}} 是 NaN 或 {{c|y}} 是 NaN，那么返回 NaN

===注解===
{{c|std::atan2(y, x)}} 等价于 {{c|std::arg(std::complex&lt;std::common_type_t&lt;decltype(x), decltype(y)&gt;&gt;(x, y))}}。

[https://pubs.opengroup.org/onlinepubs/9699919799/functions/atan2.html POSIX 指定]在下溢情况下返回 {{c|y / x}}，而在不支持这样做的情况下返回不大于 {{lc|DBL_MIN}}、{{lc|FLT_MIN}} 和 {{lc|LDBL_MIN}} 的由实现定义的值。

{{cpp/numeric/math/additional overload note|atan2}}

===示例===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;

void print_coordinates(int x, int y)
{
    std::cout &lt;&lt; std::showpos
              &lt;&lt; "笛卡尔坐标 (x:" &lt;&lt; x &lt;&lt; ", y:" &lt;&lt; y &lt;&lt; ") "
              &lt;&lt; "是极坐标 (r:" &lt;&lt; std::hypot(x, y)
              &lt;&lt; ", phi:" &lt;&lt; std::atan2(y, x) &lt;&lt; ")\n";
}

int main()
{
    // 正常用法：用两个实参的正负号确定象限
    print_coordinates(+1, +1); // atan2( 1,  1) =  +pi/4，第一象限
    print_coordinates(-1, +1); // atan2( 1, -1) = +3pi/4，第二象限
    print_coordinates(-1, -1); // atan2(-1, -1) = -3pi/4，第三象限
    print_coordinates(+1, -1); // atan2(-1,  1) =  -pi/4，第四象限
    
    // 特殊值
    std::cout &lt;&lt; std::noshowpos
              &lt;&lt; "atan2(0, 0) = " &lt;&lt; atan2(0, 0) &lt;&lt; '\n'
              &lt;&lt; "atan2(0,-0) = " &lt;&lt; atan2(0, -0.0) &lt;&lt; '\n'
              &lt;&lt; "atan2(7, 0) = " &lt;&lt; atan2(7, 0) &lt;&lt; '\n'
              &lt;&lt; "atan2(7,-0) = " &lt;&lt; atan2(7, -0.0) &lt;&lt; '\n';
}
|output=
笛卡尔坐标 (x:+1, y:+1) 是极坐标 (r:1.41421, phi:0.785398)
笛卡尔坐标 (x:-1, y:+1) 是极坐标 (r:1.41421, phi:2.35619)
笛卡尔坐标 (x:-1, y:-1) 是极坐标 (r:1.41421, phi:-2.35619)
笛卡尔坐标 (x:+1, y:-1) 是极坐标 (r:1.41421, phi:-0.785398)
atan2(0, 0) = 0
atan2(0,-0) = 3.14159
atan2(7, 0) = 1.5708
atan2(7,-0) = 1.5708
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc asin}}
{{dsc inc|cpp/numeric/math/dsc acos}}
{{dsc inc|cpp/numeric/math/dsc atan}}
{{dsc inc|cpp/numeric/complex/dsc arg}}
{{dsc inc|cpp/numeric/valarray/dsc atan2}}
{{dsc see c|c/numeric/math/atan2}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
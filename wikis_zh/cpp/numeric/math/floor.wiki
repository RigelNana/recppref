{{cpp/title|floor|floorf|floorl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=floor
|param1=num
|constexpr_since=23
|desc=计算不大于 {{c|num}} 的最大整数。
}}

===参数===
{{par begin}}
{{par|num|浮点数或整数}}
{{par end}}

===返回值===
如果没有返回错误，那么返回不大于 {{c|num}} 的最大整数，即 {{math|⌊num⌋}}。

{{plot|left=返回值|bottom={{c|num}}|math-floor.svg}}

===错误处理===
报告 {{lc|math_errhandling}} 中指定的错误。

如果实现支持 IEEE 浮点数算术（IEC 60559），那么
* 当前[[cpp/numeric/fenv/FE_round|舍入方式]]无效。
* 如果 {{c|num}} 是 ±∞，那么返回不修改的该值
* 如果 {{c|num}} 是 ±0，那么返回不修改的该值
* 如果 {{c|num}} 是 NaN，那么返回 NaN

===注解===
在舍入非整数有限值时可以（但不要求）引发 {{lc|FE_INEXACT}}。

所有标准浮点数格式中，最大可表示浮点数值准确地为整数，所以此函数自身永远不会上溢；然而在存储到整数对象时，结果可能溢出任何整数类型（包含 {{lc|std::intmax_t}}）。

{{cpp/numeric/math/additional integer overload note|floor}}

===示例===
{{example
|code=
#include &lt;cmath&gt;
#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; std::fixed
              &lt;&lt; "floor(+2.7) = " &lt;&lt; std::floor(+2.7) &lt;&lt; '\n'
              &lt;&lt; "floor(-2.7) = " &lt;&lt; std::floor(-2.7) &lt;&lt; '\n'
              &lt;&lt; "floor(-0.0) = " &lt;&lt; std::floor(-0.0) &lt;&lt; '\n'
              &lt;&lt; "floor(-Inf) = " &lt;&lt; std::floor(-INFINITY) &lt;&lt; '\n';
}
|output=
floor(+2.7) = 2.000000
floor(-2.7) = -3.000000
floor(-0.0) = -0.000000
floor(-Inf) = -inf
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc ceil}}
{{dsc inc|cpp/numeric/math/dsc trunc}}
{{dsc inc|cpp/numeric/math/dsc round}}
{{dsc see c|c/numeric/math/floor}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
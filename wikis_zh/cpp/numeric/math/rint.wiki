{{cpp/title|rint|rintf|rintl|lrint|lrintf|lrintl|llrint|llrintf|llrintl}}
{{cpp/numeric/math/navbar}}
{{dcl begin}}
{{dcl header|cmath}}
{{dcl h|舍入到浮点数类型}}
{{dcl rev multi|num=1|since1=c++11|dcl1=
float       rint ( float num );
double      rint ( double num );
long double rint ( long double num );
|since2=c++23|dcl2=
/* floating-point-type */ rint( /* floating-point-type */ num );
}}
{{dcl|num=2|since=c++11|
float       rintf( float num );
}}
{{dcl|num=3|since=c++11|
long double rintl( long double num );
}}
{{dcl h|舍入到 {{c/core|long}}}}
{{dcl rev multi|num=4|since1=c++11|dcl1=
long lrint ( float num );
long lrint ( double num );
long lrint ( long double num );
|since2=c++23|dcl2=
long lrint ( /* floating-point-type */ num );
}}
{{dcl|num=5|since=c++11|
long lrintf( float num );
}}
{{dcl|num=6|since=c++11|
long lrintl( long double num );
}}
{{dcl h|舍入到 {{c/core|long long}}}}
{{dcl rev multi|num=7|since1=c++11|dcl1=
long long llrint ( float num );
long long llrint ( double num );
long long llrint ( long double num );
|since2=c++23|dcl2=
long long llrint ( /* floating-point-type */ num );
}}
{{dcl|num=8|since=c++11|
long long llrintf( float num );
}}
{{dcl|num=9|since=c++11|
long long llrintl( long double num );
}}
{{dcl h|[[#注解|额外重载]]}}
{{dcl header|cmath}}
{{dcl|num=A|since=c++11|
template&lt; class Integer &gt;
double rint( Integer num );
}}
{{dcl|num=B|since=c++11|
template&lt; class Integer &gt;
long lrint( Integer num );
}}
{{dcl|num=C|since=c++11|
template&lt; class Integer &gt;
long long llrint( Integer num );
}}
{{dcl end}}

@1-3@ 用[[cpp/numeric/fenv/FE_round|当前舍入模式]]，舍入浮点数实参 {{c|num}} 为（浮点数格式的）整数。{{rev inl|since=c++23|标准库提供所有以无 cv 限定的浮点数类型作为实参 {{c|num}} 的类型的 {{tt|std::rint}} 重载。}}
@4-9@ 用[[cpp/numeric/fenv/FE_round|当前舍入模式]]，舍入浮点数实参 {{c|num}} 为整数。{{rev inl|since=c++23|标准库提供所有以无 cv 限定的浮点数类型作为实参 {{c|num}} 的类型的 {{tt|std::lrint}} 和 {{tt|std::llrint}} 重载。}}
@A-C@ 为所有整数类型提供额外重载，将它们当做 {{c/core|double}}。

===参数===
{{par begin}}
{{par|num|浮点数或整数}}
{{par end}}

===返回值===
如果没有发生错误，那么返回 {{c|num}} 按照[[cpp/numeric/fenv/FE_round|当前舍入模式]]的最接近整数。

===错误处理===
报告 {{lc|math_errhandling}} 中指定的错误。

如果 {{tt|std::lrint}} 或 {{tt|std::llrint}} 的结果在返回类型的可表示范围外，那么可能发生定义域错误或值域错误。

如果实现支持 IEEE 浮点数算术（IEC 60559），那么
: 对于 {{tt|std::rint}} 函数：
* 如果 {{c|num}} 是 ±∞，那么返回不修改的该值
* 如果 {{c|num}} 是 ±0，那么返回不修改的该值
* 如果 {{c|num}} 是 NaN，那么返回 NaN
: 对于 {{tt|std::lrint}} 和 {{tt|std::llrint}} 函数：
* 如果 {{c|num}} 是 ±∞，那么引发 {{lc|FE_INVALID}} 并返回实现定义值
* 如果舍入结果在返回类型范围外，那么引发 {{lc|FE_INVALID}} 并返回实现定义值
* 如果 {{c|num}} 是 NaN，那么引发 {{lc|FE_INVALID}} 并返回实现定义值

===注解===
[https://pubs.opengroup.org/onlinepubs/9699919799/functions/lrint.html POSIX 指定] {{tt|std::lrint}} 或 {{tt|std::llrint}} 引发 {{lc|FE_INEXACT}} 的所有情况都是定义域错误。

如 {{lc|math_errhandling}} 中指定，{{tt|std::rint}} 在舍入非整数有限值时可以（但不在非 IEEE 浮点数平台上要求）引发 {{lc|FE_INEXACT}}。

{{tt|std::rint}} 和 {{lc|std::nearbyint}} 间仅有的区别是 {{lc|std::nearbyint}} 决不引发 {{lc|FE_INEXACT}}。

所有标准浮点数格式的最大可表示浮点数值都是准确的整数，所以 {{tt|std::rint}} 自身永远不会上溢；然而将结果存储到整数对象时，结果可能溢出任何整数类型（包含 {{lc|std::intmax_t}}）。

如果当前舍入模式是：
* {{lc|FE_DOWNWARD}}，那么 {{tt|std::rint}} 等价于 {{lc|std::floor}}。
* {{lc|FE_UPWARD}}，那么 {{tt|std::rint}} 等价于 {{lc|std::ceil}}。
* {{lc|FE_TOWARDZERO}}，那么 {{tt|std::rint}} 等价于 {{lc|std::trunc}}。
* {{lc|FE_TONEAREST}}，那么 {{tt|std::rint}} 在中点情况和 {{lc|std::round}} 的区别是前者始终舍入到偶数，而非远离零。

{{cpp/numeric/math/additional integer overload note|rint}}

===示例===
{{example
|code=
#include &lt;cfenv&gt;
#include &lt;climits&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;
// #pragma STDC FENV_ACCESS ON

int main()
{
    std::fesetround(FE_TONEAREST);
    std::cout &lt;&lt; "就近舍入（在中点舍入到偶数）：\n"
              &lt;&lt; "  rint(+2.3) = " &lt;&lt; std::rint(2.3) &lt;&lt; '\n'
              &lt;&lt; "  rint(+2.5) = " &lt;&lt; std::rint(2.5) &lt;&lt; '\n'
              &lt;&lt; "  rint(+3.5) = " &lt;&lt; std::rint(3.5) &lt;&lt; '\n'
              &lt;&lt; "  rint(-2.3) = " &lt;&lt; std::rint(-2.3) &lt;&lt; '\n'
              &lt;&lt; "  rint(-2.5) = " &lt;&lt; std::rint(-2.5) &lt;&lt; '\n'
              &lt;&lt; "  rint(-3.5) = " &lt;&lt; std::rint(-3.5) &lt;&lt; '\n';
    
    std::fesetround(FE_DOWNWARD);
    std::cout &lt;&lt; "向下舍入：\n"
              &lt;&lt; "  rint(+2.3) = " &lt;&lt; std::rint(2.3) &lt;&lt; '\n'
              &lt;&lt; "  rint(+2.5) = " &lt;&lt; std::rint(2.5) &lt;&lt; '\n'
              &lt;&lt; "  rint(+3.5) = " &lt;&lt; std::rint(3.5) &lt;&lt; '\n'
              &lt;&lt; "  rint(-2.3) = " &lt;&lt; std::rint(-2.3) &lt;&lt; '\n'
              &lt;&lt; "  rint(-2.5) = " &lt;&lt; std::rint(-2.5) &lt;&lt; '\n'
              &lt;&lt; "  rint(-3.5) = " &lt;&lt; std::rint(-3.5) &lt;&lt; '\n'
              &lt;&lt; "使用 lrint 向下舍入：\n"
              &lt;&lt; "  lrint(+2.3) = " &lt;&lt; std::lrint(2.3) &lt;&lt; '\n'
              &lt;&lt; "  lrint(+2.5) = " &lt;&lt; std::lrint(2.5) &lt;&lt; '\n'
              &lt;&lt; "  lrint(+3.5) = " &lt;&lt; std::lrint(3.5) &lt;&lt; '\n'
              &lt;&lt; "  lrint(-2.3) = " &lt;&lt; std::lrint(-2.3) &lt;&lt; '\n'
              &lt;&lt; "  lrint(-2.5) = " &lt;&lt; std::lrint(-2.5) &lt;&lt; '\n'
              &lt;&lt; "  lrint(-3.5) = " &lt;&lt; std::lrint(-3.5) &lt;&lt; '\n'
              &lt;&lt; "特殊值：\n"
              &lt;&lt; "  lrint(-0.0) = " &lt;&lt; std::lrint(-0.0) &lt;&lt; '\n'
              &lt;&lt; std::hex &lt;&lt; std::showbase
              &lt;&lt; "  lrint(-Inf) = " &lt;&lt; std::lrint(-INFINITY) &lt;&lt; '\n';

    // 错误处理
    std::feclearexcept(FE_ALL_EXCEPT);
    
    std::cout &lt;&lt; "std::rint(0.1) = " &lt;&lt; std::rint(.1) &lt;&lt; '\n';
    if (std::fetestexcept(FE_INEXACT))
        std::cout &lt;&lt; "    发生 FE_INEXACT\n";

    std::feclearexcept(FE_ALL_EXCEPT);
    
    std::cout &lt;&lt; "std::lrint(LONG_MIN-2048.0) = "
              &lt;&lt; std::lrint(LONG_MIN - 2048.0) &lt;&lt; '\n';
    if (std::fetestexcept(FE_INVALID))
        std::cout &lt;&lt; "    发生 FE_INVALID\n";
}
|p=true
|output=
就近舍入（在中点舍入到偶数）：
  rint(+2.3) = 2
  rint(+2.5) = 2
  rint(+3.5) = 4
  rint(-2.3) = -2
  rint(-2.5) = -2
  rint(-3.5) = -4
向下舍入：
  rint(+2.3) = 2
  rint(+2.5) = 2
  rint(+3.5) = 4
  rint(-2.3) = -2
  rint(-2.5) = -2
  rint(-3.5) = -4
使用 lrint 向下舍入：
  lrint(+2.3) = 2
  lrint(+2.5) = 2
  lrint(+3.5) = 3
  lrint(-2.3) = -3
  lrint(-2.5) = -3
  lrint(-3.5) = -4
特殊值：
  lrint(-0.0) = 0
  lrint(-Inf) = 0x8000000000000000
std::rint(0.1) = 0
std::lrint(LONG_MIN-2048.0) = 0x8000000000000000
    发生 FE_INVALID
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc trunc}}
{{dsc inc|cpp/numeric/math/dsc nearbyint}}
{{dsc inc|cpp/numeric/fenv/dsc feround}}
{{dsc see c|c/numeric/math/rint}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
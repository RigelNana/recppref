{{cpp/title|cos|cosf|cosl}}
{{cpp/numeric/math/navbar}}
{{cpp/numeric/math/declarations
|family=cos
|param1=num
|constexpr_since=26
|desc=计算 {{c|num}}（以弧度计量）的余弦。
}}

===参数===
{{par begin}}
{{par|num|以弧度表示角的浮点数或整数}}
{{par end}}

===返回值===
如果没有发生错误，那么返回 {{c|num}} 在范围 {{closed range|-1.0|+1.0}} 中的余弦（{{math|cos(num)}}）。

{{rrev|until=c++11|
如果 {{c|num}} 的绝对值很大，那么结果可能拥有少量或完全没有有效数字。
}}

如果发生定义域错误，那么返回值由实现定义（在受支持平台上是 NaN）。

如果发生下溢导致的值域错误，那么返回（舍入后的）正确的结果。

===错误处理===
报告 {{lc|math_errhandling}} 中指定的错误。

如果实现支持 IEEE 浮点数算术（IEC 60559），那么
* 如果实参是 ±0，那么结果是 {{c|1.0}}
* 如果实参是 ±∞，那么返回 NaN 并引发 {{lc|FE_INVALID}}
* 如果实参是 NaN，那么返回 NaN

===注解===
参数是无穷大的情况不被指定为 C 中的定义域错误，但被定义为 [https://pubs.opengroup.org/onlinepubs/9699919799/functions/cos.html POSIX 中的定义域错误]。

{{cpp/numeric/math/additional integer overload note|cos}}

===示例===
{{example
|code=
#include &lt;cerrno&gt;
#include &lt;cfenv&gt;
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;numbers&gt;

// #pragma STDC FENV_ACCESS ON

const double pi = std::numbers::pi; // 在 C++20 前可用 std::acos(-1)

constexpr double your_cos(double x)
{
    double cos{1}, pow{x};
    for (auto fac{1ull}, n{1ull}; n != 19; fac *= ++n, pow *= x)
        if ((n &amp; 1) == 0)
            cos += (n &amp; 2 ? -pow : pow) / fac;
    return cos;
}

int main()
{
    std::cout &lt;&lt; std::setprecision(10) &lt;&lt; std::showpos
              &lt;&lt; "典型用法:\n"
              &lt;&lt; "std::cos(pi/3) = " &lt;&lt; std::cos(pi / 3) &lt;&lt; '\n'
              &lt;&lt; "your cos(pi/3) = " &lt;&lt; your_cos(pi / 3) &lt;&lt; '\n'
              &lt;&lt; "std::cos(pi/2) = " &lt;&lt; std::cos(pi / 2) &lt;&lt; '\n'
              &lt;&lt; "your cos(pi/2) = " &lt;&lt; your_cos(pi / 2) &lt;&lt; '\n'
              &lt;&lt; "std::cos(-3*pi/4) = " &lt;&lt; std::cos(-3 * pi / 4) &lt;&lt; '\n'
              &lt;&lt; "your cos(-3*pi/4) = " &lt;&lt; your_cos(-3 * pi / 4) &lt;&lt; '\n'
              &lt;&lt; "特殊值:\n"
              &lt;&lt; "std::cos(+0) = " &lt;&lt; std::cos(0.0) &lt;&lt; '\n'
              &lt;&lt; "std::cos(-0) = " &lt;&lt; std::cos(-0.0) &lt;&lt; '\n';

    // 错误处理
    std::feclearexcept(FE_ALL_EXCEPT);
    
    std::cout &lt;&lt; "cos(INFINITY) = " &lt;&lt; std::cos(INFINITY) &lt;&lt; '\n';
    if (std::fetestexcept(FE_INVALID))
        std::cout &lt;&lt; "    发生 FE_INVALID\n";
}
|p=true
|output=
典型用法:
std::cos(pi/3) = +0.5
your cos(pi/3) = +0.5
std::cos(pi/2) = +6.123233996e-17
your cos(pi/2) = -3.373452105e-15
std::cos(-3*pi/4) = -0.7071067812
your cos(-3*pi/4) = -0.7071067812
特殊值:
std::cos(+0) = +1
std::cos(-0) = +1
cos(INFINITY) = -nan
    发生 FE_INVALID
}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/math/dsc sin}}
{{dsc inc|cpp/numeric/math/dsc tan}}
{{dsc inc|cpp/numeric/math/dsc acos}}
{{dsc inc|cpp/numeric/complex/dsc cos}}
{{dsc inc|cpp/numeric/valarray/dsc cos}}
{{dsc see c|c/numeric/math/cos}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pl|pt|ru}}
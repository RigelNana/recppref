{{cpp/title|linear_congruential_engine}}
{{cpp/numeric/random/linear_congruential_engine/navbar}}
{{dcl begin}}
{{dcl header|random}}
{{dcl|since=c++11|
template&lt;
    class UIntType,
    UIntType a,
    UIntType c,
    UIntType m
&gt; class linear_congruential_engine;
}}
{{dcl end}}

{{tt|linear_congruential_engine}} 是基于{{enwiki|Linear congruential generator|线性同余生成器}}的随机数引擎。

===模板形参===
{{par begin}}
{{cpp/numeric/random/param_list|UIntType}}
{{par|a|乘数项}}
{{par|c|增量项}}
{{par|m|模项}}
{{par end}}

当 {{c|m}} 不为零时，如果 {{c|1=a &gt;= m}} 或 {{c|1=c &gt;= m}} 是 {{c|true}}，那么程序非良构。

===生成器属性===
{{tt|linear_congruential_engine}} 的状态的{{rlp|/#随机数引擎|大小}}是 {{c|1}}，它包含一个整数。

实际模数 {{mathjax-or|\(\scriptsize m_0\)|m{{su|b=0}}}} 定义如下：
* 如果 {{c|m}} 不为零，那么 {{mathjax-or|\(\scriptsize m_0\)|m{{su|b=0}}}} 是 {{c|m}}。
* 如果 {{c|m}} 为零，那么 {{mathjax-or|\(\scriptsize m_0\)|m{{su|b=0}}}} 是 {{c|std::numeric_limits&lt;result_type&gt;::max()}} 的值加上 {{c|1}}（也就是说 {{mathjax-or|\(\scriptsize m_0\)|m{{su|b=0}}}} 不一定能够以 {{tt|result_type}} 表示）。

{{tt|linear_congruential_engine}} 的{{rlp|/#随机数引擎|变换算法}}是 {{mathjax-or|1=\(\scriptsize TA(x_i) = (a \cdot x_i + c)\mod m_0\)|2=TA(x{{su|b=i}}) = (a·x{{su|b=i}}+c) mod m{{su|b=0}}}}。

{{tt|linear_congruential_engine}} 的{{rlp|/#随机数引擎|生成算法}}是 {{mathjax-or|1=\(\scriptsize GA(x_i) = (a \cdot x_i + c)\mod m_0\)|2=GA(x{{su|b=i}}) = (a·x{{su|b=i}}+c) mod m{{su|b=0}}}}。

以当前状态生成的伪随机数也是后继状态本身。

===预定义特化===
下列特化定义了两种常用参数集的随机数引擎：
{{dsc begin}}
{{dsc header|random}}
{{dsc hitem|类型|定义}}
{{dsc inc|cpp/numeric/random/dsc minstd_rand0}}
{{dsc inc|cpp/numeric/random/dsc minstd_rand}}
{{dsc end}}

===嵌套类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|result_type}}|{{tt|UIntType}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} multiplier|{{c|a}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} increment|{{c|c}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} modulus|{{c|m}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} default_seed|{{c|1u}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc h2|构造与播种}}
{{dsc inc|cpp/numeric/random/engine/dsc constructor|linear_congruential_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc seed|linear_congruential_engine}}

{{dsc h2|生成}}
{{dsc inc|cpp/numeric/random/engine/dsc operator()|linear_congruential_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc discard|linear_congruential_engine}}

{{dsc h2|特征}}
{{dsc inc|cpp/numeric/random/engine/dsc min|linear_congruential_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc max|linear_congruential_engine}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/engine/dsc operator cmp|linear_congruential_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc operator ltltgtgt|linear_congruential_engine}}
{{dsc end}}

===示例===
{{example}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
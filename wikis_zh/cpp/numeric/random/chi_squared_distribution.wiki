{{cpp/title|chi_squared_distribution}}
{{cpp/numeric/random/chi_squared_distribution/navbar}}
{{ddcl|header=random|since=c++11|1=
template&lt; class RealType = double &gt;
class chi_squared_distribution;
}}

{{tt|chi_squared_distribution}} 产生随机数 {{mathjax-or|\(\small x&gt;0\)|x&gt;0}}，服从 {{enwiki|Chi-squared distribution|χ&lt;sup&gt;2&lt;/sup&gt; 分布}}：

:{{mathjax-or|1=\({\small f(x;n) = }\frac{x^{(n/2)-1}\exp{(-x/2)} }{\Gamma{(n/2)}2^{n/2} }\)|2=f(x;n) = {{mfrac||x{{su|p=(n/2)-1}} {{mexp|-x/2}}|Γ(n/2) 2{{su|p=n/2}}}}}}

{{mathjax-or|\(\small\Gamma\)|Γ}} 为 {{enwiki|Gamma function|Γ 函数}}（参阅 {{lc|std::tgamma}}）而 {{mathjax-or|\(\small n\)|n}} 为{{enwiki|Degrees_of_freedom_(statistics)|自由度}}（默认为 1）。

{{ttt|std::chi_squared_distribution}} 满足{{named req|RandomNumberDistribution}}的所有要求。

===模板形参===
{{par begin}}
{{cpp/numeric/random/param_list|RealType}}
{{par end}}

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|result_type}} {{mark c++11}}|{{co|RealType}}}}
{{cpp/numeric/random/param_type}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc constructor|chi_squared_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc reset|chi_squared_distribution}}

{{dsc h2|生成}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator()|chi_squared_distribution}}

{{dsc h2|特征}}
{{dsc inc|cpp/numeric/random/chi_squared_distribution/dsc n}}
{{dsc inc|cpp/numeric/random/distribution/dsc param|chi_squared_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc min|chi_squared_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc max|chi_squared_distribution}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_cmp|chi_squared_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_ltltgtgt|chi_squared_distribution}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;random&gt;
#include &lt;vector&gt;

{{cpp/numeric/draw_vbars}}

int main()
{
    std::random_device rd{};
    std::mt19937 gen{rd()};

    auto χ2 = [&amp;gen](const float dof)
    {
        std::chi_squared_distribution&lt;float&gt; d{dof /* n */};

        const int norm = 1'00'00;
        const float cutoff = 0.002f;

        std::map&lt;int, int&gt; hist{};
        for (int n = 0; n != norm; ++n)
            ++hist[std::round(d(gen))];

        std::vector&lt;float&gt; bars;
        std::vector&lt;int&gt; indices;
        for (auto const&amp; [n, p] : hist)
            if (float x = p * (1.0 / norm); cutoff &lt; x)
            {
                bars.push_back(x);
                indices.push_back(n);
            }

        std::cout &lt;&lt; "dof = " &lt;&lt; dof &lt;&lt; ":\n";

        for (draw_vbars&lt;4, 3&gt;(bars); int n : indices)
            std::cout &lt;&lt; std::setw(2) &lt;&lt; n &lt;&lt; "  ";
        std::cout &lt;&lt; "\n\n";
    };

    for (float dof : {1.f, 2.f, 3.f, 4.f, 6.f, 9.f})
        χ2(dof);
}
|p=true
|output=&lt;nowiki/&gt;
dof = 1:
███                                 ┬ 0.5271
███                                 │
███ ███                             │
███ ███ ▇▇▇ ▃▃▃ ▂▂▂ ▁▁▁ ▁▁▁ ▁▁▁ ▁▁▁ ┴ 0.003
 0   1   2   3   4   5   6   7   8

dof = 2:
    ███                                     ┬ 0.3169
▆▆▆ ███ ▃▃▃                                 │
███ ███ ███ ▄▄▄                             │
███ ███ ███ ███ ▇▇▇ ▄▄▄ ▃▃▃ ▂▂▂ ▁▁▁ ▁▁▁ ▁▁▁ ┴ 0.004
 0   1   2   3   4   5   6   7   8   9  10

dof = 3:
    ███ ▃▃▃                                         ┬ 0.2439
    ███ ███ ▄▄▄                                     │
▃▃▃ ███ ███ ███ ▇▇▇ ▁▁▁                             │
███ ███ ███ ███ ███ ███ ▆▆▆ ▄▄▄ ▃▃▃ ▂▂▂ ▁▁▁ ▁▁▁ ▁▁▁ ┴ 0.0033
 0   1   2   3   4   5   6   7   8   9  10  11  12

dof = 4:
    ▂▂▂ ███ ▃▃▃                                                 ┬ 0.1864
    ███ ███ ███ ███ ▂▂▂                                         │
    ███ ███ ███ ███ ███ ▅▅▅ ▁▁▁                                 │
▅▅▅ ███ ███ ███ ███ ███ ███ ███ ▆▆▆ ▄▄▄ ▃▃▃ ▂▂▂ ▂▂▂ ▁▁▁ ▁▁▁ ▁▁▁ ┴ 0.0026
 0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15

dof = 6:
            ▅▅▅ ▇▇▇ ███ ▂▂▂                                                 ┬ 0.1351
        ▅▅▅ ███ ███ ███ ███ ▇▇▇ ▁▁▁                                         │
    ▁▁▁ ███ ███ ███ ███ ███ ███ ███ ▅▅▅ ▂▂▂                                 │
▁▁▁ ███ ███ ███ ███ ███ ███ ███ ███ ███ ███ ███ ▅▅▅ ▄▄▄ ▃▃▃ ▂▂▂ ▁▁▁ ▁▁▁ ▁▁▁ ┴ 0.0031
 0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18

dof = 9:
            ▅▅▅ ▇▇▇ ███ ███ ▄▄▄ ▂▂▂                                                 ┬ 0.1044
        ▃▃▃ ███ ███ ███ ███ ███ ███ ▅▅▅ ▁▁▁                                         │
    ▄▄▄ ███ ███ ███ ███ ███ ███ ███ ███ ███ ▆▆▆ ▃▃▃                                 │
▄▄▄ ███ ███ ███ ███ ███ ███ ███ ███ ███ ███ ███ ███ ███ ▆▆▆ ▄▄▄ ▃▃▃ ▂▂▂ ▁▁▁ ▁▁▁ ▁▁▁ ┴ 0.0034
 2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22

}}

===外部链接===
{{elink begin}}
{{elink|[https://mathworld.wolfram.com/Chi-SquaredDistribution.html Weisstein, Eric W. “Χ&lt;sup&gt;2&lt;/sup&gt; 分布”] 来自 MathWorld &amp;mdash; A Wolfram Web Resource。}}
{{elink|{{enwiki|Chi-squared distribution|χ&lt;sup&gt;2&lt;/sup&gt; 分布}} &amp;mdash; From Wikipedia。}}
{{elink end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|uniform_real_distribution}}
{{cpp/numeric/random/uniform_real_distribution/navbar}}
{{ddcl|header=random|since=c++11|1=
template&lt; class RealType = double &gt;
class uniform_real_distribution;
}}

产生均匀分布在区间 {{mathjax-or|\(\small [a, b)\)|[a, b)}} 上的随机浮点值 {{mathjax-or|\(\small x\)|x}}，分布按照概率密度函数：

:{{mathjax-or|1=\({\small P(x{{!}}a,b) =} \frac{1}{b-a}\)|2=P(x{{!}}a,b) = {{mfrac|1|b − a}}}}。

{{tt|std::uniform_real_distribution}} 满足{{named req|RandomNumberDistribution}}的所有要求。

===模板形参===
{{par begin}}
{{cpp/numeric/random/param_list|RealType}}
{{par end}}

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|result_type}}{{mark c++11}}|{{c|RealType}}}}
{{cpp/numeric/random/param_type}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc constructor|uniform_real_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc reset|uniform_real_distribution}}

{{dsc h2|生成}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator()|uniform_real_distribution}}

{{dsc h2|特征}}
{{dsc inc|cpp/numeric/random/distribution/dsc params|uniform_real_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc param|uniform_real_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc min|uniform_real_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc max|uniform_real_distribution}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_cmp|uniform_real_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_ltltgtgt|uniform_real_distribution}}
{{dsc end}}

===注解===
从这个分布创建闭区间 {{mathjax-or|\(\small[a, b]\)|[a, b]}} 上的分布较困难。由于舍入误差，以 {{c|std::nextafter(b, std::numeric_limits&lt;RealType&gt;::max())}} 为第二参数并不总是有效。

多数既存实现都有一个漏洞，它们有时会返回 {{mathjax-or|\(\small b\)|b}}（[https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63176 GCC #63176] [https://llvm.org/bugs/show_bug.cgi?id=18767 LLVM #18767] [https://github.com/microsoft/STL/issues/1074 MSVC STL #1074]）。本来以为此为 {{tt|RealType}} 是 {{c|float}} 时由 {{lwg|2524}} 所导致，但已经发现[https://hal.science/hal-03282794v4/file/rand-in-range.pdf 二者都不是触发这个 BUG 的必要条件]。&lt;!--  
https://stackoverflow.com/questions/25668600/is-1-0-a-valid-random-number --&gt;

===示例===
{{example
|打印 10 个 1 与 2 间的随机数
|code=
#include &lt;iostream&gt;
#include &lt;random&gt;

int main()
{
    std::random_device rd;  // 将用于获得随机数引擎的种子
    std::mt19937 gen(rd()); // 以 rd() 播种的标准 mersenne_twister_engine
    std::uniform_real_distribution&lt;&gt; dis(1.0, 2.0);
    for (int n = 0; n &lt; 10; ++n)
        // 用 dis 变换 gen 生成的随机 unsigned int 为 [1, 2) 中的 double
        // 每次调用 dis(gen) 都生成新的随机 double
        std::cout &lt;&lt; dis(gen) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}
|p=true
|output=
1.80829 1.15391 1.18483 1.38969 1.36094 1.0648 1.97798 1.27984 1.68261 1.57326 
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
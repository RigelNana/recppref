{{cpp/title|mersenne_twister_engine}}
{{cpp/numeric/random/mersenne_twister_engine/navbar}}
{{dcl begin}}
{{dcl header|random}}
{{dcl|since=c++11|1=
template&lt;
    class UIntType, std::size_t w, std::size_t n, std::size_t m, std::size_t r,
    UIntType a, std::size_t u, UIntType d, std::size_t s,
    UIntType b, std::size_t t, UIntType c, std::size_t l, UIntType f
&gt; class mersenne_twister_engine;
}}
{{dcl end}}

{{tt|mersenne_twister_engine}} 是基于{{enwiki|Mersenne_twister|梅森缠绕器}}算法的随机数生成器。它产生高质量但非密码学安全的，{{tt|UIntType}} 类型的区间 {{mathjax-or|\(\scriptsize {[0,2^w)}\)|[0, 2{{su|p=w}})}} 上的无符号整数随机数。

===模板形参===
{{par begin}}
{{cpp/numeric/random/param_list|UIntType}}
{{par|w|确定引擎生成的值的范围的2的幂}}
{{par|n|递推度}}
{{par|m|中间词，即定义状态的递推关系中使用的偏移}}
{{par|r|低位掩码的位数，也被称为缠绕值}}
{{par|a|条件性异或掩码，即有理范式缠绕矩阵的系数}}
{{par|u, d, s, b, t, c, l|位扰乱（调和）矩阵的第一个到第七个组分}}
{{par|f|初始化乘数}}
{{par end}}

如果违背了以下任何限制，那么程序非良构：
* {{c|m}} 在范围 {{closed range|1|n}} 中。
* 以下表达式都是 {{c|true}}：
:* {{c|1=w &gt;= 3}}
:* {{c|1=w &gt;= r}}
:* {{c|1=w &gt;= u}}
:* {{c|1=w &gt;= s}}
:* {{c|1=w &gt;= t}}
:* {{c|1=w &gt;= l}}
:* {{c|1=w &lt;= std::numeric_limits&lt;UIntType&gt;::digits}}
* 给定 {{c|(1u &lt;&lt; w) - 1u}} 为 {{c|w1}}，以下表达式都是 {{c|true}}：
:* {{c|1=a &lt;= w1}}
:* {{c|1=b &lt;= w1}}
:* {{c|1=c &lt;= w1}}
:* {{c|1=d &lt;= w1}}
:* {{c|1=f &lt;= w1}}

===生成器属性===
{{tt|mersenne_twister_engine}} 的状态的{{rlp|/#随机数引擎|大小}}是 {{c|n}}，它包含一个包含了 {{c|n}} 个 {{tt|result_type}} 值的序列 {{c|X}}。{{mathjax-or|\(\scriptsize X_j\)|X{{su|b=j}}}} 表示 {{c|X}} 的第 {{mathjax-or|\(\scriptsize j\mod n\)|j mod n}} 个值（从0开始算起）。

给定以下位操作表示：
* {{mathjax-or|\(\scriptsize \mathsf{bitand}\)|bitand}}，内建的[[cpp/language/operator arithmetic#逐位逻辑运算符|逐位与]]。
* {{mathjax-or|\(\scriptsize \mathsf{xor}\)|xor}}，内建的[[cpp/language/operator arithmetic#逐位逻辑运算符|逐位异或]]。
* {{mathjax-or|\(\scriptsize \mathsf{lshift}\)|lshift}}，内建的[[cpp/language/operator arithmetic#移位运算符|向左移位]]。
* {{mathjax-or|\(\scriptsize \mathsf{rshift}\)|rshift}}，内建的[[cpp/language/operator arithmetic#移位运算符|向右移位]]。

{{tt|mersenne_twister_engine}} 的{{rlp|/#随机数引擎|变换算法}}（{{mathjax-or|\(\scriptsize TA(x_i)\)|TA(x{{su|b=i}})}}）定义如下：
# 拼接 {{mathjax-or|\(\scriptsize X_{i-n}\)|X{{su|b=i-n}}}} 的高 {{c|w - r}} 位和 {{mathjax-or|\(\scriptsize X_{i+1-n}\)|X{{su|b=i+1-n}}}} 的低 {{c|r}} 位，得到无符号整数值 {{c|Y}}。
# 设 {{c|y}} 为 {{mathjax-or|\(\scriptsize a \cdot (Y\ \mathsf{bitand}\ 1)\)|a·(Y bitand 1)}}，并且将 {{mathjax-or|\(\scriptsize X_i\)|X{{su|b=i}}}} 设置为 {{mathjax-or|\(\scriptsize X_{i+m−n}\ \mathsf{xor}\ (Y\ \mathsf{rshift}\ 1)\ \mathsf{xor}\ y\)|X{{su|b=i+m−n}} xor (Y rshift 1) xor y}}。

{{tt|mersenne_twister_engine}} 的{{rlp|/#随机数引擎|生成算法}}（{{mathjax-or|\(\scriptsize GA(x_i)\)|GA(x{{su|b=i}})}}）定义如下：
# 设 {{mathjax-or|\(\scriptsize z_1\)|z{{su|b=1}}}} 为 {{mathjax-or|\(\scriptsize X_i\ \mathsf{xor}\ ((X_i\ \mathsf{rshift}\ u)\ \mathsf{bitand}\ d)\)|X{{su|b=i}} xor ((X{{su|b=i}} rshift u) bitand d)}}。
# 设 {{mathjax-or|\(\scriptsize z_2\)|z{{su|b=2}}}} 为 {{mathjax-or|\(\scriptsize z_1\ \mathsf{xor}\ (((z_1\ \mathsf{lshift}\ s)\mod 2^w)\ \mathsf{bitand}\ b)\)|X{{su|b=i}} xor (((X{{su|b=i}} lshift s) mod 2{{su|p=w}}) bitand b)}}。
# 设 {{mathjax-or|\(\scriptsize z_3\)|z{{su|b=3}}}} 为 {{mathjax-or|\(\scriptsize z_2\ \mathsf{xor}\ (((z_2\ \mathsf{lshift}\ t)\mod 2^w)\ \mathsf{bitand}\ c)\)|X{{su|b=i}} xor (((X{{su|b=i}} lshift t) mod 2{{su|p=w}}) bitand c)}}。
# 设 {{mathjax-or|\(\scriptsize z_4\)|z{{su|b=4}}}} 为 {{mathjax-or|\(\scriptsize z_3\ \mathsf{xor}\ (z_3\ \mathsf{rshift}\ l)\)|z{{su|b=3}} xor (z{{su|b=3}} rshift l)}}。
# 以 {{mathjax-or|\(\scriptsize z_4\)|z{{su|b=4}}}} 作为生成结果（即 {{mathjax-or|1=\(\scriptsize GA(x_i)=z_4\)|2=GA(x{{su|b=i}})=z{{su|b=4}}}}）。

===预定义特化===
下列特化定义了两种常用参数集的随机数引擎：
{{dsc begin}}
{{dsc header|random}}
{{dsc hitem|类型|定义}}
{{dsc inc|cpp/numeric/random/dsc mt19937}}
{{dsc inc|cpp/numeric/random/dsc mt19937_64}}
{{dsc end}}

===嵌套类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|result_type}}|{{tt|UIntType}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr size_t}} word_size|{{c|w}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr size_t}} state_size|{{c|n}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr size_t}} shift_size|{{c|m}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr size_t}} mask_bits|{{c|r}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} xor_mask|{{c|a}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr size_t}} tempering_u|{{c|u}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} tempering_d|{{c|d}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr size_t}} tempering_s|{{c|s}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} tempering_b|{{c|b}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr size_t}} tempering_t|{{c|t}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} tempering_c|{{c|c}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr size_t}} tempering_l|{{c|l}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} initialization_multiplier|{{c|f}}}}
{{dsc mem sconst|nolink=true|{{dsc small|constexpr UIntType}} default_seed|{{c|5489u}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc h2|构造与播种}}
{{dsc inc|cpp/numeric/random/engine/dsc constructor|mersenne_twister_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc seed|mersenne_twister_engine}}

{{dsc h2|生成}}
{{dsc inc|cpp/numeric/random/engine/dsc operator()|mersenne_twister_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc discard|mersenne_twister_engine}}

{{dsc h2|特征}}
{{dsc inc|cpp/numeric/random/engine/dsc min|mersenne_twister_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc max|mersenne_twister_engine}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/engine/dsc operator_cmp|mersenne_twister_engine}}
{{dsc inc|cpp/numeric/random/engine/dsc operator_ltltgtgt|mersenne_twister_engine}}
{{dsc end}}

===示例===
{{example}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/numeric/random/mersenne_twister_engine/title|{{br}}mersenne_twister_engine}}
{{cpp/numeric/random/mersenne_twister_engine/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|
mersenne_twister_engine() : mersenne_twister_engine(default_seed) {}
}}
{{dcl|num=2|since=c++11|
explicit mersenne_twister_engine( result_type value );
}}
{{dcl|num=3|since=c++11|
template&lt; class SeedSeq &gt;
explicit mersenne_twister_engine( SeedSeq&amp; seq );
}}
{{dcl|num=4|since=c++11|notes={{mark implicit}}|
mersenne_twister_engine( const mersenne_twister_engine&amp; other );
}}
{{dcl end}}

构造伪随机数引擎。

@1@ 默认构造函数。
* 如果默认构造的引擎具有 {{tt|std::mt19937}} 类型，那么对它连续调用 10000 次产生的值是 {{c|4123659995}}。
* 如果默认构造的引擎具有 {{tt|std::mt19937_64}} 类型，那么对它连续调用 10000 次产生的值是 {{c|9981545732273789042}}。

@2@ 以种子值 {{c|value}} 构造引擎。给定 {{mathjax-or|\(\scriptsize 2^w \)|2{{su|p=w}}}} 为 {{c|p}}，引擎的初始{{rlp|/#生成器属性|状态}}通过以下方式确定：
# 将 {{mathjax-or|\(\scriptsize X_{-n} \)|X{{su|b=-n}}}} 设为 {{c|value % p}}。
# 对于 {{closed range|i - n|-1}} 中的每个整数 {{c|i}}，将 {{mathjax-or|\(\scriptsize X_i \)|X{{su|b=i}}}} 设为 {{mathjax-or|\(\scriptsize [f \cdot (X_{i-1}\ \mathsf{xor}\ (X_{i-1}\ \mathsf{rshift}\ (w-2)))+i \mod n] \mod p \)|[f·(X{{su|b=i-1}} xor (X{{su|b=i-1}} rshift (w-2)))+i mod n] mod p}}，其中 {{mathjax-or|\(\scriptsize \mathsf{xor} \)|xor}} 和 {{mathjax-or|\(\scriptsize \mathsf{rshift} \)|rshift}} 分别表示内建的[[cpp/language/operator arithmetic#逐位逻辑运算符|逐位异或]]和[[cpp/language/operator arithmetic#移位运算符|向右移位]]。

@3@ 以种子序列 {{c|seq}} 构造引擎。给定 {{c|std::size_t(w / 32) + 1}} 为 {{c|k}}，引擎的初始{{rlp|/#生成器属性|状态}}通过以下方式确定：
# 创建一个长度是 {{c|n * k}} 的虚设数组对象。
# 调用 {{c|seq.generate(a + 0, a + n * k)}}。
# 对于 {{closed range|-n|-1}} 中的每个整数 {{c|i}}，将 {{mathjax-or|\(\scriptsize X_{i} \)|X{{su|b=i}}}} 设为 {{mathjax-or|1=\(\scriptsize (\sum^{k-1}_{j=0} a_{k(i+n)+j} \cdot 2^{32j}) \mod 2^w \)|2=(∑{{su|p=k-1|b=j=0}} a{{su|b=k(i+n)+j}}·2{{su|p=32j}}) mod 2{{su|p=w}}}}。
# 如果 {{mathjax-or|\(\scriptsize X_{-n} \)|X{{su|b=-n}}}} 的最高 {{c|w − r}} 位为零，并且其他的结果 {{mathjax-or|\(\scriptsize X_{i} \)|X{{su|b=i}}}} 也都是 {{c|0}}，那么将 {{mathjax-or|\(\scriptsize X_{-n} \)|X{{su|b=-n}}}} 改为 {{mathjax-or|\(\scriptsize 2^{w-1} \)|2{{su|p=w-1}}}}。
@@ {{cpp/enable if| {{tt|SeedSeq}} 满足{{named req|SeedSequence}}的要求}}。

@4@ 复制构造函数。构造完成时 {{c|1=*this == other}} 是 {{c|true}}。

===参数===
{{par begin}}
{{par|value|用于内部状态初始化的种子值}}
{{par|seq|用于内部状态初始化的种子序列}}
{{par end}}

===复杂度===
@1,2@ {{mathjax-or|\(\scriptsize O(n) \)|O(n)}}。
@3@ 与 {{tt|seq.generate}} 调用的复杂度相同。
@4@ {{mathjax-or|\(\scriptsize O(n) \)|O(n)}}。

===异常===
@3@ 如果 {{tt|SeedSeq}} 不是 {{lc|std::seed_seq}}，那么就会抛出 {{tt|seq.generate}} 调用抛出的异常。

===示例===
{{example
|{{todo|demos for overloads (2-4) required}}
|code=
#include &lt;cassert&gt;
#include &lt;random&gt;
 
int main()
{
    std::mt19937 gen32; // 重载 (1)
    std::mt19937_64 gen64; // 重载 (1)
    gen32.discard(10000 - 1);
    gen64.discard(10000 - 1);
    assert(gen32() == 4123659995);
    assert(gen64() == 9981545732273789042ull);
}
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2181|std=C++11|before=即使 {{tt|seq.generate}} 调用抛出了异常，重载 {{vl|3}} 也不会抛出异常|after=会传播该异常}}
{{dr list item|paper=P0935R0|std=C++11|before=默认构造函数是显式的|after=改成隐式的}}
{{dr list end}}

===参阅===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/engine/dsc seed|mersenne_twister_engine}}
{{dsc end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
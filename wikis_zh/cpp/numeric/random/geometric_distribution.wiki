{{cpp/title|geometric_distribution}}
{{cpp/numeric/random/geometric_distribution/navbar}}
{{ddcl|header=random|since=c++11|1=
template&lt; class IntType = int &gt;
class geometric_distribution;
}}

生成随机非负整数值 {{math|i}}，分布按照离散概率函数：

:{{mathjax-or|1=\(P(i{{!}}p) = p \cdot (1-p)^i\)|2=P(i{{!}}p) = p · (1 − p){{su|p=i}}}}

该值表示获得单次成功所需的是/否试验（每次以 {{math|p}} 概率成功）次数。

{{c|std::geometric_distribution&lt;&gt;(p)}} 准确等价于 {{c|std::negative_binomial_distribution&lt;&gt;(1, p)}}。它亦为 {{lc|std::exponential_distribution}} 的离散对应版本。

{{tt|std::geometric_distribution}} 满足{{named req|RandomNumberDistribution}}。

===模板形参===
{{par begin}}
{{cpp/numeric/random/param_list|IntType}}
{{par end}}

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|result_type}} {{mark c++11}}|{{co|IntType}}}}
{{cpp/numeric/random/param_type}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc constructor|geometric_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc reset|geometric_distribution}}

{{dsc h2|生成}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator()|geometric_distribution}}

{{dsc h2|特征}}
{{dsc inc|cpp/numeric/random/geometric_distribution/dsc p}}
{{dsc inc|cpp/numeric/random/distribution/dsc param|geometric_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc min|geometric_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc max|geometric_distribution}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_cmp|geometric_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_ltltgtgt|geometric_distribution}}
{{dsc end}}

===示例===
{{example
|{{c|std::geometric_distribution&lt;&gt;(0.5)}} 为默认，并表示获取正面所要求的硬币投掷次数
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;random&gt;
#include &lt;string&gt;

int main()
{
    std::random_device rd;
    std::mt19937 gen(rd());

    std::geometric_distribution&lt;&gt; d;
        // 同 std::negative_binomial_distribution&lt;&gt; d(1, 0.5);

    std::map&lt;int, int&gt; hist;
    for (int n = 0; n != 10000; ++n)
        ++hist[d(gen)];

    for (auto [x, y] : hist)
    {
        const char c = x &lt; 10 ? x + '0' : x - 10 + 'a';
        std::cout &lt;&lt; c &lt;&lt; ' ' &lt;&lt; std::string(y / 100, '*') &lt;&lt; '\n';
    }
}
|p=true
|output=
0 *************************************************
1 *************************
2 ************
3 ******
4 **
5 *
6
7
8
9
}}

===外部链接===
{{eli|[https://mathworld.wolfram.com/GeometricDistribution.html Weisstein, Eric W. “几何分布。”]来自 MathWorld--A Wolfram Web Resource。}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
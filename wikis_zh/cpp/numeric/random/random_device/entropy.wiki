{{cpp/numeric/random/random_device/title|entropy}}
{{cpp/numeric/random/random_device/navbar}}
{{ddcl|since=c++11|1=
double entropy() const noexcept;
}}

获得随机数设备熵的估计，它是 {{math|0}} 与 {{math|log{{su|b=2}}(max()+1)}}（等于 {{c|std::numeric_limits&lt;unsigned int&gt;::digits}}）之间的浮点数。若设备拥有 {{math|n}} 个状态，而其概率各为 {{math|P{{su|b=0}},...,P{{su|b=n-1}}}}，则设备熵 {{math|S}} 定义为

{{math|1=S = −∑{{su|b=i=0|p=n-1}} P{{su|b=i}}log(P{{su|b=i}})}}

确定的随机数生成器（例如伪随机数生成器）拥有零熵。

===返回值===
设备熵的值，或若不可应用则为零。

===注解===
此函数在一些标准库中未完全实现。例如，版本 12 前的 [https://github.com/llvm-mirror/libcxx/blob/master/src/random.cpp#L174 LLVM libc++] 始终返回零，即使设备是非确定的（对于 libstdc++，见 [https://gcc.gnu.org/bugzilla/show_bug.cgi?id=67578 bug 67578]）。与之相比，Microsoft Visual C++ 实现始终返回 {{c|32}}，而 [https://github.com/boostorg/random/blob/master/src/random_device.cpp#L242 boost.random] 返回 {{c|10}}。

Linux 内核设备 {{tt|/dev/urandom}} 的熵可用 [https://man7.org/linux/man-pages/man4/random.4.html {{tt|ioctl RNDGETENTCNT}}] 获得—— [https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/src/c%2B%2B11/random.cc#L188 GNU libstdc++] 从版本 8.1 起将它用于 {{tt|std::random_device::entropy()}}。

===示例===
{{example
|实现之一上的示例输出
|code=
#include &lt;iostream&gt;
#include &lt;random&gt;

int main()
{
    std::random_device rd;
    std::cout &lt;&lt; rd.entropy() &lt;&lt; '\n';
}
|p=true
|output=
32
}}

{{langlinks|en|ja}}
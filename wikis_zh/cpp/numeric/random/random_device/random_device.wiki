{{cpp/numeric/random/random_device/title|random_device}}
{{cpp/numeric/random/random_device/navbar}}
{{dcl begin}}
{{dcl|num=1|since=c++11|1=
random_device() : random_device( /* 由实现定义 */ ) {} 
}}
{{dcl|num=2|since=c++11|1=
explicit random_device( const std::string&amp; token );
}}
{{dcl|num=3|since=c++11|1=
random_device( const random_device&amp; ) = delete;
}}
{{dcl end}}

@1@ 以实现定义的 {{tt|token}} 默认构造新的 {{lc|std::random_device}} 对象。
@2@ 构造新的 {{lc|std::random_device}} 对象，若提供则以实现定义行为利用实参 {{c|token}}。
@3@ 复制构造函数被弃置：{{tt|std::random_device}} 不可复制或移动。

===异常===
失败时抛出从 {{lc|std::exception}} 派生的实现定义异常。

===注解===
[https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/src/c%2B%2B11/random.cc libstdc++] 中的实现期待 {{tt|token}} 指名随机字节的源。可能的记号值包括 {{c|"default"}}、{{c|"rand_s"}}、{{c|"rdseed"}}、{{c|"rdrand"}}、{{c|"rdrnd"}}、{{c|"/dev/urandom"}}、{{c|"/dev/random"}}、{{c|"mt19937"}} 和指定 mt19937 引擎的种子的整数字符串。（除 {{c|"default"}} 之外的记号仅在某些目标上可用。）&lt;!-- 这在 https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#iso.2011.specific 中归档，但它没有更好的矛 --&gt;

[https://llvm.org/viewvc/llvm-project/libcxx/trunk/src/random.cpp?view=markup libc++] 中的实现在配置以字符设备为源时，期待 {{tt|token}} 为在从它读取时产生随机数的字符设备的名字；否则它期待 {{tt|token}} 为 {{c|"/dev/urandom"}}。

若提供不支持的记号则 libstdc++ 与 libc++ 均抛出异常。[https://github.com/microsoft/STL/blob/c10ae01b4d9508eed9d5f059a120ee7223b6ac12/stl/inc/random#L5026 Microsoft STL] 完全忽略记号。

===示例===
{{example
|演示 Linux 上 {{tt|std::random_device}} 的常见可用类型
|code=
#include &lt;iostream&gt;
#include &lt;random&gt;

void demo(std::random_device&amp;&amp; rd)
{
    static std::uniform_int_distribution&lt;int&gt; d(0, 9);
    for (int n = 0; n != 10; ++n)
        std::cout &lt;&lt; d(rd) &lt;&lt; ' ';
    std::cout &lt;&lt; '\n';
}

int main()
{
    // 注意：如何利用所提供的 token 是由实现定义的！

    // Linux 上 random_device 的默认 token 通常为 /dev/urandom
    demo(std::random_device {});

    // 请求 /dev/random，当熵为空时阻塞
    // libstdc++ 上可用，msvc++ 忽略，libc++ 可能抛异常（2022 年十一月）
    demo(std::random_device {"/dev/random"});

    // 请求非阻塞的 /dev/urandom，保证不使用 RDRAND
    // libstdc++ 和 libc++ 上可用，msvc++ 忽略（2022 年十一月）
    demo(std::random_device {"/dev/urandom"});

    // 请求 "hw"，将使用基于硬件的随机生成，如 rdrand
    // libstdc++ 上可用，msvc++ 忽略，libc++ 抛异常（2022 年十一月）
    demo(std::random_device {"hw"});
}
|p=true
|output=
9 5 2 7 5 9 4 1 0 7 
4 7 6 5 1 5 5 1 8 6 
3 3 6 1 4 1 4 1 0 2 
4 6 3 9 1 9 4 0 9 3 
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|paper=P0935R0|std=C++11|before=默认构造函数为 explicit|after=使之为隐式}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
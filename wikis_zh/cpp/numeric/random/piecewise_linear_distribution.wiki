{{cpp/title|piecewise_linear_distribution}}
{{cpp/numeric/random/piecewise_linear_distribution/navbar}}
{{ddcl|header=random|since=c++11|1=
template&lt; class RealType = double &gt;
class piecewise_linear_distribution;
}}

{{tt|std::piecewise_linear_distribution}} 产生随机浮点数，分布服在数个子区间 {{mathjax-or|\(\small{[b_i, b_{i+1})}\)|[b{{su|b=i}}, b{{su|b=i+1}})}} 的每一者上的线性概率密度函数。分布满足在每个区间边界上的概率密度恰为预定义值 {{mathjax-or|\(\small{p_i}\)|p{{su|b=i}}}}。

任何 {{mathjax-or|\(\small{ b_i \le x &lt; b_{i+1} }\)|b{{su|b=i}}≤x&lt;b{{su|b=i+1}}}} 中的概率密度为 {{mathjax-or|\(\small{p_i\frac{b_{i+1}-x}{b_{i+1}-b_i} + p_{i+1}\frac{x-b_i}{b_{i+1}-b_i} }\)|{{mfrac|p{{su|b=i}}|b{{su|b=i+1}}-x|b{{su|b=i+1}}-b{{su|b=i}}}} + {{mfrac|p{{su|b=i+1}}|x-b{{su|b=i}}|b{{su|b=i+1}}-b{{su|b=i}}}}}}，其中在区间边界 {{mathjax-or|\(\small{p_k}\)|p{{su|b=k}}}} 上的概率密度计算为 {{mathjax-or|\(\small{w_k/S}\)|w{{su|b=k}}/S}}，其中 {{mathjax-or|\(\small{S}\)|S}} 为所有 {{mathjax-or|\(\small{\frac{1}{2}(w_k + w_{k+1})(b_{k+1} - b_k)}\)|{{mfrac||1|2}}(w{{su|b=k}}+w{{su|b=k+1}})(b{{su|b=k+1}}−b{{su|b=k}})}} 之和。

区间边界 {{mathjax-or|\(\small{b_i}\)|b{{su|b=i}}}} 的集合和边界上权重 {{mathjax-or|\(\small{w_i}\)|w{{su|b=i}}}} 的集合是此分布的参数。

{{tt|std::piecewise_linear_distribution}} 满足{{named req|RandomNumberDistribution}}的所有要求。

===模板形参===
{{par begin}}
{{cpp/numeric/random/param_list|RealType}}
{{par end}}

===模板类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|result_type}} {{mark c++11}}|{{co|RealType}}}}
{{cpp/numeric/random/param_type}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc constructor|piecewise_linear_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc reset|piecewise_linear_distribution}}

{{dsc h2|生成}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator()|piecewise_linear_distribution}}

{{dsc h2|特征}}
{{dsc inc|cpp/numeric/random/piecewise_linear_distribution/dsc params}}
{{dsc inc|cpp/numeric/random/distribution/dsc param|piecewise_linear_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc min|piecewise_linear_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc max|piecewise_linear_distribution}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_cmp|piecewise_linear_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_ltltgtgt|piecewise_linear_distribution}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;random&gt;
#include &lt;string&gt;

int main()
{
    std::random_device rd;
    std::mt19937 gen(rd());
    // 从 0 到 5 增加概率
    // 从 5 到 10 保持水平
    // 从 10 到 15 以相同速率下降
    std::vector&lt;double&gt; i{0, 5, 10, 15};
    std::vector&lt;double&gt; w{0, 1, 1, 0};
    std::piecewise_linear_distribution&lt;&gt; d{i.begin(), i.end(), w.begin()};
 
    std::map&lt;int, int&gt; hist;
    for (int n{}; n &lt; 1e4; ++n)
        ++hist[d(gen)];

    for (auto [x, y] : hist)
        std::cout &lt;&lt; std::setw(2) &lt;&lt; std::setfill('0') &lt;&lt; x
                  &lt;&lt; ' ' &lt;&lt; std::string(y / 100, '*') &lt;&lt; '\n';
}
|p=true
|output=
00 *
01 ***
02 ****
03 ******
04 *********
05 *********
06 *********
07 **********
08 *********
09 **********
10 *********
11 *******
12 ****
13 ***
14 *
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
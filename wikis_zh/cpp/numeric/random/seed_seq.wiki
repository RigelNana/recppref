{{cpp/title|seed_seq}}
{{cpp/numeric/random/seed_seq/navbar}}
{{ddcl|header=random|since=c++11|
class seed_seq;
}}

{{tt|std::seed_seq}} 消耗一系列整数值数据，并基于消耗的数据生成请求数量的 32 位无符号整数值。产生的值分布在整个 32 位值域上，即使消耗的值接近也是如此。

它提供了一种以给定小种子或分布凄惨的初始种子序列，播种大量随机数引擎或播种要求大量熵的随机数的方法。

{{ttt|std::seed_seq}} 满足{{named req|SeedSequence}}的要求。

===嵌套类型===
{{dsc begin}}
{{dsc hitem|类型|定义}}
{{dsc|{{tt|result_type}}|{{lc|std::uint_least32_t}}}}
{{dsc end}}

===数据成员===
{{dsc begin}}
{{dsc hitem|成员|描述}}
{{dsc expos mem obj|spec={{c/core|std::vector&lt;result_type&gt;}}|v|id=v|底层种子序列}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc mem ctor|cpp/numeric/random/seed_seq/seed_seq|构造并播种 {{tt|std::seed_seq}} 对象}}
{{dsc mem fun|nolink=true|operator{{=}}|notes={{cmark|deleted}}|{{tt|std::seed_seq}} 不可赋值}}
{{dsc mem fun|cpp/numeric/random/seed_seq/generate|计算消除偏差的均匀分布的 32 位值}}
{{dsc mem fun|cpp/numeric/random/seed_seq/size|获得存储的 32 位值的数量}}
{{dsc mem fun|cpp/numeric/random/seed_seq/param|复制所有存储的 32 位值}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;cstdint&gt;
#include &lt;iostream&gt;
#include &lt;random&gt;

int main()
{
    std::seed_seq seq{1, 2, 3, 4, 5};
    std::vector&lt;std::uint32_t&gt; seeds(10);
    seq.generate(seeds.begin(), seeds.end());
    for (std::uint32_t n : seeds)
        std::cout &lt;&lt; n &lt;&lt; '\n';
}
|p=true
|output=
4204997637
4246533866
1856049002
1129615051
690460811
1075771511
46783058
3904109078
1534123438
1495905678
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}

{{cpp/numeric/random/seed_seq/title|seed_seq}}
{{cpp/numeric/random/seed_seq/navbar}}
{{dcl begin}}
{{dcla|num=1|since=c++11|
seed_seq() noexcept;
}}
{{dcl|num=2|since=c++11|1=
seed_seq( const seed_seq&amp; ) = delete;
}}
{{dcl|num=3|since=c++11|
template&lt; class InputIt &gt;
seed_seq( InputIt begin, InputIt end );
}}
{{dcla|num=4|since=c++11|
template&lt; class T &gt;
seed_seq( std::initializer_list&lt;T&gt; il );
}}
{{dcl end}}

@1@ 默认构造函数。构造后 {{rlpsi|/#v}} 为空。

@2@ 复制构造函数被弃置：{{tt|std::seed_seq}} 不可复制。

@3@ 从范围 {{range|begin|end}} 的值构造 {{tt|std::seed_seq}}。等价于在默认构造 {{rlpsi|/#v}} 后执行  {{box|{{c/core|1=for (InputIt s = begin; s != end; ++s)}}&lt;br&gt;{{nbspt|4}}{{rlpsi|/#v}}{{sep}}{{c/core|.push_back(modseed(*s));}}}}，其中 {{mathjax-or|1=\(\scriptsize \mathrm{modseed}(x)=x \mod 2^{32} \)|2=mod_seed(x)=x mod 2{{su|p=32}}}}。
@@ 如果 {{c/core|std::iterator_traits&lt;InputIt&gt;::value_type}} 不是整数类型，那么程序非良构。
@@ 如果 {{tt|InputIt}} 不满足{{named req|InputIterator}}的要求，那么行为未定义。

@4@ 等价于 {{c|seed_seq(il.begin(), il.end())}}。此构造函数启用源自种子值列表的[[cpp/language/list initialization|列表初始化]]。
@@ {{cpp/enable_if| {{tt|T}} 是整数类型}}。

===参数===
{{par begin}}
{{par|begin, end|表示初始种子序列的迭代器对}}
{{par|il|初始种子序列}}
{{par end}}

===示例===
{{example
|code=
#include &lt;iterator&gt;
#include &lt;random&gt;
#include &lt;sstream&gt;

int main()
{
    std::seed_seq s1; // 可默认构造
    std::seed_seq s2{1, 2, 3}; // 能用列表初始化
    std::seed_seq s3 = {-1, 0, 1}; // 列表初始化的另一种形式
    int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::seed_seq s4(a, a + 10); // 能用迭代器
    std::istringstream buf("1 2 3 4 5"); 
    std::istream_iterator&lt;int&gt; beg(buf), end;
    std::seed_seq s5(beg, end); // 即使是流输入迭代器
}
|output=
}}

===缺陷报告===
{{dr list begin}}
{{dr list item|wg=lwg|dr=2180|std=C++11|before=所有构造函数都不会抛出异常|after=只有重载 {{vl|1}} 不会抛出异常}}
{{dr list item|wg=lwg|dr=3422|std=C++11|before=1. 重载 {{vl|1}} 不是 noexcept&lt;br&gt;2. 重载 {{vl|4}} 没有被约束|after=1. 使之为 noexcept&lt;br&gt;2. 添加约束}}
{{dr list end}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
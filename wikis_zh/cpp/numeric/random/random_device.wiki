{{cpp/title|random_device}}
{{cpp/numeric/random/random_device/navbar}}
{{ddcl|header=random|since=c++11|1=
class random_device;
}}

{{tt|std::random_device}} 是生成非确定随机数的均匀分布整数随机数生成器。

{{tt|std::random_device}} 可以以实现定义的伪随机数引擎实现，若非确定源（例如硬件设备）对实现不可用。此情况下每个 {{ttt|std::random_device}} 对象可生成同一数值序列。

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|result_type}} {{mark c++11}}|{{co|unsigned int}}}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc h2|构造}}
{{dsc inc|cpp/numeric/random/engine/dsc constructor|random_device}}
{{dsc mem fun|nolink=true|operator{{=}}|notes={{mark|弃置}} {{mark c++11}}|赋值运算符被弃置}}

{{dsc h2|生成}}
{{dsc inc|cpp/numeric/random/engine/dsc operator()|random_device}}

{{dsc h2|特征}}
{{dsc inc|cpp/numeric/random/random_device/dsc entropy}}
{{dsc inc|cpp/numeric/random/engine/dsc min|random_device}}
{{dsc inc|cpp/numeric/random/engine/dsc max|random_device}}
{{dsc end}}

===注解===
在 MinGW-w64 的旧版本中，{{ttt|std::random_device}} 为确定性的实现（[https://sourceforge.net/p/mingw-w64/bugs/338/ 漏洞 338]，GCC 9.2 起修复）。最新的 MinGW-w64 可从 [https://gcc-mcf.lhmouse.com/ GCC with the MCF thread model] 下载。

===示例===
{{example
|code=
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;random&gt;
#include &lt;string&gt;

int main()
{
    std::random_device rd;
    std::map&lt;int, int&gt; hist;
    std::uniform_int_distribution&lt;int&gt; dist(0, 9);

    for (int n = 0; n != 20000; ++n)
        ++hist[dist(rd)]; // 注意：仅用于演示：一旦熵池耗尽，
                          // 许多 random_device 实现的性能就急剧下滑
                          // 对于实践使用，random_device 通常仅用于
                          // 播种类似 mt19937 的伪随机数生成器

    for (auto [x, y] : hist)
        std::cout &lt;&lt; x &lt;&lt; " : " &lt;&lt; std::string(y / 100, '*') &lt;&lt; '\n';
}
|p=true
|output=
0 : ********************
1 : *******************
2 : ********************
3 : ********************
4 : ********************
5 : *******************
6 : ********************
7 : ********************
8 : *******************
9 : ********************
}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}
{{cpp/title|fisher_f_distribution}}
{{cpp/numeric/random/fisher_f_distribution/navbar}}
{{ddcl|header=random|since=c++11|1=
template&lt; class RealType = double &gt;
class fisher_f_distribution;
}}

产生随机数，服从 {{enwiki|F-distribution|F 分布}}：

:{{mathjax-or|1=\(P(x;m,n)=\frac{\Gamma{(\frac{m+n}{2})} }{\Gamma{(\frac{m}{2})}\Gamma{(\frac{n}{2})} }{(\frac{m}{n})}^{\frac{m}{2} }x^{\frac{m}{2}-1}{(1+\frac{m}{n}x)}^{-\frac{m+n}{2} }\)|2=P(x;m,n) = {{mfrac||Γ((m+n)/2)|Γ(m/2) Γ(n/2) }} (m/n){{su|p=m/2}} x{{su|p=(m/2)-1}} (1+{{mfrac||mx|n}}){{su|p=-(m+n)/2}}}}

{{mathjax-or|\(\small m\)|m}} 和 {{mathjax-or|\(\small n\)|n}} 是{{enwiki|degrees of freedom (statistics)|自由度}}。

{{ttt|std::fisher_f_distribution}} 满足{{named req|RandomNumberDistribution}}的所有要求。

===模板形参===
{{par begin}}
{{cpp/numeric/random/param_list|RealType}}
{{par end}}

===成员类型===
{{dsc begin}}
{{dsc hitem|成员类型|定义}}
{{dsc|{{tt|result_type}} {{mark c++11}}|{{co|RealType}}}}
{{cpp/numeric/random/param_type}}
{{dsc end}}

===成员函数===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc constructor|fisher_f_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc reset|fisher_f_distribution}}

{{dsc h2|生成}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator()|fisher_f_distribution}}

{{dsc h2|特征}}
{{dsc inc|cpp/numeric/random/distribution/dsc params|fisher_f_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc param|fisher_f_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc min|fisher_f_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc max|fisher_f_distribution}}
{{dsc end}}

===非成员函数===
{{dsc begin}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_cmp|fisher_f_distribution}}
{{dsc inc|cpp/numeric/random/distribution/dsc operator_ltltgtgt|fisher_f_distribution}}
{{dsc end}}

===示例===
{{example
|code=
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;random&gt;
#include &lt;vector&gt;

{{cpp/numeric/draw_vbars}}

int main()
{
    std::random_device rd{};
    std::mt19937 gen{rd()};

    auto fisher = [&amp;gen](const float d1, const float d2)
    {
        std::fisher_f_distribution&lt;float&gt; d{d1 /* m */, d2 /* n */};

        const int norm = 1'00'00;
        const float cutoff = 0.002f;

        std::map&lt;int, int&gt; hist{};
        for (int n = 0; n != norm; ++n)
            ++hist[std::round(d(gen))];

        std::vector&lt;float&gt; bars;
        std::vector&lt;int&gt; indices;
        for (auto const&amp; [n, p] : hist)
            if (float x = p * (1.0 / norm); cutoff &lt; x)
            {
                bars.push_back(x);
                indices.push_back(n);
            }

        std::cout &lt;&lt; "d₁ = " &lt;&lt; d1 &lt;&lt; ", d₂ = " &lt;&lt; d2 &lt;&lt; ":\n";
        for (draw_vbars&lt;4, 3&gt;(bars); int n : indices)
            std::cout &lt;&lt; std::setw(2) &lt;&lt; n &lt;&lt; "  ";
        std::cout &lt;&lt; "\n\n";
    };

    fisher(/* d₁ = */ 1.0f, /* d₂ = */ 5.0f);
    fisher(/* d₁ = */ 15.0f, /* d₂ = */ 10.f);
    fisher(/* d₁ = */ 100.0f, /* d₂ = */ 3.0f);
}
|p=true
|output=&lt;nowiki/&gt;
d₁ = 1, d₂ = 5:
███                                                     ┬ 0.4956
███                                                     │
███ ▇▇▇                                                 │
███ ███ ▇▇▇ ▄▄▄ ▂▂▂ ▂▂▂ ▁▁▁ ▁▁▁ ▁▁▁ ▁▁▁ ▁▁▁ ▁▁▁ ▁▁▁ ▁▁▁ ┴ 0.0021
 0   1   2   3   4   5   6   7   8   9  10  11  12  14

d₁ = 15, d₂ = 10:
    ███                     ┬ 0.6252
    ███                     │
    ███ ▂▂▂                 │
▆▆▆ ███ ███ ▃▃▃ ▁▁▁ ▁▁▁ ▁▁▁ ┴ 0.0023
 0   1   2   3   4   5   6

d₁ = 100, d₂ = 3:
    ███                                                             ┬ 0.4589
    ███                                                             │
▁▁▁ ███ ▅▅▅                                                         │
███ ███ ███ ▆▆▆ ▃▃▃ ▂▂▂ ▂▂▂ ▁▁▁ ▁▁▁ ▁▁▁ ▁▁▁ ▁▁▁ ▁▁▁ ▁▁▁ ▁▁▁ ▁▁▁ ▁▁▁ ┴ 0.0021
 0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16

}}

===外部链接===
{{eli|[https://mathworld.wolfram.com/F-Distribution.html Weisstein, Eric W. “F 分布”]来自 MathWorld--A Wolfram Web Resource。}}

{{langlinks|de|en|es|fr|it|ja|pt|ru}}